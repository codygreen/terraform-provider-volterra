//
// Copyright (c) 2018 Volterra, Inc. All rights reserved.
// Code generated by ves-gen-schema-go. DO NOT EDIT.
//
package namespace

import (
	"context"
	"fmt"
	"strings"

	"github.com/gogo/protobuf/proto"

	"gopkg.volterra.us/stdlib/codec"
	"gopkg.volterra.us/stdlib/db"
	"gopkg.volterra.us/stdlib/errors"
)

var (
	// dummy imports in case file has no message with Refs
	_ db.Interface
	_ = errors.Wrap
	_ = strings.Split
)

// augmented methods on protoc/std generated struct

func (m *CascadeDeleteItemType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *CascadeDeleteItemType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *CascadeDeleteItemType) DeepCopy() *CascadeDeleteItemType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &CascadeDeleteItemType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *CascadeDeleteItemType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *CascadeDeleteItemType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return CascadeDeleteItemTypeValidator().Validate(ctx, m, opts...)
}

type ValidateCascadeDeleteItemType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateCascadeDeleteItemType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*CascadeDeleteItemType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *CascadeDeleteItemType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["error_message"]; exists {

		vOpts := append(opts, db.WithValidateField("error_message"))
		if err := fv(ctx, m.GetErrorMessage(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["object_name"]; exists {

		vOpts := append(opts, db.WithValidateField("object_name"))
		if err := fv(ctx, m.GetObjectName(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["object_type"]; exists {

		vOpts := append(opts, db.WithValidateField("object_type"))
		if err := fv(ctx, m.GetObjectType(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["object_uid"]; exists {

		vOpts := append(opts, db.WithValidateField("object_uid"))
		if err := fv(ctx, m.GetObjectUid(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultCascadeDeleteItemTypeValidator = func() *ValidateCascadeDeleteItemType {
	v := &ValidateCascadeDeleteItemType{FldValidators: map[string]db.ValidatorFunc{}}

	return v
}()

func CascadeDeleteItemTypeValidator() db.Validator {
	return DefaultCascadeDeleteItemTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *CascadeDeleteRequest) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *CascadeDeleteRequest) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *CascadeDeleteRequest) DeepCopy() *CascadeDeleteRequest {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &CascadeDeleteRequest{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *CascadeDeleteRequest) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *CascadeDeleteRequest) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return CascadeDeleteRequestValidator().Validate(ctx, m, opts...)
}

type ValidateCascadeDeleteRequest struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateCascadeDeleteRequest) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*CascadeDeleteRequest)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *CascadeDeleteRequest got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["name"]; exists {

		vOpts := append(opts, db.WithValidateField("name"))
		if err := fv(ctx, m.GetName(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultCascadeDeleteRequestValidator = func() *ValidateCascadeDeleteRequest {
	v := &ValidateCascadeDeleteRequest{FldValidators: map[string]db.ValidatorFunc{}}

	return v
}()

func CascadeDeleteRequestValidator() db.Validator {
	return DefaultCascadeDeleteRequestValidator
}

// augmented methods on protoc/std generated struct

func (m *CascadeDeleteResponse) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *CascadeDeleteResponse) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *CascadeDeleteResponse) DeepCopy() *CascadeDeleteResponse {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &CascadeDeleteResponse{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *CascadeDeleteResponse) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *CascadeDeleteResponse) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return CascadeDeleteResponseValidator().Validate(ctx, m, opts...)
}

type ValidateCascadeDeleteResponse struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateCascadeDeleteResponse) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*CascadeDeleteResponse)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *CascadeDeleteResponse got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["items"]; exists {

		vOpts := append(opts, db.WithValidateField("items"))
		for idx, item := range m.GetItems() {
			vOpts := append(vOpts, db.WithValidateRepItem(idx))
			if err := fv(ctx, item, vOpts...); err != nil {
				return err
			}
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultCascadeDeleteResponseValidator = func() *ValidateCascadeDeleteResponse {
	v := &ValidateCascadeDeleteResponse{FldValidators: map[string]db.ValidatorFunc{}}

	return v
}()

func CascadeDeleteResponseValidator() db.Validator {
	return DefaultCascadeDeleteResponseValidator
}
