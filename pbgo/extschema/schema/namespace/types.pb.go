// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ves.io/schema/namespace/types.proto

package namespace

import proto "github.com/gogo/protobuf/proto"
import golang_proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"
import _ "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
import ves_io_schema4 "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
import _ "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"

import strings "strings"
import reflect "reflect"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Sub CA Usage
//
// x-displayName: "Sub CA"
// Sub CA information.
type SubCA struct {
	// Name
	//
	// x-displayName: "Name"
	// x-required
	// Name for this CA
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// CA PEM
	//
	// x-displayName: "PEM encoded certificate for"
	// x-required
	// PEM encoded certificate
	Pem string `protobuf:"bytes,2,opt,name=pem,proto3" json:"pem,omitempty"`
	// Private Key
	//
	// x-displayName: "Private Key"
	// x-required
	// Private Key for CA
	PrivateKey *ves_io_schema4.SecretType `protobuf:"bytes,3,opt,name=private_key,json=privateKey" json:"private_key,omitempty"`
	// Version
	//
	// x-displayName: "Version"
	// Certificate version
	Version uint32 `protobuf:"varint,4,opt,name=version,proto3" json:"version,omitempty"`
}

func (m *SubCA) Reset()                    { *m = SubCA{} }
func (*SubCA) ProtoMessage()               {}
func (*SubCA) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{0} }

func (m *SubCA) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *SubCA) GetPem() string {
	if m != nil {
		return m.Pem
	}
	return ""
}

func (m *SubCA) GetPrivateKey() *ves_io_schema4.SecretType {
	if m != nil {
		return m.PrivateKey
	}
	return nil
}

func (m *SubCA) GetVersion() uint32 {
	if m != nil {
		return m.Version
	}
	return 0
}

// GlobalSpecType
//
// x-displayName: "Global Specification"
// This is the shape of the namespace representation in the database at Global Controller
type GlobalSpecType struct {
	// Proxy Sub CAs
	//
	// Array of SubCAs, the latest one will be used for proxy feature.
	// x-displayName: "Proxy Sub CAs"
	ProxySubCas []*SubCA `protobuf:"bytes,1,rep,name=proxy_sub_cas,json=proxySubCas" json:"proxy_sub_cas,omitempty"`
	// Proxy Sub CA Version
	//
	// SubCA version which is the latest and will be used for proxy feature.
	// x-displayName: "Proxy Sub CA Version"
	ProxySubCaLatestVersion uint32 `protobuf:"varint,2,opt,name=proxy_sub_ca_latest_version,json=proxySubCaLatestVersion,proto3" json:"proxy_sub_ca_latest_version,omitempty"`
}

func (m *GlobalSpecType) Reset()                    { *m = GlobalSpecType{} }
func (*GlobalSpecType) ProtoMessage()               {}
func (*GlobalSpecType) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{1} }

func (m *GlobalSpecType) GetProxySubCas() []*SubCA {
	if m != nil {
		return m.ProxySubCas
	}
	return nil
}

func (m *GlobalSpecType) GetProxySubCaLatestVersion() uint32 {
	if m != nil {
		return m.ProxySubCaLatestVersion
	}
	return 0
}

// Create namespace
//
// x-displayName: "Create Namespace"
// Creates a new namespace. Name of the object is name of the name space.
type CreateSpecType struct {
}

func (m *CreateSpecType) Reset()                    { *m = CreateSpecType{} }
func (*CreateSpecType) ProtoMessage()               {}
func (*CreateSpecType) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{2} }

// Replace namespace
//
// x-displayName: "Replace Namespace"
// Replaces attributes of a namespace including its metadata like labels, description etc.
type ReplaceSpecType struct {
}

func (m *ReplaceSpecType) Reset()                    { *m = ReplaceSpecType{} }
func (*ReplaceSpecType) ProtoMessage()               {}
func (*ReplaceSpecType) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{3} }

// Get namespace
//
// x-displayName: "Get Namespace"
// This is the read representation of the namespace object.
type GetSpecType struct {
}

func (m *GetSpecType) Reset()                    { *m = GetSpecType{} }
func (*GetSpecType) ProtoMessage()               {}
func (*GetSpecType) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{4} }

func init() {
	proto.RegisterType((*SubCA)(nil), "ves.io.schema.namespace.SubCA")
	golang_proto.RegisterType((*SubCA)(nil), "ves.io.schema.namespace.SubCA")
	proto.RegisterType((*GlobalSpecType)(nil), "ves.io.schema.namespace.GlobalSpecType")
	golang_proto.RegisterType((*GlobalSpecType)(nil), "ves.io.schema.namespace.GlobalSpecType")
	proto.RegisterType((*CreateSpecType)(nil), "ves.io.schema.namespace.CreateSpecType")
	golang_proto.RegisterType((*CreateSpecType)(nil), "ves.io.schema.namespace.CreateSpecType")
	proto.RegisterType((*ReplaceSpecType)(nil), "ves.io.schema.namespace.ReplaceSpecType")
	golang_proto.RegisterType((*ReplaceSpecType)(nil), "ves.io.schema.namespace.ReplaceSpecType")
	proto.RegisterType((*GetSpecType)(nil), "ves.io.schema.namespace.GetSpecType")
	golang_proto.RegisterType((*GetSpecType)(nil), "ves.io.schema.namespace.GetSpecType")
}
func (this *SubCA) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SubCA)
	if !ok {
		that2, ok := that.(SubCA)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Pem != that1.Pem {
		return false
	}
	if !this.PrivateKey.Equal(that1.PrivateKey) {
		return false
	}
	if this.Version != that1.Version {
		return false
	}
	return true
}
func (this *GlobalSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType)
	if !ok {
		that2, ok := that.(GlobalSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.ProxySubCas) != len(that1.ProxySubCas) {
		return false
	}
	for i := range this.ProxySubCas {
		if !this.ProxySubCas[i].Equal(that1.ProxySubCas[i]) {
			return false
		}
	}
	if this.ProxySubCaLatestVersion != that1.ProxySubCaLatestVersion {
		return false
	}
	return true
}
func (this *CreateSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType)
	if !ok {
		that2, ok := that.(CreateSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *ReplaceSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType)
	if !ok {
		that2, ok := that.(ReplaceSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *GetSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType)
	if !ok {
		that2, ok := that.(GetSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *SubCA) goString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&namespace.SubCA{")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "Pem: "+fmt.Sprintf("%#v", this.Pem)+",\n")
	if this.PrivateKey != nil {
		s = append(s, "PrivateKey: "+fmt.Sprintf("%#v", this.PrivateKey)+",\n")
	}
	s = append(s, "Version: "+fmt.Sprintf("%#v", this.Version)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GlobalSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&namespace.GlobalSpecType{")
	if this.ProxySubCas != nil {
		s = append(s, "ProxySubCas: "+fmt.Sprintf("%#v", this.ProxySubCas)+",\n")
	}
	s = append(s, "ProxySubCaLatestVersion: "+fmt.Sprintf("%#v", this.ProxySubCaLatestVersion)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CreateSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&namespace.CreateSpecType{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ReplaceSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&namespace.ReplaceSpecType{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&namespace.GetSpecType{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringTypes(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *SubCA) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SubCA) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.Pem) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Pem)))
		i += copy(dAtA[i:], m.Pem)
	}
	if m.PrivateKey != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.PrivateKey.Size()))
		n1, err := m.PrivateKey.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.Version != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.Version))
	}
	return i, nil
}

func (m *GlobalSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GlobalSpecType) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ProxySubCas) > 0 {
		for _, msg := range m.ProxySubCas {
			dAtA[i] = 0xa
			i++
			i = encodeVarintTypes(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.ProxySubCaLatestVersion != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.ProxySubCaLatestVersion))
	}
	return i, nil
}

func (m *CreateSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateSpecType) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *ReplaceSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplaceSpecType) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *GetSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetSpecType) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func encodeVarintTypes(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *SubCA) Size() (n int) {
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.Pem)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.PrivateKey != nil {
		l = m.PrivateKey.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.Version != 0 {
		n += 1 + sovTypes(uint64(m.Version))
	}
	return n
}

func (m *GlobalSpecType) Size() (n int) {
	var l int
	_ = l
	if len(m.ProxySubCas) > 0 {
		for _, e := range m.ProxySubCas {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if m.ProxySubCaLatestVersion != 0 {
		n += 1 + sovTypes(uint64(m.ProxySubCaLatestVersion))
	}
	return n
}

func (m *CreateSpecType) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *ReplaceSpecType) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *GetSpecType) Size() (n int) {
	var l int
	_ = l
	return n
}

func sovTypes(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozTypes(x uint64) (n int) {
	return sovTypes(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *SubCA) string() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SubCA{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Pem:` + fmt.Sprintf("%v", this.Pem) + `,`,
		`PrivateKey:` + strings.Replace(fmt.Sprintf("%v", this.PrivateKey), "SecretType", "ves_io_schema4.SecretType", 1) + `,`,
		`Version:` + fmt.Sprintf("%v", this.Version) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType{`,
		`ProxySubCas:` + strings.Replace(fmt.Sprintf("%v", this.ProxySubCas), "SubCA", "SubCA", 1) + `,`,
		`ProxySubCaLatestVersion:` + fmt.Sprintf("%v", this.ProxySubCaLatestVersion) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType{`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType{`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType{`,
		`}`,
	}, "")
	return s
}
func valueToStringTypes(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *SubCA) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SubCA: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SubCA: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pem", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pem = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrivateKey", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PrivateKey == nil {
				m.PrivateKey = &ves_io_schema4.SecretType{}
			}
			if err := m.PrivateKey.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			m.Version = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Version |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GlobalSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GlobalSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GlobalSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProxySubCas", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProxySubCas = append(m.ProxySubCas, &SubCA{})
			if err := m.ProxySubCas[len(m.ProxySubCas)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProxySubCaLatestVersion", wireType)
			}
			m.ProxySubCaLatestVersion = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ProxySubCaLatestVersion |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplaceSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplaceSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplaceSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTypes(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthTypes
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipTypes(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthTypes = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTypes   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("ves.io/schema/namespace/types.proto", fileDescriptorTypes) }
func init() { golang_proto.RegisterFile("ves.io/schema/namespace/types.proto", fileDescriptorTypes) }

var fileDescriptorTypes = []byte{
	// 482 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x92, 0x31, 0x6f, 0xd3, 0x40,
	0x14, 0xc7, 0x73, 0x71, 0x0a, 0xe2, 0xa2, 0x16, 0x30, 0x43, 0xdd, 0x14, 0x9d, 0xac, 0x14, 0x44,
	0x96, 0x9c, 0xa5, 0xb2, 0x21, 0x04, 0x22, 0x1d, 0x3a, 0x00, 0x12, 0x72, 0x10, 0x03, 0x8b, 0x75,
	0x76, 0x5f, 0x5d, 0xab, 0x76, 0xee, 0x74, 0x77, 0xb6, 0xea, 0x01, 0xa9, 0x82, 0x2f, 0x80, 0xf8,
	0x14, 0xcc, 0x8c, 0x4c, 0x1d, 0x2b, 0xa6, 0x8e, 0x1d, 0x89, 0xbb, 0xc0, 0xd6, 0x8f, 0x80, 0x7c,
	0x49, 0x68, 0x5d, 0xa9, 0xdd, 0xde, 0xd3, 0xff, 0xf7, 0xbf, 0xf7, 0xbf, 0xa7, 0x87, 0x37, 0x0a,
	0x50, 0x34, 0xe1, 0x9e, 0x8a, 0xf6, 0x20, 0x63, 0xde, 0x84, 0x65, 0xa0, 0x04, 0x8b, 0xc0, 0xd3,
	0xa5, 0x00, 0x45, 0x85, 0xe4, 0x9a, 0xdb, 0xab, 0x33, 0x88, 0xce, 0x20, 0xfa, 0x1f, 0xea, 0x0d,
	0xe3, 0x44, 0xef, 0xe5, 0x21, 0x8d, 0x78, 0xe6, 0xc5, 0x3c, 0xe6, 0x9e, 0xe1, 0xc3, 0x7c, 0xd7,
	0x74, 0xa6, 0x31, 0xd5, 0xec, 0x9d, 0xde, 0x7a, 0x73, 0x18, 0x17, 0x3a, 0xe1, 0x93, 0xf9, 0x90,
	0xde, 0x5a, 0x53, 0xbc, 0x34, 0xbf, 0xf7, 0xb0, 0x29, 0x15, 0x2c, 0x4d, 0x76, 0x98, 0x86, 0x99,
	0xda, 0xff, 0x81, 0xf0, 0xd2, 0x38, 0x0f, 0xb7, 0x5e, 0xd9, 0x4f, 0x70, 0xa7, 0xce, 0xe6, 0x20,
	0x17, 0x0d, 0xee, 0x8c, 0x1e, 0xfc, 0xfc, 0x7b, 0x64, 0x2d, 0x49, 0xcb, 0xf9, 0xdc, 0xa9, 0xab,
	0x8e, 0x6c, 0xdf, 0x43, 0xbe, 0x01, 0xec, 0xc7, 0xd8, 0x12, 0x90, 0x39, 0xed, 0x26, 0x77, 0xf8,
	0xee, 0x82, 0xab, 0x75, 0xfb, 0x25, 0xee, 0x0a, 0x99, 0x14, 0x4c, 0x43, 0xb0, 0x0f, 0xa5, 0x63,
	0xb9, 0x68, 0xd0, 0xdd, 0x5c, 0xa3, 0xcd, 0x6d, 0x8c, 0x21, 0x92, 0xa0, 0xdf, 0x97, 0x02, 0x46,
	0xd6, 0xf1, 0x27, 0xe4, 0xe3, 0xb9, 0xe5, 0x35, 0x94, 0xb6, 0x83, 0x6f, 0x17, 0x20, 0x55, 0xc2,
	0x27, 0x4e, 0xc7, 0x45, 0x83, 0x65, 0x7f, 0xd1, 0xf6, 0xbf, 0x21, 0xbc, 0xb2, 0x9d, 0xf2, 0x90,
	0xa5, 0x63, 0x01, 0x51, 0xed, 0xb6, 0x47, 0x78, 0x59, 0x48, 0x7e, 0x50, 0x06, 0x2a, 0x0f, 0x83,
	0x88, 0x29, 0x07, 0xb9, 0xd6, 0xa0, 0xbb, 0x49, 0xe8, 0x35, 0xdb, 0xa7, 0xe6, 0xd3, 0x7e, 0xd7,
	0x98, 0xea, 0x9a, 0x29, 0xfb, 0x39, 0x5e, 0xbf, 0xfc, 0x46, 0x90, 0x32, 0x0d, 0x4a, 0x07, 0x8b,
	0x10, 0x6d, 0x13, 0x62, 0xf5, 0xc2, 0xf1, 0xc6, 0xe8, 0x1f, 0xe6, 0xa1, 0x36, 0xf0, 0xca, 0x96,
	0x04, 0xa6, 0x61, 0x91, 0xe9, 0xd9, 0xfd, 0x5f, 0x2f, 0xae, 0xc4, 0xec, 0x3f, 0xc2, 0x77, 0x7d,
	0x10, 0x29, 0x8b, 0x6e, 0xa4, 0x5c, 0xdc, 0xdd, 0x06, 0x7d, 0x03, 0x31, 0xfa, 0x82, 0x4e, 0xa6,
	0xa4, 0x75, 0x3a, 0x25, 0xad, 0xf3, 0x29, 0x41, 0x87, 0x15, 0x41, 0xdf, 0x2b, 0x82, 0x8e, 0x2b,
	0x82, 0x4e, 0x2a, 0x82, 0x4e, 0x2b, 0x82, 0x7e, 0x57, 0x04, 0xfd, 0xa9, 0x48, 0xeb, 0xbc, 0x22,
	0xe8, 0xeb, 0x19, 0x69, 0x1d, 0x9d, 0x11, 0xf4, 0xf1, 0x6d, 0xcc, 0xc5, 0x7e, 0x4c, 0x0b, 0x9e,
	0x6a, 0x90, 0x92, 0xd1, 0x5c, 0x79, 0xa6, 0xd8, 0xe5, 0x32, 0x1b, 0x0a, 0xc9, 0x8b, 0x64, 0x07,
	0xe4, 0x70, 0x21, 0x7b, 0x22, 0x8c, 0xb9, 0x07, 0x07, 0x7a, 0x7e, 0x3a, 0x57, 0xcf, 0x3c, 0xbc,
	0x65, 0x6e, 0xe8, 0xe9, 0xbf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x17, 0x8d, 0x2c, 0xf1, 0x08, 0x03,
	0x00, 0x00,
}
