// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ves.io/schema/namespace/public_customapi.proto

package namespace

import (
	proto "github.com/gogo/protobuf/proto"
	golang_proto "github.com/golang/protobuf/proto"

	fmt "fmt"

	math "math"

	_ "github.com/gogo/protobuf/gogoproto"

	_ "github.com/gogo/googleapis/google/api"

	_ "gopkg.volterra.us/terraform-provider-volterra/pbgo/extschema/schema"

	_ "gopkg.volterra.us/terraform-provider-volterra/pbgo/extschema/schema"

	_ "gopkg.volterra.us/terraform-provider-volterra/pbgo/extschema/schema"

	_ "gopkg.volterra.us/terraform-provider-volterra/pbgo/extschema/schema/vesenv"

	strings "strings"

	reflect "reflect"

	context "golang.org/x/net/context"

	grpc "google.golang.org/grpc"

	io "io"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// CascadeDeleteRequest
//
// x-displayName: "Cascade Delete Request"
// CascadeDeleteRequest contains the name of the namespace that has to be deleted
// along with the objects configured under the namespace
type CascadeDeleteRequest struct {
	// name
	//
	// x-displayName: "Name"
	// x-example: "value"
	// The name of the namespace
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (m *CascadeDeleteRequest) Reset()      { *m = CascadeDeleteRequest{} }
func (*CascadeDeleteRequest) ProtoMessage() {}
func (*CascadeDeleteRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorPublicCustomapi, []int{0}
}

func (m *CascadeDeleteRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

// CascadeDeleteResponse
//
// x-displayName: "Cascade Delete Response"
// CascadeDeleteResponse contains a list of objects in the namespace that were
// deleted (or encountered an error while deleting)
type CascadeDeleteResponse struct {
	// items
	//
	// x-displayName: "Items"
	// The objects deleted in namespace
	Items []*CascadeDeleteItemType `protobuf:"bytes,1,rep,name=items" json:"items,omitempty"`
}

func (m *CascadeDeleteResponse) Reset()      { *m = CascadeDeleteResponse{} }
func (*CascadeDeleteResponse) ProtoMessage() {}
func (*CascadeDeleteResponse) Descriptor() ([]byte, []int) {
	return fileDescriptorPublicCustomapi, []int{1}
}

func (m *CascadeDeleteResponse) GetItems() []*CascadeDeleteItemType {
	if m != nil {
		return m.Items
	}
	return nil
}

// CascadeDeleteItemType
//
// x-displayName: "Cascade Delete Item"
// CascadeDeleteItemType is details of object that was handled as part of cascade delete
// of namespace and whether it was successfully deleted
type CascadeDeleteItemType struct {
	// object_type
	//
	// x-displayName: "Type"
	// x-example: "ves.io.schema.virtual_host.Object"
	// The type of the contained configuration object in the namespace that was deleted
	ObjectType string `protobuf:"bytes,1,opt,name=object_type,json=objectType,proto3" json:"object_type,omitempty"`
	// object_uid
	//
	// x-displayName: "UID"
	// x-example: "value"
	// The UID identifier of the configuration object that was deleted
	ObjectUid string `protobuf:"bytes,2,opt,name=object_uid,json=objectUid,proto3" json:"object_uid,omitempty"`
	// object_name
	//
	// x-displayName: "Name"
	// x-example: "value"
	// Name of the configuration object that was deleted
	ObjectName string `protobuf:"bytes,3,opt,name=object_name,json=objectName,proto3" json:"object_name,omitempty"`
	// error_message
	//
	// x-displayName: "Error"
	// x-example: "value"
	// A description of the error encountered (if any) in the process of cascade deletion
	ErrorMessage string `protobuf:"bytes,4,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`
}

func (m *CascadeDeleteItemType) Reset()      { *m = CascadeDeleteItemType{} }
func (*CascadeDeleteItemType) ProtoMessage() {}
func (*CascadeDeleteItemType) Descriptor() ([]byte, []int) {
	return fileDescriptorPublicCustomapi, []int{2}
}

func (m *CascadeDeleteItemType) GetObjectType() string {
	if m != nil {
		return m.ObjectType
	}
	return ""
}

func (m *CascadeDeleteItemType) GetObjectUid() string {
	if m != nil {
		return m.ObjectUid
	}
	return ""
}

func (m *CascadeDeleteItemType) GetObjectName() string {
	if m != nil {
		return m.ObjectName
	}
	return ""
}

func (m *CascadeDeleteItemType) GetErrorMessage() string {
	if m != nil {
		return m.ErrorMessage
	}
	return ""
}

func init() {
	proto.RegisterType((*CascadeDeleteRequest)(nil), "ves.io.schema.namespace.CascadeDeleteRequest")
	golang_proto.RegisterType((*CascadeDeleteRequest)(nil), "ves.io.schema.namespace.CascadeDeleteRequest")
	proto.RegisterType((*CascadeDeleteResponse)(nil), "ves.io.schema.namespace.CascadeDeleteResponse")
	golang_proto.RegisterType((*CascadeDeleteResponse)(nil), "ves.io.schema.namespace.CascadeDeleteResponse")
	proto.RegisterType((*CascadeDeleteItemType)(nil), "ves.io.schema.namespace.CascadeDeleteItemType")
	golang_proto.RegisterType((*CascadeDeleteItemType)(nil), "ves.io.schema.namespace.CascadeDeleteItemType")
}
func (this *CascadeDeleteRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CascadeDeleteRequest)
	if !ok {
		that2, ok := that.(CascadeDeleteRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	return true
}
func (this *CascadeDeleteResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CascadeDeleteResponse)
	if !ok {
		that2, ok := that.(CascadeDeleteResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Items) != len(that1.Items) {
		return false
	}
	for i := range this.Items {
		if !this.Items[i].Equal(that1.Items[i]) {
			return false
		}
	}
	return true
}
func (this *CascadeDeleteItemType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CascadeDeleteItemType)
	if !ok {
		that2, ok := that.(CascadeDeleteItemType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ObjectType != that1.ObjectType {
		return false
	}
	if this.ObjectUid != that1.ObjectUid {
		return false
	}
	if this.ObjectName != that1.ObjectName {
		return false
	}
	if this.ErrorMessage != that1.ErrorMessage {
		return false
	}
	return true
}
func (this *CascadeDeleteRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&namespace.CascadeDeleteRequest{")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CascadeDeleteResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&namespace.CascadeDeleteResponse{")
	if this.Items != nil {
		s = append(s, "Items: "+fmt.Sprintf("%#v", this.Items)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CascadeDeleteItemType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&namespace.CascadeDeleteItemType{")
	s = append(s, "ObjectType: "+fmt.Sprintf("%#v", this.ObjectType)+",\n")
	s = append(s, "ObjectUid: "+fmt.Sprintf("%#v", this.ObjectUid)+",\n")
	s = append(s, "ObjectName: "+fmt.Sprintf("%#v", this.ObjectName)+",\n")
	s = append(s, "ErrorMessage: "+fmt.Sprintf("%#v", this.ErrorMessage)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringPublicCustomapi(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for CustomAPI service

type CustomAPIClient interface {
	// CascadeDelete
	//
	// x-displayName: "Cascade Delete"
	// CascadeDelete will delete the namespace and all configuration objects like virtual_hosts etc.
	// under it. Use this only if the entire namespace and its contents are to be wiped out.
	// DEPRECATED by request/approve APIs as above. this will be made private.
	CascadeDelete(ctx context.Context, in *CascadeDeleteRequest, opts ...grpc.CallOption) (*CascadeDeleteResponse, error)
}

type customAPIClient struct {
	cc *grpc.ClientConn
}

func NewCustomAPIClient(cc *grpc.ClientConn) CustomAPIClient {
	return &customAPIClient{cc}
}

func (c *customAPIClient) CascadeDelete(ctx context.Context, in *CascadeDeleteRequest, opts ...grpc.CallOption) (*CascadeDeleteResponse, error) {
	out := new(CascadeDeleteResponse)
	err := grpc.Invoke(ctx, "/ves.io.schema.namespace.CustomAPI/CascadeDelete", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for CustomAPI service

type CustomAPIServer interface {
	// CascadeDelete
	//
	// x-displayName: "Cascade Delete"
	// CascadeDelete will delete the namespace and all configuration objects like virtual_hosts etc.
	// under it. Use this only if the entire namespace and its contents are to be wiped out.
	// DEPRECATED by request/approve APIs as above. this will be made private.
	CascadeDelete(context.Context, *CascadeDeleteRequest) (*CascadeDeleteResponse, error)
}

func RegisterCustomAPIServer(s *grpc.Server, srv CustomAPIServer) {
	s.RegisterService(&_CustomAPI_serviceDesc, srv)
}

func _CustomAPI_CascadeDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CascadeDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomAPIServer).CascadeDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ves.io.schema.namespace.CustomAPI/CascadeDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomAPIServer).CascadeDelete(ctx, req.(*CascadeDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _CustomAPI_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ves.io.schema.namespace.CustomAPI",
	HandlerType: (*CustomAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CascadeDelete",
			Handler:    _CustomAPI_CascadeDelete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ves.io/schema/namespace/public_customapi.proto",
}

func (m *CascadeDeleteRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CascadeDeleteRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPublicCustomapi(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	return i, nil
}

func (m *CascadeDeleteResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CascadeDeleteResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Items) > 0 {
		for _, msg := range m.Items {
			dAtA[i] = 0xa
			i++
			i = encodeVarintPublicCustomapi(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *CascadeDeleteItemType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CascadeDeleteItemType) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ObjectType) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPublicCustomapi(dAtA, i, uint64(len(m.ObjectType)))
		i += copy(dAtA[i:], m.ObjectType)
	}
	if len(m.ObjectUid) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintPublicCustomapi(dAtA, i, uint64(len(m.ObjectUid)))
		i += copy(dAtA[i:], m.ObjectUid)
	}
	if len(m.ObjectName) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintPublicCustomapi(dAtA, i, uint64(len(m.ObjectName)))
		i += copy(dAtA[i:], m.ObjectName)
	}
	if len(m.ErrorMessage) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintPublicCustomapi(dAtA, i, uint64(len(m.ErrorMessage)))
		i += copy(dAtA[i:], m.ErrorMessage)
	}
	return i, nil
}

func encodeVarintPublicCustomapi(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *CascadeDeleteRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	return n
}

func (m *CascadeDeleteResponse) Size() (n int) {
	var l int
	_ = l
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovPublicCustomapi(uint64(l))
		}
	}
	return n
}

func (m *CascadeDeleteItemType) Size() (n int) {
	var l int
	_ = l
	l = len(m.ObjectType)
	if l > 0 {
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	l = len(m.ObjectUid)
	if l > 0 {
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	l = len(m.ObjectName)
	if l > 0 {
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	l = len(m.ErrorMessage)
	if l > 0 {
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	return n
}

func sovPublicCustomapi(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozPublicCustomapi(x uint64) (n int) {
	return sovPublicCustomapi(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *CascadeDeleteRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CascadeDeleteRequest{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CascadeDeleteResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CascadeDeleteResponse{`,
		`Items:` + strings.Replace(fmt.Sprintf("%v", this.Items), "CascadeDeleteItemType", "CascadeDeleteItemType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CascadeDeleteItemType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CascadeDeleteItemType{`,
		`ObjectType:` + fmt.Sprintf("%v", this.ObjectType) + `,`,
		`ObjectUid:` + fmt.Sprintf("%v", this.ObjectUid) + `,`,
		`ObjectName:` + fmt.Sprintf("%v", this.ObjectName) + `,`,
		`ErrorMessage:` + fmt.Sprintf("%v", this.ErrorMessage) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringPublicCustomapi(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *CascadeDeleteRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCustomapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CascadeDeleteRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CascadeDeleteRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCustomapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CascadeDeleteResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCustomapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CascadeDeleteResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CascadeDeleteResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &CascadeDeleteItemType{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCustomapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CascadeDeleteItemType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCustomapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CascadeDeleteItemType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CascadeDeleteItemType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjectType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ObjectType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjectUid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ObjectUid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjectName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ObjectName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorMessage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ErrorMessage = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCustomapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPublicCustomapi(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPublicCustomapi
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthPublicCustomapi
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowPublicCustomapi
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipPublicCustomapi(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthPublicCustomapi = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPublicCustomapi   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("ves.io/schema/namespace/public_customapi.proto", fileDescriptorPublicCustomapi)
}
func init() {
	golang_proto.RegisterFile("ves.io/schema/namespace/public_customapi.proto", fileDescriptorPublicCustomapi)
}

var fileDescriptorPublicCustomapi = []byte{
	// 532 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x93, 0x31, 0x6f, 0xd3, 0x40,
	0x14, 0xc7, 0x73, 0x49, 0x41, 0x8a, 0x4b, 0x17, 0xab, 0x08, 0x13, 0xca, 0x51, 0x99, 0x25, 0xaa,
	0xf0, 0x9d, 0x54, 0x36, 0x36, 0x68, 0x97, 0x0a, 0x15, 0x50, 0x04, 0x0b, 0x12, 0x8a, 0xce, 0xf6,
	0xab, 0x73, 0x60, 0xfb, 0x0e, 0xdf, 0xd9, 0x50, 0x21, 0x04, 0xea, 0x27, 0x40, 0x62, 0x66, 0xe7,
	0x3b, 0x64, 0xe9, 0x06, 0x13, 0xaa, 0x60, 0x61, 0x24, 0x2e, 0x03, 0x63, 0x37, 0x56, 0x94, 0xb3,
	0x43, 0xe3, 0x48, 0x95, 0xba, 0xbd, 0x7b, 0xff, 0xdf, 0x7b, 0x7a, 0xef, 0xe9, 0x7f, 0x16, 0x29,
	0x40, 0x11, 0x2e, 0xa8, 0x0a, 0x46, 0x90, 0x30, 0x9a, 0xb2, 0x04, 0x94, 0x64, 0x01, 0x50, 0x99,
	0xfb, 0x31, 0x0f, 0x86, 0x41, 0xae, 0xb4, 0x48, 0x98, 0xe4, 0x44, 0x66, 0x42, 0x0b, 0xfb, 0x4a,
	0xc5, 0x93, 0x8a, 0x27, 0xff, 0xf9, 0x9e, 0x17, 0x71, 0x3d, 0xca, 0x7d, 0x12, 0x88, 0x84, 0x46,
	0x22, 0x12, 0xd4, 0xf0, 0x7e, 0xbe, 0x67, 0x5e, 0xe6, 0x61, 0xa2, 0xaa, 0x4f, 0x6f, 0x2d, 0x12,
	0x22, 0x8a, 0x81, 0x32, 0xc9, 0x29, 0x4b, 0x53, 0xa1, 0x99, 0xe6, 0x22, 0x55, 0xb5, 0x7a, 0xad,
	0x39, 0x95, 0x90, 0xf3, 0xe2, 0xd5, 0xa6, 0xa8, 0xf7, 0x25, 0xcc, 0xa4, 0xb5, 0xa6, 0x54, 0xb0,
	0x98, 0x87, 0x4c, 0x43, 0xad, 0xba, 0x0b, 0x2a, 0x28, 0x48, 0x8b, 0x66, 0x73, 0x77, 0xc3, 0x5a,
	0xdd, 0x62, 0x2a, 0x60, 0x21, 0x6c, 0x43, 0x0c, 0x1a, 0x06, 0xf0, 0x32, 0x07, 0xa5, 0x6d, 0xdb,
	0x5a, 0x9a, 0xee, 0xea, 0xa0, 0x75, 0xd4, 0xef, 0x0e, 0x4c, 0xec, 0x3e, 0xb3, 0x2e, 0x2f, 0xb0,
	0x4a, 0x8a, 0x54, 0x81, 0xbd, 0x6d, 0x5d, 0xe0, 0x1a, 0x12, 0xe5, 0xa0, 0xf5, 0x4e, 0x7f, 0x79,
	0x93, 0x90, 0x33, 0x8e, 0x46, 0x1a, 0xe5, 0x3b, 0x1a, 0x92, 0xc7, 0xfb, 0x12, 0x06, 0x55, 0xb1,
	0xfb, 0x09, 0x2d, 0xf4, 0x9f, 0x01, 0xf6, 0x0d, 0x6b, 0x59, 0xf8, 0xcf, 0x21, 0xd0, 0xc3, 0xe9,
	0xf2, 0xf5, 0x4c, 0x56, 0x95, 0x32, 0xc0, 0x75, 0xab, 0x7e, 0x0d, 0x73, 0x1e, 0x3a, 0x6d, 0xa3,
	0x77, 0xab, 0xcc, 0x13, 0x1e, 0xce, 0xd5, 0x9b, 0x9d, 0x3a, 0xf3, 0xf5, 0x0f, 0x58, 0x02, 0xf6,
	0x4d, 0x6b, 0x05, 0xb2, 0x4c, 0x64, 0xc3, 0x04, 0x94, 0x62, 0x11, 0x38, 0x4b, 0x06, 0xb9, 0x64,
	0x92, 0xbb, 0x55, 0x6e, 0xf3, 0x2f, 0xb2, 0xba, 0x5b, 0xc6, 0x1e, 0x77, 0x1f, 0xed, 0xd8, 0x63,
	0x64, 0xad, 0x34, 0xa6, 0xb5, 0xbd, 0xf3, 0xad, 0x5d, 0x5f, 0xb8, 0x47, 0xce, 0x8b, 0x57, 0x47,
	0x76, 0xef, 0x97, 0x5f, 0x9c, 0xd5, 0x02, 0x94, 0xc7, 0x85, 0x17, 0x41, 0x0a, 0x19, 0x8b, 0xbd,
	0x57, 0x19, 0xd7, 0x70, 0xf0, 0xe3, 0xf7, 0xc7, 0xb6, 0xe7, 0xf6, 0x6b, 0x0b, 0x9f, 0x7a, 0x5a,
	0xd1, 0x37, 0xd3, 0xf8, 0x2d, 0x0d, 0xaa, 0x86, 0xc3, 0xd0, 0x74, 0xbc, 0x83, 0x36, 0x7a, 0xb7,
	0x0e, 0xc7, 0xa8, 0xf3, 0x7d, 0x8c, 0xf0, 0x59, 0x33, 0x3c, 0x34, 0xc7, 0x39, 0xf8, 0xe6, 0xb4,
	0x47, 0xe8, 0xde, 0xbb, 0xa3, 0x09, 0x6e, 0xfd, 0x9c, 0xe0, 0xd6, 0xc9, 0x04, 0xa3, 0xf7, 0x25,
	0x46, 0x9f, 0x4b, 0x8c, 0xbe, 0x96, 0x18, 0x1d, 0x95, 0x18, 0xfd, 0x2a, 0x31, 0xfa, 0x53, 0xe2,
	0xd6, 0x49, 0x89, 0xd1, 0x87, 0x63, 0xdc, 0x3a, 0x3c, 0xc6, 0xe8, 0xe9, 0x6e, 0x24, 0xe4, 0x8b,
	0x88, 0x14, 0x22, 0xd6, 0x90, 0x65, 0x8c, 0xe4, 0x8a, 0x9a, 0x60, 0x4f, 0x64, 0x89, 0x27, 0x33,
	0x51, 0xf0, 0x10, 0x32, 0x6f, 0x26, 0x53, 0xe9, 0x47, 0x82, 0xc2, 0x6b, 0x5d, 0x3b, 0x75, 0xf1,
	0x73, 0xfa, 0x17, 0x8d, 0x59, 0x6f, 0xff, 0x0b, 0x00, 0x00, 0xff, 0xff, 0x23, 0xb8, 0x39, 0x02,
	0xbe, 0x03, 0x00, 0x00,
}
