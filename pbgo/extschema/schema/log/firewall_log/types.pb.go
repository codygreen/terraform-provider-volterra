// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ves.io/schema/log/firewall_log/types.proto

/*
	Package firewall_log is a generated protocol buffer package.

	It is generated from these files:
		ves.io/schema/log/firewall_log/types.proto

	It has these top-level messages:
		DateSubAggregation
		DateAggregation
		FieldAggregation
		CardinalityAggregation
		AggregationRequest
*/
package firewall_log

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"
import _ "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
import _ "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
import _ "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"

import strconv "strconv"

import strings "strings"
import reflect "reflect"
import sortkeys "github.com/gogo/protobuf/sortkeys"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// Key Field
//
// x-displayName: "Key Field"
// Firewall log can be aggregated based on these fields.
type KeyField int32

const (
	// x-displayName: "Site"
	SITE KeyField = 0
	// x-displayName: "Source IP Address"
	SRC_IP KeyField = 1
	// x-displayName: "Destination IP Address"
	DST_IP KeyField = 2
	// x-displayName: "Policy"
	POLICY KeyField = 3
	// x-displayName: "Policy Rule"
	POLICY_RULE KeyField = 4
	// x-displayName: "Policy Hit Result"
	POLICY_HITS_RESULT KeyField = 5
)

var KeyField_name = map[int32]string{
	0: "SITE",
	1: "SRC_IP",
	2: "DST_IP",
	3: "POLICY",
	4: "POLICY_RULE",
	5: "POLICY_HITS_RESULT",
}
var KeyField_value = map[string]int32{
	"SITE":               0,
	"SRC_IP":             1,
	"DST_IP":             2,
	"POLICY":             3,
	"POLICY_RULE":        4,
	"POLICY_HITS_RESULT": 5,
}

func (KeyField) EnumDescriptor() ([]byte, []int) { return fileDescriptorTypes, []int{0} }

// Date SubAggregation
//
// x-displayName: Date SubAggregation
// Aggregate firewall logs in each date bucket based on one of the sub aggregation types
type DateSubAggregation struct {
	// aggregation type
	//
	// x-displayName: "Aggregation Type"
	// Specify one of the aggregation types
	//
	// Types that are valid to be assigned to AggregationType:
	//	*DateSubAggregation_FieldAggregation
	AggregationType isDateSubAggregation_AggregationType `protobuf_oneof:"aggregation_type"`
}

func (m *DateSubAggregation) Reset()                    { *m = DateSubAggregation{} }
func (*DateSubAggregation) ProtoMessage()               {}
func (*DateSubAggregation) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{0} }

type isDateSubAggregation_AggregationType interface {
	isDateSubAggregation_AggregationType()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type DateSubAggregation_FieldAggregation struct {
	FieldAggregation *FieldAggregation `protobuf:"bytes,1,opt,name=field_aggregation,json=fieldAggregation,oneof"`
}

func (*DateSubAggregation_FieldAggregation) isDateSubAggregation_AggregationType() {}

func (m *DateSubAggregation) GetAggregationType() isDateSubAggregation_AggregationType {
	if m != nil {
		return m.AggregationType
	}
	return nil
}

func (m *DateSubAggregation) GetFieldAggregation() *FieldAggregation {
	if x, ok := m.GetAggregationType().(*DateSubAggregation_FieldAggregation); ok {
		return x.FieldAggregation
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*DateSubAggregation) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _DateSubAggregation_OneofMarshaler, _DateSubAggregation_OneofUnmarshaler, _DateSubAggregation_OneofSizer, []interface{}{
		(*DateSubAggregation_FieldAggregation)(nil),
	}
}

func _DateSubAggregation_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*DateSubAggregation)
	// aggregation_type
	switch x := m.AggregationType.(type) {
	case *DateSubAggregation_FieldAggregation:
		_ = b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.FieldAggregation); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("DateSubAggregation.AggregationType has unexpected type %T", x)
	}
	return nil
}

func _DateSubAggregation_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*DateSubAggregation)
	switch tag {
	case 1: // aggregation_type.field_aggregation
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(FieldAggregation)
		err := b.DecodeMessage(msg)
		m.AggregationType = &DateSubAggregation_FieldAggregation{msg}
		return true, err
	default:
		return false, nil
	}
}

func _DateSubAggregation_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*DateSubAggregation)
	// aggregation_type
	switch x := m.AggregationType.(type) {
	case *DateSubAggregation_FieldAggregation:
		s := proto.Size(x.FieldAggregation)
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// Date Aggregation
//
// x-displayName: Date Aggregation
// Aggregate firewall logs based on timestamp in the log
type DateAggregation struct {
	// step
	//
	// x-displayName: "Step"
	// x-required
	// x-example: "5m"
	//
	// step is the resolution width, which determines the number of the data points [x-axis (time)] to be returned in the response.
	// The timestamps in the response will be t1=start_time, t2=t1+step, ... tn=tn-1+step, where tn <= end_time.
	// Format: [0-9][smhd], where s - seconds, m - minutes, h - hours, d - days
	Step string `protobuf:"bytes,1,opt,name=step,proto3" json:"step,omitempty"`
	// sub aggregation
	//
	// x-displayName: "Sub Aggregation"
	// This option provides sub-aggregation for each date bucket
	SubAggs map[string]*DateSubAggregation `protobuf:"bytes,2,rep,name=sub_aggs,json=subAggs" json:"sub_aggs,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *DateAggregation) Reset()                    { *m = DateAggregation{} }
func (*DateAggregation) ProtoMessage()               {}
func (*DateAggregation) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{1} }

func (m *DateAggregation) GetStep() string {
	if m != nil {
		return m.Step
	}
	return ""
}

func (m *DateAggregation) GetSubAggs() map[string]*DateSubAggregation {
	if m != nil {
		return m.SubAggs
	}
	return nil
}

// Field Aggregation
//
// x-displayName: "Field Aggregation"
// Aggregate firewall logs based on the key fields in the log.
type FieldAggregation struct {
	// field
	//
	// x-displayName: "Field"
	// x-required
	//
	// Field name by which the logs should be aggregated.
	Field KeyField `protobuf:"varint,1,opt,name=field,proto3,enum=ves.io.schema.log.firewall_log.KeyField" json:"field,omitempty"`
	// topk
	//
	// x-displayName: "TopK"
	//
	// Number of top field values to be returned in the response.
	// Optional: If not specified, top 5 values will be returned in the response.
	Topk uint32 `protobuf:"varint,2,opt,name=topk,proto3" json:"topk,omitempty"`
}

func (m *FieldAggregation) Reset()                    { *m = FieldAggregation{} }
func (*FieldAggregation) ProtoMessage()               {}
func (*FieldAggregation) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{2} }

func (m *FieldAggregation) GetField() KeyField {
	if m != nil {
		return m.Field
	}
	return SITE
}

func (m *FieldAggregation) GetTopk() uint32 {
	if m != nil {
		return m.Topk
	}
	return 0
}

// Cardinality Aggregation
//
// x-displayName: "Cardinality Aggregation"
// Get approximate count of distinct values for the field in the firewall log.
type CardinalityAggregation struct {
	// field
	//
	// x-displayName: "Field"
	// x-required
	//
	// Field name for which count of distinct values should be computed.
	Field KeyField `protobuf:"varint,1,opt,name=field,proto3,enum=ves.io.schema.log.firewall_log.KeyField" json:"field,omitempty"`
}

func (m *CardinalityAggregation) Reset()                    { *m = CardinalityAggregation{} }
func (*CardinalityAggregation) ProtoMessage()               {}
func (*CardinalityAggregation) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{3} }

func (m *CardinalityAggregation) GetField() KeyField {
	if m != nil {
		return m.Field
	}
	return SITE
}

// Aggregation Request
//
// x-displayName: "Aggregation Request"
// Aggregation request to provide analytics data over the log response
type AggregationRequest struct {
	// aggregation type
	//
	// x-displayName: "Aggregation Type"
	// Specify one of the aggregation types
	//
	// Types that are valid to be assigned to AggregationType:
	//	*AggregationRequest_DateAggregation
	//	*AggregationRequest_FieldAggregation
	//	*AggregationRequest_CardinalityAggregation
	AggregationType isAggregationRequest_AggregationType `protobuf_oneof:"aggregation_type"`
}

func (m *AggregationRequest) Reset()                    { *m = AggregationRequest{} }
func (*AggregationRequest) ProtoMessage()               {}
func (*AggregationRequest) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{4} }

type isAggregationRequest_AggregationType interface {
	isAggregationRequest_AggregationType()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type AggregationRequest_DateAggregation struct {
	DateAggregation *DateAggregation `protobuf:"bytes,1,opt,name=date_aggregation,json=dateAggregation,oneof"`
}
type AggregationRequest_FieldAggregation struct {
	FieldAggregation *FieldAggregation `protobuf:"bytes,2,opt,name=field_aggregation,json=fieldAggregation,oneof"`
}
type AggregationRequest_CardinalityAggregation struct {
	CardinalityAggregation *CardinalityAggregation `protobuf:"bytes,3,opt,name=cardinality_aggregation,json=cardinalityAggregation,oneof"`
}

func (*AggregationRequest_DateAggregation) isAggregationRequest_AggregationType()        {}
func (*AggregationRequest_FieldAggregation) isAggregationRequest_AggregationType()       {}
func (*AggregationRequest_CardinalityAggregation) isAggregationRequest_AggregationType() {}

func (m *AggregationRequest) GetAggregationType() isAggregationRequest_AggregationType {
	if m != nil {
		return m.AggregationType
	}
	return nil
}

func (m *AggregationRequest) GetDateAggregation() *DateAggregation {
	if x, ok := m.GetAggregationType().(*AggregationRequest_DateAggregation); ok {
		return x.DateAggregation
	}
	return nil
}

func (m *AggregationRequest) GetFieldAggregation() *FieldAggregation {
	if x, ok := m.GetAggregationType().(*AggregationRequest_FieldAggregation); ok {
		return x.FieldAggregation
	}
	return nil
}

func (m *AggregationRequest) GetCardinalityAggregation() *CardinalityAggregation {
	if x, ok := m.GetAggregationType().(*AggregationRequest_CardinalityAggregation); ok {
		return x.CardinalityAggregation
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*AggregationRequest) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _AggregationRequest_OneofMarshaler, _AggregationRequest_OneofUnmarshaler, _AggregationRequest_OneofSizer, []interface{}{
		(*AggregationRequest_DateAggregation)(nil),
		(*AggregationRequest_FieldAggregation)(nil),
		(*AggregationRequest_CardinalityAggregation)(nil),
	}
}

func _AggregationRequest_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*AggregationRequest)
	// aggregation_type
	switch x := m.AggregationType.(type) {
	case *AggregationRequest_DateAggregation:
		_ = b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.DateAggregation); err != nil {
			return err
		}
	case *AggregationRequest_FieldAggregation:
		_ = b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.FieldAggregation); err != nil {
			return err
		}
	case *AggregationRequest_CardinalityAggregation:
		_ = b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.CardinalityAggregation); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("AggregationRequest.AggregationType has unexpected type %T", x)
	}
	return nil
}

func _AggregationRequest_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*AggregationRequest)
	switch tag {
	case 1: // aggregation_type.date_aggregation
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(DateAggregation)
		err := b.DecodeMessage(msg)
		m.AggregationType = &AggregationRequest_DateAggregation{msg}
		return true, err
	case 2: // aggregation_type.field_aggregation
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(FieldAggregation)
		err := b.DecodeMessage(msg)
		m.AggregationType = &AggregationRequest_FieldAggregation{msg}
		return true, err
	case 3: // aggregation_type.cardinality_aggregation
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(CardinalityAggregation)
		err := b.DecodeMessage(msg)
		m.AggregationType = &AggregationRequest_CardinalityAggregation{msg}
		return true, err
	default:
		return false, nil
	}
}

func _AggregationRequest_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*AggregationRequest)
	// aggregation_type
	switch x := m.AggregationType.(type) {
	case *AggregationRequest_DateAggregation:
		s := proto.Size(x.DateAggregation)
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *AggregationRequest_FieldAggregation:
		s := proto.Size(x.FieldAggregation)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *AggregationRequest_CardinalityAggregation:
		s := proto.Size(x.CardinalityAggregation)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

func init() {
	proto.RegisterType((*DateSubAggregation)(nil), "ves.io.schema.log.firewall_log.DateSubAggregation")
	proto.RegisterType((*DateAggregation)(nil), "ves.io.schema.log.firewall_log.DateAggregation")
	proto.RegisterType((*FieldAggregation)(nil), "ves.io.schema.log.firewall_log.FieldAggregation")
	proto.RegisterType((*CardinalityAggregation)(nil), "ves.io.schema.log.firewall_log.CardinalityAggregation")
	proto.RegisterType((*AggregationRequest)(nil), "ves.io.schema.log.firewall_log.AggregationRequest")
	proto.RegisterEnum("ves.io.schema.log.firewall_log.KeyField", KeyField_name, KeyField_value)
}
func (x KeyField) String() string {
	s, ok := KeyField_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *DateSubAggregation) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DateSubAggregation)
	if !ok {
		that2, ok := that.(DateSubAggregation)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.AggregationType == nil {
		if this.AggregationType != nil {
			return false
		}
	} else if this.AggregationType == nil {
		return false
	} else if !this.AggregationType.Equal(that1.AggregationType) {
		return false
	}
	return true
}
func (this *DateSubAggregation_FieldAggregation) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DateSubAggregation_FieldAggregation)
	if !ok {
		that2, ok := that.(DateSubAggregation_FieldAggregation)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.FieldAggregation.Equal(that1.FieldAggregation) {
		return false
	}
	return true
}
func (this *DateAggregation) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DateAggregation)
	if !ok {
		that2, ok := that.(DateAggregation)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Step != that1.Step {
		return false
	}
	if len(this.SubAggs) != len(that1.SubAggs) {
		return false
	}
	for i := range this.SubAggs {
		if !this.SubAggs[i].Equal(that1.SubAggs[i]) {
			return false
		}
	}
	return true
}
func (this *FieldAggregation) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*FieldAggregation)
	if !ok {
		that2, ok := that.(FieldAggregation)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Field != that1.Field {
		return false
	}
	if this.Topk != that1.Topk {
		return false
	}
	return true
}
func (this *CardinalityAggregation) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CardinalityAggregation)
	if !ok {
		that2, ok := that.(CardinalityAggregation)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Field != that1.Field {
		return false
	}
	return true
}
func (this *AggregationRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AggregationRequest)
	if !ok {
		that2, ok := that.(AggregationRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.AggregationType == nil {
		if this.AggregationType != nil {
			return false
		}
	} else if this.AggregationType == nil {
		return false
	} else if !this.AggregationType.Equal(that1.AggregationType) {
		return false
	}
	return true
}
func (this *AggregationRequest_DateAggregation) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AggregationRequest_DateAggregation)
	if !ok {
		that2, ok := that.(AggregationRequest_DateAggregation)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DateAggregation.Equal(that1.DateAggregation) {
		return false
	}
	return true
}
func (this *AggregationRequest_FieldAggregation) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AggregationRequest_FieldAggregation)
	if !ok {
		that2, ok := that.(AggregationRequest_FieldAggregation)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.FieldAggregation.Equal(that1.FieldAggregation) {
		return false
	}
	return true
}
func (this *AggregationRequest_CardinalityAggregation) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AggregationRequest_CardinalityAggregation)
	if !ok {
		that2, ok := that.(AggregationRequest_CardinalityAggregation)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.CardinalityAggregation.Equal(that1.CardinalityAggregation) {
		return false
	}
	return true
}
func (this *DateSubAggregation) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&firewall_log.DateSubAggregation{")
	if this.AggregationType != nil {
		s = append(s, "AggregationType: "+fmt.Sprintf("%#v", this.AggregationType)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DateSubAggregation_FieldAggregation) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&firewall_log.DateSubAggregation_FieldAggregation{` +
		`FieldAggregation:` + fmt.Sprintf("%#v", this.FieldAggregation) + `}`}, ", ")
	return s
}
func (this *DateAggregation) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&firewall_log.DateAggregation{")
	s = append(s, "Step: "+fmt.Sprintf("%#v", this.Step)+",\n")
	keysForSubAggs := make([]string, 0, len(this.SubAggs))
	for k, _ := range this.SubAggs {
		keysForSubAggs = append(keysForSubAggs, k)
	}
	sortkeys.Strings(keysForSubAggs)
	mapStringForSubAggs := "map[string]*DateSubAggregation{"
	for _, k := range keysForSubAggs {
		mapStringForSubAggs += fmt.Sprintf("%#v: %#v,", k, this.SubAggs[k])
	}
	mapStringForSubAggs += "}"
	if this.SubAggs != nil {
		s = append(s, "SubAggs: "+mapStringForSubAggs+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *FieldAggregation) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&firewall_log.FieldAggregation{")
	s = append(s, "Field: "+fmt.Sprintf("%#v", this.Field)+",\n")
	s = append(s, "Topk: "+fmt.Sprintf("%#v", this.Topk)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CardinalityAggregation) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&firewall_log.CardinalityAggregation{")
	s = append(s, "Field: "+fmt.Sprintf("%#v", this.Field)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AggregationRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&firewall_log.AggregationRequest{")
	if this.AggregationType != nil {
		s = append(s, "AggregationType: "+fmt.Sprintf("%#v", this.AggregationType)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AggregationRequest_DateAggregation) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&firewall_log.AggregationRequest_DateAggregation{` +
		`DateAggregation:` + fmt.Sprintf("%#v", this.DateAggregation) + `}`}, ", ")
	return s
}
func (this *AggregationRequest_FieldAggregation) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&firewall_log.AggregationRequest_FieldAggregation{` +
		`FieldAggregation:` + fmt.Sprintf("%#v", this.FieldAggregation) + `}`}, ", ")
	return s
}
func (this *AggregationRequest_CardinalityAggregation) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&firewall_log.AggregationRequest_CardinalityAggregation{` +
		`CardinalityAggregation:` + fmt.Sprintf("%#v", this.CardinalityAggregation) + `}`}, ", ")
	return s
}
func valueToGoStringTypes(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *DateSubAggregation) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DateSubAggregation) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.AggregationType != nil {
		nn1, err := m.AggregationType.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn1
	}
	return i, nil
}

func (m *DateSubAggregation_FieldAggregation) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.FieldAggregation != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.FieldAggregation.Size()))
		n2, err := m.FieldAggregation.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	return i, nil
}
func (m *DateAggregation) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DateAggregation) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Step) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Step)))
		i += copy(dAtA[i:], m.Step)
	}
	if len(m.SubAggs) > 0 {
		keysForSubAggs := make([]string, 0, len(m.SubAggs))
		for k, _ := range m.SubAggs {
			keysForSubAggs = append(keysForSubAggs, string(k))
		}
		sortkeys.Strings(keysForSubAggs)
		for _, k := range keysForSubAggs {
			dAtA[i] = 0x12
			i++
			v := m.SubAggs[string(k)]
			msgSize := 0
			if v != nil {
				msgSize = v.Size()
				msgSize += 1 + sovTypes(uint64(msgSize))
			}
			mapSize := 1 + len(k) + sovTypes(uint64(len(k))) + msgSize
			i = encodeVarintTypes(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintTypes(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			if v != nil {
				dAtA[i] = 0x12
				i++
				i = encodeVarintTypes(dAtA, i, uint64(v.Size()))
				n3, err := v.MarshalTo(dAtA[i:])
				if err != nil {
					return 0, err
				}
				i += n3
			}
		}
	}
	return i, nil
}

func (m *FieldAggregation) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FieldAggregation) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Field != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.Field))
	}
	if m.Topk != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.Topk))
	}
	return i, nil
}

func (m *CardinalityAggregation) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CardinalityAggregation) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Field != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.Field))
	}
	return i, nil
}

func (m *AggregationRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AggregationRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.AggregationType != nil {
		nn4, err := m.AggregationType.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn4
	}
	return i, nil
}

func (m *AggregationRequest_DateAggregation) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.DateAggregation != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.DateAggregation.Size()))
		n5, err := m.DateAggregation.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	return i, nil
}
func (m *AggregationRequest_FieldAggregation) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.FieldAggregation != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.FieldAggregation.Size()))
		n6, err := m.FieldAggregation.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	return i, nil
}
func (m *AggregationRequest_CardinalityAggregation) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.CardinalityAggregation != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.CardinalityAggregation.Size()))
		n7, err := m.CardinalityAggregation.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	return i, nil
}
func encodeVarintTypes(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *DateSubAggregation) Size() (n int) {
	var l int
	_ = l
	if m.AggregationType != nil {
		n += m.AggregationType.Size()
	}
	return n
}

func (m *DateSubAggregation_FieldAggregation) Size() (n int) {
	var l int
	_ = l
	if m.FieldAggregation != nil {
		l = m.FieldAggregation.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *DateAggregation) Size() (n int) {
	var l int
	_ = l
	l = len(m.Step)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if len(m.SubAggs) > 0 {
		for k, v := range m.SubAggs {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovTypes(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovTypes(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovTypes(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *FieldAggregation) Size() (n int) {
	var l int
	_ = l
	if m.Field != 0 {
		n += 1 + sovTypes(uint64(m.Field))
	}
	if m.Topk != 0 {
		n += 1 + sovTypes(uint64(m.Topk))
	}
	return n
}

func (m *CardinalityAggregation) Size() (n int) {
	var l int
	_ = l
	if m.Field != 0 {
		n += 1 + sovTypes(uint64(m.Field))
	}
	return n
}

func (m *AggregationRequest) Size() (n int) {
	var l int
	_ = l
	if m.AggregationType != nil {
		n += m.AggregationType.Size()
	}
	return n
}

func (m *AggregationRequest_DateAggregation) Size() (n int) {
	var l int
	_ = l
	if m.DateAggregation != nil {
		l = m.DateAggregation.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *AggregationRequest_FieldAggregation) Size() (n int) {
	var l int
	_ = l
	if m.FieldAggregation != nil {
		l = m.FieldAggregation.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *AggregationRequest_CardinalityAggregation) Size() (n int) {
	var l int
	_ = l
	if m.CardinalityAggregation != nil {
		l = m.CardinalityAggregation.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func sovTypes(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozTypes(x uint64) (n int) {
	return sovTypes(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *DateSubAggregation) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DateSubAggregation{`,
		`AggregationType:` + fmt.Sprintf("%v", this.AggregationType) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DateSubAggregation_FieldAggregation) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DateSubAggregation_FieldAggregation{`,
		`FieldAggregation:` + strings.Replace(fmt.Sprintf("%v", this.FieldAggregation), "FieldAggregation", "FieldAggregation", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DateAggregation) String() string {
	if this == nil {
		return "nil"
	}
	keysForSubAggs := make([]string, 0, len(this.SubAggs))
	for k, _ := range this.SubAggs {
		keysForSubAggs = append(keysForSubAggs, k)
	}
	sortkeys.Strings(keysForSubAggs)
	mapStringForSubAggs := "map[string]*DateSubAggregation{"
	for _, k := range keysForSubAggs {
		mapStringForSubAggs += fmt.Sprintf("%v: %v,", k, this.SubAggs[k])
	}
	mapStringForSubAggs += "}"
	s := strings.Join([]string{`&DateAggregation{`,
		`Step:` + fmt.Sprintf("%v", this.Step) + `,`,
		`SubAggs:` + mapStringForSubAggs + `,`,
		`}`,
	}, "")
	return s
}
func (this *FieldAggregation) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&FieldAggregation{`,
		`Field:` + fmt.Sprintf("%v", this.Field) + `,`,
		`Topk:` + fmt.Sprintf("%v", this.Topk) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CardinalityAggregation) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CardinalityAggregation{`,
		`Field:` + fmt.Sprintf("%v", this.Field) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AggregationRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AggregationRequest{`,
		`AggregationType:` + fmt.Sprintf("%v", this.AggregationType) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AggregationRequest_DateAggregation) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AggregationRequest_DateAggregation{`,
		`DateAggregation:` + strings.Replace(fmt.Sprintf("%v", this.DateAggregation), "DateAggregation", "DateAggregation", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AggregationRequest_FieldAggregation) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AggregationRequest_FieldAggregation{`,
		`FieldAggregation:` + strings.Replace(fmt.Sprintf("%v", this.FieldAggregation), "FieldAggregation", "FieldAggregation", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AggregationRequest_CardinalityAggregation) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AggregationRequest_CardinalityAggregation{`,
		`CardinalityAggregation:` + strings.Replace(fmt.Sprintf("%v", this.CardinalityAggregation), "CardinalityAggregation", "CardinalityAggregation", 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringTypes(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *DateSubAggregation) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DateSubAggregation: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DateSubAggregation: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FieldAggregation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &FieldAggregation{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.AggregationType = &DateSubAggregation_FieldAggregation{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DateAggregation) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DateAggregation: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DateAggregation: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Step", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Step = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubAggs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SubAggs == nil {
				m.SubAggs = make(map[string]*DateSubAggregation)
			}
			var mapkey string
			var mapvalue *DateSubAggregation
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTypes
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthTypes
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTypes
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= (int(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthTypes
					}
					postmsgIndex := iNdEx + mapmsglen
					if mapmsglen < 0 {
						return ErrInvalidLengthTypes
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &DateSubAggregation{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipTypes(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthTypes
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.SubAggs[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FieldAggregation) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FieldAggregation: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FieldAggregation: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Field", wireType)
			}
			m.Field = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Field |= (KeyField(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Topk", wireType)
			}
			m.Topk = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Topk |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CardinalityAggregation) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CardinalityAggregation: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CardinalityAggregation: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Field", wireType)
			}
			m.Field = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Field |= (KeyField(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AggregationRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AggregationRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AggregationRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DateAggregation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &DateAggregation{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.AggregationType = &AggregationRequest_DateAggregation{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FieldAggregation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &FieldAggregation{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.AggregationType = &AggregationRequest_FieldAggregation{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CardinalityAggregation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &CardinalityAggregation{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.AggregationType = &AggregationRequest_CardinalityAggregation{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTypes(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthTypes
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipTypes(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthTypes = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTypes   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("ves.io/schema/log/firewall_log/types.proto", fileDescriptorTypes) }

var fileDescriptorTypes = []byte{
	// 641 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x54, 0xbf, 0x6f, 0xd3, 0x40,
	0x14, 0xf6, 0x39, 0x4e, 0x49, 0xaf, 0x40, 0x8f, 0x1b, 0x4a, 0x14, 0xca, 0xa9, 0xca, 0x54, 0x55,
	0xaa, 0x8d, 0x82, 0x84, 0x10, 0x42, 0x48, 0xb4, 0x0d, 0x4a, 0x4a, 0x25, 0x2a, 0x27, 0x15, 0x3f,
	0x84, 0x64, 0x9d, 0xe3, 0x8b, 0x6b, 0xd5, 0xcd, 0xb9, 0xf6, 0x39, 0x25, 0x1b, 0x13, 0x33, 0x2b,
	0xff, 0x01, 0x7f, 0x03, 0x5d, 0x3a, 0x32, 0x76, 0xec, 0x48, 0xcd, 0x02, 0x0c, 0xa8, 0x7f, 0x02,
	0xf2, 0x39, 0x55, 0x9d, 0x28, 0xb4, 0x20, 0x75, 0xfb, 0xde, 0xfb, 0xee, 0xbd, 0xef, 0xdd, 0xe7,
	0xe7, 0x83, 0x4b, 0x7d, 0x16, 0xe9, 0x1e, 0x37, 0xa2, 0xce, 0x36, 0xdb, 0xa5, 0x86, 0xcf, 0x5d,
	0xa3, 0xeb, 0x85, 0x6c, 0x9f, 0xfa, 0xbe, 0x95, 0x06, 0x62, 0x10, 0xb0, 0x48, 0x0f, 0x42, 0x2e,
	0x38, 0x26, 0xd9, 0x59, 0x3d, 0x3b, 0xab, 0xfb, 0xdc, 0xd5, 0xf3, 0x67, 0x2b, 0xcb, 0xae, 0x27,
	0xb6, 0x63, 0x5b, 0xef, 0xf0, 0x5d, 0xc3, 0xe5, 0x2e, 0x37, 0x64, 0x99, 0x1d, 0x77, 0x65, 0x24,
	0x03, 0x89, 0xb2, 0x76, 0x95, 0x3b, 0xa3, 0xd2, 0x3c, 0x10, 0x1e, 0xef, 0x0d, 0xb5, 0x2a, 0xf3,
	0xa3, 0x64, 0x9f, 0xfa, 0x9e, 0x43, 0x05, 0x1b, 0xb2, 0x0b, 0x63, 0xac, 0xc7, 0xf6, 0xad, 0x91,
	0xfa, 0xea, 0x27, 0x00, 0xf1, 0x1a, 0x15, 0xac, 0x15, 0xdb, 0x4f, 0x5d, 0x37, 0x64, 0x2e, 0x4d,
	0x59, 0x6c, 0xc1, 0x5b, 0x5d, 0x8f, 0xf9, 0x8e, 0x45, 0xcf, 0x93, 0x65, 0xb0, 0x00, 0x16, 0x67,
	0x6a, 0xf7, 0xf4, 0x8b, 0xaf, 0xa7, 0x3f, 0x4b, 0x0b, 0x73, 0xcd, 0x1a, 0x8a, 0x89, 0xba, 0x63,
	0xb9, 0x95, 0x79, 0x88, 0x72, 0xad, 0xad, 0xd4, 0x3e, 0x5c, 0x3a, 0x3c, 0x00, 0xe0, 0xe8, 0x00,
	0xa8, 0xeb, 0x5a, 0x49, 0x45, 0x85, 0xea, 0x6f, 0x00, 0x67, 0xd3, 0xd9, 0xf2, 0x83, 0x61, 0xa8,
	0x45, 0x82, 0x05, 0x72, 0x96, 0x69, 0x53, 0x62, 0xfc, 0x12, 0x96, 0xa2, 0xd8, 0x4e, 0x47, 0x8d,
	0xca, 0xea, 0x42, 0x61, 0x71, 0xa6, 0xf6, 0xf8, 0xb2, 0x19, 0xc7, 0xda, 0xea, 0xd9, 0xf5, 0xa3,
	0x7a, 0x4f, 0x84, 0x03, 0xf3, 0x5a, 0x94, 0x45, 0x95, 0x1e, 0xbc, 0x9e, 0x27, 0x30, 0x82, 0x85,
	0x1d, 0x36, 0x18, 0x6a, 0xa7, 0x10, 0x37, 0x60, 0xb1, 0x4f, 0xfd, 0x98, 0x95, 0x55, 0xe9, 0x4d,
	0xed, 0x5f, 0x74, 0x47, 0xad, 0x36, 0xb3, 0x06, 0x8f, 0xd4, 0x87, 0xa0, 0xba, 0x07, 0xd1, 0xb8,
	0x79, 0xf8, 0x09, 0x2c, 0x4a, 0xf3, 0xa4, 0xea, 0xcd, 0xda, 0xe2, 0x65, 0x0a, 0xcf, 0xd9, 0x40,
	0xf6, 0x30, 0xb3, 0x32, 0x7c, 0x17, 0x6a, 0x82, 0x07, 0x3b, 0x72, 0xc0, 0x1b, 0x2b, 0xd3, 0x5f,
	0x7e, 0x1e, 0x16, 0xb4, 0x25, 0xb5, 0xec, 0x98, 0x32, 0x5d, 0x7d, 0x05, 0xe7, 0x56, 0x69, 0xe8,
	0x78, 0x3d, 0xea, 0x7b, 0x62, 0x70, 0x85, 0xc2, 0xd5, 0x5f, 0x2a, 0xc4, 0xf9, 0x7b, 0xb2, 0xbd,
	0x98, 0x45, 0x02, 0xbf, 0x85, 0x28, 0x5d, 0xd0, 0x09, 0x8b, 0x65, 0xfc, 0xe7, 0x47, 0x6b, 0x28,
	0xe6, 0xac, 0x33, 0xb6, 0x1e, 0x13, 0xf7, 0x56, 0xbd, 0xba, 0xbd, 0xc5, 0x7b, 0xf0, 0x76, 0xe7,
	0xdc, 0xaf, 0x11, 0x99, 0x82, 0x94, 0x79, 0x70, 0x99, 0xcc, 0x64, 0xbb, 0x1b, 0x8a, 0x39, 0xd7,
	0x99, 0xc8, 0x5c, 0xf8, 0xab, 0x68, 0xeb, 0x5a, 0x49, 0x43, 0xc5, 0x25, 0x0a, 0x4b, 0x67, 0xfe,
	0xe3, 0x12, 0xd4, 0x5a, 0xcd, 0x76, 0x1d, 0x29, 0x18, 0xc2, 0xa9, 0x96, 0xb9, 0x6a, 0x35, 0x37,
	0x11, 0x48, 0xf1, 0x5a, 0xab, 0x9d, 0x62, 0x35, 0xc5, 0x9b, 0x2f, 0x36, 0x9a, 0xab, 0xaf, 0x51,
	0x01, 0xcf, 0xc2, 0x99, 0x0c, 0x5b, 0xe6, 0xd6, 0x46, 0x1d, 0x69, 0x78, 0x0e, 0xe2, 0x61, 0xa2,
	0xd1, 0x6c, 0xb7, 0x2c, 0xb3, 0xde, 0xda, 0xda, 0x68, 0xa3, 0xe2, 0xca, 0x07, 0x70, 0x74, 0x42,
	0x94, 0xe3, 0x13, 0xa2, 0x9c, 0x9e, 0x10, 0xf0, 0x3e, 0x21, 0xe0, 0x73, 0x42, 0xc0, 0xd7, 0x84,
	0x80, 0xa3, 0x84, 0x80, 0xe3, 0x84, 0x80, 0x6f, 0x09, 0x01, 0x3f, 0x12, 0xa2, 0x9c, 0x26, 0x04,
	0x7c, 0xfc, 0x4e, 0x94, 0x37, 0x6d, 0x97, 0x07, 0x3b, 0xae, 0xde, 0xe7, 0xbe, 0x60, 0x61, 0x48,
	0xf5, 0x38, 0x32, 0x24, 0xe8, 0xf2, 0x70, 0x77, 0x39, 0x08, 0x79, 0xdf, 0x73, 0x58, 0xb8, 0x7c,
	0x46, 0x1b, 0x81, 0xed, 0x72, 0x83, 0xbd, 0x13, 0xc3, 0xd7, 0xea, 0x2f, 0x4f, 0xad, 0x3d, 0x25,
	0x5f, 0xae, 0xfb, 0x7f, 0x02, 0x00, 0x00, 0xff, 0xff, 0x03, 0xcb, 0x13, 0x63, 0x93, 0x05, 0x00,
	0x00,
}
