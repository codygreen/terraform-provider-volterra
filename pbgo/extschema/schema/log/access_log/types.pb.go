// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ves.io/schema/log/access_log/types.proto

/*
	Package access_log is a generated protocol buffer package.

	It is generated from these files:
		ves.io/schema/log/access_log/types.proto

	It has these top-level messages:
		DateSubAggregation
		DateAggregation
		FieldAggregation
		CardinalityAggregation
		AggregationRequest
*/
package access_log

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"
import _ "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
import _ "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
import _ "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"

import strconv "strconv"

import strings "strings"
import reflect "reflect"
import sortkeys "github.com/gogo/protobuf/sortkeys"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// Key Field
//
// x-displayName: "Key Field"
// Access log can be aggregated based on these fields.
type KeyField int32

const (
	// x-displayName: "API Endpoint"
	API_ENDPOINT KeyField = 0
	// x-displayName: "App Type"
	APP_TYPE KeyField = 1
	// x-displayName: "Authority"
	AUTHORITY KeyField = 2
	// x-displayName: "ASN"
	ASN KeyField = 3
	// x-displayName: "Browser Type"
	BROWSER_TYPE KeyField = 4
	// x-displayName: "City"
	CITY KeyField = 5
	// x-displayName: "Country"
	COUNTRY KeyField = 6
	// x-displayName: "Device Type"
	DEVICE_TYPE KeyField = 7
	// x-displayName: "Destination Service"
	DST KeyField = 8
	// x-displayName: "Destination Instance"
	DST_INSTANCE KeyField = 9
	// x-displayName: "Destination Site"
	DST_SITE KeyField = 10
	// x-displayName: "Method"
	METHOD KeyField = 11
	// x-displayName: "Scheme"
	SCHEME KeyField = 12
	// x-displayName: "Remote Location"
	REMOTE_LOCATION KeyField = 13
	// x-displayName: "Request Path"
	REQ_PATH KeyField = 14
	// x-displayName: "Response Code"
	RSP_CODE KeyField = 15
	// x-displayName: "Response Code Class"
	RSP_CODE_CLASS KeyField = 26
	// x-displayName: "Source Service"
	SRC KeyField = 16
	// x-displayName: "Source Instance"
	SRC_INSTANCE KeyField = 17
	// x-displayName: "Source IP"
	SRC_IP KeyField = 18
	// x-displayName: "Source Site"
	SRC_SITE KeyField = 19
	// x-displayName: "TLS Cipher Suite"
	TLS_CIPHER_SUITE KeyField = 20
	// x-displayName: "TLS Fingerprint"
	TLS_FINGERPRINT KeyField = 25
	// x-displayName: "TLS Version"
	TLS_VERSION KeyField = 21
	// x-displayName: "User"
	USER KeyField = 22
	// x-displayName: "Virtual Host Name"
	VH_NAME KeyField = 23
	// x-displayName: "Virtual Host Type"
	VH_TYPE KeyField = 24
	// x-displayName: "Visitor Id"
	VISITOR_ID KeyField = 27
)

var KeyField_name = map[int32]string{
	0:  "API_ENDPOINT",
	1:  "APP_TYPE",
	2:  "AUTHORITY",
	3:  "ASN",
	4:  "BROWSER_TYPE",
	5:  "CITY",
	6:  "COUNTRY",
	7:  "DEVICE_TYPE",
	8:  "DST",
	9:  "DST_INSTANCE",
	10: "DST_SITE",
	11: "METHOD",
	12: "SCHEME",
	13: "REMOTE_LOCATION",
	14: "REQ_PATH",
	15: "RSP_CODE",
	26: "RSP_CODE_CLASS",
	16: "SRC",
	17: "SRC_INSTANCE",
	18: "SRC_IP",
	19: "SRC_SITE",
	20: "TLS_CIPHER_SUITE",
	25: "TLS_FINGERPRINT",
	21: "TLS_VERSION",
	22: "USER",
	23: "VH_NAME",
	24: "VH_TYPE",
	27: "VISITOR_ID",
}
var KeyField_value = map[string]int32{
	"API_ENDPOINT":     0,
	"APP_TYPE":         1,
	"AUTHORITY":        2,
	"ASN":              3,
	"BROWSER_TYPE":     4,
	"CITY":             5,
	"COUNTRY":          6,
	"DEVICE_TYPE":      7,
	"DST":              8,
	"DST_INSTANCE":     9,
	"DST_SITE":         10,
	"METHOD":           11,
	"SCHEME":           12,
	"REMOTE_LOCATION":  13,
	"REQ_PATH":         14,
	"RSP_CODE":         15,
	"RSP_CODE_CLASS":   26,
	"SRC":              16,
	"SRC_INSTANCE":     17,
	"SRC_IP":           18,
	"SRC_SITE":         19,
	"TLS_CIPHER_SUITE": 20,
	"TLS_FINGERPRINT":  25,
	"TLS_VERSION":      21,
	"USER":             22,
	"VH_NAME":          23,
	"VH_TYPE":          24,
	"VISITOR_ID":       27,
}

func (KeyField) EnumDescriptor() ([]byte, []int) { return fileDescriptorTypes, []int{0} }

// Date SubAggregation
//
// x-displayName: Date SubAggregation
// Aggregate access logs in each date bucket based on one of the sub aggregation types
type DateSubAggregation struct {
	// aggregation type
	//
	// x-displayName: "Aggregation Type"
	// Specify one of the aggregation types
	//
	// Types that are valid to be assigned to AggregationType:
	//	*DateSubAggregation_FieldAggregation
	AggregationType isDateSubAggregation_AggregationType `protobuf_oneof:"aggregation_type"`
}

func (m *DateSubAggregation) Reset()                    { *m = DateSubAggregation{} }
func (*DateSubAggregation) ProtoMessage()               {}
func (*DateSubAggregation) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{0} }

type isDateSubAggregation_AggregationType interface {
	isDateSubAggregation_AggregationType()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type DateSubAggregation_FieldAggregation struct {
	FieldAggregation *FieldAggregation `protobuf:"bytes,1,opt,name=field_aggregation,json=fieldAggregation,oneof"`
}

func (*DateSubAggregation_FieldAggregation) isDateSubAggregation_AggregationType() {}

func (m *DateSubAggregation) GetAggregationType() isDateSubAggregation_AggregationType {
	if m != nil {
		return m.AggregationType
	}
	return nil
}

func (m *DateSubAggregation) GetFieldAggregation() *FieldAggregation {
	if x, ok := m.GetAggregationType().(*DateSubAggregation_FieldAggregation); ok {
		return x.FieldAggregation
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*DateSubAggregation) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _DateSubAggregation_OneofMarshaler, _DateSubAggregation_OneofUnmarshaler, _DateSubAggregation_OneofSizer, []interface{}{
		(*DateSubAggregation_FieldAggregation)(nil),
	}
}

func _DateSubAggregation_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*DateSubAggregation)
	// aggregation_type
	switch x := m.AggregationType.(type) {
	case *DateSubAggregation_FieldAggregation:
		_ = b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.FieldAggregation); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("DateSubAggregation.AggregationType has unexpected type %T", x)
	}
	return nil
}

func _DateSubAggregation_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*DateSubAggregation)
	switch tag {
	case 1: // aggregation_type.field_aggregation
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(FieldAggregation)
		err := b.DecodeMessage(msg)
		m.AggregationType = &DateSubAggregation_FieldAggregation{msg}
		return true, err
	default:
		return false, nil
	}
}

func _DateSubAggregation_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*DateSubAggregation)
	// aggregation_type
	switch x := m.AggregationType.(type) {
	case *DateSubAggregation_FieldAggregation:
		s := proto.Size(x.FieldAggregation)
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// Date Aggregation
//
// x-displayName: Date Aggregation
// Aggregate access logs based on timestamp in the log
type DateAggregation struct {
	// step
	//
	// x-displayName: "Step"
	// x-required
	// x-example: "5m"
	//
	// step is the resolution width, which determines the number of the data points [x-axis (time)] to be returned in the response.
	// The timestamps in the response will be t1=start_time, t2=t1+step, ... tn=tn-1+step, where tn <= end_time.
	// Format: [0-9][smhd], where s - seconds, m - minutes, h - hours, d - days
	Step string `protobuf:"bytes,1,opt,name=step,proto3" json:"step,omitempty"`
	// sub aggregation
	//
	// x-displayName: "Sub Aggregation"
	// This option provides sub-aggregation for each date bucket
	SubAggs map[string]*DateSubAggregation `protobuf:"bytes,2,rep,name=sub_aggs,json=subAggs" json:"sub_aggs,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *DateAggregation) Reset()                    { *m = DateAggregation{} }
func (*DateAggregation) ProtoMessage()               {}
func (*DateAggregation) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{1} }

func (m *DateAggregation) GetStep() string {
	if m != nil {
		return m.Step
	}
	return ""
}

func (m *DateAggregation) GetSubAggs() map[string]*DateSubAggregation {
	if m != nil {
		return m.SubAggs
	}
	return nil
}

// Field Aggregation
//
// x-displayName: "Field Aggregation"
// Aggregate access logs based on the key fields in the log.
type FieldAggregation struct {
	// field
	//
	// x-displayName: "Field"
	// x-required
	//
	// Field name by which the logs should be aggregated.
	Field KeyField `protobuf:"varint,1,opt,name=field,proto3,enum=ves.io.schema.log.access_log.KeyField" json:"field,omitempty"`
	// topk
	//
	// x-displayName: "TopK"
	//
	// Number of top field values to be returned in the response.
	// Optional: If not specified, top 5 values will be returned in the response.
	Topk uint32 `protobuf:"varint,2,opt,name=topk,proto3" json:"topk,omitempty"`
}

func (m *FieldAggregation) Reset()                    { *m = FieldAggregation{} }
func (*FieldAggregation) ProtoMessage()               {}
func (*FieldAggregation) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{2} }

func (m *FieldAggregation) GetField() KeyField {
	if m != nil {
		return m.Field
	}
	return API_ENDPOINT
}

func (m *FieldAggregation) GetTopk() uint32 {
	if m != nil {
		return m.Topk
	}
	return 0
}

// Cardinality Aggregation
//
// x-displayName: "Cardinality Aggregation"
// Get approximate count of distinct values for the field in the access log.
type CardinalityAggregation struct {
	// field
	//
	// x-displayName: "Field"
	// x-required
	//
	// Field name for which count of distinct values should be computed.
	Field KeyField `protobuf:"varint,1,opt,name=field,proto3,enum=ves.io.schema.log.access_log.KeyField" json:"field,omitempty"`
}

func (m *CardinalityAggregation) Reset()                    { *m = CardinalityAggregation{} }
func (*CardinalityAggregation) ProtoMessage()               {}
func (*CardinalityAggregation) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{3} }

func (m *CardinalityAggregation) GetField() KeyField {
	if m != nil {
		return m.Field
	}
	return API_ENDPOINT
}

// Aggregation Request
//
// x-displayName: "Aggregation Request"
// Aggregation request to provide analytics data over the log response
type AggregationRequest struct {
	// aggregation type
	//
	// x-displayName: "Aggregation Type"
	// Specify one of the aggregation types
	//
	// Types that are valid to be assigned to AggregationType:
	//	*AggregationRequest_DateAggregation
	//	*AggregationRequest_FieldAggregation
	//	*AggregationRequest_CardinalityAggregation
	AggregationType isAggregationRequest_AggregationType `protobuf_oneof:"aggregation_type"`
}

func (m *AggregationRequest) Reset()                    { *m = AggregationRequest{} }
func (*AggregationRequest) ProtoMessage()               {}
func (*AggregationRequest) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{4} }

type isAggregationRequest_AggregationType interface {
	isAggregationRequest_AggregationType()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type AggregationRequest_DateAggregation struct {
	DateAggregation *DateAggregation `protobuf:"bytes,1,opt,name=date_aggregation,json=dateAggregation,oneof"`
}
type AggregationRequest_FieldAggregation struct {
	FieldAggregation *FieldAggregation `protobuf:"bytes,2,opt,name=field_aggregation,json=fieldAggregation,oneof"`
}
type AggregationRequest_CardinalityAggregation struct {
	CardinalityAggregation *CardinalityAggregation `protobuf:"bytes,3,opt,name=cardinality_aggregation,json=cardinalityAggregation,oneof"`
}

func (*AggregationRequest_DateAggregation) isAggregationRequest_AggregationType()        {}
func (*AggregationRequest_FieldAggregation) isAggregationRequest_AggregationType()       {}
func (*AggregationRequest_CardinalityAggregation) isAggregationRequest_AggregationType() {}

func (m *AggregationRequest) GetAggregationType() isAggregationRequest_AggregationType {
	if m != nil {
		return m.AggregationType
	}
	return nil
}

func (m *AggregationRequest) GetDateAggregation() *DateAggregation {
	if x, ok := m.GetAggregationType().(*AggregationRequest_DateAggregation); ok {
		return x.DateAggregation
	}
	return nil
}

func (m *AggregationRequest) GetFieldAggregation() *FieldAggregation {
	if x, ok := m.GetAggregationType().(*AggregationRequest_FieldAggregation); ok {
		return x.FieldAggregation
	}
	return nil
}

func (m *AggregationRequest) GetCardinalityAggregation() *CardinalityAggregation {
	if x, ok := m.GetAggregationType().(*AggregationRequest_CardinalityAggregation); ok {
		return x.CardinalityAggregation
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*AggregationRequest) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _AggregationRequest_OneofMarshaler, _AggregationRequest_OneofUnmarshaler, _AggregationRequest_OneofSizer, []interface{}{
		(*AggregationRequest_DateAggregation)(nil),
		(*AggregationRequest_FieldAggregation)(nil),
		(*AggregationRequest_CardinalityAggregation)(nil),
	}
}

func _AggregationRequest_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*AggregationRequest)
	// aggregation_type
	switch x := m.AggregationType.(type) {
	case *AggregationRequest_DateAggregation:
		_ = b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.DateAggregation); err != nil {
			return err
		}
	case *AggregationRequest_FieldAggregation:
		_ = b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.FieldAggregation); err != nil {
			return err
		}
	case *AggregationRequest_CardinalityAggregation:
		_ = b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.CardinalityAggregation); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("AggregationRequest.AggregationType has unexpected type %T", x)
	}
	return nil
}

func _AggregationRequest_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*AggregationRequest)
	switch tag {
	case 1: // aggregation_type.date_aggregation
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(DateAggregation)
		err := b.DecodeMessage(msg)
		m.AggregationType = &AggregationRequest_DateAggregation{msg}
		return true, err
	case 2: // aggregation_type.field_aggregation
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(FieldAggregation)
		err := b.DecodeMessage(msg)
		m.AggregationType = &AggregationRequest_FieldAggregation{msg}
		return true, err
	case 3: // aggregation_type.cardinality_aggregation
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(CardinalityAggregation)
		err := b.DecodeMessage(msg)
		m.AggregationType = &AggregationRequest_CardinalityAggregation{msg}
		return true, err
	default:
		return false, nil
	}
}

func _AggregationRequest_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*AggregationRequest)
	// aggregation_type
	switch x := m.AggregationType.(type) {
	case *AggregationRequest_DateAggregation:
		s := proto.Size(x.DateAggregation)
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *AggregationRequest_FieldAggregation:
		s := proto.Size(x.FieldAggregation)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *AggregationRequest_CardinalityAggregation:
		s := proto.Size(x.CardinalityAggregation)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

func init() {
	proto.RegisterType((*DateSubAggregation)(nil), "ves.io.schema.log.access_log.DateSubAggregation")
	proto.RegisterType((*DateAggregation)(nil), "ves.io.schema.log.access_log.DateAggregation")
	proto.RegisterType((*FieldAggregation)(nil), "ves.io.schema.log.access_log.FieldAggregation")
	proto.RegisterType((*CardinalityAggregation)(nil), "ves.io.schema.log.access_log.CardinalityAggregation")
	proto.RegisterType((*AggregationRequest)(nil), "ves.io.schema.log.access_log.AggregationRequest")
	proto.RegisterEnum("ves.io.schema.log.access_log.KeyField", KeyField_name, KeyField_value)
}
func (x KeyField) String() string {
	s, ok := KeyField_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *DateSubAggregation) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DateSubAggregation)
	if !ok {
		that2, ok := that.(DateSubAggregation)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.AggregationType == nil {
		if this.AggregationType != nil {
			return false
		}
	} else if this.AggregationType == nil {
		return false
	} else if !this.AggregationType.Equal(that1.AggregationType) {
		return false
	}
	return true
}
func (this *DateSubAggregation_FieldAggregation) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DateSubAggregation_FieldAggregation)
	if !ok {
		that2, ok := that.(DateSubAggregation_FieldAggregation)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.FieldAggregation.Equal(that1.FieldAggregation) {
		return false
	}
	return true
}
func (this *DateAggregation) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DateAggregation)
	if !ok {
		that2, ok := that.(DateAggregation)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Step != that1.Step {
		return false
	}
	if len(this.SubAggs) != len(that1.SubAggs) {
		return false
	}
	for i := range this.SubAggs {
		if !this.SubAggs[i].Equal(that1.SubAggs[i]) {
			return false
		}
	}
	return true
}
func (this *FieldAggregation) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*FieldAggregation)
	if !ok {
		that2, ok := that.(FieldAggregation)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Field != that1.Field {
		return false
	}
	if this.Topk != that1.Topk {
		return false
	}
	return true
}
func (this *CardinalityAggregation) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CardinalityAggregation)
	if !ok {
		that2, ok := that.(CardinalityAggregation)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Field != that1.Field {
		return false
	}
	return true
}
func (this *AggregationRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AggregationRequest)
	if !ok {
		that2, ok := that.(AggregationRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.AggregationType == nil {
		if this.AggregationType != nil {
			return false
		}
	} else if this.AggregationType == nil {
		return false
	} else if !this.AggregationType.Equal(that1.AggregationType) {
		return false
	}
	return true
}
func (this *AggregationRequest_DateAggregation) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AggregationRequest_DateAggregation)
	if !ok {
		that2, ok := that.(AggregationRequest_DateAggregation)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DateAggregation.Equal(that1.DateAggregation) {
		return false
	}
	return true
}
func (this *AggregationRequest_FieldAggregation) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AggregationRequest_FieldAggregation)
	if !ok {
		that2, ok := that.(AggregationRequest_FieldAggregation)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.FieldAggregation.Equal(that1.FieldAggregation) {
		return false
	}
	return true
}
func (this *AggregationRequest_CardinalityAggregation) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AggregationRequest_CardinalityAggregation)
	if !ok {
		that2, ok := that.(AggregationRequest_CardinalityAggregation)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.CardinalityAggregation.Equal(that1.CardinalityAggregation) {
		return false
	}
	return true
}
func (this *DateSubAggregation) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&access_log.DateSubAggregation{")
	if this.AggregationType != nil {
		s = append(s, "AggregationType: "+fmt.Sprintf("%#v", this.AggregationType)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DateSubAggregation_FieldAggregation) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&access_log.DateSubAggregation_FieldAggregation{` +
		`FieldAggregation:` + fmt.Sprintf("%#v", this.FieldAggregation) + `}`}, ", ")
	return s
}
func (this *DateAggregation) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&access_log.DateAggregation{")
	s = append(s, "Step: "+fmt.Sprintf("%#v", this.Step)+",\n")
	keysForSubAggs := make([]string, 0, len(this.SubAggs))
	for k, _ := range this.SubAggs {
		keysForSubAggs = append(keysForSubAggs, k)
	}
	sortkeys.Strings(keysForSubAggs)
	mapStringForSubAggs := "map[string]*DateSubAggregation{"
	for _, k := range keysForSubAggs {
		mapStringForSubAggs += fmt.Sprintf("%#v: %#v,", k, this.SubAggs[k])
	}
	mapStringForSubAggs += "}"
	if this.SubAggs != nil {
		s = append(s, "SubAggs: "+mapStringForSubAggs+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *FieldAggregation) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&access_log.FieldAggregation{")
	s = append(s, "Field: "+fmt.Sprintf("%#v", this.Field)+",\n")
	s = append(s, "Topk: "+fmt.Sprintf("%#v", this.Topk)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CardinalityAggregation) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&access_log.CardinalityAggregation{")
	s = append(s, "Field: "+fmt.Sprintf("%#v", this.Field)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AggregationRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&access_log.AggregationRequest{")
	if this.AggregationType != nil {
		s = append(s, "AggregationType: "+fmt.Sprintf("%#v", this.AggregationType)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AggregationRequest_DateAggregation) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&access_log.AggregationRequest_DateAggregation{` +
		`DateAggregation:` + fmt.Sprintf("%#v", this.DateAggregation) + `}`}, ", ")
	return s
}
func (this *AggregationRequest_FieldAggregation) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&access_log.AggregationRequest_FieldAggregation{` +
		`FieldAggregation:` + fmt.Sprintf("%#v", this.FieldAggregation) + `}`}, ", ")
	return s
}
func (this *AggregationRequest_CardinalityAggregation) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&access_log.AggregationRequest_CardinalityAggregation{` +
		`CardinalityAggregation:` + fmt.Sprintf("%#v", this.CardinalityAggregation) + `}`}, ", ")
	return s
}
func valueToGoStringTypes(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *DateSubAggregation) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DateSubAggregation) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.AggregationType != nil {
		nn1, err := m.AggregationType.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn1
	}
	return i, nil
}

func (m *DateSubAggregation_FieldAggregation) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.FieldAggregation != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.FieldAggregation.Size()))
		n2, err := m.FieldAggregation.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	return i, nil
}
func (m *DateAggregation) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DateAggregation) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Step) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Step)))
		i += copy(dAtA[i:], m.Step)
	}
	if len(m.SubAggs) > 0 {
		keysForSubAggs := make([]string, 0, len(m.SubAggs))
		for k, _ := range m.SubAggs {
			keysForSubAggs = append(keysForSubAggs, string(k))
		}
		sortkeys.Strings(keysForSubAggs)
		for _, k := range keysForSubAggs {
			dAtA[i] = 0x12
			i++
			v := m.SubAggs[string(k)]
			msgSize := 0
			if v != nil {
				msgSize = v.Size()
				msgSize += 1 + sovTypes(uint64(msgSize))
			}
			mapSize := 1 + len(k) + sovTypes(uint64(len(k))) + msgSize
			i = encodeVarintTypes(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintTypes(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			if v != nil {
				dAtA[i] = 0x12
				i++
				i = encodeVarintTypes(dAtA, i, uint64(v.Size()))
				n3, err := v.MarshalTo(dAtA[i:])
				if err != nil {
					return 0, err
				}
				i += n3
			}
		}
	}
	return i, nil
}

func (m *FieldAggregation) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FieldAggregation) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Field != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.Field))
	}
	if m.Topk != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.Topk))
	}
	return i, nil
}

func (m *CardinalityAggregation) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CardinalityAggregation) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Field != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.Field))
	}
	return i, nil
}

func (m *AggregationRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AggregationRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.AggregationType != nil {
		nn4, err := m.AggregationType.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn4
	}
	return i, nil
}

func (m *AggregationRequest_DateAggregation) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.DateAggregation != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.DateAggregation.Size()))
		n5, err := m.DateAggregation.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	return i, nil
}
func (m *AggregationRequest_FieldAggregation) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.FieldAggregation != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.FieldAggregation.Size()))
		n6, err := m.FieldAggregation.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	return i, nil
}
func (m *AggregationRequest_CardinalityAggregation) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.CardinalityAggregation != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.CardinalityAggregation.Size()))
		n7, err := m.CardinalityAggregation.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	return i, nil
}
func encodeVarintTypes(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func NewPopulatedDateSubAggregation(r randyTypes, easy bool) *DateSubAggregation {
	this := &DateSubAggregation{}
	oneofNumber_AggregationType := []int32{1}[r.Intn(1)]
	switch oneofNumber_AggregationType {
	case 1:
		this.AggregationType = NewPopulatedDateSubAggregation_FieldAggregation(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedDateSubAggregation_FieldAggregation(r randyTypes, easy bool) *DateSubAggregation_FieldAggregation {
	this := &DateSubAggregation_FieldAggregation{}
	this.FieldAggregation = NewPopulatedFieldAggregation(r, easy)
	return this
}
func NewPopulatedDateAggregation(r randyTypes, easy bool) *DateAggregation {
	this := &DateAggregation{}
	this.Step = string(randStringTypes(r))
	if r.Intn(10) != 0 {
		v1 := r.Intn(10)
		this.SubAggs = make(map[string]*DateSubAggregation)
		for i := 0; i < v1; i++ {
			this.SubAggs[randStringTypes(r)] = NewPopulatedDateSubAggregation(r, easy)
		}
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedFieldAggregation(r randyTypes, easy bool) *FieldAggregation {
	this := &FieldAggregation{}
	this.Field = KeyField([]int32{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 26, 16, 17, 18, 19, 20, 25, 21, 22, 23, 24, 27}[r.Intn(28)])
	this.Topk = uint32(r.Uint32())
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedCardinalityAggregation(r randyTypes, easy bool) *CardinalityAggregation {
	this := &CardinalityAggregation{}
	this.Field = KeyField([]int32{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 26, 16, 17, 18, 19, 20, 25, 21, 22, 23, 24, 27}[r.Intn(28)])
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedAggregationRequest(r randyTypes, easy bool) *AggregationRequest {
	this := &AggregationRequest{}
	oneofNumber_AggregationType := []int32{1, 2, 3}[r.Intn(3)]
	switch oneofNumber_AggregationType {
	case 1:
		this.AggregationType = NewPopulatedAggregationRequest_DateAggregation(r, easy)
	case 2:
		this.AggregationType = NewPopulatedAggregationRequest_FieldAggregation(r, easy)
	case 3:
		this.AggregationType = NewPopulatedAggregationRequest_CardinalityAggregation(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedAggregationRequest_DateAggregation(r randyTypes, easy bool) *AggregationRequest_DateAggregation {
	this := &AggregationRequest_DateAggregation{}
	this.DateAggregation = NewPopulatedDateAggregation(r, easy)
	return this
}
func NewPopulatedAggregationRequest_FieldAggregation(r randyTypes, easy bool) *AggregationRequest_FieldAggregation {
	this := &AggregationRequest_FieldAggregation{}
	this.FieldAggregation = NewPopulatedFieldAggregation(r, easy)
	return this
}
func NewPopulatedAggregationRequest_CardinalityAggregation(r randyTypes, easy bool) *AggregationRequest_CardinalityAggregation {
	this := &AggregationRequest_CardinalityAggregation{}
	this.CardinalityAggregation = NewPopulatedCardinalityAggregation(r, easy)
	return this
}

type randyTypes interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneTypes(r randyTypes) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringTypes(r randyTypes) string {
	v2 := r.Intn(100)
	tmps := make([]rune, v2)
	for i := 0; i < v2; i++ {
		tmps[i] = randUTF8RuneTypes(r)
	}
	return string(tmps)
}
func randUnrecognizedTypes(r randyTypes, maxFieldNumber int) (dAtA []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		dAtA = randFieldTypes(dAtA, r, fieldNumber, wire)
	}
	return dAtA
}
func randFieldTypes(dAtA []byte, r randyTypes, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		dAtA = encodeVarintPopulateTypes(dAtA, uint64(key))
		v3 := r.Int63()
		if r.Intn(2) == 0 {
			v3 *= -1
		}
		dAtA = encodeVarintPopulateTypes(dAtA, uint64(v3))
	case 1:
		dAtA = encodeVarintPopulateTypes(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		dAtA = encodeVarintPopulateTypes(dAtA, uint64(key))
		ll := r.Intn(100)
		dAtA = encodeVarintPopulateTypes(dAtA, uint64(ll))
		for j := 0; j < ll; j++ {
			dAtA = append(dAtA, byte(r.Intn(256)))
		}
	default:
		dAtA = encodeVarintPopulateTypes(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return dAtA
}
func encodeVarintPopulateTypes(dAtA []byte, v uint64) []byte {
	for v >= 1<<7 {
		dAtA = append(dAtA, uint8(uint64(v)&0x7f|0x80))
		v >>= 7
	}
	dAtA = append(dAtA, uint8(v))
	return dAtA
}
func (m *DateSubAggregation) Size() (n int) {
	var l int
	_ = l
	if m.AggregationType != nil {
		n += m.AggregationType.Size()
	}
	return n
}

func (m *DateSubAggregation_FieldAggregation) Size() (n int) {
	var l int
	_ = l
	if m.FieldAggregation != nil {
		l = m.FieldAggregation.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *DateAggregation) Size() (n int) {
	var l int
	_ = l
	l = len(m.Step)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if len(m.SubAggs) > 0 {
		for k, v := range m.SubAggs {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovTypes(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovTypes(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovTypes(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *FieldAggregation) Size() (n int) {
	var l int
	_ = l
	if m.Field != 0 {
		n += 1 + sovTypes(uint64(m.Field))
	}
	if m.Topk != 0 {
		n += 1 + sovTypes(uint64(m.Topk))
	}
	return n
}

func (m *CardinalityAggregation) Size() (n int) {
	var l int
	_ = l
	if m.Field != 0 {
		n += 1 + sovTypes(uint64(m.Field))
	}
	return n
}

func (m *AggregationRequest) Size() (n int) {
	var l int
	_ = l
	if m.AggregationType != nil {
		n += m.AggregationType.Size()
	}
	return n
}

func (m *AggregationRequest_DateAggregation) Size() (n int) {
	var l int
	_ = l
	if m.DateAggregation != nil {
		l = m.DateAggregation.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *AggregationRequest_FieldAggregation) Size() (n int) {
	var l int
	_ = l
	if m.FieldAggregation != nil {
		l = m.FieldAggregation.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *AggregationRequest_CardinalityAggregation) Size() (n int) {
	var l int
	_ = l
	if m.CardinalityAggregation != nil {
		l = m.CardinalityAggregation.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func sovTypes(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozTypes(x uint64) (n int) {
	return sovTypes(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *DateSubAggregation) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DateSubAggregation{`,
		`AggregationType:` + fmt.Sprintf("%v", this.AggregationType) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DateSubAggregation_FieldAggregation) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DateSubAggregation_FieldAggregation{`,
		`FieldAggregation:` + strings.Replace(fmt.Sprintf("%v", this.FieldAggregation), "FieldAggregation", "FieldAggregation", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DateAggregation) String() string {
	if this == nil {
		return "nil"
	}
	keysForSubAggs := make([]string, 0, len(this.SubAggs))
	for k, _ := range this.SubAggs {
		keysForSubAggs = append(keysForSubAggs, k)
	}
	sortkeys.Strings(keysForSubAggs)
	mapStringForSubAggs := "map[string]*DateSubAggregation{"
	for _, k := range keysForSubAggs {
		mapStringForSubAggs += fmt.Sprintf("%v: %v,", k, this.SubAggs[k])
	}
	mapStringForSubAggs += "}"
	s := strings.Join([]string{`&DateAggregation{`,
		`Step:` + fmt.Sprintf("%v", this.Step) + `,`,
		`SubAggs:` + mapStringForSubAggs + `,`,
		`}`,
	}, "")
	return s
}
func (this *FieldAggregation) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&FieldAggregation{`,
		`Field:` + fmt.Sprintf("%v", this.Field) + `,`,
		`Topk:` + fmt.Sprintf("%v", this.Topk) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CardinalityAggregation) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CardinalityAggregation{`,
		`Field:` + fmt.Sprintf("%v", this.Field) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AggregationRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AggregationRequest{`,
		`AggregationType:` + fmt.Sprintf("%v", this.AggregationType) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AggregationRequest_DateAggregation) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AggregationRequest_DateAggregation{`,
		`DateAggregation:` + strings.Replace(fmt.Sprintf("%v", this.DateAggregation), "DateAggregation", "DateAggregation", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AggregationRequest_FieldAggregation) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AggregationRequest_FieldAggregation{`,
		`FieldAggregation:` + strings.Replace(fmt.Sprintf("%v", this.FieldAggregation), "FieldAggregation", "FieldAggregation", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AggregationRequest_CardinalityAggregation) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AggregationRequest_CardinalityAggregation{`,
		`CardinalityAggregation:` + strings.Replace(fmt.Sprintf("%v", this.CardinalityAggregation), "CardinalityAggregation", "CardinalityAggregation", 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringTypes(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *DateSubAggregation) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DateSubAggregation: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DateSubAggregation: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FieldAggregation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &FieldAggregation{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.AggregationType = &DateSubAggregation_FieldAggregation{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DateAggregation) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DateAggregation: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DateAggregation: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Step", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Step = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubAggs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SubAggs == nil {
				m.SubAggs = make(map[string]*DateSubAggregation)
			}
			var mapkey string
			var mapvalue *DateSubAggregation
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTypes
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthTypes
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTypes
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= (int(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthTypes
					}
					postmsgIndex := iNdEx + mapmsglen
					if mapmsglen < 0 {
						return ErrInvalidLengthTypes
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &DateSubAggregation{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipTypes(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthTypes
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.SubAggs[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FieldAggregation) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FieldAggregation: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FieldAggregation: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Field", wireType)
			}
			m.Field = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Field |= (KeyField(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Topk", wireType)
			}
			m.Topk = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Topk |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CardinalityAggregation) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CardinalityAggregation: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CardinalityAggregation: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Field", wireType)
			}
			m.Field = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Field |= (KeyField(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AggregationRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AggregationRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AggregationRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DateAggregation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &DateAggregation{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.AggregationType = &AggregationRequest_DateAggregation{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FieldAggregation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &FieldAggregation{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.AggregationType = &AggregationRequest_FieldAggregation{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CardinalityAggregation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &CardinalityAggregation{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.AggregationType = &AggregationRequest_CardinalityAggregation{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTypes(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthTypes
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipTypes(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthTypes = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTypes   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("ves.io/schema/log/access_log/types.proto", fileDescriptorTypes) }

var fileDescriptorTypes = []byte{
	// 871 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x55, 0x4f, 0x6f, 0xe3, 0x44,
	0x1c, 0xcd, 0x24, 0x69, 0x9b, 0x4e, 0xff, 0x64, 0x76, 0x76, 0xe9, 0x86, 0x6c, 0xb1, 0xaa, 0x1c,
	0x50, 0xb5, 0x52, 0x1d, 0x54, 0x38, 0xa0, 0x15, 0x17, 0xd7, 0x99, 0x12, 0x2f, 0x6d, 0x6c, 0x66,
	0x9c, 0xa0, 0xae, 0x84, 0x2c, 0x27, 0x99, 0x7a, 0xa3, 0xa6, 0x9d, 0x60, 0x3b, 0x81, 0xdc, 0xf8,
	0x08, 0x7b, 0xe3, 0x23, 0xc0, 0x47, 0x40, 0xec, 0xa5, 0x47, 0x8e, 0x3d, 0xee, 0x91, 0x1a, 0x0e,
	0xc0, 0x69, 0x8f, 0x1c, 0xd1, 0x8c, 0x53, 0x35, 0x89, 0xa2, 0x20, 0xa4, 0xbd, 0xfd, 0xfe, 0xbe,
	0xf7, 0xe6, 0xf5, 0x57, 0x07, 0xee, 0x8f, 0x78, 0xa4, 0xf7, 0x44, 0x35, 0xea, 0xbc, 0xe4, 0x97,
	0x7e, 0xb5, 0x2f, 0x82, 0xaa, 0xdf, 0xe9, 0xf0, 0x28, 0xf2, 0x64, 0x18, 0x8f, 0x07, 0x3c, 0xd2,
	0x07, 0xa1, 0x88, 0x05, 0xde, 0x4d, 0x27, 0xf5, 0x74, 0x52, 0xef, 0x8b, 0x40, 0xbf, 0x9f, 0x2c,
	0x1f, 0x04, 0xbd, 0xf8, 0xe5, 0xb0, 0xad, 0x77, 0xc4, 0x65, 0x35, 0x10, 0x81, 0xa8, 0xaa, 0xa5,
	0xf6, 0xf0, 0x5c, 0x65, 0x2a, 0x51, 0x51, 0x0a, 0x56, 0x7e, 0x32, 0x4b, 0x2b, 0x06, 0x71, 0x4f,
	0x5c, 0x4d, 0x98, 0xca, 0xbb, 0xb3, 0xcd, 0x91, 0xdf, 0xef, 0x75, 0xfd, 0x98, 0x4f, 0xba, 0x7b,
	0x73, 0xdd, 0x1e, 0xff, 0xd6, 0x9b, 0xd9, 0xaf, 0xfc, 0x00, 0x20, 0xae, 0xf9, 0x31, 0x67, 0xc3,
	0xb6, 0x11, 0x04, 0x21, 0x0f, 0x7c, 0xd9, 0xc5, 0x5f, 0xc3, 0x07, 0xe7, 0x3d, 0xde, 0xef, 0x7a,
	0xfe, 0x7d, 0xb1, 0x04, 0xf6, 0xc0, 0xfe, 0xc6, 0xa1, 0xae, 0x2f, 0x7b, 0x9c, 0x7e, 0x2c, 0xd7,
	0xa6, 0xa0, 0xea, 0x19, 0x8a, 0xce, 0xe7, 0x6a, 0x47, 0xbb, 0x10, 0x4d, 0x01, 0x7b, 0xd2, 0x3a,
	0x5c, 0xb8, 0x7e, 0x0d, 0xc0, 0xcd, 0x6b, 0x90, 0x7d, 0x9e, 0x2f, 0x64, 0x51, 0xae, 0xf2, 0x37,
	0x80, 0x45, 0xa9, 0x6c, 0x5a, 0x16, 0x86, 0xf9, 0x28, 0xe6, 0x03, 0xa5, 0x64, 0x9d, 0xaa, 0x18,
	0x37, 0x61, 0x21, 0x1a, 0xb6, 0xa5, 0xd0, 0xa8, 0x94, 0xdd, 0xcb, 0xed, 0x6f, 0x1c, 0x3e, 0x5b,
	0xae, 0x70, 0x0e, 0x54, 0x4f, 0x9f, 0x1e, 0x91, 0xab, 0x38, 0x1c, 0xd3, 0xb5, 0x28, 0xcd, 0xca,
	0x7d, 0xb8, 0x39, 0xdd, 0xc0, 0x08, 0xe6, 0x2e, 0xf8, 0x78, 0xc2, 0x2c, 0x43, 0x7c, 0x0c, 0x57,
	0x46, 0x7e, 0x7f, 0xc8, 0x4b, 0x59, 0xe5, 0xcb, 0x47, 0xff, 0xcd, 0x3a, 0x6b, 0x32, 0x4d, 0xd7,
	0x9f, 0x65, 0x3f, 0x05, 0x15, 0x01, 0xd1, 0xbc, 0x71, 0xf8, 0x33, 0xb8, 0xa2, 0x8c, 0x53, 0x9c,
	0xdb, 0x87, 0x1f, 0x2e, 0xc7, 0xff, 0x82, 0x8f, 0x15, 0x02, 0x4d, 0x97, 0xf0, 0x07, 0x30, 0x1f,
	0x8b, 0xc1, 0x85, 0x12, 0xb7, 0x75, 0xb4, 0xfe, 0xcb, 0x5f, 0xd7, 0xb9, 0xfc, 0xd3, 0x6c, 0xa9,
	0x4b, 0x55, 0xb9, 0xd2, 0x82, 0x3b, 0xa6, 0x1f, 0x76, 0x7b, 0x57, 0x7e, 0xbf, 0x17, 0x8f, 0xdf,
	0x19, 0x6d, 0xe5, 0x8f, 0x2c, 0xc4, 0xd3, 0x6f, 0xe4, 0xdf, 0x0c, 0x79, 0x14, 0xe3, 0x17, 0x10,
	0xc9, 0xb3, 0x5c, 0x70, 0x4e, 0x07, 0xff, 0xeb, 0x8f, 0x55, 0xcf, 0xd0, 0x62, 0x77, 0xee, 0x28,
	0x16, 0xde, 0x6a, 0xf6, 0x5d, 0xdd, 0x2a, 0x16, 0xf0, 0x71, 0xe7, 0xde, 0xa9, 0x19, 0x92, 0x9c,
	0x22, 0xf9, 0x64, 0x39, 0xc9, 0x62, 0x9b, 0xeb, 0x19, 0xba, 0xd3, 0x59, 0xd8, 0x59, 0xfa, 0xcf,
	0x91, 0x7f, 0x9e, 0x2f, 0xe4, 0xd1, 0xca, 0xd3, 0x1f, 0x73, 0xb0, 0x70, 0x67, 0x3d, 0x46, 0x70,
	0xd3, 0x70, 0x2c, 0x8f, 0x34, 0x6a, 0x8e, 0x6d, 0x35, 0x5c, 0x94, 0xc1, 0x9b, 0xb0, 0x60, 0x38,
	0x8e, 0xe7, 0x9e, 0x39, 0x04, 0x01, 0xbc, 0x05, 0xd7, 0x8d, 0xa6, 0x5b, 0xb7, 0xa9, 0xe5, 0x9e,
	0xa1, 0x2c, 0x5e, 0x83, 0x39, 0x83, 0x35, 0x50, 0x4e, 0xee, 0x1d, 0x51, 0xfb, 0x2b, 0x46, 0x68,
	0x3a, 0x99, 0xc7, 0x05, 0x98, 0x37, 0xe5, 0xd0, 0x0a, 0xde, 0x80, 0x6b, 0xa6, 0xdd, 0x6c, 0xb8,
	0xf4, 0x0c, 0xad, 0xe2, 0x22, 0xdc, 0xa8, 0x91, 0x96, 0x65, 0x92, 0x74, 0x6e, 0x4d, 0x42, 0xd4,
	0x98, 0x8b, 0x0a, 0x12, 0xa2, 0xc6, 0x5c, 0xcf, 0x6a, 0x30, 0xd7, 0x68, 0x98, 0x04, 0xad, 0x4b,
	0x6a, 0x59, 0x61, 0x96, 0x4b, 0x10, 0xc4, 0x10, 0xae, 0x9e, 0x12, 0xb7, 0x6e, 0xd7, 0xd0, 0x86,
	0x8c, 0x99, 0x59, 0x27, 0xa7, 0x04, 0x6d, 0xe2, 0x87, 0xb0, 0x48, 0xc9, 0xa9, 0xed, 0x12, 0xef,
	0xc4, 0x36, 0x0d, 0xd7, 0xb2, 0x1b, 0x68, 0x4b, 0xae, 0x52, 0xf2, 0xa5, 0xe7, 0x18, 0x6e, 0x1d,
	0x6d, 0xab, 0x8c, 0x39, 0x9e, 0x69, 0xd7, 0x08, 0x2a, 0x62, 0x0c, 0xb7, 0xef, 0x32, 0xcf, 0x3c,
	0x31, 0x18, 0x43, 0x65, 0xa9, 0x82, 0x51, 0x13, 0x21, 0xa9, 0x82, 0x51, 0xf3, 0x5e, 0xc5, 0x03,
	0xc5, 0x25, 0x2b, 0x0e, 0xc2, 0x12, 0x48, 0xc6, 0x4a, 0xd1, 0x43, 0xfc, 0x08, 0x22, 0xf7, 0x84,
	0x79, 0xa6, 0xe5, 0xd4, 0x09, 0xf5, 0x58, 0x53, 0x56, 0x1f, 0x49, 0x3d, 0xb2, 0x7a, 0x6c, 0x35,
	0x3e, 0x27, 0xd4, 0xa1, 0xd2, 0xc5, 0xf7, 0xe5, 0xb3, 0x65, 0xb1, 0x45, 0x28, 0x93, 0x02, 0xdf,
	0x93, 0xf6, 0x34, 0x19, 0xa1, 0x68, 0x47, 0xda, 0xd3, 0xaa, 0x7b, 0x0d, 0xe3, 0x94, 0xa0, 0xc7,
	0x93, 0x44, 0x59, 0x53, 0xc2, 0xdb, 0x10, 0xb6, 0x2c, 0x66, 0xb9, 0x36, 0xf5, 0xac, 0x1a, 0x7a,
	0x72, 0xf4, 0x0a, 0xdc, 0xdc, 0x6a, 0x99, 0x37, 0xb7, 0x5a, 0xe6, 0xed, 0xad, 0x06, 0xfe, 0xb9,
	0xd5, 0xc0, 0xf7, 0x89, 0x06, 0x7e, 0x4a, 0x34, 0xf0, 0x73, 0xa2, 0x81, 0xeb, 0x44, 0x03, 0xbf,
	0x26, 0x1a, 0xb8, 0x49, 0x34, 0xf0, 0x26, 0xd1, 0xc0, 0x6f, 0x89, 0x06, 0xfe, 0x4c, 0xb4, 0xcc,
	0xdb, 0x44, 0x03, 0xaf, 0x7e, 0xd7, 0x32, 0x2f, 0x68, 0x20, 0x06, 0x17, 0x81, 0x3e, 0x12, 0xfd,
	0x98, 0x87, 0xa1, 0xaf, 0x0f, 0xa3, 0xaa, 0x0a, 0xce, 0x45, 0x78, 0x79, 0x30, 0x08, 0xc5, 0xa8,
	0xd7, 0xe5, 0xe1, 0xc1, 0x5d, 0xbb, 0x3a, 0x68, 0x07, 0xa2, 0xca, 0xbf, 0x8b, 0x27, 0x1f, 0xfc,
	0x85, 0xbf, 0x54, 0xed, 0x55, 0xf5, 0xe9, 0xff, 0xf8, 0xdf, 0x00, 0x00, 0x00, 0xff, 0xff, 0xd6,
	0x88, 0xda, 0x46, 0xd0, 0x06, 0x00, 0x00,
}
