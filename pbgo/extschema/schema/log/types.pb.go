// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ves.io/schema/log/types.proto

package log

import (
	fmt "fmt"

	proto "github.com/gogo/protobuf/proto"

	math "math"

	_ "github.com/gogo/protobuf/gogoproto"

	_ "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"

	_ "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"

	strings "strings"

	reflect "reflect"

	sortkeys "github.com/gogo/protobuf/sortkeys"

	io "io"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// DateAggregationBucket
//
// x-displayName: "Date Aggregation Bucket"
// Date histogram bucket containing the timestamp and the number of logs in that bucket.
type DateAggregationBucket struct {
	// time
	//
	// x-displayName: "Time"
	// x-example: 1578710280000
	//
	// unix timestamp
	Time uint64 `protobuf:"varint,1,opt,name=time,proto3" json:"time,omitempty"`
	// count
	//
	// x-displayName: "Count"
	// x-example: 45
	//
	// number of logs in this bucket
	Count uint64 `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	// sub aggregation
	//
	// x-displayName: "Sub Aggregation"
	// Sub aggregation data for the date bucket
	SubAggs map[string]*DateSubAggregationData `protobuf:"bytes,3,rep,name=sub_aggs,json=subAggs" json:"sub_aggs,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *DateAggregationBucket) Reset()                    { *m = DateAggregationBucket{} }
func (*DateAggregationBucket) ProtoMessage()               {}
func (*DateAggregationBucket) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{0} }

func (m *DateAggregationBucket) GetTime() uint64 {
	if m != nil {
		return m.Time
	}
	return 0
}

func (m *DateAggregationBucket) GetCount() uint64 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *DateAggregationBucket) GetSubAggs() map[string]*DateSubAggregationData {
	if m != nil {
		return m.SubAggs
	}
	return nil
}

// DateSubAggregationData
//
// x-displayName: "Date SubAggregation"
//
// Date subaggregation data
type DateSubAggregationData struct {
	// field aggregation
	// x-displayName: "Field Aggregation"
	//
	// Field aggregation data
	FieldAggregation *FieldAggregationData `protobuf:"bytes,1,opt,name=field_aggregation,json=fieldAggregation" json:"field_aggregation,omitempty"`
}

func (m *DateSubAggregationData) Reset()                    { *m = DateSubAggregationData{} }
func (*DateSubAggregationData) ProtoMessage()               {}
func (*DateSubAggregationData) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{1} }

func (m *DateSubAggregationData) GetFieldAggregation() *FieldAggregationData {
	if m != nil {
		return m.FieldAggregation
	}
	return nil
}

// DateAggregationData
//
// x-displayName: "Date Aggregation Data"
// Date aggregation data
type DateAggregationData struct {
	// buckets
	//
	// x-displayName: "Buckets"
	// Lists of buckets containing timestamp and the corresponding log count
	Buckets []*DateAggregationBucket `protobuf:"bytes,2,rep,name=buckets" json:"buckets,omitempty"`
}

func (m *DateAggregationData) Reset()                    { *m = DateAggregationData{} }
func (*DateAggregationData) ProtoMessage()               {}
func (*DateAggregationData) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{2} }

func (m *DateAggregationData) GetBuckets() []*DateAggregationBucket {
	if m != nil {
		return m.Buckets
	}
	return nil
}

// FieldAggregationBucket
//
// x-displayName: "Field Aggregation Bucket"
// Field aggregation bucket containing field value and the number of logs.
type FieldAggregationBucket struct {
	// key
	//
	// x-displayName: "Key"
	// x-example: "US"
	Key string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// count
	//
	// x-displayName: "Count"
	// x-example: 45
	//
	// number of logs in this bucket
	Count uint64 `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
}

func (m *FieldAggregationBucket) Reset()                    { *m = FieldAggregationBucket{} }
func (*FieldAggregationBucket) ProtoMessage()               {}
func (*FieldAggregationBucket) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{3} }

func (m *FieldAggregationBucket) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *FieldAggregationBucket) GetCount() uint64 {
	if m != nil {
		return m.Count
	}
	return 0
}

// FieldAggregationData
//
// x-displayName: "Field Aggregation Data"
// Field Aggregation data
type FieldAggregationData struct {
	// buckets
	//
	// x-displayName: "Buckets"
	// Lists of buckets containing field value and the corresponding log count
	Buckets []*FieldAggregationBucket `protobuf:"bytes,2,rep,name=buckets" json:"buckets,omitempty"`
}

func (m *FieldAggregationData) Reset()                    { *m = FieldAggregationData{} }
func (*FieldAggregationData) ProtoMessage()               {}
func (*FieldAggregationData) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{4} }

func (m *FieldAggregationData) GetBuckets() []*FieldAggregationBucket {
	if m != nil {
		return m.Buckets
	}
	return nil
}

// CardinalityAggregationData
//
// x-displayName: "Cardinality Aggregation Data"
// Approximate count of distinct values of the log field specified in the request.
type CardinalityAggregationData struct {
	// count
	//
	// x-displayName: "Count"
	// x-example: 100
	// Count of distinct values of a log field
	Count uint64 `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
}

func (m *CardinalityAggregationData) Reset()                    { *m = CardinalityAggregationData{} }
func (*CardinalityAggregationData) ProtoMessage()               {}
func (*CardinalityAggregationData) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{5} }

func (m *CardinalityAggregationData) GetCount() uint64 {
	if m != nil {
		return m.Count
	}
	return 0
}

// LogAggregationData
//
// x-displayName: "Log Aggregation"
// Log aggregation response data
type LogAggregationData struct {
	// date aggregation
	// x-displayName: "Date Aggregation"
	//
	// Date aggregation data
	DateAggregation *DateAggregationData `protobuf:"bytes,3,opt,name=date_aggregation,json=dateAggregation" json:"date_aggregation,omitempty"`
	// field aggregation
	// x-displayName: "Field Aggregation"
	//
	// Field aggregation data
	FieldAggregation *FieldAggregationData `protobuf:"bytes,4,opt,name=field_aggregation,json=fieldAggregation" json:"field_aggregation,omitempty"`
	// cardinality aggregation
	// x-displayName: "Cardinality Aggregation"
	//
	// Cardinality aggregation data
	CardinalityAggregation *CardinalityAggregationData `protobuf:"bytes,5,opt,name=cardinality_aggregation,json=cardinalityAggregation" json:"cardinality_aggregation,omitempty"`
}

func (m *LogAggregationData) Reset()                    { *m = LogAggregationData{} }
func (*LogAggregationData) ProtoMessage()               {}
func (*LogAggregationData) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{6} }

func (m *LogAggregationData) GetDateAggregation() *DateAggregationData {
	if m != nil {
		return m.DateAggregation
	}
	return nil
}

func (m *LogAggregationData) GetFieldAggregation() *FieldAggregationData {
	if m != nil {
		return m.FieldAggregation
	}
	return nil
}

func (m *LogAggregationData) GetCardinalityAggregation() *CardinalityAggregationData {
	if m != nil {
		return m.CardinalityAggregation
	}
	return nil
}

func init() {
	proto.RegisterType((*DateAggregationBucket)(nil), "ves.io.schema.log.DateAggregationBucket")
	proto.RegisterType((*DateSubAggregationData)(nil), "ves.io.schema.log.DateSubAggregationData")
	proto.RegisterType((*DateAggregationData)(nil), "ves.io.schema.log.DateAggregationData")
	proto.RegisterType((*FieldAggregationBucket)(nil), "ves.io.schema.log.FieldAggregationBucket")
	proto.RegisterType((*FieldAggregationData)(nil), "ves.io.schema.log.FieldAggregationData")
	proto.RegisterType((*CardinalityAggregationData)(nil), "ves.io.schema.log.CardinalityAggregationData")
	proto.RegisterType((*LogAggregationData)(nil), "ves.io.schema.log.LogAggregationData")
}
func (this *DateAggregationBucket) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DateAggregationBucket)
	if !ok {
		that2, ok := that.(DateAggregationBucket)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Time != that1.Time {
		return false
	}
	if this.Count != that1.Count {
		return false
	}
	if len(this.SubAggs) != len(that1.SubAggs) {
		return false
	}
	for i := range this.SubAggs {
		if !this.SubAggs[i].Equal(that1.SubAggs[i]) {
			return false
		}
	}
	return true
}
func (this *DateSubAggregationData) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DateSubAggregationData)
	if !ok {
		that2, ok := that.(DateSubAggregationData)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.FieldAggregation.Equal(that1.FieldAggregation) {
		return false
	}
	return true
}
func (this *DateAggregationData) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DateAggregationData)
	if !ok {
		that2, ok := that.(DateAggregationData)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Buckets) != len(that1.Buckets) {
		return false
	}
	for i := range this.Buckets {
		if !this.Buckets[i].Equal(that1.Buckets[i]) {
			return false
		}
	}
	return true
}
func (this *FieldAggregationBucket) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*FieldAggregationBucket)
	if !ok {
		that2, ok := that.(FieldAggregationBucket)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Key != that1.Key {
		return false
	}
	if this.Count != that1.Count {
		return false
	}
	return true
}
func (this *FieldAggregationData) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*FieldAggregationData)
	if !ok {
		that2, ok := that.(FieldAggregationData)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Buckets) != len(that1.Buckets) {
		return false
	}
	for i := range this.Buckets {
		if !this.Buckets[i].Equal(that1.Buckets[i]) {
			return false
		}
	}
	return true
}
func (this *CardinalityAggregationData) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CardinalityAggregationData)
	if !ok {
		that2, ok := that.(CardinalityAggregationData)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Count != that1.Count {
		return false
	}
	return true
}
func (this *LogAggregationData) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*LogAggregationData)
	if !ok {
		that2, ok := that.(LogAggregationData)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DateAggregation.Equal(that1.DateAggregation) {
		return false
	}
	if !this.FieldAggregation.Equal(that1.FieldAggregation) {
		return false
	}
	if !this.CardinalityAggregation.Equal(that1.CardinalityAggregation) {
		return false
	}
	return true
}
func (this *DateAggregationBucket) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&log.DateAggregationBucket{")
	s = append(s, "Time: "+fmt.Sprintf("%#v", this.Time)+",\n")
	s = append(s, "Count: "+fmt.Sprintf("%#v", this.Count)+",\n")
	keysForSubAggs := make([]string, 0, len(this.SubAggs))
	for k, _ := range this.SubAggs {
		keysForSubAggs = append(keysForSubAggs, k)
	}
	sortkeys.Strings(keysForSubAggs)
	mapStringForSubAggs := "map[string]*DateSubAggregationData{"
	for _, k := range keysForSubAggs {
		mapStringForSubAggs += fmt.Sprintf("%#v: %#v,", k, this.SubAggs[k])
	}
	mapStringForSubAggs += "}"
	if this.SubAggs != nil {
		s = append(s, "SubAggs: "+mapStringForSubAggs+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DateSubAggregationData) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&log.DateSubAggregationData{")
	if this.FieldAggregation != nil {
		s = append(s, "FieldAggregation: "+fmt.Sprintf("%#v", this.FieldAggregation)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DateAggregationData) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&log.DateAggregationData{")
	if this.Buckets != nil {
		s = append(s, "Buckets: "+fmt.Sprintf("%#v", this.Buckets)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *FieldAggregationBucket) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&log.FieldAggregationBucket{")
	s = append(s, "Key: "+fmt.Sprintf("%#v", this.Key)+",\n")
	s = append(s, "Count: "+fmt.Sprintf("%#v", this.Count)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *FieldAggregationData) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&log.FieldAggregationData{")
	if this.Buckets != nil {
		s = append(s, "Buckets: "+fmt.Sprintf("%#v", this.Buckets)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CardinalityAggregationData) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&log.CardinalityAggregationData{")
	s = append(s, "Count: "+fmt.Sprintf("%#v", this.Count)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *LogAggregationData) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&log.LogAggregationData{")
	if this.DateAggregation != nil {
		s = append(s, "DateAggregation: "+fmt.Sprintf("%#v", this.DateAggregation)+",\n")
	}
	if this.FieldAggregation != nil {
		s = append(s, "FieldAggregation: "+fmt.Sprintf("%#v", this.FieldAggregation)+",\n")
	}
	if this.CardinalityAggregation != nil {
		s = append(s, "CardinalityAggregation: "+fmt.Sprintf("%#v", this.CardinalityAggregation)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringTypes(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *DateAggregationBucket) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DateAggregationBucket) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Time != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.Time))
	}
	if m.Count != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.Count))
	}
	if len(m.SubAggs) > 0 {
		keysForSubAggs := make([]string, 0, len(m.SubAggs))
		for k, _ := range m.SubAggs {
			keysForSubAggs = append(keysForSubAggs, string(k))
		}
		sortkeys.Strings(keysForSubAggs)
		for _, k := range keysForSubAggs {
			dAtA[i] = 0x1a
			i++
			v := m.SubAggs[string(k)]
			msgSize := 0
			if v != nil {
				msgSize = v.Size()
				msgSize += 1 + sovTypes(uint64(msgSize))
			}
			mapSize := 1 + len(k) + sovTypes(uint64(len(k))) + msgSize
			i = encodeVarintTypes(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintTypes(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			if v != nil {
				dAtA[i] = 0x12
				i++
				i = encodeVarintTypes(dAtA, i, uint64(v.Size()))
				n1, err := v.MarshalTo(dAtA[i:])
				if err != nil {
					return 0, err
				}
				i += n1
			}
		}
	}
	return i, nil
}

func (m *DateSubAggregationData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DateSubAggregationData) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.FieldAggregation != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.FieldAggregation.Size()))
		n2, err := m.FieldAggregation.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	return i, nil
}

func (m *DateAggregationData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DateAggregationData) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Buckets) > 0 {
		for _, msg := range m.Buckets {
			dAtA[i] = 0x12
			i++
			i = encodeVarintTypes(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *FieldAggregationBucket) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FieldAggregationBucket) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Key) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Key)))
		i += copy(dAtA[i:], m.Key)
	}
	if m.Count != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.Count))
	}
	return i, nil
}

func (m *FieldAggregationData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FieldAggregationData) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Buckets) > 0 {
		for _, msg := range m.Buckets {
			dAtA[i] = 0x12
			i++
			i = encodeVarintTypes(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *CardinalityAggregationData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CardinalityAggregationData) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Count != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.Count))
	}
	return i, nil
}

func (m *LogAggregationData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LogAggregationData) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.DateAggregation != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.DateAggregation.Size()))
		n3, err := m.DateAggregation.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	if m.FieldAggregation != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.FieldAggregation.Size()))
		n4, err := m.FieldAggregation.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	if m.CardinalityAggregation != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.CardinalityAggregation.Size()))
		n5, err := m.CardinalityAggregation.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	return i, nil
}

func encodeVarintTypes(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func NewPopulatedDateAggregationBucket(r randyTypes, easy bool) *DateAggregationBucket {
	this := &DateAggregationBucket{}
	this.Time = uint64(uint64(r.Uint32()))
	this.Count = uint64(uint64(r.Uint32()))
	if r.Intn(10) != 0 {
		v1 := r.Intn(10)
		this.SubAggs = make(map[string]*DateSubAggregationData)
		for i := 0; i < v1; i++ {
			this.SubAggs[randStringTypes(r)] = NewPopulatedDateSubAggregationData(r, easy)
		}
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedDateSubAggregationData(r randyTypes, easy bool) *DateSubAggregationData {
	this := &DateSubAggregationData{}
	if r.Intn(10) != 0 {
		this.FieldAggregation = NewPopulatedFieldAggregationData(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedDateAggregationData(r randyTypes, easy bool) *DateAggregationData {
	this := &DateAggregationData{}
	if r.Intn(10) != 0 {
		v2 := r.Intn(5)
		this.Buckets = make([]*DateAggregationBucket, v2)
		for i := 0; i < v2; i++ {
			this.Buckets[i] = NewPopulatedDateAggregationBucket(r, easy)
		}
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedFieldAggregationBucket(r randyTypes, easy bool) *FieldAggregationBucket {
	this := &FieldAggregationBucket{}
	this.Key = string(randStringTypes(r))
	this.Count = uint64(uint64(r.Uint32()))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedFieldAggregationData(r randyTypes, easy bool) *FieldAggregationData {
	this := &FieldAggregationData{}
	if r.Intn(10) != 0 {
		v3 := r.Intn(5)
		this.Buckets = make([]*FieldAggregationBucket, v3)
		for i := 0; i < v3; i++ {
			this.Buckets[i] = NewPopulatedFieldAggregationBucket(r, easy)
		}
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedCardinalityAggregationData(r randyTypes, easy bool) *CardinalityAggregationData {
	this := &CardinalityAggregationData{}
	this.Count = uint64(uint64(r.Uint32()))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedLogAggregationData(r randyTypes, easy bool) *LogAggregationData {
	this := &LogAggregationData{}
	if r.Intn(10) != 0 {
		this.DateAggregation = NewPopulatedDateAggregationData(r, easy)
	}
	if r.Intn(10) != 0 {
		this.FieldAggregation = NewPopulatedFieldAggregationData(r, easy)
	}
	if r.Intn(10) != 0 {
		this.CardinalityAggregation = NewPopulatedCardinalityAggregationData(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

type randyTypes interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneTypes(r randyTypes) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringTypes(r randyTypes) string {
	v4 := r.Intn(100)
	tmps := make([]rune, v4)
	for i := 0; i < v4; i++ {
		tmps[i] = randUTF8RuneTypes(r)
	}
	return string(tmps)
}
func randUnrecognizedTypes(r randyTypes, maxFieldNumber int) (dAtA []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		dAtA = randFieldTypes(dAtA, r, fieldNumber, wire)
	}
	return dAtA
}
func randFieldTypes(dAtA []byte, r randyTypes, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		dAtA = encodeVarintPopulateTypes(dAtA, uint64(key))
		v5 := r.Int63()
		if r.Intn(2) == 0 {
			v5 *= -1
		}
		dAtA = encodeVarintPopulateTypes(dAtA, uint64(v5))
	case 1:
		dAtA = encodeVarintPopulateTypes(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		dAtA = encodeVarintPopulateTypes(dAtA, uint64(key))
		ll := r.Intn(100)
		dAtA = encodeVarintPopulateTypes(dAtA, uint64(ll))
		for j := 0; j < ll; j++ {
			dAtA = append(dAtA, byte(r.Intn(256)))
		}
	default:
		dAtA = encodeVarintPopulateTypes(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return dAtA
}
func encodeVarintPopulateTypes(dAtA []byte, v uint64) []byte {
	for v >= 1<<7 {
		dAtA = append(dAtA, uint8(uint64(v)&0x7f|0x80))
		v >>= 7
	}
	dAtA = append(dAtA, uint8(v))
	return dAtA
}
func (m *DateAggregationBucket) Size() (n int) {
	var l int
	_ = l
	if m.Time != 0 {
		n += 1 + sovTypes(uint64(m.Time))
	}
	if m.Count != 0 {
		n += 1 + sovTypes(uint64(m.Count))
	}
	if len(m.SubAggs) > 0 {
		for k, v := range m.SubAggs {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovTypes(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovTypes(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovTypes(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *DateSubAggregationData) Size() (n int) {
	var l int
	_ = l
	if m.FieldAggregation != nil {
		l = m.FieldAggregation.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *DateAggregationData) Size() (n int) {
	var l int
	_ = l
	if len(m.Buckets) > 0 {
		for _, e := range m.Buckets {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *FieldAggregationBucket) Size() (n int) {
	var l int
	_ = l
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.Count != 0 {
		n += 1 + sovTypes(uint64(m.Count))
	}
	return n
}

func (m *FieldAggregationData) Size() (n int) {
	var l int
	_ = l
	if len(m.Buckets) > 0 {
		for _, e := range m.Buckets {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *CardinalityAggregationData) Size() (n int) {
	var l int
	_ = l
	if m.Count != 0 {
		n += 1 + sovTypes(uint64(m.Count))
	}
	return n
}

func (m *LogAggregationData) Size() (n int) {
	var l int
	_ = l
	if m.DateAggregation != nil {
		l = m.DateAggregation.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.FieldAggregation != nil {
		l = m.FieldAggregation.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.CardinalityAggregation != nil {
		l = m.CardinalityAggregation.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func sovTypes(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozTypes(x uint64) (n int) {
	return sovTypes(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *DateAggregationBucket) String() string {
	if this == nil {
		return "nil"
	}
	keysForSubAggs := make([]string, 0, len(this.SubAggs))
	for k, _ := range this.SubAggs {
		keysForSubAggs = append(keysForSubAggs, k)
	}
	sortkeys.Strings(keysForSubAggs)
	mapStringForSubAggs := "map[string]*DateSubAggregationData{"
	for _, k := range keysForSubAggs {
		mapStringForSubAggs += fmt.Sprintf("%v: %v,", k, this.SubAggs[k])
	}
	mapStringForSubAggs += "}"
	s := strings.Join([]string{`&DateAggregationBucket{`,
		`Time:` + fmt.Sprintf("%v", this.Time) + `,`,
		`Count:` + fmt.Sprintf("%v", this.Count) + `,`,
		`SubAggs:` + mapStringForSubAggs + `,`,
		`}`,
	}, "")
	return s
}
func (this *DateSubAggregationData) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DateSubAggregationData{`,
		`FieldAggregation:` + strings.Replace(fmt.Sprintf("%v", this.FieldAggregation), "FieldAggregationData", "FieldAggregationData", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DateAggregationData) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DateAggregationData{`,
		`Buckets:` + strings.Replace(fmt.Sprintf("%v", this.Buckets), "DateAggregationBucket", "DateAggregationBucket", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *FieldAggregationBucket) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&FieldAggregationBucket{`,
		`Key:` + fmt.Sprintf("%v", this.Key) + `,`,
		`Count:` + fmt.Sprintf("%v", this.Count) + `,`,
		`}`,
	}, "")
	return s
}
func (this *FieldAggregationData) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&FieldAggregationData{`,
		`Buckets:` + strings.Replace(fmt.Sprintf("%v", this.Buckets), "FieldAggregationBucket", "FieldAggregationBucket", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CardinalityAggregationData) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CardinalityAggregationData{`,
		`Count:` + fmt.Sprintf("%v", this.Count) + `,`,
		`}`,
	}, "")
	return s
}
func (this *LogAggregationData) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&LogAggregationData{`,
		`DateAggregation:` + strings.Replace(fmt.Sprintf("%v", this.DateAggregation), "DateAggregationData", "DateAggregationData", 1) + `,`,
		`FieldAggregation:` + strings.Replace(fmt.Sprintf("%v", this.FieldAggregation), "FieldAggregationData", "FieldAggregationData", 1) + `,`,
		`CardinalityAggregation:` + strings.Replace(fmt.Sprintf("%v", this.CardinalityAggregation), "CardinalityAggregationData", "CardinalityAggregationData", 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringTypes(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *DateAggregationBucket) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DateAggregationBucket: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DateAggregationBucket: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Time", wireType)
			}
			m.Time = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Time |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubAggs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SubAggs == nil {
				m.SubAggs = make(map[string]*DateSubAggregationData)
			}
			var mapkey string
			var mapvalue *DateSubAggregationData
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTypes
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthTypes
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTypes
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= (int(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthTypes
					}
					postmsgIndex := iNdEx + mapmsglen
					if mapmsglen < 0 {
						return ErrInvalidLengthTypes
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &DateSubAggregationData{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipTypes(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthTypes
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.SubAggs[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DateSubAggregationData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DateSubAggregationData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DateSubAggregationData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FieldAggregation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FieldAggregation == nil {
				m.FieldAggregation = &FieldAggregationData{}
			}
			if err := m.FieldAggregation.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DateAggregationData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DateAggregationData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DateAggregationData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Buckets", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Buckets = append(m.Buckets, &DateAggregationBucket{})
			if err := m.Buckets[len(m.Buckets)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FieldAggregationBucket) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FieldAggregationBucket: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FieldAggregationBucket: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FieldAggregationData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FieldAggregationData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FieldAggregationData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Buckets", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Buckets = append(m.Buckets, &FieldAggregationBucket{})
			if err := m.Buckets[len(m.Buckets)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CardinalityAggregationData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CardinalityAggregationData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CardinalityAggregationData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LogAggregationData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LogAggregationData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LogAggregationData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DateAggregation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DateAggregation == nil {
				m.DateAggregation = &DateAggregationData{}
			}
			if err := m.DateAggregation.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FieldAggregation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FieldAggregation == nil {
				m.FieldAggregation = &FieldAggregationData{}
			}
			if err := m.FieldAggregation.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CardinalityAggregation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CardinalityAggregation == nil {
				m.CardinalityAggregation = &CardinalityAggregationData{}
			}
			if err := m.CardinalityAggregation.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTypes(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthTypes
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipTypes(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthTypes = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTypes   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("ves.io/schema/log/types.proto", fileDescriptorTypes) }

var fileDescriptorTypes = []byte{
	// 548 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x54, 0x31, 0x6f, 0xd3, 0x40,
	0x18, 0xcd, 0x25, 0x0d, 0x85, 0x0b, 0x12, 0xe9, 0x51, 0x42, 0x14, 0xc4, 0x29, 0xf2, 0x00, 0xe9,
	0x90, 0xb3, 0x14, 0x84, 0x84, 0x58, 0xa0, 0x69, 0x81, 0x85, 0x01, 0x0c, 0x0b, 0x30, 0x54, 0x67,
	0xfb, 0x7c, 0xb5, 0xe2, 0xf8, 0x2c, 0xfb, 0x6c, 0xc8, 0xc6, 0xc2, 0xce, 0x9f, 0x40, 0xe2, 0x27,
	0x30, 0x32, 0x32, 0x76, 0xec, 0x48, 0x8e, 0x85, 0xb1, 0x23, 0x62, 0x42, 0x39, 0x27, 0xb4, 0x76,
	0x5d, 0x51, 0x89, 0xed, 0xbe, 0x7b, 0xdf, 0x7d, 0xef, 0x7d, 0xef, 0x49, 0x07, 0x6f, 0x66, 0x2c,
	0x21, 0xbe, 0x30, 0x13, 0x67, 0x9f, 0x4d, 0xa9, 0x19, 0x08, 0x6e, 0xca, 0x59, 0xc4, 0x12, 0x12,
	0xc5, 0x42, 0x0a, 0xb4, 0x91, 0xc3, 0x24, 0x87, 0x49, 0x20, 0x78, 0x6f, 0xc8, 0x7d, 0xb9, 0x9f,
	0xda, 0xc4, 0x11, 0x53, 0x93, 0x0b, 0x2e, 0x4c, 0xdd, 0x69, 0xa7, 0x9e, 0xae, 0x74, 0xa1, 0x4f,
	0xf9, 0x84, 0xde, 0x8d, 0x22, 0x81, 0x88, 0xa4, 0x2f, 0xc2, 0xe5, 0xf8, 0x5e, 0xbf, 0x08, 0x66,
	0x3e, 0x7b, 0xbb, 0x57, 0xe8, 0x30, 0x7e, 0x03, 0x78, 0x6d, 0x97, 0x4a, 0xb6, 0xcd, 0x79, 0xcc,
	0x38, 0x5d, 0x40, 0xe3, 0xd4, 0x99, 0x30, 0x89, 0x10, 0x5c, 0x93, 0xfe, 0x94, 0x75, 0x41, 0x1f,
	0x0c, 0xd6, 0x2c, 0x7d, 0x46, 0x9b, 0xb0, 0xe9, 0x88, 0x34, 0x94, 0xdd, 0xba, 0xbe, 0xcc, 0x0b,
	0xf4, 0x0c, 0x5e, 0x4c, 0x52, 0x7b, 0x8f, 0x72, 0x9e, 0x74, 0x1b, 0xfd, 0xc6, 0xa0, 0x35, 0xba,
	0x4b, 0x4e, 0xed, 0x45, 0x2a, 0x59, 0xc8, 0x8b, 0xd4, 0xde, 0xe6, 0x3c, 0x79, 0x14, 0xca, 0x78,
	0x66, 0xad, 0x27, 0x79, 0xd5, 0x63, 0xf0, 0xf2, 0x49, 0x00, 0xb5, 0x61, 0x63, 0xc2, 0x66, 0x5a,
	0xca, 0x25, 0x6b, 0x71, 0x44, 0x0f, 0x60, 0x33, 0xa3, 0x41, 0xca, 0xb4, 0x92, 0xd6, 0x68, 0xeb,
	0x0c, 0xc2, 0x7c, 0xca, 0x8a, 0x73, 0x97, 0x4a, 0x6a, 0xe5, 0xef, 0xee, 0xd7, 0xef, 0x01, 0x23,
	0x84, 0x9d, 0xea, 0x26, 0xf4, 0x12, 0x6e, 0x78, 0x3e, 0x0b, 0xdc, 0xc5, 0x52, 0x2b, 0x40, 0xd3,
	0xb7, 0x46, 0xb7, 0x2b, 0xa8, 0x1e, 0x2f, 0x7a, 0xcb, 0x44, 0x6d, 0xaf, 0x74, 0x6b, 0xbc, 0x82,
	0x57, 0x4b, 0x2e, 0x68, 0xb2, 0x31, 0x5c, 0xb7, 0xb5, 0x1b, 0x49, 0xb7, 0xae, 0xed, 0x1b, 0x9c,
	0xd7, 0x3e, 0x6b, 0xf5, 0xd0, 0x78, 0x08, 0x3b, 0x65, 0x11, 0xcb, 0x1c, 0x4f, 0x7b, 0x57, 0x99,
	0xa2, 0xf1, 0x06, 0x6e, 0x56, 0xad, 0x81, 0x76, 0xca, 0xea, 0xb6, 0xce, 0x61, 0x40, 0x59, 0xde,
	0x08, 0xf6, 0x76, 0x68, 0xec, 0xfa, 0x21, 0x0d, 0x7c, 0x39, 0x2b, 0x53, 0xfc, 0x15, 0x04, 0x4e,
	0x0a, 0xfa, 0x54, 0x87, 0xe8, 0xa9, 0xe0, 0xe5, 0xe6, 0xe7, 0xb0, 0xed, 0x52, 0xc9, 0x0a, 0xc9,
	0x34, 0x74, 0x32, 0xb7, 0xfe, 0x6d, 0x9b, 0x0e, 0xe6, 0x8a, 0x5b, 0xbc, 0xac, 0x4e, 0x7b, 0xed,
	0x3f, 0xd3, 0x46, 0x1e, 0xbc, 0xee, 0x1c, 0xef, 0x5c, 0x98, 0xdd, 0xd4, 0xb3, 0x87, 0x15, 0xb3,
	0xcf, 0x76, 0xc9, 0xea, 0x38, 0x95, 0xd8, 0xf8, 0x03, 0x38, 0x98, 0xe3, 0xda, 0xe1, 0x1c, 0xd7,
	0x8e, 0xe6, 0x18, 0xfc, 0x9a, 0x63, 0xf0, 0x5e, 0x61, 0xf0, 0x59, 0x61, 0xf0, 0x45, 0x61, 0xf0,
	0x55, 0x61, 0xf0, 0x4d, 0x61, 0x70, 0xa0, 0x30, 0x38, 0x54, 0x18, 0x7c, 0x57, 0x18, 0xfc, 0x54,
	0xb8, 0x76, 0xa4, 0x30, 0xf8, 0xf8, 0x03, 0xd7, 0x5e, 0x3f, 0xe1, 0x22, 0x9a, 0x70, 0x92, 0x89,
	0x40, 0xb2, 0x38, 0xa6, 0x24, 0x4d, 0x4c, 0x7d, 0xf0, 0x44, 0x3c, 0x1d, 0x46, 0xb1, 0xc8, 0x7c,
	0x97, 0xc5, 0xc3, 0x15, 0x6c, 0x46, 0x36, 0x17, 0x26, 0x7b, 0x27, 0x97, 0x5f, 0xca, 0xf1, 0xbf,
	0x66, 0x5f, 0xd0, 0x3f, 0xca, 0x9d, 0x3f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x63, 0xf7, 0xaa, 0x7d,
	0xf3, 0x04, 0x00, 0x00,
}
