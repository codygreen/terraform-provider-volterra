// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ves.io/schema/log/types.proto

package log

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_sortkeys "github.com/gogo/protobuf/sortkeys"
	_ "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// DateAggregationBucket
//
// x-displayName: "Date Aggregation Bucket"
// Date histogram bucket containing the timestamp and the number of logs in that bucket.
type DateAggregationBucket struct {
	// time
	//
	// x-displayName: "Time"
	// x-example: 1578710280000
	//
	// unix timestamp
	Time uint64 `protobuf:"varint,1,opt,name=time,proto3" json:"time,omitempty"`
	// count
	//
	// x-displayName: "Count"
	// x-example: 45
	//
	// number of logs in this bucket
	Count uint64 `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	// sub aggregation
	//
	// x-displayName: "Sub Aggregation"
	// Sub aggregation data for the date bucket
	SubAggs map[string]*DateSubAggregationData `protobuf:"bytes,3,rep,name=sub_aggs,json=subAggs,proto3" json:"sub_aggs,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *DateAggregationBucket) Reset()      { *m = DateAggregationBucket{} }
func (*DateAggregationBucket) ProtoMessage() {}
func (*DateAggregationBucket) Descriptor() ([]byte, []int) {
	return fileDescriptor_18e467d5ba8b30ac, []int{0}
}
func (m *DateAggregationBucket) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DateAggregationBucket) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *DateAggregationBucket) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DateAggregationBucket.Merge(m, src)
}
func (m *DateAggregationBucket) XXX_Size() int {
	return m.Size()
}
func (m *DateAggregationBucket) XXX_DiscardUnknown() {
	xxx_messageInfo_DateAggregationBucket.DiscardUnknown(m)
}

var xxx_messageInfo_DateAggregationBucket proto.InternalMessageInfo

func (m *DateAggregationBucket) GetTime() uint64 {
	if m != nil {
		return m.Time
	}
	return 0
}

func (m *DateAggregationBucket) GetCount() uint64 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *DateAggregationBucket) GetSubAggs() map[string]*DateSubAggregationData {
	if m != nil {
		return m.SubAggs
	}
	return nil
}

// DateSubAggregationData
//
// x-displayName: "Date SubAggregation"
//
// Date subaggregation data
type DateSubAggregationData struct {
	// field aggregation
	// x-displayName: "Field Aggregation"
	//
	// Field aggregation data
	FieldAggregation *FieldAggregationData `protobuf:"bytes,1,opt,name=field_aggregation,json=fieldAggregation,proto3" json:"field_aggregation,omitempty"`
}

func (m *DateSubAggregationData) Reset()      { *m = DateSubAggregationData{} }
func (*DateSubAggregationData) ProtoMessage() {}
func (*DateSubAggregationData) Descriptor() ([]byte, []int) {
	return fileDescriptor_18e467d5ba8b30ac, []int{1}
}
func (m *DateSubAggregationData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DateSubAggregationData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *DateSubAggregationData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DateSubAggregationData.Merge(m, src)
}
func (m *DateSubAggregationData) XXX_Size() int {
	return m.Size()
}
func (m *DateSubAggregationData) XXX_DiscardUnknown() {
	xxx_messageInfo_DateSubAggregationData.DiscardUnknown(m)
}

var xxx_messageInfo_DateSubAggregationData proto.InternalMessageInfo

func (m *DateSubAggregationData) GetFieldAggregation() *FieldAggregationData {
	if m != nil {
		return m.FieldAggregation
	}
	return nil
}

// DateAggregationData
//
// x-displayName: "Date Aggregation Data"
// Date aggregation data
type DateAggregationData struct {
	// buckets
	//
	// x-displayName: "Buckets"
	// Lists of buckets containing timestamp and the corresponding log count
	Buckets []*DateAggregationBucket `protobuf:"bytes,2,rep,name=buckets,proto3" json:"buckets,omitempty"`
}

func (m *DateAggregationData) Reset()      { *m = DateAggregationData{} }
func (*DateAggregationData) ProtoMessage() {}
func (*DateAggregationData) Descriptor() ([]byte, []int) {
	return fileDescriptor_18e467d5ba8b30ac, []int{2}
}
func (m *DateAggregationData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DateAggregationData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *DateAggregationData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DateAggregationData.Merge(m, src)
}
func (m *DateAggregationData) XXX_Size() int {
	return m.Size()
}
func (m *DateAggregationData) XXX_DiscardUnknown() {
	xxx_messageInfo_DateAggregationData.DiscardUnknown(m)
}

var xxx_messageInfo_DateAggregationData proto.InternalMessageInfo

func (m *DateAggregationData) GetBuckets() []*DateAggregationBucket {
	if m != nil {
		return m.Buckets
	}
	return nil
}

// FieldAggregationBucket
//
// x-displayName: "Field Aggregation Bucket"
// Field aggregation bucket containing field value and the number of logs.
type FieldAggregationBucket struct {
	// key
	//
	// x-displayName: "Key"
	// x-example: "US"
	Key string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// count
	//
	// x-displayName: "Count"
	// x-example: 45
	//
	// number of logs in this bucket
	Count uint64 `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	// sub aggregation
	//
	// x-displayName: "Sub Aggregation"
	// Sub aggregation data for the field aggregation bucket
	SubAggs map[string]*FieldSubAggregationData `protobuf:"bytes,3,rep,name=sub_aggs,json=subAggs,proto3" json:"sub_aggs,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *FieldAggregationBucket) Reset()      { *m = FieldAggregationBucket{} }
func (*FieldAggregationBucket) ProtoMessage() {}
func (*FieldAggregationBucket) Descriptor() ([]byte, []int) {
	return fileDescriptor_18e467d5ba8b30ac, []int{3}
}
func (m *FieldAggregationBucket) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FieldAggregationBucket) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *FieldAggregationBucket) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FieldAggregationBucket.Merge(m, src)
}
func (m *FieldAggregationBucket) XXX_Size() int {
	return m.Size()
}
func (m *FieldAggregationBucket) XXX_DiscardUnknown() {
	xxx_messageInfo_FieldAggregationBucket.DiscardUnknown(m)
}

var xxx_messageInfo_FieldAggregationBucket proto.InternalMessageInfo

func (m *FieldAggregationBucket) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *FieldAggregationBucket) GetCount() uint64 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *FieldAggregationBucket) GetSubAggs() map[string]*FieldSubAggregationData {
	if m != nil {
		return m.SubAggs
	}
	return nil
}

// FieldSubAggregationData
//
// x-displayName: "Field SubAggregation"
// Field subaggregation data
type FieldSubAggregationData struct {
	// cardinality aggregation
	// x-displayName: "Cardinality Aggregation"
	//
	// cardinality aggregation data
	CardinalityAggregation *CardinalityAggregationData `protobuf:"bytes,1,opt,name=cardinality_aggregation,json=cardinalityAggregation,proto3" json:"cardinality_aggregation,omitempty"`
}

func (m *FieldSubAggregationData) Reset()      { *m = FieldSubAggregationData{} }
func (*FieldSubAggregationData) ProtoMessage() {}
func (*FieldSubAggregationData) Descriptor() ([]byte, []int) {
	return fileDescriptor_18e467d5ba8b30ac, []int{4}
}
func (m *FieldSubAggregationData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FieldSubAggregationData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *FieldSubAggregationData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FieldSubAggregationData.Merge(m, src)
}
func (m *FieldSubAggregationData) XXX_Size() int {
	return m.Size()
}
func (m *FieldSubAggregationData) XXX_DiscardUnknown() {
	xxx_messageInfo_FieldSubAggregationData.DiscardUnknown(m)
}

var xxx_messageInfo_FieldSubAggregationData proto.InternalMessageInfo

func (m *FieldSubAggregationData) GetCardinalityAggregation() *CardinalityAggregationData {
	if m != nil {
		return m.CardinalityAggregation
	}
	return nil
}

// FieldAggregationData
//
// x-displayName: "Field Aggregation Data"
// Field Aggregation data
type FieldAggregationData struct {
	// buckets
	//
	// x-displayName: "Buckets"
	// Lists of buckets containing field value and the corresponding log count
	Buckets []*FieldAggregationBucket `protobuf:"bytes,2,rep,name=buckets,proto3" json:"buckets,omitempty"`
}

func (m *FieldAggregationData) Reset()      { *m = FieldAggregationData{} }
func (*FieldAggregationData) ProtoMessage() {}
func (*FieldAggregationData) Descriptor() ([]byte, []int) {
	return fileDescriptor_18e467d5ba8b30ac, []int{5}
}
func (m *FieldAggregationData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FieldAggregationData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *FieldAggregationData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FieldAggregationData.Merge(m, src)
}
func (m *FieldAggregationData) XXX_Size() int {
	return m.Size()
}
func (m *FieldAggregationData) XXX_DiscardUnknown() {
	xxx_messageInfo_FieldAggregationData.DiscardUnknown(m)
}

var xxx_messageInfo_FieldAggregationData proto.InternalMessageInfo

func (m *FieldAggregationData) GetBuckets() []*FieldAggregationBucket {
	if m != nil {
		return m.Buckets
	}
	return nil
}

// CardinalityAggregationData
//
// x-displayName: "Cardinality Aggregation Data"
// Approximate count of distinct values of the log field specified in the request.
type CardinalityAggregationData struct {
	// count
	//
	// x-displayName: "Count"
	// x-example: 100
	// Count of distinct values of a log field
	Count uint64 `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
}

func (m *CardinalityAggregationData) Reset()      { *m = CardinalityAggregationData{} }
func (*CardinalityAggregationData) ProtoMessage() {}
func (*CardinalityAggregationData) Descriptor() ([]byte, []int) {
	return fileDescriptor_18e467d5ba8b30ac, []int{6}
}
func (m *CardinalityAggregationData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CardinalityAggregationData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *CardinalityAggregationData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CardinalityAggregationData.Merge(m, src)
}
func (m *CardinalityAggregationData) XXX_Size() int {
	return m.Size()
}
func (m *CardinalityAggregationData) XXX_DiscardUnknown() {
	xxx_messageInfo_CardinalityAggregationData.DiscardUnknown(m)
}

var xxx_messageInfo_CardinalityAggregationData proto.InternalMessageInfo

func (m *CardinalityAggregationData) GetCount() uint64 {
	if m != nil {
		return m.Count
	}
	return 0
}

// LogAggregationData
//
// x-displayName: "Log Aggregation"
// Log aggregation response data
type LogAggregationData struct {
	// date aggregation
	// x-displayName: "Date Aggregation"
	//
	// Date aggregation data
	DateAggregation *DateAggregationData `protobuf:"bytes,3,opt,name=date_aggregation,json=dateAggregation,proto3" json:"date_aggregation,omitempty"`
	// field aggregation
	// x-displayName: "Field Aggregation"
	//
	// Field aggregation data
	FieldAggregation *FieldAggregationData `protobuf:"bytes,4,opt,name=field_aggregation,json=fieldAggregation,proto3" json:"field_aggregation,omitempty"`
	// cardinality aggregation
	// x-displayName: "Cardinality Aggregation"
	//
	// Cardinality aggregation data
	CardinalityAggregation *CardinalityAggregationData `protobuf:"bytes,5,opt,name=cardinality_aggregation,json=cardinalityAggregation,proto3" json:"cardinality_aggregation,omitempty"`
}

func (m *LogAggregationData) Reset()      { *m = LogAggregationData{} }
func (*LogAggregationData) ProtoMessage() {}
func (*LogAggregationData) Descriptor() ([]byte, []int) {
	return fileDescriptor_18e467d5ba8b30ac, []int{7}
}
func (m *LogAggregationData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LogAggregationData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *LogAggregationData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LogAggregationData.Merge(m, src)
}
func (m *LogAggregationData) XXX_Size() int {
	return m.Size()
}
func (m *LogAggregationData) XXX_DiscardUnknown() {
	xxx_messageInfo_LogAggregationData.DiscardUnknown(m)
}

var xxx_messageInfo_LogAggregationData proto.InternalMessageInfo

func (m *LogAggregationData) GetDateAggregation() *DateAggregationData {
	if m != nil {
		return m.DateAggregation
	}
	return nil
}

func (m *LogAggregationData) GetFieldAggregation() *FieldAggregationData {
	if m != nil {
		return m.FieldAggregation
	}
	return nil
}

func (m *LogAggregationData) GetCardinalityAggregation() *CardinalityAggregationData {
	if m != nil {
		return m.CardinalityAggregation
	}
	return nil
}

func init() {
	proto.RegisterType((*DateAggregationBucket)(nil), "ves.io.schema.log.DateAggregationBucket")
	proto.RegisterMapType((map[string]*DateSubAggregationData)(nil), "ves.io.schema.log.DateAggregationBucket.SubAggsEntry")
	proto.RegisterType((*DateSubAggregationData)(nil), "ves.io.schema.log.DateSubAggregationData")
	proto.RegisterType((*DateAggregationData)(nil), "ves.io.schema.log.DateAggregationData")
	proto.RegisterType((*FieldAggregationBucket)(nil), "ves.io.schema.log.FieldAggregationBucket")
	proto.RegisterMapType((map[string]*FieldSubAggregationData)(nil), "ves.io.schema.log.FieldAggregationBucket.SubAggsEntry")
	proto.RegisterType((*FieldSubAggregationData)(nil), "ves.io.schema.log.FieldSubAggregationData")
	proto.RegisterType((*FieldAggregationData)(nil), "ves.io.schema.log.FieldAggregationData")
	proto.RegisterType((*CardinalityAggregationData)(nil), "ves.io.schema.log.CardinalityAggregationData")
	proto.RegisterType((*LogAggregationData)(nil), "ves.io.schema.log.LogAggregationData")
}

func init() { proto.RegisterFile("ves.io/schema/log/types.proto", fileDescriptor_18e467d5ba8b30ac) }

var fileDescriptor_18e467d5ba8b30ac = []byte{
	// 580 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x55, 0x3f, 0x6f, 0xd3, 0x4e,
	0x18, 0xf6, 0xe5, 0xcf, 0xaf, 0x3f, 0x2e, 0x48, 0xa4, 0x47, 0x49, 0xa3, 0x20, 0x4e, 0x91, 0x07,
	0x48, 0x91, 0x62, 0x4b, 0x41, 0x20, 0xc4, 0x02, 0x4d, 0x0b, 0x2c, 0x0c, 0x34, 0xb0, 0x00, 0x43,
	0x75, 0x76, 0xce, 0x57, 0x2b, 0x4e, 0xce, 0xb2, 0xcf, 0x86, 0x6c, 0xf4, 0x1b, 0xf0, 0x25, 0x90,
	0xf8, 0x28, 0x8c, 0x19, 0x33, 0x12, 0x67, 0x61, 0xec, 0x0c, 0x0b, 0xca, 0x39, 0x51, 0x6a, 0xc7,
	0x49, 0x23, 0xc1, 0xf6, 0xbe, 0xf7, 0xbc, 0x77, 0xcf, 0xfb, 0x3e, 0x8f, 0xef, 0x0c, 0xef, 0x84,
	0xd4, 0xd7, 0x6c, 0xae, 0xfb, 0xe6, 0x19, 0xed, 0x13, 0xdd, 0xe1, 0x4c, 0x17, 0x43, 0x97, 0xfa,
	0x9a, 0xeb, 0x71, 0xc1, 0xd1, 0x6e, 0x0c, 0x6b, 0x31, 0xac, 0x39, 0x9c, 0xd5, 0x9a, 0xcc, 0x16,
	0x67, 0x81, 0xa1, 0x99, 0xbc, 0xaf, 0x33, 0xce, 0xb8, 0x2e, 0x2b, 0x8d, 0xc0, 0x92, 0x99, 0x4c,
	0x64, 0x14, 0x9f, 0x50, 0xbb, 0x9d, 0x24, 0xe0, 0xae, 0xb0, 0xf9, 0x60, 0x7e, 0x7c, 0xad, 0x9e,
	0x04, 0x43, 0x9b, 0x7e, 0x3c, 0x4d, 0x54, 0xa8, 0xbf, 0x00, 0xbc, 0x75, 0x4c, 0x04, 0x3d, 0x64,
	0xcc, 0xa3, 0x8c, 0xcc, 0xa0, 0x76, 0x60, 0xf6, 0xa8, 0x40, 0x08, 0x16, 0x84, 0xdd, 0xa7, 0x55,
	0x50, 0x07, 0x8d, 0x42, 0x47, 0xc6, 0x68, 0x0f, 0x16, 0x4d, 0x1e, 0x0c, 0x44, 0x35, 0x27, 0x17,
	0xe3, 0x04, 0xbd, 0x86, 0xff, 0xfb, 0x81, 0x71, 0x4a, 0x18, 0xf3, 0xab, 0xf9, 0x7a, 0xbe, 0x51,
	0x6a, 0x3d, 0xd4, 0x56, 0xe6, 0xd2, 0x32, 0x59, 0xb4, 0x37, 0x81, 0x71, 0xc8, 0x98, 0xff, 0x7c,
	0x20, 0xbc, 0x61, 0x67, 0xc7, 0x8f, 0xb3, 0x1a, 0x85, 0xd7, 0x2f, 0x03, 0xa8, 0x0c, 0xf3, 0x3d,
	0x3a, 0x94, 0xad, 0x5c, 0xeb, 0xcc, 0x42, 0xf4, 0x14, 0x16, 0x43, 0xe2, 0x04, 0x54, 0x76, 0x52,
	0x6a, 0x1d, 0xac, 0x21, 0x8c, 0x4f, 0x59, 0x70, 0x1e, 0x13, 0x41, 0x3a, 0xf1, 0xbe, 0x27, 0xb9,
	0xc7, 0x40, 0x1d, 0xc0, 0x4a, 0x76, 0x11, 0x7a, 0x0b, 0x77, 0x2d, 0x9b, 0x3a, 0xdd, 0xd9, 0x50,
	0x0b, 0x40, 0xd2, 0x97, 0x5a, 0xf7, 0x32, 0xa8, 0x5e, 0xcc, 0x6a, 0xd3, 0x44, 0x65, 0x2b, 0xb5,
	0xaa, 0xbe, 0x83, 0x37, 0x53, 0x2a, 0x48, 0xb2, 0x36, 0xdc, 0x31, 0xa4, 0x1a, 0x7e, 0x35, 0x27,
	0xe5, 0x6b, 0x6c, 0x2b, 0x5f, 0x67, 0xb1, 0x51, 0xfd, 0x0d, 0x60, 0x25, 0xdd, 0xc5, 0xdc, 0xc8,
	0x55, 0xf1, 0xb2, 0x6d, 0x3c, 0x59, 0xb1, 0xf1, 0xd1, 0x16, 0xa3, 0x6e, 0xf4, 0xd1, 0xba, 0xd2,
	0xc7, 0x67, 0x49, 0x1f, 0xef, 0xaf, 0x63, 0xdc, 0x6c, 0xe4, 0x39, 0x80, 0xfb, 0x6b, 0xca, 0x90,
	0x05, 0xf7, 0x4d, 0xe2, 0x75, 0xed, 0x01, 0x71, 0x6c, 0x31, 0xcc, 0x30, 0xb4, 0x99, 0xc1, 0x79,
	0xb4, 0xdc, 0x91, 0xa6, 0xad, 0x98, 0x99, 0x98, 0xfa, 0x01, 0xee, 0x65, 0x7d, 0x06, 0xe8, 0x28,
	0xed, 0xee, 0xc1, 0xd6, 0xaa, 0x2e, 0xed, 0x6d, 0xc1, 0xda, 0xfa, 0x96, 0x96, 0x7e, 0x82, 0x4b,
	0x7e, 0xaa, 0x5f, 0x73, 0x10, 0xbd, 0xe2, 0x2c, 0x5d, 0x7c, 0x02, 0xcb, 0x5d, 0x22, 0x68, 0x42,
	0x88, 0xbc, 0x14, 0xe2, 0xee, 0xd5, 0x9f, 0x9d, 0x54, 0xe0, 0x46, 0x37, 0xb9, 0x98, 0x7d, 0x5b,
	0x0a, 0x7f, 0x79, 0x5b, 0x36, 0x19, 0x57, 0xfc, 0x87, 0xc6, 0xb5, 0xcf, 0xc1, 0x68, 0x82, 0x95,
	0xf1, 0x04, 0x2b, 0x17, 0x13, 0x0c, 0x3e, 0x47, 0x18, 0x7c, 0x8b, 0x30, 0xf8, 0x1e, 0x61, 0x30,
	0x8a, 0x30, 0x18, 0x47, 0x18, 0xfc, 0x88, 0x30, 0xf8, 0x19, 0x61, 0xe5, 0x22, 0xc2, 0xe0, 0xcb,
	0x14, 0x2b, 0xa3, 0x29, 0x56, 0xc6, 0x53, 0xac, 0xbc, 0x7f, 0xc9, 0xb8, 0xdb, 0x63, 0x5a, 0xc8,
	0x1d, 0x41, 0x3d, 0x8f, 0x68, 0x81, 0xaf, 0xcb, 0xc0, 0xe2, 0x5e, 0xbf, 0xe9, 0x7a, 0x3c, 0xb4,
	0xbb, 0xd4, 0x6b, 0x2e, 0x60, 0xdd, 0x35, 0x18, 0xd7, 0xe9, 0x27, 0x31, 0x7f, 0x8e, 0x97, 0xff,
	0x04, 0xe3, 0x3f, 0xf9, 0x1a, 0x3f, 0xf8, 0x13, 0x00, 0x00, 0xff, 0xff, 0x5b, 0x11, 0xa4, 0x59,
	0x2f, 0x06, 0x00, 0x00,
}

func (this *DateAggregationBucket) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DateAggregationBucket)
	if !ok {
		that2, ok := that.(DateAggregationBucket)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Time != that1.Time {
		return false
	}
	if this.Count != that1.Count {
		return false
	}
	if len(this.SubAggs) != len(that1.SubAggs) {
		return false
	}
	for i := range this.SubAggs {
		if !this.SubAggs[i].Equal(that1.SubAggs[i]) {
			return false
		}
	}
	return true
}
func (this *DateSubAggregationData) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DateSubAggregationData)
	if !ok {
		that2, ok := that.(DateSubAggregationData)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.FieldAggregation.Equal(that1.FieldAggregation) {
		return false
	}
	return true
}
func (this *DateAggregationData) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DateAggregationData)
	if !ok {
		that2, ok := that.(DateAggregationData)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Buckets) != len(that1.Buckets) {
		return false
	}
	for i := range this.Buckets {
		if !this.Buckets[i].Equal(that1.Buckets[i]) {
			return false
		}
	}
	return true
}
func (this *FieldAggregationBucket) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*FieldAggregationBucket)
	if !ok {
		that2, ok := that.(FieldAggregationBucket)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Key != that1.Key {
		return false
	}
	if this.Count != that1.Count {
		return false
	}
	if len(this.SubAggs) != len(that1.SubAggs) {
		return false
	}
	for i := range this.SubAggs {
		if !this.SubAggs[i].Equal(that1.SubAggs[i]) {
			return false
		}
	}
	return true
}
func (this *FieldSubAggregationData) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*FieldSubAggregationData)
	if !ok {
		that2, ok := that.(FieldSubAggregationData)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.CardinalityAggregation.Equal(that1.CardinalityAggregation) {
		return false
	}
	return true
}
func (this *FieldAggregationData) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*FieldAggregationData)
	if !ok {
		that2, ok := that.(FieldAggregationData)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Buckets) != len(that1.Buckets) {
		return false
	}
	for i := range this.Buckets {
		if !this.Buckets[i].Equal(that1.Buckets[i]) {
			return false
		}
	}
	return true
}
func (this *CardinalityAggregationData) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CardinalityAggregationData)
	if !ok {
		that2, ok := that.(CardinalityAggregationData)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Count != that1.Count {
		return false
	}
	return true
}
func (this *LogAggregationData) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*LogAggregationData)
	if !ok {
		that2, ok := that.(LogAggregationData)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DateAggregation.Equal(that1.DateAggregation) {
		return false
	}
	if !this.FieldAggregation.Equal(that1.FieldAggregation) {
		return false
	}
	if !this.CardinalityAggregation.Equal(that1.CardinalityAggregation) {
		return false
	}
	return true
}
func (this *DateAggregationBucket) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&log.DateAggregationBucket{")
	s = append(s, "Time: "+fmt.Sprintf("%#v", this.Time)+",\n")
	s = append(s, "Count: "+fmt.Sprintf("%#v", this.Count)+",\n")
	keysForSubAggs := make([]string, 0, len(this.SubAggs))
	for k, _ := range this.SubAggs {
		keysForSubAggs = append(keysForSubAggs, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForSubAggs)
	mapStringForSubAggs := "map[string]*DateSubAggregationData{"
	for _, k := range keysForSubAggs {
		mapStringForSubAggs += fmt.Sprintf("%#v: %#v,", k, this.SubAggs[k])
	}
	mapStringForSubAggs += "}"
	if this.SubAggs != nil {
		s = append(s, "SubAggs: "+mapStringForSubAggs+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DateSubAggregationData) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&log.DateSubAggregationData{")
	if this.FieldAggregation != nil {
		s = append(s, "FieldAggregation: "+fmt.Sprintf("%#v", this.FieldAggregation)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DateAggregationData) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&log.DateAggregationData{")
	if this.Buckets != nil {
		s = append(s, "Buckets: "+fmt.Sprintf("%#v", this.Buckets)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *FieldAggregationBucket) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&log.FieldAggregationBucket{")
	s = append(s, "Key: "+fmt.Sprintf("%#v", this.Key)+",\n")
	s = append(s, "Count: "+fmt.Sprintf("%#v", this.Count)+",\n")
	keysForSubAggs := make([]string, 0, len(this.SubAggs))
	for k, _ := range this.SubAggs {
		keysForSubAggs = append(keysForSubAggs, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForSubAggs)
	mapStringForSubAggs := "map[string]*FieldSubAggregationData{"
	for _, k := range keysForSubAggs {
		mapStringForSubAggs += fmt.Sprintf("%#v: %#v,", k, this.SubAggs[k])
	}
	mapStringForSubAggs += "}"
	if this.SubAggs != nil {
		s = append(s, "SubAggs: "+mapStringForSubAggs+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *FieldSubAggregationData) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&log.FieldSubAggregationData{")
	if this.CardinalityAggregation != nil {
		s = append(s, "CardinalityAggregation: "+fmt.Sprintf("%#v", this.CardinalityAggregation)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *FieldAggregationData) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&log.FieldAggregationData{")
	if this.Buckets != nil {
		s = append(s, "Buckets: "+fmt.Sprintf("%#v", this.Buckets)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CardinalityAggregationData) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&log.CardinalityAggregationData{")
	s = append(s, "Count: "+fmt.Sprintf("%#v", this.Count)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *LogAggregationData) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&log.LogAggregationData{")
	if this.DateAggregation != nil {
		s = append(s, "DateAggregation: "+fmt.Sprintf("%#v", this.DateAggregation)+",\n")
	}
	if this.FieldAggregation != nil {
		s = append(s, "FieldAggregation: "+fmt.Sprintf("%#v", this.FieldAggregation)+",\n")
	}
	if this.CardinalityAggregation != nil {
		s = append(s, "CardinalityAggregation: "+fmt.Sprintf("%#v", this.CardinalityAggregation)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringTypes(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *DateAggregationBucket) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DateAggregationBucket) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DateAggregationBucket) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SubAggs) > 0 {
		keysForSubAggs := make([]string, 0, len(m.SubAggs))
		for k := range m.SubAggs {
			keysForSubAggs = append(keysForSubAggs, string(k))
		}
		github_com_gogo_protobuf_sortkeys.Strings(keysForSubAggs)
		for iNdEx := len(keysForSubAggs) - 1; iNdEx >= 0; iNdEx-- {
			v := m.SubAggs[string(keysForSubAggs[iNdEx])]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintTypes(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i -= len(keysForSubAggs[iNdEx])
			copy(dAtA[i:], keysForSubAggs[iNdEx])
			i = encodeVarintTypes(dAtA, i, uint64(len(keysForSubAggs[iNdEx])))
			i--
			dAtA[i] = 0xa
			i = encodeVarintTypes(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.Count != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Count))
		i--
		dAtA[i] = 0x10
	}
	if m.Time != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Time))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DateSubAggregationData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DateSubAggregationData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DateSubAggregationData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.FieldAggregation != nil {
		{
			size, err := m.FieldAggregation.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DateAggregationData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DateAggregationData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DateAggregationData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Buckets) > 0 {
		for iNdEx := len(m.Buckets) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Buckets[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	return len(dAtA) - i, nil
}

func (m *FieldAggregationBucket) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FieldAggregationBucket) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FieldAggregationBucket) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SubAggs) > 0 {
		keysForSubAggs := make([]string, 0, len(m.SubAggs))
		for k := range m.SubAggs {
			keysForSubAggs = append(keysForSubAggs, string(k))
		}
		github_com_gogo_protobuf_sortkeys.Strings(keysForSubAggs)
		for iNdEx := len(keysForSubAggs) - 1; iNdEx >= 0; iNdEx-- {
			v := m.SubAggs[string(keysForSubAggs[iNdEx])]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintTypes(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i -= len(keysForSubAggs[iNdEx])
			copy(dAtA[i:], keysForSubAggs[iNdEx])
			i = encodeVarintTypes(dAtA, i, uint64(len(keysForSubAggs[iNdEx])))
			i--
			dAtA[i] = 0xa
			i = encodeVarintTypes(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.Count != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Count))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Key) > 0 {
		i -= len(m.Key)
		copy(dAtA[i:], m.Key)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Key)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *FieldSubAggregationData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FieldSubAggregationData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FieldSubAggregationData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CardinalityAggregation != nil {
		{
			size, err := m.CardinalityAggregation.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *FieldAggregationData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FieldAggregationData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FieldAggregationData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Buckets) > 0 {
		for iNdEx := len(m.Buckets) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Buckets[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	return len(dAtA) - i, nil
}

func (m *CardinalityAggregationData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CardinalityAggregationData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CardinalityAggregationData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Count != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Count))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *LogAggregationData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LogAggregationData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LogAggregationData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CardinalityAggregation != nil {
		{
			size, err := m.CardinalityAggregation.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.FieldAggregation != nil {
		{
			size, err := m.FieldAggregation.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.DateAggregation != nil {
		{
			size, err := m.DateAggregation.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}

func encodeVarintTypes(dAtA []byte, offset int, v uint64) int {
	offset -= sovTypes(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *DateAggregationBucket) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Time != 0 {
		n += 1 + sovTypes(uint64(m.Time))
	}
	if m.Count != 0 {
		n += 1 + sovTypes(uint64(m.Count))
	}
	if len(m.SubAggs) > 0 {
		for k, v := range m.SubAggs {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovTypes(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovTypes(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovTypes(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *DateSubAggregationData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.FieldAggregation != nil {
		l = m.FieldAggregation.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *DateAggregationData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Buckets) > 0 {
		for _, e := range m.Buckets {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *FieldAggregationBucket) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.Count != 0 {
		n += 1 + sovTypes(uint64(m.Count))
	}
	if len(m.SubAggs) > 0 {
		for k, v := range m.SubAggs {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovTypes(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovTypes(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovTypes(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *FieldSubAggregationData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CardinalityAggregation != nil {
		l = m.CardinalityAggregation.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *FieldAggregationData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Buckets) > 0 {
		for _, e := range m.Buckets {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *CardinalityAggregationData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Count != 0 {
		n += 1 + sovTypes(uint64(m.Count))
	}
	return n
}

func (m *LogAggregationData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DateAggregation != nil {
		l = m.DateAggregation.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.FieldAggregation != nil {
		l = m.FieldAggregation.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.CardinalityAggregation != nil {
		l = m.CardinalityAggregation.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func sovTypes(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTypes(x uint64) (n int) {
	return sovTypes(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *DateAggregationBucket) String() string {
	if this == nil {
		return "nil"
	}
	keysForSubAggs := make([]string, 0, len(this.SubAggs))
	for k, _ := range this.SubAggs {
		keysForSubAggs = append(keysForSubAggs, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForSubAggs)
	mapStringForSubAggs := "map[string]*DateSubAggregationData{"
	for _, k := range keysForSubAggs {
		mapStringForSubAggs += fmt.Sprintf("%v: %v,", k, this.SubAggs[k])
	}
	mapStringForSubAggs += "}"
	s := strings.Join([]string{`&DateAggregationBucket{`,
		`Time:` + fmt.Sprintf("%v", this.Time) + `,`,
		`Count:` + fmt.Sprintf("%v", this.Count) + `,`,
		`SubAggs:` + mapStringForSubAggs + `,`,
		`}`,
	}, "")
	return s
}
func (this *DateSubAggregationData) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DateSubAggregationData{`,
		`FieldAggregation:` + strings.Replace(this.FieldAggregation.String(), "FieldAggregationData", "FieldAggregationData", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DateAggregationData) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForBuckets := "[]*DateAggregationBucket{"
	for _, f := range this.Buckets {
		repeatedStringForBuckets += strings.Replace(f.String(), "DateAggregationBucket", "DateAggregationBucket", 1) + ","
	}
	repeatedStringForBuckets += "}"
	s := strings.Join([]string{`&DateAggregationData{`,
		`Buckets:` + repeatedStringForBuckets + `,`,
		`}`,
	}, "")
	return s
}
func (this *FieldAggregationBucket) String() string {
	if this == nil {
		return "nil"
	}
	keysForSubAggs := make([]string, 0, len(this.SubAggs))
	for k, _ := range this.SubAggs {
		keysForSubAggs = append(keysForSubAggs, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForSubAggs)
	mapStringForSubAggs := "map[string]*FieldSubAggregationData{"
	for _, k := range keysForSubAggs {
		mapStringForSubAggs += fmt.Sprintf("%v: %v,", k, this.SubAggs[k])
	}
	mapStringForSubAggs += "}"
	s := strings.Join([]string{`&FieldAggregationBucket{`,
		`Key:` + fmt.Sprintf("%v", this.Key) + `,`,
		`Count:` + fmt.Sprintf("%v", this.Count) + `,`,
		`SubAggs:` + mapStringForSubAggs + `,`,
		`}`,
	}, "")
	return s
}
func (this *FieldSubAggregationData) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&FieldSubAggregationData{`,
		`CardinalityAggregation:` + strings.Replace(this.CardinalityAggregation.String(), "CardinalityAggregationData", "CardinalityAggregationData", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *FieldAggregationData) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForBuckets := "[]*FieldAggregationBucket{"
	for _, f := range this.Buckets {
		repeatedStringForBuckets += strings.Replace(f.String(), "FieldAggregationBucket", "FieldAggregationBucket", 1) + ","
	}
	repeatedStringForBuckets += "}"
	s := strings.Join([]string{`&FieldAggregationData{`,
		`Buckets:` + repeatedStringForBuckets + `,`,
		`}`,
	}, "")
	return s
}
func (this *CardinalityAggregationData) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CardinalityAggregationData{`,
		`Count:` + fmt.Sprintf("%v", this.Count) + `,`,
		`}`,
	}, "")
	return s
}
func (this *LogAggregationData) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&LogAggregationData{`,
		`DateAggregation:` + strings.Replace(this.DateAggregation.String(), "DateAggregationData", "DateAggregationData", 1) + `,`,
		`FieldAggregation:` + strings.Replace(this.FieldAggregation.String(), "FieldAggregationData", "FieldAggregationData", 1) + `,`,
		`CardinalityAggregation:` + strings.Replace(this.CardinalityAggregation.String(), "CardinalityAggregationData", "CardinalityAggregationData", 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringTypes(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *DateAggregationBucket) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DateAggregationBucket: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DateAggregationBucket: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Time", wireType)
			}
			m.Time = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Time |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubAggs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SubAggs == nil {
				m.SubAggs = make(map[string]*DateSubAggregationData)
			}
			var mapkey string
			var mapvalue *DateSubAggregationData
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTypes
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthTypes
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthTypes
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTypes
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthTypes
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthTypes
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &DateSubAggregationData{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipTypes(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthTypes
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.SubAggs[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DateSubAggregationData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DateSubAggregationData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DateSubAggregationData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FieldAggregation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FieldAggregation == nil {
				m.FieldAggregation = &FieldAggregationData{}
			}
			if err := m.FieldAggregation.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DateAggregationData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DateAggregationData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DateAggregationData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Buckets", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Buckets = append(m.Buckets, &DateAggregationBucket{})
			if err := m.Buckets[len(m.Buckets)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FieldAggregationBucket) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FieldAggregationBucket: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FieldAggregationBucket: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubAggs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SubAggs == nil {
				m.SubAggs = make(map[string]*FieldSubAggregationData)
			}
			var mapkey string
			var mapvalue *FieldSubAggregationData
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTypes
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthTypes
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthTypes
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTypes
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthTypes
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthTypes
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &FieldSubAggregationData{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipTypes(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthTypes
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.SubAggs[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FieldSubAggregationData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FieldSubAggregationData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FieldSubAggregationData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CardinalityAggregation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CardinalityAggregation == nil {
				m.CardinalityAggregation = &CardinalityAggregationData{}
			}
			if err := m.CardinalityAggregation.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FieldAggregationData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FieldAggregationData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FieldAggregationData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Buckets", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Buckets = append(m.Buckets, &FieldAggregationBucket{})
			if err := m.Buckets[len(m.Buckets)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CardinalityAggregationData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CardinalityAggregationData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CardinalityAggregationData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LogAggregationData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LogAggregationData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LogAggregationData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DateAggregation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DateAggregation == nil {
				m.DateAggregation = &DateAggregationData{}
			}
			if err := m.DateAggregation.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FieldAggregation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FieldAggregation == nil {
				m.FieldAggregation = &FieldAggregationData{}
			}
			if err := m.FieldAggregation.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CardinalityAggregation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CardinalityAggregation == nil {
				m.CardinalityAggregation = &CardinalityAggregationData{}
			}
			if err := m.CardinalityAggregation.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTypes(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTypes
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTypes
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTypes
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTypes        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTypes          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTypes = fmt.Errorf("proto: unexpected end of group")
)
