// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ves.io/schema/virtual_k8s/types.proto

package virtual_k8s

import proto "github.com/gogo/protobuf/proto"
import golang_proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"
import _ "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
import ves_io_schema4 "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
import _ "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
import _ "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
import ves_io_schema_views "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/views"

import strings "strings"
import reflect "reflect"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// GlobalSpecType
//
// x-displayName: "Global Configuration Specification"
// Configuration specification for Virtual K8s
type GlobalSpecType struct {
	// vsite_refs
	//
	// x-displayName: "Virtual Sites"
	// Reference to virtual-sites
	// Default virtual-site of the Virtual K8s object. If no virtual-site is specified in the Kubernetes API resource object
	// annotations via ves.io/virtual-sites, then this virtual-site is used select sites on which to instantiate the
	// Kubernetes API resource object
	VsiteRefs []*ves_io_schema4.ObjectRefType `protobuf:"bytes,1,rep,name=vsite_refs,json=vsiteRefs" json:"vsite_refs,omitempty"`
	// service_isolation_choice
	//
	// x-displayName: "Choose Service Isolation"
	// Service isolation choice
	//
	// Types that are valid to be assigned to ServiceIsolationChoice:
	//	*GlobalSpecType_Isolated
	//	*GlobalSpecType_Disabled
	ServiceIsolationChoice isGlobalSpecType_ServiceIsolationChoice `protobuf_oneof:"service_isolation_choice"`
	// Default Workload Flavor
	//
	// x-displayName: "Default Workload Flavor"
	// Default workfload flavor for all workloads launched in this Virtual K8s
	DefaultFlavorRef *ves_io_schema_views.ObjectRefType `protobuf:"bytes,5,opt,name=default_flavor_ref,json=defaultFlavorRef" json:"default_flavor_ref,omitempty"`
}

func (m *GlobalSpecType) Reset()                    { *m = GlobalSpecType{} }
func (*GlobalSpecType) ProtoMessage()               {}
func (*GlobalSpecType) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{0} }

type isGlobalSpecType_ServiceIsolationChoice interface {
	isGlobalSpecType_ServiceIsolationChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type GlobalSpecType_Isolated struct {
	Isolated *ves_io_schema4.Empty `protobuf:"bytes,3,opt,name=isolated,oneof"`
}
type GlobalSpecType_Disabled struct {
	Disabled *ves_io_schema4.Empty `protobuf:"bytes,4,opt,name=disabled,oneof"`
}

func (*GlobalSpecType_Isolated) isGlobalSpecType_ServiceIsolationChoice() {}
func (*GlobalSpecType_Disabled) isGlobalSpecType_ServiceIsolationChoice() {}

func (m *GlobalSpecType) GetServiceIsolationChoice() isGlobalSpecType_ServiceIsolationChoice {
	if m != nil {
		return m.ServiceIsolationChoice
	}
	return nil
}

func (m *GlobalSpecType) GetVsiteRefs() []*ves_io_schema4.ObjectRefType {
	if m != nil {
		return m.VsiteRefs
	}
	return nil
}

func (m *GlobalSpecType) GetIsolated() *ves_io_schema4.Empty {
	if x, ok := m.GetServiceIsolationChoice().(*GlobalSpecType_Isolated); ok {
		return x.Isolated
	}
	return nil
}

func (m *GlobalSpecType) GetDisabled() *ves_io_schema4.Empty {
	if x, ok := m.GetServiceIsolationChoice().(*GlobalSpecType_Disabled); ok {
		return x.Disabled
	}
	return nil
}

func (m *GlobalSpecType) GetDefaultFlavorRef() *ves_io_schema_views.ObjectRefType {
	if m != nil {
		return m.DefaultFlavorRef
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*GlobalSpecType) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _GlobalSpecType_OneofMarshaler, _GlobalSpecType_OneofUnmarshaler, _GlobalSpecType_OneofSizer, []interface{}{
		(*GlobalSpecType_Isolated)(nil),
		(*GlobalSpecType_Disabled)(nil),
	}
}

func _GlobalSpecType_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*GlobalSpecType)
	// service_isolation_choice
	switch x := m.ServiceIsolationChoice.(type) {
	case *GlobalSpecType_Isolated:
		_ = b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Isolated); err != nil {
			return err
		}
	case *GlobalSpecType_Disabled:
		_ = b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Disabled); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("GlobalSpecType.ServiceIsolationChoice has unexpected type %T", x)
	}
	return nil
}

func _GlobalSpecType_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*GlobalSpecType)
	switch tag {
	case 3: // service_isolation_choice.isolated
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.ServiceIsolationChoice = &GlobalSpecType_Isolated{msg}
		return true, err
	case 4: // service_isolation_choice.disabled
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.ServiceIsolationChoice = &GlobalSpecType_Disabled{msg}
		return true, err
	default:
		return false, nil
	}
}

func _GlobalSpecType_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*GlobalSpecType)
	// service_isolation_choice
	switch x := m.ServiceIsolationChoice.(type) {
	case *GlobalSpecType_Isolated:
		s := proto.Size(x.Isolated)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *GlobalSpecType_Disabled:
		s := proto.Size(x.Disabled)
		n += proto.SizeVarint(4<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// Create Virtual K8s
//
// x-displayName: "Create Virtual Kubernetes"
// Create virtual_k8s will create the object in the storage backend for namespace metadata.namespace
type CreateSpecType struct {
	VsiteRefs []*ves_io_schema4.ObjectRefType `protobuf:"bytes,1,rep,name=vsite_refs,json=vsiteRefs" json:"vsite_refs,omitempty"`
	// Types that are valid to be assigned to ServiceIsolationChoice:
	//	*CreateSpecType_Isolated
	//	*CreateSpecType_Disabled
	ServiceIsolationChoice isCreateSpecType_ServiceIsolationChoice `protobuf_oneof:"service_isolation_choice"`
	DefaultFlavorRef       *ves_io_schema_views.ObjectRefType      `protobuf:"bytes,5,opt,name=default_flavor_ref,json=defaultFlavorRef" json:"default_flavor_ref,omitempty"`
}

func (m *CreateSpecType) Reset()                    { *m = CreateSpecType{} }
func (*CreateSpecType) ProtoMessage()               {}
func (*CreateSpecType) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{1} }

type isCreateSpecType_ServiceIsolationChoice interface {
	isCreateSpecType_ServiceIsolationChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type CreateSpecType_Isolated struct {
	Isolated *ves_io_schema4.Empty `protobuf:"bytes,3,opt,name=isolated,oneof"`
}
type CreateSpecType_Disabled struct {
	Disabled *ves_io_schema4.Empty `protobuf:"bytes,4,opt,name=disabled,oneof"`
}

func (*CreateSpecType_Isolated) isCreateSpecType_ServiceIsolationChoice() {}
func (*CreateSpecType_Disabled) isCreateSpecType_ServiceIsolationChoice() {}

func (m *CreateSpecType) GetServiceIsolationChoice() isCreateSpecType_ServiceIsolationChoice {
	if m != nil {
		return m.ServiceIsolationChoice
	}
	return nil
}

func (m *CreateSpecType) GetVsiteRefs() []*ves_io_schema4.ObjectRefType {
	if m != nil {
		return m.VsiteRefs
	}
	return nil
}

func (m *CreateSpecType) GetIsolated() *ves_io_schema4.Empty {
	if x, ok := m.GetServiceIsolationChoice().(*CreateSpecType_Isolated); ok {
		return x.Isolated
	}
	return nil
}

func (m *CreateSpecType) GetDisabled() *ves_io_schema4.Empty {
	if x, ok := m.GetServiceIsolationChoice().(*CreateSpecType_Disabled); ok {
		return x.Disabled
	}
	return nil
}

func (m *CreateSpecType) GetDefaultFlavorRef() *ves_io_schema_views.ObjectRefType {
	if m != nil {
		return m.DefaultFlavorRef
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*CreateSpecType) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _CreateSpecType_OneofMarshaler, _CreateSpecType_OneofUnmarshaler, _CreateSpecType_OneofSizer, []interface{}{
		(*CreateSpecType_Isolated)(nil),
		(*CreateSpecType_Disabled)(nil),
	}
}

func _CreateSpecType_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*CreateSpecType)
	// service_isolation_choice
	switch x := m.ServiceIsolationChoice.(type) {
	case *CreateSpecType_Isolated:
		_ = b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Isolated); err != nil {
			return err
		}
	case *CreateSpecType_Disabled:
		_ = b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Disabled); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("CreateSpecType.ServiceIsolationChoice has unexpected type %T", x)
	}
	return nil
}

func _CreateSpecType_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*CreateSpecType)
	switch tag {
	case 3: // service_isolation_choice.isolated
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.ServiceIsolationChoice = &CreateSpecType_Isolated{msg}
		return true, err
	case 4: // service_isolation_choice.disabled
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.ServiceIsolationChoice = &CreateSpecType_Disabled{msg}
		return true, err
	default:
		return false, nil
	}
}

func _CreateSpecType_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*CreateSpecType)
	// service_isolation_choice
	switch x := m.ServiceIsolationChoice.(type) {
	case *CreateSpecType_Isolated:
		s := proto.Size(x.Isolated)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *CreateSpecType_Disabled:
		s := proto.Size(x.Disabled)
		n += proto.SizeVarint(4<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// Replace Virtual K8s
//
// x-displayName: "Replace Virtual Kubernetes"
// Replacing an endpoint object will update the object by replacing the existing spec with the provided one.
// For read-then-write operations a resourceVersion mismatch will occur if the object was modified between the read and write.
type ReplaceSpecType struct {
	VsiteRefs []*ves_io_schema4.ObjectRefType `protobuf:"bytes,1,rep,name=vsite_refs,json=vsiteRefs" json:"vsite_refs,omitempty"`
	// Types that are valid to be assigned to ServiceIsolationChoice:
	//	*ReplaceSpecType_Isolated
	//	*ReplaceSpecType_Disabled
	ServiceIsolationChoice isReplaceSpecType_ServiceIsolationChoice `protobuf_oneof:"service_isolation_choice"`
	DefaultFlavorRef       *ves_io_schema_views.ObjectRefType       `protobuf:"bytes,5,opt,name=default_flavor_ref,json=defaultFlavorRef" json:"default_flavor_ref,omitempty"`
}

func (m *ReplaceSpecType) Reset()                    { *m = ReplaceSpecType{} }
func (*ReplaceSpecType) ProtoMessage()               {}
func (*ReplaceSpecType) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{2} }

type isReplaceSpecType_ServiceIsolationChoice interface {
	isReplaceSpecType_ServiceIsolationChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type ReplaceSpecType_Isolated struct {
	Isolated *ves_io_schema4.Empty `protobuf:"bytes,3,opt,name=isolated,oneof"`
}
type ReplaceSpecType_Disabled struct {
	Disabled *ves_io_schema4.Empty `protobuf:"bytes,4,opt,name=disabled,oneof"`
}

func (*ReplaceSpecType_Isolated) isReplaceSpecType_ServiceIsolationChoice() {}
func (*ReplaceSpecType_Disabled) isReplaceSpecType_ServiceIsolationChoice() {}

func (m *ReplaceSpecType) GetServiceIsolationChoice() isReplaceSpecType_ServiceIsolationChoice {
	if m != nil {
		return m.ServiceIsolationChoice
	}
	return nil
}

func (m *ReplaceSpecType) GetVsiteRefs() []*ves_io_schema4.ObjectRefType {
	if m != nil {
		return m.VsiteRefs
	}
	return nil
}

func (m *ReplaceSpecType) GetIsolated() *ves_io_schema4.Empty {
	if x, ok := m.GetServiceIsolationChoice().(*ReplaceSpecType_Isolated); ok {
		return x.Isolated
	}
	return nil
}

func (m *ReplaceSpecType) GetDisabled() *ves_io_schema4.Empty {
	if x, ok := m.GetServiceIsolationChoice().(*ReplaceSpecType_Disabled); ok {
		return x.Disabled
	}
	return nil
}

func (m *ReplaceSpecType) GetDefaultFlavorRef() *ves_io_schema_views.ObjectRefType {
	if m != nil {
		return m.DefaultFlavorRef
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*ReplaceSpecType) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _ReplaceSpecType_OneofMarshaler, _ReplaceSpecType_OneofUnmarshaler, _ReplaceSpecType_OneofSizer, []interface{}{
		(*ReplaceSpecType_Isolated)(nil),
		(*ReplaceSpecType_Disabled)(nil),
	}
}

func _ReplaceSpecType_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*ReplaceSpecType)
	// service_isolation_choice
	switch x := m.ServiceIsolationChoice.(type) {
	case *ReplaceSpecType_Isolated:
		_ = b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Isolated); err != nil {
			return err
		}
	case *ReplaceSpecType_Disabled:
		_ = b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Disabled); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("ReplaceSpecType.ServiceIsolationChoice has unexpected type %T", x)
	}
	return nil
}

func _ReplaceSpecType_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*ReplaceSpecType)
	switch tag {
	case 3: // service_isolation_choice.isolated
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.ServiceIsolationChoice = &ReplaceSpecType_Isolated{msg}
		return true, err
	case 4: // service_isolation_choice.disabled
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.ServiceIsolationChoice = &ReplaceSpecType_Disabled{msg}
		return true, err
	default:
		return false, nil
	}
}

func _ReplaceSpecType_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*ReplaceSpecType)
	// service_isolation_choice
	switch x := m.ServiceIsolationChoice.(type) {
	case *ReplaceSpecType_Isolated:
		s := proto.Size(x.Isolated)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ReplaceSpecType_Disabled:
		s := proto.Size(x.Disabled)
		n += proto.SizeVarint(4<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// Get Virtual K8s
//
// x-displayName: "Get Virtual Kubernetes"
// Get virtual_k8s will get the object from the storage backend for namesapce metadata.namespace
type GetSpecType struct {
	VsiteRefs []*ves_io_schema4.ObjectRefType `protobuf:"bytes,1,rep,name=vsite_refs,json=vsiteRefs" json:"vsite_refs,omitempty"`
	// Types that are valid to be assigned to ServiceIsolationChoice:
	//	*GetSpecType_Isolated
	//	*GetSpecType_Disabled
	ServiceIsolationChoice isGetSpecType_ServiceIsolationChoice `protobuf_oneof:"service_isolation_choice"`
	DefaultFlavorRef       *ves_io_schema_views.ObjectRefType   `protobuf:"bytes,5,opt,name=default_flavor_ref,json=defaultFlavorRef" json:"default_flavor_ref,omitempty"`
}

func (m *GetSpecType) Reset()                    { *m = GetSpecType{} }
func (*GetSpecType) ProtoMessage()               {}
func (*GetSpecType) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{3} }

type isGetSpecType_ServiceIsolationChoice interface {
	isGetSpecType_ServiceIsolationChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type GetSpecType_Isolated struct {
	Isolated *ves_io_schema4.Empty `protobuf:"bytes,3,opt,name=isolated,oneof"`
}
type GetSpecType_Disabled struct {
	Disabled *ves_io_schema4.Empty `protobuf:"bytes,4,opt,name=disabled,oneof"`
}

func (*GetSpecType_Isolated) isGetSpecType_ServiceIsolationChoice() {}
func (*GetSpecType_Disabled) isGetSpecType_ServiceIsolationChoice() {}

func (m *GetSpecType) GetServiceIsolationChoice() isGetSpecType_ServiceIsolationChoice {
	if m != nil {
		return m.ServiceIsolationChoice
	}
	return nil
}

func (m *GetSpecType) GetVsiteRefs() []*ves_io_schema4.ObjectRefType {
	if m != nil {
		return m.VsiteRefs
	}
	return nil
}

func (m *GetSpecType) GetIsolated() *ves_io_schema4.Empty {
	if x, ok := m.GetServiceIsolationChoice().(*GetSpecType_Isolated); ok {
		return x.Isolated
	}
	return nil
}

func (m *GetSpecType) GetDisabled() *ves_io_schema4.Empty {
	if x, ok := m.GetServiceIsolationChoice().(*GetSpecType_Disabled); ok {
		return x.Disabled
	}
	return nil
}

func (m *GetSpecType) GetDefaultFlavorRef() *ves_io_schema_views.ObjectRefType {
	if m != nil {
		return m.DefaultFlavorRef
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*GetSpecType) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _GetSpecType_OneofMarshaler, _GetSpecType_OneofUnmarshaler, _GetSpecType_OneofSizer, []interface{}{
		(*GetSpecType_Isolated)(nil),
		(*GetSpecType_Disabled)(nil),
	}
}

func _GetSpecType_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*GetSpecType)
	// service_isolation_choice
	switch x := m.ServiceIsolationChoice.(type) {
	case *GetSpecType_Isolated:
		_ = b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Isolated); err != nil {
			return err
		}
	case *GetSpecType_Disabled:
		_ = b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Disabled); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("GetSpecType.ServiceIsolationChoice has unexpected type %T", x)
	}
	return nil
}

func _GetSpecType_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*GetSpecType)
	switch tag {
	case 3: // service_isolation_choice.isolated
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.ServiceIsolationChoice = &GetSpecType_Isolated{msg}
		return true, err
	case 4: // service_isolation_choice.disabled
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.ServiceIsolationChoice = &GetSpecType_Disabled{msg}
		return true, err
	default:
		return false, nil
	}
}

func _GetSpecType_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*GetSpecType)
	// service_isolation_choice
	switch x := m.ServiceIsolationChoice.(type) {
	case *GetSpecType_Isolated:
		s := proto.Size(x.Isolated)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *GetSpecType_Disabled:
		s := proto.Size(x.Disabled)
		n += proto.SizeVarint(4<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

func init() {
	proto.RegisterType((*GlobalSpecType)(nil), "ves.io.schema.virtual_k8s.GlobalSpecType")
	golang_proto.RegisterType((*GlobalSpecType)(nil), "ves.io.schema.virtual_k8s.GlobalSpecType")
	proto.RegisterType((*CreateSpecType)(nil), "ves.io.schema.virtual_k8s.CreateSpecType")
	golang_proto.RegisterType((*CreateSpecType)(nil), "ves.io.schema.virtual_k8s.CreateSpecType")
	proto.RegisterType((*ReplaceSpecType)(nil), "ves.io.schema.virtual_k8s.ReplaceSpecType")
	golang_proto.RegisterType((*ReplaceSpecType)(nil), "ves.io.schema.virtual_k8s.ReplaceSpecType")
	proto.RegisterType((*GetSpecType)(nil), "ves.io.schema.virtual_k8s.GetSpecType")
	golang_proto.RegisterType((*GetSpecType)(nil), "ves.io.schema.virtual_k8s.GetSpecType")
}
func (this *GlobalSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType)
	if !ok {
		that2, ok := that.(GlobalSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.VsiteRefs) != len(that1.VsiteRefs) {
		return false
	}
	for i := range this.VsiteRefs {
		if !this.VsiteRefs[i].Equal(that1.VsiteRefs[i]) {
			return false
		}
	}
	if that1.ServiceIsolationChoice == nil {
		if this.ServiceIsolationChoice != nil {
			return false
		}
	} else if this.ServiceIsolationChoice == nil {
		return false
	} else if !this.ServiceIsolationChoice.Equal(that1.ServiceIsolationChoice) {
		return false
	}
	if !this.DefaultFlavorRef.Equal(that1.DefaultFlavorRef) {
		return false
	}
	return true
}
func (this *GlobalSpecType_Isolated) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_Isolated)
	if !ok {
		that2, ok := that.(GlobalSpecType_Isolated)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Isolated.Equal(that1.Isolated) {
		return false
	}
	return true
}
func (this *GlobalSpecType_Disabled) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_Disabled)
	if !ok {
		that2, ok := that.(GlobalSpecType_Disabled)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Disabled.Equal(that1.Disabled) {
		return false
	}
	return true
}
func (this *CreateSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType)
	if !ok {
		that2, ok := that.(CreateSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.VsiteRefs) != len(that1.VsiteRefs) {
		return false
	}
	for i := range this.VsiteRefs {
		if !this.VsiteRefs[i].Equal(that1.VsiteRefs[i]) {
			return false
		}
	}
	if that1.ServiceIsolationChoice == nil {
		if this.ServiceIsolationChoice != nil {
			return false
		}
	} else if this.ServiceIsolationChoice == nil {
		return false
	} else if !this.ServiceIsolationChoice.Equal(that1.ServiceIsolationChoice) {
		return false
	}
	if !this.DefaultFlavorRef.Equal(that1.DefaultFlavorRef) {
		return false
	}
	return true
}
func (this *CreateSpecType_Isolated) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_Isolated)
	if !ok {
		that2, ok := that.(CreateSpecType_Isolated)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Isolated.Equal(that1.Isolated) {
		return false
	}
	return true
}
func (this *CreateSpecType_Disabled) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_Disabled)
	if !ok {
		that2, ok := that.(CreateSpecType_Disabled)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Disabled.Equal(that1.Disabled) {
		return false
	}
	return true
}
func (this *ReplaceSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType)
	if !ok {
		that2, ok := that.(ReplaceSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.VsiteRefs) != len(that1.VsiteRefs) {
		return false
	}
	for i := range this.VsiteRefs {
		if !this.VsiteRefs[i].Equal(that1.VsiteRefs[i]) {
			return false
		}
	}
	if that1.ServiceIsolationChoice == nil {
		if this.ServiceIsolationChoice != nil {
			return false
		}
	} else if this.ServiceIsolationChoice == nil {
		return false
	} else if !this.ServiceIsolationChoice.Equal(that1.ServiceIsolationChoice) {
		return false
	}
	if !this.DefaultFlavorRef.Equal(that1.DefaultFlavorRef) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_Isolated) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_Isolated)
	if !ok {
		that2, ok := that.(ReplaceSpecType_Isolated)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Isolated.Equal(that1.Isolated) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_Disabled) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_Disabled)
	if !ok {
		that2, ok := that.(ReplaceSpecType_Disabled)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Disabled.Equal(that1.Disabled) {
		return false
	}
	return true
}
func (this *GetSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType)
	if !ok {
		that2, ok := that.(GetSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.VsiteRefs) != len(that1.VsiteRefs) {
		return false
	}
	for i := range this.VsiteRefs {
		if !this.VsiteRefs[i].Equal(that1.VsiteRefs[i]) {
			return false
		}
	}
	if that1.ServiceIsolationChoice == nil {
		if this.ServiceIsolationChoice != nil {
			return false
		}
	} else if this.ServiceIsolationChoice == nil {
		return false
	} else if !this.ServiceIsolationChoice.Equal(that1.ServiceIsolationChoice) {
		return false
	}
	if !this.DefaultFlavorRef.Equal(that1.DefaultFlavorRef) {
		return false
	}
	return true
}
func (this *GetSpecType_Isolated) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_Isolated)
	if !ok {
		that2, ok := that.(GetSpecType_Isolated)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Isolated.Equal(that1.Isolated) {
		return false
	}
	return true
}
func (this *GetSpecType_Disabled) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_Disabled)
	if !ok {
		that2, ok := that.(GetSpecType_Disabled)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Disabled.Equal(that1.Disabled) {
		return false
	}
	return true
}
func (this *GlobalSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&virtual_k8s.GlobalSpecType{")
	if this.VsiteRefs != nil {
		s = append(s, "VsiteRefs: "+fmt.Sprintf("%#v", this.VsiteRefs)+",\n")
	}
	if this.ServiceIsolationChoice != nil {
		s = append(s, "ServiceIsolationChoice: "+fmt.Sprintf("%#v", this.ServiceIsolationChoice)+",\n")
	}
	if this.DefaultFlavorRef != nil {
		s = append(s, "DefaultFlavorRef: "+fmt.Sprintf("%#v", this.DefaultFlavorRef)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GlobalSpecType_Isolated) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&virtual_k8s.GlobalSpecType_Isolated{` +
		`Isolated:` + fmt.Sprintf("%#v", this.Isolated) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_Disabled) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&virtual_k8s.GlobalSpecType_Disabled{` +
		`Disabled:` + fmt.Sprintf("%#v", this.Disabled) + `}`}, ", ")
	return s
}
func (this *CreateSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&virtual_k8s.CreateSpecType{")
	if this.VsiteRefs != nil {
		s = append(s, "VsiteRefs: "+fmt.Sprintf("%#v", this.VsiteRefs)+",\n")
	}
	if this.ServiceIsolationChoice != nil {
		s = append(s, "ServiceIsolationChoice: "+fmt.Sprintf("%#v", this.ServiceIsolationChoice)+",\n")
	}
	if this.DefaultFlavorRef != nil {
		s = append(s, "DefaultFlavorRef: "+fmt.Sprintf("%#v", this.DefaultFlavorRef)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CreateSpecType_Isolated) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&virtual_k8s.CreateSpecType_Isolated{` +
		`Isolated:` + fmt.Sprintf("%#v", this.Isolated) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_Disabled) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&virtual_k8s.CreateSpecType_Disabled{` +
		`Disabled:` + fmt.Sprintf("%#v", this.Disabled) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&virtual_k8s.ReplaceSpecType{")
	if this.VsiteRefs != nil {
		s = append(s, "VsiteRefs: "+fmt.Sprintf("%#v", this.VsiteRefs)+",\n")
	}
	if this.ServiceIsolationChoice != nil {
		s = append(s, "ServiceIsolationChoice: "+fmt.Sprintf("%#v", this.ServiceIsolationChoice)+",\n")
	}
	if this.DefaultFlavorRef != nil {
		s = append(s, "DefaultFlavorRef: "+fmt.Sprintf("%#v", this.DefaultFlavorRef)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ReplaceSpecType_Isolated) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&virtual_k8s.ReplaceSpecType_Isolated{` +
		`Isolated:` + fmt.Sprintf("%#v", this.Isolated) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_Disabled) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&virtual_k8s.ReplaceSpecType_Disabled{` +
		`Disabled:` + fmt.Sprintf("%#v", this.Disabled) + `}`}, ", ")
	return s
}
func (this *GetSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&virtual_k8s.GetSpecType{")
	if this.VsiteRefs != nil {
		s = append(s, "VsiteRefs: "+fmt.Sprintf("%#v", this.VsiteRefs)+",\n")
	}
	if this.ServiceIsolationChoice != nil {
		s = append(s, "ServiceIsolationChoice: "+fmt.Sprintf("%#v", this.ServiceIsolationChoice)+",\n")
	}
	if this.DefaultFlavorRef != nil {
		s = append(s, "DefaultFlavorRef: "+fmt.Sprintf("%#v", this.DefaultFlavorRef)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetSpecType_Isolated) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&virtual_k8s.GetSpecType_Isolated{` +
		`Isolated:` + fmt.Sprintf("%#v", this.Isolated) + `}`}, ", ")
	return s
}
func (this *GetSpecType_Disabled) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&virtual_k8s.GetSpecType_Disabled{` +
		`Disabled:` + fmt.Sprintf("%#v", this.Disabled) + `}`}, ", ")
	return s
}
func valueToGoStringTypes(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *GlobalSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GlobalSpecType) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.VsiteRefs) > 0 {
		for _, msg := range m.VsiteRefs {
			dAtA[i] = 0xa
			i++
			i = encodeVarintTypes(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.ServiceIsolationChoice != nil {
		nn1, err := m.ServiceIsolationChoice.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn1
	}
	if m.DefaultFlavorRef != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.DefaultFlavorRef.Size()))
		n2, err := m.DefaultFlavorRef.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	return i, nil
}

func (m *GlobalSpecType_Isolated) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Isolated != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.Isolated.Size()))
		n3, err := m.Isolated.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	return i, nil
}
func (m *GlobalSpecType_Disabled) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Disabled != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.Disabled.Size()))
		n4, err := m.Disabled.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	return i, nil
}
func (m *CreateSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateSpecType) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.VsiteRefs) > 0 {
		for _, msg := range m.VsiteRefs {
			dAtA[i] = 0xa
			i++
			i = encodeVarintTypes(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.ServiceIsolationChoice != nil {
		nn5, err := m.ServiceIsolationChoice.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn5
	}
	if m.DefaultFlavorRef != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.DefaultFlavorRef.Size()))
		n6, err := m.DefaultFlavorRef.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	return i, nil
}

func (m *CreateSpecType_Isolated) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Isolated != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.Isolated.Size()))
		n7, err := m.Isolated.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	return i, nil
}
func (m *CreateSpecType_Disabled) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Disabled != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.Disabled.Size()))
		n8, err := m.Disabled.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n8
	}
	return i, nil
}
func (m *ReplaceSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplaceSpecType) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.VsiteRefs) > 0 {
		for _, msg := range m.VsiteRefs {
			dAtA[i] = 0xa
			i++
			i = encodeVarintTypes(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.ServiceIsolationChoice != nil {
		nn9, err := m.ServiceIsolationChoice.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn9
	}
	if m.DefaultFlavorRef != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.DefaultFlavorRef.Size()))
		n10, err := m.DefaultFlavorRef.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n10
	}
	return i, nil
}

func (m *ReplaceSpecType_Isolated) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Isolated != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.Isolated.Size()))
		n11, err := m.Isolated.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n11
	}
	return i, nil
}
func (m *ReplaceSpecType_Disabled) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Disabled != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.Disabled.Size()))
		n12, err := m.Disabled.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n12
	}
	return i, nil
}
func (m *GetSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetSpecType) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.VsiteRefs) > 0 {
		for _, msg := range m.VsiteRefs {
			dAtA[i] = 0xa
			i++
			i = encodeVarintTypes(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.ServiceIsolationChoice != nil {
		nn13, err := m.ServiceIsolationChoice.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn13
	}
	if m.DefaultFlavorRef != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.DefaultFlavorRef.Size()))
		n14, err := m.DefaultFlavorRef.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n14
	}
	return i, nil
}

func (m *GetSpecType_Isolated) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Isolated != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.Isolated.Size()))
		n15, err := m.Isolated.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n15
	}
	return i, nil
}
func (m *GetSpecType_Disabled) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Disabled != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.Disabled.Size()))
		n16, err := m.Disabled.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n16
	}
	return i, nil
}
func encodeVarintTypes(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *GlobalSpecType) Size() (n int) {
	var l int
	_ = l
	if len(m.VsiteRefs) > 0 {
		for _, e := range m.VsiteRefs {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if m.ServiceIsolationChoice != nil {
		n += m.ServiceIsolationChoice.Size()
	}
	if m.DefaultFlavorRef != nil {
		l = m.DefaultFlavorRef.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *GlobalSpecType_Isolated) Size() (n int) {
	var l int
	_ = l
	if m.Isolated != nil {
		l = m.Isolated.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_Disabled) Size() (n int) {
	var l int
	_ = l
	if m.Disabled != nil {
		l = m.Disabled.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType) Size() (n int) {
	var l int
	_ = l
	if len(m.VsiteRefs) > 0 {
		for _, e := range m.VsiteRefs {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if m.ServiceIsolationChoice != nil {
		n += m.ServiceIsolationChoice.Size()
	}
	if m.DefaultFlavorRef != nil {
		l = m.DefaultFlavorRef.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *CreateSpecType_Isolated) Size() (n int) {
	var l int
	_ = l
	if m.Isolated != nil {
		l = m.Isolated.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_Disabled) Size() (n int) {
	var l int
	_ = l
	if m.Disabled != nil {
		l = m.Disabled.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType) Size() (n int) {
	var l int
	_ = l
	if len(m.VsiteRefs) > 0 {
		for _, e := range m.VsiteRefs {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if m.ServiceIsolationChoice != nil {
		n += m.ServiceIsolationChoice.Size()
	}
	if m.DefaultFlavorRef != nil {
		l = m.DefaultFlavorRef.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *ReplaceSpecType_Isolated) Size() (n int) {
	var l int
	_ = l
	if m.Isolated != nil {
		l = m.Isolated.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_Disabled) Size() (n int) {
	var l int
	_ = l
	if m.Disabled != nil {
		l = m.Disabled.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType) Size() (n int) {
	var l int
	_ = l
	if len(m.VsiteRefs) > 0 {
		for _, e := range m.VsiteRefs {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if m.ServiceIsolationChoice != nil {
		n += m.ServiceIsolationChoice.Size()
	}
	if m.DefaultFlavorRef != nil {
		l = m.DefaultFlavorRef.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *GetSpecType_Isolated) Size() (n int) {
	var l int
	_ = l
	if m.Isolated != nil {
		l = m.Isolated.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_Disabled) Size() (n int) {
	var l int
	_ = l
	if m.Disabled != nil {
		l = m.Disabled.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func sovTypes(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozTypes(x uint64) (n int) {
	return sovTypes(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *GlobalSpecType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType{`,
		`VsiteRefs:` + strings.Replace(fmt.Sprintf("%v", this.VsiteRefs), "ObjectRefType", "ves_io_schema4.ObjectRefType", 1) + `,`,
		`ServiceIsolationChoice:` + fmt.Sprintf("%v", this.ServiceIsolationChoice) + `,`,
		`DefaultFlavorRef:` + strings.Replace(fmt.Sprintf("%v", this.DefaultFlavorRef), "ObjectRefType", "ves_io_schema_views.ObjectRefType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_Isolated) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_Isolated{`,
		`Isolated:` + strings.Replace(fmt.Sprintf("%v", this.Isolated), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_Disabled) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_Disabled{`,
		`Disabled:` + strings.Replace(fmt.Sprintf("%v", this.Disabled), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType{`,
		`VsiteRefs:` + strings.Replace(fmt.Sprintf("%v", this.VsiteRefs), "ObjectRefType", "ves_io_schema4.ObjectRefType", 1) + `,`,
		`ServiceIsolationChoice:` + fmt.Sprintf("%v", this.ServiceIsolationChoice) + `,`,
		`DefaultFlavorRef:` + strings.Replace(fmt.Sprintf("%v", this.DefaultFlavorRef), "ObjectRefType", "ves_io_schema_views.ObjectRefType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_Isolated) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_Isolated{`,
		`Isolated:` + strings.Replace(fmt.Sprintf("%v", this.Isolated), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_Disabled) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_Disabled{`,
		`Disabled:` + strings.Replace(fmt.Sprintf("%v", this.Disabled), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType{`,
		`VsiteRefs:` + strings.Replace(fmt.Sprintf("%v", this.VsiteRefs), "ObjectRefType", "ves_io_schema4.ObjectRefType", 1) + `,`,
		`ServiceIsolationChoice:` + fmt.Sprintf("%v", this.ServiceIsolationChoice) + `,`,
		`DefaultFlavorRef:` + strings.Replace(fmt.Sprintf("%v", this.DefaultFlavorRef), "ObjectRefType", "ves_io_schema_views.ObjectRefType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_Isolated) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_Isolated{`,
		`Isolated:` + strings.Replace(fmt.Sprintf("%v", this.Isolated), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_Disabled) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_Disabled{`,
		`Disabled:` + strings.Replace(fmt.Sprintf("%v", this.Disabled), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType{`,
		`VsiteRefs:` + strings.Replace(fmt.Sprintf("%v", this.VsiteRefs), "ObjectRefType", "ves_io_schema4.ObjectRefType", 1) + `,`,
		`ServiceIsolationChoice:` + fmt.Sprintf("%v", this.ServiceIsolationChoice) + `,`,
		`DefaultFlavorRef:` + strings.Replace(fmt.Sprintf("%v", this.DefaultFlavorRef), "ObjectRefType", "ves_io_schema_views.ObjectRefType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_Isolated) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_Isolated{`,
		`Isolated:` + strings.Replace(fmt.Sprintf("%v", this.Isolated), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_Disabled) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_Disabled{`,
		`Disabled:` + strings.Replace(fmt.Sprintf("%v", this.Disabled), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringTypes(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *GlobalSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GlobalSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GlobalSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VsiteRefs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VsiteRefs = append(m.VsiteRefs, &ves_io_schema4.ObjectRefType{})
			if err := m.VsiteRefs[len(m.VsiteRefs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Isolated", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ServiceIsolationChoice = &GlobalSpecType_Isolated{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Disabled", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ServiceIsolationChoice = &GlobalSpecType_Disabled{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultFlavorRef", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DefaultFlavorRef == nil {
				m.DefaultFlavorRef = &ves_io_schema_views.ObjectRefType{}
			}
			if err := m.DefaultFlavorRef.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VsiteRefs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VsiteRefs = append(m.VsiteRefs, &ves_io_schema4.ObjectRefType{})
			if err := m.VsiteRefs[len(m.VsiteRefs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Isolated", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ServiceIsolationChoice = &CreateSpecType_Isolated{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Disabled", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ServiceIsolationChoice = &CreateSpecType_Disabled{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultFlavorRef", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DefaultFlavorRef == nil {
				m.DefaultFlavorRef = &ves_io_schema_views.ObjectRefType{}
			}
			if err := m.DefaultFlavorRef.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplaceSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplaceSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplaceSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VsiteRefs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VsiteRefs = append(m.VsiteRefs, &ves_io_schema4.ObjectRefType{})
			if err := m.VsiteRefs[len(m.VsiteRefs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Isolated", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ServiceIsolationChoice = &ReplaceSpecType_Isolated{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Disabled", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ServiceIsolationChoice = &ReplaceSpecType_Disabled{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultFlavorRef", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DefaultFlavorRef == nil {
				m.DefaultFlavorRef = &ves_io_schema_views.ObjectRefType{}
			}
			if err := m.DefaultFlavorRef.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VsiteRefs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VsiteRefs = append(m.VsiteRefs, &ves_io_schema4.ObjectRefType{})
			if err := m.VsiteRefs[len(m.VsiteRefs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Isolated", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ServiceIsolationChoice = &GetSpecType_Isolated{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Disabled", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ServiceIsolationChoice = &GetSpecType_Disabled{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultFlavorRef", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DefaultFlavorRef == nil {
				m.DefaultFlavorRef = &ves_io_schema_views.ObjectRefType{}
			}
			if err := m.DefaultFlavorRef.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTypes(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthTypes
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipTypes(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthTypes = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTypes   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("ves.io/schema/virtual_k8s/types.proto", fileDescriptorTypes) }
func init() { golang_proto.RegisterFile("ves.io/schema/virtual_k8s/types.proto", fileDescriptorTypes) }

var fileDescriptorTypes = []byte{
	// 572 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x95, 0x41, 0x6b, 0x13, 0x4f,
	0x18, 0xc6, 0x33, 0xbb, 0xed, 0x9f, 0xfe, 0xb7, 0xd2, 0xd4, 0x45, 0x24, 0x8d, 0x65, 0x0c, 0x01,
	0xa1, 0xa0, 0xd9, 0x85, 0xd4, 0x43, 0xf1, 0xe0, 0x21, 0xa2, 0x15, 0x11, 0x0a, 0xab, 0x78, 0xf0,
	0xb2, 0xcc, 0xee, 0xbe, 0xbb, 0x19, 0xb3, 0xe9, 0x2c, 0x33, 0x93, 0x8d, 0x39, 0x14, 0x8a, 0xe0,
	0x5d, 0xfc, 0x14, 0xd2, 0x8f, 0x60, 0x2e, 0x39, 0x8a, 0xa7, 0x1c, 0x7b, 0x34, 0xdb, 0x8b, 0x1e,
	0x84, 0x9e, 0x45, 0x50, 0xb2, 0xd9, 0x94, 0x66, 0x83, 0x05, 0xf1, 0x90, 0x4b, 0x6f, 0x33, 0xfb,
	0x3e, 0xcf, 0x33, 0xf3, 0xfe, 0xde, 0x85, 0xd1, 0x6e, 0xc5, 0x20, 0x0c, 0xca, 0x4c, 0xe1, 0x36,
	0xa1, 0x4d, 0xcc, 0x98, 0x72, 0xd9, 0x21, 0xa1, 0xdd, 0xda, 0x11, 0xa6, 0xec, 0x45, 0x20, 0x8c,
	0x88, 0x33, 0xc9, 0xf4, 0x8d, 0x89, 0xcc, 0x98, 0xc8, 0x8c, 0x73, 0xb2, 0x72, 0x2d, 0xa0, 0xb2,
	0xd9, 0x71, 0x0c, 0x97, 0xb5, 0xcd, 0x80, 0x05, 0xcc, 0x4c, 0x1d, 0x4e, 0xc7, 0x4f, 0x77, 0xe9,
	0x26, 0x5d, 0x4d, 0x92, 0xca, 0x37, 0x66, 0x0f, 0x64, 0x91, 0xa4, 0x6c, 0x3f, 0x3b, 0xa6, 0xbc,
	0x31, 0x5b, 0x3c, 0x77, 0x83, 0xf2, 0x66, 0xee, 0xa2, 0x24, 0xa4, 0x1e, 0x91, 0x90, 0x55, 0x2b,
	0xf9, 0x36, 0xa0, 0x6b, 0xcf, 0x46, 0xdf, 0x9c, 0x57, 0xcc, 0xb4, 0x58, 0xfd, 0xae, 0x68, 0x6b,
	0xbb, 0x21, 0x73, 0x48, 0xf8, 0x2c, 0x02, 0xf7, 0x79, 0x2f, 0x02, 0xfd, 0x85, 0xa6, 0xc5, 0x82,
	0x4a, 0xb0, 0x39, 0xf8, 0xa2, 0x84, 0x2a, 0xea, 0xd6, 0x6a, 0x7d, 0xd3, 0x98, 0x45, 0xb1, 0xe7,
	0xbc, 0x02, 0x57, 0x5a, 0xe0, 0x8f, 0x1d, 0x8d, 0x8d, 0xa3, 0x83, 0x2b, 0x53, 0x38, 0x63, 0xe7,
	0xc7, 0x6f, 0x03, 0x75, 0xf9, 0x3d, 0x52, 0xd6, 0x2b, 0xd6, 0xff, 0x69, 0x94, 0x05, 0xbe, 0xd0,
	0xeb, 0xda, 0x0a, 0x15, 0x2c, 0x24, 0x12, 0xbc, 0x92, 0x5a, 0x41, 0x5b, 0xab, 0xf5, 0x6b, 0xb9,
	0xd4, 0x87, 0xed, 0x48, 0xf6, 0x1e, 0x17, 0xac, 0x33, 0xdd, 0xd8, 0xe3, 0x51, 0x41, 0x9c, 0x10,
	0xbc, 0xd2, 0xd2, 0xc5, 0x9e, 0xa9, 0x4e, 0x6f, 0x6a, 0xba, 0x07, 0x3e, 0xe9, 0x84, 0xd2, 0xf6,
	0x43, 0x12, 0x33, 0x3e, 0x6e, 0xa4, 0xb4, 0x9c, 0xba, 0xab, 0x46, 0x7e, 0xa4, 0xd0, 0x15, 0xb9,
	0x6e, 0xae, 0x1f, 0x1d, 0x14, 0xbb, 0x8c, 0xb7, 0x42, 0x46, 0xbc, 0x2c, 0x61, 0xd0, 0x47, 0xc8,
	0x5a, 0xcf, 0x52, 0x1f, 0xa5, 0x9f, 0x2c, 0xf0, 0x1b, 0xb7, 0xb5, 0x92, 0x00, 0x1e, 0x53, 0x17,
	0xec, 0xc9, 0x8d, 0x29, 0xdb, 0xb7, 0xdd, 0x26, 0xa3, 0x2e, 0xe8, 0xc5, 0x41, 0x1f, 0x2d, 0x0d,
	0xfb, 0x48, 0x49, 0xfa, 0x48, 0xdd, 0xbe, 0x73, 0xf7, 0xc9, 0xd2, 0x8a, 0xb2, 0xae, 0x56, 0x7f,
	0x29, 0xda, 0xda, 0x03, 0x0e, 0x44, 0xc2, 0x19, 0xef, 0xa7, 0x7f, 0xcd, 0xbb, 0x98, 0xe3, 0xbd,
	0x08, 0xca, 0xde, 0x3f, 0x52, 0xd6, 0xe7, 0x29, 0xcf, 0x13, 0xbe, 0x77, 0xf5, 0xf3, 0xfd, 0xdc,
	0xef, 0xd9, 0xd8, 0xb9, 0x00, 0xfa, 0xe6, 0x9b, 0x1f, 0xe8, 0x8f, 0xd5, 0x6c, 0x02, 0x87, 0xaa,
	0x56, 0xb4, 0x20, 0x0a, 0x89, 0x7b, 0x39, 0x82, 0x05, 0x8d, 0xe0, 0xa7, 0xa2, 0xad, 0xee, 0x82,
	0xbc, 0xc4, 0xbf, 0x10, 0xfc, 0x8d, 0xb7, 0x68, 0x38, 0xc2, 0x85, 0xe3, 0x11, 0x2e, 0x9c, 0x8e,
	0x30, 0x3a, 0x4c, 0x30, 0xfa, 0x90, 0x60, 0xf4, 0x29, 0xc1, 0x68, 0x98, 0x60, 0x74, 0x9c, 0x60,
	0xf4, 0x25, 0xc1, 0xe8, 0x6b, 0x82, 0x0b, 0xa7, 0x09, 0x46, 0xef, 0x4e, 0x70, 0x61, 0x70, 0x82,
	0xd1, 0xcb, 0xbd, 0x80, 0x45, 0xad, 0xc0, 0x88, 0x59, 0x28, 0x81, 0x73, 0x62, 0x74, 0x84, 0x99,
	0x2e, 0x7c, 0xc6, 0xdb, 0xb5, 0x88, 0xb3, 0x98, 0x7a, 0xc0, 0x6b, 0xd3, 0xb2, 0x19, 0x39, 0x01,
	0x33, 0xe1, 0xb5, 0xcc, 0x9e, 0x9e, 0xf9, 0xa7, 0xd6, 0xf9, 0x2f, 0x7d, 0x82, 0xb6, 0x7f, 0x07,
	0x00, 0x00, 0xff, 0xff, 0x04, 0x69, 0xd1, 0x76, 0x8e, 0x07, 0x00, 0x00,
}
