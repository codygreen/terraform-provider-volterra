// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ves.io/schema/service_policy_set/types.proto

package service_policy_set

import proto "github.com/gogo/protobuf/proto"
import golang_proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"
import _ "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
import _ "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
import ves_io_schema_policy "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/policy"
import ves_io_schema4 "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
import _ "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
import _ "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"

import strings "strings"
import reflect "reflect"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// GlobalSpecType
//
// x-displayName: "Specification"
// Shape of service_policy_set in the storage backend.
type GlobalSpecType struct {
	// policies
	//
	// x-displayName: "Policies"
	// An ordered list of references to service_policy objects.
	Policies []*ves_io_schema4.ObjectRefType `protobuf:"bytes,1,rep,name=policies" json:"policies,omitempty"`
	// type
	//
	// x-displayName: "Policy Set Type"
	// The type of the service_policy_set.
	// This is marked hidden because it defaults to NETWORK_SECURITY for user-configured policy sets. It will be set to RATE_LIMITING only for system generated
	// rate limiting policy sets for the time being.
	Type ves_io_schema_policy.PolicySetType `protobuf:"varint,2,opt,name=type,proto3,enum=ves.io.schema.policy.PolicySetType" json:"type,omitempty"`
	// default_action
	//
	// x-displayName: "Default Action"
	// Default action for the service_policy_set. This is used when the request does not match any policy in the policy set.
	// It is marked hidden since it defaults to DENY for user-configured policy sets. It will be set to NEXT_POLICY_SET only for system generated rate limiting
	// policy sets for the time being.
	DefaultAction ves_io_schema_policy.RuleAction `protobuf:"varint,3,opt,name=default_action,json=defaultAction,proto3,enum=ves.io.schema.policy.RuleAction" json:"default_action,omitempty"`
	// deny_info
	//
	// x-displayName: "Deny Information"
	// Detailed information including HTTP response code and error message to be sent when the policy set default action is used and that action is DENY.
	DenyInfo *ves_io_schema_policy.DenyInformation `protobuf:"bytes,4,opt,name=deny_info,json=denyInfo" json:"deny_info,omitempty"`
	// scope
	//
	// x-displayName: "Policy Set Scope"
	// The scope of the service_policy_set.
	// This is marked hidden since it defaults to POLICY_SET_SCOPE_NAMESPACE for user-configured policy sets. It will be set to POLICY_SET_SCOPE_VIRTUAL_HOST
	// for system created policy sets that are specific to a virtual host.
	Scope ves_io_schema_policy.PolicySetScope `protobuf:"varint,6,opt,name=scope,proto3,enum=ves.io.schema.policy.PolicySetScope" json:"scope,omitempty"`
}

func (m *GlobalSpecType) Reset()                    { *m = GlobalSpecType{} }
func (*GlobalSpecType) ProtoMessage()               {}
func (*GlobalSpecType) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{0} }

func (m *GlobalSpecType) GetPolicies() []*ves_io_schema4.ObjectRefType {
	if m != nil {
		return m.Policies
	}
	return nil
}

func (m *GlobalSpecType) GetType() ves_io_schema_policy.PolicySetType {
	if m != nil {
		return m.Type
	}
	return ves_io_schema_policy.NETWORK_SECURITY
}

func (m *GlobalSpecType) GetDefaultAction() ves_io_schema_policy.RuleAction {
	if m != nil {
		return m.DefaultAction
	}
	return ves_io_schema_policy.DENY
}

func (m *GlobalSpecType) GetDenyInfo() *ves_io_schema_policy.DenyInformation {
	if m != nil {
		return m.DenyInfo
	}
	return nil
}

func (m *GlobalSpecType) GetScope() ves_io_schema_policy.PolicySetScope {
	if m != nil {
		return m.Scope
	}
	return ves_io_schema_policy.POLICY_SET_SCOPE_NAMESPACE
}

// Create service policy
//
// x-displayName: "Create Service Policy Set"
// Create service_policy_set creates a new object in the storage backend for metadata.namespace.
type CreateSpecType struct {
	Policies      []*ves_io_schema4.ObjectRefType       `protobuf:"bytes,1,rep,name=policies" json:"policies,omitempty"`
	Type          ves_io_schema_policy.PolicySetType    `protobuf:"varint,2,opt,name=type,proto3,enum=ves.io.schema.policy.PolicySetType" json:"type,omitempty"`
	DefaultAction ves_io_schema_policy.RuleAction       `protobuf:"varint,3,opt,name=default_action,json=defaultAction,proto3,enum=ves.io.schema.policy.RuleAction" json:"default_action,omitempty"`
	DenyInfo      *ves_io_schema_policy.DenyInformation `protobuf:"bytes,4,opt,name=deny_info,json=denyInfo" json:"deny_info,omitempty"`
	Scope         ves_io_schema_policy.PolicySetScope   `protobuf:"varint,6,opt,name=scope,proto3,enum=ves.io.schema.policy.PolicySetScope" json:"scope,omitempty"`
}

func (m *CreateSpecType) Reset()                    { *m = CreateSpecType{} }
func (*CreateSpecType) ProtoMessage()               {}
func (*CreateSpecType) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{1} }

func (m *CreateSpecType) GetPolicies() []*ves_io_schema4.ObjectRefType {
	if m != nil {
		return m.Policies
	}
	return nil
}

func (m *CreateSpecType) GetType() ves_io_schema_policy.PolicySetType {
	if m != nil {
		return m.Type
	}
	return ves_io_schema_policy.NETWORK_SECURITY
}

func (m *CreateSpecType) GetDefaultAction() ves_io_schema_policy.RuleAction {
	if m != nil {
		return m.DefaultAction
	}
	return ves_io_schema_policy.DENY
}

func (m *CreateSpecType) GetDenyInfo() *ves_io_schema_policy.DenyInformation {
	if m != nil {
		return m.DenyInfo
	}
	return nil
}

func (m *CreateSpecType) GetScope() ves_io_schema_policy.PolicySetScope {
	if m != nil {
		return m.Scope
	}
	return ves_io_schema_policy.POLICY_SET_SCOPE_NAMESPACE
}

// Replace service policy
//
// x-displayName: "Replace Service Policy Set"
// Replace service_policy_set replaces an existing object in the storage backend for metadata.namespace.
type ReplaceSpecType struct {
	Policies      []*ves_io_schema4.ObjectRefType       `protobuf:"bytes,1,rep,name=policies" json:"policies,omitempty"`
	Type          ves_io_schema_policy.PolicySetType    `protobuf:"varint,2,opt,name=type,proto3,enum=ves.io.schema.policy.PolicySetType" json:"type,omitempty"`
	DefaultAction ves_io_schema_policy.RuleAction       `protobuf:"varint,3,opt,name=default_action,json=defaultAction,proto3,enum=ves.io.schema.policy.RuleAction" json:"default_action,omitempty"`
	DenyInfo      *ves_io_schema_policy.DenyInformation `protobuf:"bytes,4,opt,name=deny_info,json=denyInfo" json:"deny_info,omitempty"`
	Scope         ves_io_schema_policy.PolicySetScope   `protobuf:"varint,6,opt,name=scope,proto3,enum=ves.io.schema.policy.PolicySetScope" json:"scope,omitempty"`
}

func (m *ReplaceSpecType) Reset()                    { *m = ReplaceSpecType{} }
func (*ReplaceSpecType) ProtoMessage()               {}
func (*ReplaceSpecType) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{2} }

func (m *ReplaceSpecType) GetPolicies() []*ves_io_schema4.ObjectRefType {
	if m != nil {
		return m.Policies
	}
	return nil
}

func (m *ReplaceSpecType) GetType() ves_io_schema_policy.PolicySetType {
	if m != nil {
		return m.Type
	}
	return ves_io_schema_policy.NETWORK_SECURITY
}

func (m *ReplaceSpecType) GetDefaultAction() ves_io_schema_policy.RuleAction {
	if m != nil {
		return m.DefaultAction
	}
	return ves_io_schema_policy.DENY
}

func (m *ReplaceSpecType) GetDenyInfo() *ves_io_schema_policy.DenyInformation {
	if m != nil {
		return m.DenyInfo
	}
	return nil
}

func (m *ReplaceSpecType) GetScope() ves_io_schema_policy.PolicySetScope {
	if m != nil {
		return m.Scope
	}
	return ves_io_schema_policy.POLICY_SET_SCOPE_NAMESPACE
}

// Get service policy
//
// x-displayName: "Get Service Policy Set"
// Get service_policy_set reads a given object from storage backend for metadata.namespace.
type GetSpecType struct {
	Policies      []*ves_io_schema4.ObjectRefType       `protobuf:"bytes,1,rep,name=policies" json:"policies,omitempty"`
	Type          ves_io_schema_policy.PolicySetType    `protobuf:"varint,2,opt,name=type,proto3,enum=ves.io.schema.policy.PolicySetType" json:"type,omitempty"`
	DefaultAction ves_io_schema_policy.RuleAction       `protobuf:"varint,3,opt,name=default_action,json=defaultAction,proto3,enum=ves.io.schema.policy.RuleAction" json:"default_action,omitempty"`
	DenyInfo      *ves_io_schema_policy.DenyInformation `protobuf:"bytes,4,opt,name=deny_info,json=denyInfo" json:"deny_info,omitempty"`
	Scope         ves_io_schema_policy.PolicySetScope   `protobuf:"varint,6,opt,name=scope,proto3,enum=ves.io.schema.policy.PolicySetScope" json:"scope,omitempty"`
}

func (m *GetSpecType) Reset()                    { *m = GetSpecType{} }
func (*GetSpecType) ProtoMessage()               {}
func (*GetSpecType) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{3} }

func (m *GetSpecType) GetPolicies() []*ves_io_schema4.ObjectRefType {
	if m != nil {
		return m.Policies
	}
	return nil
}

func (m *GetSpecType) GetType() ves_io_schema_policy.PolicySetType {
	if m != nil {
		return m.Type
	}
	return ves_io_schema_policy.NETWORK_SECURITY
}

func (m *GetSpecType) GetDefaultAction() ves_io_schema_policy.RuleAction {
	if m != nil {
		return m.DefaultAction
	}
	return ves_io_schema_policy.DENY
}

func (m *GetSpecType) GetDenyInfo() *ves_io_schema_policy.DenyInformation {
	if m != nil {
		return m.DenyInfo
	}
	return nil
}

func (m *GetSpecType) GetScope() ves_io_schema_policy.PolicySetScope {
	if m != nil {
		return m.Scope
	}
	return ves_io_schema_policy.POLICY_SET_SCOPE_NAMESPACE
}

func init() {
	proto.RegisterType((*GlobalSpecType)(nil), "ves.io.schema.service_policy_set.GlobalSpecType")
	golang_proto.RegisterType((*GlobalSpecType)(nil), "ves.io.schema.service_policy_set.GlobalSpecType")
	proto.RegisterType((*CreateSpecType)(nil), "ves.io.schema.service_policy_set.CreateSpecType")
	golang_proto.RegisterType((*CreateSpecType)(nil), "ves.io.schema.service_policy_set.CreateSpecType")
	proto.RegisterType((*ReplaceSpecType)(nil), "ves.io.schema.service_policy_set.ReplaceSpecType")
	golang_proto.RegisterType((*ReplaceSpecType)(nil), "ves.io.schema.service_policy_set.ReplaceSpecType")
	proto.RegisterType((*GetSpecType)(nil), "ves.io.schema.service_policy_set.GetSpecType")
	golang_proto.RegisterType((*GetSpecType)(nil), "ves.io.schema.service_policy_set.GetSpecType")
}
func (this *GlobalSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType)
	if !ok {
		that2, ok := that.(GlobalSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Policies) != len(that1.Policies) {
		return false
	}
	for i := range this.Policies {
		if !this.Policies[i].Equal(that1.Policies[i]) {
			return false
		}
	}
	if this.Type != that1.Type {
		return false
	}
	if this.DefaultAction != that1.DefaultAction {
		return false
	}
	if !this.DenyInfo.Equal(that1.DenyInfo) {
		return false
	}
	if this.Scope != that1.Scope {
		return false
	}
	return true
}
func (this *CreateSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType)
	if !ok {
		that2, ok := that.(CreateSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Policies) != len(that1.Policies) {
		return false
	}
	for i := range this.Policies {
		if !this.Policies[i].Equal(that1.Policies[i]) {
			return false
		}
	}
	if this.Type != that1.Type {
		return false
	}
	if this.DefaultAction != that1.DefaultAction {
		return false
	}
	if !this.DenyInfo.Equal(that1.DenyInfo) {
		return false
	}
	if this.Scope != that1.Scope {
		return false
	}
	return true
}
func (this *ReplaceSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType)
	if !ok {
		that2, ok := that.(ReplaceSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Policies) != len(that1.Policies) {
		return false
	}
	for i := range this.Policies {
		if !this.Policies[i].Equal(that1.Policies[i]) {
			return false
		}
	}
	if this.Type != that1.Type {
		return false
	}
	if this.DefaultAction != that1.DefaultAction {
		return false
	}
	if !this.DenyInfo.Equal(that1.DenyInfo) {
		return false
	}
	if this.Scope != that1.Scope {
		return false
	}
	return true
}
func (this *GetSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType)
	if !ok {
		that2, ok := that.(GetSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Policies) != len(that1.Policies) {
		return false
	}
	for i := range this.Policies {
		if !this.Policies[i].Equal(that1.Policies[i]) {
			return false
		}
	}
	if this.Type != that1.Type {
		return false
	}
	if this.DefaultAction != that1.DefaultAction {
		return false
	}
	if !this.DenyInfo.Equal(that1.DenyInfo) {
		return false
	}
	if this.Scope != that1.Scope {
		return false
	}
	return true
}
func (this *GlobalSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&service_policy_set.GlobalSpecType{")
	if this.Policies != nil {
		s = append(s, "Policies: "+fmt.Sprintf("%#v", this.Policies)+",\n")
	}
	s = append(s, "Type: "+fmt.Sprintf("%#v", this.Type)+",\n")
	s = append(s, "DefaultAction: "+fmt.Sprintf("%#v", this.DefaultAction)+",\n")
	if this.DenyInfo != nil {
		s = append(s, "DenyInfo: "+fmt.Sprintf("%#v", this.DenyInfo)+",\n")
	}
	s = append(s, "Scope: "+fmt.Sprintf("%#v", this.Scope)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CreateSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&service_policy_set.CreateSpecType{")
	if this.Policies != nil {
		s = append(s, "Policies: "+fmt.Sprintf("%#v", this.Policies)+",\n")
	}
	s = append(s, "Type: "+fmt.Sprintf("%#v", this.Type)+",\n")
	s = append(s, "DefaultAction: "+fmt.Sprintf("%#v", this.DefaultAction)+",\n")
	if this.DenyInfo != nil {
		s = append(s, "DenyInfo: "+fmt.Sprintf("%#v", this.DenyInfo)+",\n")
	}
	s = append(s, "Scope: "+fmt.Sprintf("%#v", this.Scope)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ReplaceSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&service_policy_set.ReplaceSpecType{")
	if this.Policies != nil {
		s = append(s, "Policies: "+fmt.Sprintf("%#v", this.Policies)+",\n")
	}
	s = append(s, "Type: "+fmt.Sprintf("%#v", this.Type)+",\n")
	s = append(s, "DefaultAction: "+fmt.Sprintf("%#v", this.DefaultAction)+",\n")
	if this.DenyInfo != nil {
		s = append(s, "DenyInfo: "+fmt.Sprintf("%#v", this.DenyInfo)+",\n")
	}
	s = append(s, "Scope: "+fmt.Sprintf("%#v", this.Scope)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&service_policy_set.GetSpecType{")
	if this.Policies != nil {
		s = append(s, "Policies: "+fmt.Sprintf("%#v", this.Policies)+",\n")
	}
	s = append(s, "Type: "+fmt.Sprintf("%#v", this.Type)+",\n")
	s = append(s, "DefaultAction: "+fmt.Sprintf("%#v", this.DefaultAction)+",\n")
	if this.DenyInfo != nil {
		s = append(s, "DenyInfo: "+fmt.Sprintf("%#v", this.DenyInfo)+",\n")
	}
	s = append(s, "Scope: "+fmt.Sprintf("%#v", this.Scope)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringTypes(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *GlobalSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GlobalSpecType) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Policies) > 0 {
		for _, msg := range m.Policies {
			dAtA[i] = 0xa
			i++
			i = encodeVarintTypes(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Type != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.Type))
	}
	if m.DefaultAction != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.DefaultAction))
	}
	if m.DenyInfo != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.DenyInfo.Size()))
		n1, err := m.DenyInfo.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.Scope != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.Scope))
	}
	return i, nil
}

func (m *CreateSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateSpecType) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Policies) > 0 {
		for _, msg := range m.Policies {
			dAtA[i] = 0xa
			i++
			i = encodeVarintTypes(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Type != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.Type))
	}
	if m.DefaultAction != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.DefaultAction))
	}
	if m.DenyInfo != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.DenyInfo.Size()))
		n2, err := m.DenyInfo.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if m.Scope != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.Scope))
	}
	return i, nil
}

func (m *ReplaceSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplaceSpecType) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Policies) > 0 {
		for _, msg := range m.Policies {
			dAtA[i] = 0xa
			i++
			i = encodeVarintTypes(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Type != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.Type))
	}
	if m.DefaultAction != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.DefaultAction))
	}
	if m.DenyInfo != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.DenyInfo.Size()))
		n3, err := m.DenyInfo.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	if m.Scope != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.Scope))
	}
	return i, nil
}

func (m *GetSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetSpecType) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Policies) > 0 {
		for _, msg := range m.Policies {
			dAtA[i] = 0xa
			i++
			i = encodeVarintTypes(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Type != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.Type))
	}
	if m.DefaultAction != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.DefaultAction))
	}
	if m.DenyInfo != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.DenyInfo.Size()))
		n4, err := m.DenyInfo.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	if m.Scope != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.Scope))
	}
	return i, nil
}

func encodeVarintTypes(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func NewPopulatedGlobalSpecType(r randyTypes, easy bool) *GlobalSpecType {
	this := &GlobalSpecType{}
	if r.Intn(10) != 0 {
		v1 := r.Intn(5)
		this.Policies = make([]*ves_io_schema4.ObjectRefType, v1)
		for i := 0; i < v1; i++ {
			this.Policies[i] = ves_io_schema4.NewPopulatedObjectRefType(r, easy)
		}
	}
	this.Type = ves_io_schema_policy.PolicySetType([]int32{0, 1, 2, 3}[r.Intn(4)])
	this.DefaultAction = ves_io_schema_policy.RuleAction([]int32{0, 1, 2, 3, 4}[r.Intn(5)])
	if r.Intn(10) != 0 {
		this.DenyInfo = ves_io_schema_policy.NewPopulatedDenyInformation(r, easy)
	}
	this.Scope = ves_io_schema_policy.PolicySetScope([]int32{0, 1}[r.Intn(2)])
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedCreateSpecType(r randyTypes, easy bool) *CreateSpecType {
	this := &CreateSpecType{}
	if r.Intn(10) != 0 {
		v2 := r.Intn(5)
		this.Policies = make([]*ves_io_schema4.ObjectRefType, v2)
		for i := 0; i < v2; i++ {
			this.Policies[i] = ves_io_schema4.NewPopulatedObjectRefType(r, easy)
		}
	}
	this.Type = ves_io_schema_policy.PolicySetType([]int32{0, 1, 2, 3}[r.Intn(4)])
	this.DefaultAction = ves_io_schema_policy.RuleAction([]int32{0, 1, 2, 3, 4}[r.Intn(5)])
	if r.Intn(10) != 0 {
		this.DenyInfo = ves_io_schema_policy.NewPopulatedDenyInformation(r, easy)
	}
	this.Scope = ves_io_schema_policy.PolicySetScope([]int32{0, 1}[r.Intn(2)])
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedReplaceSpecType(r randyTypes, easy bool) *ReplaceSpecType {
	this := &ReplaceSpecType{}
	if r.Intn(10) != 0 {
		v3 := r.Intn(5)
		this.Policies = make([]*ves_io_schema4.ObjectRefType, v3)
		for i := 0; i < v3; i++ {
			this.Policies[i] = ves_io_schema4.NewPopulatedObjectRefType(r, easy)
		}
	}
	this.Type = ves_io_schema_policy.PolicySetType([]int32{0, 1, 2, 3}[r.Intn(4)])
	this.DefaultAction = ves_io_schema_policy.RuleAction([]int32{0, 1, 2, 3, 4}[r.Intn(5)])
	if r.Intn(10) != 0 {
		this.DenyInfo = ves_io_schema_policy.NewPopulatedDenyInformation(r, easy)
	}
	this.Scope = ves_io_schema_policy.PolicySetScope([]int32{0, 1}[r.Intn(2)])
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedGetSpecType(r randyTypes, easy bool) *GetSpecType {
	this := &GetSpecType{}
	if r.Intn(10) != 0 {
		v4 := r.Intn(5)
		this.Policies = make([]*ves_io_schema4.ObjectRefType, v4)
		for i := 0; i < v4; i++ {
			this.Policies[i] = ves_io_schema4.NewPopulatedObjectRefType(r, easy)
		}
	}
	this.Type = ves_io_schema_policy.PolicySetType([]int32{0, 1, 2, 3}[r.Intn(4)])
	this.DefaultAction = ves_io_schema_policy.RuleAction([]int32{0, 1, 2, 3, 4}[r.Intn(5)])
	if r.Intn(10) != 0 {
		this.DenyInfo = ves_io_schema_policy.NewPopulatedDenyInformation(r, easy)
	}
	this.Scope = ves_io_schema_policy.PolicySetScope([]int32{0, 1}[r.Intn(2)])
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

type randyTypes interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneTypes(r randyTypes) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringTypes(r randyTypes) string {
	v5 := r.Intn(100)
	tmps := make([]rune, v5)
	for i := 0; i < v5; i++ {
		tmps[i] = randUTF8RuneTypes(r)
	}
	return string(tmps)
}
func randUnrecognizedTypes(r randyTypes, maxFieldNumber int) (dAtA []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		dAtA = randFieldTypes(dAtA, r, fieldNumber, wire)
	}
	return dAtA
}
func randFieldTypes(dAtA []byte, r randyTypes, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		dAtA = encodeVarintPopulateTypes(dAtA, uint64(key))
		v6 := r.Int63()
		if r.Intn(2) == 0 {
			v6 *= -1
		}
		dAtA = encodeVarintPopulateTypes(dAtA, uint64(v6))
	case 1:
		dAtA = encodeVarintPopulateTypes(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		dAtA = encodeVarintPopulateTypes(dAtA, uint64(key))
		ll := r.Intn(100)
		dAtA = encodeVarintPopulateTypes(dAtA, uint64(ll))
		for j := 0; j < ll; j++ {
			dAtA = append(dAtA, byte(r.Intn(256)))
		}
	default:
		dAtA = encodeVarintPopulateTypes(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return dAtA
}
func encodeVarintPopulateTypes(dAtA []byte, v uint64) []byte {
	for v >= 1<<7 {
		dAtA = append(dAtA, uint8(uint64(v)&0x7f|0x80))
		v >>= 7
	}
	dAtA = append(dAtA, uint8(v))
	return dAtA
}
func (m *GlobalSpecType) Size() (n int) {
	var l int
	_ = l
	if len(m.Policies) > 0 {
		for _, e := range m.Policies {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if m.Type != 0 {
		n += 1 + sovTypes(uint64(m.Type))
	}
	if m.DefaultAction != 0 {
		n += 1 + sovTypes(uint64(m.DefaultAction))
	}
	if m.DenyInfo != nil {
		l = m.DenyInfo.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.Scope != 0 {
		n += 1 + sovTypes(uint64(m.Scope))
	}
	return n
}

func (m *CreateSpecType) Size() (n int) {
	var l int
	_ = l
	if len(m.Policies) > 0 {
		for _, e := range m.Policies {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if m.Type != 0 {
		n += 1 + sovTypes(uint64(m.Type))
	}
	if m.DefaultAction != 0 {
		n += 1 + sovTypes(uint64(m.DefaultAction))
	}
	if m.DenyInfo != nil {
		l = m.DenyInfo.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.Scope != 0 {
		n += 1 + sovTypes(uint64(m.Scope))
	}
	return n
}

func (m *ReplaceSpecType) Size() (n int) {
	var l int
	_ = l
	if len(m.Policies) > 0 {
		for _, e := range m.Policies {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if m.Type != 0 {
		n += 1 + sovTypes(uint64(m.Type))
	}
	if m.DefaultAction != 0 {
		n += 1 + sovTypes(uint64(m.DefaultAction))
	}
	if m.DenyInfo != nil {
		l = m.DenyInfo.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.Scope != 0 {
		n += 1 + sovTypes(uint64(m.Scope))
	}
	return n
}

func (m *GetSpecType) Size() (n int) {
	var l int
	_ = l
	if len(m.Policies) > 0 {
		for _, e := range m.Policies {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if m.Type != 0 {
		n += 1 + sovTypes(uint64(m.Type))
	}
	if m.DefaultAction != 0 {
		n += 1 + sovTypes(uint64(m.DefaultAction))
	}
	if m.DenyInfo != nil {
		l = m.DenyInfo.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.Scope != 0 {
		n += 1 + sovTypes(uint64(m.Scope))
	}
	return n
}

func sovTypes(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozTypes(x uint64) (n int) {
	return sovTypes(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *GlobalSpecType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType{`,
		`Policies:` + strings.Replace(fmt.Sprintf("%v", this.Policies), "ObjectRefType", "ves_io_schema4.ObjectRefType", 1) + `,`,
		`Type:` + fmt.Sprintf("%v", this.Type) + `,`,
		`DefaultAction:` + fmt.Sprintf("%v", this.DefaultAction) + `,`,
		`DenyInfo:` + strings.Replace(fmt.Sprintf("%v", this.DenyInfo), "DenyInformation", "ves_io_schema_policy.DenyInformation", 1) + `,`,
		`Scope:` + fmt.Sprintf("%v", this.Scope) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType{`,
		`Policies:` + strings.Replace(fmt.Sprintf("%v", this.Policies), "ObjectRefType", "ves_io_schema4.ObjectRefType", 1) + `,`,
		`Type:` + fmt.Sprintf("%v", this.Type) + `,`,
		`DefaultAction:` + fmt.Sprintf("%v", this.DefaultAction) + `,`,
		`DenyInfo:` + strings.Replace(fmt.Sprintf("%v", this.DenyInfo), "DenyInformation", "ves_io_schema_policy.DenyInformation", 1) + `,`,
		`Scope:` + fmt.Sprintf("%v", this.Scope) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType{`,
		`Policies:` + strings.Replace(fmt.Sprintf("%v", this.Policies), "ObjectRefType", "ves_io_schema4.ObjectRefType", 1) + `,`,
		`Type:` + fmt.Sprintf("%v", this.Type) + `,`,
		`DefaultAction:` + fmt.Sprintf("%v", this.DefaultAction) + `,`,
		`DenyInfo:` + strings.Replace(fmt.Sprintf("%v", this.DenyInfo), "DenyInformation", "ves_io_schema_policy.DenyInformation", 1) + `,`,
		`Scope:` + fmt.Sprintf("%v", this.Scope) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType{`,
		`Policies:` + strings.Replace(fmt.Sprintf("%v", this.Policies), "ObjectRefType", "ves_io_schema4.ObjectRefType", 1) + `,`,
		`Type:` + fmt.Sprintf("%v", this.Type) + `,`,
		`DefaultAction:` + fmt.Sprintf("%v", this.DefaultAction) + `,`,
		`DenyInfo:` + strings.Replace(fmt.Sprintf("%v", this.DenyInfo), "DenyInformation", "ves_io_schema_policy.DenyInformation", 1) + `,`,
		`Scope:` + fmt.Sprintf("%v", this.Scope) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringTypes(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *GlobalSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GlobalSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GlobalSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Policies", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Policies = append(m.Policies, &ves_io_schema4.ObjectRefType{})
			if err := m.Policies[len(m.Policies)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (ves_io_schema_policy.PolicySetType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultAction", wireType)
			}
			m.DefaultAction = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DefaultAction |= (ves_io_schema_policy.RuleAction(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DenyInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DenyInfo == nil {
				m.DenyInfo = &ves_io_schema_policy.DenyInformation{}
			}
			if err := m.DenyInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Scope", wireType)
			}
			m.Scope = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Scope |= (ves_io_schema_policy.PolicySetScope(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Policies", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Policies = append(m.Policies, &ves_io_schema4.ObjectRefType{})
			if err := m.Policies[len(m.Policies)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (ves_io_schema_policy.PolicySetType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultAction", wireType)
			}
			m.DefaultAction = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DefaultAction |= (ves_io_schema_policy.RuleAction(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DenyInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DenyInfo == nil {
				m.DenyInfo = &ves_io_schema_policy.DenyInformation{}
			}
			if err := m.DenyInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Scope", wireType)
			}
			m.Scope = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Scope |= (ves_io_schema_policy.PolicySetScope(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplaceSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplaceSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplaceSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Policies", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Policies = append(m.Policies, &ves_io_schema4.ObjectRefType{})
			if err := m.Policies[len(m.Policies)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (ves_io_schema_policy.PolicySetType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultAction", wireType)
			}
			m.DefaultAction = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DefaultAction |= (ves_io_schema_policy.RuleAction(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DenyInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DenyInfo == nil {
				m.DenyInfo = &ves_io_schema_policy.DenyInformation{}
			}
			if err := m.DenyInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Scope", wireType)
			}
			m.Scope = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Scope |= (ves_io_schema_policy.PolicySetScope(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Policies", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Policies = append(m.Policies, &ves_io_schema4.ObjectRefType{})
			if err := m.Policies[len(m.Policies)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (ves_io_schema_policy.PolicySetType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultAction", wireType)
			}
			m.DefaultAction = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DefaultAction |= (ves_io_schema_policy.RuleAction(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DenyInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DenyInfo == nil {
				m.DenyInfo = &ves_io_schema_policy.DenyInformation{}
			}
			if err := m.DenyInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Scope", wireType)
			}
			m.Scope = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Scope |= (ves_io_schema_policy.PolicySetScope(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTypes(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthTypes
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipTypes(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthTypes = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTypes   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("ves.io/schema/service_policy_set/types.proto", fileDescriptorTypes) }
func init() {
	golang_proto.RegisterFile("ves.io/schema/service_policy_set/types.proto", fileDescriptorTypes)
}

var fileDescriptorTypes = []byte{
	// 617 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x55, 0x41, 0x6b, 0xd4, 0x4e,
	0x1c, 0xdd, 0x5f, 0xb6, 0xed, 0xbf, 0xff, 0x29, 0xae, 0x35, 0x08, 0xae, 0xdb, 0x32, 0x86, 0x5a,
	0xa5, 0x88, 0x4d, 0xb0, 0x1e, 0x94, 0x1e, 0x44, 0xb7, 0x42, 0x11, 0x05, 0x4b, 0x56, 0x3d, 0x08,
	0xb2, 0x24, 0xd9, 0x5f, 0xd2, 0x68, 0x9a, 0x09, 0xc9, 0x6c, 0x74, 0x0f, 0x05, 0xf1, 0x13, 0x88,
	0x27, 0x3f, 0x82, 0xf8, 0x09, 0xc4, 0x5e, 0x8a, 0x07, 0x11, 0x4f, 0x3d, 0xf6, 0x20, 0xd8, 0x4d,
	0x2f, 0xf5, 0xd6, 0xa3, 0x47, 0xc9, 0x24, 0x5b, 0x37, 0xb5, 0x22, 0x5d, 0xe8, 0xad, 0xa7, 0xcc,
	0xf0, 0xde, 0xef, 0xcd, 0x9b, 0xf7, 0x08, 0x43, 0x2e, 0xc7, 0x18, 0xa9, 0x2e, 0xd3, 0x22, 0x6b,
	0x19, 0x57, 0x0c, 0x2d, 0xc2, 0x30, 0x76, 0x2d, 0x6c, 0x06, 0xcc, 0x73, 0xad, 0x4e, 0x33, 0x42,
	0xae, 0xf1, 0x4e, 0x80, 0x91, 0x1a, 0x84, 0x8c, 0x33, 0x59, 0xc9, 0xd8, 0x6a, 0xc6, 0x56, 0xff,
	0x64, 0xd7, 0x66, 0x1d, 0x97, 0x2f, 0xb7, 0x4d, 0xd5, 0x62, 0x2b, 0x9a, 0xc3, 0x1c, 0xa6, 0x89,
	0x41, 0xb3, 0x6d, 0x8b, 0x9d, 0xd8, 0x88, 0x55, 0x26, 0x58, 0x3b, 0x53, 0x3c, 0xde, 0x47, 0x9e,
	0x03, 0x13, 0x45, 0x80, 0x05, 0xdc, 0x65, 0x7e, 0x6e, 0xa3, 0xa6, 0x14, 0xc1, 0xec, 0xf8, 0x7e,
	0xa3, 0xb5, 0xb3, 0x45, 0x46, 0x3f, 0x34, 0x59, 0x84, 0x62, 0xc3, 0x73, 0x5b, 0x06, 0xc7, 0x83,
	0xa5, 0x63, 0x17, 0x9f, 0x37, 0x0b, 0x87, 0x4f, 0x7d, 0x2e, 0x93, 0xca, 0xa2, 0xc7, 0x4c, 0xc3,
	0x6b, 0x04, 0x68, 0x3d, 0xe8, 0x04, 0x28, 0x3f, 0x24, 0xa3, 0xc2, 0x83, 0x8b, 0x51, 0x15, 0x94,
	0xf2, 0xcc, 0xd8, 0xdc, 0xa4, 0x5a, 0x4c, 0xea, 0xbe, 0xf9, 0x14, 0x2d, 0xae, 0xa3, 0x9d, 0xf2,
	0xeb, 0x13, 0xef, 0x57, 0x2b, 0xc5, 0xec, 0x3e, 0xfe, 0x58, 0x2f, 0x0f, 0xbf, 0x01, 0x69, 0x7c,
	0x5c, 0xdf, 0x93, 0x92, 0x6f, 0x92, 0xa1, 0xd4, 0x78, 0x55, 0x52, 0x60, 0xa6, 0x32, 0x77, 0x7e,
	0x9f, 0x64, 0x36, 0xa8, 0x2e, 0x89, 0x4f, 0x03, 0xb9, 0x50, 0xfe, 0x6f, 0x73, 0x15, 0x76, 0xd6,
	0x00, 0x74, 0x31, 0x29, 0x3f, 0x21, 0x95, 0x16, 0xda, 0x46, 0xdb, 0xe3, 0x4d, 0xc3, 0x4a, 0x2f,
	0x51, 0x2d, 0x0b, 0x2d, 0xe5, 0x60, 0x2d, 0xbd, 0xed, 0xe1, 0x2d, 0xc1, 0xab, 0x9f, 0xce, 0x85,
	0x52, 0x63, 0xa3, 0xaf, 0x60, 0xb8, 0x56, 0x2e, 0x81, 0xa4, 0x9f, 0xc8, 0xd5, 0x32, 0x92, 0x7c,
	0x97, 0xfc, 0xdf, 0x42, 0xbf, 0xd3, 0x74, 0x7d, 0x9b, 0x55, 0x87, 0x14, 0x98, 0x19, 0x9b, 0xbb,
	0x70, 0xb0, 0xf2, 0x6d, 0xf4, 0x3b, 0x77, 0x7c, 0x9b, 0x85, 0x2b, 0x86, 0x90, 0xdf, 0xf3, 0x39,
	0xda, 0xca, 0x11, 0x79, 0x81, 0x0c, 0x47, 0x16, 0x0b, 0xb0, 0x3a, 0x22, 0x2c, 0x4e, 0xff, 0xe3,
	0xba, 0x8d, 0x94, 0xfb, 0x5b, 0x27, 0x9b, 0x9d, 0xbf, 0xf4, 0x69, 0x0d, 0x2e, 0x92, 0x69, 0x72,
	0xee, 0x9e, 0x1b, 0x71, 0x85, 0xd9, 0x4a, 0xea, 0x34, 0x46, 0xa5, 0x91, 0xa5, 0xad, 0x2c, 0xf5,
	0xb2, 0x85, 0x2b, 0x53, 0xdf, 0x25, 0x52, 0x59, 0x08, 0xd1, 0xe0, 0xb8, 0x57, 0xe4, 0xf5, 0xc3,
	0x15, 0xd9, 0xd7, 0xd5, 0xb5, 0x43, 0x77, 0x95, 0x57, 0xb4, 0x38, 0x68, 0x45, 0xfb, 0xcb, 0xa8,
	0x0f, 0x5a, 0x46, 0x5f, 0x07, 0xf3, 0x03, 0x74, 0xd0, 0x8b, 0xfe, 0xd4, 0xd7, 0x1b, 0xfb, 0xfe,
	0x8b, 0xa9, 0x2d, 0x89, 0x9c, 0xd4, 0x31, 0xf0, 0x0c, 0xeb, 0x38, 0xe2, 0x23, 0x8a, 0xf8, 0x9b,
	0x44, 0xc6, 0x16, 0x91, 0x1f, 0xc7, 0x7b, 0x24, 0xf1, 0xd6, 0xdf, 0xc2, 0x46, 0x97, 0x96, 0x36,
	0xbb, 0xb4, 0xb4, 0xdb, 0xa5, 0xf0, 0xb3, 0x4b, 0xe1, 0x65, 0x42, 0xe1, 0x5d, 0x42, 0xe1, 0x43,
	0x42, 0x61, 0x3d, 0xa1, 0xf0, 0x25, 0xa1, 0xb0, 0x91, 0x50, 0xd8, 0x4c, 0x28, 0x6c, 0x25, 0x14,
	0x76, 0x12, 0x5a, 0xda, 0x4d, 0x28, 0xbc, 0xde, 0xa6, 0xa5, 0xf5, 0x6d, 0x0a, 0x8f, 0x1f, 0x39,
	0x2c, 0x78, 0xe6, 0xa8, 0x31, 0xf3, 0x38, 0x86, 0xa1, 0xa1, 0xb6, 0x23, 0x4d, 0x2c, 0x52, 0xf7,
	0xb3, 0x41, 0xc8, 0x62, 0xb7, 0x85, 0xe1, 0x6c, 0x0f, 0xd6, 0x02, 0xd3, 0x61, 0x1a, 0xbe, 0xe0,
	0xbd, 0x07, 0xf9, 0x6f, 0xef, 0xb2, 0x39, 0x22, 0x9e, 0xa3, 0xab, 0xbf, 0x02, 0x00, 0x00, 0xff,
	0xff, 0x61, 0xd3, 0xf5, 0x0c, 0xc2, 0x07, 0x00, 0x00,
}
