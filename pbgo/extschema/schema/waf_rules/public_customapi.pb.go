// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ves.io/schema/waf_rules/public_customapi.proto

package waf_rules

import proto "github.com/gogo/protobuf/proto"
import golang_proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"
import _ "github.com/gogo/googleapis/google/api"
import _ "github.com/gogo/protobuf/types"
import _ "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
import ves_io_schema4 "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
import _ "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
import _ "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/vesenv"

import strings "strings"
import reflect "reflect"

import context "golang.org/x/net/context"
import grpc "google.golang.org/grpc"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// RulesReq
//
// x-displayName: "Rules Request"
// Rules Request
type RulesReq struct {
	// namespace
	//
	// x-displayName: "Namespace"
	// x-example: "blogging-app-namespace-1"
	Namespace string `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
}

func (m *RulesReq) Reset()                    { *m = RulesReq{} }
func (*RulesReq) ProtoMessage()               {}
func (*RulesReq) Descriptor() ([]byte, []int) { return fileDescriptorPublicCustomapi, []int{0} }

func (m *RulesReq) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

// RulesRsp
//
// x-displayName: "Rules Response"
// Rules Response
type RulesRsp struct {
	// rules
	//
	// x-displayName: "Rules"
	// List of well known rules.
	// Include or Exclude list in WAF-Rules object can refer to rules in this list.
	Rules []*Rules `protobuf:"bytes,1,rep,name=rules" json:"rules,omitempty"`
}

func (m *RulesRsp) Reset()                    { *m = RulesRsp{} }
func (*RulesRsp) ProtoMessage()               {}
func (*RulesRsp) Descriptor() ([]byte, []int) { return fileDescriptorPublicCustomapi, []int{1} }

func (m *RulesRsp) GetRules() []*Rules {
	if m != nil {
		return m.Rules
	}
	return nil
}

// WafRulesStatusReq
//
// x-displayName: "WAF Rules Status Request"
// Request to get the detailed configuration defined for a WAF-Rules object identified
// by (Namespace, Name)
type WafRulesStatusReq struct {
	// namespace
	//
	// x-displayName: "Namespace"
	// x-example: "blogging-app-namespace-1"
	// Namespace of the waf rule object
	Namespace string `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// name
	//
	// x-displayName: "Name"
	// x-example: "greatblogs-waf-rules"
	// Name of the waf rule object
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (m *WafRulesStatusReq) Reset()                    { *m = WafRulesStatusReq{} }
func (*WafRulesStatusReq) ProtoMessage()               {}
func (*WafRulesStatusReq) Descriptor() ([]byte, []int) { return fileDescriptorPublicCustomapi, []int{2} }

func (m *WafRulesStatusReq) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *WafRulesStatusReq) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

// WAF Rules Status Response
//
// x-displayName: "WAF Rules Status Response"
// Response contains detailed information about the current configuration for a
// waf-rules object
type WafRulesStatusRsp struct {
	// WAF Rules Status Response
	//
	// x-displayName: "WAF Rules Status Response"
	// Detailed configuration of all rules whether included or excluded for this WAF instance
	WafRulesStatus *WafRulesStatus `protobuf:"bytes,1,opt,name=waf_rules_status,json=wafRulesStatus" json:"waf_rules_status,omitempty"`
}

func (m *WafRulesStatusRsp) Reset()                    { *m = WafRulesStatusRsp{} }
func (*WafRulesStatusRsp) ProtoMessage()               {}
func (*WafRulesStatusRsp) Descriptor() ([]byte, []int) { return fileDescriptorPublicCustomapi, []int{3} }

func (m *WafRulesStatusRsp) GetWafRulesStatus() *WafRulesStatus {
	if m != nil {
		return m.WafRulesStatus
	}
	return nil
}

// WAF Rules Status Response
//
// x-displayName: "WAF Rules Status Response"
// Detailed information about the current configuration for a
// waf-rules object
type WafRulesStatus struct {
	// Name
	//
	// x-displayName: "Name"
	// x-example: "greatblogs-waf-rules"
	// Name of the waf-rules object
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// WAF Mode
	//
	// x-displayName: "Mode"
	// Is the WAF instance configured to be in Blocking or Alert-Only mode
	Mode ves_io_schema4.WafModeType `protobuf:"varint,2,opt,name=mode,proto3,enum=ves.io.schema.WafModeType" json:"mode,omitempty"`
	// anomaly_score_threshold
	//
	// x-displayName: "Anomaly Score Threshold"
	// x-example: "4"
	// When A WAF rule hits on inspection of request/response, it causes that http transaction's
	// anomaly score to go up by an amount determined by the rule. Anomaly Score Threshold
	// is used to set the maximum value of the per transaction anomaly score beyond which
	// WAF will alert or block the transaction depending on WAF mode.
	AnomalyScoreThreshold uint32 `protobuf:"varint,3,opt,name=anomaly_score_threshold,json=anomalyScoreThreshold,proto3" json:"anomaly_score_threshold,omitempty"`
	// paranoia_level
	//
	// x-displayName: "Paranoia Level"
	// x-example: "2"
	// Paranoia level is used to tune the sensitivity at which WAF is supposed to alert/block.
	// High paranoia level means that WAF will alert/block requests that look even slightly suspicious.
	// Low paranoia level means that WAF will alert/block only those requests that highly suspicious.
	ParanoiaLevel uint32 `protobuf:"varint,4,opt,name=paranoia_level,json=paranoiaLevel,proto3" json:"paranoia_level,omitempty"`
	// rules
	//
	// x-displayName: "WAF Rules"
	// List of all rules including information about whether the rule is included or excluded
	Rules []*Rules `protobuf:"bytes,5,rep,name=rules" json:"rules,omitempty"`
}

func (m *WafRulesStatus) Reset()                    { *m = WafRulesStatus{} }
func (*WafRulesStatus) ProtoMessage()               {}
func (*WafRulesStatus) Descriptor() ([]byte, []int) { return fileDescriptorPublicCustomapi, []int{4} }

func (m *WafRulesStatus) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *WafRulesStatus) GetMode() ves_io_schema4.WafModeType {
	if m != nil {
		return m.Mode
	}
	return ves_io_schema4.BLOCK
}

func (m *WafRulesStatus) GetAnomalyScoreThreshold() uint32 {
	if m != nil {
		return m.AnomalyScoreThreshold
	}
	return 0
}

func (m *WafRulesStatus) GetParanoiaLevel() uint32 {
	if m != nil {
		return m.ParanoiaLevel
	}
	return 0
}

func (m *WafRulesStatus) GetRules() []*Rules {
	if m != nil {
		return m.Rules
	}
	return nil
}

// Virtual Host WAF Rules Status Request
//
// x-displayName: "Virtual Host WAF Rules Status Request"
// Request to get the detailed WAF configuration defined for all waf instances for a given virtual_host
// object identified by (Namespace, Name)
type VirtualHostWafRulesStatusReq struct {
	// Namespace
	//
	// x-displayName: "Namespace"
	// x-example: "blogging-app-namespace-1"
	// Namespace of the virtual host
	Namespace string `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// Name
	//
	// x-displayName: "Virtual Host Name"
	// x-example: "greatblogs-vhost"
	// Name of the virtual host for which waf_rules status is requested
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (m *VirtualHostWafRulesStatusReq) Reset()      { *m = VirtualHostWafRulesStatusReq{} }
func (*VirtualHostWafRulesStatusReq) ProtoMessage() {}
func (*VirtualHostWafRulesStatusReq) Descriptor() ([]byte, []int) {
	return fileDescriptorPublicCustomapi, []int{5}
}

func (m *VirtualHostWafRulesStatusReq) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *VirtualHostWafRulesStatusReq) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

// Virtual Host WAF Rules Status Response
//
// x-displayName: "Virtual Host WAF Rules Status Response"
// Response is a list of detailed rule configurations currently enabled for the given virtual_host.
type VirtualHostWafRulesStatusRsp struct {
	// Virtual Host WAF Rules Status Response
	//
	// x-displayName: "Virtual Host WAF Rules Status Response"
	// Detailed configuration of all rules whether included or excluded for all WAF instances under this virtual host
	WafRulesStatus []*WafRulesStatus `protobuf:"bytes,1,rep,name=waf_rules_status,json=wafRulesStatus" json:"waf_rules_status,omitempty"`
}

func (m *VirtualHostWafRulesStatusRsp) Reset()      { *m = VirtualHostWafRulesStatusRsp{} }
func (*VirtualHostWafRulesStatusRsp) ProtoMessage() {}
func (*VirtualHostWafRulesStatusRsp) Descriptor() ([]byte, []int) {
	return fileDescriptorPublicCustomapi, []int{6}
}

func (m *VirtualHostWafRulesStatusRsp) GetWafRulesStatus() []*WafRulesStatus {
	if m != nil {
		return m.WafRulesStatus
	}
	return nil
}

func init() {
	proto.RegisterType((*RulesReq)(nil), "ves.io.schema.waf_rules.RulesReq")
	golang_proto.RegisterType((*RulesReq)(nil), "ves.io.schema.waf_rules.RulesReq")
	proto.RegisterType((*RulesRsp)(nil), "ves.io.schema.waf_rules.RulesRsp")
	golang_proto.RegisterType((*RulesRsp)(nil), "ves.io.schema.waf_rules.RulesRsp")
	proto.RegisterType((*WafRulesStatusReq)(nil), "ves.io.schema.waf_rules.WafRulesStatusReq")
	golang_proto.RegisterType((*WafRulesStatusReq)(nil), "ves.io.schema.waf_rules.WafRulesStatusReq")
	proto.RegisterType((*WafRulesStatusRsp)(nil), "ves.io.schema.waf_rules.WafRulesStatusRsp")
	golang_proto.RegisterType((*WafRulesStatusRsp)(nil), "ves.io.schema.waf_rules.WafRulesStatusRsp")
	proto.RegisterType((*WafRulesStatus)(nil), "ves.io.schema.waf_rules.WafRulesStatus")
	golang_proto.RegisterType((*WafRulesStatus)(nil), "ves.io.schema.waf_rules.WafRulesStatus")
	proto.RegisterType((*VirtualHostWafRulesStatusReq)(nil), "ves.io.schema.waf_rules.VirtualHostWafRulesStatusReq")
	golang_proto.RegisterType((*VirtualHostWafRulesStatusReq)(nil), "ves.io.schema.waf_rules.VirtualHostWafRulesStatusReq")
	proto.RegisterType((*VirtualHostWafRulesStatusRsp)(nil), "ves.io.schema.waf_rules.VirtualHostWafRulesStatusRsp")
	golang_proto.RegisterType((*VirtualHostWafRulesStatusRsp)(nil), "ves.io.schema.waf_rules.VirtualHostWafRulesStatusRsp")
}
func (this *RulesReq) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RulesReq)
	if !ok {
		that2, ok := that.(RulesReq)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Namespace != that1.Namespace {
		return false
	}
	return true
}
func (this *RulesRsp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RulesRsp)
	if !ok {
		that2, ok := that.(RulesRsp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Rules) != len(that1.Rules) {
		return false
	}
	for i := range this.Rules {
		if !this.Rules[i].Equal(that1.Rules[i]) {
			return false
		}
	}
	return true
}
func (this *WafRulesStatusReq) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*WafRulesStatusReq)
	if !ok {
		that2, ok := that.(WafRulesStatusReq)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Namespace != that1.Namespace {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	return true
}
func (this *WafRulesStatusRsp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*WafRulesStatusRsp)
	if !ok {
		that2, ok := that.(WafRulesStatusRsp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.WafRulesStatus.Equal(that1.WafRulesStatus) {
		return false
	}
	return true
}
func (this *WafRulesStatus) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*WafRulesStatus)
	if !ok {
		that2, ok := that.(WafRulesStatus)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Mode != that1.Mode {
		return false
	}
	if this.AnomalyScoreThreshold != that1.AnomalyScoreThreshold {
		return false
	}
	if this.ParanoiaLevel != that1.ParanoiaLevel {
		return false
	}
	if len(this.Rules) != len(that1.Rules) {
		return false
	}
	for i := range this.Rules {
		if !this.Rules[i].Equal(that1.Rules[i]) {
			return false
		}
	}
	return true
}
func (this *VirtualHostWafRulesStatusReq) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*VirtualHostWafRulesStatusReq)
	if !ok {
		that2, ok := that.(VirtualHostWafRulesStatusReq)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Namespace != that1.Namespace {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	return true
}
func (this *VirtualHostWafRulesStatusRsp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*VirtualHostWafRulesStatusRsp)
	if !ok {
		that2, ok := that.(VirtualHostWafRulesStatusRsp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.WafRulesStatus) != len(that1.WafRulesStatus) {
		return false
	}
	for i := range this.WafRulesStatus {
		if !this.WafRulesStatus[i].Equal(that1.WafRulesStatus[i]) {
			return false
		}
	}
	return true
}
func (this *RulesReq) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&waf_rules.RulesReq{")
	s = append(s, "Namespace: "+fmt.Sprintf("%#v", this.Namespace)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RulesRsp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&waf_rules.RulesRsp{")
	if this.Rules != nil {
		s = append(s, "Rules: "+fmt.Sprintf("%#v", this.Rules)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *WafRulesStatusReq) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&waf_rules.WafRulesStatusReq{")
	s = append(s, "Namespace: "+fmt.Sprintf("%#v", this.Namespace)+",\n")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *WafRulesStatusRsp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&waf_rules.WafRulesStatusRsp{")
	if this.WafRulesStatus != nil {
		s = append(s, "WafRulesStatus: "+fmt.Sprintf("%#v", this.WafRulesStatus)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *WafRulesStatus) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&waf_rules.WafRulesStatus{")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "Mode: "+fmt.Sprintf("%#v", this.Mode)+",\n")
	s = append(s, "AnomalyScoreThreshold: "+fmt.Sprintf("%#v", this.AnomalyScoreThreshold)+",\n")
	s = append(s, "ParanoiaLevel: "+fmt.Sprintf("%#v", this.ParanoiaLevel)+",\n")
	if this.Rules != nil {
		s = append(s, "Rules: "+fmt.Sprintf("%#v", this.Rules)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *VirtualHostWafRulesStatusReq) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&waf_rules.VirtualHostWafRulesStatusReq{")
	s = append(s, "Namespace: "+fmt.Sprintf("%#v", this.Namespace)+",\n")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *VirtualHostWafRulesStatusRsp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&waf_rules.VirtualHostWafRulesStatusRsp{")
	if this.WafRulesStatus != nil {
		s = append(s, "WafRulesStatus: "+fmt.Sprintf("%#v", this.WafRulesStatus)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringPublicCustomapi(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for CustomAPI service

type CustomAPIClient interface {
	// Rules
	//
	// x-displayName: "Rules"
	// Rules API is used to get a list of all rules available in the rules library.
	// This exhaustive list is used as reference while creating the include or exclude list
	// for a waf-rules object.   option (ves.io.schema.object_type) = "ves.io.schema.waf_rules.Object";
	Rules(ctx context.Context, in *RulesReq, opts ...grpc.CallOption) (*RulesRsp, error)
	// WAF-Rules Status
	//
	// x-displayName: "WAF-Rules Status"
	// WAF-Rules Status API is used to get information about the exact configuration, including
	// a list of rules that are currently enabled for a given WAF-Rules object instance
	// identified by (Namespace, Name).
	WafRulesStatus(ctx context.Context, in *WafRulesStatusReq, opts ...grpc.CallOption) (*WafRulesStatusRsp, error)
	// Virtual Host WAF-Rules Status
	//
	// x-displayName: "Virtual Host WAF-Rules Status"
	// Virtual Host WAF-Rules Status API is used to get information about the exact configuration, including
	// a list of rules that are currently enabled for all waf instances configured for a given virtual_host's
	// routes and the instance given WAF-Rules object instance
	// identified by (Namespace, Name).
	VirtualHostWafRulesStatus(ctx context.Context, in *VirtualHostWafRulesStatusReq, opts ...grpc.CallOption) (*VirtualHostWafRulesStatusRsp, error)
}

type customAPIClient struct {
	cc *grpc.ClientConn
}

func NewCustomAPIClient(cc *grpc.ClientConn) CustomAPIClient {
	return &customAPIClient{cc}
}

func (c *customAPIClient) Rules(ctx context.Context, in *RulesReq, opts ...grpc.CallOption) (*RulesRsp, error) {
	out := new(RulesRsp)
	err := grpc.Invoke(ctx, "/ves.io.schema.waf_rules.CustomAPI/Rules", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customAPIClient) WafRulesStatus(ctx context.Context, in *WafRulesStatusReq, opts ...grpc.CallOption) (*WafRulesStatusRsp, error) {
	out := new(WafRulesStatusRsp)
	err := grpc.Invoke(ctx, "/ves.io.schema.waf_rules.CustomAPI/WafRulesStatus", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customAPIClient) VirtualHostWafRulesStatus(ctx context.Context, in *VirtualHostWafRulesStatusReq, opts ...grpc.CallOption) (*VirtualHostWafRulesStatusRsp, error) {
	out := new(VirtualHostWafRulesStatusRsp)
	err := grpc.Invoke(ctx, "/ves.io.schema.waf_rules.CustomAPI/VirtualHostWafRulesStatus", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for CustomAPI service

type CustomAPIServer interface {
	// Rules
	//
	// x-displayName: "Rules"
	// Rules API is used to get a list of all rules available in the rules library.
	// This exhaustive list is used as reference while creating the include or exclude list
	// for a waf-rules object.   option (ves.io.schema.object_type) = "ves.io.schema.waf_rules.Object";
	Rules(context.Context, *RulesReq) (*RulesRsp, error)
	// WAF-Rules Status
	//
	// x-displayName: "WAF-Rules Status"
	// WAF-Rules Status API is used to get information about the exact configuration, including
	// a list of rules that are currently enabled for a given WAF-Rules object instance
	// identified by (Namespace, Name).
	WafRulesStatus(context.Context, *WafRulesStatusReq) (*WafRulesStatusRsp, error)
	// Virtual Host WAF-Rules Status
	//
	// x-displayName: "Virtual Host WAF-Rules Status"
	// Virtual Host WAF-Rules Status API is used to get information about the exact configuration, including
	// a list of rules that are currently enabled for all waf instances configured for a given virtual_host's
	// routes and the instance given WAF-Rules object instance
	// identified by (Namespace, Name).
	VirtualHostWafRulesStatus(context.Context, *VirtualHostWafRulesStatusReq) (*VirtualHostWafRulesStatusRsp, error)
}

func RegisterCustomAPIServer(s *grpc.Server, srv CustomAPIServer) {
	s.RegisterService(&_CustomAPI_serviceDesc, srv)
}

func _CustomAPI_Rules_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RulesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomAPIServer).Rules(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ves.io.schema.waf_rules.CustomAPI/Rules",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomAPIServer).Rules(ctx, req.(*RulesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomAPI_WafRulesStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WafRulesStatusReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomAPIServer).WafRulesStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ves.io.schema.waf_rules.CustomAPI/WafRulesStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomAPIServer).WafRulesStatus(ctx, req.(*WafRulesStatusReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomAPI_VirtualHostWafRulesStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VirtualHostWafRulesStatusReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomAPIServer).VirtualHostWafRulesStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ves.io.schema.waf_rules.CustomAPI/VirtualHostWafRulesStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomAPIServer).VirtualHostWafRulesStatus(ctx, req.(*VirtualHostWafRulesStatusReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _CustomAPI_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ves.io.schema.waf_rules.CustomAPI",
	HandlerType: (*CustomAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Rules",
			Handler:    _CustomAPI_Rules_Handler,
		},
		{
			MethodName: "WafRulesStatus",
			Handler:    _CustomAPI_WafRulesStatus_Handler,
		},
		{
			MethodName: "VirtualHostWafRulesStatus",
			Handler:    _CustomAPI_VirtualHostWafRulesStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ves.io/schema/waf_rules/public_customapi.proto",
}

func (m *RulesReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RulesReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Namespace) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPublicCustomapi(dAtA, i, uint64(len(m.Namespace)))
		i += copy(dAtA[i:], m.Namespace)
	}
	return i, nil
}

func (m *RulesRsp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RulesRsp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Rules) > 0 {
		for _, msg := range m.Rules {
			dAtA[i] = 0xa
			i++
			i = encodeVarintPublicCustomapi(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *WafRulesStatusReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WafRulesStatusReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Namespace) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPublicCustomapi(dAtA, i, uint64(len(m.Namespace)))
		i += copy(dAtA[i:], m.Namespace)
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintPublicCustomapi(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	return i, nil
}

func (m *WafRulesStatusRsp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WafRulesStatusRsp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.WafRulesStatus != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPublicCustomapi(dAtA, i, uint64(m.WafRulesStatus.Size()))
		n1, err := m.WafRulesStatus.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	return i, nil
}

func (m *WafRulesStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WafRulesStatus) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPublicCustomapi(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if m.Mode != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPublicCustomapi(dAtA, i, uint64(m.Mode))
	}
	if m.AnomalyScoreThreshold != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintPublicCustomapi(dAtA, i, uint64(m.AnomalyScoreThreshold))
	}
	if m.ParanoiaLevel != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintPublicCustomapi(dAtA, i, uint64(m.ParanoiaLevel))
	}
	if len(m.Rules) > 0 {
		for _, msg := range m.Rules {
			dAtA[i] = 0x2a
			i++
			i = encodeVarintPublicCustomapi(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *VirtualHostWafRulesStatusReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VirtualHostWafRulesStatusReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Namespace) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPublicCustomapi(dAtA, i, uint64(len(m.Namespace)))
		i += copy(dAtA[i:], m.Namespace)
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintPublicCustomapi(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	return i, nil
}

func (m *VirtualHostWafRulesStatusRsp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VirtualHostWafRulesStatusRsp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.WafRulesStatus) > 0 {
		for _, msg := range m.WafRulesStatus {
			dAtA[i] = 0xa
			i++
			i = encodeVarintPublicCustomapi(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func encodeVarintPublicCustomapi(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *RulesReq) Size() (n int) {
	var l int
	_ = l
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	return n
}

func (m *RulesRsp) Size() (n int) {
	var l int
	_ = l
	if len(m.Rules) > 0 {
		for _, e := range m.Rules {
			l = e.Size()
			n += 1 + l + sovPublicCustomapi(uint64(l))
		}
	}
	return n
}

func (m *WafRulesStatusReq) Size() (n int) {
	var l int
	_ = l
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	return n
}

func (m *WafRulesStatusRsp) Size() (n int) {
	var l int
	_ = l
	if m.WafRulesStatus != nil {
		l = m.WafRulesStatus.Size()
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	return n
}

func (m *WafRulesStatus) Size() (n int) {
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	if m.Mode != 0 {
		n += 1 + sovPublicCustomapi(uint64(m.Mode))
	}
	if m.AnomalyScoreThreshold != 0 {
		n += 1 + sovPublicCustomapi(uint64(m.AnomalyScoreThreshold))
	}
	if m.ParanoiaLevel != 0 {
		n += 1 + sovPublicCustomapi(uint64(m.ParanoiaLevel))
	}
	if len(m.Rules) > 0 {
		for _, e := range m.Rules {
			l = e.Size()
			n += 1 + l + sovPublicCustomapi(uint64(l))
		}
	}
	return n
}

func (m *VirtualHostWafRulesStatusReq) Size() (n int) {
	var l int
	_ = l
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	return n
}

func (m *VirtualHostWafRulesStatusRsp) Size() (n int) {
	var l int
	_ = l
	if len(m.WafRulesStatus) > 0 {
		for _, e := range m.WafRulesStatus {
			l = e.Size()
			n += 1 + l + sovPublicCustomapi(uint64(l))
		}
	}
	return n
}

func sovPublicCustomapi(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozPublicCustomapi(x uint64) (n int) {
	return sovPublicCustomapi(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *RulesReq) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RulesReq{`,
		`Namespace:` + fmt.Sprintf("%v", this.Namespace) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RulesRsp) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RulesRsp{`,
		`Rules:` + strings.Replace(fmt.Sprintf("%v", this.Rules), "Rules", "Rules", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *WafRulesStatusReq) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&WafRulesStatusReq{`,
		`Namespace:` + fmt.Sprintf("%v", this.Namespace) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`}`,
	}, "")
	return s
}
func (this *WafRulesStatusRsp) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&WafRulesStatusRsp{`,
		`WafRulesStatus:` + strings.Replace(fmt.Sprintf("%v", this.WafRulesStatus), "WafRulesStatus", "WafRulesStatus", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *WafRulesStatus) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&WafRulesStatus{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Mode:` + fmt.Sprintf("%v", this.Mode) + `,`,
		`AnomalyScoreThreshold:` + fmt.Sprintf("%v", this.AnomalyScoreThreshold) + `,`,
		`ParanoiaLevel:` + fmt.Sprintf("%v", this.ParanoiaLevel) + `,`,
		`Rules:` + strings.Replace(fmt.Sprintf("%v", this.Rules), "Rules", "Rules", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *VirtualHostWafRulesStatusReq) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&VirtualHostWafRulesStatusReq{`,
		`Namespace:` + fmt.Sprintf("%v", this.Namespace) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`}`,
	}, "")
	return s
}
func (this *VirtualHostWafRulesStatusRsp) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&VirtualHostWafRulesStatusRsp{`,
		`WafRulesStatus:` + strings.Replace(fmt.Sprintf("%v", this.WafRulesStatus), "WafRulesStatus", "WafRulesStatus", 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringPublicCustomapi(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *RulesReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCustomapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RulesReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RulesReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCustomapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RulesRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCustomapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RulesRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RulesRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rules", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Rules = append(m.Rules, &Rules{})
			if err := m.Rules[len(m.Rules)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCustomapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WafRulesStatusReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCustomapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WafRulesStatusReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WafRulesStatusReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCustomapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WafRulesStatusRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCustomapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WafRulesStatusRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WafRulesStatusRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WafRulesStatus", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.WafRulesStatus == nil {
				m.WafRulesStatus = &WafRulesStatus{}
			}
			if err := m.WafRulesStatus.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCustomapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WafRulesStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCustomapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WafRulesStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WafRulesStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mode", wireType)
			}
			m.Mode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mode |= (ves_io_schema4.WafModeType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AnomalyScoreThreshold", wireType)
			}
			m.AnomalyScoreThreshold = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AnomalyScoreThreshold |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParanoiaLevel", wireType)
			}
			m.ParanoiaLevel = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ParanoiaLevel |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rules", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Rules = append(m.Rules, &Rules{})
			if err := m.Rules[len(m.Rules)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCustomapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VirtualHostWafRulesStatusReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCustomapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VirtualHostWafRulesStatusReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VirtualHostWafRulesStatusReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCustomapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VirtualHostWafRulesStatusRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCustomapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VirtualHostWafRulesStatusRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VirtualHostWafRulesStatusRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WafRulesStatus", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WafRulesStatus = append(m.WafRulesStatus, &WafRulesStatus{})
			if err := m.WafRulesStatus[len(m.WafRulesStatus)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCustomapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPublicCustomapi(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPublicCustomapi
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthPublicCustomapi
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowPublicCustomapi
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipPublicCustomapi(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthPublicCustomapi = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPublicCustomapi   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("ves.io/schema/waf_rules/public_customapi.proto", fileDescriptorPublicCustomapi)
}
func init() {
	golang_proto.RegisterFile("ves.io/schema/waf_rules/public_customapi.proto", fileDescriptorPublicCustomapi)
}

var fileDescriptorPublicCustomapi = []byte{
	// 721 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x94, 0x4f, 0x6b, 0x13, 0x41,
	0x18, 0xc6, 0x33, 0x49, 0x2a, 0x66, 0x4a, 0x43, 0x1d, 0x28, 0xdd, 0xc6, 0xb0, 0xd4, 0x55, 0x30,
	0x14, 0xb2, 0x5b, 0xa2, 0x16, 0x8f, 0xda, 0x52, 0x50, 0xb0, 0x50, 0xd3, 0x62, 0x41, 0x0f, 0x61,
	0x92, 0x4c, 0x36, 0xab, 0xbb, 0x99, 0xc9, 0xce, 0xec, 0xb6, 0x41, 0x8a, 0xd2, 0x4f, 0x20, 0xf8,
	0x0d, 0x3c, 0xf9, 0x11, 0x44, 0x2f, 0xbd, 0x88, 0x3d, 0x49, 0xc1, 0x8b, 0x47, 0xbb, 0xf5, 0xa0,
	0xb7, 0x82, 0x9e, 0x3c, 0x49, 0x66, 0x93, 0xb4, 0x49, 0xd9, 0x26, 0xfe, 0xb9, 0x84, 0x99, 0xf9,
	0x3d, 0xf3, 0xce, 0x33, 0xf3, 0x6c, 0x5e, 0xa8, 0xfb, 0x84, 0xeb, 0x16, 0x35, 0x78, 0xa5, 0x4e,
	0x1c, 0x6c, 0x6c, 0xe2, 0x5a, 0xc9, 0xf5, 0x6c, 0xc2, 0x0d, 0xe6, 0x95, 0x6d, 0xab, 0x52, 0xaa,
	0x78, 0x5c, 0x50, 0x07, 0x33, 0x4b, 0x67, 0x2e, 0x15, 0x14, 0x4d, 0x87, 0x7a, 0x3d, 0xd4, 0xeb,
	0x3d, 0x7d, 0x26, 0x6f, 0x5a, 0xa2, 0xee, 0x95, 0xf5, 0x0a, 0x75, 0x0c, 0x93, 0x9a, 0xd4, 0x90,
	0xfa, 0xb2, 0x57, 0x93, 0x33, 0x39, 0x91, 0xa3, 0xb0, 0x4e, 0x26, 0x6b, 0x52, 0x6a, 0xda, 0xc4,
	0xc0, 0xcc, 0x32, 0x70, 0xa3, 0x41, 0x05, 0x16, 0x16, 0x6d, 0xf0, 0x0e, 0xbd, 0xd8, 0xa1, 0xbd,
	0x1a, 0xc4, 0x61, 0xa2, 0xd5, 0x85, 0xfd, 0x96, 0x29, 0x3b, 0xb9, 0x73, 0xa6, 0x1f, 0x8a, 0x16,
	0x23, 0x5d, 0x94, 0xed, 0x47, 0x3e, 0xb6, 0xad, 0x2a, 0x16, 0xa4, 0x43, 0xb5, 0x01, 0x4a, 0x38,
	0x69, 0xf8, 0x03, 0xc5, 0xaf, 0x44, 0x3d, 0x16, 0x2d, 0x3f, 0x26, 0x15, 0xd1, 0x51, 0x5d, 0x8e,
	0x52, 0x9d, 0x30, 0xa3, 0xe5, 0xe0, 0xf9, 0x62, 0x7b, 0xb1, 0x48, 0x9a, 0x28, 0x0b, 0x53, 0x0d,
	0xec, 0x10, 0xce, 0x70, 0x85, 0x28, 0x60, 0x16, 0xe4, 0x52, 0xc5, 0xe3, 0x05, 0xed, 0x56, 0x57,
	0xc9, 0x19, 0xba, 0x0e, 0xc7, 0x64, 0x29, 0x05, 0xcc, 0x26, 0x72, 0xe3, 0x05, 0x55, 0x8f, 0x48,
	0x43, 0x0f, 0x77, 0x84, 0x62, 0x6d, 0x19, 0x5e, 0xd8, 0xc0, 0x35, 0xb9, 0xb4, 0x26, 0xb0, 0xf0,
	0x86, 0x1f, 0x8a, 0x10, 0x4c, 0xb6, 0x27, 0x4a, 0x5c, 0x02, 0x39, 0xd6, 0x6a, 0xa7, 0xca, 0x70,
	0x86, 0xee, 0xc3, 0xc9, 0xde, 0xa9, 0x25, 0x2e, 0x97, 0x65, 0xb5, 0xf1, 0xc2, 0xd5, 0x48, 0x73,
	0x03, 0x55, 0xd2, 0x9b, 0x7d, 0x73, 0xed, 0x27, 0x80, 0xe9, 0x7e, 0x49, 0xcf, 0x0e, 0x38, 0xb6,
	0x83, 0x74, 0x98, 0x74, 0x68, 0x35, 0xb4, 0x98, 0x2e, 0x64, 0x06, 0x4e, 0xdb, 0xc0, 0xb5, 0x15,
	0x5a, 0x25, 0xeb, 0x2d, 0x46, 0x8a, 0x52, 0x87, 0x16, 0xe0, 0x34, 0x6e, 0x50, 0x07, 0xdb, 0xad,
	0x12, 0xaf, 0x50, 0x97, 0x94, 0x44, 0xdd, 0x25, 0xbc, 0x4e, 0xed, 0xaa, 0x92, 0x98, 0x05, 0xb9,
	0x89, 0xe2, 0x54, 0x07, 0xaf, 0xb5, 0xe9, 0x7a, 0x17, 0xa2, 0x79, 0x98, 0x66, 0xd8, 0xc5, 0x0d,
	0x6a, 0xe1, 0x92, 0x4d, 0x7c, 0x62, 0x2b, 0xc9, 0xb6, 0x7c, 0x31, 0xf5, 0xf6, 0xfb, 0x6e, 0x22,
	0x39, 0x17, 0x57, 0x92, 0xc5, 0x89, 0xae, 0xe0, 0x5e, 0x9b, 0x1f, 0xa7, 0x34, 0xf6, 0x27, 0x29,
	0xad, 0xc2, 0xec, 0x03, 0xcb, 0x15, 0x1e, 0xb6, 0xef, 0x50, 0x2e, 0xfe, 0x47, 0x60, 0xcd, 0xb3,
	0x2a, 0x46, 0x66, 0x97, 0xf8, 0x87, 0xec, 0x0a, 0xbf, 0x92, 0x30, 0xb5, 0x24, 0x5b, 0xc6, 0xed,
	0xd5, 0xbb, 0xe8, 0x15, 0x80, 0x63, 0x92, 0xa2, 0x4b, 0x43, 0xde, 0x80, 0x34, 0x33, 0xc3, 0x24,
	0x9c, 0x69, 0x6b, 0x7b, 0x6f, 0xe2, 0x20, 0xf8, 0xa0, 0x4c, 0xf9, 0x84, 0xe7, 0x2d, 0x9a, 0x67,
	0x2e, 0xdd, 0x6a, 0xe5, 0x37, 0x71, 0x2d, 0xef, 0x12, 0x5c, 0xdd, 0xf9, 0xf4, 0xf5, 0x65, 0x7c,
	0x1e, 0xe9, 0x9d, 0xd6, 0x65, 0xf4, 0x1e, 0x87, 0x1b, 0x4f, 0x7b, 0xe3, 0xed, 0x13, 0xff, 0x47,
	0xf9, 0x8b, 0xde, 0x9f, 0xfe, 0xdc, 0xe6, 0x46, 0xbd, 0x3e, 0x69, 0x66, 0x46, 0xd6, 0x72, 0xa6,
	0x3d, 0x1a, 0xee, 0xff, 0x26, 0x5a, 0x18, 0xd9, 0x7f, 0x18, 0x59, 0x08, 0xb7, 0xd1, 0x0f, 0x00,
	0x67, 0x22, 0xe3, 0x46, 0x37, 0x22, 0x6d, 0x9e, 0xf5, 0xd1, 0x65, 0xfe, 0x66, 0x1b, 0x67, 0x5a,
	0x7d, 0xf8, 0x45, 0x97, 0xd1, 0xd2, 0xc8, 0x17, 0xf5, 0xc3, 0xb3, 0x4a, 0x75, 0xca, 0x45, 0xff,
	0xad, 0x33, 0x70, 0xf7, 0x1d, 0x48, 0xec, 0x7c, 0x54, 0xe2, 0x93, 0x60, 0xf1, 0xd9, 0xfe, 0x81,
	0x1a, 0xfb, 0x7c, 0xa0, 0xc6, 0x8e, 0x0e, 0x54, 0xf0, 0x3c, 0x50, 0xc1, 0xeb, 0x40, 0x05, 0x7b,
	0x81, 0x0a, 0xf6, 0x03, 0x15, 0x7c, 0x09, 0x54, 0xf0, 0x2d, 0x50, 0x63, 0x47, 0x81, 0x0a, 0x5e,
	0x1c, 0xaa, 0xb1, 0xdd, 0x43, 0x15, 0x3c, 0x5c, 0x31, 0x29, 0x7b, 0x62, 0xea, 0x3e, 0xb5, 0x05,
	0x71, 0x5d, 0xac, 0x7b, 0xdc, 0x90, 0x83, 0x1a, 0x75, 0x9d, 0xb6, 0x69, 0xdf, 0xaa, 0x12, 0x37,
	0xdf, 0xc5, 0x06, 0x2b, 0x9b, 0xd4, 0x20, 0x5b, 0xa2, 0xd3, 0xd9, 0x07, 0x1b, 0x7c, 0xf9, 0x9c,
	0xec, 0xed, 0xd7, 0x7e, 0x07, 0x00, 0x00, 0xff, 0xff, 0xea, 0x05, 0xee, 0xe0, 0x55, 0x07, 0x00,
	0x00,
}
