// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ves.io/schema/options.proto

package schema

import (
	fmt "fmt"

	proto "github.com/gogo/protobuf/proto"

	math "math"

	_ "github.com/gogo/protobuf/gogoproto"

	google_protobuf "github.com/golang/protobuf/protoc-gen-go/descriptor"

	strconv "strconv"

	strings "strings"

	reflect "reflect"

	binary "encoding/binary"

	io "io"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// ReferenceType
//
// x-displayName: "Reference Type"
// MessageOptions related messages
type ReferenceType int32

const (
	// x-displayName "displayname"
	// This is the reference as defined in schema and stored in db
	FORWARD_REF ReferenceType = 0
	// x-displayName "displayname"
	// This is a runtime maintained mirror side of Forward Reference
	BACK_REF ReferenceType = 1
)

var ReferenceType_name = map[int32]string{
	0: "FORWARD_REF",
	1: "BACK_REF",
}
var ReferenceType_value = map[string]int32{
	"FORWARD_REF": 0,
	"BACK_REF":    1,
}

func (ReferenceType) EnumDescriptor() ([]byte, []int) { return fileDescriptorOptions, []int{0} }

// KeyType
//
// x-displayName "keytype"
// Type of keys on an Object
type KeyType int32

const (
	// x-displayName "displayname"
	// Primary key is the default
	PRIMARY_KEY KeyType = 0
	// x-displayName "displayname"
	// Non unique secondary index
	SECONDARY_KEY KeyType = 1
	// x-displayName "displayname"
	// Unique secondary index
	SECONDARY_KEY_UNIQUE KeyType = 2
)

var KeyType_name = map[int32]string{
	0: "PRIMARY_KEY",
	1: "SECONDARY_KEY",
	2: "SECONDARY_KEY_UNIQUE",
}
var KeyType_value = map[string]int32{
	"PRIMARY_KEY":          0,
	"SECONDARY_KEY":        1,
	"SECONDARY_KEY_UNIQUE": 2,
}

func (KeyType) EnumDescriptor() ([]byte, []int) { return fileDescriptorOptions, []int{1} }

// MetricType
//
// x-displayName "displayname"
// Types of metrics
type MetricType int32

const (
	// x-displayName "displayname"
	// Invalid metric type
	UNSPECIFIED MetricType = 0
	// x-displayName "displayname"
	// Gauge metric type
	GAUGE MetricType = 1
	// x-displayName "displayname"
	// Counter metric type
	COUNTER MetricType = 2
	// x-displayName "displayname"
	// Histogram metric type
	HISTOGRAM MetricType = 3
	// x-displayName "displayname"
	// Summary metric type
	SUMMARY MetricType = 4
)

var MetricType_name = map[int32]string{
	0: "UNSPECIFIED",
	1: "GAUGE",
	2: "COUNTER",
	3: "HISTOGRAM",
	4: "SUMMARY",
}
var MetricType_value = map[string]int32{
	"UNSPECIFIED": 0,
	"GAUGE":       1,
	"COUNTER":     2,
	"HISTOGRAM":   3,
	"SUMMARY":     4,
}

func (MetricType) EnumDescriptor() ([]byte, []int) { return fileDescriptorOptions, []int{2} }

// ServiceType
//
// x-displayName "displayname"
// Type of protobuf service on configuration or operational Object
type ServiceType int32

const (
	// x-displayName "displayname"
	// CUSTOM is DEPRECATED by CUSTOM_PUBLIC
	CUSTOM ServiceType = 0
	// x-displayName "displayname"
	// AUTO_CRUD is external private API for CRUD operations
	AUTO_CRUD ServiceType = 1
	// x-displayName "displayname"
	// AUTO_CRUD is external public API for CRUD operations
	AUTO_CRUD_PUBLIC ServiceType = 2
	// x-displayName "displayname"
	// CUSTOM_PUBLIC is external public API for custom operations
	CUSTOM_PUBLIC ServiceType = 3
	// x-displayName "displayname"
	// CUSTOM_PRIVATE is external private API for custom operations
	CUSTOM_PRIVATE ServiceType = 4
)

var ServiceType_name = map[int32]string{
	0: "CUSTOM",
	1: "AUTO_CRUD",
	2: "AUTO_CRUD_PUBLIC",
	3: "CUSTOM_PUBLIC",
	4: "CUSTOM_PRIVATE",
}
var ServiceType_value = map[string]int32{
	"CUSTOM":           0,
	"AUTO_CRUD":        1,
	"AUTO_CRUD_PUBLIC": 2,
	"CUSTOM_PUBLIC":    3,
	"CUSTOM_PRIVATE":   4,
}

func (ServiceType) EnumDescriptor() ([]byte, []int) { return fileDescriptorOptions, []int{3} }

// Via
//
// x-displayName: "Via"
// This message option is used with On to specify the spans of a path
// leading from an object type (say virtual_network) to its dependent
// object types (say interface, route)
type Via struct {
	// type
	//
	// x-displayName: "Type"
	// dependency is on the remote object type
	Type string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	// field_path
	//
	// x-displayName: "Field Path"
	// based on the specified field_path
	FieldPath string `protobuf:"bytes,2,opt,name=field_path,json=fieldPath,proto3" json:"field_path,omitempty"`
	// ref_type
	//
	// x-displayName: "Reference Type"
	// whether the traversal is forward (reference field is defined in this
	// Object's definition) or reverse (reference field is defined in the
	// remote Object's definition)
	RefType ReferenceType `protobuf:"varint,3,opt,name=ref_type,json=refType,proto3,enum=ves.io.schema.ReferenceType" json:"ref_type,omitempty"`
}

func (m *Via) Reset()                    { *m = Via{} }
func (*Via) ProtoMessage()               {}
func (*Via) Descriptor() ([]byte, []int) { return fileDescriptorOptions, []int{0} }

func (m *Via) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *Via) GetFieldPath() string {
	if m != nil {
		return m.FieldPath
	}
	return ""
}

func (m *Via) GetRefType() ReferenceType {
	if m != nil {
		return m.RefType
	}
	return FORWARD_REF
}

// On
//
// x-displayName: "On"
// This message option is used in Dependencies to indicate which other
// object types an object type is dependent upon for correct functioning.
type On struct {
	// type
	//
	// x-displayName: "Type"
	// This is the dependent object type which when updated we need to
	// react upon
	Type string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	// via
	//
	// x-displayName: "Via"
	// This is the set of spans to walk to reach the dependent object type
	// specified by type
	Via []*Via `protobuf:"bytes,2,rep,name=via" json:"via,omitempty"`
}

func (m *On) Reset()                    { *m = On{} }
func (*On) ProtoMessage()               {}
func (*On) Descriptor() ([]byte, []int) { return fileDescriptorOptions, []int{1} }

func (m *On) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *On) GetVia() []*Via {
	if m != nil {
		return m.Via
	}
	return nil
}

// Dependencies
//
// x-displayName: "Dependencies"
// This message option is used to indicate an object-type is dependent
// (i.e. needs to be re-evaluated) based on updates to another object-type.
// For example a virtual_network object definition may use this option to
// indicate that notification has to be issued when an interface object
// undergoes change. This is specific to the daemon implementation and
// should be used on the 'Object' message definition at the service's repo
// schema directory.
type Dependencies struct {
	// on
	//
	// x-displayName: "On"
	// This encodes the set of dependent object types and paths leading to them
	On []*On `protobuf:"bytes,1,rep,name=on" json:"on,omitempty"`
}

func (m *Dependencies) Reset()                    { *m = Dependencies{} }
func (*Dependencies) ProtoMessage()               {}
func (*Dependencies) Descriptor() ([]byte, []int) { return fileDescriptorOptions, []int{2} }

func (m *Dependencies) GetOn() []*On {
	if m != nil {
		return m.On
	}
	return nil
}

// Key
//
// x-displayName "key"
// Shape of key
type Key struct {
	// Field path
	//
	// x-displayName "Field path"
	// Field Path
	FieldPath string `protobuf:"bytes,1,opt,name=field_path,json=fieldPath,proto3" json:"field_path,omitempty"`
	// Key
	//
	// x-displayName "Key"
	// Key
	Type KeyType `protobuf:"varint,2,opt,name=type,proto3,enum=ves.io.schema.KeyType" json:"type,omitempty"`
}

func (m *Key) Reset()                    { *m = Key{} }
func (*Key) ProtoMessage()               {}
func (*Key) Descriptor() ([]byte, []int) { return fileDescriptorOptions, []int{3} }

func (m *Key) GetFieldPath() string {
	if m != nil {
		return m.FieldPath
	}
	return ""
}

func (m *Key) GetType() KeyType {
	if m != nil {
		return m.Type
	}
	return PRIMARY_KEY
}

// Keys
//
// x-displayName "keys"
// Shape of keys
type Keys struct {
	// list of Keys
	//
	// x-displayName "Keys"
	// Keys
	Keys []*Key `protobuf:"bytes,1,rep,name=keys" json:"keys,omitempty"`
}

func (m *Keys) Reset()                    { *m = Keys{} }
func (*Keys) ProtoMessage()               {}
func (*Keys) Descriptor() ([]byte, []int) { return fileDescriptorOptions, []int{4} }

func (m *Keys) GetKeys() []*Key {
	if m != nil {
		return m.Keys
	}
	return nil
}

// Title
//
// x-displayName "displayname"
// Only added so codegeneration does not break
type MetricDef struct {
	// Title
	//
	// x-displayName "displayname"
	// Only added so codegeneration does not break
	// name of the metric
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Title
	//
	// x-displayName "displayname"
	// Only added so codegeneration does not break
	// Human readable description of the metric
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	// Title
	//
	// x-displayName "displayname"
	// Only added so codegeneration does not break
	// Describes what type of metric this is.
	Type MetricType `protobuf:"varint,3,opt,name=type,proto3,enum=ves.io.schema.MetricType" json:"type,omitempty"`
	// Title
	//
	// x-displayName "displayname"
	// Only added so codegeneration does not break
	// Label configuration to use
	Labels []string `protobuf:"bytes,4,rep,name=labels" json:"labels,omitempty"`
	// Title
	//
	// x-displayName "displayname"
	// Only added so codegeneration does not break
	// Buckets to use for histogram
	Buckets []float64 `protobuf:"fixed64,5,rep,packed,name=buckets" json:"buckets,omitempty"`
}

func (m *MetricDef) Reset()                    { *m = MetricDef{} }
func (*MetricDef) ProtoMessage()               {}
func (*MetricDef) Descriptor() ([]byte, []int) { return fileDescriptorOptions, []int{5} }

func (m *MetricDef) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *MetricDef) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *MetricDef) GetType() MetricType {
	if m != nil {
		return m.Type
	}
	return UNSPECIFIED
}

func (m *MetricDef) GetLabels() []string {
	if m != nil {
		return m.Labels
	}
	return nil
}

func (m *MetricDef) GetBuckets() []float64 {
	if m != nil {
		return m.Buckets
	}
	return nil
}

var E_Dependencies = &proto.ExtensionDesc{
	ExtendedType:  (*google_protobuf.MessageOptions)(nil),
	ExtensionType: (*Dependencies)(nil),
	Field:         1000,
	Name:          "ves.io.schema.dependencies",
	Tag:           "bytes,1000,opt,name=dependencies",
	Filename:      "ves.io/schema/options.proto",
}

var E_MapsToMsg = &proto.ExtensionDesc{
	ExtendedType:  (*google_protobuf.MessageOptions)(nil),
	ExtensionType: (*string)(nil),
	Field:         1001,
	Name:          "ves.io.schema.maps_to_msg",
	Tag:           "bytes,1001,opt,name=maps_to_msg,json=mapsToMsg",
	Filename:      "ves.io/schema/options.proto",
}

var E_MapsToSvc = &proto.ExtensionDesc{
	ExtendedType:  (*google_protobuf.MessageOptions)(nil),
	ExtensionType: (*string)(nil),
	Field:         1003,
	Name:          "ves.io.schema.maps_to_svc",
	Tag:           "bytes,1003,opt,name=maps_to_svc,json=mapsToSvc",
	Filename:      "ves.io/schema/options.proto",
}

var E_Keys = &proto.ExtensionDesc{
	ExtendedType:  (*google_protobuf.MessageOptions)(nil),
	ExtensionType: (*Keys)(nil),
	Field:         1002,
	Name:          "ves.io.schema.keys",
	Tag:           "bytes,1002,opt,name=keys",
	Filename:      "ves.io/schema/options.proto",
}

var E_IsMsgConfidential = &proto.ExtensionDesc{
	ExtendedType:  (*google_protobuf.MessageOptions)(nil),
	ExtensionType: (*bool)(nil),
	Field:         1004,
	Name:          "ves.io.schema.is_msg_confidential",
	Tag:           "varint,1004,opt,name=is_msg_confidential,json=isMsgConfidential",
	Filename:      "ves.io/schema/options.proto",
}

var E_GetSpecNotCreateSpecSuperset = &proto.ExtensionDesc{
	ExtendedType:  (*google_protobuf.MessageOptions)(nil),
	ExtensionType: (*bool)(nil),
	Field:         1005,
	Name:          "ves.io.schema.get_spec_not_create_spec_superset",
	Tag:           "varint,1005,opt,name=get_spec_not_create_spec_superset,json=getSpecNotCreateSpecSuperset",
	Filename:      "ves.io/schema/options.proto",
}

var E_DisplayOrder = &proto.ExtensionDesc{
	ExtendedType:  (*google_protobuf.MessageOptions)(nil),
	ExtensionType: (*string)(nil),
	Field:         1006,
	Name:          "ves.io.schema.display_order",
	Tag:           "bytes,1006,opt,name=display_order,json=displayOrder",
	Filename:      "ves.io/schema/options.proto",
}

var E_GeneratePrivateApiMethods = &proto.ExtensionDesc{
	ExtendedType:  (*google_protobuf.MessageOptions)(nil),
	ExtensionType: (*string)(nil),
	Field:         1007,
	Name:          "ves.io.schema.generate_private_api_methods",
	Tag:           "bytes,1007,opt,name=generate_private_api_methods,json=generatePrivateApiMethods",
	Filename:      "ves.io/schema/options.proto",
}

var E_InNamespaceTypes = &proto.ExtensionDesc{
	ExtendedType:  (*google_protobuf.MessageOptions)(nil),
	ExtensionType: (*string)(nil),
	Field:         1008,
	Name:          "ves.io.schema.in_namespace_types",
	Tag:           "bytes,1008,opt,name=in_namespace_types,json=inNamespaceTypes",
	Filename:      "ves.io/schema/options.proto",
}

var E_GeneratePublicCrud = &proto.ExtensionDesc{
	ExtendedType:  (*google_protobuf.FileOptions)(nil),
	ExtensionType: (*bool)(nil),
	Field:         1000,
	Name:          "ves.io.schema.generate_public_crud",
	Tag:           "varint,1000,opt,name=generate_public_crud,json=generatePublicCrud",
	Filename:      "ves.io/schema/options.proto",
}

var E_GeneratePublicApiMethods = &proto.ExtensionDesc{
	ExtendedType:  (*google_protobuf.FileOptions)(nil),
	ExtensionType: (*string)(nil),
	Field:         1001,
	Name:          "ves.io.schema.generate_public_api_methods",
	Tag:           "bytes,1001,opt,name=generate_public_api_methods,json=generatePublicApiMethods",
	Filename:      "ves.io/schema/options.proto",
}

var E_IsPkey = &proto.ExtensionDesc{
	ExtendedType:  (*google_protobuf.FieldOptions)(nil),
	ExtensionType: (*bool)(nil),
	Field:         2000,
	Name:          "ves.io.schema.is_pkey",
	Tag:           "varint,2000,opt,name=is_pkey,json=isPkey",
	Filename:      "ves.io/schema/options.proto",
}

var E_IsSkeyUniq = &proto.ExtensionDesc{
	ExtendedType:  (*google_protobuf.FieldOptions)(nil),
	ExtensionType: (*bool)(nil),
	Field:         2001,
	Name:          "ves.io.schema.is_skey_uniq",
	Tag:           "varint,2001,opt,name=is_skey_uniq,json=isSkeyUniq",
	Filename:      "ves.io/schema/options.proto",
}

var E_IsSkey = &proto.ExtensionDesc{
	ExtendedType:  (*google_protobuf.FieldOptions)(nil),
	ExtensionType: (*bool)(nil),
	Field:         2002,
	Name:          "ves.io.schema.is_skey",
	Tag:           "varint,2002,opt,name=is_skey,json=isSkey",
	Filename:      "ves.io/schema/options.proto",
}

var E_MapsToField = &proto.ExtensionDesc{
	ExtendedType:  (*google_protobuf.FieldOptions)(nil),
	ExtensionType: (*string)(nil),
	Field:         2003,
	Name:          "ves.io.schema.maps_to_field",
	Tag:           "bytes,2003,opt,name=maps_to_field,json=mapsToField",
	Filename:      "ves.io/schema/options.proto",
}

var E_Metric = &proto.ExtensionDesc{
	ExtendedType:  (*google_protobuf.FieldOptions)(nil),
	ExtensionType: (*MetricDef)(nil),
	Field:         2004,
	Name:          "ves.io.schema.metric",
	Tag:           "bytes,2004,opt,name=metric",
	Filename:      "ves.io/schema/options.proto",
}

var E_RefTo = &proto.ExtensionDesc{
	ExtendedType:  (*google_protobuf.FieldOptions)(nil),
	ExtensionType: (*string)(nil),
	Field:         2005,
	Name:          "ves.io.schema.ref_to",
	Tag:           "bytes,2005,opt,name=ref_to,json=refTo",
	Filename:      "ves.io/schema/options.proto",
}

var E_IsRefSecondary = &proto.ExtensionDesc{
	ExtendedType:  (*google_protobuf.FieldOptions)(nil),
	ExtensionType: (*bool)(nil),
	Field:         2006,
	Name:          "ves.io.schema.is_ref_secondary",
	Tag:           "varint,2006,opt,name=is_ref_secondary,json=isRefSecondary",
	Filename:      "ves.io/schema/options.proto",
}

var E_LabelSelectorObjectKind = &proto.ExtensionDesc{
	ExtendedType:  (*google_protobuf.FieldOptions)(nil),
	ExtensionType: (*string)(nil),
	Field:         2007,
	Name:          "ves.io.schema.label_selector_object_kind",
	Tag:           "bytes,2007,opt,name=label_selector_object_kind,json=labelSelectorObjectKind",
	Filename:      "ves.io/schema/options.proto",
}

var E_IsObject = &proto.ExtensionDesc{
	ExtendedType:  (*google_protobuf.FieldOptions)(nil),
	ExtensionType: (*bool)(nil),
	Field:         2008,
	Name:          "ves.io.schema.is_object",
	Tag:           "varint,2008,opt,name=is_object,json=isObject",
	Filename:      "ves.io/schema/options.proto",
}

var E_IsFieldConfidential = &proto.ExtensionDesc{
	ExtendedType:  (*google_protobuf.FieldOptions)(nil),
	ExtensionType: (*bool)(nil),
	Field:         2009,
	Name:          "ves.io.schema.is_field_confidential",
	Tag:           "varint,2009,opt,name=is_field_confidential,json=isFieldConfidential",
	Filename:      "ves.io/schema/options.proto",
}

var E_GenerateSetter = &proto.ExtensionDesc{
	ExtendedType:  (*google_protobuf.FieldOptions)(nil),
	ExtensionType: (*bool)(nil),
	Field:         2010,
	Name:          "ves.io.schema.generate_setter",
	Tag:           "varint,2010,opt,name=generate_setter,json=generateSetter",
	Filename:      "ves.io/schema/options.proto",
}

var E_Internal = &proto.ExtensionDesc{
	ExtendedType:  (*google_protobuf.FieldOptions)(nil),
	ExtensionType: (*bool)(nil),
	Field:         2011,
	Name:          "ves.io.schema.internal",
	Tag:           "varint,2011,opt,name=internal",
	Filename:      "ves.io/schema/options.proto",
}

var E_ServiceType = &proto.ExtensionDesc{
	ExtendedType:  (*google_protobuf.ServiceOptions)(nil),
	ExtensionType: (*ServiceType)(nil),
	Field:         3000,
	Name:          "ves.io.schema.service_type",
	Tag:           "varint,3000,opt,name=service_type,json=serviceType,enum=ves.io.schema.ServiceType",
	Filename:      "ves.io/schema/options.proto",
}

var E_IsSdro = &proto.ExtensionDesc{
	ExtendedType:  (*google_protobuf.ServiceOptions)(nil),
	ExtensionType: (*bool)(nil),
	Field:         3001,
	Name:          "ves.io.schema.is_sdro",
	Tag:           "varint,3001,opt,name=is_sdro,json=isSdro",
	Filename:      "ves.io/schema/options.proto",
}

var E_ObjectType = &proto.ExtensionDesc{
	ExtendedType:  (*google_protobuf.ServiceOptions)(nil),
	ExtensionType: (*string)(nil),
	Field:         3002,
	Name:          "ves.io.schema.object_type",
	Tag:           "bytes,3002,opt,name=object_type,json=objectType",
	Filename:      "ves.io/schema/options.proto",
}

var E_HasStatus = &proto.ExtensionDesc{
	ExtendedType:  (*google_protobuf.ServiceOptions)(nil),
	ExtensionType: (*bool)(nil),
	Field:         3003,
	Name:          "ves.io.schema.has_status",
	Tag:           "varint,3003,opt,name=has_status,json=hasStatus",
	Filename:      "ves.io/schema/options.proto",
}

var E_ObjectStatusType = &proto.ExtensionDesc{
	ExtendedType:  (*google_protobuf.ServiceOptions)(nil),
	ExtensionType: (*string)(nil),
	Field:         3004,
	Name:          "ves.io.schema.object_status_type",
	Tag:           "bytes,3004,opt,name=object_status_type,json=objectStatusType",
	Filename:      "ves.io/schema/options.proto",
}

var E_MapsToOneofField = &proto.ExtensionDesc{
	ExtendedType:  (*google_protobuf.OneofOptions)(nil),
	ExtensionType: (*string)(nil),
	Field:         4000,
	Name:          "ves.io.schema.maps_to_oneof_field",
	Tag:           "bytes,4000,opt,name=maps_to_oneof_field,json=mapsToOneofField",
	Filename:      "ves.io/schema/options.proto",
}

var E_InternalEnum = &proto.ExtensionDesc{
	ExtendedType:  (*google_protobuf.EnumValueOptions)(nil),
	ExtensionType: (*bool)(nil),
	Field:         2000,
	Name:          "ves.io.schema.internal_enum",
	Tag:           "varint,2000,opt,name=internal_enum,json=internalEnum",
	Filename:      "ves.io/schema/options.proto",
}

var E_IsImmutable = &proto.ExtensionDesc{
	ExtendedType:  (*google_protobuf.MethodOptions)(nil),
	ExtensionType: (*bool)(nil),
	Field:         5001,
	Name:          "ves.io.schema.is_immutable",
	Tag:           "varint,5001,opt,name=is_immutable,json=isImmutable",
	Filename:      "ves.io/schema/options.proto",
}

func init() {
	proto.RegisterType((*Via)(nil), "ves.io.schema.Via")
	proto.RegisterType((*On)(nil), "ves.io.schema.On")
	proto.RegisterType((*Dependencies)(nil), "ves.io.schema.Dependencies")
	proto.RegisterType((*Key)(nil), "ves.io.schema.Key")
	proto.RegisterType((*Keys)(nil), "ves.io.schema.Keys")
	proto.RegisterType((*MetricDef)(nil), "ves.io.schema.MetricDef")
	proto.RegisterEnum("ves.io.schema.ReferenceType", ReferenceType_name, ReferenceType_value)
	proto.RegisterEnum("ves.io.schema.KeyType", KeyType_name, KeyType_value)
	proto.RegisterEnum("ves.io.schema.MetricType", MetricType_name, MetricType_value)
	proto.RegisterEnum("ves.io.schema.ServiceType", ServiceType_name, ServiceType_value)
	proto.RegisterExtension(E_Dependencies)
	proto.RegisterExtension(E_MapsToMsg)
	proto.RegisterExtension(E_MapsToSvc)
	proto.RegisterExtension(E_Keys)
	proto.RegisterExtension(E_IsMsgConfidential)
	proto.RegisterExtension(E_GetSpecNotCreateSpecSuperset)
	proto.RegisterExtension(E_DisplayOrder)
	proto.RegisterExtension(E_GeneratePrivateApiMethods)
	proto.RegisterExtension(E_InNamespaceTypes)
	proto.RegisterExtension(E_GeneratePublicCrud)
	proto.RegisterExtension(E_GeneratePublicApiMethods)
	proto.RegisterExtension(E_IsPkey)
	proto.RegisterExtension(E_IsSkeyUniq)
	proto.RegisterExtension(E_IsSkey)
	proto.RegisterExtension(E_MapsToField)
	proto.RegisterExtension(E_Metric)
	proto.RegisterExtension(E_RefTo)
	proto.RegisterExtension(E_IsRefSecondary)
	proto.RegisterExtension(E_LabelSelectorObjectKind)
	proto.RegisterExtension(E_IsObject)
	proto.RegisterExtension(E_IsFieldConfidential)
	proto.RegisterExtension(E_GenerateSetter)
	proto.RegisterExtension(E_Internal)
	proto.RegisterExtension(E_ServiceType)
	proto.RegisterExtension(E_IsSdro)
	proto.RegisterExtension(E_ObjectType)
	proto.RegisterExtension(E_HasStatus)
	proto.RegisterExtension(E_ObjectStatusType)
	proto.RegisterExtension(E_MapsToOneofField)
	proto.RegisterExtension(E_InternalEnum)
	proto.RegisterExtension(E_IsImmutable)
}
func (x ReferenceType) String() string {
	s, ok := ReferenceType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x KeyType) String() string {
	s, ok := KeyType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x MetricType) String() string {
	s, ok := MetricType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x ServiceType) String() string {
	s, ok := ServiceType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *Via) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Via)
	if !ok {
		that2, ok := that.(Via)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	if this.FieldPath != that1.FieldPath {
		return false
	}
	if this.RefType != that1.RefType {
		return false
	}
	return true
}
func (this *On) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*On)
	if !ok {
		that2, ok := that.(On)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	if len(this.Via) != len(that1.Via) {
		return false
	}
	for i := range this.Via {
		if !this.Via[i].Equal(that1.Via[i]) {
			return false
		}
	}
	return true
}
func (this *Dependencies) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Dependencies)
	if !ok {
		that2, ok := that.(Dependencies)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.On) != len(that1.On) {
		return false
	}
	for i := range this.On {
		if !this.On[i].Equal(that1.On[i]) {
			return false
		}
	}
	return true
}
func (this *Key) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Key)
	if !ok {
		that2, ok := that.(Key)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.FieldPath != that1.FieldPath {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	return true
}
func (this *Keys) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Keys)
	if !ok {
		that2, ok := that.(Keys)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Keys) != len(that1.Keys) {
		return false
	}
	for i := range this.Keys {
		if !this.Keys[i].Equal(that1.Keys[i]) {
			return false
		}
	}
	return true
}
func (this *MetricDef) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MetricDef)
	if !ok {
		that2, ok := that.(MetricDef)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Description != that1.Description {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	if len(this.Labels) != len(that1.Labels) {
		return false
	}
	for i := range this.Labels {
		if this.Labels[i] != that1.Labels[i] {
			return false
		}
	}
	if len(this.Buckets) != len(that1.Buckets) {
		return false
	}
	for i := range this.Buckets {
		if this.Buckets[i] != that1.Buckets[i] {
			return false
		}
	}
	return true
}
func (this *Via) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&schema.Via{")
	s = append(s, "Type: "+fmt.Sprintf("%#v", this.Type)+",\n")
	s = append(s, "FieldPath: "+fmt.Sprintf("%#v", this.FieldPath)+",\n")
	s = append(s, "RefType: "+fmt.Sprintf("%#v", this.RefType)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *On) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&schema.On{")
	s = append(s, "Type: "+fmt.Sprintf("%#v", this.Type)+",\n")
	if this.Via != nil {
		s = append(s, "Via: "+fmt.Sprintf("%#v", this.Via)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Dependencies) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&schema.Dependencies{")
	if this.On != nil {
		s = append(s, "On: "+fmt.Sprintf("%#v", this.On)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Key) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&schema.Key{")
	s = append(s, "FieldPath: "+fmt.Sprintf("%#v", this.FieldPath)+",\n")
	s = append(s, "Type: "+fmt.Sprintf("%#v", this.Type)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Keys) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&schema.Keys{")
	if this.Keys != nil {
		s = append(s, "Keys: "+fmt.Sprintf("%#v", this.Keys)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *MetricDef) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&schema.MetricDef{")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "Description: "+fmt.Sprintf("%#v", this.Description)+",\n")
	s = append(s, "Type: "+fmt.Sprintf("%#v", this.Type)+",\n")
	s = append(s, "Labels: "+fmt.Sprintf("%#v", this.Labels)+",\n")
	s = append(s, "Buckets: "+fmt.Sprintf("%#v", this.Buckets)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringOptions(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *Via) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Via) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Type) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintOptions(dAtA, i, uint64(len(m.Type)))
		i += copy(dAtA[i:], m.Type)
	}
	if len(m.FieldPath) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintOptions(dAtA, i, uint64(len(m.FieldPath)))
		i += copy(dAtA[i:], m.FieldPath)
	}
	if m.RefType != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintOptions(dAtA, i, uint64(m.RefType))
	}
	return i, nil
}

func (m *On) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *On) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Type) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintOptions(dAtA, i, uint64(len(m.Type)))
		i += copy(dAtA[i:], m.Type)
	}
	if len(m.Via) > 0 {
		for _, msg := range m.Via {
			dAtA[i] = 0x12
			i++
			i = encodeVarintOptions(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *Dependencies) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Dependencies) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.On) > 0 {
		for _, msg := range m.On {
			dAtA[i] = 0xa
			i++
			i = encodeVarintOptions(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *Key) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Key) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.FieldPath) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintOptions(dAtA, i, uint64(len(m.FieldPath)))
		i += copy(dAtA[i:], m.FieldPath)
	}
	if m.Type != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintOptions(dAtA, i, uint64(m.Type))
	}
	return i, nil
}

func (m *Keys) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Keys) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Keys) > 0 {
		for _, msg := range m.Keys {
			dAtA[i] = 0xa
			i++
			i = encodeVarintOptions(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *MetricDef) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MetricDef) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintOptions(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.Description) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintOptions(dAtA, i, uint64(len(m.Description)))
		i += copy(dAtA[i:], m.Description)
	}
	if m.Type != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintOptions(dAtA, i, uint64(m.Type))
	}
	if len(m.Labels) > 0 {
		for _, s := range m.Labels {
			dAtA[i] = 0x22
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.Buckets) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintOptions(dAtA, i, uint64(len(m.Buckets)*8))
		for _, num := range m.Buckets {
			f1 := math.Float64bits(float64(num))
			binary.LittleEndian.PutUint64(dAtA[i:], uint64(f1))
			i += 8
		}
	}
	return i, nil
}

func encodeVarintOptions(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func NewPopulatedVia(r randyOptions, easy bool) *Via {
	this := &Via{}
	this.Type = string(randStringOptions(r))
	this.FieldPath = string(randStringOptions(r))
	this.RefType = ReferenceType([]int32{0, 1}[r.Intn(2)])
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedOn(r randyOptions, easy bool) *On {
	this := &On{}
	this.Type = string(randStringOptions(r))
	if r.Intn(10) != 0 {
		v1 := r.Intn(5)
		this.Via = make([]*Via, v1)
		for i := 0; i < v1; i++ {
			this.Via[i] = NewPopulatedVia(r, easy)
		}
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedDependencies(r randyOptions, easy bool) *Dependencies {
	this := &Dependencies{}
	if r.Intn(10) != 0 {
		v2 := r.Intn(5)
		this.On = make([]*On, v2)
		for i := 0; i < v2; i++ {
			this.On[i] = NewPopulatedOn(r, easy)
		}
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedKey(r randyOptions, easy bool) *Key {
	this := &Key{}
	this.FieldPath = string(randStringOptions(r))
	this.Type = KeyType([]int32{0, 1, 2}[r.Intn(3)])
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedKeys(r randyOptions, easy bool) *Keys {
	this := &Keys{}
	if r.Intn(10) != 0 {
		v3 := r.Intn(5)
		this.Keys = make([]*Key, v3)
		for i := 0; i < v3; i++ {
			this.Keys[i] = NewPopulatedKey(r, easy)
		}
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedMetricDef(r randyOptions, easy bool) *MetricDef {
	this := &MetricDef{}
	this.Name = string(randStringOptions(r))
	this.Description = string(randStringOptions(r))
	this.Type = MetricType([]int32{0, 1, 2, 3, 4}[r.Intn(5)])
	v4 := r.Intn(10)
	this.Labels = make([]string, v4)
	for i := 0; i < v4; i++ {
		this.Labels[i] = string(randStringOptions(r))
	}
	v5 := r.Intn(10)
	this.Buckets = make([]float64, v5)
	for i := 0; i < v5; i++ {
		this.Buckets[i] = float64(r.Float64())
		if r.Intn(2) == 0 {
			this.Buckets[i] *= -1
		}
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

type randyOptions interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneOptions(r randyOptions) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringOptions(r randyOptions) string {
	v6 := r.Intn(100)
	tmps := make([]rune, v6)
	for i := 0; i < v6; i++ {
		tmps[i] = randUTF8RuneOptions(r)
	}
	return string(tmps)
}
func randUnrecognizedOptions(r randyOptions, maxFieldNumber int) (dAtA []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		dAtA = randFieldOptions(dAtA, r, fieldNumber, wire)
	}
	return dAtA
}
func randFieldOptions(dAtA []byte, r randyOptions, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		dAtA = encodeVarintPopulateOptions(dAtA, uint64(key))
		v7 := r.Int63()
		if r.Intn(2) == 0 {
			v7 *= -1
		}
		dAtA = encodeVarintPopulateOptions(dAtA, uint64(v7))
	case 1:
		dAtA = encodeVarintPopulateOptions(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		dAtA = encodeVarintPopulateOptions(dAtA, uint64(key))
		ll := r.Intn(100)
		dAtA = encodeVarintPopulateOptions(dAtA, uint64(ll))
		for j := 0; j < ll; j++ {
			dAtA = append(dAtA, byte(r.Intn(256)))
		}
	default:
		dAtA = encodeVarintPopulateOptions(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return dAtA
}
func encodeVarintPopulateOptions(dAtA []byte, v uint64) []byte {
	for v >= 1<<7 {
		dAtA = append(dAtA, uint8(uint64(v)&0x7f|0x80))
		v >>= 7
	}
	dAtA = append(dAtA, uint8(v))
	return dAtA
}
func (m *Via) Size() (n int) {
	var l int
	_ = l
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovOptions(uint64(l))
	}
	l = len(m.FieldPath)
	if l > 0 {
		n += 1 + l + sovOptions(uint64(l))
	}
	if m.RefType != 0 {
		n += 1 + sovOptions(uint64(m.RefType))
	}
	return n
}

func (m *On) Size() (n int) {
	var l int
	_ = l
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovOptions(uint64(l))
	}
	if len(m.Via) > 0 {
		for _, e := range m.Via {
			l = e.Size()
			n += 1 + l + sovOptions(uint64(l))
		}
	}
	return n
}

func (m *Dependencies) Size() (n int) {
	var l int
	_ = l
	if len(m.On) > 0 {
		for _, e := range m.On {
			l = e.Size()
			n += 1 + l + sovOptions(uint64(l))
		}
	}
	return n
}

func (m *Key) Size() (n int) {
	var l int
	_ = l
	l = len(m.FieldPath)
	if l > 0 {
		n += 1 + l + sovOptions(uint64(l))
	}
	if m.Type != 0 {
		n += 1 + sovOptions(uint64(m.Type))
	}
	return n
}

func (m *Keys) Size() (n int) {
	var l int
	_ = l
	if len(m.Keys) > 0 {
		for _, e := range m.Keys {
			l = e.Size()
			n += 1 + l + sovOptions(uint64(l))
		}
	}
	return n
}

func (m *MetricDef) Size() (n int) {
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovOptions(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovOptions(uint64(l))
	}
	if m.Type != 0 {
		n += 1 + sovOptions(uint64(m.Type))
	}
	if len(m.Labels) > 0 {
		for _, s := range m.Labels {
			l = len(s)
			n += 1 + l + sovOptions(uint64(l))
		}
	}
	if len(m.Buckets) > 0 {
		n += 1 + sovOptions(uint64(len(m.Buckets)*8)) + len(m.Buckets)*8
	}
	return n
}

func sovOptions(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozOptions(x uint64) (n int) {
	return sovOptions(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *Via) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Via{`,
		`Type:` + fmt.Sprintf("%v", this.Type) + `,`,
		`FieldPath:` + fmt.Sprintf("%v", this.FieldPath) + `,`,
		`RefType:` + fmt.Sprintf("%v", this.RefType) + `,`,
		`}`,
	}, "")
	return s
}
func (this *On) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&On{`,
		`Type:` + fmt.Sprintf("%v", this.Type) + `,`,
		`Via:` + strings.Replace(fmt.Sprintf("%v", this.Via), "Via", "Via", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Dependencies) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Dependencies{`,
		`On:` + strings.Replace(fmt.Sprintf("%v", this.On), "On", "On", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Key) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Key{`,
		`FieldPath:` + fmt.Sprintf("%v", this.FieldPath) + `,`,
		`Type:` + fmt.Sprintf("%v", this.Type) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Keys) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Keys{`,
		`Keys:` + strings.Replace(fmt.Sprintf("%v", this.Keys), "Key", "Key", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *MetricDef) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MetricDef{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Description:` + fmt.Sprintf("%v", this.Description) + `,`,
		`Type:` + fmt.Sprintf("%v", this.Type) + `,`,
		`Labels:` + fmt.Sprintf("%v", this.Labels) + `,`,
		`Buckets:` + fmt.Sprintf("%v", this.Buckets) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringOptions(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *Via) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOptions
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Via: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Via: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOptions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOptions
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FieldPath", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOptions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOptions
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FieldPath = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RefType", wireType)
			}
			m.RefType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOptions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RefType |= (ReferenceType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipOptions(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOptions
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *On) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOptions
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: On: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: On: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOptions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOptions
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Via", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOptions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOptions
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Via = append(m.Via, &Via{})
			if err := m.Via[len(m.Via)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOptions(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOptions
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Dependencies) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOptions
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Dependencies: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Dependencies: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field On", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOptions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOptions
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.On = append(m.On, &On{})
			if err := m.On[len(m.On)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOptions(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOptions
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Key) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOptions
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Key: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Key: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FieldPath", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOptions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOptions
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FieldPath = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOptions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (KeyType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipOptions(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOptions
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Keys) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOptions
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Keys: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Keys: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Keys", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOptions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOptions
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Keys = append(m.Keys, &Key{})
			if err := m.Keys[len(m.Keys)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOptions(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOptions
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MetricDef) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOptions
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MetricDef: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MetricDef: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOptions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOptions
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOptions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOptions
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOptions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (MetricType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Labels", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOptions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOptions
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Labels = append(m.Labels, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 5:
			if wireType == 1 {
				var v uint64
				if (iNdEx + 8) > l {
					return io.ErrUnexpectedEOF
				}
				v = uint64(binary.LittleEndian.Uint64(dAtA[iNdEx:]))
				iNdEx += 8
				v2 := float64(math.Float64frombits(v))
				m.Buckets = append(m.Buckets, v2)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowOptions
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthOptions
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v uint64
					if (iNdEx + 8) > l {
						return io.ErrUnexpectedEOF
					}
					v = uint64(binary.LittleEndian.Uint64(dAtA[iNdEx:]))
					iNdEx += 8
					v2 := float64(math.Float64frombits(v))
					m.Buckets = append(m.Buckets, v2)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Buckets", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipOptions(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOptions
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipOptions(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowOptions
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowOptions
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowOptions
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthOptions
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowOptions
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipOptions(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthOptions = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowOptions   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("ves.io/schema/options.proto", fileDescriptorOptions) }

var fileDescriptorOptions = []byte{
	// 1461 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x97, 0x4d, 0x6f, 0xdb, 0xc8,
	0x19, 0xc7, 0x45, 0xc9, 0xb1, 0xad, 0x47, 0x76, 0xcc, 0xd0, 0x69, 0xac, 0x38, 0x2e, 0xa3, 0x18,
	0x45, 0x6b, 0x18, 0xb0, 0x8c, 0xa6, 0x28, 0x82, 0xb2, 0x40, 0x1b, 0x59, 0x96, 0x1d, 0xc1, 0x95,
	0xa5, 0x50, 0x96, 0x8b, 0xb4, 0x05, 0x08, 0x8a, 0x7c, 0x24, 0x4f, 0x25, 0x71, 0x18, 0x0e, 0x25,
	0x54, 0xb7, 0xf6, 0xd8, 0x5b, 0x3f, 0x42, 0xd1, 0x53, 0x3f, 0x42, 0xf6, 0xe5, 0xb0, 0xc7, 0x3d,
	0x66, 0xdf, 0xb3, 0xbb, 0x97, 0xb5, 0xf6, 0x92, 0x7d, 0xcf, 0x71, 0x8f, 0x0b, 0xce, 0x90, 0xb6,
	0x24, 0x7b, 0x97, 0x3e, 0x89, 0xf3, 0xf2, 0xff, 0xcd, 0xff, 0x99, 0x99, 0xe7, 0x19, 0x1b, 0xee,
	0x0c, 0x90, 0xe5, 0x09, 0xdd, 0x66, 0xd6, 0x09, 0xf6, 0xcc, 0x6d, 0xea, 0xfa, 0x84, 0x3a, 0x2c,
	0xef, 0x7a, 0xd4, 0xa7, 0xca, 0xa2, 0x18, 0xcc, 0x8b, 0xc1, 0xd5, 0xad, 0x36, 0xf1, 0x4f, 0xfa,
	0xcd, 0xbc, 0x45, 0x7b, 0xdb, 0x6d, 0xda, 0xa6, 0xdb, 0x7c, 0x56, 0xb3, 0xdf, 0xe2, 0x2d, 0xde,
	0xe0, 0x5f, 0x42, 0xbd, 0x9a, 0x6b, 0x53, 0xda, 0xee, 0xe2, 0xf9, 0x2c, 0x1b, 0x99, 0xe5, 0x11,
	0xd7, 0xa7, 0x9e, 0x98, 0xb1, 0xfe, 0x14, 0x52, 0xc7, 0xc4, 0x54, 0x14, 0x98, 0xf1, 0x87, 0x2e,
	0x66, 0xa5, 0x9c, 0xb4, 0x91, 0xd6, 0xf9, 0xb7, 0xf2, 0x73, 0x80, 0x16, 0xc1, 0xae, 0x6d, 0xb8,
	0xa6, 0x7f, 0x92, 0x4d, 0xf2, 0x91, 0x34, 0xef, 0xa9, 0x99, 0xfe, 0x89, 0xf2, 0x00, 0xe6, 0x3d,
	0x6c, 0x19, 0x5c, 0x96, 0xca, 0x49, 0x1b, 0xd7, 0xef, 0xaf, 0xe5, 0x27, 0xcc, 0xe6, 0x75, 0x6c,
	0xa1, 0x87, 0x8e, 0x85, 0x47, 0x43, 0x17, 0xf5, 0x39, 0x0f, 0x5b, 0xc1, 0xc7, 0xfa, 0x1f, 0x20,
	0x59, 0x75, 0x2e, 0x5d, 0xf1, 0x17, 0x90, 0x1a, 0x10, 0x33, 0x9b, 0xcc, 0xa5, 0x36, 0x32, 0xf7,
	0x95, 0x29, 0xda, 0x31, 0x31, 0xf5, 0x60, 0x78, 0xfd, 0xd7, 0xb0, 0xb0, 0x8b, 0x2e, 0x3a, 0x36,
	0x3a, 0x16, 0x41, 0xa6, 0xdc, 0x83, 0x24, 0x75, 0xb2, 0x12, 0x17, 0xdd, 0x98, 0x12, 0x55, 0x1d,
	0x3d, 0x49, 0x9d, 0xf5, 0x1a, 0xa4, 0x0e, 0x70, 0x38, 0x15, 0x91, 0x34, 0x1d, 0xd1, 0x66, 0x68,
	0x29, 0xc9, 0xa3, 0xb9, 0x35, 0x85, 0x3a, 0xc0, 0x21, 0x8f, 0x83, 0xcf, 0x59, 0xcf, 0xc3, 0xcc,
	0x01, 0x0e, 0x99, 0xf2, 0x4b, 0x98, 0xe9, 0xe0, 0x90, 0x85, 0xcb, 0x2b, 0x17, 0x35, 0x3a, 0x1f,
	0x5f, 0xff, 0x9f, 0x04, 0xe9, 0x0a, 0xfa, 0x1e, 0xb1, 0x76, 0xb1, 0x15, 0x04, 0xef, 0x98, 0xbd,
	0xb3, 0xe0, 0x83, 0x6f, 0x25, 0x07, 0x99, 0xe8, 0x74, 0x08, 0x75, 0xc2, 0xfd, 0x1e, 0xef, 0x52,
	0xb6, 0x42, 0x7f, 0x62, 0xb7, 0x6f, 0x4f, 0xad, 0x25, 0xe8, 0xe7, 0x16, 0x95, 0x5b, 0x30, 0xdb,
	0x35, 0x9b, 0xd8, 0x65, 0xd9, 0x99, 0x5c, 0x6a, 0x23, 0xad, 0x87, 0x2d, 0x25, 0x0b, 0x73, 0xcd,
	0xbe, 0xd5, 0x41, 0x9f, 0x65, 0xaf, 0xe5, 0x52, 0x1b, 0x92, 0x1e, 0x35, 0x37, 0xf3, 0xb0, 0x38,
	0x71, 0x66, 0xca, 0x12, 0x64, 0xf6, 0xaa, 0xfa, 0x9f, 0x0b, 0xfa, 0xae, 0xa1, 0x97, 0xf6, 0xe4,
	0x84, 0xb2, 0x00, 0xf3, 0x3b, 0x85, 0xe2, 0x01, 0x6f, 0x49, 0x9b, 0xfb, 0x30, 0x17, 0xee, 0x4a,
	0x30, 0xb3, 0xa6, 0x97, 0x2b, 0x05, 0xfd, 0x89, 0x71, 0x50, 0x7a, 0x22, 0x27, 0x94, 0x1b, 0xb0,
	0x58, 0x2f, 0x15, 0xab, 0x87, 0xbb, 0x51, 0x97, 0xa4, 0x64, 0xe1, 0xe6, 0x44, 0x97, 0xd1, 0x38,
	0x2c, 0x3f, 0x6e, 0x94, 0xe4, 0xe4, 0xe6, 0x63, 0x80, 0x73, 0xfb, 0x01, 0xab, 0x71, 0x58, 0xaf,
	0x95, 0x8a, 0xe5, 0xbd, 0x72, 0x69, 0x57, 0x4e, 0x28, 0x69, 0xb8, 0xb6, 0x5f, 0x68, 0xec, 0x97,
	0x64, 0x49, 0xc9, 0xc0, 0x5c, 0xb1, 0xda, 0x38, 0x3c, 0x2a, 0xe9, 0x72, 0x52, 0x59, 0x84, 0xf4,
	0xa3, 0x72, 0xfd, 0xa8, 0xba, 0xaf, 0x17, 0x2a, 0x72, 0x2a, 0x18, 0xab, 0x37, 0x2a, 0x81, 0x07,
	0x79, 0x66, 0x13, 0x21, 0x53, 0x47, 0x6f, 0x40, 0xc2, 0x48, 0x00, 0x66, 0x8b, 0x8d, 0xfa, 0x51,
	0xb5, 0x22, 0x27, 0x02, 0x59, 0xa1, 0x71, 0x54, 0x35, 0x8a, 0x7a, 0x63, 0x57, 0x96, 0x94, 0x9b,
	0x20, 0x9f, 0x35, 0x8d, 0x5a, 0x63, 0xe7, 0x4f, 0xe5, 0xa2, 0x9c, 0x0c, 0xfc, 0x0b, 0x41, 0xd4,
	0x95, 0x52, 0x14, 0xb8, 0x1e, 0x75, 0xe9, 0xe5, 0xe3, 0xc2, 0x51, 0x49, 0x9e, 0xd1, 0x4c, 0x58,
	0xb0, 0xc7, 0x2f, 0xe3, 0xdd, 0xbc, 0x48, 0xb9, 0x7c, 0x94, 0x72, 0xf9, 0x0a, 0x32, 0x66, 0xb6,
	0xb1, 0x2a, 0xd2, 0x3a, 0xfb, 0x72, 0x2e, 0x27, 0x6d, 0x64, 0xee, 0xdf, 0x99, 0x3a, 0xbd, 0xf1,
	0x1b, 0xad, 0x4f, 0x20, 0xb5, 0x87, 0x90, 0xe9, 0x99, 0x2e, 0x33, 0x7c, 0x6a, 0xf4, 0x58, 0x3b,
	0x7e, 0x85, 0x2f, 0xe6, 0xc4, 0xc5, 0x0e, 0x44, 0x47, 0xb4, 0xc2, 0xda, 0xe3, 0x04, 0x36, 0xb0,
	0xe2, 0x09, 0x5f, 0x4d, 0x10, 0xea, 0x03, 0x4b, 0x2b, 0x8b, 0x6b, 0x1e, 0x2f, 0xfd, 0x52, 0x84,
	0xb7, 0x7c, 0x31, 0x11, 0x98, 0xc8, 0x04, 0xad, 0x06, 0xcb, 0x84, 0x05, 0x91, 0x18, 0x16, 0x75,
	0x5a, 0xc4, 0x46, 0xc7, 0x27, 0x66, 0x37, 0x9e, 0xfc, 0x75, 0x40, 0x9e, 0xd7, 0x6f, 0x10, 0x56,
	0x61, 0xed, 0xe2, 0x98, 0x54, 0x23, 0x70, 0xaf, 0x8d, 0xbe, 0xc1, 0x5c, 0xb4, 0x0c, 0x87, 0xfa,
	0x86, 0xe5, 0xa1, 0xe9, 0xa3, 0x68, 0xb3, 0xbe, 0x8b, 0x1e, 0x43, 0x3f, 0x9e, 0xff, 0x8d, 0xe0,
	0xaf, 0xb5, 0xd1, 0xaf, 0xbb, 0x68, 0x1d, 0x52, 0xbf, 0xc8, 0x39, 0x41, 0xa3, 0x1e, 0x52, 0xb4,
	0x12, 0x2c, 0xda, 0x84, 0xb9, 0x5d, 0x73, 0x68, 0x50, 0xcf, 0x46, 0x2f, 0x1e, 0xfb, 0xad, 0xd8,
	0xcb, 0x85, 0x50, 0x56, 0x0d, 0x54, 0x9a, 0x09, 0x6b, 0x6d, 0x74, 0xd0, 0x0b, 0x6c, 0xba, 0x1e,
	0x19, 0x04, 0xbf, 0xa6, 0x4b, 0x8c, 0x1e, 0xfa, 0x27, 0xd4, 0xbe, 0xc2, 0x36, 0x7f, 0x27, 0xa8,
	0xb7, 0x23, 0x4a, 0x4d, 0x40, 0x0a, 0x2e, 0xa9, 0x08, 0x84, 0x76, 0x08, 0x0a, 0x71, 0x8c, 0xa0,
	0xb2, 0x30, 0xd7, 0xb4, 0x90, 0xd7, 0xe9, 0x2b, 0x80, 0x5f, 0x09, 0xb0, 0x4c, 0x9c, 0xc3, 0x48,
	0x1a, 0xe4, 0x0f, 0xd3, 0xaa, 0x70, 0xf3, 0xdc, 0x72, 0xbf, 0xd9, 0x25, 0x96, 0x61, 0x79, 0x7d,
	0x5b, 0x59, 0xbb, 0x40, 0xdc, 0x23, 0xdd, 0xc9, 0xdb, 0x3e, 0xaf, 0x2b, 0x67, 0x3e, 0xb9, 0xb2,
	0xe8, 0xf5, 0x6d, 0xed, 0x6f, 0x70, 0x67, 0x1a, 0x38, 0xbe, 0x05, 0x3f, 0xcd, 0x0d, 0xef, 0x78,
	0x76, 0x92, 0x3b, 0x16, 0xfe, 0x03, 0x98, 0x23, 0xcc, 0x70, 0x3b, 0x41, 0xd5, 0xbf, 0x84, 0x84,
	0x5d, 0x3b, 0x42, 0x3d, 0x5f, 0xe2, 0x16, 0x67, 0x09, 0xab, 0x75, 0x70, 0xa8, 0x3d, 0x84, 0x05,
	0xc2, 0x0c, 0xd6, 0xc1, 0xa1, 0xd1, 0x77, 0xc8, 0xd3, 0x38, 0xf5, 0x3b, 0x42, 0x0d, 0x84, 0xd5,
	0x3b, 0x38, 0x6c, 0x38, 0xe4, 0x69, 0xb8, 0x34, 0xbb, 0xc2, 0xd2, 0xef, 0x9e, 0x2d, 0x1d, 0x88,
	0xb5, 0x1d, 0x58, 0x8c, 0xd2, 0x94, 0x3f, 0x4a, 0x71, 0xf2, 0xf7, 0x96, 0xc4, 0x1b, 0x21, 0xd2,
	0x94, 0x0f, 0x69, 0x35, 0x98, 0xed, 0xf1, 0x4a, 0x1a, 0x27, 0x7e, 0x7f, 0x89, 0x27, 0x6a, 0xf6,
	0xd2, 0x57, 0x64, 0x17, 0x5b, 0x7a, 0xc8, 0xd1, 0x7e, 0x0b, 0xb3, 0xfc, 0x9d, 0xa7, 0x71, 0xc4,
	0x0f, 0x84, 0x9d, 0x6b, 0xc1, 0x3b, 0x4f, 0xb5, 0x47, 0x20, 0x13, 0x66, 0x04, 0x4a, 0x86, 0x16,
	0x75, 0x6c, 0xd3, 0x8b, 0xdd, 0x8e, 0x0f, 0xc5, 0x76, 0x5c, 0x27, 0x4c, 0xc7, 0x56, 0x3d, 0x52,
	0x69, 0x7f, 0x85, 0x55, 0xfe, 0x72, 0x19, 0x0c, 0xbb, 0x68, 0xf9, 0xd4, 0x33, 0x68, 0xf3, 0xef,
	0x68, 0xf9, 0x46, 0x87, 0x38, 0xb1, 0x7b, 0xf4, 0x91, 0x30, 0xb5, 0xc2, 0x09, 0xf5, 0x10, 0x50,
	0xe5, 0xfa, 0x03, 0xe2, 0xd8, 0xda, 0xef, 0x21, 0x4d, 0x58, 0x08, 0x8c, 0x63, 0xbd, 0x10, 0xfe,
	0xe6, 0x09, 0x13, 0x00, 0x4d, 0x87, 0x9f, 0x11, 0x26, 0xce, 0x6a, 0xb2, 0x98, 0xc5, 0x80, 0x3e,
	0x16, 0xa0, 0x65, 0xc2, 0x78, 0xf7, 0x44, 0x31, 0xdb, 0x87, 0xa5, 0xb3, 0xb4, 0x60, 0xe8, 0xfb,
	0xe8, 0xc5, 0xd1, 0x3e, 0x09, 0xb7, 0x2d, 0x92, 0xd5, 0xb9, 0x4a, 0xd3, 0x60, 0x9e, 0x38, 0x3e,
	0x7a, 0x4e, 0xbc, 0x9f, 0x4f, 0xa3, 0xc0, 0xc2, 0xf9, 0x9a, 0x01, 0x0b, 0x4c, 0x3c, 0x9e, 0xbc,
	0x6e, 0x5c, 0x52, 0x36, 0xc2, 0xb7, 0x35, 0x22, 0x3c, 0x5b, 0xe1, 0x7f, 0x93, 0xac, 0x4e, 0xdd,
	0xa6, 0xb1, 0x17, 0x58, 0xcf, 0xb0, 0xf3, 0x86, 0xf6, 0x3b, 0x91, 0x23, 0xb6, 0x47, 0xe3, 0xd9,
	0xaf, 0xad, 0x9c, 0x65, 0x89, 0xed, 0x51, 0xad, 0x00, 0x99, 0xf0, 0xfc, 0xaf, 0x66, 0xed, 0xf5,
	0x15, 0x7e, 0x03, 0x40, 0x88, 0xf8, 0xea, 0x7f, 0x04, 0x38, 0x31, 0x99, 0xc1, 0x7c, 0xd3, 0xef,
	0xb3, 0x78, 0xc2, 0x1b, 0xc2, 0x40, 0xfa, 0xc4, 0x64, 0x75, 0x2e, 0x09, 0x8a, 0x6b, 0xe8, 0x41,
	0x30, 0xae, 0x68, 0xe5, 0x4d, 0x61, 0x45, 0x16, 0x5a, 0xc1, 0xe2, 0x86, 0x2a, 0xb0, 0x1c, 0x65,
	0x3e, 0x75, 0x90, 0xb6, 0x7e, 0x34, 0xff, 0xab, 0xc1, 0x68, 0x84, 0xfb, 0xef, 0x5d, 0x81, 0x13,
	0xf9, 0xcf, 0x87, 0x44, 0x11, 0xd8, 0x87, 0xc5, 0xe8, 0x28, 0x0d, 0x74, 0xfa, 0x3d, 0xe5, 0xde,
	0x05, 0x50, 0xc9, 0xe9, 0xf7, 0x8e, 0xcd, 0x6e, 0x1f, 0xa7, 0xca, 0xe0, 0x42, 0x24, 0x0c, 0x26,
	0x68, 0x3b, 0xbc, 0x18, 0x92, 0x5e, 0xaf, 0xef, 0x9b, 0xcd, 0x2e, 0x2a, 0xea, 0x25, 0xcf, 0x47,
	0x50, 0x6f, 0x23, 0xc8, 0xbf, 0x7f, 0xc5, 0x21, 0x19, 0xc2, 0xca, 0x91, 0x66, 0xe7, 0x5f, 0xd2,
	0xf3, 0x53, 0x35, 0xf1, 0xe2, 0x54, 0x4d, 0xbc, 0x3a, 0x55, 0xa5, 0xef, 0x4f, 0x55, 0xe9, 0x9f,
	0x23, 0x55, 0xfa, 0xff, 0x48, 0x95, 0x9e, 0x8d, 0x54, 0xe9, 0xad, 0x91, 0x2a, 0xbd, 0x3d, 0x52,
	0xa5, 0xe7, 0x23, 0x55, 0x7a, 0x31, 0x52, 0xa5, 0xcf, 0x46, 0xaa, 0xf4, 0x72, 0xa4, 0x26, 0x5e,
	0x8d, 0x54, 0xe9, 0x3f, 0x9f, 0xab, 0x89, 0xbf, 0x14, 0xdb, 0xd4, 0xed, 0xb4, 0xf3, 0x03, 0xda,
	0xf5, 0xd1, 0xf3, 0xcc, 0x7c, 0x9f, 0x6d, 0xf3, 0x8f, 0x16, 0xf5, 0x7a, 0x5b, 0xae, 0x47, 0x07,
	0xc4, 0x46, 0x6f, 0x2b, 0x1a, 0xde, 0x76, 0x9b, 0x6d, 0xba, 0x8d, 0xff, 0xf0, 0xc3, 0x7f, 0xa6,
	0xc4, 0x4f, 0x73, 0x96, 0xfb, 0xfd, 0xcd, 0x0f, 0x01, 0x00, 0x00, 0xff, 0xff, 0xa4, 0x67, 0x9d,
	0x03, 0x6b, 0x0d, 0x00, 0x00,
}
