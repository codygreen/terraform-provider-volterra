// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ves.io/schema/cluster/types.proto

package cluster

import (
	proto "github.com/gogo/protobuf/proto"
	golang_proto "github.com/golang/protobuf/proto"

	fmt "fmt"

	math "math"

	_ "github.com/gogo/protobuf/gogoproto"

	_ "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"

	ves_io_schema4 "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"

	_ "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"

	_ "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"

	strconv "strconv"

	strings "strings"

	reflect "reflect"

	sortkeys "github.com/gogo/protobuf/sortkeys"

	io "io"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// LoadbalancerAlgorithm
//
// x-displayName: "Load Balancer Algorithm"
// Different load balancing algorithms supported
// When a connection to a endpoint in an upstream cluster is required, the load balancer uses loadbalancer_algorithm
// to determine which host is selected.
type LoadbalancerAlgorithm int32

const (
	// ROUND_ROBIN
	//
	// x-displayName: "Round Robin"
	// Policy in which each healthy/available upstream endpoint is selected in round robin order.
	ROUND_ROBIN LoadbalancerAlgorithm = 0
	// LEAST_REQUEST
	//
	// x-displayName: "Least Request"
	// Policy in which loadbalancer picks the upstream endpoint which has the fewest active requests
	LEAST_REQUEST LoadbalancerAlgorithm = 1
	// RING_HASH
	//
	// x-displayName: "Ring Hash"
	// Policy implements consistent hashing to upstream endpoints using ring hash of endpoint names
	// Hash of the incoming request is calculated using request hash policy.
	// The ring/modulo hash load balancer implements consistent hashing to upstream hosts.
	// The algorithm is based on mapping all hosts onto a circle such that the addition or
	// removal of a host from the host set changes only affect 1/N requests. This technique
	// is also commonly known as “ketama” hashing. A consistent hashing load balancer is only
	// effective when protocol routing is used that specifies a value to hash on. The minimum
	// ring size governs the replication factor for each host in the ring. For example, if the
	// minimum ring size is 1024 and there are 16 hosts, each host will be replicated 64 times.
	RING_HASH LoadbalancerAlgorithm = 2
	// RANDOM
	//
	// x-displayName: "Random"
	// policy in which each available upstream endpoint is selected in random order.
	// The random load balancer selects a random healthy host. The random load balancer generally
	// performs better than round robin if no health checking policy is configured. Random selection
	// avoids bias towards the host in the set that comes after a failed host.
	RANDOM LoadbalancerAlgorithm = 3
)

var LoadbalancerAlgorithm_name = map[int32]string{
	0: "ROUND_ROBIN",
	1: "LEAST_REQUEST",
	2: "RING_HASH",
	3: "RANDOM",
}
var LoadbalancerAlgorithm_value = map[string]int32{
	"ROUND_ROBIN":   0,
	"LEAST_REQUEST": 1,
	"RING_HASH":     2,
	"RANDOM":        3,
}

func (LoadbalancerAlgorithm) EnumDescriptor() ([]byte, []int) { return fileDescriptorTypes, []int{0} }

// DnsDiscoveryType
//
// x-displayName: "DNS Discovery Type"
// Specifies whether to use the first address or all addresses returned by DNS resolver
type DnsDiscoveryType int32

const (
	// x-displayName: "Strict DNS"
	// Each returned IP address in the DNS result will be considered an explicit host in the upstream cluster
	STRICT_DNS DnsDiscoveryType = 0
	// x-displayName: "Logical DNS"
	// Uses only the first IP address returned when a new connection needs to be initiated
	LOGICAL_DNS DnsDiscoveryType = 1
)

var DnsDiscoveryType_name = map[int32]string{
	0: "STRICT_DNS",
	1: "LOGICAL_DNS",
}
var DnsDiscoveryType_value = map[string]int32{
	"STRICT_DNS":  0,
	"LOGICAL_DNS": 1,
}

func (DnsDiscoveryType) EnumDescriptor() ([]byte, []int) { return fileDescriptorTypes, []int{1} }

// DnsLookupType
//
// x-displayName: "DNS Lookup Type"
// Address family in which DNS resolver should lookup for addresses
type DnsLookupType int32

const (
	// x-displayName: "Automatic IPV4/V6 DNS"
	// DNS resolver will first perform a lookup for addresses in the IPv6 family
	// and fallback to lookup for addresses in the IPv4 family
	AUTO DnsLookupType = 0
	// x-displayName: "IPV4 Only"
	// DNS resolver will only perform a lookup for addresses in IPv4 family
	V4_ONLY DnsLookupType = 1
	// x-displayName: "IPV6 Only"
	// DNS resolver will only perform a lookup for addresses in IPv6 family
	V6_ONLY DnsLookupType = 2
)

var DnsLookupType_name = map[int32]string{
	0: "AUTO",
	1: "V4_ONLY",
	2: "V6_ONLY",
}
var DnsLookupType_value = map[string]int32{
	"AUTO":    0,
	"V4_ONLY": 1,
	"V6_ONLY": 2,
}

func (DnsLookupType) EnumDescriptor() ([]byte, []int) { return fileDescriptorTypes, []int{2} }

// SubsetFallbackPolicy
//
// x-displayName: "Subset Fallback Policy"
// Enumeration for SubsetFallbackPolicy if subset match is not found.
type SubsetFallbackPolicy int32

const (
	// x-displayName: "No Fallback"
	// The request fails as if the cluster had no endpoint matching the subset policy
	NO_FALLBACK SubsetFallbackPolicy = 0
	// x-displayName: "Any Endpoint"
	// Any cluster endpoint may be selected if the cluster had no endpoint matching the subset policy
	ANY_ENDPOINT SubsetFallbackPolicy = 1
	// x-displayName: "Default Subset"
	// Load balancing is done over endpoints matching default_subset if the cluster had no
	// endpoint matching the subset policy
	DEFAULT_SUBSET SubsetFallbackPolicy = 2
)

var SubsetFallbackPolicy_name = map[int32]string{
	0: "NO_FALLBACK",
	1: "ANY_ENDPOINT",
	2: "DEFAULT_SUBSET",
}
var SubsetFallbackPolicy_value = map[string]int32{
	"NO_FALLBACK":    0,
	"ANY_ENDPOINT":   1,
	"DEFAULT_SUBSET": 2,
}

func (SubsetFallbackPolicy) EnumDescriptor() ([]byte, []int) { return fileDescriptorTypes, []int{3} }

// EndpointSelectionPolicy
//
// x-displayName: "Endpoint Selection Policy"
// Policy for selection of endpoints from local site/remote site/both
type EndpointSelectionPolicy int32

const (
	// x-displayName: "All Endpoints"
	// Consider both remote and local endpoints for load balancing
	DISTRIBUTED EndpointSelectionPolicy = 0
	// x-displayName: "Local Endpoints Only"
	// LOCAL_ONLY: Consider only local endpoints for load balancing
	// Enable this policy to load balance ONLY among locally discovered endpoints
	LOCAL_ONLY EndpointSelectionPolicy = 1
	// x-displayName: "Local Endpoints Preferred"
	// Prefer the local endpoints for load balancing. If local endpoints are not present
	// remote endpoints will be considered.
	LOCAL_PREFERRED EndpointSelectionPolicy = 2
)

var EndpointSelectionPolicy_name = map[int32]string{
	0: "DISTRIBUTED",
	1: "LOCAL_ONLY",
	2: "LOCAL_PREFERRED",
}
var EndpointSelectionPolicy_value = map[string]int32{
	"DISTRIBUTED":     0,
	"LOCAL_ONLY":      1,
	"LOCAL_PREFERRED": 2,
}

func (EndpointSelectionPolicy) EnumDescriptor() ([]byte, []int) { return fileDescriptorTypes, []int{4} }

// OutlierDetectionType
//
// x-displayName: "Outlier Detection"
// Outlier detection and ejection is the process of dynamically determining whether some number
// of hosts in an upstream cluster are performing unlike the others and removing them from the
// healthy load balancing set. Outlier detection is a form of passive health checking.
//
// Algorithm
//
// 1. A endpoint is determined to be an outlier (based on configured number of consecutive_5xx
//    or consecutive_gateway_failures) .
// 2. If no endpoints have been ejected, loadbalancer will eject the host immediately.
//    Otherwise, it checks to make sure the number of ejected hosts is below the allowed threshold
//    (specified via max_ejection_percent setting). If the number of ejected hosts is above the
//    threshold, the host is not ejected.
// 3. The endpoint is ejected for some number of milliseconds. Ejection means that the endpoint is marked
//    unhealthy and will not be used during load balancing. The number of milliseconds is equal to the
//    base_ejection_time value multiplied by the number of times the host has been ejected.
// 4. An ejected endpoint will automatically be brought back into service after the ejection time
//    has been satisfied
//
type OutlierDetectionType struct {
	// consecutive_5xx
	//
	// x-displayName: "Consecutive 5xx Count"
	// x-example: "3"
	// If an upstream endpoint returns some number of consecutive 5xx, it will be ejected.
	// Note that in this case a 5xx means an actual 5xx respond code, or an event that would
	// cause the HTTP router to return one on the upstream’s behalf(reset, connection failure, etc.)
	// consecutive_5xx indicates the number of consecutive 5xx responses required before
	// a consecutive 5xx ejection occurs. Defaults to 5.
	Consecutive_5Xx uint32 `protobuf:"varint,1,opt,name=consecutive_5xx,json=consecutive5xx,proto3" json:"consecutive_5xx,omitempty"`
	// interval
	//
	// x-displayName: "Interval"
	// x-example: "5000"
	// The time interval between ejection analysis sweeps. This can result in
	// both new ejections as well as endpoints being returned to service. Defaults
	// to 10000ms or 10s. Specified in milliseconds.
	Interval uint32 `protobuf:"varint,2,opt,name=interval,proto3" json:"interval,omitempty"`
	// base_ejection_time
	//
	// x-displayName: "Base Ejection Time"
	// x-example: "20000"
	// The base time that a host is ejected for. The real time is equal to the
	// base time multiplied by the number of times the host has been ejected.
	// This causes hosts to get ejected for longer periods if they continue to fail.
	// Defaults to 30000ms or 30s. Specified in milliseconds.
	BaseEjectionTime uint32 `protobuf:"varint,3,opt,name=base_ejection_time,json=baseEjectionTime,proto3" json:"base_ejection_time,omitempty"`
	// max_ejection_percent
	//
	// x-displayName: "Max Ejection Percentage"
	// x-example: "20"
	// The maximum % of an upstream cluster that can be ejected due to outlier
	// detection. Defaults to 10% but will eject at least one host regardless of the value.
	MaxEjectionPercent uint32 `protobuf:"varint,4,opt,name=max_ejection_percent,json=maxEjectionPercent,proto3" json:"max_ejection_percent,omitempty"`
	// consecutive_gateway_failure
	//
	// x-displayName: "Consecutive Gateway Failure"
	// x-example: "5"
	// If an upstream endpoint returns some number of consecutive “gateway errors”
	// (502, 503 or 504 status code), it will be ejected. Note that this includes events
	// that would cause the HTTP router to return one of these status codes on the
	// upstream’s behalf (reset, connection failure, etc.).
	// consecutive_gateway_failure indicates the number of consecutive gateway failures
	// before a consecutive gateway failure ejection occurs. Defaults to 5.
	ConsecutiveGatewayFailure uint32 `protobuf:"varint,5,opt,name=consecutive_gateway_failure,json=consecutiveGatewayFailure,proto3" json:"consecutive_gateway_failure,omitempty"`
}

func (m *OutlierDetectionType) Reset()                    { *m = OutlierDetectionType{} }
func (*OutlierDetectionType) ProtoMessage()               {}
func (*OutlierDetectionType) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{0} }

func (m *OutlierDetectionType) GetConsecutive_5Xx() uint32 {
	if m != nil {
		return m.Consecutive_5Xx
	}
	return 0
}

func (m *OutlierDetectionType) GetInterval() uint32 {
	if m != nil {
		return m.Interval
	}
	return 0
}

func (m *OutlierDetectionType) GetBaseEjectionTime() uint32 {
	if m != nil {
		return m.BaseEjectionTime
	}
	return 0
}

func (m *OutlierDetectionType) GetMaxEjectionPercent() uint32 {
	if m != nil {
		return m.MaxEjectionPercent
	}
	return 0
}

func (m *OutlierDetectionType) GetConsecutiveGatewayFailure() uint32 {
	if m != nil {
		return m.ConsecutiveGatewayFailure
	}
	return 0
}

// EndpointSubsetSelectorType
//
// x-displayName: "Endpoint Subset Selector"
// Upstream cluster may be configured to divide its endpoints into subsets based on metadata
// attached to the endpoints. Routes may then specify the metadata that a endpoint must match in
// order to be selected by the load balancer.
// List of keys that define a cluster subset. Each endpoint that has a metadata value for all of
// the keys in the definition is added to that subset. If no endpoint has all the keys, no subsets
// result from the definition. A single endpoint may appear in multiple subsets if it matches
// multiple definitions.
type EndpointSubsetSelectorType struct {
	// keys
	//
	// x-displayName: "Keys"
	// x-example: "production"
	// List of keys that define a cluster subset.
	Keys []string `protobuf:"bytes,1,rep,name=keys" json:"keys,omitempty"`
}

func (m *EndpointSubsetSelectorType) Reset()                    { *m = EndpointSubsetSelectorType{} }
func (*EndpointSubsetSelectorType) ProtoMessage()               {}
func (*EndpointSubsetSelectorType) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{1} }

func (m *EndpointSubsetSelectorType) GetKeys() []string {
	if m != nil {
		return m.Keys
	}
	return nil
}

// CircuitBreaker
//
// x-displayName: "Circuit Breaker"
// CircuitBreaker provides a mechanism for watching failures in upstream connections or requests
// and if the failures reach a certain threshold, automatically fail subsequent requests which
// allows to apply back pressure on downstream quickly.
type CircuitBreaker struct {
	// priority
	//
	// x-displayName: "Priority"
	// Priority for the CircuitBreaker which can be either DEFAULT or HIGH. This implies that
	// we can have maximum of two CircuitBreakers per cluster. The priority of the route is
	// matched with priority of CircuitBreaker to select the CircuitBreaker
	Priority ves_io_schema4.RoutingPriority `protobuf:"varint,1,opt,name=priority,proto3,enum=ves.io.schema.RoutingPriority" json:"priority,omitempty"`
	// connection_limit
	//
	// x-displayName: "Connection Limit"
	// x-example: "100"
	// The maximum number of connections that loadbalancer will establish to all hosts in an upstream cluster.
	// In practice this is only applicable to TCP and HTTP/1.1 clusters since HTTP/2 uses a single connection to each host.
	// Remove endpoint out of load balancing decision, if number of connections reach connection limit.
	ConnectionLimit uint32 `protobuf:"varint,2,opt,name=connection_limit,json=connectionLimit,proto3" json:"connection_limit,omitempty"`
	// pending_requests
	//
	// x-displayName: "Pending Requests"
	// x-example: "20"
	// The maximum number of requests that will be queued while waiting for a ready connection pool connection.
	// Since HTTP/2 requests are sent over a single connection, this circuit breaker only comes into play as the
	// initial connection is created, as requests will be multiplexed immediately afterwards. For HTTP/1.1, requests
	// are added to the list of pending requests whenever there aren’t enough upstream connections available to
	// immediately dispatch the request, so this circuit breaker will remain in play for the lifetime of the process.
	// Remove endpoint out of load balancing decision, if pending request reach  pending_request.
	PendingRequests uint32 `protobuf:"varint,3,opt,name=pending_requests,json=pendingRequests,proto3" json:"pending_requests,omitempty"`
	// retries
	//
	// x-displayName: "Retry Count"
	// x-example: "10"
	// The maximum number of retries that can be outstanding to all hosts in a cluster at any given time.
	// Remove endpoint out of load balancing decision, if retries for request exceed this count.
	Retries uint32 `protobuf:"varint,4,opt,name=retries,proto3" json:"retries,omitempty"`
	// max_requests
	//
	// x-displayName: "Maximum Request Count"
	// x-example: "10"
	// The maximum number of requests that can be outstanding to all hosts in a cluster at any given time.
	// In practice this is applicable to HTTP/2 clusters since HTTP/1.1 clusters are governed by the
	// maximum connections (connection_limit).
	// Remove endpoint out of load balancing decision, if requests exceed this count.
	MaxRequests uint32 `protobuf:"varint,5,opt,name=max_requests,json=maxRequests,proto3" json:"max_requests,omitempty"`
}

func (m *CircuitBreaker) Reset()                    { *m = CircuitBreaker{} }
func (*CircuitBreaker) ProtoMessage()               {}
func (*CircuitBreaker) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{2} }

func (m *CircuitBreaker) GetPriority() ves_io_schema4.RoutingPriority {
	if m != nil {
		return m.Priority
	}
	return ves_io_schema4.DEFAULT
}

func (m *CircuitBreaker) GetConnectionLimit() uint32 {
	if m != nil {
		return m.ConnectionLimit
	}
	return 0
}

func (m *CircuitBreaker) GetPendingRequests() uint32 {
	if m != nil {
		return m.PendingRequests
	}
	return 0
}

func (m *CircuitBreaker) GetRetries() uint32 {
	if m != nil {
		return m.Retries
	}
	return 0
}

func (m *CircuitBreaker) GetMaxRequests() uint32 {
	if m != nil {
		return m.MaxRequests
	}
	return 0
}

// Http2ProtocolOptions
//
// x-displayName: "Http2 Protocol Options"
// Http2 Protocol options for upstream connections
type Http2ProtocolOptions struct {
	// enabled
	//
	// x-displayName: "HTTP2 Enabled"
	// Enable/disable Http2 Protocol for upstream connections. It is disabled by default.
	Enabled bool `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
}

func (m *Http2ProtocolOptions) Reset()                    { *m = Http2ProtocolOptions{} }
func (*Http2ProtocolOptions) ProtoMessage()               {}
func (*Http2ProtocolOptions) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{3} }

func (m *Http2ProtocolOptions) GetEnabled() bool {
	if m != nil {
		return m.Enabled
	}
	return false
}

// GlobalSpecType
//
// x-displayName: "Global Configuration Specification"
// Configuration specification for Cluster
type GlobalSpecType struct {
	// endpoints
	//
	// x-displayName: "Endpoints"
	// List of references to all endpoint objects that belong to this cluster.
	Endpoints []*ves_io_schema4.ObjectRefType `protobuf:"bytes,1,rep,name=endpoints" json:"endpoints,omitempty"`
	// health_checks
	//
	// x-displayName: "Health Checks"
	// List of references to healthcheck object for this cluster.
	HealthChecks []*ves_io_schema4.ObjectRefType `protobuf:"bytes,2,rep,name=health_checks,json=healthChecks" json:"health_checks,omitempty"`
	// loadbalancer_algorithm
	//
	// x-displayName: "LoadBalancer Algorithm"
	// When a connection to a endpoint in an upstream cluster is required, the loadbalancer uses
	// loadbalancer_algorithm to determine which host is selected.
	LoadbalancerAlgorithm LoadbalancerAlgorithm `protobuf:"varint,3,opt,name=loadbalancer_algorithm,json=loadbalancerAlgorithm,proto3,enum=ves.io.schema.cluster.LoadbalancerAlgorithm" json:"loadbalancer_algorithm,omitempty"`
	// circuit_breaker
	//
	// x-displayName: "Circuit Breaker"
	// CircuitBreaker provides a mechanism for watching failures in upstream connections or requests
	// and if the failures reach a certain threshold, automatically fail subsequent requests which
	// allows to apply back pressure on downstream quickly.
	CircuitBreaker *CircuitBreaker `protobuf:"bytes,4,opt,name=circuit_breaker,json=circuitBreaker" json:"circuit_breaker,omitempty"`
	// endpoint_subsets
	//
	// x-displayName: "Endpoint Subsets"
	// Cluster may be configured to divide its endpoints into subsets based on metadata
	// attached to the endpoints. Routes may then specify the metadata that a endpoint must match in
	// order to be selected by the load balancer.
	//
	// endpoint_subsets is list of subsets for this cluster. Each entry in this list has definition for a subset
	// (which is collection of keys)
	//
	// During routing, the route’s metadata match configuration is used to find a specific subset.
	// If there is a subset with the exact keys and values specified by the route, the subset is used
	// for load balancing. Otherwise, the fallback policy is used. The cluster’s subset configuration must,
	// therefore, contain a definition that has the same keys as a given route in order for subset load
	// balancing to occur.
	//
	// Example:
	//
	// RouteConfig
	//
	// routes:
	// - match:
	//   - headers: []
	//     path:
	//       path: /1.log
	//     query_params: []
	//   routeDestination:
	//     destinations:
	//     - cluster:
	//       - kind: cluster.Object
	//         uid: 00000000-0000-0000-0001-000000000005
	//     endpointSubsets:
	//       site: india
	//
	// EndpointConfig
	//
	// metadata:
	// labels:
	//   deployment: debug
	//   site: india
	// name: end-1
	// uid: end-1
	//
	// ClusterConfig
	//
	// gcSpec:
	//  defaultSubset:
	//    stage: production
	//  fallbackPolicy: DEFAULT_SUBSET
	//  endpointSubsets:
	//  - keys:
	//    - site
	//  - keys:
	//    - stage
	//    - app
	//
	// Assume the below endpoints are defined and associated with the cluster.
	//
	// Endpoint   Labels
	// --------   ------
	//
	//  ep1       stage: production, site: india
	//  ep2       stage: deployment, site: us
	//  ep3       stage: production, app: hr
	//  ep4       site: india
	//
	// The following table describes some routes and the result of their application
	// to the cluster. The subset definition for cluster is assumed to be same as given
	// above in the ClusterConfig section
	//
	// RouteMatch Criteria             Subset        Reason
	// -------------------             ------        ------
	//
	//  site: india                    ep1, ep4     Subset of endpoints selected
	//  site: us                       ep2          Subset of endpoints selected
	//  app: hr                        ep1, ep3     Fallback: No subset selector for "app" alone
	//  stage: production, app: hr     ep3          Subset of endpoints selected
	//  other: x                       ep1, ep3     Fallback: No subset selector for “other”
	//  (none)                         ep1, ep3     Fallback: No subset requested
	//
	EndpointSubsets []*EndpointSubsetSelectorType `protobuf:"bytes,5,rep,name=endpoint_subsets,json=endpointSubsets" json:"endpoint_subsets,omitempty"`
	// default_subset
	//
	// x-displayName: "Default Subset"
	// x-example: "key:value"
	// List of key-value pairs that define default subset. This subset can be referred in fallback_policy
	// which gets used when route specifies no metadata or no subset matching the metadata exists.
	DefaultSubset map[string]string `protobuf:"bytes,6,rep,name=default_subset,json=defaultSubset" json:"default_subset,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// fallback_policy
	//
	// x-displayName: "Fallback Policy"
	// If subsets are configured and a route specifies no metadata or no subset matching the metadata exists,
	// the subset load balancer initiates its fallback policy. The default policy is NO_FALLBACK, in which case
	// the request fails as if the cluster had no endpoints. Conversely, the ANY_ENDPOINT fallback policy
	// load balances across all endpoints in the cluster, without regard to endpoint metadata.
	// Finally, the DEFAULT_SUBSET causes fallback to load balance among endpoints that match a specific set of
	// metadata defined as default_set
	FallbackPolicy SubsetFallbackPolicy `protobuf:"varint,7,opt,name=fallback_policy,json=fallbackPolicy,proto3,enum=ves.io.schema.cluster.SubsetFallbackPolicy" json:"fallback_policy,omitempty"`
	// tls_parameters
	//
	// x-displayName: "TLS Parameters"
	// TLS parameters to access upstream endpoints for this cluster
	TlsParameters *ves_io_schema4.UpstreamTlsParamsType `protobuf:"bytes,8,opt,name=tls_parameters,json=tlsParameters" json:"tls_parameters,omitempty"`
	// connection_timeout
	//
	// x-displayName: "Connection Timeout"
	// x-example: "4000"
	// The timeout for new network connections to endpoints in the cluster.
	// This is specified in milliseconds. The default value is 2 seconds
	ConnectionTimeout uint32 `protobuf:"varint,9,opt,name=connection_timeout,json=connectionTimeout,proto3" json:"connection_timeout,omitempty"`
	// http_idle_timeout
	//
	// x-displayName: "HTTP Idle Timeout"
	// x-example: "60000"
	// The idle timeout for upstream connection pool connections. The idle timeout is defined as the
	// period in which there are no active requests. When the idle timeout is reached the connection
	// will be closed. Note that request based timeouts mean that HTTP/2 PINGs will not keep the connection alive.
	// This is specified in milliseconds. The default value is 5 minutes.
	HttpIdleTimeout uint32 `protobuf:"varint,10,opt,name=http_idle_timeout,json=httpIdleTimeout,proto3" json:"http_idle_timeout,omitempty"`
	// outlier_detection
	//
	// x-displayName: "Outlier Detection"
	// Outlier detection and ejection is the process of dynamically determining whether some number
	// of hosts in an upstream cluster are performing unlike the others and removing them from the
	// healthy load balancing set. Outlier detection is a form of passive health checking.
	OutlierDetection *OutlierDetectionType `protobuf:"bytes,12,opt,name=outlier_detection,json=outlierDetection" json:"outlier_detection,omitempty"`
	// endpoint_selection
	//
	// x-displayName: "Endpoint Selection"
	// Policy for selection of endpoints from local site or remote site or both
	EndpointSelection EndpointSelectionPolicy `protobuf:"varint,13,opt,name=endpoint_selection,json=endpointSelection,proto3,enum=ves.io.schema.cluster.EndpointSelectionPolicy" json:"endpoint_selection,omitempty"`
	// dns_lookup_family
	//
	// x-displayName: "DNS Lookup Family"
	// IP address family within which the DNS resolution is attempted. Default is AUTO mode
	DnsLookupFamily DnsLookupType `protobuf:"varint,14,opt,name=dns_lookup_family,json=dnsLookupFamily,proto3,enum=ves.io.schema.cluster.DnsLookupType" json:"dns_lookup_family,omitempty"`
	// dns_discovery_type
	//
	// x-displayName: "DNS Discovery Type"
	// Specifies how DNS resolution has to be done on members of cluster
	DnsDiscoveryType DnsDiscoveryType `protobuf:"varint,15,opt,name=dns_discovery_type,json=dnsDiscoveryType,proto3,enum=ves.io.schema.cluster.DnsDiscoveryType" json:"dns_discovery_type,omitempty"`
	// http2_options
	//
	// x-displayName: "Http2 Protocol Configuration"
	// Http2 Protocol options for upstream connections
	Http2Options *Http2ProtocolOptions `protobuf:"bytes,16,opt,name=http2_options,json=http2Options" json:"http2_options,omitempty"`
}

func (m *GlobalSpecType) Reset()                    { *m = GlobalSpecType{} }
func (*GlobalSpecType) ProtoMessage()               {}
func (*GlobalSpecType) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{4} }

func (m *GlobalSpecType) GetEndpoints() []*ves_io_schema4.ObjectRefType {
	if m != nil {
		return m.Endpoints
	}
	return nil
}

func (m *GlobalSpecType) GetHealthChecks() []*ves_io_schema4.ObjectRefType {
	if m != nil {
		return m.HealthChecks
	}
	return nil
}

func (m *GlobalSpecType) GetLoadbalancerAlgorithm() LoadbalancerAlgorithm {
	if m != nil {
		return m.LoadbalancerAlgorithm
	}
	return ROUND_ROBIN
}

func (m *GlobalSpecType) GetCircuitBreaker() *CircuitBreaker {
	if m != nil {
		return m.CircuitBreaker
	}
	return nil
}

func (m *GlobalSpecType) GetEndpointSubsets() []*EndpointSubsetSelectorType {
	if m != nil {
		return m.EndpointSubsets
	}
	return nil
}

func (m *GlobalSpecType) GetDefaultSubset() map[string]string {
	if m != nil {
		return m.DefaultSubset
	}
	return nil
}

func (m *GlobalSpecType) GetFallbackPolicy() SubsetFallbackPolicy {
	if m != nil {
		return m.FallbackPolicy
	}
	return NO_FALLBACK
}

func (m *GlobalSpecType) GetTlsParameters() *ves_io_schema4.UpstreamTlsParamsType {
	if m != nil {
		return m.TlsParameters
	}
	return nil
}

func (m *GlobalSpecType) GetConnectionTimeout() uint32 {
	if m != nil {
		return m.ConnectionTimeout
	}
	return 0
}

func (m *GlobalSpecType) GetHttpIdleTimeout() uint32 {
	if m != nil {
		return m.HttpIdleTimeout
	}
	return 0
}

func (m *GlobalSpecType) GetOutlierDetection() *OutlierDetectionType {
	if m != nil {
		return m.OutlierDetection
	}
	return nil
}

func (m *GlobalSpecType) GetEndpointSelection() EndpointSelectionPolicy {
	if m != nil {
		return m.EndpointSelection
	}
	return DISTRIBUTED
}

func (m *GlobalSpecType) GetDnsLookupFamily() DnsLookupType {
	if m != nil {
		return m.DnsLookupFamily
	}
	return AUTO
}

func (m *GlobalSpecType) GetDnsDiscoveryType() DnsDiscoveryType {
	if m != nil {
		return m.DnsDiscoveryType
	}
	return STRICT_DNS
}

func (m *GlobalSpecType) GetHttp2Options() *Http2ProtocolOptions {
	if m != nil {
		return m.Http2Options
	}
	return nil
}

// Create cluster
//
// x-displayName: "Create Configuration Specification"
// Create cluster will create the object in the storage backend for namespace metadata.namespace
type CreateSpecType struct {
	Endpoints             []*ves_io_schema4.ObjectRefType       `protobuf:"bytes,1,rep,name=endpoints" json:"endpoints,omitempty"`
	HealthChecks          []*ves_io_schema4.ObjectRefType       `protobuf:"bytes,2,rep,name=health_checks,json=healthChecks" json:"health_checks,omitempty"`
	LoadbalancerAlgorithm LoadbalancerAlgorithm                 `protobuf:"varint,3,opt,name=loadbalancer_algorithm,json=loadbalancerAlgorithm,proto3,enum=ves.io.schema.cluster.LoadbalancerAlgorithm" json:"loadbalancer_algorithm,omitempty"`
	CircuitBreaker        *CircuitBreaker                       `protobuf:"bytes,4,opt,name=circuit_breaker,json=circuitBreaker" json:"circuit_breaker,omitempty"`
	EndpointSubsets       []*EndpointSubsetSelectorType         `protobuf:"bytes,5,rep,name=endpoint_subsets,json=endpointSubsets" json:"endpoint_subsets,omitempty"`
	DefaultSubset         map[string]string                     `protobuf:"bytes,6,rep,name=default_subset,json=defaultSubset" json:"default_subset,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	FallbackPolicy        SubsetFallbackPolicy                  `protobuf:"varint,7,opt,name=fallback_policy,json=fallbackPolicy,proto3,enum=ves.io.schema.cluster.SubsetFallbackPolicy" json:"fallback_policy,omitempty"`
	TlsParameters         *ves_io_schema4.UpstreamTlsParamsType `protobuf:"bytes,8,opt,name=tls_parameters,json=tlsParameters" json:"tls_parameters,omitempty"`
	ConnectionTimeout     uint32                                `protobuf:"varint,9,opt,name=connection_timeout,json=connectionTimeout,proto3" json:"connection_timeout,omitempty"`
	HttpIdleTimeout       uint32                                `protobuf:"varint,10,opt,name=http_idle_timeout,json=httpIdleTimeout,proto3" json:"http_idle_timeout,omitempty"`
	OutlierDetection      *OutlierDetectionType                 `protobuf:"bytes,12,opt,name=outlier_detection,json=outlierDetection" json:"outlier_detection,omitempty"`
	EndpointSelection     EndpointSelectionPolicy               `protobuf:"varint,13,opt,name=endpoint_selection,json=endpointSelection,proto3,enum=ves.io.schema.cluster.EndpointSelectionPolicy" json:"endpoint_selection,omitempty"`
	Http2Options          *Http2ProtocolOptions                 `protobuf:"bytes,16,opt,name=http2_options,json=http2Options" json:"http2_options,omitempty"`
}

func (m *CreateSpecType) Reset()                    { *m = CreateSpecType{} }
func (*CreateSpecType) ProtoMessage()               {}
func (*CreateSpecType) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{5} }

func (m *CreateSpecType) GetEndpoints() []*ves_io_schema4.ObjectRefType {
	if m != nil {
		return m.Endpoints
	}
	return nil
}

func (m *CreateSpecType) GetHealthChecks() []*ves_io_schema4.ObjectRefType {
	if m != nil {
		return m.HealthChecks
	}
	return nil
}

func (m *CreateSpecType) GetLoadbalancerAlgorithm() LoadbalancerAlgorithm {
	if m != nil {
		return m.LoadbalancerAlgorithm
	}
	return ROUND_ROBIN
}

func (m *CreateSpecType) GetCircuitBreaker() *CircuitBreaker {
	if m != nil {
		return m.CircuitBreaker
	}
	return nil
}

func (m *CreateSpecType) GetEndpointSubsets() []*EndpointSubsetSelectorType {
	if m != nil {
		return m.EndpointSubsets
	}
	return nil
}

func (m *CreateSpecType) GetDefaultSubset() map[string]string {
	if m != nil {
		return m.DefaultSubset
	}
	return nil
}

func (m *CreateSpecType) GetFallbackPolicy() SubsetFallbackPolicy {
	if m != nil {
		return m.FallbackPolicy
	}
	return NO_FALLBACK
}

func (m *CreateSpecType) GetTlsParameters() *ves_io_schema4.UpstreamTlsParamsType {
	if m != nil {
		return m.TlsParameters
	}
	return nil
}

func (m *CreateSpecType) GetConnectionTimeout() uint32 {
	if m != nil {
		return m.ConnectionTimeout
	}
	return 0
}

func (m *CreateSpecType) GetHttpIdleTimeout() uint32 {
	if m != nil {
		return m.HttpIdleTimeout
	}
	return 0
}

func (m *CreateSpecType) GetOutlierDetection() *OutlierDetectionType {
	if m != nil {
		return m.OutlierDetection
	}
	return nil
}

func (m *CreateSpecType) GetEndpointSelection() EndpointSelectionPolicy {
	if m != nil {
		return m.EndpointSelection
	}
	return DISTRIBUTED
}

func (m *CreateSpecType) GetHttp2Options() *Http2ProtocolOptions {
	if m != nil {
		return m.Http2Options
	}
	return nil
}

// Replace cluster
//
// x-displayName: "Replace Configuration Specification"
// Replacing an cluster object will update the object by replacing the existing spec with the provided one.
// For read-then-write operations a resourceVersion mismatch will occur if the object was modified between the read and write
type ReplaceSpecType struct {
	Endpoints             []*ves_io_schema4.ObjectRefType       `protobuf:"bytes,1,rep,name=endpoints" json:"endpoints,omitempty"`
	HealthChecks          []*ves_io_schema4.ObjectRefType       `protobuf:"bytes,2,rep,name=health_checks,json=healthChecks" json:"health_checks,omitempty"`
	LoadbalancerAlgorithm LoadbalancerAlgorithm                 `protobuf:"varint,3,opt,name=loadbalancer_algorithm,json=loadbalancerAlgorithm,proto3,enum=ves.io.schema.cluster.LoadbalancerAlgorithm" json:"loadbalancer_algorithm,omitempty"`
	CircuitBreaker        *CircuitBreaker                       `protobuf:"bytes,4,opt,name=circuit_breaker,json=circuitBreaker" json:"circuit_breaker,omitempty"`
	EndpointSubsets       []*EndpointSubsetSelectorType         `protobuf:"bytes,5,rep,name=endpoint_subsets,json=endpointSubsets" json:"endpoint_subsets,omitempty"`
	DefaultSubset         map[string]string                     `protobuf:"bytes,6,rep,name=default_subset,json=defaultSubset" json:"default_subset,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	FallbackPolicy        SubsetFallbackPolicy                  `protobuf:"varint,7,opt,name=fallback_policy,json=fallbackPolicy,proto3,enum=ves.io.schema.cluster.SubsetFallbackPolicy" json:"fallback_policy,omitempty"`
	TlsParameters         *ves_io_schema4.UpstreamTlsParamsType `protobuf:"bytes,8,opt,name=tls_parameters,json=tlsParameters" json:"tls_parameters,omitempty"`
	ConnectionTimeout     uint32                                `protobuf:"varint,9,opt,name=connection_timeout,json=connectionTimeout,proto3" json:"connection_timeout,omitempty"`
	HttpIdleTimeout       uint32                                `protobuf:"varint,10,opt,name=http_idle_timeout,json=httpIdleTimeout,proto3" json:"http_idle_timeout,omitempty"`
	OutlierDetection      *OutlierDetectionType                 `protobuf:"bytes,12,opt,name=outlier_detection,json=outlierDetection" json:"outlier_detection,omitempty"`
	EndpointSelection     EndpointSelectionPolicy               `protobuf:"varint,13,opt,name=endpoint_selection,json=endpointSelection,proto3,enum=ves.io.schema.cluster.EndpointSelectionPolicy" json:"endpoint_selection,omitempty"`
	Http2Options          *Http2ProtocolOptions                 `protobuf:"bytes,16,opt,name=http2_options,json=http2Options" json:"http2_options,omitempty"`
}

func (m *ReplaceSpecType) Reset()                    { *m = ReplaceSpecType{} }
func (*ReplaceSpecType) ProtoMessage()               {}
func (*ReplaceSpecType) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{6} }

func (m *ReplaceSpecType) GetEndpoints() []*ves_io_schema4.ObjectRefType {
	if m != nil {
		return m.Endpoints
	}
	return nil
}

func (m *ReplaceSpecType) GetHealthChecks() []*ves_io_schema4.ObjectRefType {
	if m != nil {
		return m.HealthChecks
	}
	return nil
}

func (m *ReplaceSpecType) GetLoadbalancerAlgorithm() LoadbalancerAlgorithm {
	if m != nil {
		return m.LoadbalancerAlgorithm
	}
	return ROUND_ROBIN
}

func (m *ReplaceSpecType) GetCircuitBreaker() *CircuitBreaker {
	if m != nil {
		return m.CircuitBreaker
	}
	return nil
}

func (m *ReplaceSpecType) GetEndpointSubsets() []*EndpointSubsetSelectorType {
	if m != nil {
		return m.EndpointSubsets
	}
	return nil
}

func (m *ReplaceSpecType) GetDefaultSubset() map[string]string {
	if m != nil {
		return m.DefaultSubset
	}
	return nil
}

func (m *ReplaceSpecType) GetFallbackPolicy() SubsetFallbackPolicy {
	if m != nil {
		return m.FallbackPolicy
	}
	return NO_FALLBACK
}

func (m *ReplaceSpecType) GetTlsParameters() *ves_io_schema4.UpstreamTlsParamsType {
	if m != nil {
		return m.TlsParameters
	}
	return nil
}

func (m *ReplaceSpecType) GetConnectionTimeout() uint32 {
	if m != nil {
		return m.ConnectionTimeout
	}
	return 0
}

func (m *ReplaceSpecType) GetHttpIdleTimeout() uint32 {
	if m != nil {
		return m.HttpIdleTimeout
	}
	return 0
}

func (m *ReplaceSpecType) GetOutlierDetection() *OutlierDetectionType {
	if m != nil {
		return m.OutlierDetection
	}
	return nil
}

func (m *ReplaceSpecType) GetEndpointSelection() EndpointSelectionPolicy {
	if m != nil {
		return m.EndpointSelection
	}
	return DISTRIBUTED
}

func (m *ReplaceSpecType) GetHttp2Options() *Http2ProtocolOptions {
	if m != nil {
		return m.Http2Options
	}
	return nil
}

// Get cluster
//
// x-displayName: "Get Configuration Specification"
// Get cluster will get the object from the storage backend for namespace metadata.namespace
type GetSpecType struct {
	Endpoints             []*ves_io_schema4.ObjectRefType       `protobuf:"bytes,1,rep,name=endpoints" json:"endpoints,omitempty"`
	HealthChecks          []*ves_io_schema4.ObjectRefType       `protobuf:"bytes,2,rep,name=health_checks,json=healthChecks" json:"health_checks,omitempty"`
	LoadbalancerAlgorithm LoadbalancerAlgorithm                 `protobuf:"varint,3,opt,name=loadbalancer_algorithm,json=loadbalancerAlgorithm,proto3,enum=ves.io.schema.cluster.LoadbalancerAlgorithm" json:"loadbalancer_algorithm,omitempty"`
	CircuitBreaker        *CircuitBreaker                       `protobuf:"bytes,4,opt,name=circuit_breaker,json=circuitBreaker" json:"circuit_breaker,omitempty"`
	EndpointSubsets       []*EndpointSubsetSelectorType         `protobuf:"bytes,5,rep,name=endpoint_subsets,json=endpointSubsets" json:"endpoint_subsets,omitempty"`
	DefaultSubset         map[string]string                     `protobuf:"bytes,6,rep,name=default_subset,json=defaultSubset" json:"default_subset,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	FallbackPolicy        SubsetFallbackPolicy                  `protobuf:"varint,7,opt,name=fallback_policy,json=fallbackPolicy,proto3,enum=ves.io.schema.cluster.SubsetFallbackPolicy" json:"fallback_policy,omitempty"`
	TlsParameters         *ves_io_schema4.UpstreamTlsParamsType `protobuf:"bytes,8,opt,name=tls_parameters,json=tlsParameters" json:"tls_parameters,omitempty"`
	ConnectionTimeout     uint32                                `protobuf:"varint,9,opt,name=connection_timeout,json=connectionTimeout,proto3" json:"connection_timeout,omitempty"`
	HttpIdleTimeout       uint32                                `protobuf:"varint,10,opt,name=http_idle_timeout,json=httpIdleTimeout,proto3" json:"http_idle_timeout,omitempty"`
	OutlierDetection      *OutlierDetectionType                 `protobuf:"bytes,12,opt,name=outlier_detection,json=outlierDetection" json:"outlier_detection,omitempty"`
	EndpointSelection     EndpointSelectionPolicy               `protobuf:"varint,13,opt,name=endpoint_selection,json=endpointSelection,proto3,enum=ves.io.schema.cluster.EndpointSelectionPolicy" json:"endpoint_selection,omitempty"`
	Http2Options          *Http2ProtocolOptions                 `protobuf:"bytes,16,opt,name=http2_options,json=http2Options" json:"http2_options,omitempty"`
}

func (m *GetSpecType) Reset()                    { *m = GetSpecType{} }
func (*GetSpecType) ProtoMessage()               {}
func (*GetSpecType) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{7} }

func (m *GetSpecType) GetEndpoints() []*ves_io_schema4.ObjectRefType {
	if m != nil {
		return m.Endpoints
	}
	return nil
}

func (m *GetSpecType) GetHealthChecks() []*ves_io_schema4.ObjectRefType {
	if m != nil {
		return m.HealthChecks
	}
	return nil
}

func (m *GetSpecType) GetLoadbalancerAlgorithm() LoadbalancerAlgorithm {
	if m != nil {
		return m.LoadbalancerAlgorithm
	}
	return ROUND_ROBIN
}

func (m *GetSpecType) GetCircuitBreaker() *CircuitBreaker {
	if m != nil {
		return m.CircuitBreaker
	}
	return nil
}

func (m *GetSpecType) GetEndpointSubsets() []*EndpointSubsetSelectorType {
	if m != nil {
		return m.EndpointSubsets
	}
	return nil
}

func (m *GetSpecType) GetDefaultSubset() map[string]string {
	if m != nil {
		return m.DefaultSubset
	}
	return nil
}

func (m *GetSpecType) GetFallbackPolicy() SubsetFallbackPolicy {
	if m != nil {
		return m.FallbackPolicy
	}
	return NO_FALLBACK
}

func (m *GetSpecType) GetTlsParameters() *ves_io_schema4.UpstreamTlsParamsType {
	if m != nil {
		return m.TlsParameters
	}
	return nil
}

func (m *GetSpecType) GetConnectionTimeout() uint32 {
	if m != nil {
		return m.ConnectionTimeout
	}
	return 0
}

func (m *GetSpecType) GetHttpIdleTimeout() uint32 {
	if m != nil {
		return m.HttpIdleTimeout
	}
	return 0
}

func (m *GetSpecType) GetOutlierDetection() *OutlierDetectionType {
	if m != nil {
		return m.OutlierDetection
	}
	return nil
}

func (m *GetSpecType) GetEndpointSelection() EndpointSelectionPolicy {
	if m != nil {
		return m.EndpointSelection
	}
	return DISTRIBUTED
}

func (m *GetSpecType) GetHttp2Options() *Http2ProtocolOptions {
	if m != nil {
		return m.Http2Options
	}
	return nil
}

func init() {
	proto.RegisterType((*OutlierDetectionType)(nil), "ves.io.schema.cluster.OutlierDetectionType")
	golang_proto.RegisterType((*OutlierDetectionType)(nil), "ves.io.schema.cluster.OutlierDetectionType")
	proto.RegisterType((*EndpointSubsetSelectorType)(nil), "ves.io.schema.cluster.EndpointSubsetSelectorType")
	golang_proto.RegisterType((*EndpointSubsetSelectorType)(nil), "ves.io.schema.cluster.EndpointSubsetSelectorType")
	proto.RegisterType((*CircuitBreaker)(nil), "ves.io.schema.cluster.CircuitBreaker")
	golang_proto.RegisterType((*CircuitBreaker)(nil), "ves.io.schema.cluster.CircuitBreaker")
	proto.RegisterType((*Http2ProtocolOptions)(nil), "ves.io.schema.cluster.Http2ProtocolOptions")
	golang_proto.RegisterType((*Http2ProtocolOptions)(nil), "ves.io.schema.cluster.Http2ProtocolOptions")
	proto.RegisterType((*GlobalSpecType)(nil), "ves.io.schema.cluster.GlobalSpecType")
	golang_proto.RegisterType((*GlobalSpecType)(nil), "ves.io.schema.cluster.GlobalSpecType")
	proto.RegisterType((*CreateSpecType)(nil), "ves.io.schema.cluster.CreateSpecType")
	golang_proto.RegisterType((*CreateSpecType)(nil), "ves.io.schema.cluster.CreateSpecType")
	proto.RegisterType((*ReplaceSpecType)(nil), "ves.io.schema.cluster.ReplaceSpecType")
	golang_proto.RegisterType((*ReplaceSpecType)(nil), "ves.io.schema.cluster.ReplaceSpecType")
	proto.RegisterType((*GetSpecType)(nil), "ves.io.schema.cluster.GetSpecType")
	golang_proto.RegisterType((*GetSpecType)(nil), "ves.io.schema.cluster.GetSpecType")
	proto.RegisterEnum("ves.io.schema.cluster.LoadbalancerAlgorithm", LoadbalancerAlgorithm_name, LoadbalancerAlgorithm_value)
	golang_proto.RegisterEnum("ves.io.schema.cluster.LoadbalancerAlgorithm", LoadbalancerAlgorithm_name, LoadbalancerAlgorithm_value)
	proto.RegisterEnum("ves.io.schema.cluster.DnsDiscoveryType", DnsDiscoveryType_name, DnsDiscoveryType_value)
	golang_proto.RegisterEnum("ves.io.schema.cluster.DnsDiscoveryType", DnsDiscoveryType_name, DnsDiscoveryType_value)
	proto.RegisterEnum("ves.io.schema.cluster.DnsLookupType", DnsLookupType_name, DnsLookupType_value)
	golang_proto.RegisterEnum("ves.io.schema.cluster.DnsLookupType", DnsLookupType_name, DnsLookupType_value)
	proto.RegisterEnum("ves.io.schema.cluster.SubsetFallbackPolicy", SubsetFallbackPolicy_name, SubsetFallbackPolicy_value)
	golang_proto.RegisterEnum("ves.io.schema.cluster.SubsetFallbackPolicy", SubsetFallbackPolicy_name, SubsetFallbackPolicy_value)
	proto.RegisterEnum("ves.io.schema.cluster.EndpointSelectionPolicy", EndpointSelectionPolicy_name, EndpointSelectionPolicy_value)
	golang_proto.RegisterEnum("ves.io.schema.cluster.EndpointSelectionPolicy", EndpointSelectionPolicy_name, EndpointSelectionPolicy_value)
}
func (x LoadbalancerAlgorithm) String() string {
	s, ok := LoadbalancerAlgorithm_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x DnsDiscoveryType) String() string {
	s, ok := DnsDiscoveryType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x DnsLookupType) String() string {
	s, ok := DnsLookupType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x SubsetFallbackPolicy) String() string {
	s, ok := SubsetFallbackPolicy_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x EndpointSelectionPolicy) String() string {
	s, ok := EndpointSelectionPolicy_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *OutlierDetectionType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*OutlierDetectionType)
	if !ok {
		that2, ok := that.(OutlierDetectionType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Consecutive_5Xx != that1.Consecutive_5Xx {
		return false
	}
	if this.Interval != that1.Interval {
		return false
	}
	if this.BaseEjectionTime != that1.BaseEjectionTime {
		return false
	}
	if this.MaxEjectionPercent != that1.MaxEjectionPercent {
		return false
	}
	if this.ConsecutiveGatewayFailure != that1.ConsecutiveGatewayFailure {
		return false
	}
	return true
}
func (this *EndpointSubsetSelectorType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*EndpointSubsetSelectorType)
	if !ok {
		that2, ok := that.(EndpointSubsetSelectorType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Keys) != len(that1.Keys) {
		return false
	}
	for i := range this.Keys {
		if this.Keys[i] != that1.Keys[i] {
			return false
		}
	}
	return true
}
func (this *CircuitBreaker) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CircuitBreaker)
	if !ok {
		that2, ok := that.(CircuitBreaker)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Priority != that1.Priority {
		return false
	}
	if this.ConnectionLimit != that1.ConnectionLimit {
		return false
	}
	if this.PendingRequests != that1.PendingRequests {
		return false
	}
	if this.Retries != that1.Retries {
		return false
	}
	if this.MaxRequests != that1.MaxRequests {
		return false
	}
	return true
}
func (this *Http2ProtocolOptions) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Http2ProtocolOptions)
	if !ok {
		that2, ok := that.(Http2ProtocolOptions)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Enabled != that1.Enabled {
		return false
	}
	return true
}
func (this *GlobalSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType)
	if !ok {
		that2, ok := that.(GlobalSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Endpoints) != len(that1.Endpoints) {
		return false
	}
	for i := range this.Endpoints {
		if !this.Endpoints[i].Equal(that1.Endpoints[i]) {
			return false
		}
	}
	if len(this.HealthChecks) != len(that1.HealthChecks) {
		return false
	}
	for i := range this.HealthChecks {
		if !this.HealthChecks[i].Equal(that1.HealthChecks[i]) {
			return false
		}
	}
	if this.LoadbalancerAlgorithm != that1.LoadbalancerAlgorithm {
		return false
	}
	if !this.CircuitBreaker.Equal(that1.CircuitBreaker) {
		return false
	}
	if len(this.EndpointSubsets) != len(that1.EndpointSubsets) {
		return false
	}
	for i := range this.EndpointSubsets {
		if !this.EndpointSubsets[i].Equal(that1.EndpointSubsets[i]) {
			return false
		}
	}
	if len(this.DefaultSubset) != len(that1.DefaultSubset) {
		return false
	}
	for i := range this.DefaultSubset {
		if this.DefaultSubset[i] != that1.DefaultSubset[i] {
			return false
		}
	}
	if this.FallbackPolicy != that1.FallbackPolicy {
		return false
	}
	if !this.TlsParameters.Equal(that1.TlsParameters) {
		return false
	}
	if this.ConnectionTimeout != that1.ConnectionTimeout {
		return false
	}
	if this.HttpIdleTimeout != that1.HttpIdleTimeout {
		return false
	}
	if !this.OutlierDetection.Equal(that1.OutlierDetection) {
		return false
	}
	if this.EndpointSelection != that1.EndpointSelection {
		return false
	}
	if this.DnsLookupFamily != that1.DnsLookupFamily {
		return false
	}
	if this.DnsDiscoveryType != that1.DnsDiscoveryType {
		return false
	}
	if !this.Http2Options.Equal(that1.Http2Options) {
		return false
	}
	return true
}
func (this *CreateSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType)
	if !ok {
		that2, ok := that.(CreateSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Endpoints) != len(that1.Endpoints) {
		return false
	}
	for i := range this.Endpoints {
		if !this.Endpoints[i].Equal(that1.Endpoints[i]) {
			return false
		}
	}
	if len(this.HealthChecks) != len(that1.HealthChecks) {
		return false
	}
	for i := range this.HealthChecks {
		if !this.HealthChecks[i].Equal(that1.HealthChecks[i]) {
			return false
		}
	}
	if this.LoadbalancerAlgorithm != that1.LoadbalancerAlgorithm {
		return false
	}
	if !this.CircuitBreaker.Equal(that1.CircuitBreaker) {
		return false
	}
	if len(this.EndpointSubsets) != len(that1.EndpointSubsets) {
		return false
	}
	for i := range this.EndpointSubsets {
		if !this.EndpointSubsets[i].Equal(that1.EndpointSubsets[i]) {
			return false
		}
	}
	if len(this.DefaultSubset) != len(that1.DefaultSubset) {
		return false
	}
	for i := range this.DefaultSubset {
		if this.DefaultSubset[i] != that1.DefaultSubset[i] {
			return false
		}
	}
	if this.FallbackPolicy != that1.FallbackPolicy {
		return false
	}
	if !this.TlsParameters.Equal(that1.TlsParameters) {
		return false
	}
	if this.ConnectionTimeout != that1.ConnectionTimeout {
		return false
	}
	if this.HttpIdleTimeout != that1.HttpIdleTimeout {
		return false
	}
	if !this.OutlierDetection.Equal(that1.OutlierDetection) {
		return false
	}
	if this.EndpointSelection != that1.EndpointSelection {
		return false
	}
	if !this.Http2Options.Equal(that1.Http2Options) {
		return false
	}
	return true
}
func (this *ReplaceSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType)
	if !ok {
		that2, ok := that.(ReplaceSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Endpoints) != len(that1.Endpoints) {
		return false
	}
	for i := range this.Endpoints {
		if !this.Endpoints[i].Equal(that1.Endpoints[i]) {
			return false
		}
	}
	if len(this.HealthChecks) != len(that1.HealthChecks) {
		return false
	}
	for i := range this.HealthChecks {
		if !this.HealthChecks[i].Equal(that1.HealthChecks[i]) {
			return false
		}
	}
	if this.LoadbalancerAlgorithm != that1.LoadbalancerAlgorithm {
		return false
	}
	if !this.CircuitBreaker.Equal(that1.CircuitBreaker) {
		return false
	}
	if len(this.EndpointSubsets) != len(that1.EndpointSubsets) {
		return false
	}
	for i := range this.EndpointSubsets {
		if !this.EndpointSubsets[i].Equal(that1.EndpointSubsets[i]) {
			return false
		}
	}
	if len(this.DefaultSubset) != len(that1.DefaultSubset) {
		return false
	}
	for i := range this.DefaultSubset {
		if this.DefaultSubset[i] != that1.DefaultSubset[i] {
			return false
		}
	}
	if this.FallbackPolicy != that1.FallbackPolicy {
		return false
	}
	if !this.TlsParameters.Equal(that1.TlsParameters) {
		return false
	}
	if this.ConnectionTimeout != that1.ConnectionTimeout {
		return false
	}
	if this.HttpIdleTimeout != that1.HttpIdleTimeout {
		return false
	}
	if !this.OutlierDetection.Equal(that1.OutlierDetection) {
		return false
	}
	if this.EndpointSelection != that1.EndpointSelection {
		return false
	}
	if !this.Http2Options.Equal(that1.Http2Options) {
		return false
	}
	return true
}
func (this *GetSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType)
	if !ok {
		that2, ok := that.(GetSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Endpoints) != len(that1.Endpoints) {
		return false
	}
	for i := range this.Endpoints {
		if !this.Endpoints[i].Equal(that1.Endpoints[i]) {
			return false
		}
	}
	if len(this.HealthChecks) != len(that1.HealthChecks) {
		return false
	}
	for i := range this.HealthChecks {
		if !this.HealthChecks[i].Equal(that1.HealthChecks[i]) {
			return false
		}
	}
	if this.LoadbalancerAlgorithm != that1.LoadbalancerAlgorithm {
		return false
	}
	if !this.CircuitBreaker.Equal(that1.CircuitBreaker) {
		return false
	}
	if len(this.EndpointSubsets) != len(that1.EndpointSubsets) {
		return false
	}
	for i := range this.EndpointSubsets {
		if !this.EndpointSubsets[i].Equal(that1.EndpointSubsets[i]) {
			return false
		}
	}
	if len(this.DefaultSubset) != len(that1.DefaultSubset) {
		return false
	}
	for i := range this.DefaultSubset {
		if this.DefaultSubset[i] != that1.DefaultSubset[i] {
			return false
		}
	}
	if this.FallbackPolicy != that1.FallbackPolicy {
		return false
	}
	if !this.TlsParameters.Equal(that1.TlsParameters) {
		return false
	}
	if this.ConnectionTimeout != that1.ConnectionTimeout {
		return false
	}
	if this.HttpIdleTimeout != that1.HttpIdleTimeout {
		return false
	}
	if !this.OutlierDetection.Equal(that1.OutlierDetection) {
		return false
	}
	if this.EndpointSelection != that1.EndpointSelection {
		return false
	}
	if !this.Http2Options.Equal(that1.Http2Options) {
		return false
	}
	return true
}
func (this *OutlierDetectionType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&cluster.OutlierDetectionType{")
	s = append(s, "Consecutive_5Xx: "+fmt.Sprintf("%#v", this.Consecutive_5Xx)+",\n")
	s = append(s, "Interval: "+fmt.Sprintf("%#v", this.Interval)+",\n")
	s = append(s, "BaseEjectionTime: "+fmt.Sprintf("%#v", this.BaseEjectionTime)+",\n")
	s = append(s, "MaxEjectionPercent: "+fmt.Sprintf("%#v", this.MaxEjectionPercent)+",\n")
	s = append(s, "ConsecutiveGatewayFailure: "+fmt.Sprintf("%#v", this.ConsecutiveGatewayFailure)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *EndpointSubsetSelectorType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&cluster.EndpointSubsetSelectorType{")
	s = append(s, "Keys: "+fmt.Sprintf("%#v", this.Keys)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CircuitBreaker) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&cluster.CircuitBreaker{")
	s = append(s, "Priority: "+fmt.Sprintf("%#v", this.Priority)+",\n")
	s = append(s, "ConnectionLimit: "+fmt.Sprintf("%#v", this.ConnectionLimit)+",\n")
	s = append(s, "PendingRequests: "+fmt.Sprintf("%#v", this.PendingRequests)+",\n")
	s = append(s, "Retries: "+fmt.Sprintf("%#v", this.Retries)+",\n")
	s = append(s, "MaxRequests: "+fmt.Sprintf("%#v", this.MaxRequests)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Http2ProtocolOptions) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&cluster.Http2ProtocolOptions{")
	s = append(s, "Enabled: "+fmt.Sprintf("%#v", this.Enabled)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GlobalSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 19)
	s = append(s, "&cluster.GlobalSpecType{")
	if this.Endpoints != nil {
		s = append(s, "Endpoints: "+fmt.Sprintf("%#v", this.Endpoints)+",\n")
	}
	if this.HealthChecks != nil {
		s = append(s, "HealthChecks: "+fmt.Sprintf("%#v", this.HealthChecks)+",\n")
	}
	s = append(s, "LoadbalancerAlgorithm: "+fmt.Sprintf("%#v", this.LoadbalancerAlgorithm)+",\n")
	if this.CircuitBreaker != nil {
		s = append(s, "CircuitBreaker: "+fmt.Sprintf("%#v", this.CircuitBreaker)+",\n")
	}
	if this.EndpointSubsets != nil {
		s = append(s, "EndpointSubsets: "+fmt.Sprintf("%#v", this.EndpointSubsets)+",\n")
	}
	keysForDefaultSubset := make([]string, 0, len(this.DefaultSubset))
	for k, _ := range this.DefaultSubset {
		keysForDefaultSubset = append(keysForDefaultSubset, k)
	}
	sortkeys.Strings(keysForDefaultSubset)
	mapStringForDefaultSubset := "map[string]string{"
	for _, k := range keysForDefaultSubset {
		mapStringForDefaultSubset += fmt.Sprintf("%#v: %#v,", k, this.DefaultSubset[k])
	}
	mapStringForDefaultSubset += "}"
	if this.DefaultSubset != nil {
		s = append(s, "DefaultSubset: "+mapStringForDefaultSubset+",\n")
	}
	s = append(s, "FallbackPolicy: "+fmt.Sprintf("%#v", this.FallbackPolicy)+",\n")
	if this.TlsParameters != nil {
		s = append(s, "TlsParameters: "+fmt.Sprintf("%#v", this.TlsParameters)+",\n")
	}
	s = append(s, "ConnectionTimeout: "+fmt.Sprintf("%#v", this.ConnectionTimeout)+",\n")
	s = append(s, "HttpIdleTimeout: "+fmt.Sprintf("%#v", this.HttpIdleTimeout)+",\n")
	if this.OutlierDetection != nil {
		s = append(s, "OutlierDetection: "+fmt.Sprintf("%#v", this.OutlierDetection)+",\n")
	}
	s = append(s, "EndpointSelection: "+fmt.Sprintf("%#v", this.EndpointSelection)+",\n")
	s = append(s, "DnsLookupFamily: "+fmt.Sprintf("%#v", this.DnsLookupFamily)+",\n")
	s = append(s, "DnsDiscoveryType: "+fmt.Sprintf("%#v", this.DnsDiscoveryType)+",\n")
	if this.Http2Options != nil {
		s = append(s, "Http2Options: "+fmt.Sprintf("%#v", this.Http2Options)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CreateSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 17)
	s = append(s, "&cluster.CreateSpecType{")
	if this.Endpoints != nil {
		s = append(s, "Endpoints: "+fmt.Sprintf("%#v", this.Endpoints)+",\n")
	}
	if this.HealthChecks != nil {
		s = append(s, "HealthChecks: "+fmt.Sprintf("%#v", this.HealthChecks)+",\n")
	}
	s = append(s, "LoadbalancerAlgorithm: "+fmt.Sprintf("%#v", this.LoadbalancerAlgorithm)+",\n")
	if this.CircuitBreaker != nil {
		s = append(s, "CircuitBreaker: "+fmt.Sprintf("%#v", this.CircuitBreaker)+",\n")
	}
	if this.EndpointSubsets != nil {
		s = append(s, "EndpointSubsets: "+fmt.Sprintf("%#v", this.EndpointSubsets)+",\n")
	}
	keysForDefaultSubset := make([]string, 0, len(this.DefaultSubset))
	for k, _ := range this.DefaultSubset {
		keysForDefaultSubset = append(keysForDefaultSubset, k)
	}
	sortkeys.Strings(keysForDefaultSubset)
	mapStringForDefaultSubset := "map[string]string{"
	for _, k := range keysForDefaultSubset {
		mapStringForDefaultSubset += fmt.Sprintf("%#v: %#v,", k, this.DefaultSubset[k])
	}
	mapStringForDefaultSubset += "}"
	if this.DefaultSubset != nil {
		s = append(s, "DefaultSubset: "+mapStringForDefaultSubset+",\n")
	}
	s = append(s, "FallbackPolicy: "+fmt.Sprintf("%#v", this.FallbackPolicy)+",\n")
	if this.TlsParameters != nil {
		s = append(s, "TlsParameters: "+fmt.Sprintf("%#v", this.TlsParameters)+",\n")
	}
	s = append(s, "ConnectionTimeout: "+fmt.Sprintf("%#v", this.ConnectionTimeout)+",\n")
	s = append(s, "HttpIdleTimeout: "+fmt.Sprintf("%#v", this.HttpIdleTimeout)+",\n")
	if this.OutlierDetection != nil {
		s = append(s, "OutlierDetection: "+fmt.Sprintf("%#v", this.OutlierDetection)+",\n")
	}
	s = append(s, "EndpointSelection: "+fmt.Sprintf("%#v", this.EndpointSelection)+",\n")
	if this.Http2Options != nil {
		s = append(s, "Http2Options: "+fmt.Sprintf("%#v", this.Http2Options)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ReplaceSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 17)
	s = append(s, "&cluster.ReplaceSpecType{")
	if this.Endpoints != nil {
		s = append(s, "Endpoints: "+fmt.Sprintf("%#v", this.Endpoints)+",\n")
	}
	if this.HealthChecks != nil {
		s = append(s, "HealthChecks: "+fmt.Sprintf("%#v", this.HealthChecks)+",\n")
	}
	s = append(s, "LoadbalancerAlgorithm: "+fmt.Sprintf("%#v", this.LoadbalancerAlgorithm)+",\n")
	if this.CircuitBreaker != nil {
		s = append(s, "CircuitBreaker: "+fmt.Sprintf("%#v", this.CircuitBreaker)+",\n")
	}
	if this.EndpointSubsets != nil {
		s = append(s, "EndpointSubsets: "+fmt.Sprintf("%#v", this.EndpointSubsets)+",\n")
	}
	keysForDefaultSubset := make([]string, 0, len(this.DefaultSubset))
	for k, _ := range this.DefaultSubset {
		keysForDefaultSubset = append(keysForDefaultSubset, k)
	}
	sortkeys.Strings(keysForDefaultSubset)
	mapStringForDefaultSubset := "map[string]string{"
	for _, k := range keysForDefaultSubset {
		mapStringForDefaultSubset += fmt.Sprintf("%#v: %#v,", k, this.DefaultSubset[k])
	}
	mapStringForDefaultSubset += "}"
	if this.DefaultSubset != nil {
		s = append(s, "DefaultSubset: "+mapStringForDefaultSubset+",\n")
	}
	s = append(s, "FallbackPolicy: "+fmt.Sprintf("%#v", this.FallbackPolicy)+",\n")
	if this.TlsParameters != nil {
		s = append(s, "TlsParameters: "+fmt.Sprintf("%#v", this.TlsParameters)+",\n")
	}
	s = append(s, "ConnectionTimeout: "+fmt.Sprintf("%#v", this.ConnectionTimeout)+",\n")
	s = append(s, "HttpIdleTimeout: "+fmt.Sprintf("%#v", this.HttpIdleTimeout)+",\n")
	if this.OutlierDetection != nil {
		s = append(s, "OutlierDetection: "+fmt.Sprintf("%#v", this.OutlierDetection)+",\n")
	}
	s = append(s, "EndpointSelection: "+fmt.Sprintf("%#v", this.EndpointSelection)+",\n")
	if this.Http2Options != nil {
		s = append(s, "Http2Options: "+fmt.Sprintf("%#v", this.Http2Options)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 17)
	s = append(s, "&cluster.GetSpecType{")
	if this.Endpoints != nil {
		s = append(s, "Endpoints: "+fmt.Sprintf("%#v", this.Endpoints)+",\n")
	}
	if this.HealthChecks != nil {
		s = append(s, "HealthChecks: "+fmt.Sprintf("%#v", this.HealthChecks)+",\n")
	}
	s = append(s, "LoadbalancerAlgorithm: "+fmt.Sprintf("%#v", this.LoadbalancerAlgorithm)+",\n")
	if this.CircuitBreaker != nil {
		s = append(s, "CircuitBreaker: "+fmt.Sprintf("%#v", this.CircuitBreaker)+",\n")
	}
	if this.EndpointSubsets != nil {
		s = append(s, "EndpointSubsets: "+fmt.Sprintf("%#v", this.EndpointSubsets)+",\n")
	}
	keysForDefaultSubset := make([]string, 0, len(this.DefaultSubset))
	for k, _ := range this.DefaultSubset {
		keysForDefaultSubset = append(keysForDefaultSubset, k)
	}
	sortkeys.Strings(keysForDefaultSubset)
	mapStringForDefaultSubset := "map[string]string{"
	for _, k := range keysForDefaultSubset {
		mapStringForDefaultSubset += fmt.Sprintf("%#v: %#v,", k, this.DefaultSubset[k])
	}
	mapStringForDefaultSubset += "}"
	if this.DefaultSubset != nil {
		s = append(s, "DefaultSubset: "+mapStringForDefaultSubset+",\n")
	}
	s = append(s, "FallbackPolicy: "+fmt.Sprintf("%#v", this.FallbackPolicy)+",\n")
	if this.TlsParameters != nil {
		s = append(s, "TlsParameters: "+fmt.Sprintf("%#v", this.TlsParameters)+",\n")
	}
	s = append(s, "ConnectionTimeout: "+fmt.Sprintf("%#v", this.ConnectionTimeout)+",\n")
	s = append(s, "HttpIdleTimeout: "+fmt.Sprintf("%#v", this.HttpIdleTimeout)+",\n")
	if this.OutlierDetection != nil {
		s = append(s, "OutlierDetection: "+fmt.Sprintf("%#v", this.OutlierDetection)+",\n")
	}
	s = append(s, "EndpointSelection: "+fmt.Sprintf("%#v", this.EndpointSelection)+",\n")
	if this.Http2Options != nil {
		s = append(s, "Http2Options: "+fmt.Sprintf("%#v", this.Http2Options)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringTypes(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *OutlierDetectionType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OutlierDetectionType) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Consecutive_5Xx != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.Consecutive_5Xx))
	}
	if m.Interval != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.Interval))
	}
	if m.BaseEjectionTime != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.BaseEjectionTime))
	}
	if m.MaxEjectionPercent != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.MaxEjectionPercent))
	}
	if m.ConsecutiveGatewayFailure != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.ConsecutiveGatewayFailure))
	}
	return i, nil
}

func (m *EndpointSubsetSelectorType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EndpointSubsetSelectorType) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Keys) > 0 {
		for _, s := range m.Keys {
			dAtA[i] = 0xa
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	return i, nil
}

func (m *CircuitBreaker) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CircuitBreaker) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Priority != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.Priority))
	}
	if m.ConnectionLimit != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.ConnectionLimit))
	}
	if m.PendingRequests != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.PendingRequests))
	}
	if m.Retries != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.Retries))
	}
	if m.MaxRequests != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.MaxRequests))
	}
	return i, nil
}

func (m *Http2ProtocolOptions) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Http2ProtocolOptions) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Enabled {
		dAtA[i] = 0x8
		i++
		if m.Enabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *GlobalSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GlobalSpecType) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Endpoints) > 0 {
		for _, msg := range m.Endpoints {
			dAtA[i] = 0xa
			i++
			i = encodeVarintTypes(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.HealthChecks) > 0 {
		for _, msg := range m.HealthChecks {
			dAtA[i] = 0x12
			i++
			i = encodeVarintTypes(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.LoadbalancerAlgorithm != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.LoadbalancerAlgorithm))
	}
	if m.CircuitBreaker != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.CircuitBreaker.Size()))
		n1, err := m.CircuitBreaker.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if len(m.EndpointSubsets) > 0 {
		for _, msg := range m.EndpointSubsets {
			dAtA[i] = 0x2a
			i++
			i = encodeVarintTypes(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.DefaultSubset) > 0 {
		keysForDefaultSubset := make([]string, 0, len(m.DefaultSubset))
		for k, _ := range m.DefaultSubset {
			keysForDefaultSubset = append(keysForDefaultSubset, string(k))
		}
		sortkeys.Strings(keysForDefaultSubset)
		for _, k := range keysForDefaultSubset {
			dAtA[i] = 0x32
			i++
			v := m.DefaultSubset[string(k)]
			mapSize := 1 + len(k) + sovTypes(uint64(len(k))) + 1 + len(v) + sovTypes(uint64(len(v)))
			i = encodeVarintTypes(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintTypes(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			dAtA[i] = 0x12
			i++
			i = encodeVarintTypes(dAtA, i, uint64(len(v)))
			i += copy(dAtA[i:], v)
		}
	}
	if m.FallbackPolicy != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.FallbackPolicy))
	}
	if m.TlsParameters != nil {
		dAtA[i] = 0x42
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.TlsParameters.Size()))
		n2, err := m.TlsParameters.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if m.ConnectionTimeout != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.ConnectionTimeout))
	}
	if m.HttpIdleTimeout != 0 {
		dAtA[i] = 0x50
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.HttpIdleTimeout))
	}
	if m.OutlierDetection != nil {
		dAtA[i] = 0x62
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.OutlierDetection.Size()))
		n3, err := m.OutlierDetection.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	if m.EndpointSelection != 0 {
		dAtA[i] = 0x68
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.EndpointSelection))
	}
	if m.DnsLookupFamily != 0 {
		dAtA[i] = 0x70
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.DnsLookupFamily))
	}
	if m.DnsDiscoveryType != 0 {
		dAtA[i] = 0x78
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.DnsDiscoveryType))
	}
	if m.Http2Options != nil {
		dAtA[i] = 0x82
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.Http2Options.Size()))
		n4, err := m.Http2Options.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	return i, nil
}

func (m *CreateSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateSpecType) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Endpoints) > 0 {
		for _, msg := range m.Endpoints {
			dAtA[i] = 0xa
			i++
			i = encodeVarintTypes(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.HealthChecks) > 0 {
		for _, msg := range m.HealthChecks {
			dAtA[i] = 0x12
			i++
			i = encodeVarintTypes(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.LoadbalancerAlgorithm != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.LoadbalancerAlgorithm))
	}
	if m.CircuitBreaker != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.CircuitBreaker.Size()))
		n5, err := m.CircuitBreaker.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	if len(m.EndpointSubsets) > 0 {
		for _, msg := range m.EndpointSubsets {
			dAtA[i] = 0x2a
			i++
			i = encodeVarintTypes(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.DefaultSubset) > 0 {
		keysForDefaultSubset := make([]string, 0, len(m.DefaultSubset))
		for k, _ := range m.DefaultSubset {
			keysForDefaultSubset = append(keysForDefaultSubset, string(k))
		}
		sortkeys.Strings(keysForDefaultSubset)
		for _, k := range keysForDefaultSubset {
			dAtA[i] = 0x32
			i++
			v := m.DefaultSubset[string(k)]
			mapSize := 1 + len(k) + sovTypes(uint64(len(k))) + 1 + len(v) + sovTypes(uint64(len(v)))
			i = encodeVarintTypes(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintTypes(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			dAtA[i] = 0x12
			i++
			i = encodeVarintTypes(dAtA, i, uint64(len(v)))
			i += copy(dAtA[i:], v)
		}
	}
	if m.FallbackPolicy != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.FallbackPolicy))
	}
	if m.TlsParameters != nil {
		dAtA[i] = 0x42
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.TlsParameters.Size()))
		n6, err := m.TlsParameters.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	if m.ConnectionTimeout != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.ConnectionTimeout))
	}
	if m.HttpIdleTimeout != 0 {
		dAtA[i] = 0x50
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.HttpIdleTimeout))
	}
	if m.OutlierDetection != nil {
		dAtA[i] = 0x62
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.OutlierDetection.Size()))
		n7, err := m.OutlierDetection.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	if m.EndpointSelection != 0 {
		dAtA[i] = 0x68
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.EndpointSelection))
	}
	if m.Http2Options != nil {
		dAtA[i] = 0x82
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.Http2Options.Size()))
		n8, err := m.Http2Options.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n8
	}
	return i, nil
}

func (m *ReplaceSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplaceSpecType) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Endpoints) > 0 {
		for _, msg := range m.Endpoints {
			dAtA[i] = 0xa
			i++
			i = encodeVarintTypes(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.HealthChecks) > 0 {
		for _, msg := range m.HealthChecks {
			dAtA[i] = 0x12
			i++
			i = encodeVarintTypes(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.LoadbalancerAlgorithm != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.LoadbalancerAlgorithm))
	}
	if m.CircuitBreaker != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.CircuitBreaker.Size()))
		n9, err := m.CircuitBreaker.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n9
	}
	if len(m.EndpointSubsets) > 0 {
		for _, msg := range m.EndpointSubsets {
			dAtA[i] = 0x2a
			i++
			i = encodeVarintTypes(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.DefaultSubset) > 0 {
		keysForDefaultSubset := make([]string, 0, len(m.DefaultSubset))
		for k, _ := range m.DefaultSubset {
			keysForDefaultSubset = append(keysForDefaultSubset, string(k))
		}
		sortkeys.Strings(keysForDefaultSubset)
		for _, k := range keysForDefaultSubset {
			dAtA[i] = 0x32
			i++
			v := m.DefaultSubset[string(k)]
			mapSize := 1 + len(k) + sovTypes(uint64(len(k))) + 1 + len(v) + sovTypes(uint64(len(v)))
			i = encodeVarintTypes(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintTypes(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			dAtA[i] = 0x12
			i++
			i = encodeVarintTypes(dAtA, i, uint64(len(v)))
			i += copy(dAtA[i:], v)
		}
	}
	if m.FallbackPolicy != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.FallbackPolicy))
	}
	if m.TlsParameters != nil {
		dAtA[i] = 0x42
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.TlsParameters.Size()))
		n10, err := m.TlsParameters.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n10
	}
	if m.ConnectionTimeout != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.ConnectionTimeout))
	}
	if m.HttpIdleTimeout != 0 {
		dAtA[i] = 0x50
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.HttpIdleTimeout))
	}
	if m.OutlierDetection != nil {
		dAtA[i] = 0x62
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.OutlierDetection.Size()))
		n11, err := m.OutlierDetection.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n11
	}
	if m.EndpointSelection != 0 {
		dAtA[i] = 0x68
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.EndpointSelection))
	}
	if m.Http2Options != nil {
		dAtA[i] = 0x82
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.Http2Options.Size()))
		n12, err := m.Http2Options.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n12
	}
	return i, nil
}

func (m *GetSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetSpecType) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Endpoints) > 0 {
		for _, msg := range m.Endpoints {
			dAtA[i] = 0xa
			i++
			i = encodeVarintTypes(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.HealthChecks) > 0 {
		for _, msg := range m.HealthChecks {
			dAtA[i] = 0x12
			i++
			i = encodeVarintTypes(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.LoadbalancerAlgorithm != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.LoadbalancerAlgorithm))
	}
	if m.CircuitBreaker != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.CircuitBreaker.Size()))
		n13, err := m.CircuitBreaker.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n13
	}
	if len(m.EndpointSubsets) > 0 {
		for _, msg := range m.EndpointSubsets {
			dAtA[i] = 0x2a
			i++
			i = encodeVarintTypes(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.DefaultSubset) > 0 {
		keysForDefaultSubset := make([]string, 0, len(m.DefaultSubset))
		for k, _ := range m.DefaultSubset {
			keysForDefaultSubset = append(keysForDefaultSubset, string(k))
		}
		sortkeys.Strings(keysForDefaultSubset)
		for _, k := range keysForDefaultSubset {
			dAtA[i] = 0x32
			i++
			v := m.DefaultSubset[string(k)]
			mapSize := 1 + len(k) + sovTypes(uint64(len(k))) + 1 + len(v) + sovTypes(uint64(len(v)))
			i = encodeVarintTypes(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintTypes(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			dAtA[i] = 0x12
			i++
			i = encodeVarintTypes(dAtA, i, uint64(len(v)))
			i += copy(dAtA[i:], v)
		}
	}
	if m.FallbackPolicy != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.FallbackPolicy))
	}
	if m.TlsParameters != nil {
		dAtA[i] = 0x42
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.TlsParameters.Size()))
		n14, err := m.TlsParameters.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n14
	}
	if m.ConnectionTimeout != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.ConnectionTimeout))
	}
	if m.HttpIdleTimeout != 0 {
		dAtA[i] = 0x50
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.HttpIdleTimeout))
	}
	if m.OutlierDetection != nil {
		dAtA[i] = 0x62
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.OutlierDetection.Size()))
		n15, err := m.OutlierDetection.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n15
	}
	if m.EndpointSelection != 0 {
		dAtA[i] = 0x68
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.EndpointSelection))
	}
	if m.Http2Options != nil {
		dAtA[i] = 0x82
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.Http2Options.Size()))
		n16, err := m.Http2Options.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n16
	}
	return i, nil
}

func encodeVarintTypes(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func NewPopulatedOutlierDetectionType(r randyTypes, easy bool) *OutlierDetectionType {
	this := &OutlierDetectionType{}
	this.Consecutive_5Xx = uint32(r.Uint32())
	this.Interval = uint32(r.Uint32())
	this.BaseEjectionTime = uint32(r.Uint32())
	this.MaxEjectionPercent = uint32(r.Uint32())
	this.ConsecutiveGatewayFailure = uint32(r.Uint32())
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedEndpointSubsetSelectorType(r randyTypes, easy bool) *EndpointSubsetSelectorType {
	this := &EndpointSubsetSelectorType{}
	v1 := r.Intn(10)
	this.Keys = make([]string, v1)
	for i := 0; i < v1; i++ {
		this.Keys[i] = string(randStringTypes(r))
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedCircuitBreaker(r randyTypes, easy bool) *CircuitBreaker {
	this := &CircuitBreaker{}
	this.Priority = ves_io_schema4.RoutingPriority([]int32{0, 1}[r.Intn(2)])
	this.ConnectionLimit = uint32(r.Uint32())
	this.PendingRequests = uint32(r.Uint32())
	this.Retries = uint32(r.Uint32())
	this.MaxRequests = uint32(r.Uint32())
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedHttp2ProtocolOptions(r randyTypes, easy bool) *Http2ProtocolOptions {
	this := &Http2ProtocolOptions{}
	this.Enabled = bool(bool(r.Intn(2) == 0))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedGlobalSpecType(r randyTypes, easy bool) *GlobalSpecType {
	this := &GlobalSpecType{}
	if r.Intn(10) != 0 {
		v2 := r.Intn(5)
		this.Endpoints = make([]*ves_io_schema4.ObjectRefType, v2)
		for i := 0; i < v2; i++ {
			this.Endpoints[i] = ves_io_schema4.NewPopulatedObjectRefType(r, easy)
		}
	}
	if r.Intn(10) != 0 {
		v3 := r.Intn(5)
		this.HealthChecks = make([]*ves_io_schema4.ObjectRefType, v3)
		for i := 0; i < v3; i++ {
			this.HealthChecks[i] = ves_io_schema4.NewPopulatedObjectRefType(r, easy)
		}
	}
	this.LoadbalancerAlgorithm = LoadbalancerAlgorithm([]int32{0, 1, 2, 3}[r.Intn(4)])
	if r.Intn(10) != 0 {
		this.CircuitBreaker = NewPopulatedCircuitBreaker(r, easy)
	}
	if r.Intn(10) != 0 {
		v4 := r.Intn(5)
		this.EndpointSubsets = make([]*EndpointSubsetSelectorType, v4)
		for i := 0; i < v4; i++ {
			this.EndpointSubsets[i] = NewPopulatedEndpointSubsetSelectorType(r, easy)
		}
	}
	if r.Intn(10) != 0 {
		v5 := r.Intn(10)
		this.DefaultSubset = make(map[string]string)
		for i := 0; i < v5; i++ {
			this.DefaultSubset[randStringTypes(r)] = randStringTypes(r)
		}
	}
	this.FallbackPolicy = SubsetFallbackPolicy([]int32{0, 1, 2}[r.Intn(3)])
	if r.Intn(10) != 0 {
		this.TlsParameters = ves_io_schema4.NewPopulatedUpstreamTlsParamsType(r, easy)
	}
	this.ConnectionTimeout = uint32(r.Uint32())
	this.HttpIdleTimeout = uint32(r.Uint32())
	if r.Intn(10) != 0 {
		this.OutlierDetection = NewPopulatedOutlierDetectionType(r, easy)
	}
	this.EndpointSelection = EndpointSelectionPolicy([]int32{0, 1, 2}[r.Intn(3)])
	this.DnsLookupFamily = DnsLookupType([]int32{0, 1, 2}[r.Intn(3)])
	this.DnsDiscoveryType = DnsDiscoveryType([]int32{0, 1}[r.Intn(2)])
	if r.Intn(10) != 0 {
		this.Http2Options = NewPopulatedHttp2ProtocolOptions(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedCreateSpecType(r randyTypes, easy bool) *CreateSpecType {
	this := &CreateSpecType{}
	if r.Intn(10) != 0 {
		v6 := r.Intn(5)
		this.Endpoints = make([]*ves_io_schema4.ObjectRefType, v6)
		for i := 0; i < v6; i++ {
			this.Endpoints[i] = ves_io_schema4.NewPopulatedObjectRefType(r, easy)
		}
	}
	if r.Intn(10) != 0 {
		v7 := r.Intn(5)
		this.HealthChecks = make([]*ves_io_schema4.ObjectRefType, v7)
		for i := 0; i < v7; i++ {
			this.HealthChecks[i] = ves_io_schema4.NewPopulatedObjectRefType(r, easy)
		}
	}
	this.LoadbalancerAlgorithm = LoadbalancerAlgorithm([]int32{0, 1, 2, 3}[r.Intn(4)])
	if r.Intn(10) != 0 {
		this.CircuitBreaker = NewPopulatedCircuitBreaker(r, easy)
	}
	if r.Intn(10) != 0 {
		v8 := r.Intn(5)
		this.EndpointSubsets = make([]*EndpointSubsetSelectorType, v8)
		for i := 0; i < v8; i++ {
			this.EndpointSubsets[i] = NewPopulatedEndpointSubsetSelectorType(r, easy)
		}
	}
	if r.Intn(10) != 0 {
		v9 := r.Intn(10)
		this.DefaultSubset = make(map[string]string)
		for i := 0; i < v9; i++ {
			this.DefaultSubset[randStringTypes(r)] = randStringTypes(r)
		}
	}
	this.FallbackPolicy = SubsetFallbackPolicy([]int32{0, 1, 2}[r.Intn(3)])
	if r.Intn(10) != 0 {
		this.TlsParameters = ves_io_schema4.NewPopulatedUpstreamTlsParamsType(r, easy)
	}
	this.ConnectionTimeout = uint32(r.Uint32())
	this.HttpIdleTimeout = uint32(r.Uint32())
	if r.Intn(10) != 0 {
		this.OutlierDetection = NewPopulatedOutlierDetectionType(r, easy)
	}
	this.EndpointSelection = EndpointSelectionPolicy([]int32{0, 1, 2}[r.Intn(3)])
	if r.Intn(10) != 0 {
		this.Http2Options = NewPopulatedHttp2ProtocolOptions(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedReplaceSpecType(r randyTypes, easy bool) *ReplaceSpecType {
	this := &ReplaceSpecType{}
	if r.Intn(10) != 0 {
		v10 := r.Intn(5)
		this.Endpoints = make([]*ves_io_schema4.ObjectRefType, v10)
		for i := 0; i < v10; i++ {
			this.Endpoints[i] = ves_io_schema4.NewPopulatedObjectRefType(r, easy)
		}
	}
	if r.Intn(10) != 0 {
		v11 := r.Intn(5)
		this.HealthChecks = make([]*ves_io_schema4.ObjectRefType, v11)
		for i := 0; i < v11; i++ {
			this.HealthChecks[i] = ves_io_schema4.NewPopulatedObjectRefType(r, easy)
		}
	}
	this.LoadbalancerAlgorithm = LoadbalancerAlgorithm([]int32{0, 1, 2, 3}[r.Intn(4)])
	if r.Intn(10) != 0 {
		this.CircuitBreaker = NewPopulatedCircuitBreaker(r, easy)
	}
	if r.Intn(10) != 0 {
		v12 := r.Intn(5)
		this.EndpointSubsets = make([]*EndpointSubsetSelectorType, v12)
		for i := 0; i < v12; i++ {
			this.EndpointSubsets[i] = NewPopulatedEndpointSubsetSelectorType(r, easy)
		}
	}
	if r.Intn(10) != 0 {
		v13 := r.Intn(10)
		this.DefaultSubset = make(map[string]string)
		for i := 0; i < v13; i++ {
			this.DefaultSubset[randStringTypes(r)] = randStringTypes(r)
		}
	}
	this.FallbackPolicy = SubsetFallbackPolicy([]int32{0, 1, 2}[r.Intn(3)])
	if r.Intn(10) != 0 {
		this.TlsParameters = ves_io_schema4.NewPopulatedUpstreamTlsParamsType(r, easy)
	}
	this.ConnectionTimeout = uint32(r.Uint32())
	this.HttpIdleTimeout = uint32(r.Uint32())
	if r.Intn(10) != 0 {
		this.OutlierDetection = NewPopulatedOutlierDetectionType(r, easy)
	}
	this.EndpointSelection = EndpointSelectionPolicy([]int32{0, 1, 2}[r.Intn(3)])
	if r.Intn(10) != 0 {
		this.Http2Options = NewPopulatedHttp2ProtocolOptions(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedGetSpecType(r randyTypes, easy bool) *GetSpecType {
	this := &GetSpecType{}
	if r.Intn(10) != 0 {
		v14 := r.Intn(5)
		this.Endpoints = make([]*ves_io_schema4.ObjectRefType, v14)
		for i := 0; i < v14; i++ {
			this.Endpoints[i] = ves_io_schema4.NewPopulatedObjectRefType(r, easy)
		}
	}
	if r.Intn(10) != 0 {
		v15 := r.Intn(5)
		this.HealthChecks = make([]*ves_io_schema4.ObjectRefType, v15)
		for i := 0; i < v15; i++ {
			this.HealthChecks[i] = ves_io_schema4.NewPopulatedObjectRefType(r, easy)
		}
	}
	this.LoadbalancerAlgorithm = LoadbalancerAlgorithm([]int32{0, 1, 2, 3}[r.Intn(4)])
	if r.Intn(10) != 0 {
		this.CircuitBreaker = NewPopulatedCircuitBreaker(r, easy)
	}
	if r.Intn(10) != 0 {
		v16 := r.Intn(5)
		this.EndpointSubsets = make([]*EndpointSubsetSelectorType, v16)
		for i := 0; i < v16; i++ {
			this.EndpointSubsets[i] = NewPopulatedEndpointSubsetSelectorType(r, easy)
		}
	}
	if r.Intn(10) != 0 {
		v17 := r.Intn(10)
		this.DefaultSubset = make(map[string]string)
		for i := 0; i < v17; i++ {
			this.DefaultSubset[randStringTypes(r)] = randStringTypes(r)
		}
	}
	this.FallbackPolicy = SubsetFallbackPolicy([]int32{0, 1, 2}[r.Intn(3)])
	if r.Intn(10) != 0 {
		this.TlsParameters = ves_io_schema4.NewPopulatedUpstreamTlsParamsType(r, easy)
	}
	this.ConnectionTimeout = uint32(r.Uint32())
	this.HttpIdleTimeout = uint32(r.Uint32())
	if r.Intn(10) != 0 {
		this.OutlierDetection = NewPopulatedOutlierDetectionType(r, easy)
	}
	this.EndpointSelection = EndpointSelectionPolicy([]int32{0, 1, 2}[r.Intn(3)])
	if r.Intn(10) != 0 {
		this.Http2Options = NewPopulatedHttp2ProtocolOptions(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

type randyTypes interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneTypes(r randyTypes) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringTypes(r randyTypes) string {
	v18 := r.Intn(100)
	tmps := make([]rune, v18)
	for i := 0; i < v18; i++ {
		tmps[i] = randUTF8RuneTypes(r)
	}
	return string(tmps)
}
func randUnrecognizedTypes(r randyTypes, maxFieldNumber int) (dAtA []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		dAtA = randFieldTypes(dAtA, r, fieldNumber, wire)
	}
	return dAtA
}
func randFieldTypes(dAtA []byte, r randyTypes, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		dAtA = encodeVarintPopulateTypes(dAtA, uint64(key))
		v19 := r.Int63()
		if r.Intn(2) == 0 {
			v19 *= -1
		}
		dAtA = encodeVarintPopulateTypes(dAtA, uint64(v19))
	case 1:
		dAtA = encodeVarintPopulateTypes(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		dAtA = encodeVarintPopulateTypes(dAtA, uint64(key))
		ll := r.Intn(100)
		dAtA = encodeVarintPopulateTypes(dAtA, uint64(ll))
		for j := 0; j < ll; j++ {
			dAtA = append(dAtA, byte(r.Intn(256)))
		}
	default:
		dAtA = encodeVarintPopulateTypes(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return dAtA
}
func encodeVarintPopulateTypes(dAtA []byte, v uint64) []byte {
	for v >= 1<<7 {
		dAtA = append(dAtA, uint8(uint64(v)&0x7f|0x80))
		v >>= 7
	}
	dAtA = append(dAtA, uint8(v))
	return dAtA
}
func (m *OutlierDetectionType) Size() (n int) {
	var l int
	_ = l
	if m.Consecutive_5Xx != 0 {
		n += 1 + sovTypes(uint64(m.Consecutive_5Xx))
	}
	if m.Interval != 0 {
		n += 1 + sovTypes(uint64(m.Interval))
	}
	if m.BaseEjectionTime != 0 {
		n += 1 + sovTypes(uint64(m.BaseEjectionTime))
	}
	if m.MaxEjectionPercent != 0 {
		n += 1 + sovTypes(uint64(m.MaxEjectionPercent))
	}
	if m.ConsecutiveGatewayFailure != 0 {
		n += 1 + sovTypes(uint64(m.ConsecutiveGatewayFailure))
	}
	return n
}

func (m *EndpointSubsetSelectorType) Size() (n int) {
	var l int
	_ = l
	if len(m.Keys) > 0 {
		for _, s := range m.Keys {
			l = len(s)
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *CircuitBreaker) Size() (n int) {
	var l int
	_ = l
	if m.Priority != 0 {
		n += 1 + sovTypes(uint64(m.Priority))
	}
	if m.ConnectionLimit != 0 {
		n += 1 + sovTypes(uint64(m.ConnectionLimit))
	}
	if m.PendingRequests != 0 {
		n += 1 + sovTypes(uint64(m.PendingRequests))
	}
	if m.Retries != 0 {
		n += 1 + sovTypes(uint64(m.Retries))
	}
	if m.MaxRequests != 0 {
		n += 1 + sovTypes(uint64(m.MaxRequests))
	}
	return n
}

func (m *Http2ProtocolOptions) Size() (n int) {
	var l int
	_ = l
	if m.Enabled {
		n += 2
	}
	return n
}

func (m *GlobalSpecType) Size() (n int) {
	var l int
	_ = l
	if len(m.Endpoints) > 0 {
		for _, e := range m.Endpoints {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if len(m.HealthChecks) > 0 {
		for _, e := range m.HealthChecks {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if m.LoadbalancerAlgorithm != 0 {
		n += 1 + sovTypes(uint64(m.LoadbalancerAlgorithm))
	}
	if m.CircuitBreaker != nil {
		l = m.CircuitBreaker.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if len(m.EndpointSubsets) > 0 {
		for _, e := range m.EndpointSubsets {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if len(m.DefaultSubset) > 0 {
		for k, v := range m.DefaultSubset {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovTypes(uint64(len(k))) + 1 + len(v) + sovTypes(uint64(len(v)))
			n += mapEntrySize + 1 + sovTypes(uint64(mapEntrySize))
		}
	}
	if m.FallbackPolicy != 0 {
		n += 1 + sovTypes(uint64(m.FallbackPolicy))
	}
	if m.TlsParameters != nil {
		l = m.TlsParameters.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.ConnectionTimeout != 0 {
		n += 1 + sovTypes(uint64(m.ConnectionTimeout))
	}
	if m.HttpIdleTimeout != 0 {
		n += 1 + sovTypes(uint64(m.HttpIdleTimeout))
	}
	if m.OutlierDetection != nil {
		l = m.OutlierDetection.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.EndpointSelection != 0 {
		n += 1 + sovTypes(uint64(m.EndpointSelection))
	}
	if m.DnsLookupFamily != 0 {
		n += 1 + sovTypes(uint64(m.DnsLookupFamily))
	}
	if m.DnsDiscoveryType != 0 {
		n += 1 + sovTypes(uint64(m.DnsDiscoveryType))
	}
	if m.Http2Options != nil {
		l = m.Http2Options.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *CreateSpecType) Size() (n int) {
	var l int
	_ = l
	if len(m.Endpoints) > 0 {
		for _, e := range m.Endpoints {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if len(m.HealthChecks) > 0 {
		for _, e := range m.HealthChecks {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if m.LoadbalancerAlgorithm != 0 {
		n += 1 + sovTypes(uint64(m.LoadbalancerAlgorithm))
	}
	if m.CircuitBreaker != nil {
		l = m.CircuitBreaker.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if len(m.EndpointSubsets) > 0 {
		for _, e := range m.EndpointSubsets {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if len(m.DefaultSubset) > 0 {
		for k, v := range m.DefaultSubset {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovTypes(uint64(len(k))) + 1 + len(v) + sovTypes(uint64(len(v)))
			n += mapEntrySize + 1 + sovTypes(uint64(mapEntrySize))
		}
	}
	if m.FallbackPolicy != 0 {
		n += 1 + sovTypes(uint64(m.FallbackPolicy))
	}
	if m.TlsParameters != nil {
		l = m.TlsParameters.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.ConnectionTimeout != 0 {
		n += 1 + sovTypes(uint64(m.ConnectionTimeout))
	}
	if m.HttpIdleTimeout != 0 {
		n += 1 + sovTypes(uint64(m.HttpIdleTimeout))
	}
	if m.OutlierDetection != nil {
		l = m.OutlierDetection.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.EndpointSelection != 0 {
		n += 1 + sovTypes(uint64(m.EndpointSelection))
	}
	if m.Http2Options != nil {
		l = m.Http2Options.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *ReplaceSpecType) Size() (n int) {
	var l int
	_ = l
	if len(m.Endpoints) > 0 {
		for _, e := range m.Endpoints {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if len(m.HealthChecks) > 0 {
		for _, e := range m.HealthChecks {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if m.LoadbalancerAlgorithm != 0 {
		n += 1 + sovTypes(uint64(m.LoadbalancerAlgorithm))
	}
	if m.CircuitBreaker != nil {
		l = m.CircuitBreaker.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if len(m.EndpointSubsets) > 0 {
		for _, e := range m.EndpointSubsets {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if len(m.DefaultSubset) > 0 {
		for k, v := range m.DefaultSubset {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovTypes(uint64(len(k))) + 1 + len(v) + sovTypes(uint64(len(v)))
			n += mapEntrySize + 1 + sovTypes(uint64(mapEntrySize))
		}
	}
	if m.FallbackPolicy != 0 {
		n += 1 + sovTypes(uint64(m.FallbackPolicy))
	}
	if m.TlsParameters != nil {
		l = m.TlsParameters.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.ConnectionTimeout != 0 {
		n += 1 + sovTypes(uint64(m.ConnectionTimeout))
	}
	if m.HttpIdleTimeout != 0 {
		n += 1 + sovTypes(uint64(m.HttpIdleTimeout))
	}
	if m.OutlierDetection != nil {
		l = m.OutlierDetection.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.EndpointSelection != 0 {
		n += 1 + sovTypes(uint64(m.EndpointSelection))
	}
	if m.Http2Options != nil {
		l = m.Http2Options.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *GetSpecType) Size() (n int) {
	var l int
	_ = l
	if len(m.Endpoints) > 0 {
		for _, e := range m.Endpoints {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if len(m.HealthChecks) > 0 {
		for _, e := range m.HealthChecks {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if m.LoadbalancerAlgorithm != 0 {
		n += 1 + sovTypes(uint64(m.LoadbalancerAlgorithm))
	}
	if m.CircuitBreaker != nil {
		l = m.CircuitBreaker.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if len(m.EndpointSubsets) > 0 {
		for _, e := range m.EndpointSubsets {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if len(m.DefaultSubset) > 0 {
		for k, v := range m.DefaultSubset {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovTypes(uint64(len(k))) + 1 + len(v) + sovTypes(uint64(len(v)))
			n += mapEntrySize + 1 + sovTypes(uint64(mapEntrySize))
		}
	}
	if m.FallbackPolicy != 0 {
		n += 1 + sovTypes(uint64(m.FallbackPolicy))
	}
	if m.TlsParameters != nil {
		l = m.TlsParameters.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.ConnectionTimeout != 0 {
		n += 1 + sovTypes(uint64(m.ConnectionTimeout))
	}
	if m.HttpIdleTimeout != 0 {
		n += 1 + sovTypes(uint64(m.HttpIdleTimeout))
	}
	if m.OutlierDetection != nil {
		l = m.OutlierDetection.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.EndpointSelection != 0 {
		n += 1 + sovTypes(uint64(m.EndpointSelection))
	}
	if m.Http2Options != nil {
		l = m.Http2Options.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}

func sovTypes(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozTypes(x uint64) (n int) {
	return sovTypes(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *OutlierDetectionType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&OutlierDetectionType{`,
		`Consecutive_5Xx:` + fmt.Sprintf("%v", this.Consecutive_5Xx) + `,`,
		`Interval:` + fmt.Sprintf("%v", this.Interval) + `,`,
		`BaseEjectionTime:` + fmt.Sprintf("%v", this.BaseEjectionTime) + `,`,
		`MaxEjectionPercent:` + fmt.Sprintf("%v", this.MaxEjectionPercent) + `,`,
		`ConsecutiveGatewayFailure:` + fmt.Sprintf("%v", this.ConsecutiveGatewayFailure) + `,`,
		`}`,
	}, "")
	return s
}
func (this *EndpointSubsetSelectorType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&EndpointSubsetSelectorType{`,
		`Keys:` + fmt.Sprintf("%v", this.Keys) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CircuitBreaker) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CircuitBreaker{`,
		`Priority:` + fmt.Sprintf("%v", this.Priority) + `,`,
		`ConnectionLimit:` + fmt.Sprintf("%v", this.ConnectionLimit) + `,`,
		`PendingRequests:` + fmt.Sprintf("%v", this.PendingRequests) + `,`,
		`Retries:` + fmt.Sprintf("%v", this.Retries) + `,`,
		`MaxRequests:` + fmt.Sprintf("%v", this.MaxRequests) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Http2ProtocolOptions) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Http2ProtocolOptions{`,
		`Enabled:` + fmt.Sprintf("%v", this.Enabled) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType) String() string {
	if this == nil {
		return "nil"
	}
	keysForDefaultSubset := make([]string, 0, len(this.DefaultSubset))
	for k, _ := range this.DefaultSubset {
		keysForDefaultSubset = append(keysForDefaultSubset, k)
	}
	sortkeys.Strings(keysForDefaultSubset)
	mapStringForDefaultSubset := "map[string]string{"
	for _, k := range keysForDefaultSubset {
		mapStringForDefaultSubset += fmt.Sprintf("%v: %v,", k, this.DefaultSubset[k])
	}
	mapStringForDefaultSubset += "}"
	s := strings.Join([]string{`&GlobalSpecType{`,
		`Endpoints:` + strings.Replace(fmt.Sprintf("%v", this.Endpoints), "ObjectRefType", "ves_io_schema4.ObjectRefType", 1) + `,`,
		`HealthChecks:` + strings.Replace(fmt.Sprintf("%v", this.HealthChecks), "ObjectRefType", "ves_io_schema4.ObjectRefType", 1) + `,`,
		`LoadbalancerAlgorithm:` + fmt.Sprintf("%v", this.LoadbalancerAlgorithm) + `,`,
		`CircuitBreaker:` + strings.Replace(fmt.Sprintf("%v", this.CircuitBreaker), "CircuitBreaker", "CircuitBreaker", 1) + `,`,
		`EndpointSubsets:` + strings.Replace(fmt.Sprintf("%v", this.EndpointSubsets), "EndpointSubsetSelectorType", "EndpointSubsetSelectorType", 1) + `,`,
		`DefaultSubset:` + mapStringForDefaultSubset + `,`,
		`FallbackPolicy:` + fmt.Sprintf("%v", this.FallbackPolicy) + `,`,
		`TlsParameters:` + strings.Replace(fmt.Sprintf("%v", this.TlsParameters), "UpstreamTlsParamsType", "ves_io_schema4.UpstreamTlsParamsType", 1) + `,`,
		`ConnectionTimeout:` + fmt.Sprintf("%v", this.ConnectionTimeout) + `,`,
		`HttpIdleTimeout:` + fmt.Sprintf("%v", this.HttpIdleTimeout) + `,`,
		`OutlierDetection:` + strings.Replace(fmt.Sprintf("%v", this.OutlierDetection), "OutlierDetectionType", "OutlierDetectionType", 1) + `,`,
		`EndpointSelection:` + fmt.Sprintf("%v", this.EndpointSelection) + `,`,
		`DnsLookupFamily:` + fmt.Sprintf("%v", this.DnsLookupFamily) + `,`,
		`DnsDiscoveryType:` + fmt.Sprintf("%v", this.DnsDiscoveryType) + `,`,
		`Http2Options:` + strings.Replace(fmt.Sprintf("%v", this.Http2Options), "Http2ProtocolOptions", "Http2ProtocolOptions", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType) String() string {
	if this == nil {
		return "nil"
	}
	keysForDefaultSubset := make([]string, 0, len(this.DefaultSubset))
	for k, _ := range this.DefaultSubset {
		keysForDefaultSubset = append(keysForDefaultSubset, k)
	}
	sortkeys.Strings(keysForDefaultSubset)
	mapStringForDefaultSubset := "map[string]string{"
	for _, k := range keysForDefaultSubset {
		mapStringForDefaultSubset += fmt.Sprintf("%v: %v,", k, this.DefaultSubset[k])
	}
	mapStringForDefaultSubset += "}"
	s := strings.Join([]string{`&CreateSpecType{`,
		`Endpoints:` + strings.Replace(fmt.Sprintf("%v", this.Endpoints), "ObjectRefType", "ves_io_schema4.ObjectRefType", 1) + `,`,
		`HealthChecks:` + strings.Replace(fmt.Sprintf("%v", this.HealthChecks), "ObjectRefType", "ves_io_schema4.ObjectRefType", 1) + `,`,
		`LoadbalancerAlgorithm:` + fmt.Sprintf("%v", this.LoadbalancerAlgorithm) + `,`,
		`CircuitBreaker:` + strings.Replace(fmt.Sprintf("%v", this.CircuitBreaker), "CircuitBreaker", "CircuitBreaker", 1) + `,`,
		`EndpointSubsets:` + strings.Replace(fmt.Sprintf("%v", this.EndpointSubsets), "EndpointSubsetSelectorType", "EndpointSubsetSelectorType", 1) + `,`,
		`DefaultSubset:` + mapStringForDefaultSubset + `,`,
		`FallbackPolicy:` + fmt.Sprintf("%v", this.FallbackPolicy) + `,`,
		`TlsParameters:` + strings.Replace(fmt.Sprintf("%v", this.TlsParameters), "UpstreamTlsParamsType", "ves_io_schema4.UpstreamTlsParamsType", 1) + `,`,
		`ConnectionTimeout:` + fmt.Sprintf("%v", this.ConnectionTimeout) + `,`,
		`HttpIdleTimeout:` + fmt.Sprintf("%v", this.HttpIdleTimeout) + `,`,
		`OutlierDetection:` + strings.Replace(fmt.Sprintf("%v", this.OutlierDetection), "OutlierDetectionType", "OutlierDetectionType", 1) + `,`,
		`EndpointSelection:` + fmt.Sprintf("%v", this.EndpointSelection) + `,`,
		`Http2Options:` + strings.Replace(fmt.Sprintf("%v", this.Http2Options), "Http2ProtocolOptions", "Http2ProtocolOptions", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType) String() string {
	if this == nil {
		return "nil"
	}
	keysForDefaultSubset := make([]string, 0, len(this.DefaultSubset))
	for k, _ := range this.DefaultSubset {
		keysForDefaultSubset = append(keysForDefaultSubset, k)
	}
	sortkeys.Strings(keysForDefaultSubset)
	mapStringForDefaultSubset := "map[string]string{"
	for _, k := range keysForDefaultSubset {
		mapStringForDefaultSubset += fmt.Sprintf("%v: %v,", k, this.DefaultSubset[k])
	}
	mapStringForDefaultSubset += "}"
	s := strings.Join([]string{`&ReplaceSpecType{`,
		`Endpoints:` + strings.Replace(fmt.Sprintf("%v", this.Endpoints), "ObjectRefType", "ves_io_schema4.ObjectRefType", 1) + `,`,
		`HealthChecks:` + strings.Replace(fmt.Sprintf("%v", this.HealthChecks), "ObjectRefType", "ves_io_schema4.ObjectRefType", 1) + `,`,
		`LoadbalancerAlgorithm:` + fmt.Sprintf("%v", this.LoadbalancerAlgorithm) + `,`,
		`CircuitBreaker:` + strings.Replace(fmt.Sprintf("%v", this.CircuitBreaker), "CircuitBreaker", "CircuitBreaker", 1) + `,`,
		`EndpointSubsets:` + strings.Replace(fmt.Sprintf("%v", this.EndpointSubsets), "EndpointSubsetSelectorType", "EndpointSubsetSelectorType", 1) + `,`,
		`DefaultSubset:` + mapStringForDefaultSubset + `,`,
		`FallbackPolicy:` + fmt.Sprintf("%v", this.FallbackPolicy) + `,`,
		`TlsParameters:` + strings.Replace(fmt.Sprintf("%v", this.TlsParameters), "UpstreamTlsParamsType", "ves_io_schema4.UpstreamTlsParamsType", 1) + `,`,
		`ConnectionTimeout:` + fmt.Sprintf("%v", this.ConnectionTimeout) + `,`,
		`HttpIdleTimeout:` + fmt.Sprintf("%v", this.HttpIdleTimeout) + `,`,
		`OutlierDetection:` + strings.Replace(fmt.Sprintf("%v", this.OutlierDetection), "OutlierDetectionType", "OutlierDetectionType", 1) + `,`,
		`EndpointSelection:` + fmt.Sprintf("%v", this.EndpointSelection) + `,`,
		`Http2Options:` + strings.Replace(fmt.Sprintf("%v", this.Http2Options), "Http2ProtocolOptions", "Http2ProtocolOptions", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType) String() string {
	if this == nil {
		return "nil"
	}
	keysForDefaultSubset := make([]string, 0, len(this.DefaultSubset))
	for k, _ := range this.DefaultSubset {
		keysForDefaultSubset = append(keysForDefaultSubset, k)
	}
	sortkeys.Strings(keysForDefaultSubset)
	mapStringForDefaultSubset := "map[string]string{"
	for _, k := range keysForDefaultSubset {
		mapStringForDefaultSubset += fmt.Sprintf("%v: %v,", k, this.DefaultSubset[k])
	}
	mapStringForDefaultSubset += "}"
	s := strings.Join([]string{`&GetSpecType{`,
		`Endpoints:` + strings.Replace(fmt.Sprintf("%v", this.Endpoints), "ObjectRefType", "ves_io_schema4.ObjectRefType", 1) + `,`,
		`HealthChecks:` + strings.Replace(fmt.Sprintf("%v", this.HealthChecks), "ObjectRefType", "ves_io_schema4.ObjectRefType", 1) + `,`,
		`LoadbalancerAlgorithm:` + fmt.Sprintf("%v", this.LoadbalancerAlgorithm) + `,`,
		`CircuitBreaker:` + strings.Replace(fmt.Sprintf("%v", this.CircuitBreaker), "CircuitBreaker", "CircuitBreaker", 1) + `,`,
		`EndpointSubsets:` + strings.Replace(fmt.Sprintf("%v", this.EndpointSubsets), "EndpointSubsetSelectorType", "EndpointSubsetSelectorType", 1) + `,`,
		`DefaultSubset:` + mapStringForDefaultSubset + `,`,
		`FallbackPolicy:` + fmt.Sprintf("%v", this.FallbackPolicy) + `,`,
		`TlsParameters:` + strings.Replace(fmt.Sprintf("%v", this.TlsParameters), "UpstreamTlsParamsType", "ves_io_schema4.UpstreamTlsParamsType", 1) + `,`,
		`ConnectionTimeout:` + fmt.Sprintf("%v", this.ConnectionTimeout) + `,`,
		`HttpIdleTimeout:` + fmt.Sprintf("%v", this.HttpIdleTimeout) + `,`,
		`OutlierDetection:` + strings.Replace(fmt.Sprintf("%v", this.OutlierDetection), "OutlierDetectionType", "OutlierDetectionType", 1) + `,`,
		`EndpointSelection:` + fmt.Sprintf("%v", this.EndpointSelection) + `,`,
		`Http2Options:` + strings.Replace(fmt.Sprintf("%v", this.Http2Options), "Http2ProtocolOptions", "Http2ProtocolOptions", 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringTypes(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *OutlierDetectionType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OutlierDetectionType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OutlierDetectionType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Consecutive_5Xx", wireType)
			}
			m.Consecutive_5Xx = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Consecutive_5Xx |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Interval", wireType)
			}
			m.Interval = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Interval |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaseEjectionTime", wireType)
			}
			m.BaseEjectionTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BaseEjectionTime |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxEjectionPercent", wireType)
			}
			m.MaxEjectionPercent = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxEjectionPercent |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConsecutiveGatewayFailure", wireType)
			}
			m.ConsecutiveGatewayFailure = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ConsecutiveGatewayFailure |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EndpointSubsetSelectorType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EndpointSubsetSelectorType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EndpointSubsetSelectorType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Keys", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Keys = append(m.Keys, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CircuitBreaker) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CircuitBreaker: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CircuitBreaker: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Priority", wireType)
			}
			m.Priority = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Priority |= (ves_io_schema4.RoutingPriority(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConnectionLimit", wireType)
			}
			m.ConnectionLimit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ConnectionLimit |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PendingRequests", wireType)
			}
			m.PendingRequests = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PendingRequests |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Retries", wireType)
			}
			m.Retries = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Retries |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxRequests", wireType)
			}
			m.MaxRequests = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxRequests |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Http2ProtocolOptions) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Http2ProtocolOptions: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Http2ProtocolOptions: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Enabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Enabled = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GlobalSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GlobalSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GlobalSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Endpoints", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Endpoints = append(m.Endpoints, &ves_io_schema4.ObjectRefType{})
			if err := m.Endpoints[len(m.Endpoints)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HealthChecks", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HealthChecks = append(m.HealthChecks, &ves_io_schema4.ObjectRefType{})
			if err := m.HealthChecks[len(m.HealthChecks)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LoadbalancerAlgorithm", wireType)
			}
			m.LoadbalancerAlgorithm = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LoadbalancerAlgorithm |= (LoadbalancerAlgorithm(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CircuitBreaker", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CircuitBreaker == nil {
				m.CircuitBreaker = &CircuitBreaker{}
			}
			if err := m.CircuitBreaker.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndpointSubsets", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EndpointSubsets = append(m.EndpointSubsets, &EndpointSubsetSelectorType{})
			if err := m.EndpointSubsets[len(m.EndpointSubsets)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultSubset", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DefaultSubset == nil {
				m.DefaultSubset = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTypes
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthTypes
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTypes
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthTypes
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipTypes(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthTypes
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.DefaultSubset[mapkey] = mapvalue
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FallbackPolicy", wireType)
			}
			m.FallbackPolicy = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FallbackPolicy |= (SubsetFallbackPolicy(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TlsParameters", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TlsParameters == nil {
				m.TlsParameters = &ves_io_schema4.UpstreamTlsParamsType{}
			}
			if err := m.TlsParameters.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConnectionTimeout", wireType)
			}
			m.ConnectionTimeout = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ConnectionTimeout |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HttpIdleTimeout", wireType)
			}
			m.HttpIdleTimeout = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HttpIdleTimeout |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutlierDetection", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.OutlierDetection == nil {
				m.OutlierDetection = &OutlierDetectionType{}
			}
			if err := m.OutlierDetection.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndpointSelection", wireType)
			}
			m.EndpointSelection = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EndpointSelection |= (EndpointSelectionPolicy(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DnsLookupFamily", wireType)
			}
			m.DnsLookupFamily = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DnsLookupFamily |= (DnsLookupType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DnsDiscoveryType", wireType)
			}
			m.DnsDiscoveryType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DnsDiscoveryType |= (DnsDiscoveryType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Http2Options", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Http2Options == nil {
				m.Http2Options = &Http2ProtocolOptions{}
			}
			if err := m.Http2Options.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Endpoints", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Endpoints = append(m.Endpoints, &ves_io_schema4.ObjectRefType{})
			if err := m.Endpoints[len(m.Endpoints)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HealthChecks", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HealthChecks = append(m.HealthChecks, &ves_io_schema4.ObjectRefType{})
			if err := m.HealthChecks[len(m.HealthChecks)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LoadbalancerAlgorithm", wireType)
			}
			m.LoadbalancerAlgorithm = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LoadbalancerAlgorithm |= (LoadbalancerAlgorithm(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CircuitBreaker", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CircuitBreaker == nil {
				m.CircuitBreaker = &CircuitBreaker{}
			}
			if err := m.CircuitBreaker.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndpointSubsets", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EndpointSubsets = append(m.EndpointSubsets, &EndpointSubsetSelectorType{})
			if err := m.EndpointSubsets[len(m.EndpointSubsets)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultSubset", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DefaultSubset == nil {
				m.DefaultSubset = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTypes
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthTypes
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTypes
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthTypes
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipTypes(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthTypes
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.DefaultSubset[mapkey] = mapvalue
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FallbackPolicy", wireType)
			}
			m.FallbackPolicy = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FallbackPolicy |= (SubsetFallbackPolicy(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TlsParameters", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TlsParameters == nil {
				m.TlsParameters = &ves_io_schema4.UpstreamTlsParamsType{}
			}
			if err := m.TlsParameters.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConnectionTimeout", wireType)
			}
			m.ConnectionTimeout = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ConnectionTimeout |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HttpIdleTimeout", wireType)
			}
			m.HttpIdleTimeout = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HttpIdleTimeout |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutlierDetection", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.OutlierDetection == nil {
				m.OutlierDetection = &OutlierDetectionType{}
			}
			if err := m.OutlierDetection.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndpointSelection", wireType)
			}
			m.EndpointSelection = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EndpointSelection |= (EndpointSelectionPolicy(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Http2Options", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Http2Options == nil {
				m.Http2Options = &Http2ProtocolOptions{}
			}
			if err := m.Http2Options.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplaceSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplaceSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplaceSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Endpoints", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Endpoints = append(m.Endpoints, &ves_io_schema4.ObjectRefType{})
			if err := m.Endpoints[len(m.Endpoints)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HealthChecks", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HealthChecks = append(m.HealthChecks, &ves_io_schema4.ObjectRefType{})
			if err := m.HealthChecks[len(m.HealthChecks)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LoadbalancerAlgorithm", wireType)
			}
			m.LoadbalancerAlgorithm = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LoadbalancerAlgorithm |= (LoadbalancerAlgorithm(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CircuitBreaker", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CircuitBreaker == nil {
				m.CircuitBreaker = &CircuitBreaker{}
			}
			if err := m.CircuitBreaker.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndpointSubsets", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EndpointSubsets = append(m.EndpointSubsets, &EndpointSubsetSelectorType{})
			if err := m.EndpointSubsets[len(m.EndpointSubsets)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultSubset", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DefaultSubset == nil {
				m.DefaultSubset = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTypes
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthTypes
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTypes
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthTypes
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipTypes(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthTypes
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.DefaultSubset[mapkey] = mapvalue
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FallbackPolicy", wireType)
			}
			m.FallbackPolicy = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FallbackPolicy |= (SubsetFallbackPolicy(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TlsParameters", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TlsParameters == nil {
				m.TlsParameters = &ves_io_schema4.UpstreamTlsParamsType{}
			}
			if err := m.TlsParameters.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConnectionTimeout", wireType)
			}
			m.ConnectionTimeout = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ConnectionTimeout |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HttpIdleTimeout", wireType)
			}
			m.HttpIdleTimeout = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HttpIdleTimeout |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutlierDetection", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.OutlierDetection == nil {
				m.OutlierDetection = &OutlierDetectionType{}
			}
			if err := m.OutlierDetection.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndpointSelection", wireType)
			}
			m.EndpointSelection = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EndpointSelection |= (EndpointSelectionPolicy(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Http2Options", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Http2Options == nil {
				m.Http2Options = &Http2ProtocolOptions{}
			}
			if err := m.Http2Options.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Endpoints", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Endpoints = append(m.Endpoints, &ves_io_schema4.ObjectRefType{})
			if err := m.Endpoints[len(m.Endpoints)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HealthChecks", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HealthChecks = append(m.HealthChecks, &ves_io_schema4.ObjectRefType{})
			if err := m.HealthChecks[len(m.HealthChecks)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LoadbalancerAlgorithm", wireType)
			}
			m.LoadbalancerAlgorithm = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LoadbalancerAlgorithm |= (LoadbalancerAlgorithm(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CircuitBreaker", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CircuitBreaker == nil {
				m.CircuitBreaker = &CircuitBreaker{}
			}
			if err := m.CircuitBreaker.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndpointSubsets", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EndpointSubsets = append(m.EndpointSubsets, &EndpointSubsetSelectorType{})
			if err := m.EndpointSubsets[len(m.EndpointSubsets)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultSubset", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DefaultSubset == nil {
				m.DefaultSubset = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTypes
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthTypes
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTypes
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthTypes
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipTypes(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthTypes
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.DefaultSubset[mapkey] = mapvalue
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FallbackPolicy", wireType)
			}
			m.FallbackPolicy = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FallbackPolicy |= (SubsetFallbackPolicy(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TlsParameters", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TlsParameters == nil {
				m.TlsParameters = &ves_io_schema4.UpstreamTlsParamsType{}
			}
			if err := m.TlsParameters.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConnectionTimeout", wireType)
			}
			m.ConnectionTimeout = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ConnectionTimeout |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HttpIdleTimeout", wireType)
			}
			m.HttpIdleTimeout = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HttpIdleTimeout |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutlierDetection", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.OutlierDetection == nil {
				m.OutlierDetection = &OutlierDetectionType{}
			}
			if err := m.OutlierDetection.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndpointSelection", wireType)
			}
			m.EndpointSelection = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EndpointSelection |= (EndpointSelectionPolicy(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Http2Options", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Http2Options == nil {
				m.Http2Options = &Http2ProtocolOptions{}
			}
			if err := m.Http2Options.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTypes(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthTypes
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipTypes(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthTypes = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTypes   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("ves.io/schema/cluster/types.proto", fileDescriptorTypes) }
func init() { golang_proto.RegisterFile("ves.io/schema/cluster/types.proto", fileDescriptorTypes) }

var fileDescriptorTypes = []byte{
	// 1839 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x59, 0xdf, 0x6f, 0xdb, 0xd6,
	0x15, 0xd6, 0x95, 0x15, 0x47, 0xba, 0xfa, 0x45, 0xdf, 0x3a, 0x09, 0xed, 0x06, 0x84, 0x66, 0x64,
	0x58, 0xaa, 0x32, 0x72, 0x24, 0xdb, 0x69, 0x6a, 0x60, 0x69, 0x25, 0x4b, 0x76, 0xbc, 0xa8, 0x92,
	0x42, 0xc9, 0x43, 0xdb, 0x65, 0xe1, 0x28, 0xea, 0x4a, 0xe6, 0x4c, 0x89, 0x1c, 0x79, 0xa5, 0x5a,
	0x03, 0x0a, 0xe4, 0x79, 0xc0, 0x80, 0x6d, 0xc0, 0xf6, 0xb0, 0x61, 0xef, 0x43, 0xff, 0x82, 0x61,
	0xde, 0x83, 0x51, 0x60, 0xc0, 0xb0, 0x97, 0xe5, 0x6d, 0x45, 0x9f, 0x1a, 0xf5, 0x65, 0x7b, 0x19,
	0x82, 0x3c, 0xf5, 0x71, 0xb8, 0x97, 0xa4, 0x2d, 0xc9, 0x62, 0xb7, 0x2e, 0x7e, 0x68, 0x01, 0xbf,
	0xe9, 0xf2, 0x9c, 0xf3, 0x7d, 0xe4, 0x3d, 0xe7, 0x7e, 0x1f, 0x6d, 0xc2, 0x6f, 0x0d, 0xb0, 0x9d,
	0xd1, 0x8c, 0x55, 0x5b, 0xdd, 0xc7, 0x5d, 0x65, 0x55, 0xd5, 0xfb, 0x36, 0xc1, 0xd6, 0x2a, 0x19,
	0x9a, 0xd8, 0xce, 0x98, 0x96, 0x41, 0x0c, 0x74, 0xc5, 0x49, 0xc9, 0x38, 0x29, 0x19, 0x37, 0x65,
	0xf9, 0x56, 0x47, 0x23, 0xfb, 0xfd, 0x66, 0x46, 0x35, 0xba, 0xab, 0x1d, 0xa3, 0x63, 0xac, 0xb2,
	0xec, 0x66, 0xbf, 0xcd, 0x56, 0x6c, 0xc1, 0x7e, 0x39, 0x28, 0xcb, 0xaf, 0x4e, 0x12, 0x19, 0x26,
	0xd1, 0x8c, 0x9e, 0x4b, 0xb1, 0xbc, 0x34, 0x19, 0x1c, 0x63, 0x5f, 0xbe, 0x3e, 0x19, 0x1a, 0x28,
	0xba, 0xd6, 0x52, 0x08, 0x76, 0xa3, 0xa9, 0xa9, 0xa8, 0x86, 0x3f, 0x90, 0x27, 0xa0, 0x57, 0x3e,
	0x0d, 0xc2, 0xc5, 0x6a, 0x9f, 0xe8, 0x1a, 0xb6, 0x8a, 0x98, 0x60, 0x95, 0xc6, 0x1a, 0x43, 0x13,
	0xa3, 0x37, 0x60, 0x52, 0x35, 0x7a, 0x36, 0x56, 0xfb, 0x44, 0x1b, 0x60, 0x79, 0xe3, 0xf0, 0x90,
	0x07, 0x29, 0x70, 0x33, 0x5e, 0x48, 0x7c, 0x71, 0x04, 0x02, 0x7f, 0xfa, 0xd7, 0xf1, 0xdc, 0xa5,
	0xf4, 0x1c, 0xff, 0x24, 0x2c, 0x25, 0xc6, 0xd2, 0x36, 0x0e, 0x0f, 0xd1, 0xeb, 0x30, 0xac, 0xf5,
	0x08, 0xb6, 0x06, 0x8a, 0xce, 0x07, 0x59, 0x45, 0xd2, 0xab, 0x98, 0x4f, 0x87, 0xf8, 0xe3, 0xbf,
	0xdf, 0x90, 0x4e, 0x12, 0xd0, 0x77, 0x21, 0x6a, 0x2a, 0x36, 0x96, 0xf1, 0x8f, 0x1d, 0x6a, 0x99,
	0x68, 0x5d, 0xcc, 0xcf, 0xcd, 0x28, 0xfb, 0x77, 0x57, 0xe2, 0x68, 0x6a, 0xc9, 0xcd, 0x6c, 0x68,
	0x5d, 0x8c, 0xde, 0x82, 0x8b, 0x5d, 0xe5, 0xf0, 0xb4, 0xda, 0xc4, 0x96, 0x8a, 0x7b, 0x84, 0x0f,
	0x31, 0x80, 0xb8, 0x07, 0x10, 0x4a, 0x07, 0xf9, 0x96, 0x84, 0xba, 0xca, 0xa1, 0x57, 0x5d, 0x73,
	0x12, 0x51, 0x05, 0xbe, 0x3a, 0xfe, 0x94, 0x1d, 0x85, 0xe0, 0x0f, 0x94, 0xa1, 0xdc, 0x56, 0x34,
	0xbd, 0x6f, 0x61, 0xfe, 0xd2, 0xcc, 0x27, 0x5e, 0x1a, 0x2b, 0xd9, 0x71, 0x2a, 0xb6, 0x9d, 0x82,
	0xcd, 0xd8, 0x8b, 0x7b, 0x91, 0xac, 0x98, 0x13, 0xd7, 0xc4, 0x75, 0x71, 0x63, 0xa5, 0x05, 0x97,
	0x4b, 0xbd, 0x96, 0x69, 0x68, 0x3d, 0x52, 0xef, 0x37, 0x6d, 0x4c, 0xea, 0x58, 0xc7, 0x2a, 0x31,
	0x2c, 0xb6, 0xc3, 0x2b, 0x30, 0x74, 0x80, 0x87, 0x36, 0x0f, 0x52, 0x73, 0x37, 0x23, 0x63, 0x24,
	0xbf, 0x02, 0x41, 0x8e, 0x93, 0x58, 0x6c, 0x73, 0xe5, 0xe3, 0x23, 0x20, 0xc0, 0xeb, 0xf0, 0x5a,
	0x59, 0xb3, 0x49, 0xca, 0x68, 0xa7, 0xe8, 0xd5, 0x54, 0xdb, 0xb0, 0x52, 0x0e, 0x20, 0x02, 0xd9,
	0x95, 0x7f, 0x04, 0x61, 0x62, 0x4b, 0xb3, 0xd4, 0xbe, 0x46, 0x0a, 0x16, 0x56, 0x0e, 0xb0, 0x85,
	0xde, 0x86, 0x61, 0xd3, 0xd2, 0x0c, 0x4b, 0x23, 0x43, 0xd6, 0xb5, 0x44, 0x4e, 0xc8, 0x4c, 0x8e,
	0xa9, 0x64, 0xf4, 0x89, 0xd6, 0xeb, 0xd4, 0xdc, 0xac, 0x42, 0x88, 0xd2, 0x4b, 0x27, 0x55, 0xa8,
	0x00, 0x39, 0xd5, 0xe8, 0xf5, 0xdc, 0x7d, 0xd5, 0xb5, 0xae, 0x46, 0xdc, 0x6e, 0x5e, 0xfb, 0xf4,
	0x08, 0x84, 0xb2, 0xb7, 0x73, 0xeb, 0xe3, 0xed, 0x79, 0xf2, 0x24, 0x28, 0x25, 0x4f, 0x0b, 0xca,
	0x34, 0x9f, 0x62, 0x98, 0xb8, 0xd7, 0xd2, 0x7a, 0x1d, 0xd9, 0xc2, 0x3f, 0xe9, 0x63, 0x9b, 0xd8,
	0x6e, 0x6b, 0xfd, 0x31, 0xdc, 0x02, 0xc9, 0xcd, 0x47, 0x59, 0x78, 0xd9, 0xc2, 0xc4, 0xd2, 0xb0,
	0xed, 0x36, 0xd5, 0xb7, 0xd4, 0xcb, 0x43, 0x9b, 0x30, 0x46, 0x87, 0xe2, 0x84, 0xf2, 0xd2, 0x97,
	0xd7, 0x45, 0xbb, 0xca, 0xa1, 0x47, 0x37, 0xd5, 0xbf, 0xdb, 0x70, 0xf1, 0x3e, 0x21, 0x66, 0xae,
	0x46, 0x8f, 0x8a, 0x6a, 0xe8, 0x55, 0xe7, 0xe8, 0x20, 0x1e, 0x5e, 0xc6, 0x3d, 0xa5, 0xa9, 0xe3,
	0x16, 0xdb, 0xdd, 0xb0, 0xe4, 0x2d, 0x57, 0x5e, 0xc4, 0x60, 0x62, 0x47, 0x37, 0x9a, 0x8a, 0x5e,
	0x37, 0xb1, 0xca, 0xda, 0xfc, 0x10, 0x46, 0xb0, 0x3b, 0x04, 0x4e, 0xaf, 0xa3, 0xb9, 0xeb, 0x53,
	0xcd, 0xa8, 0x36, 0xe9, 0x58, 0x4a, 0xb8, 0x4d, 0x0b, 0x0a, 0x57, 0x3e, 0xfa, 0x30, 0xec, 0x55,
	0x9c, 0x0c, 0x44, 0x4a, 0x3a, 0x45, 0x41, 0x3f, 0x80, 0xf1, 0x7d, 0xac, 0xe8, 0x64, 0x5f, 0x56,
	0xf7, 0xb1, 0x7a, 0x60, 0xf3, 0xc1, 0xff, 0x01, 0x96, 0xff, 0xe8, 0xc3, 0xa8, 0x53, 0xc5, 0x8a,
	0x4e, 0x90, 0x43, 0x52, 0xcc, 0xb9, 0xbc, 0xc5, 0xb0, 0x90, 0x06, 0xaf, 0xea, 0x86, 0xd2, 0x6a,
	0x2a, 0xba, 0xd2, 0x53, 0xb1, 0x25, 0x2b, 0x7a, 0x87, 0x8e, 0xc4, 0x7e, 0x97, 0xf5, 0x2e, 0x91,
	0x13, 0x33, 0x33, 0x05, 0x2f, 0x53, 0x1e, 0x2b, 0xca, 0x7b, 0x35, 0xee, 0x5c, 0x5d, 0xd1, 0x67,
	0x05, 0xd1, 0xbb, 0x30, 0xa9, 0x3a, 0x83, 0x2b, 0x37, 0x9d, 0xc9, 0x65, 0x4d, 0x8e, 0xe6, 0xbe,
	0xed, 0xc3, 0x31, 0x39, 0xe6, 0x85, 0xf0, 0xf1, 0x11, 0x00, 0xcf, 0x8f, 0x00, 0x90, 0x12, 0xea,
	0xe4, 0x01, 0x20, 0x90, 0xf3, 0xb6, 0x4b, 0xb6, 0xd9, 0x49, 0xa1, 0x73, 0x40, 0x37, 0x29, 0xeb,
	0x03, 0xed, 0x7f, 0x50, 0x0b, 0x57, 0x29, 0xcd, 0xd3, 0x23, 0x00, 0x26, 0x8e, 0x68, 0x4a, 0x4a,
	0xe2, 0x89, 0x1a, 0x1b, 0xfd, 0x14, 0x26, 0x5a, 0xb8, 0xad, 0xf4, 0x75, 0x8f, 0x94, 0x9f, 0x67,
	0x9c, 0x77, 0x7d, 0x38, 0x27, 0x27, 0x25, 0x53, 0x74, 0x6a, 0x1d, 0xb4, 0x52, 0x8f, 0x58, 0xc3,
	0xc2, 0x12, 0xa5, 0x66, 0x94, 0xbf, 0xa5, 0x94, 0xa3, 0xcf, 0xfe, 0x32, 0x37, 0xff, 0xb3, 0x3f,
	0x83, 0x60, 0x38, 0x20, 0xc5, 0x5b, 0xe3, 0xe9, 0xe8, 0x31, 0x4c, 0xb6, 0x15, 0x5d, 0x6f, 0x2a,
	0xea, 0x81, 0x6c, 0x1a, 0xba, 0xa6, 0x0e, 0xf9, 0xcb, 0xac, 0x5f, 0xaf, 0xfb, 0x90, 0x3b, 0x75,
	0xdb, 0x6e, 0x4d, 0x8d, 0x95, 0x38, 0x3b, 0xca, 0x5a, 0x96, 0x68, 0x4f, 0x44, 0xd0, 0x43, 0x98,
	0x20, 0xba, 0x2d, 0x9b, 0x8a, 0xa5, 0x74, 0x31, 0xc1, 0x96, 0xcd, 0x87, 0x59, 0xab, 0x6e, 0x4c,
	0xc1, 0xef, 0x99, 0x36, 0xb1, 0xb0, 0xd2, 0x6d, 0xe8, 0x76, 0x8d, 0xe6, 0xda, 0x6c, 0x0b, 0x43,
	0x74, 0xfb, 0xa4, 0x38, 0x71, 0x2f, 0x32, 0x00, 0x54, 0x80, 0x68, 0x4c, 0x63, 0xa8, 0xf2, 0x1b,
	0x7d, 0xc2, 0x47, 0xd8, 0x71, 0x7d, 0xe5, 0x78, 0x6c, 0xbf, 0x3d, 0xdf, 0x58, 0x38, 0x4d, 0x6f,
	0x38, 0xd9, 0xe8, 0x2d, 0xb8, 0xb0, 0x4f, 0x88, 0x29, 0x6b, 0x2d, 0x1d, 0x9f, 0x40, 0x40, 0x7f,
	0x88, 0x24, 0xcd, 0xde, 0x6d, 0xe9, 0xd8, 0x03, 0x78, 0x0c, 0x17, 0x0c, 0xc7, 0xff, 0xe4, 0x96,
	0x67, 0x80, 0x7c, 0x8c, 0x3d, 0x9a, 0xdf, 0xce, 0xcd, 0xf2, 0xcb, 0x42, 0x88, 0xb2, 0x49, 0x9c,
	0x31, 0x15, 0x43, 0x2a, 0x44, 0xa7, 0x93, 0xc8, 0xa6, 0x8a, 0x12, 0xc4, 0x59, 0x6b, 0x32, 0xff,
	0x6d, 0x16, 0xbd, 0x7c, 0xb7, 0x3b, 0xce, 0x61, 0x5a, 0xc0, 0xd3, 0x61, 0xf4, 0x3e, 0x5c, 0x68,
	0xf5, 0x6c, 0x59, 0x37, 0x8c, 0x83, 0xbe, 0x29, 0xb7, 0x95, 0xae, 0xa6, 0x0f, 0xf9, 0x04, 0xe3,
	0xb8, 0xe1, 0xc3, 0x51, 0xec, 0xd9, 0x65, 0x96, 0xce, 0xee, 0xfe, 0xb4, 0xef, 0xc9, 0x96, 0x17,
	0xd8, 0x66, 0x30, 0x48, 0x86, 0x88, 0x62, 0xb7, 0x34, 0x5b, 0x35, 0x06, 0xd8, 0x1a, 0xca, 0xf4,
	0xf5, 0x83, 0x4f, 0x32, 0xf0, 0xef, 0xf8, 0x83, 0x17, 0xbd, 0xfc, 0x29, 0x7c, 0xae, 0x35, 0x15,
	0x43, 0x8f, 0x61, 0x9c, 0x36, 0x25, 0xe7, 0xbd, 0x99, 0xf0, 0xdc, 0x97, 0xee, 0xfe, 0x2c, 0x45,
	0x2e, 0xc4, 0x3c, 0x25, 0x60, 0x1c, 0x31, 0x86, 0xe7, 0xc6, 0x96, 0xdf, 0x86, 0xe8, 0xec, 0xc9,
	0x42, 0x1c, 0x9c, 0x3b, 0xc0, 0x8e, 0x3b, 0x46, 0x24, 0xfa, 0x13, 0x2d, 0xc2, 0x4b, 0x03, 0x45,
	0xef, 0x63, 0xe6, 0x73, 0x11, 0xc9, 0x59, 0x6c, 0x06, 0xef, 0x82, 0xcd, 0xdf, 0x80, 0x8f, 0x8f,
	0xc0, 0x2f, 0x01, 0x14, 0xe0, 0x52, 0xd5, 0xd2, 0x3a, 0x5a, 0x2f, 0x55, 0xc7, 0xd6, 0x00, 0x5b,
	0xf6, 0x4d, 0xaf, 0x53, 0xf6, 0x6b, 0x08, 0x64, 0xe1, 0x26, 0x4c, 0xb9, 0xf1, 0x9a, 0x61, 0xe8,
	0x37, 0xdd, 0x3b, 0x7e, 0x2d, 0x75, 0x3a, 0xf3, 0x29, 0x74, 0x75, 0x4d, 0xcc, 0x89, 0xd9, 0x35,
	0xf1, 0xae, 0xf8, 0xa6, 0x98, 0xbd, 0x2d, 0x66, 0xd7, 0xc5, 0xec, 0x86, 0x98, 0xbd, 0x03, 0x79,
	0xc8, 0xb9, 0xea, 0x96, 0x72, 0x45, 0xcc, 0x46, 0xa1, 0x75, 0x31, 0x9b, 0x83, 0x4b, 0x90, 0xf3,
	0x68, 0x52, 0x9e, 0xd2, 0x5c, 0xda, 0x10, 0xef, 0x88, 0x6f, 0x7c, 0x2f, 0x14, 0x8e, 0x72, 0xb1,
	0x95, 0xdf, 0x45, 0x60, 0x62, 0xcb, 0xc2, 0x0a, 0xc1, 0x27, 0xa6, 0xb3, 0xf3, 0x55, 0x4d, 0x27,
	0x3a, 0x66, 0x3a, 0xe3, 0x56, 0xf3, 0xf0, 0xff, 0xb1, 0x9a, 0xc4, 0xa4, 0xd5, 0x4c, 0x19, 0x8c,
	0x7a, 0x9e, 0x06, 0xe3, 0x67, 0x2d, 0x95, 0x97, 0xb3, 0x96, 0x33, 0x86, 0xf2, 0xe8, 0x1c, 0x0d,
	0xe5, 0xac, 0x71, 0xc8, 0x5f, 0xd1, 0x38, 0x26, 0xbb, 0x3d, 0xc3, 0x38, 0xa6, 0xdd, 0xa1, 0x71,
	0x1e, 0xee, 0x70, 0xc6, 0x13, 0x1e, 0xbc, 0x8c, 0x27, 0x4c, 0xbb, 0xc1, 0x2d, 0x7f, 0x37, 0x98,
	0x25, 0xfc, 0x69, 0x5f, 0xe1, 0x3f, 0xab, 0xf1, 0xef, 0x9e, 0x8f, 0xc6, 0xcf, 0x50, 0xf7, 0x1f,
	0x9e, 0x9f, 0xba, 0xcf, 0xd2, 0xf5, 0xda, 0xcb, 0x4b, 0xe3, 0xb9, 0x8b, 0x61, 0xe6, 0x6f, 0xf7,
	0xa6, 0x5e, 0x71, 0x5f, 0xdc, 0x5b, 0x76, 0xde, 0x99, 0xef, 0x52, 0x61, 0x63, 0xb2, 0xb6, 0x2e,
	0x32, 0x81, 0x12, 0xb3, 0xb9, 0x95, 0xdf, 0x47, 0x60, 0x52, 0xc2, 0xa6, 0xae, 0xa8, 0x17, 0xf2,
	0xf4, 0x0d, 0x95, 0xa7, 0x1f, 0xf9, 0xc8, 0xd3, 0x9b, 0x3e, 0xd8, 0x53, 0xed, 0xbe, 0xd0, 0xa7,
	0x0b, 0x7d, 0xfa, 0xfa, 0xea, 0xd3, 0xaf, 0x23, 0x30, 0xba, 0x83, 0xc9, 0x85, 0x36, 0x7d, 0x33,
	0xb5, 0xe9, 0x91, 0x8f, 0x36, 0x6d, 0xf8, 0xfd, 0xcd, 0x7d, 0xda, 0xea, 0x0b, 0x5d, 0xba, 0xd0,
	0xa5, 0xaf, 0xad, 0x2e, 0xa5, 0x1f, 0xc1, 0x2b, 0x33, 0x8f, 0x2d, 0x4a, 0xc2, 0xa8, 0x54, 0xdd,
	0xab, 0x14, 0x65, 0xa9, 0x5a, 0xd8, 0xad, 0x70, 0x01, 0xb4, 0x00, 0xe3, 0xe5, 0x52, 0xbe, 0xde,
	0x90, 0xa5, 0xd2, 0xc3, 0xbd, 0x52, 0xbd, 0xc1, 0x01, 0x14, 0x87, 0x11, 0x69, 0xb7, 0xb2, 0x23,
	0xdf, 0xcf, 0xd7, 0xef, 0x73, 0x41, 0x04, 0xe1, 0xbc, 0x94, 0xaf, 0x14, 0xab, 0xef, 0x70, 0x73,
	0xcb, 0xa1, 0xe3, 0x23, 0x10, 0x48, 0xaf, 0x41, 0x6e, 0xfa, 0x8f, 0x74, 0x94, 0x80, 0xb0, 0xde,
	0x90, 0x76, 0xb7, 0x1a, 0x72, 0xb1, 0x52, 0xe7, 0x02, 0x94, 0xa8, 0x5c, 0xdd, 0xd9, 0xdd, 0xca,
	0x97, 0xd9, 0x05, 0x90, 0x5e, 0x83, 0xf1, 0x89, 0x7f, 0x1b, 0xa0, 0x30, 0x0c, 0xe5, 0xf7, 0x1a,
	0x55, 0x2e, 0x80, 0xa2, 0xf0, 0xf2, 0xf7, 0xd7, 0xe5, 0x6a, 0xa5, 0xfc, 0x1e, 0x07, 0xd8, 0xe2,
	0x8e, 0xb3, 0x08, 0xa6, 0xdf, 0x81, 0x8b, 0xb3, 0x0e, 0x05, 0x45, 0xaf, 0x54, 0xe5, 0xed, 0x7c,
	0xb9, 0x5c, 0xc8, 0x6f, 0x3d, 0xe0, 0x02, 0x88, 0x83, 0xb1, 0x7c, 0xe5, 0x3d, 0xb9, 0x54, 0x29,
	0xd6, 0xaa, 0xbb, 0x15, 0xfa, 0x14, 0x08, 0x26, 0x8a, 0xa5, 0xed, 0xfc, 0x5e, 0xb9, 0x21, 0xd7,
	0xf7, 0x0a, 0xf5, 0x52, 0x83, 0x0b, 0xa6, 0xf7, 0xe0, 0x35, 0x9f, 0x41, 0xa0, 0x88, 0xc5, 0x5d,
	0xfa, 0x04, 0x85, 0xbd, 0x46, 0xa9, 0xc8, 0x05, 0xe8, 0x03, 0x95, 0xab, 0xf4, 0xf6, 0xdd, 0xfb,
	0x7a, 0x05, 0x26, 0x9d, 0x75, 0x4d, 0x2a, 0x6d, 0x97, 0x24, 0xa9, 0x54, 0xe4, 0x82, 0x6c, 0x3f,
	0x82, 0x85, 0x9f, 0x83, 0xa7, 0xcf, 0x84, 0xc0, 0x27, 0xcf, 0x84, 0xc0, 0xf3, 0x67, 0x02, 0xf8,
	0xe2, 0x99, 0x00, 0x9e, 0x8c, 0x04, 0xf0, 0x87, 0x91, 0x00, 0xfe, 0x38, 0x12, 0xc0, 0xf1, 0x48,
	0x00, 0x7f, 0x1d, 0x09, 0xe0, 0xe9, 0x48, 0x00, 0x9f, 0x8c, 0x04, 0xf0, 0xd9, 0x48, 0x00, 0xff,
	0x1c, 0x09, 0x81, 0xe7, 0x23, 0x01, 0xfc, 0xe2, 0x73, 0x21, 0x70, 0xfc, 0xb9, 0x00, 0xde, 0x7f,
	0xd0, 0x31, 0xcc, 0x83, 0x4e, 0x66, 0x60, 0xe8, 0x04, 0x5b, 0x96, 0x92, 0xe9, 0xdb, 0xab, 0xec,
	0x47, 0xdb, 0xb0, 0xba, 0xb7, 0x4c, 0xcb, 0x18, 0x68, 0x2d, 0x6c, 0xdd, 0xf2, 0xc2, 0xab, 0x66,
	0xb3, 0x63, 0xac, 0xe2, 0x43, 0xe2, 0x7e, 0x9b, 0x99, 0xfc, 0xc2, 0xd4, 0x9c, 0x67, 0x9f, 0x67,
	0xd6, 0xfe, 0x13, 0x00, 0x00, 0xff, 0xff, 0x3e, 0xc3, 0xc8, 0x07, 0x81, 0x1a, 0x00, 0x00,
}
