// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ves.io/schema/k8s_cluster_role_binding/types.proto

package k8s_cluster_role_binding

import proto "github.com/gogo/protobuf/proto"
import golang_proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"
import _ "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
import _ "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
import _ "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
import _ "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
import ves_io_schema_views "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/views"

import strings "strings"
import reflect "reflect"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type ServiceAccountType struct {
	// Namespace
	//
	// x-displayName: "Namespace"
	// x-required
	// x-example: "cd-app-namespace"
	// Namespace of the service account
	Namespace string `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// Name
	//
	// x-displayName: "Name"
	// x-required
	// x-example: "cd-app-controller"
	// Name of the service account
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (m *ServiceAccountType) Reset()                    { *m = ServiceAccountType{} }
func (*ServiceAccountType) ProtoMessage()               {}
func (*ServiceAccountType) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{0} }

func (m *ServiceAccountType) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *ServiceAccountType) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

// Subject
//
// x-displayName: "Subject"
// Subject can be user or service account.
type SubjectType struct {
	// Select Subject
	//
	// x-displayName: "Select Subject"
	// x-required
	// Select subject as user, group or service account
	//
	// Types that are valid to be assigned to SubjectChoice:
	//	*SubjectType_User
	//	*SubjectType_ServiceAccount
	//	*SubjectType_Group
	SubjectChoice isSubjectType_SubjectChoice `protobuf_oneof:"subject_choice"`
}

func (m *SubjectType) Reset()                    { *m = SubjectType{} }
func (*SubjectType) ProtoMessage()               {}
func (*SubjectType) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{1} }

type isSubjectType_SubjectChoice interface {
	isSubjectType_SubjectChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type SubjectType_User struct {
	User string `protobuf:"bytes,2,opt,name=user,proto3,oneof"`
}
type SubjectType_ServiceAccount struct {
	ServiceAccount *ServiceAccountType `protobuf:"bytes,3,opt,name=service_account,json=serviceAccount,oneof"`
}
type SubjectType_Group struct {
	Group string `protobuf:"bytes,4,opt,name=group,proto3,oneof"`
}

func (*SubjectType_User) isSubjectType_SubjectChoice()           {}
func (*SubjectType_ServiceAccount) isSubjectType_SubjectChoice() {}
func (*SubjectType_Group) isSubjectType_SubjectChoice()          {}

func (m *SubjectType) GetSubjectChoice() isSubjectType_SubjectChoice {
	if m != nil {
		return m.SubjectChoice
	}
	return nil
}

func (m *SubjectType) GetUser() string {
	if x, ok := m.GetSubjectChoice().(*SubjectType_User); ok {
		return x.User
	}
	return ""
}

func (m *SubjectType) GetServiceAccount() *ServiceAccountType {
	if x, ok := m.GetSubjectChoice().(*SubjectType_ServiceAccount); ok {
		return x.ServiceAccount
	}
	return nil
}

func (m *SubjectType) GetGroup() string {
	if x, ok := m.GetSubjectChoice().(*SubjectType_Group); ok {
		return x.Group
	}
	return ""
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*SubjectType) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _SubjectType_OneofMarshaler, _SubjectType_OneofUnmarshaler, _SubjectType_OneofSizer, []interface{}{
		(*SubjectType_User)(nil),
		(*SubjectType_ServiceAccount)(nil),
		(*SubjectType_Group)(nil),
	}
}

func _SubjectType_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*SubjectType)
	// subject_choice
	switch x := m.SubjectChoice.(type) {
	case *SubjectType_User:
		_ = b.EncodeVarint(2<<3 | proto.WireBytes)
		_ = b.EncodeStringBytes(x.User)
	case *SubjectType_ServiceAccount:
		_ = b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ServiceAccount); err != nil {
			return err
		}
	case *SubjectType_Group:
		_ = b.EncodeVarint(4<<3 | proto.WireBytes)
		_ = b.EncodeStringBytes(x.Group)
	case nil:
	default:
		return fmt.Errorf("SubjectType.SubjectChoice has unexpected type %T", x)
	}
	return nil
}

func _SubjectType_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*SubjectType)
	switch tag {
	case 2: // subject_choice.user
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.SubjectChoice = &SubjectType_User{x}
		return true, err
	case 3: // subject_choice.service_account
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ServiceAccountType)
		err := b.DecodeMessage(msg)
		m.SubjectChoice = &SubjectType_ServiceAccount{msg}
		return true, err
	case 4: // subject_choice.group
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.SubjectChoice = &SubjectType_Group{x}
		return true, err
	default:
		return false, nil
	}
}

func _SubjectType_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*SubjectType)
	// subject_choice
	switch x := m.SubjectChoice.(type) {
	case *SubjectType_User:
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.User)))
		n += len(x.User)
	case *SubjectType_ServiceAccount:
		s := proto.Size(x.ServiceAccount)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *SubjectType_Group:
		n += proto.SizeVarint(4<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.Group)))
		n += len(x.Group)
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// GlobalSpecType
//
// x-displayName: "Global Configuration Specification"
// Configuration specification for Cluster Role Binding
type GlobalSpecType struct {
	// K8s Cluster Role
	//
	// x-displayName: "K8s Cluster Role"
	// x-required
	// K8s Cluster Role for which bindings are defined.
	K8SClusterRole *ves_io_schema_views.ObjectRefType `protobuf:"bytes,1,opt,name=k8s_cluster_role,json=k8sClusterRole" json:"k8s_cluster_role,omitempty"`
	// Subjects
	//
	// x-displayName: "Subjects"
	// x-required
	// List of subjects (user, group or service account) to which this role is bound
	Subjects []*SubjectType `protobuf:"bytes,2,rep,name=subjects" json:"subjects,omitempty"`
	// K8s YAML
	//
	// x-displayName: "K8s YAML"
	// K8s YAML for ClusterRoleBinding
	GeneratedYaml string `protobuf:"bytes,1001,opt,name=generated_yaml,json=generatedYaml,proto3" json:"generated_yaml,omitempty"`
}

func (m *GlobalSpecType) Reset()                    { *m = GlobalSpecType{} }
func (*GlobalSpecType) ProtoMessage()               {}
func (*GlobalSpecType) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{2} }

func (m *GlobalSpecType) GetK8SClusterRole() *ves_io_schema_views.ObjectRefType {
	if m != nil {
		return m.K8SClusterRole
	}
	return nil
}

func (m *GlobalSpecType) GetSubjects() []*SubjectType {
	if m != nil {
		return m.Subjects
	}
	return nil
}

func (m *GlobalSpecType) GetGeneratedYaml() string {
	if m != nil {
		return m.GeneratedYaml
	}
	return ""
}

// Create k8s_cluster_role_binding
//
// x-displayName: "Create Configuration Specification"
// Create k8s_cluster_role_binding will create the object in the storage backend for namespace metadata.namespace
type CreateSpecType struct {
	K8SClusterRole *ves_io_schema_views.ObjectRefType `protobuf:"bytes,1,opt,name=k8s_cluster_role,json=k8sClusterRole" json:"k8s_cluster_role,omitempty"`
	Subjects       []*SubjectType                     `protobuf:"bytes,2,rep,name=subjects" json:"subjects,omitempty"`
}

func (m *CreateSpecType) Reset()                    { *m = CreateSpecType{} }
func (*CreateSpecType) ProtoMessage()               {}
func (*CreateSpecType) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{3} }

func (m *CreateSpecType) GetK8SClusterRole() *ves_io_schema_views.ObjectRefType {
	if m != nil {
		return m.K8SClusterRole
	}
	return nil
}

func (m *CreateSpecType) GetSubjects() []*SubjectType {
	if m != nil {
		return m.Subjects
	}
	return nil
}

// Replace k8s_cluster_role_binding
//
// x-displayName: "Replace Configuration Specification"
// Replacing an k8s_cluster_role_binding object will update the object by replacing the existing spec with the provided one.
// For read-then-write operations a resourceVersion mismatch will occur if the object was modified between the read and write
type ReplaceSpecType struct {
	K8SClusterRole *ves_io_schema_views.ObjectRefType `protobuf:"bytes,1,opt,name=k8s_cluster_role,json=k8sClusterRole" json:"k8s_cluster_role,omitempty"`
	Subjects       []*SubjectType                     `protobuf:"bytes,2,rep,name=subjects" json:"subjects,omitempty"`
}

func (m *ReplaceSpecType) Reset()                    { *m = ReplaceSpecType{} }
func (*ReplaceSpecType) ProtoMessage()               {}
func (*ReplaceSpecType) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{4} }

func (m *ReplaceSpecType) GetK8SClusterRole() *ves_io_schema_views.ObjectRefType {
	if m != nil {
		return m.K8SClusterRole
	}
	return nil
}

func (m *ReplaceSpecType) GetSubjects() []*SubjectType {
	if m != nil {
		return m.Subjects
	}
	return nil
}

// Get k8s_cluster_role_binding
//
// x-displayName: "Get Configuration Specification"
// Get k8s_cluster_role_binding will get the object from the storage backend for namespace metadata.namespace
type GetSpecType struct {
	K8SClusterRole *ves_io_schema_views.ObjectRefType `protobuf:"bytes,1,opt,name=k8s_cluster_role,json=k8sClusterRole" json:"k8s_cluster_role,omitempty"`
	Subjects       []*SubjectType                     `protobuf:"bytes,2,rep,name=subjects" json:"subjects,omitempty"`
}

func (m *GetSpecType) Reset()                    { *m = GetSpecType{} }
func (*GetSpecType) ProtoMessage()               {}
func (*GetSpecType) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{5} }

func (m *GetSpecType) GetK8SClusterRole() *ves_io_schema_views.ObjectRefType {
	if m != nil {
		return m.K8SClusterRole
	}
	return nil
}

func (m *GetSpecType) GetSubjects() []*SubjectType {
	if m != nil {
		return m.Subjects
	}
	return nil
}

func init() {
	proto.RegisterType((*ServiceAccountType)(nil), "ves.io.schema.k8s_cluster_role_binding.ServiceAccountType")
	golang_proto.RegisterType((*ServiceAccountType)(nil), "ves.io.schema.k8s_cluster_role_binding.ServiceAccountType")
	proto.RegisterType((*SubjectType)(nil), "ves.io.schema.k8s_cluster_role_binding.SubjectType")
	golang_proto.RegisterType((*SubjectType)(nil), "ves.io.schema.k8s_cluster_role_binding.SubjectType")
	proto.RegisterType((*GlobalSpecType)(nil), "ves.io.schema.k8s_cluster_role_binding.GlobalSpecType")
	golang_proto.RegisterType((*GlobalSpecType)(nil), "ves.io.schema.k8s_cluster_role_binding.GlobalSpecType")
	proto.RegisterType((*CreateSpecType)(nil), "ves.io.schema.k8s_cluster_role_binding.CreateSpecType")
	golang_proto.RegisterType((*CreateSpecType)(nil), "ves.io.schema.k8s_cluster_role_binding.CreateSpecType")
	proto.RegisterType((*ReplaceSpecType)(nil), "ves.io.schema.k8s_cluster_role_binding.ReplaceSpecType")
	golang_proto.RegisterType((*ReplaceSpecType)(nil), "ves.io.schema.k8s_cluster_role_binding.ReplaceSpecType")
	proto.RegisterType((*GetSpecType)(nil), "ves.io.schema.k8s_cluster_role_binding.GetSpecType")
	golang_proto.RegisterType((*GetSpecType)(nil), "ves.io.schema.k8s_cluster_role_binding.GetSpecType")
}
func (this *ServiceAccountType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ServiceAccountType)
	if !ok {
		that2, ok := that.(ServiceAccountType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Namespace != that1.Namespace {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	return true
}
func (this *SubjectType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SubjectType)
	if !ok {
		that2, ok := that.(SubjectType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.SubjectChoice == nil {
		if this.SubjectChoice != nil {
			return false
		}
	} else if this.SubjectChoice == nil {
		return false
	} else if !this.SubjectChoice.Equal(that1.SubjectChoice) {
		return false
	}
	return true
}
func (this *SubjectType_User) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SubjectType_User)
	if !ok {
		that2, ok := that.(SubjectType_User)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.User != that1.User {
		return false
	}
	return true
}
func (this *SubjectType_ServiceAccount) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SubjectType_ServiceAccount)
	if !ok {
		that2, ok := that.(SubjectType_ServiceAccount)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ServiceAccount.Equal(that1.ServiceAccount) {
		return false
	}
	return true
}
func (this *SubjectType_Group) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SubjectType_Group)
	if !ok {
		that2, ok := that.(SubjectType_Group)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Group != that1.Group {
		return false
	}
	return true
}
func (this *GlobalSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType)
	if !ok {
		that2, ok := that.(GlobalSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.K8SClusterRole.Equal(that1.K8SClusterRole) {
		return false
	}
	if len(this.Subjects) != len(that1.Subjects) {
		return false
	}
	for i := range this.Subjects {
		if !this.Subjects[i].Equal(that1.Subjects[i]) {
			return false
		}
	}
	if this.GeneratedYaml != that1.GeneratedYaml {
		return false
	}
	return true
}
func (this *CreateSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType)
	if !ok {
		that2, ok := that.(CreateSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.K8SClusterRole.Equal(that1.K8SClusterRole) {
		return false
	}
	if len(this.Subjects) != len(that1.Subjects) {
		return false
	}
	for i := range this.Subjects {
		if !this.Subjects[i].Equal(that1.Subjects[i]) {
			return false
		}
	}
	return true
}
func (this *ReplaceSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType)
	if !ok {
		that2, ok := that.(ReplaceSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.K8SClusterRole.Equal(that1.K8SClusterRole) {
		return false
	}
	if len(this.Subjects) != len(that1.Subjects) {
		return false
	}
	for i := range this.Subjects {
		if !this.Subjects[i].Equal(that1.Subjects[i]) {
			return false
		}
	}
	return true
}
func (this *GetSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType)
	if !ok {
		that2, ok := that.(GetSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.K8SClusterRole.Equal(that1.K8SClusterRole) {
		return false
	}
	if len(this.Subjects) != len(that1.Subjects) {
		return false
	}
	for i := range this.Subjects {
		if !this.Subjects[i].Equal(that1.Subjects[i]) {
			return false
		}
	}
	return true
}
func (this *ServiceAccountType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&k8s_cluster_role_binding.ServiceAccountType{")
	s = append(s, "Namespace: "+fmt.Sprintf("%#v", this.Namespace)+",\n")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SubjectType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&k8s_cluster_role_binding.SubjectType{")
	if this.SubjectChoice != nil {
		s = append(s, "SubjectChoice: "+fmt.Sprintf("%#v", this.SubjectChoice)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SubjectType_User) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&k8s_cluster_role_binding.SubjectType_User{` +
		`User:` + fmt.Sprintf("%#v", this.User) + `}`}, ", ")
	return s
}
func (this *SubjectType_ServiceAccount) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&k8s_cluster_role_binding.SubjectType_ServiceAccount{` +
		`ServiceAccount:` + fmt.Sprintf("%#v", this.ServiceAccount) + `}`}, ", ")
	return s
}
func (this *SubjectType_Group) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&k8s_cluster_role_binding.SubjectType_Group{` +
		`Group:` + fmt.Sprintf("%#v", this.Group) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&k8s_cluster_role_binding.GlobalSpecType{")
	if this.K8SClusterRole != nil {
		s = append(s, "K8SClusterRole: "+fmt.Sprintf("%#v", this.K8SClusterRole)+",\n")
	}
	if this.Subjects != nil {
		s = append(s, "Subjects: "+fmt.Sprintf("%#v", this.Subjects)+",\n")
	}
	s = append(s, "GeneratedYaml: "+fmt.Sprintf("%#v", this.GeneratedYaml)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CreateSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&k8s_cluster_role_binding.CreateSpecType{")
	if this.K8SClusterRole != nil {
		s = append(s, "K8SClusterRole: "+fmt.Sprintf("%#v", this.K8SClusterRole)+",\n")
	}
	if this.Subjects != nil {
		s = append(s, "Subjects: "+fmt.Sprintf("%#v", this.Subjects)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ReplaceSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&k8s_cluster_role_binding.ReplaceSpecType{")
	if this.K8SClusterRole != nil {
		s = append(s, "K8SClusterRole: "+fmt.Sprintf("%#v", this.K8SClusterRole)+",\n")
	}
	if this.Subjects != nil {
		s = append(s, "Subjects: "+fmt.Sprintf("%#v", this.Subjects)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&k8s_cluster_role_binding.GetSpecType{")
	if this.K8SClusterRole != nil {
		s = append(s, "K8SClusterRole: "+fmt.Sprintf("%#v", this.K8SClusterRole)+",\n")
	}
	if this.Subjects != nil {
		s = append(s, "Subjects: "+fmt.Sprintf("%#v", this.Subjects)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringTypes(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *ServiceAccountType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ServiceAccountType) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Namespace) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Namespace)))
		i += copy(dAtA[i:], m.Namespace)
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	return i, nil
}

func (m *SubjectType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SubjectType) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.SubjectChoice != nil {
		nn1, err := m.SubjectChoice.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn1
	}
	return i, nil
}

func (m *SubjectType_User) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x12
	i++
	i = encodeVarintTypes(dAtA, i, uint64(len(m.User)))
	i += copy(dAtA[i:], m.User)
	return i, nil
}
func (m *SubjectType_ServiceAccount) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.ServiceAccount != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.ServiceAccount.Size()))
		n2, err := m.ServiceAccount.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	return i, nil
}
func (m *SubjectType_Group) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x22
	i++
	i = encodeVarintTypes(dAtA, i, uint64(len(m.Group)))
	i += copy(dAtA[i:], m.Group)
	return i, nil
}
func (m *GlobalSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GlobalSpecType) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.K8SClusterRole != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.K8SClusterRole.Size()))
		n3, err := m.K8SClusterRole.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	if len(m.Subjects) > 0 {
		for _, msg := range m.Subjects {
			dAtA[i] = 0x12
			i++
			i = encodeVarintTypes(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.GeneratedYaml) > 0 {
		dAtA[i] = 0xca
		i++
		dAtA[i] = 0x3e
		i++
		i = encodeVarintTypes(dAtA, i, uint64(len(m.GeneratedYaml)))
		i += copy(dAtA[i:], m.GeneratedYaml)
	}
	return i, nil
}

func (m *CreateSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateSpecType) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.K8SClusterRole != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.K8SClusterRole.Size()))
		n4, err := m.K8SClusterRole.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	if len(m.Subjects) > 0 {
		for _, msg := range m.Subjects {
			dAtA[i] = 0x12
			i++
			i = encodeVarintTypes(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *ReplaceSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplaceSpecType) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.K8SClusterRole != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.K8SClusterRole.Size()))
		n5, err := m.K8SClusterRole.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	if len(m.Subjects) > 0 {
		for _, msg := range m.Subjects {
			dAtA[i] = 0x12
			i++
			i = encodeVarintTypes(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *GetSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetSpecType) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.K8SClusterRole != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.K8SClusterRole.Size()))
		n6, err := m.K8SClusterRole.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	if len(m.Subjects) > 0 {
		for _, msg := range m.Subjects {
			dAtA[i] = 0x12
			i++
			i = encodeVarintTypes(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func encodeVarintTypes(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *ServiceAccountType) Size() (n int) {
	var l int
	_ = l
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *SubjectType) Size() (n int) {
	var l int
	_ = l
	if m.SubjectChoice != nil {
		n += m.SubjectChoice.Size()
	}
	return n
}

func (m *SubjectType_User) Size() (n int) {
	var l int
	_ = l
	l = len(m.User)
	n += 1 + l + sovTypes(uint64(l))
	return n
}
func (m *SubjectType_ServiceAccount) Size() (n int) {
	var l int
	_ = l
	if m.ServiceAccount != nil {
		l = m.ServiceAccount.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *SubjectType_Group) Size() (n int) {
	var l int
	_ = l
	l = len(m.Group)
	n += 1 + l + sovTypes(uint64(l))
	return n
}
func (m *GlobalSpecType) Size() (n int) {
	var l int
	_ = l
	if m.K8SClusterRole != nil {
		l = m.K8SClusterRole.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if len(m.Subjects) > 0 {
		for _, e := range m.Subjects {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	l = len(m.GeneratedYaml)
	if l > 0 {
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *CreateSpecType) Size() (n int) {
	var l int
	_ = l
	if m.K8SClusterRole != nil {
		l = m.K8SClusterRole.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if len(m.Subjects) > 0 {
		for _, e := range m.Subjects {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *ReplaceSpecType) Size() (n int) {
	var l int
	_ = l
	if m.K8SClusterRole != nil {
		l = m.K8SClusterRole.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if len(m.Subjects) > 0 {
		for _, e := range m.Subjects {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *GetSpecType) Size() (n int) {
	var l int
	_ = l
	if m.K8SClusterRole != nil {
		l = m.K8SClusterRole.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if len(m.Subjects) > 0 {
		for _, e := range m.Subjects {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func sovTypes(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozTypes(x uint64) (n int) {
	return sovTypes(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *ServiceAccountType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ServiceAccountType{`,
		`Namespace:` + fmt.Sprintf("%v", this.Namespace) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SubjectType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SubjectType{`,
		`SubjectChoice:` + fmt.Sprintf("%v", this.SubjectChoice) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SubjectType_User) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SubjectType_User{`,
		`User:` + fmt.Sprintf("%v", this.User) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SubjectType_ServiceAccount) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SubjectType_ServiceAccount{`,
		`ServiceAccount:` + strings.Replace(fmt.Sprintf("%v", this.ServiceAccount), "ServiceAccountType", "ServiceAccountType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SubjectType_Group) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SubjectType_Group{`,
		`Group:` + fmt.Sprintf("%v", this.Group) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType{`,
		`K8SClusterRole:` + strings.Replace(fmt.Sprintf("%v", this.K8SClusterRole), "ObjectRefType", "ves_io_schema_views.ObjectRefType", 1) + `,`,
		`Subjects:` + strings.Replace(fmt.Sprintf("%v", this.Subjects), "SubjectType", "SubjectType", 1) + `,`,
		`GeneratedYaml:` + fmt.Sprintf("%v", this.GeneratedYaml) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType{`,
		`K8SClusterRole:` + strings.Replace(fmt.Sprintf("%v", this.K8SClusterRole), "ObjectRefType", "ves_io_schema_views.ObjectRefType", 1) + `,`,
		`Subjects:` + strings.Replace(fmt.Sprintf("%v", this.Subjects), "SubjectType", "SubjectType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType{`,
		`K8SClusterRole:` + strings.Replace(fmt.Sprintf("%v", this.K8SClusterRole), "ObjectRefType", "ves_io_schema_views.ObjectRefType", 1) + `,`,
		`Subjects:` + strings.Replace(fmt.Sprintf("%v", this.Subjects), "SubjectType", "SubjectType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType{`,
		`K8SClusterRole:` + strings.Replace(fmt.Sprintf("%v", this.K8SClusterRole), "ObjectRefType", "ves_io_schema_views.ObjectRefType", 1) + `,`,
		`Subjects:` + strings.Replace(fmt.Sprintf("%v", this.Subjects), "SubjectType", "SubjectType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringTypes(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *ServiceAccountType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ServiceAccountType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ServiceAccountType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SubjectType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SubjectType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SubjectType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field User", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SubjectChoice = &SubjectType_User{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServiceAccount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ServiceAccountType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.SubjectChoice = &SubjectType_ServiceAccount{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Group", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SubjectChoice = &SubjectType_Group{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GlobalSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GlobalSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GlobalSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field K8SClusterRole", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.K8SClusterRole == nil {
				m.K8SClusterRole = &ves_io_schema_views.ObjectRefType{}
			}
			if err := m.K8SClusterRole.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Subjects", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Subjects = append(m.Subjects, &SubjectType{})
			if err := m.Subjects[len(m.Subjects)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 1001:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GeneratedYaml", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GeneratedYaml = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field K8SClusterRole", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.K8SClusterRole == nil {
				m.K8SClusterRole = &ves_io_schema_views.ObjectRefType{}
			}
			if err := m.K8SClusterRole.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Subjects", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Subjects = append(m.Subjects, &SubjectType{})
			if err := m.Subjects[len(m.Subjects)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplaceSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplaceSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplaceSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field K8SClusterRole", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.K8SClusterRole == nil {
				m.K8SClusterRole = &ves_io_schema_views.ObjectRefType{}
			}
			if err := m.K8SClusterRole.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Subjects", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Subjects = append(m.Subjects, &SubjectType{})
			if err := m.Subjects[len(m.Subjects)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field K8SClusterRole", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.K8SClusterRole == nil {
				m.K8SClusterRole = &ves_io_schema_views.ObjectRefType{}
			}
			if err := m.K8SClusterRole.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Subjects", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Subjects = append(m.Subjects, &SubjectType{})
			if err := m.Subjects[len(m.Subjects)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTypes(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthTypes
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipTypes(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthTypes = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTypes   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("ves.io/schema/k8s_cluster_role_binding/types.proto", fileDescriptorTypes)
}
func init() {
	golang_proto.RegisterFile("ves.io/schema/k8s_cluster_role_binding/types.proto", fileDescriptorTypes)
}

var fileDescriptorTypes = []byte{
	// 669 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xdc, 0x55, 0x4f, 0x4f, 0x13, 0x4f,
	0x18, 0xee, 0xdb, 0x16, 0x7e, 0x65, 0x1a, 0x4a, 0xd9, 0x5f, 0x4c, 0xd6, 0x62, 0x96, 0x5a, 0x12,
	0x82, 0x06, 0x76, 0x63, 0xf1, 0x40, 0x38, 0x18, 0x2d, 0x07, 0x88, 0x1e, 0x48, 0xb6, 0x5e, 0x34,
	0x26, 0x75, 0x76, 0xfb, 0xb2, 0xac, 0x6c, 0x3b, 0x9b, 0x99, 0xdd, 0x2a, 0x07, 0x12, 0x3e, 0x02,
	0xe1, 0x53, 0x18, 0x3f, 0x82, 0xbd, 0x10, 0x4f, 0xc6, 0x13, 0x07, 0xa3, 0x3d, 0xca, 0x72, 0x10,
	0x6e, 0x7c, 0x04, 0xc3, 0x6c, 0xf9, 0xd3, 0x16, 0x23, 0x07, 0xe3, 0x81, 0xdb, 0x3b, 0xf3, 0xcc,
	0x33, 0xef, 0xf3, 0x3c, 0xef, 0x66, 0x96, 0x94, 0x5b, 0x28, 0x74, 0x97, 0x19, 0xc2, 0x5e, 0xc7,
	0x06, 0x35, 0x36, 0x16, 0x44, 0xcd, 0xf6, 0x42, 0x11, 0x20, 0xaf, 0x71, 0xe6, 0x61, 0xcd, 0x72,
	0x9b, 0x75, 0xb7, 0xe9, 0x18, 0xc1, 0xa6, 0x8f, 0x42, 0xf7, 0x39, 0x0b, 0x98, 0x32, 0x1d, 0x73,
	0xf4, 0x98, 0xa3, 0xff, 0x8e, 0x53, 0x98, 0x73, 0xdc, 0x60, 0x3d, 0xb4, 0x74, 0x9b, 0x35, 0x0c,
	0x87, 0x39, 0xcc, 0x90, 0x74, 0x2b, 0x5c, 0x93, 0x2b, 0xb9, 0x90, 0x55, 0x7c, 0x6d, 0x61, 0xa2,
	0x57, 0x0a, 0xf3, 0x03, 0x97, 0x35, 0xbb, 0x3d, 0x0b, 0xb7, 0x7b, 0xc1, 0x4b, 0x72, 0x0a, 0x77,
	0x7a, 0xa1, 0x16, 0xf5, 0xdc, 0x3a, 0x0d, 0xb0, 0x8b, 0x16, 0xfb, 0x50, 0x17, 0xdf, 0xd6, 0x7a,
	0xaf, 0x9e, 0x1c, 0x3c, 0x21, 0x2e, 0x37, 0x28, 0xbd, 0x26, 0x4a, 0x15, 0x79, 0xcb, 0xb5, 0xf1,
	0x89, 0x6d, 0xb3, 0xb0, 0x19, 0x3c, 0xdf, 0xf4, 0x51, 0xb9, 0x47, 0x46, 0x9a, 0xb4, 0x81, 0xc2,
	0xa7, 0x36, 0xaa, 0x50, 0x84, 0x99, 0x91, 0x4a, 0xf6, 0xe3, 0xf1, 0x5e, 0x6a, 0x98, 0xa7, 0xf3,
	0xa0, 0x3e, 0x36, 0x2f, 0x50, 0x65, 0x92, 0xa4, 0x4f, 0x17, 0x6a, 0x72, 0xf0, 0x94, 0x04, 0x4a,
	0x3f, 0x81, 0x64, 0xab, 0xa1, 0xf5, 0x06, 0xed, 0xf8, 0xee, 0xbb, 0x24, 0x1d, 0x0a, 0xe4, 0x57,
	0x10, 0x56, 0x12, 0xa6, 0x84, 0x14, 0x24, 0x63, 0x22, 0x16, 0x55, 0xa3, 0xb1, 0x2a, 0x35, 0x55,
	0x84, 0x99, 0x6c, 0x79, 0x51, 0xbf, 0xde, 0x78, 0xf4, 0x41, 0x4f, 0x2b, 0x09, 0x33, 0x27, 0x7a,
	0x76, 0x95, 0x29, 0x32, 0xe4, 0x70, 0x16, 0xfa, 0x6a, 0xfa, 0x2a, 0x29, 0x31, 0x56, 0x99, 0x22,
	0x39, 0x11, 0xab, 0xaf, 0xd9, 0xeb, 0xcc, 0xb5, 0x51, 0x19, 0xdf, 0x6b, 0x43, 0x72, 0xbf, 0x0d,
	0x10, 0xb5, 0x61, 0xa8, 0x3c, 0x3b, 0x3f, 0xfb, 0xf0, 0x69, 0x3a, 0x03, 0xf9, 0x64, 0xe9, 0x5b,
	0x92, 0xe4, 0x96, 0x3d, 0x66, 0x51, 0xaf, 0xea, 0xa3, 0x2d, 0xcd, 0x52, 0x92, 0xef, 0xd7, 0x28,
	0xf3, 0xcc, 0x96, 0x4b, 0x7d, 0x56, 0xe4, 0x68, 0xf4, 0x55, 0xd9, 0xc9, 0xc4, 0xb5, 0x53, 0x76,
	0xe5, 0xff, 0x0f, 0x5b, 0x03, 0x74, 0x33, 0xb7, 0xb1, 0x20, 0x96, 0xe2, 0x0d, 0x93, 0x79, 0xa8,
	0xf8, 0x24, 0xd3, 0x15, 0x28, 0xd4, 0x64, 0x31, 0x35, 0x93, 0x2d, 0xcf, 0x5f, 0x3b, 0xa5, 0x8b,
	0xb1, 0x54, 0x26, 0xa5, 0xfb, 0x5d, 0x48, 0xe5, 0xb7, 0x93, 0xa7, 0xe5, 0xd0, 0x2e, 0x24, 0x33,
	0x70, 0x56, 0xa9, 0x60, 0x9e, 0x77, 0x51, 0x96, 0x48, 0xce, 0xc1, 0x26, 0x72, 0x1a, 0x60, 0xbd,
	0xb6, 0x49, 0x1b, 0x9e, 0x7a, 0xfc, 0x9f, 0x4c, 0x70, 0xa2, 0xb3, 0x05, 0x47, 0x6d, 0x88, 0x59,
	0x3c, 0xa5, 0x6e, 0x17, 0xbb, 0xd5, 0x0e, 0x80, 0x39, 0x7a, 0xce, 0x79, 0x41, 0x1b, 0xde, 0xe2,
	0xfd, 0x4f, 0x6d, 0x98, 0x26, 0xb7, 0x48, 0xfe, 0xd9, 0x82, 0x28, 0x76, 0xfd, 0x14, 0xa5, 0x21,
	0x78, 0x40, 0x46, 0x49, 0xa6, 0x7a, 0xd6, 0x0d, 0xca, 0xa5, 0xef, 0x40, 0x72, 0x4b, 0x1c, 0x69,
	0x80, 0xff, 0x32, 0xd8, 0xd5, 0xbf, 0x12, 0xec, 0x45, 0x6e, 0x8b, 0xe3, 0x5f, 0x1e, 0xf5, 0x7d,
	0x1f, 0xa5, 0x0e, 0x90, 0x31, 0x13, 0x7d, 0x8f, 0xda, 0x37, 0xce, 0xda, 0x57, 0x20, 0xd9, 0x65,
	0x0c, 0x6e, 0x98, 0xad, 0xca, 0x2e, 0xec, 0x1f, 0x68, 0x89, 0xce, 0x81, 0x96, 0x38, 0x39, 0xd0,
	0x60, 0x3b, 0xd2, 0xe0, 0x7d, 0xa4, 0xc1, 0xe7, 0x48, 0x83, 0xfd, 0x48, 0x83, 0x4e, 0xa4, 0xc1,
	0x8f, 0x48, 0x83, 0xa3, 0x48, 0x4b, 0x9c, 0x44, 0x1a, 0xec, 0x1c, 0x6a, 0x89, 0xbd, 0x43, 0x0d,
	0x5e, 0xbe, 0x72, 0x98, 0xbf, 0xe1, 0xe8, 0x2d, 0xe6, 0x05, 0xc8, 0x39, 0xd5, 0x43, 0x61, 0xc8,
	0x62, 0x8d, 0xf1, 0xc6, 0x9c, 0xcf, 0x59, 0xcb, 0xad, 0x23, 0x9f, 0x3b, 0x83, 0x0d, 0xdf, 0x72,
	0x98, 0x81, 0xef, 0x82, 0xee, 0xbb, 0xfd, 0x87, 0x3f, 0x98, 0x35, 0x2c, 0x1f, 0xf3, 0xf9, 0x5f,
	0x01, 0x00, 0x00, 0xff, 0xff, 0xed, 0x85, 0xa6, 0x12, 0xf2, 0x06, 0x00, 0x00,
}
