// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ves.io/schema/waf/types.proto

package waf

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"
import _ "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
import ves_io_schema4 "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
import _ "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
import _ "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"

import strconv "strconv"

import strings "strings"
import reflect "reflect"

import binary "encoding/binary"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// CMS Type
//
// x-displayName: "Content Management System Type"
// The content management system used to build the target application.
type ContentManagementSystemType int32

const (
	// x-displayName: "Drupal"
	// Drupal CMS
	DRUPAL ContentManagementSystemType = 0
	// x-displayName: "Wordpress"
	// Wordpress CMS
	WORDPRESS ContentManagementSystemType = 1
	// x-displayName: "Nextcloud"
	// Nextcloud CMS
	NEXTCLOUD ContentManagementSystemType = 2
	// x-displayName: "Dokuwiki"
	// Dokuwiki CMS
	DOKUWIKI ContentManagementSystemType = 3
	// x-displayName: "CPanel"
	// CPanel CMS
	CPANEL ContentManagementSystemType = 4
)

var ContentManagementSystemType_name = map[int32]string{
	0: "DRUPAL",
	1: "WORDPRESS",
	2: "NEXTCLOUD",
	3: "DOKUWIKI",
	4: "CPANEL",
}
var ContentManagementSystemType_value = map[string]int32{
	"DRUPAL":    0,
	"WORDPRESS": 1,
	"NEXTCLOUD": 2,
	"DOKUWIKI":  3,
	"CPANEL":    4,
}

func (ContentManagementSystemType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorTypes, []int{0}
}

// Languages Type
//
// x-displayName: "Languages Type"
// languages used to build the target application.
type LanguageType int32

const (
	// x-displayName: "PHP"
	// PHP language
	PHP LanguageType = 0
	// x-displayName: "Java"
	// Java language
	JAVA LanguageType = 1
)

var LanguageType_name = map[int32]string{
	0: "PHP",
	1: "JAVA",
}
var LanguageType_value = map[string]int32{
	"PHP":  0,
	"JAVA": 1,
}

func (LanguageType) EnumDescriptor() ([]byte, []int) { return fileDescriptorTypes, []int{1} }

// Web Server Type
//
// x-displayName: "Web Server Type"
// The Web Server used to build the target application.
type WebServerType int32

const (
	// x-displayName: "IIS"
	// IIS Webserver
	IIS WebServerType = 0
)

var WebServerType_name = map[int32]string{
	0: "IIS",
}
var WebServerType_value = map[string]int32{
	"IIS": 0,
}

func (WebServerType) EnumDescriptor() ([]byte, []int) { return fileDescriptorTypes, []int{2} }

// Detection Tags
//
// x-displayName: "Disabled Detection Tags"
// To optimize by having only relevant rules configured for a WAF instance, WAF can be configured to explicitly disable certain types of attacks.
// The different attack types for which WAF instance can be configured to not include rules.
type DetectionTagType int32

const (
	// x-displayName: "Data Leakage"
	// Responses from the server will be analyzed to check whether any sensitive data is leaked.
	DATA_LEAKAGE DetectionTagType = 0
	// x-displayName: "SQL Injection"
	// SQL Injection attack
	SQLI_ATTACK DetectionTagType = 1
	// x-displayName: "Cross Site Scripting"
	// Cross Site Scripting attack
	XSS_ATTACK DetectionTagType = 2
	// x-displayName: "HTTP Protocol Header Attack"
	// Generic HTTP protocol header attacks
	PROTOCOL_ATTACK DetectionTagType = 3
	// x-displayName: "RCE Attack"
	// Remote Code Execution attack
	RCE_ATTACK DetectionTagType = 4
	// x-displayName: "PHP Attack"
	// Attacks associated with PHP
	PHP_ATTACK DetectionTagType = 5
	// x-displayName: "DOS Attack"
	// Denial of Service
	DOS_ATTACK DetectionTagType = 6
	// x-displayName: "RFI Attack"
	// Remote File Inclusion
	RFI_ATTACK DetectionTagType = 7
	// x-displayName: "LFI Attack"
	// Local File Inclusion
	LFI_ATTACK DetectionTagType = 8
	// x-displayName: "Scanners"
	// Known Scanners
	SCANNER DetectionTagType = 9
	// x-displayName: "Session Fixation"
	// HTTP Session Fixation
	SESSION_FIXATION DetectionTagType = 10
	// x-displayName: "Known Scripts"
	// Known scripts access by automated tool
	KNOWN_SCRIPTS DetectionTagType = 11
	// x-displayName: "Crawlers"
	// Crawlers accessing the server
	CRAWLERS DetectionTagType = 12
)

var DetectionTagType_name = map[int32]string{
	0:  "DATA_LEAKAGE",
	1:  "SQLI_ATTACK",
	2:  "XSS_ATTACK",
	3:  "PROTOCOL_ATTACK",
	4:  "RCE_ATTACK",
	5:  "PHP_ATTACK",
	6:  "DOS_ATTACK",
	7:  "RFI_ATTACK",
	8:  "LFI_ATTACK",
	9:  "SCANNER",
	10: "SESSION_FIXATION",
	11: "KNOWN_SCRIPTS",
	12: "CRAWLERS",
}
var DetectionTagType_value = map[string]int32{
	"DATA_LEAKAGE":     0,
	"SQLI_ATTACK":      1,
	"XSS_ATTACK":       2,
	"PROTOCOL_ATTACK":  3,
	"RCE_ATTACK":       4,
	"PHP_ATTACK":       5,
	"DOS_ATTACK":       6,
	"RFI_ATTACK":       7,
	"LFI_ATTACK":       8,
	"SCANNER":          9,
	"SESSION_FIXATION": 10,
	"KNOWN_SCRIPTS":    11,
	"CRAWLERS":         12,
}

func (DetectionTagType) EnumDescriptor() ([]byte, []int) { return fileDescriptorTypes, []int{3} }

// Labels in the WAF metrics.
//
// x-displayName: "WAF Metric Label"
// Rule hits counter and the security events counter can be sliced and diced based
// on one or more labels listed below.
type MetricLabel int32

const (
	// x-displayName: "Namespace"
	// Namespace in which this WAF instance is running
	NAMESPACE MetricLabel = 0
	// x-displayName: "AppType"
	// AppType configured on the virtual_host under which this WAF instance is running
	APP_TYPE MetricLabel = 1
	// x-displayName: "Virtual Host"
	// Virtual host under which this WAF instance is running
	VIRTUAL_HOST MetricLabel = 2
	// x-displayName: "Site"
	// Site from which this WAF instance is reporting the metrics
	SITE MetricLabel = 3
	// x-displayName: "Service"
	// Service for which this WAF instance is reporting the metrics
	SERVICE MetricLabel = 4
	// x-displayName: "Instance"
	// Region from which the client's accesses caused WAF metrics to be generated
	INSTANCE MetricLabel = 5
	// x-displayName: "WAF Instance ID"
	// WAF instance ID
	WAF_INSTANCE_ID MetricLabel = 6
	// x-displayName: "Rule ID"
	// RuleID of the rule that was hit to cause this metric to be generated
	RULE_ID MetricLabel = 7
	// x-displayName: "Rule Severity"
	// Rule severity of the rule that was hit to cause this metric to be generated
	RULE_SEVERITY MetricLabel = 8
	// x-displayName: "Rule Tag"
	// Rule tag of the rule that was hit to cause this metric to be generated
	RULE_TAG MetricLabel = 9
	// x-displayName: "WAF Mode"
	// Block or AlertOnly
	WAF_MODE MetricLabel = 10
	// x-displayName: "Bot Type"
	// Type of the Bot (crawler, scanner, script)
	BOT_TYPE MetricLabel = 11
	// x-displayName: "Bot Name"
	// Name of the Bot associated with the waf rule
	BOT_NAME MetricLabel = 12
)

var MetricLabel_name = map[int32]string{
	0:  "NAMESPACE",
	1:  "APP_TYPE",
	2:  "VIRTUAL_HOST",
	3:  "SITE",
	4:  "SERVICE",
	5:  "INSTANCE",
	6:  "WAF_INSTANCE_ID",
	7:  "RULE_ID",
	8:  "RULE_SEVERITY",
	9:  "RULE_TAG",
	10: "WAF_MODE",
	11: "BOT_TYPE",
	12: "BOT_NAME",
}
var MetricLabel_value = map[string]int32{
	"NAMESPACE":       0,
	"APP_TYPE":        1,
	"VIRTUAL_HOST":    2,
	"SITE":            3,
	"SERVICE":         4,
	"INSTANCE":        5,
	"WAF_INSTANCE_ID": 6,
	"RULE_ID":         7,
	"RULE_SEVERITY":   8,
	"RULE_TAG":        9,
	"WAF_MODE":        10,
	"BOT_TYPE":        11,
	"BOT_NAME":        12,
}

func (MetricLabel) EnumDescriptor() ([]byte, []int) { return fileDescriptorTypes, []int{4} }

// WAF Metric Label Operator
//
// x-displayName: "WAF Metric Label Operator"
// The operator to use when querying WAF metrics with labels.
// Query can choose to either select a label if it matches a given value OR
// if it done not match a given value. This is done by choosing the EQ or NEQ operator
// in MetricLabelFilter
type MetricLabelOp int32

const (
	// x-displayName: "Equal To"
	// Equal to
	EQ MetricLabelOp = 0
	// x-displayName: "Not Equal To"
	// Not Equal to
	NEQ MetricLabelOp = 1
)

var MetricLabelOp_name = map[int32]string{
	0: "EQ",
	1: "NEQ",
}
var MetricLabelOp_value = map[string]int32{
	"EQ":  0,
	"NEQ": 1,
}

func (MetricLabelOp) EnumDescriptor() ([]byte, []int) { return fileDescriptorTypes, []int{5} }

// AppProfile
//
// x-displayName: "App Profile"
// AppProfile contains different properties of the target App being protected by this WAF instance. For eg
// there can be multiple CMS type supported by this WAF instance and if enabled , rules for
// those CMS type will be enabled . Volterra WAF Rules Processor uses this information to include/exclude WAF
// security rules which are relevant for this App Profile.
type AppProfile struct {
	// Languages
	//
	// x-displayName: "Languages"
	// The languages used to build the target application.
	Language []LanguageType `protobuf:"varint,2,rep,packed,name=language,enum=ves.io.schema.waf.LanguageType" json:"language,omitempty"`
	// Content Management System Type
	//
	// x-displayName: "Content Management System Type"
	// The content management system used to build the target application.
	Cms []ContentManagementSystemType `protobuf:"varint,3,rep,packed,name=cms,enum=ves.io.schema.waf.ContentManagementSystemType" json:"cms,omitempty"`
	// Web Server Type
	//
	// x-displayName: "Web Server Type"
	// The Web Server used to build the target application.
	Webserver []WebServerType `protobuf:"varint,4,rep,packed,name=webserver,enum=ves.io.schema.waf.WebServerType" json:"webserver,omitempty"`
}

func (m *AppProfile) Reset()                    { *m = AppProfile{} }
func (*AppProfile) ProtoMessage()               {}
func (*AppProfile) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{0} }

func (m *AppProfile) GetLanguage() []LanguageType {
	if m != nil {
		return m.Language
	}
	return nil
}

func (m *AppProfile) GetCms() []ContentManagementSystemType {
	if m != nil {
		return m.Cms
	}
	return nil
}

func (m *AppProfile) GetWebserver() []WebServerType {
	if m != nil {
		return m.Webserver
	}
	return nil
}

// Disabled Detection Tags
//
// x-displayName: "Disabled Detection Tags"
// To optimize WAF performance by having only relevant rules configured for a WAF instance, WAF can be configured to explicitly disable certain types of attacks.
// This can be done by configuring this list of attacks types for which the user wants to disable detection.
type DisabledDetectionTags struct {
	// detection_tag_type
	//
	// x-displayName: "Detection Tag"
	// List of detection tags to be disabled
	DetectionTagType []DetectionTagType `protobuf:"varint,1,rep,packed,name=detection_tag_type,json=detectionTagType,enum=ves.io.schema.waf.DetectionTagType" json:"detection_tag_type,omitempty"`
}

func (m *DisabledDetectionTags) Reset()                    { *m = DisabledDetectionTags{} }
func (*DisabledDetectionTags) ProtoMessage()               {}
func (*DisabledDetectionTags) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{1} }

func (m *DisabledDetectionTags) GetDetectionTagType() []DetectionTagType {
	if m != nil {
		return m.DetectionTagType
	}
	return nil
}

// GlobalSpecType
//
// x-displayName: "WAF Specification"
type GlobalSpecType struct {
	// app_profile
	//
	// x-displayName: "App Profile"
	// Details of the apps which are going through this WAF instance.
	AppProfile *AppProfile `protobuf:"bytes,1,opt,name=app_profile,json=appProfile" json:"app_profile,omitempty"`
	// mode
	//
	// x-displayName: "Mode"
	// Mode of this WAF instance , will be either in blocked or alert mode.
	Mode ves_io_schema4.WafModeType `protobuf:"varint,4,opt,name=mode,proto3,enum=ves.io.schema.WafModeType" json:"mode,omitempty"`
	// disabled_detection_tags
	//
	// x-displayName: "Disabled Detections"
	// DisabledDetectionTags will allow user to selectively disable the Security Rules associated with Tags
	DisabledDetectionTags *DisabledDetectionTags `protobuf:"bytes,5,opt,name=disabled_detection_tags,json=disabledDetectionTags" json:"disabled_detection_tags,omitempty"`
}

func (m *GlobalSpecType) Reset()                    { *m = GlobalSpecType{} }
func (*GlobalSpecType) ProtoMessage()               {}
func (*GlobalSpecType) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{2} }

func (m *GlobalSpecType) GetAppProfile() *AppProfile {
	if m != nil {
		return m.AppProfile
	}
	return nil
}

func (m *GlobalSpecType) GetMode() ves_io_schema4.WafModeType {
	if m != nil {
		return m.Mode
	}
	return ves_io_schema4.BLOCK
}

func (m *GlobalSpecType) GetDisabledDetectionTags() *DisabledDetectionTags {
	if m != nil {
		return m.DisabledDetectionTags
	}
	return nil
}

// Create WAF
//
// x-displayName: "Create WAF"
// WAF object is used to create a WAF instance associated with a VHOST or ROUTE
// A WAF instance can be shared by multiple "virtual_host" or "route"
// A "virtual_host" or "route" shall refer to one WAF instance
type CreateSpecType struct {
	AppProfile            *AppProfile                `protobuf:"bytes,1,opt,name=app_profile,json=appProfile" json:"app_profile,omitempty"`
	Mode                  ves_io_schema4.WafModeType `protobuf:"varint,4,opt,name=mode,proto3,enum=ves.io.schema.WafModeType" json:"mode,omitempty"`
	DisabledDetectionTags *DisabledDetectionTags     `protobuf:"bytes,5,opt,name=disabled_detection_tags,json=disabledDetectionTags" json:"disabled_detection_tags,omitempty"`
}

func (m *CreateSpecType) Reset()                    { *m = CreateSpecType{} }
func (*CreateSpecType) ProtoMessage()               {}
func (*CreateSpecType) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{3} }

func (m *CreateSpecType) GetAppProfile() *AppProfile {
	if m != nil {
		return m.AppProfile
	}
	return nil
}

func (m *CreateSpecType) GetMode() ves_io_schema4.WafModeType {
	if m != nil {
		return m.Mode
	}
	return ves_io_schema4.BLOCK
}

func (m *CreateSpecType) GetDisabledDetectionTags() *DisabledDetectionTags {
	if m != nil {
		return m.DisabledDetectionTags
	}
	return nil
}

// Replace WAF
//
// x-displayName: "Replace WAF"
// Update the configuration by replacing the existing spec with the provided one.
// For read-then-write operations a resourceVersion mismatch will occur if the object was modified between the read and write.
type ReplaceSpecType struct {
	AppProfile            *AppProfile                `protobuf:"bytes,1,opt,name=app_profile,json=appProfile" json:"app_profile,omitempty"`
	Mode                  ves_io_schema4.WafModeType `protobuf:"varint,4,opt,name=mode,proto3,enum=ves.io.schema.WafModeType" json:"mode,omitempty"`
	DisabledDetectionTags *DisabledDetectionTags     `protobuf:"bytes,5,opt,name=disabled_detection_tags,json=disabledDetectionTags" json:"disabled_detection_tags,omitempty"`
}

func (m *ReplaceSpecType) Reset()                    { *m = ReplaceSpecType{} }
func (*ReplaceSpecType) ProtoMessage()               {}
func (*ReplaceSpecType) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{4} }

func (m *ReplaceSpecType) GetAppProfile() *AppProfile {
	if m != nil {
		return m.AppProfile
	}
	return nil
}

func (m *ReplaceSpecType) GetMode() ves_io_schema4.WafModeType {
	if m != nil {
		return m.Mode
	}
	return ves_io_schema4.BLOCK
}

func (m *ReplaceSpecType) GetDisabledDetectionTags() *DisabledDetectionTags {
	if m != nil {
		return m.DisabledDetectionTags
	}
	return nil
}

// Get WAF
//
// x-displayName: "Get WAF"
// Get WAF will read the configuration from namespace metadata.namespace
type GetSpecType struct {
	AppProfile            *AppProfile                `protobuf:"bytes,1,opt,name=app_profile,json=appProfile" json:"app_profile,omitempty"`
	Mode                  ves_io_schema4.WafModeType `protobuf:"varint,4,opt,name=mode,proto3,enum=ves.io.schema.WafModeType" json:"mode,omitempty"`
	DisabledDetectionTags *DisabledDetectionTags     `protobuf:"bytes,5,opt,name=disabled_detection_tags,json=disabledDetectionTags" json:"disabled_detection_tags,omitempty"`
}

func (m *GetSpecType) Reset()                    { *m = GetSpecType{} }
func (*GetSpecType) ProtoMessage()               {}
func (*GetSpecType) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{5} }

func (m *GetSpecType) GetAppProfile() *AppProfile {
	if m != nil {
		return m.AppProfile
	}
	return nil
}

func (m *GetSpecType) GetMode() ves_io_schema4.WafModeType {
	if m != nil {
		return m.Mode
	}
	return ves_io_schema4.BLOCK
}

func (m *GetSpecType) GetDisabledDetectionTags() *DisabledDetectionTags {
	if m != nil {
		return m.DisabledDetectionTags
	}
	return nil
}

// Label based filtering of WAF metrics.
//
// x-displayName: "WAF Metric Label Filter"
// WAF metrics are tagged with labels mentioned in MetricLabel.
// Metric label filter can be specified to query specific metrics based on label match
type MetricLabelFilter struct {
	// Label
	//
	// x-displayName: "Label"
	// Label name which is one out of the labels defined in MetricLabel enum.
	Label MetricLabel `protobuf:"varint,1,opt,name=label,proto3,enum=ves.io.schema.waf.MetricLabel" json:"label,omitempty"`
	// Operator
	//
	// x-displayName: "Operator"
	// Operator to evaluate the label in this filter
	Op MetricLabelOp `protobuf:"varint,2,opt,name=op,proto3,enum=ves.io.schema.waf.MetricLabelOp" json:"op,omitempty"`
	// Value
	//
	// x-displayName: "Value"
	// x-example: "blogging-app-namespace-1"
	// Value to be compared with
	Value string `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *MetricLabelFilter) Reset()                    { *m = MetricLabelFilter{} }
func (*MetricLabelFilter) ProtoMessage()               {}
func (*MetricLabelFilter) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{6} }

func (m *MetricLabelFilter) GetLabel() MetricLabel {
	if m != nil {
		return m.Label
	}
	return NAMESPACE
}

func (m *MetricLabelFilter) GetOp() MetricLabelOp {
	if m != nil {
		return m.Op
	}
	return EQ
}

func (m *MetricLabelFilter) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

// Metric Value
//
// x-displayName: "Metric Value"
// Value returned for a WAF Metrics query
type MetricValue struct {
	// Timestamp
	//
	// x-displayName: "Timestamp"
	// x-example: "1570007981"
	// timestamp
	Timestamp float64 `protobuf:"fixed64,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// Value
	//
	// x-displayName: "Value"
	// x-example: "15"
	// value
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *MetricValue) Reset()                    { *m = MetricValue{} }
func (*MetricValue) ProtoMessage()               {}
func (*MetricValue) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{7} }

func (m *MetricValue) GetTimestamp() float64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *MetricValue) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

// RuleHitsId
//
// x-displayName: "Rule Hits ID"
// RuleHitsId uniquely identifies an entry in the response for rule_hits metrics query.
// Rule hits counter is aggregated based on the MetricLabel specified in the group_by field in the request.
// Therefore, only the fields that corresponds to the MetricLabel in the group_by will have non-empty
// value in the response.
type RuleHitsId struct {
	// Namespace
	//
	// x-displayName: "Namespace"
	// x-example: "blogging-app-namespace-1"
	// Namespace in which this WAF instance is running
	Namespace string `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// AppType
	//
	// x-displayName: "AppType"
	// x-example: "blogging-app"
	// AppType configured on the virtual_host under which this WAF instance is running
	AppType string `protobuf:"bytes,2,opt,name=app_type,json=appType,proto3" json:"app_type,omitempty"`
	// Virtual Host
	//
	// x-displayName: "Virtual Host"
	// x-example: "VS:greatblogs-vhost"
	// Virtual host under which this WAF instance is running
	VirtualHost string `protobuf:"bytes,3,opt,name=virtual_host,json=virtualHost,proto3" json:"virtual_host,omitempty"`
	// Site
	//
	// x-displayName: "Site"
	// x-example: "greatblogs-ce"
	// Site from which this WAF instance is reporting the metrics
	Site string `protobuf:"bytes,4,opt,name=site,proto3" json:"site,omitempty"`
	// Service
	//
	// x-displayName: "Service"
	// x-example: "N:greatblogs-ce"
	// Service for which this WAF instance is reporting the metrics
	Service string `protobuf:"bytes,5,opt,name=service,proto3" json:"service,omitempty"`
	// Instance
	//
	// x-displayName: "Instance"
	// x-example: "India"
	// Region from which the client's accesses caused WAF metrics to be generated
	Instance string `protobuf:"bytes,6,opt,name=instance,proto3" json:"instance,omitempty"`
	// WAF Instance ID
	//
	// x-displayName: "WAF Instance ID"
	// x-example: "blogging-app-namespace-1:generated-waf-rules-greatblogs-waf"
	// WAF instance ID
	WafInstanceId string `protobuf:"bytes,7,opt,name=waf_instance_id,json=wafInstanceId,proto3" json:"waf_instance_id,omitempty"`
	// Rule ID
	//
	// x-displayName: "Rule ID"
	// x-example: "941210"
	// RuleID of the rule that was hit to cause this metric to be generated
	RuleId string `protobuf:"bytes,8,opt,name=rule_id,json=ruleId,proto3" json:"rule_id,omitempty"`
	// Rule Severity
	//
	// x-displayName: "Rule Severity"
	// x-example: "CRITICAL"
	// Rule severity of the rule that was hit to cause this metric to be generated
	RuleSeverity string `protobuf:"bytes,9,opt,name=rule_severity,json=ruleSeverity,proto3" json:"rule_severity,omitempty"`
	// Rule Tag
	//
	// x-displayName: "Rule Tag"
	// x-example: "CAPEC-272"
	// Rule tag of the rule that was hit to cause this metric to be generated
	RuleTag string `protobuf:"bytes,10,opt,name=rule_tag,json=ruleTag,proto3" json:"rule_tag,omitempty"`
	// Bot Type
	//
	// x-displayName: "Bot Type"
	// x-example: "scanner"
	// Type of Bot (crawler, scanner, script)
	BotType string `protobuf:"bytes,11,opt,name=bot_type,json=botType,proto3" json:"bot_type,omitempty"`
	// Bot Name
	//
	// x-displayName: "Bot Name"
	// x-example: "whatweb"
	// Name of the Bot associated with the waf rule
	BotName string `protobuf:"bytes,12,opt,name=bot_name,json=botName,proto3" json:"bot_name,omitempty"`
}

func (m *RuleHitsId) Reset()                    { *m = RuleHitsId{} }
func (*RuleHitsId) ProtoMessage()               {}
func (*RuleHitsId) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{8} }

func (m *RuleHitsId) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *RuleHitsId) GetAppType() string {
	if m != nil {
		return m.AppType
	}
	return ""
}

func (m *RuleHitsId) GetVirtualHost() string {
	if m != nil {
		return m.VirtualHost
	}
	return ""
}

func (m *RuleHitsId) GetSite() string {
	if m != nil {
		return m.Site
	}
	return ""
}

func (m *RuleHitsId) GetService() string {
	if m != nil {
		return m.Service
	}
	return ""
}

func (m *RuleHitsId) GetInstance() string {
	if m != nil {
		return m.Instance
	}
	return ""
}

func (m *RuleHitsId) GetWafInstanceId() string {
	if m != nil {
		return m.WafInstanceId
	}
	return ""
}

func (m *RuleHitsId) GetRuleId() string {
	if m != nil {
		return m.RuleId
	}
	return ""
}

func (m *RuleHitsId) GetRuleSeverity() string {
	if m != nil {
		return m.RuleSeverity
	}
	return ""
}

func (m *RuleHitsId) GetRuleTag() string {
	if m != nil {
		return m.RuleTag
	}
	return ""
}

func (m *RuleHitsId) GetBotType() string {
	if m != nil {
		return m.BotType
	}
	return ""
}

func (m *RuleHitsId) GetBotName() string {
	if m != nil {
		return m.BotName
	}
	return ""
}

// Rule Hits Counter
//
// x-displayName: "Rule Hits Counter"
// RuleHitsCounter contains the timeseries data of rule hits counter.
type RuleHitsCounter struct {
	// Rule Hits ID
	//
	// x-displayName: "Rule Hits ID"
	// Rule Hits ID is the associated info for rule hits count
	Id *RuleHitsId `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	// Metric Values
	//
	// x-displayName: "Metric Values"
	// List of metric values
	Metric []*MetricValue `protobuf:"bytes,2,rep,name=metric" json:"metric,omitempty"`
}

func (m *RuleHitsCounter) Reset()                    { *m = RuleHitsCounter{} }
func (*RuleHitsCounter) ProtoMessage()               {}
func (*RuleHitsCounter) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{9} }

func (m *RuleHitsCounter) GetId() *RuleHitsId {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *RuleHitsCounter) GetMetric() []*MetricValue {
	if m != nil {
		return m.Metric
	}
	return nil
}

// SecurityEventsId
//
// x-displayName: "Security Events ID"
// SecurityEventsId uniquely identifies an entry in the response for rule_hits metrics query.
// security events counter is aggregated based on the MetricLabel specified in the group_by field in the request.
// Therefore, only the fields that corresponds to the MetricLabel in the group_by will have non-empty
// value in the response.
type SecurityEventsId struct {
	// Namespace
	//
	// x-displayName: "Namespace"
	// x-example: "blogging-app-namespace-1"
	// Namespace in which this WAF instance is running
	Namespace string `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// AppType
	//
	// x-displayName: "AppType"
	// x-example: "blogging-app"
	// AppType configured on the vhost under which this WAF instance is running
	AppType string `protobuf:"bytes,2,opt,name=app_type,json=appType,proto3" json:"app_type,omitempty"`
	// Virtual Host
	//
	// x-displayName: "Virtual Host"
	// x-example: "VS:greatblogs-vhost"
	// Virtual host under which this WAF instance is running
	VirtualHost string `protobuf:"bytes,3,opt,name=virtual_host,json=virtualHost,proto3" json:"virtual_host,omitempty"`
	// Site
	//
	// x-displayName: "Site"
	// x-example: "greatblogs-ce"
	// Site from which this WAF instance is reporting the metrics
	Site string `protobuf:"bytes,4,opt,name=site,proto3" json:"site,omitempty"`
	// Service
	//
	// x-displayName: "Service"
	// x-example: "N:greatblogs-ce"
	// Service for which this WAF instance is reporting the metrics
	Service string `protobuf:"bytes,5,opt,name=service,proto3" json:"service,omitempty"`
	// Instance
	//
	// x-displayName: "Instance"
	// x-example: "India"
	// Region from which the client's accesses caused WAF metrics to be generated
	Instance string `protobuf:"bytes,6,opt,name=instance,proto3" json:"instance,omitempty"`
	// WAF Instance ID
	//
	// x-displayName: "WAF Instance ID"
	// x-example: "blogging-app-namespace-1:generated-waf-rules-greatblogs-waf"
	// WAF instance ID
	WafInstanceId string `protobuf:"bytes,7,opt,name=waf_instance_id,json=wafInstanceId,proto3" json:"waf_instance_id,omitempty"`
	// WAF Mode
	//
	// x-displayName: "WAF Mode"
	// x-example: "Block"
	// Block or AlertOnly
	WafMode string `protobuf:"bytes,8,opt,name=waf_mode,json=wafMode,proto3" json:"waf_mode,omitempty"`
	// Bot Type
	//
	// x-displayName: "Bot Type"
	// x-example: "scanner"
	// Type of Bot (crawler, scanner, script)
	BotType string `protobuf:"bytes,9,opt,name=bot_type,json=botType,proto3" json:"bot_type,omitempty"`
	// Bot Name
	//
	// x-displayName: "Bot Name"
	// x-example: "whatweb"
	// Name of the Bot associated with the waf rule
	BotName string `protobuf:"bytes,10,opt,name=bot_name,json=botName,proto3" json:"bot_name,omitempty"`
}

func (m *SecurityEventsId) Reset()                    { *m = SecurityEventsId{} }
func (*SecurityEventsId) ProtoMessage()               {}
func (*SecurityEventsId) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{10} }

func (m *SecurityEventsId) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *SecurityEventsId) GetAppType() string {
	if m != nil {
		return m.AppType
	}
	return ""
}

func (m *SecurityEventsId) GetVirtualHost() string {
	if m != nil {
		return m.VirtualHost
	}
	return ""
}

func (m *SecurityEventsId) GetSite() string {
	if m != nil {
		return m.Site
	}
	return ""
}

func (m *SecurityEventsId) GetService() string {
	if m != nil {
		return m.Service
	}
	return ""
}

func (m *SecurityEventsId) GetInstance() string {
	if m != nil {
		return m.Instance
	}
	return ""
}

func (m *SecurityEventsId) GetWafInstanceId() string {
	if m != nil {
		return m.WafInstanceId
	}
	return ""
}

func (m *SecurityEventsId) GetWafMode() string {
	if m != nil {
		return m.WafMode
	}
	return ""
}

func (m *SecurityEventsId) GetBotType() string {
	if m != nil {
		return m.BotType
	}
	return ""
}

func (m *SecurityEventsId) GetBotName() string {
	if m != nil {
		return m.BotName
	}
	return ""
}

// Security Events Counter
//
// x-displayName: "Security Events Counter"
// SecurityEventsCounter contains the timeseries data of security events counter.
type SecurityEventsCounter struct {
	// Security Events ID
	//
	// x-displayName: "Security Events ID"
	// Security Event ID is the associated info for security events count
	Id *SecurityEventsId `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	// Metric Values
	//
	// x-displayName: "Metric Values"
	// List of metric values
	Metric []*MetricValue `protobuf:"bytes,2,rep,name=metric" json:"metric,omitempty"`
}

func (m *SecurityEventsCounter) Reset()                    { *m = SecurityEventsCounter{} }
func (*SecurityEventsCounter) ProtoMessage()               {}
func (*SecurityEventsCounter) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{11} }

func (m *SecurityEventsCounter) GetId() *SecurityEventsId {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *SecurityEventsCounter) GetMetric() []*MetricValue {
	if m != nil {
		return m.Metric
	}
	return nil
}

// SecurityEventAggregation
//
// x-displayName: "Security Event Aggregation"
// Aggregation request to provide analytics data over the security events response
type SecurityEventAggregation struct {
	// name
	//
	// x-displayName: "Name"
	// x-example: "date_bucket"
	//
	// user-defined name for the aggregation. This name is used to uniquely identify the
	// aggregations in the response.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// step
	//
	// x-displayName: "Step"
	// x-example: "5m"
	//
	// step is the resolution width, which determines the number of the data points [x-axis (time)] to be returned in the response.
	// The timestamps in the response will be t1=start_time, t2=t1+step, ... tn=tn-1+step, where tn <= end_time.
	// Format: [0-9][smhd], where s - seconds, m - minutes, h - hours, d - days
	//
	// Optional: If not specified, then step size is evaluated to <end_time - start_time>
	Step string `protobuf:"bytes,2,opt,name=step,proto3" json:"step,omitempty"`
}

func (m *SecurityEventAggregation) Reset()                    { *m = SecurityEventAggregation{} }
func (*SecurityEventAggregation) ProtoMessage()               {}
func (*SecurityEventAggregation) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{12} }

func (m *SecurityEventAggregation) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *SecurityEventAggregation) GetStep() string {
	if m != nil {
		return m.Step
	}
	return ""
}

func init() {
	proto.RegisterType((*AppProfile)(nil), "ves.io.schema.waf.AppProfile")
	proto.RegisterType((*DisabledDetectionTags)(nil), "ves.io.schema.waf.DisabledDetectionTags")
	proto.RegisterType((*GlobalSpecType)(nil), "ves.io.schema.waf.GlobalSpecType")
	proto.RegisterType((*CreateSpecType)(nil), "ves.io.schema.waf.CreateSpecType")
	proto.RegisterType((*ReplaceSpecType)(nil), "ves.io.schema.waf.ReplaceSpecType")
	proto.RegisterType((*GetSpecType)(nil), "ves.io.schema.waf.GetSpecType")
	proto.RegisterType((*MetricLabelFilter)(nil), "ves.io.schema.waf.MetricLabelFilter")
	proto.RegisterType((*MetricValue)(nil), "ves.io.schema.waf.MetricValue")
	proto.RegisterType((*RuleHitsId)(nil), "ves.io.schema.waf.RuleHitsId")
	proto.RegisterType((*RuleHitsCounter)(nil), "ves.io.schema.waf.RuleHitsCounter")
	proto.RegisterType((*SecurityEventsId)(nil), "ves.io.schema.waf.SecurityEventsId")
	proto.RegisterType((*SecurityEventsCounter)(nil), "ves.io.schema.waf.SecurityEventsCounter")
	proto.RegisterType((*SecurityEventAggregation)(nil), "ves.io.schema.waf.SecurityEventAggregation")
	proto.RegisterEnum("ves.io.schema.waf.ContentManagementSystemType", ContentManagementSystemType_name, ContentManagementSystemType_value)
	proto.RegisterEnum("ves.io.schema.waf.LanguageType", LanguageType_name, LanguageType_value)
	proto.RegisterEnum("ves.io.schema.waf.WebServerType", WebServerType_name, WebServerType_value)
	proto.RegisterEnum("ves.io.schema.waf.DetectionTagType", DetectionTagType_name, DetectionTagType_value)
	proto.RegisterEnum("ves.io.schema.waf.MetricLabel", MetricLabel_name, MetricLabel_value)
	proto.RegisterEnum("ves.io.schema.waf.MetricLabelOp", MetricLabelOp_name, MetricLabelOp_value)
}
func (x ContentManagementSystemType) String() string {
	s, ok := ContentManagementSystemType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x LanguageType) String() string {
	s, ok := LanguageType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x WebServerType) String() string {
	s, ok := WebServerType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x DetectionTagType) String() string {
	s, ok := DetectionTagType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x MetricLabel) String() string {
	s, ok := MetricLabel_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x MetricLabelOp) String() string {
	s, ok := MetricLabelOp_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *AppProfile) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AppProfile)
	if !ok {
		that2, ok := that.(AppProfile)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Language) != len(that1.Language) {
		return false
	}
	for i := range this.Language {
		if this.Language[i] != that1.Language[i] {
			return false
		}
	}
	if len(this.Cms) != len(that1.Cms) {
		return false
	}
	for i := range this.Cms {
		if this.Cms[i] != that1.Cms[i] {
			return false
		}
	}
	if len(this.Webserver) != len(that1.Webserver) {
		return false
	}
	for i := range this.Webserver {
		if this.Webserver[i] != that1.Webserver[i] {
			return false
		}
	}
	return true
}
func (this *DisabledDetectionTags) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DisabledDetectionTags)
	if !ok {
		that2, ok := that.(DisabledDetectionTags)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.DetectionTagType) != len(that1.DetectionTagType) {
		return false
	}
	for i := range this.DetectionTagType {
		if this.DetectionTagType[i] != that1.DetectionTagType[i] {
			return false
		}
	}
	return true
}
func (this *GlobalSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType)
	if !ok {
		that2, ok := that.(GlobalSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AppProfile.Equal(that1.AppProfile) {
		return false
	}
	if this.Mode != that1.Mode {
		return false
	}
	if !this.DisabledDetectionTags.Equal(that1.DisabledDetectionTags) {
		return false
	}
	return true
}
func (this *CreateSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType)
	if !ok {
		that2, ok := that.(CreateSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AppProfile.Equal(that1.AppProfile) {
		return false
	}
	if this.Mode != that1.Mode {
		return false
	}
	if !this.DisabledDetectionTags.Equal(that1.DisabledDetectionTags) {
		return false
	}
	return true
}
func (this *ReplaceSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType)
	if !ok {
		that2, ok := that.(ReplaceSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AppProfile.Equal(that1.AppProfile) {
		return false
	}
	if this.Mode != that1.Mode {
		return false
	}
	if !this.DisabledDetectionTags.Equal(that1.DisabledDetectionTags) {
		return false
	}
	return true
}
func (this *GetSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType)
	if !ok {
		that2, ok := that.(GetSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AppProfile.Equal(that1.AppProfile) {
		return false
	}
	if this.Mode != that1.Mode {
		return false
	}
	if !this.DisabledDetectionTags.Equal(that1.DisabledDetectionTags) {
		return false
	}
	return true
}
func (this *MetricLabelFilter) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MetricLabelFilter)
	if !ok {
		that2, ok := that.(MetricLabelFilter)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Label != that1.Label {
		return false
	}
	if this.Op != that1.Op {
		return false
	}
	if this.Value != that1.Value {
		return false
	}
	return true
}
func (this *MetricValue) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MetricValue)
	if !ok {
		that2, ok := that.(MetricValue)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Timestamp != that1.Timestamp {
		return false
	}
	if this.Value != that1.Value {
		return false
	}
	return true
}
func (this *RuleHitsId) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RuleHitsId)
	if !ok {
		that2, ok := that.(RuleHitsId)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Namespace != that1.Namespace {
		return false
	}
	if this.AppType != that1.AppType {
		return false
	}
	if this.VirtualHost != that1.VirtualHost {
		return false
	}
	if this.Site != that1.Site {
		return false
	}
	if this.Service != that1.Service {
		return false
	}
	if this.Instance != that1.Instance {
		return false
	}
	if this.WafInstanceId != that1.WafInstanceId {
		return false
	}
	if this.RuleId != that1.RuleId {
		return false
	}
	if this.RuleSeverity != that1.RuleSeverity {
		return false
	}
	if this.RuleTag != that1.RuleTag {
		return false
	}
	if this.BotType != that1.BotType {
		return false
	}
	if this.BotName != that1.BotName {
		return false
	}
	return true
}
func (this *RuleHitsCounter) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RuleHitsCounter)
	if !ok {
		that2, ok := that.(RuleHitsCounter)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Id.Equal(that1.Id) {
		return false
	}
	if len(this.Metric) != len(that1.Metric) {
		return false
	}
	for i := range this.Metric {
		if !this.Metric[i].Equal(that1.Metric[i]) {
			return false
		}
	}
	return true
}
func (this *SecurityEventsId) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SecurityEventsId)
	if !ok {
		that2, ok := that.(SecurityEventsId)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Namespace != that1.Namespace {
		return false
	}
	if this.AppType != that1.AppType {
		return false
	}
	if this.VirtualHost != that1.VirtualHost {
		return false
	}
	if this.Site != that1.Site {
		return false
	}
	if this.Service != that1.Service {
		return false
	}
	if this.Instance != that1.Instance {
		return false
	}
	if this.WafInstanceId != that1.WafInstanceId {
		return false
	}
	if this.WafMode != that1.WafMode {
		return false
	}
	if this.BotType != that1.BotType {
		return false
	}
	if this.BotName != that1.BotName {
		return false
	}
	return true
}
func (this *SecurityEventsCounter) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SecurityEventsCounter)
	if !ok {
		that2, ok := that.(SecurityEventsCounter)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Id.Equal(that1.Id) {
		return false
	}
	if len(this.Metric) != len(that1.Metric) {
		return false
	}
	for i := range this.Metric {
		if !this.Metric[i].Equal(that1.Metric[i]) {
			return false
		}
	}
	return true
}
func (this *SecurityEventAggregation) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SecurityEventAggregation)
	if !ok {
		that2, ok := that.(SecurityEventAggregation)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Step != that1.Step {
		return false
	}
	return true
}
func (this *AppProfile) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&waf.AppProfile{")
	s = append(s, "Language: "+fmt.Sprintf("%#v", this.Language)+",\n")
	s = append(s, "Cms: "+fmt.Sprintf("%#v", this.Cms)+",\n")
	s = append(s, "Webserver: "+fmt.Sprintf("%#v", this.Webserver)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DisabledDetectionTags) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&waf.DisabledDetectionTags{")
	s = append(s, "DetectionTagType: "+fmt.Sprintf("%#v", this.DetectionTagType)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GlobalSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&waf.GlobalSpecType{")
	if this.AppProfile != nil {
		s = append(s, "AppProfile: "+fmt.Sprintf("%#v", this.AppProfile)+",\n")
	}
	s = append(s, "Mode: "+fmt.Sprintf("%#v", this.Mode)+",\n")
	if this.DisabledDetectionTags != nil {
		s = append(s, "DisabledDetectionTags: "+fmt.Sprintf("%#v", this.DisabledDetectionTags)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CreateSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&waf.CreateSpecType{")
	if this.AppProfile != nil {
		s = append(s, "AppProfile: "+fmt.Sprintf("%#v", this.AppProfile)+",\n")
	}
	s = append(s, "Mode: "+fmt.Sprintf("%#v", this.Mode)+",\n")
	if this.DisabledDetectionTags != nil {
		s = append(s, "DisabledDetectionTags: "+fmt.Sprintf("%#v", this.DisabledDetectionTags)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ReplaceSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&waf.ReplaceSpecType{")
	if this.AppProfile != nil {
		s = append(s, "AppProfile: "+fmt.Sprintf("%#v", this.AppProfile)+",\n")
	}
	s = append(s, "Mode: "+fmt.Sprintf("%#v", this.Mode)+",\n")
	if this.DisabledDetectionTags != nil {
		s = append(s, "DisabledDetectionTags: "+fmt.Sprintf("%#v", this.DisabledDetectionTags)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&waf.GetSpecType{")
	if this.AppProfile != nil {
		s = append(s, "AppProfile: "+fmt.Sprintf("%#v", this.AppProfile)+",\n")
	}
	s = append(s, "Mode: "+fmt.Sprintf("%#v", this.Mode)+",\n")
	if this.DisabledDetectionTags != nil {
		s = append(s, "DisabledDetectionTags: "+fmt.Sprintf("%#v", this.DisabledDetectionTags)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *MetricLabelFilter) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&waf.MetricLabelFilter{")
	s = append(s, "Label: "+fmt.Sprintf("%#v", this.Label)+",\n")
	s = append(s, "Op: "+fmt.Sprintf("%#v", this.Op)+",\n")
	s = append(s, "Value: "+fmt.Sprintf("%#v", this.Value)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *MetricValue) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&waf.MetricValue{")
	s = append(s, "Timestamp: "+fmt.Sprintf("%#v", this.Timestamp)+",\n")
	s = append(s, "Value: "+fmt.Sprintf("%#v", this.Value)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RuleHitsId) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 16)
	s = append(s, "&waf.RuleHitsId{")
	s = append(s, "Namespace: "+fmt.Sprintf("%#v", this.Namespace)+",\n")
	s = append(s, "AppType: "+fmt.Sprintf("%#v", this.AppType)+",\n")
	s = append(s, "VirtualHost: "+fmt.Sprintf("%#v", this.VirtualHost)+",\n")
	s = append(s, "Site: "+fmt.Sprintf("%#v", this.Site)+",\n")
	s = append(s, "Service: "+fmt.Sprintf("%#v", this.Service)+",\n")
	s = append(s, "Instance: "+fmt.Sprintf("%#v", this.Instance)+",\n")
	s = append(s, "WafInstanceId: "+fmt.Sprintf("%#v", this.WafInstanceId)+",\n")
	s = append(s, "RuleId: "+fmt.Sprintf("%#v", this.RuleId)+",\n")
	s = append(s, "RuleSeverity: "+fmt.Sprintf("%#v", this.RuleSeverity)+",\n")
	s = append(s, "RuleTag: "+fmt.Sprintf("%#v", this.RuleTag)+",\n")
	s = append(s, "BotType: "+fmt.Sprintf("%#v", this.BotType)+",\n")
	s = append(s, "BotName: "+fmt.Sprintf("%#v", this.BotName)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RuleHitsCounter) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&waf.RuleHitsCounter{")
	if this.Id != nil {
		s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	}
	if this.Metric != nil {
		s = append(s, "Metric: "+fmt.Sprintf("%#v", this.Metric)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SecurityEventsId) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 14)
	s = append(s, "&waf.SecurityEventsId{")
	s = append(s, "Namespace: "+fmt.Sprintf("%#v", this.Namespace)+",\n")
	s = append(s, "AppType: "+fmt.Sprintf("%#v", this.AppType)+",\n")
	s = append(s, "VirtualHost: "+fmt.Sprintf("%#v", this.VirtualHost)+",\n")
	s = append(s, "Site: "+fmt.Sprintf("%#v", this.Site)+",\n")
	s = append(s, "Service: "+fmt.Sprintf("%#v", this.Service)+",\n")
	s = append(s, "Instance: "+fmt.Sprintf("%#v", this.Instance)+",\n")
	s = append(s, "WafInstanceId: "+fmt.Sprintf("%#v", this.WafInstanceId)+",\n")
	s = append(s, "WafMode: "+fmt.Sprintf("%#v", this.WafMode)+",\n")
	s = append(s, "BotType: "+fmt.Sprintf("%#v", this.BotType)+",\n")
	s = append(s, "BotName: "+fmt.Sprintf("%#v", this.BotName)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SecurityEventsCounter) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&waf.SecurityEventsCounter{")
	if this.Id != nil {
		s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	}
	if this.Metric != nil {
		s = append(s, "Metric: "+fmt.Sprintf("%#v", this.Metric)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SecurityEventAggregation) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&waf.SecurityEventAggregation{")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "Step: "+fmt.Sprintf("%#v", this.Step)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringTypes(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *AppProfile) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AppProfile) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Language) > 0 {
		dAtA2 := make([]byte, len(m.Language)*10)
		var j1 int
		for _, num := range m.Language {
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		dAtA[i] = 0x12
		i++
		i = encodeVarintTypes(dAtA, i, uint64(j1))
		i += copy(dAtA[i:], dAtA2[:j1])
	}
	if len(m.Cms) > 0 {
		dAtA4 := make([]byte, len(m.Cms)*10)
		var j3 int
		for _, num := range m.Cms {
			for num >= 1<<7 {
				dAtA4[j3] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j3++
			}
			dAtA4[j3] = uint8(num)
			j3++
		}
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(j3))
		i += copy(dAtA[i:], dAtA4[:j3])
	}
	if len(m.Webserver) > 0 {
		dAtA6 := make([]byte, len(m.Webserver)*10)
		var j5 int
		for _, num := range m.Webserver {
			for num >= 1<<7 {
				dAtA6[j5] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j5++
			}
			dAtA6[j5] = uint8(num)
			j5++
		}
		dAtA[i] = 0x22
		i++
		i = encodeVarintTypes(dAtA, i, uint64(j5))
		i += copy(dAtA[i:], dAtA6[:j5])
	}
	return i, nil
}

func (m *DisabledDetectionTags) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DisabledDetectionTags) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.DetectionTagType) > 0 {
		dAtA8 := make([]byte, len(m.DetectionTagType)*10)
		var j7 int
		for _, num := range m.DetectionTagType {
			for num >= 1<<7 {
				dAtA8[j7] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j7++
			}
			dAtA8[j7] = uint8(num)
			j7++
		}
		dAtA[i] = 0xa
		i++
		i = encodeVarintTypes(dAtA, i, uint64(j7))
		i += copy(dAtA[i:], dAtA8[:j7])
	}
	return i, nil
}

func (m *GlobalSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GlobalSpecType) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.AppProfile != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.AppProfile.Size()))
		n9, err := m.AppProfile.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n9
	}
	if m.Mode != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.Mode))
	}
	if m.DisabledDetectionTags != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.DisabledDetectionTags.Size()))
		n10, err := m.DisabledDetectionTags.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n10
	}
	return i, nil
}

func (m *CreateSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateSpecType) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.AppProfile != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.AppProfile.Size()))
		n11, err := m.AppProfile.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n11
	}
	if m.Mode != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.Mode))
	}
	if m.DisabledDetectionTags != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.DisabledDetectionTags.Size()))
		n12, err := m.DisabledDetectionTags.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n12
	}
	return i, nil
}

func (m *ReplaceSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplaceSpecType) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.AppProfile != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.AppProfile.Size()))
		n13, err := m.AppProfile.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n13
	}
	if m.Mode != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.Mode))
	}
	if m.DisabledDetectionTags != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.DisabledDetectionTags.Size()))
		n14, err := m.DisabledDetectionTags.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n14
	}
	return i, nil
}

func (m *GetSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetSpecType) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.AppProfile != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.AppProfile.Size()))
		n15, err := m.AppProfile.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n15
	}
	if m.Mode != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.Mode))
	}
	if m.DisabledDetectionTags != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.DisabledDetectionTags.Size()))
		n16, err := m.DisabledDetectionTags.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n16
	}
	return i, nil
}

func (m *MetricLabelFilter) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MetricLabelFilter) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Label != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.Label))
	}
	if m.Op != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.Op))
	}
	if len(m.Value) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Value)))
		i += copy(dAtA[i:], m.Value)
	}
	return i, nil
}

func (m *MetricValue) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MetricValue) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Timestamp != 0 {
		dAtA[i] = 0x9
		i++
		binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Timestamp))))
		i += 8
	}
	if len(m.Value) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Value)))
		i += copy(dAtA[i:], m.Value)
	}
	return i, nil
}

func (m *RuleHitsId) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RuleHitsId) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Namespace) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Namespace)))
		i += copy(dAtA[i:], m.Namespace)
	}
	if len(m.AppType) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTypes(dAtA, i, uint64(len(m.AppType)))
		i += copy(dAtA[i:], m.AppType)
	}
	if len(m.VirtualHost) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(len(m.VirtualHost)))
		i += copy(dAtA[i:], m.VirtualHost)
	}
	if len(m.Site) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Site)))
		i += copy(dAtA[i:], m.Site)
	}
	if len(m.Service) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Service)))
		i += copy(dAtA[i:], m.Service)
	}
	if len(m.Instance) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Instance)))
		i += copy(dAtA[i:], m.Instance)
	}
	if len(m.WafInstanceId) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(len(m.WafInstanceId)))
		i += copy(dAtA[i:], m.WafInstanceId)
	}
	if len(m.RuleId) > 0 {
		dAtA[i] = 0x42
		i++
		i = encodeVarintTypes(dAtA, i, uint64(len(m.RuleId)))
		i += copy(dAtA[i:], m.RuleId)
	}
	if len(m.RuleSeverity) > 0 {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(len(m.RuleSeverity)))
		i += copy(dAtA[i:], m.RuleSeverity)
	}
	if len(m.RuleTag) > 0 {
		dAtA[i] = 0x52
		i++
		i = encodeVarintTypes(dAtA, i, uint64(len(m.RuleTag)))
		i += copy(dAtA[i:], m.RuleTag)
	}
	if len(m.BotType) > 0 {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(len(m.BotType)))
		i += copy(dAtA[i:], m.BotType)
	}
	if len(m.BotName) > 0 {
		dAtA[i] = 0x62
		i++
		i = encodeVarintTypes(dAtA, i, uint64(len(m.BotName)))
		i += copy(dAtA[i:], m.BotName)
	}
	return i, nil
}

func (m *RuleHitsCounter) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RuleHitsCounter) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.Id.Size()))
		n17, err := m.Id.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n17
	}
	if len(m.Metric) > 0 {
		for _, msg := range m.Metric {
			dAtA[i] = 0x12
			i++
			i = encodeVarintTypes(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *SecurityEventsId) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SecurityEventsId) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Namespace) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Namespace)))
		i += copy(dAtA[i:], m.Namespace)
	}
	if len(m.AppType) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTypes(dAtA, i, uint64(len(m.AppType)))
		i += copy(dAtA[i:], m.AppType)
	}
	if len(m.VirtualHost) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(len(m.VirtualHost)))
		i += copy(dAtA[i:], m.VirtualHost)
	}
	if len(m.Site) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Site)))
		i += copy(dAtA[i:], m.Site)
	}
	if len(m.Service) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Service)))
		i += copy(dAtA[i:], m.Service)
	}
	if len(m.Instance) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Instance)))
		i += copy(dAtA[i:], m.Instance)
	}
	if len(m.WafInstanceId) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(len(m.WafInstanceId)))
		i += copy(dAtA[i:], m.WafInstanceId)
	}
	if len(m.WafMode) > 0 {
		dAtA[i] = 0x42
		i++
		i = encodeVarintTypes(dAtA, i, uint64(len(m.WafMode)))
		i += copy(dAtA[i:], m.WafMode)
	}
	if len(m.BotType) > 0 {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(len(m.BotType)))
		i += copy(dAtA[i:], m.BotType)
	}
	if len(m.BotName) > 0 {
		dAtA[i] = 0x52
		i++
		i = encodeVarintTypes(dAtA, i, uint64(len(m.BotName)))
		i += copy(dAtA[i:], m.BotName)
	}
	return i, nil
}

func (m *SecurityEventsCounter) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SecurityEventsCounter) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.Id.Size()))
		n18, err := m.Id.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n18
	}
	if len(m.Metric) > 0 {
		for _, msg := range m.Metric {
			dAtA[i] = 0x12
			i++
			i = encodeVarintTypes(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *SecurityEventAggregation) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SecurityEventAggregation) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.Step) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Step)))
		i += copy(dAtA[i:], m.Step)
	}
	return i, nil
}

func encodeVarintTypes(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func NewPopulatedAppProfile(r randyTypes, easy bool) *AppProfile {
	this := &AppProfile{}
	v1 := r.Intn(10)
	this.Language = make([]LanguageType, v1)
	for i := 0; i < v1; i++ {
		this.Language[i] = LanguageType([]int32{0, 1}[r.Intn(2)])
	}
	v2 := r.Intn(10)
	this.Cms = make([]ContentManagementSystemType, v2)
	for i := 0; i < v2; i++ {
		this.Cms[i] = ContentManagementSystemType([]int32{0, 1, 2, 3, 4}[r.Intn(5)])
	}
	v3 := r.Intn(10)
	this.Webserver = make([]WebServerType, v3)
	for i := 0; i < v3; i++ {
		this.Webserver[i] = WebServerType([]int32{0}[r.Intn(1)])
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedDisabledDetectionTags(r randyTypes, easy bool) *DisabledDetectionTags {
	this := &DisabledDetectionTags{}
	v4 := r.Intn(10)
	this.DetectionTagType = make([]DetectionTagType, v4)
	for i := 0; i < v4; i++ {
		this.DetectionTagType[i] = DetectionTagType([]int32{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}[r.Intn(13)])
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedGlobalSpecType(r randyTypes, easy bool) *GlobalSpecType {
	this := &GlobalSpecType{}
	if r.Intn(10) != 0 {
		this.AppProfile = NewPopulatedAppProfile(r, easy)
	}
	this.Mode = ves_io_schema4.WafModeType([]int32{0, 1}[r.Intn(2)])
	if r.Intn(10) != 0 {
		this.DisabledDetectionTags = NewPopulatedDisabledDetectionTags(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedCreateSpecType(r randyTypes, easy bool) *CreateSpecType {
	this := &CreateSpecType{}
	if r.Intn(10) != 0 {
		this.AppProfile = NewPopulatedAppProfile(r, easy)
	}
	this.Mode = ves_io_schema4.WafModeType([]int32{0, 1}[r.Intn(2)])
	if r.Intn(10) != 0 {
		this.DisabledDetectionTags = NewPopulatedDisabledDetectionTags(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedReplaceSpecType(r randyTypes, easy bool) *ReplaceSpecType {
	this := &ReplaceSpecType{}
	if r.Intn(10) != 0 {
		this.AppProfile = NewPopulatedAppProfile(r, easy)
	}
	this.Mode = ves_io_schema4.WafModeType([]int32{0, 1}[r.Intn(2)])
	if r.Intn(10) != 0 {
		this.DisabledDetectionTags = NewPopulatedDisabledDetectionTags(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedGetSpecType(r randyTypes, easy bool) *GetSpecType {
	this := &GetSpecType{}
	if r.Intn(10) != 0 {
		this.AppProfile = NewPopulatedAppProfile(r, easy)
	}
	this.Mode = ves_io_schema4.WafModeType([]int32{0, 1}[r.Intn(2)])
	if r.Intn(10) != 0 {
		this.DisabledDetectionTags = NewPopulatedDisabledDetectionTags(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedMetricLabelFilter(r randyTypes, easy bool) *MetricLabelFilter {
	this := &MetricLabelFilter{}
	this.Label = MetricLabel([]int32{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}[r.Intn(13)])
	this.Op = MetricLabelOp([]int32{0, 1}[r.Intn(2)])
	this.Value = string(randStringTypes(r))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedMetricValue(r randyTypes, easy bool) *MetricValue {
	this := &MetricValue{}
	this.Timestamp = float64(r.Float64())
	if r.Intn(2) == 0 {
		this.Timestamp *= -1
	}
	this.Value = string(randStringTypes(r))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedRuleHitsId(r randyTypes, easy bool) *RuleHitsId {
	this := &RuleHitsId{}
	this.Namespace = string(randStringTypes(r))
	this.AppType = string(randStringTypes(r))
	this.VirtualHost = string(randStringTypes(r))
	this.Site = string(randStringTypes(r))
	this.Service = string(randStringTypes(r))
	this.Instance = string(randStringTypes(r))
	this.WafInstanceId = string(randStringTypes(r))
	this.RuleId = string(randStringTypes(r))
	this.RuleSeverity = string(randStringTypes(r))
	this.RuleTag = string(randStringTypes(r))
	this.BotType = string(randStringTypes(r))
	this.BotName = string(randStringTypes(r))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedRuleHitsCounter(r randyTypes, easy bool) *RuleHitsCounter {
	this := &RuleHitsCounter{}
	if r.Intn(10) != 0 {
		this.Id = NewPopulatedRuleHitsId(r, easy)
	}
	if r.Intn(10) != 0 {
		v5 := r.Intn(5)
		this.Metric = make([]*MetricValue, v5)
		for i := 0; i < v5; i++ {
			this.Metric[i] = NewPopulatedMetricValue(r, easy)
		}
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedSecurityEventsId(r randyTypes, easy bool) *SecurityEventsId {
	this := &SecurityEventsId{}
	this.Namespace = string(randStringTypes(r))
	this.AppType = string(randStringTypes(r))
	this.VirtualHost = string(randStringTypes(r))
	this.Site = string(randStringTypes(r))
	this.Service = string(randStringTypes(r))
	this.Instance = string(randStringTypes(r))
	this.WafInstanceId = string(randStringTypes(r))
	this.WafMode = string(randStringTypes(r))
	this.BotType = string(randStringTypes(r))
	this.BotName = string(randStringTypes(r))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedSecurityEventsCounter(r randyTypes, easy bool) *SecurityEventsCounter {
	this := &SecurityEventsCounter{}
	if r.Intn(10) != 0 {
		this.Id = NewPopulatedSecurityEventsId(r, easy)
	}
	if r.Intn(10) != 0 {
		v6 := r.Intn(5)
		this.Metric = make([]*MetricValue, v6)
		for i := 0; i < v6; i++ {
			this.Metric[i] = NewPopulatedMetricValue(r, easy)
		}
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedSecurityEventAggregation(r randyTypes, easy bool) *SecurityEventAggregation {
	this := &SecurityEventAggregation{}
	this.Name = string(randStringTypes(r))
	this.Step = string(randStringTypes(r))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

type randyTypes interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneTypes(r randyTypes) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringTypes(r randyTypes) string {
	v7 := r.Intn(100)
	tmps := make([]rune, v7)
	for i := 0; i < v7; i++ {
		tmps[i] = randUTF8RuneTypes(r)
	}
	return string(tmps)
}
func randUnrecognizedTypes(r randyTypes, maxFieldNumber int) (dAtA []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		dAtA = randFieldTypes(dAtA, r, fieldNumber, wire)
	}
	return dAtA
}
func randFieldTypes(dAtA []byte, r randyTypes, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		dAtA = encodeVarintPopulateTypes(dAtA, uint64(key))
		v8 := r.Int63()
		if r.Intn(2) == 0 {
			v8 *= -1
		}
		dAtA = encodeVarintPopulateTypes(dAtA, uint64(v8))
	case 1:
		dAtA = encodeVarintPopulateTypes(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		dAtA = encodeVarintPopulateTypes(dAtA, uint64(key))
		ll := r.Intn(100)
		dAtA = encodeVarintPopulateTypes(dAtA, uint64(ll))
		for j := 0; j < ll; j++ {
			dAtA = append(dAtA, byte(r.Intn(256)))
		}
	default:
		dAtA = encodeVarintPopulateTypes(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return dAtA
}
func encodeVarintPopulateTypes(dAtA []byte, v uint64) []byte {
	for v >= 1<<7 {
		dAtA = append(dAtA, uint8(uint64(v)&0x7f|0x80))
		v >>= 7
	}
	dAtA = append(dAtA, uint8(v))
	return dAtA
}
func (m *AppProfile) Size() (n int) {
	var l int
	_ = l
	if len(m.Language) > 0 {
		l = 0
		for _, e := range m.Language {
			l += sovTypes(uint64(e))
		}
		n += 1 + sovTypes(uint64(l)) + l
	}
	if len(m.Cms) > 0 {
		l = 0
		for _, e := range m.Cms {
			l += sovTypes(uint64(e))
		}
		n += 1 + sovTypes(uint64(l)) + l
	}
	if len(m.Webserver) > 0 {
		l = 0
		for _, e := range m.Webserver {
			l += sovTypes(uint64(e))
		}
		n += 1 + sovTypes(uint64(l)) + l
	}
	return n
}

func (m *DisabledDetectionTags) Size() (n int) {
	var l int
	_ = l
	if len(m.DetectionTagType) > 0 {
		l = 0
		for _, e := range m.DetectionTagType {
			l += sovTypes(uint64(e))
		}
		n += 1 + sovTypes(uint64(l)) + l
	}
	return n
}

func (m *GlobalSpecType) Size() (n int) {
	var l int
	_ = l
	if m.AppProfile != nil {
		l = m.AppProfile.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.Mode != 0 {
		n += 1 + sovTypes(uint64(m.Mode))
	}
	if m.DisabledDetectionTags != nil {
		l = m.DisabledDetectionTags.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *CreateSpecType) Size() (n int) {
	var l int
	_ = l
	if m.AppProfile != nil {
		l = m.AppProfile.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.Mode != 0 {
		n += 1 + sovTypes(uint64(m.Mode))
	}
	if m.DisabledDetectionTags != nil {
		l = m.DisabledDetectionTags.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *ReplaceSpecType) Size() (n int) {
	var l int
	_ = l
	if m.AppProfile != nil {
		l = m.AppProfile.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.Mode != 0 {
		n += 1 + sovTypes(uint64(m.Mode))
	}
	if m.DisabledDetectionTags != nil {
		l = m.DisabledDetectionTags.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *GetSpecType) Size() (n int) {
	var l int
	_ = l
	if m.AppProfile != nil {
		l = m.AppProfile.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.Mode != 0 {
		n += 1 + sovTypes(uint64(m.Mode))
	}
	if m.DisabledDetectionTags != nil {
		l = m.DisabledDetectionTags.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *MetricLabelFilter) Size() (n int) {
	var l int
	_ = l
	if m.Label != 0 {
		n += 1 + sovTypes(uint64(m.Label))
	}
	if m.Op != 0 {
		n += 1 + sovTypes(uint64(m.Op))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *MetricValue) Size() (n int) {
	var l int
	_ = l
	if m.Timestamp != 0 {
		n += 9
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *RuleHitsId) Size() (n int) {
	var l int
	_ = l
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.AppType)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.VirtualHost)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.Site)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.Service)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.Instance)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.WafInstanceId)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.RuleId)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.RuleSeverity)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.RuleTag)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.BotType)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.BotName)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *RuleHitsCounter) Size() (n int) {
	var l int
	_ = l
	if m.Id != nil {
		l = m.Id.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if len(m.Metric) > 0 {
		for _, e := range m.Metric {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *SecurityEventsId) Size() (n int) {
	var l int
	_ = l
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.AppType)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.VirtualHost)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.Site)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.Service)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.Instance)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.WafInstanceId)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.WafMode)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.BotType)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.BotName)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *SecurityEventsCounter) Size() (n int) {
	var l int
	_ = l
	if m.Id != nil {
		l = m.Id.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if len(m.Metric) > 0 {
		for _, e := range m.Metric {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *SecurityEventAggregation) Size() (n int) {
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.Step)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func sovTypes(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozTypes(x uint64) (n int) {
	return sovTypes(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *AppProfile) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AppProfile{`,
		`Language:` + fmt.Sprintf("%v", this.Language) + `,`,
		`Cms:` + fmt.Sprintf("%v", this.Cms) + `,`,
		`Webserver:` + fmt.Sprintf("%v", this.Webserver) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DisabledDetectionTags) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DisabledDetectionTags{`,
		`DetectionTagType:` + fmt.Sprintf("%v", this.DetectionTagType) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType{`,
		`AppProfile:` + strings.Replace(fmt.Sprintf("%v", this.AppProfile), "AppProfile", "AppProfile", 1) + `,`,
		`Mode:` + fmt.Sprintf("%v", this.Mode) + `,`,
		`DisabledDetectionTags:` + strings.Replace(fmt.Sprintf("%v", this.DisabledDetectionTags), "DisabledDetectionTags", "DisabledDetectionTags", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType{`,
		`AppProfile:` + strings.Replace(fmt.Sprintf("%v", this.AppProfile), "AppProfile", "AppProfile", 1) + `,`,
		`Mode:` + fmt.Sprintf("%v", this.Mode) + `,`,
		`DisabledDetectionTags:` + strings.Replace(fmt.Sprintf("%v", this.DisabledDetectionTags), "DisabledDetectionTags", "DisabledDetectionTags", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType{`,
		`AppProfile:` + strings.Replace(fmt.Sprintf("%v", this.AppProfile), "AppProfile", "AppProfile", 1) + `,`,
		`Mode:` + fmt.Sprintf("%v", this.Mode) + `,`,
		`DisabledDetectionTags:` + strings.Replace(fmt.Sprintf("%v", this.DisabledDetectionTags), "DisabledDetectionTags", "DisabledDetectionTags", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType{`,
		`AppProfile:` + strings.Replace(fmt.Sprintf("%v", this.AppProfile), "AppProfile", "AppProfile", 1) + `,`,
		`Mode:` + fmt.Sprintf("%v", this.Mode) + `,`,
		`DisabledDetectionTags:` + strings.Replace(fmt.Sprintf("%v", this.DisabledDetectionTags), "DisabledDetectionTags", "DisabledDetectionTags", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *MetricLabelFilter) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MetricLabelFilter{`,
		`Label:` + fmt.Sprintf("%v", this.Label) + `,`,
		`Op:` + fmt.Sprintf("%v", this.Op) + `,`,
		`Value:` + fmt.Sprintf("%v", this.Value) + `,`,
		`}`,
	}, "")
	return s
}
func (this *MetricValue) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MetricValue{`,
		`Timestamp:` + fmt.Sprintf("%v", this.Timestamp) + `,`,
		`Value:` + fmt.Sprintf("%v", this.Value) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RuleHitsId) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RuleHitsId{`,
		`Namespace:` + fmt.Sprintf("%v", this.Namespace) + `,`,
		`AppType:` + fmt.Sprintf("%v", this.AppType) + `,`,
		`VirtualHost:` + fmt.Sprintf("%v", this.VirtualHost) + `,`,
		`Site:` + fmt.Sprintf("%v", this.Site) + `,`,
		`Service:` + fmt.Sprintf("%v", this.Service) + `,`,
		`Instance:` + fmt.Sprintf("%v", this.Instance) + `,`,
		`WafInstanceId:` + fmt.Sprintf("%v", this.WafInstanceId) + `,`,
		`RuleId:` + fmt.Sprintf("%v", this.RuleId) + `,`,
		`RuleSeverity:` + fmt.Sprintf("%v", this.RuleSeverity) + `,`,
		`RuleTag:` + fmt.Sprintf("%v", this.RuleTag) + `,`,
		`BotType:` + fmt.Sprintf("%v", this.BotType) + `,`,
		`BotName:` + fmt.Sprintf("%v", this.BotName) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RuleHitsCounter) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RuleHitsCounter{`,
		`Id:` + strings.Replace(fmt.Sprintf("%v", this.Id), "RuleHitsId", "RuleHitsId", 1) + `,`,
		`Metric:` + strings.Replace(fmt.Sprintf("%v", this.Metric), "MetricValue", "MetricValue", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SecurityEventsId) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SecurityEventsId{`,
		`Namespace:` + fmt.Sprintf("%v", this.Namespace) + `,`,
		`AppType:` + fmt.Sprintf("%v", this.AppType) + `,`,
		`VirtualHost:` + fmt.Sprintf("%v", this.VirtualHost) + `,`,
		`Site:` + fmt.Sprintf("%v", this.Site) + `,`,
		`Service:` + fmt.Sprintf("%v", this.Service) + `,`,
		`Instance:` + fmt.Sprintf("%v", this.Instance) + `,`,
		`WafInstanceId:` + fmt.Sprintf("%v", this.WafInstanceId) + `,`,
		`WafMode:` + fmt.Sprintf("%v", this.WafMode) + `,`,
		`BotType:` + fmt.Sprintf("%v", this.BotType) + `,`,
		`BotName:` + fmt.Sprintf("%v", this.BotName) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SecurityEventsCounter) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SecurityEventsCounter{`,
		`Id:` + strings.Replace(fmt.Sprintf("%v", this.Id), "SecurityEventsId", "SecurityEventsId", 1) + `,`,
		`Metric:` + strings.Replace(fmt.Sprintf("%v", this.Metric), "MetricValue", "MetricValue", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SecurityEventAggregation) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SecurityEventAggregation{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Step:` + fmt.Sprintf("%v", this.Step) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringTypes(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *AppProfile) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AppProfile: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AppProfile: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType == 0 {
				var v LanguageType
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (LanguageType(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Language = append(m.Language, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTypes
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v LanguageType
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTypes
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (LanguageType(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Language = append(m.Language, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Language", wireType)
			}
		case 3:
			if wireType == 0 {
				var v ContentManagementSystemType
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (ContentManagementSystemType(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Cms = append(m.Cms, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTypes
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v ContentManagementSystemType
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTypes
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (ContentManagementSystemType(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Cms = append(m.Cms, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Cms", wireType)
			}
		case 4:
			if wireType == 0 {
				var v WebServerType
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (WebServerType(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Webserver = append(m.Webserver, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTypes
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v WebServerType
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTypes
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (WebServerType(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Webserver = append(m.Webserver, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Webserver", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DisabledDetectionTags) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DisabledDetectionTags: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DisabledDetectionTags: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v DetectionTagType
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (DetectionTagType(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.DetectionTagType = append(m.DetectionTagType, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTypes
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v DetectionTagType
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTypes
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (DetectionTagType(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.DetectionTagType = append(m.DetectionTagType, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field DetectionTagType", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GlobalSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GlobalSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GlobalSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppProfile", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AppProfile == nil {
				m.AppProfile = &AppProfile{}
			}
			if err := m.AppProfile.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mode", wireType)
			}
			m.Mode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mode |= (ves_io_schema4.WafModeType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisabledDetectionTags", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DisabledDetectionTags == nil {
				m.DisabledDetectionTags = &DisabledDetectionTags{}
			}
			if err := m.DisabledDetectionTags.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppProfile", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AppProfile == nil {
				m.AppProfile = &AppProfile{}
			}
			if err := m.AppProfile.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mode", wireType)
			}
			m.Mode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mode |= (ves_io_schema4.WafModeType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisabledDetectionTags", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DisabledDetectionTags == nil {
				m.DisabledDetectionTags = &DisabledDetectionTags{}
			}
			if err := m.DisabledDetectionTags.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplaceSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplaceSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplaceSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppProfile", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AppProfile == nil {
				m.AppProfile = &AppProfile{}
			}
			if err := m.AppProfile.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mode", wireType)
			}
			m.Mode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mode |= (ves_io_schema4.WafModeType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisabledDetectionTags", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DisabledDetectionTags == nil {
				m.DisabledDetectionTags = &DisabledDetectionTags{}
			}
			if err := m.DisabledDetectionTags.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppProfile", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AppProfile == nil {
				m.AppProfile = &AppProfile{}
			}
			if err := m.AppProfile.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mode", wireType)
			}
			m.Mode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mode |= (ves_io_schema4.WafModeType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisabledDetectionTags", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DisabledDetectionTags == nil {
				m.DisabledDetectionTags = &DisabledDetectionTags{}
			}
			if err := m.DisabledDetectionTags.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MetricLabelFilter) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MetricLabelFilter: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MetricLabelFilter: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Label", wireType)
			}
			m.Label = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Label |= (MetricLabel(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Op", wireType)
			}
			m.Op = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Op |= (MetricLabelOp(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MetricValue) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MetricValue: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MetricValue: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Timestamp = float64(math.Float64frombits(v))
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RuleHitsId) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RuleHitsId: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RuleHitsId: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AppType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VirtualHost", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VirtualHost = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Site", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Site = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Service", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Service = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Instance", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Instance = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WafInstanceId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WafInstanceId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RuleId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RuleId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RuleSeverity", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RuleSeverity = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RuleTag", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RuleTag = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BotType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BotType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BotName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BotName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RuleHitsCounter) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RuleHitsCounter: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RuleHitsCounter: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Id == nil {
				m.Id = &RuleHitsId{}
			}
			if err := m.Id.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metric", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Metric = append(m.Metric, &MetricValue{})
			if err := m.Metric[len(m.Metric)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SecurityEventsId) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SecurityEventsId: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SecurityEventsId: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AppType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VirtualHost", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VirtualHost = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Site", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Site = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Service", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Service = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Instance", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Instance = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WafInstanceId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WafInstanceId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WafMode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WafMode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BotType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BotType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BotName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BotName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SecurityEventsCounter) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SecurityEventsCounter: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SecurityEventsCounter: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Id == nil {
				m.Id = &SecurityEventsId{}
			}
			if err := m.Id.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metric", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Metric = append(m.Metric, &MetricValue{})
			if err := m.Metric[len(m.Metric)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SecurityEventAggregation) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SecurityEventAggregation: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SecurityEventAggregation: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Step", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Step = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTypes(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthTypes
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipTypes(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthTypes = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTypes   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("ves.io/schema/waf/types.proto", fileDescriptorTypes) }

var fileDescriptorTypes = []byte{
	// 1369 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe4, 0x57, 0xcf, 0x6f, 0x1b, 0x45,
	0x14, 0xf6, 0xd8, 0x8e, 0x7f, 0x3c, 0x3b, 0xc9, 0x64, 0x68, 0xd5, 0x6d, 0xda, 0x2e, 0xae, 0x2b,
	0xa1, 0x28, 0x52, 0x6c, 0x94, 0x22, 0x0e, 0x1c, 0x2a, 0x6d, 0xec, 0x4d, 0xb2, 0x8d, 0x63, 0xbb,
	0xbb, 0x9b, 0xa4, 0x45, 0x42, 0xcb, 0xd8, 0x1e, 0x6f, 0x57, 0xd8, 0xde, 0x95, 0x77, 0xed, 0x34,
	0x37, 0x0e, 0x70, 0x07, 0xfe, 0x0a, 0xae, 0xdc, 0x10, 0xa7, 0x1e, 0x11, 0x07, 0xd4, 0x63, 0x8f,
	0xc4, 0x5c, 0xe8, 0x05, 0x2a, 0x24, 0x10, 0x47, 0x34, 0xb3, 0x76, 0x1c, 0x27, 0x26, 0x17, 0x6e,
	0xed, 0x6d, 0xbe, 0xf7, 0xe3, 0x7b, 0xf3, 0xde, 0x37, 0x1e, 0xcf, 0xc2, 0x9d, 0x21, 0xf3, 0x0b,
	0x8e, 0x5b, 0xf4, 0x9b, 0x4f, 0x59, 0x97, 0x16, 0x8f, 0x69, 0xbb, 0x18, 0x9c, 0x78, 0xcc, 0x2f,
	0x78, 0x7d, 0x37, 0x70, 0xc9, 0x4a, 0xe8, 0x2e, 0x84, 0xee, 0xc2, 0x31, 0x6d, 0xaf, 0x6e, 0xd8,
	0x4e, 0xf0, 0x74, 0xd0, 0x28, 0x34, 0xdd, 0x6e, 0xd1, 0x76, 0x6d, 0xb7, 0x28, 0x22, 0x1b, 0x83,
	0xb6, 0x40, 0x02, 0x88, 0x55, 0xc8, 0xb0, 0x7a, 0x6b, 0xb6, 0x80, 0xeb, 0x05, 0x8e, 0xdb, 0x1b,
	0xd3, 0xaf, 0xde, 0x9c, 0x75, 0x9e, 0xab, 0xbc, 0x7a, 0x7b, 0xd6, 0x35, 0xa4, 0x1d, 0xa7, 0x45,
	0x03, 0x36, 0xf6, 0xe6, 0x2e, 0x78, 0x1d, 0x76, 0x6c, 0xcd, 0x50, 0xe7, 0xff, 0x40, 0x00, 0x8a,
	0xe7, 0xd5, 0xfb, 0x6e, 0xdb, 0xe9, 0x30, 0xb2, 0x03, 0xa9, 0x0e, 0xed, 0xd9, 0x03, 0x6a, 0x33,
	0x29, 0x9a, 0x8b, 0xad, 0x2d, 0x6d, 0xbe, 0x5b, 0xb8, 0xd4, 0x5b, 0xa1, 0x32, 0x0e, 0x31, 0x4f,
	0x3c, 0xb6, 0x05, 0x3f, 0xbc, 0x7a, 0x1e, 0x5b, 0xf8, 0x06, 0x45, 0x25, 0xa4, 0x9f, 0x25, 0x93,
	0x0a, 0xc4, 0x9a, 0x5d, 0x5f, 0x8a, 0x09, 0x8e, 0xc2, 0x1c, 0x8e, 0x92, 0xdb, 0x0b, 0x58, 0x2f,
	0xd8, 0xa7, 0x3d, 0x6a, 0xb3, 0x2e, 0xeb, 0x05, 0xc6, 0x89, 0x1f, 0xb0, 0xee, 0x25, 0x4a, 0x4e,
	0x43, 0x1e, 0x42, 0xfa, 0x98, 0x35, 0x7c, 0xd6, 0x1f, 0xb2, 0xbe, 0x14, 0x17, 0x9c, 0xb9, 0x39,
	0x9c, 0x47, 0xac, 0x61, 0x88, 0x98, 0x4b, 0x2c, 0xd3, 0xf4, 0xfc, 0x10, 0xae, 0x97, 0x1d, 0x9f,
	0x36, 0x3a, 0xac, 0x55, 0x66, 0x01, 0x6b, 0xf2, 0x69, 0x98, 0xd4, 0xf6, 0xc9, 0x27, 0x40, 0x5a,
	0x13, 0x83, 0x15, 0x50, 0xdb, 0xe2, 0x73, 0x96, 0x90, 0xa8, 0x76, 0x6f, 0x4e, 0xb5, 0xf3, 0xd9,
	0x97, 0x0a, 0xe2, 0xd6, 0x05, 0x6f, 0x7e, 0x84, 0x60, 0x69, 0xa7, 0xe3, 0x36, 0x68, 0xc7, 0xf0,
	0x58, 0x93, 0x9b, 0xc8, 0x03, 0xc8, 0x50, 0xcf, 0xb3, 0xbc, 0x70, 0xf8, 0x12, 0xca, 0xa1, 0xb5,
	0xcc, 0xe6, 0x9d, 0x39, 0xa5, 0xa6, 0x0a, 0xe9, 0x40, 0xa7, 0x6a, 0x15, 0x20, 0xde, 0x75, 0x5b,
	0x4c, 0x8a, 0xe7, 0xd0, 0xda, 0xd2, 0xe6, 0xea, 0x85, 0xc4, 0x23, 0xda, 0xde, 0x77, 0x5b, 0x42,
	0x24, 0x5d, 0xc4, 0x91, 0x4f, 0xe1, 0x46, 0x6b, 0xdc, 0xba, 0x35, 0xd3, 0xaa, 0x2f, 0x2d, 0x88,
	0xda, 0x6b, 0xf3, 0xda, 0x9c, 0x37, 0x2c, 0xfd, 0x7a, 0x6b, 0x9e, 0x39, 0xff, 0x17, 0x82, 0xa5,
	0x52, 0x9f, 0xd1, 0x80, 0xbd, 0xb9, 0x4d, 0x7e, 0xb4, 0xf2, 0xd3, 0x83, 0x0b, 0x4a, 0xe6, 0xff,
	0x46, 0xb0, 0xac, 0x33, 0xaf, 0x43, 0x9b, 0x6f, 0x59, 0xe3, 0x7f, 0x22, 0xc8, 0xec, 0xb0, 0xe0,
	0xed, 0x6a, 0xfa, 0x6b, 0x04, 0x2b, 0xfb, 0x2c, 0xe8, 0x3b, 0xcd, 0x0a, 0x6d, 0xb0, 0xce, 0xb6,
	0xd3, 0x09, 0x58, 0x9f, 0x7c, 0x00, 0x0b, 0x1d, 0x0e, 0x45, 0xd3, 0x4b, 0x9b, 0xf2, 0x9c, 0xc2,
	0xe7, 0x92, 0xf4, 0x30, 0x98, 0xbc, 0x0f, 0x51, 0xd7, 0x93, 0xa2, 0x22, 0x25, 0x77, 0x75, 0x4a,
	0xcd, 0xd3, 0xa3, 0xae, 0x47, 0xae, 0xc1, 0xc2, 0x90, 0x76, 0x06, 0x4c, 0x8a, 0xe5, 0xd0, 0x5a,
	0x5a, 0x0f, 0x41, 0x5e, 0x81, 0x4c, 0x18, 0x7a, 0xc8, 0x21, 0xb9, 0x0d, 0xe9, 0xc0, 0xe9, 0x32,
	0x3f, 0xa0, 0x5d, 0x4f, 0x6c, 0x08, 0xe9, 0x53, 0xc3, 0x94, 0x22, 0x7a, 0x9e, 0xe2, 0x55, 0x14,
	0x40, 0x1f, 0x74, 0xd8, 0xae, 0x13, 0xf8, 0x5a, 0x8b, 0x53, 0xf4, 0x68, 0x97, 0xf9, 0x1e, 0x6d,
	0x86, 0x42, 0xa6, 0xf5, 0xa9, 0x81, 0xdc, 0x84, 0x14, 0x17, 0x5a, 0xdc, 0x91, 0x21, 0x4b, 0x92,
	0x7a, 0x9e, 0x38, 0x03, 0x77, 0x21, 0x3b, 0x74, 0xfa, 0xc1, 0x80, 0x76, 0xac, 0xa7, 0xae, 0x1f,
	0x8c, 0xf7, 0x99, 0x19, 0xdb, 0x76, 0x5d, 0x3f, 0x20, 0x04, 0xe2, 0xbe, 0x13, 0x84, 0x32, 0xa7,
	0x75, 0xb1, 0x26, 0x12, 0x24, 0xf9, 0x15, 0xed, 0x34, 0x99, 0x90, 0x2e, 0xad, 0x4f, 0x20, 0x59,
	0x85, 0x94, 0xd3, 0xf3, 0x03, 0xda, 0x6b, 0x32, 0x29, 0x21, 0x5c, 0x67, 0x98, 0xbc, 0x07, 0xcb,
	0xc7, 0xb4, 0x6d, 0x4d, 0xb0, 0xe5, 0xb4, 0xa4, 0xa4, 0x08, 0x59, 0x3c, 0xa6, 0x6d, 0x6d, 0x6c,
	0xd5, 0x5a, 0xe4, 0x06, 0x24, 0xfb, 0x83, 0x8e, 0xf0, 0xa7, 0x84, 0x3f, 0xc1, 0xa1, 0xd6, 0x22,
	0xf7, 0x60, 0x51, 0x38, 0x7c, 0x36, 0x64, 0x7d, 0x27, 0x38, 0x91, 0xd2, 0xc2, 0x9d, 0xe5, 0x46,
	0x63, 0x6c, 0xe3, 0xdd, 0x8a, 0xa0, 0x80, 0xda, 0x12, 0x84, 0x9b, 0xe3, 0xd8, 0xa4, 0x36, 0x77,
	0x35, 0xdc, 0x20, 0x1c, 0x44, 0x26, 0x74, 0x35, 0xdc, 0x40, 0x0c, 0x62, 0xec, 0xe2, 0x43, 0x93,
	0xb2, 0x67, 0xae, 0x2a, 0xed, 0xb2, 0xfc, 0x33, 0x58, 0x9e, 0x8c, 0xba, 0xe4, 0x0e, 0x7a, 0xfc,
	0xfc, 0x6c, 0x40, 0xd4, 0x69, 0x5d, 0xf1, 0x8b, 0x99, 0x4a, 0xa3, 0x47, 0x9d, 0x16, 0xf9, 0x10,
	0x12, 0x5d, 0x21, 0xb8, 0xf8, 0xa3, 0xce, 0x5c, 0x71, 0xde, 0xc4, 0x89, 0xd0, 0xc7, 0xd1, 0xf9,
	0xef, 0xa2, 0x80, 0x0d, 0xd6, 0x1c, 0xf0, 0xbe, 0xd4, 0x21, 0xeb, 0xbd, 0x81, 0x5a, 0xdf, 0x84,
	0x14, 0x8f, 0x13, 0x17, 0x49, 0x28, 0x76, 0xf2, 0x38, 0xbc, 0x39, 0x66, 0xd4, 0x4a, 0xff, 0xb7,
	0x5a, 0x30, 0xab, 0xd6, 0x17, 0x08, 0xae, 0xcf, 0xce, 0x6c, 0x22, 0xda, 0xfd, 0x73, 0xa2, 0xcd,
	0x7b, 0x24, 0x5c, 0x9c, 0xf4, 0xff, 0x92, 0x6e, 0x0b, 0xa4, 0x19, 0x3e, 0xc5, 0xb6, 0xfb, 0xcc,
	0xa6, 0xfc, 0xaa, 0xe2, 0x53, 0x16, 0x3b, 0x0f, 0xc5, 0x13, 0x6b, 0x31, 0xf9, 0x80, 0x79, 0x63,
	0xcd, 0xc4, 0x7a, 0x9d, 0xc2, 0xad, 0x2b, 0x9e, 0x5e, 0x04, 0x20, 0x51, 0xd6, 0x0f, 0xea, 0x4a,
	0x05, 0x47, 0xc8, 0x22, 0xa4, 0x8f, 0x6a, 0x7a, 0xb9, 0xae, 0xab, 0x86, 0x81, 0x11, 0x87, 0x55,
	0xf5, 0xb1, 0x59, 0xaa, 0xd4, 0x0e, 0xca, 0x38, 0x4a, 0xb2, 0x90, 0x2a, 0xd7, 0xf6, 0x0e, 0x8e,
	0xb4, 0x3d, 0x0d, 0xc7, 0x78, 0x5e, 0xa9, 0xae, 0x54, 0xd5, 0x0a, 0x8e, 0xaf, 0xdf, 0x85, 0xec,
	0xf9, 0x17, 0x22, 0x49, 0x42, 0xac, 0xbe, 0x5b, 0xc7, 0x11, 0x92, 0x82, 0xf8, 0x43, 0xe5, 0x50,
	0xc1, 0x68, 0x5d, 0x82, 0xc5, 0x99, 0xc7, 0x1a, 0x8f, 0xd1, 0x34, 0x03, 0x47, 0xd6, 0x7f, 0x47,
	0x80, 0x2f, 0xbe, 0xac, 0x08, 0x86, 0x6c, 0x59, 0x31, 0x15, 0xab, 0xa2, 0x2a, 0x7b, 0xca, 0x8e,
	0x8a, 0x23, 0x64, 0x19, 0x32, 0xc6, 0xa3, 0x8a, 0x66, 0x29, 0xa6, 0xa9, 0x94, 0xf6, 0x30, 0x22,
	0x4b, 0x00, 0x8f, 0x0d, 0x63, 0x82, 0xa3, 0xe4, 0x1d, 0x58, 0xae, 0xeb, 0x35, 0xb3, 0x56, 0xaa,
	0x55, 0x26, 0xc6, 0x18, 0x0f, 0xd2, 0x4b, 0xea, 0x04, 0xc7, 0x39, 0xae, 0xef, 0xd6, 0x27, 0x78,
	0x81, 0xe3, 0x72, 0xed, 0x8c, 0x24, 0x21, 0xe2, 0xb7, 0xcf, 0x8a, 0x24, 0x39, 0xae, 0x4c, 0x71,
	0x8a, 0x64, 0x20, 0x69, 0x94, 0x94, 0x6a, 0x55, 0xd5, 0x71, 0x9a, 0x5c, 0x03, 0x6c, 0xa8, 0x86,
	0xa1, 0xd5, 0xaa, 0xd6, 0xb6, 0xf6, 0x58, 0x31, 0xb5, 0x5a, 0x15, 0x03, 0x59, 0x81, 0xc5, 0xbd,
	0x6a, 0xed, 0xa8, 0x6a, 0x19, 0x25, 0x5d, 0xab, 0x9b, 0x06, 0xce, 0xf0, 0xc9, 0x95, 0x74, 0xe5,
	0xa8, 0xa2, 0xea, 0x06, 0xce, 0xae, 0xff, 0x8c, 0x26, 0x37, 0xb7, 0xb8, 0xe4, 0xc5, 0x98, 0x95,
	0x7d, 0xd5, 0xa8, 0x2b, 0x25, 0xde, 0x68, 0x16, 0x52, 0x4a, 0xbd, 0x6e, 0x99, 0x4f, 0xea, 0x2a,
	0x46, 0x7c, 0x10, 0x87, 0x9a, 0x6e, 0x1e, 0x28, 0x15, 0x6b, 0xb7, 0x66, 0x98, 0x38, 0xca, 0x67,
	0x6a, 0x68, 0xa6, 0x8a, 0x63, 0x62, 0x33, 0xaa, 0x7e, 0xa8, 0x95, 0x54, 0x1c, 0xe7, 0x69, 0x5a,
	0xd5, 0x30, 0x95, 0x6a, 0x49, 0xc5, 0x0b, 0x7c, 0x18, 0x47, 0xca, 0xb6, 0x35, 0xb1, 0x58, 0x5a,
	0x19, 0x27, 0x78, 0xbc, 0x7e, 0x50, 0x11, 0x20, 0xc9, 0xb7, 0x29, 0x80, 0xa1, 0x1e, 0xaa, 0xba,
	0x66, 0x3e, 0xc1, 0x29, 0x4e, 0x21, 0x4c, 0xa6, 0xb2, 0x83, 0xd3, 0x1c, 0x71, 0x8a, 0xfd, 0x5a,
	0x59, 0xc5, 0xc0, 0xd1, 0x56, 0xcd, 0x0c, 0x77, 0x95, 0x99, 0x20, 0xbe, 0x6d, 0x9c, 0x5d, 0xcf,
	0xc1, 0xe2, 0xcc, 0x9f, 0x16, 0x49, 0x40, 0x54, 0x7d, 0x84, 0x23, 0x5c, 0xe3, 0xaa, 0xfa, 0x08,
	0xa3, 0xad, 0x2f, 0xd1, 0x8b, 0x53, 0x39, 0xf2, 0xf2, 0x54, 0x8e, 0xbc, 0x3e, 0x95, 0xd1, 0x3f,
	0xa7, 0x32, 0xfa, 0x7c, 0x24, 0xa3, 0x6f, 0x47, 0x32, 0xfa, 0x7e, 0x24, 0xa3, 0xe7, 0x23, 0x19,
	0xfd, 0x38, 0x92, 0xd1, 0x8b, 0x91, 0x8c, 0x5e, 0x8e, 0x64, 0xf4, 0xcb, 0x48, 0x46, 0xbf, 0x8d,
	0xe4, 0xc8, 0xeb, 0x91, 0x8c, 0xbe, 0xfa, 0x55, 0x8e, 0x7c, 0xbc, 0x63, 0xbb, 0xde, 0x67, 0x76,
	0x61, 0xe8, 0xf2, 0xbf, 0xdd, 0x3e, 0x2d, 0x0c, 0xfc, 0xa2, 0x58, 0xb4, 0xdd, 0x7e, 0x77, 0xc3,
	0xeb, 0xbb, 0x43, 0xa7, 0xc5, 0xfa, 0x1b, 0x13, 0x77, 0xd1, 0x6b, 0xd8, 0x6e, 0x91, 0x3d, 0x0b,
	0xc6, 0x1f, 0x41, 0xd3, 0x4f, 0xb8, 0x46, 0x42, 0x7c, 0x03, 0xdd, 0xff, 0x37, 0x00, 0x00, 0xff,
	0xff, 0x84, 0xb7, 0x45, 0xd0, 0xde, 0x0d, 0x00, 0x00,
}
