// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ves.io/schema/user_identification/types.proto

package user_identification

import proto "github.com/gogo/protobuf/proto"
import golang_proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"
import _ "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
import _ "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
import ves_io_schema4 "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
import _ "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
import _ "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"

import strings "strings"
import reflect "reflect"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// UserIdentificationRule
//
// x-displayName: "User Identification Rule"
// A user identification rule specifies a single criterion to determine an identifier from the input fields extracted from an API request . A rule is considered
// to have a successful outcome if an identifier gets extracted.
type UserIdentificationRule struct {
	// identifier
	//
	// x-displayName: "Identifier Type"
	// x-required
	// Type of identifier to be used in rule.
	//
	// Types that are valid to be assigned to Identifier:
	//	*UserIdentificationRule_ClientIp
	//	*UserIdentificationRule_QueryParamKey
	//	*UserIdentificationRule_HttpHeaderName
	//	*UserIdentificationRule_CookieName
	//	*UserIdentificationRule_None
	//	*UserIdentificationRule_ClientAsn
	Identifier isUserIdentificationRule_Identifier `protobuf_oneof:"identifier"`
}

func (m *UserIdentificationRule) Reset()                    { *m = UserIdentificationRule{} }
func (*UserIdentificationRule) ProtoMessage()               {}
func (*UserIdentificationRule) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{0} }

type isUserIdentificationRule_Identifier interface {
	isUserIdentificationRule_Identifier()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type UserIdentificationRule_ClientIp struct {
	ClientIp *ves_io_schema4.Empty `protobuf:"bytes,2,opt,name=client_ip,json=clientIp,oneof"`
}
type UserIdentificationRule_QueryParamKey struct {
	QueryParamKey string `protobuf:"bytes,3,opt,name=query_param_key,json=queryParamKey,proto3,oneof"`
}
type UserIdentificationRule_HttpHeaderName struct {
	HttpHeaderName string `protobuf:"bytes,4,opt,name=http_header_name,json=httpHeaderName,proto3,oneof"`
}
type UserIdentificationRule_CookieName struct {
	CookieName string `protobuf:"bytes,5,opt,name=cookie_name,json=cookieName,proto3,oneof"`
}
type UserIdentificationRule_None struct {
	None *ves_io_schema4.Empty `protobuf:"bytes,6,opt,name=none,oneof"`
}
type UserIdentificationRule_ClientAsn struct {
	ClientAsn *ves_io_schema4.Empty `protobuf:"bytes,7,opt,name=client_asn,json=clientAsn,oneof"`
}

func (*UserIdentificationRule_ClientIp) isUserIdentificationRule_Identifier()       {}
func (*UserIdentificationRule_QueryParamKey) isUserIdentificationRule_Identifier()  {}
func (*UserIdentificationRule_HttpHeaderName) isUserIdentificationRule_Identifier() {}
func (*UserIdentificationRule_CookieName) isUserIdentificationRule_Identifier()     {}
func (*UserIdentificationRule_None) isUserIdentificationRule_Identifier()           {}
func (*UserIdentificationRule_ClientAsn) isUserIdentificationRule_Identifier()      {}

func (m *UserIdentificationRule) GetIdentifier() isUserIdentificationRule_Identifier {
	if m != nil {
		return m.Identifier
	}
	return nil
}

func (m *UserIdentificationRule) GetClientIp() *ves_io_schema4.Empty {
	if x, ok := m.GetIdentifier().(*UserIdentificationRule_ClientIp); ok {
		return x.ClientIp
	}
	return nil
}

func (m *UserIdentificationRule) GetQueryParamKey() string {
	if x, ok := m.GetIdentifier().(*UserIdentificationRule_QueryParamKey); ok {
		return x.QueryParamKey
	}
	return ""
}

func (m *UserIdentificationRule) GetHttpHeaderName() string {
	if x, ok := m.GetIdentifier().(*UserIdentificationRule_HttpHeaderName); ok {
		return x.HttpHeaderName
	}
	return ""
}

func (m *UserIdentificationRule) GetCookieName() string {
	if x, ok := m.GetIdentifier().(*UserIdentificationRule_CookieName); ok {
		return x.CookieName
	}
	return ""
}

func (m *UserIdentificationRule) GetNone() *ves_io_schema4.Empty {
	if x, ok := m.GetIdentifier().(*UserIdentificationRule_None); ok {
		return x.None
	}
	return nil
}

func (m *UserIdentificationRule) GetClientAsn() *ves_io_schema4.Empty {
	if x, ok := m.GetIdentifier().(*UserIdentificationRule_ClientAsn); ok {
		return x.ClientAsn
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*UserIdentificationRule) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _UserIdentificationRule_OneofMarshaler, _UserIdentificationRule_OneofUnmarshaler, _UserIdentificationRule_OneofSizer, []interface{}{
		(*UserIdentificationRule_ClientIp)(nil),
		(*UserIdentificationRule_QueryParamKey)(nil),
		(*UserIdentificationRule_HttpHeaderName)(nil),
		(*UserIdentificationRule_CookieName)(nil),
		(*UserIdentificationRule_None)(nil),
		(*UserIdentificationRule_ClientAsn)(nil),
	}
}

func _UserIdentificationRule_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*UserIdentificationRule)
	// identifier
	switch x := m.Identifier.(type) {
	case *UserIdentificationRule_ClientIp:
		_ = b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ClientIp); err != nil {
			return err
		}
	case *UserIdentificationRule_QueryParamKey:
		_ = b.EncodeVarint(3<<3 | proto.WireBytes)
		_ = b.EncodeStringBytes(x.QueryParamKey)
	case *UserIdentificationRule_HttpHeaderName:
		_ = b.EncodeVarint(4<<3 | proto.WireBytes)
		_ = b.EncodeStringBytes(x.HttpHeaderName)
	case *UserIdentificationRule_CookieName:
		_ = b.EncodeVarint(5<<3 | proto.WireBytes)
		_ = b.EncodeStringBytes(x.CookieName)
	case *UserIdentificationRule_None:
		_ = b.EncodeVarint(6<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.None); err != nil {
			return err
		}
	case *UserIdentificationRule_ClientAsn:
		_ = b.EncodeVarint(7<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ClientAsn); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("UserIdentificationRule.Identifier has unexpected type %T", x)
	}
	return nil
}

func _UserIdentificationRule_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*UserIdentificationRule)
	switch tag {
	case 2: // identifier.client_ip
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.Identifier = &UserIdentificationRule_ClientIp{msg}
		return true, err
	case 3: // identifier.query_param_key
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.Identifier = &UserIdentificationRule_QueryParamKey{x}
		return true, err
	case 4: // identifier.http_header_name
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.Identifier = &UserIdentificationRule_HttpHeaderName{x}
		return true, err
	case 5: // identifier.cookie_name
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.Identifier = &UserIdentificationRule_CookieName{x}
		return true, err
	case 6: // identifier.none
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.Identifier = &UserIdentificationRule_None{msg}
		return true, err
	case 7: // identifier.client_asn
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.Identifier = &UserIdentificationRule_ClientAsn{msg}
		return true, err
	default:
		return false, nil
	}
}

func _UserIdentificationRule_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*UserIdentificationRule)
	// identifier
	switch x := m.Identifier.(type) {
	case *UserIdentificationRule_ClientIp:
		s := proto.Size(x.ClientIp)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *UserIdentificationRule_QueryParamKey:
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.QueryParamKey)))
		n += len(x.QueryParamKey)
	case *UserIdentificationRule_HttpHeaderName:
		n += proto.SizeVarint(4<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.HttpHeaderName)))
		n += len(x.HttpHeaderName)
	case *UserIdentificationRule_CookieName:
		n += proto.SizeVarint(5<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.CookieName)))
		n += len(x.CookieName)
	case *UserIdentificationRule_None:
		s := proto.Size(x.None)
		n += proto.SizeVarint(6<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *UserIdentificationRule_ClientAsn:
		s := proto.Size(x.ClientAsn)
		n += proto.SizeVarint(7<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// GlobalSpecType
//
// x-displayName: "Specification"
// Shape of user_identification in the storage backend.
type GlobalSpecType struct {
	// rules
	//
	// x-displayName: "User Identification Rules"
	// x-required
	// An ordered list of rules that are evaluated sequentially against the input fields extracted from an API request in order to determine a user identifier.
	// Evaluation of the rules is terminated once a user identifier has been extracted.
	Rules []*UserIdentificationRule `protobuf:"bytes,1,rep,name=rules" json:"rules,omitempty"`
}

func (m *GlobalSpecType) Reset()                    { *m = GlobalSpecType{} }
func (*GlobalSpecType) ProtoMessage()               {}
func (*GlobalSpecType) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{1} }

func (m *GlobalSpecType) GetRules() []*UserIdentificationRule {
	if m != nil {
		return m.Rules
	}
	return nil
}

// Create user identification
//
// x-displayName: "Create User Identification"
// Create user_identification creates a new object in the storage backend for metadata.namespace.
type CreateSpecType struct {
	Rules []*UserIdentificationRule `protobuf:"bytes,1,rep,name=rules" json:"rules,omitempty"`
}

func (m *CreateSpecType) Reset()                    { *m = CreateSpecType{} }
func (*CreateSpecType) ProtoMessage()               {}
func (*CreateSpecType) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{2} }

func (m *CreateSpecType) GetRules() []*UserIdentificationRule {
	if m != nil {
		return m.Rules
	}
	return nil
}

// Replace user identification
//
// x-displayName: "Replace User Identification"
// Replace user_identification replaces an existing object in the storage backend for metadata.namespace.
type ReplaceSpecType struct {
	Rules []*UserIdentificationRule `protobuf:"bytes,1,rep,name=rules" json:"rules,omitempty"`
}

func (m *ReplaceSpecType) Reset()                    { *m = ReplaceSpecType{} }
func (*ReplaceSpecType) ProtoMessage()               {}
func (*ReplaceSpecType) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{3} }

func (m *ReplaceSpecType) GetRules() []*UserIdentificationRule {
	if m != nil {
		return m.Rules
	}
	return nil
}

// Get user identification
//
// x-displayName: "Get User Identification"
// Get user_identification reads a given object from storage backend for metadata.namespace.
type GetSpecType struct {
	Rules []*UserIdentificationRule `protobuf:"bytes,1,rep,name=rules" json:"rules,omitempty"`
}

func (m *GetSpecType) Reset()                    { *m = GetSpecType{} }
func (*GetSpecType) ProtoMessage()               {}
func (*GetSpecType) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{4} }

func (m *GetSpecType) GetRules() []*UserIdentificationRule {
	if m != nil {
		return m.Rules
	}
	return nil
}

func init() {
	proto.RegisterType((*UserIdentificationRule)(nil), "ves.io.schema.user_identification.UserIdentificationRule")
	golang_proto.RegisterType((*UserIdentificationRule)(nil), "ves.io.schema.user_identification.UserIdentificationRule")
	proto.RegisterType((*GlobalSpecType)(nil), "ves.io.schema.user_identification.GlobalSpecType")
	golang_proto.RegisterType((*GlobalSpecType)(nil), "ves.io.schema.user_identification.GlobalSpecType")
	proto.RegisterType((*CreateSpecType)(nil), "ves.io.schema.user_identification.CreateSpecType")
	golang_proto.RegisterType((*CreateSpecType)(nil), "ves.io.schema.user_identification.CreateSpecType")
	proto.RegisterType((*ReplaceSpecType)(nil), "ves.io.schema.user_identification.ReplaceSpecType")
	golang_proto.RegisterType((*ReplaceSpecType)(nil), "ves.io.schema.user_identification.ReplaceSpecType")
	proto.RegisterType((*GetSpecType)(nil), "ves.io.schema.user_identification.GetSpecType")
	golang_proto.RegisterType((*GetSpecType)(nil), "ves.io.schema.user_identification.GetSpecType")
}
func (this *UserIdentificationRule) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UserIdentificationRule)
	if !ok {
		that2, ok := that.(UserIdentificationRule)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.Identifier == nil {
		if this.Identifier != nil {
			return false
		}
	} else if this.Identifier == nil {
		return false
	} else if !this.Identifier.Equal(that1.Identifier) {
		return false
	}
	return true
}
func (this *UserIdentificationRule_ClientIp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UserIdentificationRule_ClientIp)
	if !ok {
		that2, ok := that.(UserIdentificationRule_ClientIp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ClientIp.Equal(that1.ClientIp) {
		return false
	}
	return true
}
func (this *UserIdentificationRule_QueryParamKey) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UserIdentificationRule_QueryParamKey)
	if !ok {
		that2, ok := that.(UserIdentificationRule_QueryParamKey)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.QueryParamKey != that1.QueryParamKey {
		return false
	}
	return true
}
func (this *UserIdentificationRule_HttpHeaderName) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UserIdentificationRule_HttpHeaderName)
	if !ok {
		that2, ok := that.(UserIdentificationRule_HttpHeaderName)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.HttpHeaderName != that1.HttpHeaderName {
		return false
	}
	return true
}
func (this *UserIdentificationRule_CookieName) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UserIdentificationRule_CookieName)
	if !ok {
		that2, ok := that.(UserIdentificationRule_CookieName)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.CookieName != that1.CookieName {
		return false
	}
	return true
}
func (this *UserIdentificationRule_None) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UserIdentificationRule_None)
	if !ok {
		that2, ok := that.(UserIdentificationRule_None)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.None.Equal(that1.None) {
		return false
	}
	return true
}
func (this *UserIdentificationRule_ClientAsn) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UserIdentificationRule_ClientAsn)
	if !ok {
		that2, ok := that.(UserIdentificationRule_ClientAsn)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ClientAsn.Equal(that1.ClientAsn) {
		return false
	}
	return true
}
func (this *GlobalSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType)
	if !ok {
		that2, ok := that.(GlobalSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Rules) != len(that1.Rules) {
		return false
	}
	for i := range this.Rules {
		if !this.Rules[i].Equal(that1.Rules[i]) {
			return false
		}
	}
	return true
}
func (this *CreateSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType)
	if !ok {
		that2, ok := that.(CreateSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Rules) != len(that1.Rules) {
		return false
	}
	for i := range this.Rules {
		if !this.Rules[i].Equal(that1.Rules[i]) {
			return false
		}
	}
	return true
}
func (this *ReplaceSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType)
	if !ok {
		that2, ok := that.(ReplaceSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Rules) != len(that1.Rules) {
		return false
	}
	for i := range this.Rules {
		if !this.Rules[i].Equal(that1.Rules[i]) {
			return false
		}
	}
	return true
}
func (this *GetSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType)
	if !ok {
		that2, ok := that.(GetSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Rules) != len(that1.Rules) {
		return false
	}
	for i := range this.Rules {
		if !this.Rules[i].Equal(that1.Rules[i]) {
			return false
		}
	}
	return true
}
func (this *UserIdentificationRule) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&user_identification.UserIdentificationRule{")
	if this.Identifier != nil {
		s = append(s, "Identifier: "+fmt.Sprintf("%#v", this.Identifier)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UserIdentificationRule_ClientIp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&user_identification.UserIdentificationRule_ClientIp{` +
		`ClientIp:` + fmt.Sprintf("%#v", this.ClientIp) + `}`}, ", ")
	return s
}
func (this *UserIdentificationRule_QueryParamKey) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&user_identification.UserIdentificationRule_QueryParamKey{` +
		`QueryParamKey:` + fmt.Sprintf("%#v", this.QueryParamKey) + `}`}, ", ")
	return s
}
func (this *UserIdentificationRule_HttpHeaderName) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&user_identification.UserIdentificationRule_HttpHeaderName{` +
		`HttpHeaderName:` + fmt.Sprintf("%#v", this.HttpHeaderName) + `}`}, ", ")
	return s
}
func (this *UserIdentificationRule_CookieName) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&user_identification.UserIdentificationRule_CookieName{` +
		`CookieName:` + fmt.Sprintf("%#v", this.CookieName) + `}`}, ", ")
	return s
}
func (this *UserIdentificationRule_None) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&user_identification.UserIdentificationRule_None{` +
		`None:` + fmt.Sprintf("%#v", this.None) + `}`}, ", ")
	return s
}
func (this *UserIdentificationRule_ClientAsn) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&user_identification.UserIdentificationRule_ClientAsn{` +
		`ClientAsn:` + fmt.Sprintf("%#v", this.ClientAsn) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&user_identification.GlobalSpecType{")
	if this.Rules != nil {
		s = append(s, "Rules: "+fmt.Sprintf("%#v", this.Rules)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CreateSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&user_identification.CreateSpecType{")
	if this.Rules != nil {
		s = append(s, "Rules: "+fmt.Sprintf("%#v", this.Rules)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ReplaceSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&user_identification.ReplaceSpecType{")
	if this.Rules != nil {
		s = append(s, "Rules: "+fmt.Sprintf("%#v", this.Rules)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&user_identification.GetSpecType{")
	if this.Rules != nil {
		s = append(s, "Rules: "+fmt.Sprintf("%#v", this.Rules)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringTypes(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *UserIdentificationRule) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserIdentificationRule) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Identifier != nil {
		nn1, err := m.Identifier.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn1
	}
	return i, nil
}

func (m *UserIdentificationRule_ClientIp) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.ClientIp != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.ClientIp.Size()))
		n2, err := m.ClientIp.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	return i, nil
}
func (m *UserIdentificationRule_QueryParamKey) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x1a
	i++
	i = encodeVarintTypes(dAtA, i, uint64(len(m.QueryParamKey)))
	i += copy(dAtA[i:], m.QueryParamKey)
	return i, nil
}
func (m *UserIdentificationRule_HttpHeaderName) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x22
	i++
	i = encodeVarintTypes(dAtA, i, uint64(len(m.HttpHeaderName)))
	i += copy(dAtA[i:], m.HttpHeaderName)
	return i, nil
}
func (m *UserIdentificationRule_CookieName) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x2a
	i++
	i = encodeVarintTypes(dAtA, i, uint64(len(m.CookieName)))
	i += copy(dAtA[i:], m.CookieName)
	return i, nil
}
func (m *UserIdentificationRule_None) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.None != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.None.Size()))
		n3, err := m.None.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	return i, nil
}
func (m *UserIdentificationRule_ClientAsn) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.ClientAsn != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.ClientAsn.Size()))
		n4, err := m.ClientAsn.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	return i, nil
}
func (m *GlobalSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GlobalSpecType) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Rules) > 0 {
		for _, msg := range m.Rules {
			dAtA[i] = 0xa
			i++
			i = encodeVarintTypes(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *CreateSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateSpecType) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Rules) > 0 {
		for _, msg := range m.Rules {
			dAtA[i] = 0xa
			i++
			i = encodeVarintTypes(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *ReplaceSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplaceSpecType) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Rules) > 0 {
		for _, msg := range m.Rules {
			dAtA[i] = 0xa
			i++
			i = encodeVarintTypes(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *GetSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetSpecType) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Rules) > 0 {
		for _, msg := range m.Rules {
			dAtA[i] = 0xa
			i++
			i = encodeVarintTypes(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func encodeVarintTypes(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *UserIdentificationRule) Size() (n int) {
	var l int
	_ = l
	if m.Identifier != nil {
		n += m.Identifier.Size()
	}
	return n
}

func (m *UserIdentificationRule_ClientIp) Size() (n int) {
	var l int
	_ = l
	if m.ClientIp != nil {
		l = m.ClientIp.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *UserIdentificationRule_QueryParamKey) Size() (n int) {
	var l int
	_ = l
	l = len(m.QueryParamKey)
	n += 1 + l + sovTypes(uint64(l))
	return n
}
func (m *UserIdentificationRule_HttpHeaderName) Size() (n int) {
	var l int
	_ = l
	l = len(m.HttpHeaderName)
	n += 1 + l + sovTypes(uint64(l))
	return n
}
func (m *UserIdentificationRule_CookieName) Size() (n int) {
	var l int
	_ = l
	l = len(m.CookieName)
	n += 1 + l + sovTypes(uint64(l))
	return n
}
func (m *UserIdentificationRule_None) Size() (n int) {
	var l int
	_ = l
	if m.None != nil {
		l = m.None.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *UserIdentificationRule_ClientAsn) Size() (n int) {
	var l int
	_ = l
	if m.ClientAsn != nil {
		l = m.ClientAsn.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType) Size() (n int) {
	var l int
	_ = l
	if len(m.Rules) > 0 {
		for _, e := range m.Rules {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *CreateSpecType) Size() (n int) {
	var l int
	_ = l
	if len(m.Rules) > 0 {
		for _, e := range m.Rules {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *ReplaceSpecType) Size() (n int) {
	var l int
	_ = l
	if len(m.Rules) > 0 {
		for _, e := range m.Rules {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *GetSpecType) Size() (n int) {
	var l int
	_ = l
	if len(m.Rules) > 0 {
		for _, e := range m.Rules {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func sovTypes(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozTypes(x uint64) (n int) {
	return sovTypes(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *UserIdentificationRule) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UserIdentificationRule{`,
		`Identifier:` + fmt.Sprintf("%v", this.Identifier) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UserIdentificationRule_ClientIp) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UserIdentificationRule_ClientIp{`,
		`ClientIp:` + strings.Replace(fmt.Sprintf("%v", this.ClientIp), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UserIdentificationRule_QueryParamKey) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UserIdentificationRule_QueryParamKey{`,
		`QueryParamKey:` + fmt.Sprintf("%v", this.QueryParamKey) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UserIdentificationRule_HttpHeaderName) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UserIdentificationRule_HttpHeaderName{`,
		`HttpHeaderName:` + fmt.Sprintf("%v", this.HttpHeaderName) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UserIdentificationRule_CookieName) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UserIdentificationRule_CookieName{`,
		`CookieName:` + fmt.Sprintf("%v", this.CookieName) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UserIdentificationRule_None) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UserIdentificationRule_None{`,
		`None:` + strings.Replace(fmt.Sprintf("%v", this.None), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UserIdentificationRule_ClientAsn) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UserIdentificationRule_ClientAsn{`,
		`ClientAsn:` + strings.Replace(fmt.Sprintf("%v", this.ClientAsn), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType{`,
		`Rules:` + strings.Replace(fmt.Sprintf("%v", this.Rules), "UserIdentificationRule", "UserIdentificationRule", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType{`,
		`Rules:` + strings.Replace(fmt.Sprintf("%v", this.Rules), "UserIdentificationRule", "UserIdentificationRule", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType{`,
		`Rules:` + strings.Replace(fmt.Sprintf("%v", this.Rules), "UserIdentificationRule", "UserIdentificationRule", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType{`,
		`Rules:` + strings.Replace(fmt.Sprintf("%v", this.Rules), "UserIdentificationRule", "UserIdentificationRule", 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringTypes(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *UserIdentificationRule) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserIdentificationRule: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserIdentificationRule: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientIp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Identifier = &UserIdentificationRule_ClientIp{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QueryParamKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Identifier = &UserIdentificationRule_QueryParamKey{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HttpHeaderName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Identifier = &UserIdentificationRule_HttpHeaderName{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CookieName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Identifier = &UserIdentificationRule_CookieName{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field None", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Identifier = &UserIdentificationRule_None{v}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientAsn", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Identifier = &UserIdentificationRule_ClientAsn{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GlobalSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GlobalSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GlobalSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rules", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Rules = append(m.Rules, &UserIdentificationRule{})
			if err := m.Rules[len(m.Rules)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rules", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Rules = append(m.Rules, &UserIdentificationRule{})
			if err := m.Rules[len(m.Rules)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplaceSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplaceSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplaceSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rules", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Rules = append(m.Rules, &UserIdentificationRule{})
			if err := m.Rules[len(m.Rules)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rules", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Rules = append(m.Rules, &UserIdentificationRule{})
			if err := m.Rules[len(m.Rules)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTypes(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthTypes
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipTypes(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthTypes = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTypes   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("ves.io/schema/user_identification/types.proto", fileDescriptorTypes) }
func init() {
	golang_proto.RegisterFile("ves.io/schema/user_identification/types.proto", fileDescriptorTypes)
}

var fileDescriptorTypes = []byte{
	// 607 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x54, 0x41, 0x6b, 0x13, 0x5d,
	0x14, 0xcd, 0x4d, 0xd2, 0x7e, 0xed, 0x0b, 0x5f, 0xdb, 0x6f, 0x3e, 0xb1, 0x63, 0xd4, 0x47, 0x0c,
	0x08, 0x59, 0x24, 0x33, 0xd2, 0xda, 0x8a, 0x82, 0x82, 0x11, 0x69, 0xab, 0xa0, 0x12, 0x15, 0xc1,
	0xcd, 0xf0, 0x32, 0xb9, 0x4d, 0x86, 0xce, 0xcc, 0x7b, 0x7d, 0xf3, 0x26, 0x9a, 0x5d, 0xfd, 0x01,
	0x82, 0xf8, 0x1f, 0x04, 0x7f, 0x83, 0xd9, 0x64, 0x59, 0x5c, 0x75, 0xd9, 0xa5, 0x9d, 0x6e, 0x74,
	0xd7, 0x9f, 0x20, 0x99, 0x99, 0x88, 0x53, 0xda, 0xba, 0x91, 0xee, 0xee, 0x70, 0xce, 0xb9, 0xf7,
	0xdc, 0x33, 0x8f, 0x4b, 0x1a, 0x7d, 0x0c, 0x0c, 0x87, 0x9b, 0x81, 0xdd, 0x43, 0x8f, 0x99, 0x61,
	0x80, 0xd2, 0x72, 0x3a, 0xe8, 0x2b, 0x67, 0xd3, 0xb1, 0x99, 0x72, 0xb8, 0x6f, 0xaa, 0x81, 0xc0,
	0xc0, 0x10, 0x92, 0x2b, 0xae, 0x5d, 0x4b, 0xe8, 0x46, 0x42, 0x37, 0x4e, 0xa0, 0x97, 0x1b, 0x5d,
	0x47, 0xf5, 0xc2, 0xb6, 0x61, 0x73, 0xcf, 0xec, 0xf2, 0x2e, 0x37, 0x63, 0x65, 0x3b, 0xdc, 0x8c,
	0xbf, 0xe2, 0x8f, 0xb8, 0x4a, 0x3a, 0x96, 0x17, 0xb3, 0x06, 0x7c, 0x54, 0x29, 0x70, 0x39, 0x0b,
	0x70, 0x31, 0xee, 0x9e, 0xfa, 0x28, 0x5f, 0xca, 0x82, 0xbf, 0x59, 0x2c, 0x5f, 0xc9, 0x42, 0x7d,
	0xe6, 0x3a, 0x1d, 0xa6, 0x30, 0x45, 0x2b, 0xc7, 0x50, 0x07, 0xdf, 0x58, 0x99, 0xd6, 0xd5, 0x4f,
	0x05, 0x72, 0xf1, 0x65, 0x80, 0x72, 0x23, 0xb3, 0x56, 0x2b, 0x74, 0x51, 0x5b, 0x26, 0xb3, 0xb6,
	0xeb, 0xa0, 0xaf, 0x2c, 0x47, 0xe8, 0xf9, 0x0a, 0xd4, 0x4a, 0x4b, 0x17, 0x8c, 0x6c, 0x22, 0x0f,
	0x3d, 0xa1, 0x06, 0xeb, 0xb9, 0xd6, 0x4c, 0x42, 0xdc, 0x10, 0xda, 0x5d, 0x32, 0xbf, 0x1d, 0xa2,
	0x1c, 0x58, 0x82, 0x49, 0xe6, 0x59, 0x5b, 0x38, 0xd0, 0x0b, 0x15, 0xa8, 0xcd, 0x36, 0xff, 0xff,
	0xf2, 0x63, 0x54, 0x98, 0x92, 0x85, 0xda, 0x4e, 0x7e, 0x5c, 0x15, 0x65, 0xbe, 0x02, 0xeb, 0xb9,
	0xd6, 0xbf, 0x31, 0xfb, 0xd9, 0x98, 0xfc, 0x18, 0x07, 0xda, 0x06, 0x59, 0xe8, 0x29, 0x25, 0xac,
	0x1e, 0xb2, 0x0e, 0x4a, 0xcb, 0x67, 0x1e, 0xea, 0xc5, 0x58, 0x7f, 0x35, 0xd5, 0xef, 0x02, 0x9c,
	0xdc, 0x69, 0x6e, 0x2c, 0x5c, 0x8f, 0x75, 0x4f, 0x98, 0x87, 0xda, 0x2a, 0x29, 0xd9, 0x9c, 0x6f,
	0x39, 0x98, 0x74, 0x99, 0x3a, 0xcb, 0x05, 0x49, 0x98, 0xb1, 0xee, 0x06, 0x29, 0xfa, 0xdc, 0x47,
	0x7d, 0xfa, 0xf4, 0x8d, 0x9b, 0xc5, 0xd1, 0x10, 0xc6, 0xba, 0x98, 0xa9, 0xad, 0x10, 0x92, 0x06,
	0xc5, 0x02, 0x5f, 0xff, 0xe7, 0xcc, 0xa4, 0xd2, 0x48, 0xef, 0x07, 0x7e, 0xf3, 0x3a, 0x21, 0x93,
	0xc7, 0x84, 0x52, 0x5b, 0x1c, 0x0d, 0x21, 0xbf, 0x37, 0x04, 0x88, 0x86, 0x50, 0x5a, 0xaa, 0xaf,
	0xd4, 0x6f, 0xd6, 0x97, 0xeb, 0xb7, 0xea, 0xab, 0x8f, 0x8a, 0x33, 0xb0, 0x90, 0xaf, 0xbe, 0x03,
	0x32, 0xb7, 0xe6, 0xf2, 0x36, 0x73, 0x9f, 0x0b, 0xb4, 0x5f, 0x0c, 0x04, 0x6a, 0x9c, 0x4c, 0xc9,
	0xd0, 0xc5, 0x40, 0x87, 0x4a, 0xa1, 0x56, 0x5a, 0xba, 0x6d, 0xfc, 0xf1, 0xb5, 0x1a, 0x27, 0xff,
	0xe9, 0x26, 0x8d, 0x53, 0xf9, 0x08, 0xf9, 0x85, 0xe2, 0xa4, 0x9a, 0x81, 0x49, 0xa5, 0x43, 0x2b,
	0x99, 0x53, 0x55, 0x64, 0xee, 0x81, 0x44, 0xa6, 0xf0, 0x97, 0x85, 0xa7, 0x7f, 0xcb, 0x42, 0x3a,
	0xe2, 0xce, 0x7f, 0x5f, 0xef, 0x1d, 0x5b, 0xb3, 0x1a, 0x92, 0xf9, 0x16, 0x0a, 0x97, 0xd9, 0xe7,
	0x3b, 0x76, 0x9b, 0x94, 0xd6, 0x50, 0x9d, 0xe7, 0xc8, 0xe6, 0x7b, 0xd8, 0x3b, 0xa0, 0xb9, 0xfd,
	0x03, 0x9a, 0x3b, 0x3a, 0xa0, 0xb0, 0x13, 0x51, 0xf8, 0x1c, 0x51, 0xd8, 0x8d, 0x28, 0xec, 0x45,
	0x14, 0xf6, 0x23, 0x0a, 0xdf, 0x22, 0x0a, 0xdf, 0x23, 0x9a, 0x3b, 0x8a, 0x28, 0x7c, 0x38, 0xa4,
	0xb9, 0xd1, 0x21, 0x85, 0xd7, 0xaf, 0xba, 0x5c, 0x6c, 0x75, 0x8d, 0x3e, 0x77, 0x15, 0x4a, 0x39,
	0xf6, 0x62, 0xc6, 0xc5, 0x26, 0x97, 0x5e, 0x43, 0x48, 0xde, 0x77, 0x3a, 0x28, 0x1b, 0x13, 0xd8,
	0x14, 0xed, 0x2e, 0x37, 0xf1, 0xad, 0x4a, 0x6f, 0xc2, 0xe9, 0xa7, 0xb0, 0x3d, 0x1d, 0x9f, 0x88,
	0xe5, 0x9f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x08, 0x5a, 0x94, 0x48, 0x36, 0x05, 0x00, 0x00,
}
