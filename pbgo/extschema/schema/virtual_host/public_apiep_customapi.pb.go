// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ves.io/schema/virtual_host/public_apiep_customapi.proto

package virtual_host

import (
	proto "github.com/gogo/protobuf/proto"
	golang_proto "github.com/golang/protobuf/proto"

	fmt "fmt"

	math "math"

	_ "github.com/gogo/protobuf/gogoproto"

	_ "github.com/gogo/googleapis/google/api"

	ves_io_schema_app_type "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/app_type"

	_ "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"

	_ "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"

	strings "strings"

	reflect "reflect"

	context "golang.org/x/net/context"

	grpc "google.golang.org/grpc"

	io "io"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// API endpoints GET request Per Virtual Host
//
// x-displayName: "API Endpoints Request per Virtual Host"
// Request shape for GET API endpoints API
type APIEndpointsReq struct {
	// Namespace
	//
	// x-displayName: "Namespace"
	// x-example: "blogging-app"
	// Namespace of the virtual host for current request
	Namespace string `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// Virtual Host Name
	//
	// x-displayName: "Virtual Host Name"
	// x-example: "blogging-app-vhost"
	// Virtual Host name for current request
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Api Endpoint Info Request
	//
	// x-displayName: "Api Endpoint Info Request"
	// List of additional things that needs to be sent as part of the request
	ApiEndpointInfoRequest []ves_io_schema_app_type.ApiEndpointInfoRequest `protobuf:"varint,3,rep,packed,name=api_endpoint_info_request,json=apiEndpointInfoRequest,enum=ves.io.schema.app_type.ApiEndpointInfoRequest" json:"api_endpoint_info_request,omitempty"`
}

func (m *APIEndpointsReq) Reset()      { *m = APIEndpointsReq{} }
func (*APIEndpointsReq) ProtoMessage() {}
func (*APIEndpointsReq) Descriptor() ([]byte, []int) {
	return fileDescriptorPublicApiepCustomapi, []int{0}
}

func (m *APIEndpointsReq) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *APIEndpointsReq) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *APIEndpointsReq) GetApiEndpointInfoRequest() []ves_io_schema_app_type.ApiEndpointInfoRequest {
	if m != nil {
		return m.ApiEndpointInfoRequest
	}
	return nil
}

// API endpoint PDF request Per Virtual Host
//
// x-displayName: "PDF Request per Virtual Host"
// shape of request to get PDF for a given API endpoint Per Virtual Host
type APIEndpointPDFReq struct {
	// Namespace
	//
	// x-displayName: "Namespace"
	// x-example: "blogging-app"
	// Namespace of the App type for current request
	Namespace string `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// Virtual Host
	//
	// x-displayName: "Virtual Host Name"
	// x-example: "blogging-app-vhost"
	// Virtual Host Name for current request
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Discovered API URL
	//
	// x-displayName: "API URL"
	// x-example: "api/v1/user_id/DYN/vehicle_id/DYN"
	// API endpoint for which PDFs are requested.
	CollapsedUrl string `protobuf:"bytes,3,opt,name=collapsed_url,json=collapsedUrl,proto3" json:"collapsed_url,omitempty"`
	// Method of current API URL
	//
	// x-displayName: "Method"
	// x-example: "GET"
	// method of API endpoint for which PDFs are requested.
	Method string `protobuf:"bytes,4,opt,name=method,proto3" json:"method,omitempty"`
}

func (m *APIEndpointPDFReq) Reset()      { *m = APIEndpointPDFReq{} }
func (*APIEndpointPDFReq) ProtoMessage() {}
func (*APIEndpointPDFReq) Descriptor() ([]byte, []int) {
	return fileDescriptorPublicApiepCustomapi, []int{1}
}

func (m *APIEndpointPDFReq) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *APIEndpointPDFReq) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *APIEndpointPDFReq) GetCollapsedUrl() string {
	if m != nil {
		return m.CollapsedUrl
	}
	return ""
}

func (m *APIEndpointPDFReq) GetMethod() string {
	if m != nil {
		return m.Method
	}
	return ""
}

// API endpoint Learnt Schema request Per Virtual Host
//
// x-displayName: "API endpoint Learnt Schema request per Virtual Host"
// shape of request to get API endpoint Learnt Schema request for a given API endpoint Per Virtual Host
type APIEndpointLearntSchemaReq struct {
	// Namespace
	//
	// x-displayName: "Namespace"
	// x-example: "blogging-app"
	// Namespace of the App type for current request
	Namespace string `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// Virtual Host
	//
	// x-displayName: "Virtual Host Name"
	// x-example: "blogging-app-vhost"
	// Virtual Host Name for current request
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Discovered API URL
	//
	// x-displayName: "API URL"
	// x-example: "api/v1/user_id/DYN/vehicle_id/DYN"
	// API endpoint for which PDFs are requested.
	CollapsedUrl string `protobuf:"bytes,3,opt,name=collapsed_url,json=collapsedUrl,proto3" json:"collapsed_url,omitempty"`
	// Method of current API URL
	//
	// x-displayName: "Method"
	// x-example: "GET"
	// method of API endpoint for which PDFs are requested.
	Method string `protobuf:"bytes,4,opt,name=method,proto3" json:"method,omitempty"`
}

func (m *APIEndpointLearntSchemaReq) Reset()      { *m = APIEndpointLearntSchemaReq{} }
func (*APIEndpointLearntSchemaReq) ProtoMessage() {}
func (*APIEndpointLearntSchemaReq) Descriptor() ([]byte, []int) {
	return fileDescriptorPublicApiepCustomapi, []int{2}
}

func (m *APIEndpointLearntSchemaReq) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *APIEndpointLearntSchemaReq) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *APIEndpointLearntSchemaReq) GetCollapsedUrl() string {
	if m != nil {
		return m.CollapsedUrl
	}
	return ""
}

func (m *APIEndpointLearntSchemaReq) GetMethod() string {
	if m != nil {
		return m.Method
	}
	return ""
}

// API endpoints GET response
//
// x-displayName: "API Endpoints Response"
// Response shape for GET API endpoints API. It is list of API endpoints discovered
type APIEndpointsRsp struct {
	// API endpoints list
	//
	// x-displayName: "API Endpoints"
	// list of API endpoints discovered
	ApiepList []*ves_io_schema_app_type.APIEPInfo `protobuf:"bytes,1,rep,name=apiep_list,json=apiepList" json:"apiep_list,omitempty"`
}

func (m *APIEndpointsRsp) Reset()      { *m = APIEndpointsRsp{} }
func (*APIEndpointsRsp) ProtoMessage() {}
func (*APIEndpointsRsp) Descriptor() ([]byte, []int) {
	return fileDescriptorPublicApiepCustomapi, []int{3}
}

func (m *APIEndpointsRsp) GetApiepList() []*ves_io_schema_app_type.APIEPInfo {
	if m != nil {
		return m.ApiepList
	}
	return nil
}

// API endpoint PDF response
//
// x-displayName: "PDF Response"
// shape of response to get PDF for a given API endpoint.
type APIEndpointPDFRsp struct {
	// PDF data
	//
	// x-displayName: "PDF Data"
	// PDF data for request API endpoint.
	PdfInfo *ves_io_schema_app_type.APIEPPDFInfo `protobuf:"bytes,1,opt,name=pdf_info,json=pdfInfo" json:"pdf_info,omitempty"`
}

func (m *APIEndpointPDFRsp) Reset()      { *m = APIEndpointPDFRsp{} }
func (*APIEndpointPDFRsp) ProtoMessage() {}
func (*APIEndpointPDFRsp) Descriptor() ([]byte, []int) {
	return fileDescriptorPublicApiepCustomapi, []int{4}
}

func (m *APIEndpointPDFRsp) GetPdfInfo() *ves_io_schema_app_type.APIEPPDFInfo {
	if m != nil {
		return m.PdfInfo
	}
	return nil
}

// API endpoint Req Body Schema response
//
// x-displayName: "Req Body Schema Response"
// shape of response to get req body schema for a given API endpoint.
type APIEndpointLearntSchemaRsp struct {
	// Learnt Schema
	//
	// x-displayName: "Learnt Schema"
	// x-example: "value"
	// Learnt Schema for request API endpoint.
	LearntSchema string `protobuf:"bytes,1,opt,name=learnt_schema,json=learntSchema,proto3" json:"learnt_schema,omitempty"`
}

func (m *APIEndpointLearntSchemaRsp) Reset()      { *m = APIEndpointLearntSchemaRsp{} }
func (*APIEndpointLearntSchemaRsp) ProtoMessage() {}
func (*APIEndpointLearntSchemaRsp) Descriptor() ([]byte, []int) {
	return fileDescriptorPublicApiepCustomapi, []int{5}
}

func (m *APIEndpointLearntSchemaRsp) GetLearntSchema() string {
	if m != nil {
		return m.LearntSchema
	}
	return ""
}

func init() {
	proto.RegisterType((*APIEndpointsReq)(nil), "ves.io.schema.virtual_host.APIEndpointsReq")
	golang_proto.RegisterType((*APIEndpointsReq)(nil), "ves.io.schema.virtual_host.APIEndpointsReq")
	proto.RegisterType((*APIEndpointPDFReq)(nil), "ves.io.schema.virtual_host.APIEndpointPDFReq")
	golang_proto.RegisterType((*APIEndpointPDFReq)(nil), "ves.io.schema.virtual_host.APIEndpointPDFReq")
	proto.RegisterType((*APIEndpointLearntSchemaReq)(nil), "ves.io.schema.virtual_host.APIEndpointLearntSchemaReq")
	golang_proto.RegisterType((*APIEndpointLearntSchemaReq)(nil), "ves.io.schema.virtual_host.APIEndpointLearntSchemaReq")
	proto.RegisterType((*APIEndpointsRsp)(nil), "ves.io.schema.virtual_host.APIEndpointsRsp")
	golang_proto.RegisterType((*APIEndpointsRsp)(nil), "ves.io.schema.virtual_host.APIEndpointsRsp")
	proto.RegisterType((*APIEndpointPDFRsp)(nil), "ves.io.schema.virtual_host.APIEndpointPDFRsp")
	golang_proto.RegisterType((*APIEndpointPDFRsp)(nil), "ves.io.schema.virtual_host.APIEndpointPDFRsp")
	proto.RegisterType((*APIEndpointLearntSchemaRsp)(nil), "ves.io.schema.virtual_host.APIEndpointLearntSchemaRsp")
	golang_proto.RegisterType((*APIEndpointLearntSchemaRsp)(nil), "ves.io.schema.virtual_host.APIEndpointLearntSchemaRsp")
}
func (this *APIEndpointsReq) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*APIEndpointsReq)
	if !ok {
		that2, ok := that.(APIEndpointsReq)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Namespace != that1.Namespace {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if len(this.ApiEndpointInfoRequest) != len(that1.ApiEndpointInfoRequest) {
		return false
	}
	for i := range this.ApiEndpointInfoRequest {
		if this.ApiEndpointInfoRequest[i] != that1.ApiEndpointInfoRequest[i] {
			return false
		}
	}
	return true
}
func (this *APIEndpointPDFReq) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*APIEndpointPDFReq)
	if !ok {
		that2, ok := that.(APIEndpointPDFReq)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Namespace != that1.Namespace {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.CollapsedUrl != that1.CollapsedUrl {
		return false
	}
	if this.Method != that1.Method {
		return false
	}
	return true
}
func (this *APIEndpointLearntSchemaReq) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*APIEndpointLearntSchemaReq)
	if !ok {
		that2, ok := that.(APIEndpointLearntSchemaReq)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Namespace != that1.Namespace {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.CollapsedUrl != that1.CollapsedUrl {
		return false
	}
	if this.Method != that1.Method {
		return false
	}
	return true
}
func (this *APIEndpointsRsp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*APIEndpointsRsp)
	if !ok {
		that2, ok := that.(APIEndpointsRsp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.ApiepList) != len(that1.ApiepList) {
		return false
	}
	for i := range this.ApiepList {
		if !this.ApiepList[i].Equal(that1.ApiepList[i]) {
			return false
		}
	}
	return true
}
func (this *APIEndpointPDFRsp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*APIEndpointPDFRsp)
	if !ok {
		that2, ok := that.(APIEndpointPDFRsp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.PdfInfo.Equal(that1.PdfInfo) {
		return false
	}
	return true
}
func (this *APIEndpointLearntSchemaRsp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*APIEndpointLearntSchemaRsp)
	if !ok {
		that2, ok := that.(APIEndpointLearntSchemaRsp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.LearntSchema != that1.LearntSchema {
		return false
	}
	return true
}
func (this *APIEndpointsReq) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&virtual_host.APIEndpointsReq{")
	s = append(s, "Namespace: "+fmt.Sprintf("%#v", this.Namespace)+",\n")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "ApiEndpointInfoRequest: "+fmt.Sprintf("%#v", this.ApiEndpointInfoRequest)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *APIEndpointPDFReq) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&virtual_host.APIEndpointPDFReq{")
	s = append(s, "Namespace: "+fmt.Sprintf("%#v", this.Namespace)+",\n")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "CollapsedUrl: "+fmt.Sprintf("%#v", this.CollapsedUrl)+",\n")
	s = append(s, "Method: "+fmt.Sprintf("%#v", this.Method)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *APIEndpointLearntSchemaReq) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&virtual_host.APIEndpointLearntSchemaReq{")
	s = append(s, "Namespace: "+fmt.Sprintf("%#v", this.Namespace)+",\n")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "CollapsedUrl: "+fmt.Sprintf("%#v", this.CollapsedUrl)+",\n")
	s = append(s, "Method: "+fmt.Sprintf("%#v", this.Method)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *APIEndpointsRsp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&virtual_host.APIEndpointsRsp{")
	if this.ApiepList != nil {
		s = append(s, "ApiepList: "+fmt.Sprintf("%#v", this.ApiepList)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *APIEndpointPDFRsp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&virtual_host.APIEndpointPDFRsp{")
	if this.PdfInfo != nil {
		s = append(s, "PdfInfo: "+fmt.Sprintf("%#v", this.PdfInfo)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *APIEndpointLearntSchemaRsp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&virtual_host.APIEndpointLearntSchemaRsp{")
	s = append(s, "LearntSchema: "+fmt.Sprintf("%#v", this.LearntSchema)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringPublicApiepCustomapi(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for ApiepCustomAPI service

type ApiepCustomAPIClient interface {
	// Get API endpoints Per Virtual Host
	//
	// x-displayName: "Get API Endpoints"
	// Get all autodiscovered API endpoints for Virtual Host
	GetAPIEndpoints(ctx context.Context, in *APIEndpointsReq, opts ...grpc.CallOption) (*APIEndpointsRsp, error)
	// Get PDF for API endpoint Per Virtual Host
	//
	// x-displayName: "Get API Endpoint PDF"
	// Get PDF of all metrics for a given auto discovered API endpoint for Virtual Host
	GetAPIEndpointPDF(ctx context.Context, in *APIEndpointPDFReq, opts ...grpc.CallOption) (*APIEndpointPDFRsp, error)
	// Get Learnt Schema per API endpoint
	//
	// x-displayName: "Get Get Learnt Schema per API endpoint"
	// Get Learnt Schema per API endpoint for a given auto discovered API endpoint for Virtual Host
	GetAPIEndpointLearntSchema(ctx context.Context, in *APIEndpointLearntSchemaReq, opts ...grpc.CallOption) (*APIEndpointLearntSchemaRsp, error)
}

type apiepCustomAPIClient struct {
	cc *grpc.ClientConn
}

func NewApiepCustomAPIClient(cc *grpc.ClientConn) ApiepCustomAPIClient {
	return &apiepCustomAPIClient{cc}
}

func (c *apiepCustomAPIClient) GetAPIEndpoints(ctx context.Context, in *APIEndpointsReq, opts ...grpc.CallOption) (*APIEndpointsRsp, error) {
	out := new(APIEndpointsRsp)
	err := grpc.Invoke(ctx, "/ves.io.schema.virtual_host.ApiepCustomAPI/GetAPIEndpoints", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiepCustomAPIClient) GetAPIEndpointPDF(ctx context.Context, in *APIEndpointPDFReq, opts ...grpc.CallOption) (*APIEndpointPDFRsp, error) {
	out := new(APIEndpointPDFRsp)
	err := grpc.Invoke(ctx, "/ves.io.schema.virtual_host.ApiepCustomAPI/GetAPIEndpointPDF", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiepCustomAPIClient) GetAPIEndpointLearntSchema(ctx context.Context, in *APIEndpointLearntSchemaReq, opts ...grpc.CallOption) (*APIEndpointLearntSchemaRsp, error) {
	out := new(APIEndpointLearntSchemaRsp)
	err := grpc.Invoke(ctx, "/ves.io.schema.virtual_host.ApiepCustomAPI/GetAPIEndpointLearntSchema", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ApiepCustomAPI service

type ApiepCustomAPIServer interface {
	// Get API endpoints Per Virtual Host
	//
	// x-displayName: "Get API Endpoints"
	// Get all autodiscovered API endpoints for Virtual Host
	GetAPIEndpoints(context.Context, *APIEndpointsReq) (*APIEndpointsRsp, error)
	// Get PDF for API endpoint Per Virtual Host
	//
	// x-displayName: "Get API Endpoint PDF"
	// Get PDF of all metrics for a given auto discovered API endpoint for Virtual Host
	GetAPIEndpointPDF(context.Context, *APIEndpointPDFReq) (*APIEndpointPDFRsp, error)
	// Get Learnt Schema per API endpoint
	//
	// x-displayName: "Get Get Learnt Schema per API endpoint"
	// Get Learnt Schema per API endpoint for a given auto discovered API endpoint for Virtual Host
	GetAPIEndpointLearntSchema(context.Context, *APIEndpointLearntSchemaReq) (*APIEndpointLearntSchemaRsp, error)
}

func RegisterApiepCustomAPIServer(s *grpc.Server, srv ApiepCustomAPIServer) {
	s.RegisterService(&_ApiepCustomAPI_serviceDesc, srv)
}

func _ApiepCustomAPI_GetAPIEndpoints_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(APIEndpointsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiepCustomAPIServer).GetAPIEndpoints(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ves.io.schema.virtual_host.ApiepCustomAPI/GetAPIEndpoints",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiepCustomAPIServer).GetAPIEndpoints(ctx, req.(*APIEndpointsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiepCustomAPI_GetAPIEndpointPDF_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(APIEndpointPDFReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiepCustomAPIServer).GetAPIEndpointPDF(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ves.io.schema.virtual_host.ApiepCustomAPI/GetAPIEndpointPDF",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiepCustomAPIServer).GetAPIEndpointPDF(ctx, req.(*APIEndpointPDFReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiepCustomAPI_GetAPIEndpointLearntSchema_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(APIEndpointLearntSchemaReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiepCustomAPIServer).GetAPIEndpointLearntSchema(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ves.io.schema.virtual_host.ApiepCustomAPI/GetAPIEndpointLearntSchema",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiepCustomAPIServer).GetAPIEndpointLearntSchema(ctx, req.(*APIEndpointLearntSchemaReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _ApiepCustomAPI_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ves.io.schema.virtual_host.ApiepCustomAPI",
	HandlerType: (*ApiepCustomAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAPIEndpoints",
			Handler:    _ApiepCustomAPI_GetAPIEndpoints_Handler,
		},
		{
			MethodName: "GetAPIEndpointPDF",
			Handler:    _ApiepCustomAPI_GetAPIEndpointPDF_Handler,
		},
		{
			MethodName: "GetAPIEndpointLearntSchema",
			Handler:    _ApiepCustomAPI_GetAPIEndpointLearntSchema_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ves.io/schema/virtual_host/public_apiep_customapi.proto",
}

func (m *APIEndpointsReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *APIEndpointsReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Namespace) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPublicApiepCustomapi(dAtA, i, uint64(len(m.Namespace)))
		i += copy(dAtA[i:], m.Namespace)
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintPublicApiepCustomapi(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.ApiEndpointInfoRequest) > 0 {
		dAtA2 := make([]byte, len(m.ApiEndpointInfoRequest)*10)
		var j1 int
		for _, num := range m.ApiEndpointInfoRequest {
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		dAtA[i] = 0x1a
		i++
		i = encodeVarintPublicApiepCustomapi(dAtA, i, uint64(j1))
		i += copy(dAtA[i:], dAtA2[:j1])
	}
	return i, nil
}

func (m *APIEndpointPDFReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *APIEndpointPDFReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Namespace) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPublicApiepCustomapi(dAtA, i, uint64(len(m.Namespace)))
		i += copy(dAtA[i:], m.Namespace)
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintPublicApiepCustomapi(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.CollapsedUrl) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintPublicApiepCustomapi(dAtA, i, uint64(len(m.CollapsedUrl)))
		i += copy(dAtA[i:], m.CollapsedUrl)
	}
	if len(m.Method) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintPublicApiepCustomapi(dAtA, i, uint64(len(m.Method)))
		i += copy(dAtA[i:], m.Method)
	}
	return i, nil
}

func (m *APIEndpointLearntSchemaReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *APIEndpointLearntSchemaReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Namespace) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPublicApiepCustomapi(dAtA, i, uint64(len(m.Namespace)))
		i += copy(dAtA[i:], m.Namespace)
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintPublicApiepCustomapi(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.CollapsedUrl) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintPublicApiepCustomapi(dAtA, i, uint64(len(m.CollapsedUrl)))
		i += copy(dAtA[i:], m.CollapsedUrl)
	}
	if len(m.Method) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintPublicApiepCustomapi(dAtA, i, uint64(len(m.Method)))
		i += copy(dAtA[i:], m.Method)
	}
	return i, nil
}

func (m *APIEndpointsRsp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *APIEndpointsRsp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ApiepList) > 0 {
		for _, msg := range m.ApiepList {
			dAtA[i] = 0xa
			i++
			i = encodeVarintPublicApiepCustomapi(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *APIEndpointPDFRsp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *APIEndpointPDFRsp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.PdfInfo != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPublicApiepCustomapi(dAtA, i, uint64(m.PdfInfo.Size()))
		n3, err := m.PdfInfo.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	return i, nil
}

func (m *APIEndpointLearntSchemaRsp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *APIEndpointLearntSchemaRsp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.LearntSchema) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPublicApiepCustomapi(dAtA, i, uint64(len(m.LearntSchema)))
		i += copy(dAtA[i:], m.LearntSchema)
	}
	return i, nil
}

func encodeVarintPublicApiepCustomapi(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *APIEndpointsReq) Size() (n int) {
	var l int
	_ = l
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovPublicApiepCustomapi(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovPublicApiepCustomapi(uint64(l))
	}
	if len(m.ApiEndpointInfoRequest) > 0 {
		l = 0
		for _, e := range m.ApiEndpointInfoRequest {
			l += sovPublicApiepCustomapi(uint64(e))
		}
		n += 1 + sovPublicApiepCustomapi(uint64(l)) + l
	}
	return n
}

func (m *APIEndpointPDFReq) Size() (n int) {
	var l int
	_ = l
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovPublicApiepCustomapi(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovPublicApiepCustomapi(uint64(l))
	}
	l = len(m.CollapsedUrl)
	if l > 0 {
		n += 1 + l + sovPublicApiepCustomapi(uint64(l))
	}
	l = len(m.Method)
	if l > 0 {
		n += 1 + l + sovPublicApiepCustomapi(uint64(l))
	}
	return n
}

func (m *APIEndpointLearntSchemaReq) Size() (n int) {
	var l int
	_ = l
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovPublicApiepCustomapi(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovPublicApiepCustomapi(uint64(l))
	}
	l = len(m.CollapsedUrl)
	if l > 0 {
		n += 1 + l + sovPublicApiepCustomapi(uint64(l))
	}
	l = len(m.Method)
	if l > 0 {
		n += 1 + l + sovPublicApiepCustomapi(uint64(l))
	}
	return n
}

func (m *APIEndpointsRsp) Size() (n int) {
	var l int
	_ = l
	if len(m.ApiepList) > 0 {
		for _, e := range m.ApiepList {
			l = e.Size()
			n += 1 + l + sovPublicApiepCustomapi(uint64(l))
		}
	}
	return n
}

func (m *APIEndpointPDFRsp) Size() (n int) {
	var l int
	_ = l
	if m.PdfInfo != nil {
		l = m.PdfInfo.Size()
		n += 1 + l + sovPublicApiepCustomapi(uint64(l))
	}
	return n
}

func (m *APIEndpointLearntSchemaRsp) Size() (n int) {
	var l int
	_ = l
	l = len(m.LearntSchema)
	if l > 0 {
		n += 1 + l + sovPublicApiepCustomapi(uint64(l))
	}
	return n
}

func sovPublicApiepCustomapi(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozPublicApiepCustomapi(x uint64) (n int) {
	return sovPublicApiepCustomapi(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *APIEndpointsReq) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&APIEndpointsReq{`,
		`Namespace:` + fmt.Sprintf("%v", this.Namespace) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`ApiEndpointInfoRequest:` + fmt.Sprintf("%v", this.ApiEndpointInfoRequest) + `,`,
		`}`,
	}, "")
	return s
}
func (this *APIEndpointPDFReq) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&APIEndpointPDFReq{`,
		`Namespace:` + fmt.Sprintf("%v", this.Namespace) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`CollapsedUrl:` + fmt.Sprintf("%v", this.CollapsedUrl) + `,`,
		`Method:` + fmt.Sprintf("%v", this.Method) + `,`,
		`}`,
	}, "")
	return s
}
func (this *APIEndpointLearntSchemaReq) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&APIEndpointLearntSchemaReq{`,
		`Namespace:` + fmt.Sprintf("%v", this.Namespace) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`CollapsedUrl:` + fmt.Sprintf("%v", this.CollapsedUrl) + `,`,
		`Method:` + fmt.Sprintf("%v", this.Method) + `,`,
		`}`,
	}, "")
	return s
}
func (this *APIEndpointsRsp) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&APIEndpointsRsp{`,
		`ApiepList:` + strings.Replace(fmt.Sprintf("%v", this.ApiepList), "APIEPInfo", "ves_io_schema_app_type.APIEPInfo", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *APIEndpointPDFRsp) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&APIEndpointPDFRsp{`,
		`PdfInfo:` + strings.Replace(fmt.Sprintf("%v", this.PdfInfo), "APIEPPDFInfo", "ves_io_schema_app_type.APIEPPDFInfo", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *APIEndpointLearntSchemaRsp) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&APIEndpointLearntSchemaRsp{`,
		`LearntSchema:` + fmt.Sprintf("%v", this.LearntSchema) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringPublicApiepCustomapi(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *APIEndpointsReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicApiepCustomapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: APIEndpointsReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: APIEndpointsReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicApiepCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicApiepCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicApiepCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicApiepCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType == 0 {
				var v ves_io_schema_app_type.ApiEndpointInfoRequest
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPublicApiepCustomapi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (ves_io_schema_app_type.ApiEndpointInfoRequest(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.ApiEndpointInfoRequest = append(m.ApiEndpointInfoRequest, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPublicApiepCustomapi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthPublicApiepCustomapi
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v ves_io_schema_app_type.ApiEndpointInfoRequest
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPublicApiepCustomapi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (ves_io_schema_app_type.ApiEndpointInfoRequest(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.ApiEndpointInfoRequest = append(m.ApiEndpointInfoRequest, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiEndpointInfoRequest", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPublicApiepCustomapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicApiepCustomapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *APIEndpointPDFReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicApiepCustomapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: APIEndpointPDFReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: APIEndpointPDFReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicApiepCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicApiepCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicApiepCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicApiepCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CollapsedUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicApiepCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicApiepCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CollapsedUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Method", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicApiepCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicApiepCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Method = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPublicApiepCustomapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicApiepCustomapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *APIEndpointLearntSchemaReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicApiepCustomapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: APIEndpointLearntSchemaReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: APIEndpointLearntSchemaReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicApiepCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicApiepCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicApiepCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicApiepCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CollapsedUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicApiepCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicApiepCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CollapsedUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Method", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicApiepCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicApiepCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Method = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPublicApiepCustomapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicApiepCustomapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *APIEndpointsRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicApiepCustomapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: APIEndpointsRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: APIEndpointsRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiepList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicApiepCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicApiepCustomapi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ApiepList = append(m.ApiepList, &ves_io_schema_app_type.APIEPInfo{})
			if err := m.ApiepList[len(m.ApiepList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPublicApiepCustomapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicApiepCustomapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *APIEndpointPDFRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicApiepCustomapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: APIEndpointPDFRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: APIEndpointPDFRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PdfInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicApiepCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicApiepCustomapi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PdfInfo == nil {
				m.PdfInfo = &ves_io_schema_app_type.APIEPPDFInfo{}
			}
			if err := m.PdfInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPublicApiepCustomapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicApiepCustomapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *APIEndpointLearntSchemaRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicApiepCustomapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: APIEndpointLearntSchemaRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: APIEndpointLearntSchemaRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LearntSchema", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicApiepCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicApiepCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LearntSchema = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPublicApiepCustomapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicApiepCustomapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPublicApiepCustomapi(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPublicApiepCustomapi
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPublicApiepCustomapi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPublicApiepCustomapi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthPublicApiepCustomapi
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowPublicApiepCustomapi
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipPublicApiepCustomapi(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthPublicApiepCustomapi = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPublicApiepCustomapi   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("ves.io/schema/virtual_host/public_apiep_customapi.proto", fileDescriptorPublicApiepCustomapi)
}
func init() {
	golang_proto.RegisterFile("ves.io/schema/virtual_host/public_apiep_customapi.proto", fileDescriptorPublicApiepCustomapi)
}

var fileDescriptorPublicApiepCustomapi = []byte{
	// 708 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x55, 0x4f, 0x4f, 0x13, 0x4d,
	0x18, 0xef, 0x50, 0xe0, 0x7d, 0x19, 0x78, 0x21, 0xcc, 0x81, 0xf4, 0xdd, 0x97, 0x6c, 0x60, 0x5f,
	0x0f, 0x18, 0xd3, 0x9d, 0xa4, 0x26, 0x7a, 0xd4, 0x42, 0xa9, 0x69, 0x42, 0x74, 0x53, 0xd4, 0x83,
	0x97, 0xcd, 0xb4, 0x3b, 0xdd, 0x8e, 0x6e, 0x77, 0x86, 0x9d, 0xd9, 0x46, 0x63, 0x48, 0x0c, 0x57,
	0x2f, 0x46, 0xcf, 0xde, 0xfd, 0x04, 0x1e, 0xe0, 0x20, 0x47, 0x8f, 0x44, 0x2f, 0x1e, 0xa5, 0x70,
	0xd0, 0x1b, 0x1f, 0xc1, 0x74, 0xb6, 0xc5, 0x6d, 0x05, 0x82, 0x70, 0xf0, 0xd2, 0x3c, 0xcf, 0x3c,
	0x7f, 0xfa, 0x7b, 0x7e, 0xcf, 0x9f, 0x85, 0x37, 0xdb, 0x54, 0xda, 0x8c, 0x63, 0x59, 0x6f, 0xd2,
	0x16, 0xc1, 0x6d, 0x16, 0xa9, 0x98, 0x04, 0x6e, 0x93, 0x4b, 0x85, 0x45, 0x5c, 0x0b, 0x58, 0xdd,
	0x25, 0x82, 0x51, 0xe1, 0xd6, 0x63, 0xa9, 0x78, 0x8b, 0x08, 0x66, 0x8b, 0x88, 0x2b, 0x8e, 0x8c,
	0x24, 0xd0, 0x4e, 0x02, 0xed, 0x74, 0xa0, 0x91, 0xf7, 0x99, 0x6a, 0xc6, 0x35, 0xbb, 0xce, 0x5b,
	0xd8, 0xe7, 0x3e, 0xc7, 0x3a, 0xa4, 0x16, 0x37, 0xb4, 0xa6, 0x15, 0x2d, 0x25, 0xa9, 0x8c, 0x79,
	0x9f, 0x73, 0x3f, 0xa0, 0x98, 0x08, 0x86, 0x49, 0x18, 0x72, 0x45, 0x14, 0xe3, 0xa1, 0xec, 0x59,
	0xad, 0x41, 0x84, 0x44, 0x08, 0x57, 0x3d, 0x13, 0x14, 0x77, 0x7f, 0xfa, 0x3e, 0xff, 0x0d, 0xfa,
	0x70, 0x91, 0x4e, 0x30, 0x3f, 0x54, 0x22, 0x09, 0x98, 0x47, 0x14, 0x4d, 0xac, 0xd6, 0x36, 0x80,
	0x33, 0x45, 0xa7, 0xb2, 0x1a, 0x7a, 0x82, 0xb3, 0x50, 0xc9, 0x2a, 0xdd, 0x40, 0xf3, 0x70, 0x22,
	0x24, 0x2d, 0x2a, 0x05, 0xa9, 0xd3, 0x1c, 0x58, 0x00, 0x4b, 0x13, 0xd5, 0x9f, 0x0f, 0x08, 0xc1,
	0xd1, 0xae, 0x92, 0x1b, 0xd1, 0x06, 0x2d, 0xa3, 0x18, 0xfe, 0x4b, 0x04, 0x73, 0x69, 0x2f, 0x8b,
	0xcb, 0xc2, 0x06, 0x77, 0x23, 0xba, 0x11, 0x53, 0xa9, 0x72, 0xd9, 0x85, 0xec, 0xd2, 0x74, 0xc1,
	0xb6, 0x07, 0x19, 0xeb, 0x17, 0x62, 0x17, 0x05, 0xeb, 0xff, 0x7b, 0x25, 0x6c, 0xf0, 0x6a, 0x12,
	0xb5, 0x0c, 0xb7, 0xbf, 0xef, 0x66, 0xc7, 0x5e, 0x83, 0x91, 0x1c, 0xa8, 0xce, 0x91, 0x13, 0x7d,
	0xac, 0x2d, 0x00, 0x67, 0x53, 0xe0, 0x9d, 0x52, 0xf9, 0x62, 0xf0, 0xff, 0x87, 0xff, 0xd4, 0x79,
	0x10, 0x10, 0x21, 0xa9, 0xe7, 0xc6, 0x51, 0x90, 0xcb, 0x6a, 0xe3, 0xd4, 0xf1, 0xe3, 0x83, 0x28,
	0x40, 0x73, 0x70, 0xbc, 0x45, 0x55, 0x93, 0x7b, 0xb9, 0x51, 0x6d, 0xed, 0x69, 0xd6, 0x4b, 0x00,
	0x8d, 0x14, 0x88, 0x35, 0x4a, 0xa2, 0x50, 0xad, 0xeb, 0x22, 0xff, 0x00, 0x9a, 0xf5, 0xa1, 0x76,
	0x4a, 0x81, 0x6e, 0x43, 0x98, 0xcc, 0x70, 0xc0, 0xa4, 0xca, 0x81, 0x85, 0xec, 0xd2, 0x64, 0x61,
	0xf1, 0xd4, 0x6e, 0x38, 0x95, 0x55, 0x47, 0x73, 0x3c, 0xa1, 0x83, 0xd6, 0x98, 0x54, 0xd6, 0xfd,
	0x5f, 0x68, 0x96, 0x02, 0xdd, 0x82, 0x7f, 0x0b, 0xaf, 0xa1, 0x5b, 0xad, 0xeb, 0x9a, 0x2c, 0x5c,
	0x39, 0x33, 0xa9, 0x53, 0x2a, 0xeb, 0xbc, 0x7f, 0x09, 0xaf, 0xd1, 0x15, 0xac, 0xe2, 0xe9, 0xbc,
	0x49, 0xd1, 0x65, 0x21, 0xd0, 0x4f, 0x6e, 0x92, 0xad, 0xc7, 0xdd, 0x54, 0x90, 0xf2, 0x2b, 0xbc,
	0x1d, 0x83, 0xd3, 0xc5, 0x2e, 0xcc, 0x15, 0xbd, 0x9e, 0x45, 0xa7, 0x82, 0xde, 0x03, 0x38, 0x73,
	0x87, 0xaa, 0x34, 0x09, 0xe8, 0x9a, 0x7d, 0xfa, 0xb6, 0xda, 0x43, 0xd3, 0x6f, 0x9c, 0xdf, 0x59,
	0x0a, 0xab, 0xb2, 0xf5, 0xf9, 0xf0, 0xcd, 0xc8, 0x0a, 0x2a, 0xf6, 0xae, 0x05, 0x3e, 0x6e, 0xad,
	0xc4, 0xcf, 0x8f, 0xe5, 0xcd, 0x81, 0xc3, 0xd2, 0xb3, 0x6c, 0xe2, 0xf4, 0xca, 0x48, 0xf4, 0x01,
	0xc0, 0xd9, 0x41, 0xe0, 0x4e, 0xa9, 0x8c, 0xf2, 0xe7, 0x44, 0x93, 0xcc, 0xbe, 0xf1, 0x3b, 0xee,
	0x52, 0x58, 0x6b, 0x1a, 0x7e, 0x19, 0x95, 0x2e, 0x0b, 0x1f, 0x0b, 0xaf, 0x81, 0x0e, 0x01, 0x34,
	0x06, 0x2b, 0x48, 0x37, 0x15, 0xdd, 0x38, 0x27, 0xb6, 0xa1, 0x0d, 0x32, 0x2e, 0x14, 0x27, 0x85,
	0xf5, 0x50, 0x17, 0xe7, 0xa0, 0xbb, 0x97, 0x2e, 0x6e, 0x60, 0x10, 0x8d, 0xab, 0xbb, 0x3b, 0x20,
	0xfb, 0x69, 0x07, 0x2c, 0x9e, 0x01, 0xeb, 0x5e, 0xed, 0x31, 0xad, 0xab, 0xe5, 0x2d, 0xb0, 0xb7,
	0x6f, 0x66, 0xbe, 0xec, 0x9b, 0x99, 0xa3, 0x7d, 0x13, 0xbc, 0xe8, 0x98, 0xe0, 0x5d, 0xc7, 0x04,
	0x1f, 0x3b, 0x26, 0xd8, 0xeb, 0x98, 0xe0, 0x6b, 0xc7, 0x04, 0xdf, 0x3a, 0x66, 0xe6, 0xa8, 0x63,
	0x82, 0x57, 0x07, 0x66, 0x66, 0xf7, 0xc0, 0x04, 0x8f, 0x1c, 0x9f, 0x8b, 0x27, 0xbe, 0xdd, 0xe6,
	0x81, 0xa2, 0x51, 0x44, 0xec, 0x58, 0x62, 0x2d, 0x34, 0x78, 0xd4, 0xca, 0x8b, 0x88, 0xb7, 0x99,
	0x47, 0xa3, 0x7c, 0xdf, 0x8c, 0x45, 0xcd, 0xe7, 0x98, 0x3e, 0x55, 0xbd, 0xeb, 0x7e, 0xc2, 0x77,
	0xac, 0x36, 0xae, 0x2f, 0xfd, 0xf5, 0x1f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x40, 0x1b, 0x27, 0xc1,
	0xec, 0x06, 0x00, 0x00,
}
