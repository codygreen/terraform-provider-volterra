// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ves.io/schema/virtual_host/types.proto

package virtual_host

import proto "github.com/gogo/protobuf/proto"
import golang_proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"
import google_protobuf3 "github.com/gogo/protobuf/types"
import google_protobuf1 "github.com/gogo/protobuf/types"
import ves_io_schema_authentication "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/authentication"
import ves_io_schema_cluster "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/cluster"
import ves_io_schema3 "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
import _ "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
import _ "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/service_policy"
import ves_io_schema4 "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
import _ "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
import _ "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
import ves_io_schema_virtual_host_dns_info "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/virtual_host_dns_info"

import strconv "strconv"

import strings "strings"
import reflect "reflect"
import sortkeys "github.com/gogo/protobuf/sortkeys"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// VirtualHostType
//
// x-displayName: "Virtual Host Type"
// VirtualHostType tells the type of virtual_host. Functionally, all types are same,
// this is mainly used for categorizing metrics.
type VirtualHostType int32

const (
	// VirtualService
	//
	// x-displayName: "Virtual Service"
	// Virtual Host used Virtual Service
	VIRTUAL_SERVICE VirtualHostType = 0
	// HTTP LoadBalancer
	//
	// x-displayName: "HTTP Load Balancer"
	// Virtual Host used as Load Balancer
	HTTP_LOAD_BALANCER VirtualHostType = 1
	// APIGateway
	//
	// x-displayName: "API Gateway"
	// Virtual Host used API Gateway
	API_GATEWAY VirtualHostType = 2
	// TCP LoadBalancer
	//
	// x-displayName: "Load balancer"
	// Virtual Host used as Load Balancer
	TCP_LOAD_BALANCER VirtualHostType = 3
	// Proxy
	//
	// x-displayName: "Proxy"
	// Virtual Host used as Proxy
	PROXY VirtualHostType = 4
	// LOCAL_K8S_API_GATEWAY
	//
	// x-displayName: "Local K8s API Gateway"
	// Internal use only, used for k8s cluster api gateway on the site.
	LOCAL_K8S_API_GATEWAY VirtualHostType = 5
)

var VirtualHostType_name = map[int32]string{
	0: "VIRTUAL_SERVICE",
	1: "HTTP_LOAD_BALANCER",
	2: "API_GATEWAY",
	3: "TCP_LOAD_BALANCER",
	4: "PROXY",
	5: "LOCAL_K8S_API_GATEWAY",
}
var VirtualHostType_value = map[string]int32{
	"VIRTUAL_SERVICE":       0,
	"HTTP_LOAD_BALANCER":    1,
	"API_GATEWAY":           2,
	"TCP_LOAD_BALANCER":     3,
	"PROXY":                 4,
	"LOCAL_K8S_API_GATEWAY": 5,
}

func (VirtualHostType) EnumDescriptor() ([]byte, []int) { return fileDescriptorTypes, []int{0} }

// ProxyType tells the type of proxy to install for the virtual host.
//
// x-displayName: "Type of Proxy"
// Only the following combination of VirtualHosts within same AdvertisePolicy is permitted
// (None of them should have "*" in domains when used with other VirtualHosts in same AdvertisePolicy)
// 1. Multiple TCP_PROXY_WITH_SNI and multiple HTTPS_PROXY
// 2. Multiple HTTP_PROXY
// 3. Multiple HTTPS_PROXY
// 4. Multiple TCP_PROXY_WITH_SNI
//
// HTTPS_PROXY without TLS parameters is not permitted
// HTTP_PROXY/HTTPS_PROXY/TCP_PROXY_WITH_SNI/SMA_PROXY with empty domains is not permitted
// TCP_PROXY_WITH_SNI/SMA_PROXY should not have "*" in domains
type ProxyType int32

const (
	// HTTP_PROXY
	//
	// x-displayName: "HTTP Proxy"
	// Install HTTP proxy. HTTP Proxy is the default proxy installed.
	HTTP_PROXY ProxyType = 0
	// TCP_PROXY
	//
	// x-displayName: "TCP Proxy"
	// Install TCP proxy
	TCP_PROXY ProxyType = 1
	// TCP_PROXY_WITH_SNI
	//
	// x-displayName: "TCP Proxy with SNI"
	// Install TCP proxy with SNI Routing
	TCP_PROXY_WITH_SNI ProxyType = 2
	// HTTPS_PROXY
	//
	// x-displayName: "HTTPS Proxy"
	// Install HTTPS proxy
	HTTPS_PROXY ProxyType = 3
	// UDP_PROXY
	//
	// x-displayName: "UDP Proxy"
	// Install UDP proxy
	UDP_PROXY ProxyType = 4
	// SMA_PROXY
	//
	// x-displayName: "Secret Management Access Proxy"
	// Install Secret Management Access proxy
	SMA_PROXY ProxyType = 5
)

var ProxyType_name = map[int32]string{
	0: "HTTP_PROXY",
	1: "TCP_PROXY",
	2: "TCP_PROXY_WITH_SNI",
	3: "HTTPS_PROXY",
	4: "UDP_PROXY",
	5: "SMA_PROXY",
}
var ProxyType_value = map[string]int32{
	"HTTP_PROXY":         0,
	"TCP_PROXY":          1,
	"TCP_PROXY_WITH_SNI": 2,
	"HTTPS_PROXY":        3,
	"UDP_PROXY":          4,
	"SMA_PROXY":          5,
}

func (ProxyType) EnumDescriptor() ([]byte, []int) { return fileDescriptorTypes, []int{1} }

// VirtualHostState
//
// x-displayName: "Virtual Host State"
// State of the virtual host
type VirtualHostState int32

const (
	// VIRTUAL_HOST_READY
	//
	// x-displayName: "Ready"
	// Virtual host is ready to install
	VIRTUAL_HOST_READY VirtualHostState = 0
	// VIRTUAL_HOST_PENDING_VERIFICATION
	//
	// x-displayName: "Pending Verification"
	// Virtual host is verfication pending for some or all of its domains
	VIRTUAL_HOST_PENDING_VERIFICATION VirtualHostState = 1
	// VIRTUAL_HOST_VERIFICATION_FAILED
	//
	// x-displayName: "Verification Failed"
	// Virtual host has one or more domains for which verification failed
	VIRTUAL_HOST_VERIFICATION_FAILED VirtualHostState = 2
	// VIRTUAL_HOST_PENDING_DNS_DELEGATION
	//
	// x-displayName: "Pending DNS delegation"
	// Virtual host is pending DNS delegation
	VIRTUAL_HOST_PENDING_DNS_DELEGATION VirtualHostState = 3
	// VIRTUAL_HOST_PENDING_A_RECORD
	//
	// x-displayName: "Pending A record"
	// Virtual host is waiting for one or more A records to be created
	VIRTUAL_HOST_PENDING_A_RECORD VirtualHostState = 4
	// VIRTUAL_HOST_DNS_A_RECORD_ADDED
	//
	// x-displayName: "DNS A record was added"
	// DNS A record has been added for this Virtual host
	VIRTUAL_HOST_DNS_A_RECORD_ADDED VirtualHostState = 5
)

var VirtualHostState_name = map[int32]string{
	0: "VIRTUAL_HOST_READY",
	1: "VIRTUAL_HOST_PENDING_VERIFICATION",
	2: "VIRTUAL_HOST_VERIFICATION_FAILED",
	3: "VIRTUAL_HOST_PENDING_DNS_DELEGATION",
	4: "VIRTUAL_HOST_PENDING_A_RECORD",
	5: "VIRTUAL_HOST_DNS_A_RECORD_ADDED",
}
var VirtualHostState_value = map[string]int32{
	"VIRTUAL_HOST_READY":                  0,
	"VIRTUAL_HOST_PENDING_VERIFICATION":   1,
	"VIRTUAL_HOST_VERIFICATION_FAILED":    2,
	"VIRTUAL_HOST_PENDING_DNS_DELEGATION": 3,
	"VIRTUAL_HOST_PENDING_A_RECORD":       4,
	"VIRTUAL_HOST_DNS_A_RECORD_ADDED":     5,
}

func (VirtualHostState) EnumDescriptor() ([]byte, []int) { return fileDescriptorTypes, []int{2} }

// Certification State
//
// x-displayName: "Certification State"
// State of auto certification generation for the virtual host
type CertificationState int32

const (
	// Auto Cert Disabled
	//
	// x-displayName: "Auto Cert Disabled"
	// Auto Certification is disabled.
	AutoCertDisabled CertificationState = 0
	// Dns Domain Verification
	//
	// x-displayName: "DnsDomainVerification"
	// Auto Certification is waiting for domain verification.
	DnsDomainVerification CertificationState = 1
	// Auto Cert Started
	//
	// x-displayName: "Auto Cert Started"
	// Auto Certificate generation action has started.
	AutoCertStarted CertificationState = 2
	// Domain Challenge Pending
	//
	// x-displayName: "Domain Challenge Pending"
	// The domains in the virtual host configuration are being verified. This requires
	// the _acme-challenge TXT record in the domain to have the correct TXT.
	DomainChallengePending CertificationState = 3
	// Domain Challenge Verified
	//
	// x-displayName: "Domain Challenge Verified"
	// All the domains in the virtual host have been verified.
	DomainChallengeVerified CertificationState = 4
	// Auto Cert Finalize
	//
	// x-displayName: "Auto Cert Finalize"
	// Certificate generation order is Ready and Finalized.
	AutoCertFinalize CertificationState = 5
	// Certificate Invalid
	//
	// x-displayName: "Certificate Invalid"
	// Certificate is invalid
	CertificateInvalid CertificationState = 6
	// Certificate Valid
	//
	// x-displayName: "Certificate Valid"
	// Valid certificate generated and tls_parameters are updated
	CertificateValid CertificationState = 7
	// Auto Cert Not Applicable
	//
	// x-displayName: "Not Applicable"
	// Auto certificate not applicable because virtual host does not use TLS
	AutoCertNotApplicable CertificationState = 8
	// Auto Cert Rate Limited
	//
	// x-displayName: "Rate Limited"
	// Auto certificate not available because CA has rate limited the request
	AutoCertRateLimited CertificationState = 9
	// Auto Cert Generation Retry
	//
	// x-displayName: "Auto Cert Generation Retry"
	// Auto certificate generate failed in the previous attempt, will be retried automatically
	AutoCertGenerationRetry CertificationState = 10
	// Auto Cert Error
	//
	// x-displayName: "Auto Cert Error"
	// Error in Certificate generation
	AutoCertError CertificationState = 11
)

var CertificationState_name = map[int32]string{
	0:  "AutoCertDisabled",
	1:  "DnsDomainVerification",
	2:  "AutoCertStarted",
	3:  "DomainChallengePending",
	4:  "DomainChallengeVerified",
	5:  "AutoCertFinalize",
	6:  "CertificateInvalid",
	7:  "CertificateValid",
	8:  "AutoCertNotApplicable",
	9:  "AutoCertRateLimited",
	10: "AutoCertGenerationRetry",
	11: "AutoCertError",
}
var CertificationState_value = map[string]int32{
	"AutoCertDisabled":        0,
	"DnsDomainVerification":   1,
	"AutoCertStarted":         2,
	"DomainChallengePending":  3,
	"DomainChallengeVerified": 4,
	"AutoCertFinalize":        5,
	"CertificateInvalid":      6,
	"CertificateValid":        7,
	"AutoCertNotApplicable":   8,
	"AutoCertRateLimited":     9,
	"AutoCertGenerationRetry": 10,
	"AutoCertError":           11,
}

func (CertificationState) EnumDescriptor() ([]byte, []int) { return fileDescriptorTypes, []int{3} }

// JavaScriptConfigType
//
// x-displayName: "JavaScript Configuration"
// Custom JavaScript Configuration. Custom JavaScript code can be executed at various stages of request processing.
type JavaScriptConfigType struct {
	// CachePrefix
	//
	// x-displayName: "Cache Identifier"
	// Identifier for data store to be used by JavaScript. Data store can be
	// KeyValue store referred by script.
	CachePrefix string `protobuf:"bytes,1,opt,name=cache_prefix,json=cachePrefix,proto3" json:"cache_prefix,omitempty"`
	// ScriptConfig
	//
	// x-displayName: "Configuration for Script"
	// Input passed to the script
	ScriptConfig *google_protobuf3.Struct `protobuf:"bytes,2,opt,name=script_config,json=scriptConfig" json:"script_config,omitempty"`
	// ScriptURL
	//
	// x-displayName: "Path of Javascript"
	// URL of JavaScript that gets executed
	CustomScriptUrl string `protobuf:"bytes,3,opt,name=custom_script_url,json=customScriptUrl,proto3" json:"custom_script_url,omitempty"`
}

func (m *JavaScriptConfigType) Reset()                    { *m = JavaScriptConfigType{} }
func (*JavaScriptConfigType) ProtoMessage()               {}
func (*JavaScriptConfigType) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{0} }

func (m *JavaScriptConfigType) GetCachePrefix() string {
	if m != nil {
		return m.CachePrefix
	}
	return ""
}

func (m *JavaScriptConfigType) GetScriptConfig() *google_protobuf3.Struct {
	if m != nil {
		return m.ScriptConfig
	}
	return nil
}

func (m *JavaScriptConfigType) GetCustomScriptUrl() string {
	if m != nil {
		return m.CustomScriptUrl
	}
	return ""
}

// DynamicReverseProxyType
//
// x-displayName: "Dynamic Reverse Proxy Type"
// In this mode of proxy, virtual host will resolve the destination endpoint dynamically.
//
// The dynamic resolution is done using a predefined field in the request. This predefined
// field depends on the ProxyType configured on the Virtual Host.
//
// For HTTP traffic, i.e. with ProxyType as HTTP_PROXY or HTTPS_PROXY, virtual host will use the
// "HOST" http header from the request and perform DNS resolution to select destination endpoint.
//
// For TCP traffic with SNI, (If the ProxyType is TCP_PROXY_WITH_SNI), virtual host will perform DNS
// resolution using the SNI.
//
// The DNS resolution is performed in the virtual network specified in outside_network_type or
// outside_network
//
// In both modes of operation(either using Host header or SNI), the DNS resolution could return
// multiple addresses. First IPv4 address from such returned list is used as endpoint for the
// request. The DNS response is cached for 60s by default.
type DynamicReverseProxyType struct {
	// Enable the dynamic resolution of the endpoint
	//
	// x-displayName: "Dynamic Endpoint Resolution"
	// x-example : true
	// In this mode of proxy, virtual host will resolve the destination endpoint dynamically.
	//
	// The dynamic resolution is done using a predefined field in the request. This predefined
	// field depends on the ProxyType configured on the Virtual Host.
	//
	// For HTTP traffic, i.e. with ProxyType as HTTP_PROXY or HTTPS_PROXY, virtual host will use the
	// "HOST" http header from the request and perform DNS resolution to select destination endpoint.
	//
	// For TCP traffic with SNI, (If the ProxyType is TCP_PROXY_WITH_SNI), virtual host will perform DNS
	// resolution using the SNI.
	//
	// The DNS resolution is performed in the virtual network specified in outside_network_type or
	// outside_network
	//
	// In both modes of operation(either using Host header or SNI), the DNS resolution could return
	// multiple addresses. First IPv4 address from such returned list is used as endpoint for the
	// request. The DNS response is cached for 60s by default.
	ResolveEndpointDynamically bool `protobuf:"varint,1,opt,name=resolve_endpoint_dynamically,json=resolveEndpointDynamically,proto3" json:"resolve_endpoint_dynamically,omitempty"`
	// resolution_network_type
	//
	// x-displayName: "Resolution Network Type"
	// Type of the network to resolve the destination
	ResolutionNetworkType ves_io_schema3.VirtualNetworkType `protobuf:"varint,2,opt,name=resolution_network_type,json=resolutionNetworkType,proto3,enum=ves.io.schema.VirtualNetworkType" json:"resolution_network_type,omitempty"`
	// resolution_network
	//
	// x-displayName: "Resolution Network"
	// Reference to virtual network where the endpoint is resolved.
	// Reference is valid only when the network type is VIRTUAL_NETWORK_PER_SITE or
	// VIRTUAL_NETWORK_GLOBAL. It is ignored for all other network types
	ResolutionNetwork []*ves_io_schema4.ObjectRefType `protobuf:"bytes,3,rep,name=resolution_network,json=resolutionNetwork" json:"resolution_network,omitempty"`
}

func (m *DynamicReverseProxyType) Reset()                    { *m = DynamicReverseProxyType{} }
func (*DynamicReverseProxyType) ProtoMessage()               {}
func (*DynamicReverseProxyType) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{1} }

func (m *DynamicReverseProxyType) GetResolveEndpointDynamically() bool {
	if m != nil {
		return m.ResolveEndpointDynamically
	}
	return false
}

func (m *DynamicReverseProxyType) GetResolutionNetworkType() ves_io_schema3.VirtualNetworkType {
	if m != nil {
		return m.ResolutionNetworkType
	}
	return ves_io_schema3.VIRTUAL_NETWORK_SITE_LOCAL
}

func (m *DynamicReverseProxyType) GetResolutionNetwork() []*ves_io_schema4.ObjectRefType {
	if m != nil {
		return m.ResolutionNetwork
	}
	return nil
}

// CompressionType
//
// x-displayName: "Compression Parameters"
// Enables loadbalancer to compress dispatched data from an upstream service upon client request.
// The content is compressed and then sent to the client with the appropriate headers if either response and request allow.
// Only GZIP compression is supported.
//
// By default compression will be skipped when:
//
//   A request does NOT contain accept-encoding header.
//   A request includes accept-encoding header, but it does not contain “gzip” or “*”.
//   A request includes accept-encoding with “gzip” or “*” with the weight “q=0”. Note that the “gzip” will have a higher weight then “*”. For example, if accept-encoding is “gzip;q=0,*;q=1”, the filter will not compress. But if the header is set to “*;q=0,gzip;q=1”, the filter will compress.
//   A request whose accept-encoding header includes “identity”.
//   A response contains a content-encoding header.
//   A response contains a cache-control header whose value includes “no-transform”.
//   A response contains a transfer-encoding header whose value includes “gzip”.
//   A response does not contain a content-type value that matches one of the selected mime-types, which default to application/javascript, application/json, application/xhtml+xml, image/svg+xml, text/css, text/html, text/plain, text/xml.
//   Neither content-length nor transfer-encoding headers are present in the response.
//   Response size is smaller than 30 bytes (only applicable when transfer-encoding is not chunked).
//
// When compression is applied:
//
//   The content-length is removed from response headers.
//   Response headers contain “transfer-encoding: chunked” and do not contain “content-encoding” header.
//   The “vary: accept-encoding” header is inserted on every response.
//
// GZIP Compression Level:
//
// A value which is optimal balance between speed of compression and amount of compression is chosen.
type CompressionType struct {
	// content_length
	//
	// x-displayName: "Content Length"
	// x-example: 100
	// Minimum response length, in bytes, which will trigger compression. The default value is 30.
	ContentLength uint32 `protobuf:"varint,1,opt,name=content_length,json=contentLength,proto3" json:"content_length,omitempty"`
	// content_type
	//
	// x-displayName: "Content Type"
	// x-example: "application/json"
	// Set of strings that allows specifying which mime-types yield compression
	// When this field is not defined, compression will be applied
	// to the following mime-types:
	//     "application/javascript"
	//     "application/json",
	//     "application/xhtml+xml"
	//     "image/svg+xml"
	//     "text/css"
	//     "text/html"
	//     "text/plain"
	//     "text/xml"
	ContentType []string `protobuf:"bytes,2,rep,name=content_type,json=contentType" json:"content_type,omitempty"`
	// disable_on_etag_header
	//
	// x-displayName: "Disable On Etag Header"
	// x-example: "true"
	// If true, disables compression when the response contains an etag header. When it is false,
	// weak etags will be preserved and the ones that require strong validation will be removed.
	DisableOnEtagHeader bool `protobuf:"varint,3,opt,name=disable_on_etag_header,json=disableOnEtagHeader,proto3" json:"disable_on_etag_header,omitempty"`
	// remove_accept_encoding_header
	//
	// x-displayName: "Remove Accept-Encoding Header"
	// x-example: "true"
	// If true, removes accept-encoding from the request headers before dispatching it to the upstream
	// so that responses do not get compressed before reaching the filter.
	RemoveAcceptEncodingHeader bool `protobuf:"varint,4,opt,name=remove_accept_encoding_header,json=removeAcceptEncodingHeader,proto3" json:"remove_accept_encoding_header,omitempty"`
}

func (m *CompressionType) Reset()                    { *m = CompressionType{} }
func (*CompressionType) ProtoMessage()               {}
func (*CompressionType) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{2} }

func (m *CompressionType) GetContentLength() uint32 {
	if m != nil {
		return m.ContentLength
	}
	return 0
}

func (m *CompressionType) GetContentType() []string {
	if m != nil {
		return m.ContentType
	}
	return nil
}

func (m *CompressionType) GetDisableOnEtagHeader() bool {
	if m != nil {
		return m.DisableOnEtagHeader
	}
	return false
}

func (m *CompressionType) GetRemoveAcceptEncodingHeader() bool {
	if m != nil {
		return m.RemoveAcceptEncodingHeader
	}
	return false
}

// JavascriptChallengeType
//
// x-displayName: "Javascript Challenge Parameters"
//
// Enables loadbalancer to perform client browser compatibility test by redirecting to a page
// with Javascript.
//
// With this feature enabled, only clients that are capable of executing Javascript(mostly browsers)
// will be allowed to complete the HTTP request.
//
// When loadbalancer is configured to do Javascript Challenge, it will redirect the browser to an
// HTML page on every new HTTP request. This HTML page will have Javascript embedded in it.
// Loadbalancer chooses a set of random numbers for every new client and sends these numbers along with an
// encrypted answer with the request such that it embed these numbers as input in the Javascript.
// Javascript will run on the requestor browser and perform a complex Math operation.
// Script will submit the answer to loadbalancer. Loadbalancer will validate the answer by comparing the calculated
// answer with the decrypted answer (which was encrypted when it was sent back as reply) and allow
// the request to the upstream server only if the answer is correct.
// Loadbalancer will tag response header with a cookie to avoid Javascript challenge for subsequent requests.
//
// Javascript challenge serves following purposes
//    * Validate that the request is coming via a browser that is capable for running Javascript
//    * Force the browser to run a complex operation, f(X), that requires it to spend a large number
//      of CPU cycles. This is to slow down a potential DoS attacker by making it difficult to launch
//    a large request flood without having to spend even larger CPU cost at their end.
//
// You can enable either Javascript challenge or Captcha challenge on a virtual host
type JavascriptChallengeType struct {
	// Enable Javascript Challenge
	//
	// x-displayName: "Enable"
	// x-example: "true"
	// Turn this configuration knob to enable Javascript Challenge
	EnableJsChallenge bool `protobuf:"varint,1,opt,name=enable_js_challenge,json=enableJsChallenge,proto3" json:"enable_js_challenge,omitempty"`
	// js_script_delay
	//
	// x-displayName: "Javascript Delay"
	// x-example: 1000
	// Specifies, in milliseconds, the delay that Javascript introduces.
	// Default delay is 5 seconds
	JsScriptDelay uint32 `protobuf:"varint,2,opt,name=js_script_delay,json=jsScriptDelay,proto3" json:"js_script_delay,omitempty"`
	// cookie_expiry
	//
	// x-displayName: "Cookie Expiry period"
	// x-example: 1000
	// Specifies, in seconds, cookie expiry duration.
	// Expired cookie will cause loadbalancer to perform Javascript challenge
	// Default cookie expiry is set as 1 hour
	CookieExpiry uint32 `protobuf:"varint,3,opt,name=cookie_expiry,json=cookieExpiry,proto3" json:"cookie_expiry,omitempty"`
	// custom_page
	//
	// x-displayName: "Custom Message for Javascript Challenge"
	// x-example: "string:///PHA+IFBsZWFzZSBXYWl0IDwvcD4="
	// Custom message is of type uri_ref. Currently supported URL schemes is string:///.
	// For string:/// scheme, message needs to be encoded in Base64 format.
	// You can specify this message as base64 encoded plain text message e.g. "Please Wait.."
	// or it can be HTML paragraph or a body string encoded as base64 string
	// E.g. "<p> Please Wait </p>". Base64 encoded string for this html is "PHA+IFBsZWFzZSBXYWl0IDwvcD4="
	CustomPage string `protobuf:"bytes,4,opt,name=custom_page,json=customPage,proto3" json:"custom_page,omitempty"`
}

func (m *JavascriptChallengeType) Reset()                    { *m = JavascriptChallengeType{} }
func (*JavascriptChallengeType) ProtoMessage()               {}
func (*JavascriptChallengeType) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{3} }

func (m *JavascriptChallengeType) GetEnableJsChallenge() bool {
	if m != nil {
		return m.EnableJsChallenge
	}
	return false
}

func (m *JavascriptChallengeType) GetJsScriptDelay() uint32 {
	if m != nil {
		return m.JsScriptDelay
	}
	return 0
}

func (m *JavascriptChallengeType) GetCookieExpiry() uint32 {
	if m != nil {
		return m.CookieExpiry
	}
	return 0
}

func (m *JavascriptChallengeType) GetCustomPage() string {
	if m != nil {
		return m.CustomPage
	}
	return ""
}

// CaptchaChallengeType
//
// x-displayName: "Captcha Challenge Parameters"
//
// Enables loadbalancer to perform captcha challenge
//
// Captcha challenge will be based on Google Recaptcha.
//
// With this feature enabled, only clients that pass the captcha challenge will be allowed to
// complete the HTTP request.
//
// When loadbalancer is configured to do Captcha Challenge, it will redirect the browser to an
// HTML page on every new HTTP request. This HTML page will have captcha challenge embedded in it.
// Client will be allowed to make the request only if the captcha challenge is successful.
// Loadbalancer will tag response header with a cookie to avoid Captcha challenge for subsequent requests.
//
// CAPTCHA is mainly used as a security check to ensure only human users can pass through.
// Generally, computers or bots are not capable of solving a captcha.
//
// You can enable either Javascript challenge or Captcha challenge on a virtual host
type CaptchaChallengeType struct {
	// Enable Captcha Challenge
	//
	// x-displayName: "Enable"
	// x-example: "true"
	// Turn this configuration knob to enable Captcha Challenge
	EnableCaptchaChallenge bool `protobuf:"varint,1,opt,name=enable_captcha_challenge,json=enableCaptchaChallenge,proto3" json:"enable_captcha_challenge,omitempty"`
	// cookie_expiry
	//
	// x-displayName: "Cookie Expiry period"
	// x-example: 1000
	// Specifies, in seconds, cookie expiry duration.
	// Expired cookie will cause loadbalancer to perform Captcha challenge
	// Default cookie expiry is set as 1 hour
	CookieExpiry uint32 `protobuf:"varint,2,opt,name=cookie_expiry,json=cookieExpiry,proto3" json:"cookie_expiry,omitempty"`
	// custom_page
	//
	// x-displayName: "Custom message for Captcha Challenge"
	// x-example: "string:///PHA+IFBsZWFzZSBXYWl0IDwvcD4="
	// Custom message is of type uri_ref. Currently supported URL schemes is string:///.
	// For string:/// scheme, message needs to be encoded in Base64 format.
	// You can specify this message as base64 encoded plain text message e.g. "Please Wait.."
	// or it can be HTML paragraph or a body string encoded as base64 string
	// E.g. "<p> Please Wait </p>". Base64 encoded string for this html is "PHA+IFBsZWFzZSBXYWl0IDwvcD4="
	CustomPage string `protobuf:"bytes,3,opt,name=custom_page,json=customPage,proto3" json:"custom_page,omitempty"`
}

func (m *CaptchaChallengeType) Reset()                    { *m = CaptchaChallengeType{} }
func (*CaptchaChallengeType) ProtoMessage()               {}
func (*CaptchaChallengeType) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{4} }

func (m *CaptchaChallengeType) GetEnableCaptchaChallenge() bool {
	if m != nil {
		return m.EnableCaptchaChallenge
	}
	return false
}

func (m *CaptchaChallengeType) GetCookieExpiry() uint32 {
	if m != nil {
		return m.CookieExpiry
	}
	return 0
}

func (m *CaptchaChallengeType) GetCustomPage() string {
	if m != nil {
		return m.CustomPage
	}
	return ""
}

// TemporaryUserBlockingType
//
// x-displayName: "Temporary User Blocking"
//
// Specifies configuration for temporary user blocking resulting from user behavior analysis.
//
// When Malicious User Mitigation is enabled from service policy rules, users' accessing the application will be analyzed for
// malicious activity and the configured mitigation actions will be taken on identified malicious users.
// These mitigation actions include setting up temporary blocking on that user.
// This configuration specifies settings on how that blocking should be done by the loadbalancer.
type TemporaryUserBlockingType struct {
	// custom_page
	//
	// x-displayName: "Custom Message for Temporary Blocking"
	// x-example: "string:///PHA+IFBsZWFzZSBXYWl0IDwvcD4="
	// Custom message is of type `uri_ref`. Currently supported URL schemes is `string:///`.
	// For `string:///` scheme, message needs to be encoded in Base64 format.
	// You can specify this message as base64 encoded plain text message e.g. "Blocked.."
	// or it can be HTML paragraph or a body string encoded as base64 string
	// E.g. "<p> Blocked </p>". Base64 encoded string for this html is "PHA+IFBsZWFzZSBXYWl0IDwvcD4="
	CustomPage string `protobuf:"bytes,1,opt,name=custom_page,json=customPage,proto3" json:"custom_page,omitempty"`
}

func (m *TemporaryUserBlockingType) Reset()                    { *m = TemporaryUserBlockingType{} }
func (*TemporaryUserBlockingType) ProtoMessage()               {}
func (*TemporaryUserBlockingType) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{5} }

func (m *TemporaryUserBlockingType) GetCustomPage() string {
	if m != nil {
		return m.CustomPage
	}
	return ""
}

// AutoCertInfoType
//
// x-displayName: "Auto Cert Information"
// Information related to auto certificate
type AutoCertInfoType struct {
	// Auto Cert State
	//
	// x-displayName: "Auto Cert State"
	// State of auto certificate generation.
	AutoCertState CertificationState `protobuf:"varint,1,opt,name=auto_cert_state,json=autoCertState,proto3,enum=ves.io.schema.virtual_host.CertificationState" json:"auto_cert_state,omitempty"`
	// Auto Cert Expiry Timestamp
	//
	// x-displayName: "Auto Cert Expiry Timestamp"
	// Auto certificate expiry timestamp
	AutoCertExpiry *google_protobuf1.Timestamp `protobuf:"bytes,2,opt,name=auto_cert_expiry,json=autoCertExpiry" json:"auto_cert_expiry,omitempty"`
	// Auto Cert Subject
	//
	// x-displayName: "Auto Cert Subject"
	// Subject of the auto certificate
	AutoCertSubject string `protobuf:"bytes,3,opt,name=auto_cert_subject,json=autoCertSubject,proto3" json:"auto_cert_subject,omitempty"`
	// Auto Cert Issuer
	//
	// x-displayName: "Auto Cert Issuer"
	// Issuer of the auto certificate
	AutoCertIssuer string `protobuf:"bytes,4,opt,name=auto_cert_issuer,json=autoCertIssuer,proto3" json:"auto_cert_issuer,omitempty"`
}

func (m *AutoCertInfoType) Reset()                    { *m = AutoCertInfoType{} }
func (*AutoCertInfoType) ProtoMessage()               {}
func (*AutoCertInfoType) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{6} }

func (m *AutoCertInfoType) GetAutoCertState() CertificationState {
	if m != nil {
		return m.AutoCertState
	}
	return AutoCertDisabled
}

func (m *AutoCertInfoType) GetAutoCertExpiry() *google_protobuf1.Timestamp {
	if m != nil {
		return m.AutoCertExpiry
	}
	return nil
}

func (m *AutoCertInfoType) GetAutoCertSubject() string {
	if m != nil {
		return m.AutoCertSubject
	}
	return ""
}

func (m *AutoCertInfoType) GetAutoCertIssuer() string {
	if m != nil {
		return m.AutoCertIssuer
	}
	return ""
}

// AuthenticationDetails
//
// x-displayName: "Authentication Details"
// Authentication related information. This allows to configure the URL to redirect after the authentication
// Authentication Object Reference, configuration of cookie params etc
type AuthenticationDetails struct {
	// Authentication Object
	//
	// x-displayName: "Reference to Authentication Object"
	// x-required
	// Reference to Authentication Config Object
	AuthConfig []*ves_io_schema4.ObjectRefType `protobuf:"bytes,1,rep,name=auth_config,json=authConfig" json:"auth_config,omitempty"`
	// Cookie Parameters Configuration
	//
	// x-displayName: "Cookie Parameters"
	//
	// Types that are valid to be assigned to CookieParamsChoice:
	//	*AuthenticationDetails_UseAuthObjectConfig
	//	*AuthenticationDetails_CookieParams
	CookieParamsChoice isAuthenticationDetails_CookieParamsChoice `protobuf_oneof:"cookie_params_choice"`
	// Redirect URL Choice
	//
	// x-displayName: "Redirect URL Configuration"
	// x-required
	// Select Redirect URL
	//
	// Types that are valid to be assigned to RedirectUrlChoice:
	//	*AuthenticationDetails_RedirectUrl
	//	*AuthenticationDetails_RedirectDynamic
	RedirectUrlChoice isAuthenticationDetails_RedirectUrlChoice `protobuf_oneof:"redirect_url_choice"`
}

func (m *AuthenticationDetails) Reset()                    { *m = AuthenticationDetails{} }
func (*AuthenticationDetails) ProtoMessage()               {}
func (*AuthenticationDetails) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{7} }

type isAuthenticationDetails_CookieParamsChoice interface {
	isAuthenticationDetails_CookieParamsChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isAuthenticationDetails_RedirectUrlChoice interface {
	isAuthenticationDetails_RedirectUrlChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type AuthenticationDetails_UseAuthObjectConfig struct {
	UseAuthObjectConfig *ves_io_schema4.Empty `protobuf:"bytes,3,opt,name=use_auth_object_config,json=useAuthObjectConfig,oneof"`
}
type AuthenticationDetails_CookieParams struct {
	CookieParams *ves_io_schema_authentication.CookieParams `protobuf:"bytes,4,opt,name=cookie_params,json=cookieParams,oneof"`
}
type AuthenticationDetails_RedirectUrl struct {
	RedirectUrl string `protobuf:"bytes,6,opt,name=redirect_url,json=redirectUrl,proto3,oneof"`
}
type AuthenticationDetails_RedirectDynamic struct {
	RedirectDynamic *ves_io_schema4.Empty `protobuf:"bytes,7,opt,name=redirect_dynamic,json=redirectDynamic,oneof"`
}

func (*AuthenticationDetails_UseAuthObjectConfig) isAuthenticationDetails_CookieParamsChoice() {}
func (*AuthenticationDetails_CookieParams) isAuthenticationDetails_CookieParamsChoice()        {}
func (*AuthenticationDetails_RedirectUrl) isAuthenticationDetails_RedirectUrlChoice()          {}
func (*AuthenticationDetails_RedirectDynamic) isAuthenticationDetails_RedirectUrlChoice()      {}

func (m *AuthenticationDetails) GetCookieParamsChoice() isAuthenticationDetails_CookieParamsChoice {
	if m != nil {
		return m.CookieParamsChoice
	}
	return nil
}
func (m *AuthenticationDetails) GetRedirectUrlChoice() isAuthenticationDetails_RedirectUrlChoice {
	if m != nil {
		return m.RedirectUrlChoice
	}
	return nil
}

func (m *AuthenticationDetails) GetAuthConfig() []*ves_io_schema4.ObjectRefType {
	if m != nil {
		return m.AuthConfig
	}
	return nil
}

func (m *AuthenticationDetails) GetUseAuthObjectConfig() *ves_io_schema4.Empty {
	if x, ok := m.GetCookieParamsChoice().(*AuthenticationDetails_UseAuthObjectConfig); ok {
		return x.UseAuthObjectConfig
	}
	return nil
}

func (m *AuthenticationDetails) GetCookieParams() *ves_io_schema_authentication.CookieParams {
	if x, ok := m.GetCookieParamsChoice().(*AuthenticationDetails_CookieParams); ok {
		return x.CookieParams
	}
	return nil
}

func (m *AuthenticationDetails) GetRedirectUrl() string {
	if x, ok := m.GetRedirectUrlChoice().(*AuthenticationDetails_RedirectUrl); ok {
		return x.RedirectUrl
	}
	return ""
}

func (m *AuthenticationDetails) GetRedirectDynamic() *ves_io_schema4.Empty {
	if x, ok := m.GetRedirectUrlChoice().(*AuthenticationDetails_RedirectDynamic); ok {
		return x.RedirectDynamic
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*AuthenticationDetails) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _AuthenticationDetails_OneofMarshaler, _AuthenticationDetails_OneofUnmarshaler, _AuthenticationDetails_OneofSizer, []interface{}{
		(*AuthenticationDetails_UseAuthObjectConfig)(nil),
		(*AuthenticationDetails_CookieParams)(nil),
		(*AuthenticationDetails_RedirectUrl)(nil),
		(*AuthenticationDetails_RedirectDynamic)(nil),
	}
}

func _AuthenticationDetails_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*AuthenticationDetails)
	// cookie_params_choice
	switch x := m.CookieParamsChoice.(type) {
	case *AuthenticationDetails_UseAuthObjectConfig:
		_ = b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.UseAuthObjectConfig); err != nil {
			return err
		}
	case *AuthenticationDetails_CookieParams:
		_ = b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.CookieParams); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("AuthenticationDetails.CookieParamsChoice has unexpected type %T", x)
	}
	// redirect_url_choice
	switch x := m.RedirectUrlChoice.(type) {
	case *AuthenticationDetails_RedirectUrl:
		_ = b.EncodeVarint(6<<3 | proto.WireBytes)
		_ = b.EncodeStringBytes(x.RedirectUrl)
	case *AuthenticationDetails_RedirectDynamic:
		_ = b.EncodeVarint(7<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.RedirectDynamic); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("AuthenticationDetails.RedirectUrlChoice has unexpected type %T", x)
	}
	return nil
}

func _AuthenticationDetails_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*AuthenticationDetails)
	switch tag {
	case 3: // cookie_params_choice.use_auth_object_config
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.CookieParamsChoice = &AuthenticationDetails_UseAuthObjectConfig{msg}
		return true, err
	case 4: // cookie_params_choice.cookie_params
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema_authentication.CookieParams)
		err := b.DecodeMessage(msg)
		m.CookieParamsChoice = &AuthenticationDetails_CookieParams{msg}
		return true, err
	case 6: // redirect_url_choice.redirect_url
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.RedirectUrlChoice = &AuthenticationDetails_RedirectUrl{x}
		return true, err
	case 7: // redirect_url_choice.redirect_dynamic
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.RedirectUrlChoice = &AuthenticationDetails_RedirectDynamic{msg}
		return true, err
	default:
		return false, nil
	}
}

func _AuthenticationDetails_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*AuthenticationDetails)
	// cookie_params_choice
	switch x := m.CookieParamsChoice.(type) {
	case *AuthenticationDetails_UseAuthObjectConfig:
		s := proto.Size(x.UseAuthObjectConfig)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *AuthenticationDetails_CookieParams:
		s := proto.Size(x.CookieParams)
		n += proto.SizeVarint(4<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	// redirect_url_choice
	switch x := m.RedirectUrlChoice.(type) {
	case *AuthenticationDetails_RedirectUrl:
		n += proto.SizeVarint(6<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.RedirectUrl)))
		n += len(x.RedirectUrl)
	case *AuthenticationDetails_RedirectDynamic:
		s := proto.Size(x.RedirectDynamic)
		n += proto.SizeVarint(7<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// policy based challenge
//
// x-displayName: "Policy Based Challenge"
// Specifies the settings for policy rule based challenge
type PolicyBasedChallenge struct {
	// Javascript Challenge
	//
	// x-displayName: "Javascript Challenge Parameters"
	// Configure Javascript challenge parameters
	JsChallenge *JavascriptChallengeType `protobuf:"bytes,1,opt,name=js_challenge,json=jsChallenge" json:"js_challenge,omitempty"`
	// Captcha Challenge
	//
	// x-displayName: "Captcha Challenge"
	// Configure Captcha challenge parameters
	CaptchaChallenge *CaptchaChallengeType `protobuf:"bytes,2,opt,name=captcha_challenge,json=captchaChallenge" json:"captcha_challenge,omitempty"`
	// Temporary User Blocking
	//
	// x-displayName: "Temporary User Blocking"
	// Specifies configuration for temporary user blocking resulting from malicious user detection
	TemporaryUserBlocking *TemporaryUserBlockingType `protobuf:"bytes,3,opt,name=temporary_user_blocking,json=temporaryUserBlocking" json:"temporary_user_blocking,omitempty"`
	// challenge choice
	//
	// x-displayName: "Select Type of Challenge"
	// x-required
	// Select the default challenge type for all requests. This can be overriden using the challenge rule list.
	//
	// Types that are valid to be assigned to ChallengeChoice:
	//	*PolicyBasedChallenge_NoChallenge
	//	*PolicyBasedChallenge_AlwaysEnableJsChallenge
	//	*PolicyBasedChallenge_AlwaysEnableCaptchaChallenge
	ChallengeChoice isPolicyBasedChallenge_ChallengeChoice `protobuf_oneof:"challenge_choice"`
	// Malicious User Mitigation
	//
	// x-displayName: "Malicious User Mitigation"
	// Settings that specify the actions to be taken when malicious users are determined to be at different threat levels.
	// User's activity is monitored and continuously analyzed for malicious behavior. From this analysis, a threat level is assigned to each user.
	// The settings defined in malicious user mitigation specify what mitigation actions to take for users determined to be at different threat levels.
	MaliciousUserMitigation []*ves_io_schema4.ObjectRefType `protobuf:"bytes,8,rep,name=malicious_user_mitigation,json=maliciousUserMitigation" json:"malicious_user_mitigation,omitempty"`
}

func (m *PolicyBasedChallenge) Reset()                    { *m = PolicyBasedChallenge{} }
func (*PolicyBasedChallenge) ProtoMessage()               {}
func (*PolicyBasedChallenge) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{8} }

type isPolicyBasedChallenge_ChallengeChoice interface {
	isPolicyBasedChallenge_ChallengeChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type PolicyBasedChallenge_NoChallenge struct {
	NoChallenge *ves_io_schema4.Empty `protobuf:"bytes,5,opt,name=no_challenge,json=noChallenge,oneof"`
}
type PolicyBasedChallenge_AlwaysEnableJsChallenge struct {
	AlwaysEnableJsChallenge *ves_io_schema4.Empty `protobuf:"bytes,6,opt,name=always_enable_js_challenge,json=alwaysEnableJsChallenge,oneof"`
}
type PolicyBasedChallenge_AlwaysEnableCaptchaChallenge struct {
	AlwaysEnableCaptchaChallenge *ves_io_schema4.Empty `protobuf:"bytes,7,opt,name=always_enable_captcha_challenge,json=alwaysEnableCaptchaChallenge,oneof"`
}

func (*PolicyBasedChallenge_NoChallenge) isPolicyBasedChallenge_ChallengeChoice()                  {}
func (*PolicyBasedChallenge_AlwaysEnableJsChallenge) isPolicyBasedChallenge_ChallengeChoice()      {}
func (*PolicyBasedChallenge_AlwaysEnableCaptchaChallenge) isPolicyBasedChallenge_ChallengeChoice() {}

func (m *PolicyBasedChallenge) GetChallengeChoice() isPolicyBasedChallenge_ChallengeChoice {
	if m != nil {
		return m.ChallengeChoice
	}
	return nil
}

func (m *PolicyBasedChallenge) GetJsChallenge() *JavascriptChallengeType {
	if m != nil {
		return m.JsChallenge
	}
	return nil
}

func (m *PolicyBasedChallenge) GetCaptchaChallenge() *CaptchaChallengeType {
	if m != nil {
		return m.CaptchaChallenge
	}
	return nil
}

func (m *PolicyBasedChallenge) GetTemporaryUserBlocking() *TemporaryUserBlockingType {
	if m != nil {
		return m.TemporaryUserBlocking
	}
	return nil
}

func (m *PolicyBasedChallenge) GetNoChallenge() *ves_io_schema4.Empty {
	if x, ok := m.GetChallengeChoice().(*PolicyBasedChallenge_NoChallenge); ok {
		return x.NoChallenge
	}
	return nil
}

func (m *PolicyBasedChallenge) GetAlwaysEnableJsChallenge() *ves_io_schema4.Empty {
	if x, ok := m.GetChallengeChoice().(*PolicyBasedChallenge_AlwaysEnableJsChallenge); ok {
		return x.AlwaysEnableJsChallenge
	}
	return nil
}

func (m *PolicyBasedChallenge) GetAlwaysEnableCaptchaChallenge() *ves_io_schema4.Empty {
	if x, ok := m.GetChallengeChoice().(*PolicyBasedChallenge_AlwaysEnableCaptchaChallenge); ok {
		return x.AlwaysEnableCaptchaChallenge
	}
	return nil
}

func (m *PolicyBasedChallenge) GetMaliciousUserMitigation() []*ves_io_schema4.ObjectRefType {
	if m != nil {
		return m.MaliciousUserMitigation
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*PolicyBasedChallenge) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _PolicyBasedChallenge_OneofMarshaler, _PolicyBasedChallenge_OneofUnmarshaler, _PolicyBasedChallenge_OneofSizer, []interface{}{
		(*PolicyBasedChallenge_NoChallenge)(nil),
		(*PolicyBasedChallenge_AlwaysEnableJsChallenge)(nil),
		(*PolicyBasedChallenge_AlwaysEnableCaptchaChallenge)(nil),
	}
}

func _PolicyBasedChallenge_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*PolicyBasedChallenge)
	// challenge_choice
	switch x := m.ChallengeChoice.(type) {
	case *PolicyBasedChallenge_NoChallenge:
		_ = b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.NoChallenge); err != nil {
			return err
		}
	case *PolicyBasedChallenge_AlwaysEnableJsChallenge:
		_ = b.EncodeVarint(6<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.AlwaysEnableJsChallenge); err != nil {
			return err
		}
	case *PolicyBasedChallenge_AlwaysEnableCaptchaChallenge:
		_ = b.EncodeVarint(7<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.AlwaysEnableCaptchaChallenge); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("PolicyBasedChallenge.ChallengeChoice has unexpected type %T", x)
	}
	return nil
}

func _PolicyBasedChallenge_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*PolicyBasedChallenge)
	switch tag {
	case 5: // challenge_choice.no_challenge
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.ChallengeChoice = &PolicyBasedChallenge_NoChallenge{msg}
		return true, err
	case 6: // challenge_choice.always_enable_js_challenge
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.ChallengeChoice = &PolicyBasedChallenge_AlwaysEnableJsChallenge{msg}
		return true, err
	case 7: // challenge_choice.always_enable_captcha_challenge
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.ChallengeChoice = &PolicyBasedChallenge_AlwaysEnableCaptchaChallenge{msg}
		return true, err
	default:
		return false, nil
	}
}

func _PolicyBasedChallenge_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*PolicyBasedChallenge)
	// challenge_choice
	switch x := m.ChallengeChoice.(type) {
	case *PolicyBasedChallenge_NoChallenge:
		s := proto.Size(x.NoChallenge)
		n += proto.SizeVarint(5<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *PolicyBasedChallenge_AlwaysEnableJsChallenge:
		s := proto.Size(x.AlwaysEnableJsChallenge)
		n += proto.SizeVarint(6<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *PolicyBasedChallenge_AlwaysEnableCaptchaChallenge:
		s := proto.Size(x.AlwaysEnableCaptchaChallenge)
		n += proto.SizeVarint(7<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// GlobalSpecType
//
// x-displayName: "Global Configuration Specification"
// Configuration specification for VirtualHost
type GlobalSpecType struct {
	// domains
	//
	// x-displayName: "Domains"
	// x-example: "www.foo.com"
	// A list of domains (host/authority header) that will be matched to this virtual host.
	// Wildcard hosts are supported in the suffix or prefix form
	//
	// Domain search order:
	//  1. Exact domain names: www.foo.com.
	//  2. Prefix domain wildcards: *.foo.com or *-bar.foo.com.
	//  3. Special wildcard * matching any domain.
	//
	// Wildcard will not match empty string.
	// e.g. *-bar.foo.com will match baz-bar.foo.com but not -bar.foo.com.
	// The longest wildcards match first.
	// Only a single virtual host in the entire route configuration can match on *.
	// Also a domain must be unique across all virtual hosts within an advertise policy.
	//
	// Domains are also used for SNI matching if the virtual host proxy type is TCP_PROXY_WITH_SNI/HTTPS_PROXY
	// Domains also indicate the list of names for which DNS resolution will be done by VER
	Domains []string `protobuf:"bytes,2,rep,name=domains" json:"domains,omitempty"`
	// routes
	//
	// x-displayName: "Routes"
	// The list of routes that will be matched, in order, for incoming requests.
	// The first route that matches will be used. Currently route object is redundant in case of TCP proxy but required.
	// For TCP_PROXY/TCP_PROXY_WITH_SNI/SMA_PROXY VirtualHosts, the route object only specifies the cluster/weighted-cluster
	// as route destination without any match condition. In other words, match condition in route object is ignored for
	// TCP_PROXY/TCP_PROXY_WITH_SNI/SMA_PROXY VirtualHosts. Routes used for TCP_PROXY/TCP_PROXY_WITH_SNI/SMA_PROXY
	// VirtualHosts cannot have DirectResponse or Redirect as actions.
	Routes []*ves_io_schema4.ObjectRefType `protobuf:"bytes,3,rep,name=routes" json:"routes,omitempty"`
	// javascript_info
	//
	// x-displayName: "Javascript Info"
	// Custom JavaScript Configuration. Custom JavaScript code can be executed at various stages of request processing.
	JavascriptInfo *JavaScriptConfigType `protobuf:"bytes,4,opt,name=javascript_info,json=javascriptInfo" json:"javascript_info,omitempty"`
	// Advertise Policy
	//
	// x-displayName: "Advertise Policies"
	// Advertise Policy allows you to define networks or sites where you want a VIP for this virtual host to be advertised.
	// Each Policy rule can have different parameters, like TLS configuration, ports, optionally ip address to be used for VIP.
	// If advertise policy is not specified then no VIP is assigned for this virtual host.
	AdvertisePolicies []*ves_io_schema4.ObjectRefType `protobuf:"bytes,5,rep,name=advertise_policies,json=advertisePolicies" json:"advertise_policies,omitempty"`
	// Headers to add in request
	//
	// x-displayName: "Add Request Headers"
	// Headers are key-value pairs to be added to HTTP request being routed towards upstream.
	// Headers specified at this level are applied after headers from matched Route are applied
	RequestHeadersToAdd []*ves_io_schema4.HeaderManipulationOptionType `protobuf:"bytes,6,rep,name=request_headers_to_add,json=requestHeadersToAdd" json:"request_headers_to_add,omitempty"`
	// Headers to add in response
	//
	// x-displayName: "Add Response Headers"
	// Headers are key-value pairs to be added to HTTP response being sent towards downstream.
	// Headers specified at this level are applied after headers from matched Route are applied
	ResponseHeadersToAdd []*ves_io_schema4.HeaderManipulationOptionType `protobuf:"bytes,7,rep,name=response_headers_to_add,json=responseHeadersToAdd" json:"response_headers_to_add,omitempty"`
	// Header to be removed from request
	//
	// x-displayName: "Remove Request Headers"
	// x-example: "host"
	// List of keys of Headers to be removed from the HTTP request being sent towards upstream.
	RequestHeadersToRemove []string `protobuf:"bytes,17,rep,name=request_headers_to_remove,json=requestHeadersToRemove" json:"request_headers_to_remove,omitempty"`
	// Header to be removed from response
	//
	// x-displayName: "Remove Response Headers"
	// x-example: "host"
	// List of keys of Headers to be removed from the HTTP response being sent towards downstream.
	ResponseHeadersToRemove []string `protobuf:"bytes,8,rep,name=response_headers_to_remove,json=responseHeadersToRemove" json:"response_headers_to_remove,omitempty"`
	// TLS parameters.
	//
	// x-displayName: "TLS Parameters"
	// TLS parameters for downstream connections. These parameters are used if not specified
	// in advertise policy
	TlsParameters *ves_io_schema4.DownstreamTlsParamsType `protobuf:"bytes,9,opt,name=tls_parameters,json=tlsParameters" json:"tls_parameters,omitempty"`
	// Virtual host type
	//
	// x-displayName: "Virtual Host Type"
	// VirtualHostType indicates if virtual_host is used as VIRTUAL_SERVICE/LOAD_BALANCER/API_GATEWAY.
	// Functionally, all types are same, this is mainly used for categorizing metrics and UI visualization.
	Type VirtualHostType `protobuf:"varint,10,opt,name=type,proto3,enum=ves.io.schema.virtual_host.VirtualHostType" json:"type,omitempty"`
	// Buffer configuration for requests
	//
	// x-displayName: "Buffer Policy"
	// Some upstream applications are not capable of handling streamed data and high network latency.
	// This config enables buffering the entire request before sending to upstream application. We can
	// specify the maximum buffer size and buffer interval with this config.
	BufferPolicy *ves_io_schema4.BufferConfigType `protobuf:"bytes,12,opt,name=buffer_policy,json=bufferPolicy" json:"buffer_policy,omitempty"`
	// Cross-Origin Resource Sharing (CORS) configuration for requests
	//
	// x-displayName: "CORS Policy"
	// CORS is a mechanism that uses additional HTTP headers to tell a browser to let
	// a web application running at one origin (domain) have permission to access selected
	// resources from a server at a different origin
	CorsPolicy *ves_io_schema4.CorsPolicy `protobuf:"bytes,13,opt,name=cors_policy,json=corsPolicy" json:"cors_policy,omitempty"`
	// Proxy Type
	//
	// x-displayName: "Proxy Type"
	// Indicates whether the type of proxy is HTTP/HTTPS/TCP/UDP/Secret Management Access
	Proxy ProxyType `protobuf:"varint,15,opt,name=proxy,proto3,enum=ves.io.schema.virtual_host.ProxyType" json:"proxy,omitempty"`
	// JSON Web Token authentication (JWT) configuration for requests
	//
	// x-displayName: "JWT Config"
	// This HTTP filter specifies how to verify JSON Web Token (JWT). It will verify its signature,
	// audiences and issuer
	Jwt []*ves_io_schema4.ObjectRefType `protobuf:"bytes,16,rep,name=jwt" json:"jwt,omitempty"`
	// Enable the WAF (Web Application Firewall) functionality for VirtualHost
	//
	// x-displayName: "WAF Config"
	// WAF can be used to analyze inbound and outbound http/https traffic.
	// WAF can be configured either in BLOCKing Mode or ALERTing Mode.
	// In BLOCKing mode if WAF detects suspicious inbound/outbound traffic it blocks the request or response.
	// In ALERTing mode if suspicious traffic is detected, WAF generates ALERTs with details on the
	// suspicious traffic (instead of blocking traffic).
	//
	// waf_type can be either WAF or WAFRules.
	// WAF Object allows to
	//     Configure mode of the WAF (BLOCK/ALERT)
	//     Configure language used by the application which is being protected by the WAF
	//     Disable different high level security tags if required (e.g. SQLI_DETECTION, XSS_DETECTION etc)
	// WAFRules allows to
	//     Configure mode of the WAF (BLOCK/ALERT)
	//     Enable/Disable individual WAF security rules
	WafType *ves_io_schema4.WafType `protobuf:"bytes,18,opt,name=waf_type,json=wafType" json:"waf_type,omitempty"`
	// Enable the dynamic resolution of the endpoint
	//
	// x-displayName: "Dynamic Reverse Proxy"
	// In this mode of proxy, virtual host will resolve the destination endpoint dynamically.
	//
	// The dynamic resolution is done using a predefined field in the request. This predefined
	// field depends on the ProxyType configured on the Virtual Host.
	//
	// For HTTP traffic, i.e. with ProxyType as HTTP_PROXY or HTTPS_PROXY, virtual host will use the
	// "HOST" http header from the request and perform DNS resolution to select destination endpoint.
	//
	// For TCP traffic with SNI, (If the ProxyType is TCP_PROXY_WITH_SNI), virtual host will perform DNS
	// resolution using the SNI.
	//
	// The DNS resolution is performed in the virtual network specified in outside_network_type or
	// outside_network
	//
	// In both modes of operation(either using Host header or SNI), the DNS resolution could return
	// multiple addresses. First IPv4 address from such returned list is used as endpoint for the
	// request. The DNS response is cached for 60s by default.
	DynamicReverseProxy *DynamicReverseProxyType `protobuf:"bytes,19,opt,name=dynamic_reverse_proxy,json=dynamicReverseProxy" json:"dynamic_reverse_proxy,omitempty"`
	// Add Site information
	//
	// x-displayName: "Add Location"
	// x-example: "true"
	// x-example: true
	// Appends header x-volterra-location = <re-site-name> in responses. This configuration
	// is ignored on CE sites.
	AddLocation bool `protobuf:"varint,20,opt,name=add_location,json=addLocation,proto3" json:"add_location,omitempty"`
	// Compression configuration
	//
	// x-displayName: "Compression Parameters"
	// Enables loadbalancer to compress dispatched data from an upstream service upon client request.
	// Only GZIP compression is supported
	CompressionParams *CompressionType `protobuf:"bytes,21,opt,name=compression_params,json=compressionParams" json:"compression_params,omitempty"`
	// Custom Errors
	//
	// x-displayName: "Custom Error Responses"
	// x-example: "value"
	//
	// Map of integer error codes as keys and string values that can be used to provide custom
	// http pages for each error code.
	// Key of the map can be either response code class or HTTP Error code. Response code classes
	// for key is configured as follows
	// 3 -- for 3xx response code class
	// 4 -- for 4xx response code class
	// 5 -- for 5xx response code class
	// Value is the uri_ref. Currently supported URL schemes is string:///.
	// For string:/// scheme, message needs to be encoded in Base64 format.
	// You can specify this message as base64 encoded plain text message e.g. "Access Denied"
	// or it can be HTML paragraph or a body string encoded as base64 string
	// E.g. "<p> Access Denied </p>". Base64 encoded string for this html is "PHA+IEFjY2VzcyBEZW5pZWQgPC9wPg=="
	// Specific response code takes preference when both response code and response code class
	// matches for a request.
	//
	// The configured custom errors are only applicable for loadbalancer generated errors.
	// Errors returned from upstream server is propagated as is.
	//
	// Volterra provides default error pages for the errors generated by the loadbalancer. Content of
	// these pages are not editable. User has an option to disable the use of default Volterra error pages
	CustomErrors map[uint32]string `protobuf:"bytes,22,rep,name=custom_errors,json=customErrors" json:"custom_errors,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Disable use of default Error page
	//
	// x-displayName: "Disable default error pages"
	// x-example: "true"
	//
	// An option to specify whether to disable using default Volterra error pages
	DisableDefaultErrorPages bool `protobuf:"varint,33,opt,name=disable_default_error_pages,json=disableDefaultErrorPages,proto3" json:"disable_default_error_pages,omitempty"`
	// Maximum request header size
	//
	// x-displayName: "Maximum Request Header Size (KiB)"
	// x-example: "42"
	//
	// The maximum request header size in KiB for incoming connections.
	//
	// If un-configured, the default max request headers allowed is 60 KiB.
	//
	// Requests that exceed this limit will receive a 431 response.
	//
	// The max configurable limit is 96 KiB, based on current implementation constraints.
	//
	// Note:
	//   a. This configuration parameter is applicable only for HTTP_PROXY and HTTPS_PROXY
	//   b. When multiple HTTP_PROXY virtual hosts share the same advertise policy, the effective
	//      "maximum request header size" for such virtual hosts is the highest value configured
	//      on any of the virtual hosts
	MaxRequestHeaderSize uint32 `protobuf:"varint,23,opt,name=max_request_header_size,json=maxRequestHeaderSize,proto3" json:"max_request_header_size,omitempty"`
	// Challenge choice
	//
	// x-displayName: "Select Type of Challenge"
	// x-required
	// Selection of different types of challenge at Virtual Host
	//
	// Types that are valid to be assigned to ChallengeType:
	//	*GlobalSpecType_NoChallenge
	//	*GlobalSpecType_JsChallenge
	//	*GlobalSpecType_CaptchaChallenge
	//	*GlobalSpecType_PolicyBasedChallenge
	ChallengeType isGlobalSpecType_ChallengeType `protobuf_oneof:"challenge_type"`
	// user_identification
	//
	// x-displayName: "User Identification Policy"
	// A reference to user_identification object.
	// The rules in the user_identification object are evaluated to determine the user identifier to be rate limited.
	UserIdentification []*ves_io_schema4.ObjectRefType `protobuf:"bytes,25,rep,name=user_identification,json=userIdentification" json:"user_identification,omitempty"`
	// rate_limiter
	//
	// x-displayName: "Rate Limiter"
	// A reference to rate_limiter object.
	// Requests to the virtual_host are rate limited based on the parameters specified in the rate_limiter.
	RateLimiter []*ves_io_schema4.ObjectRefType `protobuf:"bytes,26,rep,name=rate_limiter,json=rateLimiter" json:"rate_limiter,omitempty"`
	// rate_limiter_allowed_prefixes
	//
	// x-displayName: "Rate Limiter Allowed Prefixes"
	// References to ip_prefix_set objects.
	// Requests from source IP addresses that are covered by one of the allowed IP Prefixes are not subjected to rate limiting.
	RateLimiterAllowedPrefixes []*ves_io_schema4.ObjectRefType `protobuf:"bytes,27,rep,name=rate_limiter_allowed_prefixes,json=rateLimiterAllowedPrefixes" json:"rate_limiter_allowed_prefixes,omitempty"`
	// retry_policy
	//
	// x-displayName: "Retry Policy"
	// Indicates that the virtual_host has a retry policy.
	RetryPolicy *ves_io_schema4.RetryPolicyType `protobuf:"bytes,28,opt,name=retry_policy,json=retryPolicy" json:"retry_policy,omitempty"`
	// Temporary User Blocking
	//
	// x-displayName: "Temporary User Blocking"
	// Specifies configuration for temporary user blocking resulting from malicious user detection
	TemporaryUserBlocking *TemporaryUserBlockingType `protobuf:"bytes,35,opt,name=temporary_user_blocking,json=temporaryUserBlocking" json:"temporary_user_blocking,omitempty"`
	// Malicious User Mitigation
	//
	// x-displayName: "Malicious User Mitigation"
	// Settings that specify the actions to be taken when malicious users are determined to be at different threat levels.
	// User's activity is monitored and continuously analyzed for malicious behavior. From this analysis, a threat level is assigned to each user.
	// The settings defined in malicious user mitigation specify what mitigation actions to take for users determined to be at different threat levels.
	MaliciousUserMitigation []*ves_io_schema4.ObjectRefType `protobuf:"bytes,36,rep,name=malicious_user_mitigation,json=maliciousUserMitigation" json:"malicious_user_mitigation,omitempty"`
	// TLS Interception
	//
	// x-displayName: "TLS Interception"
	//
	// Specify TLS interception configuration for the virtual host
	TlsIntercept *ves_io_schema4.TlsInterceptionType `protobuf:"bytes,37,opt,name=tls_intercept,json=tlsIntercept" json:"tls_intercept,omitempty"`
	// Authentication Configuration
	//
	// x-displayName: "Authentication Details"
	// Enable or Disable Authentication
	//
	// Types that are valid to be assigned to AuthenticationChoice:
	//	*GlobalSpecType_NoAuthentication
	//	*GlobalSpecType_Authentication
	AuthenticationChoice isGlobalSpecType_AuthenticationChoice `protobuf_oneof:"authentication_choice"`
	// Idle timeout
	//
	// x-displayName: "Idle timeout (in milliseconds)"
	// x-example: "2000"
	// Idle timeout is the amount of time that the loadbalancer will allow a stream to exist with
	// no upstream or downstream activity.
	//
	// Idle timeout and Proxy Type:
	//
	// HTTP_PROXY, HTTPS_PROXY:
	// Idle timer is started when the first byte is received on the connection.
	// Each time an encode/decode event for headers or data is processed for the stream,
	// the timer will be reset.
	// If the timeout fires, the stream is terminated with a 408 (Request Timeout) error code if
	// no upstream response header has been received, otherwise a stream reset occurs.
	// The default idle timeout is 30 seconds
	//
	// TCP PROXY, TCP_PROXY_WITH_SNI, SMA_PROXY:
	// The idle timeout is defined as the period in which there are no bytes sent or received on
	// either the upstream or downstream connection.
	// The default idle timeout is 1 hour.
	//
	// UDP PROXY:
	// The idle timeout for sessions. Idle timeout is defined as the period in which there are no
	// datagrams sent or received on the session.
	// The default if not specified is 1 minute.
	IdleTimeout uint32 `protobuf:"varint,32,opt,name=idle_timeout,json=idleTimeout,proto3" json:"idle_timeout,omitempty"`
	// Disable DNS Resolve
	//
	// x-displayName: "Disable DNS resolution"
	// x-example: "false"
	//
	// Disable DNS resolution for domains specified in the virtual host
	//
	// When the  virtual host is configured as Dynamive Resolve Proxy (DRP), disable DNS resolution
	// for domains configured.  This configuration is suitable for HTTP CONNECT proxy.
	DisableDnsResolve bool `protobuf:"varint,34,opt,name=disable_dns_resolve,json=disableDnsResolve,proto3" json:"disable_dns_resolve,omitempty"`
	// Server Header configuration
	//
	// x-displayName: "Server Header value to be used in response"
	// Specify Server Header value to be used in responses
	//
	// Types that are valid to be assigned to ServerHeaderChoice:
	//	*GlobalSpecType_DefaultHeader
	//	*GlobalSpecType_ServerName
	//	*GlobalSpecType_AppendServerName
	//	*GlobalSpecType_PassThrough
	ServerHeaderChoice isGlobalSpecType_ServerHeaderChoice `protobuf_oneof:"server_header_choice"`
	// DNS Volterra Managed
	//
	// x-displayName: "DNS Volterra Managed"
	// Is DNS for the specified domain managed by volterra. If this field is set, DNS record will be automatically added to the DNS domain.
	DnsVolterraManaged bool `protobuf:"varint,1000,opt,name=dns_volterra_managed,json=dnsVolterraManaged,proto3" json:"dns_volterra_managed,omitempty"`
	// DNS domain refs
	//
	// x-displayName: "DNS Domains"
	// Internal reference to dns_domain object
	DnsDomains []*ves_io_schema4.ObjectRefType `protobuf:"bytes,1001,rep,name=dns_domains,json=dnsDomains" json:"dns_domains,omitempty"`
	// Auto Certificates
	//
	// x-displayName: "Auto Certificates"
	// Automatically generated certificates. If this field is set, the user cannot specifi the TLS certificates
	AutoCert bool `protobuf:"varint,1002,opt,name=auto_cert,json=autoCert,proto3" json:"auto_cert,omitempty"`
	// Virtual Host state
	//
	// x-displayName: "Virtual Host State"
	// State of the virtual host
	State VirtualHostState `protobuf:"varint,1003,opt,name=state,proto3,enum=ves.io.schema.virtual_host.VirtualHostState" json:"state,omitempty"`
	// host name
	//
	// x-displayName: "Host Name"
	// x-example: "ves-io-cf8684b9-a18f-4843-a24f-1f9ee8ea2776.ac.vh.ves.io"
	// Internally generated host name to be used for the virtual host
	HostName string `protobuf:"bytes,1004,opt,name=host_name,json=hostName,proto3" json:"host_name,omitempty"`
	// DNS information
	//
	// x-displayName: "DNS Information"
	// DNS information for this virtual host
	DnsInfo []*ves_io_schema_virtual_host_dns_info.DnsInfo `protobuf:"bytes,1005,rep,name=dns_info,json=dnsInfo" json:"dns_info,omitempty"`
	// Auto Cert State
	//
	// x-displayName: "Auto Cert State"
	// State of auto certificate generation.
	AutoCertState CertificationState `protobuf:"varint,1006,opt,name=auto_cert_state,json=autoCertState,proto3,enum=ves.io.schema.virtual_host.CertificationState" json:"auto_cert_state,omitempty"`
	// Auto Cert Information
	//
	// x-displayName: "Auto Cert Information"
	// Auto certificate related information
	AutoCertInfo *AutoCertInfoType `protobuf:"bytes,1010,opt,name=auto_cert_info,json=autoCertInfo" json:"auto_cert_info,omitempty"`
	// User Domains
	//
	// x-displayName: "User Provided Domains"
	// User Provided domains. Used internally.
	UserDomains []string `protobuf:"bytes,1011,rep,name=user_domains,json=userDomains" json:"user_domains,omitempty"`
	// Service Policy Sets
	//
	// x-displayName: "Service Policy Sets"
	// Per VH service policy sets, created by system via policies in the http load balancer and http connect view.
	ServicePolicySets []*ves_io_schema4.ObjectRefType `protobuf:"bytes,1012,rep,name=service_policy_sets,json=servicePolicySets" json:"service_policy_sets,omitempty"`
	// loadbalancer_algorithm
	//
	// x-displayName: "LoadBalancer Algorithm"
	// When a connection to a endpoint in an upstream cluster is required, the loadbalancer uses
	// loadbalancer_algorithm to determine which host is selected.
	LoadbalancerAlgorithm ves_io_schema_cluster.LoadbalancerAlgorithm `protobuf:"varint,1013,opt,name=loadbalancer_algorithm,json=loadbalancerAlgorithm,proto3,enum=ves.io.schema.cluster.LoadbalancerAlgorithm" json:"loadbalancer_algorithm,omitempty"`
}

func (m *GlobalSpecType) Reset()                    { *m = GlobalSpecType{} }
func (*GlobalSpecType) ProtoMessage()               {}
func (*GlobalSpecType) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{9} }

type isGlobalSpecType_ChallengeType interface {
	isGlobalSpecType_ChallengeType()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isGlobalSpecType_AuthenticationChoice interface {
	isGlobalSpecType_AuthenticationChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isGlobalSpecType_ServerHeaderChoice interface {
	isGlobalSpecType_ServerHeaderChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type GlobalSpecType_NoChallenge struct {
	NoChallenge *ves_io_schema4.Empty `protobuf:"bytes,31,opt,name=no_challenge,json=noChallenge,oneof"`
}
type GlobalSpecType_JsChallenge struct {
	JsChallenge *JavascriptChallengeType `protobuf:"bytes,24,opt,name=js_challenge,json=jsChallenge,oneof"`
}
type GlobalSpecType_CaptchaChallenge struct {
	CaptchaChallenge *CaptchaChallengeType `protobuf:"bytes,29,opt,name=captcha_challenge,json=captchaChallenge,oneof"`
}
type GlobalSpecType_PolicyBasedChallenge struct {
	PolicyBasedChallenge *PolicyBasedChallenge `protobuf:"bytes,41,opt,name=policy_based_challenge,json=policyBasedChallenge,oneof"`
}
type GlobalSpecType_NoAuthentication struct {
	NoAuthentication *ves_io_schema4.Empty `protobuf:"bytes,39,opt,name=no_authentication,json=noAuthentication,oneof"`
}
type GlobalSpecType_Authentication struct {
	Authentication *AuthenticationDetails `protobuf:"bytes,40,opt,name=authentication,oneof"`
}
type GlobalSpecType_DefaultHeader struct {
	DefaultHeader *ves_io_schema4.Empty `protobuf:"bytes,43,opt,name=default_header,json=defaultHeader,oneof"`
}
type GlobalSpecType_ServerName struct {
	ServerName string `protobuf:"bytes,44,opt,name=server_name,json=serverName,proto3,oneof"`
}
type GlobalSpecType_AppendServerName struct {
	AppendServerName string `protobuf:"bytes,45,opt,name=append_server_name,json=appendServerName,proto3,oneof"`
}
type GlobalSpecType_PassThrough struct {
	PassThrough *ves_io_schema4.Empty `protobuf:"bytes,46,opt,name=pass_through,json=passThrough,oneof"`
}

func (*GlobalSpecType_NoChallenge) isGlobalSpecType_ChallengeType()             {}
func (*GlobalSpecType_JsChallenge) isGlobalSpecType_ChallengeType()             {}
func (*GlobalSpecType_CaptchaChallenge) isGlobalSpecType_ChallengeType()        {}
func (*GlobalSpecType_PolicyBasedChallenge) isGlobalSpecType_ChallengeType()    {}
func (*GlobalSpecType_NoAuthentication) isGlobalSpecType_AuthenticationChoice() {}
func (*GlobalSpecType_Authentication) isGlobalSpecType_AuthenticationChoice()   {}
func (*GlobalSpecType_DefaultHeader) isGlobalSpecType_ServerHeaderChoice()      {}
func (*GlobalSpecType_ServerName) isGlobalSpecType_ServerHeaderChoice()         {}
func (*GlobalSpecType_AppendServerName) isGlobalSpecType_ServerHeaderChoice()   {}
func (*GlobalSpecType_PassThrough) isGlobalSpecType_ServerHeaderChoice()        {}

func (m *GlobalSpecType) GetChallengeType() isGlobalSpecType_ChallengeType {
	if m != nil {
		return m.ChallengeType
	}
	return nil
}
func (m *GlobalSpecType) GetAuthenticationChoice() isGlobalSpecType_AuthenticationChoice {
	if m != nil {
		return m.AuthenticationChoice
	}
	return nil
}
func (m *GlobalSpecType) GetServerHeaderChoice() isGlobalSpecType_ServerHeaderChoice {
	if m != nil {
		return m.ServerHeaderChoice
	}
	return nil
}

func (m *GlobalSpecType) GetDomains() []string {
	if m != nil {
		return m.Domains
	}
	return nil
}

func (m *GlobalSpecType) GetRoutes() []*ves_io_schema4.ObjectRefType {
	if m != nil {
		return m.Routes
	}
	return nil
}

func (m *GlobalSpecType) GetJavascriptInfo() *JavaScriptConfigType {
	if m != nil {
		return m.JavascriptInfo
	}
	return nil
}

func (m *GlobalSpecType) GetAdvertisePolicies() []*ves_io_schema4.ObjectRefType {
	if m != nil {
		return m.AdvertisePolicies
	}
	return nil
}

func (m *GlobalSpecType) GetRequestHeadersToAdd() []*ves_io_schema4.HeaderManipulationOptionType {
	if m != nil {
		return m.RequestHeadersToAdd
	}
	return nil
}

func (m *GlobalSpecType) GetResponseHeadersToAdd() []*ves_io_schema4.HeaderManipulationOptionType {
	if m != nil {
		return m.ResponseHeadersToAdd
	}
	return nil
}

func (m *GlobalSpecType) GetRequestHeadersToRemove() []string {
	if m != nil {
		return m.RequestHeadersToRemove
	}
	return nil
}

func (m *GlobalSpecType) GetResponseHeadersToRemove() []string {
	if m != nil {
		return m.ResponseHeadersToRemove
	}
	return nil
}

func (m *GlobalSpecType) GetTlsParameters() *ves_io_schema4.DownstreamTlsParamsType {
	if m != nil {
		return m.TlsParameters
	}
	return nil
}

func (m *GlobalSpecType) GetType() VirtualHostType {
	if m != nil {
		return m.Type
	}
	return VIRTUAL_SERVICE
}

func (m *GlobalSpecType) GetBufferPolicy() *ves_io_schema4.BufferConfigType {
	if m != nil {
		return m.BufferPolicy
	}
	return nil
}

func (m *GlobalSpecType) GetCorsPolicy() *ves_io_schema4.CorsPolicy {
	if m != nil {
		return m.CorsPolicy
	}
	return nil
}

func (m *GlobalSpecType) GetProxy() ProxyType {
	if m != nil {
		return m.Proxy
	}
	return HTTP_PROXY
}

func (m *GlobalSpecType) GetJwt() []*ves_io_schema4.ObjectRefType {
	if m != nil {
		return m.Jwt
	}
	return nil
}

func (m *GlobalSpecType) GetWafType() *ves_io_schema4.WafType {
	if m != nil {
		return m.WafType
	}
	return nil
}

func (m *GlobalSpecType) GetDynamicReverseProxy() *DynamicReverseProxyType {
	if m != nil {
		return m.DynamicReverseProxy
	}
	return nil
}

func (m *GlobalSpecType) GetAddLocation() bool {
	if m != nil {
		return m.AddLocation
	}
	return false
}

func (m *GlobalSpecType) GetCompressionParams() *CompressionType {
	if m != nil {
		return m.CompressionParams
	}
	return nil
}

func (m *GlobalSpecType) GetCustomErrors() map[uint32]string {
	if m != nil {
		return m.CustomErrors
	}
	return nil
}

func (m *GlobalSpecType) GetDisableDefaultErrorPages() bool {
	if m != nil {
		return m.DisableDefaultErrorPages
	}
	return false
}

func (m *GlobalSpecType) GetMaxRequestHeaderSize() uint32 {
	if m != nil {
		return m.MaxRequestHeaderSize
	}
	return 0
}

func (m *GlobalSpecType) GetNoChallenge() *ves_io_schema4.Empty {
	if x, ok := m.GetChallengeType().(*GlobalSpecType_NoChallenge); ok {
		return x.NoChallenge
	}
	return nil
}

func (m *GlobalSpecType) GetJsChallenge() *JavascriptChallengeType {
	if x, ok := m.GetChallengeType().(*GlobalSpecType_JsChallenge); ok {
		return x.JsChallenge
	}
	return nil
}

func (m *GlobalSpecType) GetCaptchaChallenge() *CaptchaChallengeType {
	if x, ok := m.GetChallengeType().(*GlobalSpecType_CaptchaChallenge); ok {
		return x.CaptchaChallenge
	}
	return nil
}

func (m *GlobalSpecType) GetPolicyBasedChallenge() *PolicyBasedChallenge {
	if x, ok := m.GetChallengeType().(*GlobalSpecType_PolicyBasedChallenge); ok {
		return x.PolicyBasedChallenge
	}
	return nil
}

func (m *GlobalSpecType) GetUserIdentification() []*ves_io_schema4.ObjectRefType {
	if m != nil {
		return m.UserIdentification
	}
	return nil
}

func (m *GlobalSpecType) GetRateLimiter() []*ves_io_schema4.ObjectRefType {
	if m != nil {
		return m.RateLimiter
	}
	return nil
}

func (m *GlobalSpecType) GetRateLimiterAllowedPrefixes() []*ves_io_schema4.ObjectRefType {
	if m != nil {
		return m.RateLimiterAllowedPrefixes
	}
	return nil
}

func (m *GlobalSpecType) GetRetryPolicy() *ves_io_schema4.RetryPolicyType {
	if m != nil {
		return m.RetryPolicy
	}
	return nil
}

func (m *GlobalSpecType) GetTemporaryUserBlocking() *TemporaryUserBlockingType {
	if m != nil {
		return m.TemporaryUserBlocking
	}
	return nil
}

func (m *GlobalSpecType) GetMaliciousUserMitigation() []*ves_io_schema4.ObjectRefType {
	if m != nil {
		return m.MaliciousUserMitigation
	}
	return nil
}

func (m *GlobalSpecType) GetTlsIntercept() *ves_io_schema4.TlsInterceptionType {
	if m != nil {
		return m.TlsIntercept
	}
	return nil
}

func (m *GlobalSpecType) GetNoAuthentication() *ves_io_schema4.Empty {
	if x, ok := m.GetAuthenticationChoice().(*GlobalSpecType_NoAuthentication); ok {
		return x.NoAuthentication
	}
	return nil
}

func (m *GlobalSpecType) GetAuthentication() *AuthenticationDetails {
	if x, ok := m.GetAuthenticationChoice().(*GlobalSpecType_Authentication); ok {
		return x.Authentication
	}
	return nil
}

func (m *GlobalSpecType) GetIdleTimeout() uint32 {
	if m != nil {
		return m.IdleTimeout
	}
	return 0
}

func (m *GlobalSpecType) GetDisableDnsResolve() bool {
	if m != nil {
		return m.DisableDnsResolve
	}
	return false
}

func (m *GlobalSpecType) GetDefaultHeader() *ves_io_schema4.Empty {
	if x, ok := m.GetServerHeaderChoice().(*GlobalSpecType_DefaultHeader); ok {
		return x.DefaultHeader
	}
	return nil
}

func (m *GlobalSpecType) GetServerName() string {
	if x, ok := m.GetServerHeaderChoice().(*GlobalSpecType_ServerName); ok {
		return x.ServerName
	}
	return ""
}

func (m *GlobalSpecType) GetAppendServerName() string {
	if x, ok := m.GetServerHeaderChoice().(*GlobalSpecType_AppendServerName); ok {
		return x.AppendServerName
	}
	return ""
}

func (m *GlobalSpecType) GetPassThrough() *ves_io_schema4.Empty {
	if x, ok := m.GetServerHeaderChoice().(*GlobalSpecType_PassThrough); ok {
		return x.PassThrough
	}
	return nil
}

func (m *GlobalSpecType) GetDnsVolterraManaged() bool {
	if m != nil {
		return m.DnsVolterraManaged
	}
	return false
}

func (m *GlobalSpecType) GetDnsDomains() []*ves_io_schema4.ObjectRefType {
	if m != nil {
		return m.DnsDomains
	}
	return nil
}

func (m *GlobalSpecType) GetAutoCert() bool {
	if m != nil {
		return m.AutoCert
	}
	return false
}

func (m *GlobalSpecType) GetState() VirtualHostState {
	if m != nil {
		return m.State
	}
	return VIRTUAL_HOST_READY
}

func (m *GlobalSpecType) GetHostName() string {
	if m != nil {
		return m.HostName
	}
	return ""
}

func (m *GlobalSpecType) GetDnsInfo() []*ves_io_schema_virtual_host_dns_info.DnsInfo {
	if m != nil {
		return m.DnsInfo
	}
	return nil
}

func (m *GlobalSpecType) GetAutoCertState() CertificationState {
	if m != nil {
		return m.AutoCertState
	}
	return AutoCertDisabled
}

func (m *GlobalSpecType) GetAutoCertInfo() *AutoCertInfoType {
	if m != nil {
		return m.AutoCertInfo
	}
	return nil
}

func (m *GlobalSpecType) GetUserDomains() []string {
	if m != nil {
		return m.UserDomains
	}
	return nil
}

func (m *GlobalSpecType) GetServicePolicySets() []*ves_io_schema4.ObjectRefType {
	if m != nil {
		return m.ServicePolicySets
	}
	return nil
}

func (m *GlobalSpecType) GetLoadbalancerAlgorithm() ves_io_schema_cluster.LoadbalancerAlgorithm {
	if m != nil {
		return m.LoadbalancerAlgorithm
	}
	return ves_io_schema_cluster.ROUND_ROBIN
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*GlobalSpecType) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _GlobalSpecType_OneofMarshaler, _GlobalSpecType_OneofUnmarshaler, _GlobalSpecType_OneofSizer, []interface{}{
		(*GlobalSpecType_NoChallenge)(nil),
		(*GlobalSpecType_JsChallenge)(nil),
		(*GlobalSpecType_CaptchaChallenge)(nil),
		(*GlobalSpecType_PolicyBasedChallenge)(nil),
		(*GlobalSpecType_NoAuthentication)(nil),
		(*GlobalSpecType_Authentication)(nil),
		(*GlobalSpecType_DefaultHeader)(nil),
		(*GlobalSpecType_ServerName)(nil),
		(*GlobalSpecType_AppendServerName)(nil),
		(*GlobalSpecType_PassThrough)(nil),
	}
}

func _GlobalSpecType_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*GlobalSpecType)
	// challenge_type
	switch x := m.ChallengeType.(type) {
	case *GlobalSpecType_NoChallenge:
		_ = b.EncodeVarint(31<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.NoChallenge); err != nil {
			return err
		}
	case *GlobalSpecType_JsChallenge:
		_ = b.EncodeVarint(24<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.JsChallenge); err != nil {
			return err
		}
	case *GlobalSpecType_CaptchaChallenge:
		_ = b.EncodeVarint(29<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.CaptchaChallenge); err != nil {
			return err
		}
	case *GlobalSpecType_PolicyBasedChallenge:
		_ = b.EncodeVarint(41<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.PolicyBasedChallenge); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("GlobalSpecType.ChallengeType has unexpected type %T", x)
	}
	// authentication_choice
	switch x := m.AuthenticationChoice.(type) {
	case *GlobalSpecType_NoAuthentication:
		_ = b.EncodeVarint(39<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.NoAuthentication); err != nil {
			return err
		}
	case *GlobalSpecType_Authentication:
		_ = b.EncodeVarint(40<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Authentication); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("GlobalSpecType.AuthenticationChoice has unexpected type %T", x)
	}
	// server_header_choice
	switch x := m.ServerHeaderChoice.(type) {
	case *GlobalSpecType_DefaultHeader:
		_ = b.EncodeVarint(43<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.DefaultHeader); err != nil {
			return err
		}
	case *GlobalSpecType_ServerName:
		_ = b.EncodeVarint(44<<3 | proto.WireBytes)
		_ = b.EncodeStringBytes(x.ServerName)
	case *GlobalSpecType_AppendServerName:
		_ = b.EncodeVarint(45<<3 | proto.WireBytes)
		_ = b.EncodeStringBytes(x.AppendServerName)
	case *GlobalSpecType_PassThrough:
		_ = b.EncodeVarint(46<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.PassThrough); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("GlobalSpecType.ServerHeaderChoice has unexpected type %T", x)
	}
	return nil
}

func _GlobalSpecType_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*GlobalSpecType)
	switch tag {
	case 31: // challenge_type.no_challenge
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.ChallengeType = &GlobalSpecType_NoChallenge{msg}
		return true, err
	case 24: // challenge_type.js_challenge
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(JavascriptChallengeType)
		err := b.DecodeMessage(msg)
		m.ChallengeType = &GlobalSpecType_JsChallenge{msg}
		return true, err
	case 29: // challenge_type.captcha_challenge
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(CaptchaChallengeType)
		err := b.DecodeMessage(msg)
		m.ChallengeType = &GlobalSpecType_CaptchaChallenge{msg}
		return true, err
	case 41: // challenge_type.policy_based_challenge
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(PolicyBasedChallenge)
		err := b.DecodeMessage(msg)
		m.ChallengeType = &GlobalSpecType_PolicyBasedChallenge{msg}
		return true, err
	case 39: // authentication_choice.no_authentication
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.AuthenticationChoice = &GlobalSpecType_NoAuthentication{msg}
		return true, err
	case 40: // authentication_choice.authentication
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(AuthenticationDetails)
		err := b.DecodeMessage(msg)
		m.AuthenticationChoice = &GlobalSpecType_Authentication{msg}
		return true, err
	case 43: // server_header_choice.default_header
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.ServerHeaderChoice = &GlobalSpecType_DefaultHeader{msg}
		return true, err
	case 44: // server_header_choice.server_name
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.ServerHeaderChoice = &GlobalSpecType_ServerName{x}
		return true, err
	case 45: // server_header_choice.append_server_name
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.ServerHeaderChoice = &GlobalSpecType_AppendServerName{x}
		return true, err
	case 46: // server_header_choice.pass_through
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.ServerHeaderChoice = &GlobalSpecType_PassThrough{msg}
		return true, err
	default:
		return false, nil
	}
}

func _GlobalSpecType_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*GlobalSpecType)
	// challenge_type
	switch x := m.ChallengeType.(type) {
	case *GlobalSpecType_NoChallenge:
		s := proto.Size(x.NoChallenge)
		n += proto.SizeVarint(31<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *GlobalSpecType_JsChallenge:
		s := proto.Size(x.JsChallenge)
		n += proto.SizeVarint(24<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *GlobalSpecType_CaptchaChallenge:
		s := proto.Size(x.CaptchaChallenge)
		n += proto.SizeVarint(29<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *GlobalSpecType_PolicyBasedChallenge:
		s := proto.Size(x.PolicyBasedChallenge)
		n += proto.SizeVarint(41<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	// authentication_choice
	switch x := m.AuthenticationChoice.(type) {
	case *GlobalSpecType_NoAuthentication:
		s := proto.Size(x.NoAuthentication)
		n += proto.SizeVarint(39<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *GlobalSpecType_Authentication:
		s := proto.Size(x.Authentication)
		n += proto.SizeVarint(40<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	// server_header_choice
	switch x := m.ServerHeaderChoice.(type) {
	case *GlobalSpecType_DefaultHeader:
		s := proto.Size(x.DefaultHeader)
		n += proto.SizeVarint(43<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *GlobalSpecType_ServerName:
		n += proto.SizeVarint(44<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.ServerName)))
		n += len(x.ServerName)
	case *GlobalSpecType_AppendServerName:
		n += proto.SizeVarint(45<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.AppendServerName)))
		n += len(x.AppendServerName)
	case *GlobalSpecType_PassThrough:
		s := proto.Size(x.PassThrough)
		n += proto.SizeVarint(46<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// Create virtual host
//
// x-displayName: "Create Virtual Host"
// Creates virtual host in a given namespace.
type CreateSpecType struct {
	Domains                  []string                                       `protobuf:"bytes,2,rep,name=domains" json:"domains,omitempty"`
	Routes                   []*ves_io_schema4.ObjectRefType                `protobuf:"bytes,3,rep,name=routes" json:"routes,omitempty"`
	AdvertisePolicies        []*ves_io_schema4.ObjectRefType                `protobuf:"bytes,5,rep,name=advertise_policies,json=advertisePolicies" json:"advertise_policies,omitempty"`
	RequestHeadersToAdd      []*ves_io_schema4.HeaderManipulationOptionType `protobuf:"bytes,6,rep,name=request_headers_to_add,json=requestHeadersToAdd" json:"request_headers_to_add,omitempty"`
	ResponseHeadersToAdd     []*ves_io_schema4.HeaderManipulationOptionType `protobuf:"bytes,7,rep,name=response_headers_to_add,json=responseHeadersToAdd" json:"response_headers_to_add,omitempty"`
	RequestHeadersToRemove   []string                                       `protobuf:"bytes,17,rep,name=request_headers_to_remove,json=requestHeadersToRemove" json:"request_headers_to_remove,omitempty"`
	ResponseHeadersToRemove  []string                                       `protobuf:"bytes,8,rep,name=response_headers_to_remove,json=responseHeadersToRemove" json:"response_headers_to_remove,omitempty"`
	TlsParameters            *ves_io_schema4.DownstreamTlsParamsType        `protobuf:"bytes,9,opt,name=tls_parameters,json=tlsParameters" json:"tls_parameters,omitempty"`
	BufferPolicy             *ves_io_schema4.BufferConfigType               `protobuf:"bytes,12,opt,name=buffer_policy,json=bufferPolicy" json:"buffer_policy,omitempty"`
	CorsPolicy               *ves_io_schema4.CorsPolicy                     `protobuf:"bytes,13,opt,name=cors_policy,json=corsPolicy" json:"cors_policy,omitempty"`
	Proxy                    ProxyType                                      `protobuf:"varint,15,opt,name=proxy,proto3,enum=ves.io.schema.virtual_host.ProxyType" json:"proxy,omitempty"`
	WafType                  *ves_io_schema4.WafType                        `protobuf:"bytes,18,opt,name=waf_type,json=wafType" json:"waf_type,omitempty"`
	DynamicReverseProxy      *DynamicReverseProxyType                       `protobuf:"bytes,19,opt,name=dynamic_reverse_proxy,json=dynamicReverseProxy" json:"dynamic_reverse_proxy,omitempty"`
	AddLocation              bool                                           `protobuf:"varint,20,opt,name=add_location,json=addLocation,proto3" json:"add_location,omitempty"`
	CompressionParams        *CompressionType                               `protobuf:"bytes,21,opt,name=compression_params,json=compressionParams" json:"compression_params,omitempty"`
	CustomErrors             map[uint32]string                              `protobuf:"bytes,22,rep,name=custom_errors,json=customErrors" json:"custom_errors,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	DisableDefaultErrorPages bool                                           `protobuf:"varint,33,opt,name=disable_default_error_pages,json=disableDefaultErrorPages,proto3" json:"disable_default_error_pages,omitempty"`
	MaxRequestHeaderSize     uint32                                         `protobuf:"varint,23,opt,name=max_request_header_size,json=maxRequestHeaderSize,proto3" json:"max_request_header_size,omitempty"`
	// Types that are valid to be assigned to ChallengeType:
	//	*CreateSpecType_NoChallenge
	//	*CreateSpecType_JsChallenge
	//	*CreateSpecType_CaptchaChallenge
	ChallengeType              isCreateSpecType_ChallengeType  `protobuf_oneof:"challenge_type"`
	UserIdentification         []*ves_io_schema4.ObjectRefType `protobuf:"bytes,25,rep,name=user_identification,json=userIdentification" json:"user_identification,omitempty"`
	RateLimiter                []*ves_io_schema4.ObjectRefType `protobuf:"bytes,26,rep,name=rate_limiter,json=rateLimiter" json:"rate_limiter,omitempty"`
	RateLimiterAllowedPrefixes []*ves_io_schema4.ObjectRefType `protobuf:"bytes,27,rep,name=rate_limiter_allowed_prefixes,json=rateLimiterAllowedPrefixes" json:"rate_limiter_allowed_prefixes,omitempty"`
	RetryPolicy                *ves_io_schema4.RetryPolicyType `protobuf:"bytes,28,opt,name=retry_policy,json=retryPolicy" json:"retry_policy,omitempty"`
	IdleTimeout                uint32                          `protobuf:"varint,32,opt,name=idle_timeout,json=idleTimeout,proto3" json:"idle_timeout,omitempty"`
	DisableDnsResolve          bool                            `protobuf:"varint,34,opt,name=disable_dns_resolve,json=disableDnsResolve,proto3" json:"disable_dns_resolve,omitempty"`
	TemporaryUserBlocking      *TemporaryUserBlockingType      `protobuf:"bytes,35,opt,name=temporary_user_blocking,json=temporaryUserBlocking" json:"temporary_user_blocking,omitempty"`
	// Types that are valid to be assigned to AuthenticationChoice:
	//	*CreateSpecType_NoAuthentication
	//	*CreateSpecType_Authentication
	AuthenticationChoice isCreateSpecType_AuthenticationChoice `protobuf_oneof:"authentication_choice"`
	// Types that are valid to be assigned to ServerHeaderChoice:
	//	*CreateSpecType_DefaultHeader
	//	*CreateSpecType_ServerName
	//	*CreateSpecType_AppendServerName
	//	*CreateSpecType_PassThrough
	ServerHeaderChoice isCreateSpecType_ServerHeaderChoice `protobuf_oneof:"server_header_choice"`
}

func (m *CreateSpecType) Reset()                    { *m = CreateSpecType{} }
func (*CreateSpecType) ProtoMessage()               {}
func (*CreateSpecType) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{10} }

type isCreateSpecType_ChallengeType interface {
	isCreateSpecType_ChallengeType()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isCreateSpecType_AuthenticationChoice interface {
	isCreateSpecType_AuthenticationChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isCreateSpecType_ServerHeaderChoice interface {
	isCreateSpecType_ServerHeaderChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type CreateSpecType_NoChallenge struct {
	NoChallenge *ves_io_schema4.Empty `protobuf:"bytes,31,opt,name=no_challenge,json=noChallenge,oneof"`
}
type CreateSpecType_JsChallenge struct {
	JsChallenge *JavascriptChallengeType `protobuf:"bytes,24,opt,name=js_challenge,json=jsChallenge,oneof"`
}
type CreateSpecType_CaptchaChallenge struct {
	CaptchaChallenge *CaptchaChallengeType `protobuf:"bytes,29,opt,name=captcha_challenge,json=captchaChallenge,oneof"`
}
type CreateSpecType_NoAuthentication struct {
	NoAuthentication *ves_io_schema4.Empty `protobuf:"bytes,39,opt,name=no_authentication,json=noAuthentication,oneof"`
}
type CreateSpecType_Authentication struct {
	Authentication *AuthenticationDetails `protobuf:"bytes,40,opt,name=authentication,oneof"`
}
type CreateSpecType_DefaultHeader struct {
	DefaultHeader *ves_io_schema4.Empty `protobuf:"bytes,43,opt,name=default_header,json=defaultHeader,oneof"`
}
type CreateSpecType_ServerName struct {
	ServerName string `protobuf:"bytes,44,opt,name=server_name,json=serverName,proto3,oneof"`
}
type CreateSpecType_AppendServerName struct {
	AppendServerName string `protobuf:"bytes,45,opt,name=append_server_name,json=appendServerName,proto3,oneof"`
}
type CreateSpecType_PassThrough struct {
	PassThrough *ves_io_schema4.Empty `protobuf:"bytes,46,opt,name=pass_through,json=passThrough,oneof"`
}

func (*CreateSpecType_NoChallenge) isCreateSpecType_ChallengeType()             {}
func (*CreateSpecType_JsChallenge) isCreateSpecType_ChallengeType()             {}
func (*CreateSpecType_CaptchaChallenge) isCreateSpecType_ChallengeType()        {}
func (*CreateSpecType_NoAuthentication) isCreateSpecType_AuthenticationChoice() {}
func (*CreateSpecType_Authentication) isCreateSpecType_AuthenticationChoice()   {}
func (*CreateSpecType_DefaultHeader) isCreateSpecType_ServerHeaderChoice()      {}
func (*CreateSpecType_ServerName) isCreateSpecType_ServerHeaderChoice()         {}
func (*CreateSpecType_AppendServerName) isCreateSpecType_ServerHeaderChoice()   {}
func (*CreateSpecType_PassThrough) isCreateSpecType_ServerHeaderChoice()        {}

func (m *CreateSpecType) GetChallengeType() isCreateSpecType_ChallengeType {
	if m != nil {
		return m.ChallengeType
	}
	return nil
}
func (m *CreateSpecType) GetAuthenticationChoice() isCreateSpecType_AuthenticationChoice {
	if m != nil {
		return m.AuthenticationChoice
	}
	return nil
}
func (m *CreateSpecType) GetServerHeaderChoice() isCreateSpecType_ServerHeaderChoice {
	if m != nil {
		return m.ServerHeaderChoice
	}
	return nil
}

func (m *CreateSpecType) GetDomains() []string {
	if m != nil {
		return m.Domains
	}
	return nil
}

func (m *CreateSpecType) GetRoutes() []*ves_io_schema4.ObjectRefType {
	if m != nil {
		return m.Routes
	}
	return nil
}

func (m *CreateSpecType) GetAdvertisePolicies() []*ves_io_schema4.ObjectRefType {
	if m != nil {
		return m.AdvertisePolicies
	}
	return nil
}

func (m *CreateSpecType) GetRequestHeadersToAdd() []*ves_io_schema4.HeaderManipulationOptionType {
	if m != nil {
		return m.RequestHeadersToAdd
	}
	return nil
}

func (m *CreateSpecType) GetResponseHeadersToAdd() []*ves_io_schema4.HeaderManipulationOptionType {
	if m != nil {
		return m.ResponseHeadersToAdd
	}
	return nil
}

func (m *CreateSpecType) GetRequestHeadersToRemove() []string {
	if m != nil {
		return m.RequestHeadersToRemove
	}
	return nil
}

func (m *CreateSpecType) GetResponseHeadersToRemove() []string {
	if m != nil {
		return m.ResponseHeadersToRemove
	}
	return nil
}

func (m *CreateSpecType) GetTlsParameters() *ves_io_schema4.DownstreamTlsParamsType {
	if m != nil {
		return m.TlsParameters
	}
	return nil
}

func (m *CreateSpecType) GetBufferPolicy() *ves_io_schema4.BufferConfigType {
	if m != nil {
		return m.BufferPolicy
	}
	return nil
}

func (m *CreateSpecType) GetCorsPolicy() *ves_io_schema4.CorsPolicy {
	if m != nil {
		return m.CorsPolicy
	}
	return nil
}

func (m *CreateSpecType) GetProxy() ProxyType {
	if m != nil {
		return m.Proxy
	}
	return HTTP_PROXY
}

func (m *CreateSpecType) GetWafType() *ves_io_schema4.WafType {
	if m != nil {
		return m.WafType
	}
	return nil
}

func (m *CreateSpecType) GetDynamicReverseProxy() *DynamicReverseProxyType {
	if m != nil {
		return m.DynamicReverseProxy
	}
	return nil
}

func (m *CreateSpecType) GetAddLocation() bool {
	if m != nil {
		return m.AddLocation
	}
	return false
}

func (m *CreateSpecType) GetCompressionParams() *CompressionType {
	if m != nil {
		return m.CompressionParams
	}
	return nil
}

func (m *CreateSpecType) GetCustomErrors() map[uint32]string {
	if m != nil {
		return m.CustomErrors
	}
	return nil
}

func (m *CreateSpecType) GetDisableDefaultErrorPages() bool {
	if m != nil {
		return m.DisableDefaultErrorPages
	}
	return false
}

func (m *CreateSpecType) GetMaxRequestHeaderSize() uint32 {
	if m != nil {
		return m.MaxRequestHeaderSize
	}
	return 0
}

func (m *CreateSpecType) GetNoChallenge() *ves_io_schema4.Empty {
	if x, ok := m.GetChallengeType().(*CreateSpecType_NoChallenge); ok {
		return x.NoChallenge
	}
	return nil
}

func (m *CreateSpecType) GetJsChallenge() *JavascriptChallengeType {
	if x, ok := m.GetChallengeType().(*CreateSpecType_JsChallenge); ok {
		return x.JsChallenge
	}
	return nil
}

func (m *CreateSpecType) GetCaptchaChallenge() *CaptchaChallengeType {
	if x, ok := m.GetChallengeType().(*CreateSpecType_CaptchaChallenge); ok {
		return x.CaptchaChallenge
	}
	return nil
}

func (m *CreateSpecType) GetUserIdentification() []*ves_io_schema4.ObjectRefType {
	if m != nil {
		return m.UserIdentification
	}
	return nil
}

func (m *CreateSpecType) GetRateLimiter() []*ves_io_schema4.ObjectRefType {
	if m != nil {
		return m.RateLimiter
	}
	return nil
}

func (m *CreateSpecType) GetRateLimiterAllowedPrefixes() []*ves_io_schema4.ObjectRefType {
	if m != nil {
		return m.RateLimiterAllowedPrefixes
	}
	return nil
}

func (m *CreateSpecType) GetRetryPolicy() *ves_io_schema4.RetryPolicyType {
	if m != nil {
		return m.RetryPolicy
	}
	return nil
}

func (m *CreateSpecType) GetIdleTimeout() uint32 {
	if m != nil {
		return m.IdleTimeout
	}
	return 0
}

func (m *CreateSpecType) GetDisableDnsResolve() bool {
	if m != nil {
		return m.DisableDnsResolve
	}
	return false
}

func (m *CreateSpecType) GetTemporaryUserBlocking() *TemporaryUserBlockingType {
	if m != nil {
		return m.TemporaryUserBlocking
	}
	return nil
}

func (m *CreateSpecType) GetNoAuthentication() *ves_io_schema4.Empty {
	if x, ok := m.GetAuthenticationChoice().(*CreateSpecType_NoAuthentication); ok {
		return x.NoAuthentication
	}
	return nil
}

func (m *CreateSpecType) GetAuthentication() *AuthenticationDetails {
	if x, ok := m.GetAuthenticationChoice().(*CreateSpecType_Authentication); ok {
		return x.Authentication
	}
	return nil
}

func (m *CreateSpecType) GetDefaultHeader() *ves_io_schema4.Empty {
	if x, ok := m.GetServerHeaderChoice().(*CreateSpecType_DefaultHeader); ok {
		return x.DefaultHeader
	}
	return nil
}

func (m *CreateSpecType) GetServerName() string {
	if x, ok := m.GetServerHeaderChoice().(*CreateSpecType_ServerName); ok {
		return x.ServerName
	}
	return ""
}

func (m *CreateSpecType) GetAppendServerName() string {
	if x, ok := m.GetServerHeaderChoice().(*CreateSpecType_AppendServerName); ok {
		return x.AppendServerName
	}
	return ""
}

func (m *CreateSpecType) GetPassThrough() *ves_io_schema4.Empty {
	if x, ok := m.GetServerHeaderChoice().(*CreateSpecType_PassThrough); ok {
		return x.PassThrough
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*CreateSpecType) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _CreateSpecType_OneofMarshaler, _CreateSpecType_OneofUnmarshaler, _CreateSpecType_OneofSizer, []interface{}{
		(*CreateSpecType_NoChallenge)(nil),
		(*CreateSpecType_JsChallenge)(nil),
		(*CreateSpecType_CaptchaChallenge)(nil),
		(*CreateSpecType_NoAuthentication)(nil),
		(*CreateSpecType_Authentication)(nil),
		(*CreateSpecType_DefaultHeader)(nil),
		(*CreateSpecType_ServerName)(nil),
		(*CreateSpecType_AppendServerName)(nil),
		(*CreateSpecType_PassThrough)(nil),
	}
}

func _CreateSpecType_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*CreateSpecType)
	// challenge_type
	switch x := m.ChallengeType.(type) {
	case *CreateSpecType_NoChallenge:
		_ = b.EncodeVarint(31<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.NoChallenge); err != nil {
			return err
		}
	case *CreateSpecType_JsChallenge:
		_ = b.EncodeVarint(24<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.JsChallenge); err != nil {
			return err
		}
	case *CreateSpecType_CaptchaChallenge:
		_ = b.EncodeVarint(29<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.CaptchaChallenge); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("CreateSpecType.ChallengeType has unexpected type %T", x)
	}
	// authentication_choice
	switch x := m.AuthenticationChoice.(type) {
	case *CreateSpecType_NoAuthentication:
		_ = b.EncodeVarint(39<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.NoAuthentication); err != nil {
			return err
		}
	case *CreateSpecType_Authentication:
		_ = b.EncodeVarint(40<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Authentication); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("CreateSpecType.AuthenticationChoice has unexpected type %T", x)
	}
	// server_header_choice
	switch x := m.ServerHeaderChoice.(type) {
	case *CreateSpecType_DefaultHeader:
		_ = b.EncodeVarint(43<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.DefaultHeader); err != nil {
			return err
		}
	case *CreateSpecType_ServerName:
		_ = b.EncodeVarint(44<<3 | proto.WireBytes)
		_ = b.EncodeStringBytes(x.ServerName)
	case *CreateSpecType_AppendServerName:
		_ = b.EncodeVarint(45<<3 | proto.WireBytes)
		_ = b.EncodeStringBytes(x.AppendServerName)
	case *CreateSpecType_PassThrough:
		_ = b.EncodeVarint(46<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.PassThrough); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("CreateSpecType.ServerHeaderChoice has unexpected type %T", x)
	}
	return nil
}

func _CreateSpecType_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*CreateSpecType)
	switch tag {
	case 31: // challenge_type.no_challenge
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.ChallengeType = &CreateSpecType_NoChallenge{msg}
		return true, err
	case 24: // challenge_type.js_challenge
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(JavascriptChallengeType)
		err := b.DecodeMessage(msg)
		m.ChallengeType = &CreateSpecType_JsChallenge{msg}
		return true, err
	case 29: // challenge_type.captcha_challenge
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(CaptchaChallengeType)
		err := b.DecodeMessage(msg)
		m.ChallengeType = &CreateSpecType_CaptchaChallenge{msg}
		return true, err
	case 39: // authentication_choice.no_authentication
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.AuthenticationChoice = &CreateSpecType_NoAuthentication{msg}
		return true, err
	case 40: // authentication_choice.authentication
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(AuthenticationDetails)
		err := b.DecodeMessage(msg)
		m.AuthenticationChoice = &CreateSpecType_Authentication{msg}
		return true, err
	case 43: // server_header_choice.default_header
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.ServerHeaderChoice = &CreateSpecType_DefaultHeader{msg}
		return true, err
	case 44: // server_header_choice.server_name
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.ServerHeaderChoice = &CreateSpecType_ServerName{x}
		return true, err
	case 45: // server_header_choice.append_server_name
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.ServerHeaderChoice = &CreateSpecType_AppendServerName{x}
		return true, err
	case 46: // server_header_choice.pass_through
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.ServerHeaderChoice = &CreateSpecType_PassThrough{msg}
		return true, err
	default:
		return false, nil
	}
}

func _CreateSpecType_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*CreateSpecType)
	// challenge_type
	switch x := m.ChallengeType.(type) {
	case *CreateSpecType_NoChallenge:
		s := proto.Size(x.NoChallenge)
		n += proto.SizeVarint(31<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *CreateSpecType_JsChallenge:
		s := proto.Size(x.JsChallenge)
		n += proto.SizeVarint(24<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *CreateSpecType_CaptchaChallenge:
		s := proto.Size(x.CaptchaChallenge)
		n += proto.SizeVarint(29<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	// authentication_choice
	switch x := m.AuthenticationChoice.(type) {
	case *CreateSpecType_NoAuthentication:
		s := proto.Size(x.NoAuthentication)
		n += proto.SizeVarint(39<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *CreateSpecType_Authentication:
		s := proto.Size(x.Authentication)
		n += proto.SizeVarint(40<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	// server_header_choice
	switch x := m.ServerHeaderChoice.(type) {
	case *CreateSpecType_DefaultHeader:
		s := proto.Size(x.DefaultHeader)
		n += proto.SizeVarint(43<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *CreateSpecType_ServerName:
		n += proto.SizeVarint(44<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.ServerName)))
		n += len(x.ServerName)
	case *CreateSpecType_AppendServerName:
		n += proto.SizeVarint(45<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.AppendServerName)))
		n += len(x.AppendServerName)
	case *CreateSpecType_PassThrough:
		s := proto.Size(x.PassThrough)
		n += proto.SizeVarint(46<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// Replace virtual host
//
// x-displayName: "Replace Virtual Host"
// Replace a given virtual host in a given namespace.
type ReplaceSpecType struct {
	Domains                  []string                                       `protobuf:"bytes,2,rep,name=domains" json:"domains,omitempty"`
	Routes                   []*ves_io_schema4.ObjectRefType                `protobuf:"bytes,3,rep,name=routes" json:"routes,omitempty"`
	AdvertisePolicies        []*ves_io_schema4.ObjectRefType                `protobuf:"bytes,5,rep,name=advertise_policies,json=advertisePolicies" json:"advertise_policies,omitempty"`
	RequestHeadersToAdd      []*ves_io_schema4.HeaderManipulationOptionType `protobuf:"bytes,6,rep,name=request_headers_to_add,json=requestHeadersToAdd" json:"request_headers_to_add,omitempty"`
	ResponseHeadersToAdd     []*ves_io_schema4.HeaderManipulationOptionType `protobuf:"bytes,7,rep,name=response_headers_to_add,json=responseHeadersToAdd" json:"response_headers_to_add,omitempty"`
	RequestHeadersToRemove   []string                                       `protobuf:"bytes,17,rep,name=request_headers_to_remove,json=requestHeadersToRemove" json:"request_headers_to_remove,omitempty"`
	ResponseHeadersToRemove  []string                                       `protobuf:"bytes,8,rep,name=response_headers_to_remove,json=responseHeadersToRemove" json:"response_headers_to_remove,omitempty"`
	TlsParameters            *ves_io_schema4.DownstreamTlsParamsType        `protobuf:"bytes,9,opt,name=tls_parameters,json=tlsParameters" json:"tls_parameters,omitempty"`
	BufferPolicy             *ves_io_schema4.BufferConfigType               `protobuf:"bytes,12,opt,name=buffer_policy,json=bufferPolicy" json:"buffer_policy,omitempty"`
	CorsPolicy               *ves_io_schema4.CorsPolicy                     `protobuf:"bytes,13,opt,name=cors_policy,json=corsPolicy" json:"cors_policy,omitempty"`
	Proxy                    ProxyType                                      `protobuf:"varint,15,opt,name=proxy,proto3,enum=ves.io.schema.virtual_host.ProxyType" json:"proxy,omitempty"`
	WafType                  *ves_io_schema4.WafType                        `protobuf:"bytes,18,opt,name=waf_type,json=wafType" json:"waf_type,omitempty"`
	DynamicReverseProxy      *DynamicReverseProxyType                       `protobuf:"bytes,19,opt,name=dynamic_reverse_proxy,json=dynamicReverseProxy" json:"dynamic_reverse_proxy,omitempty"`
	AddLocation              bool                                           `protobuf:"varint,20,opt,name=add_location,json=addLocation,proto3" json:"add_location,omitempty"`
	CompressionParams        *CompressionType                               `protobuf:"bytes,21,opt,name=compression_params,json=compressionParams" json:"compression_params,omitempty"`
	CustomErrors             map[uint32]string                              `protobuf:"bytes,22,rep,name=custom_errors,json=customErrors" json:"custom_errors,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	DisableDefaultErrorPages bool                                           `protobuf:"varint,33,opt,name=disable_default_error_pages,json=disableDefaultErrorPages,proto3" json:"disable_default_error_pages,omitempty"`
	MaxRequestHeaderSize     uint32                                         `protobuf:"varint,23,opt,name=max_request_header_size,json=maxRequestHeaderSize,proto3" json:"max_request_header_size,omitempty"`
	// Types that are valid to be assigned to ChallengeType:
	//	*ReplaceSpecType_NoChallenge
	//	*ReplaceSpecType_JsChallenge
	//	*ReplaceSpecType_CaptchaChallenge
	ChallengeType              isReplaceSpecType_ChallengeType `protobuf_oneof:"challenge_type"`
	UserIdentification         []*ves_io_schema4.ObjectRefType `protobuf:"bytes,25,rep,name=user_identification,json=userIdentification" json:"user_identification,omitempty"`
	RateLimiter                []*ves_io_schema4.ObjectRefType `protobuf:"bytes,26,rep,name=rate_limiter,json=rateLimiter" json:"rate_limiter,omitempty"`
	RateLimiterAllowedPrefixes []*ves_io_schema4.ObjectRefType `protobuf:"bytes,27,rep,name=rate_limiter_allowed_prefixes,json=rateLimiterAllowedPrefixes" json:"rate_limiter_allowed_prefixes,omitempty"`
	RetryPolicy                *ves_io_schema4.RetryPolicyType `protobuf:"bytes,28,opt,name=retry_policy,json=retryPolicy" json:"retry_policy,omitempty"`
	IdleTimeout                uint32                          `protobuf:"varint,32,opt,name=idle_timeout,json=idleTimeout,proto3" json:"idle_timeout,omitempty"`
	DisableDnsResolve          bool                            `protobuf:"varint,34,opt,name=disable_dns_resolve,json=disableDnsResolve,proto3" json:"disable_dns_resolve,omitempty"`
	TemporaryUserBlocking      *TemporaryUserBlockingType      `protobuf:"bytes,35,opt,name=temporary_user_blocking,json=temporaryUserBlocking" json:"temporary_user_blocking,omitempty"`
	// Types that are valid to be assigned to AuthenticationChoice:
	//	*ReplaceSpecType_NoAuthentication
	//	*ReplaceSpecType_Authentication
	AuthenticationChoice isReplaceSpecType_AuthenticationChoice `protobuf_oneof:"authentication_choice"`
	// Types that are valid to be assigned to ServerHeaderChoice:
	//	*ReplaceSpecType_DefaultHeader
	//	*ReplaceSpecType_ServerName
	//	*ReplaceSpecType_AppendServerName
	//	*ReplaceSpecType_PassThrough
	ServerHeaderChoice isReplaceSpecType_ServerHeaderChoice `protobuf_oneof:"server_header_choice"`
}

func (m *ReplaceSpecType) Reset()                    { *m = ReplaceSpecType{} }
func (*ReplaceSpecType) ProtoMessage()               {}
func (*ReplaceSpecType) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{11} }

type isReplaceSpecType_ChallengeType interface {
	isReplaceSpecType_ChallengeType()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isReplaceSpecType_AuthenticationChoice interface {
	isReplaceSpecType_AuthenticationChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isReplaceSpecType_ServerHeaderChoice interface {
	isReplaceSpecType_ServerHeaderChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type ReplaceSpecType_NoChallenge struct {
	NoChallenge *ves_io_schema4.Empty `protobuf:"bytes,31,opt,name=no_challenge,json=noChallenge,oneof"`
}
type ReplaceSpecType_JsChallenge struct {
	JsChallenge *JavascriptChallengeType `protobuf:"bytes,24,opt,name=js_challenge,json=jsChallenge,oneof"`
}
type ReplaceSpecType_CaptchaChallenge struct {
	CaptchaChallenge *CaptchaChallengeType `protobuf:"bytes,29,opt,name=captcha_challenge,json=captchaChallenge,oneof"`
}
type ReplaceSpecType_NoAuthentication struct {
	NoAuthentication *ves_io_schema4.Empty `protobuf:"bytes,39,opt,name=no_authentication,json=noAuthentication,oneof"`
}
type ReplaceSpecType_Authentication struct {
	Authentication *AuthenticationDetails `protobuf:"bytes,40,opt,name=authentication,oneof"`
}
type ReplaceSpecType_DefaultHeader struct {
	DefaultHeader *ves_io_schema4.Empty `protobuf:"bytes,43,opt,name=default_header,json=defaultHeader,oneof"`
}
type ReplaceSpecType_ServerName struct {
	ServerName string `protobuf:"bytes,44,opt,name=server_name,json=serverName,proto3,oneof"`
}
type ReplaceSpecType_AppendServerName struct {
	AppendServerName string `protobuf:"bytes,45,opt,name=append_server_name,json=appendServerName,proto3,oneof"`
}
type ReplaceSpecType_PassThrough struct {
	PassThrough *ves_io_schema4.Empty `protobuf:"bytes,46,opt,name=pass_through,json=passThrough,oneof"`
}

func (*ReplaceSpecType_NoChallenge) isReplaceSpecType_ChallengeType()             {}
func (*ReplaceSpecType_JsChallenge) isReplaceSpecType_ChallengeType()             {}
func (*ReplaceSpecType_CaptchaChallenge) isReplaceSpecType_ChallengeType()        {}
func (*ReplaceSpecType_NoAuthentication) isReplaceSpecType_AuthenticationChoice() {}
func (*ReplaceSpecType_Authentication) isReplaceSpecType_AuthenticationChoice()   {}
func (*ReplaceSpecType_DefaultHeader) isReplaceSpecType_ServerHeaderChoice()      {}
func (*ReplaceSpecType_ServerName) isReplaceSpecType_ServerHeaderChoice()         {}
func (*ReplaceSpecType_AppendServerName) isReplaceSpecType_ServerHeaderChoice()   {}
func (*ReplaceSpecType_PassThrough) isReplaceSpecType_ServerHeaderChoice()        {}

func (m *ReplaceSpecType) GetChallengeType() isReplaceSpecType_ChallengeType {
	if m != nil {
		return m.ChallengeType
	}
	return nil
}
func (m *ReplaceSpecType) GetAuthenticationChoice() isReplaceSpecType_AuthenticationChoice {
	if m != nil {
		return m.AuthenticationChoice
	}
	return nil
}
func (m *ReplaceSpecType) GetServerHeaderChoice() isReplaceSpecType_ServerHeaderChoice {
	if m != nil {
		return m.ServerHeaderChoice
	}
	return nil
}

func (m *ReplaceSpecType) GetDomains() []string {
	if m != nil {
		return m.Domains
	}
	return nil
}

func (m *ReplaceSpecType) GetRoutes() []*ves_io_schema4.ObjectRefType {
	if m != nil {
		return m.Routes
	}
	return nil
}

func (m *ReplaceSpecType) GetAdvertisePolicies() []*ves_io_schema4.ObjectRefType {
	if m != nil {
		return m.AdvertisePolicies
	}
	return nil
}

func (m *ReplaceSpecType) GetRequestHeadersToAdd() []*ves_io_schema4.HeaderManipulationOptionType {
	if m != nil {
		return m.RequestHeadersToAdd
	}
	return nil
}

func (m *ReplaceSpecType) GetResponseHeadersToAdd() []*ves_io_schema4.HeaderManipulationOptionType {
	if m != nil {
		return m.ResponseHeadersToAdd
	}
	return nil
}

func (m *ReplaceSpecType) GetRequestHeadersToRemove() []string {
	if m != nil {
		return m.RequestHeadersToRemove
	}
	return nil
}

func (m *ReplaceSpecType) GetResponseHeadersToRemove() []string {
	if m != nil {
		return m.ResponseHeadersToRemove
	}
	return nil
}

func (m *ReplaceSpecType) GetTlsParameters() *ves_io_schema4.DownstreamTlsParamsType {
	if m != nil {
		return m.TlsParameters
	}
	return nil
}

func (m *ReplaceSpecType) GetBufferPolicy() *ves_io_schema4.BufferConfigType {
	if m != nil {
		return m.BufferPolicy
	}
	return nil
}

func (m *ReplaceSpecType) GetCorsPolicy() *ves_io_schema4.CorsPolicy {
	if m != nil {
		return m.CorsPolicy
	}
	return nil
}

func (m *ReplaceSpecType) GetProxy() ProxyType {
	if m != nil {
		return m.Proxy
	}
	return HTTP_PROXY
}

func (m *ReplaceSpecType) GetWafType() *ves_io_schema4.WafType {
	if m != nil {
		return m.WafType
	}
	return nil
}

func (m *ReplaceSpecType) GetDynamicReverseProxy() *DynamicReverseProxyType {
	if m != nil {
		return m.DynamicReverseProxy
	}
	return nil
}

func (m *ReplaceSpecType) GetAddLocation() bool {
	if m != nil {
		return m.AddLocation
	}
	return false
}

func (m *ReplaceSpecType) GetCompressionParams() *CompressionType {
	if m != nil {
		return m.CompressionParams
	}
	return nil
}

func (m *ReplaceSpecType) GetCustomErrors() map[uint32]string {
	if m != nil {
		return m.CustomErrors
	}
	return nil
}

func (m *ReplaceSpecType) GetDisableDefaultErrorPages() bool {
	if m != nil {
		return m.DisableDefaultErrorPages
	}
	return false
}

func (m *ReplaceSpecType) GetMaxRequestHeaderSize() uint32 {
	if m != nil {
		return m.MaxRequestHeaderSize
	}
	return 0
}

func (m *ReplaceSpecType) GetNoChallenge() *ves_io_schema4.Empty {
	if x, ok := m.GetChallengeType().(*ReplaceSpecType_NoChallenge); ok {
		return x.NoChallenge
	}
	return nil
}

func (m *ReplaceSpecType) GetJsChallenge() *JavascriptChallengeType {
	if x, ok := m.GetChallengeType().(*ReplaceSpecType_JsChallenge); ok {
		return x.JsChallenge
	}
	return nil
}

func (m *ReplaceSpecType) GetCaptchaChallenge() *CaptchaChallengeType {
	if x, ok := m.GetChallengeType().(*ReplaceSpecType_CaptchaChallenge); ok {
		return x.CaptchaChallenge
	}
	return nil
}

func (m *ReplaceSpecType) GetUserIdentification() []*ves_io_schema4.ObjectRefType {
	if m != nil {
		return m.UserIdentification
	}
	return nil
}

func (m *ReplaceSpecType) GetRateLimiter() []*ves_io_schema4.ObjectRefType {
	if m != nil {
		return m.RateLimiter
	}
	return nil
}

func (m *ReplaceSpecType) GetRateLimiterAllowedPrefixes() []*ves_io_schema4.ObjectRefType {
	if m != nil {
		return m.RateLimiterAllowedPrefixes
	}
	return nil
}

func (m *ReplaceSpecType) GetRetryPolicy() *ves_io_schema4.RetryPolicyType {
	if m != nil {
		return m.RetryPolicy
	}
	return nil
}

func (m *ReplaceSpecType) GetIdleTimeout() uint32 {
	if m != nil {
		return m.IdleTimeout
	}
	return 0
}

func (m *ReplaceSpecType) GetDisableDnsResolve() bool {
	if m != nil {
		return m.DisableDnsResolve
	}
	return false
}

func (m *ReplaceSpecType) GetTemporaryUserBlocking() *TemporaryUserBlockingType {
	if m != nil {
		return m.TemporaryUserBlocking
	}
	return nil
}

func (m *ReplaceSpecType) GetNoAuthentication() *ves_io_schema4.Empty {
	if x, ok := m.GetAuthenticationChoice().(*ReplaceSpecType_NoAuthentication); ok {
		return x.NoAuthentication
	}
	return nil
}

func (m *ReplaceSpecType) GetAuthentication() *AuthenticationDetails {
	if x, ok := m.GetAuthenticationChoice().(*ReplaceSpecType_Authentication); ok {
		return x.Authentication
	}
	return nil
}

func (m *ReplaceSpecType) GetDefaultHeader() *ves_io_schema4.Empty {
	if x, ok := m.GetServerHeaderChoice().(*ReplaceSpecType_DefaultHeader); ok {
		return x.DefaultHeader
	}
	return nil
}

func (m *ReplaceSpecType) GetServerName() string {
	if x, ok := m.GetServerHeaderChoice().(*ReplaceSpecType_ServerName); ok {
		return x.ServerName
	}
	return ""
}

func (m *ReplaceSpecType) GetAppendServerName() string {
	if x, ok := m.GetServerHeaderChoice().(*ReplaceSpecType_AppendServerName); ok {
		return x.AppendServerName
	}
	return ""
}

func (m *ReplaceSpecType) GetPassThrough() *ves_io_schema4.Empty {
	if x, ok := m.GetServerHeaderChoice().(*ReplaceSpecType_PassThrough); ok {
		return x.PassThrough
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*ReplaceSpecType) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _ReplaceSpecType_OneofMarshaler, _ReplaceSpecType_OneofUnmarshaler, _ReplaceSpecType_OneofSizer, []interface{}{
		(*ReplaceSpecType_NoChallenge)(nil),
		(*ReplaceSpecType_JsChallenge)(nil),
		(*ReplaceSpecType_CaptchaChallenge)(nil),
		(*ReplaceSpecType_NoAuthentication)(nil),
		(*ReplaceSpecType_Authentication)(nil),
		(*ReplaceSpecType_DefaultHeader)(nil),
		(*ReplaceSpecType_ServerName)(nil),
		(*ReplaceSpecType_AppendServerName)(nil),
		(*ReplaceSpecType_PassThrough)(nil),
	}
}

func _ReplaceSpecType_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*ReplaceSpecType)
	// challenge_type
	switch x := m.ChallengeType.(type) {
	case *ReplaceSpecType_NoChallenge:
		_ = b.EncodeVarint(31<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.NoChallenge); err != nil {
			return err
		}
	case *ReplaceSpecType_JsChallenge:
		_ = b.EncodeVarint(24<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.JsChallenge); err != nil {
			return err
		}
	case *ReplaceSpecType_CaptchaChallenge:
		_ = b.EncodeVarint(29<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.CaptchaChallenge); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("ReplaceSpecType.ChallengeType has unexpected type %T", x)
	}
	// authentication_choice
	switch x := m.AuthenticationChoice.(type) {
	case *ReplaceSpecType_NoAuthentication:
		_ = b.EncodeVarint(39<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.NoAuthentication); err != nil {
			return err
		}
	case *ReplaceSpecType_Authentication:
		_ = b.EncodeVarint(40<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Authentication); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("ReplaceSpecType.AuthenticationChoice has unexpected type %T", x)
	}
	// server_header_choice
	switch x := m.ServerHeaderChoice.(type) {
	case *ReplaceSpecType_DefaultHeader:
		_ = b.EncodeVarint(43<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.DefaultHeader); err != nil {
			return err
		}
	case *ReplaceSpecType_ServerName:
		_ = b.EncodeVarint(44<<3 | proto.WireBytes)
		_ = b.EncodeStringBytes(x.ServerName)
	case *ReplaceSpecType_AppendServerName:
		_ = b.EncodeVarint(45<<3 | proto.WireBytes)
		_ = b.EncodeStringBytes(x.AppendServerName)
	case *ReplaceSpecType_PassThrough:
		_ = b.EncodeVarint(46<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.PassThrough); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("ReplaceSpecType.ServerHeaderChoice has unexpected type %T", x)
	}
	return nil
}

func _ReplaceSpecType_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*ReplaceSpecType)
	switch tag {
	case 31: // challenge_type.no_challenge
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.ChallengeType = &ReplaceSpecType_NoChallenge{msg}
		return true, err
	case 24: // challenge_type.js_challenge
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(JavascriptChallengeType)
		err := b.DecodeMessage(msg)
		m.ChallengeType = &ReplaceSpecType_JsChallenge{msg}
		return true, err
	case 29: // challenge_type.captcha_challenge
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(CaptchaChallengeType)
		err := b.DecodeMessage(msg)
		m.ChallengeType = &ReplaceSpecType_CaptchaChallenge{msg}
		return true, err
	case 39: // authentication_choice.no_authentication
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.AuthenticationChoice = &ReplaceSpecType_NoAuthentication{msg}
		return true, err
	case 40: // authentication_choice.authentication
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(AuthenticationDetails)
		err := b.DecodeMessage(msg)
		m.AuthenticationChoice = &ReplaceSpecType_Authentication{msg}
		return true, err
	case 43: // server_header_choice.default_header
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.ServerHeaderChoice = &ReplaceSpecType_DefaultHeader{msg}
		return true, err
	case 44: // server_header_choice.server_name
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.ServerHeaderChoice = &ReplaceSpecType_ServerName{x}
		return true, err
	case 45: // server_header_choice.append_server_name
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.ServerHeaderChoice = &ReplaceSpecType_AppendServerName{x}
		return true, err
	case 46: // server_header_choice.pass_through
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.ServerHeaderChoice = &ReplaceSpecType_PassThrough{msg}
		return true, err
	default:
		return false, nil
	}
}

func _ReplaceSpecType_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*ReplaceSpecType)
	// challenge_type
	switch x := m.ChallengeType.(type) {
	case *ReplaceSpecType_NoChallenge:
		s := proto.Size(x.NoChallenge)
		n += proto.SizeVarint(31<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ReplaceSpecType_JsChallenge:
		s := proto.Size(x.JsChallenge)
		n += proto.SizeVarint(24<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ReplaceSpecType_CaptchaChallenge:
		s := proto.Size(x.CaptchaChallenge)
		n += proto.SizeVarint(29<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	// authentication_choice
	switch x := m.AuthenticationChoice.(type) {
	case *ReplaceSpecType_NoAuthentication:
		s := proto.Size(x.NoAuthentication)
		n += proto.SizeVarint(39<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ReplaceSpecType_Authentication:
		s := proto.Size(x.Authentication)
		n += proto.SizeVarint(40<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	// server_header_choice
	switch x := m.ServerHeaderChoice.(type) {
	case *ReplaceSpecType_DefaultHeader:
		s := proto.Size(x.DefaultHeader)
		n += proto.SizeVarint(43<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ReplaceSpecType_ServerName:
		n += proto.SizeVarint(44<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.ServerName)))
		n += len(x.ServerName)
	case *ReplaceSpecType_AppendServerName:
		n += proto.SizeVarint(45<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.AppendServerName)))
		n += len(x.AppendServerName)
	case *ReplaceSpecType_PassThrough:
		s := proto.Size(x.PassThrough)
		n += proto.SizeVarint(46<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// Get virtual host
//
// x-displayName: "Get Virtual Host"
// Get virtual host from a given namespace.
type GetSpecType struct {
	Domains                  []string                                       `protobuf:"bytes,2,rep,name=domains" json:"domains,omitempty"`
	Routes                   []*ves_io_schema4.ObjectRefType                `protobuf:"bytes,3,rep,name=routes" json:"routes,omitempty"`
	AdvertisePolicies        []*ves_io_schema4.ObjectRefType                `protobuf:"bytes,5,rep,name=advertise_policies,json=advertisePolicies" json:"advertise_policies,omitempty"`
	RequestHeadersToAdd      []*ves_io_schema4.HeaderManipulationOptionType `protobuf:"bytes,6,rep,name=request_headers_to_add,json=requestHeadersToAdd" json:"request_headers_to_add,omitempty"`
	ResponseHeadersToAdd     []*ves_io_schema4.HeaderManipulationOptionType `protobuf:"bytes,7,rep,name=response_headers_to_add,json=responseHeadersToAdd" json:"response_headers_to_add,omitempty"`
	RequestHeadersToRemove   []string                                       `protobuf:"bytes,17,rep,name=request_headers_to_remove,json=requestHeadersToRemove" json:"request_headers_to_remove,omitempty"`
	ResponseHeadersToRemove  []string                                       `protobuf:"bytes,8,rep,name=response_headers_to_remove,json=responseHeadersToRemove" json:"response_headers_to_remove,omitempty"`
	TlsParameters            *ves_io_schema4.DownstreamTlsParamsType        `protobuf:"bytes,9,opt,name=tls_parameters,json=tlsParameters" json:"tls_parameters,omitempty"`
	Type                     VirtualHostType                                `protobuf:"varint,10,opt,name=type,proto3,enum=ves.io.schema.virtual_host.VirtualHostType" json:"type,omitempty"`
	BufferPolicy             *ves_io_schema4.BufferConfigType               `protobuf:"bytes,12,opt,name=buffer_policy,json=bufferPolicy" json:"buffer_policy,omitempty"`
	CorsPolicy               *ves_io_schema4.CorsPolicy                     `protobuf:"bytes,13,opt,name=cors_policy,json=corsPolicy" json:"cors_policy,omitempty"`
	Proxy                    ProxyType                                      `protobuf:"varint,15,opt,name=proxy,proto3,enum=ves.io.schema.virtual_host.ProxyType" json:"proxy,omitempty"`
	WafType                  *ves_io_schema4.WafType                        `protobuf:"bytes,18,opt,name=waf_type,json=wafType" json:"waf_type,omitempty"`
	DynamicReverseProxy      *DynamicReverseProxyType                       `protobuf:"bytes,19,opt,name=dynamic_reverse_proxy,json=dynamicReverseProxy" json:"dynamic_reverse_proxy,omitempty"`
	AddLocation              bool                                           `protobuf:"varint,20,opt,name=add_location,json=addLocation,proto3" json:"add_location,omitempty"`
	CompressionParams        *CompressionType                               `protobuf:"bytes,21,opt,name=compression_params,json=compressionParams" json:"compression_params,omitempty"`
	CustomErrors             map[uint32]string                              `protobuf:"bytes,22,rep,name=custom_errors,json=customErrors" json:"custom_errors,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	DisableDefaultErrorPages bool                                           `protobuf:"varint,33,opt,name=disable_default_error_pages,json=disableDefaultErrorPages,proto3" json:"disable_default_error_pages,omitempty"`
	MaxRequestHeaderSize     uint32                                         `protobuf:"varint,23,opt,name=max_request_header_size,json=maxRequestHeaderSize,proto3" json:"max_request_header_size,omitempty"`
	// Types that are valid to be assigned to ChallengeType:
	//	*GetSpecType_NoChallenge
	//	*GetSpecType_JsChallenge
	//	*GetSpecType_CaptchaChallenge
	ChallengeType              isGetSpecType_ChallengeType     `protobuf_oneof:"challenge_type"`
	UserIdentification         []*ves_io_schema4.ObjectRefType `protobuf:"bytes,25,rep,name=user_identification,json=userIdentification" json:"user_identification,omitempty"`
	RateLimiter                []*ves_io_schema4.ObjectRefType `protobuf:"bytes,26,rep,name=rate_limiter,json=rateLimiter" json:"rate_limiter,omitempty"`
	RateLimiterAllowedPrefixes []*ves_io_schema4.ObjectRefType `protobuf:"bytes,27,rep,name=rate_limiter_allowed_prefixes,json=rateLimiterAllowedPrefixes" json:"rate_limiter_allowed_prefixes,omitempty"`
	RetryPolicy                *ves_io_schema4.RetryPolicyType `protobuf:"bytes,28,opt,name=retry_policy,json=retryPolicy" json:"retry_policy,omitempty"`
	IdleTimeout                uint32                          `protobuf:"varint,32,opt,name=idle_timeout,json=idleTimeout,proto3" json:"idle_timeout,omitempty"`
	TemporaryUserBlocking      *TemporaryUserBlockingType      `protobuf:"bytes,35,opt,name=temporary_user_blocking,json=temporaryUserBlocking" json:"temporary_user_blocking,omitempty"`
	// Types that are valid to be assigned to AuthenticationChoice:
	//	*GetSpecType_NoAuthentication
	//	*GetSpecType_Authentication
	AuthenticationChoice isGetSpecType_AuthenticationChoice `protobuf_oneof:"authentication_choice"`
	// Types that are valid to be assigned to ServerHeaderChoice:
	//	*GetSpecType_DefaultHeader
	//	*GetSpecType_ServerName
	//	*GetSpecType_AppendServerName
	//	*GetSpecType_PassThrough
	ServerHeaderChoice isGetSpecType_ServerHeaderChoice               `protobuf_oneof:"server_header_choice"`
	State              VirtualHostState                               `protobuf:"varint,1003,opt,name=state,proto3,enum=ves.io.schema.virtual_host.VirtualHostState" json:"state,omitempty"`
	HostName           string                                         `protobuf:"bytes,1004,opt,name=host_name,json=hostName,proto3" json:"host_name,omitempty"`
	DnsInfo            []*ves_io_schema_virtual_host_dns_info.DnsInfo `protobuf:"bytes,1005,rep,name=dns_info,json=dnsInfo" json:"dns_info,omitempty"`
	AutoCertState      CertificationState                             `protobuf:"varint,1006,opt,name=auto_cert_state,json=autoCertState,proto3,enum=ves.io.schema.virtual_host.CertificationState" json:"auto_cert_state,omitempty"`
	AutoCertInfo       *AutoCertInfoType                              `protobuf:"bytes,1010,opt,name=auto_cert_info,json=autoCertInfo" json:"auto_cert_info,omitempty"`
	DisableDnsResolve  bool                                           `protobuf:"varint,34,opt,name=disable_dns_resolve,json=disableDnsResolve,proto3" json:"disable_dns_resolve,omitempty"`
}

func (m *GetSpecType) Reset()                    { *m = GetSpecType{} }
func (*GetSpecType) ProtoMessage()               {}
func (*GetSpecType) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{12} }

type isGetSpecType_ChallengeType interface {
	isGetSpecType_ChallengeType()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isGetSpecType_AuthenticationChoice interface {
	isGetSpecType_AuthenticationChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isGetSpecType_ServerHeaderChoice interface {
	isGetSpecType_ServerHeaderChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type GetSpecType_NoChallenge struct {
	NoChallenge *ves_io_schema4.Empty `protobuf:"bytes,31,opt,name=no_challenge,json=noChallenge,oneof"`
}
type GetSpecType_JsChallenge struct {
	JsChallenge *JavascriptChallengeType `protobuf:"bytes,24,opt,name=js_challenge,json=jsChallenge,oneof"`
}
type GetSpecType_CaptchaChallenge struct {
	CaptchaChallenge *CaptchaChallengeType `protobuf:"bytes,29,opt,name=captcha_challenge,json=captchaChallenge,oneof"`
}
type GetSpecType_NoAuthentication struct {
	NoAuthentication *ves_io_schema4.Empty `protobuf:"bytes,39,opt,name=no_authentication,json=noAuthentication,oneof"`
}
type GetSpecType_Authentication struct {
	Authentication *AuthenticationDetails `protobuf:"bytes,40,opt,name=authentication,oneof"`
}
type GetSpecType_DefaultHeader struct {
	DefaultHeader *ves_io_schema4.Empty `protobuf:"bytes,43,opt,name=default_header,json=defaultHeader,oneof"`
}
type GetSpecType_ServerName struct {
	ServerName string `protobuf:"bytes,44,opt,name=server_name,json=serverName,proto3,oneof"`
}
type GetSpecType_AppendServerName struct {
	AppendServerName string `protobuf:"bytes,45,opt,name=append_server_name,json=appendServerName,proto3,oneof"`
}
type GetSpecType_PassThrough struct {
	PassThrough *ves_io_schema4.Empty `protobuf:"bytes,46,opt,name=pass_through,json=passThrough,oneof"`
}

func (*GetSpecType_NoChallenge) isGetSpecType_ChallengeType()             {}
func (*GetSpecType_JsChallenge) isGetSpecType_ChallengeType()             {}
func (*GetSpecType_CaptchaChallenge) isGetSpecType_ChallengeType()        {}
func (*GetSpecType_NoAuthentication) isGetSpecType_AuthenticationChoice() {}
func (*GetSpecType_Authentication) isGetSpecType_AuthenticationChoice()   {}
func (*GetSpecType_DefaultHeader) isGetSpecType_ServerHeaderChoice()      {}
func (*GetSpecType_ServerName) isGetSpecType_ServerHeaderChoice()         {}
func (*GetSpecType_AppendServerName) isGetSpecType_ServerHeaderChoice()   {}
func (*GetSpecType_PassThrough) isGetSpecType_ServerHeaderChoice()        {}

func (m *GetSpecType) GetChallengeType() isGetSpecType_ChallengeType {
	if m != nil {
		return m.ChallengeType
	}
	return nil
}
func (m *GetSpecType) GetAuthenticationChoice() isGetSpecType_AuthenticationChoice {
	if m != nil {
		return m.AuthenticationChoice
	}
	return nil
}
func (m *GetSpecType) GetServerHeaderChoice() isGetSpecType_ServerHeaderChoice {
	if m != nil {
		return m.ServerHeaderChoice
	}
	return nil
}

func (m *GetSpecType) GetDomains() []string {
	if m != nil {
		return m.Domains
	}
	return nil
}

func (m *GetSpecType) GetRoutes() []*ves_io_schema4.ObjectRefType {
	if m != nil {
		return m.Routes
	}
	return nil
}

func (m *GetSpecType) GetAdvertisePolicies() []*ves_io_schema4.ObjectRefType {
	if m != nil {
		return m.AdvertisePolicies
	}
	return nil
}

func (m *GetSpecType) GetRequestHeadersToAdd() []*ves_io_schema4.HeaderManipulationOptionType {
	if m != nil {
		return m.RequestHeadersToAdd
	}
	return nil
}

func (m *GetSpecType) GetResponseHeadersToAdd() []*ves_io_schema4.HeaderManipulationOptionType {
	if m != nil {
		return m.ResponseHeadersToAdd
	}
	return nil
}

func (m *GetSpecType) GetRequestHeadersToRemove() []string {
	if m != nil {
		return m.RequestHeadersToRemove
	}
	return nil
}

func (m *GetSpecType) GetResponseHeadersToRemove() []string {
	if m != nil {
		return m.ResponseHeadersToRemove
	}
	return nil
}

func (m *GetSpecType) GetTlsParameters() *ves_io_schema4.DownstreamTlsParamsType {
	if m != nil {
		return m.TlsParameters
	}
	return nil
}

func (m *GetSpecType) GetType() VirtualHostType {
	if m != nil {
		return m.Type
	}
	return VIRTUAL_SERVICE
}

func (m *GetSpecType) GetBufferPolicy() *ves_io_schema4.BufferConfigType {
	if m != nil {
		return m.BufferPolicy
	}
	return nil
}

func (m *GetSpecType) GetCorsPolicy() *ves_io_schema4.CorsPolicy {
	if m != nil {
		return m.CorsPolicy
	}
	return nil
}

func (m *GetSpecType) GetProxy() ProxyType {
	if m != nil {
		return m.Proxy
	}
	return HTTP_PROXY
}

func (m *GetSpecType) GetWafType() *ves_io_schema4.WafType {
	if m != nil {
		return m.WafType
	}
	return nil
}

func (m *GetSpecType) GetDynamicReverseProxy() *DynamicReverseProxyType {
	if m != nil {
		return m.DynamicReverseProxy
	}
	return nil
}

func (m *GetSpecType) GetAddLocation() bool {
	if m != nil {
		return m.AddLocation
	}
	return false
}

func (m *GetSpecType) GetCompressionParams() *CompressionType {
	if m != nil {
		return m.CompressionParams
	}
	return nil
}

func (m *GetSpecType) GetCustomErrors() map[uint32]string {
	if m != nil {
		return m.CustomErrors
	}
	return nil
}

func (m *GetSpecType) GetDisableDefaultErrorPages() bool {
	if m != nil {
		return m.DisableDefaultErrorPages
	}
	return false
}

func (m *GetSpecType) GetMaxRequestHeaderSize() uint32 {
	if m != nil {
		return m.MaxRequestHeaderSize
	}
	return 0
}

func (m *GetSpecType) GetNoChallenge() *ves_io_schema4.Empty {
	if x, ok := m.GetChallengeType().(*GetSpecType_NoChallenge); ok {
		return x.NoChallenge
	}
	return nil
}

func (m *GetSpecType) GetJsChallenge() *JavascriptChallengeType {
	if x, ok := m.GetChallengeType().(*GetSpecType_JsChallenge); ok {
		return x.JsChallenge
	}
	return nil
}

func (m *GetSpecType) GetCaptchaChallenge() *CaptchaChallengeType {
	if x, ok := m.GetChallengeType().(*GetSpecType_CaptchaChallenge); ok {
		return x.CaptchaChallenge
	}
	return nil
}

func (m *GetSpecType) GetUserIdentification() []*ves_io_schema4.ObjectRefType {
	if m != nil {
		return m.UserIdentification
	}
	return nil
}

func (m *GetSpecType) GetRateLimiter() []*ves_io_schema4.ObjectRefType {
	if m != nil {
		return m.RateLimiter
	}
	return nil
}

func (m *GetSpecType) GetRateLimiterAllowedPrefixes() []*ves_io_schema4.ObjectRefType {
	if m != nil {
		return m.RateLimiterAllowedPrefixes
	}
	return nil
}

func (m *GetSpecType) GetRetryPolicy() *ves_io_schema4.RetryPolicyType {
	if m != nil {
		return m.RetryPolicy
	}
	return nil
}

func (m *GetSpecType) GetIdleTimeout() uint32 {
	if m != nil {
		return m.IdleTimeout
	}
	return 0
}

func (m *GetSpecType) GetTemporaryUserBlocking() *TemporaryUserBlockingType {
	if m != nil {
		return m.TemporaryUserBlocking
	}
	return nil
}

func (m *GetSpecType) GetNoAuthentication() *ves_io_schema4.Empty {
	if x, ok := m.GetAuthenticationChoice().(*GetSpecType_NoAuthentication); ok {
		return x.NoAuthentication
	}
	return nil
}

func (m *GetSpecType) GetAuthentication() *AuthenticationDetails {
	if x, ok := m.GetAuthenticationChoice().(*GetSpecType_Authentication); ok {
		return x.Authentication
	}
	return nil
}

func (m *GetSpecType) GetDefaultHeader() *ves_io_schema4.Empty {
	if x, ok := m.GetServerHeaderChoice().(*GetSpecType_DefaultHeader); ok {
		return x.DefaultHeader
	}
	return nil
}

func (m *GetSpecType) GetServerName() string {
	if x, ok := m.GetServerHeaderChoice().(*GetSpecType_ServerName); ok {
		return x.ServerName
	}
	return ""
}

func (m *GetSpecType) GetAppendServerName() string {
	if x, ok := m.GetServerHeaderChoice().(*GetSpecType_AppendServerName); ok {
		return x.AppendServerName
	}
	return ""
}

func (m *GetSpecType) GetPassThrough() *ves_io_schema4.Empty {
	if x, ok := m.GetServerHeaderChoice().(*GetSpecType_PassThrough); ok {
		return x.PassThrough
	}
	return nil
}

func (m *GetSpecType) GetState() VirtualHostState {
	if m != nil {
		return m.State
	}
	return VIRTUAL_HOST_READY
}

func (m *GetSpecType) GetHostName() string {
	if m != nil {
		return m.HostName
	}
	return ""
}

func (m *GetSpecType) GetDnsInfo() []*ves_io_schema_virtual_host_dns_info.DnsInfo {
	if m != nil {
		return m.DnsInfo
	}
	return nil
}

func (m *GetSpecType) GetAutoCertState() CertificationState {
	if m != nil {
		return m.AutoCertState
	}
	return AutoCertDisabled
}

func (m *GetSpecType) GetAutoCertInfo() *AutoCertInfoType {
	if m != nil {
		return m.AutoCertInfo
	}
	return nil
}

func (m *GetSpecType) GetDisableDnsResolve() bool {
	if m != nil {
		return m.DisableDnsResolve
	}
	return false
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*GetSpecType) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _GetSpecType_OneofMarshaler, _GetSpecType_OneofUnmarshaler, _GetSpecType_OneofSizer, []interface{}{
		(*GetSpecType_NoChallenge)(nil),
		(*GetSpecType_JsChallenge)(nil),
		(*GetSpecType_CaptchaChallenge)(nil),
		(*GetSpecType_NoAuthentication)(nil),
		(*GetSpecType_Authentication)(nil),
		(*GetSpecType_DefaultHeader)(nil),
		(*GetSpecType_ServerName)(nil),
		(*GetSpecType_AppendServerName)(nil),
		(*GetSpecType_PassThrough)(nil),
	}
}

func _GetSpecType_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*GetSpecType)
	// challenge_type
	switch x := m.ChallengeType.(type) {
	case *GetSpecType_NoChallenge:
		_ = b.EncodeVarint(31<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.NoChallenge); err != nil {
			return err
		}
	case *GetSpecType_JsChallenge:
		_ = b.EncodeVarint(24<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.JsChallenge); err != nil {
			return err
		}
	case *GetSpecType_CaptchaChallenge:
		_ = b.EncodeVarint(29<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.CaptchaChallenge); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("GetSpecType.ChallengeType has unexpected type %T", x)
	}
	// authentication_choice
	switch x := m.AuthenticationChoice.(type) {
	case *GetSpecType_NoAuthentication:
		_ = b.EncodeVarint(39<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.NoAuthentication); err != nil {
			return err
		}
	case *GetSpecType_Authentication:
		_ = b.EncodeVarint(40<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Authentication); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("GetSpecType.AuthenticationChoice has unexpected type %T", x)
	}
	// server_header_choice
	switch x := m.ServerHeaderChoice.(type) {
	case *GetSpecType_DefaultHeader:
		_ = b.EncodeVarint(43<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.DefaultHeader); err != nil {
			return err
		}
	case *GetSpecType_ServerName:
		_ = b.EncodeVarint(44<<3 | proto.WireBytes)
		_ = b.EncodeStringBytes(x.ServerName)
	case *GetSpecType_AppendServerName:
		_ = b.EncodeVarint(45<<3 | proto.WireBytes)
		_ = b.EncodeStringBytes(x.AppendServerName)
	case *GetSpecType_PassThrough:
		_ = b.EncodeVarint(46<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.PassThrough); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("GetSpecType.ServerHeaderChoice has unexpected type %T", x)
	}
	return nil
}

func _GetSpecType_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*GetSpecType)
	switch tag {
	case 31: // challenge_type.no_challenge
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.ChallengeType = &GetSpecType_NoChallenge{msg}
		return true, err
	case 24: // challenge_type.js_challenge
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(JavascriptChallengeType)
		err := b.DecodeMessage(msg)
		m.ChallengeType = &GetSpecType_JsChallenge{msg}
		return true, err
	case 29: // challenge_type.captcha_challenge
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(CaptchaChallengeType)
		err := b.DecodeMessage(msg)
		m.ChallengeType = &GetSpecType_CaptchaChallenge{msg}
		return true, err
	case 39: // authentication_choice.no_authentication
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.AuthenticationChoice = &GetSpecType_NoAuthentication{msg}
		return true, err
	case 40: // authentication_choice.authentication
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(AuthenticationDetails)
		err := b.DecodeMessage(msg)
		m.AuthenticationChoice = &GetSpecType_Authentication{msg}
		return true, err
	case 43: // server_header_choice.default_header
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.ServerHeaderChoice = &GetSpecType_DefaultHeader{msg}
		return true, err
	case 44: // server_header_choice.server_name
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.ServerHeaderChoice = &GetSpecType_ServerName{x}
		return true, err
	case 45: // server_header_choice.append_server_name
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.ServerHeaderChoice = &GetSpecType_AppendServerName{x}
		return true, err
	case 46: // server_header_choice.pass_through
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.ServerHeaderChoice = &GetSpecType_PassThrough{msg}
		return true, err
	default:
		return false, nil
	}
}

func _GetSpecType_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*GetSpecType)
	// challenge_type
	switch x := m.ChallengeType.(type) {
	case *GetSpecType_NoChallenge:
		s := proto.Size(x.NoChallenge)
		n += proto.SizeVarint(31<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *GetSpecType_JsChallenge:
		s := proto.Size(x.JsChallenge)
		n += proto.SizeVarint(24<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *GetSpecType_CaptchaChallenge:
		s := proto.Size(x.CaptchaChallenge)
		n += proto.SizeVarint(29<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	// authentication_choice
	switch x := m.AuthenticationChoice.(type) {
	case *GetSpecType_NoAuthentication:
		s := proto.Size(x.NoAuthentication)
		n += proto.SizeVarint(39<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *GetSpecType_Authentication:
		s := proto.Size(x.Authentication)
		n += proto.SizeVarint(40<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	// server_header_choice
	switch x := m.ServerHeaderChoice.(type) {
	case *GetSpecType_DefaultHeader:
		s := proto.Size(x.DefaultHeader)
		n += proto.SizeVarint(43<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *GetSpecType_ServerName:
		n += proto.SizeVarint(44<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.ServerName)))
		n += len(x.ServerName)
	case *GetSpecType_AppendServerName:
		n += proto.SizeVarint(45<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.AppendServerName)))
		n += len(x.AppendServerName)
	case *GetSpecType_PassThrough:
		s := proto.Size(x.PassThrough)
		n += proto.SizeVarint(46<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

func init() {
	proto.RegisterType((*JavaScriptConfigType)(nil), "ves.io.schema.virtual_host.JavaScriptConfigType")
	golang_proto.RegisterType((*JavaScriptConfigType)(nil), "ves.io.schema.virtual_host.JavaScriptConfigType")
	proto.RegisterType((*DynamicReverseProxyType)(nil), "ves.io.schema.virtual_host.DynamicReverseProxyType")
	golang_proto.RegisterType((*DynamicReverseProxyType)(nil), "ves.io.schema.virtual_host.DynamicReverseProxyType")
	proto.RegisterType((*CompressionType)(nil), "ves.io.schema.virtual_host.CompressionType")
	golang_proto.RegisterType((*CompressionType)(nil), "ves.io.schema.virtual_host.CompressionType")
	proto.RegisterType((*JavascriptChallengeType)(nil), "ves.io.schema.virtual_host.JavascriptChallengeType")
	golang_proto.RegisterType((*JavascriptChallengeType)(nil), "ves.io.schema.virtual_host.JavascriptChallengeType")
	proto.RegisterType((*CaptchaChallengeType)(nil), "ves.io.schema.virtual_host.CaptchaChallengeType")
	golang_proto.RegisterType((*CaptchaChallengeType)(nil), "ves.io.schema.virtual_host.CaptchaChallengeType")
	proto.RegisterType((*TemporaryUserBlockingType)(nil), "ves.io.schema.virtual_host.TemporaryUserBlockingType")
	golang_proto.RegisterType((*TemporaryUserBlockingType)(nil), "ves.io.schema.virtual_host.TemporaryUserBlockingType")
	proto.RegisterType((*AutoCertInfoType)(nil), "ves.io.schema.virtual_host.AutoCertInfoType")
	golang_proto.RegisterType((*AutoCertInfoType)(nil), "ves.io.schema.virtual_host.AutoCertInfoType")
	proto.RegisterType((*AuthenticationDetails)(nil), "ves.io.schema.virtual_host.AuthenticationDetails")
	golang_proto.RegisterType((*AuthenticationDetails)(nil), "ves.io.schema.virtual_host.AuthenticationDetails")
	proto.RegisterType((*PolicyBasedChallenge)(nil), "ves.io.schema.virtual_host.PolicyBasedChallenge")
	golang_proto.RegisterType((*PolicyBasedChallenge)(nil), "ves.io.schema.virtual_host.PolicyBasedChallenge")
	proto.RegisterType((*GlobalSpecType)(nil), "ves.io.schema.virtual_host.GlobalSpecType")
	golang_proto.RegisterType((*GlobalSpecType)(nil), "ves.io.schema.virtual_host.GlobalSpecType")
	proto.RegisterType((*CreateSpecType)(nil), "ves.io.schema.virtual_host.CreateSpecType")
	golang_proto.RegisterType((*CreateSpecType)(nil), "ves.io.schema.virtual_host.CreateSpecType")
	proto.RegisterType((*ReplaceSpecType)(nil), "ves.io.schema.virtual_host.ReplaceSpecType")
	golang_proto.RegisterType((*ReplaceSpecType)(nil), "ves.io.schema.virtual_host.ReplaceSpecType")
	proto.RegisterType((*GetSpecType)(nil), "ves.io.schema.virtual_host.GetSpecType")
	golang_proto.RegisterType((*GetSpecType)(nil), "ves.io.schema.virtual_host.GetSpecType")
	proto.RegisterEnum("ves.io.schema.virtual_host.VirtualHostType", VirtualHostType_name, VirtualHostType_value)
	golang_proto.RegisterEnum("ves.io.schema.virtual_host.VirtualHostType", VirtualHostType_name, VirtualHostType_value)
	proto.RegisterEnum("ves.io.schema.virtual_host.ProxyType", ProxyType_name, ProxyType_value)
	golang_proto.RegisterEnum("ves.io.schema.virtual_host.ProxyType", ProxyType_name, ProxyType_value)
	proto.RegisterEnum("ves.io.schema.virtual_host.VirtualHostState", VirtualHostState_name, VirtualHostState_value)
	golang_proto.RegisterEnum("ves.io.schema.virtual_host.VirtualHostState", VirtualHostState_name, VirtualHostState_value)
	proto.RegisterEnum("ves.io.schema.virtual_host.CertificationState", CertificationState_name, CertificationState_value)
	golang_proto.RegisterEnum("ves.io.schema.virtual_host.CertificationState", CertificationState_name, CertificationState_value)
}
func (x VirtualHostType) String() string {
	s, ok := VirtualHostType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x ProxyType) String() string {
	s, ok := ProxyType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x VirtualHostState) String() string {
	s, ok := VirtualHostState_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x CertificationState) String() string {
	s, ok := CertificationState_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *JavaScriptConfigType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*JavaScriptConfigType)
	if !ok {
		that2, ok := that.(JavaScriptConfigType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.CachePrefix != that1.CachePrefix {
		return false
	}
	if !this.ScriptConfig.Equal(that1.ScriptConfig) {
		return false
	}
	if this.CustomScriptUrl != that1.CustomScriptUrl {
		return false
	}
	return true
}
func (this *DynamicReverseProxyType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DynamicReverseProxyType)
	if !ok {
		that2, ok := that.(DynamicReverseProxyType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ResolveEndpointDynamically != that1.ResolveEndpointDynamically {
		return false
	}
	if this.ResolutionNetworkType != that1.ResolutionNetworkType {
		return false
	}
	if len(this.ResolutionNetwork) != len(that1.ResolutionNetwork) {
		return false
	}
	for i := range this.ResolutionNetwork {
		if !this.ResolutionNetwork[i].Equal(that1.ResolutionNetwork[i]) {
			return false
		}
	}
	return true
}
func (this *CompressionType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CompressionType)
	if !ok {
		that2, ok := that.(CompressionType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ContentLength != that1.ContentLength {
		return false
	}
	if len(this.ContentType) != len(that1.ContentType) {
		return false
	}
	for i := range this.ContentType {
		if this.ContentType[i] != that1.ContentType[i] {
			return false
		}
	}
	if this.DisableOnEtagHeader != that1.DisableOnEtagHeader {
		return false
	}
	if this.RemoveAcceptEncodingHeader != that1.RemoveAcceptEncodingHeader {
		return false
	}
	return true
}
func (this *JavascriptChallengeType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*JavascriptChallengeType)
	if !ok {
		that2, ok := that.(JavascriptChallengeType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.EnableJsChallenge != that1.EnableJsChallenge {
		return false
	}
	if this.JsScriptDelay != that1.JsScriptDelay {
		return false
	}
	if this.CookieExpiry != that1.CookieExpiry {
		return false
	}
	if this.CustomPage != that1.CustomPage {
		return false
	}
	return true
}
func (this *CaptchaChallengeType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CaptchaChallengeType)
	if !ok {
		that2, ok := that.(CaptchaChallengeType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.EnableCaptchaChallenge != that1.EnableCaptchaChallenge {
		return false
	}
	if this.CookieExpiry != that1.CookieExpiry {
		return false
	}
	if this.CustomPage != that1.CustomPage {
		return false
	}
	return true
}
func (this *TemporaryUserBlockingType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TemporaryUserBlockingType)
	if !ok {
		that2, ok := that.(TemporaryUserBlockingType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.CustomPage != that1.CustomPage {
		return false
	}
	return true
}
func (this *AutoCertInfoType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AutoCertInfoType)
	if !ok {
		that2, ok := that.(AutoCertInfoType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.AutoCertState != that1.AutoCertState {
		return false
	}
	if !this.AutoCertExpiry.Equal(that1.AutoCertExpiry) {
		return false
	}
	if this.AutoCertSubject != that1.AutoCertSubject {
		return false
	}
	if this.AutoCertIssuer != that1.AutoCertIssuer {
		return false
	}
	return true
}
func (this *AuthenticationDetails) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AuthenticationDetails)
	if !ok {
		that2, ok := that.(AuthenticationDetails)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.AuthConfig) != len(that1.AuthConfig) {
		return false
	}
	for i := range this.AuthConfig {
		if !this.AuthConfig[i].Equal(that1.AuthConfig[i]) {
			return false
		}
	}
	if that1.CookieParamsChoice == nil {
		if this.CookieParamsChoice != nil {
			return false
		}
	} else if this.CookieParamsChoice == nil {
		return false
	} else if !this.CookieParamsChoice.Equal(that1.CookieParamsChoice) {
		return false
	}
	if that1.RedirectUrlChoice == nil {
		if this.RedirectUrlChoice != nil {
			return false
		}
	} else if this.RedirectUrlChoice == nil {
		return false
	} else if !this.RedirectUrlChoice.Equal(that1.RedirectUrlChoice) {
		return false
	}
	return true
}
func (this *AuthenticationDetails_UseAuthObjectConfig) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AuthenticationDetails_UseAuthObjectConfig)
	if !ok {
		that2, ok := that.(AuthenticationDetails_UseAuthObjectConfig)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.UseAuthObjectConfig.Equal(that1.UseAuthObjectConfig) {
		return false
	}
	return true
}
func (this *AuthenticationDetails_CookieParams) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AuthenticationDetails_CookieParams)
	if !ok {
		that2, ok := that.(AuthenticationDetails_CookieParams)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.CookieParams.Equal(that1.CookieParams) {
		return false
	}
	return true
}
func (this *AuthenticationDetails_RedirectUrl) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AuthenticationDetails_RedirectUrl)
	if !ok {
		that2, ok := that.(AuthenticationDetails_RedirectUrl)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.RedirectUrl != that1.RedirectUrl {
		return false
	}
	return true
}
func (this *AuthenticationDetails_RedirectDynamic) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AuthenticationDetails_RedirectDynamic)
	if !ok {
		that2, ok := that.(AuthenticationDetails_RedirectDynamic)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.RedirectDynamic.Equal(that1.RedirectDynamic) {
		return false
	}
	return true
}
func (this *PolicyBasedChallenge) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PolicyBasedChallenge)
	if !ok {
		that2, ok := that.(PolicyBasedChallenge)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.JsChallenge.Equal(that1.JsChallenge) {
		return false
	}
	if !this.CaptchaChallenge.Equal(that1.CaptchaChallenge) {
		return false
	}
	if !this.TemporaryUserBlocking.Equal(that1.TemporaryUserBlocking) {
		return false
	}
	if that1.ChallengeChoice == nil {
		if this.ChallengeChoice != nil {
			return false
		}
	} else if this.ChallengeChoice == nil {
		return false
	} else if !this.ChallengeChoice.Equal(that1.ChallengeChoice) {
		return false
	}
	if len(this.MaliciousUserMitigation) != len(that1.MaliciousUserMitigation) {
		return false
	}
	for i := range this.MaliciousUserMitigation {
		if !this.MaliciousUserMitigation[i].Equal(that1.MaliciousUserMitigation[i]) {
			return false
		}
	}
	return true
}
func (this *PolicyBasedChallenge_NoChallenge) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PolicyBasedChallenge_NoChallenge)
	if !ok {
		that2, ok := that.(PolicyBasedChallenge_NoChallenge)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NoChallenge.Equal(that1.NoChallenge) {
		return false
	}
	return true
}
func (this *PolicyBasedChallenge_AlwaysEnableJsChallenge) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PolicyBasedChallenge_AlwaysEnableJsChallenge)
	if !ok {
		that2, ok := that.(PolicyBasedChallenge_AlwaysEnableJsChallenge)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AlwaysEnableJsChallenge.Equal(that1.AlwaysEnableJsChallenge) {
		return false
	}
	return true
}
func (this *PolicyBasedChallenge_AlwaysEnableCaptchaChallenge) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PolicyBasedChallenge_AlwaysEnableCaptchaChallenge)
	if !ok {
		that2, ok := that.(PolicyBasedChallenge_AlwaysEnableCaptchaChallenge)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AlwaysEnableCaptchaChallenge.Equal(that1.AlwaysEnableCaptchaChallenge) {
		return false
	}
	return true
}
func (this *GlobalSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType)
	if !ok {
		that2, ok := that.(GlobalSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Domains) != len(that1.Domains) {
		return false
	}
	for i := range this.Domains {
		if this.Domains[i] != that1.Domains[i] {
			return false
		}
	}
	if len(this.Routes) != len(that1.Routes) {
		return false
	}
	for i := range this.Routes {
		if !this.Routes[i].Equal(that1.Routes[i]) {
			return false
		}
	}
	if !this.JavascriptInfo.Equal(that1.JavascriptInfo) {
		return false
	}
	if len(this.AdvertisePolicies) != len(that1.AdvertisePolicies) {
		return false
	}
	for i := range this.AdvertisePolicies {
		if !this.AdvertisePolicies[i].Equal(that1.AdvertisePolicies[i]) {
			return false
		}
	}
	if len(this.RequestHeadersToAdd) != len(that1.RequestHeadersToAdd) {
		return false
	}
	for i := range this.RequestHeadersToAdd {
		if !this.RequestHeadersToAdd[i].Equal(that1.RequestHeadersToAdd[i]) {
			return false
		}
	}
	if len(this.ResponseHeadersToAdd) != len(that1.ResponseHeadersToAdd) {
		return false
	}
	for i := range this.ResponseHeadersToAdd {
		if !this.ResponseHeadersToAdd[i].Equal(that1.ResponseHeadersToAdd[i]) {
			return false
		}
	}
	if len(this.RequestHeadersToRemove) != len(that1.RequestHeadersToRemove) {
		return false
	}
	for i := range this.RequestHeadersToRemove {
		if this.RequestHeadersToRemove[i] != that1.RequestHeadersToRemove[i] {
			return false
		}
	}
	if len(this.ResponseHeadersToRemove) != len(that1.ResponseHeadersToRemove) {
		return false
	}
	for i := range this.ResponseHeadersToRemove {
		if this.ResponseHeadersToRemove[i] != that1.ResponseHeadersToRemove[i] {
			return false
		}
	}
	if !this.TlsParameters.Equal(that1.TlsParameters) {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	if !this.BufferPolicy.Equal(that1.BufferPolicy) {
		return false
	}
	if !this.CorsPolicy.Equal(that1.CorsPolicy) {
		return false
	}
	if this.Proxy != that1.Proxy {
		return false
	}
	if len(this.Jwt) != len(that1.Jwt) {
		return false
	}
	for i := range this.Jwt {
		if !this.Jwt[i].Equal(that1.Jwt[i]) {
			return false
		}
	}
	if !this.WafType.Equal(that1.WafType) {
		return false
	}
	if !this.DynamicReverseProxy.Equal(that1.DynamicReverseProxy) {
		return false
	}
	if this.AddLocation != that1.AddLocation {
		return false
	}
	if !this.CompressionParams.Equal(that1.CompressionParams) {
		return false
	}
	if len(this.CustomErrors) != len(that1.CustomErrors) {
		return false
	}
	for i := range this.CustomErrors {
		if this.CustomErrors[i] != that1.CustomErrors[i] {
			return false
		}
	}
	if this.DisableDefaultErrorPages != that1.DisableDefaultErrorPages {
		return false
	}
	if this.MaxRequestHeaderSize != that1.MaxRequestHeaderSize {
		return false
	}
	if that1.ChallengeType == nil {
		if this.ChallengeType != nil {
			return false
		}
	} else if this.ChallengeType == nil {
		return false
	} else if !this.ChallengeType.Equal(that1.ChallengeType) {
		return false
	}
	if len(this.UserIdentification) != len(that1.UserIdentification) {
		return false
	}
	for i := range this.UserIdentification {
		if !this.UserIdentification[i].Equal(that1.UserIdentification[i]) {
			return false
		}
	}
	if len(this.RateLimiter) != len(that1.RateLimiter) {
		return false
	}
	for i := range this.RateLimiter {
		if !this.RateLimiter[i].Equal(that1.RateLimiter[i]) {
			return false
		}
	}
	if len(this.RateLimiterAllowedPrefixes) != len(that1.RateLimiterAllowedPrefixes) {
		return false
	}
	for i := range this.RateLimiterAllowedPrefixes {
		if !this.RateLimiterAllowedPrefixes[i].Equal(that1.RateLimiterAllowedPrefixes[i]) {
			return false
		}
	}
	if !this.RetryPolicy.Equal(that1.RetryPolicy) {
		return false
	}
	if !this.TemporaryUserBlocking.Equal(that1.TemporaryUserBlocking) {
		return false
	}
	if len(this.MaliciousUserMitigation) != len(that1.MaliciousUserMitigation) {
		return false
	}
	for i := range this.MaliciousUserMitigation {
		if !this.MaliciousUserMitigation[i].Equal(that1.MaliciousUserMitigation[i]) {
			return false
		}
	}
	if !this.TlsIntercept.Equal(that1.TlsIntercept) {
		return false
	}
	if that1.AuthenticationChoice == nil {
		if this.AuthenticationChoice != nil {
			return false
		}
	} else if this.AuthenticationChoice == nil {
		return false
	} else if !this.AuthenticationChoice.Equal(that1.AuthenticationChoice) {
		return false
	}
	if this.IdleTimeout != that1.IdleTimeout {
		return false
	}
	if this.DisableDnsResolve != that1.DisableDnsResolve {
		return false
	}
	if that1.ServerHeaderChoice == nil {
		if this.ServerHeaderChoice != nil {
			return false
		}
	} else if this.ServerHeaderChoice == nil {
		return false
	} else if !this.ServerHeaderChoice.Equal(that1.ServerHeaderChoice) {
		return false
	}
	if this.DnsVolterraManaged != that1.DnsVolterraManaged {
		return false
	}
	if len(this.DnsDomains) != len(that1.DnsDomains) {
		return false
	}
	for i := range this.DnsDomains {
		if !this.DnsDomains[i].Equal(that1.DnsDomains[i]) {
			return false
		}
	}
	if this.AutoCert != that1.AutoCert {
		return false
	}
	if this.State != that1.State {
		return false
	}
	if this.HostName != that1.HostName {
		return false
	}
	if len(this.DnsInfo) != len(that1.DnsInfo) {
		return false
	}
	for i := range this.DnsInfo {
		if !this.DnsInfo[i].Equal(that1.DnsInfo[i]) {
			return false
		}
	}
	if this.AutoCertState != that1.AutoCertState {
		return false
	}
	if !this.AutoCertInfo.Equal(that1.AutoCertInfo) {
		return false
	}
	if len(this.UserDomains) != len(that1.UserDomains) {
		return false
	}
	for i := range this.UserDomains {
		if this.UserDomains[i] != that1.UserDomains[i] {
			return false
		}
	}
	if len(this.ServicePolicySets) != len(that1.ServicePolicySets) {
		return false
	}
	for i := range this.ServicePolicySets {
		if !this.ServicePolicySets[i].Equal(that1.ServicePolicySets[i]) {
			return false
		}
	}
	if this.LoadbalancerAlgorithm != that1.LoadbalancerAlgorithm {
		return false
	}
	return true
}
func (this *GlobalSpecType_NoChallenge) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_NoChallenge)
	if !ok {
		that2, ok := that.(GlobalSpecType_NoChallenge)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NoChallenge.Equal(that1.NoChallenge) {
		return false
	}
	return true
}
func (this *GlobalSpecType_JsChallenge) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_JsChallenge)
	if !ok {
		that2, ok := that.(GlobalSpecType_JsChallenge)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.JsChallenge.Equal(that1.JsChallenge) {
		return false
	}
	return true
}
func (this *GlobalSpecType_CaptchaChallenge) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_CaptchaChallenge)
	if !ok {
		that2, ok := that.(GlobalSpecType_CaptchaChallenge)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.CaptchaChallenge.Equal(that1.CaptchaChallenge) {
		return false
	}
	return true
}
func (this *GlobalSpecType_PolicyBasedChallenge) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_PolicyBasedChallenge)
	if !ok {
		that2, ok := that.(GlobalSpecType_PolicyBasedChallenge)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.PolicyBasedChallenge.Equal(that1.PolicyBasedChallenge) {
		return false
	}
	return true
}
func (this *GlobalSpecType_NoAuthentication) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_NoAuthentication)
	if !ok {
		that2, ok := that.(GlobalSpecType_NoAuthentication)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NoAuthentication.Equal(that1.NoAuthentication) {
		return false
	}
	return true
}
func (this *GlobalSpecType_Authentication) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_Authentication)
	if !ok {
		that2, ok := that.(GlobalSpecType_Authentication)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Authentication.Equal(that1.Authentication) {
		return false
	}
	return true
}
func (this *GlobalSpecType_DefaultHeader) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_DefaultHeader)
	if !ok {
		that2, ok := that.(GlobalSpecType_DefaultHeader)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DefaultHeader.Equal(that1.DefaultHeader) {
		return false
	}
	return true
}
func (this *GlobalSpecType_ServerName) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_ServerName)
	if !ok {
		that2, ok := that.(GlobalSpecType_ServerName)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ServerName != that1.ServerName {
		return false
	}
	return true
}
func (this *GlobalSpecType_AppendServerName) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_AppendServerName)
	if !ok {
		that2, ok := that.(GlobalSpecType_AppendServerName)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.AppendServerName != that1.AppendServerName {
		return false
	}
	return true
}
func (this *GlobalSpecType_PassThrough) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_PassThrough)
	if !ok {
		that2, ok := that.(GlobalSpecType_PassThrough)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.PassThrough.Equal(that1.PassThrough) {
		return false
	}
	return true
}
func (this *CreateSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType)
	if !ok {
		that2, ok := that.(CreateSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Domains) != len(that1.Domains) {
		return false
	}
	for i := range this.Domains {
		if this.Domains[i] != that1.Domains[i] {
			return false
		}
	}
	if len(this.Routes) != len(that1.Routes) {
		return false
	}
	for i := range this.Routes {
		if !this.Routes[i].Equal(that1.Routes[i]) {
			return false
		}
	}
	if len(this.AdvertisePolicies) != len(that1.AdvertisePolicies) {
		return false
	}
	for i := range this.AdvertisePolicies {
		if !this.AdvertisePolicies[i].Equal(that1.AdvertisePolicies[i]) {
			return false
		}
	}
	if len(this.RequestHeadersToAdd) != len(that1.RequestHeadersToAdd) {
		return false
	}
	for i := range this.RequestHeadersToAdd {
		if !this.RequestHeadersToAdd[i].Equal(that1.RequestHeadersToAdd[i]) {
			return false
		}
	}
	if len(this.ResponseHeadersToAdd) != len(that1.ResponseHeadersToAdd) {
		return false
	}
	for i := range this.ResponseHeadersToAdd {
		if !this.ResponseHeadersToAdd[i].Equal(that1.ResponseHeadersToAdd[i]) {
			return false
		}
	}
	if len(this.RequestHeadersToRemove) != len(that1.RequestHeadersToRemove) {
		return false
	}
	for i := range this.RequestHeadersToRemove {
		if this.RequestHeadersToRemove[i] != that1.RequestHeadersToRemove[i] {
			return false
		}
	}
	if len(this.ResponseHeadersToRemove) != len(that1.ResponseHeadersToRemove) {
		return false
	}
	for i := range this.ResponseHeadersToRemove {
		if this.ResponseHeadersToRemove[i] != that1.ResponseHeadersToRemove[i] {
			return false
		}
	}
	if !this.TlsParameters.Equal(that1.TlsParameters) {
		return false
	}
	if !this.BufferPolicy.Equal(that1.BufferPolicy) {
		return false
	}
	if !this.CorsPolicy.Equal(that1.CorsPolicy) {
		return false
	}
	if this.Proxy != that1.Proxy {
		return false
	}
	if !this.WafType.Equal(that1.WafType) {
		return false
	}
	if !this.DynamicReverseProxy.Equal(that1.DynamicReverseProxy) {
		return false
	}
	if this.AddLocation != that1.AddLocation {
		return false
	}
	if !this.CompressionParams.Equal(that1.CompressionParams) {
		return false
	}
	if len(this.CustomErrors) != len(that1.CustomErrors) {
		return false
	}
	for i := range this.CustomErrors {
		if this.CustomErrors[i] != that1.CustomErrors[i] {
			return false
		}
	}
	if this.DisableDefaultErrorPages != that1.DisableDefaultErrorPages {
		return false
	}
	if this.MaxRequestHeaderSize != that1.MaxRequestHeaderSize {
		return false
	}
	if that1.ChallengeType == nil {
		if this.ChallengeType != nil {
			return false
		}
	} else if this.ChallengeType == nil {
		return false
	} else if !this.ChallengeType.Equal(that1.ChallengeType) {
		return false
	}
	if len(this.UserIdentification) != len(that1.UserIdentification) {
		return false
	}
	for i := range this.UserIdentification {
		if !this.UserIdentification[i].Equal(that1.UserIdentification[i]) {
			return false
		}
	}
	if len(this.RateLimiter) != len(that1.RateLimiter) {
		return false
	}
	for i := range this.RateLimiter {
		if !this.RateLimiter[i].Equal(that1.RateLimiter[i]) {
			return false
		}
	}
	if len(this.RateLimiterAllowedPrefixes) != len(that1.RateLimiterAllowedPrefixes) {
		return false
	}
	for i := range this.RateLimiterAllowedPrefixes {
		if !this.RateLimiterAllowedPrefixes[i].Equal(that1.RateLimiterAllowedPrefixes[i]) {
			return false
		}
	}
	if !this.RetryPolicy.Equal(that1.RetryPolicy) {
		return false
	}
	if this.IdleTimeout != that1.IdleTimeout {
		return false
	}
	if this.DisableDnsResolve != that1.DisableDnsResolve {
		return false
	}
	if !this.TemporaryUserBlocking.Equal(that1.TemporaryUserBlocking) {
		return false
	}
	if that1.AuthenticationChoice == nil {
		if this.AuthenticationChoice != nil {
			return false
		}
	} else if this.AuthenticationChoice == nil {
		return false
	} else if !this.AuthenticationChoice.Equal(that1.AuthenticationChoice) {
		return false
	}
	if that1.ServerHeaderChoice == nil {
		if this.ServerHeaderChoice != nil {
			return false
		}
	} else if this.ServerHeaderChoice == nil {
		return false
	} else if !this.ServerHeaderChoice.Equal(that1.ServerHeaderChoice) {
		return false
	}
	return true
}
func (this *CreateSpecType_NoChallenge) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_NoChallenge)
	if !ok {
		that2, ok := that.(CreateSpecType_NoChallenge)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NoChallenge.Equal(that1.NoChallenge) {
		return false
	}
	return true
}
func (this *CreateSpecType_JsChallenge) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_JsChallenge)
	if !ok {
		that2, ok := that.(CreateSpecType_JsChallenge)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.JsChallenge.Equal(that1.JsChallenge) {
		return false
	}
	return true
}
func (this *CreateSpecType_CaptchaChallenge) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_CaptchaChallenge)
	if !ok {
		that2, ok := that.(CreateSpecType_CaptchaChallenge)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.CaptchaChallenge.Equal(that1.CaptchaChallenge) {
		return false
	}
	return true
}
func (this *CreateSpecType_NoAuthentication) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_NoAuthentication)
	if !ok {
		that2, ok := that.(CreateSpecType_NoAuthentication)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NoAuthentication.Equal(that1.NoAuthentication) {
		return false
	}
	return true
}
func (this *CreateSpecType_Authentication) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_Authentication)
	if !ok {
		that2, ok := that.(CreateSpecType_Authentication)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Authentication.Equal(that1.Authentication) {
		return false
	}
	return true
}
func (this *CreateSpecType_DefaultHeader) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_DefaultHeader)
	if !ok {
		that2, ok := that.(CreateSpecType_DefaultHeader)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DefaultHeader.Equal(that1.DefaultHeader) {
		return false
	}
	return true
}
func (this *CreateSpecType_ServerName) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_ServerName)
	if !ok {
		that2, ok := that.(CreateSpecType_ServerName)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ServerName != that1.ServerName {
		return false
	}
	return true
}
func (this *CreateSpecType_AppendServerName) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_AppendServerName)
	if !ok {
		that2, ok := that.(CreateSpecType_AppendServerName)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.AppendServerName != that1.AppendServerName {
		return false
	}
	return true
}
func (this *CreateSpecType_PassThrough) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_PassThrough)
	if !ok {
		that2, ok := that.(CreateSpecType_PassThrough)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.PassThrough.Equal(that1.PassThrough) {
		return false
	}
	return true
}
func (this *ReplaceSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType)
	if !ok {
		that2, ok := that.(ReplaceSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Domains) != len(that1.Domains) {
		return false
	}
	for i := range this.Domains {
		if this.Domains[i] != that1.Domains[i] {
			return false
		}
	}
	if len(this.Routes) != len(that1.Routes) {
		return false
	}
	for i := range this.Routes {
		if !this.Routes[i].Equal(that1.Routes[i]) {
			return false
		}
	}
	if len(this.AdvertisePolicies) != len(that1.AdvertisePolicies) {
		return false
	}
	for i := range this.AdvertisePolicies {
		if !this.AdvertisePolicies[i].Equal(that1.AdvertisePolicies[i]) {
			return false
		}
	}
	if len(this.RequestHeadersToAdd) != len(that1.RequestHeadersToAdd) {
		return false
	}
	for i := range this.RequestHeadersToAdd {
		if !this.RequestHeadersToAdd[i].Equal(that1.RequestHeadersToAdd[i]) {
			return false
		}
	}
	if len(this.ResponseHeadersToAdd) != len(that1.ResponseHeadersToAdd) {
		return false
	}
	for i := range this.ResponseHeadersToAdd {
		if !this.ResponseHeadersToAdd[i].Equal(that1.ResponseHeadersToAdd[i]) {
			return false
		}
	}
	if len(this.RequestHeadersToRemove) != len(that1.RequestHeadersToRemove) {
		return false
	}
	for i := range this.RequestHeadersToRemove {
		if this.RequestHeadersToRemove[i] != that1.RequestHeadersToRemove[i] {
			return false
		}
	}
	if len(this.ResponseHeadersToRemove) != len(that1.ResponseHeadersToRemove) {
		return false
	}
	for i := range this.ResponseHeadersToRemove {
		if this.ResponseHeadersToRemove[i] != that1.ResponseHeadersToRemove[i] {
			return false
		}
	}
	if !this.TlsParameters.Equal(that1.TlsParameters) {
		return false
	}
	if !this.BufferPolicy.Equal(that1.BufferPolicy) {
		return false
	}
	if !this.CorsPolicy.Equal(that1.CorsPolicy) {
		return false
	}
	if this.Proxy != that1.Proxy {
		return false
	}
	if !this.WafType.Equal(that1.WafType) {
		return false
	}
	if !this.DynamicReverseProxy.Equal(that1.DynamicReverseProxy) {
		return false
	}
	if this.AddLocation != that1.AddLocation {
		return false
	}
	if !this.CompressionParams.Equal(that1.CompressionParams) {
		return false
	}
	if len(this.CustomErrors) != len(that1.CustomErrors) {
		return false
	}
	for i := range this.CustomErrors {
		if this.CustomErrors[i] != that1.CustomErrors[i] {
			return false
		}
	}
	if this.DisableDefaultErrorPages != that1.DisableDefaultErrorPages {
		return false
	}
	if this.MaxRequestHeaderSize != that1.MaxRequestHeaderSize {
		return false
	}
	if that1.ChallengeType == nil {
		if this.ChallengeType != nil {
			return false
		}
	} else if this.ChallengeType == nil {
		return false
	} else if !this.ChallengeType.Equal(that1.ChallengeType) {
		return false
	}
	if len(this.UserIdentification) != len(that1.UserIdentification) {
		return false
	}
	for i := range this.UserIdentification {
		if !this.UserIdentification[i].Equal(that1.UserIdentification[i]) {
			return false
		}
	}
	if len(this.RateLimiter) != len(that1.RateLimiter) {
		return false
	}
	for i := range this.RateLimiter {
		if !this.RateLimiter[i].Equal(that1.RateLimiter[i]) {
			return false
		}
	}
	if len(this.RateLimiterAllowedPrefixes) != len(that1.RateLimiterAllowedPrefixes) {
		return false
	}
	for i := range this.RateLimiterAllowedPrefixes {
		if !this.RateLimiterAllowedPrefixes[i].Equal(that1.RateLimiterAllowedPrefixes[i]) {
			return false
		}
	}
	if !this.RetryPolicy.Equal(that1.RetryPolicy) {
		return false
	}
	if this.IdleTimeout != that1.IdleTimeout {
		return false
	}
	if this.DisableDnsResolve != that1.DisableDnsResolve {
		return false
	}
	if !this.TemporaryUserBlocking.Equal(that1.TemporaryUserBlocking) {
		return false
	}
	if that1.AuthenticationChoice == nil {
		if this.AuthenticationChoice != nil {
			return false
		}
	} else if this.AuthenticationChoice == nil {
		return false
	} else if !this.AuthenticationChoice.Equal(that1.AuthenticationChoice) {
		return false
	}
	if that1.ServerHeaderChoice == nil {
		if this.ServerHeaderChoice != nil {
			return false
		}
	} else if this.ServerHeaderChoice == nil {
		return false
	} else if !this.ServerHeaderChoice.Equal(that1.ServerHeaderChoice) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_NoChallenge) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_NoChallenge)
	if !ok {
		that2, ok := that.(ReplaceSpecType_NoChallenge)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NoChallenge.Equal(that1.NoChallenge) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_JsChallenge) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_JsChallenge)
	if !ok {
		that2, ok := that.(ReplaceSpecType_JsChallenge)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.JsChallenge.Equal(that1.JsChallenge) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_CaptchaChallenge) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_CaptchaChallenge)
	if !ok {
		that2, ok := that.(ReplaceSpecType_CaptchaChallenge)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.CaptchaChallenge.Equal(that1.CaptchaChallenge) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_NoAuthentication) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_NoAuthentication)
	if !ok {
		that2, ok := that.(ReplaceSpecType_NoAuthentication)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NoAuthentication.Equal(that1.NoAuthentication) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_Authentication) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_Authentication)
	if !ok {
		that2, ok := that.(ReplaceSpecType_Authentication)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Authentication.Equal(that1.Authentication) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_DefaultHeader) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_DefaultHeader)
	if !ok {
		that2, ok := that.(ReplaceSpecType_DefaultHeader)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DefaultHeader.Equal(that1.DefaultHeader) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_ServerName) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_ServerName)
	if !ok {
		that2, ok := that.(ReplaceSpecType_ServerName)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ServerName != that1.ServerName {
		return false
	}
	return true
}
func (this *ReplaceSpecType_AppendServerName) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_AppendServerName)
	if !ok {
		that2, ok := that.(ReplaceSpecType_AppendServerName)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.AppendServerName != that1.AppendServerName {
		return false
	}
	return true
}
func (this *ReplaceSpecType_PassThrough) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_PassThrough)
	if !ok {
		that2, ok := that.(ReplaceSpecType_PassThrough)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.PassThrough.Equal(that1.PassThrough) {
		return false
	}
	return true
}
func (this *GetSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType)
	if !ok {
		that2, ok := that.(GetSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Domains) != len(that1.Domains) {
		return false
	}
	for i := range this.Domains {
		if this.Domains[i] != that1.Domains[i] {
			return false
		}
	}
	if len(this.Routes) != len(that1.Routes) {
		return false
	}
	for i := range this.Routes {
		if !this.Routes[i].Equal(that1.Routes[i]) {
			return false
		}
	}
	if len(this.AdvertisePolicies) != len(that1.AdvertisePolicies) {
		return false
	}
	for i := range this.AdvertisePolicies {
		if !this.AdvertisePolicies[i].Equal(that1.AdvertisePolicies[i]) {
			return false
		}
	}
	if len(this.RequestHeadersToAdd) != len(that1.RequestHeadersToAdd) {
		return false
	}
	for i := range this.RequestHeadersToAdd {
		if !this.RequestHeadersToAdd[i].Equal(that1.RequestHeadersToAdd[i]) {
			return false
		}
	}
	if len(this.ResponseHeadersToAdd) != len(that1.ResponseHeadersToAdd) {
		return false
	}
	for i := range this.ResponseHeadersToAdd {
		if !this.ResponseHeadersToAdd[i].Equal(that1.ResponseHeadersToAdd[i]) {
			return false
		}
	}
	if len(this.RequestHeadersToRemove) != len(that1.RequestHeadersToRemove) {
		return false
	}
	for i := range this.RequestHeadersToRemove {
		if this.RequestHeadersToRemove[i] != that1.RequestHeadersToRemove[i] {
			return false
		}
	}
	if len(this.ResponseHeadersToRemove) != len(that1.ResponseHeadersToRemove) {
		return false
	}
	for i := range this.ResponseHeadersToRemove {
		if this.ResponseHeadersToRemove[i] != that1.ResponseHeadersToRemove[i] {
			return false
		}
	}
	if !this.TlsParameters.Equal(that1.TlsParameters) {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	if !this.BufferPolicy.Equal(that1.BufferPolicy) {
		return false
	}
	if !this.CorsPolicy.Equal(that1.CorsPolicy) {
		return false
	}
	if this.Proxy != that1.Proxy {
		return false
	}
	if !this.WafType.Equal(that1.WafType) {
		return false
	}
	if !this.DynamicReverseProxy.Equal(that1.DynamicReverseProxy) {
		return false
	}
	if this.AddLocation != that1.AddLocation {
		return false
	}
	if !this.CompressionParams.Equal(that1.CompressionParams) {
		return false
	}
	if len(this.CustomErrors) != len(that1.CustomErrors) {
		return false
	}
	for i := range this.CustomErrors {
		if this.CustomErrors[i] != that1.CustomErrors[i] {
			return false
		}
	}
	if this.DisableDefaultErrorPages != that1.DisableDefaultErrorPages {
		return false
	}
	if this.MaxRequestHeaderSize != that1.MaxRequestHeaderSize {
		return false
	}
	if that1.ChallengeType == nil {
		if this.ChallengeType != nil {
			return false
		}
	} else if this.ChallengeType == nil {
		return false
	} else if !this.ChallengeType.Equal(that1.ChallengeType) {
		return false
	}
	if len(this.UserIdentification) != len(that1.UserIdentification) {
		return false
	}
	for i := range this.UserIdentification {
		if !this.UserIdentification[i].Equal(that1.UserIdentification[i]) {
			return false
		}
	}
	if len(this.RateLimiter) != len(that1.RateLimiter) {
		return false
	}
	for i := range this.RateLimiter {
		if !this.RateLimiter[i].Equal(that1.RateLimiter[i]) {
			return false
		}
	}
	if len(this.RateLimiterAllowedPrefixes) != len(that1.RateLimiterAllowedPrefixes) {
		return false
	}
	for i := range this.RateLimiterAllowedPrefixes {
		if !this.RateLimiterAllowedPrefixes[i].Equal(that1.RateLimiterAllowedPrefixes[i]) {
			return false
		}
	}
	if !this.RetryPolicy.Equal(that1.RetryPolicy) {
		return false
	}
	if this.IdleTimeout != that1.IdleTimeout {
		return false
	}
	if !this.TemporaryUserBlocking.Equal(that1.TemporaryUserBlocking) {
		return false
	}
	if that1.AuthenticationChoice == nil {
		if this.AuthenticationChoice != nil {
			return false
		}
	} else if this.AuthenticationChoice == nil {
		return false
	} else if !this.AuthenticationChoice.Equal(that1.AuthenticationChoice) {
		return false
	}
	if that1.ServerHeaderChoice == nil {
		if this.ServerHeaderChoice != nil {
			return false
		}
	} else if this.ServerHeaderChoice == nil {
		return false
	} else if !this.ServerHeaderChoice.Equal(that1.ServerHeaderChoice) {
		return false
	}
	if this.State != that1.State {
		return false
	}
	if this.HostName != that1.HostName {
		return false
	}
	if len(this.DnsInfo) != len(that1.DnsInfo) {
		return false
	}
	for i := range this.DnsInfo {
		if !this.DnsInfo[i].Equal(that1.DnsInfo[i]) {
			return false
		}
	}
	if this.AutoCertState != that1.AutoCertState {
		return false
	}
	if !this.AutoCertInfo.Equal(that1.AutoCertInfo) {
		return false
	}
	if this.DisableDnsResolve != that1.DisableDnsResolve {
		return false
	}
	return true
}
func (this *GetSpecType_NoChallenge) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_NoChallenge)
	if !ok {
		that2, ok := that.(GetSpecType_NoChallenge)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NoChallenge.Equal(that1.NoChallenge) {
		return false
	}
	return true
}
func (this *GetSpecType_JsChallenge) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_JsChallenge)
	if !ok {
		that2, ok := that.(GetSpecType_JsChallenge)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.JsChallenge.Equal(that1.JsChallenge) {
		return false
	}
	return true
}
func (this *GetSpecType_CaptchaChallenge) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_CaptchaChallenge)
	if !ok {
		that2, ok := that.(GetSpecType_CaptchaChallenge)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.CaptchaChallenge.Equal(that1.CaptchaChallenge) {
		return false
	}
	return true
}
func (this *GetSpecType_NoAuthentication) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_NoAuthentication)
	if !ok {
		that2, ok := that.(GetSpecType_NoAuthentication)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NoAuthentication.Equal(that1.NoAuthentication) {
		return false
	}
	return true
}
func (this *GetSpecType_Authentication) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_Authentication)
	if !ok {
		that2, ok := that.(GetSpecType_Authentication)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Authentication.Equal(that1.Authentication) {
		return false
	}
	return true
}
func (this *GetSpecType_DefaultHeader) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_DefaultHeader)
	if !ok {
		that2, ok := that.(GetSpecType_DefaultHeader)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DefaultHeader.Equal(that1.DefaultHeader) {
		return false
	}
	return true
}
func (this *GetSpecType_ServerName) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_ServerName)
	if !ok {
		that2, ok := that.(GetSpecType_ServerName)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ServerName != that1.ServerName {
		return false
	}
	return true
}
func (this *GetSpecType_AppendServerName) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_AppendServerName)
	if !ok {
		that2, ok := that.(GetSpecType_AppendServerName)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.AppendServerName != that1.AppendServerName {
		return false
	}
	return true
}
func (this *GetSpecType_PassThrough) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_PassThrough)
	if !ok {
		that2, ok := that.(GetSpecType_PassThrough)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.PassThrough.Equal(that1.PassThrough) {
		return false
	}
	return true
}
func (this *JavaScriptConfigType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&virtual_host.JavaScriptConfigType{")
	s = append(s, "CachePrefix: "+fmt.Sprintf("%#v", this.CachePrefix)+",\n")
	if this.ScriptConfig != nil {
		s = append(s, "ScriptConfig: "+fmt.Sprintf("%#v", this.ScriptConfig)+",\n")
	}
	s = append(s, "CustomScriptUrl: "+fmt.Sprintf("%#v", this.CustomScriptUrl)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DynamicReverseProxyType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&virtual_host.DynamicReverseProxyType{")
	s = append(s, "ResolveEndpointDynamically: "+fmt.Sprintf("%#v", this.ResolveEndpointDynamically)+",\n")
	s = append(s, "ResolutionNetworkType: "+fmt.Sprintf("%#v", this.ResolutionNetworkType)+",\n")
	if this.ResolutionNetwork != nil {
		s = append(s, "ResolutionNetwork: "+fmt.Sprintf("%#v", this.ResolutionNetwork)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CompressionType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&virtual_host.CompressionType{")
	s = append(s, "ContentLength: "+fmt.Sprintf("%#v", this.ContentLength)+",\n")
	s = append(s, "ContentType: "+fmt.Sprintf("%#v", this.ContentType)+",\n")
	s = append(s, "DisableOnEtagHeader: "+fmt.Sprintf("%#v", this.DisableOnEtagHeader)+",\n")
	s = append(s, "RemoveAcceptEncodingHeader: "+fmt.Sprintf("%#v", this.RemoveAcceptEncodingHeader)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *JavascriptChallengeType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&virtual_host.JavascriptChallengeType{")
	s = append(s, "EnableJsChallenge: "+fmt.Sprintf("%#v", this.EnableJsChallenge)+",\n")
	s = append(s, "JsScriptDelay: "+fmt.Sprintf("%#v", this.JsScriptDelay)+",\n")
	s = append(s, "CookieExpiry: "+fmt.Sprintf("%#v", this.CookieExpiry)+",\n")
	s = append(s, "CustomPage: "+fmt.Sprintf("%#v", this.CustomPage)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CaptchaChallengeType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&virtual_host.CaptchaChallengeType{")
	s = append(s, "EnableCaptchaChallenge: "+fmt.Sprintf("%#v", this.EnableCaptchaChallenge)+",\n")
	s = append(s, "CookieExpiry: "+fmt.Sprintf("%#v", this.CookieExpiry)+",\n")
	s = append(s, "CustomPage: "+fmt.Sprintf("%#v", this.CustomPage)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TemporaryUserBlockingType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&virtual_host.TemporaryUserBlockingType{")
	s = append(s, "CustomPage: "+fmt.Sprintf("%#v", this.CustomPage)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AutoCertInfoType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&virtual_host.AutoCertInfoType{")
	s = append(s, "AutoCertState: "+fmt.Sprintf("%#v", this.AutoCertState)+",\n")
	if this.AutoCertExpiry != nil {
		s = append(s, "AutoCertExpiry: "+fmt.Sprintf("%#v", this.AutoCertExpiry)+",\n")
	}
	s = append(s, "AutoCertSubject: "+fmt.Sprintf("%#v", this.AutoCertSubject)+",\n")
	s = append(s, "AutoCertIssuer: "+fmt.Sprintf("%#v", this.AutoCertIssuer)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AuthenticationDetails) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&virtual_host.AuthenticationDetails{")
	if this.AuthConfig != nil {
		s = append(s, "AuthConfig: "+fmt.Sprintf("%#v", this.AuthConfig)+",\n")
	}
	if this.CookieParamsChoice != nil {
		s = append(s, "CookieParamsChoice: "+fmt.Sprintf("%#v", this.CookieParamsChoice)+",\n")
	}
	if this.RedirectUrlChoice != nil {
		s = append(s, "RedirectUrlChoice: "+fmt.Sprintf("%#v", this.RedirectUrlChoice)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AuthenticationDetails_UseAuthObjectConfig) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&virtual_host.AuthenticationDetails_UseAuthObjectConfig{` +
		`UseAuthObjectConfig:` + fmt.Sprintf("%#v", this.UseAuthObjectConfig) + `}`}, ", ")
	return s
}
func (this *AuthenticationDetails_CookieParams) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&virtual_host.AuthenticationDetails_CookieParams{` +
		`CookieParams:` + fmt.Sprintf("%#v", this.CookieParams) + `}`}, ", ")
	return s
}
func (this *AuthenticationDetails_RedirectUrl) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&virtual_host.AuthenticationDetails_RedirectUrl{` +
		`RedirectUrl:` + fmt.Sprintf("%#v", this.RedirectUrl) + `}`}, ", ")
	return s
}
func (this *AuthenticationDetails_RedirectDynamic) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&virtual_host.AuthenticationDetails_RedirectDynamic{` +
		`RedirectDynamic:` + fmt.Sprintf("%#v", this.RedirectDynamic) + `}`}, ", ")
	return s
}
func (this *PolicyBasedChallenge) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 11)
	s = append(s, "&virtual_host.PolicyBasedChallenge{")
	if this.JsChallenge != nil {
		s = append(s, "JsChallenge: "+fmt.Sprintf("%#v", this.JsChallenge)+",\n")
	}
	if this.CaptchaChallenge != nil {
		s = append(s, "CaptchaChallenge: "+fmt.Sprintf("%#v", this.CaptchaChallenge)+",\n")
	}
	if this.TemporaryUserBlocking != nil {
		s = append(s, "TemporaryUserBlocking: "+fmt.Sprintf("%#v", this.TemporaryUserBlocking)+",\n")
	}
	if this.ChallengeChoice != nil {
		s = append(s, "ChallengeChoice: "+fmt.Sprintf("%#v", this.ChallengeChoice)+",\n")
	}
	if this.MaliciousUserMitigation != nil {
		s = append(s, "MaliciousUserMitigation: "+fmt.Sprintf("%#v", this.MaliciousUserMitigation)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *PolicyBasedChallenge_NoChallenge) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&virtual_host.PolicyBasedChallenge_NoChallenge{` +
		`NoChallenge:` + fmt.Sprintf("%#v", this.NoChallenge) + `}`}, ", ")
	return s
}
func (this *PolicyBasedChallenge_AlwaysEnableJsChallenge) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&virtual_host.PolicyBasedChallenge_AlwaysEnableJsChallenge{` +
		`AlwaysEnableJsChallenge:` + fmt.Sprintf("%#v", this.AlwaysEnableJsChallenge) + `}`}, ", ")
	return s
}
func (this *PolicyBasedChallenge_AlwaysEnableCaptchaChallenge) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&virtual_host.PolicyBasedChallenge_AlwaysEnableCaptchaChallenge{` +
		`AlwaysEnableCaptchaChallenge:` + fmt.Sprintf("%#v", this.AlwaysEnableCaptchaChallenge) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 55)
	s = append(s, "&virtual_host.GlobalSpecType{")
	s = append(s, "Domains: "+fmt.Sprintf("%#v", this.Domains)+",\n")
	if this.Routes != nil {
		s = append(s, "Routes: "+fmt.Sprintf("%#v", this.Routes)+",\n")
	}
	if this.JavascriptInfo != nil {
		s = append(s, "JavascriptInfo: "+fmt.Sprintf("%#v", this.JavascriptInfo)+",\n")
	}
	if this.AdvertisePolicies != nil {
		s = append(s, "AdvertisePolicies: "+fmt.Sprintf("%#v", this.AdvertisePolicies)+",\n")
	}
	if this.RequestHeadersToAdd != nil {
		s = append(s, "RequestHeadersToAdd: "+fmt.Sprintf("%#v", this.RequestHeadersToAdd)+",\n")
	}
	if this.ResponseHeadersToAdd != nil {
		s = append(s, "ResponseHeadersToAdd: "+fmt.Sprintf("%#v", this.ResponseHeadersToAdd)+",\n")
	}
	s = append(s, "RequestHeadersToRemove: "+fmt.Sprintf("%#v", this.RequestHeadersToRemove)+",\n")
	s = append(s, "ResponseHeadersToRemove: "+fmt.Sprintf("%#v", this.ResponseHeadersToRemove)+",\n")
	if this.TlsParameters != nil {
		s = append(s, "TlsParameters: "+fmt.Sprintf("%#v", this.TlsParameters)+",\n")
	}
	s = append(s, "Type: "+fmt.Sprintf("%#v", this.Type)+",\n")
	if this.BufferPolicy != nil {
		s = append(s, "BufferPolicy: "+fmt.Sprintf("%#v", this.BufferPolicy)+",\n")
	}
	if this.CorsPolicy != nil {
		s = append(s, "CorsPolicy: "+fmt.Sprintf("%#v", this.CorsPolicy)+",\n")
	}
	s = append(s, "Proxy: "+fmt.Sprintf("%#v", this.Proxy)+",\n")
	if this.Jwt != nil {
		s = append(s, "Jwt: "+fmt.Sprintf("%#v", this.Jwt)+",\n")
	}
	if this.WafType != nil {
		s = append(s, "WafType: "+fmt.Sprintf("%#v", this.WafType)+",\n")
	}
	if this.DynamicReverseProxy != nil {
		s = append(s, "DynamicReverseProxy: "+fmt.Sprintf("%#v", this.DynamicReverseProxy)+",\n")
	}
	s = append(s, "AddLocation: "+fmt.Sprintf("%#v", this.AddLocation)+",\n")
	if this.CompressionParams != nil {
		s = append(s, "CompressionParams: "+fmt.Sprintf("%#v", this.CompressionParams)+",\n")
	}
	keysForCustomErrors := make([]uint32, 0, len(this.CustomErrors))
	for k, _ := range this.CustomErrors {
		keysForCustomErrors = append(keysForCustomErrors, k)
	}
	sortkeys.Uint32s(keysForCustomErrors)
	mapStringForCustomErrors := "map[uint32]string{"
	for _, k := range keysForCustomErrors {
		mapStringForCustomErrors += fmt.Sprintf("%#v: %#v,", k, this.CustomErrors[k])
	}
	mapStringForCustomErrors += "}"
	if this.CustomErrors != nil {
		s = append(s, "CustomErrors: "+mapStringForCustomErrors+",\n")
	}
	s = append(s, "DisableDefaultErrorPages: "+fmt.Sprintf("%#v", this.DisableDefaultErrorPages)+",\n")
	s = append(s, "MaxRequestHeaderSize: "+fmt.Sprintf("%#v", this.MaxRequestHeaderSize)+",\n")
	if this.ChallengeType != nil {
		s = append(s, "ChallengeType: "+fmt.Sprintf("%#v", this.ChallengeType)+",\n")
	}
	if this.UserIdentification != nil {
		s = append(s, "UserIdentification: "+fmt.Sprintf("%#v", this.UserIdentification)+",\n")
	}
	if this.RateLimiter != nil {
		s = append(s, "RateLimiter: "+fmt.Sprintf("%#v", this.RateLimiter)+",\n")
	}
	if this.RateLimiterAllowedPrefixes != nil {
		s = append(s, "RateLimiterAllowedPrefixes: "+fmt.Sprintf("%#v", this.RateLimiterAllowedPrefixes)+",\n")
	}
	if this.RetryPolicy != nil {
		s = append(s, "RetryPolicy: "+fmt.Sprintf("%#v", this.RetryPolicy)+",\n")
	}
	if this.TemporaryUserBlocking != nil {
		s = append(s, "TemporaryUserBlocking: "+fmt.Sprintf("%#v", this.TemporaryUserBlocking)+",\n")
	}
	if this.MaliciousUserMitigation != nil {
		s = append(s, "MaliciousUserMitigation: "+fmt.Sprintf("%#v", this.MaliciousUserMitigation)+",\n")
	}
	if this.TlsIntercept != nil {
		s = append(s, "TlsIntercept: "+fmt.Sprintf("%#v", this.TlsIntercept)+",\n")
	}
	if this.AuthenticationChoice != nil {
		s = append(s, "AuthenticationChoice: "+fmt.Sprintf("%#v", this.AuthenticationChoice)+",\n")
	}
	s = append(s, "IdleTimeout: "+fmt.Sprintf("%#v", this.IdleTimeout)+",\n")
	s = append(s, "DisableDnsResolve: "+fmt.Sprintf("%#v", this.DisableDnsResolve)+",\n")
	if this.ServerHeaderChoice != nil {
		s = append(s, "ServerHeaderChoice: "+fmt.Sprintf("%#v", this.ServerHeaderChoice)+",\n")
	}
	s = append(s, "DnsVolterraManaged: "+fmt.Sprintf("%#v", this.DnsVolterraManaged)+",\n")
	if this.DnsDomains != nil {
		s = append(s, "DnsDomains: "+fmt.Sprintf("%#v", this.DnsDomains)+",\n")
	}
	s = append(s, "AutoCert: "+fmt.Sprintf("%#v", this.AutoCert)+",\n")
	s = append(s, "State: "+fmt.Sprintf("%#v", this.State)+",\n")
	s = append(s, "HostName: "+fmt.Sprintf("%#v", this.HostName)+",\n")
	if this.DnsInfo != nil {
		s = append(s, "DnsInfo: "+fmt.Sprintf("%#v", this.DnsInfo)+",\n")
	}
	s = append(s, "AutoCertState: "+fmt.Sprintf("%#v", this.AutoCertState)+",\n")
	if this.AutoCertInfo != nil {
		s = append(s, "AutoCertInfo: "+fmt.Sprintf("%#v", this.AutoCertInfo)+",\n")
	}
	s = append(s, "UserDomains: "+fmt.Sprintf("%#v", this.UserDomains)+",\n")
	if this.ServicePolicySets != nil {
		s = append(s, "ServicePolicySets: "+fmt.Sprintf("%#v", this.ServicePolicySets)+",\n")
	}
	s = append(s, "LoadbalancerAlgorithm: "+fmt.Sprintf("%#v", this.LoadbalancerAlgorithm)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GlobalSpecType_NoChallenge) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&virtual_host.GlobalSpecType_NoChallenge{` +
		`NoChallenge:` + fmt.Sprintf("%#v", this.NoChallenge) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_JsChallenge) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&virtual_host.GlobalSpecType_JsChallenge{` +
		`JsChallenge:` + fmt.Sprintf("%#v", this.JsChallenge) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_CaptchaChallenge) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&virtual_host.GlobalSpecType_CaptchaChallenge{` +
		`CaptchaChallenge:` + fmt.Sprintf("%#v", this.CaptchaChallenge) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_PolicyBasedChallenge) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&virtual_host.GlobalSpecType_PolicyBasedChallenge{` +
		`PolicyBasedChallenge:` + fmt.Sprintf("%#v", this.PolicyBasedChallenge) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_NoAuthentication) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&virtual_host.GlobalSpecType_NoAuthentication{` +
		`NoAuthentication:` + fmt.Sprintf("%#v", this.NoAuthentication) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_Authentication) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&virtual_host.GlobalSpecType_Authentication{` +
		`Authentication:` + fmt.Sprintf("%#v", this.Authentication) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_DefaultHeader) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&virtual_host.GlobalSpecType_DefaultHeader{` +
		`DefaultHeader:` + fmt.Sprintf("%#v", this.DefaultHeader) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_ServerName) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&virtual_host.GlobalSpecType_ServerName{` +
		`ServerName:` + fmt.Sprintf("%#v", this.ServerName) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_AppendServerName) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&virtual_host.GlobalSpecType_AppendServerName{` +
		`AppendServerName:` + fmt.Sprintf("%#v", this.AppendServerName) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_PassThrough) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&virtual_host.GlobalSpecType_PassThrough{` +
		`PassThrough:` + fmt.Sprintf("%#v", this.PassThrough) + `}`}, ", ")
	return s
}
func (this *CreateSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 38)
	s = append(s, "&virtual_host.CreateSpecType{")
	s = append(s, "Domains: "+fmt.Sprintf("%#v", this.Domains)+",\n")
	if this.Routes != nil {
		s = append(s, "Routes: "+fmt.Sprintf("%#v", this.Routes)+",\n")
	}
	if this.AdvertisePolicies != nil {
		s = append(s, "AdvertisePolicies: "+fmt.Sprintf("%#v", this.AdvertisePolicies)+",\n")
	}
	if this.RequestHeadersToAdd != nil {
		s = append(s, "RequestHeadersToAdd: "+fmt.Sprintf("%#v", this.RequestHeadersToAdd)+",\n")
	}
	if this.ResponseHeadersToAdd != nil {
		s = append(s, "ResponseHeadersToAdd: "+fmt.Sprintf("%#v", this.ResponseHeadersToAdd)+",\n")
	}
	s = append(s, "RequestHeadersToRemove: "+fmt.Sprintf("%#v", this.RequestHeadersToRemove)+",\n")
	s = append(s, "ResponseHeadersToRemove: "+fmt.Sprintf("%#v", this.ResponseHeadersToRemove)+",\n")
	if this.TlsParameters != nil {
		s = append(s, "TlsParameters: "+fmt.Sprintf("%#v", this.TlsParameters)+",\n")
	}
	if this.BufferPolicy != nil {
		s = append(s, "BufferPolicy: "+fmt.Sprintf("%#v", this.BufferPolicy)+",\n")
	}
	if this.CorsPolicy != nil {
		s = append(s, "CorsPolicy: "+fmt.Sprintf("%#v", this.CorsPolicy)+",\n")
	}
	s = append(s, "Proxy: "+fmt.Sprintf("%#v", this.Proxy)+",\n")
	if this.WafType != nil {
		s = append(s, "WafType: "+fmt.Sprintf("%#v", this.WafType)+",\n")
	}
	if this.DynamicReverseProxy != nil {
		s = append(s, "DynamicReverseProxy: "+fmt.Sprintf("%#v", this.DynamicReverseProxy)+",\n")
	}
	s = append(s, "AddLocation: "+fmt.Sprintf("%#v", this.AddLocation)+",\n")
	if this.CompressionParams != nil {
		s = append(s, "CompressionParams: "+fmt.Sprintf("%#v", this.CompressionParams)+",\n")
	}
	keysForCustomErrors := make([]uint32, 0, len(this.CustomErrors))
	for k, _ := range this.CustomErrors {
		keysForCustomErrors = append(keysForCustomErrors, k)
	}
	sortkeys.Uint32s(keysForCustomErrors)
	mapStringForCustomErrors := "map[uint32]string{"
	for _, k := range keysForCustomErrors {
		mapStringForCustomErrors += fmt.Sprintf("%#v: %#v,", k, this.CustomErrors[k])
	}
	mapStringForCustomErrors += "}"
	if this.CustomErrors != nil {
		s = append(s, "CustomErrors: "+mapStringForCustomErrors+",\n")
	}
	s = append(s, "DisableDefaultErrorPages: "+fmt.Sprintf("%#v", this.DisableDefaultErrorPages)+",\n")
	s = append(s, "MaxRequestHeaderSize: "+fmt.Sprintf("%#v", this.MaxRequestHeaderSize)+",\n")
	if this.ChallengeType != nil {
		s = append(s, "ChallengeType: "+fmt.Sprintf("%#v", this.ChallengeType)+",\n")
	}
	if this.UserIdentification != nil {
		s = append(s, "UserIdentification: "+fmt.Sprintf("%#v", this.UserIdentification)+",\n")
	}
	if this.RateLimiter != nil {
		s = append(s, "RateLimiter: "+fmt.Sprintf("%#v", this.RateLimiter)+",\n")
	}
	if this.RateLimiterAllowedPrefixes != nil {
		s = append(s, "RateLimiterAllowedPrefixes: "+fmt.Sprintf("%#v", this.RateLimiterAllowedPrefixes)+",\n")
	}
	if this.RetryPolicy != nil {
		s = append(s, "RetryPolicy: "+fmt.Sprintf("%#v", this.RetryPolicy)+",\n")
	}
	s = append(s, "IdleTimeout: "+fmt.Sprintf("%#v", this.IdleTimeout)+",\n")
	s = append(s, "DisableDnsResolve: "+fmt.Sprintf("%#v", this.DisableDnsResolve)+",\n")
	if this.TemporaryUserBlocking != nil {
		s = append(s, "TemporaryUserBlocking: "+fmt.Sprintf("%#v", this.TemporaryUserBlocking)+",\n")
	}
	if this.AuthenticationChoice != nil {
		s = append(s, "AuthenticationChoice: "+fmt.Sprintf("%#v", this.AuthenticationChoice)+",\n")
	}
	if this.ServerHeaderChoice != nil {
		s = append(s, "ServerHeaderChoice: "+fmt.Sprintf("%#v", this.ServerHeaderChoice)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CreateSpecType_NoChallenge) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&virtual_host.CreateSpecType_NoChallenge{` +
		`NoChallenge:` + fmt.Sprintf("%#v", this.NoChallenge) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_JsChallenge) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&virtual_host.CreateSpecType_JsChallenge{` +
		`JsChallenge:` + fmt.Sprintf("%#v", this.JsChallenge) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_CaptchaChallenge) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&virtual_host.CreateSpecType_CaptchaChallenge{` +
		`CaptchaChallenge:` + fmt.Sprintf("%#v", this.CaptchaChallenge) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_NoAuthentication) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&virtual_host.CreateSpecType_NoAuthentication{` +
		`NoAuthentication:` + fmt.Sprintf("%#v", this.NoAuthentication) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_Authentication) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&virtual_host.CreateSpecType_Authentication{` +
		`Authentication:` + fmt.Sprintf("%#v", this.Authentication) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_DefaultHeader) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&virtual_host.CreateSpecType_DefaultHeader{` +
		`DefaultHeader:` + fmt.Sprintf("%#v", this.DefaultHeader) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_ServerName) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&virtual_host.CreateSpecType_ServerName{` +
		`ServerName:` + fmt.Sprintf("%#v", this.ServerName) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_AppendServerName) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&virtual_host.CreateSpecType_AppendServerName{` +
		`AppendServerName:` + fmt.Sprintf("%#v", this.AppendServerName) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_PassThrough) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&virtual_host.CreateSpecType_PassThrough{` +
		`PassThrough:` + fmt.Sprintf("%#v", this.PassThrough) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 38)
	s = append(s, "&virtual_host.ReplaceSpecType{")
	s = append(s, "Domains: "+fmt.Sprintf("%#v", this.Domains)+",\n")
	if this.Routes != nil {
		s = append(s, "Routes: "+fmt.Sprintf("%#v", this.Routes)+",\n")
	}
	if this.AdvertisePolicies != nil {
		s = append(s, "AdvertisePolicies: "+fmt.Sprintf("%#v", this.AdvertisePolicies)+",\n")
	}
	if this.RequestHeadersToAdd != nil {
		s = append(s, "RequestHeadersToAdd: "+fmt.Sprintf("%#v", this.RequestHeadersToAdd)+",\n")
	}
	if this.ResponseHeadersToAdd != nil {
		s = append(s, "ResponseHeadersToAdd: "+fmt.Sprintf("%#v", this.ResponseHeadersToAdd)+",\n")
	}
	s = append(s, "RequestHeadersToRemove: "+fmt.Sprintf("%#v", this.RequestHeadersToRemove)+",\n")
	s = append(s, "ResponseHeadersToRemove: "+fmt.Sprintf("%#v", this.ResponseHeadersToRemove)+",\n")
	if this.TlsParameters != nil {
		s = append(s, "TlsParameters: "+fmt.Sprintf("%#v", this.TlsParameters)+",\n")
	}
	if this.BufferPolicy != nil {
		s = append(s, "BufferPolicy: "+fmt.Sprintf("%#v", this.BufferPolicy)+",\n")
	}
	if this.CorsPolicy != nil {
		s = append(s, "CorsPolicy: "+fmt.Sprintf("%#v", this.CorsPolicy)+",\n")
	}
	s = append(s, "Proxy: "+fmt.Sprintf("%#v", this.Proxy)+",\n")
	if this.WafType != nil {
		s = append(s, "WafType: "+fmt.Sprintf("%#v", this.WafType)+",\n")
	}
	if this.DynamicReverseProxy != nil {
		s = append(s, "DynamicReverseProxy: "+fmt.Sprintf("%#v", this.DynamicReverseProxy)+",\n")
	}
	s = append(s, "AddLocation: "+fmt.Sprintf("%#v", this.AddLocation)+",\n")
	if this.CompressionParams != nil {
		s = append(s, "CompressionParams: "+fmt.Sprintf("%#v", this.CompressionParams)+",\n")
	}
	keysForCustomErrors := make([]uint32, 0, len(this.CustomErrors))
	for k, _ := range this.CustomErrors {
		keysForCustomErrors = append(keysForCustomErrors, k)
	}
	sortkeys.Uint32s(keysForCustomErrors)
	mapStringForCustomErrors := "map[uint32]string{"
	for _, k := range keysForCustomErrors {
		mapStringForCustomErrors += fmt.Sprintf("%#v: %#v,", k, this.CustomErrors[k])
	}
	mapStringForCustomErrors += "}"
	if this.CustomErrors != nil {
		s = append(s, "CustomErrors: "+mapStringForCustomErrors+",\n")
	}
	s = append(s, "DisableDefaultErrorPages: "+fmt.Sprintf("%#v", this.DisableDefaultErrorPages)+",\n")
	s = append(s, "MaxRequestHeaderSize: "+fmt.Sprintf("%#v", this.MaxRequestHeaderSize)+",\n")
	if this.ChallengeType != nil {
		s = append(s, "ChallengeType: "+fmt.Sprintf("%#v", this.ChallengeType)+",\n")
	}
	if this.UserIdentification != nil {
		s = append(s, "UserIdentification: "+fmt.Sprintf("%#v", this.UserIdentification)+",\n")
	}
	if this.RateLimiter != nil {
		s = append(s, "RateLimiter: "+fmt.Sprintf("%#v", this.RateLimiter)+",\n")
	}
	if this.RateLimiterAllowedPrefixes != nil {
		s = append(s, "RateLimiterAllowedPrefixes: "+fmt.Sprintf("%#v", this.RateLimiterAllowedPrefixes)+",\n")
	}
	if this.RetryPolicy != nil {
		s = append(s, "RetryPolicy: "+fmt.Sprintf("%#v", this.RetryPolicy)+",\n")
	}
	s = append(s, "IdleTimeout: "+fmt.Sprintf("%#v", this.IdleTimeout)+",\n")
	s = append(s, "DisableDnsResolve: "+fmt.Sprintf("%#v", this.DisableDnsResolve)+",\n")
	if this.TemporaryUserBlocking != nil {
		s = append(s, "TemporaryUserBlocking: "+fmt.Sprintf("%#v", this.TemporaryUserBlocking)+",\n")
	}
	if this.AuthenticationChoice != nil {
		s = append(s, "AuthenticationChoice: "+fmt.Sprintf("%#v", this.AuthenticationChoice)+",\n")
	}
	if this.ServerHeaderChoice != nil {
		s = append(s, "ServerHeaderChoice: "+fmt.Sprintf("%#v", this.ServerHeaderChoice)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ReplaceSpecType_NoChallenge) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&virtual_host.ReplaceSpecType_NoChallenge{` +
		`NoChallenge:` + fmt.Sprintf("%#v", this.NoChallenge) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_JsChallenge) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&virtual_host.ReplaceSpecType_JsChallenge{` +
		`JsChallenge:` + fmt.Sprintf("%#v", this.JsChallenge) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_CaptchaChallenge) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&virtual_host.ReplaceSpecType_CaptchaChallenge{` +
		`CaptchaChallenge:` + fmt.Sprintf("%#v", this.CaptchaChallenge) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_NoAuthentication) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&virtual_host.ReplaceSpecType_NoAuthentication{` +
		`NoAuthentication:` + fmt.Sprintf("%#v", this.NoAuthentication) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_Authentication) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&virtual_host.ReplaceSpecType_Authentication{` +
		`Authentication:` + fmt.Sprintf("%#v", this.Authentication) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_DefaultHeader) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&virtual_host.ReplaceSpecType_DefaultHeader{` +
		`DefaultHeader:` + fmt.Sprintf("%#v", this.DefaultHeader) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_ServerName) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&virtual_host.ReplaceSpecType_ServerName{` +
		`ServerName:` + fmt.Sprintf("%#v", this.ServerName) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_AppendServerName) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&virtual_host.ReplaceSpecType_AppendServerName{` +
		`AppendServerName:` + fmt.Sprintf("%#v", this.AppendServerName) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_PassThrough) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&virtual_host.ReplaceSpecType_PassThrough{` +
		`PassThrough:` + fmt.Sprintf("%#v", this.PassThrough) + `}`}, ", ")
	return s
}
func (this *GetSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 44)
	s = append(s, "&virtual_host.GetSpecType{")
	s = append(s, "Domains: "+fmt.Sprintf("%#v", this.Domains)+",\n")
	if this.Routes != nil {
		s = append(s, "Routes: "+fmt.Sprintf("%#v", this.Routes)+",\n")
	}
	if this.AdvertisePolicies != nil {
		s = append(s, "AdvertisePolicies: "+fmt.Sprintf("%#v", this.AdvertisePolicies)+",\n")
	}
	if this.RequestHeadersToAdd != nil {
		s = append(s, "RequestHeadersToAdd: "+fmt.Sprintf("%#v", this.RequestHeadersToAdd)+",\n")
	}
	if this.ResponseHeadersToAdd != nil {
		s = append(s, "ResponseHeadersToAdd: "+fmt.Sprintf("%#v", this.ResponseHeadersToAdd)+",\n")
	}
	s = append(s, "RequestHeadersToRemove: "+fmt.Sprintf("%#v", this.RequestHeadersToRemove)+",\n")
	s = append(s, "ResponseHeadersToRemove: "+fmt.Sprintf("%#v", this.ResponseHeadersToRemove)+",\n")
	if this.TlsParameters != nil {
		s = append(s, "TlsParameters: "+fmt.Sprintf("%#v", this.TlsParameters)+",\n")
	}
	s = append(s, "Type: "+fmt.Sprintf("%#v", this.Type)+",\n")
	if this.BufferPolicy != nil {
		s = append(s, "BufferPolicy: "+fmt.Sprintf("%#v", this.BufferPolicy)+",\n")
	}
	if this.CorsPolicy != nil {
		s = append(s, "CorsPolicy: "+fmt.Sprintf("%#v", this.CorsPolicy)+",\n")
	}
	s = append(s, "Proxy: "+fmt.Sprintf("%#v", this.Proxy)+",\n")
	if this.WafType != nil {
		s = append(s, "WafType: "+fmt.Sprintf("%#v", this.WafType)+",\n")
	}
	if this.DynamicReverseProxy != nil {
		s = append(s, "DynamicReverseProxy: "+fmt.Sprintf("%#v", this.DynamicReverseProxy)+",\n")
	}
	s = append(s, "AddLocation: "+fmt.Sprintf("%#v", this.AddLocation)+",\n")
	if this.CompressionParams != nil {
		s = append(s, "CompressionParams: "+fmt.Sprintf("%#v", this.CompressionParams)+",\n")
	}
	keysForCustomErrors := make([]uint32, 0, len(this.CustomErrors))
	for k, _ := range this.CustomErrors {
		keysForCustomErrors = append(keysForCustomErrors, k)
	}
	sortkeys.Uint32s(keysForCustomErrors)
	mapStringForCustomErrors := "map[uint32]string{"
	for _, k := range keysForCustomErrors {
		mapStringForCustomErrors += fmt.Sprintf("%#v: %#v,", k, this.CustomErrors[k])
	}
	mapStringForCustomErrors += "}"
	if this.CustomErrors != nil {
		s = append(s, "CustomErrors: "+mapStringForCustomErrors+",\n")
	}
	s = append(s, "DisableDefaultErrorPages: "+fmt.Sprintf("%#v", this.DisableDefaultErrorPages)+",\n")
	s = append(s, "MaxRequestHeaderSize: "+fmt.Sprintf("%#v", this.MaxRequestHeaderSize)+",\n")
	if this.ChallengeType != nil {
		s = append(s, "ChallengeType: "+fmt.Sprintf("%#v", this.ChallengeType)+",\n")
	}
	if this.UserIdentification != nil {
		s = append(s, "UserIdentification: "+fmt.Sprintf("%#v", this.UserIdentification)+",\n")
	}
	if this.RateLimiter != nil {
		s = append(s, "RateLimiter: "+fmt.Sprintf("%#v", this.RateLimiter)+",\n")
	}
	if this.RateLimiterAllowedPrefixes != nil {
		s = append(s, "RateLimiterAllowedPrefixes: "+fmt.Sprintf("%#v", this.RateLimiterAllowedPrefixes)+",\n")
	}
	if this.RetryPolicy != nil {
		s = append(s, "RetryPolicy: "+fmt.Sprintf("%#v", this.RetryPolicy)+",\n")
	}
	s = append(s, "IdleTimeout: "+fmt.Sprintf("%#v", this.IdleTimeout)+",\n")
	if this.TemporaryUserBlocking != nil {
		s = append(s, "TemporaryUserBlocking: "+fmt.Sprintf("%#v", this.TemporaryUserBlocking)+",\n")
	}
	if this.AuthenticationChoice != nil {
		s = append(s, "AuthenticationChoice: "+fmt.Sprintf("%#v", this.AuthenticationChoice)+",\n")
	}
	if this.ServerHeaderChoice != nil {
		s = append(s, "ServerHeaderChoice: "+fmt.Sprintf("%#v", this.ServerHeaderChoice)+",\n")
	}
	s = append(s, "State: "+fmt.Sprintf("%#v", this.State)+",\n")
	s = append(s, "HostName: "+fmt.Sprintf("%#v", this.HostName)+",\n")
	if this.DnsInfo != nil {
		s = append(s, "DnsInfo: "+fmt.Sprintf("%#v", this.DnsInfo)+",\n")
	}
	s = append(s, "AutoCertState: "+fmt.Sprintf("%#v", this.AutoCertState)+",\n")
	if this.AutoCertInfo != nil {
		s = append(s, "AutoCertInfo: "+fmt.Sprintf("%#v", this.AutoCertInfo)+",\n")
	}
	s = append(s, "DisableDnsResolve: "+fmt.Sprintf("%#v", this.DisableDnsResolve)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetSpecType_NoChallenge) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&virtual_host.GetSpecType_NoChallenge{` +
		`NoChallenge:` + fmt.Sprintf("%#v", this.NoChallenge) + `}`}, ", ")
	return s
}
func (this *GetSpecType_JsChallenge) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&virtual_host.GetSpecType_JsChallenge{` +
		`JsChallenge:` + fmt.Sprintf("%#v", this.JsChallenge) + `}`}, ", ")
	return s
}
func (this *GetSpecType_CaptchaChallenge) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&virtual_host.GetSpecType_CaptchaChallenge{` +
		`CaptchaChallenge:` + fmt.Sprintf("%#v", this.CaptchaChallenge) + `}`}, ", ")
	return s
}
func (this *GetSpecType_NoAuthentication) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&virtual_host.GetSpecType_NoAuthentication{` +
		`NoAuthentication:` + fmt.Sprintf("%#v", this.NoAuthentication) + `}`}, ", ")
	return s
}
func (this *GetSpecType_Authentication) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&virtual_host.GetSpecType_Authentication{` +
		`Authentication:` + fmt.Sprintf("%#v", this.Authentication) + `}`}, ", ")
	return s
}
func (this *GetSpecType_DefaultHeader) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&virtual_host.GetSpecType_DefaultHeader{` +
		`DefaultHeader:` + fmt.Sprintf("%#v", this.DefaultHeader) + `}`}, ", ")
	return s
}
func (this *GetSpecType_ServerName) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&virtual_host.GetSpecType_ServerName{` +
		`ServerName:` + fmt.Sprintf("%#v", this.ServerName) + `}`}, ", ")
	return s
}
func (this *GetSpecType_AppendServerName) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&virtual_host.GetSpecType_AppendServerName{` +
		`AppendServerName:` + fmt.Sprintf("%#v", this.AppendServerName) + `}`}, ", ")
	return s
}
func (this *GetSpecType_PassThrough) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&virtual_host.GetSpecType_PassThrough{` +
		`PassThrough:` + fmt.Sprintf("%#v", this.PassThrough) + `}`}, ", ")
	return s
}
func valueToGoStringTypes(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *JavaScriptConfigType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *JavaScriptConfigType) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.CachePrefix) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTypes(dAtA, i, uint64(len(m.CachePrefix)))
		i += copy(dAtA[i:], m.CachePrefix)
	}
	if m.ScriptConfig != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.ScriptConfig.Size()))
		n1, err := m.ScriptConfig.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if len(m.CustomScriptUrl) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(len(m.CustomScriptUrl)))
		i += copy(dAtA[i:], m.CustomScriptUrl)
	}
	return i, nil
}

func (m *DynamicReverseProxyType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DynamicReverseProxyType) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ResolveEndpointDynamically {
		dAtA[i] = 0x8
		i++
		if m.ResolveEndpointDynamically {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.ResolutionNetworkType != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.ResolutionNetworkType))
	}
	if len(m.ResolutionNetwork) > 0 {
		for _, msg := range m.ResolutionNetwork {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintTypes(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *CompressionType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CompressionType) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ContentLength != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.ContentLength))
	}
	if len(m.ContentType) > 0 {
		for _, s := range m.ContentType {
			dAtA[i] = 0x12
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if m.DisableOnEtagHeader {
		dAtA[i] = 0x18
		i++
		if m.DisableOnEtagHeader {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.RemoveAcceptEncodingHeader {
		dAtA[i] = 0x20
		i++
		if m.RemoveAcceptEncodingHeader {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *JavascriptChallengeType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *JavascriptChallengeType) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.EnableJsChallenge {
		dAtA[i] = 0x8
		i++
		if m.EnableJsChallenge {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.JsScriptDelay != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.JsScriptDelay))
	}
	if m.CookieExpiry != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.CookieExpiry))
	}
	if len(m.CustomPage) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintTypes(dAtA, i, uint64(len(m.CustomPage)))
		i += copy(dAtA[i:], m.CustomPage)
	}
	return i, nil
}

func (m *CaptchaChallengeType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CaptchaChallengeType) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.EnableCaptchaChallenge {
		dAtA[i] = 0x8
		i++
		if m.EnableCaptchaChallenge {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.CookieExpiry != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.CookieExpiry))
	}
	if len(m.CustomPage) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(len(m.CustomPage)))
		i += copy(dAtA[i:], m.CustomPage)
	}
	return i, nil
}

func (m *TemporaryUserBlockingType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TemporaryUserBlockingType) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.CustomPage) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTypes(dAtA, i, uint64(len(m.CustomPage)))
		i += copy(dAtA[i:], m.CustomPage)
	}
	return i, nil
}

func (m *AutoCertInfoType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AutoCertInfoType) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.AutoCertState != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.AutoCertState))
	}
	if m.AutoCertExpiry != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.AutoCertExpiry.Size()))
		n2, err := m.AutoCertExpiry.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if len(m.AutoCertSubject) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(len(m.AutoCertSubject)))
		i += copy(dAtA[i:], m.AutoCertSubject)
	}
	if len(m.AutoCertIssuer) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintTypes(dAtA, i, uint64(len(m.AutoCertIssuer)))
		i += copy(dAtA[i:], m.AutoCertIssuer)
	}
	return i, nil
}

func (m *AuthenticationDetails) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AuthenticationDetails) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.AuthConfig) > 0 {
		for _, msg := range m.AuthConfig {
			dAtA[i] = 0xa
			i++
			i = encodeVarintTypes(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.CookieParamsChoice != nil {
		nn3, err := m.CookieParamsChoice.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn3
	}
	if m.RedirectUrlChoice != nil {
		nn4, err := m.RedirectUrlChoice.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn4
	}
	return i, nil
}

func (m *AuthenticationDetails_UseAuthObjectConfig) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.UseAuthObjectConfig != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.UseAuthObjectConfig.Size()))
		n5, err := m.UseAuthObjectConfig.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	return i, nil
}
func (m *AuthenticationDetails_CookieParams) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.CookieParams != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.CookieParams.Size()))
		n6, err := m.CookieParams.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	return i, nil
}
func (m *AuthenticationDetails_RedirectUrl) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x32
	i++
	i = encodeVarintTypes(dAtA, i, uint64(len(m.RedirectUrl)))
	i += copy(dAtA[i:], m.RedirectUrl)
	return i, nil
}
func (m *AuthenticationDetails_RedirectDynamic) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.RedirectDynamic != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.RedirectDynamic.Size()))
		n7, err := m.RedirectDynamic.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	return i, nil
}
func (m *PolicyBasedChallenge) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PolicyBasedChallenge) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.JsChallenge != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.JsChallenge.Size()))
		n8, err := m.JsChallenge.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n8
	}
	if m.CaptchaChallenge != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.CaptchaChallenge.Size()))
		n9, err := m.CaptchaChallenge.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n9
	}
	if m.TemporaryUserBlocking != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.TemporaryUserBlocking.Size()))
		n10, err := m.TemporaryUserBlocking.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n10
	}
	if m.ChallengeChoice != nil {
		nn11, err := m.ChallengeChoice.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn11
	}
	if len(m.MaliciousUserMitigation) > 0 {
		for _, msg := range m.MaliciousUserMitigation {
			dAtA[i] = 0x42
			i++
			i = encodeVarintTypes(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *PolicyBasedChallenge_NoChallenge) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.NoChallenge != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.NoChallenge.Size()))
		n12, err := m.NoChallenge.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n12
	}
	return i, nil
}
func (m *PolicyBasedChallenge_AlwaysEnableJsChallenge) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.AlwaysEnableJsChallenge != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.AlwaysEnableJsChallenge.Size()))
		n13, err := m.AlwaysEnableJsChallenge.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n13
	}
	return i, nil
}
func (m *PolicyBasedChallenge_AlwaysEnableCaptchaChallenge) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.AlwaysEnableCaptchaChallenge != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.AlwaysEnableCaptchaChallenge.Size()))
		n14, err := m.AlwaysEnableCaptchaChallenge.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n14
	}
	return i, nil
}
func (m *GlobalSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GlobalSpecType) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Domains) > 0 {
		for _, s := range m.Domains {
			dAtA[i] = 0x12
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.Routes) > 0 {
		for _, msg := range m.Routes {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintTypes(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.JavascriptInfo != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.JavascriptInfo.Size()))
		n15, err := m.JavascriptInfo.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n15
	}
	if len(m.AdvertisePolicies) > 0 {
		for _, msg := range m.AdvertisePolicies {
			dAtA[i] = 0x2a
			i++
			i = encodeVarintTypes(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.RequestHeadersToAdd) > 0 {
		for _, msg := range m.RequestHeadersToAdd {
			dAtA[i] = 0x32
			i++
			i = encodeVarintTypes(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.ResponseHeadersToAdd) > 0 {
		for _, msg := range m.ResponseHeadersToAdd {
			dAtA[i] = 0x3a
			i++
			i = encodeVarintTypes(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.ResponseHeadersToRemove) > 0 {
		for _, s := range m.ResponseHeadersToRemove {
			dAtA[i] = 0x42
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if m.TlsParameters != nil {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.TlsParameters.Size()))
		n16, err := m.TlsParameters.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n16
	}
	if m.Type != 0 {
		dAtA[i] = 0x50
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.Type))
	}
	if m.BufferPolicy != nil {
		dAtA[i] = 0x62
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.BufferPolicy.Size()))
		n17, err := m.BufferPolicy.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n17
	}
	if m.CorsPolicy != nil {
		dAtA[i] = 0x6a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.CorsPolicy.Size()))
		n18, err := m.CorsPolicy.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n18
	}
	if m.Proxy != 0 {
		dAtA[i] = 0x78
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.Proxy))
	}
	if len(m.Jwt) > 0 {
		for _, msg := range m.Jwt {
			dAtA[i] = 0x82
			i++
			dAtA[i] = 0x1
			i++
			i = encodeVarintTypes(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.RequestHeadersToRemove) > 0 {
		for _, s := range m.RequestHeadersToRemove {
			dAtA[i] = 0x8a
			i++
			dAtA[i] = 0x1
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if m.WafType != nil {
		dAtA[i] = 0x92
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.WafType.Size()))
		n19, err := m.WafType.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n19
	}
	if m.DynamicReverseProxy != nil {
		dAtA[i] = 0x9a
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.DynamicReverseProxy.Size()))
		n20, err := m.DynamicReverseProxy.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n20
	}
	if m.AddLocation {
		dAtA[i] = 0xa0
		i++
		dAtA[i] = 0x1
		i++
		if m.AddLocation {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.CompressionParams != nil {
		dAtA[i] = 0xaa
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.CompressionParams.Size()))
		n21, err := m.CompressionParams.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n21
	}
	if len(m.CustomErrors) > 0 {
		keysForCustomErrors := make([]uint32, 0, len(m.CustomErrors))
		for k, _ := range m.CustomErrors {
			keysForCustomErrors = append(keysForCustomErrors, uint32(k))
		}
		sortkeys.Uint32s(keysForCustomErrors)
		for _, k := range keysForCustomErrors {
			dAtA[i] = 0xb2
			i++
			dAtA[i] = 0x1
			i++
			v := m.CustomErrors[uint32(k)]
			mapSize := 1 + sovTypes(uint64(k)) + 1 + len(v) + sovTypes(uint64(len(v)))
			i = encodeVarintTypes(dAtA, i, uint64(mapSize))
			dAtA[i] = 0x8
			i++
			i = encodeVarintTypes(dAtA, i, uint64(k))
			dAtA[i] = 0x12
			i++
			i = encodeVarintTypes(dAtA, i, uint64(len(v)))
			i += copy(dAtA[i:], v)
		}
	}
	if m.MaxRequestHeaderSize != 0 {
		dAtA[i] = 0xb8
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.MaxRequestHeaderSize))
	}
	if m.ChallengeType != nil {
		nn22, err := m.ChallengeType.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn22
	}
	if len(m.UserIdentification) > 0 {
		for _, msg := range m.UserIdentification {
			dAtA[i] = 0xca
			i++
			dAtA[i] = 0x1
			i++
			i = encodeVarintTypes(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.RateLimiter) > 0 {
		for _, msg := range m.RateLimiter {
			dAtA[i] = 0xd2
			i++
			dAtA[i] = 0x1
			i++
			i = encodeVarintTypes(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.RateLimiterAllowedPrefixes) > 0 {
		for _, msg := range m.RateLimiterAllowedPrefixes {
			dAtA[i] = 0xda
			i++
			dAtA[i] = 0x1
			i++
			i = encodeVarintTypes(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.RetryPolicy != nil {
		dAtA[i] = 0xe2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.RetryPolicy.Size()))
		n23, err := m.RetryPolicy.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n23
	}
	if m.IdleTimeout != 0 {
		dAtA[i] = 0x80
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.IdleTimeout))
	}
	if m.DisableDefaultErrorPages {
		dAtA[i] = 0x88
		i++
		dAtA[i] = 0x2
		i++
		if m.DisableDefaultErrorPages {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.DisableDnsResolve {
		dAtA[i] = 0x90
		i++
		dAtA[i] = 0x2
		i++
		if m.DisableDnsResolve {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.TemporaryUserBlocking != nil {
		dAtA[i] = 0x9a
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.TemporaryUserBlocking.Size()))
		n24, err := m.TemporaryUserBlocking.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n24
	}
	if len(m.MaliciousUserMitigation) > 0 {
		for _, msg := range m.MaliciousUserMitigation {
			dAtA[i] = 0xa2
			i++
			dAtA[i] = 0x2
			i++
			i = encodeVarintTypes(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.TlsIntercept != nil {
		dAtA[i] = 0xaa
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.TlsIntercept.Size()))
		n25, err := m.TlsIntercept.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n25
	}
	if m.AuthenticationChoice != nil {
		nn26, err := m.AuthenticationChoice.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn26
	}
	if m.ServerHeaderChoice != nil {
		nn27, err := m.ServerHeaderChoice.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn27
	}
	if m.DnsVolterraManaged {
		dAtA[i] = 0xc0
		i++
		dAtA[i] = 0x3e
		i++
		if m.DnsVolterraManaged {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.DnsDomains) > 0 {
		for _, msg := range m.DnsDomains {
			dAtA[i] = 0xca
			i++
			dAtA[i] = 0x3e
			i++
			i = encodeVarintTypes(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.AutoCert {
		dAtA[i] = 0xd0
		i++
		dAtA[i] = 0x3e
		i++
		if m.AutoCert {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.State != 0 {
		dAtA[i] = 0xd8
		i++
		dAtA[i] = 0x3e
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.State))
	}
	if len(m.HostName) > 0 {
		dAtA[i] = 0xe2
		i++
		dAtA[i] = 0x3e
		i++
		i = encodeVarintTypes(dAtA, i, uint64(len(m.HostName)))
		i += copy(dAtA[i:], m.HostName)
	}
	if len(m.DnsInfo) > 0 {
		for _, msg := range m.DnsInfo {
			dAtA[i] = 0xea
			i++
			dAtA[i] = 0x3e
			i++
			i = encodeVarintTypes(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.AutoCertState != 0 {
		dAtA[i] = 0xf0
		i++
		dAtA[i] = 0x3e
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.AutoCertState))
	}
	if m.AutoCertInfo != nil {
		dAtA[i] = 0x92
		i++
		dAtA[i] = 0x3f
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.AutoCertInfo.Size()))
		n28, err := m.AutoCertInfo.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n28
	}
	if len(m.UserDomains) > 0 {
		for _, s := range m.UserDomains {
			dAtA[i] = 0x9a
			i++
			dAtA[i] = 0x3f
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.ServicePolicySets) > 0 {
		for _, msg := range m.ServicePolicySets {
			dAtA[i] = 0xa2
			i++
			dAtA[i] = 0x3f
			i++
			i = encodeVarintTypes(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.LoadbalancerAlgorithm != 0 {
		dAtA[i] = 0xa8
		i++
		dAtA[i] = 0x3f
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.LoadbalancerAlgorithm))
	}
	return i, nil
}

func (m *GlobalSpecType_JsChallenge) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.JsChallenge != nil {
		dAtA[i] = 0xc2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.JsChallenge.Size()))
		n29, err := m.JsChallenge.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n29
	}
	return i, nil
}
func (m *GlobalSpecType_CaptchaChallenge) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.CaptchaChallenge != nil {
		dAtA[i] = 0xea
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.CaptchaChallenge.Size()))
		n30, err := m.CaptchaChallenge.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n30
	}
	return i, nil
}
func (m *GlobalSpecType_NoChallenge) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.NoChallenge != nil {
		dAtA[i] = 0xfa
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.NoChallenge.Size()))
		n31, err := m.NoChallenge.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n31
	}
	return i, nil
}
func (m *GlobalSpecType_NoAuthentication) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.NoAuthentication != nil {
		dAtA[i] = 0xba
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.NoAuthentication.Size()))
		n32, err := m.NoAuthentication.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n32
	}
	return i, nil
}
func (m *GlobalSpecType_Authentication) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Authentication != nil {
		dAtA[i] = 0xc2
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.Authentication.Size()))
		n33, err := m.Authentication.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n33
	}
	return i, nil
}
func (m *GlobalSpecType_PolicyBasedChallenge) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.PolicyBasedChallenge != nil {
		dAtA[i] = 0xca
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.PolicyBasedChallenge.Size()))
		n34, err := m.PolicyBasedChallenge.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n34
	}
	return i, nil
}
func (m *GlobalSpecType_DefaultHeader) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.DefaultHeader != nil {
		dAtA[i] = 0xda
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.DefaultHeader.Size()))
		n35, err := m.DefaultHeader.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n35
	}
	return i, nil
}
func (m *GlobalSpecType_ServerName) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0xe2
	i++
	dAtA[i] = 0x2
	i++
	i = encodeVarintTypes(dAtA, i, uint64(len(m.ServerName)))
	i += copy(dAtA[i:], m.ServerName)
	return i, nil
}
func (m *GlobalSpecType_AppendServerName) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0xea
	i++
	dAtA[i] = 0x2
	i++
	i = encodeVarintTypes(dAtA, i, uint64(len(m.AppendServerName)))
	i += copy(dAtA[i:], m.AppendServerName)
	return i, nil
}
func (m *GlobalSpecType_PassThrough) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.PassThrough != nil {
		dAtA[i] = 0xf2
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.PassThrough.Size()))
		n36, err := m.PassThrough.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n36
	}
	return i, nil
}
func (m *CreateSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateSpecType) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Domains) > 0 {
		for _, s := range m.Domains {
			dAtA[i] = 0x12
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.Routes) > 0 {
		for _, msg := range m.Routes {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintTypes(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.AdvertisePolicies) > 0 {
		for _, msg := range m.AdvertisePolicies {
			dAtA[i] = 0x2a
			i++
			i = encodeVarintTypes(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.RequestHeadersToAdd) > 0 {
		for _, msg := range m.RequestHeadersToAdd {
			dAtA[i] = 0x32
			i++
			i = encodeVarintTypes(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.ResponseHeadersToAdd) > 0 {
		for _, msg := range m.ResponseHeadersToAdd {
			dAtA[i] = 0x3a
			i++
			i = encodeVarintTypes(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.ResponseHeadersToRemove) > 0 {
		for _, s := range m.ResponseHeadersToRemove {
			dAtA[i] = 0x42
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if m.TlsParameters != nil {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.TlsParameters.Size()))
		n37, err := m.TlsParameters.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n37
	}
	if m.BufferPolicy != nil {
		dAtA[i] = 0x62
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.BufferPolicy.Size()))
		n38, err := m.BufferPolicy.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n38
	}
	if m.CorsPolicy != nil {
		dAtA[i] = 0x6a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.CorsPolicy.Size()))
		n39, err := m.CorsPolicy.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n39
	}
	if m.Proxy != 0 {
		dAtA[i] = 0x78
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.Proxy))
	}
	if len(m.RequestHeadersToRemove) > 0 {
		for _, s := range m.RequestHeadersToRemove {
			dAtA[i] = 0x8a
			i++
			dAtA[i] = 0x1
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if m.WafType != nil {
		dAtA[i] = 0x92
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.WafType.Size()))
		n40, err := m.WafType.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n40
	}
	if m.DynamicReverseProxy != nil {
		dAtA[i] = 0x9a
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.DynamicReverseProxy.Size()))
		n41, err := m.DynamicReverseProxy.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n41
	}
	if m.AddLocation {
		dAtA[i] = 0xa0
		i++
		dAtA[i] = 0x1
		i++
		if m.AddLocation {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.CompressionParams != nil {
		dAtA[i] = 0xaa
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.CompressionParams.Size()))
		n42, err := m.CompressionParams.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n42
	}
	if len(m.CustomErrors) > 0 {
		keysForCustomErrors := make([]uint32, 0, len(m.CustomErrors))
		for k, _ := range m.CustomErrors {
			keysForCustomErrors = append(keysForCustomErrors, uint32(k))
		}
		sortkeys.Uint32s(keysForCustomErrors)
		for _, k := range keysForCustomErrors {
			dAtA[i] = 0xb2
			i++
			dAtA[i] = 0x1
			i++
			v := m.CustomErrors[uint32(k)]
			mapSize := 1 + sovTypes(uint64(k)) + 1 + len(v) + sovTypes(uint64(len(v)))
			i = encodeVarintTypes(dAtA, i, uint64(mapSize))
			dAtA[i] = 0x8
			i++
			i = encodeVarintTypes(dAtA, i, uint64(k))
			dAtA[i] = 0x12
			i++
			i = encodeVarintTypes(dAtA, i, uint64(len(v)))
			i += copy(dAtA[i:], v)
		}
	}
	if m.MaxRequestHeaderSize != 0 {
		dAtA[i] = 0xb8
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.MaxRequestHeaderSize))
	}
	if m.ChallengeType != nil {
		nn43, err := m.ChallengeType.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn43
	}
	if len(m.UserIdentification) > 0 {
		for _, msg := range m.UserIdentification {
			dAtA[i] = 0xca
			i++
			dAtA[i] = 0x1
			i++
			i = encodeVarintTypes(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.RateLimiter) > 0 {
		for _, msg := range m.RateLimiter {
			dAtA[i] = 0xd2
			i++
			dAtA[i] = 0x1
			i++
			i = encodeVarintTypes(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.RateLimiterAllowedPrefixes) > 0 {
		for _, msg := range m.RateLimiterAllowedPrefixes {
			dAtA[i] = 0xda
			i++
			dAtA[i] = 0x1
			i++
			i = encodeVarintTypes(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.RetryPolicy != nil {
		dAtA[i] = 0xe2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.RetryPolicy.Size()))
		n44, err := m.RetryPolicy.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n44
	}
	if m.IdleTimeout != 0 {
		dAtA[i] = 0x80
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.IdleTimeout))
	}
	if m.DisableDefaultErrorPages {
		dAtA[i] = 0x88
		i++
		dAtA[i] = 0x2
		i++
		if m.DisableDefaultErrorPages {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.DisableDnsResolve {
		dAtA[i] = 0x90
		i++
		dAtA[i] = 0x2
		i++
		if m.DisableDnsResolve {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.TemporaryUserBlocking != nil {
		dAtA[i] = 0x9a
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.TemporaryUserBlocking.Size()))
		n45, err := m.TemporaryUserBlocking.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n45
	}
	if m.AuthenticationChoice != nil {
		nn46, err := m.AuthenticationChoice.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn46
	}
	if m.ServerHeaderChoice != nil {
		nn47, err := m.ServerHeaderChoice.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn47
	}
	return i, nil
}

func (m *CreateSpecType_JsChallenge) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.JsChallenge != nil {
		dAtA[i] = 0xc2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.JsChallenge.Size()))
		n48, err := m.JsChallenge.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n48
	}
	return i, nil
}
func (m *CreateSpecType_CaptchaChallenge) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.CaptchaChallenge != nil {
		dAtA[i] = 0xea
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.CaptchaChallenge.Size()))
		n49, err := m.CaptchaChallenge.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n49
	}
	return i, nil
}
func (m *CreateSpecType_NoChallenge) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.NoChallenge != nil {
		dAtA[i] = 0xfa
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.NoChallenge.Size()))
		n50, err := m.NoChallenge.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n50
	}
	return i, nil
}
func (m *CreateSpecType_NoAuthentication) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.NoAuthentication != nil {
		dAtA[i] = 0xba
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.NoAuthentication.Size()))
		n51, err := m.NoAuthentication.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n51
	}
	return i, nil
}
func (m *CreateSpecType_Authentication) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Authentication != nil {
		dAtA[i] = 0xc2
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.Authentication.Size()))
		n52, err := m.Authentication.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n52
	}
	return i, nil
}
func (m *CreateSpecType_DefaultHeader) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.DefaultHeader != nil {
		dAtA[i] = 0xda
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.DefaultHeader.Size()))
		n53, err := m.DefaultHeader.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n53
	}
	return i, nil
}
func (m *CreateSpecType_ServerName) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0xe2
	i++
	dAtA[i] = 0x2
	i++
	i = encodeVarintTypes(dAtA, i, uint64(len(m.ServerName)))
	i += copy(dAtA[i:], m.ServerName)
	return i, nil
}
func (m *CreateSpecType_AppendServerName) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0xea
	i++
	dAtA[i] = 0x2
	i++
	i = encodeVarintTypes(dAtA, i, uint64(len(m.AppendServerName)))
	i += copy(dAtA[i:], m.AppendServerName)
	return i, nil
}
func (m *CreateSpecType_PassThrough) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.PassThrough != nil {
		dAtA[i] = 0xf2
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.PassThrough.Size()))
		n54, err := m.PassThrough.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n54
	}
	return i, nil
}
func (m *ReplaceSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplaceSpecType) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Domains) > 0 {
		for _, s := range m.Domains {
			dAtA[i] = 0x12
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.Routes) > 0 {
		for _, msg := range m.Routes {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintTypes(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.AdvertisePolicies) > 0 {
		for _, msg := range m.AdvertisePolicies {
			dAtA[i] = 0x2a
			i++
			i = encodeVarintTypes(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.RequestHeadersToAdd) > 0 {
		for _, msg := range m.RequestHeadersToAdd {
			dAtA[i] = 0x32
			i++
			i = encodeVarintTypes(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.ResponseHeadersToAdd) > 0 {
		for _, msg := range m.ResponseHeadersToAdd {
			dAtA[i] = 0x3a
			i++
			i = encodeVarintTypes(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.ResponseHeadersToRemove) > 0 {
		for _, s := range m.ResponseHeadersToRemove {
			dAtA[i] = 0x42
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if m.TlsParameters != nil {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.TlsParameters.Size()))
		n55, err := m.TlsParameters.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n55
	}
	if m.BufferPolicy != nil {
		dAtA[i] = 0x62
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.BufferPolicy.Size()))
		n56, err := m.BufferPolicy.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n56
	}
	if m.CorsPolicy != nil {
		dAtA[i] = 0x6a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.CorsPolicy.Size()))
		n57, err := m.CorsPolicy.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n57
	}
	if m.Proxy != 0 {
		dAtA[i] = 0x78
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.Proxy))
	}
	if len(m.RequestHeadersToRemove) > 0 {
		for _, s := range m.RequestHeadersToRemove {
			dAtA[i] = 0x8a
			i++
			dAtA[i] = 0x1
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if m.WafType != nil {
		dAtA[i] = 0x92
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.WafType.Size()))
		n58, err := m.WafType.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n58
	}
	if m.DynamicReverseProxy != nil {
		dAtA[i] = 0x9a
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.DynamicReverseProxy.Size()))
		n59, err := m.DynamicReverseProxy.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n59
	}
	if m.AddLocation {
		dAtA[i] = 0xa0
		i++
		dAtA[i] = 0x1
		i++
		if m.AddLocation {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.CompressionParams != nil {
		dAtA[i] = 0xaa
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.CompressionParams.Size()))
		n60, err := m.CompressionParams.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n60
	}
	if len(m.CustomErrors) > 0 {
		keysForCustomErrors := make([]uint32, 0, len(m.CustomErrors))
		for k, _ := range m.CustomErrors {
			keysForCustomErrors = append(keysForCustomErrors, uint32(k))
		}
		sortkeys.Uint32s(keysForCustomErrors)
		for _, k := range keysForCustomErrors {
			dAtA[i] = 0xb2
			i++
			dAtA[i] = 0x1
			i++
			v := m.CustomErrors[uint32(k)]
			mapSize := 1 + sovTypes(uint64(k)) + 1 + len(v) + sovTypes(uint64(len(v)))
			i = encodeVarintTypes(dAtA, i, uint64(mapSize))
			dAtA[i] = 0x8
			i++
			i = encodeVarintTypes(dAtA, i, uint64(k))
			dAtA[i] = 0x12
			i++
			i = encodeVarintTypes(dAtA, i, uint64(len(v)))
			i += copy(dAtA[i:], v)
		}
	}
	if m.MaxRequestHeaderSize != 0 {
		dAtA[i] = 0xb8
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.MaxRequestHeaderSize))
	}
	if m.ChallengeType != nil {
		nn61, err := m.ChallengeType.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn61
	}
	if len(m.UserIdentification) > 0 {
		for _, msg := range m.UserIdentification {
			dAtA[i] = 0xca
			i++
			dAtA[i] = 0x1
			i++
			i = encodeVarintTypes(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.RateLimiter) > 0 {
		for _, msg := range m.RateLimiter {
			dAtA[i] = 0xd2
			i++
			dAtA[i] = 0x1
			i++
			i = encodeVarintTypes(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.RateLimiterAllowedPrefixes) > 0 {
		for _, msg := range m.RateLimiterAllowedPrefixes {
			dAtA[i] = 0xda
			i++
			dAtA[i] = 0x1
			i++
			i = encodeVarintTypes(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.RetryPolicy != nil {
		dAtA[i] = 0xe2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.RetryPolicy.Size()))
		n62, err := m.RetryPolicy.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n62
	}
	if m.IdleTimeout != 0 {
		dAtA[i] = 0x80
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.IdleTimeout))
	}
	if m.DisableDefaultErrorPages {
		dAtA[i] = 0x88
		i++
		dAtA[i] = 0x2
		i++
		if m.DisableDefaultErrorPages {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.DisableDnsResolve {
		dAtA[i] = 0x90
		i++
		dAtA[i] = 0x2
		i++
		if m.DisableDnsResolve {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.TemporaryUserBlocking != nil {
		dAtA[i] = 0x9a
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.TemporaryUserBlocking.Size()))
		n63, err := m.TemporaryUserBlocking.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n63
	}
	if m.AuthenticationChoice != nil {
		nn64, err := m.AuthenticationChoice.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn64
	}
	if m.ServerHeaderChoice != nil {
		nn65, err := m.ServerHeaderChoice.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn65
	}
	return i, nil
}

func (m *ReplaceSpecType_JsChallenge) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.JsChallenge != nil {
		dAtA[i] = 0xc2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.JsChallenge.Size()))
		n66, err := m.JsChallenge.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n66
	}
	return i, nil
}
func (m *ReplaceSpecType_CaptchaChallenge) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.CaptchaChallenge != nil {
		dAtA[i] = 0xea
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.CaptchaChallenge.Size()))
		n67, err := m.CaptchaChallenge.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n67
	}
	return i, nil
}
func (m *ReplaceSpecType_NoChallenge) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.NoChallenge != nil {
		dAtA[i] = 0xfa
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.NoChallenge.Size()))
		n68, err := m.NoChallenge.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n68
	}
	return i, nil
}
func (m *ReplaceSpecType_NoAuthentication) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.NoAuthentication != nil {
		dAtA[i] = 0xba
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.NoAuthentication.Size()))
		n69, err := m.NoAuthentication.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n69
	}
	return i, nil
}
func (m *ReplaceSpecType_Authentication) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Authentication != nil {
		dAtA[i] = 0xc2
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.Authentication.Size()))
		n70, err := m.Authentication.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n70
	}
	return i, nil
}
func (m *ReplaceSpecType_DefaultHeader) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.DefaultHeader != nil {
		dAtA[i] = 0xda
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.DefaultHeader.Size()))
		n71, err := m.DefaultHeader.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n71
	}
	return i, nil
}
func (m *ReplaceSpecType_ServerName) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0xe2
	i++
	dAtA[i] = 0x2
	i++
	i = encodeVarintTypes(dAtA, i, uint64(len(m.ServerName)))
	i += copy(dAtA[i:], m.ServerName)
	return i, nil
}
func (m *ReplaceSpecType_AppendServerName) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0xea
	i++
	dAtA[i] = 0x2
	i++
	i = encodeVarintTypes(dAtA, i, uint64(len(m.AppendServerName)))
	i += copy(dAtA[i:], m.AppendServerName)
	return i, nil
}
func (m *ReplaceSpecType_PassThrough) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.PassThrough != nil {
		dAtA[i] = 0xf2
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.PassThrough.Size()))
		n72, err := m.PassThrough.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n72
	}
	return i, nil
}
func (m *GetSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetSpecType) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Domains) > 0 {
		for _, s := range m.Domains {
			dAtA[i] = 0x12
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.Routes) > 0 {
		for _, msg := range m.Routes {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintTypes(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.AdvertisePolicies) > 0 {
		for _, msg := range m.AdvertisePolicies {
			dAtA[i] = 0x2a
			i++
			i = encodeVarintTypes(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.RequestHeadersToAdd) > 0 {
		for _, msg := range m.RequestHeadersToAdd {
			dAtA[i] = 0x32
			i++
			i = encodeVarintTypes(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.ResponseHeadersToAdd) > 0 {
		for _, msg := range m.ResponseHeadersToAdd {
			dAtA[i] = 0x3a
			i++
			i = encodeVarintTypes(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.ResponseHeadersToRemove) > 0 {
		for _, s := range m.ResponseHeadersToRemove {
			dAtA[i] = 0x42
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if m.TlsParameters != nil {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.TlsParameters.Size()))
		n73, err := m.TlsParameters.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n73
	}
	if m.Type != 0 {
		dAtA[i] = 0x50
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.Type))
	}
	if m.BufferPolicy != nil {
		dAtA[i] = 0x62
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.BufferPolicy.Size()))
		n74, err := m.BufferPolicy.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n74
	}
	if m.CorsPolicy != nil {
		dAtA[i] = 0x6a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.CorsPolicy.Size()))
		n75, err := m.CorsPolicy.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n75
	}
	if m.Proxy != 0 {
		dAtA[i] = 0x78
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.Proxy))
	}
	if len(m.RequestHeadersToRemove) > 0 {
		for _, s := range m.RequestHeadersToRemove {
			dAtA[i] = 0x8a
			i++
			dAtA[i] = 0x1
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if m.WafType != nil {
		dAtA[i] = 0x92
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.WafType.Size()))
		n76, err := m.WafType.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n76
	}
	if m.DynamicReverseProxy != nil {
		dAtA[i] = 0x9a
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.DynamicReverseProxy.Size()))
		n77, err := m.DynamicReverseProxy.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n77
	}
	if m.AddLocation {
		dAtA[i] = 0xa0
		i++
		dAtA[i] = 0x1
		i++
		if m.AddLocation {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.CompressionParams != nil {
		dAtA[i] = 0xaa
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.CompressionParams.Size()))
		n78, err := m.CompressionParams.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n78
	}
	if len(m.CustomErrors) > 0 {
		keysForCustomErrors := make([]uint32, 0, len(m.CustomErrors))
		for k, _ := range m.CustomErrors {
			keysForCustomErrors = append(keysForCustomErrors, uint32(k))
		}
		sortkeys.Uint32s(keysForCustomErrors)
		for _, k := range keysForCustomErrors {
			dAtA[i] = 0xb2
			i++
			dAtA[i] = 0x1
			i++
			v := m.CustomErrors[uint32(k)]
			mapSize := 1 + sovTypes(uint64(k)) + 1 + len(v) + sovTypes(uint64(len(v)))
			i = encodeVarintTypes(dAtA, i, uint64(mapSize))
			dAtA[i] = 0x8
			i++
			i = encodeVarintTypes(dAtA, i, uint64(k))
			dAtA[i] = 0x12
			i++
			i = encodeVarintTypes(dAtA, i, uint64(len(v)))
			i += copy(dAtA[i:], v)
		}
	}
	if m.MaxRequestHeaderSize != 0 {
		dAtA[i] = 0xb8
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.MaxRequestHeaderSize))
	}
	if m.ChallengeType != nil {
		nn79, err := m.ChallengeType.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn79
	}
	if len(m.UserIdentification) > 0 {
		for _, msg := range m.UserIdentification {
			dAtA[i] = 0xca
			i++
			dAtA[i] = 0x1
			i++
			i = encodeVarintTypes(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.RateLimiter) > 0 {
		for _, msg := range m.RateLimiter {
			dAtA[i] = 0xd2
			i++
			dAtA[i] = 0x1
			i++
			i = encodeVarintTypes(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.RateLimiterAllowedPrefixes) > 0 {
		for _, msg := range m.RateLimiterAllowedPrefixes {
			dAtA[i] = 0xda
			i++
			dAtA[i] = 0x1
			i++
			i = encodeVarintTypes(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.RetryPolicy != nil {
		dAtA[i] = 0xe2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.RetryPolicy.Size()))
		n80, err := m.RetryPolicy.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n80
	}
	if m.IdleTimeout != 0 {
		dAtA[i] = 0x80
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.IdleTimeout))
	}
	if m.DisableDefaultErrorPages {
		dAtA[i] = 0x88
		i++
		dAtA[i] = 0x2
		i++
		if m.DisableDefaultErrorPages {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.DisableDnsResolve {
		dAtA[i] = 0x90
		i++
		dAtA[i] = 0x2
		i++
		if m.DisableDnsResolve {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.TemporaryUserBlocking != nil {
		dAtA[i] = 0x9a
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.TemporaryUserBlocking.Size()))
		n81, err := m.TemporaryUserBlocking.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n81
	}
	if m.AuthenticationChoice != nil {
		nn82, err := m.AuthenticationChoice.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn82
	}
	if m.ServerHeaderChoice != nil {
		nn83, err := m.ServerHeaderChoice.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn83
	}
	if m.State != 0 {
		dAtA[i] = 0xd8
		i++
		dAtA[i] = 0x3e
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.State))
	}
	if len(m.HostName) > 0 {
		dAtA[i] = 0xe2
		i++
		dAtA[i] = 0x3e
		i++
		i = encodeVarintTypes(dAtA, i, uint64(len(m.HostName)))
		i += copy(dAtA[i:], m.HostName)
	}
	if len(m.DnsInfo) > 0 {
		for _, msg := range m.DnsInfo {
			dAtA[i] = 0xea
			i++
			dAtA[i] = 0x3e
			i++
			i = encodeVarintTypes(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.AutoCertState != 0 {
		dAtA[i] = 0xf0
		i++
		dAtA[i] = 0x3e
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.AutoCertState))
	}
	if m.AutoCertInfo != nil {
		dAtA[i] = 0x92
		i++
		dAtA[i] = 0x3f
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.AutoCertInfo.Size()))
		n84, err := m.AutoCertInfo.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n84
	}
	return i, nil
}

func (m *GetSpecType_JsChallenge) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.JsChallenge != nil {
		dAtA[i] = 0xc2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.JsChallenge.Size()))
		n85, err := m.JsChallenge.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n85
	}
	return i, nil
}
func (m *GetSpecType_CaptchaChallenge) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.CaptchaChallenge != nil {
		dAtA[i] = 0xea
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.CaptchaChallenge.Size()))
		n86, err := m.CaptchaChallenge.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n86
	}
	return i, nil
}
func (m *GetSpecType_NoChallenge) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.NoChallenge != nil {
		dAtA[i] = 0xfa
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.NoChallenge.Size()))
		n87, err := m.NoChallenge.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n87
	}
	return i, nil
}
func (m *GetSpecType_NoAuthentication) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.NoAuthentication != nil {
		dAtA[i] = 0xba
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.NoAuthentication.Size()))
		n88, err := m.NoAuthentication.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n88
	}
	return i, nil
}
func (m *GetSpecType_Authentication) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Authentication != nil {
		dAtA[i] = 0xc2
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.Authentication.Size()))
		n89, err := m.Authentication.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n89
	}
	return i, nil
}
func (m *GetSpecType_DefaultHeader) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.DefaultHeader != nil {
		dAtA[i] = 0xda
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.DefaultHeader.Size()))
		n90, err := m.DefaultHeader.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n90
	}
	return i, nil
}
func (m *GetSpecType_ServerName) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0xe2
	i++
	dAtA[i] = 0x2
	i++
	i = encodeVarintTypes(dAtA, i, uint64(len(m.ServerName)))
	i += copy(dAtA[i:], m.ServerName)
	return i, nil
}
func (m *GetSpecType_AppendServerName) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0xea
	i++
	dAtA[i] = 0x2
	i++
	i = encodeVarintTypes(dAtA, i, uint64(len(m.AppendServerName)))
	i += copy(dAtA[i:], m.AppendServerName)
	return i, nil
}
func (m *GetSpecType_PassThrough) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.PassThrough != nil {
		dAtA[i] = 0xf2
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.PassThrough.Size()))
		n91, err := m.PassThrough.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n91
	}
	return i, nil
}
func encodeVarintTypes(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func NewPopulatedJavaScriptConfigType(r randyTypes, easy bool) *JavaScriptConfigType {
	this := &JavaScriptConfigType{}
	this.CachePrefix = string(randStringTypes(r))
	if r.Intn(10) != 0 {
		this.ScriptConfig = google_protobuf3.NewPopulatedStruct(r, easy)
	}
	this.CustomScriptUrl = string(randStringTypes(r))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedDynamicReverseProxyType(r randyTypes, easy bool) *DynamicReverseProxyType {
	this := &DynamicReverseProxyType{}
	this.ResolveEndpointDynamically = bool(bool(r.Intn(2) == 0))
	this.ResolutionNetworkType = ves_io_schema3.VirtualNetworkType([]int32{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10}[r.Intn(11)])
	if r.Intn(10) != 0 {
		v1 := r.Intn(5)
		this.ResolutionNetwork = make([]*ves_io_schema4.ObjectRefType, v1)
		for i := 0; i < v1; i++ {
			this.ResolutionNetwork[i] = ves_io_schema4.NewPopulatedObjectRefType(r, easy)
		}
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedCompressionType(r randyTypes, easy bool) *CompressionType {
	this := &CompressionType{}
	this.ContentLength = uint32(r.Uint32())
	v2 := r.Intn(10)
	this.ContentType = make([]string, v2)
	for i := 0; i < v2; i++ {
		this.ContentType[i] = string(randStringTypes(r))
	}
	this.DisableOnEtagHeader = bool(bool(r.Intn(2) == 0))
	this.RemoveAcceptEncodingHeader = bool(bool(r.Intn(2) == 0))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedJavascriptChallengeType(r randyTypes, easy bool) *JavascriptChallengeType {
	this := &JavascriptChallengeType{}
	this.EnableJsChallenge = bool(bool(r.Intn(2) == 0))
	this.JsScriptDelay = uint32(r.Uint32())
	this.CookieExpiry = uint32(r.Uint32())
	this.CustomPage = string(randStringTypes(r))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedCaptchaChallengeType(r randyTypes, easy bool) *CaptchaChallengeType {
	this := &CaptchaChallengeType{}
	this.EnableCaptchaChallenge = bool(bool(r.Intn(2) == 0))
	this.CookieExpiry = uint32(r.Uint32())
	this.CustomPage = string(randStringTypes(r))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedTemporaryUserBlockingType(r randyTypes, easy bool) *TemporaryUserBlockingType {
	this := &TemporaryUserBlockingType{}
	this.CustomPage = string(randStringTypes(r))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedAutoCertInfoType(r randyTypes, easy bool) *AutoCertInfoType {
	this := &AutoCertInfoType{}
	this.AutoCertState = CertificationState([]int32{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}[r.Intn(12)])
	if r.Intn(10) != 0 {
		this.AutoCertExpiry = google_protobuf1.NewPopulatedTimestamp(r, easy)
	}
	this.AutoCertSubject = string(randStringTypes(r))
	this.AutoCertIssuer = string(randStringTypes(r))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedAuthenticationDetails(r randyTypes, easy bool) *AuthenticationDetails {
	this := &AuthenticationDetails{}
	if r.Intn(10) != 0 {
		v3 := r.Intn(5)
		this.AuthConfig = make([]*ves_io_schema4.ObjectRefType, v3)
		for i := 0; i < v3; i++ {
			this.AuthConfig[i] = ves_io_schema4.NewPopulatedObjectRefType(r, easy)
		}
	}
	oneofNumber_CookieParamsChoice := []int32{3, 4}[r.Intn(2)]
	switch oneofNumber_CookieParamsChoice {
	case 3:
		this.CookieParamsChoice = NewPopulatedAuthenticationDetails_UseAuthObjectConfig(r, easy)
	case 4:
		this.CookieParamsChoice = NewPopulatedAuthenticationDetails_CookieParams(r, easy)
	}
	oneofNumber_RedirectUrlChoice := []int32{6, 7}[r.Intn(2)]
	switch oneofNumber_RedirectUrlChoice {
	case 6:
		this.RedirectUrlChoice = NewPopulatedAuthenticationDetails_RedirectUrl(r, easy)
	case 7:
		this.RedirectUrlChoice = NewPopulatedAuthenticationDetails_RedirectDynamic(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedAuthenticationDetails_UseAuthObjectConfig(r randyTypes, easy bool) *AuthenticationDetails_UseAuthObjectConfig {
	this := &AuthenticationDetails_UseAuthObjectConfig{}
	this.UseAuthObjectConfig = ves_io_schema4.NewPopulatedEmpty(r, easy)
	return this
}
func NewPopulatedAuthenticationDetails_CookieParams(r randyTypes, easy bool) *AuthenticationDetails_CookieParams {
	this := &AuthenticationDetails_CookieParams{}
	this.CookieParams = ves_io_schema_authentication.NewPopulatedCookieParams(r, easy)
	return this
}
func NewPopulatedAuthenticationDetails_RedirectUrl(r randyTypes, easy bool) *AuthenticationDetails_RedirectUrl {
	this := &AuthenticationDetails_RedirectUrl{}
	this.RedirectUrl = string(randStringTypes(r))
	return this
}
func NewPopulatedAuthenticationDetails_RedirectDynamic(r randyTypes, easy bool) *AuthenticationDetails_RedirectDynamic {
	this := &AuthenticationDetails_RedirectDynamic{}
	this.RedirectDynamic = ves_io_schema4.NewPopulatedEmpty(r, easy)
	return this
}
func NewPopulatedPolicyBasedChallenge(r randyTypes, easy bool) *PolicyBasedChallenge {
	this := &PolicyBasedChallenge{}
	if r.Intn(10) != 0 {
		this.JsChallenge = NewPopulatedJavascriptChallengeType(r, easy)
	}
	if r.Intn(10) != 0 {
		this.CaptchaChallenge = NewPopulatedCaptchaChallengeType(r, easy)
	}
	if r.Intn(10) != 0 {
		this.TemporaryUserBlocking = NewPopulatedTemporaryUserBlockingType(r, easy)
	}
	oneofNumber_ChallengeChoice := []int32{5, 6, 7}[r.Intn(3)]
	switch oneofNumber_ChallengeChoice {
	case 5:
		this.ChallengeChoice = NewPopulatedPolicyBasedChallenge_NoChallenge(r, easy)
	case 6:
		this.ChallengeChoice = NewPopulatedPolicyBasedChallenge_AlwaysEnableJsChallenge(r, easy)
	case 7:
		this.ChallengeChoice = NewPopulatedPolicyBasedChallenge_AlwaysEnableCaptchaChallenge(r, easy)
	}
	if r.Intn(10) != 0 {
		v4 := r.Intn(5)
		this.MaliciousUserMitigation = make([]*ves_io_schema4.ObjectRefType, v4)
		for i := 0; i < v4; i++ {
			this.MaliciousUserMitigation[i] = ves_io_schema4.NewPopulatedObjectRefType(r, easy)
		}
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedPolicyBasedChallenge_NoChallenge(r randyTypes, easy bool) *PolicyBasedChallenge_NoChallenge {
	this := &PolicyBasedChallenge_NoChallenge{}
	this.NoChallenge = ves_io_schema4.NewPopulatedEmpty(r, easy)
	return this
}
func NewPopulatedPolicyBasedChallenge_AlwaysEnableJsChallenge(r randyTypes, easy bool) *PolicyBasedChallenge_AlwaysEnableJsChallenge {
	this := &PolicyBasedChallenge_AlwaysEnableJsChallenge{}
	this.AlwaysEnableJsChallenge = ves_io_schema4.NewPopulatedEmpty(r, easy)
	return this
}
func NewPopulatedPolicyBasedChallenge_AlwaysEnableCaptchaChallenge(r randyTypes, easy bool) *PolicyBasedChallenge_AlwaysEnableCaptchaChallenge {
	this := &PolicyBasedChallenge_AlwaysEnableCaptchaChallenge{}
	this.AlwaysEnableCaptchaChallenge = ves_io_schema4.NewPopulatedEmpty(r, easy)
	return this
}
func NewPopulatedGlobalSpecType(r randyTypes, easy bool) *GlobalSpecType {
	this := &GlobalSpecType{}
	v5 := r.Intn(10)
	this.Domains = make([]string, v5)
	for i := 0; i < v5; i++ {
		this.Domains[i] = string(randStringTypes(r))
	}
	if r.Intn(10) != 0 {
		v6 := r.Intn(5)
		this.Routes = make([]*ves_io_schema4.ObjectRefType, v6)
		for i := 0; i < v6; i++ {
			this.Routes[i] = ves_io_schema4.NewPopulatedObjectRefType(r, easy)
		}
	}
	if r.Intn(10) != 0 {
		this.JavascriptInfo = NewPopulatedJavaScriptConfigType(r, easy)
	}
	if r.Intn(10) != 0 {
		v7 := r.Intn(5)
		this.AdvertisePolicies = make([]*ves_io_schema4.ObjectRefType, v7)
		for i := 0; i < v7; i++ {
			this.AdvertisePolicies[i] = ves_io_schema4.NewPopulatedObjectRefType(r, easy)
		}
	}
	if r.Intn(10) != 0 {
		v8 := r.Intn(5)
		this.RequestHeadersToAdd = make([]*ves_io_schema4.HeaderManipulationOptionType, v8)
		for i := 0; i < v8; i++ {
			this.RequestHeadersToAdd[i] = ves_io_schema4.NewPopulatedHeaderManipulationOptionType(r, easy)
		}
	}
	if r.Intn(10) != 0 {
		v9 := r.Intn(5)
		this.ResponseHeadersToAdd = make([]*ves_io_schema4.HeaderManipulationOptionType, v9)
		for i := 0; i < v9; i++ {
			this.ResponseHeadersToAdd[i] = ves_io_schema4.NewPopulatedHeaderManipulationOptionType(r, easy)
		}
	}
	v10 := r.Intn(10)
	this.ResponseHeadersToRemove = make([]string, v10)
	for i := 0; i < v10; i++ {
		this.ResponseHeadersToRemove[i] = string(randStringTypes(r))
	}
	if r.Intn(10) != 0 {
		this.TlsParameters = ves_io_schema4.NewPopulatedDownstreamTlsParamsType(r, easy)
	}
	this.Type = VirtualHostType([]int32{0, 1, 2, 3, 4, 5}[r.Intn(6)])
	if r.Intn(10) != 0 {
		this.BufferPolicy = ves_io_schema4.NewPopulatedBufferConfigType(r, easy)
	}
	if r.Intn(10) != 0 {
		this.CorsPolicy = ves_io_schema4.NewPopulatedCorsPolicy(r, easy)
	}
	this.Proxy = ProxyType([]int32{0, 1, 2, 3, 4, 5}[r.Intn(6)])
	if r.Intn(10) != 0 {
		v11 := r.Intn(5)
		this.Jwt = make([]*ves_io_schema4.ObjectRefType, v11)
		for i := 0; i < v11; i++ {
			this.Jwt[i] = ves_io_schema4.NewPopulatedObjectRefType(r, easy)
		}
	}
	v12 := r.Intn(10)
	this.RequestHeadersToRemove = make([]string, v12)
	for i := 0; i < v12; i++ {
		this.RequestHeadersToRemove[i] = string(randStringTypes(r))
	}
	if r.Intn(10) != 0 {
		this.WafType = ves_io_schema4.NewPopulatedWafType(r, easy)
	}
	if r.Intn(10) != 0 {
		this.DynamicReverseProxy = NewPopulatedDynamicReverseProxyType(r, easy)
	}
	this.AddLocation = bool(bool(r.Intn(2) == 0))
	if r.Intn(10) != 0 {
		this.CompressionParams = NewPopulatedCompressionType(r, easy)
	}
	if r.Intn(10) != 0 {
		v13 := r.Intn(10)
		this.CustomErrors = make(map[uint32]string)
		for i := 0; i < v13; i++ {
			this.CustomErrors[uint32(r.Uint32())] = randStringTypes(r)
		}
	}
	this.MaxRequestHeaderSize = uint32(r.Uint32())
	oneofNumber_ChallengeType := []int32{24, 29, 31, 41}[r.Intn(4)]
	switch oneofNumber_ChallengeType {
	case 24:
		this.ChallengeType = NewPopulatedGlobalSpecType_JsChallenge(r, easy)
	case 29:
		this.ChallengeType = NewPopulatedGlobalSpecType_CaptchaChallenge(r, easy)
	case 31:
		this.ChallengeType = NewPopulatedGlobalSpecType_NoChallenge(r, easy)
	case 41:
		this.ChallengeType = NewPopulatedGlobalSpecType_PolicyBasedChallenge(r, easy)
	}
	if r.Intn(10) != 0 {
		v14 := r.Intn(5)
		this.UserIdentification = make([]*ves_io_schema4.ObjectRefType, v14)
		for i := 0; i < v14; i++ {
			this.UserIdentification[i] = ves_io_schema4.NewPopulatedObjectRefType(r, easy)
		}
	}
	if r.Intn(10) != 0 {
		v15 := r.Intn(5)
		this.RateLimiter = make([]*ves_io_schema4.ObjectRefType, v15)
		for i := 0; i < v15; i++ {
			this.RateLimiter[i] = ves_io_schema4.NewPopulatedObjectRefType(r, easy)
		}
	}
	if r.Intn(10) != 0 {
		v16 := r.Intn(5)
		this.RateLimiterAllowedPrefixes = make([]*ves_io_schema4.ObjectRefType, v16)
		for i := 0; i < v16; i++ {
			this.RateLimiterAllowedPrefixes[i] = ves_io_schema4.NewPopulatedObjectRefType(r, easy)
		}
	}
	if r.Intn(10) != 0 {
		this.RetryPolicy = ves_io_schema4.NewPopulatedRetryPolicyType(r, easy)
	}
	this.IdleTimeout = uint32(r.Uint32())
	this.DisableDefaultErrorPages = bool(bool(r.Intn(2) == 0))
	this.DisableDnsResolve = bool(bool(r.Intn(2) == 0))
	if r.Intn(10) != 0 {
		this.TemporaryUserBlocking = NewPopulatedTemporaryUserBlockingType(r, easy)
	}
	if r.Intn(10) != 0 {
		v17 := r.Intn(5)
		this.MaliciousUserMitigation = make([]*ves_io_schema4.ObjectRefType, v17)
		for i := 0; i < v17; i++ {
			this.MaliciousUserMitigation[i] = ves_io_schema4.NewPopulatedObjectRefType(r, easy)
		}
	}
	if r.Intn(10) != 0 {
		this.TlsIntercept = ves_io_schema4.NewPopulatedTlsInterceptionType(r, easy)
	}
	oneofNumber_AuthenticationChoice := []int32{39, 40}[r.Intn(2)]
	switch oneofNumber_AuthenticationChoice {
	case 39:
		this.AuthenticationChoice = NewPopulatedGlobalSpecType_NoAuthentication(r, easy)
	case 40:
		this.AuthenticationChoice = NewPopulatedGlobalSpecType_Authentication(r, easy)
	}
	oneofNumber_ServerHeaderChoice := []int32{43, 44, 45, 46}[r.Intn(4)]
	switch oneofNumber_ServerHeaderChoice {
	case 43:
		this.ServerHeaderChoice = NewPopulatedGlobalSpecType_DefaultHeader(r, easy)
	case 44:
		this.ServerHeaderChoice = NewPopulatedGlobalSpecType_ServerName(r, easy)
	case 45:
		this.ServerHeaderChoice = NewPopulatedGlobalSpecType_AppendServerName(r, easy)
	case 46:
		this.ServerHeaderChoice = NewPopulatedGlobalSpecType_PassThrough(r, easy)
	}
	this.DnsVolterraManaged = bool(bool(r.Intn(2) == 0))
	if r.Intn(10) != 0 {
		v18 := r.Intn(5)
		this.DnsDomains = make([]*ves_io_schema4.ObjectRefType, v18)
		for i := 0; i < v18; i++ {
			this.DnsDomains[i] = ves_io_schema4.NewPopulatedObjectRefType(r, easy)
		}
	}
	this.AutoCert = bool(bool(r.Intn(2) == 0))
	this.State = VirtualHostState([]int32{0, 1, 2, 3, 4, 5}[r.Intn(6)])
	this.HostName = string(randStringTypes(r))
	if r.Intn(10) != 0 {
		v19 := r.Intn(5)
		this.DnsInfo = make([]*ves_io_schema_virtual_host_dns_info.DnsInfo, v19)
		for i := 0; i < v19; i++ {
			this.DnsInfo[i] = ves_io_schema_virtual_host_dns_info.NewPopulatedDnsInfo(r, easy)
		}
	}
	this.AutoCertState = CertificationState([]int32{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}[r.Intn(12)])
	if r.Intn(10) != 0 {
		this.AutoCertInfo = NewPopulatedAutoCertInfoType(r, easy)
	}
	v20 := r.Intn(10)
	this.UserDomains = make([]string, v20)
	for i := 0; i < v20; i++ {
		this.UserDomains[i] = string(randStringTypes(r))
	}
	if r.Intn(10) != 0 {
		v21 := r.Intn(5)
		this.ServicePolicySets = make([]*ves_io_schema4.ObjectRefType, v21)
		for i := 0; i < v21; i++ {
			this.ServicePolicySets[i] = ves_io_schema4.NewPopulatedObjectRefType(r, easy)
		}
	}
	this.LoadbalancerAlgorithm = ves_io_schema_cluster.LoadbalancerAlgorithm([]int32{0, 1, 2, 3, 4}[r.Intn(5)])
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedGlobalSpecType_JsChallenge(r randyTypes, easy bool) *GlobalSpecType_JsChallenge {
	this := &GlobalSpecType_JsChallenge{}
	this.JsChallenge = NewPopulatedJavascriptChallengeType(r, easy)
	return this
}
func NewPopulatedGlobalSpecType_CaptchaChallenge(r randyTypes, easy bool) *GlobalSpecType_CaptchaChallenge {
	this := &GlobalSpecType_CaptchaChallenge{}
	this.CaptchaChallenge = NewPopulatedCaptchaChallengeType(r, easy)
	return this
}
func NewPopulatedGlobalSpecType_NoChallenge(r randyTypes, easy bool) *GlobalSpecType_NoChallenge {
	this := &GlobalSpecType_NoChallenge{}
	this.NoChallenge = ves_io_schema4.NewPopulatedEmpty(r, easy)
	return this
}
func NewPopulatedGlobalSpecType_NoAuthentication(r randyTypes, easy bool) *GlobalSpecType_NoAuthentication {
	this := &GlobalSpecType_NoAuthentication{}
	this.NoAuthentication = ves_io_schema4.NewPopulatedEmpty(r, easy)
	return this
}
func NewPopulatedGlobalSpecType_Authentication(r randyTypes, easy bool) *GlobalSpecType_Authentication {
	this := &GlobalSpecType_Authentication{}
	this.Authentication = NewPopulatedAuthenticationDetails(r, easy)
	return this
}
func NewPopulatedGlobalSpecType_PolicyBasedChallenge(r randyTypes, easy bool) *GlobalSpecType_PolicyBasedChallenge {
	this := &GlobalSpecType_PolicyBasedChallenge{}
	this.PolicyBasedChallenge = NewPopulatedPolicyBasedChallenge(r, easy)
	return this
}
func NewPopulatedGlobalSpecType_DefaultHeader(r randyTypes, easy bool) *GlobalSpecType_DefaultHeader {
	this := &GlobalSpecType_DefaultHeader{}
	this.DefaultHeader = ves_io_schema4.NewPopulatedEmpty(r, easy)
	return this
}
func NewPopulatedGlobalSpecType_ServerName(r randyTypes, easy bool) *GlobalSpecType_ServerName {
	this := &GlobalSpecType_ServerName{}
	this.ServerName = string(randStringTypes(r))
	return this
}
func NewPopulatedGlobalSpecType_AppendServerName(r randyTypes, easy bool) *GlobalSpecType_AppendServerName {
	this := &GlobalSpecType_AppendServerName{}
	this.AppendServerName = string(randStringTypes(r))
	return this
}
func NewPopulatedGlobalSpecType_PassThrough(r randyTypes, easy bool) *GlobalSpecType_PassThrough {
	this := &GlobalSpecType_PassThrough{}
	this.PassThrough = ves_io_schema4.NewPopulatedEmpty(r, easy)
	return this
}
func NewPopulatedCreateSpecType(r randyTypes, easy bool) *CreateSpecType {
	this := &CreateSpecType{}
	v22 := r.Intn(10)
	this.Domains = make([]string, v22)
	for i := 0; i < v22; i++ {
		this.Domains[i] = string(randStringTypes(r))
	}
	if r.Intn(10) != 0 {
		v23 := r.Intn(5)
		this.Routes = make([]*ves_io_schema4.ObjectRefType, v23)
		for i := 0; i < v23; i++ {
			this.Routes[i] = ves_io_schema4.NewPopulatedObjectRefType(r, easy)
		}
	}
	if r.Intn(10) != 0 {
		v24 := r.Intn(5)
		this.AdvertisePolicies = make([]*ves_io_schema4.ObjectRefType, v24)
		for i := 0; i < v24; i++ {
			this.AdvertisePolicies[i] = ves_io_schema4.NewPopulatedObjectRefType(r, easy)
		}
	}
	if r.Intn(10) != 0 {
		v25 := r.Intn(5)
		this.RequestHeadersToAdd = make([]*ves_io_schema4.HeaderManipulationOptionType, v25)
		for i := 0; i < v25; i++ {
			this.RequestHeadersToAdd[i] = ves_io_schema4.NewPopulatedHeaderManipulationOptionType(r, easy)
		}
	}
	if r.Intn(10) != 0 {
		v26 := r.Intn(5)
		this.ResponseHeadersToAdd = make([]*ves_io_schema4.HeaderManipulationOptionType, v26)
		for i := 0; i < v26; i++ {
			this.ResponseHeadersToAdd[i] = ves_io_schema4.NewPopulatedHeaderManipulationOptionType(r, easy)
		}
	}
	v27 := r.Intn(10)
	this.ResponseHeadersToRemove = make([]string, v27)
	for i := 0; i < v27; i++ {
		this.ResponseHeadersToRemove[i] = string(randStringTypes(r))
	}
	if r.Intn(10) != 0 {
		this.TlsParameters = ves_io_schema4.NewPopulatedDownstreamTlsParamsType(r, easy)
	}
	if r.Intn(10) != 0 {
		this.BufferPolicy = ves_io_schema4.NewPopulatedBufferConfigType(r, easy)
	}
	if r.Intn(10) != 0 {
		this.CorsPolicy = ves_io_schema4.NewPopulatedCorsPolicy(r, easy)
	}
	this.Proxy = ProxyType([]int32{0, 1, 2, 3, 4, 5}[r.Intn(6)])
	v28 := r.Intn(10)
	this.RequestHeadersToRemove = make([]string, v28)
	for i := 0; i < v28; i++ {
		this.RequestHeadersToRemove[i] = string(randStringTypes(r))
	}
	if r.Intn(10) != 0 {
		this.WafType = ves_io_schema4.NewPopulatedWafType(r, easy)
	}
	if r.Intn(10) != 0 {
		this.DynamicReverseProxy = NewPopulatedDynamicReverseProxyType(r, easy)
	}
	this.AddLocation = bool(bool(r.Intn(2) == 0))
	if r.Intn(10) != 0 {
		this.CompressionParams = NewPopulatedCompressionType(r, easy)
	}
	if r.Intn(10) != 0 {
		v29 := r.Intn(10)
		this.CustomErrors = make(map[uint32]string)
		for i := 0; i < v29; i++ {
			this.CustomErrors[uint32(r.Uint32())] = randStringTypes(r)
		}
	}
	this.MaxRequestHeaderSize = uint32(r.Uint32())
	oneofNumber_ChallengeType := []int32{24, 29, 31}[r.Intn(3)]
	switch oneofNumber_ChallengeType {
	case 24:
		this.ChallengeType = NewPopulatedCreateSpecType_JsChallenge(r, easy)
	case 29:
		this.ChallengeType = NewPopulatedCreateSpecType_CaptchaChallenge(r, easy)
	case 31:
		this.ChallengeType = NewPopulatedCreateSpecType_NoChallenge(r, easy)
	}
	if r.Intn(10) != 0 {
		v30 := r.Intn(5)
		this.UserIdentification = make([]*ves_io_schema4.ObjectRefType, v30)
		for i := 0; i < v30; i++ {
			this.UserIdentification[i] = ves_io_schema4.NewPopulatedObjectRefType(r, easy)
		}
	}
	if r.Intn(10) != 0 {
		v31 := r.Intn(5)
		this.RateLimiter = make([]*ves_io_schema4.ObjectRefType, v31)
		for i := 0; i < v31; i++ {
			this.RateLimiter[i] = ves_io_schema4.NewPopulatedObjectRefType(r, easy)
		}
	}
	if r.Intn(10) != 0 {
		v32 := r.Intn(5)
		this.RateLimiterAllowedPrefixes = make([]*ves_io_schema4.ObjectRefType, v32)
		for i := 0; i < v32; i++ {
			this.RateLimiterAllowedPrefixes[i] = ves_io_schema4.NewPopulatedObjectRefType(r, easy)
		}
	}
	if r.Intn(10) != 0 {
		this.RetryPolicy = ves_io_schema4.NewPopulatedRetryPolicyType(r, easy)
	}
	this.IdleTimeout = uint32(r.Uint32())
	this.DisableDefaultErrorPages = bool(bool(r.Intn(2) == 0))
	this.DisableDnsResolve = bool(bool(r.Intn(2) == 0))
	if r.Intn(10) != 0 {
		this.TemporaryUserBlocking = NewPopulatedTemporaryUserBlockingType(r, easy)
	}
	oneofNumber_AuthenticationChoice := []int32{39, 40}[r.Intn(2)]
	switch oneofNumber_AuthenticationChoice {
	case 39:
		this.AuthenticationChoice = NewPopulatedCreateSpecType_NoAuthentication(r, easy)
	case 40:
		this.AuthenticationChoice = NewPopulatedCreateSpecType_Authentication(r, easy)
	}
	oneofNumber_ServerHeaderChoice := []int32{43, 44, 45, 46}[r.Intn(4)]
	switch oneofNumber_ServerHeaderChoice {
	case 43:
		this.ServerHeaderChoice = NewPopulatedCreateSpecType_DefaultHeader(r, easy)
	case 44:
		this.ServerHeaderChoice = NewPopulatedCreateSpecType_ServerName(r, easy)
	case 45:
		this.ServerHeaderChoice = NewPopulatedCreateSpecType_AppendServerName(r, easy)
	case 46:
		this.ServerHeaderChoice = NewPopulatedCreateSpecType_PassThrough(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedCreateSpecType_JsChallenge(r randyTypes, easy bool) *CreateSpecType_JsChallenge {
	this := &CreateSpecType_JsChallenge{}
	this.JsChallenge = NewPopulatedJavascriptChallengeType(r, easy)
	return this
}
func NewPopulatedCreateSpecType_CaptchaChallenge(r randyTypes, easy bool) *CreateSpecType_CaptchaChallenge {
	this := &CreateSpecType_CaptchaChallenge{}
	this.CaptchaChallenge = NewPopulatedCaptchaChallengeType(r, easy)
	return this
}
func NewPopulatedCreateSpecType_NoChallenge(r randyTypes, easy bool) *CreateSpecType_NoChallenge {
	this := &CreateSpecType_NoChallenge{}
	this.NoChallenge = ves_io_schema4.NewPopulatedEmpty(r, easy)
	return this
}
func NewPopulatedCreateSpecType_NoAuthentication(r randyTypes, easy bool) *CreateSpecType_NoAuthentication {
	this := &CreateSpecType_NoAuthentication{}
	this.NoAuthentication = ves_io_schema4.NewPopulatedEmpty(r, easy)
	return this
}
func NewPopulatedCreateSpecType_Authentication(r randyTypes, easy bool) *CreateSpecType_Authentication {
	this := &CreateSpecType_Authentication{}
	this.Authentication = NewPopulatedAuthenticationDetails(r, easy)
	return this
}
func NewPopulatedCreateSpecType_DefaultHeader(r randyTypes, easy bool) *CreateSpecType_DefaultHeader {
	this := &CreateSpecType_DefaultHeader{}
	this.DefaultHeader = ves_io_schema4.NewPopulatedEmpty(r, easy)
	return this
}
func NewPopulatedCreateSpecType_ServerName(r randyTypes, easy bool) *CreateSpecType_ServerName {
	this := &CreateSpecType_ServerName{}
	this.ServerName = string(randStringTypes(r))
	return this
}
func NewPopulatedCreateSpecType_AppendServerName(r randyTypes, easy bool) *CreateSpecType_AppendServerName {
	this := &CreateSpecType_AppendServerName{}
	this.AppendServerName = string(randStringTypes(r))
	return this
}
func NewPopulatedCreateSpecType_PassThrough(r randyTypes, easy bool) *CreateSpecType_PassThrough {
	this := &CreateSpecType_PassThrough{}
	this.PassThrough = ves_io_schema4.NewPopulatedEmpty(r, easy)
	return this
}
func NewPopulatedReplaceSpecType(r randyTypes, easy bool) *ReplaceSpecType {
	this := &ReplaceSpecType{}
	v33 := r.Intn(10)
	this.Domains = make([]string, v33)
	for i := 0; i < v33; i++ {
		this.Domains[i] = string(randStringTypes(r))
	}
	if r.Intn(10) != 0 {
		v34 := r.Intn(5)
		this.Routes = make([]*ves_io_schema4.ObjectRefType, v34)
		for i := 0; i < v34; i++ {
			this.Routes[i] = ves_io_schema4.NewPopulatedObjectRefType(r, easy)
		}
	}
	if r.Intn(10) != 0 {
		v35 := r.Intn(5)
		this.AdvertisePolicies = make([]*ves_io_schema4.ObjectRefType, v35)
		for i := 0; i < v35; i++ {
			this.AdvertisePolicies[i] = ves_io_schema4.NewPopulatedObjectRefType(r, easy)
		}
	}
	if r.Intn(10) != 0 {
		v36 := r.Intn(5)
		this.RequestHeadersToAdd = make([]*ves_io_schema4.HeaderManipulationOptionType, v36)
		for i := 0; i < v36; i++ {
			this.RequestHeadersToAdd[i] = ves_io_schema4.NewPopulatedHeaderManipulationOptionType(r, easy)
		}
	}
	if r.Intn(10) != 0 {
		v37 := r.Intn(5)
		this.ResponseHeadersToAdd = make([]*ves_io_schema4.HeaderManipulationOptionType, v37)
		for i := 0; i < v37; i++ {
			this.ResponseHeadersToAdd[i] = ves_io_schema4.NewPopulatedHeaderManipulationOptionType(r, easy)
		}
	}
	v38 := r.Intn(10)
	this.ResponseHeadersToRemove = make([]string, v38)
	for i := 0; i < v38; i++ {
		this.ResponseHeadersToRemove[i] = string(randStringTypes(r))
	}
	if r.Intn(10) != 0 {
		this.TlsParameters = ves_io_schema4.NewPopulatedDownstreamTlsParamsType(r, easy)
	}
	if r.Intn(10) != 0 {
		this.BufferPolicy = ves_io_schema4.NewPopulatedBufferConfigType(r, easy)
	}
	if r.Intn(10) != 0 {
		this.CorsPolicy = ves_io_schema4.NewPopulatedCorsPolicy(r, easy)
	}
	this.Proxy = ProxyType([]int32{0, 1, 2, 3, 4, 5}[r.Intn(6)])
	v39 := r.Intn(10)
	this.RequestHeadersToRemove = make([]string, v39)
	for i := 0; i < v39; i++ {
		this.RequestHeadersToRemove[i] = string(randStringTypes(r))
	}
	if r.Intn(10) != 0 {
		this.WafType = ves_io_schema4.NewPopulatedWafType(r, easy)
	}
	if r.Intn(10) != 0 {
		this.DynamicReverseProxy = NewPopulatedDynamicReverseProxyType(r, easy)
	}
	this.AddLocation = bool(bool(r.Intn(2) == 0))
	if r.Intn(10) != 0 {
		this.CompressionParams = NewPopulatedCompressionType(r, easy)
	}
	if r.Intn(10) != 0 {
		v40 := r.Intn(10)
		this.CustomErrors = make(map[uint32]string)
		for i := 0; i < v40; i++ {
			this.CustomErrors[uint32(r.Uint32())] = randStringTypes(r)
		}
	}
	this.MaxRequestHeaderSize = uint32(r.Uint32())
	oneofNumber_ChallengeType := []int32{24, 29, 31}[r.Intn(3)]
	switch oneofNumber_ChallengeType {
	case 24:
		this.ChallengeType = NewPopulatedReplaceSpecType_JsChallenge(r, easy)
	case 29:
		this.ChallengeType = NewPopulatedReplaceSpecType_CaptchaChallenge(r, easy)
	case 31:
		this.ChallengeType = NewPopulatedReplaceSpecType_NoChallenge(r, easy)
	}
	if r.Intn(10) != 0 {
		v41 := r.Intn(5)
		this.UserIdentification = make([]*ves_io_schema4.ObjectRefType, v41)
		for i := 0; i < v41; i++ {
			this.UserIdentification[i] = ves_io_schema4.NewPopulatedObjectRefType(r, easy)
		}
	}
	if r.Intn(10) != 0 {
		v42 := r.Intn(5)
		this.RateLimiter = make([]*ves_io_schema4.ObjectRefType, v42)
		for i := 0; i < v42; i++ {
			this.RateLimiter[i] = ves_io_schema4.NewPopulatedObjectRefType(r, easy)
		}
	}
	if r.Intn(10) != 0 {
		v43 := r.Intn(5)
		this.RateLimiterAllowedPrefixes = make([]*ves_io_schema4.ObjectRefType, v43)
		for i := 0; i < v43; i++ {
			this.RateLimiterAllowedPrefixes[i] = ves_io_schema4.NewPopulatedObjectRefType(r, easy)
		}
	}
	if r.Intn(10) != 0 {
		this.RetryPolicy = ves_io_schema4.NewPopulatedRetryPolicyType(r, easy)
	}
	this.IdleTimeout = uint32(r.Uint32())
	this.DisableDefaultErrorPages = bool(bool(r.Intn(2) == 0))
	this.DisableDnsResolve = bool(bool(r.Intn(2) == 0))
	if r.Intn(10) != 0 {
		this.TemporaryUserBlocking = NewPopulatedTemporaryUserBlockingType(r, easy)
	}
	oneofNumber_AuthenticationChoice := []int32{39, 40}[r.Intn(2)]
	switch oneofNumber_AuthenticationChoice {
	case 39:
		this.AuthenticationChoice = NewPopulatedReplaceSpecType_NoAuthentication(r, easy)
	case 40:
		this.AuthenticationChoice = NewPopulatedReplaceSpecType_Authentication(r, easy)
	}
	oneofNumber_ServerHeaderChoice := []int32{43, 44, 45, 46}[r.Intn(4)]
	switch oneofNumber_ServerHeaderChoice {
	case 43:
		this.ServerHeaderChoice = NewPopulatedReplaceSpecType_DefaultHeader(r, easy)
	case 44:
		this.ServerHeaderChoice = NewPopulatedReplaceSpecType_ServerName(r, easy)
	case 45:
		this.ServerHeaderChoice = NewPopulatedReplaceSpecType_AppendServerName(r, easy)
	case 46:
		this.ServerHeaderChoice = NewPopulatedReplaceSpecType_PassThrough(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedReplaceSpecType_JsChallenge(r randyTypes, easy bool) *ReplaceSpecType_JsChallenge {
	this := &ReplaceSpecType_JsChallenge{}
	this.JsChallenge = NewPopulatedJavascriptChallengeType(r, easy)
	return this
}
func NewPopulatedReplaceSpecType_CaptchaChallenge(r randyTypes, easy bool) *ReplaceSpecType_CaptchaChallenge {
	this := &ReplaceSpecType_CaptchaChallenge{}
	this.CaptchaChallenge = NewPopulatedCaptchaChallengeType(r, easy)
	return this
}
func NewPopulatedReplaceSpecType_NoChallenge(r randyTypes, easy bool) *ReplaceSpecType_NoChallenge {
	this := &ReplaceSpecType_NoChallenge{}
	this.NoChallenge = ves_io_schema4.NewPopulatedEmpty(r, easy)
	return this
}
func NewPopulatedReplaceSpecType_NoAuthentication(r randyTypes, easy bool) *ReplaceSpecType_NoAuthentication {
	this := &ReplaceSpecType_NoAuthentication{}
	this.NoAuthentication = ves_io_schema4.NewPopulatedEmpty(r, easy)
	return this
}
func NewPopulatedReplaceSpecType_Authentication(r randyTypes, easy bool) *ReplaceSpecType_Authentication {
	this := &ReplaceSpecType_Authentication{}
	this.Authentication = NewPopulatedAuthenticationDetails(r, easy)
	return this
}
func NewPopulatedReplaceSpecType_DefaultHeader(r randyTypes, easy bool) *ReplaceSpecType_DefaultHeader {
	this := &ReplaceSpecType_DefaultHeader{}
	this.DefaultHeader = ves_io_schema4.NewPopulatedEmpty(r, easy)
	return this
}
func NewPopulatedReplaceSpecType_ServerName(r randyTypes, easy bool) *ReplaceSpecType_ServerName {
	this := &ReplaceSpecType_ServerName{}
	this.ServerName = string(randStringTypes(r))
	return this
}
func NewPopulatedReplaceSpecType_AppendServerName(r randyTypes, easy bool) *ReplaceSpecType_AppendServerName {
	this := &ReplaceSpecType_AppendServerName{}
	this.AppendServerName = string(randStringTypes(r))
	return this
}
func NewPopulatedReplaceSpecType_PassThrough(r randyTypes, easy bool) *ReplaceSpecType_PassThrough {
	this := &ReplaceSpecType_PassThrough{}
	this.PassThrough = ves_io_schema4.NewPopulatedEmpty(r, easy)
	return this
}
func NewPopulatedGetSpecType(r randyTypes, easy bool) *GetSpecType {
	this := &GetSpecType{}
	v44 := r.Intn(10)
	this.Domains = make([]string, v44)
	for i := 0; i < v44; i++ {
		this.Domains[i] = string(randStringTypes(r))
	}
	if r.Intn(10) != 0 {
		v45 := r.Intn(5)
		this.Routes = make([]*ves_io_schema4.ObjectRefType, v45)
		for i := 0; i < v45; i++ {
			this.Routes[i] = ves_io_schema4.NewPopulatedObjectRefType(r, easy)
		}
	}
	if r.Intn(10) != 0 {
		v46 := r.Intn(5)
		this.AdvertisePolicies = make([]*ves_io_schema4.ObjectRefType, v46)
		for i := 0; i < v46; i++ {
			this.AdvertisePolicies[i] = ves_io_schema4.NewPopulatedObjectRefType(r, easy)
		}
	}
	if r.Intn(10) != 0 {
		v47 := r.Intn(5)
		this.RequestHeadersToAdd = make([]*ves_io_schema4.HeaderManipulationOptionType, v47)
		for i := 0; i < v47; i++ {
			this.RequestHeadersToAdd[i] = ves_io_schema4.NewPopulatedHeaderManipulationOptionType(r, easy)
		}
	}
	if r.Intn(10) != 0 {
		v48 := r.Intn(5)
		this.ResponseHeadersToAdd = make([]*ves_io_schema4.HeaderManipulationOptionType, v48)
		for i := 0; i < v48; i++ {
			this.ResponseHeadersToAdd[i] = ves_io_schema4.NewPopulatedHeaderManipulationOptionType(r, easy)
		}
	}
	v49 := r.Intn(10)
	this.ResponseHeadersToRemove = make([]string, v49)
	for i := 0; i < v49; i++ {
		this.ResponseHeadersToRemove[i] = string(randStringTypes(r))
	}
	if r.Intn(10) != 0 {
		this.TlsParameters = ves_io_schema4.NewPopulatedDownstreamTlsParamsType(r, easy)
	}
	this.Type = VirtualHostType([]int32{0, 1, 2, 3, 4, 5}[r.Intn(6)])
	if r.Intn(10) != 0 {
		this.BufferPolicy = ves_io_schema4.NewPopulatedBufferConfigType(r, easy)
	}
	if r.Intn(10) != 0 {
		this.CorsPolicy = ves_io_schema4.NewPopulatedCorsPolicy(r, easy)
	}
	this.Proxy = ProxyType([]int32{0, 1, 2, 3, 4, 5}[r.Intn(6)])
	v50 := r.Intn(10)
	this.RequestHeadersToRemove = make([]string, v50)
	for i := 0; i < v50; i++ {
		this.RequestHeadersToRemove[i] = string(randStringTypes(r))
	}
	if r.Intn(10) != 0 {
		this.WafType = ves_io_schema4.NewPopulatedWafType(r, easy)
	}
	if r.Intn(10) != 0 {
		this.DynamicReverseProxy = NewPopulatedDynamicReverseProxyType(r, easy)
	}
	this.AddLocation = bool(bool(r.Intn(2) == 0))
	if r.Intn(10) != 0 {
		this.CompressionParams = NewPopulatedCompressionType(r, easy)
	}
	if r.Intn(10) != 0 {
		v51 := r.Intn(10)
		this.CustomErrors = make(map[uint32]string)
		for i := 0; i < v51; i++ {
			this.CustomErrors[uint32(r.Uint32())] = randStringTypes(r)
		}
	}
	this.MaxRequestHeaderSize = uint32(r.Uint32())
	oneofNumber_ChallengeType := []int32{24, 29, 31}[r.Intn(3)]
	switch oneofNumber_ChallengeType {
	case 24:
		this.ChallengeType = NewPopulatedGetSpecType_JsChallenge(r, easy)
	case 29:
		this.ChallengeType = NewPopulatedGetSpecType_CaptchaChallenge(r, easy)
	case 31:
		this.ChallengeType = NewPopulatedGetSpecType_NoChallenge(r, easy)
	}
	if r.Intn(10) != 0 {
		v52 := r.Intn(5)
		this.UserIdentification = make([]*ves_io_schema4.ObjectRefType, v52)
		for i := 0; i < v52; i++ {
			this.UserIdentification[i] = ves_io_schema4.NewPopulatedObjectRefType(r, easy)
		}
	}
	if r.Intn(10) != 0 {
		v53 := r.Intn(5)
		this.RateLimiter = make([]*ves_io_schema4.ObjectRefType, v53)
		for i := 0; i < v53; i++ {
			this.RateLimiter[i] = ves_io_schema4.NewPopulatedObjectRefType(r, easy)
		}
	}
	if r.Intn(10) != 0 {
		v54 := r.Intn(5)
		this.RateLimiterAllowedPrefixes = make([]*ves_io_schema4.ObjectRefType, v54)
		for i := 0; i < v54; i++ {
			this.RateLimiterAllowedPrefixes[i] = ves_io_schema4.NewPopulatedObjectRefType(r, easy)
		}
	}
	if r.Intn(10) != 0 {
		this.RetryPolicy = ves_io_schema4.NewPopulatedRetryPolicyType(r, easy)
	}
	this.IdleTimeout = uint32(r.Uint32())
	this.DisableDefaultErrorPages = bool(bool(r.Intn(2) == 0))
	this.DisableDnsResolve = bool(bool(r.Intn(2) == 0))
	if r.Intn(10) != 0 {
		this.TemporaryUserBlocking = NewPopulatedTemporaryUserBlockingType(r, easy)
	}
	oneofNumber_AuthenticationChoice := []int32{39, 40}[r.Intn(2)]
	switch oneofNumber_AuthenticationChoice {
	case 39:
		this.AuthenticationChoice = NewPopulatedGetSpecType_NoAuthentication(r, easy)
	case 40:
		this.AuthenticationChoice = NewPopulatedGetSpecType_Authentication(r, easy)
	}
	oneofNumber_ServerHeaderChoice := []int32{43, 44, 45, 46}[r.Intn(4)]
	switch oneofNumber_ServerHeaderChoice {
	case 43:
		this.ServerHeaderChoice = NewPopulatedGetSpecType_DefaultHeader(r, easy)
	case 44:
		this.ServerHeaderChoice = NewPopulatedGetSpecType_ServerName(r, easy)
	case 45:
		this.ServerHeaderChoice = NewPopulatedGetSpecType_AppendServerName(r, easy)
	case 46:
		this.ServerHeaderChoice = NewPopulatedGetSpecType_PassThrough(r, easy)
	}
	this.State = VirtualHostState([]int32{0, 1, 2, 3, 4, 5}[r.Intn(6)])
	this.HostName = string(randStringTypes(r))
	if r.Intn(10) != 0 {
		v55 := r.Intn(5)
		this.DnsInfo = make([]*ves_io_schema_virtual_host_dns_info.DnsInfo, v55)
		for i := 0; i < v55; i++ {
			this.DnsInfo[i] = ves_io_schema_virtual_host_dns_info.NewPopulatedDnsInfo(r, easy)
		}
	}
	this.AutoCertState = CertificationState([]int32{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}[r.Intn(12)])
	if r.Intn(10) != 0 {
		this.AutoCertInfo = NewPopulatedAutoCertInfoType(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedGetSpecType_JsChallenge(r randyTypes, easy bool) *GetSpecType_JsChallenge {
	this := &GetSpecType_JsChallenge{}
	this.JsChallenge = NewPopulatedJavascriptChallengeType(r, easy)
	return this
}
func NewPopulatedGetSpecType_CaptchaChallenge(r randyTypes, easy bool) *GetSpecType_CaptchaChallenge {
	this := &GetSpecType_CaptchaChallenge{}
	this.CaptchaChallenge = NewPopulatedCaptchaChallengeType(r, easy)
	return this
}
func NewPopulatedGetSpecType_NoChallenge(r randyTypes, easy bool) *GetSpecType_NoChallenge {
	this := &GetSpecType_NoChallenge{}
	this.NoChallenge = ves_io_schema4.NewPopulatedEmpty(r, easy)
	return this
}
func NewPopulatedGetSpecType_NoAuthentication(r randyTypes, easy bool) *GetSpecType_NoAuthentication {
	this := &GetSpecType_NoAuthentication{}
	this.NoAuthentication = ves_io_schema4.NewPopulatedEmpty(r, easy)
	return this
}
func NewPopulatedGetSpecType_Authentication(r randyTypes, easy bool) *GetSpecType_Authentication {
	this := &GetSpecType_Authentication{}
	this.Authentication = NewPopulatedAuthenticationDetails(r, easy)
	return this
}
func NewPopulatedGetSpecType_DefaultHeader(r randyTypes, easy bool) *GetSpecType_DefaultHeader {
	this := &GetSpecType_DefaultHeader{}
	this.DefaultHeader = ves_io_schema4.NewPopulatedEmpty(r, easy)
	return this
}
func NewPopulatedGetSpecType_ServerName(r randyTypes, easy bool) *GetSpecType_ServerName {
	this := &GetSpecType_ServerName{}
	this.ServerName = string(randStringTypes(r))
	return this
}
func NewPopulatedGetSpecType_AppendServerName(r randyTypes, easy bool) *GetSpecType_AppendServerName {
	this := &GetSpecType_AppendServerName{}
	this.AppendServerName = string(randStringTypes(r))
	return this
}
func NewPopulatedGetSpecType_PassThrough(r randyTypes, easy bool) *GetSpecType_PassThrough {
	this := &GetSpecType_PassThrough{}
	this.PassThrough = ves_io_schema4.NewPopulatedEmpty(r, easy)
	return this
}

type randyTypes interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneTypes(r randyTypes) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringTypes(r randyTypes) string {
	v56 := r.Intn(100)
	tmps := make([]rune, v56)
	for i := 0; i < v56; i++ {
		tmps[i] = randUTF8RuneTypes(r)
	}
	return string(tmps)
}
func randUnrecognizedTypes(r randyTypes, maxFieldNumber int) (dAtA []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		dAtA = randFieldTypes(dAtA, r, fieldNumber, wire)
	}
	return dAtA
}
func randFieldTypes(dAtA []byte, r randyTypes, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		dAtA = encodeVarintPopulateTypes(dAtA, uint64(key))
		v57 := r.Int63()
		if r.Intn(2) == 0 {
			v57 *= -1
		}
		dAtA = encodeVarintPopulateTypes(dAtA, uint64(v57))
	case 1:
		dAtA = encodeVarintPopulateTypes(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		dAtA = encodeVarintPopulateTypes(dAtA, uint64(key))
		ll := r.Intn(100)
		dAtA = encodeVarintPopulateTypes(dAtA, uint64(ll))
		for j := 0; j < ll; j++ {
			dAtA = append(dAtA, byte(r.Intn(256)))
		}
	default:
		dAtA = encodeVarintPopulateTypes(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return dAtA
}
func encodeVarintPopulateTypes(dAtA []byte, v uint64) []byte {
	for v >= 1<<7 {
		dAtA = append(dAtA, uint8(uint64(v)&0x7f|0x80))
		v >>= 7
	}
	dAtA = append(dAtA, uint8(v))
	return dAtA
}
func (m *JavaScriptConfigType) Size() (n int) {
	var l int
	_ = l
	l = len(m.CachePrefix)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.ScriptConfig != nil {
		l = m.ScriptConfig.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.CustomScriptUrl)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *DynamicReverseProxyType) Size() (n int) {
	var l int
	_ = l
	if m.ResolveEndpointDynamically {
		n += 2
	}
	if m.ResolutionNetworkType != 0 {
		n += 1 + sovTypes(uint64(m.ResolutionNetworkType))
	}
	if len(m.ResolutionNetwork) > 0 {
		for _, e := range m.ResolutionNetwork {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *CompressionType) Size() (n int) {
	var l int
	_ = l
	if m.ContentLength != 0 {
		n += 1 + sovTypes(uint64(m.ContentLength))
	}
	if len(m.ContentType) > 0 {
		for _, s := range m.ContentType {
			l = len(s)
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if m.DisableOnEtagHeader {
		n += 2
	}
	if m.RemoveAcceptEncodingHeader {
		n += 2
	}
	return n
}

func (m *JavascriptChallengeType) Size() (n int) {
	var l int
	_ = l
	if m.EnableJsChallenge {
		n += 2
	}
	if m.JsScriptDelay != 0 {
		n += 1 + sovTypes(uint64(m.JsScriptDelay))
	}
	if m.CookieExpiry != 0 {
		n += 1 + sovTypes(uint64(m.CookieExpiry))
	}
	l = len(m.CustomPage)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *CaptchaChallengeType) Size() (n int) {
	var l int
	_ = l
	if m.EnableCaptchaChallenge {
		n += 2
	}
	if m.CookieExpiry != 0 {
		n += 1 + sovTypes(uint64(m.CookieExpiry))
	}
	l = len(m.CustomPage)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *TemporaryUserBlockingType) Size() (n int) {
	var l int
	_ = l
	l = len(m.CustomPage)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *AutoCertInfoType) Size() (n int) {
	var l int
	_ = l
	if m.AutoCertState != 0 {
		n += 1 + sovTypes(uint64(m.AutoCertState))
	}
	if m.AutoCertExpiry != nil {
		l = m.AutoCertExpiry.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.AutoCertSubject)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.AutoCertIssuer)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *AuthenticationDetails) Size() (n int) {
	var l int
	_ = l
	if len(m.AuthConfig) > 0 {
		for _, e := range m.AuthConfig {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if m.CookieParamsChoice != nil {
		n += m.CookieParamsChoice.Size()
	}
	if m.RedirectUrlChoice != nil {
		n += m.RedirectUrlChoice.Size()
	}
	return n
}

func (m *AuthenticationDetails_UseAuthObjectConfig) Size() (n int) {
	var l int
	_ = l
	if m.UseAuthObjectConfig != nil {
		l = m.UseAuthObjectConfig.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *AuthenticationDetails_CookieParams) Size() (n int) {
	var l int
	_ = l
	if m.CookieParams != nil {
		l = m.CookieParams.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *AuthenticationDetails_RedirectUrl) Size() (n int) {
	var l int
	_ = l
	l = len(m.RedirectUrl)
	n += 1 + l + sovTypes(uint64(l))
	return n
}
func (m *AuthenticationDetails_RedirectDynamic) Size() (n int) {
	var l int
	_ = l
	if m.RedirectDynamic != nil {
		l = m.RedirectDynamic.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *PolicyBasedChallenge) Size() (n int) {
	var l int
	_ = l
	if m.JsChallenge != nil {
		l = m.JsChallenge.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.CaptchaChallenge != nil {
		l = m.CaptchaChallenge.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.TemporaryUserBlocking != nil {
		l = m.TemporaryUserBlocking.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.ChallengeChoice != nil {
		n += m.ChallengeChoice.Size()
	}
	if len(m.MaliciousUserMitigation) > 0 {
		for _, e := range m.MaliciousUserMitigation {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *PolicyBasedChallenge_NoChallenge) Size() (n int) {
	var l int
	_ = l
	if m.NoChallenge != nil {
		l = m.NoChallenge.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *PolicyBasedChallenge_AlwaysEnableJsChallenge) Size() (n int) {
	var l int
	_ = l
	if m.AlwaysEnableJsChallenge != nil {
		l = m.AlwaysEnableJsChallenge.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *PolicyBasedChallenge_AlwaysEnableCaptchaChallenge) Size() (n int) {
	var l int
	_ = l
	if m.AlwaysEnableCaptchaChallenge != nil {
		l = m.AlwaysEnableCaptchaChallenge.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType) Size() (n int) {
	var l int
	_ = l
	if len(m.Domains) > 0 {
		for _, s := range m.Domains {
			l = len(s)
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if len(m.Routes) > 0 {
		for _, e := range m.Routes {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if m.JavascriptInfo != nil {
		l = m.JavascriptInfo.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if len(m.AdvertisePolicies) > 0 {
		for _, e := range m.AdvertisePolicies {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if len(m.RequestHeadersToAdd) > 0 {
		for _, e := range m.RequestHeadersToAdd {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if len(m.ResponseHeadersToAdd) > 0 {
		for _, e := range m.ResponseHeadersToAdd {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if len(m.ResponseHeadersToRemove) > 0 {
		for _, s := range m.ResponseHeadersToRemove {
			l = len(s)
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if m.TlsParameters != nil {
		l = m.TlsParameters.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.Type != 0 {
		n += 1 + sovTypes(uint64(m.Type))
	}
	if m.BufferPolicy != nil {
		l = m.BufferPolicy.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.CorsPolicy != nil {
		l = m.CorsPolicy.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.Proxy != 0 {
		n += 1 + sovTypes(uint64(m.Proxy))
	}
	if len(m.Jwt) > 0 {
		for _, e := range m.Jwt {
			l = e.Size()
			n += 2 + l + sovTypes(uint64(l))
		}
	}
	if len(m.RequestHeadersToRemove) > 0 {
		for _, s := range m.RequestHeadersToRemove {
			l = len(s)
			n += 2 + l + sovTypes(uint64(l))
		}
	}
	if m.WafType != nil {
		l = m.WafType.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	if m.DynamicReverseProxy != nil {
		l = m.DynamicReverseProxy.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	if m.AddLocation {
		n += 3
	}
	if m.CompressionParams != nil {
		l = m.CompressionParams.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	if len(m.CustomErrors) > 0 {
		for k, v := range m.CustomErrors {
			_ = k
			_ = v
			mapEntrySize := 1 + sovTypes(uint64(k)) + 1 + len(v) + sovTypes(uint64(len(v)))
			n += mapEntrySize + 2 + sovTypes(uint64(mapEntrySize))
		}
	}
	if m.MaxRequestHeaderSize != 0 {
		n += 2 + sovTypes(uint64(m.MaxRequestHeaderSize))
	}
	if m.ChallengeType != nil {
		n += m.ChallengeType.Size()
	}
	if len(m.UserIdentification) > 0 {
		for _, e := range m.UserIdentification {
			l = e.Size()
			n += 2 + l + sovTypes(uint64(l))
		}
	}
	if len(m.RateLimiter) > 0 {
		for _, e := range m.RateLimiter {
			l = e.Size()
			n += 2 + l + sovTypes(uint64(l))
		}
	}
	if len(m.RateLimiterAllowedPrefixes) > 0 {
		for _, e := range m.RateLimiterAllowedPrefixes {
			l = e.Size()
			n += 2 + l + sovTypes(uint64(l))
		}
	}
	if m.RetryPolicy != nil {
		l = m.RetryPolicy.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	if m.IdleTimeout != 0 {
		n += 2 + sovTypes(uint64(m.IdleTimeout))
	}
	if m.DisableDefaultErrorPages {
		n += 3
	}
	if m.DisableDnsResolve {
		n += 3
	}
	if m.TemporaryUserBlocking != nil {
		l = m.TemporaryUserBlocking.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	if len(m.MaliciousUserMitigation) > 0 {
		for _, e := range m.MaliciousUserMitigation {
			l = e.Size()
			n += 2 + l + sovTypes(uint64(l))
		}
	}
	if m.TlsIntercept != nil {
		l = m.TlsIntercept.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	if m.AuthenticationChoice != nil {
		n += m.AuthenticationChoice.Size()
	}
	if m.ServerHeaderChoice != nil {
		n += m.ServerHeaderChoice.Size()
	}
	if m.DnsVolterraManaged {
		n += 3
	}
	if len(m.DnsDomains) > 0 {
		for _, e := range m.DnsDomains {
			l = e.Size()
			n += 2 + l + sovTypes(uint64(l))
		}
	}
	if m.AutoCert {
		n += 3
	}
	if m.State != 0 {
		n += 2 + sovTypes(uint64(m.State))
	}
	l = len(m.HostName)
	if l > 0 {
		n += 2 + l + sovTypes(uint64(l))
	}
	if len(m.DnsInfo) > 0 {
		for _, e := range m.DnsInfo {
			l = e.Size()
			n += 2 + l + sovTypes(uint64(l))
		}
	}
	if m.AutoCertState != 0 {
		n += 2 + sovTypes(uint64(m.AutoCertState))
	}
	if m.AutoCertInfo != nil {
		l = m.AutoCertInfo.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	if len(m.UserDomains) > 0 {
		for _, s := range m.UserDomains {
			l = len(s)
			n += 2 + l + sovTypes(uint64(l))
		}
	}
	if len(m.ServicePolicySets) > 0 {
		for _, e := range m.ServicePolicySets {
			l = e.Size()
			n += 2 + l + sovTypes(uint64(l))
		}
	}
	if m.LoadbalancerAlgorithm != 0 {
		n += 2 + sovTypes(uint64(m.LoadbalancerAlgorithm))
	}
	return n
}

func (m *GlobalSpecType_JsChallenge) Size() (n int) {
	var l int
	_ = l
	if m.JsChallenge != nil {
		l = m.JsChallenge.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_CaptchaChallenge) Size() (n int) {
	var l int
	_ = l
	if m.CaptchaChallenge != nil {
		l = m.CaptchaChallenge.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_NoChallenge) Size() (n int) {
	var l int
	_ = l
	if m.NoChallenge != nil {
		l = m.NoChallenge.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_NoAuthentication) Size() (n int) {
	var l int
	_ = l
	if m.NoAuthentication != nil {
		l = m.NoAuthentication.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_Authentication) Size() (n int) {
	var l int
	_ = l
	if m.Authentication != nil {
		l = m.Authentication.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_PolicyBasedChallenge) Size() (n int) {
	var l int
	_ = l
	if m.PolicyBasedChallenge != nil {
		l = m.PolicyBasedChallenge.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_DefaultHeader) Size() (n int) {
	var l int
	_ = l
	if m.DefaultHeader != nil {
		l = m.DefaultHeader.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_ServerName) Size() (n int) {
	var l int
	_ = l
	l = len(m.ServerName)
	n += 2 + l + sovTypes(uint64(l))
	return n
}
func (m *GlobalSpecType_AppendServerName) Size() (n int) {
	var l int
	_ = l
	l = len(m.AppendServerName)
	n += 2 + l + sovTypes(uint64(l))
	return n
}
func (m *GlobalSpecType_PassThrough) Size() (n int) {
	var l int
	_ = l
	if m.PassThrough != nil {
		l = m.PassThrough.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType) Size() (n int) {
	var l int
	_ = l
	if len(m.Domains) > 0 {
		for _, s := range m.Domains {
			l = len(s)
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if len(m.Routes) > 0 {
		for _, e := range m.Routes {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if len(m.AdvertisePolicies) > 0 {
		for _, e := range m.AdvertisePolicies {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if len(m.RequestHeadersToAdd) > 0 {
		for _, e := range m.RequestHeadersToAdd {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if len(m.ResponseHeadersToAdd) > 0 {
		for _, e := range m.ResponseHeadersToAdd {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if len(m.ResponseHeadersToRemove) > 0 {
		for _, s := range m.ResponseHeadersToRemove {
			l = len(s)
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if m.TlsParameters != nil {
		l = m.TlsParameters.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.BufferPolicy != nil {
		l = m.BufferPolicy.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.CorsPolicy != nil {
		l = m.CorsPolicy.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.Proxy != 0 {
		n += 1 + sovTypes(uint64(m.Proxy))
	}
	if len(m.RequestHeadersToRemove) > 0 {
		for _, s := range m.RequestHeadersToRemove {
			l = len(s)
			n += 2 + l + sovTypes(uint64(l))
		}
	}
	if m.WafType != nil {
		l = m.WafType.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	if m.DynamicReverseProxy != nil {
		l = m.DynamicReverseProxy.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	if m.AddLocation {
		n += 3
	}
	if m.CompressionParams != nil {
		l = m.CompressionParams.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	if len(m.CustomErrors) > 0 {
		for k, v := range m.CustomErrors {
			_ = k
			_ = v
			mapEntrySize := 1 + sovTypes(uint64(k)) + 1 + len(v) + sovTypes(uint64(len(v)))
			n += mapEntrySize + 2 + sovTypes(uint64(mapEntrySize))
		}
	}
	if m.MaxRequestHeaderSize != 0 {
		n += 2 + sovTypes(uint64(m.MaxRequestHeaderSize))
	}
	if m.ChallengeType != nil {
		n += m.ChallengeType.Size()
	}
	if len(m.UserIdentification) > 0 {
		for _, e := range m.UserIdentification {
			l = e.Size()
			n += 2 + l + sovTypes(uint64(l))
		}
	}
	if len(m.RateLimiter) > 0 {
		for _, e := range m.RateLimiter {
			l = e.Size()
			n += 2 + l + sovTypes(uint64(l))
		}
	}
	if len(m.RateLimiterAllowedPrefixes) > 0 {
		for _, e := range m.RateLimiterAllowedPrefixes {
			l = e.Size()
			n += 2 + l + sovTypes(uint64(l))
		}
	}
	if m.RetryPolicy != nil {
		l = m.RetryPolicy.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	if m.IdleTimeout != 0 {
		n += 2 + sovTypes(uint64(m.IdleTimeout))
	}
	if m.DisableDefaultErrorPages {
		n += 3
	}
	if m.DisableDnsResolve {
		n += 3
	}
	if m.TemporaryUserBlocking != nil {
		l = m.TemporaryUserBlocking.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	if m.AuthenticationChoice != nil {
		n += m.AuthenticationChoice.Size()
	}
	if m.ServerHeaderChoice != nil {
		n += m.ServerHeaderChoice.Size()
	}
	return n
}

func (m *CreateSpecType_JsChallenge) Size() (n int) {
	var l int
	_ = l
	if m.JsChallenge != nil {
		l = m.JsChallenge.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_CaptchaChallenge) Size() (n int) {
	var l int
	_ = l
	if m.CaptchaChallenge != nil {
		l = m.CaptchaChallenge.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_NoChallenge) Size() (n int) {
	var l int
	_ = l
	if m.NoChallenge != nil {
		l = m.NoChallenge.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_NoAuthentication) Size() (n int) {
	var l int
	_ = l
	if m.NoAuthentication != nil {
		l = m.NoAuthentication.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_Authentication) Size() (n int) {
	var l int
	_ = l
	if m.Authentication != nil {
		l = m.Authentication.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_DefaultHeader) Size() (n int) {
	var l int
	_ = l
	if m.DefaultHeader != nil {
		l = m.DefaultHeader.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_ServerName) Size() (n int) {
	var l int
	_ = l
	l = len(m.ServerName)
	n += 2 + l + sovTypes(uint64(l))
	return n
}
func (m *CreateSpecType_AppendServerName) Size() (n int) {
	var l int
	_ = l
	l = len(m.AppendServerName)
	n += 2 + l + sovTypes(uint64(l))
	return n
}
func (m *CreateSpecType_PassThrough) Size() (n int) {
	var l int
	_ = l
	if m.PassThrough != nil {
		l = m.PassThrough.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType) Size() (n int) {
	var l int
	_ = l
	if len(m.Domains) > 0 {
		for _, s := range m.Domains {
			l = len(s)
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if len(m.Routes) > 0 {
		for _, e := range m.Routes {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if len(m.AdvertisePolicies) > 0 {
		for _, e := range m.AdvertisePolicies {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if len(m.RequestHeadersToAdd) > 0 {
		for _, e := range m.RequestHeadersToAdd {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if len(m.ResponseHeadersToAdd) > 0 {
		for _, e := range m.ResponseHeadersToAdd {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if len(m.ResponseHeadersToRemove) > 0 {
		for _, s := range m.ResponseHeadersToRemove {
			l = len(s)
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if m.TlsParameters != nil {
		l = m.TlsParameters.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.BufferPolicy != nil {
		l = m.BufferPolicy.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.CorsPolicy != nil {
		l = m.CorsPolicy.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.Proxy != 0 {
		n += 1 + sovTypes(uint64(m.Proxy))
	}
	if len(m.RequestHeadersToRemove) > 0 {
		for _, s := range m.RequestHeadersToRemove {
			l = len(s)
			n += 2 + l + sovTypes(uint64(l))
		}
	}
	if m.WafType != nil {
		l = m.WafType.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	if m.DynamicReverseProxy != nil {
		l = m.DynamicReverseProxy.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	if m.AddLocation {
		n += 3
	}
	if m.CompressionParams != nil {
		l = m.CompressionParams.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	if len(m.CustomErrors) > 0 {
		for k, v := range m.CustomErrors {
			_ = k
			_ = v
			mapEntrySize := 1 + sovTypes(uint64(k)) + 1 + len(v) + sovTypes(uint64(len(v)))
			n += mapEntrySize + 2 + sovTypes(uint64(mapEntrySize))
		}
	}
	if m.MaxRequestHeaderSize != 0 {
		n += 2 + sovTypes(uint64(m.MaxRequestHeaderSize))
	}
	if m.ChallengeType != nil {
		n += m.ChallengeType.Size()
	}
	if len(m.UserIdentification) > 0 {
		for _, e := range m.UserIdentification {
			l = e.Size()
			n += 2 + l + sovTypes(uint64(l))
		}
	}
	if len(m.RateLimiter) > 0 {
		for _, e := range m.RateLimiter {
			l = e.Size()
			n += 2 + l + sovTypes(uint64(l))
		}
	}
	if len(m.RateLimiterAllowedPrefixes) > 0 {
		for _, e := range m.RateLimiterAllowedPrefixes {
			l = e.Size()
			n += 2 + l + sovTypes(uint64(l))
		}
	}
	if m.RetryPolicy != nil {
		l = m.RetryPolicy.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	if m.IdleTimeout != 0 {
		n += 2 + sovTypes(uint64(m.IdleTimeout))
	}
	if m.DisableDefaultErrorPages {
		n += 3
	}
	if m.DisableDnsResolve {
		n += 3
	}
	if m.TemporaryUserBlocking != nil {
		l = m.TemporaryUserBlocking.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	if m.AuthenticationChoice != nil {
		n += m.AuthenticationChoice.Size()
	}
	if m.ServerHeaderChoice != nil {
		n += m.ServerHeaderChoice.Size()
	}
	return n
}

func (m *ReplaceSpecType_JsChallenge) Size() (n int) {
	var l int
	_ = l
	if m.JsChallenge != nil {
		l = m.JsChallenge.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_CaptchaChallenge) Size() (n int) {
	var l int
	_ = l
	if m.CaptchaChallenge != nil {
		l = m.CaptchaChallenge.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_NoChallenge) Size() (n int) {
	var l int
	_ = l
	if m.NoChallenge != nil {
		l = m.NoChallenge.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_NoAuthentication) Size() (n int) {
	var l int
	_ = l
	if m.NoAuthentication != nil {
		l = m.NoAuthentication.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_Authentication) Size() (n int) {
	var l int
	_ = l
	if m.Authentication != nil {
		l = m.Authentication.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_DefaultHeader) Size() (n int) {
	var l int
	_ = l
	if m.DefaultHeader != nil {
		l = m.DefaultHeader.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_ServerName) Size() (n int) {
	var l int
	_ = l
	l = len(m.ServerName)
	n += 2 + l + sovTypes(uint64(l))
	return n
}
func (m *ReplaceSpecType_AppendServerName) Size() (n int) {
	var l int
	_ = l
	l = len(m.AppendServerName)
	n += 2 + l + sovTypes(uint64(l))
	return n
}
func (m *ReplaceSpecType_PassThrough) Size() (n int) {
	var l int
	_ = l
	if m.PassThrough != nil {
		l = m.PassThrough.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType) Size() (n int) {
	var l int
	_ = l
	if len(m.Domains) > 0 {
		for _, s := range m.Domains {
			l = len(s)
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if len(m.Routes) > 0 {
		for _, e := range m.Routes {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if len(m.AdvertisePolicies) > 0 {
		for _, e := range m.AdvertisePolicies {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if len(m.RequestHeadersToAdd) > 0 {
		for _, e := range m.RequestHeadersToAdd {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if len(m.ResponseHeadersToAdd) > 0 {
		for _, e := range m.ResponseHeadersToAdd {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if len(m.ResponseHeadersToRemove) > 0 {
		for _, s := range m.ResponseHeadersToRemove {
			l = len(s)
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if m.TlsParameters != nil {
		l = m.TlsParameters.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.Type != 0 {
		n += 1 + sovTypes(uint64(m.Type))
	}
	if m.BufferPolicy != nil {
		l = m.BufferPolicy.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.CorsPolicy != nil {
		l = m.CorsPolicy.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.Proxy != 0 {
		n += 1 + sovTypes(uint64(m.Proxy))
	}
	if len(m.RequestHeadersToRemove) > 0 {
		for _, s := range m.RequestHeadersToRemove {
			l = len(s)
			n += 2 + l + sovTypes(uint64(l))
		}
	}
	if m.WafType != nil {
		l = m.WafType.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	if m.DynamicReverseProxy != nil {
		l = m.DynamicReverseProxy.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	if m.AddLocation {
		n += 3
	}
	if m.CompressionParams != nil {
		l = m.CompressionParams.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	if len(m.CustomErrors) > 0 {
		for k, v := range m.CustomErrors {
			_ = k
			_ = v
			mapEntrySize := 1 + sovTypes(uint64(k)) + 1 + len(v) + sovTypes(uint64(len(v)))
			n += mapEntrySize + 2 + sovTypes(uint64(mapEntrySize))
		}
	}
	if m.MaxRequestHeaderSize != 0 {
		n += 2 + sovTypes(uint64(m.MaxRequestHeaderSize))
	}
	if m.ChallengeType != nil {
		n += m.ChallengeType.Size()
	}
	if len(m.UserIdentification) > 0 {
		for _, e := range m.UserIdentification {
			l = e.Size()
			n += 2 + l + sovTypes(uint64(l))
		}
	}
	if len(m.RateLimiter) > 0 {
		for _, e := range m.RateLimiter {
			l = e.Size()
			n += 2 + l + sovTypes(uint64(l))
		}
	}
	if len(m.RateLimiterAllowedPrefixes) > 0 {
		for _, e := range m.RateLimiterAllowedPrefixes {
			l = e.Size()
			n += 2 + l + sovTypes(uint64(l))
		}
	}
	if m.RetryPolicy != nil {
		l = m.RetryPolicy.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	if m.IdleTimeout != 0 {
		n += 2 + sovTypes(uint64(m.IdleTimeout))
	}
	if m.DisableDefaultErrorPages {
		n += 3
	}
	if m.DisableDnsResolve {
		n += 3
	}
	if m.TemporaryUserBlocking != nil {
		l = m.TemporaryUserBlocking.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	if m.AuthenticationChoice != nil {
		n += m.AuthenticationChoice.Size()
	}
	if m.ServerHeaderChoice != nil {
		n += m.ServerHeaderChoice.Size()
	}
	if m.State != 0 {
		n += 2 + sovTypes(uint64(m.State))
	}
	l = len(m.HostName)
	if l > 0 {
		n += 2 + l + sovTypes(uint64(l))
	}
	if len(m.DnsInfo) > 0 {
		for _, e := range m.DnsInfo {
			l = e.Size()
			n += 2 + l + sovTypes(uint64(l))
		}
	}
	if m.AutoCertState != 0 {
		n += 2 + sovTypes(uint64(m.AutoCertState))
	}
	if m.AutoCertInfo != nil {
		l = m.AutoCertInfo.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *GetSpecType_JsChallenge) Size() (n int) {
	var l int
	_ = l
	if m.JsChallenge != nil {
		l = m.JsChallenge.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_CaptchaChallenge) Size() (n int) {
	var l int
	_ = l
	if m.CaptchaChallenge != nil {
		l = m.CaptchaChallenge.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_NoChallenge) Size() (n int) {
	var l int
	_ = l
	if m.NoChallenge != nil {
		l = m.NoChallenge.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_NoAuthentication) Size() (n int) {
	var l int
	_ = l
	if m.NoAuthentication != nil {
		l = m.NoAuthentication.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_Authentication) Size() (n int) {
	var l int
	_ = l
	if m.Authentication != nil {
		l = m.Authentication.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_DefaultHeader) Size() (n int) {
	var l int
	_ = l
	if m.DefaultHeader != nil {
		l = m.DefaultHeader.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_ServerName) Size() (n int) {
	var l int
	_ = l
	l = len(m.ServerName)
	n += 2 + l + sovTypes(uint64(l))
	return n
}
func (m *GetSpecType_AppendServerName) Size() (n int) {
	var l int
	_ = l
	l = len(m.AppendServerName)
	n += 2 + l + sovTypes(uint64(l))
	return n
}
func (m *GetSpecType_PassThrough) Size() (n int) {
	var l int
	_ = l
	if m.PassThrough != nil {
		l = m.PassThrough.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}

func sovTypes(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozTypes(x uint64) (n int) {
	return sovTypes(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *JavaScriptConfigType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&JavaScriptConfigType{`,
		`CachePrefix:` + fmt.Sprintf("%v", this.CachePrefix) + `,`,
		`ScriptConfig:` + strings.Replace(fmt.Sprintf("%v", this.ScriptConfig), "Struct", "google_protobuf3.Struct", 1) + `,`,
		`CustomScriptUrl:` + fmt.Sprintf("%v", this.CustomScriptUrl) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DynamicReverseProxyType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DynamicReverseProxyType{`,
		`ResolveEndpointDynamically:` + fmt.Sprintf("%v", this.ResolveEndpointDynamically) + `,`,
		`ResolutionNetworkType:` + fmt.Sprintf("%v", this.ResolutionNetworkType) + `,`,
		`ResolutionNetwork:` + strings.Replace(fmt.Sprintf("%v", this.ResolutionNetwork), "ObjectRefType", "ves_io_schema4.ObjectRefType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CompressionType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CompressionType{`,
		`ContentLength:` + fmt.Sprintf("%v", this.ContentLength) + `,`,
		`ContentType:` + fmt.Sprintf("%v", this.ContentType) + `,`,
		`DisableOnEtagHeader:` + fmt.Sprintf("%v", this.DisableOnEtagHeader) + `,`,
		`RemoveAcceptEncodingHeader:` + fmt.Sprintf("%v", this.RemoveAcceptEncodingHeader) + `,`,
		`}`,
	}, "")
	return s
}
func (this *JavascriptChallengeType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&JavascriptChallengeType{`,
		`EnableJsChallenge:` + fmt.Sprintf("%v", this.EnableJsChallenge) + `,`,
		`JsScriptDelay:` + fmt.Sprintf("%v", this.JsScriptDelay) + `,`,
		`CookieExpiry:` + fmt.Sprintf("%v", this.CookieExpiry) + `,`,
		`CustomPage:` + fmt.Sprintf("%v", this.CustomPage) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CaptchaChallengeType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CaptchaChallengeType{`,
		`EnableCaptchaChallenge:` + fmt.Sprintf("%v", this.EnableCaptchaChallenge) + `,`,
		`CookieExpiry:` + fmt.Sprintf("%v", this.CookieExpiry) + `,`,
		`CustomPage:` + fmt.Sprintf("%v", this.CustomPage) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TemporaryUserBlockingType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TemporaryUserBlockingType{`,
		`CustomPage:` + fmt.Sprintf("%v", this.CustomPage) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AutoCertInfoType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AutoCertInfoType{`,
		`AutoCertState:` + fmt.Sprintf("%v", this.AutoCertState) + `,`,
		`AutoCertExpiry:` + strings.Replace(fmt.Sprintf("%v", this.AutoCertExpiry), "Timestamp", "google_protobuf1.Timestamp", 1) + `,`,
		`AutoCertSubject:` + fmt.Sprintf("%v", this.AutoCertSubject) + `,`,
		`AutoCertIssuer:` + fmt.Sprintf("%v", this.AutoCertIssuer) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AuthenticationDetails) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AuthenticationDetails{`,
		`AuthConfig:` + strings.Replace(fmt.Sprintf("%v", this.AuthConfig), "ObjectRefType", "ves_io_schema4.ObjectRefType", 1) + `,`,
		`CookieParamsChoice:` + fmt.Sprintf("%v", this.CookieParamsChoice) + `,`,
		`RedirectUrlChoice:` + fmt.Sprintf("%v", this.RedirectUrlChoice) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AuthenticationDetails_UseAuthObjectConfig) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AuthenticationDetails_UseAuthObjectConfig{`,
		`UseAuthObjectConfig:` + strings.Replace(fmt.Sprintf("%v", this.UseAuthObjectConfig), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AuthenticationDetails_CookieParams) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AuthenticationDetails_CookieParams{`,
		`CookieParams:` + strings.Replace(fmt.Sprintf("%v", this.CookieParams), "CookieParams", "ves_io_schema_authentication.CookieParams", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AuthenticationDetails_RedirectUrl) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AuthenticationDetails_RedirectUrl{`,
		`RedirectUrl:` + fmt.Sprintf("%v", this.RedirectUrl) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AuthenticationDetails_RedirectDynamic) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AuthenticationDetails_RedirectDynamic{`,
		`RedirectDynamic:` + strings.Replace(fmt.Sprintf("%v", this.RedirectDynamic), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PolicyBasedChallenge) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PolicyBasedChallenge{`,
		`JsChallenge:` + strings.Replace(fmt.Sprintf("%v", this.JsChallenge), "JavascriptChallengeType", "JavascriptChallengeType", 1) + `,`,
		`CaptchaChallenge:` + strings.Replace(fmt.Sprintf("%v", this.CaptchaChallenge), "CaptchaChallengeType", "CaptchaChallengeType", 1) + `,`,
		`TemporaryUserBlocking:` + strings.Replace(fmt.Sprintf("%v", this.TemporaryUserBlocking), "TemporaryUserBlockingType", "TemporaryUserBlockingType", 1) + `,`,
		`ChallengeChoice:` + fmt.Sprintf("%v", this.ChallengeChoice) + `,`,
		`MaliciousUserMitigation:` + strings.Replace(fmt.Sprintf("%v", this.MaliciousUserMitigation), "ObjectRefType", "ves_io_schema4.ObjectRefType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PolicyBasedChallenge_NoChallenge) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PolicyBasedChallenge_NoChallenge{`,
		`NoChallenge:` + strings.Replace(fmt.Sprintf("%v", this.NoChallenge), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PolicyBasedChallenge_AlwaysEnableJsChallenge) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PolicyBasedChallenge_AlwaysEnableJsChallenge{`,
		`AlwaysEnableJsChallenge:` + strings.Replace(fmt.Sprintf("%v", this.AlwaysEnableJsChallenge), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PolicyBasedChallenge_AlwaysEnableCaptchaChallenge) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PolicyBasedChallenge_AlwaysEnableCaptchaChallenge{`,
		`AlwaysEnableCaptchaChallenge:` + strings.Replace(fmt.Sprintf("%v", this.AlwaysEnableCaptchaChallenge), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType) String() string {
	if this == nil {
		return "nil"
	}
	keysForCustomErrors := make([]uint32, 0, len(this.CustomErrors))
	for k, _ := range this.CustomErrors {
		keysForCustomErrors = append(keysForCustomErrors, k)
	}
	sortkeys.Uint32s(keysForCustomErrors)
	mapStringForCustomErrors := "map[uint32]string{"
	for _, k := range keysForCustomErrors {
		mapStringForCustomErrors += fmt.Sprintf("%v: %v,", k, this.CustomErrors[k])
	}
	mapStringForCustomErrors += "}"
	s := strings.Join([]string{`&GlobalSpecType{`,
		`Domains:` + fmt.Sprintf("%v", this.Domains) + `,`,
		`Routes:` + strings.Replace(fmt.Sprintf("%v", this.Routes), "ObjectRefType", "ves_io_schema4.ObjectRefType", 1) + `,`,
		`JavascriptInfo:` + strings.Replace(fmt.Sprintf("%v", this.JavascriptInfo), "JavaScriptConfigType", "JavaScriptConfigType", 1) + `,`,
		`AdvertisePolicies:` + strings.Replace(fmt.Sprintf("%v", this.AdvertisePolicies), "ObjectRefType", "ves_io_schema4.ObjectRefType", 1) + `,`,
		`RequestHeadersToAdd:` + strings.Replace(fmt.Sprintf("%v", this.RequestHeadersToAdd), "HeaderManipulationOptionType", "ves_io_schema4.HeaderManipulationOptionType", 1) + `,`,
		`ResponseHeadersToAdd:` + strings.Replace(fmt.Sprintf("%v", this.ResponseHeadersToAdd), "HeaderManipulationOptionType", "ves_io_schema4.HeaderManipulationOptionType", 1) + `,`,
		`ResponseHeadersToRemove:` + fmt.Sprintf("%v", this.ResponseHeadersToRemove) + `,`,
		`TlsParameters:` + strings.Replace(fmt.Sprintf("%v", this.TlsParameters), "DownstreamTlsParamsType", "ves_io_schema4.DownstreamTlsParamsType", 1) + `,`,
		`Type:` + fmt.Sprintf("%v", this.Type) + `,`,
		`BufferPolicy:` + strings.Replace(fmt.Sprintf("%v", this.BufferPolicy), "BufferConfigType", "ves_io_schema4.BufferConfigType", 1) + `,`,
		`CorsPolicy:` + strings.Replace(fmt.Sprintf("%v", this.CorsPolicy), "CorsPolicy", "ves_io_schema4.CorsPolicy", 1) + `,`,
		`Proxy:` + fmt.Sprintf("%v", this.Proxy) + `,`,
		`Jwt:` + strings.Replace(fmt.Sprintf("%v", this.Jwt), "ObjectRefType", "ves_io_schema4.ObjectRefType", 1) + `,`,
		`RequestHeadersToRemove:` + fmt.Sprintf("%v", this.RequestHeadersToRemove) + `,`,
		`WafType:` + strings.Replace(fmt.Sprintf("%v", this.WafType), "WafType", "ves_io_schema4.WafType", 1) + `,`,
		`DynamicReverseProxy:` + strings.Replace(fmt.Sprintf("%v", this.DynamicReverseProxy), "DynamicReverseProxyType", "DynamicReverseProxyType", 1) + `,`,
		`AddLocation:` + fmt.Sprintf("%v", this.AddLocation) + `,`,
		`CompressionParams:` + strings.Replace(fmt.Sprintf("%v", this.CompressionParams), "CompressionType", "CompressionType", 1) + `,`,
		`CustomErrors:` + mapStringForCustomErrors + `,`,
		`MaxRequestHeaderSize:` + fmt.Sprintf("%v", this.MaxRequestHeaderSize) + `,`,
		`ChallengeType:` + fmt.Sprintf("%v", this.ChallengeType) + `,`,
		`UserIdentification:` + strings.Replace(fmt.Sprintf("%v", this.UserIdentification), "ObjectRefType", "ves_io_schema4.ObjectRefType", 1) + `,`,
		`RateLimiter:` + strings.Replace(fmt.Sprintf("%v", this.RateLimiter), "ObjectRefType", "ves_io_schema4.ObjectRefType", 1) + `,`,
		`RateLimiterAllowedPrefixes:` + strings.Replace(fmt.Sprintf("%v", this.RateLimiterAllowedPrefixes), "ObjectRefType", "ves_io_schema4.ObjectRefType", 1) + `,`,
		`RetryPolicy:` + strings.Replace(fmt.Sprintf("%v", this.RetryPolicy), "RetryPolicyType", "ves_io_schema4.RetryPolicyType", 1) + `,`,
		`IdleTimeout:` + fmt.Sprintf("%v", this.IdleTimeout) + `,`,
		`DisableDefaultErrorPages:` + fmt.Sprintf("%v", this.DisableDefaultErrorPages) + `,`,
		`DisableDnsResolve:` + fmt.Sprintf("%v", this.DisableDnsResolve) + `,`,
		`TemporaryUserBlocking:` + strings.Replace(fmt.Sprintf("%v", this.TemporaryUserBlocking), "TemporaryUserBlockingType", "TemporaryUserBlockingType", 1) + `,`,
		`MaliciousUserMitigation:` + strings.Replace(fmt.Sprintf("%v", this.MaliciousUserMitigation), "ObjectRefType", "ves_io_schema4.ObjectRefType", 1) + `,`,
		`TlsIntercept:` + strings.Replace(fmt.Sprintf("%v", this.TlsIntercept), "TlsInterceptionType", "ves_io_schema4.TlsInterceptionType", 1) + `,`,
		`AuthenticationChoice:` + fmt.Sprintf("%v", this.AuthenticationChoice) + `,`,
		`ServerHeaderChoice:` + fmt.Sprintf("%v", this.ServerHeaderChoice) + `,`,
		`DnsVolterraManaged:` + fmt.Sprintf("%v", this.DnsVolterraManaged) + `,`,
		`DnsDomains:` + strings.Replace(fmt.Sprintf("%v", this.DnsDomains), "ObjectRefType", "ves_io_schema4.ObjectRefType", 1) + `,`,
		`AutoCert:` + fmt.Sprintf("%v", this.AutoCert) + `,`,
		`State:` + fmt.Sprintf("%v", this.State) + `,`,
		`HostName:` + fmt.Sprintf("%v", this.HostName) + `,`,
		`DnsInfo:` + strings.Replace(fmt.Sprintf("%v", this.DnsInfo), "DnsInfo", "ves_io_schema_virtual_host_dns_info.DnsInfo", 1) + `,`,
		`AutoCertState:` + fmt.Sprintf("%v", this.AutoCertState) + `,`,
		`AutoCertInfo:` + strings.Replace(fmt.Sprintf("%v", this.AutoCertInfo), "AutoCertInfoType", "AutoCertInfoType", 1) + `,`,
		`UserDomains:` + fmt.Sprintf("%v", this.UserDomains) + `,`,
		`ServicePolicySets:` + strings.Replace(fmt.Sprintf("%v", this.ServicePolicySets), "ObjectRefType", "ves_io_schema4.ObjectRefType", 1) + `,`,
		`LoadbalancerAlgorithm:` + fmt.Sprintf("%v", this.LoadbalancerAlgorithm) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_JsChallenge) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_JsChallenge{`,
		`JsChallenge:` + strings.Replace(fmt.Sprintf("%v", this.JsChallenge), "JavascriptChallengeType", "JavascriptChallengeType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_CaptchaChallenge) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_CaptchaChallenge{`,
		`CaptchaChallenge:` + strings.Replace(fmt.Sprintf("%v", this.CaptchaChallenge), "CaptchaChallengeType", "CaptchaChallengeType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_NoChallenge) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_NoChallenge{`,
		`NoChallenge:` + strings.Replace(fmt.Sprintf("%v", this.NoChallenge), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_NoAuthentication) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_NoAuthentication{`,
		`NoAuthentication:` + strings.Replace(fmt.Sprintf("%v", this.NoAuthentication), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_Authentication) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_Authentication{`,
		`Authentication:` + strings.Replace(fmt.Sprintf("%v", this.Authentication), "AuthenticationDetails", "AuthenticationDetails", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_PolicyBasedChallenge) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_PolicyBasedChallenge{`,
		`PolicyBasedChallenge:` + strings.Replace(fmt.Sprintf("%v", this.PolicyBasedChallenge), "PolicyBasedChallenge", "PolicyBasedChallenge", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_DefaultHeader) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_DefaultHeader{`,
		`DefaultHeader:` + strings.Replace(fmt.Sprintf("%v", this.DefaultHeader), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_ServerName) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_ServerName{`,
		`ServerName:` + fmt.Sprintf("%v", this.ServerName) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_AppendServerName) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_AppendServerName{`,
		`AppendServerName:` + fmt.Sprintf("%v", this.AppendServerName) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_PassThrough) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_PassThrough{`,
		`PassThrough:` + strings.Replace(fmt.Sprintf("%v", this.PassThrough), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType) String() string {
	if this == nil {
		return "nil"
	}
	keysForCustomErrors := make([]uint32, 0, len(this.CustomErrors))
	for k, _ := range this.CustomErrors {
		keysForCustomErrors = append(keysForCustomErrors, k)
	}
	sortkeys.Uint32s(keysForCustomErrors)
	mapStringForCustomErrors := "map[uint32]string{"
	for _, k := range keysForCustomErrors {
		mapStringForCustomErrors += fmt.Sprintf("%v: %v,", k, this.CustomErrors[k])
	}
	mapStringForCustomErrors += "}"
	s := strings.Join([]string{`&CreateSpecType{`,
		`Domains:` + fmt.Sprintf("%v", this.Domains) + `,`,
		`Routes:` + strings.Replace(fmt.Sprintf("%v", this.Routes), "ObjectRefType", "ves_io_schema4.ObjectRefType", 1) + `,`,
		`AdvertisePolicies:` + strings.Replace(fmt.Sprintf("%v", this.AdvertisePolicies), "ObjectRefType", "ves_io_schema4.ObjectRefType", 1) + `,`,
		`RequestHeadersToAdd:` + strings.Replace(fmt.Sprintf("%v", this.RequestHeadersToAdd), "HeaderManipulationOptionType", "ves_io_schema4.HeaderManipulationOptionType", 1) + `,`,
		`ResponseHeadersToAdd:` + strings.Replace(fmt.Sprintf("%v", this.ResponseHeadersToAdd), "HeaderManipulationOptionType", "ves_io_schema4.HeaderManipulationOptionType", 1) + `,`,
		`ResponseHeadersToRemove:` + fmt.Sprintf("%v", this.ResponseHeadersToRemove) + `,`,
		`TlsParameters:` + strings.Replace(fmt.Sprintf("%v", this.TlsParameters), "DownstreamTlsParamsType", "ves_io_schema4.DownstreamTlsParamsType", 1) + `,`,
		`BufferPolicy:` + strings.Replace(fmt.Sprintf("%v", this.BufferPolicy), "BufferConfigType", "ves_io_schema4.BufferConfigType", 1) + `,`,
		`CorsPolicy:` + strings.Replace(fmt.Sprintf("%v", this.CorsPolicy), "CorsPolicy", "ves_io_schema4.CorsPolicy", 1) + `,`,
		`Proxy:` + fmt.Sprintf("%v", this.Proxy) + `,`,
		`RequestHeadersToRemove:` + fmt.Sprintf("%v", this.RequestHeadersToRemove) + `,`,
		`WafType:` + strings.Replace(fmt.Sprintf("%v", this.WafType), "WafType", "ves_io_schema4.WafType", 1) + `,`,
		`DynamicReverseProxy:` + strings.Replace(fmt.Sprintf("%v", this.DynamicReverseProxy), "DynamicReverseProxyType", "DynamicReverseProxyType", 1) + `,`,
		`AddLocation:` + fmt.Sprintf("%v", this.AddLocation) + `,`,
		`CompressionParams:` + strings.Replace(fmt.Sprintf("%v", this.CompressionParams), "CompressionType", "CompressionType", 1) + `,`,
		`CustomErrors:` + mapStringForCustomErrors + `,`,
		`MaxRequestHeaderSize:` + fmt.Sprintf("%v", this.MaxRequestHeaderSize) + `,`,
		`ChallengeType:` + fmt.Sprintf("%v", this.ChallengeType) + `,`,
		`UserIdentification:` + strings.Replace(fmt.Sprintf("%v", this.UserIdentification), "ObjectRefType", "ves_io_schema4.ObjectRefType", 1) + `,`,
		`RateLimiter:` + strings.Replace(fmt.Sprintf("%v", this.RateLimiter), "ObjectRefType", "ves_io_schema4.ObjectRefType", 1) + `,`,
		`RateLimiterAllowedPrefixes:` + strings.Replace(fmt.Sprintf("%v", this.RateLimiterAllowedPrefixes), "ObjectRefType", "ves_io_schema4.ObjectRefType", 1) + `,`,
		`RetryPolicy:` + strings.Replace(fmt.Sprintf("%v", this.RetryPolicy), "RetryPolicyType", "ves_io_schema4.RetryPolicyType", 1) + `,`,
		`IdleTimeout:` + fmt.Sprintf("%v", this.IdleTimeout) + `,`,
		`DisableDefaultErrorPages:` + fmt.Sprintf("%v", this.DisableDefaultErrorPages) + `,`,
		`DisableDnsResolve:` + fmt.Sprintf("%v", this.DisableDnsResolve) + `,`,
		`TemporaryUserBlocking:` + strings.Replace(fmt.Sprintf("%v", this.TemporaryUserBlocking), "TemporaryUserBlockingType", "TemporaryUserBlockingType", 1) + `,`,
		`AuthenticationChoice:` + fmt.Sprintf("%v", this.AuthenticationChoice) + `,`,
		`ServerHeaderChoice:` + fmt.Sprintf("%v", this.ServerHeaderChoice) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_JsChallenge) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_JsChallenge{`,
		`JsChallenge:` + strings.Replace(fmt.Sprintf("%v", this.JsChallenge), "JavascriptChallengeType", "JavascriptChallengeType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_CaptchaChallenge) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_CaptchaChallenge{`,
		`CaptchaChallenge:` + strings.Replace(fmt.Sprintf("%v", this.CaptchaChallenge), "CaptchaChallengeType", "CaptchaChallengeType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_NoChallenge) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_NoChallenge{`,
		`NoChallenge:` + strings.Replace(fmt.Sprintf("%v", this.NoChallenge), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_NoAuthentication) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_NoAuthentication{`,
		`NoAuthentication:` + strings.Replace(fmt.Sprintf("%v", this.NoAuthentication), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_Authentication) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_Authentication{`,
		`Authentication:` + strings.Replace(fmt.Sprintf("%v", this.Authentication), "AuthenticationDetails", "AuthenticationDetails", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_DefaultHeader) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_DefaultHeader{`,
		`DefaultHeader:` + strings.Replace(fmt.Sprintf("%v", this.DefaultHeader), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_ServerName) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_ServerName{`,
		`ServerName:` + fmt.Sprintf("%v", this.ServerName) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_AppendServerName) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_AppendServerName{`,
		`AppendServerName:` + fmt.Sprintf("%v", this.AppendServerName) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_PassThrough) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_PassThrough{`,
		`PassThrough:` + strings.Replace(fmt.Sprintf("%v", this.PassThrough), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType) String() string {
	if this == nil {
		return "nil"
	}
	keysForCustomErrors := make([]uint32, 0, len(this.CustomErrors))
	for k, _ := range this.CustomErrors {
		keysForCustomErrors = append(keysForCustomErrors, k)
	}
	sortkeys.Uint32s(keysForCustomErrors)
	mapStringForCustomErrors := "map[uint32]string{"
	for _, k := range keysForCustomErrors {
		mapStringForCustomErrors += fmt.Sprintf("%v: %v,", k, this.CustomErrors[k])
	}
	mapStringForCustomErrors += "}"
	s := strings.Join([]string{`&ReplaceSpecType{`,
		`Domains:` + fmt.Sprintf("%v", this.Domains) + `,`,
		`Routes:` + strings.Replace(fmt.Sprintf("%v", this.Routes), "ObjectRefType", "ves_io_schema4.ObjectRefType", 1) + `,`,
		`AdvertisePolicies:` + strings.Replace(fmt.Sprintf("%v", this.AdvertisePolicies), "ObjectRefType", "ves_io_schema4.ObjectRefType", 1) + `,`,
		`RequestHeadersToAdd:` + strings.Replace(fmt.Sprintf("%v", this.RequestHeadersToAdd), "HeaderManipulationOptionType", "ves_io_schema4.HeaderManipulationOptionType", 1) + `,`,
		`ResponseHeadersToAdd:` + strings.Replace(fmt.Sprintf("%v", this.ResponseHeadersToAdd), "HeaderManipulationOptionType", "ves_io_schema4.HeaderManipulationOptionType", 1) + `,`,
		`ResponseHeadersToRemove:` + fmt.Sprintf("%v", this.ResponseHeadersToRemove) + `,`,
		`TlsParameters:` + strings.Replace(fmt.Sprintf("%v", this.TlsParameters), "DownstreamTlsParamsType", "ves_io_schema4.DownstreamTlsParamsType", 1) + `,`,
		`BufferPolicy:` + strings.Replace(fmt.Sprintf("%v", this.BufferPolicy), "BufferConfigType", "ves_io_schema4.BufferConfigType", 1) + `,`,
		`CorsPolicy:` + strings.Replace(fmt.Sprintf("%v", this.CorsPolicy), "CorsPolicy", "ves_io_schema4.CorsPolicy", 1) + `,`,
		`Proxy:` + fmt.Sprintf("%v", this.Proxy) + `,`,
		`RequestHeadersToRemove:` + fmt.Sprintf("%v", this.RequestHeadersToRemove) + `,`,
		`WafType:` + strings.Replace(fmt.Sprintf("%v", this.WafType), "WafType", "ves_io_schema4.WafType", 1) + `,`,
		`DynamicReverseProxy:` + strings.Replace(fmt.Sprintf("%v", this.DynamicReverseProxy), "DynamicReverseProxyType", "DynamicReverseProxyType", 1) + `,`,
		`AddLocation:` + fmt.Sprintf("%v", this.AddLocation) + `,`,
		`CompressionParams:` + strings.Replace(fmt.Sprintf("%v", this.CompressionParams), "CompressionType", "CompressionType", 1) + `,`,
		`CustomErrors:` + mapStringForCustomErrors + `,`,
		`MaxRequestHeaderSize:` + fmt.Sprintf("%v", this.MaxRequestHeaderSize) + `,`,
		`ChallengeType:` + fmt.Sprintf("%v", this.ChallengeType) + `,`,
		`UserIdentification:` + strings.Replace(fmt.Sprintf("%v", this.UserIdentification), "ObjectRefType", "ves_io_schema4.ObjectRefType", 1) + `,`,
		`RateLimiter:` + strings.Replace(fmt.Sprintf("%v", this.RateLimiter), "ObjectRefType", "ves_io_schema4.ObjectRefType", 1) + `,`,
		`RateLimiterAllowedPrefixes:` + strings.Replace(fmt.Sprintf("%v", this.RateLimiterAllowedPrefixes), "ObjectRefType", "ves_io_schema4.ObjectRefType", 1) + `,`,
		`RetryPolicy:` + strings.Replace(fmt.Sprintf("%v", this.RetryPolicy), "RetryPolicyType", "ves_io_schema4.RetryPolicyType", 1) + `,`,
		`IdleTimeout:` + fmt.Sprintf("%v", this.IdleTimeout) + `,`,
		`DisableDefaultErrorPages:` + fmt.Sprintf("%v", this.DisableDefaultErrorPages) + `,`,
		`DisableDnsResolve:` + fmt.Sprintf("%v", this.DisableDnsResolve) + `,`,
		`TemporaryUserBlocking:` + strings.Replace(fmt.Sprintf("%v", this.TemporaryUserBlocking), "TemporaryUserBlockingType", "TemporaryUserBlockingType", 1) + `,`,
		`AuthenticationChoice:` + fmt.Sprintf("%v", this.AuthenticationChoice) + `,`,
		`ServerHeaderChoice:` + fmt.Sprintf("%v", this.ServerHeaderChoice) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_JsChallenge) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_JsChallenge{`,
		`JsChallenge:` + strings.Replace(fmt.Sprintf("%v", this.JsChallenge), "JavascriptChallengeType", "JavascriptChallengeType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_CaptchaChallenge) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_CaptchaChallenge{`,
		`CaptchaChallenge:` + strings.Replace(fmt.Sprintf("%v", this.CaptchaChallenge), "CaptchaChallengeType", "CaptchaChallengeType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_NoChallenge) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_NoChallenge{`,
		`NoChallenge:` + strings.Replace(fmt.Sprintf("%v", this.NoChallenge), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_NoAuthentication) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_NoAuthentication{`,
		`NoAuthentication:` + strings.Replace(fmt.Sprintf("%v", this.NoAuthentication), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_Authentication) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_Authentication{`,
		`Authentication:` + strings.Replace(fmt.Sprintf("%v", this.Authentication), "AuthenticationDetails", "AuthenticationDetails", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_DefaultHeader) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_DefaultHeader{`,
		`DefaultHeader:` + strings.Replace(fmt.Sprintf("%v", this.DefaultHeader), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_ServerName) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_ServerName{`,
		`ServerName:` + fmt.Sprintf("%v", this.ServerName) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_AppendServerName) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_AppendServerName{`,
		`AppendServerName:` + fmt.Sprintf("%v", this.AppendServerName) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_PassThrough) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_PassThrough{`,
		`PassThrough:` + strings.Replace(fmt.Sprintf("%v", this.PassThrough), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType) String() string {
	if this == nil {
		return "nil"
	}
	keysForCustomErrors := make([]uint32, 0, len(this.CustomErrors))
	for k, _ := range this.CustomErrors {
		keysForCustomErrors = append(keysForCustomErrors, k)
	}
	sortkeys.Uint32s(keysForCustomErrors)
	mapStringForCustomErrors := "map[uint32]string{"
	for _, k := range keysForCustomErrors {
		mapStringForCustomErrors += fmt.Sprintf("%v: %v,", k, this.CustomErrors[k])
	}
	mapStringForCustomErrors += "}"
	s := strings.Join([]string{`&GetSpecType{`,
		`Domains:` + fmt.Sprintf("%v", this.Domains) + `,`,
		`Routes:` + strings.Replace(fmt.Sprintf("%v", this.Routes), "ObjectRefType", "ves_io_schema4.ObjectRefType", 1) + `,`,
		`AdvertisePolicies:` + strings.Replace(fmt.Sprintf("%v", this.AdvertisePolicies), "ObjectRefType", "ves_io_schema4.ObjectRefType", 1) + `,`,
		`RequestHeadersToAdd:` + strings.Replace(fmt.Sprintf("%v", this.RequestHeadersToAdd), "HeaderManipulationOptionType", "ves_io_schema4.HeaderManipulationOptionType", 1) + `,`,
		`ResponseHeadersToAdd:` + strings.Replace(fmt.Sprintf("%v", this.ResponseHeadersToAdd), "HeaderManipulationOptionType", "ves_io_schema4.HeaderManipulationOptionType", 1) + `,`,
		`ResponseHeadersToRemove:` + fmt.Sprintf("%v", this.ResponseHeadersToRemove) + `,`,
		`TlsParameters:` + strings.Replace(fmt.Sprintf("%v", this.TlsParameters), "DownstreamTlsParamsType", "ves_io_schema4.DownstreamTlsParamsType", 1) + `,`,
		`Type:` + fmt.Sprintf("%v", this.Type) + `,`,
		`BufferPolicy:` + strings.Replace(fmt.Sprintf("%v", this.BufferPolicy), "BufferConfigType", "ves_io_schema4.BufferConfigType", 1) + `,`,
		`CorsPolicy:` + strings.Replace(fmt.Sprintf("%v", this.CorsPolicy), "CorsPolicy", "ves_io_schema4.CorsPolicy", 1) + `,`,
		`Proxy:` + fmt.Sprintf("%v", this.Proxy) + `,`,
		`RequestHeadersToRemove:` + fmt.Sprintf("%v", this.RequestHeadersToRemove) + `,`,
		`WafType:` + strings.Replace(fmt.Sprintf("%v", this.WafType), "WafType", "ves_io_schema4.WafType", 1) + `,`,
		`DynamicReverseProxy:` + strings.Replace(fmt.Sprintf("%v", this.DynamicReverseProxy), "DynamicReverseProxyType", "DynamicReverseProxyType", 1) + `,`,
		`AddLocation:` + fmt.Sprintf("%v", this.AddLocation) + `,`,
		`CompressionParams:` + strings.Replace(fmt.Sprintf("%v", this.CompressionParams), "CompressionType", "CompressionType", 1) + `,`,
		`CustomErrors:` + mapStringForCustomErrors + `,`,
		`MaxRequestHeaderSize:` + fmt.Sprintf("%v", this.MaxRequestHeaderSize) + `,`,
		`ChallengeType:` + fmt.Sprintf("%v", this.ChallengeType) + `,`,
		`UserIdentification:` + strings.Replace(fmt.Sprintf("%v", this.UserIdentification), "ObjectRefType", "ves_io_schema4.ObjectRefType", 1) + `,`,
		`RateLimiter:` + strings.Replace(fmt.Sprintf("%v", this.RateLimiter), "ObjectRefType", "ves_io_schema4.ObjectRefType", 1) + `,`,
		`RateLimiterAllowedPrefixes:` + strings.Replace(fmt.Sprintf("%v", this.RateLimiterAllowedPrefixes), "ObjectRefType", "ves_io_schema4.ObjectRefType", 1) + `,`,
		`RetryPolicy:` + strings.Replace(fmt.Sprintf("%v", this.RetryPolicy), "RetryPolicyType", "ves_io_schema4.RetryPolicyType", 1) + `,`,
		`IdleTimeout:` + fmt.Sprintf("%v", this.IdleTimeout) + `,`,
		`DisableDefaultErrorPages:` + fmt.Sprintf("%v", this.DisableDefaultErrorPages) + `,`,
		`DisableDnsResolve:` + fmt.Sprintf("%v", this.DisableDnsResolve) + `,`,
		`TemporaryUserBlocking:` + strings.Replace(fmt.Sprintf("%v", this.TemporaryUserBlocking), "TemporaryUserBlockingType", "TemporaryUserBlockingType", 1) + `,`,
		`AuthenticationChoice:` + fmt.Sprintf("%v", this.AuthenticationChoice) + `,`,
		`ServerHeaderChoice:` + fmt.Sprintf("%v", this.ServerHeaderChoice) + `,`,
		`State:` + fmt.Sprintf("%v", this.State) + `,`,
		`HostName:` + fmt.Sprintf("%v", this.HostName) + `,`,
		`DnsInfo:` + strings.Replace(fmt.Sprintf("%v", this.DnsInfo), "DnsInfo", "ves_io_schema_virtual_host_dns_info.DnsInfo", 1) + `,`,
		`AutoCertState:` + fmt.Sprintf("%v", this.AutoCertState) + `,`,
		`AutoCertInfo:` + strings.Replace(fmt.Sprintf("%v", this.AutoCertInfo), "AutoCertInfoType", "AutoCertInfoType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_JsChallenge) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_JsChallenge{`,
		`JsChallenge:` + strings.Replace(fmt.Sprintf("%v", this.JsChallenge), "JavascriptChallengeType", "JavascriptChallengeType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_CaptchaChallenge) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_CaptchaChallenge{`,
		`CaptchaChallenge:` + strings.Replace(fmt.Sprintf("%v", this.CaptchaChallenge), "CaptchaChallengeType", "CaptchaChallengeType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_NoChallenge) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_NoChallenge{`,
		`NoChallenge:` + strings.Replace(fmt.Sprintf("%v", this.NoChallenge), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_NoAuthentication) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_NoAuthentication{`,
		`NoAuthentication:` + strings.Replace(fmt.Sprintf("%v", this.NoAuthentication), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_Authentication) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_Authentication{`,
		`Authentication:` + strings.Replace(fmt.Sprintf("%v", this.Authentication), "AuthenticationDetails", "AuthenticationDetails", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_DefaultHeader) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_DefaultHeader{`,
		`DefaultHeader:` + strings.Replace(fmt.Sprintf("%v", this.DefaultHeader), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_ServerName) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_ServerName{`,
		`ServerName:` + fmt.Sprintf("%v", this.ServerName) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_AppendServerName) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_AppendServerName{`,
		`AppendServerName:` + fmt.Sprintf("%v", this.AppendServerName) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_PassThrough) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_PassThrough{`,
		`PassThrough:` + strings.Replace(fmt.Sprintf("%v", this.PassThrough), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringTypes(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *JavaScriptConfigType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: JavaScriptConfigType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: JavaScriptConfigType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CachePrefix", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CachePrefix = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScriptConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ScriptConfig == nil {
				m.ScriptConfig = &google_protobuf3.Struct{}
			}
			if err := m.ScriptConfig.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CustomScriptUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CustomScriptUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DynamicReverseProxyType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DynamicReverseProxyType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DynamicReverseProxyType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResolveEndpointDynamically", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ResolveEndpointDynamically = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResolutionNetworkType", wireType)
			}
			m.ResolutionNetworkType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ResolutionNetworkType |= (ves_io_schema3.VirtualNetworkType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResolutionNetwork", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ResolutionNetwork = append(m.ResolutionNetwork, &ves_io_schema4.ObjectRefType{})
			if err := m.ResolutionNetwork[len(m.ResolutionNetwork)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CompressionType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CompressionType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CompressionType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContentLength", wireType)
			}
			m.ContentLength = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ContentLength |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContentType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContentType = append(m.ContentType, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisableOnEtagHeader", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DisableOnEtagHeader = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RemoveAcceptEncodingHeader", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RemoveAcceptEncodingHeader = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *JavascriptChallengeType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: JavascriptChallengeType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: JavascriptChallengeType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnableJsChallenge", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.EnableJsChallenge = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field JsScriptDelay", wireType)
			}
			m.JsScriptDelay = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.JsScriptDelay |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CookieExpiry", wireType)
			}
			m.CookieExpiry = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CookieExpiry |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CustomPage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CustomPage = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CaptchaChallengeType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CaptchaChallengeType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CaptchaChallengeType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnableCaptchaChallenge", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.EnableCaptchaChallenge = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CookieExpiry", wireType)
			}
			m.CookieExpiry = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CookieExpiry |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CustomPage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CustomPage = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TemporaryUserBlockingType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TemporaryUserBlockingType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TemporaryUserBlockingType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CustomPage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CustomPage = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AutoCertInfoType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AutoCertInfoType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AutoCertInfoType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AutoCertState", wireType)
			}
			m.AutoCertState = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AutoCertState |= (CertificationState(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AutoCertExpiry", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AutoCertExpiry == nil {
				m.AutoCertExpiry = &google_protobuf1.Timestamp{}
			}
			if err := m.AutoCertExpiry.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AutoCertSubject", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AutoCertSubject = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AutoCertIssuer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AutoCertIssuer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AuthenticationDetails) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AuthenticationDetails: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AuthenticationDetails: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuthConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AuthConfig = append(m.AuthConfig, &ves_io_schema4.ObjectRefType{})
			if err := m.AuthConfig[len(m.AuthConfig)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UseAuthObjectConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.CookieParamsChoice = &AuthenticationDetails_UseAuthObjectConfig{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CookieParams", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema_authentication.CookieParams{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.CookieParamsChoice = &AuthenticationDetails_CookieParams{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RedirectUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RedirectUrlChoice = &AuthenticationDetails_RedirectUrl{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RedirectDynamic", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.RedirectUrlChoice = &AuthenticationDetails_RedirectDynamic{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PolicyBasedChallenge) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PolicyBasedChallenge: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PolicyBasedChallenge: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JsChallenge", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.JsChallenge == nil {
				m.JsChallenge = &JavascriptChallengeType{}
			}
			if err := m.JsChallenge.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CaptchaChallenge", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CaptchaChallenge == nil {
				m.CaptchaChallenge = &CaptchaChallengeType{}
			}
			if err := m.CaptchaChallenge.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TemporaryUserBlocking", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TemporaryUserBlocking == nil {
				m.TemporaryUserBlocking = &TemporaryUserBlockingType{}
			}
			if err := m.TemporaryUserBlocking.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoChallenge", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ChallengeChoice = &PolicyBasedChallenge_NoChallenge{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AlwaysEnableJsChallenge", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ChallengeChoice = &PolicyBasedChallenge_AlwaysEnableJsChallenge{v}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AlwaysEnableCaptchaChallenge", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ChallengeChoice = &PolicyBasedChallenge_AlwaysEnableCaptchaChallenge{v}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaliciousUserMitigation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MaliciousUserMitigation = append(m.MaliciousUserMitigation, &ves_io_schema4.ObjectRefType{})
			if err := m.MaliciousUserMitigation[len(m.MaliciousUserMitigation)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GlobalSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GlobalSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GlobalSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Domains", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Domains = append(m.Domains, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Routes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Routes = append(m.Routes, &ves_io_schema4.ObjectRefType{})
			if err := m.Routes[len(m.Routes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JavascriptInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.JavascriptInfo == nil {
				m.JavascriptInfo = &JavaScriptConfigType{}
			}
			if err := m.JavascriptInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdvertisePolicies", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AdvertisePolicies = append(m.AdvertisePolicies, &ves_io_schema4.ObjectRefType{})
			if err := m.AdvertisePolicies[len(m.AdvertisePolicies)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestHeadersToAdd", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RequestHeadersToAdd = append(m.RequestHeadersToAdd, &ves_io_schema4.HeaderManipulationOptionType{})
			if err := m.RequestHeadersToAdd[len(m.RequestHeadersToAdd)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResponseHeadersToAdd", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ResponseHeadersToAdd = append(m.ResponseHeadersToAdd, &ves_io_schema4.HeaderManipulationOptionType{})
			if err := m.ResponseHeadersToAdd[len(m.ResponseHeadersToAdd)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResponseHeadersToRemove", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ResponseHeadersToRemove = append(m.ResponseHeadersToRemove, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TlsParameters", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TlsParameters == nil {
				m.TlsParameters = &ves_io_schema4.DownstreamTlsParamsType{}
			}
			if err := m.TlsParameters.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (VirtualHostType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BufferPolicy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BufferPolicy == nil {
				m.BufferPolicy = &ves_io_schema4.BufferConfigType{}
			}
			if err := m.BufferPolicy.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CorsPolicy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CorsPolicy == nil {
				m.CorsPolicy = &ves_io_schema4.CorsPolicy{}
			}
			if err := m.CorsPolicy.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Proxy", wireType)
			}
			m.Proxy = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Proxy |= (ProxyType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Jwt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Jwt = append(m.Jwt, &ves_io_schema4.ObjectRefType{})
			if err := m.Jwt[len(m.Jwt)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestHeadersToRemove", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RequestHeadersToRemove = append(m.RequestHeadersToRemove, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WafType", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.WafType == nil {
				m.WafType = &ves_io_schema4.WafType{}
			}
			if err := m.WafType.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DynamicReverseProxy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DynamicReverseProxy == nil {
				m.DynamicReverseProxy = &DynamicReverseProxyType{}
			}
			if err := m.DynamicReverseProxy.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 20:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddLocation", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AddLocation = bool(v != 0)
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompressionParams", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CompressionParams == nil {
				m.CompressionParams = &CompressionType{}
			}
			if err := m.CompressionParams.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 22:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CustomErrors", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CustomErrors == nil {
				m.CustomErrors = make(map[uint32]string)
			}
			var mapkey uint32
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTypes
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= (uint32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTypes
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthTypes
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipTypes(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthTypes
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.CustomErrors[mapkey] = mapvalue
			iNdEx = postIndex
		case 23:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxRequestHeaderSize", wireType)
			}
			m.MaxRequestHeaderSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxRequestHeaderSize |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 24:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JsChallenge", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &JavascriptChallengeType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ChallengeType = &GlobalSpecType_JsChallenge{v}
			iNdEx = postIndex
		case 25:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserIdentification", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserIdentification = append(m.UserIdentification, &ves_io_schema4.ObjectRefType{})
			if err := m.UserIdentification[len(m.UserIdentification)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 26:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RateLimiter", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RateLimiter = append(m.RateLimiter, &ves_io_schema4.ObjectRefType{})
			if err := m.RateLimiter[len(m.RateLimiter)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 27:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RateLimiterAllowedPrefixes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RateLimiterAllowedPrefixes = append(m.RateLimiterAllowedPrefixes, &ves_io_schema4.ObjectRefType{})
			if err := m.RateLimiterAllowedPrefixes[len(m.RateLimiterAllowedPrefixes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 28:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetryPolicy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RetryPolicy == nil {
				m.RetryPolicy = &ves_io_schema4.RetryPolicyType{}
			}
			if err := m.RetryPolicy.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 29:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CaptchaChallenge", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &CaptchaChallengeType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ChallengeType = &GlobalSpecType_CaptchaChallenge{v}
			iNdEx = postIndex
		case 31:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoChallenge", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ChallengeType = &GlobalSpecType_NoChallenge{v}
			iNdEx = postIndex
		case 32:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IdleTimeout", wireType)
			}
			m.IdleTimeout = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IdleTimeout |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 33:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisableDefaultErrorPages", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DisableDefaultErrorPages = bool(v != 0)
		case 34:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisableDnsResolve", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DisableDnsResolve = bool(v != 0)
		case 35:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TemporaryUserBlocking", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TemporaryUserBlocking == nil {
				m.TemporaryUserBlocking = &TemporaryUserBlockingType{}
			}
			if err := m.TemporaryUserBlocking.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 36:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaliciousUserMitigation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MaliciousUserMitigation = append(m.MaliciousUserMitigation, &ves_io_schema4.ObjectRefType{})
			if err := m.MaliciousUserMitigation[len(m.MaliciousUserMitigation)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 37:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TlsIntercept", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TlsIntercept == nil {
				m.TlsIntercept = &ves_io_schema4.TlsInterceptionType{}
			}
			if err := m.TlsIntercept.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 39:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoAuthentication", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.AuthenticationChoice = &GlobalSpecType_NoAuthentication{v}
			iNdEx = postIndex
		case 40:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Authentication", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &AuthenticationDetails{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.AuthenticationChoice = &GlobalSpecType_Authentication{v}
			iNdEx = postIndex
		case 41:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PolicyBasedChallenge", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &PolicyBasedChallenge{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ChallengeType = &GlobalSpecType_PolicyBasedChallenge{v}
			iNdEx = postIndex
		case 43:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultHeader", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ServerHeaderChoice = &GlobalSpecType_DefaultHeader{v}
			iNdEx = postIndex
		case 44:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServerHeaderChoice = &GlobalSpecType_ServerName{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 45:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppendServerName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServerHeaderChoice = &GlobalSpecType_AppendServerName{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 46:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PassThrough", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ServerHeaderChoice = &GlobalSpecType_PassThrough{v}
			iNdEx = postIndex
		case 1000:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DnsVolterraManaged", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DnsVolterraManaged = bool(v != 0)
		case 1001:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DnsDomains", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DnsDomains = append(m.DnsDomains, &ves_io_schema4.ObjectRefType{})
			if err := m.DnsDomains[len(m.DnsDomains)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 1002:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AutoCert", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AutoCert = bool(v != 0)
		case 1003:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= (VirtualHostState(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 1004:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HostName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HostName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 1005:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DnsInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DnsInfo = append(m.DnsInfo, &ves_io_schema_virtual_host_dns_info.DnsInfo{})
			if err := m.DnsInfo[len(m.DnsInfo)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 1006:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AutoCertState", wireType)
			}
			m.AutoCertState = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AutoCertState |= (CertificationState(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 1010:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AutoCertInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AutoCertInfo == nil {
				m.AutoCertInfo = &AutoCertInfoType{}
			}
			if err := m.AutoCertInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 1011:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserDomains", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserDomains = append(m.UserDomains, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 1012:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServicePolicySets", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServicePolicySets = append(m.ServicePolicySets, &ves_io_schema4.ObjectRefType{})
			if err := m.ServicePolicySets[len(m.ServicePolicySets)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 1013:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LoadbalancerAlgorithm", wireType)
			}
			m.LoadbalancerAlgorithm = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LoadbalancerAlgorithm |= (ves_io_schema_cluster.LoadbalancerAlgorithm(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Domains", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Domains = append(m.Domains, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Routes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Routes = append(m.Routes, &ves_io_schema4.ObjectRefType{})
			if err := m.Routes[len(m.Routes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdvertisePolicies", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AdvertisePolicies = append(m.AdvertisePolicies, &ves_io_schema4.ObjectRefType{})
			if err := m.AdvertisePolicies[len(m.AdvertisePolicies)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestHeadersToAdd", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RequestHeadersToAdd = append(m.RequestHeadersToAdd, &ves_io_schema4.HeaderManipulationOptionType{})
			if err := m.RequestHeadersToAdd[len(m.RequestHeadersToAdd)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResponseHeadersToAdd", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ResponseHeadersToAdd = append(m.ResponseHeadersToAdd, &ves_io_schema4.HeaderManipulationOptionType{})
			if err := m.ResponseHeadersToAdd[len(m.ResponseHeadersToAdd)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResponseHeadersToRemove", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ResponseHeadersToRemove = append(m.ResponseHeadersToRemove, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TlsParameters", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TlsParameters == nil {
				m.TlsParameters = &ves_io_schema4.DownstreamTlsParamsType{}
			}
			if err := m.TlsParameters.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BufferPolicy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BufferPolicy == nil {
				m.BufferPolicy = &ves_io_schema4.BufferConfigType{}
			}
			if err := m.BufferPolicy.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CorsPolicy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CorsPolicy == nil {
				m.CorsPolicy = &ves_io_schema4.CorsPolicy{}
			}
			if err := m.CorsPolicy.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Proxy", wireType)
			}
			m.Proxy = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Proxy |= (ProxyType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestHeadersToRemove", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RequestHeadersToRemove = append(m.RequestHeadersToRemove, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WafType", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.WafType == nil {
				m.WafType = &ves_io_schema4.WafType{}
			}
			if err := m.WafType.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DynamicReverseProxy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DynamicReverseProxy == nil {
				m.DynamicReverseProxy = &DynamicReverseProxyType{}
			}
			if err := m.DynamicReverseProxy.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 20:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddLocation", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AddLocation = bool(v != 0)
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompressionParams", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CompressionParams == nil {
				m.CompressionParams = &CompressionType{}
			}
			if err := m.CompressionParams.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 22:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CustomErrors", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CustomErrors == nil {
				m.CustomErrors = make(map[uint32]string)
			}
			var mapkey uint32
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTypes
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= (uint32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTypes
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthTypes
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipTypes(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthTypes
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.CustomErrors[mapkey] = mapvalue
			iNdEx = postIndex
		case 23:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxRequestHeaderSize", wireType)
			}
			m.MaxRequestHeaderSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxRequestHeaderSize |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 24:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JsChallenge", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &JavascriptChallengeType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ChallengeType = &CreateSpecType_JsChallenge{v}
			iNdEx = postIndex
		case 25:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserIdentification", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserIdentification = append(m.UserIdentification, &ves_io_schema4.ObjectRefType{})
			if err := m.UserIdentification[len(m.UserIdentification)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 26:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RateLimiter", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RateLimiter = append(m.RateLimiter, &ves_io_schema4.ObjectRefType{})
			if err := m.RateLimiter[len(m.RateLimiter)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 27:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RateLimiterAllowedPrefixes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RateLimiterAllowedPrefixes = append(m.RateLimiterAllowedPrefixes, &ves_io_schema4.ObjectRefType{})
			if err := m.RateLimiterAllowedPrefixes[len(m.RateLimiterAllowedPrefixes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 28:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetryPolicy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RetryPolicy == nil {
				m.RetryPolicy = &ves_io_schema4.RetryPolicyType{}
			}
			if err := m.RetryPolicy.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 29:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CaptchaChallenge", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &CaptchaChallengeType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ChallengeType = &CreateSpecType_CaptchaChallenge{v}
			iNdEx = postIndex
		case 31:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoChallenge", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ChallengeType = &CreateSpecType_NoChallenge{v}
			iNdEx = postIndex
		case 32:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IdleTimeout", wireType)
			}
			m.IdleTimeout = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IdleTimeout |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 33:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisableDefaultErrorPages", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DisableDefaultErrorPages = bool(v != 0)
		case 34:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisableDnsResolve", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DisableDnsResolve = bool(v != 0)
		case 35:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TemporaryUserBlocking", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TemporaryUserBlocking == nil {
				m.TemporaryUserBlocking = &TemporaryUserBlockingType{}
			}
			if err := m.TemporaryUserBlocking.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 39:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoAuthentication", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.AuthenticationChoice = &CreateSpecType_NoAuthentication{v}
			iNdEx = postIndex
		case 40:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Authentication", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &AuthenticationDetails{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.AuthenticationChoice = &CreateSpecType_Authentication{v}
			iNdEx = postIndex
		case 43:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultHeader", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ServerHeaderChoice = &CreateSpecType_DefaultHeader{v}
			iNdEx = postIndex
		case 44:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServerHeaderChoice = &CreateSpecType_ServerName{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 45:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppendServerName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServerHeaderChoice = &CreateSpecType_AppendServerName{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 46:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PassThrough", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ServerHeaderChoice = &CreateSpecType_PassThrough{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplaceSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplaceSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplaceSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Domains", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Domains = append(m.Domains, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Routes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Routes = append(m.Routes, &ves_io_schema4.ObjectRefType{})
			if err := m.Routes[len(m.Routes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdvertisePolicies", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AdvertisePolicies = append(m.AdvertisePolicies, &ves_io_schema4.ObjectRefType{})
			if err := m.AdvertisePolicies[len(m.AdvertisePolicies)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestHeadersToAdd", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RequestHeadersToAdd = append(m.RequestHeadersToAdd, &ves_io_schema4.HeaderManipulationOptionType{})
			if err := m.RequestHeadersToAdd[len(m.RequestHeadersToAdd)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResponseHeadersToAdd", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ResponseHeadersToAdd = append(m.ResponseHeadersToAdd, &ves_io_schema4.HeaderManipulationOptionType{})
			if err := m.ResponseHeadersToAdd[len(m.ResponseHeadersToAdd)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResponseHeadersToRemove", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ResponseHeadersToRemove = append(m.ResponseHeadersToRemove, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TlsParameters", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TlsParameters == nil {
				m.TlsParameters = &ves_io_schema4.DownstreamTlsParamsType{}
			}
			if err := m.TlsParameters.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BufferPolicy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BufferPolicy == nil {
				m.BufferPolicy = &ves_io_schema4.BufferConfigType{}
			}
			if err := m.BufferPolicy.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CorsPolicy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CorsPolicy == nil {
				m.CorsPolicy = &ves_io_schema4.CorsPolicy{}
			}
			if err := m.CorsPolicy.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Proxy", wireType)
			}
			m.Proxy = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Proxy |= (ProxyType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestHeadersToRemove", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RequestHeadersToRemove = append(m.RequestHeadersToRemove, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WafType", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.WafType == nil {
				m.WafType = &ves_io_schema4.WafType{}
			}
			if err := m.WafType.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DynamicReverseProxy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DynamicReverseProxy == nil {
				m.DynamicReverseProxy = &DynamicReverseProxyType{}
			}
			if err := m.DynamicReverseProxy.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 20:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddLocation", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AddLocation = bool(v != 0)
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompressionParams", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CompressionParams == nil {
				m.CompressionParams = &CompressionType{}
			}
			if err := m.CompressionParams.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 22:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CustomErrors", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CustomErrors == nil {
				m.CustomErrors = make(map[uint32]string)
			}
			var mapkey uint32
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTypes
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= (uint32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTypes
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthTypes
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipTypes(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthTypes
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.CustomErrors[mapkey] = mapvalue
			iNdEx = postIndex
		case 23:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxRequestHeaderSize", wireType)
			}
			m.MaxRequestHeaderSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxRequestHeaderSize |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 24:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JsChallenge", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &JavascriptChallengeType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ChallengeType = &ReplaceSpecType_JsChallenge{v}
			iNdEx = postIndex
		case 25:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserIdentification", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserIdentification = append(m.UserIdentification, &ves_io_schema4.ObjectRefType{})
			if err := m.UserIdentification[len(m.UserIdentification)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 26:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RateLimiter", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RateLimiter = append(m.RateLimiter, &ves_io_schema4.ObjectRefType{})
			if err := m.RateLimiter[len(m.RateLimiter)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 27:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RateLimiterAllowedPrefixes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RateLimiterAllowedPrefixes = append(m.RateLimiterAllowedPrefixes, &ves_io_schema4.ObjectRefType{})
			if err := m.RateLimiterAllowedPrefixes[len(m.RateLimiterAllowedPrefixes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 28:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetryPolicy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RetryPolicy == nil {
				m.RetryPolicy = &ves_io_schema4.RetryPolicyType{}
			}
			if err := m.RetryPolicy.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 29:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CaptchaChallenge", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &CaptchaChallengeType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ChallengeType = &ReplaceSpecType_CaptchaChallenge{v}
			iNdEx = postIndex
		case 31:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoChallenge", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ChallengeType = &ReplaceSpecType_NoChallenge{v}
			iNdEx = postIndex
		case 32:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IdleTimeout", wireType)
			}
			m.IdleTimeout = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IdleTimeout |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 33:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisableDefaultErrorPages", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DisableDefaultErrorPages = bool(v != 0)
		case 34:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisableDnsResolve", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DisableDnsResolve = bool(v != 0)
		case 35:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TemporaryUserBlocking", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TemporaryUserBlocking == nil {
				m.TemporaryUserBlocking = &TemporaryUserBlockingType{}
			}
			if err := m.TemporaryUserBlocking.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 39:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoAuthentication", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.AuthenticationChoice = &ReplaceSpecType_NoAuthentication{v}
			iNdEx = postIndex
		case 40:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Authentication", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &AuthenticationDetails{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.AuthenticationChoice = &ReplaceSpecType_Authentication{v}
			iNdEx = postIndex
		case 43:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultHeader", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ServerHeaderChoice = &ReplaceSpecType_DefaultHeader{v}
			iNdEx = postIndex
		case 44:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServerHeaderChoice = &ReplaceSpecType_ServerName{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 45:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppendServerName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServerHeaderChoice = &ReplaceSpecType_AppendServerName{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 46:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PassThrough", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ServerHeaderChoice = &ReplaceSpecType_PassThrough{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Domains", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Domains = append(m.Domains, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Routes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Routes = append(m.Routes, &ves_io_schema4.ObjectRefType{})
			if err := m.Routes[len(m.Routes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdvertisePolicies", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AdvertisePolicies = append(m.AdvertisePolicies, &ves_io_schema4.ObjectRefType{})
			if err := m.AdvertisePolicies[len(m.AdvertisePolicies)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestHeadersToAdd", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RequestHeadersToAdd = append(m.RequestHeadersToAdd, &ves_io_schema4.HeaderManipulationOptionType{})
			if err := m.RequestHeadersToAdd[len(m.RequestHeadersToAdd)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResponseHeadersToAdd", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ResponseHeadersToAdd = append(m.ResponseHeadersToAdd, &ves_io_schema4.HeaderManipulationOptionType{})
			if err := m.ResponseHeadersToAdd[len(m.ResponseHeadersToAdd)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResponseHeadersToRemove", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ResponseHeadersToRemove = append(m.ResponseHeadersToRemove, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TlsParameters", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TlsParameters == nil {
				m.TlsParameters = &ves_io_schema4.DownstreamTlsParamsType{}
			}
			if err := m.TlsParameters.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (VirtualHostType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BufferPolicy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BufferPolicy == nil {
				m.BufferPolicy = &ves_io_schema4.BufferConfigType{}
			}
			if err := m.BufferPolicy.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CorsPolicy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CorsPolicy == nil {
				m.CorsPolicy = &ves_io_schema4.CorsPolicy{}
			}
			if err := m.CorsPolicy.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Proxy", wireType)
			}
			m.Proxy = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Proxy |= (ProxyType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestHeadersToRemove", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RequestHeadersToRemove = append(m.RequestHeadersToRemove, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WafType", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.WafType == nil {
				m.WafType = &ves_io_schema4.WafType{}
			}
			if err := m.WafType.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DynamicReverseProxy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DynamicReverseProxy == nil {
				m.DynamicReverseProxy = &DynamicReverseProxyType{}
			}
			if err := m.DynamicReverseProxy.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 20:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddLocation", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AddLocation = bool(v != 0)
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompressionParams", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CompressionParams == nil {
				m.CompressionParams = &CompressionType{}
			}
			if err := m.CompressionParams.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 22:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CustomErrors", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CustomErrors == nil {
				m.CustomErrors = make(map[uint32]string)
			}
			var mapkey uint32
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTypes
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= (uint32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTypes
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthTypes
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipTypes(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthTypes
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.CustomErrors[mapkey] = mapvalue
			iNdEx = postIndex
		case 23:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxRequestHeaderSize", wireType)
			}
			m.MaxRequestHeaderSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxRequestHeaderSize |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 24:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JsChallenge", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &JavascriptChallengeType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ChallengeType = &GetSpecType_JsChallenge{v}
			iNdEx = postIndex
		case 25:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserIdentification", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserIdentification = append(m.UserIdentification, &ves_io_schema4.ObjectRefType{})
			if err := m.UserIdentification[len(m.UserIdentification)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 26:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RateLimiter", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RateLimiter = append(m.RateLimiter, &ves_io_schema4.ObjectRefType{})
			if err := m.RateLimiter[len(m.RateLimiter)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 27:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RateLimiterAllowedPrefixes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RateLimiterAllowedPrefixes = append(m.RateLimiterAllowedPrefixes, &ves_io_schema4.ObjectRefType{})
			if err := m.RateLimiterAllowedPrefixes[len(m.RateLimiterAllowedPrefixes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 28:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetryPolicy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RetryPolicy == nil {
				m.RetryPolicy = &ves_io_schema4.RetryPolicyType{}
			}
			if err := m.RetryPolicy.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 29:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CaptchaChallenge", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &CaptchaChallengeType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ChallengeType = &GetSpecType_CaptchaChallenge{v}
			iNdEx = postIndex
		case 31:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoChallenge", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ChallengeType = &GetSpecType_NoChallenge{v}
			iNdEx = postIndex
		case 32:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IdleTimeout", wireType)
			}
			m.IdleTimeout = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IdleTimeout |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 33:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisableDefaultErrorPages", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DisableDefaultErrorPages = bool(v != 0)
		case 34:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisableDnsResolve", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DisableDnsResolve = bool(v != 0)
		case 35:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TemporaryUserBlocking", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TemporaryUserBlocking == nil {
				m.TemporaryUserBlocking = &TemporaryUserBlockingType{}
			}
			if err := m.TemporaryUserBlocking.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 39:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoAuthentication", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.AuthenticationChoice = &GetSpecType_NoAuthentication{v}
			iNdEx = postIndex
		case 40:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Authentication", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &AuthenticationDetails{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.AuthenticationChoice = &GetSpecType_Authentication{v}
			iNdEx = postIndex
		case 43:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultHeader", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ServerHeaderChoice = &GetSpecType_DefaultHeader{v}
			iNdEx = postIndex
		case 44:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServerHeaderChoice = &GetSpecType_ServerName{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 45:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppendServerName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServerHeaderChoice = &GetSpecType_AppendServerName{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 46:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PassThrough", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ServerHeaderChoice = &GetSpecType_PassThrough{v}
			iNdEx = postIndex
		case 1003:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= (VirtualHostState(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 1004:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HostName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HostName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 1005:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DnsInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DnsInfo = append(m.DnsInfo, &ves_io_schema_virtual_host_dns_info.DnsInfo{})
			if err := m.DnsInfo[len(m.DnsInfo)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 1006:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AutoCertState", wireType)
			}
			m.AutoCertState = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AutoCertState |= (CertificationState(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 1010:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AutoCertInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AutoCertInfo == nil {
				m.AutoCertInfo = &AutoCertInfoType{}
			}
			if err := m.AutoCertInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTypes(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthTypes
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipTypes(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthTypes = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTypes   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("ves.io/schema/virtual_host/types.proto", fileDescriptorTypes) }
func init() { golang_proto.RegisterFile("ves.io/schema/virtual_host/types.proto", fileDescriptorTypes) }

var fileDescriptorTypes = []byte{
	// 4139 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x5c, 0x5b, 0x6c, 0xdc, 0x56,
	0x7a, 0xd6, 0x99, 0x8b, 0x2e, 0x67, 0x74, 0xa1, 0x8e, 0x6e, 0x94, 0xec, 0x8c, 0x69, 0x39, 0xb6,
	0x15, 0x99, 0x1e, 0x49, 0x33, 0x92, 0x6d, 0x25, 0xeb, 0x38, 0x73, 0xb3, 0x25, 0xaf, 0x6c, 0xab,
	0xd4, 0xd8, 0x59, 0xa7, 0xdd, 0x65, 0x28, 0xf2, 0x68, 0x44, 0x9b, 0x43, 0x4e, 0x48, 0x8e, 0x6c,
	0xa5, 0x55, 0x61, 0xe4, 0xa1, 0x17, 0x3f, 0xa5, 0x7e, 0x0c, 0x50, 0xa0, 0xc0, 0xbe, 0x14, 0xea,
	0x7b, 0xbb, 0xe8, 0xb8, 0x80, 0x10, 0x74, 0x81, 0xa0, 0x4f, 0x06, 0xda, 0xa2, 0x41, 0x9f, 0x12,
	0xed, 0x4b, 0x36, 0xdd, 0x16, 0x8b, 0xed, 0x16, 0x30, 0xf2, 0x54, 0x9c, 0x43, 0x72, 0x86, 0x43,
	0x8d, 0x26, 0x4a, 0xbc, 0xbb, 0xad, 0x77, 0xe7, 0xc5, 0x18, 0x9e, 0xff, 0x7a, 0x6e, 0xff, 0xff,
	0xfd, 0x3f, 0x69, 0xc1, 0x33, 0x5b, 0xd8, 0x4a, 0xa8, 0xc6, 0x8c, 0x25, 0x6f, 0xe2, 0x92, 0x34,
	0xb3, 0xa5, 0x9a, 0x76, 0x45, 0xd2, 0xc4, 0x4d, 0xc3, 0xb2, 0x67, 0xec, 0xed, 0x32, 0xb6, 0x12,
	0x65, 0xd3, 0xb0, 0x0d, 0x34, 0xe1, 0xf0, 0x25, 0x1c, 0xbe, 0x84, 0x9f, 0x6f, 0xe2, 0x7c, 0x51,
	0xb5, 0x37, 0x2b, 0xeb, 0x09, 0xd9, 0x28, 0xcd, 0x14, 0x8d, 0xa2, 0x31, 0x43, 0x45, 0xd6, 0x2b,
	0x1b, 0xf4, 0x89, 0x3e, 0xd0, 0x5f, 0x8e, 0xaa, 0x89, 0xe3, 0x45, 0xc3, 0x28, 0x6a, 0xb8, 0xce,
	0x65, 0xd9, 0x66, 0x45, 0xb6, 0x5d, 0xea, 0x89, 0x20, 0xd5, 0x56, 0x4b, 0xd8, 0xb2, 0xa5, 0x52,
	0xd9, 0x65, 0x98, 0x6a, 0xf4, 0x58, 0xaa, 0xd8, 0x9b, 0x58, 0xb7, 0x55, 0x59, 0xb2, 0x55, 0x43,
	0xf7, 0xfb, 0x3c, 0x71, 0xb2, 0x91, 0x53, 0xd6, 0x2a, 0x96, 0x8d, 0xcd, 0x06, 0x96, 0xb1, 0x46,
	0x16, 0x1d, 0x7b, 0x6e, 0x1c, 0x6b, 0x24, 0x18, 0x65, 0xa2, 0xdd, 0x6a, 0xee, 0x82, 0x85, 0xcd,
	0x2d, 0x55, 0xc6, 0x62, 0xd9, 0xd0, 0x54, 0x79, 0xbb, 0x41, 0xff, 0x78, 0x23, 0xa7, 0x9f, 0x74,
	0x3c, 0xb0, 0xf2, 0x92, 0xa6, 0x2a, 0x92, 0x8d, 0x5d, 0x2a, 0x17, 0xdc, 0x17, 0xfc, 0x40, 0x6c,
	0x74, 0x62, 0xf6, 0xf0, 0x9d, 0x13, 0x15, 0xdd, 0x12, 0x55, 0x7d, 0xc3, 0x98, 0x31, 0xd6, 0xef,
	0x61, 0x6f, 0x69, 0x27, 0x7f, 0x08, 0xe0, 0xf0, 0x75, 0x69, 0x4b, 0x5a, 0x93, 0x4d, 0xb5, 0x6c,
	0x67, 0x0d, 0x7d, 0x43, 0x2d, 0x16, 0xb6, 0xcb, 0x18, 0x9d, 0x84, 0xbd, 0xb2, 0x24, 0x6f, 0x62,
	0xb1, 0x6c, 0xe2, 0x0d, 0xf5, 0x21, 0x0b, 0x38, 0x30, 0xd5, 0x23, 0xc4, 0xe8, 0xd8, 0x2a, 0x1d,
	0x42, 0xdf, 0x81, 0x7d, 0x16, 0x15, 0x13, 0x65, 0x2a, 0xc7, 0x86, 0x38, 0x30, 0x15, 0x4b, 0x8e,
	0x25, 0x9c, 0xed, 0x4a, 0x78, 0xdb, 0x95, 0x58, 0xa3, 0x9b, 0x29, 0xf4, 0x5a, 0x3e, 0x23, 0x68,
	0x1a, 0x0e, 0xca, 0x15, 0xcb, 0x36, 0x4a, 0xa2, 0xab, 0xa4, 0x62, 0x6a, 0x6c, 0x98, 0x5a, 0x19,
	0x70, 0x08, 0x8e, 0x4f, 0xb7, 0x4d, 0x6d, 0xf2, 0x2f, 0x43, 0x70, 0x2c, 0xb7, 0xad, 0x4b, 0x25,
	0x55, 0x16, 0xf0, 0x16, 0x36, 0x2d, 0xbc, 0x6a, 0x1a, 0x0f, 0xb7, 0xa9, 0xa3, 0x6f, 0xc1, 0xe3,
	0x26, 0xb6, 0x0c, 0x6d, 0x0b, 0x8b, 0x58, 0x57, 0xca, 0x86, 0xaa, 0xdb, 0xa2, 0xe2, 0xf0, 0x4a,
	0x9a, 0xb6, 0x4d, 0x1d, 0xef, 0x16, 0x26, 0x5c, 0x9e, 0xbc, 0xcb, 0x92, 0xab, 0x73, 0xa0, 0xbb,
	0x70, 0x8c, 0x52, 0x2b, 0x64, 0x29, 0x45, 0x1d, 0xdb, 0x0f, 0x0c, 0xf3, 0xbe, 0x48, 0xf6, 0x85,
	0xce, 0xa8, 0x3f, 0x79, 0x32, 0xd1, 0x78, 0xd2, 0xef, 0x38, 0xeb, 0x7a, 0xd3, 0xe1, 0x24, 0x5e,
	0x08, 0x23, 0x75, 0x0d, 0xbe, 0x61, 0x24, 0x42, 0x74, 0x50, 0x35, 0x1b, 0xe6, 0xc2, 0x53, 0xb1,
	0xe4, 0xf1, 0x80, 0xd6, 0x5b, 0x74, 0x5f, 0x04, 0xbc, 0x41, 0x24, 0x33, 0x68, 0x77, 0x67, 0xc0,
	0xdb, 0x3f, 0x57, 0x4e, 0x18, 0x3c, 0x60, 0xe4, 0x7a, 0xa4, 0x3b, 0xc2, 0x44, 0x27, 0xff, 0x22,
	0x04, 0x07, 0xb2, 0x46, 0xa9, 0x6c, 0x62, 0xcb, 0x52, 0x0d, 0x9d, 0x9a, 0x9e, 0x85, 0xfd, 0xb2,
	0xa1, 0xdb, 0x58, 0xb7, 0x45, 0x0d, 0xeb, 0x45, 0x7b, 0x93, 0xae, 0x44, 0x5f, 0xa6, 0xe7, 0xef,
	0x7f, 0xba, 0x17, 0x8e, 0x4c, 0x87, 0xa6, 0xe2, 0x42, 0x9f, 0xcb, 0xb0, 0x42, 0xe9, 0xa8, 0x00,
	0x7b, 0x3d, 0x09, 0x77, 0xf2, 0xe1, 0xa9, 0x9e, 0xcc, 0x1c, 0xe1, 0x87, 0x4f, 0x40, 0xd7, 0x64,
	0xd4, 0x0c, 0x4f, 0x3d, 0x0a, 0x91, 0xc7, 0x9e, 0x27, 0xa0, 0x73, 0x32, 0x62, 0x86, 0x38, 0x40,
	0x9e, 0xa2, 0x4f, 0x40, 0x88, 0x49, 0x7a, 0xbf, 0x58, 0x20, 0xc4, 0x5c, 0x35, 0xd4, 0x8f, 0x14,
	0x1c, 0x55, 0x54, 0x4b, 0x5a, 0xd7, 0xb0, 0x68, 0xe8, 0x22, 0xb6, 0xa5, 0xa2, 0xb8, 0x89, 0x25,
	0x05, 0x9b, 0x74, 0xb3, 0xbb, 0x85, 0x21, 0x97, 0x7a, 0x4b, 0xcf, 0xdb, 0x52, 0x71, 0x89, 0x92,
	0x50, 0x1a, 0xbe, 0x62, 0xe2, 0x92, 0xb1, 0x85, 0x45, 0x49, 0x96, 0x71, 0xd9, 0x16, 0xb1, 0x2e,
	0x1b, 0x8a, 0xaa, 0xd7, 0x64, 0x23, 0xde, 0xae, 0x12, 0xa6, 0x34, 0xe5, 0xc9, 0xbb, 0x2c, 0x8e,
	0x8a, 0xc9, 0xbf, 0x0b, 0xc1, 0x31, 0x72, 0xb2, 0xdd, 0x43, 0xb7, 0x29, 0x69, 0x64, 0x19, 0x30,
	0xf5, 0x69, 0x11, 0x0e, 0x61, 0x9d, 0xba, 0x74, 0xcf, 0x12, 0x65, 0x8f, 0xe4, 0x1c, 0x95, 0x4c,
	0xcf, 0xa7, 0x3b, 0xe0, 0x8b, 0x2a, 0x00, 0x2c, 0x10, 0x06, 0x1d, 0xae, 0xeb, 0x56, 0x4d, 0x1c,
	0x5d, 0x81, 0x03, 0xf7, 0x2c, 0xef, 0xc8, 0x2a, 0x58, 0x93, 0xb6, 0xe9, 0x21, 0xe9, 0xcb, 0x8c,
	0xfd, 0x7b, 0x15, 0x44, 0x16, 0x66, 0x67, 0x67, 0x9f, 0x57, 0x41, 0x07, 0x59, 0x8c, 0xce, 0xe9,
	0x08, 0xfb, 0xd9, 0xbf, 0x84, 0x85, 0xbe, 0x7b, 0x96, 0x73, 0x92, 0x73, 0x84, 0x9b, 0xdc, 0x1a,
	0xd9, 0x30, 0xee, 0xab, 0x58, 0xc4, 0x0f, 0xcb, 0xaa, 0xb9, 0x4d, 0x97, 0xc1, 0x15, 0x4f, 0x5d,
	0x68, 0x14, 0x7f, 0xf4, 0xc3, 0xa8, 0xd0, 0xeb, 0x70, 0xe7, 0x29, 0x33, 0x4a, 0xc2, 0x98, 0x7b,
	0x6b, 0xca, 0x52, 0x11, 0xd3, 0x65, 0xe8, 0xc9, 0x0c, 0x3e, 0xaf, 0x82, 0x30, 0x91, 0xe9, 0x36,
	0x3b, 0xd9, 0x47, 0x6f, 0x7d, 0x08, 0x80, 0x00, 0x1d, 0xae, 0x55, 0xa9, 0x88, 0x5f, 0x4f, 0x7c,
	0x5c, 0x05, 0xd3, 0x70, 0x0a, 0x9e, 0xa8, 0x2f, 0x07, 0x57, 0x9b, 0x10, 0xb7, 0x2a, 0x99, 0x52,
	0x09, 0xdb, 0xd8, 0xb4, 0x50, 0x34, 0xc9, 0xa7, 0xf8, 0xf9, 0xc9, 0xe7, 0x00, 0x0e, 0x67, 0xa5,
	0xb2, 0x2d, 0x6f, 0x4a, 0x8d, 0xcb, 0x96, 0x85, 0xac, 0xbb, 0x6c, 0xb2, 0x43, 0x6e, 0xb5, 0x76,
	0xa3, 0x0e, 0x6b, 0x50, 0xd1, 0xc1, 0xf9, 0x87, 0x5e, 0x60, 0xfe, 0xe1, 0xa3, 0xcc, 0xff, 0xb5,
	0x8f, 0xab, 0xe0, 0x34, 0x3c, 0x05, 0x8f, 0xbb, 0xbe, 0x34, 0x9f, 0x7c, 0x38, 0xc9, 0xa7, 0x26,
	0xff, 0x18, 0x8e, 0x17, 0x70, 0xa9, 0x6c, 0x98, 0x92, 0xb9, 0x7d, 0xdb, 0xc2, 0x66, 0x46, 0x33,
	0xe4, 0xfb, 0xaa, 0xee, 0x84, 0xc4, 0x80, 0x6d, 0x70, 0x14, 0xdb, 0xe7, 0x3f, 0xae, 0x82, 0xd7,
	0xe0, 0x59, 0x38, 0x59, 0x53, 0xcb, 0x11, 0xbd, 0x9c, 0xa7, 0xd8, 0xef, 0x01, 0x98, 0x9b, 0xfc,
	0x93, 0x10, 0x64, 0xd2, 0x15, 0xdb, 0xc8, 0x62, 0xd3, 0x5e, 0xd6, 0x37, 0x0c, 0x6a, 0xf7, 0x0e,
	0x1c, 0x90, 0x2a, 0xb6, 0x21, 0xca, 0xd8, 0xb4, 0x45, 0xcb, 0x96, 0x6c, 0xc7, 0x76, 0x7f, 0x32,
	0x91, 0x38, 0x3c, 0x03, 0x27, 0x88, 0x0a, 0x75, 0xc3, 0xcd, 0x81, 0x6b, 0x44, 0x4a, 0xe8, 0x93,
	0x5c, 0xd5, 0xf4, 0x11, 0xe5, 0x20, 0x53, 0xd7, 0xeb, 0xdb, 0x8c, 0x58, 0x72, 0xe2, 0x40, 0x08,
	0x2f, 0x78, 0x19, 0x57, 0xe8, 0xf7, 0x94, 0xb8, 0x3b, 0x32, 0x0d, 0x07, 0x7d, 0xde, 0x55, 0x68,
	0x10, 0xf3, 0xe2, 0x78, 0xcd, 0x9e, 0x33, 0x8c, 0xa6, 0xfc, 0x16, 0x55, 0xcb, 0xaa, 0xb8, 0x37,
	0xb9, 0xa7, 0xae, 0x75, 0x99, 0x8e, 0x4e, 0xfe, 0x4d, 0x04, 0x8e, 0xa4, 0x1b, 0xd2, 0x78, 0x0e,
	0xdb, 0x92, 0xaa, 0x59, 0xe8, 0x1d, 0x18, 0x23, 0xf9, 0xdd, 0xcb, 0x39, 0xe0, 0x08, 0xb1, 0xf4,
	0xd8, 0xee, 0x4e, 0x7f, 0x23, 0x26, 0xa8, 0x85, 0x2d, 0x20, 0x40, 0x42, 0x71, 0x73, 0xd2, 0x77,
	0xe1, 0x68, 0xc5, 0xc2, 0x22, 0xd5, 0xef, 0xa4, 0x49, 0xcf, 0x4c, 0x98, 0xae, 0xcb, 0x70, 0xc0,
	0x4c, 0xbe, 0x54, 0xb6, 0xb7, 0x97, 0x3a, 0x84, 0xa1, 0x8a, 0x85, 0x89, 0xb7, 0x8e, 0x59, 0x57,
	0xd9, 0xef, 0xd5, 0x0e, 0x7a, 0x99, 0xec, 0xb1, 0x45, 0x67, 0x1a, 0x4b, 0x4e, 0x07, 0x74, 0x34,
	0x3a, 0x96, 0xc8, 0x52, 0x11, 0x7a, 0x2a, 0xac, 0xa5, 0x0e, 0xef, 0xf4, 0x3b, 0xcf, 0xe8, 0x2a,
	0xec, 0x35, 0xb1, 0xa2, 0x9a, 0xc4, 0x31, 0x92, 0x2e, 0x3b, 0xe9, 0x11, 0x3c, 0xf9, 0xbc, 0x0a,
	0x68, 0x58, 0x8e, 0x9a, 0x61, 0xf6, 0x11, 0x0d, 0xc9, 0x11, 0x33, 0xc4, 0x00, 0x77, 0xe8, 0x43,
	0x00, 0x96, 0x80, 0x10, 0xf3, 0x04, 0x6f, 0x9b, 0x1a, 0x4a, 0x43, 0xa6, 0xa6, 0xc7, 0xcd, 0x95,
	0x6c, 0x57, 0x8b, 0x19, 0x02, 0x61, 0xc0, 0xe3, 0x77, 0x13, 0xa7, 0x1b, 0x54, 0x46, 0x60, 0x7f,
	0xe3, 0x2e, 0xa1, 0xf0, 0x1c, 0x9f, 0x84, 0x83, 0xb0, 0x57, 0x70, 0xf9, 0xb9, 0xdb, 0xc2, 0x0a,
	0x02, 0x0b, 0x99, 0xb3, 0x70, 0xb8, 0x61, 0x35, 0x44, 0x79, 0xd3, 0x50, 0x65, 0x8c, 0x06, 0xf6,
	0xaa, 0x20, 0xfc, 0xac, 0x0a, 0x42, 0xfb, 0x55, 0x10, 0x4e, 0xf1, 0xf3, 0x99, 0x33, 0x70, 0xc8,
	0x3f, 0x47, 0x3f, 0x5f, 0xe7, 0xb3, 0x2a, 0x88, 0x12, 0xbe, 0x0b, 0xfc, 0xc5, 0xeb, 0x91, 0xee,
	0x10, 0x13, 0xbe, 0x1e, 0xe9, 0x8e, 0x32, 0x9d, 0x93, 0xbf, 0x8c, 0xc2, 0xe1, 0x55, 0x8a, 0xb4,
	0x32, 0x92, 0x85, 0x95, 0x7a, 0xb0, 0xf9, 0x03, 0xd8, 0x7b, 0x20, 0xc2, 0xc7, 0x92, 0xa9, 0x56,
	0xf7, 0xe6, 0x90, 0x9c, 0x91, 0x89, 0x3c, 0xab, 0x02, 0x20, 0xc4, 0xee, 0xf9, 0x72, 0x81, 0x0c,
	0x07, 0x0f, 0x06, 0x42, 0xe7, 0x06, 0xcd, 0xb6, 0xbc, 0x9a, 0x4d, 0x82, 0xab, 0xab, 0x9f, 0x91,
	0x83, 0xf1, 0xd2, 0x82, 0x63, 0xb6, 0x17, 0x3b, 0xc4, 0x8a, 0x85, 0x4d, 0x71, 0xdd, 0x8d, 0x1d,
	0xee, 0xa1, 0x5c, 0x68, 0x65, 0xea, 0xd0, 0x68, 0xe6, 0xda, 0x1b, 0xb1, 0x9b, 0x31, 0xa0, 0x45,
	0xd8, 0xab, 0x1b, 0xbe, 0x49, 0x45, 0x5b, 0x1e, 0xff, 0x98, 0x6e, 0xd4, 0xfd, 0x5d, 0x83, 0x13,
	0x92, 0xf6, 0x40, 0xda, 0xb6, 0xc4, 0x66, 0x29, 0xb6, 0xb3, 0xa5, 0xa2, 0x31, 0x47, 0x32, 0x7f,
	0x20, 0xeb, 0x7e, 0x1f, 0x9e, 0x68, 0x54, 0x7a, 0x70, 0xdd, 0xbb, 0x5a, 0x6a, 0x3e, 0xee, 0xd7,
	0x7c, 0x20, 0x27, 0xfd, 0x29, 0x80, 0xe3, 0x25, 0x49, 0x53, 0x65, 0xd5, 0xa8, 0x58, 0xce, 0x22,
	0x97, 0x54, 0x5b, 0x2d, 0xd2, 0x23, 0xcd, 0x76, 0x1f, 0x21, 0xc4, 0x9c, 0xdf, 0xdd, 0x39, 0x5c,
	0x83, 0x9b, 0x14, 0x7d, 0x41, 0x67, 0xac, 0xc6, 0x4b, 0x96, 0xfd, 0x46, 0x8d, 0x33, 0x73, 0x1a,
	0x32, 0xb5, 0x29, 0x79, 0x47, 0x7f, 0x70, 0xaf, 0x0a, 0xa2, 0xcf, 0xaa, 0x20, 0xb2, 0x5f, 0x05,
	0xd1, 0x05, 0xde, 0x39, 0xfc, 0x04, 0xf6, 0xfd, 0xe3, 0xab, 0xb0, 0xff, 0x9a, 0x66, 0xac, 0x4b,
	0xda, 0x5a, 0x19, 0xcb, 0x34, 0x57, 0x5c, 0x86, 0x5d, 0x8a, 0x51, 0x92, 0x54, 0xdd, 0x72, 0xe1,
	0xdb, 0x29, 0x3f, 0x7c, 0xfb, 0xb3, 0x50, 0xdd, 0x09, 0xc6, 0x07, 0xd8, 0x3c, 0x19, 0xb4, 0x0c,
	0x3b, 0x4d, 0xa3, 0x62, 0x63, 0xeb, 0x48, 0x18, 0x75, 0x68, 0x77, 0x27, 0x4a, 0xd9, 0x69, 0xbe,
	0x7e, 0x02, 0xc2, 0xcc, 0x23, 0x20, 0xb8, 0x0a, 0xd0, 0x5d, 0x38, 0x70, 0xaf, 0x76, 0x95, 0x68,
	0xe5, 0xe1, 0x06, 0xc0, 0xd9, 0xaf, 0xbb, 0x7d, 0xc1, 0x5a, 0x44, 0xe8, 0xaf, 0x2b, 0x22, 0x49,
	0x11, 0xbd, 0x0b, 0x91, 0xa4, 0x6c, 0x91, 0xfc, 0x66, 0xb9, 0x15, 0x96, 0x8a, 0x2d, 0x36, 0x7a,
	0x34, 0x8f, 0x99, 0x80, 0xe8, 0xb6, 0x30, 0x58, 0x1b, 0x59, 0x75, 0x75, 0xa1, 0x77, 0xe1, 0xa8,
	0x89, 0xdf, 0xab, 0x60, 0xcb, 0x76, 0x01, 0xa7, 0x25, 0xda, 0x86, 0x28, 0x29, 0x0a, 0xdb, 0x49,
	0xad, 0x9c, 0x0b, 0x58, 0x71, 0x30, 0xe7, 0x0d, 0x49, 0x57, 0xcb, 0x15, 0x8d, 0xee, 0xe4, 0x2d,
	0x5a, 0x98, 0x51, 0xf7, 0x87, 0x5c, 0x55, 0x0e, 0x93, 0x55, 0x30, 0xd2, 0x8a, 0x82, 0xd6, 0x69,
	0xd1, 0x51, 0x36, 0x74, 0x0b, 0x07, 0x4d, 0x74, 0x7d, 0x73, 0x13, 0xc3, 0x9e, 0xae, 0x06, 0x1b,
	0x6f, 0xc0, 0x89, 0x66, 0x36, 0x1c, 0xd0, 0x4c, 0x8f, 0x75, 0x8f, 0x30, 0x76, 0x40, 0x52, 0xa0,
	0x64, 0x74, 0x03, 0xf6, 0xdb, 0x9a, 0xe5, 0x44, 0x6b, 0x8a, 0x4f, 0xd8, 0x1e, 0xba, 0x7d, 0x67,
	0x02, 0x7e, 0xe5, 0x8c, 0x07, 0xba, 0x65, 0x9b, 0x58, 0x2a, 0x15, 0x34, 0xcb, 0xc9, 0x53, 0xd4,
	0xa5, 0x3e, 0xdb, 0x7d, 0x74, 0xc0, 0xcd, 0x15, 0x18, 0xa1, 0x45, 0x05, 0xa4, 0xc8, 0xe5, 0x5c,
	0xab, 0x33, 0xe0, 0x96, 0x57, 0x4b, 0x86, 0x45, 0x2b, 0x08, 0x81, 0x0a, 0xa2, 0x1c, 0xec, 0x5b,
	0xaf, 0x6c, 0x6c, 0x60, 0xd3, 0xdd, 0x36, 0xb6, 0x97, 0xba, 0x73, 0x22, 0xa0, 0x29, 0x43, 0x79,
	0x7c, 0x87, 0xa7, 0xd7, 0x91, 0x72, 0xd2, 0x03, 0x7a, 0x1d, 0xc6, 0x64, 0xc3, 0xb4, 0x3c, 0x1d,
	0x7d, 0x54, 0xc7, 0x78, 0x40, 0x47, 0xd6, 0x30, 0x2d, 0x87, 0x5f, 0x80, 0x72, 0xed, 0x37, 0x7a,
	0x03, 0x46, 0xcb, 0xa4, 0xec, 0x64, 0x07, 0xe8, 0x1c, 0x4e, 0xb7, 0x9a, 0x43, 0xad, 0x3e, 0x15,
	0x1c, 0x19, 0x74, 0x01, 0x86, 0xef, 0x3d, 0xb0, 0x59, 0xe6, 0x08, 0x87, 0xb4, 0x73, 0x77, 0x87,
	0xf0, 0x0a, 0xe4, 0x1f, 0xb4, 0x08, 0xc7, 0x9b, 0x9c, 0x44, 0x77, 0x0b, 0x07, 0xe9, 0x16, 0x8e,
	0x06, 0xcf, 0x97, 0xbb, 0x83, 0x73, 0xb0, 0xfb, 0x81, 0xb4, 0xe1, 0xd4, 0x72, 0x88, 0x4e, 0x74,
	0x34, 0x60, 0xf7, 0x6d, 0x89, 0x5a, 0x14, 0xba, 0x1e, 0x38, 0x3f, 0x50, 0x11, 0x8e, 0xb8, 0x78,
	0x40, 0x34, 0x9d, 0x42, 0x5b, 0x74, 0xa6, 0x3c, 0xf4, 0xf5, 0x89, 0xf3, 0x90, 0x02, 0x5d, 0x18,
	0x52, 0x0e, 0x12, 0xd0, 0x49, 0xd8, 0x2b, 0x29, 0x8a, 0xa8, 0x19, 0x0e, 0x6c, 0x60, 0x87, 0x69,
	0x3d, 0x17, 0x93, 0x14, 0x65, 0xc5, 0x1d, 0x42, 0xef, 0x40, 0x24, 0xd7, 0x6b, 0x5a, 0x0f, 0x44,
	0x8d, 0x50, 0x47, 0x5a, 0x9e, 0x9f, 0x40, 0x25, 0x2c, 0x0c, 0xfa, 0xd4, 0xb8, 0x40, 0xea, 0xa3,
	0x08, 0xec, 0x73, 0xb1, 0x3c, 0x36, 0x4d, 0xc3, 0xb4, 0xd8, 0x51, 0xba, 0x31, 0xdf, 0x69, 0xa5,
	0xb7, 0x31, 0xd4, 0x26, 0xb2, 0x54, 0x3e, 0x4f, 0xc5, 0xf3, 0xba, 0x6d, 0x6e, 0x67, 0xfe, 0x96,
	0x00, 0x19, 0x1a, 0x61, 0x7b, 0x3f, 0x02, 0x3d, 0x93, 0x5d, 0xd3, 0x51, 0xf6, 0xdf, 0x22, 0x53,
	0xb4, 0x3a, 0x88, 0x7e, 0xe4, 0x85, 0xdc, 0xfe, 0x8f, 0x40, 0x6c, 0xba, 0xc7, 0xec, 0x62, 0x1f,
	0x3d, 0x02, 0x1f, 0x02, 0xb0, 0xff, 0xd9, 0x8f, 0xc3, 0x3f, 0x06, 0x8f, 0x9f, 0x82, 0x3d, 0x80,
	0xfe, 0x01, 0x7c, 0x59, 0x05, 0x3f, 0x02, 0x4b, 0x85, 0xc2, 0x2a, 0x47, 0xf5, 0x72, 0xb2, 0xa1,
	0x60, 0x6e, 0x4b, 0xd2, 0x2a, 0x98, 0x4b, 0xf1, 0xf3, 0xfc, 0x02, 0x67, 0x98, 0xdc, 0x3a, 0xb6,
	0x1f, 0x60, 0xac, 0x73, 0xa9, 0xd9, 0x59, 0x4e, 0xd2, 0x15, 0x6e, 0x61, 0x71, 0x31, 0xc1, 0xe5,
	0x8b, 0x09, 0xee, 0x0e, 0xe5, 0x9b, 0xe7, 0x2e, 0x73, 0xf3, 0x0f, 0x1f, 0x12, 0x4e, 0x49, 0xd3,
	0xb8, 0xf9, 0xd9, 0xd9, 0xf3, 0xf3, 0x8b, 0x8b, 0x1c, 0xae, 0xe9, 0xb3, 0x78, 0x6e, 0x81, 0xbb,
	0xcc, 0x2d, 0xd4, 0x79, 0x16, 0x66, 0x67, 0xcf, 0x2f, 0x34, 0xf2, 0x24, 0xb8, 0xbb, 0x46, 0x85,
	0x93, 0x25, 0x9d, 0x93, 0x34, 0xcb, 0xe0, 0xac, 0x32, 0x96, 0xd5, 0x8d, 0x6d, 0x4e, 0xd2, 0x39,
	0xfc, 0x50, 0x92, 0x6d, 0x1f, 0x2b, 0xa7, 0xa9, 0xf7, 0x31, 0x37, 0x3f, 0x3b, 0x9f, 0x20, 0x53,
	0x19, 0x7e, 0xfc, 0x14, 0x30, 0xa8, 0x7f, 0xbf, 0x0a, 0xa0, 0x33, 0x83, 0xac, 0xa1, 0x60, 0x42,
	0x80, 0x8f, 0x9f, 0x82, 0x4e, 0x14, 0xf9, 0xa4, 0x0a, 0x3a, 0xc8, 0x63, 0xe7, 0xe3, 0xa7, 0x20,
	0xd4, 0x4d, 0x67, 0x9f, 0x7e, 0xfc, 0x14, 0x5c, 0x9e, 0x78, 0xe3, 0xcb, 0x2a, 0xb8, 0xb8, 0x66,
	0x9b, 0xa4, 0x26, 0x32, 0x31, 0xd9, 0x2e, 0x02, 0x2a, 0xf5, 0xa2, 0x6b, 0xc9, 0x8b, 0x52, 0x3c,
	0x57, 0xb1, 0x2a, 0x92, 0xa6, 0x6d, 0x73, 0x12, 0xb7, 0x69, 0x97, 0x34, 0xea, 0x02, 0xd1, 0xf2,
	0xca, 0xe3, 0xa7, 0x60, 0x7c, 0x62, 0x6c, 0xbf, 0x0a, 0x86, 0x1c, 0xc3, 0x82, 0x2b, 0xc1, 0x65,
	0x0c, 0x65, 0xbb, 0xe6, 0xc1, 0x04, 0xf1, 0x20, 0xe2, 0x7b, 0xdc, 0x23, 0x28, 0xa8, 0x57, 0xf6,
	0xed, 0x25, 0x7a, 0x0b, 0x8e, 0x95, 0xa4, 0x87, 0x62, 0xe3, 0xb5, 0x13, 0x2d, 0xf5, 0x7d, 0xcc,
	0x8e, 0x35, 0xb4, 0x50, 0xd8, 0x77, 0x85, 0xe1, 0x92, 0xf4, 0x50, 0xf0, 0x5f, 0xbf, 0x35, 0xf5,
	0x7d, 0x8c, 0x7e, 0x10, 0x80, 0x9d, 0xec, 0x0b, 0xc2, 0x4e, 0x82, 0xb1, 0xfc, 0xc0, 0xd3, 0x80,
	0x43, 0x14, 0x62, 0xa8, 0x0a, 0x59, 0x24, 0xaf, 0xc8, 0x63, 0xc7, 0x8f, 0x10, 0x5c, 0xb8, 0xdd,
	0x9d, 0x66, 0xb2, 0x3e, 0x6c, 0x82, 0x08, 0x79, 0xb9, 0x81, 0x8a, 0xde, 0x81, 0xbd, 0xa6, 0x64,
	0x63, 0x51, 0x53, 0x4b, 0xaa, 0x8d, 0x4d, 0x76, 0xe2, 0x08, 0x96, 0xc6, 0x77, 0x77, 0x1a, 0x84,
	0x7c, 0x26, 0x62, 0x64, 0x7c, 0xc5, 0x19, 0x46, 0x7f, 0x08, 0x5f, 0xf1, 0xb3, 0x89, 0x92, 0xa6,
	0x19, 0x0f, 0xb0, 0xe2, 0x36, 0x1e, 0xb1, 0xc5, 0x1e, 0x3b, 0x82, 0xb1, 0x89, 0xdd, 0x9d, 0x3e,
	0xb5, 0xec, 0xca, 0x88, 0x16, 0xb6, 0x6b, 0xd6, 0x22, 0xc2, 0x84, 0xcf, 0x5a, 0xda, 0x51, 0xbe,
	0xea, 0xea, 0x46, 0xd7, 0x48, 0x45, 0x65, 0x9b, 0xdb, 0x5e, 0x42, 0x38, 0x4e, 0x77, 0x2a, 0x1e,
	0xb0, 0x25, 0x10, 0x16, 0x27, 0x0b, 0xf8, 0x6b, 0x01, 0xb3, 0x3e, 0x8c, 0x70, 0xb3, 0x5a, 0xe0,
	0x95, 0x17, 0xa9, 0x05, 0x96, 0x3a, 0x9a, 0x54, 0x03, 0x41, 0x60, 0x7e, 0xe2, 0xe8, 0xc0, 0xfc,
	0x2c, 0xec, 0x55, 0x15, 0x0d, 0x8b, 0xb6, 0x5a, 0xc2, 0x46, 0xc5, 0x66, 0x39, 0x7a, 0x96, 0x23,
	0xcf, 0xab, 0xa0, 0x43, 0x88, 0x11, 0x4a, 0xc1, 0x21, 0xa0, 0xcb, 0xf0, 0x98, 0xd7, 0xb1, 0x53,
	0xf0, 0x86, 0x54, 0xd1, 0x6c, 0x27, 0x48, 0xd2, 0xb6, 0x87, 0xc5, 0x9e, 0xa4, 0xa1, 0x9a, 0x75,
	0x59, 0x72, 0x0e, 0x07, 0xbd, 0x3a, 0xab, 0x84, 0x8e, 0x12, 0x70, 0xa8, 0x26, 0xae, 0x5b, 0xa2,
	0xdb, 0x78, 0x65, 0x27, 0xa9, 0xd8, 0xa0, 0x27, 0xa6, 0x5b, 0x82, 0x43, 0x40, 0x7f, 0x74, 0x78,
	0x81, 0x73, 0xea, 0x45, 0x0a, 0x9c, 0xbe, 0x4f, 0x77, 0x00, 0x59, 0x47, 0xb7, 0x1f, 0x75, 0x48,
	0xa5, 0xf3, 0xe7, 0x2d, 0xa1, 0xff, 0xab, 0x47, 0x38, 0x7a, 0x33, 0xdf, 0x08, 0xfa, 0xb3, 0x87,
	0x83, 0x7f, 0x74, 0x0d, 0x12, 0xd0, 0x24, 0xaa, 0xba, 0x8d, 0x4d, 0x19, 0x97, 0x6d, 0xf6, 0x34,
	0x9d, 0xff, 0x64, 0xc0, 0x7c, 0x41, 0xb3, 0x96, 0x3d, 0x16, 0x2f, 0xc7, 0xf5, 0xda, 0xbe, 0x41,
	0x94, 0x85, 0x83, 0xba, 0x21, 0x36, 0x76, 0x16, 0xd8, 0xb3, 0x2d, 0x0b, 0x7c, 0x46, 0x37, 0x02,
	0x95, 0xbc, 0x04, 0x03, 0x4d, 0x13, 0x76, 0x8a, 0x6a, 0x98, 0x6b, 0xb5, 0x1d, 0x4d, 0x7b, 0x36,
	0xee, 0x79, 0x06, 0x42, 0x40, 0x21, 0x7a, 0x0f, 0x8e, 0x3a, 0xf7, 0x4e, 0x5c, 0x27, 0x75, 0xbb,
	0xef, 0x5c, 0xbf, 0xf6, 0xf5, 0x37, 0xa7, 0x59, 0xc1, 0x9f, 0xe9, 0x72, 0x17, 0x7c, 0xa9, 0x43,
	0x18, 0x2e, 0x37, 0xeb, 0x08, 0x64, 0x61, 0xbf, 0x77, 0xa8, 0xdd, 0x56, 0xf2, 0xb9, 0xc3, 0xd7,
	0x25, 0x43, 0xd3, 0xc3, 0x52, 0x48, 0xe8, 0x73, 0x65, 0xdc, 0xf6, 0xf4, 0x1c, 0x8c, 0x59, 0xd8,
	0xdc, 0xc2, 0xa6, 0xa8, 0x4b, 0x25, 0xcc, 0xf2, 0xb4, 0x0d, 0xd3, 0xbf, 0xe7, 0x6d, 0xb4, 0x19,
	0x66, 0xff, 0xea, 0xca, 0x52, 0x48, 0x80, 0x0e, 0xd3, 0x4d, 0xa9, 0x84, 0xd1, 0x9b, 0x10, 0x49,
	0xe5, 0x32, 0xd6, 0x15, 0xd1, 0x2f, 0x79, 0xfe, 0x10, 0x49, 0xc6, 0xe1, 0x5d, 0xab, 0xcb, 0x5f,
	0x81, 0xbd, 0x65, 0xc9, 0xb2, 0x44, 0x7b, 0xd3, 0x34, 0x2a, 0xc5, 0x4d, 0x36, 0x71, 0x04, 0xaf,
	0x63, 0x44, 0xa2, 0xe0, 0x08, 0xa0, 0x39, 0x38, 0x4c, 0xae, 0xe3, 0x96, 0xa1, 0xd9, 0xd8, 0x34,
	0x25, 0xb1, 0x24, 0xe9, 0x52, 0x11, 0x2b, 0xec, 0x17, 0x5d, 0xf4, 0x62, 0x22, 0x45, 0xb7, 0xee,
	0xb8, 0xb4, 0x1b, 0x0e, 0x09, 0x7d, 0x0f, 0xc6, 0x88, 0x88, 0x57, 0x50, 0xfe, 0xb4, 0xeb, 0x08,
	0xb7, 0x81, 0xdd, 0xdd, 0x81, 0x75, 0xa1, 0x7a, 0x61, 0x18, 0x12, 0xc8, 0x70, 0xce, 0xad, 0x33,
	0x8f, 0xc3, 0x9e, 0x5a, 0x23, 0x90, 0xfd, 0xd2, 0xf1, 0xa0, 0xdb, 0x6b, 0x01, 0xa2, 0x2c, 0x8c,
	0x3a, 0x6d, 0xce, 0xff, 0xe8, 0xa2, 0x48, 0x9b, 0x3f, 0x62, 0xb5, 0xe0, 0x74, 0x39, 0x1d, 0x59,
	0x62, 0x82, 0xbe, 0xf7, 0xa2, 0xeb, 0xfc, 0xb3, 0x2e, 0xda, 0x65, 0xec, 0x26, 0x23, 0x74, 0x39,
	0x97, 0x60, 0xb7, 0xf7, 0x42, 0x8c, 0xfd, 0x4f, 0x67, 0x5e, 0xad, 0xac, 0xd4, 0xde, 0x9e, 0x25,
	0x72, 0xba, 0x45, 0x6a, 0x50, 0xa1, 0x4b, 0x71, 0x7e, 0xa0, 0xdf, 0x3f, 0xd8, 0x9d, 0xfd, 0xaf,
	0xae, 0x6f, 0xd3, 0x9e, 0xcd, 0x90, 0x4a, 0x3c, 0xd0, 0xa2, 0x5d, 0xa3, 0x77, 0xd0, 0x6b, 0x98,
	0x12, 0x67, 0x7f, 0xe1, 0xf4, 0x39, 0xf8, 0xaf, 0xb9, 0x84, 0x0d, 0x1d, 0x64, 0xa1, 0x57, 0xf2,
	0x8d, 0xa0, 0xab, 0xb0, 0x97, 0x46, 0x29, 0x6f, 0x5f, 0xff, 0xbb, 0x8b, 0x76, 0x0a, 0x26, 0x0f,
	0x79, 0xb3, 0xe3, 0x6f, 0x14, 0xc4, 0x88, 0xa0, 0xb7, 0x89, 0x15, 0x38, 0xd4, 0xf8, 0x9a, 0x93,
	0xe4, 0x5d, 0x8b, 0xfd, 0xe5, 0x51, 0x8e, 0xc9, 0x99, 0xdd, 0x1d, 0x74, 0x50, 0x38, 0x18, 0x2d,
	0x23, 0xc2, 0xa0, 0xcb, 0xe4, 0x5c, 0xf6, 0x35, 0x6c, 0x5b, 0xa8, 0x04, 0x47, 0x35, 0x43, 0x52,
	0xd6, 0x25, 0x4d, 0xd2, 0x65, 0x8a, 0x17, 0x8a, 0x86, 0xa9, 0xda, 0x9b, 0x25, 0xf6, 0x7f, 0x9a,
	0x1f, 0x17, 0xf7, 0x25, 0x6f, 0x62, 0xc5, 0x27, 0x95, 0xf6, 0x84, 0x6a, 0x11, 0x43, 0x18, 0xd1,
	0x9a, 0xd1, 0x27, 0xae, 0xc0, 0xc1, 0x03, 0x48, 0x1f, 0x31, 0x30, 0x7c, 0x1f, 0x3b, 0xef, 0x16,
	0xfb, 0x04, 0xf2, 0x13, 0x0d, 0xc3, 0x28, 0xc5, 0xe9, 0xb4, 0xff, 0xd7, 0x23, 0x38, 0x0f, 0xaf,
	0x87, 0x2e, 0x81, 0xcc, 0x19, 0xd8, 0x5f, 0x6f, 0xe9, 0xd0, 0x52, 0x76, 0x78, 0xaf, 0x0a, 0x4e,
	0x3c, 0xab, 0x82, 0xf8, 0x7e, 0x15, 0x74, 0xa7, 0xe6, 0xf8, 0xe4, 0x3c, 0x9f, 0x5c, 0xcc, 0x4c,
	0xc3, 0x91, 0xc6, 0xf0, 0xe8, 0xef, 0xff, 0x9c, 0x7d, 0x56, 0x05, 0x67, 0xf6, 0xab, 0x20, 0x9a,
	0x5a, 0xe4, 0xe7, 0x67, 0x33, 0x29, 0x38, 0xec, 0x86, 0x11, 0x17, 0x9d, 0xba, 0xac, 0xc7, 0xf6,
	0xaa, 0xe0, 0xdc, 0x27, 0x55, 0x40, 0x12, 0xdf, 0xf4, 0x7e, 0x15, 0xc4, 0xe6, 0x53, 0xfc, 0xfc,
	0x3c, 0x3f, 0xbf, 0xc0, 0xcf, 0x5f, 0xb8, 0x1e, 0xe9, 0x06, 0x4c, 0xe8, 0x7a, 0xa4, 0x3b, 0xce,
	0x9c, 0xb8, 0x1e, 0xe9, 0x3e, 0xc3, 0x9c, 0xbd, 0x1e, 0xe9, 0x9e, 0x66, 0xce, 0x4d, 0xfe, 0xf3,
	0x28, 0xec, 0xcf, 0x9a, 0x58, 0xb2, 0x71, 0xad, 0x8d, 0xc4, 0x06, 0xda, 0x48, 0xf5, 0x0e, 0xd1,
	0x9b, 0xdf, 0xa8, 0x43, 0xd4, 0xed, 0x75, 0x88, 0x6a, 0x6d, 0xa1, 0x76, 0xef, 0xe6, 0xe5, 0xeb,
	0xdd, 0xbc, 0xe4, 0xad, 0x97, 0x76, 0x0b, 0xe5, 0xd7, 0xd1, 0x42, 0x91, 0xbe, 0x45, 0x07, 0xa5,
	0x31, 0xca, 0x1c, 0xec, 0xa0, 0xbc, 0x74, 0x85, 0x38, 0xfe, 0xf6, 0x85, 0xf8, 0x68, 0xf3, 0x42,
	0xbc, 0x69, 0xf9, 0xbd, 0xfa, 0x2d, 0xca, 0xef, 0x81, 0x40, 0xf9, 0xdd, 0x58, 0x74, 0xbf, 0xf7,
	0xab, 0x28, 0xba, 0x99, 0x60, 0xd1, 0xdd, 0x2e, 0xb5, 0xff, 0x7f, 0x97, 0xda, 0xd6, 0xaf, 0xa9,
	0xd4, 0x6e, 0xf9, 0x2e, 0xf1, 0x65, 0x29, 0x46, 0x7f, 0x57, 0x2b, 0xc3, 0x17, 0x46, 0xb8, 0xaf,
	0x7f, 0xff, 0x9f, 0xde, 0x0c, 0xbc, 0x87, 0xfc, 0xc5, 0x9b, 0xcb, 0x73, 0x0b, 0x7c, 0x92, 0x4f,
	0xf1, 0x0b, 0xfc, 0x22, 0x3f, 0x77, 0x89, 0x9f, 0x5b, 0xe4, 0x53, 0x97, 0xf8, 0x0b, 0xfc, 0xdc,
	0x45, 0xfe, 0x22, 0x7f, 0x89, 0x9f, 0x4b, 0xf2, 0x73, 0x29, 0x3e, 0x39, 0xcb, 0x27, 0x2f, 0xf1,
	0xc9, 0x39, 0x3e, 0x99, 0xe4, 0x53, 0x29, 0x3e, 0x99, 0xe2, 0x53, 0xb3, 0x7c, 0x6a, 0x81, 0x4f,
	0x5e, 0xe0, 0x93, 0x17, 0xf9, 0xe4, 0x02, 0x9f, 0x4a, 0xf2, 0xa9, 0xf9, 0xcc, 0xa5, 0x03, 0x00,
	0xfa, 0x4c, 0x33, 0x00, 0xfd, 0xc1, 0x57, 0x20, 0xc0, 0x97, 0x49, 0x1e, 0x06, 0xa9, 0xc7, 0x3f,
	0xf8, 0x0a, 0x34, 0x27, 0x65, 0xe6, 0x0f, 0x81, 0xd6, 0xc7, 0x09, 0xac, 0xfe, 0xe0, 0x2b, 0xd0,
	0x94, 0xda, 0x04, 0x55, 0xff, 0xeb, 0x28, 0x1c, 0x10, 0x70, 0x59, 0x93, 0xe4, 0x36, 0xac, 0x6e,
	0xc3, 0xea, 0x36, 0xac, 0x6e, 0xc3, 0xea, 0x23, 0xc1, 0xea, 0xf5, 0xe6, 0xb0, 0xfa, 0x72, 0x2b,
	0xb5, 0x81, 0x30, 0xd3, 0xc6, 0xd5, 0x6d, 0x5c, 0xdd, 0xc6, 0xd5, 0x6d, 0x5c, 0xdd, 0xc6, 0xd5,
	0x6d, 0x5c, 0xfd, 0xdb, 0x87, 0xab, 0x7f, 0x36, 0x0e, 0x63, 0xd7, 0xb0, 0xdd, 0xc6, 0xd4, 0x6d,
	0x4c, 0xdd, 0xfe, 0xcc, 0xb0, 0x0d, 0xca, 0x7f, 0x23, 0xa0, 0xfc, 0x07, 0xcd, 0x41, 0xf9, 0x62,
	0xcb, 0xaf, 0x05, 0xeb, 0x31, 0xaa, 0x0d, 0xc8, 0xdb, 0x80, 0xbc, 0x0d, 0xc8, 0xdb, 0x80, 0xbc,
	0x0d, 0xc8, 0xff, 0x6f, 0x3f, 0x81, 0x7a, 0xa9, 0xbe, 0x2b, 0x7a, 0xfb, 0x57, 0xf5, 0x5d, 0xd1,
	0x6f, 0xe2, 0x9b, 0xa2, 0x17, 0xaf, 0x75, 0xde, 0x6d, 0x52, 0xeb, 0xac, 0xcc, 0xcd, 0xf2, 0xbf,
	0xe3, 0xe5, 0xce, 0xf4, 0x13, 0x00, 0x07, 0x02, 0x48, 0x15, 0x0d, 0xc1, 0x81, 0x3b, 0xcb, 0x42,
	0xe1, 0x76, 0x7a, 0x45, 0x5c, 0xcb, 0x0b, 0x77, 0x96, 0xb3, 0x79, 0xa6, 0x03, 0x8d, 0x42, 0xb4,
	0x54, 0x28, 0xac, 0x8a, 0x2b, 0xb7, 0xd2, 0x39, 0x31, 0x93, 0x5e, 0x49, 0xdf, 0xcc, 0xe6, 0x05,
	0x06, 0xa0, 0x01, 0x18, 0x4b, 0xaf, 0x2e, 0x8b, 0xd7, 0xd2, 0x85, 0xfc, 0xdb, 0xe9, 0xbb, 0x4c,
	0x08, 0x8d, 0xc0, 0xc1, 0x42, 0x36, 0xc8, 0x17, 0x46, 0x3d, 0x30, 0xba, 0x2a, 0xdc, 0xfa, 0xde,
	0x5d, 0x26, 0x82, 0x4e, 0xc0, 0x91, 0x95, 0x5b, 0xd9, 0xf4, 0x8a, 0xf8, 0xdd, 0x4b, 0x6b, 0xa2,
	0x5f, 0x38, 0xea, 0x7c, 0x2f, 0x3f, 0xfd, 0x1e, 0xec, 0xa9, 0xff, 0x01, 0x86, 0x7e, 0x08, 0xa9,
	0x61, 0x47, 0xba, 0x03, 0xf5, 0xc1, 0x1e, 0xa2, 0xdf, 0x79, 0x04, 0xc4, 0xaf, 0xda, 0xa3, 0xf8,
	0xf6, 0x72, 0x61, 0x49, 0x5c, 0xbb, 0xb9, 0xcc, 0x84, 0x88, 0x5f, 0x44, 0x6c, 0xcd, 0x65, 0x0c,
	0x13, 0xb9, 0xdb, 0x39, 0x4f, 0x2e, 0x42, 0x1e, 0xd7, 0x6e, 0xa4, 0xdd, 0xc7, 0xe8, 0xf4, 0x17,
	0x00, 0x32, 0xc1, 0x2b, 0x49, 0x74, 0x7b, 0x0b, 0xb1, 0x74, 0x6b, 0xad, 0x20, 0x0a, 0xf9, 0x74,
	0x8e, 0xb8, 0x70, 0x1a, 0x9e, 0x6c, 0x18, 0x5f, 0xcd, 0xdf, 0xcc, 0x2d, 0xdf, 0xbc, 0x26, 0xde,
	0xc9, 0x0b, 0xcb, 0x57, 0x97, 0xb3, 0xe9, 0xc2, 0xf2, 0xad, 0x9b, 0x0c, 0x40, 0xaf, 0x42, 0xae,
	0x81, 0xcd, 0x4f, 0x16, 0xaf, 0xa6, 0x97, 0x57, 0xf2, 0x39, 0x26, 0x84, 0xce, 0xc2, 0x53, 0x4d,
	0x95, 0xe5, 0x6e, 0xae, 0x89, 0xb9, 0xfc, 0x4a, 0xfe, 0x9a, 0xa3, 0x2e, 0x8c, 0x4e, 0xc2, 0x57,
	0x9a, 0x32, 0xa6, 0x45, 0x21, 0x9f, 0xbd, 0x25, 0xe4, 0x98, 0x08, 0x3a, 0x05, 0x4f, 0x34, 0xb0,
	0x10, 0x1d, 0x1e, 0x59, 0x4c, 0xe7, 0x72, 0xf9, 0x1c, 0x13, 0x9d, 0xae, 0x86, 0x20, 0x3a, 0x78,
	0x8d, 0xd1, 0x70, 0xfd, 0xbf, 0x86, 0xe7, 0x9c, 0x84, 0xa7, 0x30, 0x1d, 0x68, 0x1c, 0x8e, 0xe4,
	0xbc, 0xef, 0x2a, 0xef, 0x60, 0xb3, 0x26, 0xc3, 0x00, 0x72, 0x4c, 0xd2, 0xf5, 0x9b, 0x6f, 0xda,
	0x58, 0x61, 0x42, 0x68, 0x02, 0x8e, 0x3a, 0xcc, 0xb5, 0x24, 0xbe, 0x8a, 0x75, 0x45, 0xd5, 0x8b,
	0x4c, 0x18, 0x1d, 0x83, 0x63, 0x01, 0x9a, 0xa3, 0x11, 0x2b, 0x4c, 0xc4, 0x6f, 0xfe, 0xaa, 0xaa,
	0x4b, 0x9a, 0xfa, 0x3e, 0x66, 0xa2, 0x64, 0x07, 0xea, 0xae, 0xe2, 0x65, 0x9d, 0xfe, 0xc9, 0x12,
	0xa6, 0x93, 0x70, 0xfb, 0xc6, 0xef, 0xd0, 0xd1, 0x2e, 0xe2, 0xac, 0xa7, 0xe3, 0xa6, 0x61, 0xa7,
	0xcb, 0x65, 0x4d, 0x95, 0xc9, 0x44, 0x98, 0x6e, 0x34, 0x06, 0x87, 0x3c, 0x92, 0x50, 0x83, 0x56,
	0x0a, 0xd3, 0x43, 0x9c, 0xf2, 0x08, 0xd7, 0xb0, 0x8e, 0x4d, 0x07, 0x3c, 0x12, 0x94, 0xc4, 0x40,
	0x34, 0x08, 0xfb, 0x3c, 0x22, 0x0d, 0x3c, 0x4c, 0x2c, 0xf3, 0x04, 0x3c, 0xfb, 0x3c, 0xde, 0xf1,
	0xe9, 0xe7, 0xf1, 0x8e, 0x9f, 0x7f, 0x1e, 0x07, 0xcf, 0x3f, 0x8f, 0x83, 0x47, 0xfb, 0x71, 0xf0,
	0xd7, 0xfb, 0x71, 0xf0, 0xa3, 0xfd, 0x38, 0xd8, 0xdb, 0x8f, 0x83, 0x4f, 0xf6, 0xe3, 0xe0, 0xd9,
	0x7e, 0x1c, 0x7c, 0xba, 0x1f, 0x07, 0x9f, 0xed, 0xc7, 0xc1, 0x17, 0xfb, 0xf1, 0x8e, 0x9f, 0xef,
	0xc7, 0xc1, 0x87, 0x3f, 0x89, 0x77, 0xec, 0xfd, 0x24, 0x0e, 0xde, 0x59, 0x2d, 0x1a, 0xe5, 0xfb,
	0xc5, 0x84, 0xf7, 0xa9, 0x6c, 0xa2, 0x62, 0xcd, 0xd0, 0x1f, 0x1b, 0x86, 0x59, 0x3a, 0x5f, 0x36,
	0x8d, 0x2d, 0x55, 0xc1, 0xe6, 0x79, 0x8f, 0x3c, 0x53, 0x5e, 0x2f, 0x1a, 0x33, 0xf8, 0xa1, 0xed,
	0xfd, 0xe9, 0x97, 0x83, 0x7f, 0x7c, 0x65, 0xbd, 0x93, 0xfe, 0x47, 0xfa, 0xd4, 0xff, 0x06, 0x00,
	0x00, 0xff, 0xff, 0x84, 0xb5, 0xd0, 0x39, 0x5b, 0x47, 0x00, 0x00,
}
