// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ves.io/schema/registration/public_customapi.proto

package registration

import proto "github.com/gogo/protobuf/proto"
import golang_proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"
import _ "github.com/gogo/googleapis/google/api"
import _ "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
import ves_io_schema4 "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
import _ "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/vesenv"
import _ "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"

import strings "strings"
import reflect "reflect"
import sortkeys "github.com/gogo/protobuf/sortkeys"

import context "golang.org/x/net/context"
import grpc "google.golang.org/grpc"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// ListBySiteReq
//
// x-displayName: "List Registrations by Site"
// Request for list registrations by site
type ListBySiteReq struct {
	// Namespace
	//
	// x-displayName: "Namespace"
	// x-required
	// x-example: "system"
	// Registration namespace, only "system" namespaces is accepted
	Namespace string `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// SiteName
	//
	// x-displayName: "Site name"
	// x-required
	// x-example: "ce02"
	// Site name to be used for registration filtering
	SiteName string `protobuf:"bytes,2,opt,name=site_name,json=siteName,proto3" json:"site_name,omitempty"`
}

func (m *ListBySiteReq) Reset()                    { *m = ListBySiteReq{} }
func (*ListBySiteReq) ProtoMessage()               {}
func (*ListBySiteReq) Descriptor() ([]byte, []int) { return fileDescriptorPublicCustomapi, []int{0} }

func (m *ListBySiteReq) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *ListBySiteReq) GetSiteName() string {
	if m != nil {
		return m.SiteName
	}
	return ""
}

// ListStateReq
//
// x-displayName: "List State Request"
// Request for list registrations
type ListStateReq struct {
	// Namespace
	//
	// x-displayName: "Namespace"
	// x-required
	// x-example: "system"
	// Registration namespace, only "system" namespaces is accepted
	Namespace string `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// ObjectState
	//
	// x-displayName: "Object State"
	// x-required
	// State to get list of registrations (NEW, APPROVED, ADMITTED or RETIRED)
	State ObjectState `protobuf:"varint,2,opt,name=state,proto3,enum=ves.io.schema.registration.ObjectState" json:"state,omitempty"`
}

func (m *ListStateReq) Reset()                    { *m = ListStateReq{} }
func (*ListStateReq) ProtoMessage()               {}
func (*ListStateReq) Descriptor() ([]byte, []int) { return fileDescriptorPublicCustomapi, []int{1} }

func (m *ListStateReq) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *ListStateReq) GetState() ObjectState {
	if m != nil {
		return m.State
	}
	return NOTSET
}

// Approval request
//
// x-displayName: "Approval"
// Request for admission approval
type ApprovalReq struct {
	// Namespace
	//
	// x-displayName: "Namespace"
	// x-required
	// x-example: "system"
	// Registration namespace, only "system" namespaces is accepted
	Namespace string `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// Name
	//
	// x-displayName: "Name"
	// x-required
	// x-example: "r-e9030963-639e-41cd-aba6-261504f4a6be"
	// Registration name (= "r-" + uid) to approve. Registration name is taken from listing pending registrations.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Target registration state
	//
	// x-displayName: "Target state"
	// x-required
	// State to approve (APPROVED or RETIRED)
	State ObjectState `protobuf:"varint,3,opt,name=state,proto3,enum=ves.io.schema.registration.ObjectState" json:"state,omitempty"`
	// Passport
	//
	// x-displayName: "Passport"
	// Passport to be changed in registration, must be valid and always provided
	Passport *Passport `protobuf:"bytes,4,opt,name=passport" json:"passport,omitempty"`
	// Labels
	//
	// Optional.
	// x-displayName: "Labels"
	// x-example: "key:value"
	// Labels to set (add if missing, overwrite if exists)
	Labels map[string]string `protobuf:"bytes,5,rep,name=labels" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Annotations
	//
	// Optional.
	// x-displayName: "Annotations"
	// x-example: "key:value"
	// Annotations to set (add if missing, overwrite if exists)
	Annotations map[string]string `protobuf:"bytes,6,rep,name=annotations" json:"annotations,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Connected Region
	//
	// x-displayName: "Connected Region"
	// x-example: "value"
	// Optional.
	// closest REs to which to connect in selected region. If there is more than one RE with the label
	// then select 2 of them. Otherwise default "geo-ip" database is consulted to find closest RE(s) to
	// public ip with which node registration request was received.
	ConnectedRegion string `protobuf:"bytes,7,opt,name=connected_region,json=connectedRegion,proto3" json:"connected_region,omitempty"`
	// Site to site tunnel type
	//
	// x-displayName: "Site to Site Tunnel Type"
	// Tunnel type specifies the type of tunnel to be used for traffic between the sites.
	TunnelType ves_io_schema4.SiteToSiteTunnelType `protobuf:"varint,8,opt,name=tunnel_type,json=tunnelType,proto3,enum=ves.io.schema.SiteToSiteTunnelType" json:"tunnel_type,omitempty"`
}

func (m *ApprovalReq) Reset()                    { *m = ApprovalReq{} }
func (*ApprovalReq) ProtoMessage()               {}
func (*ApprovalReq) Descriptor() ([]byte, []int) { return fileDescriptorPublicCustomapi, []int{2} }

func (m *ApprovalReq) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *ApprovalReq) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ApprovalReq) GetState() ObjectState {
	if m != nil {
		return m.State
	}
	return NOTSET
}

func (m *ApprovalReq) GetPassport() *Passport {
	if m != nil {
		return m.Passport
	}
	return nil
}

func (m *ApprovalReq) GetLabels() map[string]string {
	if m != nil {
		return m.Labels
	}
	return nil
}

func (m *ApprovalReq) GetAnnotations() map[string]string {
	if m != nil {
		return m.Annotations
	}
	return nil
}

func (m *ApprovalReq) GetConnectedRegion() string {
	if m != nil {
		return m.ConnectedRegion
	}
	return ""
}

func (m *ApprovalReq) GetTunnelType() ves_io_schema4.SiteToSiteTunnelType {
	if m != nil {
		return m.TunnelType
	}
	return ves_io_schema4.SITE_TO_SITE_TUNNEL_IPSEC_OR_SSL
}

// Configuration request
//
// x-displayName: "Configuration Request"
// Request to get configuration
type ConfigReq struct {
	// Namespace
	//
	// x-displayName: "Namespace"
	// x-required
	// x-example: "system"
	// Registration namespace
	Namespace string `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// Name
	//
	// x-displayName: "Name"
	// x-required
	// x-example: "r-e9030963-639e-41cd-aba6-261504f4a6be"
	// Registration name
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Token
	//
	// x-displayName: "Token"
	// x-required
	// x-example: "835af393-3056-46af-a9e4-57613fbe0339"
	// Token - verify node identity
	Token string `protobuf:"bytes,3,opt,name=token,proto3" json:"token,omitempty"`
}

func (m *ConfigReq) Reset()                    { *m = ConfigReq{} }
func (*ConfigReq) ProtoMessage()               {}
func (*ConfigReq) Descriptor() ([]byte, []int) { return fileDescriptorPublicCustomapi, []int{3} }

func (m *ConfigReq) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *ConfigReq) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ConfigReq) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

// Registration change
//
// x-displayName: "Registration Change"
// Generic response when object is changed, registration can be changed only via custom API.
type ObjectChangeResp struct {
	// Registration object
	//
	// x-displayName: "Object"
	Obj *Object `protobuf:"bytes,1,opt,name=obj" json:"obj,omitempty"`
}

func (m *ObjectChangeResp) Reset()                    { *m = ObjectChangeResp{} }
func (*ObjectChangeResp) ProtoMessage()               {}
func (*ObjectChangeResp) Descriptor() ([]byte, []int) { return fileDescriptorPublicCustomapi, []int{4} }

func (m *ObjectChangeResp) GetObj() *Object {
	if m != nil {
		return m.Obj
	}
	return nil
}

// Configuration
//
// x-displayName: "Configuration"
// Response for configuration request. This response is consumed by node.
type ConfigResp struct {
	// Workload
	//
	// x-displayName: "Workload"
	// Configuration for applications and infrastructure
	Workload map[string]*WorkloadContext `protobuf:"bytes,11,rep,name=workload" json:"workload,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value"`
	// Hash
	//
	// x-displayName: "Hash"
	// Hash of workload map which is used to verify consistency
	// and check changes
	Hash string `protobuf:"bytes,12,opt,name=hash,proto3" json:"hash,omitempty"`
}

func (m *ConfigResp) Reset()                    { *m = ConfigResp{} }
func (*ConfigResp) ProtoMessage()               {}
func (*ConfigResp) Descriptor() ([]byte, []int) { return fileDescriptorPublicCustomapi, []int{5} }

func (m *ConfigResp) GetWorkload() map[string]*WorkloadContext {
	if m != nil {
		return m.Workload
	}
	return nil
}

func (m *ConfigResp) GetHash() string {
	if m != nil {
		return m.Hash
	}
	return ""
}

// Create registration
//
// x-displayName: "Create registration"
// Register node. This API isn't designed to be used by users, it's only for node.
type RegistrationCreateRequest struct {
	// Metadata
	//
	// x-displayName: "Metadata"
	// Metadata of registration
	Metadata *ves_io_schema4.ObjectCreateMetaType `protobuf:"bytes,1,opt,name=metadata" json:"metadata,omitempty"`
	// Registration specification
	//
	// x-displayName: "Specification"
	// Specification of the registration
	Spec *CreateSpecType `protobuf:"bytes,2,opt,name=spec" json:"spec,omitempty"`
}

func (m *RegistrationCreateRequest) Reset()      { *m = RegistrationCreateRequest{} }
func (*RegistrationCreateRequest) ProtoMessage() {}
func (*RegistrationCreateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorPublicCustomapi, []int{6}
}

func (m *RegistrationCreateRequest) GetMetadata() *ves_io_schema4.ObjectCreateMetaType {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *RegistrationCreateRequest) GetSpec() *CreateSpecType {
	if m != nil {
		return m.Spec
	}
	return nil
}

func init() {
	proto.RegisterType((*ListBySiteReq)(nil), "ves.io.schema.registration.ListBySiteReq")
	golang_proto.RegisterType((*ListBySiteReq)(nil), "ves.io.schema.registration.ListBySiteReq")
	proto.RegisterType((*ListStateReq)(nil), "ves.io.schema.registration.ListStateReq")
	golang_proto.RegisterType((*ListStateReq)(nil), "ves.io.schema.registration.ListStateReq")
	proto.RegisterType((*ApprovalReq)(nil), "ves.io.schema.registration.ApprovalReq")
	golang_proto.RegisterType((*ApprovalReq)(nil), "ves.io.schema.registration.ApprovalReq")
	proto.RegisterType((*ConfigReq)(nil), "ves.io.schema.registration.ConfigReq")
	golang_proto.RegisterType((*ConfigReq)(nil), "ves.io.schema.registration.ConfigReq")
	proto.RegisterType((*ObjectChangeResp)(nil), "ves.io.schema.registration.ObjectChangeResp")
	golang_proto.RegisterType((*ObjectChangeResp)(nil), "ves.io.schema.registration.ObjectChangeResp")
	proto.RegisterType((*ConfigResp)(nil), "ves.io.schema.registration.ConfigResp")
	golang_proto.RegisterType((*ConfigResp)(nil), "ves.io.schema.registration.ConfigResp")
	proto.RegisterType((*RegistrationCreateRequest)(nil), "ves.io.schema.registration.RegistrationCreateRequest")
	golang_proto.RegisterType((*RegistrationCreateRequest)(nil), "ves.io.schema.registration.RegistrationCreateRequest")
}
func (this *ListBySiteReq) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ListBySiteReq)
	if !ok {
		that2, ok := that.(ListBySiteReq)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Namespace != that1.Namespace {
		return false
	}
	if this.SiteName != that1.SiteName {
		return false
	}
	return true
}
func (this *ListStateReq) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ListStateReq)
	if !ok {
		that2, ok := that.(ListStateReq)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Namespace != that1.Namespace {
		return false
	}
	if this.State != that1.State {
		return false
	}
	return true
}
func (this *ApprovalReq) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ApprovalReq)
	if !ok {
		that2, ok := that.(ApprovalReq)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Namespace != that1.Namespace {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.State != that1.State {
		return false
	}
	if !this.Passport.Equal(that1.Passport) {
		return false
	}
	if len(this.Labels) != len(that1.Labels) {
		return false
	}
	for i := range this.Labels {
		if this.Labels[i] != that1.Labels[i] {
			return false
		}
	}
	if len(this.Annotations) != len(that1.Annotations) {
		return false
	}
	for i := range this.Annotations {
		if this.Annotations[i] != that1.Annotations[i] {
			return false
		}
	}
	if this.ConnectedRegion != that1.ConnectedRegion {
		return false
	}
	if this.TunnelType != that1.TunnelType {
		return false
	}
	return true
}
func (this *ConfigReq) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ConfigReq)
	if !ok {
		that2, ok := that.(ConfigReq)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Namespace != that1.Namespace {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Token != that1.Token {
		return false
	}
	return true
}
func (this *ObjectChangeResp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ObjectChangeResp)
	if !ok {
		that2, ok := that.(ObjectChangeResp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Obj.Equal(that1.Obj) {
		return false
	}
	return true
}
func (this *ConfigResp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ConfigResp)
	if !ok {
		that2, ok := that.(ConfigResp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Workload) != len(that1.Workload) {
		return false
	}
	for i := range this.Workload {
		if !this.Workload[i].Equal(that1.Workload[i]) {
			return false
		}
	}
	if this.Hash != that1.Hash {
		return false
	}
	return true
}
func (this *RegistrationCreateRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RegistrationCreateRequest)
	if !ok {
		that2, ok := that.(RegistrationCreateRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Metadata.Equal(that1.Metadata) {
		return false
	}
	if !this.Spec.Equal(that1.Spec) {
		return false
	}
	return true
}
func (this *ListBySiteReq) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&registration.ListBySiteReq{")
	s = append(s, "Namespace: "+fmt.Sprintf("%#v", this.Namespace)+",\n")
	s = append(s, "SiteName: "+fmt.Sprintf("%#v", this.SiteName)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ListStateReq) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&registration.ListStateReq{")
	s = append(s, "Namespace: "+fmt.Sprintf("%#v", this.Namespace)+",\n")
	s = append(s, "State: "+fmt.Sprintf("%#v", this.State)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ApprovalReq) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 12)
	s = append(s, "&registration.ApprovalReq{")
	s = append(s, "Namespace: "+fmt.Sprintf("%#v", this.Namespace)+",\n")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "State: "+fmt.Sprintf("%#v", this.State)+",\n")
	if this.Passport != nil {
		s = append(s, "Passport: "+fmt.Sprintf("%#v", this.Passport)+",\n")
	}
	keysForLabels := make([]string, 0, len(this.Labels))
	for k, _ := range this.Labels {
		keysForLabels = append(keysForLabels, k)
	}
	sortkeys.Strings(keysForLabels)
	mapStringForLabels := "map[string]string{"
	for _, k := range keysForLabels {
		mapStringForLabels += fmt.Sprintf("%#v: %#v,", k, this.Labels[k])
	}
	mapStringForLabels += "}"
	if this.Labels != nil {
		s = append(s, "Labels: "+mapStringForLabels+",\n")
	}
	keysForAnnotations := make([]string, 0, len(this.Annotations))
	for k, _ := range this.Annotations {
		keysForAnnotations = append(keysForAnnotations, k)
	}
	sortkeys.Strings(keysForAnnotations)
	mapStringForAnnotations := "map[string]string{"
	for _, k := range keysForAnnotations {
		mapStringForAnnotations += fmt.Sprintf("%#v: %#v,", k, this.Annotations[k])
	}
	mapStringForAnnotations += "}"
	if this.Annotations != nil {
		s = append(s, "Annotations: "+mapStringForAnnotations+",\n")
	}
	s = append(s, "ConnectedRegion: "+fmt.Sprintf("%#v", this.ConnectedRegion)+",\n")
	s = append(s, "TunnelType: "+fmt.Sprintf("%#v", this.TunnelType)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ConfigReq) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&registration.ConfigReq{")
	s = append(s, "Namespace: "+fmt.Sprintf("%#v", this.Namespace)+",\n")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "Token: "+fmt.Sprintf("%#v", this.Token)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ObjectChangeResp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&registration.ObjectChangeResp{")
	if this.Obj != nil {
		s = append(s, "Obj: "+fmt.Sprintf("%#v", this.Obj)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ConfigResp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&registration.ConfigResp{")
	keysForWorkload := make([]string, 0, len(this.Workload))
	for k, _ := range this.Workload {
		keysForWorkload = append(keysForWorkload, k)
	}
	sortkeys.Strings(keysForWorkload)
	mapStringForWorkload := "map[string]*WorkloadContext{"
	for _, k := range keysForWorkload {
		mapStringForWorkload += fmt.Sprintf("%#v: %#v,", k, this.Workload[k])
	}
	mapStringForWorkload += "}"
	if this.Workload != nil {
		s = append(s, "Workload: "+mapStringForWorkload+",\n")
	}
	s = append(s, "Hash: "+fmt.Sprintf("%#v", this.Hash)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RegistrationCreateRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&registration.RegistrationCreateRequest{")
	if this.Metadata != nil {
		s = append(s, "Metadata: "+fmt.Sprintf("%#v", this.Metadata)+",\n")
	}
	if this.Spec != nil {
		s = append(s, "Spec: "+fmt.Sprintf("%#v", this.Spec)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringPublicCustomapi(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for CustomAPI service

type CustomAPIClient interface {
	// Change registration state
	//
	// x-displayName: "Registration Approve"
	// RegistrationApprove approved pending registration and it can also decommission by changing state to RETIRED.
	RegistrationApprove(ctx context.Context, in *ApprovalReq, opts ...grpc.CallOption) (*ObjectChangeResp, error)
	// Create registration
	//
	// x-displayName: "Registration Create"
	// Registration request to create registration is sent by the node on first boot. User never creates registration on her own.
	RegistrationCreate(ctx context.Context, in *RegistrationCreateRequest, opts ...grpc.CallOption) (*Object, error)
	// Get configuration for registration
	//
	// x-displayName: "Registration Config"
	// API endpoint for returning configuration for admitted registrations.
	// It will fail with known error for non-ADMITTED registration
	RegistrationConfig(ctx context.Context, in *ConfigReq, opts ...grpc.CallOption) (*ConfigResp, error)
	// List Registrations By Status
	//
	// x-displayName: "List Registrations By State"
	// API endpoint for returning Registrations by status, e.g APPROVED, NEW, or RETIRED
	ListRegistrationsByState(ctx context.Context, in *ListStateReq, opts ...grpc.CallOption) (*ListResponse, error)
	// List Registrations by site
	//
	// x-displayName: "List registrations by site"
	// List all registration in site
	ListRegistrationsBySite(ctx context.Context, in *ListBySiteReq, opts ...grpc.CallOption) (*ListResponse, error)
}

type customAPIClient struct {
	cc *grpc.ClientConn
}

func NewCustomAPIClient(cc *grpc.ClientConn) CustomAPIClient {
	return &customAPIClient{cc}
}

func (c *customAPIClient) RegistrationApprove(ctx context.Context, in *ApprovalReq, opts ...grpc.CallOption) (*ObjectChangeResp, error) {
	out := new(ObjectChangeResp)
	err := grpc.Invoke(ctx, "/ves.io.schema.registration.CustomAPI/RegistrationApprove", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customAPIClient) RegistrationCreate(ctx context.Context, in *RegistrationCreateRequest, opts ...grpc.CallOption) (*Object, error) {
	out := new(Object)
	err := grpc.Invoke(ctx, "/ves.io.schema.registration.CustomAPI/RegistrationCreate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customAPIClient) RegistrationConfig(ctx context.Context, in *ConfigReq, opts ...grpc.CallOption) (*ConfigResp, error) {
	out := new(ConfigResp)
	err := grpc.Invoke(ctx, "/ves.io.schema.registration.CustomAPI/RegistrationConfig", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customAPIClient) ListRegistrationsByState(ctx context.Context, in *ListStateReq, opts ...grpc.CallOption) (*ListResponse, error) {
	out := new(ListResponse)
	err := grpc.Invoke(ctx, "/ves.io.schema.registration.CustomAPI/ListRegistrationsByState", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customAPIClient) ListRegistrationsBySite(ctx context.Context, in *ListBySiteReq, opts ...grpc.CallOption) (*ListResponse, error) {
	out := new(ListResponse)
	err := grpc.Invoke(ctx, "/ves.io.schema.registration.CustomAPI/ListRegistrationsBySite", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for CustomAPI service

type CustomAPIServer interface {
	// Change registration state
	//
	// x-displayName: "Registration Approve"
	// RegistrationApprove approved pending registration and it can also decommission by changing state to RETIRED.
	RegistrationApprove(context.Context, *ApprovalReq) (*ObjectChangeResp, error)
	// Create registration
	//
	// x-displayName: "Registration Create"
	// Registration request to create registration is sent by the node on first boot. User never creates registration on her own.
	RegistrationCreate(context.Context, *RegistrationCreateRequest) (*Object, error)
	// Get configuration for registration
	//
	// x-displayName: "Registration Config"
	// API endpoint for returning configuration for admitted registrations.
	// It will fail with known error for non-ADMITTED registration
	RegistrationConfig(context.Context, *ConfigReq) (*ConfigResp, error)
	// List Registrations By Status
	//
	// x-displayName: "List Registrations By State"
	// API endpoint for returning Registrations by status, e.g APPROVED, NEW, or RETIRED
	ListRegistrationsByState(context.Context, *ListStateReq) (*ListResponse, error)
	// List Registrations by site
	//
	// x-displayName: "List registrations by site"
	// List all registration in site
	ListRegistrationsBySite(context.Context, *ListBySiteReq) (*ListResponse, error)
}

func RegisterCustomAPIServer(s *grpc.Server, srv CustomAPIServer) {
	s.RegisterService(&_CustomAPI_serviceDesc, srv)
}

func _CustomAPI_RegistrationApprove_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApprovalReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomAPIServer).RegistrationApprove(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ves.io.schema.registration.CustomAPI/RegistrationApprove",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomAPIServer).RegistrationApprove(ctx, req.(*ApprovalReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomAPI_RegistrationCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegistrationCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomAPIServer).RegistrationCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ves.io.schema.registration.CustomAPI/RegistrationCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomAPIServer).RegistrationCreate(ctx, req.(*RegistrationCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomAPI_RegistrationConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfigReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomAPIServer).RegistrationConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ves.io.schema.registration.CustomAPI/RegistrationConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomAPIServer).RegistrationConfig(ctx, req.(*ConfigReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomAPI_ListRegistrationsByState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListStateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomAPIServer).ListRegistrationsByState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ves.io.schema.registration.CustomAPI/ListRegistrationsByState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomAPIServer).ListRegistrationsByState(ctx, req.(*ListStateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomAPI_ListRegistrationsBySite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListBySiteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomAPIServer).ListRegistrationsBySite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ves.io.schema.registration.CustomAPI/ListRegistrationsBySite",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomAPIServer).ListRegistrationsBySite(ctx, req.(*ListBySiteReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _CustomAPI_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ves.io.schema.registration.CustomAPI",
	HandlerType: (*CustomAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegistrationApprove",
			Handler:    _CustomAPI_RegistrationApprove_Handler,
		},
		{
			MethodName: "RegistrationCreate",
			Handler:    _CustomAPI_RegistrationCreate_Handler,
		},
		{
			MethodName: "RegistrationConfig",
			Handler:    _CustomAPI_RegistrationConfig_Handler,
		},
		{
			MethodName: "ListRegistrationsByState",
			Handler:    _CustomAPI_ListRegistrationsByState_Handler,
		},
		{
			MethodName: "ListRegistrationsBySite",
			Handler:    _CustomAPI_ListRegistrationsBySite_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ves.io/schema/registration/public_customapi.proto",
}

func (m *ListBySiteReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListBySiteReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Namespace) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPublicCustomapi(dAtA, i, uint64(len(m.Namespace)))
		i += copy(dAtA[i:], m.Namespace)
	}
	if len(m.SiteName) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintPublicCustomapi(dAtA, i, uint64(len(m.SiteName)))
		i += copy(dAtA[i:], m.SiteName)
	}
	return i, nil
}

func (m *ListStateReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListStateReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Namespace) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPublicCustomapi(dAtA, i, uint64(len(m.Namespace)))
		i += copy(dAtA[i:], m.Namespace)
	}
	if m.State != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPublicCustomapi(dAtA, i, uint64(m.State))
	}
	return i, nil
}

func (m *ApprovalReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ApprovalReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Namespace) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPublicCustomapi(dAtA, i, uint64(len(m.Namespace)))
		i += copy(dAtA[i:], m.Namespace)
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintPublicCustomapi(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if m.State != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintPublicCustomapi(dAtA, i, uint64(m.State))
	}
	if m.Passport != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintPublicCustomapi(dAtA, i, uint64(m.Passport.Size()))
		n1, err := m.Passport.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if len(m.Labels) > 0 {
		for k, _ := range m.Labels {
			dAtA[i] = 0x2a
			i++
			v := m.Labels[k]
			mapSize := 1 + len(k) + sovPublicCustomapi(uint64(len(k))) + 1 + len(v) + sovPublicCustomapi(uint64(len(v)))
			i = encodeVarintPublicCustomapi(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintPublicCustomapi(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			dAtA[i] = 0x12
			i++
			i = encodeVarintPublicCustomapi(dAtA, i, uint64(len(v)))
			i += copy(dAtA[i:], v)
		}
	}
	if len(m.Annotations) > 0 {
		for k, _ := range m.Annotations {
			dAtA[i] = 0x32
			i++
			v := m.Annotations[k]
			mapSize := 1 + len(k) + sovPublicCustomapi(uint64(len(k))) + 1 + len(v) + sovPublicCustomapi(uint64(len(v)))
			i = encodeVarintPublicCustomapi(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintPublicCustomapi(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			dAtA[i] = 0x12
			i++
			i = encodeVarintPublicCustomapi(dAtA, i, uint64(len(v)))
			i += copy(dAtA[i:], v)
		}
	}
	if len(m.ConnectedRegion) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintPublicCustomapi(dAtA, i, uint64(len(m.ConnectedRegion)))
		i += copy(dAtA[i:], m.ConnectedRegion)
	}
	if m.TunnelType != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintPublicCustomapi(dAtA, i, uint64(m.TunnelType))
	}
	return i, nil
}

func (m *ConfigReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConfigReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Namespace) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPublicCustomapi(dAtA, i, uint64(len(m.Namespace)))
		i += copy(dAtA[i:], m.Namespace)
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintPublicCustomapi(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.Token) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintPublicCustomapi(dAtA, i, uint64(len(m.Token)))
		i += copy(dAtA[i:], m.Token)
	}
	return i, nil
}

func (m *ObjectChangeResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ObjectChangeResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Obj != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPublicCustomapi(dAtA, i, uint64(m.Obj.Size()))
		n2, err := m.Obj.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	return i, nil
}

func (m *ConfigResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConfigResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Workload) > 0 {
		for k, _ := range m.Workload {
			dAtA[i] = 0x5a
			i++
			v := m.Workload[k]
			msgSize := 0
			if v != nil {
				msgSize = v.Size()
				msgSize += 1 + sovPublicCustomapi(uint64(msgSize))
			}
			mapSize := 1 + len(k) + sovPublicCustomapi(uint64(len(k))) + msgSize
			i = encodeVarintPublicCustomapi(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintPublicCustomapi(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			if v != nil {
				dAtA[i] = 0x12
				i++
				i = encodeVarintPublicCustomapi(dAtA, i, uint64(v.Size()))
				n3, err := v.MarshalTo(dAtA[i:])
				if err != nil {
					return 0, err
				}
				i += n3
			}
		}
	}
	if len(m.Hash) > 0 {
		dAtA[i] = 0x62
		i++
		i = encodeVarintPublicCustomapi(dAtA, i, uint64(len(m.Hash)))
		i += copy(dAtA[i:], m.Hash)
	}
	return i, nil
}

func (m *RegistrationCreateRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RegistrationCreateRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Metadata != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPublicCustomapi(dAtA, i, uint64(m.Metadata.Size()))
		n4, err := m.Metadata.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	if m.Spec != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintPublicCustomapi(dAtA, i, uint64(m.Spec.Size()))
		n5, err := m.Spec.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	return i, nil
}

func encodeVarintPublicCustomapi(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *ListBySiteReq) Size() (n int) {
	var l int
	_ = l
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	l = len(m.SiteName)
	if l > 0 {
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	return n
}

func (m *ListStateReq) Size() (n int) {
	var l int
	_ = l
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	if m.State != 0 {
		n += 1 + sovPublicCustomapi(uint64(m.State))
	}
	return n
}

func (m *ApprovalReq) Size() (n int) {
	var l int
	_ = l
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	if m.State != 0 {
		n += 1 + sovPublicCustomapi(uint64(m.State))
	}
	if m.Passport != nil {
		l = m.Passport.Size()
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	if len(m.Labels) > 0 {
		for k, v := range m.Labels {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovPublicCustomapi(uint64(len(k))) + 1 + len(v) + sovPublicCustomapi(uint64(len(v)))
			n += mapEntrySize + 1 + sovPublicCustomapi(uint64(mapEntrySize))
		}
	}
	if len(m.Annotations) > 0 {
		for k, v := range m.Annotations {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovPublicCustomapi(uint64(len(k))) + 1 + len(v) + sovPublicCustomapi(uint64(len(v)))
			n += mapEntrySize + 1 + sovPublicCustomapi(uint64(mapEntrySize))
		}
	}
	l = len(m.ConnectedRegion)
	if l > 0 {
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	if m.TunnelType != 0 {
		n += 1 + sovPublicCustomapi(uint64(m.TunnelType))
	}
	return n
}

func (m *ConfigReq) Size() (n int) {
	var l int
	_ = l
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	l = len(m.Token)
	if l > 0 {
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	return n
}

func (m *ObjectChangeResp) Size() (n int) {
	var l int
	_ = l
	if m.Obj != nil {
		l = m.Obj.Size()
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	return n
}

func (m *ConfigResp) Size() (n int) {
	var l int
	_ = l
	if len(m.Workload) > 0 {
		for k, v := range m.Workload {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovPublicCustomapi(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovPublicCustomapi(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovPublicCustomapi(uint64(mapEntrySize))
		}
	}
	l = len(m.Hash)
	if l > 0 {
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	return n
}

func (m *RegistrationCreateRequest) Size() (n int) {
	var l int
	_ = l
	if m.Metadata != nil {
		l = m.Metadata.Size()
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	if m.Spec != nil {
		l = m.Spec.Size()
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	return n
}

func sovPublicCustomapi(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozPublicCustomapi(x uint64) (n int) {
	return sovPublicCustomapi(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *ListBySiteReq) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ListBySiteReq{`,
		`Namespace:` + fmt.Sprintf("%v", this.Namespace) + `,`,
		`SiteName:` + fmt.Sprintf("%v", this.SiteName) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ListStateReq) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ListStateReq{`,
		`Namespace:` + fmt.Sprintf("%v", this.Namespace) + `,`,
		`State:` + fmt.Sprintf("%v", this.State) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ApprovalReq) String() string {
	if this == nil {
		return "nil"
	}
	keysForLabels := make([]string, 0, len(this.Labels))
	for k, _ := range this.Labels {
		keysForLabels = append(keysForLabels, k)
	}
	sortkeys.Strings(keysForLabels)
	mapStringForLabels := "map[string]string{"
	for _, k := range keysForLabels {
		mapStringForLabels += fmt.Sprintf("%v: %v,", k, this.Labels[k])
	}
	mapStringForLabels += "}"
	keysForAnnotations := make([]string, 0, len(this.Annotations))
	for k, _ := range this.Annotations {
		keysForAnnotations = append(keysForAnnotations, k)
	}
	sortkeys.Strings(keysForAnnotations)
	mapStringForAnnotations := "map[string]string{"
	for _, k := range keysForAnnotations {
		mapStringForAnnotations += fmt.Sprintf("%v: %v,", k, this.Annotations[k])
	}
	mapStringForAnnotations += "}"
	s := strings.Join([]string{`&ApprovalReq{`,
		`Namespace:` + fmt.Sprintf("%v", this.Namespace) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`State:` + fmt.Sprintf("%v", this.State) + `,`,
		`Passport:` + strings.Replace(fmt.Sprintf("%v", this.Passport), "Passport", "Passport", 1) + `,`,
		`Labels:` + mapStringForLabels + `,`,
		`Annotations:` + mapStringForAnnotations + `,`,
		`ConnectedRegion:` + fmt.Sprintf("%v", this.ConnectedRegion) + `,`,
		`TunnelType:` + fmt.Sprintf("%v", this.TunnelType) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ConfigReq) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ConfigReq{`,
		`Namespace:` + fmt.Sprintf("%v", this.Namespace) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Token:` + fmt.Sprintf("%v", this.Token) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ObjectChangeResp) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ObjectChangeResp{`,
		`Obj:` + strings.Replace(fmt.Sprintf("%v", this.Obj), "Object", "Object", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ConfigResp) String() string {
	if this == nil {
		return "nil"
	}
	keysForWorkload := make([]string, 0, len(this.Workload))
	for k, _ := range this.Workload {
		keysForWorkload = append(keysForWorkload, k)
	}
	sortkeys.Strings(keysForWorkload)
	mapStringForWorkload := "map[string]*WorkloadContext{"
	for _, k := range keysForWorkload {
		mapStringForWorkload += fmt.Sprintf("%v: %v,", k, this.Workload[k])
	}
	mapStringForWorkload += "}"
	s := strings.Join([]string{`&ConfigResp{`,
		`Workload:` + mapStringForWorkload + `,`,
		`Hash:` + fmt.Sprintf("%v", this.Hash) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RegistrationCreateRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RegistrationCreateRequest{`,
		`Metadata:` + strings.Replace(fmt.Sprintf("%v", this.Metadata), "ObjectCreateMetaType", "ves_io_schema4.ObjectCreateMetaType", 1) + `,`,
		`Spec:` + strings.Replace(fmt.Sprintf("%v", this.Spec), "CreateSpecType", "CreateSpecType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringPublicCustomapi(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *ListBySiteReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCustomapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListBySiteReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListBySiteReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SiteName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SiteName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCustomapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListStateReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCustomapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListStateReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListStateReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= (ObjectState(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCustomapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ApprovalReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCustomapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ApprovalReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ApprovalReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= (ObjectState(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Passport", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Passport == nil {
				m.Passport = &Passport{}
			}
			if err := m.Passport.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Labels", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Labels == nil {
				m.Labels = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPublicCustomapi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPublicCustomapi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthPublicCustomapi
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPublicCustomapi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthPublicCustomapi
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipPublicCustomapi(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthPublicCustomapi
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Labels[mapkey] = mapvalue
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Annotations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Annotations == nil {
				m.Annotations = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPublicCustomapi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPublicCustomapi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthPublicCustomapi
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPublicCustomapi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthPublicCustomapi
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipPublicCustomapi(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthPublicCustomapi
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Annotations[mapkey] = mapvalue
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConnectedRegion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConnectedRegion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TunnelType", wireType)
			}
			m.TunnelType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TunnelType |= (ves_io_schema4.SiteToSiteTunnelType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCustomapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConfigReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCustomapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConfigReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConfigReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCustomapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ObjectChangeResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCustomapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ObjectChangeResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ObjectChangeResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Obj", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Obj == nil {
				m.Obj = &Object{}
			}
			if err := m.Obj.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCustomapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConfigResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCustomapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConfigResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConfigResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Workload", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Workload == nil {
				m.Workload = make(map[string]*WorkloadContext)
			}
			var mapkey string
			var mapvalue *WorkloadContext
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPublicCustomapi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPublicCustomapi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthPublicCustomapi
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPublicCustomapi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= (int(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthPublicCustomapi
					}
					postmsgIndex := iNdEx + mapmsglen
					if mapmsglen < 0 {
						return ErrInvalidLengthPublicCustomapi
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &WorkloadContext{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipPublicCustomapi(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthPublicCustomapi
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Workload[mapkey] = mapvalue
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCustomapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RegistrationCreateRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCustomapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RegistrationCreateRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RegistrationCreateRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Metadata == nil {
				m.Metadata = &ves_io_schema4.ObjectCreateMetaType{}
			}
			if err := m.Metadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Spec == nil {
				m.Spec = &CreateSpecType{}
			}
			if err := m.Spec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCustomapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPublicCustomapi(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPublicCustomapi
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthPublicCustomapi
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowPublicCustomapi
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipPublicCustomapi(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthPublicCustomapi = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPublicCustomapi   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("ves.io/schema/registration/public_customapi.proto", fileDescriptorPublicCustomapi)
}
func init() {
	golang_proto.RegisterFile("ves.io/schema/registration/public_customapi.proto", fileDescriptorPublicCustomapi)
}

var fileDescriptorPublicCustomapi = []byte{
	// 1133 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x56, 0x41, 0x6f, 0xdb, 0xb6,
	0x1f, 0x0d, 0xe3, 0x24, 0x7f, 0x9b, 0x4e, 0xdb, 0x80, 0xff, 0x16, 0x53, 0xd4, 0x42, 0xc8, 0xb4,
	0xad, 0x49, 0xbb, 0x5a, 0xc2, 0xdc, 0x0d, 0x6b, 0x82, 0xb5, 0x4d, 0x9c, 0xee, 0xb0, 0xad, 0x5d,
	0x03, 0xa5, 0xc0, 0x80, 0x5e, 0x0c, 0x5a, 0x66, 0x64, 0x25, 0xb2, 0xa8, 0x8a, 0x94, 0x53, 0xa3,
	0x08, 0x30, 0xe4, 0x13, 0x0c, 0xd8, 0x61, 0xc0, 0x0e, 0x3b, 0xef, 0xb4, 0x73, 0x81, 0x5c, 0x72,
	0x4b, 0xb1, 0xc3, 0x50, 0x74, 0x3b, 0x0c, 0xc1, 0x0e, 0x8b, 0xbb, 0x43, 0x0f, 0x3b, 0xf4, 0x23,
	0x0c, 0xa4, 0x64, 0x45, 0x76, 0x53, 0xdb, 0xb9, 0x24, 0x14, 0xf9, 0x7b, 0x8f, 0xef, 0x91, 0x8f,
	0x26, 0xe1, 0x47, 0x2d, 0xc2, 0x0c, 0x97, 0x9a, 0xcc, 0x6e, 0x90, 0x26, 0x36, 0x43, 0xe2, 0xb8,
	0x8c, 0x87, 0x98, 0xbb, 0xd4, 0x37, 0x83, 0xa8, 0xe6, 0xb9, 0x76, 0xd5, 0x8e, 0x18, 0xa7, 0x4d,
	0x1c, 0xb8, 0x46, 0x10, 0x52, 0x4e, 0x91, 0x1a, 0x43, 0x8c, 0x18, 0x62, 0x64, 0x21, 0x6a, 0xc9,
	0x71, 0x79, 0x23, 0xaa, 0x19, 0x36, 0x6d, 0x9a, 0x0e, 0x75, 0xa8, 0x29, 0x21, 0xb5, 0x68, 0x43,
	0x7e, 0xc9, 0x0f, 0xd9, 0x8a, 0xa9, 0xd4, 0x4b, 0x0e, 0xa5, 0x8e, 0x47, 0x4c, 0x1c, 0xb8, 0x26,
	0xf6, 0x7d, 0xca, 0x25, 0x0b, 0x4b, 0x46, 0x2f, 0xf6, 0x6a, 0xa3, 0x41, 0x76, 0x70, 0x7e, 0x80,
	0x70, 0x5a, 0xdb, 0x24, 0x36, 0x4f, 0x0a, 0xcd, 0x11, 0x1c, 0x86, 0x51, 0x3d, 0xf5, 0xa7, 0x5e,
	0x1e, 0x00, 0xe0, 0xed, 0x80, 0x74, 0x15, 0xcc, 0xf6, 0xd6, 0x65, 0x87, 0xf4, 0xde, 0xa1, 0x16,
	0x61, 0xc4, 0x6f, 0xf5, 0x19, 0x98, 0xeb, 0xab, 0x71, 0xc9, 0x76, 0xb5, 0xa7, 0x42, 0xff, 0x12,
	0x9e, 0xb9, 0xeb, 0x32, 0x5e, 0x69, 0xaf, 0xbb, 0x9c, 0x58, 0xe4, 0x11, 0xba, 0x04, 0x0b, 0x3e,
	0x6e, 0x12, 0x16, 0x60, 0x9b, 0x28, 0x60, 0x0e, 0x2c, 0x14, 0xac, 0xe3, 0x0e, 0x74, 0x11, 0x16,
	0x98, 0xcb, 0x49, 0x55, 0xf4, 0x28, 0xe3, 0x72, 0x34, 0x2f, 0x3a, 0xbe, 0xc6, 0x4d, 0xa2, 0x6f,
	0xc1, 0x69, 0xc1, 0xb5, 0xce, 0xf1, 0x28, 0x54, 0x37, 0xe1, 0x24, 0x13, 0x95, 0x92, 0xe6, 0x6c,
	0x79, 0xde, 0x78, 0xfb, 0x96, 0x1b, 0xf7, 0xe5, 0x62, 0xc7, 0xc4, 0x31, 0x4a, 0xff, 0x77, 0x02,
	0x16, 0x57, 0x82, 0x20, 0xa4, 0x2d, 0xec, 0x89, 0xc9, 0xae, 0xbd, 0x31, 0x59, 0xe5, 0xec, 0xe1,
	0x1e, 0x98, 0x62, 0x6d, 0xc6, 0x49, 0xf3, 0xd5, 0x1e, 0x00, 0xd9, 0xc9, 0x11, 0x9c, 0xc8, 0x58,
	0x90, 0x6d, 0x74, 0xa7, 0x2b, 0x28, 0x77, 0x2a, 0x41, 0x95, 0xc9, 0xc3, 0x3d, 0x00, 0xca, 0x89,
	0x2e, 0xb4, 0x0c, 0xf3, 0x01, 0x66, 0x2c, 0xa0, 0x21, 0x57, 0x26, 0xe6, 0xc0, 0x42, 0xb1, 0xfc,
	0xfe, 0x20, 0xa2, 0xb5, 0xa4, 0xd6, 0x4a, 0x51, 0xe8, 0x2b, 0x38, 0xe5, 0xe1, 0x1a, 0xf1, 0x98,
	0x32, 0x39, 0x97, 0x5b, 0x28, 0x96, 0xaf, 0x0f, 0xc2, 0x67, 0x96, 0xc0, 0xb8, 0x2b, 0x51, 0x9f,
	0xfb, 0x3c, 0x6c, 0x5b, 0x09, 0x05, 0x7a, 0x08, 0x8b, 0x99, 0xd0, 0x2b, 0x53, 0x92, 0xf1, 0xc6,
	0xa8, 0x8c, 0x2b, 0xc7, 0xd0, 0x98, 0x36, 0x4b, 0x86, 0xae, 0xc0, 0x19, 0x9b, 0xfa, 0x3e, 0xb1,
	0x39, 0xa9, 0x57, 0x05, 0x07, 0xf5, 0x95, 0xff, 0xc9, 0x05, 0x3d, 0x97, 0xf6, 0x5b, 0xb2, 0x1b,
	0xdd, 0x81, 0x45, 0x1e, 0xf9, 0x3e, 0xf1, 0xaa, 0x22, 0xc2, 0x4a, 0x5e, 0xae, 0xf0, 0x7b, 0x7d,
	0x32, 0x44, 0x04, 0x1f, 0x50, 0xf9, 0x57, 0xd6, 0x3e, 0x68, 0x07, 0xc4, 0x82, 0x3c, 0x6d, 0xab,
	0x8b, 0xb0, 0x98, 0xf1, 0x88, 0x66, 0x60, 0x6e, 0x8b, 0xb4, 0x93, 0x64, 0x89, 0x26, 0x3a, 0x0f,
	0x27, 0x5b, 0xd8, 0x8b, 0xba, 0xfb, 0x1a, 0x7f, 0x2c, 0x8d, 0xdf, 0x00, 0xea, 0x2d, 0x38, 0xd3,
	0x6f, 0xe6, 0x34, 0x78, 0x7d, 0x1d, 0x16, 0x56, 0xa9, 0xbf, 0xe1, 0x3a, 0xc3, 0x83, 0x7d, 0x52,
	0xb6, 0xce, 0xc3, 0x49, 0x4e, 0xb7, 0x88, 0x2f, 0xb3, 0x55, 0xb0, 0xe2, 0x0f, 0xfd, 0x1e, 0x9c,
	0x89, 0x83, 0xb4, 0xda, 0xc0, 0xbe, 0x43, 0x2c, 0xc2, 0x02, 0xb4, 0x08, 0x73, 0xb4, 0xb6, 0x29,
	0x59, 0x8b, 0x65, 0x7d, 0x78, 0x06, 0x2b, 0xb9, 0xfd, 0x1d, 0x60, 0x09, 0x8c, 0xfe, 0x17, 0x80,
	0xb0, 0x2b, 0x92, 0x05, 0x68, 0x0d, 0xe6, 0xb7, 0x69, 0xb8, 0xe5, 0x51, 0x5c, 0x57, 0x8a, 0x72,
	0xdf, 0x3f, 0x1e, 0x44, 0x77, 0x8c, 0x34, 0xbe, 0x49, 0x60, 0xf1, 0x9e, 0xa7, 0x2c, 0xc2, 0x59,
	0x03, 0xb3, 0x86, 0x32, 0x1d, 0x3b, 0x13, 0x6d, 0xb5, 0x01, 0xcf, 0xf4, 0x94, 0x9f, 0xb0, 0xaa,
	0x2b, 0xd9, 0x55, 0x2d, 0x96, 0x3f, 0x1c, 0xa4, 0xa2, 0xcb, 0xb5, 0x4a, 0x7d, 0x4e, 0x1e, 0xf3,
	0xec, 0x16, 0x3c, 0x05, 0x70, 0xd6, 0xca, 0xd4, 0xae, 0x86, 0x24, 0xfe, 0xa1, 0x89, 0x08, 0xe3,
	0xe8, 0x36, 0xcc, 0x37, 0x09, 0xc7, 0x75, 0xcc, 0x71, 0xb2, 0x78, 0xfd, 0xf1, 0x4a, 0x96, 0x5a,
	0xa2, 0xee, 0x11, 0x8e, 0x65, 0xbc, 0x52, 0x10, 0xba, 0x0f, 0x27, 0x58, 0x40, 0xec, 0x44, 0xe4,
	0xd5, 0x81, 0x4b, 0x25, 0x39, 0xd6, 0x03, 0x62, 0x0b, 0x8e, 0xca, 0xb9, 0x1f, 0x77, 0xa6, 0x05,
	0xd4, 0x70, 0xec, 0xaa, 0xf8, 0x6f, 0x49, 0xa2, 0xa5, 0xc2, 0xaf, 0xb7, 0xa6, 0xe2, 0x39, 0xcb,
	0x3f, 0xe4, 0x61, 0x61, 0x55, 0x5e, 0x71, 0x2b, 0x6b, 0x5f, 0xa0, 0x17, 0x00, 0xfe, 0x3f, 0x6b,
	0x24, 0x3e, 0x71, 0x04, 0xcd, 0x8f, 0x78, 0x2c, 0xd5, 0x6b, 0xc3, 0x63, 0x71, 0x9c, 0x28, 0xbd,
	0xde, 0x39, 0x50, 0xc4, 0x35, 0x57, 0x72, 0x69, 0xc9, 0xf5, 0x37, 0x42, 0xcc, 0x78, 0x18, 0xd9,
	0x3c, 0x0a, 0x49, 0x69, 0x3b, 0x74, 0x39, 0xd9, 0xfd, 0xfd, 0x9f, 0xef, 0xc7, 0x6f, 0xeb, 0x4b,
	0xc9, 0x4d, 0x65, 0xa6, 0x49, 0x66, 0xe6, 0x93, 0xb4, 0xbd, 0xd3, 0x7b, 0x47, 0xc9, 0x81, 0x1d,
	0x13, 0xc7, 0xca, 0x97, 0xc0, 0x55, 0xf4, 0x0b, 0x80, 0xe8, 0xcd, 0xdd, 0x41, 0x9f, 0x0c, 0x92,
	0xfa, 0xd6, 0xdd, 0x54, 0x47, 0x08, 0xbe, 0x7e, 0xb3, 0x73, 0xa0, 0x5c, 0x48, 0x7d, 0x71, 0x12,
	0xfa, 0xd8, 0xcb, 0x38, 0xd2, 0xf4, 0xd9, 0xae, 0xa3, 0x18, 0x4d, 0xc2, 0x0a, 0xa5, 0x5c, 0xb0,
	0x04, 0x42, 0xf0, 0x4f, 0xfd, 0x82, 0x65, 0xfe, 0xd1, 0x07, 0xa3, 0x9c, 0x91, 0x47, 0xea, 0xe5,
	0xd1, 0x8e, 0x92, 0xbe, 0x38, 0x58, 0xa4, 0xaa, 0x5f, 0x38, 0x16, 0x29, 0xad, 0xc7, 0x58, 0x21,
	0xf0, 0x0f, 0x00, 0x15, 0x71, 0x9f, 0x66, 0x45, 0xb2, 0x4a, 0x5b, 0x5e, 0x3a, 0x68, 0x61, 0xd0,
	0xfc, 0xd9, 0x5b, 0x58, 0x1d, 0x5a, 0x29, 0x74, 0x52, 0x9f, 0x11, 0xbd, 0xfe, 0xec, 0xe9, 0x38,
	0xe8, 0x1c, 0x28, 0xea, 0xc9, 0x61, 0x09, 0x09, 0xae, 0x4b, 0xd1, 0x9f, 0xe9, 0x9f, 0x0e, 0xc9,
	0x8a, 0x27, 0x66, 0xc8, 0xca, 0xae, 0xb5, 0xe5, 0xed, 0x28, 0x6c, 0x1d, 0x02, 0xf8, 0xce, 0x49,
	0xb6, 0x5c, 0x4e, 0xd0, 0x95, 0x61, 0x5a, 0xd3, 0x77, 0xca, 0x29, 0x6c, 0x6d, 0x8e, 0x68, 0xab,
	0x82, 0x96, 0x4f, 0x71, 0x04, 0x58, 0xb5, 0xd6, 0xae, 0x8a, 0xa7, 0x8f, 0xf9, 0x24, 0x7d, 0x11,
	0xed, 0xa8, 0xe6, 0xfe, 0x1e, 0xc8, 0xbd, 0xd8, 0x03, 0xef, 0x0e, 0x8d, 0xef, 0xee, 0x6f, 0xca,
	0xf8, 0x32, 0xa8, 0xec, 0x82, 0xe7, 0x47, 0xda, 0xd8, 0x9f, 0x47, 0xda, 0xd8, 0xeb, 0x23, 0x0d,
	0x7c, 0xdb, 0xd1, 0xc0, 0xcf, 0x1d, 0x0d, 0x3c, 0xeb, 0x68, 0xe0, 0x79, 0x47, 0x03, 0x7f, 0x77,
	0x34, 0xf0, 0xaa, 0xa3, 0x8d, 0xbd, 0xee, 0x68, 0xe0, 0xbb, 0x97, 0xda, 0xd8, 0xfe, 0x4b, 0x0d,
	0x3c, 0x5c, 0x73, 0x68, 0xb0, 0xe5, 0x18, 0x2d, 0xea, 0x71, 0x12, 0x86, 0xd8, 0x88, 0x98, 0x29,
	0x1b, 0x1b, 0x34, 0x6c, 0x96, 0xc4, 0x79, 0x74, 0xeb, 0x24, 0x2c, 0x75, 0x87, 0xcd, 0xa0, 0xe6,
	0x50, 0x93, 0x3c, 0xe6, 0xc9, 0x1b, 0xf0, 0x84, 0x17, 0x67, 0x6d, 0x4a, 0xbe, 0x05, 0xaf, 0xff,
	0x17, 0x00, 0x00, 0xff, 0xff, 0x5d, 0xe6, 0x84, 0x2d, 0xa9, 0x0b, 0x00, 0x00,
}
