// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ves.io/schema/site_mesh_group/types.proto

package site_mesh_group

import proto "github.com/gogo/protobuf/proto"
import golang_proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"
import _ "github.com/gogo/protobuf/types"
import _ "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
import _ "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
import _ "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
import _ "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/site"
import ves_io_schema4 "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
import _ "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
import _ "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"

import strconv "strconv"

import strings "strings"
import reflect "reflect"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Site Mesh Group Type
//
// x-displayName: "Mesh Type"
// Defines different types of Mesh
type SiteMeshGroupType int32

const (
	// x-displayName: "Invalid"
	// Invalid mesh type
	SITE_MESH_GROUP_TYPE_INVALID SiteMeshGroupType = 0
	// x-displayName: "Hub"
	// Mesh of type Hub
	SITE_MESH_GROUP_TYPE_HUB_FULL_MESH SiteMeshGroupType = 1
	// x-displayName: "Spoke"
	// Mesh of type Spoke
	SITE_MESH_GROUP_TYPE_SPOKE SiteMeshGroupType = 2
	// x-displayName: "Full Mesh"
	// Full mesh of tunnels are created between all sites
	SITE_MESH_GROUP_TYPE_FULL_MESH SiteMeshGroupType = 3
)

var SiteMeshGroupType_name = map[int32]string{
	0: "SITE_MESH_GROUP_TYPE_INVALID",
	1: "SITE_MESH_GROUP_TYPE_HUB_FULL_MESH",
	2: "SITE_MESH_GROUP_TYPE_SPOKE",
	3: "SITE_MESH_GROUP_TYPE_FULL_MESH",
}
var SiteMeshGroupType_value = map[string]int32{
	"SITE_MESH_GROUP_TYPE_INVALID":       0,
	"SITE_MESH_GROUP_TYPE_HUB_FULL_MESH": 1,
	"SITE_MESH_GROUP_TYPE_SPOKE":         2,
	"SITE_MESH_GROUP_TYPE_FULL_MESH":     3,
}

func (SiteMeshGroupType) EnumDescriptor() ([]byte, []int) { return fileDescriptorTypes, []int{0} }

// Global Specification
//
// x-displayName: "Specification"
// Site Mesh Group specification
type GlobalSpecType struct {
	// type
	//
	// x-required
	// x-example: "mesh-1"
	// x-displayName: "Site Mesh Group Type"
	// Type of Site to Site connectivity (Spoke, Hub or Full Mesh)
	Type SiteMeshGroupType `protobuf:"varint,1,opt,name=type,proto3,enum=ves.io.schema.site_mesh_group.SiteMeshGroupType" json:"type,omitempty"`
	// tunnel_type
	//
	// x-required
	// x-example: "SITE_TO_SITE_TUNNEL_IPSEC"
	// x-displayName: "Tunnel Type"
	// Type of tunnel. Can be IPSec, SSL or Clear.
	// If Site reachability is over private network and application traffic is always using TLS, then Clear is preferable.
	// In case of Clear simple GRE tunnel will be used.
	// Only tunnels of type IPSec are support currently.
	TunnelType ves_io_schema4.SiteToSiteTunnelType `protobuf:"varint,2,opt,name=tunnel_type,json=tunnelType,proto3,enum=ves.io.schema.SiteToSiteTunnelType" json:"tunnel_type,omitempty"`
	// virtual_site
	//
	// x-displayName: "Virtual Site (Sites in this group)"
	// Set of sites for which this mesh group config is valid.
	// If 'Type' is Spoke, then it gives set of spoke sites.
	// If 'Type' is Hub, then it gives set of hub sites.
	// If 'Type' is Full Mesh, then it gives set of sites that are connected in full mesh.
	VirtualSite []*ves_io_schema4.ObjectRefType `protobuf:"bytes,3,rep,name=virtual_site,json=virtualSite" json:"virtual_site,omitempty"`
	// hub
	//
	// x-displayName: "Hub (site mesh group)"
	// If 'Type' is Spoke, 'Hub' refers to a Site Mesh Group of 'type' Hub.
	// Spoke sites will connect to all the member sites of Hub Site Mesh Group
	// Hub must be empty when Site Mesh Group type is Hub or Full Mesh
	Hub []*ves_io_schema4.ObjectRefType `protobuf:"bytes,4,rep,name=hub" json:"hub,omitempty"`
}

func (m *GlobalSpecType) Reset()                    { *m = GlobalSpecType{} }
func (*GlobalSpecType) ProtoMessage()               {}
func (*GlobalSpecType) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{0} }

func (m *GlobalSpecType) GetType() SiteMeshGroupType {
	if m != nil {
		return m.Type
	}
	return SITE_MESH_GROUP_TYPE_INVALID
}

func (m *GlobalSpecType) GetTunnelType() ves_io_schema4.SiteToSiteTunnelType {
	if m != nil {
		return m.TunnelType
	}
	return ves_io_schema4.SITE_TO_SITE_TUNNEL_IPSEC_OR_SSL
}

func (m *GlobalSpecType) GetVirtualSite() []*ves_io_schema4.ObjectRefType {
	if m != nil {
		return m.VirtualSite
	}
	return nil
}

func (m *GlobalSpecType) GetHub() []*ves_io_schema4.ObjectRefType {
	if m != nil {
		return m.Hub
	}
	return nil
}

// Create site mesh group
//
// x-displayName: "Create Site Mesh Group"
// Create a Site Mesh Group in system namespace of user
type CreateSpecType struct {
	Type        SiteMeshGroupType                   `protobuf:"varint,1,opt,name=type,proto3,enum=ves.io.schema.site_mesh_group.SiteMeshGroupType" json:"type,omitempty"`
	TunnelType  ves_io_schema4.SiteToSiteTunnelType `protobuf:"varint,2,opt,name=tunnel_type,json=tunnelType,proto3,enum=ves.io.schema.SiteToSiteTunnelType" json:"tunnel_type,omitempty"`
	VirtualSite []*ves_io_schema4.ObjectRefType     `protobuf:"bytes,3,rep,name=virtual_site,json=virtualSite" json:"virtual_site,omitempty"`
	Hub         []*ves_io_schema4.ObjectRefType     `protobuf:"bytes,4,rep,name=hub" json:"hub,omitempty"`
}

func (m *CreateSpecType) Reset()                    { *m = CreateSpecType{} }
func (*CreateSpecType) ProtoMessage()               {}
func (*CreateSpecType) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{1} }

func (m *CreateSpecType) GetType() SiteMeshGroupType {
	if m != nil {
		return m.Type
	}
	return SITE_MESH_GROUP_TYPE_INVALID
}

func (m *CreateSpecType) GetTunnelType() ves_io_schema4.SiteToSiteTunnelType {
	if m != nil {
		return m.TunnelType
	}
	return ves_io_schema4.SITE_TO_SITE_TUNNEL_IPSEC_OR_SSL
}

func (m *CreateSpecType) GetVirtualSite() []*ves_io_schema4.ObjectRefType {
	if m != nil {
		return m.VirtualSite
	}
	return nil
}

func (m *CreateSpecType) GetHub() []*ves_io_schema4.ObjectRefType {
	if m != nil {
		return m.Hub
	}
	return nil
}

// Replace site mesh group
//
// x-displayName: "Replace Site Mesh Group"
// Replace contents of a Site Mesh Group object
type ReplaceSpecType struct {
	Type        SiteMeshGroupType                   `protobuf:"varint,1,opt,name=type,proto3,enum=ves.io.schema.site_mesh_group.SiteMeshGroupType" json:"type,omitempty"`
	TunnelType  ves_io_schema4.SiteToSiteTunnelType `protobuf:"varint,2,opt,name=tunnel_type,json=tunnelType,proto3,enum=ves.io.schema.SiteToSiteTunnelType" json:"tunnel_type,omitempty"`
	VirtualSite []*ves_io_schema4.ObjectRefType     `protobuf:"bytes,3,rep,name=virtual_site,json=virtualSite" json:"virtual_site,omitempty"`
	Hub         []*ves_io_schema4.ObjectRefType     `protobuf:"bytes,4,rep,name=hub" json:"hub,omitempty"`
}

func (m *ReplaceSpecType) Reset()                    { *m = ReplaceSpecType{} }
func (*ReplaceSpecType) ProtoMessage()               {}
func (*ReplaceSpecType) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{2} }

func (m *ReplaceSpecType) GetType() SiteMeshGroupType {
	if m != nil {
		return m.Type
	}
	return SITE_MESH_GROUP_TYPE_INVALID
}

func (m *ReplaceSpecType) GetTunnelType() ves_io_schema4.SiteToSiteTunnelType {
	if m != nil {
		return m.TunnelType
	}
	return ves_io_schema4.SITE_TO_SITE_TUNNEL_IPSEC_OR_SSL
}

func (m *ReplaceSpecType) GetVirtualSite() []*ves_io_schema4.ObjectRefType {
	if m != nil {
		return m.VirtualSite
	}
	return nil
}

func (m *ReplaceSpecType) GetHub() []*ves_io_schema4.ObjectRefType {
	if m != nil {
		return m.Hub
	}
	return nil
}

// Get site mesh group
//
// x-displayName: "Get Site Mesh Group"
// Gets Site Mesh Group object from system namespace
type GetSpecType struct {
	Type        SiteMeshGroupType                   `protobuf:"varint,1,opt,name=type,proto3,enum=ves.io.schema.site_mesh_group.SiteMeshGroupType" json:"type,omitempty"`
	TunnelType  ves_io_schema4.SiteToSiteTunnelType `protobuf:"varint,2,opt,name=tunnel_type,json=tunnelType,proto3,enum=ves.io.schema.SiteToSiteTunnelType" json:"tunnel_type,omitempty"`
	VirtualSite []*ves_io_schema4.ObjectRefType     `protobuf:"bytes,3,rep,name=virtual_site,json=virtualSite" json:"virtual_site,omitempty"`
	Hub         []*ves_io_schema4.ObjectRefType     `protobuf:"bytes,4,rep,name=hub" json:"hub,omitempty"`
}

func (m *GetSpecType) Reset()                    { *m = GetSpecType{} }
func (*GetSpecType) ProtoMessage()               {}
func (*GetSpecType) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{3} }

func (m *GetSpecType) GetType() SiteMeshGroupType {
	if m != nil {
		return m.Type
	}
	return SITE_MESH_GROUP_TYPE_INVALID
}

func (m *GetSpecType) GetTunnelType() ves_io_schema4.SiteToSiteTunnelType {
	if m != nil {
		return m.TunnelType
	}
	return ves_io_schema4.SITE_TO_SITE_TUNNEL_IPSEC_OR_SSL
}

func (m *GetSpecType) GetVirtualSite() []*ves_io_schema4.ObjectRefType {
	if m != nil {
		return m.VirtualSite
	}
	return nil
}

func (m *GetSpecType) GetHub() []*ves_io_schema4.ObjectRefType {
	if m != nil {
		return m.Hub
	}
	return nil
}

// Site mesh group status
//
// x-displayName: "Status"
// Status of the site mesh group
type SiteMeshGroupStatus struct {
	// other_connected_sites
	//
	// x-displayName: "Other Connected Sites"
	// x-example: "[ce01-sfo, ce01-nyc]"
	// List of sites connected by this Site Mesh Group
	OtherConnectedSites []string `protobuf:"bytes,1,rep,name=other_connected_sites,json=otherConnectedSites" json:"other_connected_sites,omitempty"`
}

func (m *SiteMeshGroupStatus) Reset()                    { *m = SiteMeshGroupStatus{} }
func (*SiteMeshGroupStatus) ProtoMessage()               {}
func (*SiteMeshGroupStatus) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{4} }

func (m *SiteMeshGroupStatus) GetOtherConnectedSites() []string {
	if m != nil {
		return m.OtherConnectedSites
	}
	return nil
}

func init() {
	proto.RegisterType((*GlobalSpecType)(nil), "ves.io.schema.site_mesh_group.GlobalSpecType")
	golang_proto.RegisterType((*GlobalSpecType)(nil), "ves.io.schema.site_mesh_group.GlobalSpecType")
	proto.RegisterType((*CreateSpecType)(nil), "ves.io.schema.site_mesh_group.CreateSpecType")
	golang_proto.RegisterType((*CreateSpecType)(nil), "ves.io.schema.site_mesh_group.CreateSpecType")
	proto.RegisterType((*ReplaceSpecType)(nil), "ves.io.schema.site_mesh_group.ReplaceSpecType")
	golang_proto.RegisterType((*ReplaceSpecType)(nil), "ves.io.schema.site_mesh_group.ReplaceSpecType")
	proto.RegisterType((*GetSpecType)(nil), "ves.io.schema.site_mesh_group.GetSpecType")
	golang_proto.RegisterType((*GetSpecType)(nil), "ves.io.schema.site_mesh_group.GetSpecType")
	proto.RegisterType((*SiteMeshGroupStatus)(nil), "ves.io.schema.site_mesh_group.SiteMeshGroupStatus")
	golang_proto.RegisterType((*SiteMeshGroupStatus)(nil), "ves.io.schema.site_mesh_group.SiteMeshGroupStatus")
	proto.RegisterEnum("ves.io.schema.site_mesh_group.SiteMeshGroupType", SiteMeshGroupType_name, SiteMeshGroupType_value)
	golang_proto.RegisterEnum("ves.io.schema.site_mesh_group.SiteMeshGroupType", SiteMeshGroupType_name, SiteMeshGroupType_value)
}
func (x SiteMeshGroupType) String() string {
	s, ok := SiteMeshGroupType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *GlobalSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType)
	if !ok {
		that2, ok := that.(GlobalSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	if this.TunnelType != that1.TunnelType {
		return false
	}
	if len(this.VirtualSite) != len(that1.VirtualSite) {
		return false
	}
	for i := range this.VirtualSite {
		if !this.VirtualSite[i].Equal(that1.VirtualSite[i]) {
			return false
		}
	}
	if len(this.Hub) != len(that1.Hub) {
		return false
	}
	for i := range this.Hub {
		if !this.Hub[i].Equal(that1.Hub[i]) {
			return false
		}
	}
	return true
}
func (this *CreateSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType)
	if !ok {
		that2, ok := that.(CreateSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	if this.TunnelType != that1.TunnelType {
		return false
	}
	if len(this.VirtualSite) != len(that1.VirtualSite) {
		return false
	}
	for i := range this.VirtualSite {
		if !this.VirtualSite[i].Equal(that1.VirtualSite[i]) {
			return false
		}
	}
	if len(this.Hub) != len(that1.Hub) {
		return false
	}
	for i := range this.Hub {
		if !this.Hub[i].Equal(that1.Hub[i]) {
			return false
		}
	}
	return true
}
func (this *ReplaceSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType)
	if !ok {
		that2, ok := that.(ReplaceSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	if this.TunnelType != that1.TunnelType {
		return false
	}
	if len(this.VirtualSite) != len(that1.VirtualSite) {
		return false
	}
	for i := range this.VirtualSite {
		if !this.VirtualSite[i].Equal(that1.VirtualSite[i]) {
			return false
		}
	}
	if len(this.Hub) != len(that1.Hub) {
		return false
	}
	for i := range this.Hub {
		if !this.Hub[i].Equal(that1.Hub[i]) {
			return false
		}
	}
	return true
}
func (this *GetSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType)
	if !ok {
		that2, ok := that.(GetSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	if this.TunnelType != that1.TunnelType {
		return false
	}
	if len(this.VirtualSite) != len(that1.VirtualSite) {
		return false
	}
	for i := range this.VirtualSite {
		if !this.VirtualSite[i].Equal(that1.VirtualSite[i]) {
			return false
		}
	}
	if len(this.Hub) != len(that1.Hub) {
		return false
	}
	for i := range this.Hub {
		if !this.Hub[i].Equal(that1.Hub[i]) {
			return false
		}
	}
	return true
}
func (this *SiteMeshGroupStatus) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SiteMeshGroupStatus)
	if !ok {
		that2, ok := that.(SiteMeshGroupStatus)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.OtherConnectedSites) != len(that1.OtherConnectedSites) {
		return false
	}
	for i := range this.OtherConnectedSites {
		if this.OtherConnectedSites[i] != that1.OtherConnectedSites[i] {
			return false
		}
	}
	return true
}
func (this *GlobalSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&site_mesh_group.GlobalSpecType{")
	s = append(s, "Type: "+fmt.Sprintf("%#v", this.Type)+",\n")
	s = append(s, "TunnelType: "+fmt.Sprintf("%#v", this.TunnelType)+",\n")
	if this.VirtualSite != nil {
		s = append(s, "VirtualSite: "+fmt.Sprintf("%#v", this.VirtualSite)+",\n")
	}
	if this.Hub != nil {
		s = append(s, "Hub: "+fmt.Sprintf("%#v", this.Hub)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CreateSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&site_mesh_group.CreateSpecType{")
	s = append(s, "Type: "+fmt.Sprintf("%#v", this.Type)+",\n")
	s = append(s, "TunnelType: "+fmt.Sprintf("%#v", this.TunnelType)+",\n")
	if this.VirtualSite != nil {
		s = append(s, "VirtualSite: "+fmt.Sprintf("%#v", this.VirtualSite)+",\n")
	}
	if this.Hub != nil {
		s = append(s, "Hub: "+fmt.Sprintf("%#v", this.Hub)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ReplaceSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&site_mesh_group.ReplaceSpecType{")
	s = append(s, "Type: "+fmt.Sprintf("%#v", this.Type)+",\n")
	s = append(s, "TunnelType: "+fmt.Sprintf("%#v", this.TunnelType)+",\n")
	if this.VirtualSite != nil {
		s = append(s, "VirtualSite: "+fmt.Sprintf("%#v", this.VirtualSite)+",\n")
	}
	if this.Hub != nil {
		s = append(s, "Hub: "+fmt.Sprintf("%#v", this.Hub)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&site_mesh_group.GetSpecType{")
	s = append(s, "Type: "+fmt.Sprintf("%#v", this.Type)+",\n")
	s = append(s, "TunnelType: "+fmt.Sprintf("%#v", this.TunnelType)+",\n")
	if this.VirtualSite != nil {
		s = append(s, "VirtualSite: "+fmt.Sprintf("%#v", this.VirtualSite)+",\n")
	}
	if this.Hub != nil {
		s = append(s, "Hub: "+fmt.Sprintf("%#v", this.Hub)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SiteMeshGroupStatus) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&site_mesh_group.SiteMeshGroupStatus{")
	s = append(s, "OtherConnectedSites: "+fmt.Sprintf("%#v", this.OtherConnectedSites)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringTypes(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *GlobalSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GlobalSpecType) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Type != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.Type))
	}
	if m.TunnelType != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.TunnelType))
	}
	if len(m.VirtualSite) > 0 {
		for _, msg := range m.VirtualSite {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintTypes(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Hub) > 0 {
		for _, msg := range m.Hub {
			dAtA[i] = 0x22
			i++
			i = encodeVarintTypes(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *CreateSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateSpecType) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Type != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.Type))
	}
	if m.TunnelType != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.TunnelType))
	}
	if len(m.VirtualSite) > 0 {
		for _, msg := range m.VirtualSite {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintTypes(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Hub) > 0 {
		for _, msg := range m.Hub {
			dAtA[i] = 0x22
			i++
			i = encodeVarintTypes(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *ReplaceSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplaceSpecType) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Type != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.Type))
	}
	if m.TunnelType != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.TunnelType))
	}
	if len(m.VirtualSite) > 0 {
		for _, msg := range m.VirtualSite {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintTypes(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Hub) > 0 {
		for _, msg := range m.Hub {
			dAtA[i] = 0x22
			i++
			i = encodeVarintTypes(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *GetSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetSpecType) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Type != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.Type))
	}
	if m.TunnelType != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.TunnelType))
	}
	if len(m.VirtualSite) > 0 {
		for _, msg := range m.VirtualSite {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintTypes(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Hub) > 0 {
		for _, msg := range m.Hub {
			dAtA[i] = 0x22
			i++
			i = encodeVarintTypes(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *SiteMeshGroupStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SiteMeshGroupStatus) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.OtherConnectedSites) > 0 {
		for _, s := range m.OtherConnectedSites {
			dAtA[i] = 0xa
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	return i, nil
}

func encodeVarintTypes(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func NewPopulatedGlobalSpecType(r randyTypes, easy bool) *GlobalSpecType {
	this := &GlobalSpecType{}
	this.Type = SiteMeshGroupType([]int32{0, 1, 2, 3}[r.Intn(4)])
	this.TunnelType = ves_io_schema4.SiteToSiteTunnelType([]int32{0, 1, 2}[r.Intn(3)])
	if r.Intn(10) != 0 {
		v1 := r.Intn(5)
		this.VirtualSite = make([]*ves_io_schema4.ObjectRefType, v1)
		for i := 0; i < v1; i++ {
			this.VirtualSite[i] = ves_io_schema4.NewPopulatedObjectRefType(r, easy)
		}
	}
	if r.Intn(10) != 0 {
		v2 := r.Intn(5)
		this.Hub = make([]*ves_io_schema4.ObjectRefType, v2)
		for i := 0; i < v2; i++ {
			this.Hub[i] = ves_io_schema4.NewPopulatedObjectRefType(r, easy)
		}
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedCreateSpecType(r randyTypes, easy bool) *CreateSpecType {
	this := &CreateSpecType{}
	this.Type = SiteMeshGroupType([]int32{0, 1, 2, 3}[r.Intn(4)])
	this.TunnelType = ves_io_schema4.SiteToSiteTunnelType([]int32{0, 1, 2}[r.Intn(3)])
	if r.Intn(10) != 0 {
		v3 := r.Intn(5)
		this.VirtualSite = make([]*ves_io_schema4.ObjectRefType, v3)
		for i := 0; i < v3; i++ {
			this.VirtualSite[i] = ves_io_schema4.NewPopulatedObjectRefType(r, easy)
		}
	}
	if r.Intn(10) != 0 {
		v4 := r.Intn(5)
		this.Hub = make([]*ves_io_schema4.ObjectRefType, v4)
		for i := 0; i < v4; i++ {
			this.Hub[i] = ves_io_schema4.NewPopulatedObjectRefType(r, easy)
		}
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedReplaceSpecType(r randyTypes, easy bool) *ReplaceSpecType {
	this := &ReplaceSpecType{}
	this.Type = SiteMeshGroupType([]int32{0, 1, 2, 3}[r.Intn(4)])
	this.TunnelType = ves_io_schema4.SiteToSiteTunnelType([]int32{0, 1, 2}[r.Intn(3)])
	if r.Intn(10) != 0 {
		v5 := r.Intn(5)
		this.VirtualSite = make([]*ves_io_schema4.ObjectRefType, v5)
		for i := 0; i < v5; i++ {
			this.VirtualSite[i] = ves_io_schema4.NewPopulatedObjectRefType(r, easy)
		}
	}
	if r.Intn(10) != 0 {
		v6 := r.Intn(5)
		this.Hub = make([]*ves_io_schema4.ObjectRefType, v6)
		for i := 0; i < v6; i++ {
			this.Hub[i] = ves_io_schema4.NewPopulatedObjectRefType(r, easy)
		}
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedGetSpecType(r randyTypes, easy bool) *GetSpecType {
	this := &GetSpecType{}
	this.Type = SiteMeshGroupType([]int32{0, 1, 2, 3}[r.Intn(4)])
	this.TunnelType = ves_io_schema4.SiteToSiteTunnelType([]int32{0, 1, 2}[r.Intn(3)])
	if r.Intn(10) != 0 {
		v7 := r.Intn(5)
		this.VirtualSite = make([]*ves_io_schema4.ObjectRefType, v7)
		for i := 0; i < v7; i++ {
			this.VirtualSite[i] = ves_io_schema4.NewPopulatedObjectRefType(r, easy)
		}
	}
	if r.Intn(10) != 0 {
		v8 := r.Intn(5)
		this.Hub = make([]*ves_io_schema4.ObjectRefType, v8)
		for i := 0; i < v8; i++ {
			this.Hub[i] = ves_io_schema4.NewPopulatedObjectRefType(r, easy)
		}
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedSiteMeshGroupStatus(r randyTypes, easy bool) *SiteMeshGroupStatus {
	this := &SiteMeshGroupStatus{}
	v9 := r.Intn(10)
	this.OtherConnectedSites = make([]string, v9)
	for i := 0; i < v9; i++ {
		this.OtherConnectedSites[i] = string(randStringTypes(r))
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

type randyTypes interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneTypes(r randyTypes) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringTypes(r randyTypes) string {
	v10 := r.Intn(100)
	tmps := make([]rune, v10)
	for i := 0; i < v10; i++ {
		tmps[i] = randUTF8RuneTypes(r)
	}
	return string(tmps)
}
func randUnrecognizedTypes(r randyTypes, maxFieldNumber int) (dAtA []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		dAtA = randFieldTypes(dAtA, r, fieldNumber, wire)
	}
	return dAtA
}
func randFieldTypes(dAtA []byte, r randyTypes, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		dAtA = encodeVarintPopulateTypes(dAtA, uint64(key))
		v11 := r.Int63()
		if r.Intn(2) == 0 {
			v11 *= -1
		}
		dAtA = encodeVarintPopulateTypes(dAtA, uint64(v11))
	case 1:
		dAtA = encodeVarintPopulateTypes(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		dAtA = encodeVarintPopulateTypes(dAtA, uint64(key))
		ll := r.Intn(100)
		dAtA = encodeVarintPopulateTypes(dAtA, uint64(ll))
		for j := 0; j < ll; j++ {
			dAtA = append(dAtA, byte(r.Intn(256)))
		}
	default:
		dAtA = encodeVarintPopulateTypes(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return dAtA
}
func encodeVarintPopulateTypes(dAtA []byte, v uint64) []byte {
	for v >= 1<<7 {
		dAtA = append(dAtA, uint8(uint64(v)&0x7f|0x80))
		v >>= 7
	}
	dAtA = append(dAtA, uint8(v))
	return dAtA
}
func (m *GlobalSpecType) Size() (n int) {
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovTypes(uint64(m.Type))
	}
	if m.TunnelType != 0 {
		n += 1 + sovTypes(uint64(m.TunnelType))
	}
	if len(m.VirtualSite) > 0 {
		for _, e := range m.VirtualSite {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if len(m.Hub) > 0 {
		for _, e := range m.Hub {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *CreateSpecType) Size() (n int) {
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovTypes(uint64(m.Type))
	}
	if m.TunnelType != 0 {
		n += 1 + sovTypes(uint64(m.TunnelType))
	}
	if len(m.VirtualSite) > 0 {
		for _, e := range m.VirtualSite {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if len(m.Hub) > 0 {
		for _, e := range m.Hub {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *ReplaceSpecType) Size() (n int) {
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovTypes(uint64(m.Type))
	}
	if m.TunnelType != 0 {
		n += 1 + sovTypes(uint64(m.TunnelType))
	}
	if len(m.VirtualSite) > 0 {
		for _, e := range m.VirtualSite {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if len(m.Hub) > 0 {
		for _, e := range m.Hub {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *GetSpecType) Size() (n int) {
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovTypes(uint64(m.Type))
	}
	if m.TunnelType != 0 {
		n += 1 + sovTypes(uint64(m.TunnelType))
	}
	if len(m.VirtualSite) > 0 {
		for _, e := range m.VirtualSite {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if len(m.Hub) > 0 {
		for _, e := range m.Hub {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *SiteMeshGroupStatus) Size() (n int) {
	var l int
	_ = l
	if len(m.OtherConnectedSites) > 0 {
		for _, s := range m.OtherConnectedSites {
			l = len(s)
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func sovTypes(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozTypes(x uint64) (n int) {
	return sovTypes(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *GlobalSpecType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType{`,
		`Type:` + fmt.Sprintf("%v", this.Type) + `,`,
		`TunnelType:` + fmt.Sprintf("%v", this.TunnelType) + `,`,
		`VirtualSite:` + strings.Replace(fmt.Sprintf("%v", this.VirtualSite), "ObjectRefType", "ves_io_schema4.ObjectRefType", 1) + `,`,
		`Hub:` + strings.Replace(fmt.Sprintf("%v", this.Hub), "ObjectRefType", "ves_io_schema4.ObjectRefType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType{`,
		`Type:` + fmt.Sprintf("%v", this.Type) + `,`,
		`TunnelType:` + fmt.Sprintf("%v", this.TunnelType) + `,`,
		`VirtualSite:` + strings.Replace(fmt.Sprintf("%v", this.VirtualSite), "ObjectRefType", "ves_io_schema4.ObjectRefType", 1) + `,`,
		`Hub:` + strings.Replace(fmt.Sprintf("%v", this.Hub), "ObjectRefType", "ves_io_schema4.ObjectRefType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType{`,
		`Type:` + fmt.Sprintf("%v", this.Type) + `,`,
		`TunnelType:` + fmt.Sprintf("%v", this.TunnelType) + `,`,
		`VirtualSite:` + strings.Replace(fmt.Sprintf("%v", this.VirtualSite), "ObjectRefType", "ves_io_schema4.ObjectRefType", 1) + `,`,
		`Hub:` + strings.Replace(fmt.Sprintf("%v", this.Hub), "ObjectRefType", "ves_io_schema4.ObjectRefType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType{`,
		`Type:` + fmt.Sprintf("%v", this.Type) + `,`,
		`TunnelType:` + fmt.Sprintf("%v", this.TunnelType) + `,`,
		`VirtualSite:` + strings.Replace(fmt.Sprintf("%v", this.VirtualSite), "ObjectRefType", "ves_io_schema4.ObjectRefType", 1) + `,`,
		`Hub:` + strings.Replace(fmt.Sprintf("%v", this.Hub), "ObjectRefType", "ves_io_schema4.ObjectRefType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SiteMeshGroupStatus) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SiteMeshGroupStatus{`,
		`OtherConnectedSites:` + fmt.Sprintf("%v", this.OtherConnectedSites) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringTypes(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *GlobalSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GlobalSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GlobalSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (SiteMeshGroupType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TunnelType", wireType)
			}
			m.TunnelType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TunnelType |= (ves_io_schema4.SiteToSiteTunnelType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VirtualSite", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VirtualSite = append(m.VirtualSite, &ves_io_schema4.ObjectRefType{})
			if err := m.VirtualSite[len(m.VirtualSite)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hub", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hub = append(m.Hub, &ves_io_schema4.ObjectRefType{})
			if err := m.Hub[len(m.Hub)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (SiteMeshGroupType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TunnelType", wireType)
			}
			m.TunnelType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TunnelType |= (ves_io_schema4.SiteToSiteTunnelType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VirtualSite", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VirtualSite = append(m.VirtualSite, &ves_io_schema4.ObjectRefType{})
			if err := m.VirtualSite[len(m.VirtualSite)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hub", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hub = append(m.Hub, &ves_io_schema4.ObjectRefType{})
			if err := m.Hub[len(m.Hub)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplaceSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplaceSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplaceSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (SiteMeshGroupType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TunnelType", wireType)
			}
			m.TunnelType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TunnelType |= (ves_io_schema4.SiteToSiteTunnelType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VirtualSite", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VirtualSite = append(m.VirtualSite, &ves_io_schema4.ObjectRefType{})
			if err := m.VirtualSite[len(m.VirtualSite)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hub", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hub = append(m.Hub, &ves_io_schema4.ObjectRefType{})
			if err := m.Hub[len(m.Hub)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (SiteMeshGroupType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TunnelType", wireType)
			}
			m.TunnelType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TunnelType |= (ves_io_schema4.SiteToSiteTunnelType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VirtualSite", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VirtualSite = append(m.VirtualSite, &ves_io_schema4.ObjectRefType{})
			if err := m.VirtualSite[len(m.VirtualSite)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hub", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hub = append(m.Hub, &ves_io_schema4.ObjectRefType{})
			if err := m.Hub[len(m.Hub)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SiteMeshGroupStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SiteMeshGroupStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SiteMeshGroupStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OtherConnectedSites", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OtherConnectedSites = append(m.OtherConnectedSites, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTypes(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthTypes
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipTypes(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthTypes = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTypes   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("ves.io/schema/site_mesh_group/types.proto", fileDescriptorTypes) }
func init() {
	golang_proto.RegisterFile("ves.io/schema/site_mesh_group/types.proto", fileDescriptorTypes)
}

var fileDescriptorTypes = []byte{
	// 737 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x96, 0xcf, 0x4f, 0xd3, 0x60,
	0x18, 0xc7, 0xf7, 0xae, 0x80, 0xfa, 0x4e, 0x61, 0x96, 0x18, 0x47, 0x81, 0xd7, 0x65, 0x46, 0x33,
	0x0d, 0xb4, 0x3a, 0x3c, 0x79, 0x20, 0x71, 0x30, 0xc7, 0xe2, 0x60, 0xcb, 0xba, 0x99, 0xe8, 0xc1,
	0xa6, 0x1b, 0x2f, 0x5d, 0xb5, 0xdb, 0xdb, 0xb4, 0x6f, 0xa7, 0x1c, 0x48, 0x08, 0x17, 0xaf, 0xc6,
	0xc4, 0x7f, 0xc1, 0x18, 0xfe, 0x02, 0xa3, 0x1e, 0x38, 0x1a, 0x63, 0x22, 0x47, 0xe2, 0xc9, 0x95,
	0x8b, 0xde, 0x88, 0x27, 0x8f, 0xa6, 0xef, 0xc6, 0x8f, 0x96, 0xc5, 0x10, 0xe4, 0xc8, 0x65, 0xeb,
	0x9b, 0xef, 0xf7, 0xf9, 0x3e, 0xcf, 0xf3, 0xe9, 0xb2, 0x16, 0xde, 0x68, 0x61, 0x5b, 0xd4, 0x89,
	0x64, 0xd7, 0xea, 0xb8, 0xa1, 0x4a, 0xb6, 0x4e, 0xb1, 0xd2, 0xc0, 0x76, 0x5d, 0xd1, 0x2c, 0xe2,
	0x98, 0x12, 0x5d, 0x36, 0xb1, 0x2d, 0x9a, 0x16, 0xa1, 0x84, 0x1f, 0xef, 0x58, 0xc5, 0x8e, 0x55,
	0x0c, 0x58, 0x85, 0x49, 0x4d, 0xa7, 0x75, 0xa7, 0x2a, 0xd6, 0x48, 0x43, 0xd2, 0x88, 0x46, 0x24,
	0x56, 0x55, 0x75, 0x96, 0xd8, 0x89, 0x1d, 0xd8, 0x55, 0x27, 0x4d, 0xb8, 0xa2, 0x11, 0xa2, 0x19,
	0x78, 0xdf, 0x45, 0xf5, 0x06, 0xb6, 0xa9, 0xda, 0x30, 0xbb, 0x86, 0xcb, 0xfe, 0xc9, 0x9a, 0x98,
	0x76, 0x85, 0x51, 0xbf, 0x40, 0x4c, 0xaa, 0x93, 0x66, 0x77, 0x48, 0x61, 0xdc, 0x2f, 0x9a, 0x2d,
	0xaa, 0x1c, 0xd8, 0x41, 0x40, 0x87, 0xd7, 0x3d, 0xb8, 0xa3, 0x30, 0xe2, 0xd7, 0x0f, 0x4a, 0x63,
	0x7e, 0xa9, 0xa5, 0x1a, 0xfa, 0xa2, 0x4a, 0x71, 0x57, 0x8d, 0x07, 0x54, 0x1d, 0x3f, 0x57, 0x7c,
	0x93, 0x25, 0x5e, 0x72, 0x70, 0x30, 0x6b, 0x90, 0xaa, 0x6a, 0xc8, 0x26, 0xae, 0x95, 0x97, 0x4d,
	0xcc, 0xcb, 0xb0, 0xcf, 0xeb, 0x10, 0x03, 0x71, 0x90, 0x1c, 0x4c, 0xdd, 0x12, 0xff, 0x09, 0x58,
	0x94, 0x75, 0x8a, 0xe7, 0xb1, 0x5d, 0xcf, 0x7a, 0x27, 0xaf, 0x3e, 0x7d, 0xe1, 0xc3, 0xaf, 0x0d,
	0xee, 0xec, 0x1a, 0xe8, 0x17, 0x38, 0x10, 0xe6, 0x4a, 0x2c, 0x8c, 0x6f, 0xc2, 0x08, 0x75, 0x9a,
	0x4d, 0x6c, 0xb0, 0xc5, 0x63, 0x61, 0x96, 0x7d, 0x35, 0x90, 0xed, 0x65, 0x95, 0x09, 0xfb, 0x64,
	0x5e, 0x16, 0x97, 0xfc, 0xfe, 0x11, 0x8c, 0xc8, 0xb9, 0x72, 0x46, 0x29, 0x17, 0x94, 0xce, 0x77,
	0x65, 0x61, 0x21, 0x93, 0x57, 0x72, 0x45, 0x39, 0x33, 0xe3, 0xf5, 0x1a, 0x58, 0x03, 0x9c, 0x00,
	0x40, 0x09, 0xd2, 0xbd, 0x2a, 0xfe, 0x09, 0x3c, 0xdf, 0xd2, 0x2d, 0xea, 0xa8, 0x86, 0xe2, 0x4d,
	0x1c, 0xe3, 0xe2, 0x5c, 0x32, 0x92, 0x1a, 0x0b, 0x34, 0x2c, 0x54, 0x9f, 0xe2, 0x1a, 0x2d, 0xe1,
	0x25, 0xd6, 0x69, 0x7c, 0x7d, 0xc5, 0x57, 0xb4, 0xfa, 0x09, 0x00, 0x2f, 0xbf, 0xff, 0x35, 0x08,
	0x47, 0x41, 0x29, 0xd2, 0xd5, 0xbc, 0xf9, 0xf8, 0x22, 0xe4, 0xea, 0x4e, 0x35, 0xd6, 0x77, 0x84,
	0xd8, 0xf8, 0xfa, 0xca, 0x50, 0x80, 0x5a, 0x20, 0xd9, 0x8b, 0x4a, 0x7c, 0x0b, 0xc3, 0xc1, 0x19,
	0x0b, 0xab, 0x14, 0xef, 0xdd, 0x89, 0xd9, 0xff, 0xbb, 0x13, 0x5d, 0xf4, 0xb3, 0xc7, 0x45, 0xef,
	0x03, 0x5a, 0x3c, 0x06, 0xd0, 0xa1, 0x00, 0x50, 0x3f, 0xc2, 0xf4, 0xd1, 0x11, 0xf2, 0x87, 0x11,
	0x32, 0x68, 0x77, 0x47, 0xbf, 0x4c, 0x07, 0x7e, 0xbe, 0xbf, 0xa7, 0xcf, 0xdc, 0x9e, 0x98, 0x9a,
	0xb8, 0x33, 0x91, 0x4a, 0x6c, 0x86, 0xe1, 0x50, 0x09, 0x9b, 0x86, 0x5a, 0x3b, 0x45, 0x7a, 0x42,
	0x48, 0xbf, 0x86, 0x61, 0x24, 0x8b, 0xe9, 0x29, 0xce, 0x93, 0xc1, 0x99, 0x83, 0xc3, 0x3e, 0x26,
	0x32, 0x55, 0xa9, 0x63, 0xf3, 0x29, 0x78, 0x89, 0xd0, 0x3a, 0xb6, 0x94, 0x1a, 0x69, 0x36, 0x71,
	0x8d, 0xe2, 0x45, 0x36, 0x9c, 0x1d, 0x03, 0x71, 0x2e, 0x79, 0xae, 0x34, 0xcc, 0xc4, 0x99, 0x5d,
	0xcd, 0x4b, 0xb0, 0x6f, 0xbe, 0x05, 0xf0, 0xe2, 0x21, 0xbe, 0xfc, 0x35, 0x38, 0xc6, 0xfe, 0x32,
	0xe7, 0x33, 0xf2, 0x9c, 0x92, 0x2d, 0x15, 0x2a, 0x45, 0xa5, 0xfc, 0xa8, 0x98, 0x51, 0x72, 0x0b,
	0x0f, 0xef, 0xe5, 0x73, 0xb3, 0xd1, 0x90, 0xc0, 0xad, 0xae, 0x00, 0xfe, 0x3a, 0x4c, 0xf4, 0xb4,
	0xcd, 0x55, 0xd2, 0xca, 0xfd, 0x4a, 0x3e, 0xcf, 0x84, 0x28, 0xe0, 0x11, 0x14, 0x7a, 0xfa, 0xe4,
	0x62, 0xe1, 0x41, 0x26, 0x1a, 0xe6, 0x13, 0x10, 0xf5, 0xd4, 0xf7, 0x33, 0xb8, 0xf4, 0x1b, 0xb0,
	0xd9, 0x46, 0xa1, 0xad, 0x36, 0x0a, 0xed, 0xb4, 0x11, 0xf8, 0xd3, 0x46, 0x60, 0xd5, 0x45, 0xe0,
	0x9d, 0x8b, 0xc0, 0x7b, 0x17, 0x81, 0x0d, 0x17, 0x81, 0xcf, 0x2e, 0x02, 0x9b, 0x2e, 0x02, 0x5b,
	0x2e, 0x02, 0x3f, 0x5c, 0x04, 0x7e, 0xba, 0x28, 0xb4, 0xe3, 0x22, 0xf0, 0x6a, 0x1b, 0x85, 0x36,
	0xb6, 0x11, 0x78, 0x2c, 0x6b, 0xc4, 0x7c, 0xa6, 0x89, 0x2d, 0x62, 0x50, 0x6c, 0x59, 0xaa, 0xe8,
	0xd8, 0x12, 0xbb, 0x58, 0x22, 0x56, 0x63, 0xd2, 0xb4, 0x48, 0x4b, 0x5f, 0xc4, 0xd6, 0xe4, 0xae,
	0x2c, 0x99, 0x55, 0x8d, 0x48, 0xf8, 0x05, 0xdd, 0x7d, 0xbc, 0xf6, 0x7c, 0xa9, 0xa8, 0x0e, 0xb0,
	0x07, 0xe2, 0xd4, 0xdf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x42, 0xfa, 0xd1, 0xdf, 0x7c, 0x08, 0x00,
	0x00,
}
