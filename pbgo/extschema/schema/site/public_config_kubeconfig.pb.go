// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ves.io/schema/site/public_config_kubeconfig.proto

package site

import proto "github.com/gogo/protobuf/proto"
import golang_proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"
import _ "github.com/gogo/googleapis/google/api"
import google_api2 "google.golang.org/genproto/googleapis/api/httpbody"
import _ "github.com/gogo/protobuf/types"
import _ "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
import _ "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/vesenv"

import context "golang.org/x/net/context"
import grpc "google.golang.org/grpc"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for ConfigKubeConfigAPI service

type ConfigKubeConfigAPIClient interface {
	// Create K8s Cluster Local Kube Config
	//
	// x-displayName: "Create K8s Cluster Local Kube Config"
	// Down load kube config for local k8s cluster access
	CreateLocalKubeConfig(ctx context.Context, in *CreateKubeConfigReq, opts ...grpc.CallOption) (*google_api2.HttpBody, error)
	// List Local Kube Configs
	//
	// x-displayName: "List Local Kube Configs"
	// Returns list of all local active kubeconfig minted for this site
	ListLocalKubeConfig(ctx context.Context, in *ListKubeConfigReq, opts ...grpc.CallOption) (*ListKubeConfigRsp, error)
}

type configKubeConfigAPIClient struct {
	cc *grpc.ClientConn
}

func NewConfigKubeConfigAPIClient(cc *grpc.ClientConn) ConfigKubeConfigAPIClient {
	return &configKubeConfigAPIClient{cc}
}

func (c *configKubeConfigAPIClient) CreateLocalKubeConfig(ctx context.Context, in *CreateKubeConfigReq, opts ...grpc.CallOption) (*google_api2.HttpBody, error) {
	out := new(google_api2.HttpBody)
	err := grpc.Invoke(ctx, "/ves.io.schema.site.ConfigKubeConfigAPI/CreateLocalKubeConfig", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configKubeConfigAPIClient) ListLocalKubeConfig(ctx context.Context, in *ListKubeConfigReq, opts ...grpc.CallOption) (*ListKubeConfigRsp, error) {
	out := new(ListKubeConfigRsp)
	err := grpc.Invoke(ctx, "/ves.io.schema.site.ConfigKubeConfigAPI/ListLocalKubeConfig", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ConfigKubeConfigAPI service

type ConfigKubeConfigAPIServer interface {
	// Create K8s Cluster Local Kube Config
	//
	// x-displayName: "Create K8s Cluster Local Kube Config"
	// Down load kube config for local k8s cluster access
	CreateLocalKubeConfig(context.Context, *CreateKubeConfigReq) (*google_api2.HttpBody, error)
	// List Local Kube Configs
	//
	// x-displayName: "List Local Kube Configs"
	// Returns list of all local active kubeconfig minted for this site
	ListLocalKubeConfig(context.Context, *ListKubeConfigReq) (*ListKubeConfigRsp, error)
}

func RegisterConfigKubeConfigAPIServer(s *grpc.Server, srv ConfigKubeConfigAPIServer) {
	s.RegisterService(&_ConfigKubeConfigAPI_serviceDesc, srv)
}

func _ConfigKubeConfigAPI_CreateLocalKubeConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateKubeConfigReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigKubeConfigAPIServer).CreateLocalKubeConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ves.io.schema.site.ConfigKubeConfigAPI/CreateLocalKubeConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigKubeConfigAPIServer).CreateLocalKubeConfig(ctx, req.(*CreateKubeConfigReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigKubeConfigAPI_ListLocalKubeConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListKubeConfigReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigKubeConfigAPIServer).ListLocalKubeConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ves.io.schema.site.ConfigKubeConfigAPI/ListLocalKubeConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigKubeConfigAPIServer).ListLocalKubeConfig(ctx, req.(*ListKubeConfigReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _ConfigKubeConfigAPI_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ves.io.schema.site.ConfigKubeConfigAPI",
	HandlerType: (*ConfigKubeConfigAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateLocalKubeConfig",
			Handler:    _ConfigKubeConfigAPI_CreateLocalKubeConfig_Handler,
		},
		{
			MethodName: "ListLocalKubeConfig",
			Handler:    _ConfigKubeConfigAPI_ListLocalKubeConfig_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ves.io/schema/site/public_config_kubeconfig.proto",
}

func init() {
	proto.RegisterFile("ves.io/schema/site/public_config_kubeconfig.proto", fileDescriptorPublicConfigKubeconfig)
}
func init() {
	golang_proto.RegisterFile("ves.io/schema/site/public_config_kubeconfig.proto", fileDescriptorPublicConfigKubeconfig)
}

var fileDescriptorPublicConfigKubeconfig = []byte{
	// 487 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x52, 0xbf, 0x6b, 0x14, 0x41,
	0x18, 0xbd, 0xb9, 0x80, 0xc5, 0x35, 0x86, 0x8d, 0xc2, 0xe5, 0x94, 0x11, 0x0e, 0x24, 0x20, 0xec,
	0x0c, 0x6a, 0x23, 0xa2, 0x48, 0x92, 0x26, 0x62, 0x40, 0xb1, 0x54, 0x21, 0xcc, 0xee, 0x7d, 0xb7,
	0x37, 0xde, 0xee, 0x7e, 0xe3, 0xce, 0xb7, 0xab, 0xa7, 0x04, 0x24, 0x7f, 0x81, 0xe0, 0x3f, 0x61,
	0x6f, 0x13, 0x48, 0x13, 0xab, 0xa4, 0x92, 0xa0, 0x8d, 0xa5, 0xb7, 0xb1, 0xb0, 0xcc, 0x9f, 0x20,
	0xb7, 0xbb, 0xf7, 0x4b, 0xaf, 0x10, 0xd2, 0xbd, 0x99, 0xf7, 0xbe, 0xc7, 0x7b, 0x33, 0x5f, 0xe3,
	0x66, 0x06, 0x56, 0x68, 0x94, 0xd6, 0xef, 0x41, 0xa4, 0xa4, 0xd5, 0x04, 0xd2, 0xa4, 0x5e, 0xa8,
	0xfd, 0x1d, 0x1f, 0xe3, 0xae, 0x0e, 0x76, 0xfa, 0xa9, 0x07, 0x25, 0x14, 0x26, 0x41, 0x42, 0xc7,
	0x29, 0x47, 0x44, 0x39, 0x22, 0x46, 0x23, 0x2d, 0x37, 0xd0, 0xd4, 0x4b, 0x3d, 0xe1, 0x63, 0x24,
	0x03, 0x0c, 0x50, 0x16, 0x52, 0x2f, 0xed, 0x16, 0xa7, 0xe2, 0x50, 0xa0, 0xd2, 0xa2, 0x75, 0x35,
	0x40, 0x0c, 0x42, 0x90, 0xca, 0x68, 0xa9, 0xe2, 0x18, 0x49, 0x91, 0xc6, 0xd8, 0x56, 0xec, 0xea,
	0x0c, 0xdb, 0x23, 0x32, 0x1e, 0x76, 0x06, 0x15, 0x75, 0xad, 0xa2, 0x26, 0xf6, 0xa4, 0x23, 0xb0,
	0xa4, 0x22, 0x53, 0x09, 0xae, 0xcc, 0xf7, 0x41, 0x33, 0x6b, 0xcc, 0x17, 0x94, 0xa5, 0x81, 0x81,
	0x31, 0xdf, 0x9e, 0xe7, 0x33, 0xb0, 0x10, 0x67, 0xf3, 0x1e, 0xb7, 0xf6, 0x97, 0x1a, 0x2b, 0x9b,
	0xc5, 0x73, 0x3c, 0x4a, 0x3d, 0x28, 0xd1, 0xfa, 0x93, 0x87, 0xce, 0x67, 0xd6, 0xb8, 0xbc, 0x99,
	0x80, 0x22, 0xd8, 0x46, 0x5f, 0x85, 0x53, 0xd2, 0x59, 0x13, 0xff, 0x3e, 0x98, 0x28, 0xa5, 0x53,
	0xd5, 0x53, 0x78, 0xd5, 0xba, 0x24, 0xca, 0x76, 0x42, 0x19, 0x2d, 0xb6, 0x88, 0xcc, 0x06, 0x76,
	0x06, 0xed, 0xe7, 0xf9, 0x51, 0x73, 0x39, 0x03, 0xeb, 0x6a, 0x74, 0xfb, 0x77, 0xac, 0xfb, 0x3a,
	0xd1, 0x04, 0x7b, 0xdf, 0x7f, 0x7d, 0xac, 0xaf, 0xb7, 0xef, 0x55, 0x7f, 0x25, 0x63, 0x15, 0x81,
	0x35, 0xca, 0x07, 0x2b, 0xdf, 0x4d, 0xf0, 0x6e, 0xd1, 0xb0, 0xba, 0xd9, 0x95, 0xe1, 0x28, 0x97,
	0x3b, 0xfd, 0xce, 0xbb, 0xec, 0x86, 0xf3, 0x85, 0x35, 0x56, 0xb6, 0xb5, 0xa5, 0xbf, 0x33, 0x5f,
	0x5f, 0x94, 0x79, 0x24, 0x9c, 0x4f, 0xfc, 0x3f, 0x32, 0x6b, 0xda, 0x2f, 0x8e, 0xf7, 0xeb, 0x2c,
	0x3f, 0x6a, 0x5e, 0x9c, 0xa9, 0x91, 0x80, 0xea, 0x14, 0x2d, 0x1e, 0x38, 0xf7, 0xcf, 0xd3, 0xc2,
	0xb6, 0xd6, 0x0e, 0x0f, 0xd8, 0xd2, 0xb7, 0x03, 0xb6, 0xba, 0x20, 0xcb, 0x63, 0xef, 0x25, 0xf8,
	0xb4, 0xf7, 0xb5, 0x59, 0x5f, 0x66, 0x1b, 0x6f, 0x4f, 0x86, 0xbc, 0xf6, 0x63, 0xc8, 0x6b, 0x67,
	0x43, 0xce, 0xde, 0xe7, 0x9c, 0x7d, 0xca, 0x39, 0x3b, 0xce, 0x39, 0x3b, 0xc9, 0x39, 0xfb, 0x99,
	0x73, 0xf6, 0x3b, 0xe7, 0xb5, 0xb3, 0x9c, 0xb3, 0x0f, 0xa7, 0xbc, 0x76, 0x78, 0xca, 0xd9, 0xb3,
	0xad, 0x00, 0x4d, 0x3f, 0x10, 0x19, 0x86, 0x04, 0x49, 0xa2, 0x44, 0x6a, 0x65, 0x01, 0xba, 0x98,
	0x44, 0xae, 0x49, 0x30, 0xd3, 0x1d, 0x48, 0xdc, 0x31, 0x2d, 0x8d, 0x17, 0xa0, 0x84, 0x37, 0x34,
	0xde, 0xaf, 0xe9, 0x9a, 0x79, 0x17, 0x8a, 0xed, 0xb9, 0xfd, 0x27, 0x00, 0x00, 0xff, 0xff, 0xf9,
	0x24, 0x89, 0x15, 0x70, 0x03, 0x00, 0x00,
}
