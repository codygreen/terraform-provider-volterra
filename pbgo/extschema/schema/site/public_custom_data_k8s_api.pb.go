// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ves.io/schema/site/public_custom_data_k8s_api.proto

package site

import proto "github.com/gogo/protobuf/proto"
import golang_proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"
import _ "github.com/gogo/googleapis/google/api"
import k8s_io_api_apps_v1 "k8s.io/api/apps/v1"
import k8s_io_api_batch_v1 "k8s.io/api/batch/v1"
import k8s_io_api_batch_v1beta1 "k8s.io/api/batch/v1beta1"
import k8s_io_api_core_v1 "k8s.io/api/core/v1"
import _ "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
import _ "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
import _ "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/vesenv"

import strings "strings"
import reflect "reflect"

import context "golang.org/x/net/context"
import grpc "google.golang.org/grpc"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// NamespaceListRequest
//
// x-displayName: "Namespace List Request"
// Request to get list of namespaces in a site
type NamespaceListRequest struct {
	// site
	//
	// x-displayName: "Site"
	// x-example: "site-1"
	// Site name
	Site string `protobuf:"bytes,1,opt,name=site,proto3" json:"site,omitempty"`
}

func (m *NamespaceListRequest) Reset()      { *m = NamespaceListRequest{} }
func (*NamespaceListRequest) ProtoMessage() {}
func (*NamespaceListRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorPublicCustomDataK8SApi, []int{0}
}

func (m *NamespaceListRequest) GetSite() string {
	if m != nil {
		return m.Site
	}
	return ""
}

// NodeListRequest
//
// x-displayName: "Namespace List Request"
// Request to get list of nodes in a site
type NodeListRequest struct {
	// site
	//
	// x-displayName: "Site"
	// x-example: "site-1"
	// Site name
	Site string `protobuf:"bytes,1,opt,name=site,proto3" json:"site,omitempty"`
}

func (m *NodeListRequest) Reset()      { *m = NodeListRequest{} }
func (*NodeListRequest) ProtoMessage() {}
func (*NodeListRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorPublicCustomDataK8SApi, []int{1}
}

func (m *NodeListRequest) GetSite() string {
	if m != nil {
		return m.Site
	}
	return ""
}

// PodListRequest
//
// x-displayName: "Pod List Request"
// Request to get list of pods in a namespace
type PodListRequest struct {
	// namespace
	//
	// x-displayName: "Namespace"
	// x-example: "ns1"
	// Namespace to scope the listing of pods in a site
	Namespace string `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// site
	//
	// x-displayName: "Site"
	// x-example: "site-1"
	// Site name
	Site string `protobuf:"bytes,2,opt,name=site,proto3" json:"site,omitempty"`
}

func (m *PodListRequest) Reset()      { *m = PodListRequest{} }
func (*PodListRequest) ProtoMessage() {}
func (*PodListRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorPublicCustomDataK8SApi, []int{2}
}

func (m *PodListRequest) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *PodListRequest) GetSite() string {
	if m != nil {
		return m.Site
	}
	return ""
}

// PersistentVolumeClaimListRequest
//
// x-displayName: "PersistentVolumeClaim List Request"
// Request to get list of PVCs in a namespace
type PersistentVolumeClaimListRequest struct {
	// namespace
	//
	// x-displayName: "Namespace"
	// x-example: "ns1"
	// Namespace to scope the listing of PVCs in a site
	Namespace string `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// site
	//
	// x-displayName: "Site"
	// x-example: "site-1"
	// Site name
	Site string `protobuf:"bytes,2,opt,name=site,proto3" json:"site,omitempty"`
}

func (m *PersistentVolumeClaimListRequest) Reset()      { *m = PersistentVolumeClaimListRequest{} }
func (*PersistentVolumeClaimListRequest) ProtoMessage() {}
func (*PersistentVolumeClaimListRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorPublicCustomDataK8SApi, []int{3}
}

func (m *PersistentVolumeClaimListRequest) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *PersistentVolumeClaimListRequest) GetSite() string {
	if m != nil {
		return m.Site
	}
	return ""
}

// PersistentVolumeListRequest
//
// x-displayName: "PersistentVolume List Request"
// Request to get list of Persistent Volumes in a site
type PersistentVolumeListRequest struct {
	// site
	//
	// x-displayName: "Site"
	// x-example: "site-1"
	// Site name
	Site string `protobuf:"bytes,2,opt,name=site,proto3" json:"site,omitempty"`
}

func (m *PersistentVolumeListRequest) Reset()      { *m = PersistentVolumeListRequest{} }
func (*PersistentVolumeListRequest) ProtoMessage() {}
func (*PersistentVolumeListRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorPublicCustomDataK8SApi, []int{4}
}

func (m *PersistentVolumeListRequest) GetSite() string {
	if m != nil {
		return m.Site
	}
	return ""
}

// ServiceListRequest
//
// x-displayName: "Service List Request"
// Request to get list of services in a namespace
type ServiceListRequest struct {
	// namespace
	//
	// x-displayName: "Namespace"
	// x-example: "ns1"
	// Namespace to scope the listing of services in a site
	Namespace string `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// site
	//
	// x-displayName: "Site"
	// x-example: "site-1"
	// Site name
	Site string `protobuf:"bytes,2,opt,name=site,proto3" json:"site,omitempty"`
}

func (m *ServiceListRequest) Reset()      { *m = ServiceListRequest{} }
func (*ServiceListRequest) ProtoMessage() {}
func (*ServiceListRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorPublicCustomDataK8SApi, []int{5}
}

func (m *ServiceListRequest) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *ServiceListRequest) GetSite() string {
	if m != nil {
		return m.Site
	}
	return ""
}

// EndpointsListRequest
//
// x-displayName: "Endpoints List Request"
// Request to get list of endpoints in a namespace
type EndpointsListRequest struct {
	// namespace
	//
	// x-displayName: "Namespace"
	// x-example: "ns1"
	// Namespace to scope the listing of endpoints in a site
	Namespace string `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// site
	//
	// x-displayName: "Site"
	// x-example: "site-1"
	// Site name
	Site string `protobuf:"bytes,2,opt,name=site,proto3" json:"site,omitempty"`
}

func (m *EndpointsListRequest) Reset()      { *m = EndpointsListRequest{} }
func (*EndpointsListRequest) ProtoMessage() {}
func (*EndpointsListRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorPublicCustomDataK8SApi, []int{6}
}

func (m *EndpointsListRequest) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *EndpointsListRequest) GetSite() string {
	if m != nil {
		return m.Site
	}
	return ""
}

// ConfigMapListRequest
//
// x-displayName: "ConfigMap List Request"
// Request to get list of configmaps in a namespace
type ConfigMapListRequest struct {
	// namespace
	//
	// x-displayName: "Namespace"
	// x-example: "ns1"
	// Namespace to scope the listing of configmaps in a site
	Namespace string `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// site
	//
	// x-displayName: "Site"
	// x-example: "site-1"
	// Site name
	Site string `protobuf:"bytes,2,opt,name=site,proto3" json:"site,omitempty"`
}

func (m *ConfigMapListRequest) Reset()      { *m = ConfigMapListRequest{} }
func (*ConfigMapListRequest) ProtoMessage() {}
func (*ConfigMapListRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorPublicCustomDataK8SApi, []int{7}
}

func (m *ConfigMapListRequest) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *ConfigMapListRequest) GetSite() string {
	if m != nil {
		return m.Site
	}
	return ""
}

// SecretListRequest
//
// x-displayName: "Secret List Request"
// Request to get list of secrets in a namespace
type SecretListRequest struct {
	// namespace
	//
	// x-displayName: "Namespace"
	// x-example: "ns1"
	// Namespace to scope the listing of secrets in a site
	Namespace string `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// site
	//
	// x-displayName: "Site"
	// x-example: "site-1"
	// Site name
	Site string `protobuf:"bytes,2,opt,name=site,proto3" json:"site,omitempty"`
}

func (m *SecretListRequest) Reset()      { *m = SecretListRequest{} }
func (*SecretListRequest) ProtoMessage() {}
func (*SecretListRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorPublicCustomDataK8SApi, []int{8}
}

func (m *SecretListRequest) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *SecretListRequest) GetSite() string {
	if m != nil {
		return m.Site
	}
	return ""
}

// DeploymentListRequest
//
// x-displayName: "Deployment List Request"
// Request to get list of deployments in a namespace
type DeploymentListRequest struct {
	// namespace
	//
	// x-displayName: "Namespace"
	// x-example: "ns1"
	// Namespace to scope the listing of deployments in a site
	Namespace string `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// site
	//
	// x-displayName: "Site"
	// x-example: "site-1"
	// Site name
	Site string `protobuf:"bytes,2,opt,name=site,proto3" json:"site,omitempty"`
}

func (m *DeploymentListRequest) Reset()      { *m = DeploymentListRequest{} }
func (*DeploymentListRequest) ProtoMessage() {}
func (*DeploymentListRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorPublicCustomDataK8SApi, []int{9}
}

func (m *DeploymentListRequest) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *DeploymentListRequest) GetSite() string {
	if m != nil {
		return m.Site
	}
	return ""
}

// DaemonSetListRequest
//
// x-displayName: "DaemonSet List Request"
// Request to get list of daemon sets in a namespace
type DaemonSetListRequest struct {
	// namespace
	//
	// x-displayName: "Namespace"
	// x-example: "ns1"
	// Namespace to scope the listing of daemon sets in a site
	Namespace string `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// site
	//
	// x-displayName: "Site"
	// x-example: "site-1"
	// Site name
	Site string `protobuf:"bytes,2,opt,name=site,proto3" json:"site,omitempty"`
}

func (m *DaemonSetListRequest) Reset()      { *m = DaemonSetListRequest{} }
func (*DaemonSetListRequest) ProtoMessage() {}
func (*DaemonSetListRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorPublicCustomDataK8SApi, []int{10}
}

func (m *DaemonSetListRequest) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *DaemonSetListRequest) GetSite() string {
	if m != nil {
		return m.Site
	}
	return ""
}

// StatefulSetListRequest
//
// x-displayName: "StatefulSet List Request"
// Request to get list of stateful sets in a namespace
type StatefulSetListRequest struct {
	// namespace
	//
	// x-displayName: "Namespace"
	// x-example: "ns1"
	// Namespace to scope the listing of stateful sets in a site
	Namespace string `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// site
	//
	// x-displayName: "Site"
	// x-example: "site-1"
	// Site name
	Site string `protobuf:"bytes,2,opt,name=site,proto3" json:"site,omitempty"`
}

func (m *StatefulSetListRequest) Reset()      { *m = StatefulSetListRequest{} }
func (*StatefulSetListRequest) ProtoMessage() {}
func (*StatefulSetListRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorPublicCustomDataK8SApi, []int{11}
}

func (m *StatefulSetListRequest) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *StatefulSetListRequest) GetSite() string {
	if m != nil {
		return m.Site
	}
	return ""
}

// ReplicaSetListRequest
//
// x-displayName: "ReplicaSet List Request"
// Request to get list of replication sets in a namespace
type ReplicaSetListRequest struct {
	// namespace
	//
	// x-displayName: "Namespace"
	// x-example: "ns1"
	// Namespace to scope the listing of replication sets in a site
	Namespace string `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// site
	//
	// x-displayName: "Site"
	// x-example: "site-1"
	// Site name
	Site string `protobuf:"bytes,2,opt,name=site,proto3" json:"site,omitempty"`
}

func (m *ReplicaSetListRequest) Reset()      { *m = ReplicaSetListRequest{} }
func (*ReplicaSetListRequest) ProtoMessage() {}
func (*ReplicaSetListRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorPublicCustomDataK8SApi, []int{12}
}

func (m *ReplicaSetListRequest) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *ReplicaSetListRequest) GetSite() string {
	if m != nil {
		return m.Site
	}
	return ""
}

// JobListRequest
//
// x-displayName: "Job List Request"
// Request to get list of jobs in a namespace
type JobListRequest struct {
	// namespace
	//
	// x-displayName: "Namespace"
	// x-example: "ns1"
	// Namespace to scope the listing of jobs in a site
	Namespace string `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// site
	//
	// x-displayName: "Site"
	// x-example: "site-1"
	// Site name
	Site string `protobuf:"bytes,2,opt,name=site,proto3" json:"site,omitempty"`
}

func (m *JobListRequest) Reset()      { *m = JobListRequest{} }
func (*JobListRequest) ProtoMessage() {}
func (*JobListRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorPublicCustomDataK8SApi, []int{13}
}

func (m *JobListRequest) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *JobListRequest) GetSite() string {
	if m != nil {
		return m.Site
	}
	return ""
}

// CronJobListRequest
//
// x-displayName: "CronJob List Request"
// Request to get list of cronjobs in a namespace
type CronJobListRequest struct {
	// namespace
	//
	// x-displayName: "Namespace"
	// x-example: "ns1"
	// Namespace to scope the listing of cronjobs in a site
	Namespace string `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// site
	//
	// x-displayName: "Site"
	// x-example: "site-1"
	// Site name
	Site string `protobuf:"bytes,2,opt,name=site,proto3" json:"site,omitempty"`
}

func (m *CronJobListRequest) Reset()      { *m = CronJobListRequest{} }
func (*CronJobListRequest) ProtoMessage() {}
func (*CronJobListRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorPublicCustomDataK8SApi, []int{14}
}

func (m *CronJobListRequest) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *CronJobListRequest) GetSite() string {
	if m != nil {
		return m.Site
	}
	return ""
}

func init() {
	proto.RegisterType((*NamespaceListRequest)(nil), "ves.io.schema.site.NamespaceListRequest")
	golang_proto.RegisterType((*NamespaceListRequest)(nil), "ves.io.schema.site.NamespaceListRequest")
	proto.RegisterType((*NodeListRequest)(nil), "ves.io.schema.site.NodeListRequest")
	golang_proto.RegisterType((*NodeListRequest)(nil), "ves.io.schema.site.NodeListRequest")
	proto.RegisterType((*PodListRequest)(nil), "ves.io.schema.site.PodListRequest")
	golang_proto.RegisterType((*PodListRequest)(nil), "ves.io.schema.site.PodListRequest")
	proto.RegisterType((*PersistentVolumeClaimListRequest)(nil), "ves.io.schema.site.PersistentVolumeClaimListRequest")
	golang_proto.RegisterType((*PersistentVolumeClaimListRequest)(nil), "ves.io.schema.site.PersistentVolumeClaimListRequest")
	proto.RegisterType((*PersistentVolumeListRequest)(nil), "ves.io.schema.site.PersistentVolumeListRequest")
	golang_proto.RegisterType((*PersistentVolumeListRequest)(nil), "ves.io.schema.site.PersistentVolumeListRequest")
	proto.RegisterType((*ServiceListRequest)(nil), "ves.io.schema.site.ServiceListRequest")
	golang_proto.RegisterType((*ServiceListRequest)(nil), "ves.io.schema.site.ServiceListRequest")
	proto.RegisterType((*EndpointsListRequest)(nil), "ves.io.schema.site.EndpointsListRequest")
	golang_proto.RegisterType((*EndpointsListRequest)(nil), "ves.io.schema.site.EndpointsListRequest")
	proto.RegisterType((*ConfigMapListRequest)(nil), "ves.io.schema.site.ConfigMapListRequest")
	golang_proto.RegisterType((*ConfigMapListRequest)(nil), "ves.io.schema.site.ConfigMapListRequest")
	proto.RegisterType((*SecretListRequest)(nil), "ves.io.schema.site.SecretListRequest")
	golang_proto.RegisterType((*SecretListRequest)(nil), "ves.io.schema.site.SecretListRequest")
	proto.RegisterType((*DeploymentListRequest)(nil), "ves.io.schema.site.DeploymentListRequest")
	golang_proto.RegisterType((*DeploymentListRequest)(nil), "ves.io.schema.site.DeploymentListRequest")
	proto.RegisterType((*DaemonSetListRequest)(nil), "ves.io.schema.site.DaemonSetListRequest")
	golang_proto.RegisterType((*DaemonSetListRequest)(nil), "ves.io.schema.site.DaemonSetListRequest")
	proto.RegisterType((*StatefulSetListRequest)(nil), "ves.io.schema.site.StatefulSetListRequest")
	golang_proto.RegisterType((*StatefulSetListRequest)(nil), "ves.io.schema.site.StatefulSetListRequest")
	proto.RegisterType((*ReplicaSetListRequest)(nil), "ves.io.schema.site.ReplicaSetListRequest")
	golang_proto.RegisterType((*ReplicaSetListRequest)(nil), "ves.io.schema.site.ReplicaSetListRequest")
	proto.RegisterType((*JobListRequest)(nil), "ves.io.schema.site.JobListRequest")
	golang_proto.RegisterType((*JobListRequest)(nil), "ves.io.schema.site.JobListRequest")
	proto.RegisterType((*CronJobListRequest)(nil), "ves.io.schema.site.CronJobListRequest")
	golang_proto.RegisterType((*CronJobListRequest)(nil), "ves.io.schema.site.CronJobListRequest")
}
func (this *NamespaceListRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NamespaceListRequest)
	if !ok {
		that2, ok := that.(NamespaceListRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Site != that1.Site {
		return false
	}
	return true
}
func (this *NodeListRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NodeListRequest)
	if !ok {
		that2, ok := that.(NodeListRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Site != that1.Site {
		return false
	}
	return true
}
func (this *PodListRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PodListRequest)
	if !ok {
		that2, ok := that.(PodListRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Namespace != that1.Namespace {
		return false
	}
	if this.Site != that1.Site {
		return false
	}
	return true
}
func (this *PersistentVolumeClaimListRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PersistentVolumeClaimListRequest)
	if !ok {
		that2, ok := that.(PersistentVolumeClaimListRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Namespace != that1.Namespace {
		return false
	}
	if this.Site != that1.Site {
		return false
	}
	return true
}
func (this *PersistentVolumeListRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PersistentVolumeListRequest)
	if !ok {
		that2, ok := that.(PersistentVolumeListRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Site != that1.Site {
		return false
	}
	return true
}
func (this *ServiceListRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ServiceListRequest)
	if !ok {
		that2, ok := that.(ServiceListRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Namespace != that1.Namespace {
		return false
	}
	if this.Site != that1.Site {
		return false
	}
	return true
}
func (this *EndpointsListRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*EndpointsListRequest)
	if !ok {
		that2, ok := that.(EndpointsListRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Namespace != that1.Namespace {
		return false
	}
	if this.Site != that1.Site {
		return false
	}
	return true
}
func (this *ConfigMapListRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ConfigMapListRequest)
	if !ok {
		that2, ok := that.(ConfigMapListRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Namespace != that1.Namespace {
		return false
	}
	if this.Site != that1.Site {
		return false
	}
	return true
}
func (this *SecretListRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SecretListRequest)
	if !ok {
		that2, ok := that.(SecretListRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Namespace != that1.Namespace {
		return false
	}
	if this.Site != that1.Site {
		return false
	}
	return true
}
func (this *DeploymentListRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DeploymentListRequest)
	if !ok {
		that2, ok := that.(DeploymentListRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Namespace != that1.Namespace {
		return false
	}
	if this.Site != that1.Site {
		return false
	}
	return true
}
func (this *DaemonSetListRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DaemonSetListRequest)
	if !ok {
		that2, ok := that.(DaemonSetListRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Namespace != that1.Namespace {
		return false
	}
	if this.Site != that1.Site {
		return false
	}
	return true
}
func (this *StatefulSetListRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*StatefulSetListRequest)
	if !ok {
		that2, ok := that.(StatefulSetListRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Namespace != that1.Namespace {
		return false
	}
	if this.Site != that1.Site {
		return false
	}
	return true
}
func (this *ReplicaSetListRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplicaSetListRequest)
	if !ok {
		that2, ok := that.(ReplicaSetListRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Namespace != that1.Namespace {
		return false
	}
	if this.Site != that1.Site {
		return false
	}
	return true
}
func (this *JobListRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*JobListRequest)
	if !ok {
		that2, ok := that.(JobListRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Namespace != that1.Namespace {
		return false
	}
	if this.Site != that1.Site {
		return false
	}
	return true
}
func (this *CronJobListRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CronJobListRequest)
	if !ok {
		that2, ok := that.(CronJobListRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Namespace != that1.Namespace {
		return false
	}
	if this.Site != that1.Site {
		return false
	}
	return true
}
func (this *NamespaceListRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&site.NamespaceListRequest{")
	s = append(s, "Site: "+fmt.Sprintf("%#v", this.Site)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *NodeListRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&site.NodeListRequest{")
	s = append(s, "Site: "+fmt.Sprintf("%#v", this.Site)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *PodListRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&site.PodListRequest{")
	s = append(s, "Namespace: "+fmt.Sprintf("%#v", this.Namespace)+",\n")
	s = append(s, "Site: "+fmt.Sprintf("%#v", this.Site)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *PersistentVolumeClaimListRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&site.PersistentVolumeClaimListRequest{")
	s = append(s, "Namespace: "+fmt.Sprintf("%#v", this.Namespace)+",\n")
	s = append(s, "Site: "+fmt.Sprintf("%#v", this.Site)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *PersistentVolumeListRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&site.PersistentVolumeListRequest{")
	s = append(s, "Site: "+fmt.Sprintf("%#v", this.Site)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ServiceListRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&site.ServiceListRequest{")
	s = append(s, "Namespace: "+fmt.Sprintf("%#v", this.Namespace)+",\n")
	s = append(s, "Site: "+fmt.Sprintf("%#v", this.Site)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *EndpointsListRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&site.EndpointsListRequest{")
	s = append(s, "Namespace: "+fmt.Sprintf("%#v", this.Namespace)+",\n")
	s = append(s, "Site: "+fmt.Sprintf("%#v", this.Site)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ConfigMapListRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&site.ConfigMapListRequest{")
	s = append(s, "Namespace: "+fmt.Sprintf("%#v", this.Namespace)+",\n")
	s = append(s, "Site: "+fmt.Sprintf("%#v", this.Site)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SecretListRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&site.SecretListRequest{")
	s = append(s, "Namespace: "+fmt.Sprintf("%#v", this.Namespace)+",\n")
	s = append(s, "Site: "+fmt.Sprintf("%#v", this.Site)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DeploymentListRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&site.DeploymentListRequest{")
	s = append(s, "Namespace: "+fmt.Sprintf("%#v", this.Namespace)+",\n")
	s = append(s, "Site: "+fmt.Sprintf("%#v", this.Site)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DaemonSetListRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&site.DaemonSetListRequest{")
	s = append(s, "Namespace: "+fmt.Sprintf("%#v", this.Namespace)+",\n")
	s = append(s, "Site: "+fmt.Sprintf("%#v", this.Site)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *StatefulSetListRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&site.StatefulSetListRequest{")
	s = append(s, "Namespace: "+fmt.Sprintf("%#v", this.Namespace)+",\n")
	s = append(s, "Site: "+fmt.Sprintf("%#v", this.Site)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ReplicaSetListRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&site.ReplicaSetListRequest{")
	s = append(s, "Namespace: "+fmt.Sprintf("%#v", this.Namespace)+",\n")
	s = append(s, "Site: "+fmt.Sprintf("%#v", this.Site)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *JobListRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&site.JobListRequest{")
	s = append(s, "Namespace: "+fmt.Sprintf("%#v", this.Namespace)+",\n")
	s = append(s, "Site: "+fmt.Sprintf("%#v", this.Site)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CronJobListRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&site.CronJobListRequest{")
	s = append(s, "Namespace: "+fmt.Sprintf("%#v", this.Namespace)+",\n")
	s = append(s, "Site: "+fmt.Sprintf("%#v", this.Site)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringPublicCustomDataK8SApi(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for CustomDataK8SAPI service

type CustomDataK8SAPIClient interface {
	// NamespaceList
	//
	// x-displayName: "Namespace List"
	// API to get list of namespaces in a site.
	NamespaceList(ctx context.Context, in *NamespaceListRequest, opts ...grpc.CallOption) (*k8s_io_api_core_v1.NamespaceList, error)
	// NodeList
	//
	// x-displayName: "Namespace List"
	// API to get list of nodes in a site.
	NodeList(ctx context.Context, in *NodeListRequest, opts ...grpc.CallOption) (*k8s_io_api_core_v1.NodeList, error)
	// PodList
	//
	// x-displayName: "Pod List"
	// API to get list of pods in a site for a given namespace.
	PodList(ctx context.Context, in *PodListRequest, opts ...grpc.CallOption) (*k8s_io_api_core_v1.PodList, error)
	// PersistentVolumeClaimList
	//
	// x-displayName: "PersistentVolumeClaim List"
	// API to get list of PVCs for a given namespace in a site.
	PersistentVolumeClaimList(ctx context.Context, in *PersistentVolumeClaimListRequest, opts ...grpc.CallOption) (*k8s_io_api_core_v1.PersistentVolumeClaimList, error)
	// PersistentVolumeList
	//
	// x-displayName: "PersistentVolume List"
	// API to get list of Persistent Volumes in a site.
	PersistentVolumeList(ctx context.Context, in *PersistentVolumeListRequest, opts ...grpc.CallOption) (*k8s_io_api_core_v1.PersistentVolumeList, error)
	// ServiceList
	//
	// x-displayName: "Service List"
	// API to get list of services for a given namespace in a site.
	ServiceList(ctx context.Context, in *ServiceListRequest, opts ...grpc.CallOption) (*k8s_io_api_core_v1.ServiceList, error)
	// EndpointsList
	//
	// x-displayName: "Endpoints List"
	// API to get list of endpoints for a given namespace in a site.
	EndpointsList(ctx context.Context, in *EndpointsListRequest, opts ...grpc.CallOption) (*k8s_io_api_core_v1.EndpointsList, error)
	// ConfigMapList
	//
	// x-displayName: "ConfigMap List"
	// API to get list of configmaps for a given namespace in a site.
	ConfigMapList(ctx context.Context, in *ConfigMapListRequest, opts ...grpc.CallOption) (*k8s_io_api_core_v1.ConfigMapList, error)
	// SecretList
	//
	// x-displayName: "Secret List"
	// API to get list of secrets for a given namespace in a site.
	SecretList(ctx context.Context, in *SecretListRequest, opts ...grpc.CallOption) (*k8s_io_api_core_v1.SecretList, error)
	// DeploymentList
	//
	// x-displayName: "Deployment List"
	// API to get list of deployments for a given namespace in a site.
	DeploymentList(ctx context.Context, in *DeploymentListRequest, opts ...grpc.CallOption) (*k8s_io_api_apps_v1.DeploymentList, error)
	// DaemonSetList
	//
	// x-displayName: "DaemonSet List"
	// API to get list of daemon sets for a given namespace in a site.
	DaemonSetList(ctx context.Context, in *DaemonSetListRequest, opts ...grpc.CallOption) (*k8s_io_api_apps_v1.DaemonSetList, error)
	// StatefulSetList
	//
	// x-displayName: "StatefulSet List"
	// API to get list of stateful sets for a given namespace in a site.
	StatefulSetList(ctx context.Context, in *StatefulSetListRequest, opts ...grpc.CallOption) (*k8s_io_api_apps_v1.StatefulSetList, error)
	// ReplicaSetList
	//
	// x-displayName: "ReplicaSet List"
	// API to get list of replica sets for a given namespace in a site.
	ReplicaSetList(ctx context.Context, in *ReplicaSetListRequest, opts ...grpc.CallOption) (*k8s_io_api_apps_v1.ReplicaSetList, error)
	// JobList
	//
	// x-displayName: "Job List"
	// API to get list of jobs for a given namespace in a site.
	JobList(ctx context.Context, in *JobListRequest, opts ...grpc.CallOption) (*k8s_io_api_batch_v1.JobList, error)
	// CronJobList
	//
	// x-displayName: "CronJob List"
	// API to get list of cronjobs for a given namespace in a site.
	CronJobList(ctx context.Context, in *CronJobListRequest, opts ...grpc.CallOption) (*k8s_io_api_batch_v1beta1.CronJobList, error)
}

type customDataK8SAPIClient struct {
	cc *grpc.ClientConn
}

func NewCustomDataK8SAPIClient(cc *grpc.ClientConn) CustomDataK8SAPIClient {
	return &customDataK8SAPIClient{cc}
}

func (c *customDataK8SAPIClient) NamespaceList(ctx context.Context, in *NamespaceListRequest, opts ...grpc.CallOption) (*k8s_io_api_core_v1.NamespaceList, error) {
	out := new(k8s_io_api_core_v1.NamespaceList)
	err := grpc.Invoke(ctx, "/ves.io.schema.site.CustomDataK8SAPI/NamespaceList", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customDataK8SAPIClient) NodeList(ctx context.Context, in *NodeListRequest, opts ...grpc.CallOption) (*k8s_io_api_core_v1.NodeList, error) {
	out := new(k8s_io_api_core_v1.NodeList)
	err := grpc.Invoke(ctx, "/ves.io.schema.site.CustomDataK8SAPI/NodeList", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customDataK8SAPIClient) PodList(ctx context.Context, in *PodListRequest, opts ...grpc.CallOption) (*k8s_io_api_core_v1.PodList, error) {
	out := new(k8s_io_api_core_v1.PodList)
	err := grpc.Invoke(ctx, "/ves.io.schema.site.CustomDataK8SAPI/PodList", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customDataK8SAPIClient) PersistentVolumeClaimList(ctx context.Context, in *PersistentVolumeClaimListRequest, opts ...grpc.CallOption) (*k8s_io_api_core_v1.PersistentVolumeClaimList, error) {
	out := new(k8s_io_api_core_v1.PersistentVolumeClaimList)
	err := grpc.Invoke(ctx, "/ves.io.schema.site.CustomDataK8SAPI/PersistentVolumeClaimList", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customDataK8SAPIClient) PersistentVolumeList(ctx context.Context, in *PersistentVolumeListRequest, opts ...grpc.CallOption) (*k8s_io_api_core_v1.PersistentVolumeList, error) {
	out := new(k8s_io_api_core_v1.PersistentVolumeList)
	err := grpc.Invoke(ctx, "/ves.io.schema.site.CustomDataK8SAPI/PersistentVolumeList", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customDataK8SAPIClient) ServiceList(ctx context.Context, in *ServiceListRequest, opts ...grpc.CallOption) (*k8s_io_api_core_v1.ServiceList, error) {
	out := new(k8s_io_api_core_v1.ServiceList)
	err := grpc.Invoke(ctx, "/ves.io.schema.site.CustomDataK8SAPI/ServiceList", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customDataK8SAPIClient) EndpointsList(ctx context.Context, in *EndpointsListRequest, opts ...grpc.CallOption) (*k8s_io_api_core_v1.EndpointsList, error) {
	out := new(k8s_io_api_core_v1.EndpointsList)
	err := grpc.Invoke(ctx, "/ves.io.schema.site.CustomDataK8SAPI/EndpointsList", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customDataK8SAPIClient) ConfigMapList(ctx context.Context, in *ConfigMapListRequest, opts ...grpc.CallOption) (*k8s_io_api_core_v1.ConfigMapList, error) {
	out := new(k8s_io_api_core_v1.ConfigMapList)
	err := grpc.Invoke(ctx, "/ves.io.schema.site.CustomDataK8SAPI/ConfigMapList", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customDataK8SAPIClient) SecretList(ctx context.Context, in *SecretListRequest, opts ...grpc.CallOption) (*k8s_io_api_core_v1.SecretList, error) {
	out := new(k8s_io_api_core_v1.SecretList)
	err := grpc.Invoke(ctx, "/ves.io.schema.site.CustomDataK8SAPI/SecretList", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customDataK8SAPIClient) DeploymentList(ctx context.Context, in *DeploymentListRequest, opts ...grpc.CallOption) (*k8s_io_api_apps_v1.DeploymentList, error) {
	out := new(k8s_io_api_apps_v1.DeploymentList)
	err := grpc.Invoke(ctx, "/ves.io.schema.site.CustomDataK8SAPI/DeploymentList", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customDataK8SAPIClient) DaemonSetList(ctx context.Context, in *DaemonSetListRequest, opts ...grpc.CallOption) (*k8s_io_api_apps_v1.DaemonSetList, error) {
	out := new(k8s_io_api_apps_v1.DaemonSetList)
	err := grpc.Invoke(ctx, "/ves.io.schema.site.CustomDataK8SAPI/DaemonSetList", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customDataK8SAPIClient) StatefulSetList(ctx context.Context, in *StatefulSetListRequest, opts ...grpc.CallOption) (*k8s_io_api_apps_v1.StatefulSetList, error) {
	out := new(k8s_io_api_apps_v1.StatefulSetList)
	err := grpc.Invoke(ctx, "/ves.io.schema.site.CustomDataK8SAPI/StatefulSetList", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customDataK8SAPIClient) ReplicaSetList(ctx context.Context, in *ReplicaSetListRequest, opts ...grpc.CallOption) (*k8s_io_api_apps_v1.ReplicaSetList, error) {
	out := new(k8s_io_api_apps_v1.ReplicaSetList)
	err := grpc.Invoke(ctx, "/ves.io.schema.site.CustomDataK8SAPI/ReplicaSetList", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customDataK8SAPIClient) JobList(ctx context.Context, in *JobListRequest, opts ...grpc.CallOption) (*k8s_io_api_batch_v1.JobList, error) {
	out := new(k8s_io_api_batch_v1.JobList)
	err := grpc.Invoke(ctx, "/ves.io.schema.site.CustomDataK8SAPI/JobList", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customDataK8SAPIClient) CronJobList(ctx context.Context, in *CronJobListRequest, opts ...grpc.CallOption) (*k8s_io_api_batch_v1beta1.CronJobList, error) {
	out := new(k8s_io_api_batch_v1beta1.CronJobList)
	err := grpc.Invoke(ctx, "/ves.io.schema.site.CustomDataK8SAPI/CronJobList", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for CustomDataK8SAPI service

type CustomDataK8SAPIServer interface {
	// NamespaceList
	//
	// x-displayName: "Namespace List"
	// API to get list of namespaces in a site.
	NamespaceList(context.Context, *NamespaceListRequest) (*k8s_io_api_core_v1.NamespaceList, error)
	// NodeList
	//
	// x-displayName: "Namespace List"
	// API to get list of nodes in a site.
	NodeList(context.Context, *NodeListRequest) (*k8s_io_api_core_v1.NodeList, error)
	// PodList
	//
	// x-displayName: "Pod List"
	// API to get list of pods in a site for a given namespace.
	PodList(context.Context, *PodListRequest) (*k8s_io_api_core_v1.PodList, error)
	// PersistentVolumeClaimList
	//
	// x-displayName: "PersistentVolumeClaim List"
	// API to get list of PVCs for a given namespace in a site.
	PersistentVolumeClaimList(context.Context, *PersistentVolumeClaimListRequest) (*k8s_io_api_core_v1.PersistentVolumeClaimList, error)
	// PersistentVolumeList
	//
	// x-displayName: "PersistentVolume List"
	// API to get list of Persistent Volumes in a site.
	PersistentVolumeList(context.Context, *PersistentVolumeListRequest) (*k8s_io_api_core_v1.PersistentVolumeList, error)
	// ServiceList
	//
	// x-displayName: "Service List"
	// API to get list of services for a given namespace in a site.
	ServiceList(context.Context, *ServiceListRequest) (*k8s_io_api_core_v1.ServiceList, error)
	// EndpointsList
	//
	// x-displayName: "Endpoints List"
	// API to get list of endpoints for a given namespace in a site.
	EndpointsList(context.Context, *EndpointsListRequest) (*k8s_io_api_core_v1.EndpointsList, error)
	// ConfigMapList
	//
	// x-displayName: "ConfigMap List"
	// API to get list of configmaps for a given namespace in a site.
	ConfigMapList(context.Context, *ConfigMapListRequest) (*k8s_io_api_core_v1.ConfigMapList, error)
	// SecretList
	//
	// x-displayName: "Secret List"
	// API to get list of secrets for a given namespace in a site.
	SecretList(context.Context, *SecretListRequest) (*k8s_io_api_core_v1.SecretList, error)
	// DeploymentList
	//
	// x-displayName: "Deployment List"
	// API to get list of deployments for a given namespace in a site.
	DeploymentList(context.Context, *DeploymentListRequest) (*k8s_io_api_apps_v1.DeploymentList, error)
	// DaemonSetList
	//
	// x-displayName: "DaemonSet List"
	// API to get list of daemon sets for a given namespace in a site.
	DaemonSetList(context.Context, *DaemonSetListRequest) (*k8s_io_api_apps_v1.DaemonSetList, error)
	// StatefulSetList
	//
	// x-displayName: "StatefulSet List"
	// API to get list of stateful sets for a given namespace in a site.
	StatefulSetList(context.Context, *StatefulSetListRequest) (*k8s_io_api_apps_v1.StatefulSetList, error)
	// ReplicaSetList
	//
	// x-displayName: "ReplicaSet List"
	// API to get list of replica sets for a given namespace in a site.
	ReplicaSetList(context.Context, *ReplicaSetListRequest) (*k8s_io_api_apps_v1.ReplicaSetList, error)
	// JobList
	//
	// x-displayName: "Job List"
	// API to get list of jobs for a given namespace in a site.
	JobList(context.Context, *JobListRequest) (*k8s_io_api_batch_v1.JobList, error)
	// CronJobList
	//
	// x-displayName: "CronJob List"
	// API to get list of cronjobs for a given namespace in a site.
	CronJobList(context.Context, *CronJobListRequest) (*k8s_io_api_batch_v1beta1.CronJobList, error)
}

func RegisterCustomDataK8SAPIServer(s *grpc.Server, srv CustomDataK8SAPIServer) {
	s.RegisterService(&_CustomDataK8SAPI_serviceDesc, srv)
}

func _CustomDataK8SAPI_NamespaceList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NamespaceListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomDataK8SAPIServer).NamespaceList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ves.io.schema.site.CustomDataK8SAPI/NamespaceList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomDataK8SAPIServer).NamespaceList(ctx, req.(*NamespaceListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomDataK8SAPI_NodeList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NodeListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomDataK8SAPIServer).NodeList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ves.io.schema.site.CustomDataK8SAPI/NodeList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomDataK8SAPIServer).NodeList(ctx, req.(*NodeListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomDataK8SAPI_PodList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PodListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomDataK8SAPIServer).PodList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ves.io.schema.site.CustomDataK8SAPI/PodList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomDataK8SAPIServer).PodList(ctx, req.(*PodListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomDataK8SAPI_PersistentVolumeClaimList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PersistentVolumeClaimListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomDataK8SAPIServer).PersistentVolumeClaimList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ves.io.schema.site.CustomDataK8SAPI/PersistentVolumeClaimList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomDataK8SAPIServer).PersistentVolumeClaimList(ctx, req.(*PersistentVolumeClaimListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomDataK8SAPI_PersistentVolumeList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PersistentVolumeListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomDataK8SAPIServer).PersistentVolumeList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ves.io.schema.site.CustomDataK8SAPI/PersistentVolumeList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomDataK8SAPIServer).PersistentVolumeList(ctx, req.(*PersistentVolumeListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomDataK8SAPI_ServiceList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServiceListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomDataK8SAPIServer).ServiceList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ves.io.schema.site.CustomDataK8SAPI/ServiceList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomDataK8SAPIServer).ServiceList(ctx, req.(*ServiceListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomDataK8SAPI_EndpointsList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EndpointsListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomDataK8SAPIServer).EndpointsList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ves.io.schema.site.CustomDataK8SAPI/EndpointsList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomDataK8SAPIServer).EndpointsList(ctx, req.(*EndpointsListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomDataK8SAPI_ConfigMapList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfigMapListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomDataK8SAPIServer).ConfigMapList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ves.io.schema.site.CustomDataK8SAPI/ConfigMapList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomDataK8SAPIServer).ConfigMapList(ctx, req.(*ConfigMapListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomDataK8SAPI_SecretList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SecretListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomDataK8SAPIServer).SecretList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ves.io.schema.site.CustomDataK8SAPI/SecretList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomDataK8SAPIServer).SecretList(ctx, req.(*SecretListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomDataK8SAPI_DeploymentList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeploymentListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomDataK8SAPIServer).DeploymentList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ves.io.schema.site.CustomDataK8SAPI/DeploymentList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomDataK8SAPIServer).DeploymentList(ctx, req.(*DeploymentListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomDataK8SAPI_DaemonSetList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DaemonSetListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomDataK8SAPIServer).DaemonSetList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ves.io.schema.site.CustomDataK8SAPI/DaemonSetList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomDataK8SAPIServer).DaemonSetList(ctx, req.(*DaemonSetListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomDataK8SAPI_StatefulSetList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StatefulSetListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomDataK8SAPIServer).StatefulSetList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ves.io.schema.site.CustomDataK8SAPI/StatefulSetList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomDataK8SAPIServer).StatefulSetList(ctx, req.(*StatefulSetListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomDataK8SAPI_ReplicaSetList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReplicaSetListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomDataK8SAPIServer).ReplicaSetList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ves.io.schema.site.CustomDataK8SAPI/ReplicaSetList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomDataK8SAPIServer).ReplicaSetList(ctx, req.(*ReplicaSetListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomDataK8SAPI_JobList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JobListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomDataK8SAPIServer).JobList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ves.io.schema.site.CustomDataK8SAPI/JobList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomDataK8SAPIServer).JobList(ctx, req.(*JobListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomDataK8SAPI_CronJobList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CronJobListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomDataK8SAPIServer).CronJobList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ves.io.schema.site.CustomDataK8SAPI/CronJobList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomDataK8SAPIServer).CronJobList(ctx, req.(*CronJobListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _CustomDataK8SAPI_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ves.io.schema.site.CustomDataK8SAPI",
	HandlerType: (*CustomDataK8SAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "NamespaceList",
			Handler:    _CustomDataK8SAPI_NamespaceList_Handler,
		},
		{
			MethodName: "NodeList",
			Handler:    _CustomDataK8SAPI_NodeList_Handler,
		},
		{
			MethodName: "PodList",
			Handler:    _CustomDataK8SAPI_PodList_Handler,
		},
		{
			MethodName: "PersistentVolumeClaimList",
			Handler:    _CustomDataK8SAPI_PersistentVolumeClaimList_Handler,
		},
		{
			MethodName: "PersistentVolumeList",
			Handler:    _CustomDataK8SAPI_PersistentVolumeList_Handler,
		},
		{
			MethodName: "ServiceList",
			Handler:    _CustomDataK8SAPI_ServiceList_Handler,
		},
		{
			MethodName: "EndpointsList",
			Handler:    _CustomDataK8SAPI_EndpointsList_Handler,
		},
		{
			MethodName: "ConfigMapList",
			Handler:    _CustomDataK8SAPI_ConfigMapList_Handler,
		},
		{
			MethodName: "SecretList",
			Handler:    _CustomDataK8SAPI_SecretList_Handler,
		},
		{
			MethodName: "DeploymentList",
			Handler:    _CustomDataK8SAPI_DeploymentList_Handler,
		},
		{
			MethodName: "DaemonSetList",
			Handler:    _CustomDataK8SAPI_DaemonSetList_Handler,
		},
		{
			MethodName: "StatefulSetList",
			Handler:    _CustomDataK8SAPI_StatefulSetList_Handler,
		},
		{
			MethodName: "ReplicaSetList",
			Handler:    _CustomDataK8SAPI_ReplicaSetList_Handler,
		},
		{
			MethodName: "JobList",
			Handler:    _CustomDataK8SAPI_JobList_Handler,
		},
		{
			MethodName: "CronJobList",
			Handler:    _CustomDataK8SAPI_CronJobList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ves.io/schema/site/public_custom_data_k8s_api.proto",
}

func (m *NamespaceListRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NamespaceListRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Site) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPublicCustomDataK8SApi(dAtA, i, uint64(len(m.Site)))
		i += copy(dAtA[i:], m.Site)
	}
	return i, nil
}

func (m *NodeListRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NodeListRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Site) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPublicCustomDataK8SApi(dAtA, i, uint64(len(m.Site)))
		i += copy(dAtA[i:], m.Site)
	}
	return i, nil
}

func (m *PodListRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PodListRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Namespace) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPublicCustomDataK8SApi(dAtA, i, uint64(len(m.Namespace)))
		i += copy(dAtA[i:], m.Namespace)
	}
	if len(m.Site) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintPublicCustomDataK8SApi(dAtA, i, uint64(len(m.Site)))
		i += copy(dAtA[i:], m.Site)
	}
	return i, nil
}

func (m *PersistentVolumeClaimListRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PersistentVolumeClaimListRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Namespace) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPublicCustomDataK8SApi(dAtA, i, uint64(len(m.Namespace)))
		i += copy(dAtA[i:], m.Namespace)
	}
	if len(m.Site) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintPublicCustomDataK8SApi(dAtA, i, uint64(len(m.Site)))
		i += copy(dAtA[i:], m.Site)
	}
	return i, nil
}

func (m *PersistentVolumeListRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PersistentVolumeListRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Site) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintPublicCustomDataK8SApi(dAtA, i, uint64(len(m.Site)))
		i += copy(dAtA[i:], m.Site)
	}
	return i, nil
}

func (m *ServiceListRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ServiceListRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Namespace) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPublicCustomDataK8SApi(dAtA, i, uint64(len(m.Namespace)))
		i += copy(dAtA[i:], m.Namespace)
	}
	if len(m.Site) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintPublicCustomDataK8SApi(dAtA, i, uint64(len(m.Site)))
		i += copy(dAtA[i:], m.Site)
	}
	return i, nil
}

func (m *EndpointsListRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EndpointsListRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Namespace) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPublicCustomDataK8SApi(dAtA, i, uint64(len(m.Namespace)))
		i += copy(dAtA[i:], m.Namespace)
	}
	if len(m.Site) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintPublicCustomDataK8SApi(dAtA, i, uint64(len(m.Site)))
		i += copy(dAtA[i:], m.Site)
	}
	return i, nil
}

func (m *ConfigMapListRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConfigMapListRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Namespace) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPublicCustomDataK8SApi(dAtA, i, uint64(len(m.Namespace)))
		i += copy(dAtA[i:], m.Namespace)
	}
	if len(m.Site) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintPublicCustomDataK8SApi(dAtA, i, uint64(len(m.Site)))
		i += copy(dAtA[i:], m.Site)
	}
	return i, nil
}

func (m *SecretListRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SecretListRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Namespace) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPublicCustomDataK8SApi(dAtA, i, uint64(len(m.Namespace)))
		i += copy(dAtA[i:], m.Namespace)
	}
	if len(m.Site) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintPublicCustomDataK8SApi(dAtA, i, uint64(len(m.Site)))
		i += copy(dAtA[i:], m.Site)
	}
	return i, nil
}

func (m *DeploymentListRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeploymentListRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Namespace) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPublicCustomDataK8SApi(dAtA, i, uint64(len(m.Namespace)))
		i += copy(dAtA[i:], m.Namespace)
	}
	if len(m.Site) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintPublicCustomDataK8SApi(dAtA, i, uint64(len(m.Site)))
		i += copy(dAtA[i:], m.Site)
	}
	return i, nil
}

func (m *DaemonSetListRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DaemonSetListRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Namespace) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPublicCustomDataK8SApi(dAtA, i, uint64(len(m.Namespace)))
		i += copy(dAtA[i:], m.Namespace)
	}
	if len(m.Site) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintPublicCustomDataK8SApi(dAtA, i, uint64(len(m.Site)))
		i += copy(dAtA[i:], m.Site)
	}
	return i, nil
}

func (m *StatefulSetListRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StatefulSetListRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Namespace) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPublicCustomDataK8SApi(dAtA, i, uint64(len(m.Namespace)))
		i += copy(dAtA[i:], m.Namespace)
	}
	if len(m.Site) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintPublicCustomDataK8SApi(dAtA, i, uint64(len(m.Site)))
		i += copy(dAtA[i:], m.Site)
	}
	return i, nil
}

func (m *ReplicaSetListRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplicaSetListRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Namespace) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPublicCustomDataK8SApi(dAtA, i, uint64(len(m.Namespace)))
		i += copy(dAtA[i:], m.Namespace)
	}
	if len(m.Site) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintPublicCustomDataK8SApi(dAtA, i, uint64(len(m.Site)))
		i += copy(dAtA[i:], m.Site)
	}
	return i, nil
}

func (m *JobListRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *JobListRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Namespace) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPublicCustomDataK8SApi(dAtA, i, uint64(len(m.Namespace)))
		i += copy(dAtA[i:], m.Namespace)
	}
	if len(m.Site) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintPublicCustomDataK8SApi(dAtA, i, uint64(len(m.Site)))
		i += copy(dAtA[i:], m.Site)
	}
	return i, nil
}

func (m *CronJobListRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CronJobListRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Namespace) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPublicCustomDataK8SApi(dAtA, i, uint64(len(m.Namespace)))
		i += copy(dAtA[i:], m.Namespace)
	}
	if len(m.Site) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintPublicCustomDataK8SApi(dAtA, i, uint64(len(m.Site)))
		i += copy(dAtA[i:], m.Site)
	}
	return i, nil
}

func encodeVarintPublicCustomDataK8SApi(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *NamespaceListRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.Site)
	if l > 0 {
		n += 1 + l + sovPublicCustomDataK8SApi(uint64(l))
	}
	return n
}

func (m *NodeListRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.Site)
	if l > 0 {
		n += 1 + l + sovPublicCustomDataK8SApi(uint64(l))
	}
	return n
}

func (m *PodListRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovPublicCustomDataK8SApi(uint64(l))
	}
	l = len(m.Site)
	if l > 0 {
		n += 1 + l + sovPublicCustomDataK8SApi(uint64(l))
	}
	return n
}

func (m *PersistentVolumeClaimListRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovPublicCustomDataK8SApi(uint64(l))
	}
	l = len(m.Site)
	if l > 0 {
		n += 1 + l + sovPublicCustomDataK8SApi(uint64(l))
	}
	return n
}

func (m *PersistentVolumeListRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.Site)
	if l > 0 {
		n += 1 + l + sovPublicCustomDataK8SApi(uint64(l))
	}
	return n
}

func (m *ServiceListRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovPublicCustomDataK8SApi(uint64(l))
	}
	l = len(m.Site)
	if l > 0 {
		n += 1 + l + sovPublicCustomDataK8SApi(uint64(l))
	}
	return n
}

func (m *EndpointsListRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovPublicCustomDataK8SApi(uint64(l))
	}
	l = len(m.Site)
	if l > 0 {
		n += 1 + l + sovPublicCustomDataK8SApi(uint64(l))
	}
	return n
}

func (m *ConfigMapListRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovPublicCustomDataK8SApi(uint64(l))
	}
	l = len(m.Site)
	if l > 0 {
		n += 1 + l + sovPublicCustomDataK8SApi(uint64(l))
	}
	return n
}

func (m *SecretListRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovPublicCustomDataK8SApi(uint64(l))
	}
	l = len(m.Site)
	if l > 0 {
		n += 1 + l + sovPublicCustomDataK8SApi(uint64(l))
	}
	return n
}

func (m *DeploymentListRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovPublicCustomDataK8SApi(uint64(l))
	}
	l = len(m.Site)
	if l > 0 {
		n += 1 + l + sovPublicCustomDataK8SApi(uint64(l))
	}
	return n
}

func (m *DaemonSetListRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovPublicCustomDataK8SApi(uint64(l))
	}
	l = len(m.Site)
	if l > 0 {
		n += 1 + l + sovPublicCustomDataK8SApi(uint64(l))
	}
	return n
}

func (m *StatefulSetListRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovPublicCustomDataK8SApi(uint64(l))
	}
	l = len(m.Site)
	if l > 0 {
		n += 1 + l + sovPublicCustomDataK8SApi(uint64(l))
	}
	return n
}

func (m *ReplicaSetListRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovPublicCustomDataK8SApi(uint64(l))
	}
	l = len(m.Site)
	if l > 0 {
		n += 1 + l + sovPublicCustomDataK8SApi(uint64(l))
	}
	return n
}

func (m *JobListRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovPublicCustomDataK8SApi(uint64(l))
	}
	l = len(m.Site)
	if l > 0 {
		n += 1 + l + sovPublicCustomDataK8SApi(uint64(l))
	}
	return n
}

func (m *CronJobListRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovPublicCustomDataK8SApi(uint64(l))
	}
	l = len(m.Site)
	if l > 0 {
		n += 1 + l + sovPublicCustomDataK8SApi(uint64(l))
	}
	return n
}

func sovPublicCustomDataK8SApi(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozPublicCustomDataK8SApi(x uint64) (n int) {
	return sovPublicCustomDataK8SApi(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *NamespaceListRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&NamespaceListRequest{`,
		`Site:` + fmt.Sprintf("%v", this.Site) + `,`,
		`}`,
	}, "")
	return s
}
func (this *NodeListRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&NodeListRequest{`,
		`Site:` + fmt.Sprintf("%v", this.Site) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PodListRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PodListRequest{`,
		`Namespace:` + fmt.Sprintf("%v", this.Namespace) + `,`,
		`Site:` + fmt.Sprintf("%v", this.Site) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PersistentVolumeClaimListRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PersistentVolumeClaimListRequest{`,
		`Namespace:` + fmt.Sprintf("%v", this.Namespace) + `,`,
		`Site:` + fmt.Sprintf("%v", this.Site) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PersistentVolumeListRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PersistentVolumeListRequest{`,
		`Site:` + fmt.Sprintf("%v", this.Site) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ServiceListRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ServiceListRequest{`,
		`Namespace:` + fmt.Sprintf("%v", this.Namespace) + `,`,
		`Site:` + fmt.Sprintf("%v", this.Site) + `,`,
		`}`,
	}, "")
	return s
}
func (this *EndpointsListRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&EndpointsListRequest{`,
		`Namespace:` + fmt.Sprintf("%v", this.Namespace) + `,`,
		`Site:` + fmt.Sprintf("%v", this.Site) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ConfigMapListRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ConfigMapListRequest{`,
		`Namespace:` + fmt.Sprintf("%v", this.Namespace) + `,`,
		`Site:` + fmt.Sprintf("%v", this.Site) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SecretListRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SecretListRequest{`,
		`Namespace:` + fmt.Sprintf("%v", this.Namespace) + `,`,
		`Site:` + fmt.Sprintf("%v", this.Site) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DeploymentListRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DeploymentListRequest{`,
		`Namespace:` + fmt.Sprintf("%v", this.Namespace) + `,`,
		`Site:` + fmt.Sprintf("%v", this.Site) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DaemonSetListRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DaemonSetListRequest{`,
		`Namespace:` + fmt.Sprintf("%v", this.Namespace) + `,`,
		`Site:` + fmt.Sprintf("%v", this.Site) + `,`,
		`}`,
	}, "")
	return s
}
func (this *StatefulSetListRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&StatefulSetListRequest{`,
		`Namespace:` + fmt.Sprintf("%v", this.Namespace) + `,`,
		`Site:` + fmt.Sprintf("%v", this.Site) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplicaSetListRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplicaSetListRequest{`,
		`Namespace:` + fmt.Sprintf("%v", this.Namespace) + `,`,
		`Site:` + fmt.Sprintf("%v", this.Site) + `,`,
		`}`,
	}, "")
	return s
}
func (this *JobListRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&JobListRequest{`,
		`Namespace:` + fmt.Sprintf("%v", this.Namespace) + `,`,
		`Site:` + fmt.Sprintf("%v", this.Site) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CronJobListRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CronJobListRequest{`,
		`Namespace:` + fmt.Sprintf("%v", this.Namespace) + `,`,
		`Site:` + fmt.Sprintf("%v", this.Site) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringPublicCustomDataK8SApi(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *NamespaceListRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCustomDataK8SApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NamespaceListRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NamespaceListRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Site", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomDataK8SApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomDataK8SApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Site = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCustomDataK8SApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCustomDataK8SApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NodeListRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCustomDataK8SApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NodeListRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NodeListRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Site", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomDataK8SApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomDataK8SApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Site = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCustomDataK8SApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCustomDataK8SApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PodListRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCustomDataK8SApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PodListRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PodListRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomDataK8SApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomDataK8SApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Site", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomDataK8SApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomDataK8SApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Site = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCustomDataK8SApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCustomDataK8SApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PersistentVolumeClaimListRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCustomDataK8SApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PersistentVolumeClaimListRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PersistentVolumeClaimListRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomDataK8SApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomDataK8SApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Site", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomDataK8SApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomDataK8SApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Site = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCustomDataK8SApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCustomDataK8SApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PersistentVolumeListRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCustomDataK8SApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PersistentVolumeListRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PersistentVolumeListRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Site", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomDataK8SApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomDataK8SApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Site = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCustomDataK8SApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCustomDataK8SApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ServiceListRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCustomDataK8SApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ServiceListRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ServiceListRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomDataK8SApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomDataK8SApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Site", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomDataK8SApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomDataK8SApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Site = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCustomDataK8SApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCustomDataK8SApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EndpointsListRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCustomDataK8SApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EndpointsListRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EndpointsListRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomDataK8SApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomDataK8SApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Site", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomDataK8SApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomDataK8SApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Site = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCustomDataK8SApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCustomDataK8SApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConfigMapListRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCustomDataK8SApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConfigMapListRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConfigMapListRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomDataK8SApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomDataK8SApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Site", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomDataK8SApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomDataK8SApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Site = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCustomDataK8SApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCustomDataK8SApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SecretListRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCustomDataK8SApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SecretListRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SecretListRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomDataK8SApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomDataK8SApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Site", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomDataK8SApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomDataK8SApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Site = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCustomDataK8SApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCustomDataK8SApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeploymentListRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCustomDataK8SApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeploymentListRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeploymentListRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomDataK8SApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomDataK8SApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Site", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomDataK8SApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomDataK8SApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Site = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCustomDataK8SApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCustomDataK8SApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DaemonSetListRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCustomDataK8SApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DaemonSetListRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DaemonSetListRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomDataK8SApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomDataK8SApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Site", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomDataK8SApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomDataK8SApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Site = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCustomDataK8SApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCustomDataK8SApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StatefulSetListRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCustomDataK8SApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StatefulSetListRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StatefulSetListRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomDataK8SApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomDataK8SApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Site", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomDataK8SApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomDataK8SApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Site = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCustomDataK8SApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCustomDataK8SApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplicaSetListRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCustomDataK8SApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplicaSetListRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplicaSetListRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomDataK8SApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomDataK8SApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Site", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomDataK8SApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomDataK8SApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Site = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCustomDataK8SApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCustomDataK8SApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *JobListRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCustomDataK8SApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: JobListRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: JobListRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomDataK8SApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomDataK8SApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Site", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomDataK8SApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomDataK8SApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Site = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCustomDataK8SApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCustomDataK8SApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CronJobListRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCustomDataK8SApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CronJobListRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CronJobListRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomDataK8SApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomDataK8SApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Site", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomDataK8SApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomDataK8SApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Site = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCustomDataK8SApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCustomDataK8SApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPublicCustomDataK8SApi(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPublicCustomDataK8SApi
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPublicCustomDataK8SApi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPublicCustomDataK8SApi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthPublicCustomDataK8SApi
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowPublicCustomDataK8SApi
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipPublicCustomDataK8SApi(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthPublicCustomDataK8SApi = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPublicCustomDataK8SApi   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("ves.io/schema/site/public_custom_data_k8s_api.proto", fileDescriptorPublicCustomDataK8SApi)
}
func init() {
	golang_proto.RegisterFile("ves.io/schema/site/public_custom_data_k8s_api.proto", fileDescriptorPublicCustomDataK8SApi)
}

var fileDescriptorPublicCustomDataK8SApi = []byte{
	// 1687 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x9a, 0x5f, 0x6c, 0x14, 0xd5,
	0x17, 0xc7, 0x7b, 0xb7, 0x9b, 0x1f, 0x3f, 0x2e, 0x29, 0xe8, 0x0d, 0x9a, 0xb2, 0x90, 0x15, 0x87,
	0xa0, 0x05, 0x33, 0x3b, 0x16, 0x50, 0xcb, 0x03, 0x22, 0x14, 0x10, 0x0a, 0x2d, 0xa5, 0x0b, 0x05,
	0xa7, 0x60, 0x9d, 0xdd, 0xbd, 0x5d, 0x86, 0xee, 0xce, 0x1d, 0xe7, 0xce, 0x6e, 0x6c, 0x4b, 0x83,
	0xfc, 0x93, 0x10, 0x63, 0x42, 0x22, 0x91, 0xa0, 0x0f, 0x9a, 0x98, 0x18, 0x13, 0xc3, 0x83, 0x51,
	0x12, 0x13, 0x62, 0xc2, 0x1b, 0x3c, 0x11, 0x22, 0x2f, 0x3c, 0xf8, 0x20, 0x8b, 0x0f, 0xc6, 0x27,
	0x12, 0xa3, 0x4f, 0xc6, 0x98, 0xb9, 0x77, 0x76, 0x76, 0xa6, 0xbd, 0xdd, 0xce, 0xee, 0x4e, 0xd6,
	0x97, 0x66, 0xba, 0x73, 0xee, 0xf7, 0x9e, 0x7b, 0xcf, 0x67, 0xee, 0xb9, 0x73, 0xee, 0xc0, 0xcd,
	0x65, 0x4c, 0x53, 0x3a, 0x51, 0x68, 0xf6, 0x24, 0x2e, 0x6a, 0x0a, 0xd5, 0x6d, 0xac, 0x98, 0xa5,
	0x4c, 0x41, 0xcf, 0x8e, 0x67, 0x4b, 0xd4, 0x26, 0xc5, 0xf1, 0x9c, 0x66, 0x6b, 0xe3, 0x93, 0x7d,
	0x74, 0x5c, 0x33, 0xf5, 0x94, 0x69, 0x11, 0x9b, 0x20, 0xc4, 0x1b, 0xa5, 0x78, 0xa3, 0x94, 0xd3,
	0x28, 0x21, 0xe7, 0x75, 0xfb, 0x64, 0x29, 0x93, 0xca, 0x92, 0xa2, 0x92, 0x27, 0x79, 0xa2, 0x30,
	0xd3, 0x4c, 0x69, 0x82, 0xfd, 0xc7, 0xfe, 0x61, 0x57, 0x5c, 0x22, 0xb1, 0x26, 0x4f, 0x48, 0xbe,
	0x80, 0x15, 0xcd, 0xd4, 0x15, 0xcd, 0x30, 0x88, 0xad, 0xd9, 0x3a, 0x31, 0xa8, 0x7b, 0x57, 0x9a,
	0xec, 0x63, 0x5e, 0xb1, 0xbb, 0xa6, 0x49, 0x95, 0x72, 0xaf, 0x92, 0xc7, 0x06, 0xb6, 0x34, 0x1b,
	0xe7, 0x5c, 0x9b, 0x75, 0x3e, 0x9b, 0x8c, 0x66, 0x67, 0x4f, 0x8a, 0x8c, 0x7a, 0x04, 0x46, 0x19,
	0x6c, 0x6b, 0xf3, 0x2d, 0xfd, 0x5d, 0x66, 0x89, 0x85, 0x45, 0x6a, 0xab, 0x83, 0x93, 0x45, 0x4c,
	0xbf, 0xcf, 0xab, 0x82, 0x37, 0xed, 0x29, 0x13, 0x7b, 0xc3, 0x09, 0xde, 0x2a, 0x63, 0x8a, 0x8d,
	0x72, 0xb0, 0xb9, 0xb4, 0x11, 0xae, 0x1c, 0xd2, 0x8a, 0x98, 0x9a, 0x5a, 0x16, 0x1f, 0xd0, 0xa9,
	0x3d, 0x82, 0xdf, 0x2d, 0x61, 0x6a, 0x23, 0x04, 0xe3, 0xce, 0xfc, 0x76, 0x83, 0xb5, 0xa0, 0x67,
	0xe9, 0x08, 0xbb, 0x96, 0xd6, 0xc3, 0x15, 0x43, 0x24, 0xb7, 0xa8, 0xd9, 0x4e, 0xb8, 0x7c, 0x98,
	0xe4, 0xfc, 0x56, 0x6b, 0xe0, 0x52, 0xa3, 0xda, 0x89, 0x6b, 0x5a, 0xfb, 0xc1, 0xd3, 0x88, 0xf9,
	0x34, 0x0e, 0xc3, 0xb5, 0xc3, 0xd8, 0xa2, 0x3a, 0xb5, 0xb1, 0x61, 0x8f, 0x92, 0x42, 0xa9, 0x88,
	0xfb, 0x0b, 0x9a, 0x5e, 0x6c, 0x4d, 0xb5, 0x17, 0xae, 0x9e, 0xab, 0x2a, 0x1a, 0x8c, 0xbf, 0xc9,
	0x1e, 0x88, 0xd2, 0xd8, 0x2a, 0xeb, 0xc1, 0xd9, 0x69, 0xbc, 0xeb, 0xbd, 0x70, 0xe5, 0x6e, 0x23,
	0x67, 0x12, 0xdd, 0xb0, 0x69, 0xcb, 0x4a, 0xfd, 0xc4, 0x98, 0xd0, 0xf3, 0x83, 0x9a, 0xd9, 0x9a,
	0xd2, 0x6e, 0xf8, 0x74, 0x1a, 0x67, 0x2d, 0x6c, 0xb7, 0x26, 0xb3, 0x0f, 0x3e, 0xb3, 0x0b, 0x9b,
	0x05, 0x32, 0x55, 0xc4, 0x86, 0xdd, 0xf2, 0xd8, 0x76, 0x69, 0xb8, 0x48, 0x8c, 0x74, 0xab, 0x4e,
	0x0d, 0xc0, 0x67, 0xd3, 0xb6, 0x66, 0xe3, 0x89, 0x52, 0x21, 0x1d, 0xc1, 0x00, 0x47, 0xb0, 0x59,
	0xd0, 0xb3, 0x5a, 0xcb, 0x52, 0x3b, 0xe1, 0xf2, 0x01, 0x92, 0x69, 0x4d, 0x63, 0x0f, 0x44, 0xfd,
	0x16, 0x31, 0x5a, 0xd5, 0xd9, 0x74, 0xbd, 0x0f, 0x3e, 0xd5, 0xcf, 0x16, 0xdb, 0x5d, 0x9a, 0xad,
	0xed, 0xef, 0x4b, 0xef, 0x18, 0xde, 0x87, 0xbe, 0x07, 0xb0, 0x2b, 0xb0, 0x20, 0xa0, 0x9e, 0xd4,
	0xfc, 0x65, 0x37, 0x25, 0x5a, 0x33, 0x12, 0xcf, 0xa7, 0xf8, 0x62, 0x96, 0x72, 0x96, 0x6c, 0x67,
	0x31, 0x4b, 0x95, 0x7b, 0x83, 0x96, 0xd2, 0xe8, 0xdd, 0x1f, 0x62, 0xa0, 0x72, 0xa7, 0x7b, 0x45,
	0x19, 0x53, 0x59, 0x27, 0xf2, 0x64, 0x1f, 0x95, 0x2d, 0xac, 0xe5, 0xce, 0x3d, 0xf8, 0xf5, 0xe3,
	0xd8, 0x56, 0xf4, 0x9a, 0x9b, 0x04, 0x14, 0xcf, 0x73, 0xaa, 0xd0, 0x29, 0x6a, 0xe3, 0x22, 0x4f,
	0x11, 0x33, 0xce, 0xdf, 0x59, 0xb6, 0x58, 0x96, 0x7b, 0x7d, 0x46, 0xe8, 0x0b, 0x00, 0xff, 0x5f,
	0x5d, 0x9b, 0xd0, 0x3a, 0xa1, 0xc7, 0xc1, 0x95, 0x2b, 0xb1, 0x46, 0xe8, 0xac, 0x6b, 0x24, 0x1d,
	0xaa, 0xe7, 0xe7, 0x16, 0xb4, 0xa9, 0x31, 0x3f, 0x49, 0x0e, 0x53, 0xf4, 0xb8, 0x13, 0x2e, 0x71,
	0xd7, 0x45, 0x24, 0x89, 0x3c, 0x0c, 0x2e, 0x9a, 0x89, 0xd5, 0x22, 0x07, 0x5d, 0x1b, 0xe9, 0x93,
	0xce, 0x05, 0x1c, 0xfc, 0xfd, 0x4e, 0xf7, 0x9f, 0x00, 0xbe, 0xe4, 0xfe, 0xca, 0xe5, 0x65, 0x47,
	0x5e, 0xe6, 0x79, 0xd5, 0x49, 0xab, 0x93, 0x7d, 0x54, 0x33, 0x75, 0xd9, 0x24, 0xb9, 0x82, 0xe3,
	0xcc, 0x10, 0xec, 0xcc, 0x63, 0x1b, 0xbd, 0xb9, 0xc8, 0x98, 0x7a, 0xc6, 0x34, 0x79, 0xfa, 0x44,
	0xcf, 0x98, 0xac, 0xc9, 0xd3, 0x2f, 0xcb, 0x5b, 0x4f, 0x6c, 0x1c, 0x73, 0x2f, 0x36, 0x6c, 0xdf,
	0x50, 0x1d, 0xa9, 0x49, 0x72, 0x14, 0x95, 0xb9, 0x1e, 0x89, 0x40, 0xcf, 0xd7, 0xb4, 0xae, 0xb9,
	0xd3, 0x2f, 0x0b, 0xcd, 0x19, 0xd4, 0xdb, 0x50, 0x68, 0x9c, 0x86, 0xea, 0x00, 0xda, 0xdb, 0x24,
	0x77, 0xca, 0x8c, 0x77, 0x3d, 0xcb, 0x07, 0xff, 0x57, 0x1c, 0xae, 0x5a, 0x30, 0x73, 0xa1, 0x2d,
	0xc2, 0xb8, 0x2f, 0x92, 0xe8, 0x12, 0xb2, 0x90, 0x84, 0x85, 0x5a, 0x49, 0x7f, 0xd4, 0x61, 0xe3,
	0x46, 0x0c, 0x6e, 0x0b, 0xc5, 0x86, 0xa7, 0x5e, 0x66, 0xea, 0x59, 0x47, 0x9d, 0xd1, 0xf2, 0x0e,
	0x8f, 0xee, 0x5b, 0x51, 0xd0, 0x22, 0xea, 0x84, 0xa2, 0xcb, 0x80, 0x77, 0x71, 0x16, 0xb4, 0x93,
	0x20, 0xa1, 0x2f, 0x8c, 0xa9, 0x2f, 0x01, 0xea, 0x6f, 0x0c, 0x2a, 0xa1, 0x96, 0x7a, 0x1c, 0xa9,
	0x91, 0x60, 0x26, 0x9e, 0xb5, 0xfb, 0x00, 0xae, 0x14, 0x6d, 0x6e, 0x90, 0x12, 0x86, 0x39, 0x3f,
	0x6e, 0x3d, 0x61, 0x70, 0x63, 0xa4, 0x9d, 0xa8, 0xb7, 0x4a, 0xbe, 0x81, 0x5e, 0x6f, 0x69, 0xd6,
	0x28, 0xba, 0x10, 0x87, 0xcb, 0x7c, 0x9b, 0x2f, 0xf4, 0x82, 0x68, 0x24, 0xf3, 0x77, 0x67, 0x89,
	0xe7, 0x44, 0x03, 0xf0, 0xd9, 0x49, 0xdf, 0xd4, 0x79, 0x42, 0xce, 0xc6, 0xa0, 0x12, 0xe6, 0x09,
	0xa1, 0x5c, 0x8f, 0x3d, 0x13, 0x23, 0x1c, 0xd8, 0xfd, 0x11, 0xf0, 0xea, 0xca, 0x52, 0x34, 0xcd,
	0x35, 0x69, 0x1b, 0x9f, 0x81, 0x6a, 0xdf, 0x2c, 0x7c, 0x97, 0x00, 0x7a, 0xa5, 0xa1, 0xf8, 0x55,
	0x5b, 0xab, 0x43, 0xe8, 0x40, 0x14, 0x9c, 0x7b, 0x33, 0x71, 0x25, 0x0e, 0xbb, 0x02, 0x7b, 0x67,
	0xf1, 0x96, 0x44, 0xb4, 0xbd, 0x16, 0x6f, 0x49, 0x02, 0x96, 0xd2, 0xb7, 0x75, 0x60, 0xb8, 0x18,
	0x83, 0xbd, 0x61, 0x60, 0xc0, 0x55, 0x45, 0x86, 0x43, 0x9a, 0x87, 0xee, 0x40, 0x04, 0xa1, 0xf3,
	0x84, 0xd1, 0x0c, 0x17, 0xb5, 0xdb, 0xc8, 0x83, 0xd7, 0x39, 0x03, 0xe2, 0x32, 0x40, 0xaf, 0x36,
	0x14, 0x57, 0xaf, 0xb9, 0x7a, 0x10, 0x0d, 0x46, 0x41, 0x44, 0x6d, 0x32, 0xae, 0xc6, 0x61, 0x57,
	0xe0, 0x25, 0x48, 0x8c, 0x84, 0xe8, 0x3d, 0x49, 0x8c, 0x44, 0xc0, 0x52, 0xba, 0x59, 0x07, 0x89,
	0x4b, 0x21, 0x91, 0xc8, 0x32, 0xc5, 0xa2, 0x66, 0x32, 0x24, 0x0e, 0xf3, 0xe8, 0x0d, 0x46, 0x10,
	0x3d, 0x4f, 0x98, 0xa2, 0xd3, 0x5c, 0xb5, 0xd4, 0x46, 0x26, 0x6a, 0xbd, 0x33, 0x28, 0x3e, 0x04,
	0x0d, 0xee, 0xd9, 0x6b, 0xed, 0xd5, 0x61, 0x34, 0x14, 0x05, 0x15, 0xbe, 0xf9, 0xf8, 0xbb, 0x13,
	0xc2, 0xda, 0x1b, 0x2d, 0x5a, 0x2f, 0xce, 0x17, 0x73, 0xde, 0x78, 0x13, 0x49, 0x71, 0xba, 0xa8,
	0x9a, 0x49, 0x5f, 0xd5, 0xa1, 0xe1, 0x1f, 0x00, 0x53, 0xe1, 0xb2, 0x85, 0x23, 0xc7, 0x50, 0x38,
	0xc4, 0x83, 0x36, 0x10, 0x49, 0xb2, 0x70, 0x54, 0x29, 0x9a, 0xe2, 0x92, 0x56, 0x5b, 0x73, 0x05,
	0xeb, 0x9a, 0x41, 0x70, 0x11, 0xa0, 0x2d, 0x0d, 0xa6, 0x0a, 0xd6, 0x58, 0x1d, 0x5c, 0x34, 0x65,
	0x86, 0xcc, 0x14, 0x7c, 0x1a, 0x6e, 0xc6, 0xe1, 0xf2, 0x60, 0x25, 0x02, 0x6d, 0x10, 0x21, 0x20,
	0xac, 0x56, 0x24, 0x24, 0x3f, 0x06, 0x9a, 0x69, 0x52, 0x07, 0x83, 0xa0, 0xa9, 0xf4, 0xa0, 0x0e,
	0x0a, 0xd7, 0x62, 0x70, 0x53, 0x18, 0x14, 0x72, 0x9e, 0x24, 0xc3, 0x61, 0x8c, 0xc7, 0xee, 0x70,
	0x8b, 0xb1, 0xa3, 0x5e, 0xc1, 0xb2, 0xa6, 0x4f, 0xd1, 0x79, 0x77, 0x2b, 0x7d, 0x3a, 0x32, 0xf5,
	0xb0, 0x7c, 0xf8, 0xbc, 0x60, 0x8c, 0x5c, 0x07, 0x0d, 0x6c, 0x07, 0x85, 0x83, 0x51, 0x8f, 0xa2,
	0x23, 0x4d, 0x28, 0x2c, 0xc0, 0x8c, 0x7f, 0x96, 0x6e, 0xc4, 0x61, 0x57, 0xa0, 0xec, 0x24, 0xce,
	0x26, 0xa2, 0xca, 0x54, 0x30, 0x9b, 0x78, 0xd4, 0xf8, 0x2d, 0xa5, 0x7b, 0x75, 0xa0, 0xb9, 0x1a,
	0x32, 0x9b, 0xe4, 0x98, 0x22, 0x75, 0x97, 0x10, 0x95, 0x47, 0x35, 0x1d, 0x1d, 0x33, 0x55, 0x79,
	0x8a, 0xce, 0xb9, 0xc8, 0xcc, 0xb4, 0x1f, 0x19, 0xcf, 0x09, 0x46, 0xcc, 0x35, 0x80, 0xb6, 0x35,
	0x43, 0x8c, 0xa7, 0xa2, 0x8e, 0x2e, 0xfa, 0x54, 0x35, 0x02, 0x4c, 0x6d, 0x8a, 0x7e, 0x8c, 0xc3,
	0x15, 0x73, 0x8a, 0x8b, 0x68, 0xa3, 0x30, 0xd7, 0x08, 0x2b, 0x90, 0x89, 0x75, 0x22, 0x66, 0xe6,
	0xd8, 0x4a, 0x0f, 0xeb, 0x50, 0xf3, 0x69, 0x8c, 0x1d, 0xa0, 0x2c, 0x9e, 0x75, 0x5c, 0xcd, 0x2a,
	0x37, 0xc7, 0x79, 0x68, 0x8f, 0x44, 0x16, 0x5a, 0x5f, 0x07, 0x14, 0x5d, 0x70, 0xc9, 0x99, 0x6d,
	0x3b, 0x39, 0x7e, 0x37, 0x18, 0x3b, 0x9f, 0x01, 0xb4, 0xbd, 0x89, 0xd0, 0xfb, 0x75, 0xd4, 0x63,
	0x68, 0x34, 0x3a, 0x7a, 0x02, 0x13, 0xe5, 0xe4, 0xa9, 0x60, 0x41, 0x59, 0x9c, 0xa7, 0x84, 0x45,
	0x67, 0x71, 0x9e, 0x0a, 0x9a, 0x46, 0x92, 0xa7, 0x2c, 0x2e, 0x59, 0x65, 0x27, 0xf2, 0x3c, 0x55,
	0xd3, 0xff, 0x2f, 0xf3, 0x94, 0xcf, 0x8b, 0x56, 0xf2, 0x94, 0x4f, 0x26, 0xda, 0x3c, 0xe5, 0x9f,
	0xa5, 0xb3, 0x71, 0xb8, 0xc4, 0xad, 0xfa, 0x8b, 0x2b, 0xc8, 0xc1, 0x23, 0x81, 0x60, 0x89, 0x9b,
	0x1d, 0x43, 0x3a, 0xa8, 0xb8, 0x46, 0xd2, 0x77, 0x75, 0x18, 0x39, 0x1f, 0x0b, 0x57, 0x42, 0x3e,
	0x45, 0x32, 0x0c, 0x8e, 0x23, 0x3c, 0x7c, 0x43, 0x2d, 0x87, 0xcf, 0x3b, 0x51, 0x3d, 0x45, 0x32,
	0x14, 0xcd, 0x72, 0xd9, 0x72, 0x74, 0xb2, 0x61, 0xb1, 0x70, 0xba, 0x67, 0x3c, 0x7c, 0x04, 0x50,
	0x5f, 0x03, 0xd1, 0x0c, 0xf8, 0xaf, 0x1e, 0x42, 0x07, 0x9b, 0x69, 0xbb, 0x00, 0x0a, 0x6c, 0x4a,
	0x6e, 0xc5, 0xe1, 0x32, 0xdf, 0xe9, 0x8f, 0xb8, 0x26, 0x36, 0xff, 0x78, 0x28, 0xb1, 0x5e, 0xc4,
	0x02, 0x3b, 0x92, 0xf6, 0x5b, 0x4b, 0x3f, 0xd7, 0xcf, 0x3a, 0xa1, 0x2a, 0x63, 0x59, 0x8b, 0x18,
	0x55, 0x30, 0xde, 0xe6, 0x11, 0x3c, 0x1a, 0x59, 0x04, 0xf9, 0x29, 0xba, 0xdb, 0x05, 0x45, 0x1f,
	0xb8, 0x0b, 0xc7, 0x99, 0x88, 0x3b, 0x08, 0xfd, 0x3a, 0xec, 0x3a, 0xc2, 0x58, 0xf9, 0x1c, 0xa0,
	0x1d, 0x4d, 0xc4, 0x3b, 0x38, 0x24, 0x55, 0x45, 0xc7, 0x9a, 0x16, 0x59, 0xe8, 0x15, 0xd9, 0xd5,
	0x4e, 0xbc, 0x78, 0xfb, 0x16, 0xe8, 0xfc, 0xe9, 0x16, 0x58, 0x25, 0x80, 0xe6, 0x60, 0xe6, 0x14,
	0xce, 0xda, 0xe7, 0xee, 0x75, 0xc7, 0xba, 0xc1, 0xce, 0xe9, 0xfb, 0x8f, 0x92, 0x1d, 0x0f, 0x1f,
	0x25, 0x3b, 0x9e, 0x3c, 0x4a, 0x82, 0xf7, 0x2b, 0x49, 0xf0, 0x75, 0x25, 0x09, 0xee, 0x56, 0x92,
	0xe0, 0x7e, 0x25, 0x09, 0x7e, 0xa9, 0x24, 0xc1, 0x6f, 0x95, 0x64, 0xc7, 0x93, 0x4a, 0x12, 0x5c,
	0x79, 0x9c, 0xec, 0xb8, 0xfd, 0x38, 0x09, 0xd4, 0xbd, 0x79, 0x62, 0x4e, 0xe6, 0x53, 0x65, 0x52,
	0xb0, 0xb1, 0x65, 0x69, 0xa9, 0x12, 0x55, 0xd8, 0xc5, 0x04, 0xb1, 0x8a, 0xb2, 0x69, 0x91, 0xb2,
	0x9e, 0xc3, 0x96, 0x5c, 0xbd, 0xad, 0x98, 0x99, 0x3c, 0x51, 0xf0, 0x7b, 0x76, 0xf5, 0x03, 0x90,
	0xda, 0x77, 0x20, 0x99, 0xff, 0xb1, 0x2f, 0x13, 0x36, 0xff, 0x1b, 0x00, 0x00, 0xff, 0xff, 0x97,
	0xc6, 0xf7, 0x16, 0x24, 0x22, 0x00, 0x00,
}
