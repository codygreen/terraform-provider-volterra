// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ves.io/schema/site/public_custom_data_k8s_api.proto

package site

import proto "github.com/gogo/protobuf/proto"
import golang_proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"
import _ "github.com/gogo/googleapis/google/api"
import k8s_io_api_core_v1 "k8s.io/api/core/v1"
import _ "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
import _ "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
import _ "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/vesenv"

import strings "strings"
import reflect "reflect"

import context "golang.org/x/net/context"
import grpc "google.golang.org/grpc"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// PodListRequest
//
// x-displayName: "Pod List Request"
// Request to get list of pods in a namespace
type PodListRequest struct {
	// namespace
	//
	// x-displayName: "Namespace"
	// x-example: "ns1"
	// Namespace to scope the listing of pods in a site
	Namespace string `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// name
	//
	// x-displayName: "Name"
	// x-example: "site-1"
	// Site name
	Site string `protobuf:"bytes,2,opt,name=site,proto3" json:"site,omitempty"`
}

func (m *PodListRequest) Reset()      { *m = PodListRequest{} }
func (*PodListRequest) ProtoMessage() {}
func (*PodListRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorPublicCustomDataK8SApi, []int{0}
}

func (m *PodListRequest) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *PodListRequest) GetSite() string {
	if m != nil {
		return m.Site
	}
	return ""
}

func init() {
	proto.RegisterType((*PodListRequest)(nil), "ves.io.schema.site.PodListRequest")
	golang_proto.RegisterType((*PodListRequest)(nil), "ves.io.schema.site.PodListRequest")
}
func (this *PodListRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PodListRequest)
	if !ok {
		that2, ok := that.(PodListRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Namespace != that1.Namespace {
		return false
	}
	if this.Site != that1.Site {
		return false
	}
	return true
}
func (this *PodListRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&site.PodListRequest{")
	s = append(s, "Namespace: "+fmt.Sprintf("%#v", this.Namespace)+",\n")
	s = append(s, "Site: "+fmt.Sprintf("%#v", this.Site)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringPublicCustomDataK8SApi(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for CustomDataK8SAPI service

type CustomDataK8SAPIClient interface {
	// PodList
	//
	// x-displayName: "Pod List"
	// API to get list of pods in a site for a given namespace.
	PodList(ctx context.Context, in *PodListRequest, opts ...grpc.CallOption) (*k8s_io_api_core_v1.PodList, error)
}

type customDataK8SAPIClient struct {
	cc *grpc.ClientConn
}

func NewCustomDataK8SAPIClient(cc *grpc.ClientConn) CustomDataK8SAPIClient {
	return &customDataK8SAPIClient{cc}
}

func (c *customDataK8SAPIClient) PodList(ctx context.Context, in *PodListRequest, opts ...grpc.CallOption) (*k8s_io_api_core_v1.PodList, error) {
	out := new(k8s_io_api_core_v1.PodList)
	err := grpc.Invoke(ctx, "/ves.io.schema.site.CustomDataK8SAPI/PodList", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for CustomDataK8SAPI service

type CustomDataK8SAPIServer interface {
	// PodList
	//
	// x-displayName: "Pod List"
	// API to get list of pods in a site for a given namespace.
	PodList(context.Context, *PodListRequest) (*k8s_io_api_core_v1.PodList, error)
}

func RegisterCustomDataK8SAPIServer(s *grpc.Server, srv CustomDataK8SAPIServer) {
	s.RegisterService(&_CustomDataK8SAPI_serviceDesc, srv)
}

func _CustomDataK8SAPI_PodList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PodListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomDataK8SAPIServer).PodList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ves.io.schema.site.CustomDataK8SAPI/PodList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomDataK8SAPIServer).PodList(ctx, req.(*PodListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _CustomDataK8SAPI_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ves.io.schema.site.CustomDataK8SAPI",
	HandlerType: (*CustomDataK8SAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PodList",
			Handler:    _CustomDataK8SAPI_PodList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ves.io/schema/site/public_custom_data_k8s_api.proto",
}

func (m *PodListRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PodListRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Namespace) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPublicCustomDataK8SApi(dAtA, i, uint64(len(m.Namespace)))
		i += copy(dAtA[i:], m.Namespace)
	}
	if len(m.Site) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintPublicCustomDataK8SApi(dAtA, i, uint64(len(m.Site)))
		i += copy(dAtA[i:], m.Site)
	}
	return i, nil
}

func encodeVarintPublicCustomDataK8SApi(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *PodListRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovPublicCustomDataK8SApi(uint64(l))
	}
	l = len(m.Site)
	if l > 0 {
		n += 1 + l + sovPublicCustomDataK8SApi(uint64(l))
	}
	return n
}

func sovPublicCustomDataK8SApi(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozPublicCustomDataK8SApi(x uint64) (n int) {
	return sovPublicCustomDataK8SApi(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *PodListRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PodListRequest{`,
		`Namespace:` + fmt.Sprintf("%v", this.Namespace) + `,`,
		`Site:` + fmt.Sprintf("%v", this.Site) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringPublicCustomDataK8SApi(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *PodListRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCustomDataK8SApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PodListRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PodListRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomDataK8SApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomDataK8SApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Site", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomDataK8SApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomDataK8SApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Site = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCustomDataK8SApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCustomDataK8SApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPublicCustomDataK8SApi(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPublicCustomDataK8SApi
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPublicCustomDataK8SApi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPublicCustomDataK8SApi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthPublicCustomDataK8SApi
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowPublicCustomDataK8SApi
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipPublicCustomDataK8SApi(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthPublicCustomDataK8SApi = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPublicCustomDataK8SApi   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("ves.io/schema/site/public_custom_data_k8s_api.proto", fileDescriptorPublicCustomDataK8SApi)
}
func init() {
	golang_proto.RegisterFile("ves.io/schema/site/public_custom_data_k8s_api.proto", fileDescriptorPublicCustomDataK8SApi)
}

var fileDescriptorPublicCustomDataK8SApi = []byte{
	// 560 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x53, 0x4f, 0x6b, 0xd4, 0x4e,
	0x18, 0xde, 0xd9, 0x2d, 0xbf, 0x1f, 0xcd, 0x41, 0x24, 0x20, 0xa4, 0xdb, 0x32, 0xc8, 0x5e, 0xdc,
	0x0a, 0x33, 0xe3, 0xda, 0xcb, 0x7a, 0x12, 0xab, 0x60, 0xfd, 0x83, 0x96, 0x7a, 0xeb, 0x52, 0x96,
	0x49, 0xf2, 0x36, 0x8d, 0xbb, 0xc9, 0xc4, 0xcc, 0x24, 0xd8, 0x2d, 0x45, 0xe9, 0xd5, 0x8b, 0x20,
	0xf8, 0x19, 0xfc, 0x08, 0x42, 0x2f, 0xbd, 0xb5, 0x27, 0x29, 0x7a, 0xe9, 0xd1, 0x4d, 0x7b, 0x10,
	0x4f, 0xfd, 0x08, 0x92, 0x49, 0x76, 0xbb, 0x8b, 0xa2, 0x08, 0x5e, 0x86, 0x77, 0xf2, 0xbc, 0xcf,
	0xf3, 0xbc, 0x79, 0x66, 0xc6, 0x58, 0x4a, 0x41, 0x52, 0x5f, 0x30, 0xe9, 0x6c, 0x41, 0xc0, 0x99,
	0xf4, 0x15, 0xb0, 0x28, 0xb1, 0xfb, 0xbe, 0xd3, 0x75, 0x12, 0xa9, 0x44, 0xd0, 0x75, 0xb9, 0xe2,
	0xdd, 0x5e, 0x5b, 0x76, 0x79, 0xe4, 0xd3, 0x28, 0x16, 0x4a, 0x98, 0x66, 0x41, 0xa2, 0x05, 0x89,
	0xe6, 0xa4, 0x3a, 0xf1, 0x7c, 0xb5, 0x95, 0xd8, 0xd4, 0x11, 0x01, 0xf3, 0x84, 0x27, 0x98, 0x6e,
	0xb5, 0x93, 0x4d, 0xbd, 0xd3, 0x1b, 0x5d, 0x15, 0x12, 0xf5, 0x05, 0x4f, 0x08, 0xaf, 0x0f, 0x8c,
	0x47, 0x3e, 0xe3, 0x61, 0x28, 0x14, 0x57, 0xbe, 0x08, 0x65, 0x89, 0x36, 0x7a, 0x6d, 0x3d, 0x55,
	0x8e, 0x3a, 0x22, 0x06, 0x96, 0xb6, 0x98, 0x07, 0x21, 0xc4, 0x5c, 0x81, 0x5b, 0xf6, 0xcc, 0x4f,
	0x4f, 0x2e, 0xa2, 0x49, 0x81, 0xb9, 0x69, 0x50, 0x6d, 0x47, 0x30, 0xd6, 0x9e, 0x86, 0x52, 0x90,
	0x10, 0xa6, 0xd3, 0xf4, 0xc6, 0xb2, 0x71, 0x69, 0x55, 0xb8, 0x8f, 0x7d, 0xa9, 0xd6, 0xe0, 0x45,
	0x02, 0x52, 0x99, 0x0b, 0xc6, 0x6c, 0xc8, 0x03, 0x90, 0x11, 0x77, 0xc0, 0x42, 0x57, 0x51, 0x73,
	0x76, 0xed, 0xe2, 0x83, 0x69, 0x1a, 0x33, 0x79, 0x08, 0x56, 0x55, 0x03, 0xba, 0xbe, 0xf9, 0x7e,
	0xc6, 0xb8, 0x7c, 0x57, 0x47, 0x78, 0x8f, 0x2b, 0xfe, 0xa8, 0xfd, 0xec, 0xce, 0xea, 0x03, 0xf3,
	0xa4, 0x66, 0xfc, 0x5f, 0x2a, 0x9b, 0x0d, 0xfa, 0x73, 0x8c, 0x74, 0xda, 0xb6, 0x3e, 0x4f, 0x8b,
	0x24, 0x68, 0x1e, 0x7e, 0x9e, 0x04, 0x4d, 0x5b, 0xa3, 0x9e, 0xc6, 0x9b, 0xda, 0xd1, 0xc7, 0x2a,
	0xca, 0x0e, 0xad, 0x2b, 0x29, 0x48, 0xe2, 0x0b, 0xe2, 0x73, 0x2e, 0x89, 0x93, 0x2f, 0x31, 0x70,
	0xf7, 0xfb, 0xa1, 0x75, 0x86, 0x8c, 0x7a, 0x89, 0x15, 0x26, 0x24, 0x37, 0x21, 0xa3, 0x09, 0x9e,
	0x18, 0x35, 0x0f, 0x94, 0x79, 0xbf, 0x3c, 0x71, 0x36, 0xfe, 0x21, 0xc9, 0xe4, 0xb6, 0x54, 0x10,
	0x14, 0xf7, 0xa1, 0xd9, 0xe1, 0x64, 0xb0, 0xd1, 0xec, 0x10, 0x4e, 0x06, 0x37, 0xc8, 0xad, 0x8d,
	0xeb, 0x9d, 0xb2, 0x58, 0xbc, 0xbd, 0xa8, 0x8f, 0x28, 0x6d, 0xb1, 0x48, 0xb8, 0xd2, 0x4c, 0x0b,
	0x3d, 0xf1, 0x0f, 0xf4, 0x26, 0xa8, 0xbf, 0x6d, 0xcf, 0x7d, 0xf7, 0xbe, 0x9c, 0xbd, 0xab, 0xbe,
	0x32, 0x5b, 0x7f, 0xb0, 0xdd, 0xc9, 0xd7, 0xdd, 0xc9, 0x81, 0xd7, 0x1f, 0x9a, 0x2b, 0x7f, 0x45,
	0x9a, 0x68, 0xda, 0x19, 0xd7, 0xbb, 0x5a, 0xab, 0x7e, 0xed, 0x60, 0x1f, 0xd5, 0x3e, 0xef, 0xa3,
	0xb9, 0x5f, 0x9c, 0xea, 0x53, 0xfb, 0x39, 0x38, 0x6a, 0xef, 0x93, 0x55, 0xb5, 0xd0, 0xf2, 0xe0,
	0x78, 0x88, 0x2b, 0x27, 0x43, 0x5c, 0x39, 0x1f, 0x62, 0xf4, 0x3a, 0xc3, 0xe8, 0x43, 0x86, 0xd1,
	0x51, 0x86, 0xd1, 0x71, 0x86, 0xd1, 0xd7, 0x0c, 0xa3, 0x6f, 0x19, 0xae, 0x9c, 0x67, 0x18, 0xbd,
	0x3d, 0xc5, 0x95, 0x83, 0x53, 0x8c, 0xd6, 0x57, 0x3c, 0x11, 0xf5, 0x3c, 0x9a, 0x8a, 0xbe, 0x82,
	0x38, 0xe6, 0x34, 0x91, 0x4c, 0x17, 0x9b, 0x22, 0x0e, 0x48, 0x14, 0x8b, 0xd4, 0x77, 0x21, 0x26,
	0x23, 0x98, 0x45, 0xb6, 0x27, 0x18, 0xbc, 0x54, 0xa3, 0x37, 0x7d, 0xf1, 0xb4, 0xed, 0xff, 0xf4,
	0xfd, 0x5e, 0xfa, 0x11, 0x00, 0x00, 0xff, 0xff, 0xb0, 0x6f, 0x94, 0xb3, 0xf7, 0x03, 0x00, 0x00,
}
