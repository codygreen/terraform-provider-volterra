// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ves.io/schema/site/public_uam_kubeconfig.proto

package site

import proto "github.com/gogo/protobuf/proto"
import golang_proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"
import _ "github.com/gogo/googleapis/google/api"
import google_api2 "google.golang.org/genproto/googleapis/api/httpbody"
import _ "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
import _ "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/vesenv"

import context "golang.org/x/net/context"
import grpc "google.golang.org/grpc"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for UamKubeConfigAPI service

type UamKubeConfigAPIClient interface {
	// Create Global Kube Config
	//
	// x-displayName: "Create Global Kube Config"
	// Download kube config for global k8s cluster access
	CreateGlobalKubeConfig(ctx context.Context, in *CreateGlobalKubeConfigReq, opts ...grpc.CallOption) (*google_api2.HttpBody, error)
	// List Global Kube Configs
	//
	// x-displayName: "List Global Kube Configs"
	// Returns list of all global active kubeconfig minted for this site
	ListGlobalKubeConfig(ctx context.Context, in *ListGlobalKubeConfigReq, opts ...grpc.CallOption) (*ListKubeConfigRsp, error)
	// Revoke Global Kubeconfig
	//
	// x-displayName: "Revoke Global Kubeconfig"
	// Kubeconfig credential revoke/deletion.
	RevokeGlobalKubeConfig(ctx context.Context, in *RevokeKubeConfigReq, opts ...grpc.CallOption) (*KubeConfigStatusRsp, error)
}

type uamKubeConfigAPIClient struct {
	cc *grpc.ClientConn
}

func NewUamKubeConfigAPIClient(cc *grpc.ClientConn) UamKubeConfigAPIClient {
	return &uamKubeConfigAPIClient{cc}
}

func (c *uamKubeConfigAPIClient) CreateGlobalKubeConfig(ctx context.Context, in *CreateGlobalKubeConfigReq, opts ...grpc.CallOption) (*google_api2.HttpBody, error) {
	out := new(google_api2.HttpBody)
	err := grpc.Invoke(ctx, "/ves.io.schema.site.UamKubeConfigAPI/CreateGlobalKubeConfig", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uamKubeConfigAPIClient) ListGlobalKubeConfig(ctx context.Context, in *ListGlobalKubeConfigReq, opts ...grpc.CallOption) (*ListKubeConfigRsp, error) {
	out := new(ListKubeConfigRsp)
	err := grpc.Invoke(ctx, "/ves.io.schema.site.UamKubeConfigAPI/ListGlobalKubeConfig", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uamKubeConfigAPIClient) RevokeGlobalKubeConfig(ctx context.Context, in *RevokeKubeConfigReq, opts ...grpc.CallOption) (*KubeConfigStatusRsp, error) {
	out := new(KubeConfigStatusRsp)
	err := grpc.Invoke(ctx, "/ves.io.schema.site.UamKubeConfigAPI/RevokeGlobalKubeConfig", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for UamKubeConfigAPI service

type UamKubeConfigAPIServer interface {
	// Create Global Kube Config
	//
	// x-displayName: "Create Global Kube Config"
	// Download kube config for global k8s cluster access
	CreateGlobalKubeConfig(context.Context, *CreateGlobalKubeConfigReq) (*google_api2.HttpBody, error)
	// List Global Kube Configs
	//
	// x-displayName: "List Global Kube Configs"
	// Returns list of all global active kubeconfig minted for this site
	ListGlobalKubeConfig(context.Context, *ListGlobalKubeConfigReq) (*ListKubeConfigRsp, error)
	// Revoke Global Kubeconfig
	//
	// x-displayName: "Revoke Global Kubeconfig"
	// Kubeconfig credential revoke/deletion.
	RevokeGlobalKubeConfig(context.Context, *RevokeKubeConfigReq) (*KubeConfigStatusRsp, error)
}

func RegisterUamKubeConfigAPIServer(s *grpc.Server, srv UamKubeConfigAPIServer) {
	s.RegisterService(&_UamKubeConfigAPI_serviceDesc, srv)
}

func _UamKubeConfigAPI_CreateGlobalKubeConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateGlobalKubeConfigReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UamKubeConfigAPIServer).CreateGlobalKubeConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ves.io.schema.site.UamKubeConfigAPI/CreateGlobalKubeConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UamKubeConfigAPIServer).CreateGlobalKubeConfig(ctx, req.(*CreateGlobalKubeConfigReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UamKubeConfigAPI_ListGlobalKubeConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListGlobalKubeConfigReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UamKubeConfigAPIServer).ListGlobalKubeConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ves.io.schema.site.UamKubeConfigAPI/ListGlobalKubeConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UamKubeConfigAPIServer).ListGlobalKubeConfig(ctx, req.(*ListGlobalKubeConfigReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UamKubeConfigAPI_RevokeGlobalKubeConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RevokeKubeConfigReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UamKubeConfigAPIServer).RevokeGlobalKubeConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ves.io.schema.site.UamKubeConfigAPI/RevokeGlobalKubeConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UamKubeConfigAPIServer).RevokeGlobalKubeConfig(ctx, req.(*RevokeKubeConfigReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _UamKubeConfigAPI_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ves.io.schema.site.UamKubeConfigAPI",
	HandlerType: (*UamKubeConfigAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateGlobalKubeConfig",
			Handler:    _UamKubeConfigAPI_CreateGlobalKubeConfig_Handler,
		},
		{
			MethodName: "ListGlobalKubeConfig",
			Handler:    _UamKubeConfigAPI_ListGlobalKubeConfig_Handler,
		},
		{
			MethodName: "RevokeGlobalKubeConfig",
			Handler:    _UamKubeConfigAPI_RevokeGlobalKubeConfig_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ves.io/schema/site/public_uam_kubeconfig.proto",
}

func init() {
	proto.RegisterFile("ves.io/schema/site/public_uam_kubeconfig.proto", fileDescriptorPublicUamKubeconfig)
}
func init() {
	golang_proto.RegisterFile("ves.io/schema/site/public_uam_kubeconfig.proto", fileDescriptorPublicUamKubeconfig)
}

var fileDescriptorPublicUamKubeconfig = []byte{
	// 524 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x93, 0x41, 0x6b, 0x13, 0x4f,
	0x18, 0xc6, 0x33, 0xf9, 0xff, 0xf1, 0x90, 0x8b, 0x65, 0x29, 0x25, 0x8d, 0x32, 0x87, 0x80, 0x14,
	0x94, 0x9d, 0x01, 0x7b, 0xa9, 0x0a, 0x82, 0xed, 0xc1, 0x8a, 0x82, 0x12, 0x11, 0x8a, 0x97, 0x32,
	0xbb, 0x79, 0xb3, 0x19, 0x93, 0xdd, 0x77, 0x9c, 0x99, 0x5d, 0x8d, 0x22, 0x48, 0x3f, 0x81, 0xe0,
	0x97, 0xf0, 0x1b, 0x28, 0x14, 0xa4, 0x07, 0xa1, 0x3d, 0x49, 0xd1, 0x8b, 0x47, 0xb3, 0xf5, 0xe0,
	0xb1, 0x5f, 0x40, 0x90, 0xcc, 0x26, 0x24, 0x21, 0x9b, 0x8b, 0xa7, 0x9d, 0xe1, 0xf9, 0xed, 0xcc,
	0xf3, 0xcc, 0xc3, 0x5b, 0x63, 0x19, 0x18, 0x26, 0x91, 0x9b, 0xb0, 0x0b, 0xb1, 0xe0, 0x46, 0x5a,
	0xe0, 0x2a, 0x0d, 0xfa, 0x32, 0xdc, 0x4f, 0x45, 0xbc, 0xdf, 0x4b, 0x03, 0x08, 0x31, 0xe9, 0xc8,
	0x88, 0x29, 0x8d, 0x16, 0x3d, 0xaf, 0xe0, 0x59, 0xc1, 0xb3, 0x11, 0xdf, 0xf0, 0x23, 0x69, 0xbb,
	0x69, 0xc0, 0x42, 0x8c, 0x79, 0x84, 0x11, 0x72, 0x87, 0x06, 0x69, 0xc7, 0xed, 0xdc, 0xc6, 0xad,
	0x8a, 0x23, 0x1a, 0x97, 0x23, 0xc4, 0xa8, 0x0f, 0x5c, 0x28, 0xc9, 0x45, 0x92, 0xa0, 0x15, 0x56,
	0x62, 0x62, 0xc6, 0xea, 0xfa, 0x8c, 0xda, 0xb5, 0x56, 0x05, 0xd8, 0x1e, 0x8c, 0xa5, 0x4b, 0xf3,
	0x5e, 0x51, 0xcd, 0xfe, 0x47, 0x4b, 0x82, 0xd8, 0x81, 0x82, 0x89, 0xde, 0x9c, 0xd7, 0x33, 0x30,
	0x90, 0x64, 0xf3, 0x67, 0x5c, 0xff, 0xf3, 0x7f, 0x6d, 0xe5, 0x89, 0x88, 0xef, 0xa7, 0x01, 0xec,
	0xb8, 0xd0, 0x77, 0x1e, 0xdd, 0xf3, 0x3e, 0x92, 0xda, 0xda, 0x8e, 0x06, 0x61, 0xe1, 0x6e, 0x1f,
	0x03, 0xd1, 0x9f, 0xaa, 0x9e, 0xcf, 0x16, 0x5f, 0x83, 0x95, 0xb3, 0x2d, 0x78, 0xde, 0x58, 0x65,
	0x45, 0x36, 0x26, 0x94, 0x64, 0xbb, 0xd6, 0xaa, 0x6d, 0x6c, 0x0f, 0x9a, 0x7b, 0xf9, 0x71, 0x7d,
	0x25, 0x03, 0xe3, 0x4b, 0xf4, 0x7b, 0x5b, 0xc6, 0x7f, 0xa1, 0xa5, 0x85, 0x83, 0xef, 0xbf, 0xde,
	0x57, 0x6f, 0x37, 0x6f, 0x8c, 0xbb, 0xe0, 0x89, 0x88, 0xc1, 0x28, 0x11, 0x82, 0xe1, 0x66, 0x60,
	0x2c, 0xc4, 0x2e, 0xa0, 0xe1, 0xaf, 0x47, 0x9f, 0x37, 0x3c, 0x72, 0xb7, 0xf9, 0xd3, 0xb6, 0xcc,
	0x4d, 0x72, 0xd5, 0xfb, 0x42, 0x6a, 0xab, 0x0f, 0xa4, 0xb1, 0x0b, 0xbe, 0xaf, 0x95, 0xf9, 0x2e,
	0x23, 0x47, 0xae, 0xaf, 0x2c, 0x83, 0x67, 0x30, 0xa3, 0x9a, 0x7b, 0x27, 0x9f, 0xaa, 0x24, 0x3f,
	0xae, 0x5f, 0x9c, 0x89, 0xa2, 0x41, 0xb4, 0x5d, 0x92, 0x5b, 0xde, 0xbf, 0x27, 0xf1, 0x3e, 0x93,
	0xda, 0x5a, 0x0b, 0x32, 0xec, 0x2d, 0x16, 0xb0, 0x51, 0xe6, 0xad, 0x60, 0xe7, 0x43, 0x94, 0x82,
	0x53, 0xe4, 0xb1, 0x15, 0x36, 0x35, 0xa3, 0x18, 0xad, 0xa5, 0x6d, 0x6c, 0x35, 0x37, 0x97, 0x67,
	0xd0, 0xee, 0xce, 0xf2, 0x1e, 0x1a, 0x1b, 0x47, 0x87, 0xe4, 0xbf, 0x6f, 0x87, 0x64, 0xbd, 0xc4,
	0xc3, 0xc3, 0xe0, 0x19, 0x84, 0xf6, 0xe0, 0x6b, 0xbd, 0xda, 0x25, 0xdb, 0xaf, 0x4e, 0x87, 0xb4,
	0xf2, 0x63, 0x48, 0x2b, 0xe7, 0x43, 0x4a, 0xde, 0xe6, 0x94, 0x7c, 0xc8, 0x29, 0x39, 0xc9, 0x29,
	0x39, 0xcd, 0x29, 0xf9, 0x99, 0x53, 0xf2, 0x3b, 0xa7, 0x95, 0xf3, 0x9c, 0x92, 0x77, 0x67, 0xb4,
	0x72, 0x74, 0x46, 0xc9, 0xd3, 0xdd, 0x08, 0x55, 0x2f, 0x62, 0x19, 0xf6, 0x2d, 0x68, 0x2d, 0x58,
	0x6a, 0xb8, 0x5b, 0x74, 0x50, 0xc7, 0xbe, 0xd2, 0x98, 0xc9, 0x36, 0x68, 0x7f, 0x22, 0x73, 0x15,
	0x44, 0xc8, 0xe1, 0xa5, 0x9d, 0x0c, 0xc9, 0x74, 0x56, 0x82, 0x0b, 0x6e, 0x04, 0x36, 0xff, 0x06,
	0x00, 0x00, 0xff, 0xff, 0xb0, 0x90, 0x5b, 0xe3, 0x11, 0x04, 0x00, 0x00,
}
