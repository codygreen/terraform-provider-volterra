// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ves.io/schema/healthcheck/types.proto

package healthcheck

import proto "github.com/gogo/protobuf/proto"
import golang_proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"
import _ "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
import ves_io_schema4 "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
import _ "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
import _ "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"

import strings "strings"
import reflect "reflect"
import sortkeys "github.com/gogo/protobuf/sortkeys"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// HttpHealthCheck
//
// x-displayName: "HTTP Health Check"
// Healthy if "get" method on URL "http(s)://<host>/<path>" with optional "<header>" returns success.
// "host" is not used for DNS resolution. It is used as HTTP Header in the request.
type HttpHealthCheck struct {
	// host header choice
	//
	// x-displayName: "Specify Host Header"
	// x-required
	// Specify the value of host header in the HTTP health check request.
	//
	// Types that are valid to be assigned to HostHeaderChoice:
	//	*HttpHealthCheck_UseOriginServerName
	//	*HttpHealthCheck_HostHeader
	HostHeaderChoice isHttpHealthCheck_HostHeaderChoice `protobuf_oneof:"host_header_choice"`
	// path
	//
	// x-displayName: "Path"
	// x-required
	// x-example: "/healthcheck"
	// Specifies the HTTP path that will be requested during health checking.
	Path string `protobuf:"bytes,2,opt,name=path,proto3" json:"path,omitempty"`
	// Headers to add in health check request
	//
	// x-displayName: "Request Headers to Add"
	// Specifies a list of HTTP headers that should be added to each request that is sent to the
	// health checked cluster. This is a list of key-value pairs.
	Headers map[string]string `protobuf:"bytes,3,rep,name=headers" json:"headers,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Headers to be removed from health check request
	//
	// x-displayName: "Request Headers to Remove"
	// x-example: "user-agent"
	// Specifies a list of HTTP headers that should be removed from each request that is sent to the
	// health checked cluster. This is a list of keys of headers.
	RequestHeadersToRemove []string `protobuf:"bytes,4,rep,name=request_headers_to_remove,json=requestHeadersToRemove" json:"request_headers_to_remove,omitempty"`
	// Use HTTP2
	//
	// x-displayName: "Use HTTP2"
	// x-example: false
	// If set, health checks will be made using http/2.
	UseHttp2 bool `protobuf:"varint,5,opt,name=use_http2,json=useHttp2,proto3" json:"use_http2,omitempty"`
}

func (m *HttpHealthCheck) Reset()                    { *m = HttpHealthCheck{} }
func (*HttpHealthCheck) ProtoMessage()               {}
func (*HttpHealthCheck) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{0} }

type isHttpHealthCheck_HostHeaderChoice interface {
	isHttpHealthCheck_HostHeaderChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type HttpHealthCheck_UseOriginServerName struct {
	UseOriginServerName *ves_io_schema4.Empty `protobuf:"bytes,7,opt,name=use_origin_server_name,json=useOriginServerName,oneof"`
}
type HttpHealthCheck_HostHeader struct {
	HostHeader string `protobuf:"bytes,1,opt,name=host_header,json=hostHeader,proto3,oneof"`
}

func (*HttpHealthCheck_UseOriginServerName) isHttpHealthCheck_HostHeaderChoice() {}
func (*HttpHealthCheck_HostHeader) isHttpHealthCheck_HostHeaderChoice()          {}

func (m *HttpHealthCheck) GetHostHeaderChoice() isHttpHealthCheck_HostHeaderChoice {
	if m != nil {
		return m.HostHeaderChoice
	}
	return nil
}

func (m *HttpHealthCheck) GetUseOriginServerName() *ves_io_schema4.Empty {
	if x, ok := m.GetHostHeaderChoice().(*HttpHealthCheck_UseOriginServerName); ok {
		return x.UseOriginServerName
	}
	return nil
}

func (m *HttpHealthCheck) GetHostHeader() string {
	if x, ok := m.GetHostHeaderChoice().(*HttpHealthCheck_HostHeader); ok {
		return x.HostHeader
	}
	return ""
}

func (m *HttpHealthCheck) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *HttpHealthCheck) GetHeaders() map[string]string {
	if m != nil {
		return m.Headers
	}
	return nil
}

func (m *HttpHealthCheck) GetRequestHeadersToRemove() []string {
	if m != nil {
		return m.RequestHeadersToRemove
	}
	return nil
}

func (m *HttpHealthCheck) GetUseHttp2() bool {
	if m != nil {
		return m.UseHttp2
	}
	return false
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*HttpHealthCheck) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _HttpHealthCheck_OneofMarshaler, _HttpHealthCheck_OneofUnmarshaler, _HttpHealthCheck_OneofSizer, []interface{}{
		(*HttpHealthCheck_UseOriginServerName)(nil),
		(*HttpHealthCheck_HostHeader)(nil),
	}
}

func _HttpHealthCheck_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*HttpHealthCheck)
	// host_header_choice
	switch x := m.HostHeaderChoice.(type) {
	case *HttpHealthCheck_UseOriginServerName:
		_ = b.EncodeVarint(7<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.UseOriginServerName); err != nil {
			return err
		}
	case *HttpHealthCheck_HostHeader:
		_ = b.EncodeVarint(1<<3 | proto.WireBytes)
		_ = b.EncodeStringBytes(x.HostHeader)
	case nil:
	default:
		return fmt.Errorf("HttpHealthCheck.HostHeaderChoice has unexpected type %T", x)
	}
	return nil
}

func _HttpHealthCheck_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*HttpHealthCheck)
	switch tag {
	case 7: // host_header_choice.use_origin_server_name
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.HostHeaderChoice = &HttpHealthCheck_UseOriginServerName{msg}
		return true, err
	case 1: // host_header_choice.host_header
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.HostHeaderChoice = &HttpHealthCheck_HostHeader{x}
		return true, err
	default:
		return false, nil
	}
}

func _HttpHealthCheck_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*HttpHealthCheck)
	// host_header_choice
	switch x := m.HostHeaderChoice.(type) {
	case *HttpHealthCheck_UseOriginServerName:
		s := proto.Size(x.UseOriginServerName)
		n += proto.SizeVarint(7<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *HttpHealthCheck_HostHeader:
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.HostHeader)))
		n += len(x.HostHeader)
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// TcpHealthCheck
//
// x-displayName: "TCP Health Check"
// Healthy if TCP connection is successful and response payload matches <expected_response>
type TcpHealthCheck struct {
	// send payload
	//
	// x-displayName: "Send Payload"
	// x-example: "000000FF"
	// raw bytes sent in the request. Empty payloads imply a connect-only health check.
	// Describes the encoding of the payload bytes in the payload.
	// Hex encoded payload.
	SendPayload string `protobuf:"bytes,1,opt,name=send_payload,json=sendPayload,proto3" json:"send_payload,omitempty"`
	// expected response
	//
	// x-displayName: "Expected Response"
	// x-example: "00000034"
	// raw bytes expected in the request. Describes the encoding of the payload bytes in the payload.
	// Hex encoded payload.
	ExpectedResponse string `protobuf:"bytes,2,opt,name=expected_response,json=expectedResponse,proto3" json:"expected_response,omitempty"`
}

func (m *TcpHealthCheck) Reset()                    { *m = TcpHealthCheck{} }
func (*TcpHealthCheck) ProtoMessage()               {}
func (*TcpHealthCheck) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{1} }

func (m *TcpHealthCheck) GetSendPayload() string {
	if m != nil {
		return m.SendPayload
	}
	return ""
}

func (m *TcpHealthCheck) GetExpectedResponse() string {
	if m != nil {
		return m.ExpectedResponse
	}
	return ""
}

// GlobalSpecType
//
// x-displayName: "Global Configuration Specification"
// Configuration specification for HealthCheck
type GlobalSpecType struct {
	// health_check
	//
	// x-required
	// x-displayName: "Health Check"
	// Specifies whether to perform HTTP Health Check or TCP Health check
	//
	// Types that are valid to be assigned to HealthCheck:
	//	*GlobalSpecType_HttpHealthCheck
	//	*GlobalSpecType_TcpHealthCheck
	HealthCheck isGlobalSpecType_HealthCheck `protobuf_oneof:"health_check"`
	// timeout
	//
	// x-displayName: "Timeout"
	// x-required
	// x-example: "1"
	// Timeout in seconds to wait for successful response. In other words, it is
	// the time to wait for a health check response. If the timeout is reached the
	// health check attempt will be considered a failure.
	Timeout uint32 `protobuf:"varint,3,opt,name=timeout,proto3" json:"timeout,omitempty"`
	// interval
	//
	// x-displayName: "Interval"
	// x-required
	// x-example: "10"
	// Time interval in seconds between two healthcheck requests.
	Interval uint32 `protobuf:"varint,4,opt,name=interval,proto3" json:"interval,omitempty"`
	// jitter
	//
	// x-displayName: "Jitter"
	// x-example: "1"
	// Random variation of time in seconds interval between two health checks
	// This is the amount of time in seconds added to the interval above to
	// increase the wait time between two healthcheck requests.
	Jitter uint32 `protobuf:"varint,5,opt,name=jitter,proto3" json:"jitter,omitempty"`
	// unhealthy threshold
	//
	// x-displayName: "Unhealthy Threshold"
	// x-required
	// x-example: "5"
	// Number of failed responses before declaring unhealthy. In other words, this is
	// the number of unhealthy health checks required before a host is marked
	// unhealthy. Note that for http health checking if a host responds with 503
	// this threshold is ignored and the host is considered unhealthy immediately.
	UnhealthyThreshold uint32 `protobuf:"varint,6,opt,name=unhealthy_threshold,json=unhealthyThreshold,proto3" json:"unhealthy_threshold,omitempty"`
	// healthy threshold
	//
	// x-displayName: "Healthy Threshold"
	// x-required
	// x-example: "2"
	// Number of successful responses before declaring healthy. In other words, this is
	// the number of healthy health checks required before a host is marked
	// healthy. Note that during startup, only a single successful health check is
	// required to mark a host healthy.
	HealthyThreshold uint32 `protobuf:"varint,7,opt,name=healthy_threshold,json=healthyThreshold,proto3" json:"healthy_threshold,omitempty"`
	// jitter percent
	//
	// x-displayName: "Jitter Percent"
	// x-example: "25"
	// Add a random amount of time as a percent value to the interval between successive healthcheck requests.
	JitterPercent uint32 `protobuf:"varint,9,opt,name=jitter_percent,json=jitterPercent,proto3" json:"jitter_percent,omitempty"`
}

func (m *GlobalSpecType) Reset()                    { *m = GlobalSpecType{} }
func (*GlobalSpecType) ProtoMessage()               {}
func (*GlobalSpecType) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{2} }

type isGlobalSpecType_HealthCheck interface {
	isGlobalSpecType_HealthCheck()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type GlobalSpecType_HttpHealthCheck struct {
	HttpHealthCheck *HttpHealthCheck `protobuf:"bytes,1,opt,name=http_health_check,json=httpHealthCheck,oneof"`
}
type GlobalSpecType_TcpHealthCheck struct {
	TcpHealthCheck *TcpHealthCheck `protobuf:"bytes,2,opt,name=tcp_health_check,json=tcpHealthCheck,oneof"`
}

func (*GlobalSpecType_HttpHealthCheck) isGlobalSpecType_HealthCheck() {}
func (*GlobalSpecType_TcpHealthCheck) isGlobalSpecType_HealthCheck()  {}

func (m *GlobalSpecType) GetHealthCheck() isGlobalSpecType_HealthCheck {
	if m != nil {
		return m.HealthCheck
	}
	return nil
}

func (m *GlobalSpecType) GetHttpHealthCheck() *HttpHealthCheck {
	if x, ok := m.GetHealthCheck().(*GlobalSpecType_HttpHealthCheck); ok {
		return x.HttpHealthCheck
	}
	return nil
}

func (m *GlobalSpecType) GetTcpHealthCheck() *TcpHealthCheck {
	if x, ok := m.GetHealthCheck().(*GlobalSpecType_TcpHealthCheck); ok {
		return x.TcpHealthCheck
	}
	return nil
}

func (m *GlobalSpecType) GetTimeout() uint32 {
	if m != nil {
		return m.Timeout
	}
	return 0
}

func (m *GlobalSpecType) GetInterval() uint32 {
	if m != nil {
		return m.Interval
	}
	return 0
}

func (m *GlobalSpecType) GetJitter() uint32 {
	if m != nil {
		return m.Jitter
	}
	return 0
}

func (m *GlobalSpecType) GetUnhealthyThreshold() uint32 {
	if m != nil {
		return m.UnhealthyThreshold
	}
	return 0
}

func (m *GlobalSpecType) GetHealthyThreshold() uint32 {
	if m != nil {
		return m.HealthyThreshold
	}
	return 0
}

func (m *GlobalSpecType) GetJitterPercent() uint32 {
	if m != nil {
		return m.JitterPercent
	}
	return 0
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*GlobalSpecType) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _GlobalSpecType_OneofMarshaler, _GlobalSpecType_OneofUnmarshaler, _GlobalSpecType_OneofSizer, []interface{}{
		(*GlobalSpecType_HttpHealthCheck)(nil),
		(*GlobalSpecType_TcpHealthCheck)(nil),
	}
}

func _GlobalSpecType_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*GlobalSpecType)
	// health_check
	switch x := m.HealthCheck.(type) {
	case *GlobalSpecType_HttpHealthCheck:
		_ = b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.HttpHealthCheck); err != nil {
			return err
		}
	case *GlobalSpecType_TcpHealthCheck:
		_ = b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.TcpHealthCheck); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("GlobalSpecType.HealthCheck has unexpected type %T", x)
	}
	return nil
}

func _GlobalSpecType_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*GlobalSpecType)
	switch tag {
	case 1: // health_check.http_health_check
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(HttpHealthCheck)
		err := b.DecodeMessage(msg)
		m.HealthCheck = &GlobalSpecType_HttpHealthCheck{msg}
		return true, err
	case 2: // health_check.tcp_health_check
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(TcpHealthCheck)
		err := b.DecodeMessage(msg)
		m.HealthCheck = &GlobalSpecType_TcpHealthCheck{msg}
		return true, err
	default:
		return false, nil
	}
}

func _GlobalSpecType_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*GlobalSpecType)
	// health_check
	switch x := m.HealthCheck.(type) {
	case *GlobalSpecType_HttpHealthCheck:
		s := proto.Size(x.HttpHealthCheck)
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *GlobalSpecType_TcpHealthCheck:
		s := proto.Size(x.TcpHealthCheck)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// Create healthcheck
//
// x-displayName: "Create Health Check"
// Healthcheck object defines method to determine if the given Endpoint is healthy.
// Single Healthcheck object can be referred to by one or many Cluster objects.
type CreateSpecType struct {
	// Types that are valid to be assigned to HealthCheck:
	//	*CreateSpecType_HttpHealthCheck
	//	*CreateSpecType_TcpHealthCheck
	HealthCheck        isCreateSpecType_HealthCheck `protobuf_oneof:"health_check"`
	Timeout            uint32                       `protobuf:"varint,3,opt,name=timeout,proto3" json:"timeout,omitempty"`
	Interval           uint32                       `protobuf:"varint,4,opt,name=interval,proto3" json:"interval,omitempty"`
	UnhealthyThreshold uint32                       `protobuf:"varint,6,opt,name=unhealthy_threshold,json=unhealthyThreshold,proto3" json:"unhealthy_threshold,omitempty"`
	HealthyThreshold   uint32                       `protobuf:"varint,7,opt,name=healthy_threshold,json=healthyThreshold,proto3" json:"healthy_threshold,omitempty"`
	JitterPercent      uint32                       `protobuf:"varint,9,opt,name=jitter_percent,json=jitterPercent,proto3" json:"jitter_percent,omitempty"`
}

func (m *CreateSpecType) Reset()                    { *m = CreateSpecType{} }
func (*CreateSpecType) ProtoMessage()               {}
func (*CreateSpecType) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{3} }

type isCreateSpecType_HealthCheck interface {
	isCreateSpecType_HealthCheck()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type CreateSpecType_HttpHealthCheck struct {
	HttpHealthCheck *HttpHealthCheck `protobuf:"bytes,1,opt,name=http_health_check,json=httpHealthCheck,oneof"`
}
type CreateSpecType_TcpHealthCheck struct {
	TcpHealthCheck *TcpHealthCheck `protobuf:"bytes,2,opt,name=tcp_health_check,json=tcpHealthCheck,oneof"`
}

func (*CreateSpecType_HttpHealthCheck) isCreateSpecType_HealthCheck() {}
func (*CreateSpecType_TcpHealthCheck) isCreateSpecType_HealthCheck()  {}

func (m *CreateSpecType) GetHealthCheck() isCreateSpecType_HealthCheck {
	if m != nil {
		return m.HealthCheck
	}
	return nil
}

func (m *CreateSpecType) GetHttpHealthCheck() *HttpHealthCheck {
	if x, ok := m.GetHealthCheck().(*CreateSpecType_HttpHealthCheck); ok {
		return x.HttpHealthCheck
	}
	return nil
}

func (m *CreateSpecType) GetTcpHealthCheck() *TcpHealthCheck {
	if x, ok := m.GetHealthCheck().(*CreateSpecType_TcpHealthCheck); ok {
		return x.TcpHealthCheck
	}
	return nil
}

func (m *CreateSpecType) GetTimeout() uint32 {
	if m != nil {
		return m.Timeout
	}
	return 0
}

func (m *CreateSpecType) GetInterval() uint32 {
	if m != nil {
		return m.Interval
	}
	return 0
}

func (m *CreateSpecType) GetUnhealthyThreshold() uint32 {
	if m != nil {
		return m.UnhealthyThreshold
	}
	return 0
}

func (m *CreateSpecType) GetHealthyThreshold() uint32 {
	if m != nil {
		return m.HealthyThreshold
	}
	return 0
}

func (m *CreateSpecType) GetJitterPercent() uint32 {
	if m != nil {
		return m.JitterPercent
	}
	return 0
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*CreateSpecType) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _CreateSpecType_OneofMarshaler, _CreateSpecType_OneofUnmarshaler, _CreateSpecType_OneofSizer, []interface{}{
		(*CreateSpecType_HttpHealthCheck)(nil),
		(*CreateSpecType_TcpHealthCheck)(nil),
	}
}

func _CreateSpecType_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*CreateSpecType)
	// health_check
	switch x := m.HealthCheck.(type) {
	case *CreateSpecType_HttpHealthCheck:
		_ = b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.HttpHealthCheck); err != nil {
			return err
		}
	case *CreateSpecType_TcpHealthCheck:
		_ = b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.TcpHealthCheck); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("CreateSpecType.HealthCheck has unexpected type %T", x)
	}
	return nil
}

func _CreateSpecType_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*CreateSpecType)
	switch tag {
	case 1: // health_check.http_health_check
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(HttpHealthCheck)
		err := b.DecodeMessage(msg)
		m.HealthCheck = &CreateSpecType_HttpHealthCheck{msg}
		return true, err
	case 2: // health_check.tcp_health_check
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(TcpHealthCheck)
		err := b.DecodeMessage(msg)
		m.HealthCheck = &CreateSpecType_TcpHealthCheck{msg}
		return true, err
	default:
		return false, nil
	}
}

func _CreateSpecType_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*CreateSpecType)
	// health_check
	switch x := m.HealthCheck.(type) {
	case *CreateSpecType_HttpHealthCheck:
		s := proto.Size(x.HttpHealthCheck)
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *CreateSpecType_TcpHealthCheck:
		s := proto.Size(x.TcpHealthCheck)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// replace healthcheck
//
// x-displayName: "Replace Health Check"
// Healthcheck object defines method to determine if the given Endpoint is healthy.
// Single Healthcheck object can be referred to by one or many Cluster objects.
type ReplaceSpecType struct {
	// Types that are valid to be assigned to HealthCheck:
	//	*ReplaceSpecType_HttpHealthCheck
	//	*ReplaceSpecType_TcpHealthCheck
	HealthCheck        isReplaceSpecType_HealthCheck `protobuf_oneof:"health_check"`
	Timeout            uint32                        `protobuf:"varint,3,opt,name=timeout,proto3" json:"timeout,omitempty"`
	Interval           uint32                        `protobuf:"varint,4,opt,name=interval,proto3" json:"interval,omitempty"`
	UnhealthyThreshold uint32                        `protobuf:"varint,6,opt,name=unhealthy_threshold,json=unhealthyThreshold,proto3" json:"unhealthy_threshold,omitempty"`
	HealthyThreshold   uint32                        `protobuf:"varint,7,opt,name=healthy_threshold,json=healthyThreshold,proto3" json:"healthy_threshold,omitempty"`
	JitterPercent      uint32                        `protobuf:"varint,9,opt,name=jitter_percent,json=jitterPercent,proto3" json:"jitter_percent,omitempty"`
}

func (m *ReplaceSpecType) Reset()                    { *m = ReplaceSpecType{} }
func (*ReplaceSpecType) ProtoMessage()               {}
func (*ReplaceSpecType) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{4} }

type isReplaceSpecType_HealthCheck interface {
	isReplaceSpecType_HealthCheck()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type ReplaceSpecType_HttpHealthCheck struct {
	HttpHealthCheck *HttpHealthCheck `protobuf:"bytes,1,opt,name=http_health_check,json=httpHealthCheck,oneof"`
}
type ReplaceSpecType_TcpHealthCheck struct {
	TcpHealthCheck *TcpHealthCheck `protobuf:"bytes,2,opt,name=tcp_health_check,json=tcpHealthCheck,oneof"`
}

func (*ReplaceSpecType_HttpHealthCheck) isReplaceSpecType_HealthCheck() {}
func (*ReplaceSpecType_TcpHealthCheck) isReplaceSpecType_HealthCheck()  {}

func (m *ReplaceSpecType) GetHealthCheck() isReplaceSpecType_HealthCheck {
	if m != nil {
		return m.HealthCheck
	}
	return nil
}

func (m *ReplaceSpecType) GetHttpHealthCheck() *HttpHealthCheck {
	if x, ok := m.GetHealthCheck().(*ReplaceSpecType_HttpHealthCheck); ok {
		return x.HttpHealthCheck
	}
	return nil
}

func (m *ReplaceSpecType) GetTcpHealthCheck() *TcpHealthCheck {
	if x, ok := m.GetHealthCheck().(*ReplaceSpecType_TcpHealthCheck); ok {
		return x.TcpHealthCheck
	}
	return nil
}

func (m *ReplaceSpecType) GetTimeout() uint32 {
	if m != nil {
		return m.Timeout
	}
	return 0
}

func (m *ReplaceSpecType) GetInterval() uint32 {
	if m != nil {
		return m.Interval
	}
	return 0
}

func (m *ReplaceSpecType) GetUnhealthyThreshold() uint32 {
	if m != nil {
		return m.UnhealthyThreshold
	}
	return 0
}

func (m *ReplaceSpecType) GetHealthyThreshold() uint32 {
	if m != nil {
		return m.HealthyThreshold
	}
	return 0
}

func (m *ReplaceSpecType) GetJitterPercent() uint32 {
	if m != nil {
		return m.JitterPercent
	}
	return 0
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*ReplaceSpecType) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _ReplaceSpecType_OneofMarshaler, _ReplaceSpecType_OneofUnmarshaler, _ReplaceSpecType_OneofSizer, []interface{}{
		(*ReplaceSpecType_HttpHealthCheck)(nil),
		(*ReplaceSpecType_TcpHealthCheck)(nil),
	}
}

func _ReplaceSpecType_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*ReplaceSpecType)
	// health_check
	switch x := m.HealthCheck.(type) {
	case *ReplaceSpecType_HttpHealthCheck:
		_ = b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.HttpHealthCheck); err != nil {
			return err
		}
	case *ReplaceSpecType_TcpHealthCheck:
		_ = b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.TcpHealthCheck); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("ReplaceSpecType.HealthCheck has unexpected type %T", x)
	}
	return nil
}

func _ReplaceSpecType_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*ReplaceSpecType)
	switch tag {
	case 1: // health_check.http_health_check
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(HttpHealthCheck)
		err := b.DecodeMessage(msg)
		m.HealthCheck = &ReplaceSpecType_HttpHealthCheck{msg}
		return true, err
	case 2: // health_check.tcp_health_check
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(TcpHealthCheck)
		err := b.DecodeMessage(msg)
		m.HealthCheck = &ReplaceSpecType_TcpHealthCheck{msg}
		return true, err
	default:
		return false, nil
	}
}

func _ReplaceSpecType_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*ReplaceSpecType)
	// health_check
	switch x := m.HealthCheck.(type) {
	case *ReplaceSpecType_HttpHealthCheck:
		s := proto.Size(x.HttpHealthCheck)
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ReplaceSpecType_TcpHealthCheck:
		s := proto.Size(x.TcpHealthCheck)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// Get healthcheck
//
// x-displayName: "Get Health Check"
// Healthcheck object defines method to determine if the given Endpoint is healthy.
// Single Healthcheck object can be referred to by one or many Cluster objects.
type GetSpecType struct {
	// Types that are valid to be assigned to HealthCheck:
	//	*GetSpecType_HttpHealthCheck
	//	*GetSpecType_TcpHealthCheck
	HealthCheck        isGetSpecType_HealthCheck `protobuf_oneof:"health_check"`
	Timeout            uint32                    `protobuf:"varint,3,opt,name=timeout,proto3" json:"timeout,omitempty"`
	Interval           uint32                    `protobuf:"varint,4,opt,name=interval,proto3" json:"interval,omitempty"`
	Jitter             uint32                    `protobuf:"varint,5,opt,name=jitter,proto3" json:"jitter,omitempty"`
	UnhealthyThreshold uint32                    `protobuf:"varint,6,opt,name=unhealthy_threshold,json=unhealthyThreshold,proto3" json:"unhealthy_threshold,omitempty"`
	HealthyThreshold   uint32                    `protobuf:"varint,7,opt,name=healthy_threshold,json=healthyThreshold,proto3" json:"healthy_threshold,omitempty"`
	JitterPercent      uint32                    `protobuf:"varint,9,opt,name=jitter_percent,json=jitterPercent,proto3" json:"jitter_percent,omitempty"`
}

func (m *GetSpecType) Reset()                    { *m = GetSpecType{} }
func (*GetSpecType) ProtoMessage()               {}
func (*GetSpecType) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{5} }

type isGetSpecType_HealthCheck interface {
	isGetSpecType_HealthCheck()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type GetSpecType_HttpHealthCheck struct {
	HttpHealthCheck *HttpHealthCheck `protobuf:"bytes,1,opt,name=http_health_check,json=httpHealthCheck,oneof"`
}
type GetSpecType_TcpHealthCheck struct {
	TcpHealthCheck *TcpHealthCheck `protobuf:"bytes,2,opt,name=tcp_health_check,json=tcpHealthCheck,oneof"`
}

func (*GetSpecType_HttpHealthCheck) isGetSpecType_HealthCheck() {}
func (*GetSpecType_TcpHealthCheck) isGetSpecType_HealthCheck()  {}

func (m *GetSpecType) GetHealthCheck() isGetSpecType_HealthCheck {
	if m != nil {
		return m.HealthCheck
	}
	return nil
}

func (m *GetSpecType) GetHttpHealthCheck() *HttpHealthCheck {
	if x, ok := m.GetHealthCheck().(*GetSpecType_HttpHealthCheck); ok {
		return x.HttpHealthCheck
	}
	return nil
}

func (m *GetSpecType) GetTcpHealthCheck() *TcpHealthCheck {
	if x, ok := m.GetHealthCheck().(*GetSpecType_TcpHealthCheck); ok {
		return x.TcpHealthCheck
	}
	return nil
}

func (m *GetSpecType) GetTimeout() uint32 {
	if m != nil {
		return m.Timeout
	}
	return 0
}

func (m *GetSpecType) GetInterval() uint32 {
	if m != nil {
		return m.Interval
	}
	return 0
}

func (m *GetSpecType) GetJitter() uint32 {
	if m != nil {
		return m.Jitter
	}
	return 0
}

func (m *GetSpecType) GetUnhealthyThreshold() uint32 {
	if m != nil {
		return m.UnhealthyThreshold
	}
	return 0
}

func (m *GetSpecType) GetHealthyThreshold() uint32 {
	if m != nil {
		return m.HealthyThreshold
	}
	return 0
}

func (m *GetSpecType) GetJitterPercent() uint32 {
	if m != nil {
		return m.JitterPercent
	}
	return 0
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*GetSpecType) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _GetSpecType_OneofMarshaler, _GetSpecType_OneofUnmarshaler, _GetSpecType_OneofSizer, []interface{}{
		(*GetSpecType_HttpHealthCheck)(nil),
		(*GetSpecType_TcpHealthCheck)(nil),
	}
}

func _GetSpecType_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*GetSpecType)
	// health_check
	switch x := m.HealthCheck.(type) {
	case *GetSpecType_HttpHealthCheck:
		_ = b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.HttpHealthCheck); err != nil {
			return err
		}
	case *GetSpecType_TcpHealthCheck:
		_ = b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.TcpHealthCheck); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("GetSpecType.HealthCheck has unexpected type %T", x)
	}
	return nil
}

func _GetSpecType_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*GetSpecType)
	switch tag {
	case 1: // health_check.http_health_check
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(HttpHealthCheck)
		err := b.DecodeMessage(msg)
		m.HealthCheck = &GetSpecType_HttpHealthCheck{msg}
		return true, err
	case 2: // health_check.tcp_health_check
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(TcpHealthCheck)
		err := b.DecodeMessage(msg)
		m.HealthCheck = &GetSpecType_TcpHealthCheck{msg}
		return true, err
	default:
		return false, nil
	}
}

func _GetSpecType_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*GetSpecType)
	// health_check
	switch x := m.HealthCheck.(type) {
	case *GetSpecType_HttpHealthCheck:
		s := proto.Size(x.HttpHealthCheck)
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *GetSpecType_TcpHealthCheck:
		s := proto.Size(x.TcpHealthCheck)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

func init() {
	proto.RegisterType((*HttpHealthCheck)(nil), "ves.io.schema.healthcheck.HttpHealthCheck")
	golang_proto.RegisterType((*HttpHealthCheck)(nil), "ves.io.schema.healthcheck.HttpHealthCheck")
	proto.RegisterType((*TcpHealthCheck)(nil), "ves.io.schema.healthcheck.TcpHealthCheck")
	golang_proto.RegisterType((*TcpHealthCheck)(nil), "ves.io.schema.healthcheck.TcpHealthCheck")
	proto.RegisterType((*GlobalSpecType)(nil), "ves.io.schema.healthcheck.GlobalSpecType")
	golang_proto.RegisterType((*GlobalSpecType)(nil), "ves.io.schema.healthcheck.GlobalSpecType")
	proto.RegisterType((*CreateSpecType)(nil), "ves.io.schema.healthcheck.CreateSpecType")
	golang_proto.RegisterType((*CreateSpecType)(nil), "ves.io.schema.healthcheck.CreateSpecType")
	proto.RegisterType((*ReplaceSpecType)(nil), "ves.io.schema.healthcheck.ReplaceSpecType")
	golang_proto.RegisterType((*ReplaceSpecType)(nil), "ves.io.schema.healthcheck.ReplaceSpecType")
	proto.RegisterType((*GetSpecType)(nil), "ves.io.schema.healthcheck.GetSpecType")
	golang_proto.RegisterType((*GetSpecType)(nil), "ves.io.schema.healthcheck.GetSpecType")
}
func (this *HttpHealthCheck) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*HttpHealthCheck)
	if !ok {
		that2, ok := that.(HttpHealthCheck)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.HostHeaderChoice == nil {
		if this.HostHeaderChoice != nil {
			return false
		}
	} else if this.HostHeaderChoice == nil {
		return false
	} else if !this.HostHeaderChoice.Equal(that1.HostHeaderChoice) {
		return false
	}
	if this.Path != that1.Path {
		return false
	}
	if len(this.Headers) != len(that1.Headers) {
		return false
	}
	for i := range this.Headers {
		if this.Headers[i] != that1.Headers[i] {
			return false
		}
	}
	if len(this.RequestHeadersToRemove) != len(that1.RequestHeadersToRemove) {
		return false
	}
	for i := range this.RequestHeadersToRemove {
		if this.RequestHeadersToRemove[i] != that1.RequestHeadersToRemove[i] {
			return false
		}
	}
	if this.UseHttp2 != that1.UseHttp2 {
		return false
	}
	return true
}
func (this *HttpHealthCheck_UseOriginServerName) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*HttpHealthCheck_UseOriginServerName)
	if !ok {
		that2, ok := that.(HttpHealthCheck_UseOriginServerName)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.UseOriginServerName.Equal(that1.UseOriginServerName) {
		return false
	}
	return true
}
func (this *HttpHealthCheck_HostHeader) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*HttpHealthCheck_HostHeader)
	if !ok {
		that2, ok := that.(HttpHealthCheck_HostHeader)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.HostHeader != that1.HostHeader {
		return false
	}
	return true
}
func (this *TcpHealthCheck) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TcpHealthCheck)
	if !ok {
		that2, ok := that.(TcpHealthCheck)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.SendPayload != that1.SendPayload {
		return false
	}
	if this.ExpectedResponse != that1.ExpectedResponse {
		return false
	}
	return true
}
func (this *GlobalSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType)
	if !ok {
		that2, ok := that.(GlobalSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.HealthCheck == nil {
		if this.HealthCheck != nil {
			return false
		}
	} else if this.HealthCheck == nil {
		return false
	} else if !this.HealthCheck.Equal(that1.HealthCheck) {
		return false
	}
	if this.Timeout != that1.Timeout {
		return false
	}
	if this.Interval != that1.Interval {
		return false
	}
	if this.Jitter != that1.Jitter {
		return false
	}
	if this.UnhealthyThreshold != that1.UnhealthyThreshold {
		return false
	}
	if this.HealthyThreshold != that1.HealthyThreshold {
		return false
	}
	if this.JitterPercent != that1.JitterPercent {
		return false
	}
	return true
}
func (this *GlobalSpecType_HttpHealthCheck) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_HttpHealthCheck)
	if !ok {
		that2, ok := that.(GlobalSpecType_HttpHealthCheck)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.HttpHealthCheck.Equal(that1.HttpHealthCheck) {
		return false
	}
	return true
}
func (this *GlobalSpecType_TcpHealthCheck) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_TcpHealthCheck)
	if !ok {
		that2, ok := that.(GlobalSpecType_TcpHealthCheck)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.TcpHealthCheck.Equal(that1.TcpHealthCheck) {
		return false
	}
	return true
}
func (this *CreateSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType)
	if !ok {
		that2, ok := that.(CreateSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.HealthCheck == nil {
		if this.HealthCheck != nil {
			return false
		}
	} else if this.HealthCheck == nil {
		return false
	} else if !this.HealthCheck.Equal(that1.HealthCheck) {
		return false
	}
	if this.Timeout != that1.Timeout {
		return false
	}
	if this.Interval != that1.Interval {
		return false
	}
	if this.UnhealthyThreshold != that1.UnhealthyThreshold {
		return false
	}
	if this.HealthyThreshold != that1.HealthyThreshold {
		return false
	}
	if this.JitterPercent != that1.JitterPercent {
		return false
	}
	return true
}
func (this *CreateSpecType_HttpHealthCheck) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_HttpHealthCheck)
	if !ok {
		that2, ok := that.(CreateSpecType_HttpHealthCheck)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.HttpHealthCheck.Equal(that1.HttpHealthCheck) {
		return false
	}
	return true
}
func (this *CreateSpecType_TcpHealthCheck) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_TcpHealthCheck)
	if !ok {
		that2, ok := that.(CreateSpecType_TcpHealthCheck)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.TcpHealthCheck.Equal(that1.TcpHealthCheck) {
		return false
	}
	return true
}
func (this *ReplaceSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType)
	if !ok {
		that2, ok := that.(ReplaceSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.HealthCheck == nil {
		if this.HealthCheck != nil {
			return false
		}
	} else if this.HealthCheck == nil {
		return false
	} else if !this.HealthCheck.Equal(that1.HealthCheck) {
		return false
	}
	if this.Timeout != that1.Timeout {
		return false
	}
	if this.Interval != that1.Interval {
		return false
	}
	if this.UnhealthyThreshold != that1.UnhealthyThreshold {
		return false
	}
	if this.HealthyThreshold != that1.HealthyThreshold {
		return false
	}
	if this.JitterPercent != that1.JitterPercent {
		return false
	}
	return true
}
func (this *ReplaceSpecType_HttpHealthCheck) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_HttpHealthCheck)
	if !ok {
		that2, ok := that.(ReplaceSpecType_HttpHealthCheck)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.HttpHealthCheck.Equal(that1.HttpHealthCheck) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_TcpHealthCheck) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_TcpHealthCheck)
	if !ok {
		that2, ok := that.(ReplaceSpecType_TcpHealthCheck)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.TcpHealthCheck.Equal(that1.TcpHealthCheck) {
		return false
	}
	return true
}
func (this *GetSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType)
	if !ok {
		that2, ok := that.(GetSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.HealthCheck == nil {
		if this.HealthCheck != nil {
			return false
		}
	} else if this.HealthCheck == nil {
		return false
	} else if !this.HealthCheck.Equal(that1.HealthCheck) {
		return false
	}
	if this.Timeout != that1.Timeout {
		return false
	}
	if this.Interval != that1.Interval {
		return false
	}
	if this.Jitter != that1.Jitter {
		return false
	}
	if this.UnhealthyThreshold != that1.UnhealthyThreshold {
		return false
	}
	if this.HealthyThreshold != that1.HealthyThreshold {
		return false
	}
	if this.JitterPercent != that1.JitterPercent {
		return false
	}
	return true
}
func (this *GetSpecType_HttpHealthCheck) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_HttpHealthCheck)
	if !ok {
		that2, ok := that.(GetSpecType_HttpHealthCheck)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.HttpHealthCheck.Equal(that1.HttpHealthCheck) {
		return false
	}
	return true
}
func (this *GetSpecType_TcpHealthCheck) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_TcpHealthCheck)
	if !ok {
		that2, ok := that.(GetSpecType_TcpHealthCheck)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.TcpHealthCheck.Equal(that1.TcpHealthCheck) {
		return false
	}
	return true
}
func (this *HttpHealthCheck) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&healthcheck.HttpHealthCheck{")
	if this.HostHeaderChoice != nil {
		s = append(s, "HostHeaderChoice: "+fmt.Sprintf("%#v", this.HostHeaderChoice)+",\n")
	}
	s = append(s, "Path: "+fmt.Sprintf("%#v", this.Path)+",\n")
	keysForHeaders := make([]string, 0, len(this.Headers))
	for k, _ := range this.Headers {
		keysForHeaders = append(keysForHeaders, k)
	}
	sortkeys.Strings(keysForHeaders)
	mapStringForHeaders := "map[string]string{"
	for _, k := range keysForHeaders {
		mapStringForHeaders += fmt.Sprintf("%#v: %#v,", k, this.Headers[k])
	}
	mapStringForHeaders += "}"
	if this.Headers != nil {
		s = append(s, "Headers: "+mapStringForHeaders+",\n")
	}
	s = append(s, "RequestHeadersToRemove: "+fmt.Sprintf("%#v", this.RequestHeadersToRemove)+",\n")
	s = append(s, "UseHttp2: "+fmt.Sprintf("%#v", this.UseHttp2)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *HttpHealthCheck_UseOriginServerName) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&healthcheck.HttpHealthCheck_UseOriginServerName{` +
		`UseOriginServerName:` + fmt.Sprintf("%#v", this.UseOriginServerName) + `}`}, ", ")
	return s
}
func (this *HttpHealthCheck_HostHeader) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&healthcheck.HttpHealthCheck_HostHeader{` +
		`HostHeader:` + fmt.Sprintf("%#v", this.HostHeader) + `}`}, ", ")
	return s
}
func (this *TcpHealthCheck) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&healthcheck.TcpHealthCheck{")
	s = append(s, "SendPayload: "+fmt.Sprintf("%#v", this.SendPayload)+",\n")
	s = append(s, "ExpectedResponse: "+fmt.Sprintf("%#v", this.ExpectedResponse)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GlobalSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 12)
	s = append(s, "&healthcheck.GlobalSpecType{")
	if this.HealthCheck != nil {
		s = append(s, "HealthCheck: "+fmt.Sprintf("%#v", this.HealthCheck)+",\n")
	}
	s = append(s, "Timeout: "+fmt.Sprintf("%#v", this.Timeout)+",\n")
	s = append(s, "Interval: "+fmt.Sprintf("%#v", this.Interval)+",\n")
	s = append(s, "Jitter: "+fmt.Sprintf("%#v", this.Jitter)+",\n")
	s = append(s, "UnhealthyThreshold: "+fmt.Sprintf("%#v", this.UnhealthyThreshold)+",\n")
	s = append(s, "HealthyThreshold: "+fmt.Sprintf("%#v", this.HealthyThreshold)+",\n")
	s = append(s, "JitterPercent: "+fmt.Sprintf("%#v", this.JitterPercent)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GlobalSpecType_HttpHealthCheck) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&healthcheck.GlobalSpecType_HttpHealthCheck{` +
		`HttpHealthCheck:` + fmt.Sprintf("%#v", this.HttpHealthCheck) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_TcpHealthCheck) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&healthcheck.GlobalSpecType_TcpHealthCheck{` +
		`TcpHealthCheck:` + fmt.Sprintf("%#v", this.TcpHealthCheck) + `}`}, ", ")
	return s
}
func (this *CreateSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 11)
	s = append(s, "&healthcheck.CreateSpecType{")
	if this.HealthCheck != nil {
		s = append(s, "HealthCheck: "+fmt.Sprintf("%#v", this.HealthCheck)+",\n")
	}
	s = append(s, "Timeout: "+fmt.Sprintf("%#v", this.Timeout)+",\n")
	s = append(s, "Interval: "+fmt.Sprintf("%#v", this.Interval)+",\n")
	s = append(s, "UnhealthyThreshold: "+fmt.Sprintf("%#v", this.UnhealthyThreshold)+",\n")
	s = append(s, "HealthyThreshold: "+fmt.Sprintf("%#v", this.HealthyThreshold)+",\n")
	s = append(s, "JitterPercent: "+fmt.Sprintf("%#v", this.JitterPercent)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CreateSpecType_HttpHealthCheck) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&healthcheck.CreateSpecType_HttpHealthCheck{` +
		`HttpHealthCheck:` + fmt.Sprintf("%#v", this.HttpHealthCheck) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_TcpHealthCheck) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&healthcheck.CreateSpecType_TcpHealthCheck{` +
		`TcpHealthCheck:` + fmt.Sprintf("%#v", this.TcpHealthCheck) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 11)
	s = append(s, "&healthcheck.ReplaceSpecType{")
	if this.HealthCheck != nil {
		s = append(s, "HealthCheck: "+fmt.Sprintf("%#v", this.HealthCheck)+",\n")
	}
	s = append(s, "Timeout: "+fmt.Sprintf("%#v", this.Timeout)+",\n")
	s = append(s, "Interval: "+fmt.Sprintf("%#v", this.Interval)+",\n")
	s = append(s, "UnhealthyThreshold: "+fmt.Sprintf("%#v", this.UnhealthyThreshold)+",\n")
	s = append(s, "HealthyThreshold: "+fmt.Sprintf("%#v", this.HealthyThreshold)+",\n")
	s = append(s, "JitterPercent: "+fmt.Sprintf("%#v", this.JitterPercent)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ReplaceSpecType_HttpHealthCheck) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&healthcheck.ReplaceSpecType_HttpHealthCheck{` +
		`HttpHealthCheck:` + fmt.Sprintf("%#v", this.HttpHealthCheck) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_TcpHealthCheck) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&healthcheck.ReplaceSpecType_TcpHealthCheck{` +
		`TcpHealthCheck:` + fmt.Sprintf("%#v", this.TcpHealthCheck) + `}`}, ", ")
	return s
}
func (this *GetSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 12)
	s = append(s, "&healthcheck.GetSpecType{")
	if this.HealthCheck != nil {
		s = append(s, "HealthCheck: "+fmt.Sprintf("%#v", this.HealthCheck)+",\n")
	}
	s = append(s, "Timeout: "+fmt.Sprintf("%#v", this.Timeout)+",\n")
	s = append(s, "Interval: "+fmt.Sprintf("%#v", this.Interval)+",\n")
	s = append(s, "Jitter: "+fmt.Sprintf("%#v", this.Jitter)+",\n")
	s = append(s, "UnhealthyThreshold: "+fmt.Sprintf("%#v", this.UnhealthyThreshold)+",\n")
	s = append(s, "HealthyThreshold: "+fmt.Sprintf("%#v", this.HealthyThreshold)+",\n")
	s = append(s, "JitterPercent: "+fmt.Sprintf("%#v", this.JitterPercent)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetSpecType_HttpHealthCheck) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&healthcheck.GetSpecType_HttpHealthCheck{` +
		`HttpHealthCheck:` + fmt.Sprintf("%#v", this.HttpHealthCheck) + `}`}, ", ")
	return s
}
func (this *GetSpecType_TcpHealthCheck) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&healthcheck.GetSpecType_TcpHealthCheck{` +
		`TcpHealthCheck:` + fmt.Sprintf("%#v", this.TcpHealthCheck) + `}`}, ", ")
	return s
}
func valueToGoStringTypes(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *HttpHealthCheck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HttpHealthCheck) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.HostHeaderChoice != nil {
		nn1, err := m.HostHeaderChoice.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn1
	}
	if len(m.Path) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Path)))
		i += copy(dAtA[i:], m.Path)
	}
	if len(m.Headers) > 0 {
		keysForHeaders := make([]string, 0, len(m.Headers))
		for k, _ := range m.Headers {
			keysForHeaders = append(keysForHeaders, string(k))
		}
		sortkeys.Strings(keysForHeaders)
		for _, k := range keysForHeaders {
			dAtA[i] = 0x1a
			i++
			v := m.Headers[string(k)]
			mapSize := 1 + len(k) + sovTypes(uint64(len(k))) + 1 + len(v) + sovTypes(uint64(len(v)))
			i = encodeVarintTypes(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintTypes(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			dAtA[i] = 0x12
			i++
			i = encodeVarintTypes(dAtA, i, uint64(len(v)))
			i += copy(dAtA[i:], v)
		}
	}
	if len(m.RequestHeadersToRemove) > 0 {
		for _, s := range m.RequestHeadersToRemove {
			dAtA[i] = 0x22
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if m.UseHttp2 {
		dAtA[i] = 0x28
		i++
		if m.UseHttp2 {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *HttpHealthCheck_HostHeader) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0xa
	i++
	i = encodeVarintTypes(dAtA, i, uint64(len(m.HostHeader)))
	i += copy(dAtA[i:], m.HostHeader)
	return i, nil
}
func (m *HttpHealthCheck_UseOriginServerName) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.UseOriginServerName != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.UseOriginServerName.Size()))
		n2, err := m.UseOriginServerName.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	return i, nil
}
func (m *TcpHealthCheck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TcpHealthCheck) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.SendPayload) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTypes(dAtA, i, uint64(len(m.SendPayload)))
		i += copy(dAtA[i:], m.SendPayload)
	}
	if len(m.ExpectedResponse) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTypes(dAtA, i, uint64(len(m.ExpectedResponse)))
		i += copy(dAtA[i:], m.ExpectedResponse)
	}
	return i, nil
}

func (m *GlobalSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GlobalSpecType) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.HealthCheck != nil {
		nn3, err := m.HealthCheck.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn3
	}
	if m.Timeout != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.Timeout))
	}
	if m.Interval != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.Interval))
	}
	if m.Jitter != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.Jitter))
	}
	if m.UnhealthyThreshold != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.UnhealthyThreshold))
	}
	if m.HealthyThreshold != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.HealthyThreshold))
	}
	if m.JitterPercent != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.JitterPercent))
	}
	return i, nil
}

func (m *GlobalSpecType_HttpHealthCheck) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.HttpHealthCheck != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.HttpHealthCheck.Size()))
		n4, err := m.HttpHealthCheck.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	return i, nil
}
func (m *GlobalSpecType_TcpHealthCheck) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.TcpHealthCheck != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.TcpHealthCheck.Size()))
		n5, err := m.TcpHealthCheck.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	return i, nil
}
func (m *CreateSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateSpecType) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.HealthCheck != nil {
		nn6, err := m.HealthCheck.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn6
	}
	if m.Timeout != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.Timeout))
	}
	if m.Interval != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.Interval))
	}
	if m.UnhealthyThreshold != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.UnhealthyThreshold))
	}
	if m.HealthyThreshold != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.HealthyThreshold))
	}
	if m.JitterPercent != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.JitterPercent))
	}
	return i, nil
}

func (m *CreateSpecType_HttpHealthCheck) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.HttpHealthCheck != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.HttpHealthCheck.Size()))
		n7, err := m.HttpHealthCheck.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	return i, nil
}
func (m *CreateSpecType_TcpHealthCheck) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.TcpHealthCheck != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.TcpHealthCheck.Size()))
		n8, err := m.TcpHealthCheck.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n8
	}
	return i, nil
}
func (m *ReplaceSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplaceSpecType) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.HealthCheck != nil {
		nn9, err := m.HealthCheck.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn9
	}
	if m.Timeout != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.Timeout))
	}
	if m.Interval != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.Interval))
	}
	if m.UnhealthyThreshold != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.UnhealthyThreshold))
	}
	if m.HealthyThreshold != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.HealthyThreshold))
	}
	if m.JitterPercent != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.JitterPercent))
	}
	return i, nil
}

func (m *ReplaceSpecType_HttpHealthCheck) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.HttpHealthCheck != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.HttpHealthCheck.Size()))
		n10, err := m.HttpHealthCheck.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n10
	}
	return i, nil
}
func (m *ReplaceSpecType_TcpHealthCheck) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.TcpHealthCheck != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.TcpHealthCheck.Size()))
		n11, err := m.TcpHealthCheck.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n11
	}
	return i, nil
}
func (m *GetSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetSpecType) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.HealthCheck != nil {
		nn12, err := m.HealthCheck.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn12
	}
	if m.Timeout != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.Timeout))
	}
	if m.Interval != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.Interval))
	}
	if m.Jitter != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.Jitter))
	}
	if m.UnhealthyThreshold != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.UnhealthyThreshold))
	}
	if m.HealthyThreshold != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.HealthyThreshold))
	}
	if m.JitterPercent != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.JitterPercent))
	}
	return i, nil
}

func (m *GetSpecType_HttpHealthCheck) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.HttpHealthCheck != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.HttpHealthCheck.Size()))
		n13, err := m.HttpHealthCheck.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n13
	}
	return i, nil
}
func (m *GetSpecType_TcpHealthCheck) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.TcpHealthCheck != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.TcpHealthCheck.Size()))
		n14, err := m.TcpHealthCheck.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n14
	}
	return i, nil
}
func encodeVarintTypes(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *HttpHealthCheck) Size() (n int) {
	var l int
	_ = l
	if m.HostHeaderChoice != nil {
		n += m.HostHeaderChoice.Size()
	}
	l = len(m.Path)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if len(m.Headers) > 0 {
		for k, v := range m.Headers {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovTypes(uint64(len(k))) + 1 + len(v) + sovTypes(uint64(len(v)))
			n += mapEntrySize + 1 + sovTypes(uint64(mapEntrySize))
		}
	}
	if len(m.RequestHeadersToRemove) > 0 {
		for _, s := range m.RequestHeadersToRemove {
			l = len(s)
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if m.UseHttp2 {
		n += 2
	}
	return n
}

func (m *HttpHealthCheck_HostHeader) Size() (n int) {
	var l int
	_ = l
	l = len(m.HostHeader)
	n += 1 + l + sovTypes(uint64(l))
	return n
}
func (m *HttpHealthCheck_UseOriginServerName) Size() (n int) {
	var l int
	_ = l
	if m.UseOriginServerName != nil {
		l = m.UseOriginServerName.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *TcpHealthCheck) Size() (n int) {
	var l int
	_ = l
	l = len(m.SendPayload)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.ExpectedResponse)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *GlobalSpecType) Size() (n int) {
	var l int
	_ = l
	if m.HealthCheck != nil {
		n += m.HealthCheck.Size()
	}
	if m.Timeout != 0 {
		n += 1 + sovTypes(uint64(m.Timeout))
	}
	if m.Interval != 0 {
		n += 1 + sovTypes(uint64(m.Interval))
	}
	if m.Jitter != 0 {
		n += 1 + sovTypes(uint64(m.Jitter))
	}
	if m.UnhealthyThreshold != 0 {
		n += 1 + sovTypes(uint64(m.UnhealthyThreshold))
	}
	if m.HealthyThreshold != 0 {
		n += 1 + sovTypes(uint64(m.HealthyThreshold))
	}
	if m.JitterPercent != 0 {
		n += 1 + sovTypes(uint64(m.JitterPercent))
	}
	return n
}

func (m *GlobalSpecType_HttpHealthCheck) Size() (n int) {
	var l int
	_ = l
	if m.HttpHealthCheck != nil {
		l = m.HttpHealthCheck.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_TcpHealthCheck) Size() (n int) {
	var l int
	_ = l
	if m.TcpHealthCheck != nil {
		l = m.TcpHealthCheck.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType) Size() (n int) {
	var l int
	_ = l
	if m.HealthCheck != nil {
		n += m.HealthCheck.Size()
	}
	if m.Timeout != 0 {
		n += 1 + sovTypes(uint64(m.Timeout))
	}
	if m.Interval != 0 {
		n += 1 + sovTypes(uint64(m.Interval))
	}
	if m.UnhealthyThreshold != 0 {
		n += 1 + sovTypes(uint64(m.UnhealthyThreshold))
	}
	if m.HealthyThreshold != 0 {
		n += 1 + sovTypes(uint64(m.HealthyThreshold))
	}
	if m.JitterPercent != 0 {
		n += 1 + sovTypes(uint64(m.JitterPercent))
	}
	return n
}

func (m *CreateSpecType_HttpHealthCheck) Size() (n int) {
	var l int
	_ = l
	if m.HttpHealthCheck != nil {
		l = m.HttpHealthCheck.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_TcpHealthCheck) Size() (n int) {
	var l int
	_ = l
	if m.TcpHealthCheck != nil {
		l = m.TcpHealthCheck.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType) Size() (n int) {
	var l int
	_ = l
	if m.HealthCheck != nil {
		n += m.HealthCheck.Size()
	}
	if m.Timeout != 0 {
		n += 1 + sovTypes(uint64(m.Timeout))
	}
	if m.Interval != 0 {
		n += 1 + sovTypes(uint64(m.Interval))
	}
	if m.UnhealthyThreshold != 0 {
		n += 1 + sovTypes(uint64(m.UnhealthyThreshold))
	}
	if m.HealthyThreshold != 0 {
		n += 1 + sovTypes(uint64(m.HealthyThreshold))
	}
	if m.JitterPercent != 0 {
		n += 1 + sovTypes(uint64(m.JitterPercent))
	}
	return n
}

func (m *ReplaceSpecType_HttpHealthCheck) Size() (n int) {
	var l int
	_ = l
	if m.HttpHealthCheck != nil {
		l = m.HttpHealthCheck.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_TcpHealthCheck) Size() (n int) {
	var l int
	_ = l
	if m.TcpHealthCheck != nil {
		l = m.TcpHealthCheck.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType) Size() (n int) {
	var l int
	_ = l
	if m.HealthCheck != nil {
		n += m.HealthCheck.Size()
	}
	if m.Timeout != 0 {
		n += 1 + sovTypes(uint64(m.Timeout))
	}
	if m.Interval != 0 {
		n += 1 + sovTypes(uint64(m.Interval))
	}
	if m.Jitter != 0 {
		n += 1 + sovTypes(uint64(m.Jitter))
	}
	if m.UnhealthyThreshold != 0 {
		n += 1 + sovTypes(uint64(m.UnhealthyThreshold))
	}
	if m.HealthyThreshold != 0 {
		n += 1 + sovTypes(uint64(m.HealthyThreshold))
	}
	if m.JitterPercent != 0 {
		n += 1 + sovTypes(uint64(m.JitterPercent))
	}
	return n
}

func (m *GetSpecType_HttpHealthCheck) Size() (n int) {
	var l int
	_ = l
	if m.HttpHealthCheck != nil {
		l = m.HttpHealthCheck.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_TcpHealthCheck) Size() (n int) {
	var l int
	_ = l
	if m.TcpHealthCheck != nil {
		l = m.TcpHealthCheck.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func sovTypes(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozTypes(x uint64) (n int) {
	return sovTypes(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *HttpHealthCheck) String() string {
	if this == nil {
		return "nil"
	}
	keysForHeaders := make([]string, 0, len(this.Headers))
	for k, _ := range this.Headers {
		keysForHeaders = append(keysForHeaders, k)
	}
	sortkeys.Strings(keysForHeaders)
	mapStringForHeaders := "map[string]string{"
	for _, k := range keysForHeaders {
		mapStringForHeaders += fmt.Sprintf("%v: %v,", k, this.Headers[k])
	}
	mapStringForHeaders += "}"
	s := strings.Join([]string{`&HttpHealthCheck{`,
		`HostHeaderChoice:` + fmt.Sprintf("%v", this.HostHeaderChoice) + `,`,
		`Path:` + fmt.Sprintf("%v", this.Path) + `,`,
		`Headers:` + mapStringForHeaders + `,`,
		`RequestHeadersToRemove:` + fmt.Sprintf("%v", this.RequestHeadersToRemove) + `,`,
		`UseHttp2:` + fmt.Sprintf("%v", this.UseHttp2) + `,`,
		`}`,
	}, "")
	return s
}
func (this *HttpHealthCheck_HostHeader) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&HttpHealthCheck_HostHeader{`,
		`HostHeader:` + fmt.Sprintf("%v", this.HostHeader) + `,`,
		`}`,
	}, "")
	return s
}
func (this *HttpHealthCheck_UseOriginServerName) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&HttpHealthCheck_UseOriginServerName{`,
		`UseOriginServerName:` + strings.Replace(fmt.Sprintf("%v", this.UseOriginServerName), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TcpHealthCheck) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TcpHealthCheck{`,
		`SendPayload:` + fmt.Sprintf("%v", this.SendPayload) + `,`,
		`ExpectedResponse:` + fmt.Sprintf("%v", this.ExpectedResponse) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType{`,
		`HealthCheck:` + fmt.Sprintf("%v", this.HealthCheck) + `,`,
		`Timeout:` + fmt.Sprintf("%v", this.Timeout) + `,`,
		`Interval:` + fmt.Sprintf("%v", this.Interval) + `,`,
		`Jitter:` + fmt.Sprintf("%v", this.Jitter) + `,`,
		`UnhealthyThreshold:` + fmt.Sprintf("%v", this.UnhealthyThreshold) + `,`,
		`HealthyThreshold:` + fmt.Sprintf("%v", this.HealthyThreshold) + `,`,
		`JitterPercent:` + fmt.Sprintf("%v", this.JitterPercent) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_HttpHealthCheck) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_HttpHealthCheck{`,
		`HttpHealthCheck:` + strings.Replace(fmt.Sprintf("%v", this.HttpHealthCheck), "HttpHealthCheck", "HttpHealthCheck", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_TcpHealthCheck) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_TcpHealthCheck{`,
		`TcpHealthCheck:` + strings.Replace(fmt.Sprintf("%v", this.TcpHealthCheck), "TcpHealthCheck", "TcpHealthCheck", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType{`,
		`HealthCheck:` + fmt.Sprintf("%v", this.HealthCheck) + `,`,
		`Timeout:` + fmt.Sprintf("%v", this.Timeout) + `,`,
		`Interval:` + fmt.Sprintf("%v", this.Interval) + `,`,
		`UnhealthyThreshold:` + fmt.Sprintf("%v", this.UnhealthyThreshold) + `,`,
		`HealthyThreshold:` + fmt.Sprintf("%v", this.HealthyThreshold) + `,`,
		`JitterPercent:` + fmt.Sprintf("%v", this.JitterPercent) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_HttpHealthCheck) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_HttpHealthCheck{`,
		`HttpHealthCheck:` + strings.Replace(fmt.Sprintf("%v", this.HttpHealthCheck), "HttpHealthCheck", "HttpHealthCheck", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_TcpHealthCheck) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_TcpHealthCheck{`,
		`TcpHealthCheck:` + strings.Replace(fmt.Sprintf("%v", this.TcpHealthCheck), "TcpHealthCheck", "TcpHealthCheck", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType{`,
		`HealthCheck:` + fmt.Sprintf("%v", this.HealthCheck) + `,`,
		`Timeout:` + fmt.Sprintf("%v", this.Timeout) + `,`,
		`Interval:` + fmt.Sprintf("%v", this.Interval) + `,`,
		`UnhealthyThreshold:` + fmt.Sprintf("%v", this.UnhealthyThreshold) + `,`,
		`HealthyThreshold:` + fmt.Sprintf("%v", this.HealthyThreshold) + `,`,
		`JitterPercent:` + fmt.Sprintf("%v", this.JitterPercent) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_HttpHealthCheck) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_HttpHealthCheck{`,
		`HttpHealthCheck:` + strings.Replace(fmt.Sprintf("%v", this.HttpHealthCheck), "HttpHealthCheck", "HttpHealthCheck", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_TcpHealthCheck) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_TcpHealthCheck{`,
		`TcpHealthCheck:` + strings.Replace(fmt.Sprintf("%v", this.TcpHealthCheck), "TcpHealthCheck", "TcpHealthCheck", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType{`,
		`HealthCheck:` + fmt.Sprintf("%v", this.HealthCheck) + `,`,
		`Timeout:` + fmt.Sprintf("%v", this.Timeout) + `,`,
		`Interval:` + fmt.Sprintf("%v", this.Interval) + `,`,
		`Jitter:` + fmt.Sprintf("%v", this.Jitter) + `,`,
		`UnhealthyThreshold:` + fmt.Sprintf("%v", this.UnhealthyThreshold) + `,`,
		`HealthyThreshold:` + fmt.Sprintf("%v", this.HealthyThreshold) + `,`,
		`JitterPercent:` + fmt.Sprintf("%v", this.JitterPercent) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_HttpHealthCheck) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_HttpHealthCheck{`,
		`HttpHealthCheck:` + strings.Replace(fmt.Sprintf("%v", this.HttpHealthCheck), "HttpHealthCheck", "HttpHealthCheck", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_TcpHealthCheck) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_TcpHealthCheck{`,
		`TcpHealthCheck:` + strings.Replace(fmt.Sprintf("%v", this.TcpHealthCheck), "TcpHealthCheck", "TcpHealthCheck", 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringTypes(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *HttpHealthCheck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HttpHealthCheck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HttpHealthCheck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HostHeader", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HostHeaderChoice = &HttpHealthCheck_HostHeader{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Path", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Path = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Headers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Headers == nil {
				m.Headers = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTypes
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthTypes
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTypes
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthTypes
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipTypes(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthTypes
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Headers[mapkey] = mapvalue
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestHeadersToRemove", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RequestHeadersToRemove = append(m.RequestHeadersToRemove, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UseHttp2", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UseHttp2 = bool(v != 0)
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UseOriginServerName", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.HostHeaderChoice = &HttpHealthCheck_UseOriginServerName{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TcpHealthCheck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TcpHealthCheck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TcpHealthCheck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SendPayload", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SendPayload = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpectedResponse", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExpectedResponse = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GlobalSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GlobalSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GlobalSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HttpHealthCheck", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &HttpHealthCheck{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.HealthCheck = &GlobalSpecType_HttpHealthCheck{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TcpHealthCheck", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &TcpHealthCheck{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.HealthCheck = &GlobalSpecType_TcpHealthCheck{v}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timeout", wireType)
			}
			m.Timeout = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timeout |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Interval", wireType)
			}
			m.Interval = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Interval |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Jitter", wireType)
			}
			m.Jitter = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Jitter |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnhealthyThreshold", wireType)
			}
			m.UnhealthyThreshold = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UnhealthyThreshold |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HealthyThreshold", wireType)
			}
			m.HealthyThreshold = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HealthyThreshold |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field JitterPercent", wireType)
			}
			m.JitterPercent = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.JitterPercent |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HttpHealthCheck", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &HttpHealthCheck{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.HealthCheck = &CreateSpecType_HttpHealthCheck{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TcpHealthCheck", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &TcpHealthCheck{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.HealthCheck = &CreateSpecType_TcpHealthCheck{v}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timeout", wireType)
			}
			m.Timeout = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timeout |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Interval", wireType)
			}
			m.Interval = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Interval |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnhealthyThreshold", wireType)
			}
			m.UnhealthyThreshold = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UnhealthyThreshold |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HealthyThreshold", wireType)
			}
			m.HealthyThreshold = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HealthyThreshold |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field JitterPercent", wireType)
			}
			m.JitterPercent = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.JitterPercent |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplaceSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplaceSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplaceSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HttpHealthCheck", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &HttpHealthCheck{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.HealthCheck = &ReplaceSpecType_HttpHealthCheck{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TcpHealthCheck", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &TcpHealthCheck{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.HealthCheck = &ReplaceSpecType_TcpHealthCheck{v}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timeout", wireType)
			}
			m.Timeout = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timeout |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Interval", wireType)
			}
			m.Interval = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Interval |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnhealthyThreshold", wireType)
			}
			m.UnhealthyThreshold = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UnhealthyThreshold |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HealthyThreshold", wireType)
			}
			m.HealthyThreshold = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HealthyThreshold |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field JitterPercent", wireType)
			}
			m.JitterPercent = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.JitterPercent |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HttpHealthCheck", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &HttpHealthCheck{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.HealthCheck = &GetSpecType_HttpHealthCheck{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TcpHealthCheck", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &TcpHealthCheck{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.HealthCheck = &GetSpecType_TcpHealthCheck{v}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timeout", wireType)
			}
			m.Timeout = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timeout |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Interval", wireType)
			}
			m.Interval = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Interval |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Jitter", wireType)
			}
			m.Jitter = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Jitter |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnhealthyThreshold", wireType)
			}
			m.UnhealthyThreshold = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UnhealthyThreshold |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HealthyThreshold", wireType)
			}
			m.HealthyThreshold = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HealthyThreshold |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field JitterPercent", wireType)
			}
			m.JitterPercent = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.JitterPercent |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTypes(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthTypes
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipTypes(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthTypes = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTypes   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("ves.io/schema/healthcheck/types.proto", fileDescriptorTypes) }
func init() { golang_proto.RegisterFile("ves.io/schema/healthcheck/types.proto", fileDescriptorTypes) }

var fileDescriptorTypes = []byte{
	// 1320 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x57, 0xcf, 0x6f, 0x1b, 0xd5,
	0x16, 0xf6, 0xf1, 0xf8, 0xe7, 0x75, 0x9a, 0x38, 0xd3, 0x36, 0x9d, 0xb8, 0xd5, 0xbc, 0xa9, 0xf5,
	0xf2, 0xe4, 0xe6, 0x39, 0x76, 0x6c, 0x37, 0x6d, 0x09, 0x52, 0x25, 0x1c, 0x45, 0x8d, 0x5a, 0x44,
	0xa3, 0xa9, 0x41, 0x08, 0x10, 0xc3, 0xc4, 0xbe, 0xb5, 0x87, 0xd8, 0xbe, 0xc3, 0xcc, 0xb5, 0xa9,
	0x2b, 0x21, 0x55, 0x48, 0x20, 0x14, 0x24, 0x04, 0x5d, 0xf6, 0x2f, 0x60, 0x0b, 0x4b, 0xc6, 0x8b,
	0xa8, 0x12, 0xa8, 0x62, 0x95, 0x65, 0xd4, 0x55, 0x3b, 0xdd, 0x94, 0xae, 0x2a, 0x56, 0x88, 0x15,
	0xba, 0x77, 0xc6, 0x8e, 0xed, 0xa6, 0x15, 0x8b, 0x6e, 0x2a, 0xd8, 0xdd, 0x3b, 0xf7, 0x9c, 0xef,
	0xfc, 0xf8, 0xbe, 0x73, 0xa4, 0x41, 0x0b, 0x5d, 0x6c, 0xe7, 0x0c, 0x92, 0xb7, 0xab, 0x0d, 0xdc,
	0xd2, 0xf3, 0x0d, 0xac, 0x37, 0x69, 0xa3, 0xda, 0xc0, 0xd5, 0xed, 0x3c, 0xed, 0x99, 0xd8, 0xce,
	0x99, 0x16, 0xa1, 0x44, 0x9c, 0xf7, 0xcc, 0x72, 0x9e, 0x59, 0x6e, 0xc4, 0x2c, 0xb5, 0x54, 0x37,
	0x68, 0xa3, 0xb3, 0x95, 0xab, 0x92, 0x56, 0xbe, 0x4e, 0xea, 0x24, 0xcf, 0x3d, 0xb6, 0x3a, 0xd7,
	0xf9, 0x8d, 0x5f, 0xf8, 0xc9, 0x43, 0x4a, 0x9d, 0x1c, 0x0f, 0x48, 0x4c, 0x6a, 0x90, 0xb6, 0x1f,
	0x26, 0x35, 0x3f, 0xfe, 0x38, 0x92, 0x41, 0xea, 0xd4, 0xf8, 0x53, 0x57, 0x6f, 0x1a, 0x35, 0x9d,
	0x62, 0xff, 0x55, 0x99, 0x78, 0x35, 0xf0, 0xa7, 0xda, 0x18, 0x74, 0xfa, 0xbb, 0x28, 0x9a, 0xd9,
	0xa0, 0xd4, 0xdc, 0xe0, 0xa9, 0xaf, 0xb1, 0xd4, 0xc5, 0xd7, 0x51, 0xa2, 0x41, 0x6c, 0xaa, 0x35,
	0xb0, 0x5e, 0xc3, 0x96, 0x04, 0x0a, 0x64, 0xe2, 0x65, 0xe9, 0x0f, 0x07, 0x02, 0x3f, 0xfd, 0xb6,
	0x2b, 0x84, 0x2d, 0x41, 0xfa, 0x32, 0xe8, 0x9f, 0x1e, 0x00, 0x6c, 0x04, 0x54, 0xc4, 0xcc, 0x37,
	0xb8, 0xb5, 0xf8, 0x11, 0x0a, 0x99, 0x3a, 0x6d, 0x48, 0x41, 0xee, 0xf5, 0xe6, 0x7d, 0x07, 0x20,
	0xef, 0x3a, 0xb0, 0x82, 0x20, 0x8f, 0xa2, 0x7e, 0x23, 0xd1, 0xd4, 0x68, 0x47, 0x51, 0xcc, 0xbf,
	0xdd, 0x44, 0x91, 0x7c, 0xd3, 0xe8, 0xe2, 0x9b, 0x28, 0x9a, 0xb7, 0xb0, 0x5e, 0xeb, 0xdd, 0x1c,
	0x8d, 0x79, 0x2b, 0xa9, 0x72, 0x64, 0xd1, 0x0d, 0xa2, 0xa8, 0x97, 0x9a, 0x2d, 0x09, 0x8a, 0x90,
	0x49, 0x14, 0xcf, 0xe7, 0x9e, 0xcb, 0x43, 0x6e, 0xa2, 0xb8, 0x9c, 0x97, 0xa6, 0xbd, 0xde, 0xa6,
	0x56, 0xaf, 0xfc, 0x4d, 0x70, 0xd7, 0x01, 0x60, 0x11, 0xa6, 0xee, 0x40, 0x3c, 0x1d, 0xb5, 0xc2,
	0x49, 0x90, 0x6e, 0x79, 0xc5, 0xdd, 0x81, 0x60, 0x32, 0x39, 0x78, 0x5a, 0xf4, 0x9f, 0x92, 0xee,
	0x83, 0x9f, 0x05, 0x65, 0xa7, 0x0f, 0xa7, 0xc4, 0xd4, 0x13, 0x07, 0xe6, 0x36, 0x2a, 0x95, 0x4d,
	0xc5, 0x4b, 0x46, 0xd9, 0xc6, 0x3d, 0xc5, 0xa6, 0x96, 0xd1, 0xae, 0x33, 0xa3, 0xf9, 0x9d, 0x3e,
	0x1c, 0x17, 0x8f, 0xba, 0x0e, 0xcc, 0x70, 0x23, 0x2f, 0xae, 0x72, 0x05, 0xf7, 0xd8, 0x2b, 0xda,
	0xe9, 0x43, 0x44, 0x0c, 0xdd, 0x73, 0x20, 0xc0, 0xae, 0x91, 0x9d, 0x3e, 0x04, 0x63, 0xc0, 0x8e,
	0x17, 0x77, 0xfa, 0xb0, 0x9a, 0xba, 0xf0, 0xc4, 0x81, 0xb3, 0xd7, 0x38, 0x98, 0x42, 0xae, 0x2b,
	0x55, 0xd2, 0x6a, 0xe9, 0x8a, 0x8d, 0x4d, 0xdd, 0xd2, 0x29, 0xae, 0x29, 0x4d, 0xc3, 0xa6, 0xec,
	0xfb, 0x68, 0xf8, 0xae, 0xde, 0xec, 0x60, 0x9b, 0x41, 0x9c, 0xdc, 0xe9, 0xc3, 0x89, 0xd4, 0x71,
	0xd7, 0x81, 0xd9, 0xd1, 0xd0, 0xef, 0x30, 0x83, 0x61, 0xf0, 0x14, 0x0b, 0x2e, 0x8c, 0x5c, 0x59,
	0x27, 0xd4, 0x41, 0x63, 0xc5, 0x0f, 0xd0, 0xbc, 0x85, 0x3f, 0xe9, 0xe0, 0xa1, 0x0c, 0x6c, 0x8d,
	0x12, 0xcd, 0xc2, 0x2d, 0xd2, 0xc5, 0x52, 0x48, 0x11, 0x32, 0xf1, 0xf2, 0x69, 0xe6, 0x31, 0x60,
	0x08, 0xdd, 0x86, 0x68, 0x9a, 0xd3, 0xe4, 0x75, 0xef, 0x36, 0xeb, 0x9e, 0x3a, 0xe7, 0x63, 0xf8,
	0x4d, 0xaf, 0x10, 0x95, 0x03, 0x88, 0xa7, 0x51, 0xbc, 0x63, 0x63, 0xad, 0x41, 0xa9, 0x59, 0x94,
	0xc2, 0x0a, 0x64, 0x62, 0xe5, 0x10, 0x43, 0x52, 0x63, 0x1d, 0x1b, 0x33, 0xc6, 0x8a, 0xe2, 0x15,
	0x34, 0xc7, 0x4c, 0x88, 0x65, 0xd4, 0x8d, 0xb6, 0x66, 0x63, 0xab, 0x8b, 0x2d, 0xad, 0xad, 0xb7,
	0xb0, 0x14, 0x55, 0x20, 0x93, 0x28, 0x1e, 0x9b, 0xe0, 0x7c, 0xbd, 0x65, 0xd2, 0xde, 0x46, 0x40,
	0x3d, 0xda, 0xb1, 0xf1, 0x55, 0xee, 0x74, 0x8d, 0xfb, 0xbc, 0xa5, 0xb7, 0x70, 0x6a, 0x15, 0x4d,
	0x8d, 0xf2, 0x2e, 0x26, 0x91, 0xb0, 0x8d, 0x7b, 0x9e, 0xb2, 0x55, 0x76, 0x14, 0x8f, 0xa1, 0x30,
	0x6f, 0xa0, 0xa7, 0x5b, 0xd5, 0xbb, 0xac, 0x06, 0x2f, 0xc0, 0xea, 0xda, 0xef, 0x17, 0xe3, 0xe7,
	0xb2, 0xc5, 0xec, 0x4a, 0xb6, 0x94, 0x3d, 0x7b, 0xd7, 0x81, 0x12, 0x2a, 0xa0, 0xff, 0x7a, 0x8a,
	0x52, 0xb8, 0xa4, 0x3c, 0x16, 0x54, 0xaf, 0x52, 0x65, 0x53, 0xb7, 0xf4, 0x16, 0xa6, 0xac, 0x87,
	0x07, 0x6e, 0xe5, 0x05, 0x24, 0x8e, 0x8c, 0x94, 0x56, 0x6d, 0x10, 0xa3, 0x8a, 0xc5, 0x99, 0x5d,
	0x07, 0xa2, 0x7b, 0x0e, 0x44, 0x5c, 0x07, 0x84, 0xf3, 0xd9, 0xc2, 0xe5, 0x50, 0x2c, 0x92, 0x8c,
	0xa6, 0xef, 0x01, 0x9a, 0xae, 0x54, 0x27, 0x46, 0x72, 0xca, 0xc6, 0xed, 0x9a, 0x66, 0xea, 0xbd,
	0x26, 0xd1, 0x6b, 0x23, 0x33, 0x29, 0x1c, 0xcc, 0x87, 0x7f, 0x7a, 0x0a, 0xa0, 0x26, 0x98, 0xf5,
	0xa6, 0x67, 0x2c, 0xae, 0xa3, 0x59, 0x7c, 0xc3, 0xc4, 0x55, 0x8a, 0x6b, 0x9a, 0x85, 0x6d, 0x93,
	0xb4, 0x6d, 0xbf, 0xce, 0x17, 0x20, 0x24, 0x07, 0x2e, 0xaa, 0xef, 0xb1, 0x5a, 0xbc, 0xeb, 0x40,
	0x0e, 0x65, 0xd1, 0xc2, 0x58, 0xf1, 0x95, 0xb5, 0x83, 0xda, 0xf5, 0x76, 0x4d, 0x19, 0x98, 0x8b,
	0x42, 0x21, 0x5b, 0x4c, 0x7f, 0x1d, 0x46, 0xd3, 0x97, 0x9a, 0x64, 0x4b, 0x6f, 0x5e, 0x33, 0x71,
	0xb5, 0xd2, 0x33, 0xb1, 0xf8, 0x21, 0x9a, 0x65, 0xbc, 0x6b, 0xde, 0x90, 0x6a, 0x7c, 0x4a, 0x79,
	0x3d, 0x89, 0xe2, 0xe2, 0xdf, 0x9f, 0xe3, 0x72, 0x68, 0xcf, 0xe1, 0xbb, 0x67, 0xa6, 0x31, 0xb1,
	0xbd, 0xde, 0x47, 0x49, 0x5a, 0x9d, 0x80, 0x0f, 0x72, 0xf8, 0x33, 0x2f, 0x80, 0x1f, 0xef, 0xf7,
	0x10, 0x7d, 0x9a, 0x8e, 0xf3, 0x50, 0x42, 0x51, 0x6a, 0xb4, 0x30, 0xe9, 0x50, 0x49, 0x50, 0x20,
	0x73, 0xa4, 0x3c, 0xcf, 0x16, 0x5c, 0x89, 0x69, 0xf7, 0xab, 0xbe, 0xb7, 0x49, 0xa2, 0x8b, 0x61,
	0x69, 0x3f, 0x94, 0x01, 0x75, 0x60, 0x29, 0x9e, 0x43, 0x31, 0xa3, 0x4d, 0xb1, 0xd5, 0xd5, 0x9b,
	0x52, 0x88, 0x7b, 0xa5, 0xee, 0x3b, 0x10, 0x2c, 0xac, 0x1c, 0xea, 0x36, 0xb4, 0x15, 0xcf, 0xa0,
	0xc8, 0xc7, 0x06, 0xa5, 0xd8, 0xe2, 0x23, 0x72, 0xa4, 0x3c, 0xbb, 0xff, 0x19, 0x3c, 0xf6, 0xf7,
	0x55, 0x78, 0x51, 0x90, 0xf6, 0x43, 0xaa, 0x6f, 0x20, 0xae, 0xa3, 0xa3, 0x9d, 0xb6, 0x57, 0x4f,
	0x4f, 0xa3, 0x0d, 0x0b, 0xdb, 0x0d, 0xd2, 0xac, 0x49, 0x11, 0xee, 0x77, 0x8c, 0xe5, 0x58, 0x18,
	0x4c, 0x6a, 0x64, 0x31, 0x24, 0x25, 0x33, 0xa0, 0x8a, 0x43, 0x87, 0xca, 0xc0, 0x5e, 0x7c, 0x03,
	0xcd, 0x3e, 0x0b, 0x12, 0x3d, 0x00, 0x29, 0x4d, 0x82, 0x24, 0x9f, 0x81, 0x58, 0x47, 0xd3, 0x5e,
	0x4e, 0x9a, 0x89, 0xad, 0x2a, 0x6e, 0x53, 0x29, 0xce, 0xfd, 0x65, 0xb6, 0x2d, 0x58, 0xd9, 0xa5,
	0xe5, 0x01, 0x48, 0x62, 0x31, 0x5e, 0x8e, 0x2e, 0x67, 0x0b, 0xcb, 0x4b, 0x2b, 0xcb, 0xea, 0x11,
	0xcf, 0x6b, 0xd3, 0x73, 0x5a, 0xcd, 0xde, 0x75, 0x20, 0x83, 0xfe, 0x87, 0x4e, 0x8c, 0x89, 0x6d,
	0x64, 0xb8, 0x12, 0x17, 0xd8, 0x60, 0x65, 0xcf, 0x65, 0xcf, 0x67, 0x5f, 0x2b, 0xff, 0x07, 0x4d,
	0x8d, 0xf2, 0xcd, 0x07, 0x0b, 0xf6, 0x1c, 0x88, 0xb1, 0xc1, 0x2a, 0x64, 0x8b, 0x97, 0x43, 0xb1,
	0x58, 0x32, 0x9e, 0xfe, 0x41, 0x40, 0xd3, 0x6b, 0x16, 0xd6, 0x29, 0x1e, 0xaa, 0xf1, 0xdd, 0x97,
	0xa2, 0xc6, 0xc3, 0x74, 0xf8, 0xf6, 0x4b, 0xd0, 0xe1, 0x21, 0x0a, 0x94, 0x26, 0x14, 0x78, 0x20,
	0xb3, 0xd4, 0xa4, 0xcc, 0x46, 0xa4, 0x94, 0x7f, 0x81, 0x3e, 0x0e, 0x55, 0xc2, 0xff, 0x9f, 0xab,
	0x84, 0x43, 0x38, 0x5f, 0x38, 0x9c, 0xf3, 0x49, 0x4e, 0x67, 0x7f, 0xbd, 0x38, 0xb1, 0x0c, 0xca,
	0xca, 0x04, 0x71, 0xc9, 0xcf, 0xff, 0x84, 0xb1, 0x2f, 0xe9, 0x1f, 0x05, 0x34, 0xa3, 0x62, 0xb3,
	0xa9, 0x57, 0xff, 0x25, 0xed, 0x95, 0x21, 0xed, 0x17, 0x01, 0x25, 0x2e, 0x61, 0xfa, 0x4f, 0x23,
	0x6c, 0x6e, 0x7c, 0x61, 0x0f, 0xb7, 0xf3, 0x2b, 0x4b, 0x64, 0xf9, 0x0b, 0xd8, 0x7b, 0x28, 0x07,
	0xf6, 0x1f, 0xca, 0x81, 0xa7, 0x0f, 0x65, 0xb8, 0xe5, 0xca, 0xf0, 0xbd, 0x2b, 0xc3, 0x3d, 0x57,
	0x86, 0x3d, 0x57, 0x86, 0x7d, 0x57, 0x86, 0x07, 0xae, 0x0c, 0x8f, 0x5d, 0x39, 0xf0, 0xd4, 0x95,
	0xe1, 0xdb, 0x47, 0x72, 0x60, 0xf7, 0x91, 0x0c, 0xef, 0x5d, 0xad, 0x13, 0x73, 0xbb, 0x9e, 0xeb,
	0x92, 0x26, 0xc5, 0x96, 0xa5, 0xe7, 0x3a, 0x76, 0x9e, 0x1f, 0xae, 0x13, 0xab, 0xb5, 0x64, 0x5a,
	0xa4, 0x6b, 0xd4, 0xb0, 0xb5, 0x34, 0x78, 0xce, 0x9b, 0x5b, 0x75, 0x92, 0xc7, 0x37, 0xa8, 0xff,
	0x9b, 0xf2, 0xec, 0x4f, 0xd7, 0x56, 0x84, 0xff, 0xad, 0x94, 0xfe, 0x0a, 0x00, 0x00, 0xff, 0xff,
	0xf8, 0x27, 0x53, 0x8a, 0x98, 0x0d, 0x00, 0x00,
}
