// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ves.io/schema/secret_policy_rule/types.proto

package secret_policy_rule

import (
	fmt "fmt"

	proto "github.com/gogo/protobuf/proto"

	math "math"

	_ "github.com/gogo/protobuf/gogoproto"

	_ "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"

	ves_io_schema_policy "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/policy"

	ves_io_schema4 "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"

	_ "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"

	_ "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"

	strings "strings"

	reflect "reflect"

	io "io"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Secret Policy Rule Specifications
//
// x-displayName: "Global Specifications"
// A secret_policy_rule object consists of an unordered list of predicates and an action.
// The predicates are evaluated against a set of input fields that are extracted from client certificate.
// A rule is considered to match if all predicates in the rule evaluate to true for that request.
// Any predicates that are not specified in a rule are implicitly considered to be true.
// If a rule is matched, the action specified for the rule is enforced for that request.
//
// A secret_policy_rule can be part of exactly one secret_policy and must belong to the same namespace as the secret policy.
type GlobalSpecType struct {
	// action
	//
	// x-displayName: "Action"
	// x-required
	// Action to be enforced if all the predicates evaluates to true.
	Action ves_io_schema_policy.RuleAction `protobuf:"varint,1,opt,name=action,proto3,enum=ves.io.schema.policy.RuleAction" json:"action,omitempty"`
	// client choice
	//
	// x-displayName: "Client Selection"
	// x-required
	// Select clients for which the rule the will be applied. The actual names/labels of the client are extracted from its TLS certificate.
	//
	// Types that are valid to be assigned to ClientChoice:
	//	*GlobalSpecType_ClientName
	//	*GlobalSpecType_ClientSelector
	//	*GlobalSpecType_ClientNameMatcher
	ClientChoice isGlobalSpecType_ClientChoice `protobuf_oneof:"client_choice"`
	// Label Matcher
	//
	// x-displayName: "Client Label Matcher"
	// A list of label keys that identify the label values that need to be the same for the client and secret.
	// Note that the actual label values are not specified here, just the label keys.
	// This predicate facilitates reuse of rules and policies across multiple dimensions such as deployment, environment, and location.
	// The predicate evaluates to true if the values of the client and secret labels for all the keys specified in the label matcher are equal.
	// The values of any other labels do not matter.
	LabelMatcher *ves_io_schema4.LabelMatcherType `protobuf:"bytes,5,opt,name=label_matcher,json=labelMatcher" json:"label_matcher,omitempty"`
}

func (m *GlobalSpecType) Reset()                    { *m = GlobalSpecType{} }
func (*GlobalSpecType) ProtoMessage()               {}
func (*GlobalSpecType) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{0} }

type isGlobalSpecType_ClientChoice interface {
	isGlobalSpecType_ClientChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type GlobalSpecType_ClientName struct {
	ClientName string `protobuf:"bytes,2,opt,name=client_name,json=clientName,proto3,oneof"`
}
type GlobalSpecType_ClientSelector struct {
	ClientSelector *ves_io_schema4.LabelSelectorType `protobuf:"bytes,3,opt,name=client_selector,json=clientSelector,oneof"`
}
type GlobalSpecType_ClientNameMatcher struct {
	ClientNameMatcher *ves_io_schema_policy.MatcherType `protobuf:"bytes,4,opt,name=client_name_matcher,json=clientNameMatcher,oneof"`
}

func (*GlobalSpecType_ClientName) isGlobalSpecType_ClientChoice()        {}
func (*GlobalSpecType_ClientSelector) isGlobalSpecType_ClientChoice()    {}
func (*GlobalSpecType_ClientNameMatcher) isGlobalSpecType_ClientChoice() {}

func (m *GlobalSpecType) GetClientChoice() isGlobalSpecType_ClientChoice {
	if m != nil {
		return m.ClientChoice
	}
	return nil
}

func (m *GlobalSpecType) GetAction() ves_io_schema_policy.RuleAction {
	if m != nil {
		return m.Action
	}
	return ves_io_schema_policy.DENY
}

func (m *GlobalSpecType) GetClientName() string {
	if x, ok := m.GetClientChoice().(*GlobalSpecType_ClientName); ok {
		return x.ClientName
	}
	return ""
}

func (m *GlobalSpecType) GetClientSelector() *ves_io_schema4.LabelSelectorType {
	if x, ok := m.GetClientChoice().(*GlobalSpecType_ClientSelector); ok {
		return x.ClientSelector
	}
	return nil
}

func (m *GlobalSpecType) GetClientNameMatcher() *ves_io_schema_policy.MatcherType {
	if x, ok := m.GetClientChoice().(*GlobalSpecType_ClientNameMatcher); ok {
		return x.ClientNameMatcher
	}
	return nil
}

func (m *GlobalSpecType) GetLabelMatcher() *ves_io_schema4.LabelMatcherType {
	if m != nil {
		return m.LabelMatcher
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*GlobalSpecType) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _GlobalSpecType_OneofMarshaler, _GlobalSpecType_OneofUnmarshaler, _GlobalSpecType_OneofSizer, []interface{}{
		(*GlobalSpecType_ClientName)(nil),
		(*GlobalSpecType_ClientSelector)(nil),
		(*GlobalSpecType_ClientNameMatcher)(nil),
	}
}

func _GlobalSpecType_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*GlobalSpecType)
	// client_choice
	switch x := m.ClientChoice.(type) {
	case *GlobalSpecType_ClientName:
		_ = b.EncodeVarint(2<<3 | proto.WireBytes)
		_ = b.EncodeStringBytes(x.ClientName)
	case *GlobalSpecType_ClientSelector:
		_ = b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ClientSelector); err != nil {
			return err
		}
	case *GlobalSpecType_ClientNameMatcher:
		_ = b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ClientNameMatcher); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("GlobalSpecType.ClientChoice has unexpected type %T", x)
	}
	return nil
}

func _GlobalSpecType_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*GlobalSpecType)
	switch tag {
	case 2: // client_choice.client_name
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.ClientChoice = &GlobalSpecType_ClientName{x}
		return true, err
	case 3: // client_choice.client_selector
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.LabelSelectorType)
		err := b.DecodeMessage(msg)
		m.ClientChoice = &GlobalSpecType_ClientSelector{msg}
		return true, err
	case 4: // client_choice.client_name_matcher
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema_policy.MatcherType)
		err := b.DecodeMessage(msg)
		m.ClientChoice = &GlobalSpecType_ClientNameMatcher{msg}
		return true, err
	default:
		return false, nil
	}
}

func _GlobalSpecType_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*GlobalSpecType)
	// client_choice
	switch x := m.ClientChoice.(type) {
	case *GlobalSpecType_ClientName:
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.ClientName)))
		n += len(x.ClientName)
	case *GlobalSpecType_ClientSelector:
		s := proto.Size(x.ClientSelector)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *GlobalSpecType_ClientNameMatcher:
		s := proto.Size(x.ClientNameMatcher)
		n += proto.SizeVarint(4<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// Create Secret Policy Rule
//
// x-displayName: "Specifications"
// Create secret_policy_rule creates a new object in storage backend for metadata.namespace.
type CreateSpecType struct {
	Action ves_io_schema_policy.RuleAction `protobuf:"varint,1,opt,name=action,proto3,enum=ves.io.schema.policy.RuleAction" json:"action,omitempty"`
	// Types that are valid to be assigned to ClientChoice:
	//	*CreateSpecType_ClientName
	//	*CreateSpecType_ClientSelector
	//	*CreateSpecType_ClientNameMatcher
	ClientChoice isCreateSpecType_ClientChoice    `protobuf_oneof:"client_choice"`
	LabelMatcher *ves_io_schema4.LabelMatcherType `protobuf:"bytes,5,opt,name=label_matcher,json=labelMatcher" json:"label_matcher,omitempty"`
}

func (m *CreateSpecType) Reset()                    { *m = CreateSpecType{} }
func (*CreateSpecType) ProtoMessage()               {}
func (*CreateSpecType) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{1} }

type isCreateSpecType_ClientChoice interface {
	isCreateSpecType_ClientChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type CreateSpecType_ClientName struct {
	ClientName string `protobuf:"bytes,2,opt,name=client_name,json=clientName,proto3,oneof"`
}
type CreateSpecType_ClientSelector struct {
	ClientSelector *ves_io_schema4.LabelSelectorType `protobuf:"bytes,3,opt,name=client_selector,json=clientSelector,oneof"`
}
type CreateSpecType_ClientNameMatcher struct {
	ClientNameMatcher *ves_io_schema_policy.MatcherTypeBasic `protobuf:"bytes,4,opt,name=client_name_matcher,json=clientNameMatcher,oneof"`
}

func (*CreateSpecType_ClientName) isCreateSpecType_ClientChoice()        {}
func (*CreateSpecType_ClientSelector) isCreateSpecType_ClientChoice()    {}
func (*CreateSpecType_ClientNameMatcher) isCreateSpecType_ClientChoice() {}

func (m *CreateSpecType) GetClientChoice() isCreateSpecType_ClientChoice {
	if m != nil {
		return m.ClientChoice
	}
	return nil
}

func (m *CreateSpecType) GetAction() ves_io_schema_policy.RuleAction {
	if m != nil {
		return m.Action
	}
	return ves_io_schema_policy.DENY
}

func (m *CreateSpecType) GetClientName() string {
	if x, ok := m.GetClientChoice().(*CreateSpecType_ClientName); ok {
		return x.ClientName
	}
	return ""
}

func (m *CreateSpecType) GetClientSelector() *ves_io_schema4.LabelSelectorType {
	if x, ok := m.GetClientChoice().(*CreateSpecType_ClientSelector); ok {
		return x.ClientSelector
	}
	return nil
}

func (m *CreateSpecType) GetClientNameMatcher() *ves_io_schema_policy.MatcherTypeBasic {
	if x, ok := m.GetClientChoice().(*CreateSpecType_ClientNameMatcher); ok {
		return x.ClientNameMatcher
	}
	return nil
}

func (m *CreateSpecType) GetLabelMatcher() *ves_io_schema4.LabelMatcherType {
	if m != nil {
		return m.LabelMatcher
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*CreateSpecType) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _CreateSpecType_OneofMarshaler, _CreateSpecType_OneofUnmarshaler, _CreateSpecType_OneofSizer, []interface{}{
		(*CreateSpecType_ClientName)(nil),
		(*CreateSpecType_ClientSelector)(nil),
		(*CreateSpecType_ClientNameMatcher)(nil),
	}
}

func _CreateSpecType_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*CreateSpecType)
	// client_choice
	switch x := m.ClientChoice.(type) {
	case *CreateSpecType_ClientName:
		_ = b.EncodeVarint(2<<3 | proto.WireBytes)
		_ = b.EncodeStringBytes(x.ClientName)
	case *CreateSpecType_ClientSelector:
		_ = b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ClientSelector); err != nil {
			return err
		}
	case *CreateSpecType_ClientNameMatcher:
		_ = b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ClientNameMatcher); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("CreateSpecType.ClientChoice has unexpected type %T", x)
	}
	return nil
}

func _CreateSpecType_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*CreateSpecType)
	switch tag {
	case 2: // client_choice.client_name
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.ClientChoice = &CreateSpecType_ClientName{x}
		return true, err
	case 3: // client_choice.client_selector
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.LabelSelectorType)
		err := b.DecodeMessage(msg)
		m.ClientChoice = &CreateSpecType_ClientSelector{msg}
		return true, err
	case 4: // client_choice.client_name_matcher
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema_policy.MatcherTypeBasic)
		err := b.DecodeMessage(msg)
		m.ClientChoice = &CreateSpecType_ClientNameMatcher{msg}
		return true, err
	default:
		return false, nil
	}
}

func _CreateSpecType_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*CreateSpecType)
	// client_choice
	switch x := m.ClientChoice.(type) {
	case *CreateSpecType_ClientName:
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.ClientName)))
		n += len(x.ClientName)
	case *CreateSpecType_ClientSelector:
		s := proto.Size(x.ClientSelector)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *CreateSpecType_ClientNameMatcher:
		s := proto.Size(x.ClientNameMatcher)
		n += proto.SizeVarint(4<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// Replace Secret Policy Rule
//
// x-displayName: "Specifications"
// Replace secret_policy_rule creates a new object in storage backend for metadata.namespace.
type ReplaceSpecType struct {
	Action ves_io_schema_policy.RuleAction `protobuf:"varint,1,opt,name=action,proto3,enum=ves.io.schema.policy.RuleAction" json:"action,omitempty"`
	// Types that are valid to be assigned to ClientChoice:
	//	*ReplaceSpecType_ClientName
	//	*ReplaceSpecType_ClientSelector
	//	*ReplaceSpecType_ClientNameMatcher
	ClientChoice isReplaceSpecType_ClientChoice   `protobuf_oneof:"client_choice"`
	LabelMatcher *ves_io_schema4.LabelMatcherType `protobuf:"bytes,5,opt,name=label_matcher,json=labelMatcher" json:"label_matcher,omitempty"`
}

func (m *ReplaceSpecType) Reset()                    { *m = ReplaceSpecType{} }
func (*ReplaceSpecType) ProtoMessage()               {}
func (*ReplaceSpecType) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{2} }

type isReplaceSpecType_ClientChoice interface {
	isReplaceSpecType_ClientChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type ReplaceSpecType_ClientName struct {
	ClientName string `protobuf:"bytes,2,opt,name=client_name,json=clientName,proto3,oneof"`
}
type ReplaceSpecType_ClientSelector struct {
	ClientSelector *ves_io_schema4.LabelSelectorType `protobuf:"bytes,3,opt,name=client_selector,json=clientSelector,oneof"`
}
type ReplaceSpecType_ClientNameMatcher struct {
	ClientNameMatcher *ves_io_schema_policy.MatcherTypeBasic `protobuf:"bytes,4,opt,name=client_name_matcher,json=clientNameMatcher,oneof"`
}

func (*ReplaceSpecType_ClientName) isReplaceSpecType_ClientChoice()        {}
func (*ReplaceSpecType_ClientSelector) isReplaceSpecType_ClientChoice()    {}
func (*ReplaceSpecType_ClientNameMatcher) isReplaceSpecType_ClientChoice() {}

func (m *ReplaceSpecType) GetClientChoice() isReplaceSpecType_ClientChoice {
	if m != nil {
		return m.ClientChoice
	}
	return nil
}

func (m *ReplaceSpecType) GetAction() ves_io_schema_policy.RuleAction {
	if m != nil {
		return m.Action
	}
	return ves_io_schema_policy.DENY
}

func (m *ReplaceSpecType) GetClientName() string {
	if x, ok := m.GetClientChoice().(*ReplaceSpecType_ClientName); ok {
		return x.ClientName
	}
	return ""
}

func (m *ReplaceSpecType) GetClientSelector() *ves_io_schema4.LabelSelectorType {
	if x, ok := m.GetClientChoice().(*ReplaceSpecType_ClientSelector); ok {
		return x.ClientSelector
	}
	return nil
}

func (m *ReplaceSpecType) GetClientNameMatcher() *ves_io_schema_policy.MatcherTypeBasic {
	if x, ok := m.GetClientChoice().(*ReplaceSpecType_ClientNameMatcher); ok {
		return x.ClientNameMatcher
	}
	return nil
}

func (m *ReplaceSpecType) GetLabelMatcher() *ves_io_schema4.LabelMatcherType {
	if m != nil {
		return m.LabelMatcher
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*ReplaceSpecType) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _ReplaceSpecType_OneofMarshaler, _ReplaceSpecType_OneofUnmarshaler, _ReplaceSpecType_OneofSizer, []interface{}{
		(*ReplaceSpecType_ClientName)(nil),
		(*ReplaceSpecType_ClientSelector)(nil),
		(*ReplaceSpecType_ClientNameMatcher)(nil),
	}
}

func _ReplaceSpecType_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*ReplaceSpecType)
	// client_choice
	switch x := m.ClientChoice.(type) {
	case *ReplaceSpecType_ClientName:
		_ = b.EncodeVarint(2<<3 | proto.WireBytes)
		_ = b.EncodeStringBytes(x.ClientName)
	case *ReplaceSpecType_ClientSelector:
		_ = b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ClientSelector); err != nil {
			return err
		}
	case *ReplaceSpecType_ClientNameMatcher:
		_ = b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ClientNameMatcher); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("ReplaceSpecType.ClientChoice has unexpected type %T", x)
	}
	return nil
}

func _ReplaceSpecType_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*ReplaceSpecType)
	switch tag {
	case 2: // client_choice.client_name
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.ClientChoice = &ReplaceSpecType_ClientName{x}
		return true, err
	case 3: // client_choice.client_selector
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.LabelSelectorType)
		err := b.DecodeMessage(msg)
		m.ClientChoice = &ReplaceSpecType_ClientSelector{msg}
		return true, err
	case 4: // client_choice.client_name_matcher
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema_policy.MatcherTypeBasic)
		err := b.DecodeMessage(msg)
		m.ClientChoice = &ReplaceSpecType_ClientNameMatcher{msg}
		return true, err
	default:
		return false, nil
	}
}

func _ReplaceSpecType_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*ReplaceSpecType)
	// client_choice
	switch x := m.ClientChoice.(type) {
	case *ReplaceSpecType_ClientName:
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.ClientName)))
		n += len(x.ClientName)
	case *ReplaceSpecType_ClientSelector:
		s := proto.Size(x.ClientSelector)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ReplaceSpecType_ClientNameMatcher:
		s := proto.Size(x.ClientNameMatcher)
		n += proto.SizeVarint(4<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// Get Secret Policy Rule
//
// x-displayName: "Specifications"
// Get secret_policy_rule reads a given object from storage backend for metadata.namespace
type GetSpecType struct {
	Action ves_io_schema_policy.RuleAction `protobuf:"varint,1,opt,name=action,proto3,enum=ves.io.schema.policy.RuleAction" json:"action,omitempty"`
	// Types that are valid to be assigned to ClientChoice:
	//	*GetSpecType_ClientName
	//	*GetSpecType_ClientSelector
	//	*GetSpecType_ClientNameMatcher
	ClientChoice isGetSpecType_ClientChoice       `protobuf_oneof:"client_choice"`
	LabelMatcher *ves_io_schema4.LabelMatcherType `protobuf:"bytes,5,opt,name=label_matcher,json=labelMatcher" json:"label_matcher,omitempty"`
}

func (m *GetSpecType) Reset()                    { *m = GetSpecType{} }
func (*GetSpecType) ProtoMessage()               {}
func (*GetSpecType) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{3} }

type isGetSpecType_ClientChoice interface {
	isGetSpecType_ClientChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type GetSpecType_ClientName struct {
	ClientName string `protobuf:"bytes,2,opt,name=client_name,json=clientName,proto3,oneof"`
}
type GetSpecType_ClientSelector struct {
	ClientSelector *ves_io_schema4.LabelSelectorType `protobuf:"bytes,3,opt,name=client_selector,json=clientSelector,oneof"`
}
type GetSpecType_ClientNameMatcher struct {
	ClientNameMatcher *ves_io_schema_policy.MatcherTypeBasic `protobuf:"bytes,4,opt,name=client_name_matcher,json=clientNameMatcher,oneof"`
}

func (*GetSpecType_ClientName) isGetSpecType_ClientChoice()        {}
func (*GetSpecType_ClientSelector) isGetSpecType_ClientChoice()    {}
func (*GetSpecType_ClientNameMatcher) isGetSpecType_ClientChoice() {}

func (m *GetSpecType) GetClientChoice() isGetSpecType_ClientChoice {
	if m != nil {
		return m.ClientChoice
	}
	return nil
}

func (m *GetSpecType) GetAction() ves_io_schema_policy.RuleAction {
	if m != nil {
		return m.Action
	}
	return ves_io_schema_policy.DENY
}

func (m *GetSpecType) GetClientName() string {
	if x, ok := m.GetClientChoice().(*GetSpecType_ClientName); ok {
		return x.ClientName
	}
	return ""
}

func (m *GetSpecType) GetClientSelector() *ves_io_schema4.LabelSelectorType {
	if x, ok := m.GetClientChoice().(*GetSpecType_ClientSelector); ok {
		return x.ClientSelector
	}
	return nil
}

func (m *GetSpecType) GetClientNameMatcher() *ves_io_schema_policy.MatcherTypeBasic {
	if x, ok := m.GetClientChoice().(*GetSpecType_ClientNameMatcher); ok {
		return x.ClientNameMatcher
	}
	return nil
}

func (m *GetSpecType) GetLabelMatcher() *ves_io_schema4.LabelMatcherType {
	if m != nil {
		return m.LabelMatcher
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*GetSpecType) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _GetSpecType_OneofMarshaler, _GetSpecType_OneofUnmarshaler, _GetSpecType_OneofSizer, []interface{}{
		(*GetSpecType_ClientName)(nil),
		(*GetSpecType_ClientSelector)(nil),
		(*GetSpecType_ClientNameMatcher)(nil),
	}
}

func _GetSpecType_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*GetSpecType)
	// client_choice
	switch x := m.ClientChoice.(type) {
	case *GetSpecType_ClientName:
		_ = b.EncodeVarint(2<<3 | proto.WireBytes)
		_ = b.EncodeStringBytes(x.ClientName)
	case *GetSpecType_ClientSelector:
		_ = b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ClientSelector); err != nil {
			return err
		}
	case *GetSpecType_ClientNameMatcher:
		_ = b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ClientNameMatcher); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("GetSpecType.ClientChoice has unexpected type %T", x)
	}
	return nil
}

func _GetSpecType_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*GetSpecType)
	switch tag {
	case 2: // client_choice.client_name
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.ClientChoice = &GetSpecType_ClientName{x}
		return true, err
	case 3: // client_choice.client_selector
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.LabelSelectorType)
		err := b.DecodeMessage(msg)
		m.ClientChoice = &GetSpecType_ClientSelector{msg}
		return true, err
	case 4: // client_choice.client_name_matcher
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema_policy.MatcherTypeBasic)
		err := b.DecodeMessage(msg)
		m.ClientChoice = &GetSpecType_ClientNameMatcher{msg}
		return true, err
	default:
		return false, nil
	}
}

func _GetSpecType_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*GetSpecType)
	// client_choice
	switch x := m.ClientChoice.(type) {
	case *GetSpecType_ClientName:
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.ClientName)))
		n += len(x.ClientName)
	case *GetSpecType_ClientSelector:
		s := proto.Size(x.ClientSelector)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *GetSpecType_ClientNameMatcher:
		s := proto.Size(x.ClientNameMatcher)
		n += proto.SizeVarint(4<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

func init() {
	proto.RegisterType((*GlobalSpecType)(nil), "ves.io.schema.secret_policy_rule.GlobalSpecType")
	proto.RegisterType((*CreateSpecType)(nil), "ves.io.schema.secret_policy_rule.CreateSpecType")
	proto.RegisterType((*ReplaceSpecType)(nil), "ves.io.schema.secret_policy_rule.ReplaceSpecType")
	proto.RegisterType((*GetSpecType)(nil), "ves.io.schema.secret_policy_rule.GetSpecType")
}
func (this *GlobalSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType)
	if !ok {
		that2, ok := that.(GlobalSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Action != that1.Action {
		return false
	}
	if that1.ClientChoice == nil {
		if this.ClientChoice != nil {
			return false
		}
	} else if this.ClientChoice == nil {
		return false
	} else if !this.ClientChoice.Equal(that1.ClientChoice) {
		return false
	}
	if !this.LabelMatcher.Equal(that1.LabelMatcher) {
		return false
	}
	return true
}
func (this *GlobalSpecType_ClientName) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_ClientName)
	if !ok {
		that2, ok := that.(GlobalSpecType_ClientName)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ClientName != that1.ClientName {
		return false
	}
	return true
}
func (this *GlobalSpecType_ClientSelector) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_ClientSelector)
	if !ok {
		that2, ok := that.(GlobalSpecType_ClientSelector)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ClientSelector.Equal(that1.ClientSelector) {
		return false
	}
	return true
}
func (this *GlobalSpecType_ClientNameMatcher) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_ClientNameMatcher)
	if !ok {
		that2, ok := that.(GlobalSpecType_ClientNameMatcher)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ClientNameMatcher.Equal(that1.ClientNameMatcher) {
		return false
	}
	return true
}
func (this *CreateSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType)
	if !ok {
		that2, ok := that.(CreateSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Action != that1.Action {
		return false
	}
	if that1.ClientChoice == nil {
		if this.ClientChoice != nil {
			return false
		}
	} else if this.ClientChoice == nil {
		return false
	} else if !this.ClientChoice.Equal(that1.ClientChoice) {
		return false
	}
	if !this.LabelMatcher.Equal(that1.LabelMatcher) {
		return false
	}
	return true
}
func (this *CreateSpecType_ClientName) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_ClientName)
	if !ok {
		that2, ok := that.(CreateSpecType_ClientName)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ClientName != that1.ClientName {
		return false
	}
	return true
}
func (this *CreateSpecType_ClientSelector) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_ClientSelector)
	if !ok {
		that2, ok := that.(CreateSpecType_ClientSelector)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ClientSelector.Equal(that1.ClientSelector) {
		return false
	}
	return true
}
func (this *CreateSpecType_ClientNameMatcher) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_ClientNameMatcher)
	if !ok {
		that2, ok := that.(CreateSpecType_ClientNameMatcher)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ClientNameMatcher.Equal(that1.ClientNameMatcher) {
		return false
	}
	return true
}
func (this *ReplaceSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType)
	if !ok {
		that2, ok := that.(ReplaceSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Action != that1.Action {
		return false
	}
	if that1.ClientChoice == nil {
		if this.ClientChoice != nil {
			return false
		}
	} else if this.ClientChoice == nil {
		return false
	} else if !this.ClientChoice.Equal(that1.ClientChoice) {
		return false
	}
	if !this.LabelMatcher.Equal(that1.LabelMatcher) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_ClientName) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_ClientName)
	if !ok {
		that2, ok := that.(ReplaceSpecType_ClientName)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ClientName != that1.ClientName {
		return false
	}
	return true
}
func (this *ReplaceSpecType_ClientSelector) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_ClientSelector)
	if !ok {
		that2, ok := that.(ReplaceSpecType_ClientSelector)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ClientSelector.Equal(that1.ClientSelector) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_ClientNameMatcher) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_ClientNameMatcher)
	if !ok {
		that2, ok := that.(ReplaceSpecType_ClientNameMatcher)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ClientNameMatcher.Equal(that1.ClientNameMatcher) {
		return false
	}
	return true
}
func (this *GetSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType)
	if !ok {
		that2, ok := that.(GetSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Action != that1.Action {
		return false
	}
	if that1.ClientChoice == nil {
		if this.ClientChoice != nil {
			return false
		}
	} else if this.ClientChoice == nil {
		return false
	} else if !this.ClientChoice.Equal(that1.ClientChoice) {
		return false
	}
	if !this.LabelMatcher.Equal(that1.LabelMatcher) {
		return false
	}
	return true
}
func (this *GetSpecType_ClientName) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_ClientName)
	if !ok {
		that2, ok := that.(GetSpecType_ClientName)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ClientName != that1.ClientName {
		return false
	}
	return true
}
func (this *GetSpecType_ClientSelector) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_ClientSelector)
	if !ok {
		that2, ok := that.(GetSpecType_ClientSelector)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ClientSelector.Equal(that1.ClientSelector) {
		return false
	}
	return true
}
func (this *GetSpecType_ClientNameMatcher) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_ClientNameMatcher)
	if !ok {
		that2, ok := that.(GetSpecType_ClientNameMatcher)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ClientNameMatcher.Equal(that1.ClientNameMatcher) {
		return false
	}
	return true
}
func (this *GlobalSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&secret_policy_rule.GlobalSpecType{")
	s = append(s, "Action: "+fmt.Sprintf("%#v", this.Action)+",\n")
	if this.ClientChoice != nil {
		s = append(s, "ClientChoice: "+fmt.Sprintf("%#v", this.ClientChoice)+",\n")
	}
	if this.LabelMatcher != nil {
		s = append(s, "LabelMatcher: "+fmt.Sprintf("%#v", this.LabelMatcher)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GlobalSpecType_ClientName) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&secret_policy_rule.GlobalSpecType_ClientName{` +
		`ClientName:` + fmt.Sprintf("%#v", this.ClientName) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_ClientSelector) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&secret_policy_rule.GlobalSpecType_ClientSelector{` +
		`ClientSelector:` + fmt.Sprintf("%#v", this.ClientSelector) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_ClientNameMatcher) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&secret_policy_rule.GlobalSpecType_ClientNameMatcher{` +
		`ClientNameMatcher:` + fmt.Sprintf("%#v", this.ClientNameMatcher) + `}`}, ", ")
	return s
}
func (this *CreateSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&secret_policy_rule.CreateSpecType{")
	s = append(s, "Action: "+fmt.Sprintf("%#v", this.Action)+",\n")
	if this.ClientChoice != nil {
		s = append(s, "ClientChoice: "+fmt.Sprintf("%#v", this.ClientChoice)+",\n")
	}
	if this.LabelMatcher != nil {
		s = append(s, "LabelMatcher: "+fmt.Sprintf("%#v", this.LabelMatcher)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CreateSpecType_ClientName) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&secret_policy_rule.CreateSpecType_ClientName{` +
		`ClientName:` + fmt.Sprintf("%#v", this.ClientName) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_ClientSelector) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&secret_policy_rule.CreateSpecType_ClientSelector{` +
		`ClientSelector:` + fmt.Sprintf("%#v", this.ClientSelector) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_ClientNameMatcher) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&secret_policy_rule.CreateSpecType_ClientNameMatcher{` +
		`ClientNameMatcher:` + fmt.Sprintf("%#v", this.ClientNameMatcher) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&secret_policy_rule.ReplaceSpecType{")
	s = append(s, "Action: "+fmt.Sprintf("%#v", this.Action)+",\n")
	if this.ClientChoice != nil {
		s = append(s, "ClientChoice: "+fmt.Sprintf("%#v", this.ClientChoice)+",\n")
	}
	if this.LabelMatcher != nil {
		s = append(s, "LabelMatcher: "+fmt.Sprintf("%#v", this.LabelMatcher)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ReplaceSpecType_ClientName) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&secret_policy_rule.ReplaceSpecType_ClientName{` +
		`ClientName:` + fmt.Sprintf("%#v", this.ClientName) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_ClientSelector) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&secret_policy_rule.ReplaceSpecType_ClientSelector{` +
		`ClientSelector:` + fmt.Sprintf("%#v", this.ClientSelector) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_ClientNameMatcher) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&secret_policy_rule.ReplaceSpecType_ClientNameMatcher{` +
		`ClientNameMatcher:` + fmt.Sprintf("%#v", this.ClientNameMatcher) + `}`}, ", ")
	return s
}
func (this *GetSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&secret_policy_rule.GetSpecType{")
	s = append(s, "Action: "+fmt.Sprintf("%#v", this.Action)+",\n")
	if this.ClientChoice != nil {
		s = append(s, "ClientChoice: "+fmt.Sprintf("%#v", this.ClientChoice)+",\n")
	}
	if this.LabelMatcher != nil {
		s = append(s, "LabelMatcher: "+fmt.Sprintf("%#v", this.LabelMatcher)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetSpecType_ClientName) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&secret_policy_rule.GetSpecType_ClientName{` +
		`ClientName:` + fmt.Sprintf("%#v", this.ClientName) + `}`}, ", ")
	return s
}
func (this *GetSpecType_ClientSelector) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&secret_policy_rule.GetSpecType_ClientSelector{` +
		`ClientSelector:` + fmt.Sprintf("%#v", this.ClientSelector) + `}`}, ", ")
	return s
}
func (this *GetSpecType_ClientNameMatcher) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&secret_policy_rule.GetSpecType_ClientNameMatcher{` +
		`ClientNameMatcher:` + fmt.Sprintf("%#v", this.ClientNameMatcher) + `}`}, ", ")
	return s
}
func valueToGoStringTypes(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *GlobalSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GlobalSpecType) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Action != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.Action))
	}
	if m.ClientChoice != nil {
		nn1, err := m.ClientChoice.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn1
	}
	if m.LabelMatcher != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.LabelMatcher.Size()))
		n2, err := m.LabelMatcher.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	return i, nil
}

func (m *GlobalSpecType_ClientName) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x12
	i++
	i = encodeVarintTypes(dAtA, i, uint64(len(m.ClientName)))
	i += copy(dAtA[i:], m.ClientName)
	return i, nil
}
func (m *GlobalSpecType_ClientSelector) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.ClientSelector != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.ClientSelector.Size()))
		n3, err := m.ClientSelector.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	return i, nil
}
func (m *GlobalSpecType_ClientNameMatcher) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.ClientNameMatcher != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.ClientNameMatcher.Size()))
		n4, err := m.ClientNameMatcher.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	return i, nil
}
func (m *CreateSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateSpecType) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Action != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.Action))
	}
	if m.ClientChoice != nil {
		nn5, err := m.ClientChoice.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn5
	}
	if m.LabelMatcher != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.LabelMatcher.Size()))
		n6, err := m.LabelMatcher.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	return i, nil
}

func (m *CreateSpecType_ClientName) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x12
	i++
	i = encodeVarintTypes(dAtA, i, uint64(len(m.ClientName)))
	i += copy(dAtA[i:], m.ClientName)
	return i, nil
}
func (m *CreateSpecType_ClientSelector) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.ClientSelector != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.ClientSelector.Size()))
		n7, err := m.ClientSelector.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	return i, nil
}
func (m *CreateSpecType_ClientNameMatcher) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.ClientNameMatcher != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.ClientNameMatcher.Size()))
		n8, err := m.ClientNameMatcher.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n8
	}
	return i, nil
}
func (m *ReplaceSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplaceSpecType) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Action != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.Action))
	}
	if m.ClientChoice != nil {
		nn9, err := m.ClientChoice.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn9
	}
	if m.LabelMatcher != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.LabelMatcher.Size()))
		n10, err := m.LabelMatcher.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n10
	}
	return i, nil
}

func (m *ReplaceSpecType_ClientName) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x12
	i++
	i = encodeVarintTypes(dAtA, i, uint64(len(m.ClientName)))
	i += copy(dAtA[i:], m.ClientName)
	return i, nil
}
func (m *ReplaceSpecType_ClientSelector) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.ClientSelector != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.ClientSelector.Size()))
		n11, err := m.ClientSelector.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n11
	}
	return i, nil
}
func (m *ReplaceSpecType_ClientNameMatcher) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.ClientNameMatcher != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.ClientNameMatcher.Size()))
		n12, err := m.ClientNameMatcher.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n12
	}
	return i, nil
}
func (m *GetSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetSpecType) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Action != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.Action))
	}
	if m.ClientChoice != nil {
		nn13, err := m.ClientChoice.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn13
	}
	if m.LabelMatcher != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.LabelMatcher.Size()))
		n14, err := m.LabelMatcher.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n14
	}
	return i, nil
}

func (m *GetSpecType_ClientName) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x12
	i++
	i = encodeVarintTypes(dAtA, i, uint64(len(m.ClientName)))
	i += copy(dAtA[i:], m.ClientName)
	return i, nil
}
func (m *GetSpecType_ClientSelector) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.ClientSelector != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.ClientSelector.Size()))
		n15, err := m.ClientSelector.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n15
	}
	return i, nil
}
func (m *GetSpecType_ClientNameMatcher) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.ClientNameMatcher != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.ClientNameMatcher.Size()))
		n16, err := m.ClientNameMatcher.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n16
	}
	return i, nil
}
func encodeVarintTypes(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func NewPopulatedGlobalSpecType(r randyTypes, easy bool) *GlobalSpecType {
	this := &GlobalSpecType{}
	this.Action = ves_io_schema_policy.RuleAction([]int32{0, 1, 2, 3}[r.Intn(4)])
	oneofNumber_ClientChoice := []int32{2, 3, 4}[r.Intn(3)]
	switch oneofNumber_ClientChoice {
	case 2:
		this.ClientChoice = NewPopulatedGlobalSpecType_ClientName(r, easy)
	case 3:
		this.ClientChoice = NewPopulatedGlobalSpecType_ClientSelector(r, easy)
	case 4:
		this.ClientChoice = NewPopulatedGlobalSpecType_ClientNameMatcher(r, easy)
	}
	if r.Intn(10) != 0 {
		this.LabelMatcher = ves_io_schema4.NewPopulatedLabelMatcherType(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedGlobalSpecType_ClientName(r randyTypes, easy bool) *GlobalSpecType_ClientName {
	this := &GlobalSpecType_ClientName{}
	this.ClientName = string(randStringTypes(r))
	return this
}
func NewPopulatedGlobalSpecType_ClientSelector(r randyTypes, easy bool) *GlobalSpecType_ClientSelector {
	this := &GlobalSpecType_ClientSelector{}
	this.ClientSelector = ves_io_schema4.NewPopulatedLabelSelectorType(r, easy)
	return this
}
func NewPopulatedGlobalSpecType_ClientNameMatcher(r randyTypes, easy bool) *GlobalSpecType_ClientNameMatcher {
	this := &GlobalSpecType_ClientNameMatcher{}
	this.ClientNameMatcher = ves_io_schema_policy.NewPopulatedMatcherType(r, easy)
	return this
}
func NewPopulatedCreateSpecType(r randyTypes, easy bool) *CreateSpecType {
	this := &CreateSpecType{}
	this.Action = ves_io_schema_policy.RuleAction([]int32{0, 1, 2, 3}[r.Intn(4)])
	oneofNumber_ClientChoice := []int32{2, 3, 4}[r.Intn(3)]
	switch oneofNumber_ClientChoice {
	case 2:
		this.ClientChoice = NewPopulatedCreateSpecType_ClientName(r, easy)
	case 3:
		this.ClientChoice = NewPopulatedCreateSpecType_ClientSelector(r, easy)
	case 4:
		this.ClientChoice = NewPopulatedCreateSpecType_ClientNameMatcher(r, easy)
	}
	if r.Intn(10) != 0 {
		this.LabelMatcher = ves_io_schema4.NewPopulatedLabelMatcherType(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedCreateSpecType_ClientName(r randyTypes, easy bool) *CreateSpecType_ClientName {
	this := &CreateSpecType_ClientName{}
	this.ClientName = string(randStringTypes(r))
	return this
}
func NewPopulatedCreateSpecType_ClientSelector(r randyTypes, easy bool) *CreateSpecType_ClientSelector {
	this := &CreateSpecType_ClientSelector{}
	this.ClientSelector = ves_io_schema4.NewPopulatedLabelSelectorType(r, easy)
	return this
}
func NewPopulatedCreateSpecType_ClientNameMatcher(r randyTypes, easy bool) *CreateSpecType_ClientNameMatcher {
	this := &CreateSpecType_ClientNameMatcher{}
	this.ClientNameMatcher = ves_io_schema_policy.NewPopulatedMatcherTypeBasic(r, easy)
	return this
}
func NewPopulatedReplaceSpecType(r randyTypes, easy bool) *ReplaceSpecType {
	this := &ReplaceSpecType{}
	this.Action = ves_io_schema_policy.RuleAction([]int32{0, 1, 2, 3}[r.Intn(4)])
	oneofNumber_ClientChoice := []int32{2, 3, 4}[r.Intn(3)]
	switch oneofNumber_ClientChoice {
	case 2:
		this.ClientChoice = NewPopulatedReplaceSpecType_ClientName(r, easy)
	case 3:
		this.ClientChoice = NewPopulatedReplaceSpecType_ClientSelector(r, easy)
	case 4:
		this.ClientChoice = NewPopulatedReplaceSpecType_ClientNameMatcher(r, easy)
	}
	if r.Intn(10) != 0 {
		this.LabelMatcher = ves_io_schema4.NewPopulatedLabelMatcherType(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedReplaceSpecType_ClientName(r randyTypes, easy bool) *ReplaceSpecType_ClientName {
	this := &ReplaceSpecType_ClientName{}
	this.ClientName = string(randStringTypes(r))
	return this
}
func NewPopulatedReplaceSpecType_ClientSelector(r randyTypes, easy bool) *ReplaceSpecType_ClientSelector {
	this := &ReplaceSpecType_ClientSelector{}
	this.ClientSelector = ves_io_schema4.NewPopulatedLabelSelectorType(r, easy)
	return this
}
func NewPopulatedReplaceSpecType_ClientNameMatcher(r randyTypes, easy bool) *ReplaceSpecType_ClientNameMatcher {
	this := &ReplaceSpecType_ClientNameMatcher{}
	this.ClientNameMatcher = ves_io_schema_policy.NewPopulatedMatcherTypeBasic(r, easy)
	return this
}
func NewPopulatedGetSpecType(r randyTypes, easy bool) *GetSpecType {
	this := &GetSpecType{}
	this.Action = ves_io_schema_policy.RuleAction([]int32{0, 1, 2, 3}[r.Intn(4)])
	oneofNumber_ClientChoice := []int32{2, 3, 4}[r.Intn(3)]
	switch oneofNumber_ClientChoice {
	case 2:
		this.ClientChoice = NewPopulatedGetSpecType_ClientName(r, easy)
	case 3:
		this.ClientChoice = NewPopulatedGetSpecType_ClientSelector(r, easy)
	case 4:
		this.ClientChoice = NewPopulatedGetSpecType_ClientNameMatcher(r, easy)
	}
	if r.Intn(10) != 0 {
		this.LabelMatcher = ves_io_schema4.NewPopulatedLabelMatcherType(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedGetSpecType_ClientName(r randyTypes, easy bool) *GetSpecType_ClientName {
	this := &GetSpecType_ClientName{}
	this.ClientName = string(randStringTypes(r))
	return this
}
func NewPopulatedGetSpecType_ClientSelector(r randyTypes, easy bool) *GetSpecType_ClientSelector {
	this := &GetSpecType_ClientSelector{}
	this.ClientSelector = ves_io_schema4.NewPopulatedLabelSelectorType(r, easy)
	return this
}
func NewPopulatedGetSpecType_ClientNameMatcher(r randyTypes, easy bool) *GetSpecType_ClientNameMatcher {
	this := &GetSpecType_ClientNameMatcher{}
	this.ClientNameMatcher = ves_io_schema_policy.NewPopulatedMatcherTypeBasic(r, easy)
	return this
}

type randyTypes interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneTypes(r randyTypes) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringTypes(r randyTypes) string {
	v1 := r.Intn(100)
	tmps := make([]rune, v1)
	for i := 0; i < v1; i++ {
		tmps[i] = randUTF8RuneTypes(r)
	}
	return string(tmps)
}
func randUnrecognizedTypes(r randyTypes, maxFieldNumber int) (dAtA []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		dAtA = randFieldTypes(dAtA, r, fieldNumber, wire)
	}
	return dAtA
}
func randFieldTypes(dAtA []byte, r randyTypes, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		dAtA = encodeVarintPopulateTypes(dAtA, uint64(key))
		v2 := r.Int63()
		if r.Intn(2) == 0 {
			v2 *= -1
		}
		dAtA = encodeVarintPopulateTypes(dAtA, uint64(v2))
	case 1:
		dAtA = encodeVarintPopulateTypes(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		dAtA = encodeVarintPopulateTypes(dAtA, uint64(key))
		ll := r.Intn(100)
		dAtA = encodeVarintPopulateTypes(dAtA, uint64(ll))
		for j := 0; j < ll; j++ {
			dAtA = append(dAtA, byte(r.Intn(256)))
		}
	default:
		dAtA = encodeVarintPopulateTypes(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return dAtA
}
func encodeVarintPopulateTypes(dAtA []byte, v uint64) []byte {
	for v >= 1<<7 {
		dAtA = append(dAtA, uint8(uint64(v)&0x7f|0x80))
		v >>= 7
	}
	dAtA = append(dAtA, uint8(v))
	return dAtA
}
func (m *GlobalSpecType) Size() (n int) {
	var l int
	_ = l
	if m.Action != 0 {
		n += 1 + sovTypes(uint64(m.Action))
	}
	if m.ClientChoice != nil {
		n += m.ClientChoice.Size()
	}
	if m.LabelMatcher != nil {
		l = m.LabelMatcher.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *GlobalSpecType_ClientName) Size() (n int) {
	var l int
	_ = l
	l = len(m.ClientName)
	n += 1 + l + sovTypes(uint64(l))
	return n
}
func (m *GlobalSpecType_ClientSelector) Size() (n int) {
	var l int
	_ = l
	if m.ClientSelector != nil {
		l = m.ClientSelector.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_ClientNameMatcher) Size() (n int) {
	var l int
	_ = l
	if m.ClientNameMatcher != nil {
		l = m.ClientNameMatcher.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType) Size() (n int) {
	var l int
	_ = l
	if m.Action != 0 {
		n += 1 + sovTypes(uint64(m.Action))
	}
	if m.ClientChoice != nil {
		n += m.ClientChoice.Size()
	}
	if m.LabelMatcher != nil {
		l = m.LabelMatcher.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *CreateSpecType_ClientName) Size() (n int) {
	var l int
	_ = l
	l = len(m.ClientName)
	n += 1 + l + sovTypes(uint64(l))
	return n
}
func (m *CreateSpecType_ClientSelector) Size() (n int) {
	var l int
	_ = l
	if m.ClientSelector != nil {
		l = m.ClientSelector.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_ClientNameMatcher) Size() (n int) {
	var l int
	_ = l
	if m.ClientNameMatcher != nil {
		l = m.ClientNameMatcher.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType) Size() (n int) {
	var l int
	_ = l
	if m.Action != 0 {
		n += 1 + sovTypes(uint64(m.Action))
	}
	if m.ClientChoice != nil {
		n += m.ClientChoice.Size()
	}
	if m.LabelMatcher != nil {
		l = m.LabelMatcher.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *ReplaceSpecType_ClientName) Size() (n int) {
	var l int
	_ = l
	l = len(m.ClientName)
	n += 1 + l + sovTypes(uint64(l))
	return n
}
func (m *ReplaceSpecType_ClientSelector) Size() (n int) {
	var l int
	_ = l
	if m.ClientSelector != nil {
		l = m.ClientSelector.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_ClientNameMatcher) Size() (n int) {
	var l int
	_ = l
	if m.ClientNameMatcher != nil {
		l = m.ClientNameMatcher.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType) Size() (n int) {
	var l int
	_ = l
	if m.Action != 0 {
		n += 1 + sovTypes(uint64(m.Action))
	}
	if m.ClientChoice != nil {
		n += m.ClientChoice.Size()
	}
	if m.LabelMatcher != nil {
		l = m.LabelMatcher.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *GetSpecType_ClientName) Size() (n int) {
	var l int
	_ = l
	l = len(m.ClientName)
	n += 1 + l + sovTypes(uint64(l))
	return n
}
func (m *GetSpecType_ClientSelector) Size() (n int) {
	var l int
	_ = l
	if m.ClientSelector != nil {
		l = m.ClientSelector.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_ClientNameMatcher) Size() (n int) {
	var l int
	_ = l
	if m.ClientNameMatcher != nil {
		l = m.ClientNameMatcher.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func sovTypes(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozTypes(x uint64) (n int) {
	return sovTypes(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *GlobalSpecType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType{`,
		`Action:` + fmt.Sprintf("%v", this.Action) + `,`,
		`ClientChoice:` + fmt.Sprintf("%v", this.ClientChoice) + `,`,
		`LabelMatcher:` + strings.Replace(fmt.Sprintf("%v", this.LabelMatcher), "LabelMatcherType", "ves_io_schema4.LabelMatcherType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_ClientName) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_ClientName{`,
		`ClientName:` + fmt.Sprintf("%v", this.ClientName) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_ClientSelector) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_ClientSelector{`,
		`ClientSelector:` + strings.Replace(fmt.Sprintf("%v", this.ClientSelector), "LabelSelectorType", "ves_io_schema4.LabelSelectorType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_ClientNameMatcher) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_ClientNameMatcher{`,
		`ClientNameMatcher:` + strings.Replace(fmt.Sprintf("%v", this.ClientNameMatcher), "MatcherType", "ves_io_schema_policy.MatcherType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType{`,
		`Action:` + fmt.Sprintf("%v", this.Action) + `,`,
		`ClientChoice:` + fmt.Sprintf("%v", this.ClientChoice) + `,`,
		`LabelMatcher:` + strings.Replace(fmt.Sprintf("%v", this.LabelMatcher), "LabelMatcherType", "ves_io_schema4.LabelMatcherType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_ClientName) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_ClientName{`,
		`ClientName:` + fmt.Sprintf("%v", this.ClientName) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_ClientSelector) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_ClientSelector{`,
		`ClientSelector:` + strings.Replace(fmt.Sprintf("%v", this.ClientSelector), "LabelSelectorType", "ves_io_schema4.LabelSelectorType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_ClientNameMatcher) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_ClientNameMatcher{`,
		`ClientNameMatcher:` + strings.Replace(fmt.Sprintf("%v", this.ClientNameMatcher), "MatcherTypeBasic", "ves_io_schema_policy.MatcherTypeBasic", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType{`,
		`Action:` + fmt.Sprintf("%v", this.Action) + `,`,
		`ClientChoice:` + fmt.Sprintf("%v", this.ClientChoice) + `,`,
		`LabelMatcher:` + strings.Replace(fmt.Sprintf("%v", this.LabelMatcher), "LabelMatcherType", "ves_io_schema4.LabelMatcherType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_ClientName) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_ClientName{`,
		`ClientName:` + fmt.Sprintf("%v", this.ClientName) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_ClientSelector) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_ClientSelector{`,
		`ClientSelector:` + strings.Replace(fmt.Sprintf("%v", this.ClientSelector), "LabelSelectorType", "ves_io_schema4.LabelSelectorType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_ClientNameMatcher) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_ClientNameMatcher{`,
		`ClientNameMatcher:` + strings.Replace(fmt.Sprintf("%v", this.ClientNameMatcher), "MatcherTypeBasic", "ves_io_schema_policy.MatcherTypeBasic", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType{`,
		`Action:` + fmt.Sprintf("%v", this.Action) + `,`,
		`ClientChoice:` + fmt.Sprintf("%v", this.ClientChoice) + `,`,
		`LabelMatcher:` + strings.Replace(fmt.Sprintf("%v", this.LabelMatcher), "LabelMatcherType", "ves_io_schema4.LabelMatcherType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_ClientName) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_ClientName{`,
		`ClientName:` + fmt.Sprintf("%v", this.ClientName) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_ClientSelector) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_ClientSelector{`,
		`ClientSelector:` + strings.Replace(fmt.Sprintf("%v", this.ClientSelector), "LabelSelectorType", "ves_io_schema4.LabelSelectorType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_ClientNameMatcher) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_ClientNameMatcher{`,
		`ClientNameMatcher:` + strings.Replace(fmt.Sprintf("%v", this.ClientNameMatcher), "MatcherTypeBasic", "ves_io_schema_policy.MatcherTypeBasic", 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringTypes(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *GlobalSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GlobalSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GlobalSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Action", wireType)
			}
			m.Action = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Action |= (ves_io_schema_policy.RuleAction(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClientChoice = &GlobalSpecType_ClientName{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientSelector", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.LabelSelectorType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ClientChoice = &GlobalSpecType_ClientSelector{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientNameMatcher", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema_policy.MatcherType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ClientChoice = &GlobalSpecType_ClientNameMatcher{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LabelMatcher", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LabelMatcher == nil {
				m.LabelMatcher = &ves_io_schema4.LabelMatcherType{}
			}
			if err := m.LabelMatcher.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Action", wireType)
			}
			m.Action = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Action |= (ves_io_schema_policy.RuleAction(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClientChoice = &CreateSpecType_ClientName{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientSelector", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.LabelSelectorType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ClientChoice = &CreateSpecType_ClientSelector{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientNameMatcher", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema_policy.MatcherTypeBasic{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ClientChoice = &CreateSpecType_ClientNameMatcher{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LabelMatcher", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LabelMatcher == nil {
				m.LabelMatcher = &ves_io_schema4.LabelMatcherType{}
			}
			if err := m.LabelMatcher.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplaceSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplaceSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplaceSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Action", wireType)
			}
			m.Action = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Action |= (ves_io_schema_policy.RuleAction(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClientChoice = &ReplaceSpecType_ClientName{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientSelector", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.LabelSelectorType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ClientChoice = &ReplaceSpecType_ClientSelector{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientNameMatcher", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema_policy.MatcherTypeBasic{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ClientChoice = &ReplaceSpecType_ClientNameMatcher{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LabelMatcher", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LabelMatcher == nil {
				m.LabelMatcher = &ves_io_schema4.LabelMatcherType{}
			}
			if err := m.LabelMatcher.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Action", wireType)
			}
			m.Action = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Action |= (ves_io_schema_policy.RuleAction(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClientChoice = &GetSpecType_ClientName{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientSelector", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.LabelSelectorType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ClientChoice = &GetSpecType_ClientSelector{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientNameMatcher", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema_policy.MatcherTypeBasic{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ClientChoice = &GetSpecType_ClientNameMatcher{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LabelMatcher", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LabelMatcher == nil {
				m.LabelMatcher = &ves_io_schema4.LabelMatcherType{}
			}
			if err := m.LabelMatcher.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTypes(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthTypes
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipTypes(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthTypes = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTypes   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("ves.io/schema/secret_policy_rule/types.proto", fileDescriptorTypes) }

var fileDescriptorTypes = []byte{
	// 599 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x96, 0xb1, 0x6f, 0xd3, 0x40,
	0x14, 0xc6, 0xf3, 0xea, 0x34, 0x2d, 0x57, 0x9a, 0x52, 0xb3, 0x84, 0x80, 0x8e, 0x34, 0x03, 0xca,
	0xd0, 0xd8, 0x52, 0xcb, 0x80, 0x18, 0x90, 0x30, 0xa0, 0x56, 0x40, 0x3b, 0xa4, 0x08, 0x01, 0x4b,
	0x74, 0xb9, 0xbe, 0x26, 0x16, 0xe7, 0x9e, 0x75, 0xbe, 0x04, 0x3a, 0x20, 0x55, 0xfc, 0x05, 0x0c,
	0x48, 0x48, 0x20, 0x31, 0xf3, 0x27, 0x20, 0xb2, 0x74, 0x44, 0x4c, 0x1d, 0x2b, 0x26, 0x62, 0x96,
	0xb2, 0x75, 0x44, 0x4c, 0xa8, 0xb6, 0x1b, 0x62, 0x1a, 0x40, 0x0c, 0xa0, 0x0e, 0xdd, 0xee, 0xee,
	0x7d, 0xef, 0xfb, 0x9e, 0xfd, 0x93, 0x75, 0x26, 0xb3, 0x1d, 0x0c, 0x2c, 0x57, 0xda, 0x01, 0x6f,
	0xa1, 0xc7, 0xec, 0x00, 0xb9, 0x42, 0x5d, 0xf7, 0xa5, 0x70, 0xf9, 0x46, 0x5d, 0xb5, 0x05, 0xda,
	0x7a, 0xc3, 0xc7, 0xc0, 0xf2, 0x95, 0xd4, 0xd2, 0x2c, 0xc5, 0x6a, 0x2b, 0x56, 0x5b, 0x87, 0xd5,
	0xc5, 0x6a, 0xd3, 0xd5, 0xad, 0x76, 0xc3, 0xe2, 0xd2, 0xb3, 0x9b, 0xb2, 0x29, 0xed, 0xa8, 0xb1,
	0xd1, 0x5e, 0x8b, 0x76, 0xd1, 0x26, 0x5a, 0xc5, 0x86, 0xc5, 0xb3, 0xe9, 0x78, 0xe9, 0x6b, 0x57,
	0xae, 0x27, 0x69, 0xc5, 0x52, 0xba, 0x18, 0xc7, 0x0c, 0xce, 0x53, 0x3c, 0x93, 0x56, 0x0c, 0x96,
	0xce, 0xa5, 0x4b, 0x1d, 0x26, 0xdc, 0x55, 0xa6, 0x71, 0xb8, 0x75, 0xc7, 0xc5, 0x47, 0xf5, 0x54,
	0x78, 0xf9, 0xb5, 0x41, 0xf2, 0x0b, 0x42, 0x36, 0x98, 0x58, 0xf1, 0x91, 0xdf, 0xd9, 0xf0, 0xd1,
	0x74, 0x48, 0x8e, 0xf1, 0x7d, 0x4d, 0x01, 0x4a, 0x50, 0xc9, 0xcf, 0x95, 0xac, 0xf4, 0xeb, 0x88,
	0x07, 0xb4, 0x6a, 0x6d, 0x81, 0x57, 0x23, 0x9d, 0x33, 0xfe, 0xb1, 0x0b, 0xd9, 0xeb, 0x37, 0x96,
	0xef, 0xd7, 0x92, 0x4e, 0xb3, 0x4a, 0x26, 0xb8, 0x70, 0x71, 0x5d, 0xd7, 0xd7, 0x99, 0x87, 0x85,
	0x91, 0x12, 0x54, 0x4e, 0x38, 0xe4, 0xdd, 0x97, 0x2d, 0x63, 0x54, 0x19, 0x95, 0xcd, 0x91, 0xc5,
	0x4c, 0x8d, 0xc4, 0x82, 0x65, 0xe6, 0xa1, 0x79, 0x8b, 0x4c, 0x25, 0xf2, 0x00, 0x05, 0x72, 0x2d,
	0x55, 0xc1, 0x28, 0x41, 0x65, 0xe2, 0x50, 0xf6, 0x6d, 0xd6, 0x40, 0xb1, 0x92, 0x68, 0xf6, 0xa7,
	0x5d, 0xcc, 0xd4, 0xf2, 0x71, 0xeb, 0xc1, 0xa9, 0xb9, 0x42, 0x4e, 0x0f, 0x64, 0xd7, 0x3d, 0xa6,
	0x79, 0x0b, 0x55, 0x21, 0x1b, 0x19, 0xce, 0x0c, 0x7f, 0x98, 0xa5, 0x58, 0x94, 0x38, 0x4e, 0xff,
	0x18, 0x2d, 0x29, 0x98, 0x4b, 0x64, 0x52, 0xec, 0x67, 0xf7, 0xed, 0x46, 0x23, 0xbb, 0xf3, 0xc3,
	0xe6, 0x1b, 0x30, 0x73, 0xc6, 0x76, 0x9e, 0xc0, 0x6e, 0x17, 0xa0, 0x76, 0x52, 0x0c, 0x94, 0x9c,
	0x32, 0x99, 0x4c, 0x66, 0xe4, 0x2d, 0xe9, 0x72, 0x34, 0xa7, 0xb7, 0xba, 0x90, 0xdd, 0xee, 0x42,
	0x2e, 0xec, 0xc2, 0xe8, 0xc5, 0xd9, 0xf9, 0xd9, 0xb9, 0x9b, 0xd9, 0xf1, 0xdc, 0xa9, 0xb1, 0xf2,
	0x4b, 0x83, 0xe4, 0xaf, 0x29, 0x64, 0x1a, 0xfb, 0x80, 0x2e, 0xfd, 0x2d, 0xa0, 0x3e, 0x96, 0x99,
	0x21, 0x58, 0xfe, 0x25, 0x8a, 0x7b, 0xbf, 0x43, 0x71, 0xe1, 0x8f, 0x28, 0x1c, 0x16, 0xb8, 0xfc,
	0x7f, 0xf0, 0xb8, 0x3c, 0xfd, 0xe1, 0xca, 0x4f, 0x9f, 0xc1, 0x10, 0x44, 0x4f, 0xbf, 0x41, 0xfa,
	0xa8, 0xfc, 0xca, 0x20, 0x53, 0x35, 0xf4, 0x05, 0xe3, 0xc7, 0x74, 0x8e, 0x1e, 0x9d, 0x17, 0x06,
	0x99, 0x58, 0x40, 0x7d, 0x4c, 0xe6, 0xa8, 0x91, 0x71, 0x9e, 0xc3, 0x76, 0x8f, 0x66, 0x76, 0x7a,
	0x34, 0xb3, 0xd7, 0xa3, 0xf0, 0xb5, 0x47, 0x61, 0x33, 0xa4, 0xf0, 0x26, 0xa4, 0xf0, 0x36, 0xa4,
	0xb0, 0x15, 0x52, 0x78, 0x1f, 0x52, 0xd8, 0x0e, 0x29, 0xec, 0x84, 0x14, 0x3e, 0x85, 0x14, 0x76,
	0x43, 0x9a, 0xd9, 0x0b, 0x29, 0x3c, 0xfb, 0x4c, 0x33, 0x0f, 0xee, 0x36, 0xa5, 0xff, 0xb0, 0x69,
	0x75, 0xa4, 0xd0, 0xa8, 0x14, 0xb3, 0xda, 0x81, 0x1d, 0x2d, 0xd6, 0xa4, 0xf2, 0xaa, 0xbe, 0x92,
	0x1d, 0x77, 0x15, 0x55, 0xf5, 0xa0, 0x6c, 0xfb, 0x8d, 0xa6, 0xb4, 0xf1, 0xb1, 0x3e, 0xb8, 0xfc,
	0x7f, 0xf5, 0x0f, 0xd0, 0xc8, 0x45, 0x77, 0xe2, 0xfc, 0xf7, 0x00, 0x00, 0x00, 0xff, 0xff, 0x28,
	0x1b, 0x0d, 0xdd, 0x2e, 0x08, 0x00, 0x00,
}
