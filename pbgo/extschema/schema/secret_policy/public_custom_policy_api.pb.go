// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ves.io/schema/secret_policy/public_custom_policy_api.proto

package secret_policy

import proto "github.com/gogo/protobuf/proto"
import golang_proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"
import _ "github.com/gogo/googleapis/google/api"
import _ "github.com/gogo/protobuf/types"
import _ "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
import _ "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
import _ "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/vesenv"

import strings "strings"
import reflect "reflect"

import context "golang.org/x/net/context"
import grpc "google.golang.org/grpc"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// SoftDeleteRequest is used to soft delete a secret_policy
//
// x-displayName: "Soft Delete Request"
// This is the input message of the 'DeletePolicy' RPC.
type SoftDeleteRequest struct {
	// namespace
	//
	// x-displayName: "Namespace"
	// x-required
	// x-example: "system"
	// Namespace of the secret policy
	Namespace string `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// name
	//
	// x-displayName: "Name"
	// x-required
	// x-example: "site-secret-policy"
	// Name of the secret policy
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (m *SoftDeleteRequest) Reset()      { *m = SoftDeleteRequest{} }
func (*SoftDeleteRequest) ProtoMessage() {}
func (*SoftDeleteRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorPublicCustomPolicyApi, []int{0}
}

func (m *SoftDeleteRequest) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *SoftDeleteRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

// DeleteResponse
//
// x-displayName: "Delete Response"
// This is the response message of the 'DeletePolicy' RPC.
type SoftDeleteResponse struct {
	// Status
	//
	// x-displayName: "Status"
	// x-example: "200
	// HTTP status as reported by the backend
	Status int64 `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
}

func (m *SoftDeleteResponse) Reset()      { *m = SoftDeleteResponse{} }
func (*SoftDeleteResponse) ProtoMessage() {}
func (*SoftDeleteResponse) Descriptor() ([]byte, []int) {
	return fileDescriptorPublicCustomPolicyApi, []int{1}
}

func (m *SoftDeleteResponse) GetStatus() int64 {
	if m != nil {
		return m.Status
	}
	return 0
}

// RecoverRequest is used to recover a secret_policy
//
// x-displayName: "Recover Request"
// This is the input message of the 'RecoverPolicy' RPC.
type RecoverRequest struct {
	// namespace
	//
	// x-displayName: "Namespace"
	// x-required
	// x-example: "system"
	// Namespace of the secret policy
	Namespace string `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// name
	//
	// x-displayName: "Name"
	// x-required
	// x-example: "site-secret-policy"
	// Name of the secret policy
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (m *RecoverRequest) Reset()      { *m = RecoverRequest{} }
func (*RecoverRequest) ProtoMessage() {}
func (*RecoverRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorPublicCustomPolicyApi, []int{2}
}

func (m *RecoverRequest) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *RecoverRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

// RecoverResponse
//
// x-displayName: "Recover Response"
// This is the response message of the 'RecoverPolicy' RPC.
type RecoverResponse struct {
	// Status
	//
	// x-displayName: "Status"
	// x-example: "200
	// HTTP status as reported by the backend
	Status int64 `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
}

func (m *RecoverResponse) Reset()      { *m = RecoverResponse{} }
func (*RecoverResponse) ProtoMessage() {}
func (*RecoverResponse) Descriptor() ([]byte, []int) {
	return fileDescriptorPublicCustomPolicyApi, []int{3}
}

func (m *RecoverResponse) GetStatus() int64 {
	if m != nil {
		return m.Status
	}
	return 0
}

func init() {
	proto.RegisterType((*SoftDeleteRequest)(nil), "ves.io.schema.secret_policy.SoftDeleteRequest")
	golang_proto.RegisterType((*SoftDeleteRequest)(nil), "ves.io.schema.secret_policy.SoftDeleteRequest")
	proto.RegisterType((*SoftDeleteResponse)(nil), "ves.io.schema.secret_policy.SoftDeleteResponse")
	golang_proto.RegisterType((*SoftDeleteResponse)(nil), "ves.io.schema.secret_policy.SoftDeleteResponse")
	proto.RegisterType((*RecoverRequest)(nil), "ves.io.schema.secret_policy.RecoverRequest")
	golang_proto.RegisterType((*RecoverRequest)(nil), "ves.io.schema.secret_policy.RecoverRequest")
	proto.RegisterType((*RecoverResponse)(nil), "ves.io.schema.secret_policy.RecoverResponse")
	golang_proto.RegisterType((*RecoverResponse)(nil), "ves.io.schema.secret_policy.RecoverResponse")
}
func (this *SoftDeleteRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SoftDeleteRequest)
	if !ok {
		that2, ok := that.(SoftDeleteRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Namespace != that1.Namespace {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	return true
}
func (this *SoftDeleteResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SoftDeleteResponse)
	if !ok {
		that2, ok := that.(SoftDeleteResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Status != that1.Status {
		return false
	}
	return true
}
func (this *RecoverRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RecoverRequest)
	if !ok {
		that2, ok := that.(RecoverRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Namespace != that1.Namespace {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	return true
}
func (this *RecoverResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RecoverResponse)
	if !ok {
		that2, ok := that.(RecoverResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Status != that1.Status {
		return false
	}
	return true
}
func (this *SoftDeleteRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&secret_policy.SoftDeleteRequest{")
	s = append(s, "Namespace: "+fmt.Sprintf("%#v", this.Namespace)+",\n")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SoftDeleteResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&secret_policy.SoftDeleteResponse{")
	s = append(s, "Status: "+fmt.Sprintf("%#v", this.Status)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RecoverRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&secret_policy.RecoverRequest{")
	s = append(s, "Namespace: "+fmt.Sprintf("%#v", this.Namespace)+",\n")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RecoverResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&secret_policy.RecoverResponse{")
	s = append(s, "Status: "+fmt.Sprintf("%#v", this.Status)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringPublicCustomPolicyApi(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for CustomAPI service

type CustomAPIClient interface {
	// DeletePolicy
	//
	// x-displayName: "Delete secret policy with given policy name"
	DeletePolicy(ctx context.Context, in *SoftDeleteRequest, opts ...grpc.CallOption) (*SoftDeleteResponse, error)
	// RecoverPolicy
	//
	// x-displayName: "Recover secret policy with given policy name"
	RecoverPolicy(ctx context.Context, in *RecoverRequest, opts ...grpc.CallOption) (*RecoverResponse, error)
}

type customAPIClient struct {
	cc *grpc.ClientConn
}

func NewCustomAPIClient(cc *grpc.ClientConn) CustomAPIClient {
	return &customAPIClient{cc}
}

func (c *customAPIClient) DeletePolicy(ctx context.Context, in *SoftDeleteRequest, opts ...grpc.CallOption) (*SoftDeleteResponse, error) {
	out := new(SoftDeleteResponse)
	err := grpc.Invoke(ctx, "/ves.io.schema.secret_policy.CustomAPI/DeletePolicy", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customAPIClient) RecoverPolicy(ctx context.Context, in *RecoverRequest, opts ...grpc.CallOption) (*RecoverResponse, error) {
	out := new(RecoverResponse)
	err := grpc.Invoke(ctx, "/ves.io.schema.secret_policy.CustomAPI/RecoverPolicy", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for CustomAPI service

type CustomAPIServer interface {
	// DeletePolicy
	//
	// x-displayName: "Delete secret policy with given policy name"
	DeletePolicy(context.Context, *SoftDeleteRequest) (*SoftDeleteResponse, error)
	// RecoverPolicy
	//
	// x-displayName: "Recover secret policy with given policy name"
	RecoverPolicy(context.Context, *RecoverRequest) (*RecoverResponse, error)
}

func RegisterCustomAPIServer(s *grpc.Server, srv CustomAPIServer) {
	s.RegisterService(&_CustomAPI_serviceDesc, srv)
}

func _CustomAPI_DeletePolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SoftDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomAPIServer).DeletePolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ves.io.schema.secret_policy.CustomAPI/DeletePolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomAPIServer).DeletePolicy(ctx, req.(*SoftDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomAPI_RecoverPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecoverRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomAPIServer).RecoverPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ves.io.schema.secret_policy.CustomAPI/RecoverPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomAPIServer).RecoverPolicy(ctx, req.(*RecoverRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _CustomAPI_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ves.io.schema.secret_policy.CustomAPI",
	HandlerType: (*CustomAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DeletePolicy",
			Handler:    _CustomAPI_DeletePolicy_Handler,
		},
		{
			MethodName: "RecoverPolicy",
			Handler:    _CustomAPI_RecoverPolicy_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ves.io/schema/secret_policy/public_custom_policy_api.proto",
}

func (m *SoftDeleteRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SoftDeleteRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Namespace) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPublicCustomPolicyApi(dAtA, i, uint64(len(m.Namespace)))
		i += copy(dAtA[i:], m.Namespace)
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintPublicCustomPolicyApi(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	return i, nil
}

func (m *SoftDeleteResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SoftDeleteResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Status != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPublicCustomPolicyApi(dAtA, i, uint64(m.Status))
	}
	return i, nil
}

func (m *RecoverRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RecoverRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Namespace) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPublicCustomPolicyApi(dAtA, i, uint64(len(m.Namespace)))
		i += copy(dAtA[i:], m.Namespace)
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintPublicCustomPolicyApi(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	return i, nil
}

func (m *RecoverResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RecoverResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Status != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPublicCustomPolicyApi(dAtA, i, uint64(m.Status))
	}
	return i, nil
}

func encodeVarintPublicCustomPolicyApi(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *SoftDeleteRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovPublicCustomPolicyApi(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovPublicCustomPolicyApi(uint64(l))
	}
	return n
}

func (m *SoftDeleteResponse) Size() (n int) {
	var l int
	_ = l
	if m.Status != 0 {
		n += 1 + sovPublicCustomPolicyApi(uint64(m.Status))
	}
	return n
}

func (m *RecoverRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovPublicCustomPolicyApi(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovPublicCustomPolicyApi(uint64(l))
	}
	return n
}

func (m *RecoverResponse) Size() (n int) {
	var l int
	_ = l
	if m.Status != 0 {
		n += 1 + sovPublicCustomPolicyApi(uint64(m.Status))
	}
	return n
}

func sovPublicCustomPolicyApi(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozPublicCustomPolicyApi(x uint64) (n int) {
	return sovPublicCustomPolicyApi(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *SoftDeleteRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SoftDeleteRequest{`,
		`Namespace:` + fmt.Sprintf("%v", this.Namespace) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SoftDeleteResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SoftDeleteResponse{`,
		`Status:` + fmt.Sprintf("%v", this.Status) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RecoverRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RecoverRequest{`,
		`Namespace:` + fmt.Sprintf("%v", this.Namespace) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RecoverResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RecoverResponse{`,
		`Status:` + fmt.Sprintf("%v", this.Status) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringPublicCustomPolicyApi(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *SoftDeleteRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCustomPolicyApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SoftDeleteRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SoftDeleteRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomPolicyApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomPolicyApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomPolicyApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomPolicyApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCustomPolicyApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCustomPolicyApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SoftDeleteResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCustomPolicyApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SoftDeleteResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SoftDeleteResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomPolicyApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCustomPolicyApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCustomPolicyApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RecoverRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCustomPolicyApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RecoverRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RecoverRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomPolicyApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomPolicyApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomPolicyApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomPolicyApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCustomPolicyApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCustomPolicyApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RecoverResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCustomPolicyApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RecoverResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RecoverResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomPolicyApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCustomPolicyApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCustomPolicyApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPublicCustomPolicyApi(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPublicCustomPolicyApi
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPublicCustomPolicyApi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPublicCustomPolicyApi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthPublicCustomPolicyApi
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowPublicCustomPolicyApi
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipPublicCustomPolicyApi(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthPublicCustomPolicyApi = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPublicCustomPolicyApi   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("ves.io/schema/secret_policy/public_custom_policy_api.proto", fileDescriptorPublicCustomPolicyApi)
}
func init() {
	golang_proto.RegisterFile("ves.io/schema/secret_policy/public_custom_policy_api.proto", fileDescriptorPublicCustomPolicyApi)
}

var fileDescriptorPublicCustomPolicyApi = []byte{
	// 534 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x54, 0xcd, 0x6a, 0x14, 0x41,
	0x10, 0xde, 0xde, 0x95, 0xc0, 0x36, 0xfe, 0xe0, 0x20, 0xb2, 0x6e, 0x42, 0x23, 0x73, 0xd2, 0x98,
	0x99, 0x16, 0xbd, 0x2d, 0x82, 0x24, 0x46, 0xd0, 0x93, 0x71, 0xbd, 0x79, 0x59, 0x66, 0x66, 0x6b,
	0x27, 0xa3, 0xbb, 0x53, 0x6d, 0x77, 0xcf, 0x68, 0x90, 0x80, 0xe4, 0xe2, 0x55, 0xf0, 0x25, 0x7c,
	0x87, 0x5c, 0x72, 0x53, 0x10, 0x24, 0x98, 0x4b, 0x8e, 0xee, 0xc4, 0x83, 0xc7, 0x3c, 0x82, 0xd8,
	0xd3, 0xbb, 0x66, 0x50, 0x86, 0x90, 0x5b, 0x55, 0x7f, 0xf5, 0x55, 0xd5, 0x57, 0xd5, 0xdd, 0xb4,
	0x97, 0x83, 0xf2, 0x13, 0xe4, 0x2a, 0xda, 0x84, 0x49, 0xc0, 0x15, 0x44, 0x12, 0xf4, 0x40, 0xe0,
	0x38, 0x89, 0xb6, 0xb8, 0xc8, 0xc2, 0x71, 0x12, 0x0d, 0xa2, 0x4c, 0x69, 0x9c, 0xd8, 0xc3, 0x41,
	0x20, 0x12, 0x5f, 0x48, 0xd4, 0xe8, 0x2c, 0x96, 0x5c, 0xbf, 0xe4, 0xfa, 0x15, 0x6e, 0xd7, 0x8b,
	0x13, 0xbd, 0x99, 0x85, 0x7e, 0x84, 0x13, 0x1e, 0x63, 0x8c, 0xdc, 0x70, 0xc2, 0x6c, 0x64, 0x3c,
	0xe3, 0x18, 0xab, 0xcc, 0xd5, 0x5d, 0x8a, 0x11, 0xe3, 0x31, 0xf0, 0x40, 0x24, 0x3c, 0x48, 0x53,
	0xd4, 0x81, 0x4e, 0x30, 0x55, 0x16, 0x65, 0x16, 0x9d, 0xe7, 0x18, 0x66, 0xd2, 0x04, 0x58, 0x7c,
	0xb1, 0xaa, 0x02, 0xc5, 0x49, 0xf2, 0xb5, 0x2a, 0xa8, 0xb7, 0x04, 0xcc, 0x20, 0xb7, 0x0a, 0xe5,
	0xa0, 0x20, 0xcd, 0xab, 0x74, 0xf7, 0x21, 0xbd, 0xfc, 0x0c, 0x47, 0x7a, 0x1d, 0xc6, 0xa0, 0xa1,
	0x0f, 0xaf, 0x32, 0x50, 0xda, 0x59, 0xa2, 0xed, 0x34, 0x98, 0x80, 0x12, 0x41, 0x04, 0x1d, 0x72,
	0x9d, 0xdc, 0x68, 0xf7, 0xff, 0x1e, 0x38, 0x0e, 0x3d, 0xf7, 0xc7, 0xe9, 0x34, 0x0d, 0x60, 0x6c,
	0x77, 0x85, 0x3a, 0x27, 0xd3, 0x28, 0x81, 0xa9, 0x02, 0xe7, 0x2a, 0x5d, 0x50, 0x3a, 0xd0, 0x99,
	0x32, 0x49, 0x5a, 0x7d, 0xeb, 0xb9, 0x6b, 0xf4, 0x62, 0x1f, 0x22, 0xcc, 0x41, 0x9e, 0xbd, 0xe2,
	0x4d, 0x7a, 0x69, 0x9e, 0xa3, 0xbe, 0xdc, 0x9d, 0x69, 0x8b, 0xb6, 0x1f, 0x98, 0x2d, 0xaf, 0x6e,
	0x3c, 0x76, 0x0e, 0x08, 0x3d, 0x5f, 0xf6, 0xb9, 0x61, 0x76, 0xe9, 0xf8, 0x7e, 0xcd, 0xa6, 0xfd,
	0x7f, 0xa6, 0xd3, 0xe5, 0xa7, 0x8e, 0x2f, 0xfb, 0x72, 0xc3, 0xe2, 0x73, 0xe7, 0x4a, 0x0e, 0xca,
	0x4b, 0xd0, 0x2b, 0x83, 0x95, 0xf7, 0x5a, 0x26, 0x1a, 0x76, 0x0e, 0x7e, 0x7e, 0x6c, 0xae, 0xbb,
	0xf7, 0xed, 0x55, 0xe4, 0x73, 0xc5, 0x8a, 0xbf, 0x9d, 0xdb, 0xdb, 0xd5, 0x6b, 0x6b, 0xa1, 0x6d,
	0xae, 0x70, 0xa4, 0x87, 0xa6, 0x50, 0x8f, 0x2c, 0x3b, 0x5f, 0x09, 0xbd, 0x60, 0xe7, 0x61, 0x65,
	0xdd, 0xaa, 0x6d, 0xb3, 0x3a, 0xff, 0xee, 0xca, 0xe9, 0x82, 0xad, 0xa0, 0x41, 0xad, 0xa0, 0x55,
	0xf7, 0xde, 0x99, 0x04, 0xc9, 0xb2, 0x4a, 0x8f, 0x2c, 0x77, 0x6f, 0xef, 0xed, 0x92, 0xd6, 0xf7,
	0x5d, 0xe2, 0xd6, 0x75, 0xf5, 0x24, 0x7c, 0x01, 0x91, 0xde, 0xf9, 0xd6, 0x69, 0x3e, 0x22, 0x6b,
	0xef, 0xc9, 0xfe, 0x94, 0x35, 0x0e, 0xa7, 0xac, 0x71, 0x3c, 0x65, 0xe4, 0x5d, 0xc1, 0xc8, 0xa7,
	0x82, 0x91, 0x2f, 0x05, 0x23, 0xfb, 0x05, 0x23, 0x87, 0x05, 0x23, 0x3f, 0x0a, 0x46, 0x7e, 0x15,
	0xac, 0x71, 0x5c, 0x30, 0xf2, 0xe1, 0x88, 0x35, 0xf6, 0x8e, 0x18, 0x79, 0xfe, 0x34, 0x46, 0xf1,
	0x32, 0xf6, 0x73, 0x1c, 0x6b, 0x90, 0x32, 0xf0, 0x33, 0xc5, 0x8d, 0x31, 0x42, 0x39, 0xf1, 0x84,
	0xc4, 0x3c, 0x19, 0x82, 0xf4, 0x66, 0x30, 0x17, 0x61, 0x8c, 0x1c, 0xde, 0xe8, 0xd9, 0x7f, 0xf2,
	0x9f, 0x6f, 0x25, 0x5c, 0x30, 0x0f, 0xeb, 0xee, 0xef, 0x00, 0x00, 0x00, 0xff, 0xff, 0x06, 0x2f,
	0xcb, 0x36, 0x7c, 0x04, 0x00, 0x00,
}
