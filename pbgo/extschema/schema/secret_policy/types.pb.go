// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ves.io/schema/secret_policy/types.proto

package secret_policy

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"
import google_protobuf1 "github.com/gogo/protobuf/types"
import google_protobuf2 "github.com/gogo/protobuf/types"
import _ "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
import ves_io_schema_policy "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/policy"
import ves_io_schema4 "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
import _ "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
import _ "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"

import strings "strings"
import reflect "reflect"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// GlobalSpecType
//
// x-displayName: "Specification"
// Shape of secret_policy in the storage backend
type GlobalSpecType struct {
	// algo
	//
	// x-displayName: "Rule Combining Algorithm"
	// This will define the rule combining algorithm. It can take one of the following values -
	//
	// - FIRST_MATCH Rules are evaluated sequentially till a matching rule is identified
	// - ALLOW_OVERRIDES Rules with an ALLOW action are evaluated prior to rules with a DENY action
	// - DENY_OVERRIDES Rules with a DENY action are evaluated prior to rules with an ALLOW action
	Algo ves_io_schema_policy.RuleCombiningAlgorithm `protobuf:"varint,1,opt,name=algo,proto3,enum=ves.io.schema.policy.RuleCombiningAlgorithm" json:"algo,omitempty"`
	// Rules
	//
	// x-displayName: "Secret Policy Rules"
	// A list of references to secret_policy_rule objects.
	// The order of evaluation of the rules depends on the rule combining algorithm.
	Rules []*ves_io_schema4.ObjectRefType `protobuf:"bytes,2,rep,name=rules" json:"rules,omitempty"`
	// Allow Volterra
	//
	// x-displayName: "Allow Volterra"
	// x-example: "true"
	// if allow_volterra is set to true, it allows relevant volterra infrastructure services to decrypt the secret encrypted using this policy.
	AllowVolterra bool `protobuf:"varint,3,opt,name=allow_volterra,json=allowVolterra,proto3" json:"allow_volterra,omitempty"`
	// Decrypt Cache Timeout
	//
	// x-displayName: "Decrypt Cache Timeout"
	// x-example: "6h"
	// decrypt_cache_timeout contains the amount of time a decrypted secret is cached in wingman.
	// Value for this parameter is a string ending in the suffix "s" (indicating seconds), suffix "m" (indicating minutes) or suffix "h" (indicating hours)
	DecryptCacheTimeout *google_protobuf1.Duration `protobuf:"bytes,4,opt,name=decrypt_cache_timeout,json=decryptCacheTimeout" json:"decrypt_cache_timeout,omitempty"`
	// Deleted At
	//
	// x-displayName: "Deleted At"
	// deleted_at is set when the secret policy object is marked for delete, based on this value
	// object marked for delete will be deleted after delete_delay
	DeletedAt *google_protobuf2.Timestamp `protobuf:"bytes,5,opt,name=deleted_at,json=deletedAt" json:"deleted_at,omitempty"`
	// Delete Delay
	//
	// x-displayName: "Delete Delay"
	// deleted_delay is set when the secret policy object is marked for delete, based on this value
	// object marked for delete will be deleted after delete_delay
	DeleteDelay *google_protobuf1.Duration `protobuf:"bytes,6,opt,name=delete_delay,json=deleteDelay" json:"delete_delay,omitempty"`
}

func (m *GlobalSpecType) Reset()                    { *m = GlobalSpecType{} }
func (*GlobalSpecType) ProtoMessage()               {}
func (*GlobalSpecType) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{0} }

func (m *GlobalSpecType) GetAlgo() ves_io_schema_policy.RuleCombiningAlgorithm {
	if m != nil {
		return m.Algo
	}
	return ves_io_schema_policy.FIRST_MATCH
}

func (m *GlobalSpecType) GetRules() []*ves_io_schema4.ObjectRefType {
	if m != nil {
		return m.Rules
	}
	return nil
}

func (m *GlobalSpecType) GetAllowVolterra() bool {
	if m != nil {
		return m.AllowVolterra
	}
	return false
}

func (m *GlobalSpecType) GetDecryptCacheTimeout() *google_protobuf1.Duration {
	if m != nil {
		return m.DecryptCacheTimeout
	}
	return nil
}

func (m *GlobalSpecType) GetDeletedAt() *google_protobuf2.Timestamp {
	if m != nil {
		return m.DeletedAt
	}
	return nil
}

func (m *GlobalSpecType) GetDeleteDelay() *google_protobuf1.Duration {
	if m != nil {
		return m.DeleteDelay
	}
	return nil
}

// Create Secret Policy
//
// x-displayName: "Create Secret Policy"
// Create secret_policy creates a new object in the storage backend for metadata.namespace.
type CreateSpecType struct {
	Algo                ves_io_schema_policy.RuleCombiningAlgorithm `protobuf:"varint,1,opt,name=algo,proto3,enum=ves.io.schema.policy.RuleCombiningAlgorithm" json:"algo,omitempty"`
	Rules               []*ves_io_schema4.ObjectRefType             `protobuf:"bytes,2,rep,name=rules" json:"rules,omitempty"`
	AllowVolterra       bool                                        `protobuf:"varint,3,opt,name=allow_volterra,json=allowVolterra,proto3" json:"allow_volterra,omitempty"`
	DecryptCacheTimeout *google_protobuf1.Duration                  `protobuf:"bytes,4,opt,name=decrypt_cache_timeout,json=decryptCacheTimeout" json:"decrypt_cache_timeout,omitempty"`
}

func (m *CreateSpecType) Reset()                    { *m = CreateSpecType{} }
func (*CreateSpecType) ProtoMessage()               {}
func (*CreateSpecType) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{1} }

func (m *CreateSpecType) GetAlgo() ves_io_schema_policy.RuleCombiningAlgorithm {
	if m != nil {
		return m.Algo
	}
	return ves_io_schema_policy.FIRST_MATCH
}

func (m *CreateSpecType) GetRules() []*ves_io_schema4.ObjectRefType {
	if m != nil {
		return m.Rules
	}
	return nil
}

func (m *CreateSpecType) GetAllowVolterra() bool {
	if m != nil {
		return m.AllowVolterra
	}
	return false
}

func (m *CreateSpecType) GetDecryptCacheTimeout() *google_protobuf1.Duration {
	if m != nil {
		return m.DecryptCacheTimeout
	}
	return nil
}

// Replace Secret Policy
//
// x-displayName: "Replace Secret Policy"
// Replace secret_policy replaces an existing object in the storage backend for metadata.namespace.
type ReplaceSpecType struct {
	Algo                ves_io_schema_policy.RuleCombiningAlgorithm `protobuf:"varint,1,opt,name=algo,proto3,enum=ves.io.schema.policy.RuleCombiningAlgorithm" json:"algo,omitempty"`
	Rules               []*ves_io_schema4.ObjectRefType             `protobuf:"bytes,2,rep,name=rules" json:"rules,omitempty"`
	AllowVolterra       bool                                        `protobuf:"varint,3,opt,name=allow_volterra,json=allowVolterra,proto3" json:"allow_volterra,omitempty"`
	DecryptCacheTimeout *google_protobuf1.Duration                  `protobuf:"bytes,4,opt,name=decrypt_cache_timeout,json=decryptCacheTimeout" json:"decrypt_cache_timeout,omitempty"`
}

func (m *ReplaceSpecType) Reset()                    { *m = ReplaceSpecType{} }
func (*ReplaceSpecType) ProtoMessage()               {}
func (*ReplaceSpecType) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{2} }

func (m *ReplaceSpecType) GetAlgo() ves_io_schema_policy.RuleCombiningAlgorithm {
	if m != nil {
		return m.Algo
	}
	return ves_io_schema_policy.FIRST_MATCH
}

func (m *ReplaceSpecType) GetRules() []*ves_io_schema4.ObjectRefType {
	if m != nil {
		return m.Rules
	}
	return nil
}

func (m *ReplaceSpecType) GetAllowVolterra() bool {
	if m != nil {
		return m.AllowVolterra
	}
	return false
}

func (m *ReplaceSpecType) GetDecryptCacheTimeout() *google_protobuf1.Duration {
	if m != nil {
		return m.DecryptCacheTimeout
	}
	return nil
}

// Get Secret Policy
//
// x-displayName: "Get Secret Policy"
// Get secret_policy reads a given object from storage backend for metadata.namespace.
type GetSpecType struct {
	Algo                ves_io_schema_policy.RuleCombiningAlgorithm `protobuf:"varint,1,opt,name=algo,proto3,enum=ves.io.schema.policy.RuleCombiningAlgorithm" json:"algo,omitempty"`
	Rules               []*ves_io_schema4.ObjectRefType             `protobuf:"bytes,2,rep,name=rules" json:"rules,omitempty"`
	AllowVolterra       bool                                        `protobuf:"varint,3,opt,name=allow_volterra,json=allowVolterra,proto3" json:"allow_volterra,omitempty"`
	DecryptCacheTimeout *google_protobuf1.Duration                  `protobuf:"bytes,4,opt,name=decrypt_cache_timeout,json=decryptCacheTimeout" json:"decrypt_cache_timeout,omitempty"`
	MarkedForDelete     bool                                        `protobuf:"varint,5,opt,name=marked_for_delete,json=markedForDelete,proto3" json:"marked_for_delete,omitempty"`
	DeletionTime        *google_protobuf2.Timestamp                 `protobuf:"bytes,6,opt,name=deletion_time,json=deletionTime" json:"deletion_time,omitempty"`
}

func (m *GetSpecType) Reset()                    { *m = GetSpecType{} }
func (*GetSpecType) ProtoMessage()               {}
func (*GetSpecType) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{3} }

func (m *GetSpecType) GetAlgo() ves_io_schema_policy.RuleCombiningAlgorithm {
	if m != nil {
		return m.Algo
	}
	return ves_io_schema_policy.FIRST_MATCH
}

func (m *GetSpecType) GetRules() []*ves_io_schema4.ObjectRefType {
	if m != nil {
		return m.Rules
	}
	return nil
}

func (m *GetSpecType) GetAllowVolterra() bool {
	if m != nil {
		return m.AllowVolterra
	}
	return false
}

func (m *GetSpecType) GetDecryptCacheTimeout() *google_protobuf1.Duration {
	if m != nil {
		return m.DecryptCacheTimeout
	}
	return nil
}

func (m *GetSpecType) GetMarkedForDelete() bool {
	if m != nil {
		return m.MarkedForDelete
	}
	return false
}

func (m *GetSpecType) GetDeletionTime() *google_protobuf2.Timestamp {
	if m != nil {
		return m.DeletionTime
	}
	return nil
}

func init() {
	proto.RegisterType((*GlobalSpecType)(nil), "ves.io.schema.secret_policy.GlobalSpecType")
	proto.RegisterType((*CreateSpecType)(nil), "ves.io.schema.secret_policy.CreateSpecType")
	proto.RegisterType((*ReplaceSpecType)(nil), "ves.io.schema.secret_policy.ReplaceSpecType")
	proto.RegisterType((*GetSpecType)(nil), "ves.io.schema.secret_policy.GetSpecType")
}
func (this *GlobalSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType)
	if !ok {
		that2, ok := that.(GlobalSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Algo != that1.Algo {
		return false
	}
	if len(this.Rules) != len(that1.Rules) {
		return false
	}
	for i := range this.Rules {
		if !this.Rules[i].Equal(that1.Rules[i]) {
			return false
		}
	}
	if this.AllowVolterra != that1.AllowVolterra {
		return false
	}
	if !this.DecryptCacheTimeout.Equal(that1.DecryptCacheTimeout) {
		return false
	}
	if !this.DeletedAt.Equal(that1.DeletedAt) {
		return false
	}
	if !this.DeleteDelay.Equal(that1.DeleteDelay) {
		return false
	}
	return true
}
func (this *CreateSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType)
	if !ok {
		that2, ok := that.(CreateSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Algo != that1.Algo {
		return false
	}
	if len(this.Rules) != len(that1.Rules) {
		return false
	}
	for i := range this.Rules {
		if !this.Rules[i].Equal(that1.Rules[i]) {
			return false
		}
	}
	if this.AllowVolterra != that1.AllowVolterra {
		return false
	}
	if !this.DecryptCacheTimeout.Equal(that1.DecryptCacheTimeout) {
		return false
	}
	return true
}
func (this *ReplaceSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType)
	if !ok {
		that2, ok := that.(ReplaceSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Algo != that1.Algo {
		return false
	}
	if len(this.Rules) != len(that1.Rules) {
		return false
	}
	for i := range this.Rules {
		if !this.Rules[i].Equal(that1.Rules[i]) {
			return false
		}
	}
	if this.AllowVolterra != that1.AllowVolterra {
		return false
	}
	if !this.DecryptCacheTimeout.Equal(that1.DecryptCacheTimeout) {
		return false
	}
	return true
}
func (this *GetSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType)
	if !ok {
		that2, ok := that.(GetSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Algo != that1.Algo {
		return false
	}
	if len(this.Rules) != len(that1.Rules) {
		return false
	}
	for i := range this.Rules {
		if !this.Rules[i].Equal(that1.Rules[i]) {
			return false
		}
	}
	if this.AllowVolterra != that1.AllowVolterra {
		return false
	}
	if !this.DecryptCacheTimeout.Equal(that1.DecryptCacheTimeout) {
		return false
	}
	if this.MarkedForDelete != that1.MarkedForDelete {
		return false
	}
	if !this.DeletionTime.Equal(that1.DeletionTime) {
		return false
	}
	return true
}
func (this *GlobalSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&secret_policy.GlobalSpecType{")
	s = append(s, "Algo: "+fmt.Sprintf("%#v", this.Algo)+",\n")
	if this.Rules != nil {
		s = append(s, "Rules: "+fmt.Sprintf("%#v", this.Rules)+",\n")
	}
	s = append(s, "AllowVolterra: "+fmt.Sprintf("%#v", this.AllowVolterra)+",\n")
	if this.DecryptCacheTimeout != nil {
		s = append(s, "DecryptCacheTimeout: "+fmt.Sprintf("%#v", this.DecryptCacheTimeout)+",\n")
	}
	if this.DeletedAt != nil {
		s = append(s, "DeletedAt: "+fmt.Sprintf("%#v", this.DeletedAt)+",\n")
	}
	if this.DeleteDelay != nil {
		s = append(s, "DeleteDelay: "+fmt.Sprintf("%#v", this.DeleteDelay)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CreateSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&secret_policy.CreateSpecType{")
	s = append(s, "Algo: "+fmt.Sprintf("%#v", this.Algo)+",\n")
	if this.Rules != nil {
		s = append(s, "Rules: "+fmt.Sprintf("%#v", this.Rules)+",\n")
	}
	s = append(s, "AllowVolterra: "+fmt.Sprintf("%#v", this.AllowVolterra)+",\n")
	if this.DecryptCacheTimeout != nil {
		s = append(s, "DecryptCacheTimeout: "+fmt.Sprintf("%#v", this.DecryptCacheTimeout)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ReplaceSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&secret_policy.ReplaceSpecType{")
	s = append(s, "Algo: "+fmt.Sprintf("%#v", this.Algo)+",\n")
	if this.Rules != nil {
		s = append(s, "Rules: "+fmt.Sprintf("%#v", this.Rules)+",\n")
	}
	s = append(s, "AllowVolterra: "+fmt.Sprintf("%#v", this.AllowVolterra)+",\n")
	if this.DecryptCacheTimeout != nil {
		s = append(s, "DecryptCacheTimeout: "+fmt.Sprintf("%#v", this.DecryptCacheTimeout)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&secret_policy.GetSpecType{")
	s = append(s, "Algo: "+fmt.Sprintf("%#v", this.Algo)+",\n")
	if this.Rules != nil {
		s = append(s, "Rules: "+fmt.Sprintf("%#v", this.Rules)+",\n")
	}
	s = append(s, "AllowVolterra: "+fmt.Sprintf("%#v", this.AllowVolterra)+",\n")
	if this.DecryptCacheTimeout != nil {
		s = append(s, "DecryptCacheTimeout: "+fmt.Sprintf("%#v", this.DecryptCacheTimeout)+",\n")
	}
	s = append(s, "MarkedForDelete: "+fmt.Sprintf("%#v", this.MarkedForDelete)+",\n")
	if this.DeletionTime != nil {
		s = append(s, "DeletionTime: "+fmt.Sprintf("%#v", this.DeletionTime)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringTypes(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *GlobalSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GlobalSpecType) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Algo != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.Algo))
	}
	if len(m.Rules) > 0 {
		for _, msg := range m.Rules {
			dAtA[i] = 0x12
			i++
			i = encodeVarintTypes(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.AllowVolterra {
		dAtA[i] = 0x18
		i++
		if m.AllowVolterra {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.DecryptCacheTimeout != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.DecryptCacheTimeout.Size()))
		n1, err := m.DecryptCacheTimeout.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.DeletedAt != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.DeletedAt.Size()))
		n2, err := m.DeletedAt.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if m.DeleteDelay != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.DeleteDelay.Size()))
		n3, err := m.DeleteDelay.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	return i, nil
}

func (m *CreateSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateSpecType) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Algo != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.Algo))
	}
	if len(m.Rules) > 0 {
		for _, msg := range m.Rules {
			dAtA[i] = 0x12
			i++
			i = encodeVarintTypes(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.AllowVolterra {
		dAtA[i] = 0x18
		i++
		if m.AllowVolterra {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.DecryptCacheTimeout != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.DecryptCacheTimeout.Size()))
		n4, err := m.DecryptCacheTimeout.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	return i, nil
}

func (m *ReplaceSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplaceSpecType) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Algo != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.Algo))
	}
	if len(m.Rules) > 0 {
		for _, msg := range m.Rules {
			dAtA[i] = 0x12
			i++
			i = encodeVarintTypes(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.AllowVolterra {
		dAtA[i] = 0x18
		i++
		if m.AllowVolterra {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.DecryptCacheTimeout != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.DecryptCacheTimeout.Size()))
		n5, err := m.DecryptCacheTimeout.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	return i, nil
}

func (m *GetSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetSpecType) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Algo != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.Algo))
	}
	if len(m.Rules) > 0 {
		for _, msg := range m.Rules {
			dAtA[i] = 0x12
			i++
			i = encodeVarintTypes(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.AllowVolterra {
		dAtA[i] = 0x18
		i++
		if m.AllowVolterra {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.DecryptCacheTimeout != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.DecryptCacheTimeout.Size()))
		n6, err := m.DecryptCacheTimeout.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	if m.MarkedForDelete {
		dAtA[i] = 0x28
		i++
		if m.MarkedForDelete {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.DeletionTime != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.DeletionTime.Size()))
		n7, err := m.DeletionTime.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	return i, nil
}

func encodeVarintTypes(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *GlobalSpecType) Size() (n int) {
	var l int
	_ = l
	if m.Algo != 0 {
		n += 1 + sovTypes(uint64(m.Algo))
	}
	if len(m.Rules) > 0 {
		for _, e := range m.Rules {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if m.AllowVolterra {
		n += 2
	}
	if m.DecryptCacheTimeout != nil {
		l = m.DecryptCacheTimeout.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.DeletedAt != nil {
		l = m.DeletedAt.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.DeleteDelay != nil {
		l = m.DeleteDelay.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *CreateSpecType) Size() (n int) {
	var l int
	_ = l
	if m.Algo != 0 {
		n += 1 + sovTypes(uint64(m.Algo))
	}
	if len(m.Rules) > 0 {
		for _, e := range m.Rules {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if m.AllowVolterra {
		n += 2
	}
	if m.DecryptCacheTimeout != nil {
		l = m.DecryptCacheTimeout.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *ReplaceSpecType) Size() (n int) {
	var l int
	_ = l
	if m.Algo != 0 {
		n += 1 + sovTypes(uint64(m.Algo))
	}
	if len(m.Rules) > 0 {
		for _, e := range m.Rules {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if m.AllowVolterra {
		n += 2
	}
	if m.DecryptCacheTimeout != nil {
		l = m.DecryptCacheTimeout.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *GetSpecType) Size() (n int) {
	var l int
	_ = l
	if m.Algo != 0 {
		n += 1 + sovTypes(uint64(m.Algo))
	}
	if len(m.Rules) > 0 {
		for _, e := range m.Rules {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if m.AllowVolterra {
		n += 2
	}
	if m.DecryptCacheTimeout != nil {
		l = m.DecryptCacheTimeout.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.MarkedForDelete {
		n += 2
	}
	if m.DeletionTime != nil {
		l = m.DeletionTime.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func sovTypes(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozTypes(x uint64) (n int) {
	return sovTypes(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *GlobalSpecType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType{`,
		`Algo:` + fmt.Sprintf("%v", this.Algo) + `,`,
		`Rules:` + strings.Replace(fmt.Sprintf("%v", this.Rules), "ObjectRefType", "ves_io_schema4.ObjectRefType", 1) + `,`,
		`AllowVolterra:` + fmt.Sprintf("%v", this.AllowVolterra) + `,`,
		`DecryptCacheTimeout:` + strings.Replace(fmt.Sprintf("%v", this.DecryptCacheTimeout), "Duration", "google_protobuf1.Duration", 1) + `,`,
		`DeletedAt:` + strings.Replace(fmt.Sprintf("%v", this.DeletedAt), "Timestamp", "google_protobuf2.Timestamp", 1) + `,`,
		`DeleteDelay:` + strings.Replace(fmt.Sprintf("%v", this.DeleteDelay), "Duration", "google_protobuf1.Duration", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType{`,
		`Algo:` + fmt.Sprintf("%v", this.Algo) + `,`,
		`Rules:` + strings.Replace(fmt.Sprintf("%v", this.Rules), "ObjectRefType", "ves_io_schema4.ObjectRefType", 1) + `,`,
		`AllowVolterra:` + fmt.Sprintf("%v", this.AllowVolterra) + `,`,
		`DecryptCacheTimeout:` + strings.Replace(fmt.Sprintf("%v", this.DecryptCacheTimeout), "Duration", "google_protobuf1.Duration", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType{`,
		`Algo:` + fmt.Sprintf("%v", this.Algo) + `,`,
		`Rules:` + strings.Replace(fmt.Sprintf("%v", this.Rules), "ObjectRefType", "ves_io_schema4.ObjectRefType", 1) + `,`,
		`AllowVolterra:` + fmt.Sprintf("%v", this.AllowVolterra) + `,`,
		`DecryptCacheTimeout:` + strings.Replace(fmt.Sprintf("%v", this.DecryptCacheTimeout), "Duration", "google_protobuf1.Duration", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType{`,
		`Algo:` + fmt.Sprintf("%v", this.Algo) + `,`,
		`Rules:` + strings.Replace(fmt.Sprintf("%v", this.Rules), "ObjectRefType", "ves_io_schema4.ObjectRefType", 1) + `,`,
		`AllowVolterra:` + fmt.Sprintf("%v", this.AllowVolterra) + `,`,
		`DecryptCacheTimeout:` + strings.Replace(fmt.Sprintf("%v", this.DecryptCacheTimeout), "Duration", "google_protobuf1.Duration", 1) + `,`,
		`MarkedForDelete:` + fmt.Sprintf("%v", this.MarkedForDelete) + `,`,
		`DeletionTime:` + strings.Replace(fmt.Sprintf("%v", this.DeletionTime), "Timestamp", "google_protobuf2.Timestamp", 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringTypes(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *GlobalSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GlobalSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GlobalSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Algo", wireType)
			}
			m.Algo = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Algo |= (ves_io_schema_policy.RuleCombiningAlgorithm(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rules", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Rules = append(m.Rules, &ves_io_schema4.ObjectRefType{})
			if err := m.Rules[len(m.Rules)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllowVolterra", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AllowVolterra = bool(v != 0)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DecryptCacheTimeout", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DecryptCacheTimeout == nil {
				m.DecryptCacheTimeout = &google_protobuf1.Duration{}
			}
			if err := m.DecryptCacheTimeout.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeletedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DeletedAt == nil {
				m.DeletedAt = &google_protobuf2.Timestamp{}
			}
			if err := m.DeletedAt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeleteDelay", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DeleteDelay == nil {
				m.DeleteDelay = &google_protobuf1.Duration{}
			}
			if err := m.DeleteDelay.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Algo", wireType)
			}
			m.Algo = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Algo |= (ves_io_schema_policy.RuleCombiningAlgorithm(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rules", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Rules = append(m.Rules, &ves_io_schema4.ObjectRefType{})
			if err := m.Rules[len(m.Rules)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllowVolterra", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AllowVolterra = bool(v != 0)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DecryptCacheTimeout", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DecryptCacheTimeout == nil {
				m.DecryptCacheTimeout = &google_protobuf1.Duration{}
			}
			if err := m.DecryptCacheTimeout.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplaceSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplaceSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplaceSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Algo", wireType)
			}
			m.Algo = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Algo |= (ves_io_schema_policy.RuleCombiningAlgorithm(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rules", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Rules = append(m.Rules, &ves_io_schema4.ObjectRefType{})
			if err := m.Rules[len(m.Rules)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllowVolterra", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AllowVolterra = bool(v != 0)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DecryptCacheTimeout", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DecryptCacheTimeout == nil {
				m.DecryptCacheTimeout = &google_protobuf1.Duration{}
			}
			if err := m.DecryptCacheTimeout.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Algo", wireType)
			}
			m.Algo = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Algo |= (ves_io_schema_policy.RuleCombiningAlgorithm(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rules", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Rules = append(m.Rules, &ves_io_schema4.ObjectRefType{})
			if err := m.Rules[len(m.Rules)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllowVolterra", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AllowVolterra = bool(v != 0)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DecryptCacheTimeout", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DecryptCacheTimeout == nil {
				m.DecryptCacheTimeout = &google_protobuf1.Duration{}
			}
			if err := m.DecryptCacheTimeout.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MarkedForDelete", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.MarkedForDelete = bool(v != 0)
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeletionTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DeletionTime == nil {
				m.DeletionTime = &google_protobuf2.Timestamp{}
			}
			if err := m.DeletionTime.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTypes(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthTypes
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipTypes(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthTypes = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTypes   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("ves.io/schema/secret_policy/types.proto", fileDescriptorTypes) }

var fileDescriptorTypes = []byte{
	// 658 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x55, 0x3f, 0x6f, 0xd3, 0x4c,
	0x18, 0xcf, 0x25, 0x6d, 0xdf, 0xbe, 0x97, 0x36, 0xa5, 0x46, 0xa0, 0x34, 0xad, 0x4c, 0x54, 0x09,
	0x11, 0x21, 0x6a, 0x4b, 0x65, 0x63, 0x00, 0x9a, 0x94, 0x16, 0x86, 0x0a, 0xe1, 0x46, 0x08, 0xb1,
	0x58, 0x17, 0xfb, 0x89, 0x63, 0x7a, 0xce, 0x59, 0xe7, 0x73, 0x4a, 0x86, 0x4a, 0x95, 0xf8, 0x02,
	0x88, 0x95, 0x2f, 0x80, 0xd8, 0x60, 0xa4, 0x0b, 0x6c, 0x88, 0xa9, 0x63, 0xc4, 0x44, 0xcd, 0x52,
	0xb6, 0x7e, 0x04, 0xe4, 0xb3, 0x43, 0x71, 0x1b, 0x01, 0x62, 0x44, 0xdd, 0x7c, 0xcf, 0xef, 0x8f,
	0x1f, 0x3f, 0x3f, 0xdf, 0x1d, 0xbe, 0xd2, 0x83, 0x40, 0x73, 0x99, 0x1e, 0x58, 0x1d, 0xf0, 0x88,
	0x1e, 0x80, 0xc5, 0x41, 0x98, 0x3e, 0xa3, 0xae, 0xd5, 0xd7, 0x45, 0xdf, 0x87, 0x40, 0xf3, 0x39,
	0x13, 0x4c, 0x99, 0x4f, 0x88, 0x5a, 0x42, 0xd4, 0x32, 0xc4, 0xca, 0x92, 0xe3, 0x8a, 0x4e, 0xd8,
	0xd2, 0x2c, 0xe6, 0xe9, 0x0e, 0x73, 0x98, 0x2e, 0x35, 0xad, 0xb0, 0x2d, 0x57, 0x72, 0x21, 0x9f,
	0x12, 0xaf, 0x8a, 0xea, 0x30, 0xe6, 0x50, 0x38, 0x66, 0xd9, 0x21, 0x27, 0xc2, 0x65, 0xdd, 0x14,
	0xbf, 0x74, 0x12, 0x17, 0xae, 0x07, 0x81, 0x20, 0x9e, 0x9f, 0x12, 0xe6, 0xb3, 0x5d, 0x33, 0x3f,
	0x16, 0xa7, 0x9d, 0x56, 0xaa, 0x59, 0xf0, 0xf4, 0xb7, 0x54, 0xe6, 0xb2, 0x8c, 0x9f, 0xa1, 0x85,
	0x2c, 0xd4, 0x23, 0xd4, 0xb5, 0x89, 0x80, 0xd1, 0xd6, 0x3d, 0x17, 0xb6, 0xcd, 0xcc, 0xcb, 0x17,
	0x3f, 0x14, 0x70, 0x69, 0x9d, 0xb2, 0x16, 0xa1, 0x9b, 0x3e, 0x58, 0xcd, 0xbe, 0x0f, 0xca, 0x23,
	0x3c, 0x46, 0xa8, 0xc3, 0xca, 0xa8, 0x8a, 0x6a, 0xa5, 0xe5, 0x6b, 0x5a, 0x76, 0x90, 0x49, 0x7b,
	0x9a, 0x11, 0x52, 0x68, 0x30, 0xaf, 0xe5, 0x76, 0xdd, 0xae, 0xb3, 0x42, 0x1d, 0xc6, 0x5d, 0xd1,
	0xf1, 0xea, 0x17, 0x07, 0x3b, 0xe8, 0xf3, 0x1e, 0x2a, 0xae, 0xdd, 0x33, 0x36, 0x9b, 0xe6, 0xc6,
	0x4a, 0xb3, 0x71, 0xf7, 0x70, 0x0f, 0x21, 0x43, 0x3a, 0x2a, 0x4d, 0x3c, 0xce, 0x43, 0x0a, 0x41,
	0x39, 0x5f, 0x2d, 0xd4, 0x8a, 0xcb, 0x0b, 0x27, 0xac, 0xef, 0xb7, 0x9e, 0x80, 0x25, 0x0c, 0x68,
	0xc7, 0x6d, 0xd4, 0xab, 0xaf, 0x77, 0x94, 0x4c, 0x6a, 0x66, 0xac, 0x7d, 0xf7, 0xed, 0x7d, 0x61,
	0xe2, 0x05, 0x2a, 0x9c, 0xdb, 0xcd, 0x1b, 0x89, 0x99, 0x72, 0x19, 0x97, 0x08, 0xa5, 0x6c, 0xdb,
	0xec, 0x31, 0x2a, 0x80, 0x73, 0x52, 0x2e, 0x54, 0x51, 0x6d, 0xd2, 0x98, 0x96, 0xd5, 0x87, 0x69,
	0x51, 0xd9, 0xc0, 0x17, 0x6c, 0xb0, 0x78, 0xdf, 0x17, 0xa6, 0x45, 0xac, 0x0e, 0x98, 0x71, 0x48,
	0x2c, 0x14, 0xe5, 0xb1, 0x2a, 0xaa, 0x15, 0x97, 0xe7, 0xb4, 0x24, 0x44, 0x6d, 0x18, 0xa2, 0xb6,
	0x9a, 0x86, 0x6c, 0x9c, 0x4f, 0x75, 0x8d, 0x58, 0xd6, 0x4c, 0x54, 0x4a, 0x1d, 0x63, 0x1b, 0x28,
	0x08, 0xb0, 0x4d, 0x22, 0xca, 0xe3, 0xd2, 0xa3, 0x72, 0xca, 0xa3, 0x39, 0xfc, 0x11, 0xea, 0xff,
	0x0d, 0x76, 0x90, 0x1c, 0xc5, 0xff, 0xa9, 0x6c, 0x45, 0x28, 0x77, 0xf0, 0x54, 0xb2, 0x30, 0x6d,
	0xa0, 0xa4, 0x5f, 0x9e, 0xf8, 0x4d, 0x27, 0xc7, 0x26, 0xc5, 0x44, 0xb7, 0x1a, 0xcb, 0x16, 0xdf,
	0xe4, 0x71, 0xa9, 0xc1, 0x81, 0x08, 0xf8, 0x91, 0xe1, 0xed, 0xbf, 0xcf, 0xf0, 0xdf, 0xcb, 0xea,
	0xc6, 0xec, 0xa7, 0x9b, 0x27, 0x7e, 0xf2, 0xc5, 0xb7, 0x79, 0x3c, 0x63, 0x80, 0x4f, 0x89, 0x75,
	0x36, 0xb4, 0x3f, 0x1e, 0xda, 0xcb, 0x02, 0x2e, 0xae, 0x83, 0x38, 0x1b, 0xd8, 0xc8, 0x13, 0xe1,
	0x2a, 0x9e, 0xf5, 0x08, 0xdf, 0x02, 0xdb, 0x6c, 0x33, 0x6e, 0x26, 0x1b, 0x54, 0x1e, 0x0c, 0x93,
	0xc6, 0x4c, 0x02, 0xac, 0x31, 0xbe, 0x2a, 0xcb, 0xca, 0x2d, 0x3c, 0x2d, 0x09, 0x2e, 0xeb, 0xca,
	0xb7, 0xa6, 0x5b, 0xff, 0x17, 0x07, 0x88, 0x31, 0x35, 0x14, 0xc4, 0xa5, 0x11, 0xe9, 0xd4, 0x9f,
	0xa1, 0xfd, 0x03, 0x35, 0x37, 0x38, 0x50, 0x73, 0x47, 0x07, 0x2a, 0xda, 0x8d, 0x54, 0xf4, 0x2a,
	0x52, 0xd1, 0xc7, 0x48, 0x45, 0xfb, 0x91, 0x8a, 0x06, 0x91, 0x8a, 0xbe, 0x44, 0x2a, 0x3a, 0x8c,
	0xd4, 0xdc, 0x51, 0xa4, 0xa2, 0xe7, 0x5f, 0xd5, 0xdc, 0xe3, 0x07, 0x0e, 0xf3, 0xb7, 0x1c, 0x6d,
	0x38, 0x26, 0x2d, 0x0c, 0x74, 0xf9, 0xd0, 0x66, 0xdc, 0x5b, 0xf2, 0x39, 0xeb, 0xb9, 0x36, 0xf0,
	0xa5, 0x21, 0xac, 0xfb, 0x2d, 0x87, 0xe9, 0xf0, 0x54, 0x0c, 0x2f, 0xdf, 0x11, 0x77, 0x70, 0x6b,
	0x42, 0xb6, 0x7e, 0xfd, 0x7b, 0x00, 0x00, 0x00, 0xff, 0xff, 0x0a, 0xb8, 0xd0, 0x08, 0xa9, 0x07,
	0x00, 0x00,
}
