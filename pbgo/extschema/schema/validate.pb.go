// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ves.io/schema/validate.proto

package schema

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/protoc-gen-go/descriptor"
import google_protobuf2 "github.com/gogo/protobuf/types"
import google_protobuf3 "github.com/gogo/protobuf/types"

import bytes "bytes"

import strings "strings"
import reflect "reflect"

import binary "encoding/binary"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Title
//
// x-displayName "displayname"
// FieldRules encapsulates the rules for each type of field. Depending on the
// field, the correct set should be used to ensure proper validations.
type FieldRules struct {
	// Title
	//
	// x-displayName "displayname"
	// Only added so codegeneration does not break
	//
	// Types that are valid to be assigned to Type:
	//	*FieldRules_Float
	//	*FieldRules_Double
	//	*FieldRules_Int32
	//	*FieldRules_Int64
	//	*FieldRules_Uint32
	//	*FieldRules_Uint64
	//	*FieldRules_Sint32
	//	*FieldRules_Sint64
	//	*FieldRules_Fixed32
	//	*FieldRules_Fixed64
	//	*FieldRules_Sfixed32
	//	*FieldRules_Sfixed64
	//	*FieldRules_Bool
	//	*FieldRules_String_
	//	*FieldRules_Bytes
	//	*FieldRules_Enum
	//	*FieldRules_Message
	//	*FieldRules_Repeated
	//	*FieldRules_Map
	//	*FieldRules_Any
	//	*FieldRules_Duration
	//	*FieldRules_Timestamp
	Type isFieldRules_Type `protobuf_oneof:"type"`
}

func (m *FieldRules) Reset()                    { *m = FieldRules{} }
func (*FieldRules) ProtoMessage()               {}
func (*FieldRules) Descriptor() ([]byte, []int) { return fileDescriptorValidate, []int{0} }

type isFieldRules_Type interface {
	isFieldRules_Type()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type FieldRules_Float struct {
	Float *FloatRules `protobuf:"bytes,1,opt,name=float,oneof"`
}
type FieldRules_Double struct {
	Double *DoubleRules `protobuf:"bytes,2,opt,name=double,oneof"`
}
type FieldRules_Int32 struct {
	Int32 *Int32Rules `protobuf:"bytes,3,opt,name=int32,oneof"`
}
type FieldRules_Int64 struct {
	Int64 *Int64Rules `protobuf:"bytes,4,opt,name=int64,oneof"`
}
type FieldRules_Uint32 struct {
	Uint32 *UInt32Rules `protobuf:"bytes,5,opt,name=uint32,oneof"`
}
type FieldRules_Uint64 struct {
	Uint64 *UInt64Rules `protobuf:"bytes,6,opt,name=uint64,oneof"`
}
type FieldRules_Sint32 struct {
	Sint32 *SInt32Rules `protobuf:"bytes,7,opt,name=sint32,oneof"`
}
type FieldRules_Sint64 struct {
	Sint64 *SInt64Rules `protobuf:"bytes,8,opt,name=sint64,oneof"`
}
type FieldRules_Fixed32 struct {
	Fixed32 *Fixed32Rules `protobuf:"bytes,9,opt,name=fixed32,oneof"`
}
type FieldRules_Fixed64 struct {
	Fixed64 *Fixed64Rules `protobuf:"bytes,10,opt,name=fixed64,oneof"`
}
type FieldRules_Sfixed32 struct {
	Sfixed32 *SFixed32Rules `protobuf:"bytes,11,opt,name=sfixed32,oneof"`
}
type FieldRules_Sfixed64 struct {
	Sfixed64 *SFixed64Rules `protobuf:"bytes,12,opt,name=sfixed64,oneof"`
}
type FieldRules_Bool struct {
	Bool *BoolRules `protobuf:"bytes,13,opt,name=bool,oneof"`
}
type FieldRules_String_ struct {
	String_ *StringRules `protobuf:"bytes,14,opt,name=string,oneof"`
}
type FieldRules_Bytes struct {
	Bytes *BytesRules `protobuf:"bytes,15,opt,name=bytes,oneof"`
}
type FieldRules_Enum struct {
	Enum *EnumRules `protobuf:"bytes,16,opt,name=enum,oneof"`
}
type FieldRules_Message struct {
	Message *MessageRules `protobuf:"bytes,17,opt,name=message,oneof"`
}
type FieldRules_Repeated struct {
	Repeated *RepeatedRules `protobuf:"bytes,18,opt,name=repeated,oneof"`
}
type FieldRules_Map struct {
	Map *MapRules `protobuf:"bytes,19,opt,name=map,oneof"`
}
type FieldRules_Any struct {
	Any *AnyRules `protobuf:"bytes,20,opt,name=any,oneof"`
}
type FieldRules_Duration struct {
	Duration *DurationRules `protobuf:"bytes,21,opt,name=duration,oneof"`
}
type FieldRules_Timestamp struct {
	Timestamp *TimestampRules `protobuf:"bytes,22,opt,name=timestamp,oneof"`
}

func (*FieldRules_Float) isFieldRules_Type()     {}
func (*FieldRules_Double) isFieldRules_Type()    {}
func (*FieldRules_Int32) isFieldRules_Type()     {}
func (*FieldRules_Int64) isFieldRules_Type()     {}
func (*FieldRules_Uint32) isFieldRules_Type()    {}
func (*FieldRules_Uint64) isFieldRules_Type()    {}
func (*FieldRules_Sint32) isFieldRules_Type()    {}
func (*FieldRules_Sint64) isFieldRules_Type()    {}
func (*FieldRules_Fixed32) isFieldRules_Type()   {}
func (*FieldRules_Fixed64) isFieldRules_Type()   {}
func (*FieldRules_Sfixed32) isFieldRules_Type()  {}
func (*FieldRules_Sfixed64) isFieldRules_Type()  {}
func (*FieldRules_Bool) isFieldRules_Type()      {}
func (*FieldRules_String_) isFieldRules_Type()   {}
func (*FieldRules_Bytes) isFieldRules_Type()     {}
func (*FieldRules_Enum) isFieldRules_Type()      {}
func (*FieldRules_Message) isFieldRules_Type()   {}
func (*FieldRules_Repeated) isFieldRules_Type()  {}
func (*FieldRules_Map) isFieldRules_Type()       {}
func (*FieldRules_Any) isFieldRules_Type()       {}
func (*FieldRules_Duration) isFieldRules_Type()  {}
func (*FieldRules_Timestamp) isFieldRules_Type() {}

func (m *FieldRules) GetType() isFieldRules_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (m *FieldRules) GetFloat() *FloatRules {
	if x, ok := m.GetType().(*FieldRules_Float); ok {
		return x.Float
	}
	return nil
}

func (m *FieldRules) GetDouble() *DoubleRules {
	if x, ok := m.GetType().(*FieldRules_Double); ok {
		return x.Double
	}
	return nil
}

func (m *FieldRules) GetInt32() *Int32Rules {
	if x, ok := m.GetType().(*FieldRules_Int32); ok {
		return x.Int32
	}
	return nil
}

func (m *FieldRules) GetInt64() *Int64Rules {
	if x, ok := m.GetType().(*FieldRules_Int64); ok {
		return x.Int64
	}
	return nil
}

func (m *FieldRules) GetUint32() *UInt32Rules {
	if x, ok := m.GetType().(*FieldRules_Uint32); ok {
		return x.Uint32
	}
	return nil
}

func (m *FieldRules) GetUint64() *UInt64Rules {
	if x, ok := m.GetType().(*FieldRules_Uint64); ok {
		return x.Uint64
	}
	return nil
}

func (m *FieldRules) GetSint32() *SInt32Rules {
	if x, ok := m.GetType().(*FieldRules_Sint32); ok {
		return x.Sint32
	}
	return nil
}

func (m *FieldRules) GetSint64() *SInt64Rules {
	if x, ok := m.GetType().(*FieldRules_Sint64); ok {
		return x.Sint64
	}
	return nil
}

func (m *FieldRules) GetFixed32() *Fixed32Rules {
	if x, ok := m.GetType().(*FieldRules_Fixed32); ok {
		return x.Fixed32
	}
	return nil
}

func (m *FieldRules) GetFixed64() *Fixed64Rules {
	if x, ok := m.GetType().(*FieldRules_Fixed64); ok {
		return x.Fixed64
	}
	return nil
}

func (m *FieldRules) GetSfixed32() *SFixed32Rules {
	if x, ok := m.GetType().(*FieldRules_Sfixed32); ok {
		return x.Sfixed32
	}
	return nil
}

func (m *FieldRules) GetSfixed64() *SFixed64Rules {
	if x, ok := m.GetType().(*FieldRules_Sfixed64); ok {
		return x.Sfixed64
	}
	return nil
}

func (m *FieldRules) GetBool() *BoolRules {
	if x, ok := m.GetType().(*FieldRules_Bool); ok {
		return x.Bool
	}
	return nil
}

func (m *FieldRules) GetString_() *StringRules {
	if x, ok := m.GetType().(*FieldRules_String_); ok {
		return x.String_
	}
	return nil
}

func (m *FieldRules) GetBytes() *BytesRules {
	if x, ok := m.GetType().(*FieldRules_Bytes); ok {
		return x.Bytes
	}
	return nil
}

func (m *FieldRules) GetEnum() *EnumRules {
	if x, ok := m.GetType().(*FieldRules_Enum); ok {
		return x.Enum
	}
	return nil
}

func (m *FieldRules) GetMessage() *MessageRules {
	if x, ok := m.GetType().(*FieldRules_Message); ok {
		return x.Message
	}
	return nil
}

func (m *FieldRules) GetRepeated() *RepeatedRules {
	if x, ok := m.GetType().(*FieldRules_Repeated); ok {
		return x.Repeated
	}
	return nil
}

func (m *FieldRules) GetMap() *MapRules {
	if x, ok := m.GetType().(*FieldRules_Map); ok {
		return x.Map
	}
	return nil
}

func (m *FieldRules) GetAny() *AnyRules {
	if x, ok := m.GetType().(*FieldRules_Any); ok {
		return x.Any
	}
	return nil
}

func (m *FieldRules) GetDuration() *DurationRules {
	if x, ok := m.GetType().(*FieldRules_Duration); ok {
		return x.Duration
	}
	return nil
}

func (m *FieldRules) GetTimestamp() *TimestampRules {
	if x, ok := m.GetType().(*FieldRules_Timestamp); ok {
		return x.Timestamp
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*FieldRules) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _FieldRules_OneofMarshaler, _FieldRules_OneofUnmarshaler, _FieldRules_OneofSizer, []interface{}{
		(*FieldRules_Float)(nil),
		(*FieldRules_Double)(nil),
		(*FieldRules_Int32)(nil),
		(*FieldRules_Int64)(nil),
		(*FieldRules_Uint32)(nil),
		(*FieldRules_Uint64)(nil),
		(*FieldRules_Sint32)(nil),
		(*FieldRules_Sint64)(nil),
		(*FieldRules_Fixed32)(nil),
		(*FieldRules_Fixed64)(nil),
		(*FieldRules_Sfixed32)(nil),
		(*FieldRules_Sfixed64)(nil),
		(*FieldRules_Bool)(nil),
		(*FieldRules_String_)(nil),
		(*FieldRules_Bytes)(nil),
		(*FieldRules_Enum)(nil),
		(*FieldRules_Message)(nil),
		(*FieldRules_Repeated)(nil),
		(*FieldRules_Map)(nil),
		(*FieldRules_Any)(nil),
		(*FieldRules_Duration)(nil),
		(*FieldRules_Timestamp)(nil),
	}
}

func _FieldRules_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*FieldRules)
	// type
	switch x := m.Type.(type) {
	case *FieldRules_Float:
		_ = b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Float); err != nil {
			return err
		}
	case *FieldRules_Double:
		_ = b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Double); err != nil {
			return err
		}
	case *FieldRules_Int32:
		_ = b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Int32); err != nil {
			return err
		}
	case *FieldRules_Int64:
		_ = b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Int64); err != nil {
			return err
		}
	case *FieldRules_Uint32:
		_ = b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Uint32); err != nil {
			return err
		}
	case *FieldRules_Uint64:
		_ = b.EncodeVarint(6<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Uint64); err != nil {
			return err
		}
	case *FieldRules_Sint32:
		_ = b.EncodeVarint(7<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Sint32); err != nil {
			return err
		}
	case *FieldRules_Sint64:
		_ = b.EncodeVarint(8<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Sint64); err != nil {
			return err
		}
	case *FieldRules_Fixed32:
		_ = b.EncodeVarint(9<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Fixed32); err != nil {
			return err
		}
	case *FieldRules_Fixed64:
		_ = b.EncodeVarint(10<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Fixed64); err != nil {
			return err
		}
	case *FieldRules_Sfixed32:
		_ = b.EncodeVarint(11<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Sfixed32); err != nil {
			return err
		}
	case *FieldRules_Sfixed64:
		_ = b.EncodeVarint(12<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Sfixed64); err != nil {
			return err
		}
	case *FieldRules_Bool:
		_ = b.EncodeVarint(13<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Bool); err != nil {
			return err
		}
	case *FieldRules_String_:
		_ = b.EncodeVarint(14<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.String_); err != nil {
			return err
		}
	case *FieldRules_Bytes:
		_ = b.EncodeVarint(15<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Bytes); err != nil {
			return err
		}
	case *FieldRules_Enum:
		_ = b.EncodeVarint(16<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Enum); err != nil {
			return err
		}
	case *FieldRules_Message:
		_ = b.EncodeVarint(17<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Message); err != nil {
			return err
		}
	case *FieldRules_Repeated:
		_ = b.EncodeVarint(18<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Repeated); err != nil {
			return err
		}
	case *FieldRules_Map:
		_ = b.EncodeVarint(19<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Map); err != nil {
			return err
		}
	case *FieldRules_Any:
		_ = b.EncodeVarint(20<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Any); err != nil {
			return err
		}
	case *FieldRules_Duration:
		_ = b.EncodeVarint(21<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Duration); err != nil {
			return err
		}
	case *FieldRules_Timestamp:
		_ = b.EncodeVarint(22<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Timestamp); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("FieldRules.Type has unexpected type %T", x)
	}
	return nil
}

func _FieldRules_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*FieldRules)
	switch tag {
	case 1: // type.float
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(FloatRules)
		err := b.DecodeMessage(msg)
		m.Type = &FieldRules_Float{msg}
		return true, err
	case 2: // type.double
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(DoubleRules)
		err := b.DecodeMessage(msg)
		m.Type = &FieldRules_Double{msg}
		return true, err
	case 3: // type.int32
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Int32Rules)
		err := b.DecodeMessage(msg)
		m.Type = &FieldRules_Int32{msg}
		return true, err
	case 4: // type.int64
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Int64Rules)
		err := b.DecodeMessage(msg)
		m.Type = &FieldRules_Int64{msg}
		return true, err
	case 5: // type.uint32
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(UInt32Rules)
		err := b.DecodeMessage(msg)
		m.Type = &FieldRules_Uint32{msg}
		return true, err
	case 6: // type.uint64
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(UInt64Rules)
		err := b.DecodeMessage(msg)
		m.Type = &FieldRules_Uint64{msg}
		return true, err
	case 7: // type.sint32
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(SInt32Rules)
		err := b.DecodeMessage(msg)
		m.Type = &FieldRules_Sint32{msg}
		return true, err
	case 8: // type.sint64
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(SInt64Rules)
		err := b.DecodeMessage(msg)
		m.Type = &FieldRules_Sint64{msg}
		return true, err
	case 9: // type.fixed32
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Fixed32Rules)
		err := b.DecodeMessage(msg)
		m.Type = &FieldRules_Fixed32{msg}
		return true, err
	case 10: // type.fixed64
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Fixed64Rules)
		err := b.DecodeMessage(msg)
		m.Type = &FieldRules_Fixed64{msg}
		return true, err
	case 11: // type.sfixed32
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(SFixed32Rules)
		err := b.DecodeMessage(msg)
		m.Type = &FieldRules_Sfixed32{msg}
		return true, err
	case 12: // type.sfixed64
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(SFixed64Rules)
		err := b.DecodeMessage(msg)
		m.Type = &FieldRules_Sfixed64{msg}
		return true, err
	case 13: // type.bool
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(BoolRules)
		err := b.DecodeMessage(msg)
		m.Type = &FieldRules_Bool{msg}
		return true, err
	case 14: // type.string
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(StringRules)
		err := b.DecodeMessage(msg)
		m.Type = &FieldRules_String_{msg}
		return true, err
	case 15: // type.bytes
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(BytesRules)
		err := b.DecodeMessage(msg)
		m.Type = &FieldRules_Bytes{msg}
		return true, err
	case 16: // type.enum
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(EnumRules)
		err := b.DecodeMessage(msg)
		m.Type = &FieldRules_Enum{msg}
		return true, err
	case 17: // type.message
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(MessageRules)
		err := b.DecodeMessage(msg)
		m.Type = &FieldRules_Message{msg}
		return true, err
	case 18: // type.repeated
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(RepeatedRules)
		err := b.DecodeMessage(msg)
		m.Type = &FieldRules_Repeated{msg}
		return true, err
	case 19: // type.map
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(MapRules)
		err := b.DecodeMessage(msg)
		m.Type = &FieldRules_Map{msg}
		return true, err
	case 20: // type.any
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(AnyRules)
		err := b.DecodeMessage(msg)
		m.Type = &FieldRules_Any{msg}
		return true, err
	case 21: // type.duration
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(DurationRules)
		err := b.DecodeMessage(msg)
		m.Type = &FieldRules_Duration{msg}
		return true, err
	case 22: // type.timestamp
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(TimestampRules)
		err := b.DecodeMessage(msg)
		m.Type = &FieldRules_Timestamp{msg}
		return true, err
	default:
		return false, nil
	}
}

func _FieldRules_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*FieldRules)
	// type
	switch x := m.Type.(type) {
	case *FieldRules_Float:
		s := proto.Size(x.Float)
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *FieldRules_Double:
		s := proto.Size(x.Double)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *FieldRules_Int32:
		s := proto.Size(x.Int32)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *FieldRules_Int64:
		s := proto.Size(x.Int64)
		n += proto.SizeVarint(4<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *FieldRules_Uint32:
		s := proto.Size(x.Uint32)
		n += proto.SizeVarint(5<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *FieldRules_Uint64:
		s := proto.Size(x.Uint64)
		n += proto.SizeVarint(6<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *FieldRules_Sint32:
		s := proto.Size(x.Sint32)
		n += proto.SizeVarint(7<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *FieldRules_Sint64:
		s := proto.Size(x.Sint64)
		n += proto.SizeVarint(8<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *FieldRules_Fixed32:
		s := proto.Size(x.Fixed32)
		n += proto.SizeVarint(9<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *FieldRules_Fixed64:
		s := proto.Size(x.Fixed64)
		n += proto.SizeVarint(10<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *FieldRules_Sfixed32:
		s := proto.Size(x.Sfixed32)
		n += proto.SizeVarint(11<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *FieldRules_Sfixed64:
		s := proto.Size(x.Sfixed64)
		n += proto.SizeVarint(12<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *FieldRules_Bool:
		s := proto.Size(x.Bool)
		n += proto.SizeVarint(13<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *FieldRules_String_:
		s := proto.Size(x.String_)
		n += proto.SizeVarint(14<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *FieldRules_Bytes:
		s := proto.Size(x.Bytes)
		n += proto.SizeVarint(15<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *FieldRules_Enum:
		s := proto.Size(x.Enum)
		n += proto.SizeVarint(16<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *FieldRules_Message:
		s := proto.Size(x.Message)
		n += proto.SizeVarint(17<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *FieldRules_Repeated:
		s := proto.Size(x.Repeated)
		n += proto.SizeVarint(18<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *FieldRules_Map:
		s := proto.Size(x.Map)
		n += proto.SizeVarint(19<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *FieldRules_Any:
		s := proto.Size(x.Any)
		n += proto.SizeVarint(20<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *FieldRules_Duration:
		s := proto.Size(x.Duration)
		n += proto.SizeVarint(21<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *FieldRules_Timestamp:
		s := proto.Size(x.Timestamp)
		n += proto.SizeVarint(22<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// Title
//
// x-displayName "displayname"
// FloatRules describes the constraints applied to float values
type FloatRules struct {
	// Title
	//
	// x-displayName "displayname"
	// Const specifies that this field must be exactly the specified value
	Const float32 `protobuf:"fixed32,1,opt,name=const,proto3" json:"const,omitempty"`
	// Title
	//
	// x-displayName "displayname"
	// Lt specifies that this field must be less than the specified value,
	// exclusive
	Lt float32 `protobuf:"fixed32,2,opt,name=lt,proto3" json:"lt,omitempty"`
	// Title
	//
	// x-displayName "displayname"
	// Lte specifies that this field must be less than or equal to the
	// specified value, inclusive
	Lte float32 `protobuf:"fixed32,3,opt,name=lte,proto3" json:"lte,omitempty"`
	// Title
	//
	// x-displayName "displayname"
	// Gt specifies that this field must be greater than the specified value,
	// exclusive. If the value of Gt is larger than a specified Lt or Lte, the
	// range is reversed.
	Gt float32 `protobuf:"fixed32,4,opt,name=gt,proto3" json:"gt,omitempty"`
	// Title
	//
	// x-displayName "displayname"
	// Gte specifies that this field must be greater than or equal to the
	// specified value, inclusive. If the value of Gte is larger than a
	// specified Lt or Lte, the range is reversed.
	Gte float32 `protobuf:"fixed32,5,opt,name=gte,proto3" json:"gte,omitempty"`
	// Title
	//
	// x-displayName "displayname"
	// In specifies that this field must be equal to one of the specified
	// values
	In []float32 `protobuf:"fixed32,6,rep,packed,name=in" json:"in,omitempty"`
	// Title
	//
	// x-displayName "displayname"
	// NotIn specifies that this field cannot be equal to one of the specified
	// values
	NotIn []float32 `protobuf:"fixed32,7,rep,packed,name=not_in,json=notIn" json:"not_in,omitempty"`
}

func (m *FloatRules) Reset()                    { *m = FloatRules{} }
func (*FloatRules) ProtoMessage()               {}
func (*FloatRules) Descriptor() ([]byte, []int) { return fileDescriptorValidate, []int{1} }

func (m *FloatRules) GetConst() float32 {
	if m != nil {
		return m.Const
	}
	return 0
}

func (m *FloatRules) GetLt() float32 {
	if m != nil {
		return m.Lt
	}
	return 0
}

func (m *FloatRules) GetLte() float32 {
	if m != nil {
		return m.Lte
	}
	return 0
}

func (m *FloatRules) GetGt() float32 {
	if m != nil {
		return m.Gt
	}
	return 0
}

func (m *FloatRules) GetGte() float32 {
	if m != nil {
		return m.Gte
	}
	return 0
}

func (m *FloatRules) GetIn() []float32 {
	if m != nil {
		return m.In
	}
	return nil
}

func (m *FloatRules) GetNotIn() []float32 {
	if m != nil {
		return m.NotIn
	}
	return nil
}

// Title
//
// x-displayName "displayname"
// DoubleRules describes the constraints applied to double values
type DoubleRules struct {
	// Title
	//
	// x-displayName "displayname"
	// Const specifies that this field must be exactly the specified value
	Const float64 `protobuf:"fixed64,1,opt,name=const,proto3" json:"const,omitempty"`
	// Title
	//
	// x-displayName "displayname"
	// Lt specifies that this field must be less than the specified value,
	// exclusive
	Lt float64 `protobuf:"fixed64,2,opt,name=lt,proto3" json:"lt,omitempty"`
	// Title
	//
	// x-displayName "displayname"
	// Lte specifies that this field must be less than or equal to the
	// specified value, inclusive
	Lte float64 `protobuf:"fixed64,3,opt,name=lte,proto3" json:"lte,omitempty"`
	// Title
	//
	// x-displayName "displayname"
	// Gt specifies that this field must be greater than the specified value,
	// exclusive. If the value of Gt is larger than a specified Lt or Lte, the
	// range is reversed.
	Gt float64 `protobuf:"fixed64,4,opt,name=gt,proto3" json:"gt,omitempty"`
	// Title
	//
	// x-displayName "displayname"
	// Gte specifies that this field must be greater than or equal to the
	// specified value, inclusive. If the value of Gte is larger than a
	// specified Lt or Lte, the range is reversed.
	Gte float64 `protobuf:"fixed64,5,opt,name=gte,proto3" json:"gte,omitempty"`
	// Title
	//
	// x-displayName "displayname"
	// In specifies that this field must be equal to one of the specified
	// values
	In []float64 `protobuf:"fixed64,6,rep,packed,name=in" json:"in,omitempty"`
	// Title
	//
	// x-displayName "displayname"
	// NotIn specifies that this field cannot be equal to one of the specified
	// values
	NotIn []float64 `protobuf:"fixed64,7,rep,packed,name=not_in,json=notIn" json:"not_in,omitempty"`
}

func (m *DoubleRules) Reset()                    { *m = DoubleRules{} }
func (*DoubleRules) ProtoMessage()               {}
func (*DoubleRules) Descriptor() ([]byte, []int) { return fileDescriptorValidate, []int{2} }

func (m *DoubleRules) GetConst() float64 {
	if m != nil {
		return m.Const
	}
	return 0
}

func (m *DoubleRules) GetLt() float64 {
	if m != nil {
		return m.Lt
	}
	return 0
}

func (m *DoubleRules) GetLte() float64 {
	if m != nil {
		return m.Lte
	}
	return 0
}

func (m *DoubleRules) GetGt() float64 {
	if m != nil {
		return m.Gt
	}
	return 0
}

func (m *DoubleRules) GetGte() float64 {
	if m != nil {
		return m.Gte
	}
	return 0
}

func (m *DoubleRules) GetIn() []float64 {
	if m != nil {
		return m.In
	}
	return nil
}

func (m *DoubleRules) GetNotIn() []float64 {
	if m != nil {
		return m.NotIn
	}
	return nil
}

// Title
//
// x-displayName "displayname"
// Int32Rules describes the constraints applied to int32 values
type Int32Rules struct {
	// Title
	//
	// x-displayName "displayname"
	// Const specifies that this field must be exactly the specified value
	Const int32 `protobuf:"varint,1,opt,name=const,proto3" json:"const,omitempty"`
	// Title
	//
	// x-displayName "displayname"
	// Lt specifies that this field must be less than the specified value,
	// exclusive
	Lt int32 `protobuf:"varint,2,opt,name=lt,proto3" json:"lt,omitempty"`
	// Title
	//
	// x-displayName "displayname"
	// Lte specifies that this field must be less than or equal to the
	// specified value, inclusive
	Lte int32 `protobuf:"varint,3,opt,name=lte,proto3" json:"lte,omitempty"`
	// Title
	//
	// x-displayName "displayname"
	// Gt specifies that this field must be greater than the specified value,
	// exclusive. If the value of Gt is larger than a specified Lt or Lte, the
	// range is reversed.
	Gt int32 `protobuf:"varint,4,opt,name=gt,proto3" json:"gt,omitempty"`
	// Title
	//
	// x-displayName "displayname"
	// Gte specifies that this field must be greater than or equal to the
	// specified value, inclusive. If the value of Gte is larger than a
	// specified Lt or Lte, the range is reversed.
	Gte int32 `protobuf:"varint,5,opt,name=gte,proto3" json:"gte,omitempty"`
	// Title
	//
	// x-displayName "displayname"
	// In specifies that this field must be equal to one of the specified
	// values
	In []int32 `protobuf:"varint,6,rep,packed,name=in" json:"in,omitempty"`
	// Title
	//
	// x-displayName "displayname"
	// NotIn specifies that this field cannot be equal to one of the specified
	// values
	NotIn []int32 `protobuf:"varint,7,rep,packed,name=not_in,json=notIn" json:"not_in,omitempty"`
}

func (m *Int32Rules) Reset()                    { *m = Int32Rules{} }
func (*Int32Rules) ProtoMessage()               {}
func (*Int32Rules) Descriptor() ([]byte, []int) { return fileDescriptorValidate, []int{3} }

func (m *Int32Rules) GetConst() int32 {
	if m != nil {
		return m.Const
	}
	return 0
}

func (m *Int32Rules) GetLt() int32 {
	if m != nil {
		return m.Lt
	}
	return 0
}

func (m *Int32Rules) GetLte() int32 {
	if m != nil {
		return m.Lte
	}
	return 0
}

func (m *Int32Rules) GetGt() int32 {
	if m != nil {
		return m.Gt
	}
	return 0
}

func (m *Int32Rules) GetGte() int32 {
	if m != nil {
		return m.Gte
	}
	return 0
}

func (m *Int32Rules) GetIn() []int32 {
	if m != nil {
		return m.In
	}
	return nil
}

func (m *Int32Rules) GetNotIn() []int32 {
	if m != nil {
		return m.NotIn
	}
	return nil
}

// Title
//
// x-displayName "displayname"
// Int64Rules describes the constraints applied to int64 values
type Int64Rules struct {
	// Title
	//
	// x-displayName "displayname"
	// Const specifies that this field must be exactly the specified value
	Const int64 `protobuf:"varint,1,opt,name=const,proto3" json:"const,omitempty"`
	// Title
	//
	// x-displayName "displayname"
	// Lt specifies that this field must be less than the specified value,
	// exclusive
	Lt int64 `protobuf:"varint,2,opt,name=lt,proto3" json:"lt,omitempty"`
	// Title
	//
	// x-displayName "displayname"
	// Lte specifies that this field must be less than or equal to the
	// specified value, inclusive
	Lte int64 `protobuf:"varint,3,opt,name=lte,proto3" json:"lte,omitempty"`
	// Title
	//
	// x-displayName "displayname"
	// Gt specifies that this field must be greater than the specified value,
	// exclusive. If the value of Gt is larger than a specified Lt or Lte, the
	// range is reversed.
	Gt int64 `protobuf:"varint,4,opt,name=gt,proto3" json:"gt,omitempty"`
	// Title
	//
	// x-displayName "displayname"
	// Gte specifies that this field must be greater than or equal to the
	// specified value, inclusive. If the value of Gte is larger than a
	// specified Lt or Lte, the range is reversed.
	Gte int64 `protobuf:"varint,5,opt,name=gte,proto3" json:"gte,omitempty"`
	// Title
	//
	// x-displayName "displayname"
	// In specifies that this field must be equal to one of the specified
	// values
	In []int64 `protobuf:"varint,6,rep,packed,name=in" json:"in,omitempty"`
	// Title
	//
	// x-displayName "displayname"
	// NotIn specifies that this field cannot be equal to one of the specified
	// values
	NotIn []int64 `protobuf:"varint,7,rep,packed,name=not_in,json=notIn" json:"not_in,omitempty"`
}

func (m *Int64Rules) Reset()                    { *m = Int64Rules{} }
func (*Int64Rules) ProtoMessage()               {}
func (*Int64Rules) Descriptor() ([]byte, []int) { return fileDescriptorValidate, []int{4} }

func (m *Int64Rules) GetConst() int64 {
	if m != nil {
		return m.Const
	}
	return 0
}

func (m *Int64Rules) GetLt() int64 {
	if m != nil {
		return m.Lt
	}
	return 0
}

func (m *Int64Rules) GetLte() int64 {
	if m != nil {
		return m.Lte
	}
	return 0
}

func (m *Int64Rules) GetGt() int64 {
	if m != nil {
		return m.Gt
	}
	return 0
}

func (m *Int64Rules) GetGte() int64 {
	if m != nil {
		return m.Gte
	}
	return 0
}

func (m *Int64Rules) GetIn() []int64 {
	if m != nil {
		return m.In
	}
	return nil
}

func (m *Int64Rules) GetNotIn() []int64 {
	if m != nil {
		return m.NotIn
	}
	return nil
}

// Title
//
// x-displayName "displayname"
// UInt32Rules describes the constraints applied to uint32 values
type UInt32Rules struct {
	// Title
	//
	// x-displayName "displayname"
	// Const specifies that this field must be exactly the specified value
	Const uint32 `protobuf:"varint,1,opt,name=const,proto3" json:"const,omitempty"`
	// Title
	//
	// x-displayName "displayname"
	// Lt specifies that this field must be less than the specified value,
	// exclusive
	Lt uint32 `protobuf:"varint,2,opt,name=lt,proto3" json:"lt,omitempty"`
	// Title
	//
	// x-displayName "displayname"
	// Lte specifies that this field must be less than or equal to the
	// specified value, inclusive
	Lte uint32 `protobuf:"varint,3,opt,name=lte,proto3" json:"lte,omitempty"`
	// Title
	//
	// x-displayName "displayname"
	// Gt specifies that this field must be greater than the specified value,
	// exclusive. If the value of Gt is larger than a specified Lt or Lte, the
	// range is reversed.
	Gt uint32 `protobuf:"varint,4,opt,name=gt,proto3" json:"gt,omitempty"`
	// Title
	//
	// x-displayName "displayname"
	// Gte specifies that this field must be greater than or equal to the
	// specified value, inclusive. If the value of Gte is larger than a
	// specified Lt or Lte, the range is reversed.
	Gte uint32 `protobuf:"varint,5,opt,name=gte,proto3" json:"gte,omitempty"`
	// Title
	//
	// x-displayName "displayname"
	// In specifies that this field must be equal to one of the specified
	// values
	In []uint32 `protobuf:"varint,6,rep,packed,name=in" json:"in,omitempty"`
	// Title
	//
	// x-displayName "displayname"
	// NotIn specifies that this field cannot be equal to one of the specified
	// values
	NotIn []uint32 `protobuf:"varint,7,rep,packed,name=not_in,json=notIn" json:"not_in,omitempty"`
	// Title
	//
	// x-displayName "displayname"
	// Ranges specifies that this field must be one of the values specified in
	// the comma-separated list of values/ranges e.g. "1,2-4,9" or "1,3-5,11-15"
	Ranges string `protobuf:"bytes,8,opt,name=ranges,proto3" json:"ranges,omitempty"`
	// Not in ranges
	//
	// x-displayName "Not in Ranges"
	// Not in Ranges specifies that this field must not be one of the values specified in
	// the comma-separated list of values/ranges e.g. "1,2-4,9" or "1,3-5,11-15"
	NotInRanges string `protobuf:"bytes,9,opt,name=not_in_ranges,json=notInRanges,proto3" json:"not_in_ranges,omitempty"`
}

func (m *UInt32Rules) Reset()                    { *m = UInt32Rules{} }
func (*UInt32Rules) ProtoMessage()               {}
func (*UInt32Rules) Descriptor() ([]byte, []int) { return fileDescriptorValidate, []int{5} }

func (m *UInt32Rules) GetConst() uint32 {
	if m != nil {
		return m.Const
	}
	return 0
}

func (m *UInt32Rules) GetLt() uint32 {
	if m != nil {
		return m.Lt
	}
	return 0
}

func (m *UInt32Rules) GetLte() uint32 {
	if m != nil {
		return m.Lte
	}
	return 0
}

func (m *UInt32Rules) GetGt() uint32 {
	if m != nil {
		return m.Gt
	}
	return 0
}

func (m *UInt32Rules) GetGte() uint32 {
	if m != nil {
		return m.Gte
	}
	return 0
}

func (m *UInt32Rules) GetIn() []uint32 {
	if m != nil {
		return m.In
	}
	return nil
}

func (m *UInt32Rules) GetNotIn() []uint32 {
	if m != nil {
		return m.NotIn
	}
	return nil
}

func (m *UInt32Rules) GetRanges() string {
	if m != nil {
		return m.Ranges
	}
	return ""
}

func (m *UInt32Rules) GetNotInRanges() string {
	if m != nil {
		return m.NotInRanges
	}
	return ""
}

// Title
//
// x-displayName "displayname"
// UInt64Rules describes the constraints applied to uint64 values
type UInt64Rules struct {
	// Title
	//
	// x-displayName "displayname"
	// Const specifies that this field must be exactly the specified value
	Const uint64 `protobuf:"varint,1,opt,name=const,proto3" json:"const,omitempty"`
	// Title
	//
	// x-displayName "displayname"
	// Lt specifies that this field must be less than the specified value,
	// exclusive
	Lt uint64 `protobuf:"varint,2,opt,name=lt,proto3" json:"lt,omitempty"`
	// Title
	//
	// x-displayName "displayname"
	// Lte specifies that this field must be less than or equal to the
	// specified value, inclusive
	Lte uint64 `protobuf:"varint,3,opt,name=lte,proto3" json:"lte,omitempty"`
	// Title
	//
	// x-displayName "displayname"
	// Gt specifies that this field must be greater than the specified value,
	// exclusive. If the value of Gt is larger than a specified Lt or Lte, the
	// range is reversed.
	Gt uint64 `protobuf:"varint,4,opt,name=gt,proto3" json:"gt,omitempty"`
	// Title
	//
	// x-displayName "displayname"
	// Gte specifies that this field must be greater than or equal to the
	// specified value, inclusive. If the value of Gte is larger than a
	// specified Lt or Lte, the range is reversed.
	Gte uint64 `protobuf:"varint,5,opt,name=gte,proto3" json:"gte,omitempty"`
	// Title
	//
	// x-displayName "displayname"
	// In specifies that this field must be equal to one of the specified
	// values
	In []uint64 `protobuf:"varint,6,rep,packed,name=in" json:"in,omitempty"`
	// Title
	//
	// x-displayName "displayname"
	// NotIn specifies that this field cannot be equal to one of the specified
	// values
	NotIn []uint64 `protobuf:"varint,7,rep,packed,name=not_in,json=notIn" json:"not_in,omitempty"`
}

func (m *UInt64Rules) Reset()                    { *m = UInt64Rules{} }
func (*UInt64Rules) ProtoMessage()               {}
func (*UInt64Rules) Descriptor() ([]byte, []int) { return fileDescriptorValidate, []int{6} }

func (m *UInt64Rules) GetConst() uint64 {
	if m != nil {
		return m.Const
	}
	return 0
}

func (m *UInt64Rules) GetLt() uint64 {
	if m != nil {
		return m.Lt
	}
	return 0
}

func (m *UInt64Rules) GetLte() uint64 {
	if m != nil {
		return m.Lte
	}
	return 0
}

func (m *UInt64Rules) GetGt() uint64 {
	if m != nil {
		return m.Gt
	}
	return 0
}

func (m *UInt64Rules) GetGte() uint64 {
	if m != nil {
		return m.Gte
	}
	return 0
}

func (m *UInt64Rules) GetIn() []uint64 {
	if m != nil {
		return m.In
	}
	return nil
}

func (m *UInt64Rules) GetNotIn() []uint64 {
	if m != nil {
		return m.NotIn
	}
	return nil
}

// Title
//
// x-displayName "displayname"
// SInt32Rules describes the constraints applied to sint32 values
type SInt32Rules struct {
	// Title
	//
	// x-displayName "displayname"
	// Const specifies that this field must be exactly the specified value
	Const int32 `protobuf:"zigzag32,1,opt,name=const,proto3" json:"const,omitempty"`
	// Title
	//
	// x-displayName "displayname"
	// Lt specifies that this field must be less than the specified value,
	// exclusive
	Lt int32 `protobuf:"zigzag32,2,opt,name=lt,proto3" json:"lt,omitempty"`
	// Title
	//
	// x-displayName "displayname"
	// Lte specifies that this field must be less than or equal to the
	// specified value, inclusive
	Lte int32 `protobuf:"zigzag32,3,opt,name=lte,proto3" json:"lte,omitempty"`
	// Title
	//
	// x-displayName "displayname"
	// Gt specifies that this field must be greater than the specified value,
	// exclusive. If the value of Gt is larger than a specified Lt or Lte, the
	// range is reversed.
	Gt int32 `protobuf:"zigzag32,4,opt,name=gt,proto3" json:"gt,omitempty"`
	// Title
	//
	// x-displayName "displayname"
	// Gte specifies that this field must be greater than or equal to the
	// specified value, inclusive. If the value of Gte is larger than a
	// specified Lt or Lte, the range is reversed.
	Gte int32 `protobuf:"zigzag32,5,opt,name=gte,proto3" json:"gte,omitempty"`
	// Title
	//
	// x-displayName "displayname"
	// In specifies that this field must be equal to one of the specified
	// values
	In []int32 `protobuf:"zigzag32,6,rep,packed,name=in" json:"in,omitempty"`
	// Title
	//
	// x-displayName "displayname"
	// NotIn specifies that this field cannot be equal to one of the specified
	// values
	NotIn []int32 `protobuf:"zigzag32,7,rep,packed,name=not_in,json=notIn" json:"not_in,omitempty"`
}

func (m *SInt32Rules) Reset()                    { *m = SInt32Rules{} }
func (*SInt32Rules) ProtoMessage()               {}
func (*SInt32Rules) Descriptor() ([]byte, []int) { return fileDescriptorValidate, []int{7} }

func (m *SInt32Rules) GetConst() int32 {
	if m != nil {
		return m.Const
	}
	return 0
}

func (m *SInt32Rules) GetLt() int32 {
	if m != nil {
		return m.Lt
	}
	return 0
}

func (m *SInt32Rules) GetLte() int32 {
	if m != nil {
		return m.Lte
	}
	return 0
}

func (m *SInt32Rules) GetGt() int32 {
	if m != nil {
		return m.Gt
	}
	return 0
}

func (m *SInt32Rules) GetGte() int32 {
	if m != nil {
		return m.Gte
	}
	return 0
}

func (m *SInt32Rules) GetIn() []int32 {
	if m != nil {
		return m.In
	}
	return nil
}

func (m *SInt32Rules) GetNotIn() []int32 {
	if m != nil {
		return m.NotIn
	}
	return nil
}

// Title
//
// x-displayName "displayname"
// SInt64Rules describes the constraints applied to sint64 values
type SInt64Rules struct {
	// Title
	//
	// x-displayName "displayname"
	// Const specifies that this field must be exactly the specified value
	Const int64 `protobuf:"zigzag64,1,opt,name=const,proto3" json:"const,omitempty"`
	// Title
	//
	// x-displayName "displayname"
	// Lt specifies that this field must be less than the specified value,
	// exclusive
	Lt int64 `protobuf:"zigzag64,2,opt,name=lt,proto3" json:"lt,omitempty"`
	// Title
	//
	// x-displayName "displayname"
	// Lte specifies that this field must be less than or equal to the
	// specified value, inclusive
	Lte int64 `protobuf:"zigzag64,3,opt,name=lte,proto3" json:"lte,omitempty"`
	// Title
	//
	// x-displayName "displayname"
	// Gt specifies that this field must be greater than the specified value,
	// exclusive. If the value of Gt is larger than a specified Lt or Lte, the
	// range is reversed.
	Gt int64 `protobuf:"zigzag64,4,opt,name=gt,proto3" json:"gt,omitempty"`
	// Title
	//
	// x-displayName "displayname"
	// Gte specifies that this field must be greater than or equal to the
	// specified value, inclusive. If the value of Gte is larger than a
	// specified Lt or Lte, the range is reversed.
	Gte int64 `protobuf:"zigzag64,5,opt,name=gte,proto3" json:"gte,omitempty"`
	// Title
	//
	// x-displayName "displayname"
	// In specifies that this field must be equal to one of the specified
	// values
	In []int64 `protobuf:"zigzag64,6,rep,packed,name=in" json:"in,omitempty"`
	// Title
	//
	// x-displayName "displayname"
	// NotIn specifies that this field cannot be equal to one of the specified
	// values
	NotIn []int64 `protobuf:"zigzag64,7,rep,packed,name=not_in,json=notIn" json:"not_in,omitempty"`
}

func (m *SInt64Rules) Reset()                    { *m = SInt64Rules{} }
func (*SInt64Rules) ProtoMessage()               {}
func (*SInt64Rules) Descriptor() ([]byte, []int) { return fileDescriptorValidate, []int{8} }

func (m *SInt64Rules) GetConst() int64 {
	if m != nil {
		return m.Const
	}
	return 0
}

func (m *SInt64Rules) GetLt() int64 {
	if m != nil {
		return m.Lt
	}
	return 0
}

func (m *SInt64Rules) GetLte() int64 {
	if m != nil {
		return m.Lte
	}
	return 0
}

func (m *SInt64Rules) GetGt() int64 {
	if m != nil {
		return m.Gt
	}
	return 0
}

func (m *SInt64Rules) GetGte() int64 {
	if m != nil {
		return m.Gte
	}
	return 0
}

func (m *SInt64Rules) GetIn() []int64 {
	if m != nil {
		return m.In
	}
	return nil
}

func (m *SInt64Rules) GetNotIn() []int64 {
	if m != nil {
		return m.NotIn
	}
	return nil
}

// Title
//
// x-displayName "displayname"
// Fixed32Rules describes the constraints applied to fixed32 values
type Fixed32Rules struct {
	// Title
	//
	// x-displayName "displayname"
	// Const specifies that this field must be exactly the specified value
	Const uint32 `protobuf:"fixed32,1,opt,name=const,proto3" json:"const,omitempty"`
	// Title
	//
	// x-displayName "displayname"
	// Lt specifies that this field must be less than the specified value,
	// exclusive
	Lt uint32 `protobuf:"fixed32,2,opt,name=lt,proto3" json:"lt,omitempty"`
	// Title
	//
	// x-displayName "displayname"
	// Lte specifies that this field must be less than or equal to the
	// specified value, inclusive
	Lte uint32 `protobuf:"fixed32,3,opt,name=lte,proto3" json:"lte,omitempty"`
	// Title
	//
	// x-displayName "displayname"
	// Gt specifies that this field must be greater than the specified value,
	// exclusive. If the value of Gt is larger than a specified Lt or Lte, the
	// range is reversed.
	Gt uint32 `protobuf:"fixed32,4,opt,name=gt,proto3" json:"gt,omitempty"`
	// Title
	//
	// x-displayName "displayname"
	// Gte specifies that this field must be greater than or equal to the
	// specified value, inclusive. If the value of Gte is larger than a
	// specified Lt or Lte, the range is reversed.
	Gte uint32 `protobuf:"fixed32,5,opt,name=gte,proto3" json:"gte,omitempty"`
	// Title
	//
	// x-displayName "displayname"
	// In specifies that this field must be equal to one of the specified
	// values
	In []uint32 `protobuf:"fixed32,6,rep,packed,name=in" json:"in,omitempty"`
	// Title
	//
	// x-displayName "displayname"
	// NotIn specifies that this field cannot be equal to one of the specified
	// values
	NotIn []uint32 `protobuf:"fixed32,7,rep,packed,name=not_in,json=notIn" json:"not_in,omitempty"`
}

func (m *Fixed32Rules) Reset()                    { *m = Fixed32Rules{} }
func (*Fixed32Rules) ProtoMessage()               {}
func (*Fixed32Rules) Descriptor() ([]byte, []int) { return fileDescriptorValidate, []int{9} }

func (m *Fixed32Rules) GetConst() uint32 {
	if m != nil {
		return m.Const
	}
	return 0
}

func (m *Fixed32Rules) GetLt() uint32 {
	if m != nil {
		return m.Lt
	}
	return 0
}

func (m *Fixed32Rules) GetLte() uint32 {
	if m != nil {
		return m.Lte
	}
	return 0
}

func (m *Fixed32Rules) GetGt() uint32 {
	if m != nil {
		return m.Gt
	}
	return 0
}

func (m *Fixed32Rules) GetGte() uint32 {
	if m != nil {
		return m.Gte
	}
	return 0
}

func (m *Fixed32Rules) GetIn() []uint32 {
	if m != nil {
		return m.In
	}
	return nil
}

func (m *Fixed32Rules) GetNotIn() []uint32 {
	if m != nil {
		return m.NotIn
	}
	return nil
}

// Title
//
// x-displayName "displayname"
// Fixed64Rules describes the constraints applied to fixed64 values
type Fixed64Rules struct {
	// Title
	//
	// x-displayName "displayname"
	// Const specifies that this field must be exactly the specified value
	Const uint64 `protobuf:"fixed64,1,opt,name=const,proto3" json:"const,omitempty"`
	// Title
	//
	// x-displayName "displayname"
	// Lt specifies that this field must be less than the specified value,
	// exclusive
	Lt uint64 `protobuf:"fixed64,2,opt,name=lt,proto3" json:"lt,omitempty"`
	// Title
	//
	// x-displayName "displayname"
	// Lte specifies that this field must be less than or equal to the
	// specified value, inclusive
	Lte uint64 `protobuf:"fixed64,3,opt,name=lte,proto3" json:"lte,omitempty"`
	// Title
	//
	// x-displayName "displayname"
	// Gt specifies that this field must be greater than the specified value,
	// exclusive. If the value of Gt is larger than a specified Lt or Lte, the
	// range is reversed.
	Gt uint64 `protobuf:"fixed64,4,opt,name=gt,proto3" json:"gt,omitempty"`
	// Title
	//
	// x-displayName "displayname"
	// Gte specifies that this field must be greater than or equal to the
	// specified value, inclusive. If the value of Gte is larger than a
	// specified Lt or Lte, the range is reversed.
	Gte uint64 `protobuf:"fixed64,5,opt,name=gte,proto3" json:"gte,omitempty"`
	// Title
	//
	// x-displayName "displayname"
	// In specifies that this field must be equal to one of the specified
	// values
	In []uint64 `protobuf:"fixed64,6,rep,packed,name=in" json:"in,omitempty"`
	// Title
	//
	// x-displayName "displayname"
	// NotIn specifies that this field cannot be equal to one of the specified
	// values
	NotIn []uint64 `protobuf:"fixed64,7,rep,packed,name=not_in,json=notIn" json:"not_in,omitempty"`
}

func (m *Fixed64Rules) Reset()                    { *m = Fixed64Rules{} }
func (*Fixed64Rules) ProtoMessage()               {}
func (*Fixed64Rules) Descriptor() ([]byte, []int) { return fileDescriptorValidate, []int{10} }

func (m *Fixed64Rules) GetConst() uint64 {
	if m != nil {
		return m.Const
	}
	return 0
}

func (m *Fixed64Rules) GetLt() uint64 {
	if m != nil {
		return m.Lt
	}
	return 0
}

func (m *Fixed64Rules) GetLte() uint64 {
	if m != nil {
		return m.Lte
	}
	return 0
}

func (m *Fixed64Rules) GetGt() uint64 {
	if m != nil {
		return m.Gt
	}
	return 0
}

func (m *Fixed64Rules) GetGte() uint64 {
	if m != nil {
		return m.Gte
	}
	return 0
}

func (m *Fixed64Rules) GetIn() []uint64 {
	if m != nil {
		return m.In
	}
	return nil
}

func (m *Fixed64Rules) GetNotIn() []uint64 {
	if m != nil {
		return m.NotIn
	}
	return nil
}

// Title
//
// x-displayName "displayname"
// SFixed32Rules describes the constraints applied to sfixed32 values
type SFixed32Rules struct {
	// Title
	//
	// x-displayName "displayname"
	// Const specifies that this field must be exactly the specified value
	Const int32 `protobuf:"fixed32,1,opt,name=const,proto3" json:"const,omitempty"`
	// Title
	//
	// x-displayName "displayname"
	// Lt specifies that this field must be less than the specified value,
	// exclusive
	Lt int32 `protobuf:"fixed32,2,opt,name=lt,proto3" json:"lt,omitempty"`
	// Title
	//
	// x-displayName "displayname"
	// Lte specifies that this field must be less than or equal to the
	// specified value, inclusive
	Lte int32 `protobuf:"fixed32,3,opt,name=lte,proto3" json:"lte,omitempty"`
	// Title
	//
	// x-displayName "displayname"
	// Gt specifies that this field must be greater than the specified value,
	// exclusive. If the value of Gt is larger than a specified Lt or Lte, the
	// range is reversed.
	Gt int32 `protobuf:"fixed32,4,opt,name=gt,proto3" json:"gt,omitempty"`
	// Title
	//
	// x-displayName "displayname"
	// Gte specifies that this field must be greater than or equal to the
	// specified value, inclusive. If the value of Gte is larger than a
	// specified Lt or Lte, the range is reversed.
	Gte int32 `protobuf:"fixed32,5,opt,name=gte,proto3" json:"gte,omitempty"`
	// Title
	//
	// x-displayName "displayname"
	// In specifies that this field must be equal to one of the specified
	// values
	In []int32 `protobuf:"fixed32,6,rep,packed,name=in" json:"in,omitempty"`
	// Title
	//
	// x-displayName "displayname"
	// NotIn specifies that this field cannot be equal to one of the specified
	// values
	NotIn []int32 `protobuf:"fixed32,7,rep,packed,name=not_in,json=notIn" json:"not_in,omitempty"`
}

func (m *SFixed32Rules) Reset()                    { *m = SFixed32Rules{} }
func (*SFixed32Rules) ProtoMessage()               {}
func (*SFixed32Rules) Descriptor() ([]byte, []int) { return fileDescriptorValidate, []int{11} }

func (m *SFixed32Rules) GetConst() int32 {
	if m != nil {
		return m.Const
	}
	return 0
}

func (m *SFixed32Rules) GetLt() int32 {
	if m != nil {
		return m.Lt
	}
	return 0
}

func (m *SFixed32Rules) GetLte() int32 {
	if m != nil {
		return m.Lte
	}
	return 0
}

func (m *SFixed32Rules) GetGt() int32 {
	if m != nil {
		return m.Gt
	}
	return 0
}

func (m *SFixed32Rules) GetGte() int32 {
	if m != nil {
		return m.Gte
	}
	return 0
}

func (m *SFixed32Rules) GetIn() []int32 {
	if m != nil {
		return m.In
	}
	return nil
}

func (m *SFixed32Rules) GetNotIn() []int32 {
	if m != nil {
		return m.NotIn
	}
	return nil
}

// Title
//
// x-displayName "displayname"
// SFixed64Rules describes the constraints applied to sfixed64 values
type SFixed64Rules struct {
	// Title
	//
	// x-displayName "displayname"
	// Const specifies that this field must be exactly the specified value
	Const int64 `protobuf:"fixed64,1,opt,name=const,proto3" json:"const,omitempty"`
	// Title
	//
	// x-displayName "displayname"
	// Lt specifies that this field must be less than the specified value,
	// exclusive
	Lt int64 `protobuf:"fixed64,2,opt,name=lt,proto3" json:"lt,omitempty"`
	// Title
	//
	// x-displayName "displayname"
	// Lte specifies that this field must be less than or equal to the
	// specified value, inclusive
	Lte int64 `protobuf:"fixed64,3,opt,name=lte,proto3" json:"lte,omitempty"`
	// Title
	//
	// x-displayName "displayname"
	// Gt specifies that this field must be greater than the specified value,
	// exclusive. If the value of Gt is larger than a specified Lt or Lte, the
	// range is reversed.
	Gt int64 `protobuf:"fixed64,4,opt,name=gt,proto3" json:"gt,omitempty"`
	// Title
	//
	// x-displayName "displayname"
	// Gte specifies that this field must be greater than or equal to the
	// specified value, inclusive. If the value of Gte is larger than a
	// specified Lt or Lte, the range is reversed.
	Gte int64 `protobuf:"fixed64,5,opt,name=gte,proto3" json:"gte,omitempty"`
	// Title
	//
	// x-displayName "displayname"
	// In specifies that this field must be equal to one of the specified
	// values
	In []int64 `protobuf:"fixed64,6,rep,packed,name=in" json:"in,omitempty"`
	// Title
	//
	// x-displayName "displayname"
	// NotIn specifies that this field cannot be equal to one of the specified
	// values
	NotIn []int64 `protobuf:"fixed64,7,rep,packed,name=not_in,json=notIn" json:"not_in,omitempty"`
}

func (m *SFixed64Rules) Reset()                    { *m = SFixed64Rules{} }
func (*SFixed64Rules) ProtoMessage()               {}
func (*SFixed64Rules) Descriptor() ([]byte, []int) { return fileDescriptorValidate, []int{12} }

func (m *SFixed64Rules) GetConst() int64 {
	if m != nil {
		return m.Const
	}
	return 0
}

func (m *SFixed64Rules) GetLt() int64 {
	if m != nil {
		return m.Lt
	}
	return 0
}

func (m *SFixed64Rules) GetLte() int64 {
	if m != nil {
		return m.Lte
	}
	return 0
}

func (m *SFixed64Rules) GetGt() int64 {
	if m != nil {
		return m.Gt
	}
	return 0
}

func (m *SFixed64Rules) GetGte() int64 {
	if m != nil {
		return m.Gte
	}
	return 0
}

func (m *SFixed64Rules) GetIn() []int64 {
	if m != nil {
		return m.In
	}
	return nil
}

func (m *SFixed64Rules) GetNotIn() []int64 {
	if m != nil {
		return m.NotIn
	}
	return nil
}

// Title
//
// x-displayName "displayname"
// BoolRules describes the constraints applied to bool values
type BoolRules struct {
	// Title
	//
	// x-displayName "displayname"
	// Const specifies that this field must be exactly the specified value
	Const bool `protobuf:"varint,1,opt,name=const,proto3" json:"const,omitempty"`
}

func (m *BoolRules) Reset()                    { *m = BoolRules{} }
func (*BoolRules) ProtoMessage()               {}
func (*BoolRules) Descriptor() ([]byte, []int) { return fileDescriptorValidate, []int{13} }

func (m *BoolRules) GetConst() bool {
	if m != nil {
		return m.Const
	}
	return false
}

// Title
//
// x-displayName "displayname"
// StringRules describe the constraints applied to string values
type StringRules struct {
	// Title
	//
	// x-displayName "displayname"
	// Const specifies that this field must be exactly the specified value
	Const string `protobuf:"bytes,1,opt,name=const,proto3" json:"const,omitempty"`
	// Title
	//
	// x-displayName "displayname"
	// Len specifies that this field must be the specified number of
	// characters (Unicode code points). Note that the number of
	// characters may differ from the number of bytes in the string.
	Len uint64 `protobuf:"varint,19,opt,name=len,proto3" json:"len,omitempty"`
	// Title
	//
	// x-displayName "displayname"
	// MinLen specifies that this field must be the specified number of
	// characters (Unicode code points) at a minimum. Note that the number of
	// characters may differ from the number of bytes in the string.
	MinLen uint64 `protobuf:"varint,2,opt,name=min_len,json=minLen,proto3" json:"min_len,omitempty"`
	// Title
	//
	// x-displayName "displayname"
	// MaxLen specifies that this field must be the specified number of
	// characters (Unicode code points) at a maximum. Note that the number of
	// characters may differ from the number of bytes in the string.
	MaxLen uint64 `protobuf:"varint,3,opt,name=max_len,json=maxLen,proto3" json:"max_len,omitempty"`
	// Title
	//
	// x-displayName "displayname"
	// LenBytes specifies that this field must be the specified number of bytes
	// at a minimum
	LenBytes uint64 `protobuf:"varint,20,opt,name=len_bytes,json=lenBytes,proto3" json:"len_bytes,omitempty"`
	// Title
	//
	// x-displayName "displayname"
	// MinBytes specifies that this field must be the specified number of bytes
	// at a minimum
	MinBytes uint64 `protobuf:"varint,4,opt,name=min_bytes,json=minBytes,proto3" json:"min_bytes,omitempty"`
	// Title
	//
	// x-displayName "displayname"
	// MaxBytes specifies that this field must be the specified number of bytes
	// at a maximum
	MaxBytes uint64 `protobuf:"varint,5,opt,name=max_bytes,json=maxBytes,proto3" json:"max_bytes,omitempty"`
	// Title
	//
	// x-displayName "displayname"
	// Pattern specifies that this field must match against the specified
	// regular expression (RE2 syntax). The included expression should elide
	// any delimiters.
	Pattern string `protobuf:"bytes,6,opt,name=pattern,proto3" json:"pattern,omitempty"`
	// Title
	//
	// x-displayName "displayname"
	// Prefix specifies that this field must have the specified substring at
	// the beginning of the string.
	Prefix string `protobuf:"bytes,7,opt,name=prefix,proto3" json:"prefix,omitempty"`
	// Title
	//
	// x-displayName "displayname"
	// Suffix specifies that this field must have the specified substring at
	// the end of the string.
	Suffix string `protobuf:"bytes,8,opt,name=suffix,proto3" json:"suffix,omitempty"`
	// Title
	//
	// x-displayName "displayname"
	// Contains specifies that this field must have the specified substring
	// anywhere in the string.
	Contains string `protobuf:"bytes,9,opt,name=contains,proto3" json:"contains,omitempty"`
	// Title
	//
	// x-displayName "displayname"
	// In specifies that this field must be equal to one of the specified
	// values
	In []string `protobuf:"bytes,10,rep,name=in" json:"in,omitempty"`
	// Title
	//
	// x-displayName "displayname"
	// NotIn specifies that this field cannot be equal to one of the specified
	// values
	NotIn []string `protobuf:"bytes,11,rep,name=not_in,json=notIn" json:"not_in,omitempty"`
	// Title
	//
	// x-displayName "displayname"
	// min_ip_prefix_length specifies the minimum length of a ipv4/ipv6 prefix
	MinIpPrefixLength int32 `protobuf:"varint,34,opt,name=min_ip_prefix_length,json=minIpPrefixLength,proto3" json:"min_ip_prefix_length,omitempty"`
	// Title
	//
	// x-displayName "displayname"
	// max_ip_prefix_length specifies the minimum length of a ipv4/ipv6 prefix
	MaxIpPrefixLength int32 `protobuf:"varint,35,opt,name=max_ip_prefix_length,json=maxIpPrefixLength,proto3" json:"max_ip_prefix_length,omitempty"`
	// Title
	//
	// x-displayName "displayname"
	// WellKnown rules provide advanced constraints against common string
	// patterns
	//
	// Types that are valid to be assigned to WellKnown:
	//	*StringRules_Email
	//	*StringRules_Hostname
	//	*StringRules_Ip
	//	*StringRules_Ipv4
	//	*StringRules_Ipv6
	//	*StringRules_Uri
	//	*StringRules_UriRef
	//	*StringRules_IpPrefix
	//	*StringRules_PortRange
	//	*StringRules_Mac
	//	*StringRules_Regex
	//	*StringRules_HttpHeaderField
	//	*StringRules_K8SLabelValue
	//	*StringRules_NotEmpty
	//	*StringRules_Hostport
	//	*StringRules_JsonPath
	//	*StringRules_Hex
	//	*StringRules_Ipv4Prefix
	//	*StringRules_Ipv6Prefix
	//	*StringRules_VhDomain
	//	*StringRules_VesObjectName
	//	*StringRules_IanaSvcName
	//	*StringRules_Dns_1123Label
	//	*StringRules_UnixFilePath
	//	*StringRules_PhoneNumber
	//	*StringRules_PortRangeList
	//	*StringRules_VhDomainNoPort
	//	*StringRules_HostnameOrIp
	//	*StringRules_K8SLabelSelector
	WellKnown isStringRules_WellKnown `protobuf_oneof:"well_known"`
}

func (m *StringRules) Reset()                    { *m = StringRules{} }
func (*StringRules) ProtoMessage()               {}
func (*StringRules) Descriptor() ([]byte, []int) { return fileDescriptorValidate, []int{14} }

type isStringRules_WellKnown interface {
	isStringRules_WellKnown()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type StringRules_Email struct {
	Email bool `protobuf:"varint,12,opt,name=email,proto3,oneof"`
}
type StringRules_Hostname struct {
	Hostname bool `protobuf:"varint,13,opt,name=hostname,proto3,oneof"`
}
type StringRules_Ip struct {
	Ip bool `protobuf:"varint,14,opt,name=ip,proto3,oneof"`
}
type StringRules_Ipv4 struct {
	Ipv4 bool `protobuf:"varint,15,opt,name=ipv4,proto3,oneof"`
}
type StringRules_Ipv6 struct {
	Ipv6 bool `protobuf:"varint,16,opt,name=ipv6,proto3,oneof"`
}
type StringRules_Uri struct {
	Uri bool `protobuf:"varint,17,opt,name=uri,proto3,oneof"`
}
type StringRules_UriRef struct {
	UriRef bool `protobuf:"varint,18,opt,name=uri_ref,json=uriRef,proto3,oneof"`
}
type StringRules_IpPrefix struct {
	IpPrefix bool `protobuf:"varint,21,opt,name=ip_prefix,json=ipPrefix,proto3,oneof"`
}
type StringRules_PortRange struct {
	PortRange bool `protobuf:"varint,22,opt,name=port_range,json=portRange,proto3,oneof"`
}
type StringRules_Mac struct {
	Mac bool `protobuf:"varint,23,opt,name=mac,proto3,oneof"`
}
type StringRules_Regex struct {
	Regex bool `protobuf:"varint,24,opt,name=regex,proto3,oneof"`
}
type StringRules_HttpHeaderField struct {
	HttpHeaderField bool `protobuf:"varint,25,opt,name=http_header_field,json=httpHeaderField,proto3,oneof"`
}
type StringRules_K8SLabelValue struct {
	K8SLabelValue bool `protobuf:"varint,26,opt,name=k8s_label_value,json=k8sLabelValue,proto3,oneof"`
}
type StringRules_NotEmpty struct {
	NotEmpty bool `protobuf:"varint,27,opt,name=not_empty,json=notEmpty,proto3,oneof"`
}
type StringRules_Hostport struct {
	Hostport bool `protobuf:"varint,28,opt,name=hostport,proto3,oneof"`
}
type StringRules_JsonPath struct {
	JsonPath bool `protobuf:"varint,29,opt,name=json_path,json=jsonPath,proto3,oneof"`
}
type StringRules_Hex struct {
	Hex bool `protobuf:"varint,30,opt,name=hex,proto3,oneof"`
}
type StringRules_Ipv4Prefix struct {
	Ipv4Prefix bool `protobuf:"varint,31,opt,name=ipv4_prefix,json=ipv4Prefix,proto3,oneof"`
}
type StringRules_Ipv6Prefix struct {
	Ipv6Prefix bool `protobuf:"varint,32,opt,name=ipv6_prefix,json=ipv6Prefix,proto3,oneof"`
}
type StringRules_VhDomain struct {
	VhDomain bool `protobuf:"varint,33,opt,name=vh_domain,json=vhDomain,proto3,oneof"`
}
type StringRules_VesObjectName struct {
	VesObjectName bool `protobuf:"varint,36,opt,name=ves_object_name,json=vesObjectName,proto3,oneof"`
}
type StringRules_IanaSvcName struct {
	IanaSvcName bool `protobuf:"varint,37,opt,name=iana_svc_name,json=ianaSvcName,proto3,oneof"`
}
type StringRules_Dns_1123Label struct {
	Dns_1123Label bool `protobuf:"varint,38,opt,name=dns_1123_label,json=dns1123Label,proto3,oneof"`
}
type StringRules_UnixFilePath struct {
	UnixFilePath bool `protobuf:"varint,39,opt,name=unix_file_path,json=unixFilePath,proto3,oneof"`
}
type StringRules_PhoneNumber struct {
	PhoneNumber bool `protobuf:"varint,40,opt,name=phone_number,json=phoneNumber,proto3,oneof"`
}
type StringRules_PortRangeList struct {
	PortRangeList bool `protobuf:"varint,41,opt,name=port_range_list,json=portRangeList,proto3,oneof"`
}
type StringRules_VhDomainNoPort struct {
	VhDomainNoPort bool `protobuf:"varint,42,opt,name=vh_domain_no_port,json=vhDomainNoPort,proto3,oneof"`
}
type StringRules_HostnameOrIp struct {
	HostnameOrIp bool `protobuf:"varint,43,opt,name=hostname_or_ip,json=hostnameOrIp,proto3,oneof"`
}
type StringRules_K8SLabelSelector struct {
	K8SLabelSelector bool `protobuf:"varint,44,opt,name=k8s_label_selector,json=k8sLabelSelector,proto3,oneof"`
}

func (*StringRules_Email) isStringRules_WellKnown()            {}
func (*StringRules_Hostname) isStringRules_WellKnown()         {}
func (*StringRules_Ip) isStringRules_WellKnown()               {}
func (*StringRules_Ipv4) isStringRules_WellKnown()             {}
func (*StringRules_Ipv6) isStringRules_WellKnown()             {}
func (*StringRules_Uri) isStringRules_WellKnown()              {}
func (*StringRules_UriRef) isStringRules_WellKnown()           {}
func (*StringRules_IpPrefix) isStringRules_WellKnown()         {}
func (*StringRules_PortRange) isStringRules_WellKnown()        {}
func (*StringRules_Mac) isStringRules_WellKnown()              {}
func (*StringRules_Regex) isStringRules_WellKnown()            {}
func (*StringRules_HttpHeaderField) isStringRules_WellKnown()  {}
func (*StringRules_K8SLabelValue) isStringRules_WellKnown()    {}
func (*StringRules_NotEmpty) isStringRules_WellKnown()         {}
func (*StringRules_Hostport) isStringRules_WellKnown()         {}
func (*StringRules_JsonPath) isStringRules_WellKnown()         {}
func (*StringRules_Hex) isStringRules_WellKnown()              {}
func (*StringRules_Ipv4Prefix) isStringRules_WellKnown()       {}
func (*StringRules_Ipv6Prefix) isStringRules_WellKnown()       {}
func (*StringRules_VhDomain) isStringRules_WellKnown()         {}
func (*StringRules_VesObjectName) isStringRules_WellKnown()    {}
func (*StringRules_IanaSvcName) isStringRules_WellKnown()      {}
func (*StringRules_Dns_1123Label) isStringRules_WellKnown()    {}
func (*StringRules_UnixFilePath) isStringRules_WellKnown()     {}
func (*StringRules_PhoneNumber) isStringRules_WellKnown()      {}
func (*StringRules_PortRangeList) isStringRules_WellKnown()    {}
func (*StringRules_VhDomainNoPort) isStringRules_WellKnown()   {}
func (*StringRules_HostnameOrIp) isStringRules_WellKnown()     {}
func (*StringRules_K8SLabelSelector) isStringRules_WellKnown() {}

func (m *StringRules) GetWellKnown() isStringRules_WellKnown {
	if m != nil {
		return m.WellKnown
	}
	return nil
}

func (m *StringRules) GetConst() string {
	if m != nil {
		return m.Const
	}
	return ""
}

func (m *StringRules) GetLen() uint64 {
	if m != nil {
		return m.Len
	}
	return 0
}

func (m *StringRules) GetMinLen() uint64 {
	if m != nil {
		return m.MinLen
	}
	return 0
}

func (m *StringRules) GetMaxLen() uint64 {
	if m != nil {
		return m.MaxLen
	}
	return 0
}

func (m *StringRules) GetLenBytes() uint64 {
	if m != nil {
		return m.LenBytes
	}
	return 0
}

func (m *StringRules) GetMinBytes() uint64 {
	if m != nil {
		return m.MinBytes
	}
	return 0
}

func (m *StringRules) GetMaxBytes() uint64 {
	if m != nil {
		return m.MaxBytes
	}
	return 0
}

func (m *StringRules) GetPattern() string {
	if m != nil {
		return m.Pattern
	}
	return ""
}

func (m *StringRules) GetPrefix() string {
	if m != nil {
		return m.Prefix
	}
	return ""
}

func (m *StringRules) GetSuffix() string {
	if m != nil {
		return m.Suffix
	}
	return ""
}

func (m *StringRules) GetContains() string {
	if m != nil {
		return m.Contains
	}
	return ""
}

func (m *StringRules) GetIn() []string {
	if m != nil {
		return m.In
	}
	return nil
}

func (m *StringRules) GetNotIn() []string {
	if m != nil {
		return m.NotIn
	}
	return nil
}

func (m *StringRules) GetMinIpPrefixLength() int32 {
	if m != nil {
		return m.MinIpPrefixLength
	}
	return 0
}

func (m *StringRules) GetMaxIpPrefixLength() int32 {
	if m != nil {
		return m.MaxIpPrefixLength
	}
	return 0
}

func (m *StringRules) GetEmail() bool {
	if x, ok := m.GetWellKnown().(*StringRules_Email); ok {
		return x.Email
	}
	return false
}

func (m *StringRules) GetHostname() bool {
	if x, ok := m.GetWellKnown().(*StringRules_Hostname); ok {
		return x.Hostname
	}
	return false
}

func (m *StringRules) GetIp() bool {
	if x, ok := m.GetWellKnown().(*StringRules_Ip); ok {
		return x.Ip
	}
	return false
}

func (m *StringRules) GetIpv4() bool {
	if x, ok := m.GetWellKnown().(*StringRules_Ipv4); ok {
		return x.Ipv4
	}
	return false
}

func (m *StringRules) GetIpv6() bool {
	if x, ok := m.GetWellKnown().(*StringRules_Ipv6); ok {
		return x.Ipv6
	}
	return false
}

func (m *StringRules) GetUri() bool {
	if x, ok := m.GetWellKnown().(*StringRules_Uri); ok {
		return x.Uri
	}
	return false
}

func (m *StringRules) GetUriRef() bool {
	if x, ok := m.GetWellKnown().(*StringRules_UriRef); ok {
		return x.UriRef
	}
	return false
}

func (m *StringRules) GetIpPrefix() bool {
	if x, ok := m.GetWellKnown().(*StringRules_IpPrefix); ok {
		return x.IpPrefix
	}
	return false
}

func (m *StringRules) GetPortRange() bool {
	if x, ok := m.GetWellKnown().(*StringRules_PortRange); ok {
		return x.PortRange
	}
	return false
}

func (m *StringRules) GetMac() bool {
	if x, ok := m.GetWellKnown().(*StringRules_Mac); ok {
		return x.Mac
	}
	return false
}

func (m *StringRules) GetRegex() bool {
	if x, ok := m.GetWellKnown().(*StringRules_Regex); ok {
		return x.Regex
	}
	return false
}

func (m *StringRules) GetHttpHeaderField() bool {
	if x, ok := m.GetWellKnown().(*StringRules_HttpHeaderField); ok {
		return x.HttpHeaderField
	}
	return false
}

func (m *StringRules) GetK8SLabelValue() bool {
	if x, ok := m.GetWellKnown().(*StringRules_K8SLabelValue); ok {
		return x.K8SLabelValue
	}
	return false
}

func (m *StringRules) GetNotEmpty() bool {
	if x, ok := m.GetWellKnown().(*StringRules_NotEmpty); ok {
		return x.NotEmpty
	}
	return false
}

func (m *StringRules) GetHostport() bool {
	if x, ok := m.GetWellKnown().(*StringRules_Hostport); ok {
		return x.Hostport
	}
	return false
}

func (m *StringRules) GetJsonPath() bool {
	if x, ok := m.GetWellKnown().(*StringRules_JsonPath); ok {
		return x.JsonPath
	}
	return false
}

func (m *StringRules) GetHex() bool {
	if x, ok := m.GetWellKnown().(*StringRules_Hex); ok {
		return x.Hex
	}
	return false
}

func (m *StringRules) GetIpv4Prefix() bool {
	if x, ok := m.GetWellKnown().(*StringRules_Ipv4Prefix); ok {
		return x.Ipv4Prefix
	}
	return false
}

func (m *StringRules) GetIpv6Prefix() bool {
	if x, ok := m.GetWellKnown().(*StringRules_Ipv6Prefix); ok {
		return x.Ipv6Prefix
	}
	return false
}

func (m *StringRules) GetVhDomain() bool {
	if x, ok := m.GetWellKnown().(*StringRules_VhDomain); ok {
		return x.VhDomain
	}
	return false
}

func (m *StringRules) GetVesObjectName() bool {
	if x, ok := m.GetWellKnown().(*StringRules_VesObjectName); ok {
		return x.VesObjectName
	}
	return false
}

func (m *StringRules) GetIanaSvcName() bool {
	if x, ok := m.GetWellKnown().(*StringRules_IanaSvcName); ok {
		return x.IanaSvcName
	}
	return false
}

func (m *StringRules) GetDns_1123Label() bool {
	if x, ok := m.GetWellKnown().(*StringRules_Dns_1123Label); ok {
		return x.Dns_1123Label
	}
	return false
}

func (m *StringRules) GetUnixFilePath() bool {
	if x, ok := m.GetWellKnown().(*StringRules_UnixFilePath); ok {
		return x.UnixFilePath
	}
	return false
}

func (m *StringRules) GetPhoneNumber() bool {
	if x, ok := m.GetWellKnown().(*StringRules_PhoneNumber); ok {
		return x.PhoneNumber
	}
	return false
}

func (m *StringRules) GetPortRangeList() bool {
	if x, ok := m.GetWellKnown().(*StringRules_PortRangeList); ok {
		return x.PortRangeList
	}
	return false
}

func (m *StringRules) GetVhDomainNoPort() bool {
	if x, ok := m.GetWellKnown().(*StringRules_VhDomainNoPort); ok {
		return x.VhDomainNoPort
	}
	return false
}

func (m *StringRules) GetHostnameOrIp() bool {
	if x, ok := m.GetWellKnown().(*StringRules_HostnameOrIp); ok {
		return x.HostnameOrIp
	}
	return false
}

func (m *StringRules) GetK8SLabelSelector() bool {
	if x, ok := m.GetWellKnown().(*StringRules_K8SLabelSelector); ok {
		return x.K8SLabelSelector
	}
	return false
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*StringRules) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _StringRules_OneofMarshaler, _StringRules_OneofUnmarshaler, _StringRules_OneofSizer, []interface{}{
		(*StringRules_Email)(nil),
		(*StringRules_Hostname)(nil),
		(*StringRules_Ip)(nil),
		(*StringRules_Ipv4)(nil),
		(*StringRules_Ipv6)(nil),
		(*StringRules_Uri)(nil),
		(*StringRules_UriRef)(nil),
		(*StringRules_IpPrefix)(nil),
		(*StringRules_PortRange)(nil),
		(*StringRules_Mac)(nil),
		(*StringRules_Regex)(nil),
		(*StringRules_HttpHeaderField)(nil),
		(*StringRules_K8SLabelValue)(nil),
		(*StringRules_NotEmpty)(nil),
		(*StringRules_Hostport)(nil),
		(*StringRules_JsonPath)(nil),
		(*StringRules_Hex)(nil),
		(*StringRules_Ipv4Prefix)(nil),
		(*StringRules_Ipv6Prefix)(nil),
		(*StringRules_VhDomain)(nil),
		(*StringRules_VesObjectName)(nil),
		(*StringRules_IanaSvcName)(nil),
		(*StringRules_Dns_1123Label)(nil),
		(*StringRules_UnixFilePath)(nil),
		(*StringRules_PhoneNumber)(nil),
		(*StringRules_PortRangeList)(nil),
		(*StringRules_VhDomainNoPort)(nil),
		(*StringRules_HostnameOrIp)(nil),
		(*StringRules_K8SLabelSelector)(nil),
	}
}

func _StringRules_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*StringRules)
	// well_known
	switch x := m.WellKnown.(type) {
	case *StringRules_Email:
		t := uint64(0)
		if x.Email {
			t = 1
		}
		_ = b.EncodeVarint(12<<3 | proto.WireVarint)
		_ = b.EncodeVarint(t)
	case *StringRules_Hostname:
		t := uint64(0)
		if x.Hostname {
			t = 1
		}
		_ = b.EncodeVarint(13<<3 | proto.WireVarint)
		_ = b.EncodeVarint(t)
	case *StringRules_Ip:
		t := uint64(0)
		if x.Ip {
			t = 1
		}
		_ = b.EncodeVarint(14<<3 | proto.WireVarint)
		_ = b.EncodeVarint(t)
	case *StringRules_Ipv4:
		t := uint64(0)
		if x.Ipv4 {
			t = 1
		}
		_ = b.EncodeVarint(15<<3 | proto.WireVarint)
		_ = b.EncodeVarint(t)
	case *StringRules_Ipv6:
		t := uint64(0)
		if x.Ipv6 {
			t = 1
		}
		_ = b.EncodeVarint(16<<3 | proto.WireVarint)
		_ = b.EncodeVarint(t)
	case *StringRules_Uri:
		t := uint64(0)
		if x.Uri {
			t = 1
		}
		_ = b.EncodeVarint(17<<3 | proto.WireVarint)
		_ = b.EncodeVarint(t)
	case *StringRules_UriRef:
		t := uint64(0)
		if x.UriRef {
			t = 1
		}
		_ = b.EncodeVarint(18<<3 | proto.WireVarint)
		_ = b.EncodeVarint(t)
	case *StringRules_IpPrefix:
		t := uint64(0)
		if x.IpPrefix {
			t = 1
		}
		_ = b.EncodeVarint(21<<3 | proto.WireVarint)
		_ = b.EncodeVarint(t)
	case *StringRules_PortRange:
		t := uint64(0)
		if x.PortRange {
			t = 1
		}
		_ = b.EncodeVarint(22<<3 | proto.WireVarint)
		_ = b.EncodeVarint(t)
	case *StringRules_Mac:
		t := uint64(0)
		if x.Mac {
			t = 1
		}
		_ = b.EncodeVarint(23<<3 | proto.WireVarint)
		_ = b.EncodeVarint(t)
	case *StringRules_Regex:
		t := uint64(0)
		if x.Regex {
			t = 1
		}
		_ = b.EncodeVarint(24<<3 | proto.WireVarint)
		_ = b.EncodeVarint(t)
	case *StringRules_HttpHeaderField:
		t := uint64(0)
		if x.HttpHeaderField {
			t = 1
		}
		_ = b.EncodeVarint(25<<3 | proto.WireVarint)
		_ = b.EncodeVarint(t)
	case *StringRules_K8SLabelValue:
		t := uint64(0)
		if x.K8SLabelValue {
			t = 1
		}
		_ = b.EncodeVarint(26<<3 | proto.WireVarint)
		_ = b.EncodeVarint(t)
	case *StringRules_NotEmpty:
		t := uint64(0)
		if x.NotEmpty {
			t = 1
		}
		_ = b.EncodeVarint(27<<3 | proto.WireVarint)
		_ = b.EncodeVarint(t)
	case *StringRules_Hostport:
		t := uint64(0)
		if x.Hostport {
			t = 1
		}
		_ = b.EncodeVarint(28<<3 | proto.WireVarint)
		_ = b.EncodeVarint(t)
	case *StringRules_JsonPath:
		t := uint64(0)
		if x.JsonPath {
			t = 1
		}
		_ = b.EncodeVarint(29<<3 | proto.WireVarint)
		_ = b.EncodeVarint(t)
	case *StringRules_Hex:
		t := uint64(0)
		if x.Hex {
			t = 1
		}
		_ = b.EncodeVarint(30<<3 | proto.WireVarint)
		_ = b.EncodeVarint(t)
	case *StringRules_Ipv4Prefix:
		t := uint64(0)
		if x.Ipv4Prefix {
			t = 1
		}
		_ = b.EncodeVarint(31<<3 | proto.WireVarint)
		_ = b.EncodeVarint(t)
	case *StringRules_Ipv6Prefix:
		t := uint64(0)
		if x.Ipv6Prefix {
			t = 1
		}
		_ = b.EncodeVarint(32<<3 | proto.WireVarint)
		_ = b.EncodeVarint(t)
	case *StringRules_VhDomain:
		t := uint64(0)
		if x.VhDomain {
			t = 1
		}
		_ = b.EncodeVarint(33<<3 | proto.WireVarint)
		_ = b.EncodeVarint(t)
	case *StringRules_VesObjectName:
		t := uint64(0)
		if x.VesObjectName {
			t = 1
		}
		_ = b.EncodeVarint(36<<3 | proto.WireVarint)
		_ = b.EncodeVarint(t)
	case *StringRules_IanaSvcName:
		t := uint64(0)
		if x.IanaSvcName {
			t = 1
		}
		_ = b.EncodeVarint(37<<3 | proto.WireVarint)
		_ = b.EncodeVarint(t)
	case *StringRules_Dns_1123Label:
		t := uint64(0)
		if x.Dns_1123Label {
			t = 1
		}
		_ = b.EncodeVarint(38<<3 | proto.WireVarint)
		_ = b.EncodeVarint(t)
	case *StringRules_UnixFilePath:
		t := uint64(0)
		if x.UnixFilePath {
			t = 1
		}
		_ = b.EncodeVarint(39<<3 | proto.WireVarint)
		_ = b.EncodeVarint(t)
	case *StringRules_PhoneNumber:
		t := uint64(0)
		if x.PhoneNumber {
			t = 1
		}
		_ = b.EncodeVarint(40<<3 | proto.WireVarint)
		_ = b.EncodeVarint(t)
	case *StringRules_PortRangeList:
		t := uint64(0)
		if x.PortRangeList {
			t = 1
		}
		_ = b.EncodeVarint(41<<3 | proto.WireVarint)
		_ = b.EncodeVarint(t)
	case *StringRules_VhDomainNoPort:
		t := uint64(0)
		if x.VhDomainNoPort {
			t = 1
		}
		_ = b.EncodeVarint(42<<3 | proto.WireVarint)
		_ = b.EncodeVarint(t)
	case *StringRules_HostnameOrIp:
		t := uint64(0)
		if x.HostnameOrIp {
			t = 1
		}
		_ = b.EncodeVarint(43<<3 | proto.WireVarint)
		_ = b.EncodeVarint(t)
	case *StringRules_K8SLabelSelector:
		t := uint64(0)
		if x.K8SLabelSelector {
			t = 1
		}
		_ = b.EncodeVarint(44<<3 | proto.WireVarint)
		_ = b.EncodeVarint(t)
	case nil:
	default:
		return fmt.Errorf("StringRules.WellKnown has unexpected type %T", x)
	}
	return nil
}

func _StringRules_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*StringRules)
	switch tag {
	case 12: // well_known.email
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.WellKnown = &StringRules_Email{x != 0}
		return true, err
	case 13: // well_known.hostname
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.WellKnown = &StringRules_Hostname{x != 0}
		return true, err
	case 14: // well_known.ip
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.WellKnown = &StringRules_Ip{x != 0}
		return true, err
	case 15: // well_known.ipv4
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.WellKnown = &StringRules_Ipv4{x != 0}
		return true, err
	case 16: // well_known.ipv6
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.WellKnown = &StringRules_Ipv6{x != 0}
		return true, err
	case 17: // well_known.uri
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.WellKnown = &StringRules_Uri{x != 0}
		return true, err
	case 18: // well_known.uri_ref
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.WellKnown = &StringRules_UriRef{x != 0}
		return true, err
	case 21: // well_known.ip_prefix
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.WellKnown = &StringRules_IpPrefix{x != 0}
		return true, err
	case 22: // well_known.port_range
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.WellKnown = &StringRules_PortRange{x != 0}
		return true, err
	case 23: // well_known.mac
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.WellKnown = &StringRules_Mac{x != 0}
		return true, err
	case 24: // well_known.regex
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.WellKnown = &StringRules_Regex{x != 0}
		return true, err
	case 25: // well_known.http_header_field
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.WellKnown = &StringRules_HttpHeaderField{x != 0}
		return true, err
	case 26: // well_known.k8s_label_value
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.WellKnown = &StringRules_K8SLabelValue{x != 0}
		return true, err
	case 27: // well_known.not_empty
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.WellKnown = &StringRules_NotEmpty{x != 0}
		return true, err
	case 28: // well_known.hostport
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.WellKnown = &StringRules_Hostport{x != 0}
		return true, err
	case 29: // well_known.json_path
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.WellKnown = &StringRules_JsonPath{x != 0}
		return true, err
	case 30: // well_known.hex
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.WellKnown = &StringRules_Hex{x != 0}
		return true, err
	case 31: // well_known.ipv4_prefix
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.WellKnown = &StringRules_Ipv4Prefix{x != 0}
		return true, err
	case 32: // well_known.ipv6_prefix
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.WellKnown = &StringRules_Ipv6Prefix{x != 0}
		return true, err
	case 33: // well_known.vh_domain
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.WellKnown = &StringRules_VhDomain{x != 0}
		return true, err
	case 36: // well_known.ves_object_name
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.WellKnown = &StringRules_VesObjectName{x != 0}
		return true, err
	case 37: // well_known.iana_svc_name
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.WellKnown = &StringRules_IanaSvcName{x != 0}
		return true, err
	case 38: // well_known.dns_1123_label
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.WellKnown = &StringRules_Dns_1123Label{x != 0}
		return true, err
	case 39: // well_known.unix_file_path
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.WellKnown = &StringRules_UnixFilePath{x != 0}
		return true, err
	case 40: // well_known.phone_number
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.WellKnown = &StringRules_PhoneNumber{x != 0}
		return true, err
	case 41: // well_known.port_range_list
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.WellKnown = &StringRules_PortRangeList{x != 0}
		return true, err
	case 42: // well_known.vh_domain_no_port
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.WellKnown = &StringRules_VhDomainNoPort{x != 0}
		return true, err
	case 43: // well_known.hostname_or_ip
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.WellKnown = &StringRules_HostnameOrIp{x != 0}
		return true, err
	case 44: // well_known.k8s_label_selector
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.WellKnown = &StringRules_K8SLabelSelector{x != 0}
		return true, err
	default:
		return false, nil
	}
}

func _StringRules_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*StringRules)
	// well_known
	switch x := m.WellKnown.(type) {
	case *StringRules_Email:
		n += proto.SizeVarint(12<<3 | proto.WireVarint)
		n += 1
	case *StringRules_Hostname:
		n += proto.SizeVarint(13<<3 | proto.WireVarint)
		n += 1
	case *StringRules_Ip:
		n += proto.SizeVarint(14<<3 | proto.WireVarint)
		n += 1
	case *StringRules_Ipv4:
		n += proto.SizeVarint(15<<3 | proto.WireVarint)
		n += 1
	case *StringRules_Ipv6:
		n += proto.SizeVarint(16<<3 | proto.WireVarint)
		n += 1
	case *StringRules_Uri:
		n += proto.SizeVarint(17<<3 | proto.WireVarint)
		n += 1
	case *StringRules_UriRef:
		n += proto.SizeVarint(18<<3 | proto.WireVarint)
		n += 1
	case *StringRules_IpPrefix:
		n += proto.SizeVarint(21<<3 | proto.WireVarint)
		n += 1
	case *StringRules_PortRange:
		n += proto.SizeVarint(22<<3 | proto.WireVarint)
		n += 1
	case *StringRules_Mac:
		n += proto.SizeVarint(23<<3 | proto.WireVarint)
		n += 1
	case *StringRules_Regex:
		n += proto.SizeVarint(24<<3 | proto.WireVarint)
		n += 1
	case *StringRules_HttpHeaderField:
		n += proto.SizeVarint(25<<3 | proto.WireVarint)
		n += 1
	case *StringRules_K8SLabelValue:
		n += proto.SizeVarint(26<<3 | proto.WireVarint)
		n += 1
	case *StringRules_NotEmpty:
		n += proto.SizeVarint(27<<3 | proto.WireVarint)
		n += 1
	case *StringRules_Hostport:
		n += proto.SizeVarint(28<<3 | proto.WireVarint)
		n += 1
	case *StringRules_JsonPath:
		n += proto.SizeVarint(29<<3 | proto.WireVarint)
		n += 1
	case *StringRules_Hex:
		n += proto.SizeVarint(30<<3 | proto.WireVarint)
		n += 1
	case *StringRules_Ipv4Prefix:
		n += proto.SizeVarint(31<<3 | proto.WireVarint)
		n += 1
	case *StringRules_Ipv6Prefix:
		n += proto.SizeVarint(32<<3 | proto.WireVarint)
		n += 1
	case *StringRules_VhDomain:
		n += proto.SizeVarint(33<<3 | proto.WireVarint)
		n += 1
	case *StringRules_VesObjectName:
		n += proto.SizeVarint(36<<3 | proto.WireVarint)
		n += 1
	case *StringRules_IanaSvcName:
		n += proto.SizeVarint(37<<3 | proto.WireVarint)
		n += 1
	case *StringRules_Dns_1123Label:
		n += proto.SizeVarint(38<<3 | proto.WireVarint)
		n += 1
	case *StringRules_UnixFilePath:
		n += proto.SizeVarint(39<<3 | proto.WireVarint)
		n += 1
	case *StringRules_PhoneNumber:
		n += proto.SizeVarint(40<<3 | proto.WireVarint)
		n += 1
	case *StringRules_PortRangeList:
		n += proto.SizeVarint(41<<3 | proto.WireVarint)
		n += 1
	case *StringRules_VhDomainNoPort:
		n += proto.SizeVarint(42<<3 | proto.WireVarint)
		n += 1
	case *StringRules_HostnameOrIp:
		n += proto.SizeVarint(43<<3 | proto.WireVarint)
		n += 1
	case *StringRules_K8SLabelSelector:
		n += proto.SizeVarint(44<<3 | proto.WireVarint)
		n += 1
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// Title
//
// x-displayName "displayname"
// BytesRules describe the constraints applied to bytes values
type BytesRules struct {
	// Title
	//
	// x-displayName "displayname"
	// Const specifies that this field must be exactly the specified value
	Const []byte `protobuf:"bytes,1,opt,name=const,proto3" json:"const,omitempty"`
	// Title
	//
	// x-displayName "displayname"
	// Len specifies that this field must be the specified number of bytes
	Len uint64 `protobuf:"varint,13,opt,name=len,proto3" json:"len,omitempty"`
	// Title
	//
	// x-displayName "displayname"
	// MinLen specifies that this field must be the specified number of bytes
	// at a minimum
	MinLen uint64 `protobuf:"varint,2,opt,name=min_len,json=minLen,proto3" json:"min_len,omitempty"`
	// Title
	//
	// x-displayName "displayname"
	// MaxLen specifies that this field must be the specified number of bytes
	// at a maximum
	MaxLen uint64 `protobuf:"varint,3,opt,name=max_len,json=maxLen,proto3" json:"max_len,omitempty"`
	// Title
	//
	// x-displayName "displayname"
	// Pattern specifes that this field must match against the specified
	// regular expression (RE2 syntax). The included expression should elide
	// any delimiters.
	Pattern string `protobuf:"bytes,4,opt,name=pattern,proto3" json:"pattern,omitempty"`
	// Title
	//
	// x-displayName "displayname"
	// Prefix specifies that this field must have the specified bytes at the
	// beginning of the string.
	Prefix []byte `protobuf:"bytes,5,opt,name=prefix,proto3" json:"prefix,omitempty"`
	// Title
	//
	// x-displayName "displayname"
	// Suffix specifies that this field must have the specified bytes at the
	// end of the string.
	Suffix []byte `protobuf:"bytes,6,opt,name=suffix,proto3" json:"suffix,omitempty"`
	// Title
	//
	// x-displayName "displayname"
	// Contains specifies that this field must have the specified bytes
	// anywhere in the string.
	Contains []byte `protobuf:"bytes,7,opt,name=contains,proto3" json:"contains,omitempty"`
	// Title
	//
	// x-displayName "displayname"
	// In specifies that this field must be equal to one of the specified
	// values
	In [][]byte `protobuf:"bytes,8,rep,name=in" json:"in,omitempty"`
	// Title
	//
	// x-displayName "displayname"
	// NotIn specifies that this field cannot be equal to one of the specified
	// values
	NotIn [][]byte `protobuf:"bytes,9,rep,name=not_in,json=notIn" json:"not_in,omitempty"`
	// Title
	//
	// x-displayName "displayname"
	// WellKnown rules provide advanced constraints against common byte
	// patterns
	//
	// Types that are valid to be assigned to WellKnown:
	//	*BytesRules_Ip
	//	*BytesRules_Ipv4
	//	*BytesRules_Ipv6
	WellKnown isBytesRules_WellKnown `protobuf_oneof:"well_known"`
}

func (m *BytesRules) Reset()                    { *m = BytesRules{} }
func (*BytesRules) ProtoMessage()               {}
func (*BytesRules) Descriptor() ([]byte, []int) { return fileDescriptorValidate, []int{15} }

type isBytesRules_WellKnown interface {
	isBytesRules_WellKnown()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type BytesRules_Ip struct {
	Ip bool `protobuf:"varint,10,opt,name=ip,proto3,oneof"`
}
type BytesRules_Ipv4 struct {
	Ipv4 bool `protobuf:"varint,11,opt,name=ipv4,proto3,oneof"`
}
type BytesRules_Ipv6 struct {
	Ipv6 bool `protobuf:"varint,12,opt,name=ipv6,proto3,oneof"`
}

func (*BytesRules_Ip) isBytesRules_WellKnown()   {}
func (*BytesRules_Ipv4) isBytesRules_WellKnown() {}
func (*BytesRules_Ipv6) isBytesRules_WellKnown() {}

func (m *BytesRules) GetWellKnown() isBytesRules_WellKnown {
	if m != nil {
		return m.WellKnown
	}
	return nil
}

func (m *BytesRules) GetConst() []byte {
	if m != nil {
		return m.Const
	}
	return nil
}

func (m *BytesRules) GetLen() uint64 {
	if m != nil {
		return m.Len
	}
	return 0
}

func (m *BytesRules) GetMinLen() uint64 {
	if m != nil {
		return m.MinLen
	}
	return 0
}

func (m *BytesRules) GetMaxLen() uint64 {
	if m != nil {
		return m.MaxLen
	}
	return 0
}

func (m *BytesRules) GetPattern() string {
	if m != nil {
		return m.Pattern
	}
	return ""
}

func (m *BytesRules) GetPrefix() []byte {
	if m != nil {
		return m.Prefix
	}
	return nil
}

func (m *BytesRules) GetSuffix() []byte {
	if m != nil {
		return m.Suffix
	}
	return nil
}

func (m *BytesRules) GetContains() []byte {
	if m != nil {
		return m.Contains
	}
	return nil
}

func (m *BytesRules) GetIn() [][]byte {
	if m != nil {
		return m.In
	}
	return nil
}

func (m *BytesRules) GetNotIn() [][]byte {
	if m != nil {
		return m.NotIn
	}
	return nil
}

func (m *BytesRules) GetIp() bool {
	if x, ok := m.GetWellKnown().(*BytesRules_Ip); ok {
		return x.Ip
	}
	return false
}

func (m *BytesRules) GetIpv4() bool {
	if x, ok := m.GetWellKnown().(*BytesRules_Ipv4); ok {
		return x.Ipv4
	}
	return false
}

func (m *BytesRules) GetIpv6() bool {
	if x, ok := m.GetWellKnown().(*BytesRules_Ipv6); ok {
		return x.Ipv6
	}
	return false
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*BytesRules) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _BytesRules_OneofMarshaler, _BytesRules_OneofUnmarshaler, _BytesRules_OneofSizer, []interface{}{
		(*BytesRules_Ip)(nil),
		(*BytesRules_Ipv4)(nil),
		(*BytesRules_Ipv6)(nil),
	}
}

func _BytesRules_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*BytesRules)
	// well_known
	switch x := m.WellKnown.(type) {
	case *BytesRules_Ip:
		t := uint64(0)
		if x.Ip {
			t = 1
		}
		_ = b.EncodeVarint(10<<3 | proto.WireVarint)
		_ = b.EncodeVarint(t)
	case *BytesRules_Ipv4:
		t := uint64(0)
		if x.Ipv4 {
			t = 1
		}
		_ = b.EncodeVarint(11<<3 | proto.WireVarint)
		_ = b.EncodeVarint(t)
	case *BytesRules_Ipv6:
		t := uint64(0)
		if x.Ipv6 {
			t = 1
		}
		_ = b.EncodeVarint(12<<3 | proto.WireVarint)
		_ = b.EncodeVarint(t)
	case nil:
	default:
		return fmt.Errorf("BytesRules.WellKnown has unexpected type %T", x)
	}
	return nil
}

func _BytesRules_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*BytesRules)
	switch tag {
	case 10: // well_known.ip
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.WellKnown = &BytesRules_Ip{x != 0}
		return true, err
	case 11: // well_known.ipv4
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.WellKnown = &BytesRules_Ipv4{x != 0}
		return true, err
	case 12: // well_known.ipv6
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.WellKnown = &BytesRules_Ipv6{x != 0}
		return true, err
	default:
		return false, nil
	}
}

func _BytesRules_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*BytesRules)
	// well_known
	switch x := m.WellKnown.(type) {
	case *BytesRules_Ip:
		n += proto.SizeVarint(10<<3 | proto.WireVarint)
		n += 1
	case *BytesRules_Ipv4:
		n += proto.SizeVarint(11<<3 | proto.WireVarint)
		n += 1
	case *BytesRules_Ipv6:
		n += proto.SizeVarint(12<<3 | proto.WireVarint)
		n += 1
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// Title
//
// x-displayName "displayname"
// EnumRules describe the constraints applied to enum values
type EnumRules struct {
	// Title
	//
	// x-displayName "displayname"
	// Const specifies that this field must be exactly the specified value
	Const int32 `protobuf:"varint,1,opt,name=const,proto3" json:"const,omitempty"`
	// Title
	//
	// x-displayName "displayname"
	// DefinedOnly specifies that this field must be only one of the defined
	// values for this enum, failing on any undefined value.
	DefinedOnly bool `protobuf:"varint,2,opt,name=defined_only,json=definedOnly,proto3" json:"defined_only,omitempty"`
	// Title
	//
	// x-displayName "displayname"
	// In specifies that this field must be equal to one of the specified
	// values
	In []int32 `protobuf:"varint,3,rep,packed,name=in" json:"in,omitempty"`
	// Title
	//
	// x-displayName "displayname"
	// NotIn specifies that this field cannot be equal to one of the specified
	// values
	NotIn []int32 `protobuf:"varint,4,rep,packed,name=not_in,json=notIn" json:"not_in,omitempty"`
}

func (m *EnumRules) Reset()                    { *m = EnumRules{} }
func (*EnumRules) ProtoMessage()               {}
func (*EnumRules) Descriptor() ([]byte, []int) { return fileDescriptorValidate, []int{16} }

func (m *EnumRules) GetConst() int32 {
	if m != nil {
		return m.Const
	}
	return 0
}

func (m *EnumRules) GetDefinedOnly() bool {
	if m != nil {
		return m.DefinedOnly
	}
	return false
}

func (m *EnumRules) GetIn() []int32 {
	if m != nil {
		return m.In
	}
	return nil
}

func (m *EnumRules) GetNotIn() []int32 {
	if m != nil {
		return m.NotIn
	}
	return nil
}

// Title
//
// x-displayName "displayname"
// MessageRules describe the constraints applied to embedded message values.
// For message-type fields, validation is performed recursively.
type MessageRules struct {
	// Title
	//
	// x-displayName "displayname"
	// Skip specifies that the validation rules of this field should not be
	// evaluated
	Skip bool `protobuf:"varint,1,opt,name=skip,proto3" json:"skip,omitempty"`
	// Title
	//
	// x-displayName "displayname"
	// Required specifies that this field must be set
	Required bool `protobuf:"varint,2,opt,name=required,proto3" json:"required,omitempty"`
}

func (m *MessageRules) Reset()                    { *m = MessageRules{} }
func (*MessageRules) ProtoMessage()               {}
func (*MessageRules) Descriptor() ([]byte, []int) { return fileDescriptorValidate, []int{17} }

func (m *MessageRules) GetSkip() bool {
	if m != nil {
		return m.Skip
	}
	return false
}

func (m *MessageRules) GetRequired() bool {
	if m != nil {
		return m.Required
	}
	return false
}

// Title
//
// x-displayName "displayname"
// RepeatedRules describe the constraints applied to repeated values
type RepeatedRules struct {
	// min_items
	//
	// x-displayName "Minimum Items"
	// MinItems specifies that this field must have the specified number of
	// items at a minimum
	MinItems uint64 `protobuf:"varint,1,opt,name=min_items,json=minItems,proto3" json:"min_items,omitempty"`
	// max_items
	//
	// x-displayName "Maximum Items"
	// MaxItems specifies that this field must have the specified number of
	// items at a maximum
	MaxItems uint64 `protobuf:"varint,2,opt,name=max_items,json=maxItems,proto3" json:"max_items,omitempty"`
	// unique
	//
	// x-displayName "Unique"
	// Unique specifies that all elements in this field must be unique.
	Unique bool `protobuf:"varint,3,opt,name=unique,proto3" json:"unique,omitempty"`
	// items
	//
	// x-displayName "Items"
	// Items specifies the contraints to be applied to each item in the field.
	// Repeated message fields will still execute validation against each item
	// unless skip is specified here.
	Items *FieldRules `protobuf:"bytes,4,opt,name=items" json:"items,omitempty"`
	// num_items
	//
	// x-displayName "Number of Items"
	// NumItems specifies that the number of items in this field must be one of
	// the values specified in the comma-separated list of values/ranges for e.g.
	// "1,3" or "1,3,5-15"
	NumItems string `protobuf:"bytes,5,opt,name=num_items,json=numItems,proto3" json:"num_items,omitempty"`
	// unique_metadata_name
	//
	// x-displayName "Unique Metadata Name"
	// UniqueMetadataName specifies that all the elements in the repeated field
	// have a unique value of "name" sub-subfield of their "metadata" subfield,
	// with the latter being of type MessageMetaType. This constraint is only
	// applicable to message types.
	// For example, when used for a repeated field of message Foobar, it means
	// that all Foobar.metadata.name values must be unique where the "metadata"
	// field is of type MessageMetaType.
	UniqueMetadataName bool `protobuf:"varint,6,opt,name=unique_metadata_name,json=uniqueMetadataName,proto3" json:"unique_metadata_name,omitempty"`
}

func (m *RepeatedRules) Reset()                    { *m = RepeatedRules{} }
func (*RepeatedRules) ProtoMessage()               {}
func (*RepeatedRules) Descriptor() ([]byte, []int) { return fileDescriptorValidate, []int{18} }

func (m *RepeatedRules) GetMinItems() uint64 {
	if m != nil {
		return m.MinItems
	}
	return 0
}

func (m *RepeatedRules) GetMaxItems() uint64 {
	if m != nil {
		return m.MaxItems
	}
	return 0
}

func (m *RepeatedRules) GetUnique() bool {
	if m != nil {
		return m.Unique
	}
	return false
}

func (m *RepeatedRules) GetItems() *FieldRules {
	if m != nil {
		return m.Items
	}
	return nil
}

func (m *RepeatedRules) GetNumItems() string {
	if m != nil {
		return m.NumItems
	}
	return ""
}

func (m *RepeatedRules) GetUniqueMetadataName() bool {
	if m != nil {
		return m.UniqueMetadataName
	}
	return false
}

// Title
//
// x-displayName "displayname"
// MapRules describe the constraints applied to map values
type MapRules struct {
	// Title
	//
	// x-displayName "displayname"
	// MinPairs specifies that this field must have the specified number of
	// KVs at a minimum
	MinPairs uint64 `protobuf:"varint,1,opt,name=min_pairs,json=minPairs,proto3" json:"min_pairs,omitempty"`
	// Title
	//
	// x-displayName "displayname"
	// MaxPairs specifies that this field must have the specified number of
	// KVs at a maximum
	MaxPairs uint64 `protobuf:"varint,2,opt,name=max_pairs,json=maxPairs,proto3" json:"max_pairs,omitempty"`
	// Title
	//
	// x-displayName "displayname"
	// NoSparse specifies values in this field cannot be unset. This only
	// applies to map's with message value types.
	NoSparse bool `protobuf:"varint,3,opt,name=no_sparse,json=noSparse,proto3" json:"no_sparse,omitempty"`
	// Title
	//
	// x-displayName "displayname"
	// Keys specifies the constraints to be applied to each key in the field.
	Keys *FieldRules `protobuf:"bytes,4,opt,name=keys" json:"keys,omitempty"`
	// Title
	//
	// x-displayName "displayname"
	// Values specifies the constraints to be applied to the value of each key
	// in the field. Message values will still have their validations evaluated
	// unless skip is specified here.
	Values *FieldRules `protobuf:"bytes,5,opt,name=values" json:"values,omitempty"`
	// unique_values
	//
	// x-displayName "Unique Values"
	// Unique values specifies that the map values for all keys must be unique.
	UniqueValues bool `protobuf:"varint,6,opt,name=unique_values,json=uniqueValues,proto3" json:"unique_values,omitempty"`
}

func (m *MapRules) Reset()                    { *m = MapRules{} }
func (*MapRules) ProtoMessage()               {}
func (*MapRules) Descriptor() ([]byte, []int) { return fileDescriptorValidate, []int{19} }

func (m *MapRules) GetMinPairs() uint64 {
	if m != nil {
		return m.MinPairs
	}
	return 0
}

func (m *MapRules) GetMaxPairs() uint64 {
	if m != nil {
		return m.MaxPairs
	}
	return 0
}

func (m *MapRules) GetNoSparse() bool {
	if m != nil {
		return m.NoSparse
	}
	return false
}

func (m *MapRules) GetKeys() *FieldRules {
	if m != nil {
		return m.Keys
	}
	return nil
}

func (m *MapRules) GetValues() *FieldRules {
	if m != nil {
		return m.Values
	}
	return nil
}

func (m *MapRules) GetUniqueValues() bool {
	if m != nil {
		return m.UniqueValues
	}
	return false
}

// Title
//
// x-displayName "displayname"
// AnyRules describe constraints applied exclusively to the
// google.protobuf.Any well-known type
type AnyRules struct {
	// Title
	//
	// x-displayName "displayname"
	// Required specifies that this field must be set
	Required bool `protobuf:"varint,1,opt,name=required,proto3" json:"required,omitempty"`
	// Title
	//
	// x-displayName "displayname"
	// In specifies that this field's type_url must be equal to one of the
	// specified values.
	In []string `protobuf:"bytes,2,rep,name=in" json:"in,omitempty"`
	// Title
	//
	// x-displayName "displayname"
	// NotIn specifies that this field's type_url must not be equal to any of
	// the specified values.
	NotIn []string `protobuf:"bytes,3,rep,name=not_in,json=notIn" json:"not_in,omitempty"`
}

func (m *AnyRules) Reset()                    { *m = AnyRules{} }
func (*AnyRules) ProtoMessage()               {}
func (*AnyRules) Descriptor() ([]byte, []int) { return fileDescriptorValidate, []int{20} }

func (m *AnyRules) GetRequired() bool {
	if m != nil {
		return m.Required
	}
	return false
}

func (m *AnyRules) GetIn() []string {
	if m != nil {
		return m.In
	}
	return nil
}

func (m *AnyRules) GetNotIn() []string {
	if m != nil {
		return m.NotIn
	}
	return nil
}

// Title
//
// x-displayName "displayname"
// DurationRules describe the constraints applied exclusively to the
// google.protobuf.Duration well-known type
type DurationRules struct {
	// Title
	//
	// x-displayName "displayname"
	// Required specifies that this field must be set
	Required bool `protobuf:"varint,1,opt,name=required,proto3" json:"required,omitempty"`
	// Title
	//
	// x-displayName "displayname"
	// Const specifies that this field must be exactly the specified value
	Const *google_protobuf2.Duration `protobuf:"bytes,2,opt,name=const" json:"const,omitempty"`
	// Title
	//
	// x-displayName "displayname"
	// Lt specifies that this field must be less than the specified value,
	// exclusive
	Lt *google_protobuf2.Duration `protobuf:"bytes,3,opt,name=lt" json:"lt,omitempty"`
	// Title
	//
	// x-displayName "displayname"
	// Lt specifies that this field must be less than the specified value,
	// inclusive
	Lte *google_protobuf2.Duration `protobuf:"bytes,4,opt,name=lte" json:"lte,omitempty"`
	// Title
	//
	// x-displayName "displayname"
	// Gt specifies that this field must be greater than the specified value,
	// exclusive
	Gt *google_protobuf2.Duration `protobuf:"bytes,5,opt,name=gt" json:"gt,omitempty"`
	// Title
	//
	// x-displayName "displayname"
	// Gte specifies that this field must be greater than the specified value,
	// inclusive
	Gte *google_protobuf2.Duration `protobuf:"bytes,6,opt,name=gte" json:"gte,omitempty"`
	// Title
	//
	// x-displayName "displayname"
	// In specifies that this field must be equal to one of the specified
	// values
	In []*google_protobuf2.Duration `protobuf:"bytes,7,rep,name=in" json:"in,omitempty"`
	// Title
	//
	// x-displayName "displayname"
	// NotIn specifies that this field cannot be equal to one of the specified
	// values
	NotIn []*google_protobuf2.Duration `protobuf:"bytes,8,rep,name=not_in,json=notIn" json:"not_in,omitempty"`
}

func (m *DurationRules) Reset()                    { *m = DurationRules{} }
func (*DurationRules) ProtoMessage()               {}
func (*DurationRules) Descriptor() ([]byte, []int) { return fileDescriptorValidate, []int{21} }

func (m *DurationRules) GetRequired() bool {
	if m != nil {
		return m.Required
	}
	return false
}

func (m *DurationRules) GetConst() *google_protobuf2.Duration {
	if m != nil {
		return m.Const
	}
	return nil
}

func (m *DurationRules) GetLt() *google_protobuf2.Duration {
	if m != nil {
		return m.Lt
	}
	return nil
}

func (m *DurationRules) GetLte() *google_protobuf2.Duration {
	if m != nil {
		return m.Lte
	}
	return nil
}

func (m *DurationRules) GetGt() *google_protobuf2.Duration {
	if m != nil {
		return m.Gt
	}
	return nil
}

func (m *DurationRules) GetGte() *google_protobuf2.Duration {
	if m != nil {
		return m.Gte
	}
	return nil
}

func (m *DurationRules) GetIn() []*google_protobuf2.Duration {
	if m != nil {
		return m.In
	}
	return nil
}

func (m *DurationRules) GetNotIn() []*google_protobuf2.Duration {
	if m != nil {
		return m.NotIn
	}
	return nil
}

// Title
//
// x-displayName "displayname"
// TimestampRules describe the constraints applied exclusively to the
// google.protobuf.Timestamp well-known type
type TimestampRules struct {
	// Title
	//
	// x-displayName "displayname"
	// Required specifies that this field must be set
	Required bool `protobuf:"varint,1,opt,name=required,proto3" json:"required,omitempty"`
	// Title
	//
	// x-displayName "displayname"
	// Const specifies that this field must be exactly the specified value
	Const *google_protobuf3.Timestamp `protobuf:"bytes,2,opt,name=const" json:"const,omitempty"`
	// Title
	//
	// x-displayName "displayname"
	// Lt specifies that this field must be less than the specified value,
	// exclusive
	Lt *google_protobuf3.Timestamp `protobuf:"bytes,3,opt,name=lt" json:"lt,omitempty"`
	// Title
	//
	// x-displayName "displayname"
	// Lte specifies that this field must be less than the specified value,
	// inclusive
	Lte *google_protobuf3.Timestamp `protobuf:"bytes,4,opt,name=lte" json:"lte,omitempty"`
	// Title
	//
	// x-displayName "displayname"
	// Gt specifies that this field must be greater than the specified value,
	// exclusive
	Gt *google_protobuf3.Timestamp `protobuf:"bytes,5,opt,name=gt" json:"gt,omitempty"`
	// Title
	//
	// x-displayName "displayname"
	// Gte specifies that this field must be greater than the specified value,
	// inclusive
	Gte *google_protobuf3.Timestamp `protobuf:"bytes,6,opt,name=gte" json:"gte,omitempty"`
	// Title
	//
	// x-displayName "displayname"
	// LtNow specifies that this must be less than the current time. LtNow
	// can only be used with the Within rule.
	LtNow bool `protobuf:"varint,7,opt,name=lt_now,json=ltNow,proto3" json:"lt_now,omitempty"`
	// Title
	//
	// x-displayName "displayname"
	// GtNow specifies that this must be greater than the current time. GtNow
	// can only be used with the Within rule.
	GtNow bool `protobuf:"varint,8,opt,name=gt_now,json=gtNow,proto3" json:"gt_now,omitempty"`
	// Title
	//
	// x-displayName "displayname"
	// Within specifies that this field must be within this duration of the
	// current time. This constraint can be used alone or with the LtNow and
	// GtNow rules.
	Within *google_protobuf2.Duration `protobuf:"bytes,9,opt,name=within" json:"within,omitempty"`
}

func (m *TimestampRules) Reset()                    { *m = TimestampRules{} }
func (*TimestampRules) ProtoMessage()               {}
func (*TimestampRules) Descriptor() ([]byte, []int) { return fileDescriptorValidate, []int{22} }

func (m *TimestampRules) GetRequired() bool {
	if m != nil {
		return m.Required
	}
	return false
}

func (m *TimestampRules) GetConst() *google_protobuf3.Timestamp {
	if m != nil {
		return m.Const
	}
	return nil
}

func (m *TimestampRules) GetLt() *google_protobuf3.Timestamp {
	if m != nil {
		return m.Lt
	}
	return nil
}

func (m *TimestampRules) GetLte() *google_protobuf3.Timestamp {
	if m != nil {
		return m.Lte
	}
	return nil
}

func (m *TimestampRules) GetGt() *google_protobuf3.Timestamp {
	if m != nil {
		return m.Gt
	}
	return nil
}

func (m *TimestampRules) GetGte() *google_protobuf3.Timestamp {
	if m != nil {
		return m.Gte
	}
	return nil
}

func (m *TimestampRules) GetLtNow() bool {
	if m != nil {
		return m.LtNow
	}
	return false
}

func (m *TimestampRules) GetGtNow() bool {
	if m != nil {
		return m.GtNow
	}
	return false
}

func (m *TimestampRules) GetWithin() *google_protobuf2.Duration {
	if m != nil {
		return m.Within
	}
	return nil
}

var E_Disabled = &proto.ExtensionDesc{
	ExtendedType:  (*google_protobuf.MessageOptions)(nil),
	ExtensionType: (*bool)(nil),
	Field:         919191,
	Name:          "ves.io.schema.disabled",
	Tag:           "varint,919191,opt,name=disabled",
	Filename:      "ves.io/schema/validate.proto",
}

var E_Required = &proto.ExtensionDesc{
	ExtendedType:  (*google_protobuf.OneofOptions)(nil),
	ExtensionType: (*bool)(nil),
	Field:         919191,
	Name:          "ves.io.schema.required",
	Tag:           "varint,919191,opt,name=required",
	Filename:      "ves.io/schema/validate.proto",
}

var E_Rules = &proto.ExtensionDesc{
	ExtendedType:  (*google_protobuf.FieldOptions)(nil),
	ExtensionType: (*FieldRules)(nil),
	Field:         919191,
	Name:          "ves.io.schema.rules",
	Tag:           "bytes,919191,opt,name=rules",
	Filename:      "ves.io/schema/validate.proto",
}

func init() {
	proto.RegisterType((*FieldRules)(nil), "ves.io.schema.FieldRules")
	proto.RegisterType((*FloatRules)(nil), "ves.io.schema.FloatRules")
	proto.RegisterType((*DoubleRules)(nil), "ves.io.schema.DoubleRules")
	proto.RegisterType((*Int32Rules)(nil), "ves.io.schema.Int32Rules")
	proto.RegisterType((*Int64Rules)(nil), "ves.io.schema.Int64Rules")
	proto.RegisterType((*UInt32Rules)(nil), "ves.io.schema.UInt32Rules")
	proto.RegisterType((*UInt64Rules)(nil), "ves.io.schema.UInt64Rules")
	proto.RegisterType((*SInt32Rules)(nil), "ves.io.schema.SInt32Rules")
	proto.RegisterType((*SInt64Rules)(nil), "ves.io.schema.SInt64Rules")
	proto.RegisterType((*Fixed32Rules)(nil), "ves.io.schema.Fixed32Rules")
	proto.RegisterType((*Fixed64Rules)(nil), "ves.io.schema.Fixed64Rules")
	proto.RegisterType((*SFixed32Rules)(nil), "ves.io.schema.SFixed32Rules")
	proto.RegisterType((*SFixed64Rules)(nil), "ves.io.schema.SFixed64Rules")
	proto.RegisterType((*BoolRules)(nil), "ves.io.schema.BoolRules")
	proto.RegisterType((*StringRules)(nil), "ves.io.schema.StringRules")
	proto.RegisterType((*BytesRules)(nil), "ves.io.schema.BytesRules")
	proto.RegisterType((*EnumRules)(nil), "ves.io.schema.EnumRules")
	proto.RegisterType((*MessageRules)(nil), "ves.io.schema.MessageRules")
	proto.RegisterType((*RepeatedRules)(nil), "ves.io.schema.RepeatedRules")
	proto.RegisterType((*MapRules)(nil), "ves.io.schema.MapRules")
	proto.RegisterType((*AnyRules)(nil), "ves.io.schema.AnyRules")
	proto.RegisterType((*DurationRules)(nil), "ves.io.schema.DurationRules")
	proto.RegisterType((*TimestampRules)(nil), "ves.io.schema.TimestampRules")
	proto.RegisterExtension(E_Disabled)
	proto.RegisterExtension(E_Required)
	proto.RegisterExtension(E_Rules)
}
func (this *FieldRules) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*FieldRules)
	if !ok {
		that2, ok := that.(FieldRules)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.Type == nil {
		if this.Type != nil {
			return false
		}
	} else if this.Type == nil {
		return false
	} else if !this.Type.Equal(that1.Type) {
		return false
	}
	return true
}
func (this *FieldRules_Float) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*FieldRules_Float)
	if !ok {
		that2, ok := that.(FieldRules_Float)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Float.Equal(that1.Float) {
		return false
	}
	return true
}
func (this *FieldRules_Double) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*FieldRules_Double)
	if !ok {
		that2, ok := that.(FieldRules_Double)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Double.Equal(that1.Double) {
		return false
	}
	return true
}
func (this *FieldRules_Int32) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*FieldRules_Int32)
	if !ok {
		that2, ok := that.(FieldRules_Int32)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Int32.Equal(that1.Int32) {
		return false
	}
	return true
}
func (this *FieldRules_Int64) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*FieldRules_Int64)
	if !ok {
		that2, ok := that.(FieldRules_Int64)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Int64.Equal(that1.Int64) {
		return false
	}
	return true
}
func (this *FieldRules_Uint32) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*FieldRules_Uint32)
	if !ok {
		that2, ok := that.(FieldRules_Uint32)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Uint32.Equal(that1.Uint32) {
		return false
	}
	return true
}
func (this *FieldRules_Uint64) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*FieldRules_Uint64)
	if !ok {
		that2, ok := that.(FieldRules_Uint64)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Uint64.Equal(that1.Uint64) {
		return false
	}
	return true
}
func (this *FieldRules_Sint32) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*FieldRules_Sint32)
	if !ok {
		that2, ok := that.(FieldRules_Sint32)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Sint32.Equal(that1.Sint32) {
		return false
	}
	return true
}
func (this *FieldRules_Sint64) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*FieldRules_Sint64)
	if !ok {
		that2, ok := that.(FieldRules_Sint64)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Sint64.Equal(that1.Sint64) {
		return false
	}
	return true
}
func (this *FieldRules_Fixed32) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*FieldRules_Fixed32)
	if !ok {
		that2, ok := that.(FieldRules_Fixed32)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Fixed32.Equal(that1.Fixed32) {
		return false
	}
	return true
}
func (this *FieldRules_Fixed64) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*FieldRules_Fixed64)
	if !ok {
		that2, ok := that.(FieldRules_Fixed64)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Fixed64.Equal(that1.Fixed64) {
		return false
	}
	return true
}
func (this *FieldRules_Sfixed32) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*FieldRules_Sfixed32)
	if !ok {
		that2, ok := that.(FieldRules_Sfixed32)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Sfixed32.Equal(that1.Sfixed32) {
		return false
	}
	return true
}
func (this *FieldRules_Sfixed64) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*FieldRules_Sfixed64)
	if !ok {
		that2, ok := that.(FieldRules_Sfixed64)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Sfixed64.Equal(that1.Sfixed64) {
		return false
	}
	return true
}
func (this *FieldRules_Bool) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*FieldRules_Bool)
	if !ok {
		that2, ok := that.(FieldRules_Bool)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Bool.Equal(that1.Bool) {
		return false
	}
	return true
}
func (this *FieldRules_String_) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*FieldRules_String_)
	if !ok {
		that2, ok := that.(FieldRules_String_)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.String_.Equal(that1.String_) {
		return false
	}
	return true
}
func (this *FieldRules_Bytes) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*FieldRules_Bytes)
	if !ok {
		that2, ok := that.(FieldRules_Bytes)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Bytes.Equal(that1.Bytes) {
		return false
	}
	return true
}
func (this *FieldRules_Enum) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*FieldRules_Enum)
	if !ok {
		that2, ok := that.(FieldRules_Enum)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Enum.Equal(that1.Enum) {
		return false
	}
	return true
}
func (this *FieldRules_Message) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*FieldRules_Message)
	if !ok {
		that2, ok := that.(FieldRules_Message)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Message.Equal(that1.Message) {
		return false
	}
	return true
}
func (this *FieldRules_Repeated) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*FieldRules_Repeated)
	if !ok {
		that2, ok := that.(FieldRules_Repeated)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Repeated.Equal(that1.Repeated) {
		return false
	}
	return true
}
func (this *FieldRules_Map) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*FieldRules_Map)
	if !ok {
		that2, ok := that.(FieldRules_Map)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Map.Equal(that1.Map) {
		return false
	}
	return true
}
func (this *FieldRules_Any) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*FieldRules_Any)
	if !ok {
		that2, ok := that.(FieldRules_Any)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Any.Equal(that1.Any) {
		return false
	}
	return true
}
func (this *FieldRules_Duration) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*FieldRules_Duration)
	if !ok {
		that2, ok := that.(FieldRules_Duration)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Duration.Equal(that1.Duration) {
		return false
	}
	return true
}
func (this *FieldRules_Timestamp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*FieldRules_Timestamp)
	if !ok {
		that2, ok := that.(FieldRules_Timestamp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Timestamp.Equal(that1.Timestamp) {
		return false
	}
	return true
}
func (this *FloatRules) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*FloatRules)
	if !ok {
		that2, ok := that.(FloatRules)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Const != that1.Const {
		return false
	}
	if this.Lt != that1.Lt {
		return false
	}
	if this.Lte != that1.Lte {
		return false
	}
	if this.Gt != that1.Gt {
		return false
	}
	if this.Gte != that1.Gte {
		return false
	}
	if len(this.In) != len(that1.In) {
		return false
	}
	for i := range this.In {
		if this.In[i] != that1.In[i] {
			return false
		}
	}
	if len(this.NotIn) != len(that1.NotIn) {
		return false
	}
	for i := range this.NotIn {
		if this.NotIn[i] != that1.NotIn[i] {
			return false
		}
	}
	return true
}
func (this *DoubleRules) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DoubleRules)
	if !ok {
		that2, ok := that.(DoubleRules)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Const != that1.Const {
		return false
	}
	if this.Lt != that1.Lt {
		return false
	}
	if this.Lte != that1.Lte {
		return false
	}
	if this.Gt != that1.Gt {
		return false
	}
	if this.Gte != that1.Gte {
		return false
	}
	if len(this.In) != len(that1.In) {
		return false
	}
	for i := range this.In {
		if this.In[i] != that1.In[i] {
			return false
		}
	}
	if len(this.NotIn) != len(that1.NotIn) {
		return false
	}
	for i := range this.NotIn {
		if this.NotIn[i] != that1.NotIn[i] {
			return false
		}
	}
	return true
}
func (this *Int32Rules) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Int32Rules)
	if !ok {
		that2, ok := that.(Int32Rules)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Const != that1.Const {
		return false
	}
	if this.Lt != that1.Lt {
		return false
	}
	if this.Lte != that1.Lte {
		return false
	}
	if this.Gt != that1.Gt {
		return false
	}
	if this.Gte != that1.Gte {
		return false
	}
	if len(this.In) != len(that1.In) {
		return false
	}
	for i := range this.In {
		if this.In[i] != that1.In[i] {
			return false
		}
	}
	if len(this.NotIn) != len(that1.NotIn) {
		return false
	}
	for i := range this.NotIn {
		if this.NotIn[i] != that1.NotIn[i] {
			return false
		}
	}
	return true
}
func (this *Int64Rules) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Int64Rules)
	if !ok {
		that2, ok := that.(Int64Rules)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Const != that1.Const {
		return false
	}
	if this.Lt != that1.Lt {
		return false
	}
	if this.Lte != that1.Lte {
		return false
	}
	if this.Gt != that1.Gt {
		return false
	}
	if this.Gte != that1.Gte {
		return false
	}
	if len(this.In) != len(that1.In) {
		return false
	}
	for i := range this.In {
		if this.In[i] != that1.In[i] {
			return false
		}
	}
	if len(this.NotIn) != len(that1.NotIn) {
		return false
	}
	for i := range this.NotIn {
		if this.NotIn[i] != that1.NotIn[i] {
			return false
		}
	}
	return true
}
func (this *UInt32Rules) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UInt32Rules)
	if !ok {
		that2, ok := that.(UInt32Rules)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Const != that1.Const {
		return false
	}
	if this.Lt != that1.Lt {
		return false
	}
	if this.Lte != that1.Lte {
		return false
	}
	if this.Gt != that1.Gt {
		return false
	}
	if this.Gte != that1.Gte {
		return false
	}
	if len(this.In) != len(that1.In) {
		return false
	}
	for i := range this.In {
		if this.In[i] != that1.In[i] {
			return false
		}
	}
	if len(this.NotIn) != len(that1.NotIn) {
		return false
	}
	for i := range this.NotIn {
		if this.NotIn[i] != that1.NotIn[i] {
			return false
		}
	}
	if this.Ranges != that1.Ranges {
		return false
	}
	if this.NotInRanges != that1.NotInRanges {
		return false
	}
	return true
}
func (this *UInt64Rules) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UInt64Rules)
	if !ok {
		that2, ok := that.(UInt64Rules)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Const != that1.Const {
		return false
	}
	if this.Lt != that1.Lt {
		return false
	}
	if this.Lte != that1.Lte {
		return false
	}
	if this.Gt != that1.Gt {
		return false
	}
	if this.Gte != that1.Gte {
		return false
	}
	if len(this.In) != len(that1.In) {
		return false
	}
	for i := range this.In {
		if this.In[i] != that1.In[i] {
			return false
		}
	}
	if len(this.NotIn) != len(that1.NotIn) {
		return false
	}
	for i := range this.NotIn {
		if this.NotIn[i] != that1.NotIn[i] {
			return false
		}
	}
	return true
}
func (this *SInt32Rules) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SInt32Rules)
	if !ok {
		that2, ok := that.(SInt32Rules)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Const != that1.Const {
		return false
	}
	if this.Lt != that1.Lt {
		return false
	}
	if this.Lte != that1.Lte {
		return false
	}
	if this.Gt != that1.Gt {
		return false
	}
	if this.Gte != that1.Gte {
		return false
	}
	if len(this.In) != len(that1.In) {
		return false
	}
	for i := range this.In {
		if this.In[i] != that1.In[i] {
			return false
		}
	}
	if len(this.NotIn) != len(that1.NotIn) {
		return false
	}
	for i := range this.NotIn {
		if this.NotIn[i] != that1.NotIn[i] {
			return false
		}
	}
	return true
}
func (this *SInt64Rules) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SInt64Rules)
	if !ok {
		that2, ok := that.(SInt64Rules)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Const != that1.Const {
		return false
	}
	if this.Lt != that1.Lt {
		return false
	}
	if this.Lte != that1.Lte {
		return false
	}
	if this.Gt != that1.Gt {
		return false
	}
	if this.Gte != that1.Gte {
		return false
	}
	if len(this.In) != len(that1.In) {
		return false
	}
	for i := range this.In {
		if this.In[i] != that1.In[i] {
			return false
		}
	}
	if len(this.NotIn) != len(that1.NotIn) {
		return false
	}
	for i := range this.NotIn {
		if this.NotIn[i] != that1.NotIn[i] {
			return false
		}
	}
	return true
}
func (this *Fixed32Rules) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Fixed32Rules)
	if !ok {
		that2, ok := that.(Fixed32Rules)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Const != that1.Const {
		return false
	}
	if this.Lt != that1.Lt {
		return false
	}
	if this.Lte != that1.Lte {
		return false
	}
	if this.Gt != that1.Gt {
		return false
	}
	if this.Gte != that1.Gte {
		return false
	}
	if len(this.In) != len(that1.In) {
		return false
	}
	for i := range this.In {
		if this.In[i] != that1.In[i] {
			return false
		}
	}
	if len(this.NotIn) != len(that1.NotIn) {
		return false
	}
	for i := range this.NotIn {
		if this.NotIn[i] != that1.NotIn[i] {
			return false
		}
	}
	return true
}
func (this *Fixed64Rules) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Fixed64Rules)
	if !ok {
		that2, ok := that.(Fixed64Rules)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Const != that1.Const {
		return false
	}
	if this.Lt != that1.Lt {
		return false
	}
	if this.Lte != that1.Lte {
		return false
	}
	if this.Gt != that1.Gt {
		return false
	}
	if this.Gte != that1.Gte {
		return false
	}
	if len(this.In) != len(that1.In) {
		return false
	}
	for i := range this.In {
		if this.In[i] != that1.In[i] {
			return false
		}
	}
	if len(this.NotIn) != len(that1.NotIn) {
		return false
	}
	for i := range this.NotIn {
		if this.NotIn[i] != that1.NotIn[i] {
			return false
		}
	}
	return true
}
func (this *SFixed32Rules) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SFixed32Rules)
	if !ok {
		that2, ok := that.(SFixed32Rules)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Const != that1.Const {
		return false
	}
	if this.Lt != that1.Lt {
		return false
	}
	if this.Lte != that1.Lte {
		return false
	}
	if this.Gt != that1.Gt {
		return false
	}
	if this.Gte != that1.Gte {
		return false
	}
	if len(this.In) != len(that1.In) {
		return false
	}
	for i := range this.In {
		if this.In[i] != that1.In[i] {
			return false
		}
	}
	if len(this.NotIn) != len(that1.NotIn) {
		return false
	}
	for i := range this.NotIn {
		if this.NotIn[i] != that1.NotIn[i] {
			return false
		}
	}
	return true
}
func (this *SFixed64Rules) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SFixed64Rules)
	if !ok {
		that2, ok := that.(SFixed64Rules)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Const != that1.Const {
		return false
	}
	if this.Lt != that1.Lt {
		return false
	}
	if this.Lte != that1.Lte {
		return false
	}
	if this.Gt != that1.Gt {
		return false
	}
	if this.Gte != that1.Gte {
		return false
	}
	if len(this.In) != len(that1.In) {
		return false
	}
	for i := range this.In {
		if this.In[i] != that1.In[i] {
			return false
		}
	}
	if len(this.NotIn) != len(that1.NotIn) {
		return false
	}
	for i := range this.NotIn {
		if this.NotIn[i] != that1.NotIn[i] {
			return false
		}
	}
	return true
}
func (this *BoolRules) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*BoolRules)
	if !ok {
		that2, ok := that.(BoolRules)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Const != that1.Const {
		return false
	}
	return true
}
func (this *StringRules) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*StringRules)
	if !ok {
		that2, ok := that.(StringRules)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Const != that1.Const {
		return false
	}
	if this.Len != that1.Len {
		return false
	}
	if this.MinLen != that1.MinLen {
		return false
	}
	if this.MaxLen != that1.MaxLen {
		return false
	}
	if this.LenBytes != that1.LenBytes {
		return false
	}
	if this.MinBytes != that1.MinBytes {
		return false
	}
	if this.MaxBytes != that1.MaxBytes {
		return false
	}
	if this.Pattern != that1.Pattern {
		return false
	}
	if this.Prefix != that1.Prefix {
		return false
	}
	if this.Suffix != that1.Suffix {
		return false
	}
	if this.Contains != that1.Contains {
		return false
	}
	if len(this.In) != len(that1.In) {
		return false
	}
	for i := range this.In {
		if this.In[i] != that1.In[i] {
			return false
		}
	}
	if len(this.NotIn) != len(that1.NotIn) {
		return false
	}
	for i := range this.NotIn {
		if this.NotIn[i] != that1.NotIn[i] {
			return false
		}
	}
	if this.MinIpPrefixLength != that1.MinIpPrefixLength {
		return false
	}
	if this.MaxIpPrefixLength != that1.MaxIpPrefixLength {
		return false
	}
	if that1.WellKnown == nil {
		if this.WellKnown != nil {
			return false
		}
	} else if this.WellKnown == nil {
		return false
	} else if !this.WellKnown.Equal(that1.WellKnown) {
		return false
	}
	return true
}
func (this *StringRules_Email) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*StringRules_Email)
	if !ok {
		that2, ok := that.(StringRules_Email)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Email != that1.Email {
		return false
	}
	return true
}
func (this *StringRules_Hostname) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*StringRules_Hostname)
	if !ok {
		that2, ok := that.(StringRules_Hostname)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Hostname != that1.Hostname {
		return false
	}
	return true
}
func (this *StringRules_Ip) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*StringRules_Ip)
	if !ok {
		that2, ok := that.(StringRules_Ip)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Ip != that1.Ip {
		return false
	}
	return true
}
func (this *StringRules_Ipv4) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*StringRules_Ipv4)
	if !ok {
		that2, ok := that.(StringRules_Ipv4)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Ipv4 != that1.Ipv4 {
		return false
	}
	return true
}
func (this *StringRules_Ipv6) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*StringRules_Ipv6)
	if !ok {
		that2, ok := that.(StringRules_Ipv6)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Ipv6 != that1.Ipv6 {
		return false
	}
	return true
}
func (this *StringRules_Uri) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*StringRules_Uri)
	if !ok {
		that2, ok := that.(StringRules_Uri)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Uri != that1.Uri {
		return false
	}
	return true
}
func (this *StringRules_UriRef) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*StringRules_UriRef)
	if !ok {
		that2, ok := that.(StringRules_UriRef)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.UriRef != that1.UriRef {
		return false
	}
	return true
}
func (this *StringRules_IpPrefix) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*StringRules_IpPrefix)
	if !ok {
		that2, ok := that.(StringRules_IpPrefix)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.IpPrefix != that1.IpPrefix {
		return false
	}
	return true
}
func (this *StringRules_PortRange) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*StringRules_PortRange)
	if !ok {
		that2, ok := that.(StringRules_PortRange)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.PortRange != that1.PortRange {
		return false
	}
	return true
}
func (this *StringRules_Mac) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*StringRules_Mac)
	if !ok {
		that2, ok := that.(StringRules_Mac)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Mac != that1.Mac {
		return false
	}
	return true
}
func (this *StringRules_Regex) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*StringRules_Regex)
	if !ok {
		that2, ok := that.(StringRules_Regex)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Regex != that1.Regex {
		return false
	}
	return true
}
func (this *StringRules_HttpHeaderField) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*StringRules_HttpHeaderField)
	if !ok {
		that2, ok := that.(StringRules_HttpHeaderField)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.HttpHeaderField != that1.HttpHeaderField {
		return false
	}
	return true
}
func (this *StringRules_K8SLabelValue) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*StringRules_K8SLabelValue)
	if !ok {
		that2, ok := that.(StringRules_K8SLabelValue)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.K8SLabelValue != that1.K8SLabelValue {
		return false
	}
	return true
}
func (this *StringRules_NotEmpty) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*StringRules_NotEmpty)
	if !ok {
		that2, ok := that.(StringRules_NotEmpty)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.NotEmpty != that1.NotEmpty {
		return false
	}
	return true
}
func (this *StringRules_Hostport) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*StringRules_Hostport)
	if !ok {
		that2, ok := that.(StringRules_Hostport)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Hostport != that1.Hostport {
		return false
	}
	return true
}
func (this *StringRules_JsonPath) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*StringRules_JsonPath)
	if !ok {
		that2, ok := that.(StringRules_JsonPath)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.JsonPath != that1.JsonPath {
		return false
	}
	return true
}
func (this *StringRules_Hex) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*StringRules_Hex)
	if !ok {
		that2, ok := that.(StringRules_Hex)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Hex != that1.Hex {
		return false
	}
	return true
}
func (this *StringRules_Ipv4Prefix) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*StringRules_Ipv4Prefix)
	if !ok {
		that2, ok := that.(StringRules_Ipv4Prefix)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Ipv4Prefix != that1.Ipv4Prefix {
		return false
	}
	return true
}
func (this *StringRules_Ipv6Prefix) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*StringRules_Ipv6Prefix)
	if !ok {
		that2, ok := that.(StringRules_Ipv6Prefix)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Ipv6Prefix != that1.Ipv6Prefix {
		return false
	}
	return true
}
func (this *StringRules_VhDomain) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*StringRules_VhDomain)
	if !ok {
		that2, ok := that.(StringRules_VhDomain)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.VhDomain != that1.VhDomain {
		return false
	}
	return true
}
func (this *StringRules_VesObjectName) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*StringRules_VesObjectName)
	if !ok {
		that2, ok := that.(StringRules_VesObjectName)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.VesObjectName != that1.VesObjectName {
		return false
	}
	return true
}
func (this *StringRules_IanaSvcName) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*StringRules_IanaSvcName)
	if !ok {
		that2, ok := that.(StringRules_IanaSvcName)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.IanaSvcName != that1.IanaSvcName {
		return false
	}
	return true
}
func (this *StringRules_Dns_1123Label) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*StringRules_Dns_1123Label)
	if !ok {
		that2, ok := that.(StringRules_Dns_1123Label)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Dns_1123Label != that1.Dns_1123Label {
		return false
	}
	return true
}
func (this *StringRules_UnixFilePath) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*StringRules_UnixFilePath)
	if !ok {
		that2, ok := that.(StringRules_UnixFilePath)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.UnixFilePath != that1.UnixFilePath {
		return false
	}
	return true
}
func (this *StringRules_PhoneNumber) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*StringRules_PhoneNumber)
	if !ok {
		that2, ok := that.(StringRules_PhoneNumber)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.PhoneNumber != that1.PhoneNumber {
		return false
	}
	return true
}
func (this *StringRules_PortRangeList) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*StringRules_PortRangeList)
	if !ok {
		that2, ok := that.(StringRules_PortRangeList)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.PortRangeList != that1.PortRangeList {
		return false
	}
	return true
}
func (this *StringRules_VhDomainNoPort) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*StringRules_VhDomainNoPort)
	if !ok {
		that2, ok := that.(StringRules_VhDomainNoPort)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.VhDomainNoPort != that1.VhDomainNoPort {
		return false
	}
	return true
}
func (this *StringRules_HostnameOrIp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*StringRules_HostnameOrIp)
	if !ok {
		that2, ok := that.(StringRules_HostnameOrIp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.HostnameOrIp != that1.HostnameOrIp {
		return false
	}
	return true
}
func (this *StringRules_K8SLabelSelector) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*StringRules_K8SLabelSelector)
	if !ok {
		that2, ok := that.(StringRules_K8SLabelSelector)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.K8SLabelSelector != that1.K8SLabelSelector {
		return false
	}
	return true
}
func (this *BytesRules) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*BytesRules)
	if !ok {
		that2, ok := that.(BytesRules)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.Const, that1.Const) {
		return false
	}
	if this.Len != that1.Len {
		return false
	}
	if this.MinLen != that1.MinLen {
		return false
	}
	if this.MaxLen != that1.MaxLen {
		return false
	}
	if this.Pattern != that1.Pattern {
		return false
	}
	if !bytes.Equal(this.Prefix, that1.Prefix) {
		return false
	}
	if !bytes.Equal(this.Suffix, that1.Suffix) {
		return false
	}
	if !bytes.Equal(this.Contains, that1.Contains) {
		return false
	}
	if len(this.In) != len(that1.In) {
		return false
	}
	for i := range this.In {
		if !bytes.Equal(this.In[i], that1.In[i]) {
			return false
		}
	}
	if len(this.NotIn) != len(that1.NotIn) {
		return false
	}
	for i := range this.NotIn {
		if !bytes.Equal(this.NotIn[i], that1.NotIn[i]) {
			return false
		}
	}
	if that1.WellKnown == nil {
		if this.WellKnown != nil {
			return false
		}
	} else if this.WellKnown == nil {
		return false
	} else if !this.WellKnown.Equal(that1.WellKnown) {
		return false
	}
	return true
}
func (this *BytesRules_Ip) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*BytesRules_Ip)
	if !ok {
		that2, ok := that.(BytesRules_Ip)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Ip != that1.Ip {
		return false
	}
	return true
}
func (this *BytesRules_Ipv4) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*BytesRules_Ipv4)
	if !ok {
		that2, ok := that.(BytesRules_Ipv4)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Ipv4 != that1.Ipv4 {
		return false
	}
	return true
}
func (this *BytesRules_Ipv6) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*BytesRules_Ipv6)
	if !ok {
		that2, ok := that.(BytesRules_Ipv6)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Ipv6 != that1.Ipv6 {
		return false
	}
	return true
}
func (this *EnumRules) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*EnumRules)
	if !ok {
		that2, ok := that.(EnumRules)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Const != that1.Const {
		return false
	}
	if this.DefinedOnly != that1.DefinedOnly {
		return false
	}
	if len(this.In) != len(that1.In) {
		return false
	}
	for i := range this.In {
		if this.In[i] != that1.In[i] {
			return false
		}
	}
	if len(this.NotIn) != len(that1.NotIn) {
		return false
	}
	for i := range this.NotIn {
		if this.NotIn[i] != that1.NotIn[i] {
			return false
		}
	}
	return true
}
func (this *MessageRules) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MessageRules)
	if !ok {
		that2, ok := that.(MessageRules)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Skip != that1.Skip {
		return false
	}
	if this.Required != that1.Required {
		return false
	}
	return true
}
func (this *RepeatedRules) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RepeatedRules)
	if !ok {
		that2, ok := that.(RepeatedRules)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.MinItems != that1.MinItems {
		return false
	}
	if this.MaxItems != that1.MaxItems {
		return false
	}
	if this.Unique != that1.Unique {
		return false
	}
	if !this.Items.Equal(that1.Items) {
		return false
	}
	if this.NumItems != that1.NumItems {
		return false
	}
	if this.UniqueMetadataName != that1.UniqueMetadataName {
		return false
	}
	return true
}
func (this *MapRules) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MapRules)
	if !ok {
		that2, ok := that.(MapRules)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.MinPairs != that1.MinPairs {
		return false
	}
	if this.MaxPairs != that1.MaxPairs {
		return false
	}
	if this.NoSparse != that1.NoSparse {
		return false
	}
	if !this.Keys.Equal(that1.Keys) {
		return false
	}
	if !this.Values.Equal(that1.Values) {
		return false
	}
	if this.UniqueValues != that1.UniqueValues {
		return false
	}
	return true
}
func (this *AnyRules) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AnyRules)
	if !ok {
		that2, ok := that.(AnyRules)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Required != that1.Required {
		return false
	}
	if len(this.In) != len(that1.In) {
		return false
	}
	for i := range this.In {
		if this.In[i] != that1.In[i] {
			return false
		}
	}
	if len(this.NotIn) != len(that1.NotIn) {
		return false
	}
	for i := range this.NotIn {
		if this.NotIn[i] != that1.NotIn[i] {
			return false
		}
	}
	return true
}
func (this *DurationRules) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DurationRules)
	if !ok {
		that2, ok := that.(DurationRules)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Required != that1.Required {
		return false
	}
	if !this.Const.Equal(that1.Const) {
		return false
	}
	if !this.Lt.Equal(that1.Lt) {
		return false
	}
	if !this.Lte.Equal(that1.Lte) {
		return false
	}
	if !this.Gt.Equal(that1.Gt) {
		return false
	}
	if !this.Gte.Equal(that1.Gte) {
		return false
	}
	if len(this.In) != len(that1.In) {
		return false
	}
	for i := range this.In {
		if !this.In[i].Equal(that1.In[i]) {
			return false
		}
	}
	if len(this.NotIn) != len(that1.NotIn) {
		return false
	}
	for i := range this.NotIn {
		if !this.NotIn[i].Equal(that1.NotIn[i]) {
			return false
		}
	}
	return true
}
func (this *TimestampRules) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TimestampRules)
	if !ok {
		that2, ok := that.(TimestampRules)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Required != that1.Required {
		return false
	}
	if !this.Const.Equal(that1.Const) {
		return false
	}
	if !this.Lt.Equal(that1.Lt) {
		return false
	}
	if !this.Lte.Equal(that1.Lte) {
		return false
	}
	if !this.Gt.Equal(that1.Gt) {
		return false
	}
	if !this.Gte.Equal(that1.Gte) {
		return false
	}
	if this.LtNow != that1.LtNow {
		return false
	}
	if this.GtNow != that1.GtNow {
		return false
	}
	if !this.Within.Equal(that1.Within) {
		return false
	}
	return true
}
func (this *FieldRules) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 26)
	s = append(s, "&schema.FieldRules{")
	if this.Type != nil {
		s = append(s, "Type: "+fmt.Sprintf("%#v", this.Type)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *FieldRules_Float) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&schema.FieldRules_Float{` +
		`Float:` + fmt.Sprintf("%#v", this.Float) + `}`}, ", ")
	return s
}
func (this *FieldRules_Double) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&schema.FieldRules_Double{` +
		`Double:` + fmt.Sprintf("%#v", this.Double) + `}`}, ", ")
	return s
}
func (this *FieldRules_Int32) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&schema.FieldRules_Int32{` +
		`Int32:` + fmt.Sprintf("%#v", this.Int32) + `}`}, ", ")
	return s
}
func (this *FieldRules_Int64) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&schema.FieldRules_Int64{` +
		`Int64:` + fmt.Sprintf("%#v", this.Int64) + `}`}, ", ")
	return s
}
func (this *FieldRules_Uint32) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&schema.FieldRules_Uint32{` +
		`Uint32:` + fmt.Sprintf("%#v", this.Uint32) + `}`}, ", ")
	return s
}
func (this *FieldRules_Uint64) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&schema.FieldRules_Uint64{` +
		`Uint64:` + fmt.Sprintf("%#v", this.Uint64) + `}`}, ", ")
	return s
}
func (this *FieldRules_Sint32) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&schema.FieldRules_Sint32{` +
		`Sint32:` + fmt.Sprintf("%#v", this.Sint32) + `}`}, ", ")
	return s
}
func (this *FieldRules_Sint64) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&schema.FieldRules_Sint64{` +
		`Sint64:` + fmt.Sprintf("%#v", this.Sint64) + `}`}, ", ")
	return s
}
func (this *FieldRules_Fixed32) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&schema.FieldRules_Fixed32{` +
		`Fixed32:` + fmt.Sprintf("%#v", this.Fixed32) + `}`}, ", ")
	return s
}
func (this *FieldRules_Fixed64) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&schema.FieldRules_Fixed64{` +
		`Fixed64:` + fmt.Sprintf("%#v", this.Fixed64) + `}`}, ", ")
	return s
}
func (this *FieldRules_Sfixed32) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&schema.FieldRules_Sfixed32{` +
		`Sfixed32:` + fmt.Sprintf("%#v", this.Sfixed32) + `}`}, ", ")
	return s
}
func (this *FieldRules_Sfixed64) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&schema.FieldRules_Sfixed64{` +
		`Sfixed64:` + fmt.Sprintf("%#v", this.Sfixed64) + `}`}, ", ")
	return s
}
func (this *FieldRules_Bool) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&schema.FieldRules_Bool{` +
		`Bool:` + fmt.Sprintf("%#v", this.Bool) + `}`}, ", ")
	return s
}
func (this *FieldRules_String_) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&schema.FieldRules_String_{` +
		`String_:` + fmt.Sprintf("%#v", this.String_) + `}`}, ", ")
	return s
}
func (this *FieldRules_Bytes) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&schema.FieldRules_Bytes{` +
		`Bytes:` + fmt.Sprintf("%#v", this.Bytes) + `}`}, ", ")
	return s
}
func (this *FieldRules_Enum) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&schema.FieldRules_Enum{` +
		`Enum:` + fmt.Sprintf("%#v", this.Enum) + `}`}, ", ")
	return s
}
func (this *FieldRules_Message) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&schema.FieldRules_Message{` +
		`Message:` + fmt.Sprintf("%#v", this.Message) + `}`}, ", ")
	return s
}
func (this *FieldRules_Repeated) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&schema.FieldRules_Repeated{` +
		`Repeated:` + fmt.Sprintf("%#v", this.Repeated) + `}`}, ", ")
	return s
}
func (this *FieldRules_Map) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&schema.FieldRules_Map{` +
		`Map:` + fmt.Sprintf("%#v", this.Map) + `}`}, ", ")
	return s
}
func (this *FieldRules_Any) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&schema.FieldRules_Any{` +
		`Any:` + fmt.Sprintf("%#v", this.Any) + `}`}, ", ")
	return s
}
func (this *FieldRules_Duration) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&schema.FieldRules_Duration{` +
		`Duration:` + fmt.Sprintf("%#v", this.Duration) + `}`}, ", ")
	return s
}
func (this *FieldRules_Timestamp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&schema.FieldRules_Timestamp{` +
		`Timestamp:` + fmt.Sprintf("%#v", this.Timestamp) + `}`}, ", ")
	return s
}
func (this *FloatRules) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 11)
	s = append(s, "&schema.FloatRules{")
	s = append(s, "Const: "+fmt.Sprintf("%#v", this.Const)+",\n")
	s = append(s, "Lt: "+fmt.Sprintf("%#v", this.Lt)+",\n")
	s = append(s, "Lte: "+fmt.Sprintf("%#v", this.Lte)+",\n")
	s = append(s, "Gt: "+fmt.Sprintf("%#v", this.Gt)+",\n")
	s = append(s, "Gte: "+fmt.Sprintf("%#v", this.Gte)+",\n")
	s = append(s, "In: "+fmt.Sprintf("%#v", this.In)+",\n")
	s = append(s, "NotIn: "+fmt.Sprintf("%#v", this.NotIn)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DoubleRules) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 11)
	s = append(s, "&schema.DoubleRules{")
	s = append(s, "Const: "+fmt.Sprintf("%#v", this.Const)+",\n")
	s = append(s, "Lt: "+fmt.Sprintf("%#v", this.Lt)+",\n")
	s = append(s, "Lte: "+fmt.Sprintf("%#v", this.Lte)+",\n")
	s = append(s, "Gt: "+fmt.Sprintf("%#v", this.Gt)+",\n")
	s = append(s, "Gte: "+fmt.Sprintf("%#v", this.Gte)+",\n")
	s = append(s, "In: "+fmt.Sprintf("%#v", this.In)+",\n")
	s = append(s, "NotIn: "+fmt.Sprintf("%#v", this.NotIn)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Int32Rules) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 11)
	s = append(s, "&schema.Int32Rules{")
	s = append(s, "Const: "+fmt.Sprintf("%#v", this.Const)+",\n")
	s = append(s, "Lt: "+fmt.Sprintf("%#v", this.Lt)+",\n")
	s = append(s, "Lte: "+fmt.Sprintf("%#v", this.Lte)+",\n")
	s = append(s, "Gt: "+fmt.Sprintf("%#v", this.Gt)+",\n")
	s = append(s, "Gte: "+fmt.Sprintf("%#v", this.Gte)+",\n")
	s = append(s, "In: "+fmt.Sprintf("%#v", this.In)+",\n")
	s = append(s, "NotIn: "+fmt.Sprintf("%#v", this.NotIn)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Int64Rules) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 11)
	s = append(s, "&schema.Int64Rules{")
	s = append(s, "Const: "+fmt.Sprintf("%#v", this.Const)+",\n")
	s = append(s, "Lt: "+fmt.Sprintf("%#v", this.Lt)+",\n")
	s = append(s, "Lte: "+fmt.Sprintf("%#v", this.Lte)+",\n")
	s = append(s, "Gt: "+fmt.Sprintf("%#v", this.Gt)+",\n")
	s = append(s, "Gte: "+fmt.Sprintf("%#v", this.Gte)+",\n")
	s = append(s, "In: "+fmt.Sprintf("%#v", this.In)+",\n")
	s = append(s, "NotIn: "+fmt.Sprintf("%#v", this.NotIn)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UInt32Rules) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 13)
	s = append(s, "&schema.UInt32Rules{")
	s = append(s, "Const: "+fmt.Sprintf("%#v", this.Const)+",\n")
	s = append(s, "Lt: "+fmt.Sprintf("%#v", this.Lt)+",\n")
	s = append(s, "Lte: "+fmt.Sprintf("%#v", this.Lte)+",\n")
	s = append(s, "Gt: "+fmt.Sprintf("%#v", this.Gt)+",\n")
	s = append(s, "Gte: "+fmt.Sprintf("%#v", this.Gte)+",\n")
	s = append(s, "In: "+fmt.Sprintf("%#v", this.In)+",\n")
	s = append(s, "NotIn: "+fmt.Sprintf("%#v", this.NotIn)+",\n")
	s = append(s, "Ranges: "+fmt.Sprintf("%#v", this.Ranges)+",\n")
	s = append(s, "NotInRanges: "+fmt.Sprintf("%#v", this.NotInRanges)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UInt64Rules) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 11)
	s = append(s, "&schema.UInt64Rules{")
	s = append(s, "Const: "+fmt.Sprintf("%#v", this.Const)+",\n")
	s = append(s, "Lt: "+fmt.Sprintf("%#v", this.Lt)+",\n")
	s = append(s, "Lte: "+fmt.Sprintf("%#v", this.Lte)+",\n")
	s = append(s, "Gt: "+fmt.Sprintf("%#v", this.Gt)+",\n")
	s = append(s, "Gte: "+fmt.Sprintf("%#v", this.Gte)+",\n")
	s = append(s, "In: "+fmt.Sprintf("%#v", this.In)+",\n")
	s = append(s, "NotIn: "+fmt.Sprintf("%#v", this.NotIn)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SInt32Rules) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 11)
	s = append(s, "&schema.SInt32Rules{")
	s = append(s, "Const: "+fmt.Sprintf("%#v", this.Const)+",\n")
	s = append(s, "Lt: "+fmt.Sprintf("%#v", this.Lt)+",\n")
	s = append(s, "Lte: "+fmt.Sprintf("%#v", this.Lte)+",\n")
	s = append(s, "Gt: "+fmt.Sprintf("%#v", this.Gt)+",\n")
	s = append(s, "Gte: "+fmt.Sprintf("%#v", this.Gte)+",\n")
	s = append(s, "In: "+fmt.Sprintf("%#v", this.In)+",\n")
	s = append(s, "NotIn: "+fmt.Sprintf("%#v", this.NotIn)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SInt64Rules) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 11)
	s = append(s, "&schema.SInt64Rules{")
	s = append(s, "Const: "+fmt.Sprintf("%#v", this.Const)+",\n")
	s = append(s, "Lt: "+fmt.Sprintf("%#v", this.Lt)+",\n")
	s = append(s, "Lte: "+fmt.Sprintf("%#v", this.Lte)+",\n")
	s = append(s, "Gt: "+fmt.Sprintf("%#v", this.Gt)+",\n")
	s = append(s, "Gte: "+fmt.Sprintf("%#v", this.Gte)+",\n")
	s = append(s, "In: "+fmt.Sprintf("%#v", this.In)+",\n")
	s = append(s, "NotIn: "+fmt.Sprintf("%#v", this.NotIn)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Fixed32Rules) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 11)
	s = append(s, "&schema.Fixed32Rules{")
	s = append(s, "Const: "+fmt.Sprintf("%#v", this.Const)+",\n")
	s = append(s, "Lt: "+fmt.Sprintf("%#v", this.Lt)+",\n")
	s = append(s, "Lte: "+fmt.Sprintf("%#v", this.Lte)+",\n")
	s = append(s, "Gt: "+fmt.Sprintf("%#v", this.Gt)+",\n")
	s = append(s, "Gte: "+fmt.Sprintf("%#v", this.Gte)+",\n")
	s = append(s, "In: "+fmt.Sprintf("%#v", this.In)+",\n")
	s = append(s, "NotIn: "+fmt.Sprintf("%#v", this.NotIn)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Fixed64Rules) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 11)
	s = append(s, "&schema.Fixed64Rules{")
	s = append(s, "Const: "+fmt.Sprintf("%#v", this.Const)+",\n")
	s = append(s, "Lt: "+fmt.Sprintf("%#v", this.Lt)+",\n")
	s = append(s, "Lte: "+fmt.Sprintf("%#v", this.Lte)+",\n")
	s = append(s, "Gt: "+fmt.Sprintf("%#v", this.Gt)+",\n")
	s = append(s, "Gte: "+fmt.Sprintf("%#v", this.Gte)+",\n")
	s = append(s, "In: "+fmt.Sprintf("%#v", this.In)+",\n")
	s = append(s, "NotIn: "+fmt.Sprintf("%#v", this.NotIn)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SFixed32Rules) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 11)
	s = append(s, "&schema.SFixed32Rules{")
	s = append(s, "Const: "+fmt.Sprintf("%#v", this.Const)+",\n")
	s = append(s, "Lt: "+fmt.Sprintf("%#v", this.Lt)+",\n")
	s = append(s, "Lte: "+fmt.Sprintf("%#v", this.Lte)+",\n")
	s = append(s, "Gt: "+fmt.Sprintf("%#v", this.Gt)+",\n")
	s = append(s, "Gte: "+fmt.Sprintf("%#v", this.Gte)+",\n")
	s = append(s, "In: "+fmt.Sprintf("%#v", this.In)+",\n")
	s = append(s, "NotIn: "+fmt.Sprintf("%#v", this.NotIn)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SFixed64Rules) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 11)
	s = append(s, "&schema.SFixed64Rules{")
	s = append(s, "Const: "+fmt.Sprintf("%#v", this.Const)+",\n")
	s = append(s, "Lt: "+fmt.Sprintf("%#v", this.Lt)+",\n")
	s = append(s, "Lte: "+fmt.Sprintf("%#v", this.Lte)+",\n")
	s = append(s, "Gt: "+fmt.Sprintf("%#v", this.Gt)+",\n")
	s = append(s, "Gte: "+fmt.Sprintf("%#v", this.Gte)+",\n")
	s = append(s, "In: "+fmt.Sprintf("%#v", this.In)+",\n")
	s = append(s, "NotIn: "+fmt.Sprintf("%#v", this.NotIn)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *BoolRules) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&schema.BoolRules{")
	s = append(s, "Const: "+fmt.Sprintf("%#v", this.Const)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *StringRules) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 48)
	s = append(s, "&schema.StringRules{")
	s = append(s, "Const: "+fmt.Sprintf("%#v", this.Const)+",\n")
	s = append(s, "Len: "+fmt.Sprintf("%#v", this.Len)+",\n")
	s = append(s, "MinLen: "+fmt.Sprintf("%#v", this.MinLen)+",\n")
	s = append(s, "MaxLen: "+fmt.Sprintf("%#v", this.MaxLen)+",\n")
	s = append(s, "LenBytes: "+fmt.Sprintf("%#v", this.LenBytes)+",\n")
	s = append(s, "MinBytes: "+fmt.Sprintf("%#v", this.MinBytes)+",\n")
	s = append(s, "MaxBytes: "+fmt.Sprintf("%#v", this.MaxBytes)+",\n")
	s = append(s, "Pattern: "+fmt.Sprintf("%#v", this.Pattern)+",\n")
	s = append(s, "Prefix: "+fmt.Sprintf("%#v", this.Prefix)+",\n")
	s = append(s, "Suffix: "+fmt.Sprintf("%#v", this.Suffix)+",\n")
	s = append(s, "Contains: "+fmt.Sprintf("%#v", this.Contains)+",\n")
	s = append(s, "In: "+fmt.Sprintf("%#v", this.In)+",\n")
	s = append(s, "NotIn: "+fmt.Sprintf("%#v", this.NotIn)+",\n")
	s = append(s, "MinIpPrefixLength: "+fmt.Sprintf("%#v", this.MinIpPrefixLength)+",\n")
	s = append(s, "MaxIpPrefixLength: "+fmt.Sprintf("%#v", this.MaxIpPrefixLength)+",\n")
	if this.WellKnown != nil {
		s = append(s, "WellKnown: "+fmt.Sprintf("%#v", this.WellKnown)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *StringRules_Email) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&schema.StringRules_Email{` +
		`Email:` + fmt.Sprintf("%#v", this.Email) + `}`}, ", ")
	return s
}
func (this *StringRules_Hostname) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&schema.StringRules_Hostname{` +
		`Hostname:` + fmt.Sprintf("%#v", this.Hostname) + `}`}, ", ")
	return s
}
func (this *StringRules_Ip) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&schema.StringRules_Ip{` +
		`Ip:` + fmt.Sprintf("%#v", this.Ip) + `}`}, ", ")
	return s
}
func (this *StringRules_Ipv4) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&schema.StringRules_Ipv4{` +
		`Ipv4:` + fmt.Sprintf("%#v", this.Ipv4) + `}`}, ", ")
	return s
}
func (this *StringRules_Ipv6) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&schema.StringRules_Ipv6{` +
		`Ipv6:` + fmt.Sprintf("%#v", this.Ipv6) + `}`}, ", ")
	return s
}
func (this *StringRules_Uri) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&schema.StringRules_Uri{` +
		`Uri:` + fmt.Sprintf("%#v", this.Uri) + `}`}, ", ")
	return s
}
func (this *StringRules_UriRef) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&schema.StringRules_UriRef{` +
		`UriRef:` + fmt.Sprintf("%#v", this.UriRef) + `}`}, ", ")
	return s
}
func (this *StringRules_IpPrefix) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&schema.StringRules_IpPrefix{` +
		`IpPrefix:` + fmt.Sprintf("%#v", this.IpPrefix) + `}`}, ", ")
	return s
}
func (this *StringRules_PortRange) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&schema.StringRules_PortRange{` +
		`PortRange:` + fmt.Sprintf("%#v", this.PortRange) + `}`}, ", ")
	return s
}
func (this *StringRules_Mac) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&schema.StringRules_Mac{` +
		`Mac:` + fmt.Sprintf("%#v", this.Mac) + `}`}, ", ")
	return s
}
func (this *StringRules_Regex) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&schema.StringRules_Regex{` +
		`Regex:` + fmt.Sprintf("%#v", this.Regex) + `}`}, ", ")
	return s
}
func (this *StringRules_HttpHeaderField) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&schema.StringRules_HttpHeaderField{` +
		`HttpHeaderField:` + fmt.Sprintf("%#v", this.HttpHeaderField) + `}`}, ", ")
	return s
}
func (this *StringRules_K8SLabelValue) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&schema.StringRules_K8SLabelValue{` +
		`K8SLabelValue:` + fmt.Sprintf("%#v", this.K8SLabelValue) + `}`}, ", ")
	return s
}
func (this *StringRules_NotEmpty) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&schema.StringRules_NotEmpty{` +
		`NotEmpty:` + fmt.Sprintf("%#v", this.NotEmpty) + `}`}, ", ")
	return s
}
func (this *StringRules_Hostport) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&schema.StringRules_Hostport{` +
		`Hostport:` + fmt.Sprintf("%#v", this.Hostport) + `}`}, ", ")
	return s
}
func (this *StringRules_JsonPath) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&schema.StringRules_JsonPath{` +
		`JsonPath:` + fmt.Sprintf("%#v", this.JsonPath) + `}`}, ", ")
	return s
}
func (this *StringRules_Hex) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&schema.StringRules_Hex{` +
		`Hex:` + fmt.Sprintf("%#v", this.Hex) + `}`}, ", ")
	return s
}
func (this *StringRules_Ipv4Prefix) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&schema.StringRules_Ipv4Prefix{` +
		`Ipv4Prefix:` + fmt.Sprintf("%#v", this.Ipv4Prefix) + `}`}, ", ")
	return s
}
func (this *StringRules_Ipv6Prefix) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&schema.StringRules_Ipv6Prefix{` +
		`Ipv6Prefix:` + fmt.Sprintf("%#v", this.Ipv6Prefix) + `}`}, ", ")
	return s
}
func (this *StringRules_VhDomain) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&schema.StringRules_VhDomain{` +
		`VhDomain:` + fmt.Sprintf("%#v", this.VhDomain) + `}`}, ", ")
	return s
}
func (this *StringRules_VesObjectName) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&schema.StringRules_VesObjectName{` +
		`VesObjectName:` + fmt.Sprintf("%#v", this.VesObjectName) + `}`}, ", ")
	return s
}
func (this *StringRules_IanaSvcName) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&schema.StringRules_IanaSvcName{` +
		`IanaSvcName:` + fmt.Sprintf("%#v", this.IanaSvcName) + `}`}, ", ")
	return s
}
func (this *StringRules_Dns_1123Label) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&schema.StringRules_Dns_1123Label{` +
		`Dns_1123Label:` + fmt.Sprintf("%#v", this.Dns_1123Label) + `}`}, ", ")
	return s
}
func (this *StringRules_UnixFilePath) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&schema.StringRules_UnixFilePath{` +
		`UnixFilePath:` + fmt.Sprintf("%#v", this.UnixFilePath) + `}`}, ", ")
	return s
}
func (this *StringRules_PhoneNumber) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&schema.StringRules_PhoneNumber{` +
		`PhoneNumber:` + fmt.Sprintf("%#v", this.PhoneNumber) + `}`}, ", ")
	return s
}
func (this *StringRules_PortRangeList) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&schema.StringRules_PortRangeList{` +
		`PortRangeList:` + fmt.Sprintf("%#v", this.PortRangeList) + `}`}, ", ")
	return s
}
func (this *StringRules_VhDomainNoPort) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&schema.StringRules_VhDomainNoPort{` +
		`VhDomainNoPort:` + fmt.Sprintf("%#v", this.VhDomainNoPort) + `}`}, ", ")
	return s
}
func (this *StringRules_HostnameOrIp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&schema.StringRules_HostnameOrIp{` +
		`HostnameOrIp:` + fmt.Sprintf("%#v", this.HostnameOrIp) + `}`}, ", ")
	return s
}
func (this *StringRules_K8SLabelSelector) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&schema.StringRules_K8SLabelSelector{` +
		`K8SLabelSelector:` + fmt.Sprintf("%#v", this.K8SLabelSelector) + `}`}, ", ")
	return s
}
func (this *BytesRules) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 17)
	s = append(s, "&schema.BytesRules{")
	s = append(s, "Const: "+fmt.Sprintf("%#v", this.Const)+",\n")
	s = append(s, "Len: "+fmt.Sprintf("%#v", this.Len)+",\n")
	s = append(s, "MinLen: "+fmt.Sprintf("%#v", this.MinLen)+",\n")
	s = append(s, "MaxLen: "+fmt.Sprintf("%#v", this.MaxLen)+",\n")
	s = append(s, "Pattern: "+fmt.Sprintf("%#v", this.Pattern)+",\n")
	s = append(s, "Prefix: "+fmt.Sprintf("%#v", this.Prefix)+",\n")
	s = append(s, "Suffix: "+fmt.Sprintf("%#v", this.Suffix)+",\n")
	s = append(s, "Contains: "+fmt.Sprintf("%#v", this.Contains)+",\n")
	s = append(s, "In: "+fmt.Sprintf("%#v", this.In)+",\n")
	s = append(s, "NotIn: "+fmt.Sprintf("%#v", this.NotIn)+",\n")
	if this.WellKnown != nil {
		s = append(s, "WellKnown: "+fmt.Sprintf("%#v", this.WellKnown)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *BytesRules_Ip) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&schema.BytesRules_Ip{` +
		`Ip:` + fmt.Sprintf("%#v", this.Ip) + `}`}, ", ")
	return s
}
func (this *BytesRules_Ipv4) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&schema.BytesRules_Ipv4{` +
		`Ipv4:` + fmt.Sprintf("%#v", this.Ipv4) + `}`}, ", ")
	return s
}
func (this *BytesRules_Ipv6) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&schema.BytesRules_Ipv6{` +
		`Ipv6:` + fmt.Sprintf("%#v", this.Ipv6) + `}`}, ", ")
	return s
}
func (this *EnumRules) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&schema.EnumRules{")
	s = append(s, "Const: "+fmt.Sprintf("%#v", this.Const)+",\n")
	s = append(s, "DefinedOnly: "+fmt.Sprintf("%#v", this.DefinedOnly)+",\n")
	s = append(s, "In: "+fmt.Sprintf("%#v", this.In)+",\n")
	s = append(s, "NotIn: "+fmt.Sprintf("%#v", this.NotIn)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *MessageRules) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&schema.MessageRules{")
	s = append(s, "Skip: "+fmt.Sprintf("%#v", this.Skip)+",\n")
	s = append(s, "Required: "+fmt.Sprintf("%#v", this.Required)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RepeatedRules) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&schema.RepeatedRules{")
	s = append(s, "MinItems: "+fmt.Sprintf("%#v", this.MinItems)+",\n")
	s = append(s, "MaxItems: "+fmt.Sprintf("%#v", this.MaxItems)+",\n")
	s = append(s, "Unique: "+fmt.Sprintf("%#v", this.Unique)+",\n")
	if this.Items != nil {
		s = append(s, "Items: "+fmt.Sprintf("%#v", this.Items)+",\n")
	}
	s = append(s, "NumItems: "+fmt.Sprintf("%#v", this.NumItems)+",\n")
	s = append(s, "UniqueMetadataName: "+fmt.Sprintf("%#v", this.UniqueMetadataName)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *MapRules) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&schema.MapRules{")
	s = append(s, "MinPairs: "+fmt.Sprintf("%#v", this.MinPairs)+",\n")
	s = append(s, "MaxPairs: "+fmt.Sprintf("%#v", this.MaxPairs)+",\n")
	s = append(s, "NoSparse: "+fmt.Sprintf("%#v", this.NoSparse)+",\n")
	if this.Keys != nil {
		s = append(s, "Keys: "+fmt.Sprintf("%#v", this.Keys)+",\n")
	}
	if this.Values != nil {
		s = append(s, "Values: "+fmt.Sprintf("%#v", this.Values)+",\n")
	}
	s = append(s, "UniqueValues: "+fmt.Sprintf("%#v", this.UniqueValues)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AnyRules) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&schema.AnyRules{")
	s = append(s, "Required: "+fmt.Sprintf("%#v", this.Required)+",\n")
	s = append(s, "In: "+fmt.Sprintf("%#v", this.In)+",\n")
	s = append(s, "NotIn: "+fmt.Sprintf("%#v", this.NotIn)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DurationRules) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 12)
	s = append(s, "&schema.DurationRules{")
	s = append(s, "Required: "+fmt.Sprintf("%#v", this.Required)+",\n")
	if this.Const != nil {
		s = append(s, "Const: "+fmt.Sprintf("%#v", this.Const)+",\n")
	}
	if this.Lt != nil {
		s = append(s, "Lt: "+fmt.Sprintf("%#v", this.Lt)+",\n")
	}
	if this.Lte != nil {
		s = append(s, "Lte: "+fmt.Sprintf("%#v", this.Lte)+",\n")
	}
	if this.Gt != nil {
		s = append(s, "Gt: "+fmt.Sprintf("%#v", this.Gt)+",\n")
	}
	if this.Gte != nil {
		s = append(s, "Gte: "+fmt.Sprintf("%#v", this.Gte)+",\n")
	}
	if this.In != nil {
		s = append(s, "In: "+fmt.Sprintf("%#v", this.In)+",\n")
	}
	if this.NotIn != nil {
		s = append(s, "NotIn: "+fmt.Sprintf("%#v", this.NotIn)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TimestampRules) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 13)
	s = append(s, "&schema.TimestampRules{")
	s = append(s, "Required: "+fmt.Sprintf("%#v", this.Required)+",\n")
	if this.Const != nil {
		s = append(s, "Const: "+fmt.Sprintf("%#v", this.Const)+",\n")
	}
	if this.Lt != nil {
		s = append(s, "Lt: "+fmt.Sprintf("%#v", this.Lt)+",\n")
	}
	if this.Lte != nil {
		s = append(s, "Lte: "+fmt.Sprintf("%#v", this.Lte)+",\n")
	}
	if this.Gt != nil {
		s = append(s, "Gt: "+fmt.Sprintf("%#v", this.Gt)+",\n")
	}
	if this.Gte != nil {
		s = append(s, "Gte: "+fmt.Sprintf("%#v", this.Gte)+",\n")
	}
	s = append(s, "LtNow: "+fmt.Sprintf("%#v", this.LtNow)+",\n")
	s = append(s, "GtNow: "+fmt.Sprintf("%#v", this.GtNow)+",\n")
	if this.Within != nil {
		s = append(s, "Within: "+fmt.Sprintf("%#v", this.Within)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringValidate(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *FieldRules) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FieldRules) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Type != nil {
		nn1, err := m.Type.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn1
	}
	return i, nil
}

func (m *FieldRules_Float) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Float != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintValidate(dAtA, i, uint64(m.Float.Size()))
		n2, err := m.Float.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	return i, nil
}
func (m *FieldRules_Double) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Double != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintValidate(dAtA, i, uint64(m.Double.Size()))
		n3, err := m.Double.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	return i, nil
}
func (m *FieldRules_Int32) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Int32 != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintValidate(dAtA, i, uint64(m.Int32.Size()))
		n4, err := m.Int32.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	return i, nil
}
func (m *FieldRules_Int64) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Int64 != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintValidate(dAtA, i, uint64(m.Int64.Size()))
		n5, err := m.Int64.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	return i, nil
}
func (m *FieldRules_Uint32) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Uint32 != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintValidate(dAtA, i, uint64(m.Uint32.Size()))
		n6, err := m.Uint32.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	return i, nil
}
func (m *FieldRules_Uint64) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Uint64 != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintValidate(dAtA, i, uint64(m.Uint64.Size()))
		n7, err := m.Uint64.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	return i, nil
}
func (m *FieldRules_Sint32) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Sint32 != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintValidate(dAtA, i, uint64(m.Sint32.Size()))
		n8, err := m.Sint32.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n8
	}
	return i, nil
}
func (m *FieldRules_Sint64) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Sint64 != nil {
		dAtA[i] = 0x42
		i++
		i = encodeVarintValidate(dAtA, i, uint64(m.Sint64.Size()))
		n9, err := m.Sint64.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n9
	}
	return i, nil
}
func (m *FieldRules_Fixed32) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Fixed32 != nil {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintValidate(dAtA, i, uint64(m.Fixed32.Size()))
		n10, err := m.Fixed32.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n10
	}
	return i, nil
}
func (m *FieldRules_Fixed64) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Fixed64 != nil {
		dAtA[i] = 0x52
		i++
		i = encodeVarintValidate(dAtA, i, uint64(m.Fixed64.Size()))
		n11, err := m.Fixed64.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n11
	}
	return i, nil
}
func (m *FieldRules_Sfixed32) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Sfixed32 != nil {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintValidate(dAtA, i, uint64(m.Sfixed32.Size()))
		n12, err := m.Sfixed32.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n12
	}
	return i, nil
}
func (m *FieldRules_Sfixed64) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Sfixed64 != nil {
		dAtA[i] = 0x62
		i++
		i = encodeVarintValidate(dAtA, i, uint64(m.Sfixed64.Size()))
		n13, err := m.Sfixed64.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n13
	}
	return i, nil
}
func (m *FieldRules_Bool) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Bool != nil {
		dAtA[i] = 0x6a
		i++
		i = encodeVarintValidate(dAtA, i, uint64(m.Bool.Size()))
		n14, err := m.Bool.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n14
	}
	return i, nil
}
func (m *FieldRules_String_) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.String_ != nil {
		dAtA[i] = 0x72
		i++
		i = encodeVarintValidate(dAtA, i, uint64(m.String_.Size()))
		n15, err := m.String_.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n15
	}
	return i, nil
}
func (m *FieldRules_Bytes) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Bytes != nil {
		dAtA[i] = 0x7a
		i++
		i = encodeVarintValidate(dAtA, i, uint64(m.Bytes.Size()))
		n16, err := m.Bytes.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n16
	}
	return i, nil
}
func (m *FieldRules_Enum) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Enum != nil {
		dAtA[i] = 0x82
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintValidate(dAtA, i, uint64(m.Enum.Size()))
		n17, err := m.Enum.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n17
	}
	return i, nil
}
func (m *FieldRules_Message) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Message != nil {
		dAtA[i] = 0x8a
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintValidate(dAtA, i, uint64(m.Message.Size()))
		n18, err := m.Message.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n18
	}
	return i, nil
}
func (m *FieldRules_Repeated) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Repeated != nil {
		dAtA[i] = 0x92
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintValidate(dAtA, i, uint64(m.Repeated.Size()))
		n19, err := m.Repeated.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n19
	}
	return i, nil
}
func (m *FieldRules_Map) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Map != nil {
		dAtA[i] = 0x9a
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintValidate(dAtA, i, uint64(m.Map.Size()))
		n20, err := m.Map.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n20
	}
	return i, nil
}
func (m *FieldRules_Any) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Any != nil {
		dAtA[i] = 0xa2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintValidate(dAtA, i, uint64(m.Any.Size()))
		n21, err := m.Any.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n21
	}
	return i, nil
}
func (m *FieldRules_Duration) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Duration != nil {
		dAtA[i] = 0xaa
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintValidate(dAtA, i, uint64(m.Duration.Size()))
		n22, err := m.Duration.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n22
	}
	return i, nil
}
func (m *FieldRules_Timestamp) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Timestamp != nil {
		dAtA[i] = 0xb2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintValidate(dAtA, i, uint64(m.Timestamp.Size()))
		n23, err := m.Timestamp.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n23
	}
	return i, nil
}
func (m *FloatRules) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FloatRules) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Const != 0 {
		dAtA[i] = 0xd
		i++
		binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Const))))
		i += 4
	}
	if m.Lt != 0 {
		dAtA[i] = 0x15
		i++
		binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Lt))))
		i += 4
	}
	if m.Lte != 0 {
		dAtA[i] = 0x1d
		i++
		binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Lte))))
		i += 4
	}
	if m.Gt != 0 {
		dAtA[i] = 0x25
		i++
		binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Gt))))
		i += 4
	}
	if m.Gte != 0 {
		dAtA[i] = 0x2d
		i++
		binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Gte))))
		i += 4
	}
	if len(m.In) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintValidate(dAtA, i, uint64(len(m.In)*4))
		for _, num := range m.In {
			f24 := math.Float32bits(float32(num))
			binary.LittleEndian.PutUint32(dAtA[i:], uint32(f24))
			i += 4
		}
	}
	if len(m.NotIn) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintValidate(dAtA, i, uint64(len(m.NotIn)*4))
		for _, num := range m.NotIn {
			f25 := math.Float32bits(float32(num))
			binary.LittleEndian.PutUint32(dAtA[i:], uint32(f25))
			i += 4
		}
	}
	return i, nil
}

func (m *DoubleRules) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DoubleRules) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Const != 0 {
		dAtA[i] = 0x9
		i++
		binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Const))))
		i += 8
	}
	if m.Lt != 0 {
		dAtA[i] = 0x11
		i++
		binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Lt))))
		i += 8
	}
	if m.Lte != 0 {
		dAtA[i] = 0x19
		i++
		binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Lte))))
		i += 8
	}
	if m.Gt != 0 {
		dAtA[i] = 0x21
		i++
		binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Gt))))
		i += 8
	}
	if m.Gte != 0 {
		dAtA[i] = 0x29
		i++
		binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Gte))))
		i += 8
	}
	if len(m.In) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintValidate(dAtA, i, uint64(len(m.In)*8))
		for _, num := range m.In {
			f26 := math.Float64bits(float64(num))
			binary.LittleEndian.PutUint64(dAtA[i:], uint64(f26))
			i += 8
		}
	}
	if len(m.NotIn) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintValidate(dAtA, i, uint64(len(m.NotIn)*8))
		for _, num := range m.NotIn {
			f27 := math.Float64bits(float64(num))
			binary.LittleEndian.PutUint64(dAtA[i:], uint64(f27))
			i += 8
		}
	}
	return i, nil
}

func (m *Int32Rules) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Int32Rules) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Const != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintValidate(dAtA, i, uint64(m.Const))
	}
	if m.Lt != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintValidate(dAtA, i, uint64(m.Lt))
	}
	if m.Lte != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintValidate(dAtA, i, uint64(m.Lte))
	}
	if m.Gt != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintValidate(dAtA, i, uint64(m.Gt))
	}
	if m.Gte != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintValidate(dAtA, i, uint64(m.Gte))
	}
	if len(m.In) > 0 {
		dAtA29 := make([]byte, len(m.In)*10)
		var j28 int
		for _, num1 := range m.In {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA29[j28] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j28++
			}
			dAtA29[j28] = uint8(num)
			j28++
		}
		dAtA[i] = 0x32
		i++
		i = encodeVarintValidate(dAtA, i, uint64(j28))
		i += copy(dAtA[i:], dAtA29[:j28])
	}
	if len(m.NotIn) > 0 {
		dAtA31 := make([]byte, len(m.NotIn)*10)
		var j30 int
		for _, num1 := range m.NotIn {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA31[j30] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j30++
			}
			dAtA31[j30] = uint8(num)
			j30++
		}
		dAtA[i] = 0x3a
		i++
		i = encodeVarintValidate(dAtA, i, uint64(j30))
		i += copy(dAtA[i:], dAtA31[:j30])
	}
	return i, nil
}

func (m *Int64Rules) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Int64Rules) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Const != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintValidate(dAtA, i, uint64(m.Const))
	}
	if m.Lt != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintValidate(dAtA, i, uint64(m.Lt))
	}
	if m.Lte != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintValidate(dAtA, i, uint64(m.Lte))
	}
	if m.Gt != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintValidate(dAtA, i, uint64(m.Gt))
	}
	if m.Gte != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintValidate(dAtA, i, uint64(m.Gte))
	}
	if len(m.In) > 0 {
		dAtA33 := make([]byte, len(m.In)*10)
		var j32 int
		for _, num1 := range m.In {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA33[j32] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j32++
			}
			dAtA33[j32] = uint8(num)
			j32++
		}
		dAtA[i] = 0x32
		i++
		i = encodeVarintValidate(dAtA, i, uint64(j32))
		i += copy(dAtA[i:], dAtA33[:j32])
	}
	if len(m.NotIn) > 0 {
		dAtA35 := make([]byte, len(m.NotIn)*10)
		var j34 int
		for _, num1 := range m.NotIn {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA35[j34] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j34++
			}
			dAtA35[j34] = uint8(num)
			j34++
		}
		dAtA[i] = 0x3a
		i++
		i = encodeVarintValidate(dAtA, i, uint64(j34))
		i += copy(dAtA[i:], dAtA35[:j34])
	}
	return i, nil
}

func (m *UInt32Rules) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UInt32Rules) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Const != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintValidate(dAtA, i, uint64(m.Const))
	}
	if m.Lt != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintValidate(dAtA, i, uint64(m.Lt))
	}
	if m.Lte != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintValidate(dAtA, i, uint64(m.Lte))
	}
	if m.Gt != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintValidate(dAtA, i, uint64(m.Gt))
	}
	if m.Gte != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintValidate(dAtA, i, uint64(m.Gte))
	}
	if len(m.In) > 0 {
		dAtA37 := make([]byte, len(m.In)*10)
		var j36 int
		for _, num := range m.In {
			for num >= 1<<7 {
				dAtA37[j36] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j36++
			}
			dAtA37[j36] = uint8(num)
			j36++
		}
		dAtA[i] = 0x32
		i++
		i = encodeVarintValidate(dAtA, i, uint64(j36))
		i += copy(dAtA[i:], dAtA37[:j36])
	}
	if len(m.NotIn) > 0 {
		dAtA39 := make([]byte, len(m.NotIn)*10)
		var j38 int
		for _, num := range m.NotIn {
			for num >= 1<<7 {
				dAtA39[j38] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j38++
			}
			dAtA39[j38] = uint8(num)
			j38++
		}
		dAtA[i] = 0x3a
		i++
		i = encodeVarintValidate(dAtA, i, uint64(j38))
		i += copy(dAtA[i:], dAtA39[:j38])
	}
	if len(m.Ranges) > 0 {
		dAtA[i] = 0x42
		i++
		i = encodeVarintValidate(dAtA, i, uint64(len(m.Ranges)))
		i += copy(dAtA[i:], m.Ranges)
	}
	if len(m.NotInRanges) > 0 {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintValidate(dAtA, i, uint64(len(m.NotInRanges)))
		i += copy(dAtA[i:], m.NotInRanges)
	}
	return i, nil
}

func (m *UInt64Rules) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UInt64Rules) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Const != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintValidate(dAtA, i, uint64(m.Const))
	}
	if m.Lt != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintValidate(dAtA, i, uint64(m.Lt))
	}
	if m.Lte != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintValidate(dAtA, i, uint64(m.Lte))
	}
	if m.Gt != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintValidate(dAtA, i, uint64(m.Gt))
	}
	if m.Gte != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintValidate(dAtA, i, uint64(m.Gte))
	}
	if len(m.In) > 0 {
		dAtA41 := make([]byte, len(m.In)*10)
		var j40 int
		for _, num := range m.In {
			for num >= 1<<7 {
				dAtA41[j40] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j40++
			}
			dAtA41[j40] = uint8(num)
			j40++
		}
		dAtA[i] = 0x32
		i++
		i = encodeVarintValidate(dAtA, i, uint64(j40))
		i += copy(dAtA[i:], dAtA41[:j40])
	}
	if len(m.NotIn) > 0 {
		dAtA43 := make([]byte, len(m.NotIn)*10)
		var j42 int
		for _, num := range m.NotIn {
			for num >= 1<<7 {
				dAtA43[j42] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j42++
			}
			dAtA43[j42] = uint8(num)
			j42++
		}
		dAtA[i] = 0x3a
		i++
		i = encodeVarintValidate(dAtA, i, uint64(j42))
		i += copy(dAtA[i:], dAtA43[:j42])
	}
	return i, nil
}

func (m *SInt32Rules) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SInt32Rules) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Const != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintValidate(dAtA, i, uint64((uint32(m.Const)<<1)^uint32((m.Const>>31))))
	}
	if m.Lt != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintValidate(dAtA, i, uint64((uint32(m.Lt)<<1)^uint32((m.Lt>>31))))
	}
	if m.Lte != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintValidate(dAtA, i, uint64((uint32(m.Lte)<<1)^uint32((m.Lte>>31))))
	}
	if m.Gt != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintValidate(dAtA, i, uint64((uint32(m.Gt)<<1)^uint32((m.Gt>>31))))
	}
	if m.Gte != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintValidate(dAtA, i, uint64((uint32(m.Gte)<<1)^uint32((m.Gte>>31))))
	}
	if len(m.In) > 0 {
		dAtA44 := make([]byte, len(m.In)*5)
		var j45 int
		for _, num := range m.In {
			x46 := (uint32(num) << 1) ^ uint32((num >> 31))
			for x46 >= 1<<7 {
				dAtA44[j45] = uint8(uint64(x46)&0x7f | 0x80)
				j45++
				x46 >>= 7
			}
			dAtA44[j45] = uint8(x46)
			j45++
		}
		dAtA[i] = 0x32
		i++
		i = encodeVarintValidate(dAtA, i, uint64(j45))
		i += copy(dAtA[i:], dAtA44[:j45])
	}
	if len(m.NotIn) > 0 {
		dAtA47 := make([]byte, len(m.NotIn)*5)
		var j48 int
		for _, num := range m.NotIn {
			x49 := (uint32(num) << 1) ^ uint32((num >> 31))
			for x49 >= 1<<7 {
				dAtA47[j48] = uint8(uint64(x49)&0x7f | 0x80)
				j48++
				x49 >>= 7
			}
			dAtA47[j48] = uint8(x49)
			j48++
		}
		dAtA[i] = 0x3a
		i++
		i = encodeVarintValidate(dAtA, i, uint64(j48))
		i += copy(dAtA[i:], dAtA47[:j48])
	}
	return i, nil
}

func (m *SInt64Rules) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SInt64Rules) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Const != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintValidate(dAtA, i, uint64((uint64(m.Const)<<1)^uint64((m.Const>>63))))
	}
	if m.Lt != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintValidate(dAtA, i, uint64((uint64(m.Lt)<<1)^uint64((m.Lt>>63))))
	}
	if m.Lte != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintValidate(dAtA, i, uint64((uint64(m.Lte)<<1)^uint64((m.Lte>>63))))
	}
	if m.Gt != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintValidate(dAtA, i, uint64((uint64(m.Gt)<<1)^uint64((m.Gt>>63))))
	}
	if m.Gte != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintValidate(dAtA, i, uint64((uint64(m.Gte)<<1)^uint64((m.Gte>>63))))
	}
	if len(m.In) > 0 {
		var j50 int
		dAtA52 := make([]byte, len(m.In)*10)
		for _, num := range m.In {
			x51 := (uint64(num) << 1) ^ uint64((num >> 63))
			for x51 >= 1<<7 {
				dAtA52[j50] = uint8(uint64(x51)&0x7f | 0x80)
				j50++
				x51 >>= 7
			}
			dAtA52[j50] = uint8(x51)
			j50++
		}
		dAtA[i] = 0x32
		i++
		i = encodeVarintValidate(dAtA, i, uint64(j50))
		i += copy(dAtA[i:], dAtA52[:j50])
	}
	if len(m.NotIn) > 0 {
		var j53 int
		dAtA55 := make([]byte, len(m.NotIn)*10)
		for _, num := range m.NotIn {
			x54 := (uint64(num) << 1) ^ uint64((num >> 63))
			for x54 >= 1<<7 {
				dAtA55[j53] = uint8(uint64(x54)&0x7f | 0x80)
				j53++
				x54 >>= 7
			}
			dAtA55[j53] = uint8(x54)
			j53++
		}
		dAtA[i] = 0x3a
		i++
		i = encodeVarintValidate(dAtA, i, uint64(j53))
		i += copy(dAtA[i:], dAtA55[:j53])
	}
	return i, nil
}

func (m *Fixed32Rules) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Fixed32Rules) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Const != 0 {
		dAtA[i] = 0xd
		i++
		binary.LittleEndian.PutUint32(dAtA[i:], uint32(m.Const))
		i += 4
	}
	if m.Lt != 0 {
		dAtA[i] = 0x15
		i++
		binary.LittleEndian.PutUint32(dAtA[i:], uint32(m.Lt))
		i += 4
	}
	if m.Lte != 0 {
		dAtA[i] = 0x1d
		i++
		binary.LittleEndian.PutUint32(dAtA[i:], uint32(m.Lte))
		i += 4
	}
	if m.Gt != 0 {
		dAtA[i] = 0x25
		i++
		binary.LittleEndian.PutUint32(dAtA[i:], uint32(m.Gt))
		i += 4
	}
	if m.Gte != 0 {
		dAtA[i] = 0x2d
		i++
		binary.LittleEndian.PutUint32(dAtA[i:], uint32(m.Gte))
		i += 4
	}
	if len(m.In) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintValidate(dAtA, i, uint64(len(m.In)*4))
		for _, num := range m.In {
			binary.LittleEndian.PutUint32(dAtA[i:], uint32(num))
			i += 4
		}
	}
	if len(m.NotIn) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintValidate(dAtA, i, uint64(len(m.NotIn)*4))
		for _, num := range m.NotIn {
			binary.LittleEndian.PutUint32(dAtA[i:], uint32(num))
			i += 4
		}
	}
	return i, nil
}

func (m *Fixed64Rules) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Fixed64Rules) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Const != 0 {
		dAtA[i] = 0x9
		i++
		binary.LittleEndian.PutUint64(dAtA[i:], uint64(m.Const))
		i += 8
	}
	if m.Lt != 0 {
		dAtA[i] = 0x11
		i++
		binary.LittleEndian.PutUint64(dAtA[i:], uint64(m.Lt))
		i += 8
	}
	if m.Lte != 0 {
		dAtA[i] = 0x19
		i++
		binary.LittleEndian.PutUint64(dAtA[i:], uint64(m.Lte))
		i += 8
	}
	if m.Gt != 0 {
		dAtA[i] = 0x21
		i++
		binary.LittleEndian.PutUint64(dAtA[i:], uint64(m.Gt))
		i += 8
	}
	if m.Gte != 0 {
		dAtA[i] = 0x29
		i++
		binary.LittleEndian.PutUint64(dAtA[i:], uint64(m.Gte))
		i += 8
	}
	if len(m.In) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintValidate(dAtA, i, uint64(len(m.In)*8))
		for _, num := range m.In {
			binary.LittleEndian.PutUint64(dAtA[i:], uint64(num))
			i += 8
		}
	}
	if len(m.NotIn) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintValidate(dAtA, i, uint64(len(m.NotIn)*8))
		for _, num := range m.NotIn {
			binary.LittleEndian.PutUint64(dAtA[i:], uint64(num))
			i += 8
		}
	}
	return i, nil
}

func (m *SFixed32Rules) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SFixed32Rules) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Const != 0 {
		dAtA[i] = 0xd
		i++
		binary.LittleEndian.PutUint32(dAtA[i:], uint32(m.Const))
		i += 4
	}
	if m.Lt != 0 {
		dAtA[i] = 0x15
		i++
		binary.LittleEndian.PutUint32(dAtA[i:], uint32(m.Lt))
		i += 4
	}
	if m.Lte != 0 {
		dAtA[i] = 0x1d
		i++
		binary.LittleEndian.PutUint32(dAtA[i:], uint32(m.Lte))
		i += 4
	}
	if m.Gt != 0 {
		dAtA[i] = 0x25
		i++
		binary.LittleEndian.PutUint32(dAtA[i:], uint32(m.Gt))
		i += 4
	}
	if m.Gte != 0 {
		dAtA[i] = 0x2d
		i++
		binary.LittleEndian.PutUint32(dAtA[i:], uint32(m.Gte))
		i += 4
	}
	if len(m.In) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintValidate(dAtA, i, uint64(len(m.In)*4))
		for _, num := range m.In {
			binary.LittleEndian.PutUint32(dAtA[i:], uint32(num))
			i += 4
		}
	}
	if len(m.NotIn) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintValidate(dAtA, i, uint64(len(m.NotIn)*4))
		for _, num := range m.NotIn {
			binary.LittleEndian.PutUint32(dAtA[i:], uint32(num))
			i += 4
		}
	}
	return i, nil
}

func (m *SFixed64Rules) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SFixed64Rules) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Const != 0 {
		dAtA[i] = 0x9
		i++
		binary.LittleEndian.PutUint64(dAtA[i:], uint64(m.Const))
		i += 8
	}
	if m.Lt != 0 {
		dAtA[i] = 0x11
		i++
		binary.LittleEndian.PutUint64(dAtA[i:], uint64(m.Lt))
		i += 8
	}
	if m.Lte != 0 {
		dAtA[i] = 0x19
		i++
		binary.LittleEndian.PutUint64(dAtA[i:], uint64(m.Lte))
		i += 8
	}
	if m.Gt != 0 {
		dAtA[i] = 0x21
		i++
		binary.LittleEndian.PutUint64(dAtA[i:], uint64(m.Gt))
		i += 8
	}
	if m.Gte != 0 {
		dAtA[i] = 0x29
		i++
		binary.LittleEndian.PutUint64(dAtA[i:], uint64(m.Gte))
		i += 8
	}
	if len(m.In) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintValidate(dAtA, i, uint64(len(m.In)*8))
		for _, num := range m.In {
			binary.LittleEndian.PutUint64(dAtA[i:], uint64(num))
			i += 8
		}
	}
	if len(m.NotIn) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintValidate(dAtA, i, uint64(len(m.NotIn)*8))
		for _, num := range m.NotIn {
			binary.LittleEndian.PutUint64(dAtA[i:], uint64(num))
			i += 8
		}
	}
	return i, nil
}

func (m *BoolRules) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BoolRules) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Const {
		dAtA[i] = 0x8
		i++
		if m.Const {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *StringRules) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StringRules) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Const) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintValidate(dAtA, i, uint64(len(m.Const)))
		i += copy(dAtA[i:], m.Const)
	}
	if m.MinLen != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintValidate(dAtA, i, uint64(m.MinLen))
	}
	if m.MaxLen != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintValidate(dAtA, i, uint64(m.MaxLen))
	}
	if m.MinBytes != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintValidate(dAtA, i, uint64(m.MinBytes))
	}
	if m.MaxBytes != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintValidate(dAtA, i, uint64(m.MaxBytes))
	}
	if len(m.Pattern) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintValidate(dAtA, i, uint64(len(m.Pattern)))
		i += copy(dAtA[i:], m.Pattern)
	}
	if len(m.Prefix) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintValidate(dAtA, i, uint64(len(m.Prefix)))
		i += copy(dAtA[i:], m.Prefix)
	}
	if len(m.Suffix) > 0 {
		dAtA[i] = 0x42
		i++
		i = encodeVarintValidate(dAtA, i, uint64(len(m.Suffix)))
		i += copy(dAtA[i:], m.Suffix)
	}
	if len(m.Contains) > 0 {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintValidate(dAtA, i, uint64(len(m.Contains)))
		i += copy(dAtA[i:], m.Contains)
	}
	if len(m.In) > 0 {
		for _, s := range m.In {
			dAtA[i] = 0x52
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.NotIn) > 0 {
		for _, s := range m.NotIn {
			dAtA[i] = 0x5a
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if m.WellKnown != nil {
		nn56, err := m.WellKnown.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn56
	}
	if m.Len != 0 {
		dAtA[i] = 0x98
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintValidate(dAtA, i, uint64(m.Len))
	}
	if m.LenBytes != 0 {
		dAtA[i] = 0xa0
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintValidate(dAtA, i, uint64(m.LenBytes))
	}
	if m.MinIpPrefixLength != 0 {
		dAtA[i] = 0x90
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintValidate(dAtA, i, uint64(m.MinIpPrefixLength))
	}
	if m.MaxIpPrefixLength != 0 {
		dAtA[i] = 0x98
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintValidate(dAtA, i, uint64(m.MaxIpPrefixLength))
	}
	return i, nil
}

func (m *StringRules_Email) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x60
	i++
	if m.Email {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i++
	return i, nil
}
func (m *StringRules_Hostname) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x68
	i++
	if m.Hostname {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i++
	return i, nil
}
func (m *StringRules_Ip) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x70
	i++
	if m.Ip {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i++
	return i, nil
}
func (m *StringRules_Ipv4) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x78
	i++
	if m.Ipv4 {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i++
	return i, nil
}
func (m *StringRules_Ipv6) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x80
	i++
	dAtA[i] = 0x1
	i++
	if m.Ipv6 {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i++
	return i, nil
}
func (m *StringRules_Uri) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x88
	i++
	dAtA[i] = 0x1
	i++
	if m.Uri {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i++
	return i, nil
}
func (m *StringRules_UriRef) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x90
	i++
	dAtA[i] = 0x1
	i++
	if m.UriRef {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i++
	return i, nil
}
func (m *StringRules_IpPrefix) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0xa8
	i++
	dAtA[i] = 0x1
	i++
	if m.IpPrefix {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i++
	return i, nil
}
func (m *StringRules_PortRange) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0xb0
	i++
	dAtA[i] = 0x1
	i++
	if m.PortRange {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i++
	return i, nil
}
func (m *StringRules_Mac) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0xb8
	i++
	dAtA[i] = 0x1
	i++
	if m.Mac {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i++
	return i, nil
}
func (m *StringRules_Regex) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0xc0
	i++
	dAtA[i] = 0x1
	i++
	if m.Regex {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i++
	return i, nil
}
func (m *StringRules_HttpHeaderField) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0xc8
	i++
	dAtA[i] = 0x1
	i++
	if m.HttpHeaderField {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i++
	return i, nil
}
func (m *StringRules_K8SLabelValue) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0xd0
	i++
	dAtA[i] = 0x1
	i++
	if m.K8SLabelValue {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i++
	return i, nil
}
func (m *StringRules_NotEmpty) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0xd8
	i++
	dAtA[i] = 0x1
	i++
	if m.NotEmpty {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i++
	return i, nil
}
func (m *StringRules_Hostport) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0xe0
	i++
	dAtA[i] = 0x1
	i++
	if m.Hostport {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i++
	return i, nil
}
func (m *StringRules_JsonPath) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0xe8
	i++
	dAtA[i] = 0x1
	i++
	if m.JsonPath {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i++
	return i, nil
}
func (m *StringRules_Hex) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0xf0
	i++
	dAtA[i] = 0x1
	i++
	if m.Hex {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i++
	return i, nil
}
func (m *StringRules_Ipv4Prefix) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0xf8
	i++
	dAtA[i] = 0x1
	i++
	if m.Ipv4Prefix {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i++
	return i, nil
}
func (m *StringRules_Ipv6Prefix) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x80
	i++
	dAtA[i] = 0x2
	i++
	if m.Ipv6Prefix {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i++
	return i, nil
}
func (m *StringRules_VhDomain) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x88
	i++
	dAtA[i] = 0x2
	i++
	if m.VhDomain {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i++
	return i, nil
}
func (m *StringRules_VesObjectName) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0xa0
	i++
	dAtA[i] = 0x2
	i++
	if m.VesObjectName {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i++
	return i, nil
}
func (m *StringRules_IanaSvcName) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0xa8
	i++
	dAtA[i] = 0x2
	i++
	if m.IanaSvcName {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i++
	return i, nil
}
func (m *StringRules_Dns_1123Label) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0xb0
	i++
	dAtA[i] = 0x2
	i++
	if m.Dns_1123Label {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i++
	return i, nil
}
func (m *StringRules_UnixFilePath) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0xb8
	i++
	dAtA[i] = 0x2
	i++
	if m.UnixFilePath {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i++
	return i, nil
}
func (m *StringRules_PhoneNumber) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0xc0
	i++
	dAtA[i] = 0x2
	i++
	if m.PhoneNumber {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i++
	return i, nil
}
func (m *StringRules_PortRangeList) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0xc8
	i++
	dAtA[i] = 0x2
	i++
	if m.PortRangeList {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i++
	return i, nil
}
func (m *StringRules_VhDomainNoPort) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0xd0
	i++
	dAtA[i] = 0x2
	i++
	if m.VhDomainNoPort {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i++
	return i, nil
}
func (m *StringRules_HostnameOrIp) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0xd8
	i++
	dAtA[i] = 0x2
	i++
	if m.HostnameOrIp {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i++
	return i, nil
}
func (m *StringRules_K8SLabelSelector) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0xe0
	i++
	dAtA[i] = 0x2
	i++
	if m.K8SLabelSelector {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i++
	return i, nil
}
func (m *BytesRules) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BytesRules) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Const) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintValidate(dAtA, i, uint64(len(m.Const)))
		i += copy(dAtA[i:], m.Const)
	}
	if m.MinLen != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintValidate(dAtA, i, uint64(m.MinLen))
	}
	if m.MaxLen != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintValidate(dAtA, i, uint64(m.MaxLen))
	}
	if len(m.Pattern) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintValidate(dAtA, i, uint64(len(m.Pattern)))
		i += copy(dAtA[i:], m.Pattern)
	}
	if len(m.Prefix) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintValidate(dAtA, i, uint64(len(m.Prefix)))
		i += copy(dAtA[i:], m.Prefix)
	}
	if len(m.Suffix) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintValidate(dAtA, i, uint64(len(m.Suffix)))
		i += copy(dAtA[i:], m.Suffix)
	}
	if len(m.Contains) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintValidate(dAtA, i, uint64(len(m.Contains)))
		i += copy(dAtA[i:], m.Contains)
	}
	if len(m.In) > 0 {
		for _, b := range m.In {
			dAtA[i] = 0x42
			i++
			i = encodeVarintValidate(dAtA, i, uint64(len(b)))
			i += copy(dAtA[i:], b)
		}
	}
	if len(m.NotIn) > 0 {
		for _, b := range m.NotIn {
			dAtA[i] = 0x4a
			i++
			i = encodeVarintValidate(dAtA, i, uint64(len(b)))
			i += copy(dAtA[i:], b)
		}
	}
	if m.WellKnown != nil {
		nn57, err := m.WellKnown.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn57
	}
	if m.Len != 0 {
		dAtA[i] = 0x68
		i++
		i = encodeVarintValidate(dAtA, i, uint64(m.Len))
	}
	return i, nil
}

func (m *BytesRules_Ip) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x50
	i++
	if m.Ip {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i++
	return i, nil
}
func (m *BytesRules_Ipv4) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x58
	i++
	if m.Ipv4 {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i++
	return i, nil
}
func (m *BytesRules_Ipv6) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x60
	i++
	if m.Ipv6 {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i++
	return i, nil
}
func (m *EnumRules) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EnumRules) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Const != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintValidate(dAtA, i, uint64(m.Const))
	}
	if m.DefinedOnly {
		dAtA[i] = 0x10
		i++
		if m.DefinedOnly {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.In) > 0 {
		dAtA59 := make([]byte, len(m.In)*10)
		var j58 int
		for _, num1 := range m.In {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA59[j58] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j58++
			}
			dAtA59[j58] = uint8(num)
			j58++
		}
		dAtA[i] = 0x1a
		i++
		i = encodeVarintValidate(dAtA, i, uint64(j58))
		i += copy(dAtA[i:], dAtA59[:j58])
	}
	if len(m.NotIn) > 0 {
		dAtA61 := make([]byte, len(m.NotIn)*10)
		var j60 int
		for _, num1 := range m.NotIn {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA61[j60] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j60++
			}
			dAtA61[j60] = uint8(num)
			j60++
		}
		dAtA[i] = 0x22
		i++
		i = encodeVarintValidate(dAtA, i, uint64(j60))
		i += copy(dAtA[i:], dAtA61[:j60])
	}
	return i, nil
}

func (m *MessageRules) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MessageRules) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Skip {
		dAtA[i] = 0x8
		i++
		if m.Skip {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Required {
		dAtA[i] = 0x10
		i++
		if m.Required {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *RepeatedRules) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RepeatedRules) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.MinItems != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintValidate(dAtA, i, uint64(m.MinItems))
	}
	if m.MaxItems != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintValidate(dAtA, i, uint64(m.MaxItems))
	}
	if m.Unique {
		dAtA[i] = 0x18
		i++
		if m.Unique {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Items != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintValidate(dAtA, i, uint64(m.Items.Size()))
		n62, err := m.Items.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n62
	}
	if len(m.NumItems) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintValidate(dAtA, i, uint64(len(m.NumItems)))
		i += copy(dAtA[i:], m.NumItems)
	}
	if m.UniqueMetadataName {
		dAtA[i] = 0x30
		i++
		if m.UniqueMetadataName {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *MapRules) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MapRules) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.MinPairs != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintValidate(dAtA, i, uint64(m.MinPairs))
	}
	if m.MaxPairs != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintValidate(dAtA, i, uint64(m.MaxPairs))
	}
	if m.NoSparse {
		dAtA[i] = 0x18
		i++
		if m.NoSparse {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Keys != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintValidate(dAtA, i, uint64(m.Keys.Size()))
		n63, err := m.Keys.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n63
	}
	if m.Values != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintValidate(dAtA, i, uint64(m.Values.Size()))
		n64, err := m.Values.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n64
	}
	if m.UniqueValues {
		dAtA[i] = 0x30
		i++
		if m.UniqueValues {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *AnyRules) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AnyRules) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Required {
		dAtA[i] = 0x8
		i++
		if m.Required {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.In) > 0 {
		for _, s := range m.In {
			dAtA[i] = 0x12
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.NotIn) > 0 {
		for _, s := range m.NotIn {
			dAtA[i] = 0x1a
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	return i, nil
}

func (m *DurationRules) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DurationRules) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Required {
		dAtA[i] = 0x8
		i++
		if m.Required {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Const != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintValidate(dAtA, i, uint64(m.Const.Size()))
		n65, err := m.Const.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n65
	}
	if m.Lt != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintValidate(dAtA, i, uint64(m.Lt.Size()))
		n66, err := m.Lt.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n66
	}
	if m.Lte != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintValidate(dAtA, i, uint64(m.Lte.Size()))
		n67, err := m.Lte.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n67
	}
	if m.Gt != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintValidate(dAtA, i, uint64(m.Gt.Size()))
		n68, err := m.Gt.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n68
	}
	if m.Gte != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintValidate(dAtA, i, uint64(m.Gte.Size()))
		n69, err := m.Gte.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n69
	}
	if len(m.In) > 0 {
		for _, msg := range m.In {
			dAtA[i] = 0x3a
			i++
			i = encodeVarintValidate(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.NotIn) > 0 {
		for _, msg := range m.NotIn {
			dAtA[i] = 0x42
			i++
			i = encodeVarintValidate(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *TimestampRules) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TimestampRules) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Required {
		dAtA[i] = 0x8
		i++
		if m.Required {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Const != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintValidate(dAtA, i, uint64(m.Const.Size()))
		n70, err := m.Const.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n70
	}
	if m.Lt != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintValidate(dAtA, i, uint64(m.Lt.Size()))
		n71, err := m.Lt.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n71
	}
	if m.Lte != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintValidate(dAtA, i, uint64(m.Lte.Size()))
		n72, err := m.Lte.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n72
	}
	if m.Gt != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintValidate(dAtA, i, uint64(m.Gt.Size()))
		n73, err := m.Gt.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n73
	}
	if m.Gte != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintValidate(dAtA, i, uint64(m.Gte.Size()))
		n74, err := m.Gte.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n74
	}
	if m.LtNow {
		dAtA[i] = 0x38
		i++
		if m.LtNow {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.GtNow {
		dAtA[i] = 0x40
		i++
		if m.GtNow {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Within != nil {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintValidate(dAtA, i, uint64(m.Within.Size()))
		n75, err := m.Within.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n75
	}
	return i, nil
}

func encodeVarintValidate(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *FieldRules) Size() (n int) {
	var l int
	_ = l
	if m.Type != nil {
		n += m.Type.Size()
	}
	return n
}

func (m *FieldRules_Float) Size() (n int) {
	var l int
	_ = l
	if m.Float != nil {
		l = m.Float.Size()
		n += 1 + l + sovValidate(uint64(l))
	}
	return n
}
func (m *FieldRules_Double) Size() (n int) {
	var l int
	_ = l
	if m.Double != nil {
		l = m.Double.Size()
		n += 1 + l + sovValidate(uint64(l))
	}
	return n
}
func (m *FieldRules_Int32) Size() (n int) {
	var l int
	_ = l
	if m.Int32 != nil {
		l = m.Int32.Size()
		n += 1 + l + sovValidate(uint64(l))
	}
	return n
}
func (m *FieldRules_Int64) Size() (n int) {
	var l int
	_ = l
	if m.Int64 != nil {
		l = m.Int64.Size()
		n += 1 + l + sovValidate(uint64(l))
	}
	return n
}
func (m *FieldRules_Uint32) Size() (n int) {
	var l int
	_ = l
	if m.Uint32 != nil {
		l = m.Uint32.Size()
		n += 1 + l + sovValidate(uint64(l))
	}
	return n
}
func (m *FieldRules_Uint64) Size() (n int) {
	var l int
	_ = l
	if m.Uint64 != nil {
		l = m.Uint64.Size()
		n += 1 + l + sovValidate(uint64(l))
	}
	return n
}
func (m *FieldRules_Sint32) Size() (n int) {
	var l int
	_ = l
	if m.Sint32 != nil {
		l = m.Sint32.Size()
		n += 1 + l + sovValidate(uint64(l))
	}
	return n
}
func (m *FieldRules_Sint64) Size() (n int) {
	var l int
	_ = l
	if m.Sint64 != nil {
		l = m.Sint64.Size()
		n += 1 + l + sovValidate(uint64(l))
	}
	return n
}
func (m *FieldRules_Fixed32) Size() (n int) {
	var l int
	_ = l
	if m.Fixed32 != nil {
		l = m.Fixed32.Size()
		n += 1 + l + sovValidate(uint64(l))
	}
	return n
}
func (m *FieldRules_Fixed64) Size() (n int) {
	var l int
	_ = l
	if m.Fixed64 != nil {
		l = m.Fixed64.Size()
		n += 1 + l + sovValidate(uint64(l))
	}
	return n
}
func (m *FieldRules_Sfixed32) Size() (n int) {
	var l int
	_ = l
	if m.Sfixed32 != nil {
		l = m.Sfixed32.Size()
		n += 1 + l + sovValidate(uint64(l))
	}
	return n
}
func (m *FieldRules_Sfixed64) Size() (n int) {
	var l int
	_ = l
	if m.Sfixed64 != nil {
		l = m.Sfixed64.Size()
		n += 1 + l + sovValidate(uint64(l))
	}
	return n
}
func (m *FieldRules_Bool) Size() (n int) {
	var l int
	_ = l
	if m.Bool != nil {
		l = m.Bool.Size()
		n += 1 + l + sovValidate(uint64(l))
	}
	return n
}
func (m *FieldRules_String_) Size() (n int) {
	var l int
	_ = l
	if m.String_ != nil {
		l = m.String_.Size()
		n += 1 + l + sovValidate(uint64(l))
	}
	return n
}
func (m *FieldRules_Bytes) Size() (n int) {
	var l int
	_ = l
	if m.Bytes != nil {
		l = m.Bytes.Size()
		n += 1 + l + sovValidate(uint64(l))
	}
	return n
}
func (m *FieldRules_Enum) Size() (n int) {
	var l int
	_ = l
	if m.Enum != nil {
		l = m.Enum.Size()
		n += 2 + l + sovValidate(uint64(l))
	}
	return n
}
func (m *FieldRules_Message) Size() (n int) {
	var l int
	_ = l
	if m.Message != nil {
		l = m.Message.Size()
		n += 2 + l + sovValidate(uint64(l))
	}
	return n
}
func (m *FieldRules_Repeated) Size() (n int) {
	var l int
	_ = l
	if m.Repeated != nil {
		l = m.Repeated.Size()
		n += 2 + l + sovValidate(uint64(l))
	}
	return n
}
func (m *FieldRules_Map) Size() (n int) {
	var l int
	_ = l
	if m.Map != nil {
		l = m.Map.Size()
		n += 2 + l + sovValidate(uint64(l))
	}
	return n
}
func (m *FieldRules_Any) Size() (n int) {
	var l int
	_ = l
	if m.Any != nil {
		l = m.Any.Size()
		n += 2 + l + sovValidate(uint64(l))
	}
	return n
}
func (m *FieldRules_Duration) Size() (n int) {
	var l int
	_ = l
	if m.Duration != nil {
		l = m.Duration.Size()
		n += 2 + l + sovValidate(uint64(l))
	}
	return n
}
func (m *FieldRules_Timestamp) Size() (n int) {
	var l int
	_ = l
	if m.Timestamp != nil {
		l = m.Timestamp.Size()
		n += 2 + l + sovValidate(uint64(l))
	}
	return n
}
func (m *FloatRules) Size() (n int) {
	var l int
	_ = l
	if m.Const != 0 {
		n += 5
	}
	if m.Lt != 0 {
		n += 5
	}
	if m.Lte != 0 {
		n += 5
	}
	if m.Gt != 0 {
		n += 5
	}
	if m.Gte != 0 {
		n += 5
	}
	if len(m.In) > 0 {
		n += 1 + sovValidate(uint64(len(m.In)*4)) + len(m.In)*4
	}
	if len(m.NotIn) > 0 {
		n += 1 + sovValidate(uint64(len(m.NotIn)*4)) + len(m.NotIn)*4
	}
	return n
}

func (m *DoubleRules) Size() (n int) {
	var l int
	_ = l
	if m.Const != 0 {
		n += 9
	}
	if m.Lt != 0 {
		n += 9
	}
	if m.Lte != 0 {
		n += 9
	}
	if m.Gt != 0 {
		n += 9
	}
	if m.Gte != 0 {
		n += 9
	}
	if len(m.In) > 0 {
		n += 1 + sovValidate(uint64(len(m.In)*8)) + len(m.In)*8
	}
	if len(m.NotIn) > 0 {
		n += 1 + sovValidate(uint64(len(m.NotIn)*8)) + len(m.NotIn)*8
	}
	return n
}

func (m *Int32Rules) Size() (n int) {
	var l int
	_ = l
	if m.Const != 0 {
		n += 1 + sovValidate(uint64(m.Const))
	}
	if m.Lt != 0 {
		n += 1 + sovValidate(uint64(m.Lt))
	}
	if m.Lte != 0 {
		n += 1 + sovValidate(uint64(m.Lte))
	}
	if m.Gt != 0 {
		n += 1 + sovValidate(uint64(m.Gt))
	}
	if m.Gte != 0 {
		n += 1 + sovValidate(uint64(m.Gte))
	}
	if len(m.In) > 0 {
		l = 0
		for _, e := range m.In {
			l += sovValidate(uint64(e))
		}
		n += 1 + sovValidate(uint64(l)) + l
	}
	if len(m.NotIn) > 0 {
		l = 0
		for _, e := range m.NotIn {
			l += sovValidate(uint64(e))
		}
		n += 1 + sovValidate(uint64(l)) + l
	}
	return n
}

func (m *Int64Rules) Size() (n int) {
	var l int
	_ = l
	if m.Const != 0 {
		n += 1 + sovValidate(uint64(m.Const))
	}
	if m.Lt != 0 {
		n += 1 + sovValidate(uint64(m.Lt))
	}
	if m.Lte != 0 {
		n += 1 + sovValidate(uint64(m.Lte))
	}
	if m.Gt != 0 {
		n += 1 + sovValidate(uint64(m.Gt))
	}
	if m.Gte != 0 {
		n += 1 + sovValidate(uint64(m.Gte))
	}
	if len(m.In) > 0 {
		l = 0
		for _, e := range m.In {
			l += sovValidate(uint64(e))
		}
		n += 1 + sovValidate(uint64(l)) + l
	}
	if len(m.NotIn) > 0 {
		l = 0
		for _, e := range m.NotIn {
			l += sovValidate(uint64(e))
		}
		n += 1 + sovValidate(uint64(l)) + l
	}
	return n
}

func (m *UInt32Rules) Size() (n int) {
	var l int
	_ = l
	if m.Const != 0 {
		n += 1 + sovValidate(uint64(m.Const))
	}
	if m.Lt != 0 {
		n += 1 + sovValidate(uint64(m.Lt))
	}
	if m.Lte != 0 {
		n += 1 + sovValidate(uint64(m.Lte))
	}
	if m.Gt != 0 {
		n += 1 + sovValidate(uint64(m.Gt))
	}
	if m.Gte != 0 {
		n += 1 + sovValidate(uint64(m.Gte))
	}
	if len(m.In) > 0 {
		l = 0
		for _, e := range m.In {
			l += sovValidate(uint64(e))
		}
		n += 1 + sovValidate(uint64(l)) + l
	}
	if len(m.NotIn) > 0 {
		l = 0
		for _, e := range m.NotIn {
			l += sovValidate(uint64(e))
		}
		n += 1 + sovValidate(uint64(l)) + l
	}
	l = len(m.Ranges)
	if l > 0 {
		n += 1 + l + sovValidate(uint64(l))
	}
	l = len(m.NotInRanges)
	if l > 0 {
		n += 1 + l + sovValidate(uint64(l))
	}
	return n
}

func (m *UInt64Rules) Size() (n int) {
	var l int
	_ = l
	if m.Const != 0 {
		n += 1 + sovValidate(uint64(m.Const))
	}
	if m.Lt != 0 {
		n += 1 + sovValidate(uint64(m.Lt))
	}
	if m.Lte != 0 {
		n += 1 + sovValidate(uint64(m.Lte))
	}
	if m.Gt != 0 {
		n += 1 + sovValidate(uint64(m.Gt))
	}
	if m.Gte != 0 {
		n += 1 + sovValidate(uint64(m.Gte))
	}
	if len(m.In) > 0 {
		l = 0
		for _, e := range m.In {
			l += sovValidate(uint64(e))
		}
		n += 1 + sovValidate(uint64(l)) + l
	}
	if len(m.NotIn) > 0 {
		l = 0
		for _, e := range m.NotIn {
			l += sovValidate(uint64(e))
		}
		n += 1 + sovValidate(uint64(l)) + l
	}
	return n
}

func (m *SInt32Rules) Size() (n int) {
	var l int
	_ = l
	if m.Const != 0 {
		n += 1 + sozValidate(uint64(m.Const))
	}
	if m.Lt != 0 {
		n += 1 + sozValidate(uint64(m.Lt))
	}
	if m.Lte != 0 {
		n += 1 + sozValidate(uint64(m.Lte))
	}
	if m.Gt != 0 {
		n += 1 + sozValidate(uint64(m.Gt))
	}
	if m.Gte != 0 {
		n += 1 + sozValidate(uint64(m.Gte))
	}
	if len(m.In) > 0 {
		l = 0
		for _, e := range m.In {
			l += sozValidate(uint64(e))
		}
		n += 1 + sovValidate(uint64(l)) + l
	}
	if len(m.NotIn) > 0 {
		l = 0
		for _, e := range m.NotIn {
			l += sozValidate(uint64(e))
		}
		n += 1 + sovValidate(uint64(l)) + l
	}
	return n
}

func (m *SInt64Rules) Size() (n int) {
	var l int
	_ = l
	if m.Const != 0 {
		n += 1 + sozValidate(uint64(m.Const))
	}
	if m.Lt != 0 {
		n += 1 + sozValidate(uint64(m.Lt))
	}
	if m.Lte != 0 {
		n += 1 + sozValidate(uint64(m.Lte))
	}
	if m.Gt != 0 {
		n += 1 + sozValidate(uint64(m.Gt))
	}
	if m.Gte != 0 {
		n += 1 + sozValidate(uint64(m.Gte))
	}
	if len(m.In) > 0 {
		l = 0
		for _, e := range m.In {
			l += sozValidate(uint64(e))
		}
		n += 1 + sovValidate(uint64(l)) + l
	}
	if len(m.NotIn) > 0 {
		l = 0
		for _, e := range m.NotIn {
			l += sozValidate(uint64(e))
		}
		n += 1 + sovValidate(uint64(l)) + l
	}
	return n
}

func (m *Fixed32Rules) Size() (n int) {
	var l int
	_ = l
	if m.Const != 0 {
		n += 5
	}
	if m.Lt != 0 {
		n += 5
	}
	if m.Lte != 0 {
		n += 5
	}
	if m.Gt != 0 {
		n += 5
	}
	if m.Gte != 0 {
		n += 5
	}
	if len(m.In) > 0 {
		n += 1 + sovValidate(uint64(len(m.In)*4)) + len(m.In)*4
	}
	if len(m.NotIn) > 0 {
		n += 1 + sovValidate(uint64(len(m.NotIn)*4)) + len(m.NotIn)*4
	}
	return n
}

func (m *Fixed64Rules) Size() (n int) {
	var l int
	_ = l
	if m.Const != 0 {
		n += 9
	}
	if m.Lt != 0 {
		n += 9
	}
	if m.Lte != 0 {
		n += 9
	}
	if m.Gt != 0 {
		n += 9
	}
	if m.Gte != 0 {
		n += 9
	}
	if len(m.In) > 0 {
		n += 1 + sovValidate(uint64(len(m.In)*8)) + len(m.In)*8
	}
	if len(m.NotIn) > 0 {
		n += 1 + sovValidate(uint64(len(m.NotIn)*8)) + len(m.NotIn)*8
	}
	return n
}

func (m *SFixed32Rules) Size() (n int) {
	var l int
	_ = l
	if m.Const != 0 {
		n += 5
	}
	if m.Lt != 0 {
		n += 5
	}
	if m.Lte != 0 {
		n += 5
	}
	if m.Gt != 0 {
		n += 5
	}
	if m.Gte != 0 {
		n += 5
	}
	if len(m.In) > 0 {
		n += 1 + sovValidate(uint64(len(m.In)*4)) + len(m.In)*4
	}
	if len(m.NotIn) > 0 {
		n += 1 + sovValidate(uint64(len(m.NotIn)*4)) + len(m.NotIn)*4
	}
	return n
}

func (m *SFixed64Rules) Size() (n int) {
	var l int
	_ = l
	if m.Const != 0 {
		n += 9
	}
	if m.Lt != 0 {
		n += 9
	}
	if m.Lte != 0 {
		n += 9
	}
	if m.Gt != 0 {
		n += 9
	}
	if m.Gte != 0 {
		n += 9
	}
	if len(m.In) > 0 {
		n += 1 + sovValidate(uint64(len(m.In)*8)) + len(m.In)*8
	}
	if len(m.NotIn) > 0 {
		n += 1 + sovValidate(uint64(len(m.NotIn)*8)) + len(m.NotIn)*8
	}
	return n
}

func (m *BoolRules) Size() (n int) {
	var l int
	_ = l
	if m.Const {
		n += 2
	}
	return n
}

func (m *StringRules) Size() (n int) {
	var l int
	_ = l
	l = len(m.Const)
	if l > 0 {
		n += 1 + l + sovValidate(uint64(l))
	}
	if m.MinLen != 0 {
		n += 1 + sovValidate(uint64(m.MinLen))
	}
	if m.MaxLen != 0 {
		n += 1 + sovValidate(uint64(m.MaxLen))
	}
	if m.MinBytes != 0 {
		n += 1 + sovValidate(uint64(m.MinBytes))
	}
	if m.MaxBytes != 0 {
		n += 1 + sovValidate(uint64(m.MaxBytes))
	}
	l = len(m.Pattern)
	if l > 0 {
		n += 1 + l + sovValidate(uint64(l))
	}
	l = len(m.Prefix)
	if l > 0 {
		n += 1 + l + sovValidate(uint64(l))
	}
	l = len(m.Suffix)
	if l > 0 {
		n += 1 + l + sovValidate(uint64(l))
	}
	l = len(m.Contains)
	if l > 0 {
		n += 1 + l + sovValidate(uint64(l))
	}
	if len(m.In) > 0 {
		for _, s := range m.In {
			l = len(s)
			n += 1 + l + sovValidate(uint64(l))
		}
	}
	if len(m.NotIn) > 0 {
		for _, s := range m.NotIn {
			l = len(s)
			n += 1 + l + sovValidate(uint64(l))
		}
	}
	if m.WellKnown != nil {
		n += m.WellKnown.Size()
	}
	if m.Len != 0 {
		n += 2 + sovValidate(uint64(m.Len))
	}
	if m.LenBytes != 0 {
		n += 2 + sovValidate(uint64(m.LenBytes))
	}
	if m.MinIpPrefixLength != 0 {
		n += 2 + sovValidate(uint64(m.MinIpPrefixLength))
	}
	if m.MaxIpPrefixLength != 0 {
		n += 2 + sovValidate(uint64(m.MaxIpPrefixLength))
	}
	return n
}

func (m *StringRules_Email) Size() (n int) {
	var l int
	_ = l
	n += 2
	return n
}
func (m *StringRules_Hostname) Size() (n int) {
	var l int
	_ = l
	n += 2
	return n
}
func (m *StringRules_Ip) Size() (n int) {
	var l int
	_ = l
	n += 2
	return n
}
func (m *StringRules_Ipv4) Size() (n int) {
	var l int
	_ = l
	n += 2
	return n
}
func (m *StringRules_Ipv6) Size() (n int) {
	var l int
	_ = l
	n += 3
	return n
}
func (m *StringRules_Uri) Size() (n int) {
	var l int
	_ = l
	n += 3
	return n
}
func (m *StringRules_UriRef) Size() (n int) {
	var l int
	_ = l
	n += 3
	return n
}
func (m *StringRules_IpPrefix) Size() (n int) {
	var l int
	_ = l
	n += 3
	return n
}
func (m *StringRules_PortRange) Size() (n int) {
	var l int
	_ = l
	n += 3
	return n
}
func (m *StringRules_Mac) Size() (n int) {
	var l int
	_ = l
	n += 3
	return n
}
func (m *StringRules_Regex) Size() (n int) {
	var l int
	_ = l
	n += 3
	return n
}
func (m *StringRules_HttpHeaderField) Size() (n int) {
	var l int
	_ = l
	n += 3
	return n
}
func (m *StringRules_K8SLabelValue) Size() (n int) {
	var l int
	_ = l
	n += 3
	return n
}
func (m *StringRules_NotEmpty) Size() (n int) {
	var l int
	_ = l
	n += 3
	return n
}
func (m *StringRules_Hostport) Size() (n int) {
	var l int
	_ = l
	n += 3
	return n
}
func (m *StringRules_JsonPath) Size() (n int) {
	var l int
	_ = l
	n += 3
	return n
}
func (m *StringRules_Hex) Size() (n int) {
	var l int
	_ = l
	n += 3
	return n
}
func (m *StringRules_Ipv4Prefix) Size() (n int) {
	var l int
	_ = l
	n += 3
	return n
}
func (m *StringRules_Ipv6Prefix) Size() (n int) {
	var l int
	_ = l
	n += 3
	return n
}
func (m *StringRules_VhDomain) Size() (n int) {
	var l int
	_ = l
	n += 3
	return n
}
func (m *StringRules_VesObjectName) Size() (n int) {
	var l int
	_ = l
	n += 3
	return n
}
func (m *StringRules_IanaSvcName) Size() (n int) {
	var l int
	_ = l
	n += 3
	return n
}
func (m *StringRules_Dns_1123Label) Size() (n int) {
	var l int
	_ = l
	n += 3
	return n
}
func (m *StringRules_UnixFilePath) Size() (n int) {
	var l int
	_ = l
	n += 3
	return n
}
func (m *StringRules_PhoneNumber) Size() (n int) {
	var l int
	_ = l
	n += 3
	return n
}
func (m *StringRules_PortRangeList) Size() (n int) {
	var l int
	_ = l
	n += 3
	return n
}
func (m *StringRules_VhDomainNoPort) Size() (n int) {
	var l int
	_ = l
	n += 3
	return n
}
func (m *StringRules_HostnameOrIp) Size() (n int) {
	var l int
	_ = l
	n += 3
	return n
}
func (m *StringRules_K8SLabelSelector) Size() (n int) {
	var l int
	_ = l
	n += 3
	return n
}
func (m *BytesRules) Size() (n int) {
	var l int
	_ = l
	l = len(m.Const)
	if l > 0 {
		n += 1 + l + sovValidate(uint64(l))
	}
	if m.MinLen != 0 {
		n += 1 + sovValidate(uint64(m.MinLen))
	}
	if m.MaxLen != 0 {
		n += 1 + sovValidate(uint64(m.MaxLen))
	}
	l = len(m.Pattern)
	if l > 0 {
		n += 1 + l + sovValidate(uint64(l))
	}
	l = len(m.Prefix)
	if l > 0 {
		n += 1 + l + sovValidate(uint64(l))
	}
	l = len(m.Suffix)
	if l > 0 {
		n += 1 + l + sovValidate(uint64(l))
	}
	l = len(m.Contains)
	if l > 0 {
		n += 1 + l + sovValidate(uint64(l))
	}
	if len(m.In) > 0 {
		for _, b := range m.In {
			l = len(b)
			n += 1 + l + sovValidate(uint64(l))
		}
	}
	if len(m.NotIn) > 0 {
		for _, b := range m.NotIn {
			l = len(b)
			n += 1 + l + sovValidate(uint64(l))
		}
	}
	if m.WellKnown != nil {
		n += m.WellKnown.Size()
	}
	if m.Len != 0 {
		n += 1 + sovValidate(uint64(m.Len))
	}
	return n
}

func (m *BytesRules_Ip) Size() (n int) {
	var l int
	_ = l
	n += 2
	return n
}
func (m *BytesRules_Ipv4) Size() (n int) {
	var l int
	_ = l
	n += 2
	return n
}
func (m *BytesRules_Ipv6) Size() (n int) {
	var l int
	_ = l
	n += 2
	return n
}
func (m *EnumRules) Size() (n int) {
	var l int
	_ = l
	if m.Const != 0 {
		n += 1 + sovValidate(uint64(m.Const))
	}
	if m.DefinedOnly {
		n += 2
	}
	if len(m.In) > 0 {
		l = 0
		for _, e := range m.In {
			l += sovValidate(uint64(e))
		}
		n += 1 + sovValidate(uint64(l)) + l
	}
	if len(m.NotIn) > 0 {
		l = 0
		for _, e := range m.NotIn {
			l += sovValidate(uint64(e))
		}
		n += 1 + sovValidate(uint64(l)) + l
	}
	return n
}

func (m *MessageRules) Size() (n int) {
	var l int
	_ = l
	if m.Skip {
		n += 2
	}
	if m.Required {
		n += 2
	}
	return n
}

func (m *RepeatedRules) Size() (n int) {
	var l int
	_ = l
	if m.MinItems != 0 {
		n += 1 + sovValidate(uint64(m.MinItems))
	}
	if m.MaxItems != 0 {
		n += 1 + sovValidate(uint64(m.MaxItems))
	}
	if m.Unique {
		n += 2
	}
	if m.Items != nil {
		l = m.Items.Size()
		n += 1 + l + sovValidate(uint64(l))
	}
	l = len(m.NumItems)
	if l > 0 {
		n += 1 + l + sovValidate(uint64(l))
	}
	if m.UniqueMetadataName {
		n += 2
	}
	return n
}

func (m *MapRules) Size() (n int) {
	var l int
	_ = l
	if m.MinPairs != 0 {
		n += 1 + sovValidate(uint64(m.MinPairs))
	}
	if m.MaxPairs != 0 {
		n += 1 + sovValidate(uint64(m.MaxPairs))
	}
	if m.NoSparse {
		n += 2
	}
	if m.Keys != nil {
		l = m.Keys.Size()
		n += 1 + l + sovValidate(uint64(l))
	}
	if m.Values != nil {
		l = m.Values.Size()
		n += 1 + l + sovValidate(uint64(l))
	}
	if m.UniqueValues {
		n += 2
	}
	return n
}

func (m *AnyRules) Size() (n int) {
	var l int
	_ = l
	if m.Required {
		n += 2
	}
	if len(m.In) > 0 {
		for _, s := range m.In {
			l = len(s)
			n += 1 + l + sovValidate(uint64(l))
		}
	}
	if len(m.NotIn) > 0 {
		for _, s := range m.NotIn {
			l = len(s)
			n += 1 + l + sovValidate(uint64(l))
		}
	}
	return n
}

func (m *DurationRules) Size() (n int) {
	var l int
	_ = l
	if m.Required {
		n += 2
	}
	if m.Const != nil {
		l = m.Const.Size()
		n += 1 + l + sovValidate(uint64(l))
	}
	if m.Lt != nil {
		l = m.Lt.Size()
		n += 1 + l + sovValidate(uint64(l))
	}
	if m.Lte != nil {
		l = m.Lte.Size()
		n += 1 + l + sovValidate(uint64(l))
	}
	if m.Gt != nil {
		l = m.Gt.Size()
		n += 1 + l + sovValidate(uint64(l))
	}
	if m.Gte != nil {
		l = m.Gte.Size()
		n += 1 + l + sovValidate(uint64(l))
	}
	if len(m.In) > 0 {
		for _, e := range m.In {
			l = e.Size()
			n += 1 + l + sovValidate(uint64(l))
		}
	}
	if len(m.NotIn) > 0 {
		for _, e := range m.NotIn {
			l = e.Size()
			n += 1 + l + sovValidate(uint64(l))
		}
	}
	return n
}

func (m *TimestampRules) Size() (n int) {
	var l int
	_ = l
	if m.Required {
		n += 2
	}
	if m.Const != nil {
		l = m.Const.Size()
		n += 1 + l + sovValidate(uint64(l))
	}
	if m.Lt != nil {
		l = m.Lt.Size()
		n += 1 + l + sovValidate(uint64(l))
	}
	if m.Lte != nil {
		l = m.Lte.Size()
		n += 1 + l + sovValidate(uint64(l))
	}
	if m.Gt != nil {
		l = m.Gt.Size()
		n += 1 + l + sovValidate(uint64(l))
	}
	if m.Gte != nil {
		l = m.Gte.Size()
		n += 1 + l + sovValidate(uint64(l))
	}
	if m.LtNow {
		n += 2
	}
	if m.GtNow {
		n += 2
	}
	if m.Within != nil {
		l = m.Within.Size()
		n += 1 + l + sovValidate(uint64(l))
	}
	return n
}

func sovValidate(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozValidate(x uint64) (n int) {
	return sovValidate(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *FieldRules) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&FieldRules{`,
		`Type:` + fmt.Sprintf("%v", this.Type) + `,`,
		`}`,
	}, "")
	return s
}
func (this *FieldRules_Float) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&FieldRules_Float{`,
		`Float:` + strings.Replace(fmt.Sprintf("%v", this.Float), "FloatRules", "FloatRules", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *FieldRules_Double) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&FieldRules_Double{`,
		`Double:` + strings.Replace(fmt.Sprintf("%v", this.Double), "DoubleRules", "DoubleRules", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *FieldRules_Int32) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&FieldRules_Int32{`,
		`Int32:` + strings.Replace(fmt.Sprintf("%v", this.Int32), "Int32Rules", "Int32Rules", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *FieldRules_Int64) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&FieldRules_Int64{`,
		`Int64:` + strings.Replace(fmt.Sprintf("%v", this.Int64), "Int64Rules", "Int64Rules", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *FieldRules_Uint32) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&FieldRules_Uint32{`,
		`Uint32:` + strings.Replace(fmt.Sprintf("%v", this.Uint32), "UInt32Rules", "UInt32Rules", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *FieldRules_Uint64) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&FieldRules_Uint64{`,
		`Uint64:` + strings.Replace(fmt.Sprintf("%v", this.Uint64), "UInt64Rules", "UInt64Rules", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *FieldRules_Sint32) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&FieldRules_Sint32{`,
		`Sint32:` + strings.Replace(fmt.Sprintf("%v", this.Sint32), "SInt32Rules", "SInt32Rules", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *FieldRules_Sint64) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&FieldRules_Sint64{`,
		`Sint64:` + strings.Replace(fmt.Sprintf("%v", this.Sint64), "SInt64Rules", "SInt64Rules", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *FieldRules_Fixed32) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&FieldRules_Fixed32{`,
		`Fixed32:` + strings.Replace(fmt.Sprintf("%v", this.Fixed32), "Fixed32Rules", "Fixed32Rules", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *FieldRules_Fixed64) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&FieldRules_Fixed64{`,
		`Fixed64:` + strings.Replace(fmt.Sprintf("%v", this.Fixed64), "Fixed64Rules", "Fixed64Rules", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *FieldRules_Sfixed32) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&FieldRules_Sfixed32{`,
		`Sfixed32:` + strings.Replace(fmt.Sprintf("%v", this.Sfixed32), "SFixed32Rules", "SFixed32Rules", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *FieldRules_Sfixed64) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&FieldRules_Sfixed64{`,
		`Sfixed64:` + strings.Replace(fmt.Sprintf("%v", this.Sfixed64), "SFixed64Rules", "SFixed64Rules", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *FieldRules_Bool) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&FieldRules_Bool{`,
		`Bool:` + strings.Replace(fmt.Sprintf("%v", this.Bool), "BoolRules", "BoolRules", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *FieldRules_String_) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&FieldRules_String_{`,
		`String_:` + strings.Replace(fmt.Sprintf("%v", this.String_), "StringRules", "StringRules", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *FieldRules_Bytes) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&FieldRules_Bytes{`,
		`Bytes:` + strings.Replace(fmt.Sprintf("%v", this.Bytes), "BytesRules", "BytesRules", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *FieldRules_Enum) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&FieldRules_Enum{`,
		`Enum:` + strings.Replace(fmt.Sprintf("%v", this.Enum), "EnumRules", "EnumRules", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *FieldRules_Message) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&FieldRules_Message{`,
		`Message:` + strings.Replace(fmt.Sprintf("%v", this.Message), "MessageRules", "MessageRules", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *FieldRules_Repeated) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&FieldRules_Repeated{`,
		`Repeated:` + strings.Replace(fmt.Sprintf("%v", this.Repeated), "RepeatedRules", "RepeatedRules", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *FieldRules_Map) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&FieldRules_Map{`,
		`Map:` + strings.Replace(fmt.Sprintf("%v", this.Map), "MapRules", "MapRules", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *FieldRules_Any) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&FieldRules_Any{`,
		`Any:` + strings.Replace(fmt.Sprintf("%v", this.Any), "AnyRules", "AnyRules", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *FieldRules_Duration) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&FieldRules_Duration{`,
		`Duration:` + strings.Replace(fmt.Sprintf("%v", this.Duration), "DurationRules", "DurationRules", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *FieldRules_Timestamp) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&FieldRules_Timestamp{`,
		`Timestamp:` + strings.Replace(fmt.Sprintf("%v", this.Timestamp), "TimestampRules", "TimestampRules", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *FloatRules) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&FloatRules{`,
		`Const:` + fmt.Sprintf("%v", this.Const) + `,`,
		`Lt:` + fmt.Sprintf("%v", this.Lt) + `,`,
		`Lte:` + fmt.Sprintf("%v", this.Lte) + `,`,
		`Gt:` + fmt.Sprintf("%v", this.Gt) + `,`,
		`Gte:` + fmt.Sprintf("%v", this.Gte) + `,`,
		`In:` + fmt.Sprintf("%v", this.In) + `,`,
		`NotIn:` + fmt.Sprintf("%v", this.NotIn) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DoubleRules) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DoubleRules{`,
		`Const:` + fmt.Sprintf("%v", this.Const) + `,`,
		`Lt:` + fmt.Sprintf("%v", this.Lt) + `,`,
		`Lte:` + fmt.Sprintf("%v", this.Lte) + `,`,
		`Gt:` + fmt.Sprintf("%v", this.Gt) + `,`,
		`Gte:` + fmt.Sprintf("%v", this.Gte) + `,`,
		`In:` + fmt.Sprintf("%v", this.In) + `,`,
		`NotIn:` + fmt.Sprintf("%v", this.NotIn) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Int32Rules) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Int32Rules{`,
		`Const:` + fmt.Sprintf("%v", this.Const) + `,`,
		`Lt:` + fmt.Sprintf("%v", this.Lt) + `,`,
		`Lte:` + fmt.Sprintf("%v", this.Lte) + `,`,
		`Gt:` + fmt.Sprintf("%v", this.Gt) + `,`,
		`Gte:` + fmt.Sprintf("%v", this.Gte) + `,`,
		`In:` + fmt.Sprintf("%v", this.In) + `,`,
		`NotIn:` + fmt.Sprintf("%v", this.NotIn) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Int64Rules) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Int64Rules{`,
		`Const:` + fmt.Sprintf("%v", this.Const) + `,`,
		`Lt:` + fmt.Sprintf("%v", this.Lt) + `,`,
		`Lte:` + fmt.Sprintf("%v", this.Lte) + `,`,
		`Gt:` + fmt.Sprintf("%v", this.Gt) + `,`,
		`Gte:` + fmt.Sprintf("%v", this.Gte) + `,`,
		`In:` + fmt.Sprintf("%v", this.In) + `,`,
		`NotIn:` + fmt.Sprintf("%v", this.NotIn) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UInt32Rules) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UInt32Rules{`,
		`Const:` + fmt.Sprintf("%v", this.Const) + `,`,
		`Lt:` + fmt.Sprintf("%v", this.Lt) + `,`,
		`Lte:` + fmt.Sprintf("%v", this.Lte) + `,`,
		`Gt:` + fmt.Sprintf("%v", this.Gt) + `,`,
		`Gte:` + fmt.Sprintf("%v", this.Gte) + `,`,
		`In:` + fmt.Sprintf("%v", this.In) + `,`,
		`NotIn:` + fmt.Sprintf("%v", this.NotIn) + `,`,
		`Ranges:` + fmt.Sprintf("%v", this.Ranges) + `,`,
		`NotInRanges:` + fmt.Sprintf("%v", this.NotInRanges) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UInt64Rules) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UInt64Rules{`,
		`Const:` + fmt.Sprintf("%v", this.Const) + `,`,
		`Lt:` + fmt.Sprintf("%v", this.Lt) + `,`,
		`Lte:` + fmt.Sprintf("%v", this.Lte) + `,`,
		`Gt:` + fmt.Sprintf("%v", this.Gt) + `,`,
		`Gte:` + fmt.Sprintf("%v", this.Gte) + `,`,
		`In:` + fmt.Sprintf("%v", this.In) + `,`,
		`NotIn:` + fmt.Sprintf("%v", this.NotIn) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SInt32Rules) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SInt32Rules{`,
		`Const:` + fmt.Sprintf("%v", this.Const) + `,`,
		`Lt:` + fmt.Sprintf("%v", this.Lt) + `,`,
		`Lte:` + fmt.Sprintf("%v", this.Lte) + `,`,
		`Gt:` + fmt.Sprintf("%v", this.Gt) + `,`,
		`Gte:` + fmt.Sprintf("%v", this.Gte) + `,`,
		`In:` + fmt.Sprintf("%v", this.In) + `,`,
		`NotIn:` + fmt.Sprintf("%v", this.NotIn) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SInt64Rules) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SInt64Rules{`,
		`Const:` + fmt.Sprintf("%v", this.Const) + `,`,
		`Lt:` + fmt.Sprintf("%v", this.Lt) + `,`,
		`Lte:` + fmt.Sprintf("%v", this.Lte) + `,`,
		`Gt:` + fmt.Sprintf("%v", this.Gt) + `,`,
		`Gte:` + fmt.Sprintf("%v", this.Gte) + `,`,
		`In:` + fmt.Sprintf("%v", this.In) + `,`,
		`NotIn:` + fmt.Sprintf("%v", this.NotIn) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Fixed32Rules) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Fixed32Rules{`,
		`Const:` + fmt.Sprintf("%v", this.Const) + `,`,
		`Lt:` + fmt.Sprintf("%v", this.Lt) + `,`,
		`Lte:` + fmt.Sprintf("%v", this.Lte) + `,`,
		`Gt:` + fmt.Sprintf("%v", this.Gt) + `,`,
		`Gte:` + fmt.Sprintf("%v", this.Gte) + `,`,
		`In:` + fmt.Sprintf("%v", this.In) + `,`,
		`NotIn:` + fmt.Sprintf("%v", this.NotIn) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Fixed64Rules) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Fixed64Rules{`,
		`Const:` + fmt.Sprintf("%v", this.Const) + `,`,
		`Lt:` + fmt.Sprintf("%v", this.Lt) + `,`,
		`Lte:` + fmt.Sprintf("%v", this.Lte) + `,`,
		`Gt:` + fmt.Sprintf("%v", this.Gt) + `,`,
		`Gte:` + fmt.Sprintf("%v", this.Gte) + `,`,
		`In:` + fmt.Sprintf("%v", this.In) + `,`,
		`NotIn:` + fmt.Sprintf("%v", this.NotIn) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SFixed32Rules) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SFixed32Rules{`,
		`Const:` + fmt.Sprintf("%v", this.Const) + `,`,
		`Lt:` + fmt.Sprintf("%v", this.Lt) + `,`,
		`Lte:` + fmt.Sprintf("%v", this.Lte) + `,`,
		`Gt:` + fmt.Sprintf("%v", this.Gt) + `,`,
		`Gte:` + fmt.Sprintf("%v", this.Gte) + `,`,
		`In:` + fmt.Sprintf("%v", this.In) + `,`,
		`NotIn:` + fmt.Sprintf("%v", this.NotIn) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SFixed64Rules) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SFixed64Rules{`,
		`Const:` + fmt.Sprintf("%v", this.Const) + `,`,
		`Lt:` + fmt.Sprintf("%v", this.Lt) + `,`,
		`Lte:` + fmt.Sprintf("%v", this.Lte) + `,`,
		`Gt:` + fmt.Sprintf("%v", this.Gt) + `,`,
		`Gte:` + fmt.Sprintf("%v", this.Gte) + `,`,
		`In:` + fmt.Sprintf("%v", this.In) + `,`,
		`NotIn:` + fmt.Sprintf("%v", this.NotIn) + `,`,
		`}`,
	}, "")
	return s
}
func (this *BoolRules) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&BoolRules{`,
		`Const:` + fmt.Sprintf("%v", this.Const) + `,`,
		`}`,
	}, "")
	return s
}
func (this *StringRules) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&StringRules{`,
		`Const:` + fmt.Sprintf("%v", this.Const) + `,`,
		`MinLen:` + fmt.Sprintf("%v", this.MinLen) + `,`,
		`MaxLen:` + fmt.Sprintf("%v", this.MaxLen) + `,`,
		`MinBytes:` + fmt.Sprintf("%v", this.MinBytes) + `,`,
		`MaxBytes:` + fmt.Sprintf("%v", this.MaxBytes) + `,`,
		`Pattern:` + fmt.Sprintf("%v", this.Pattern) + `,`,
		`Prefix:` + fmt.Sprintf("%v", this.Prefix) + `,`,
		`Suffix:` + fmt.Sprintf("%v", this.Suffix) + `,`,
		`Contains:` + fmt.Sprintf("%v", this.Contains) + `,`,
		`In:` + fmt.Sprintf("%v", this.In) + `,`,
		`NotIn:` + fmt.Sprintf("%v", this.NotIn) + `,`,
		`WellKnown:` + fmt.Sprintf("%v", this.WellKnown) + `,`,
		`Len:` + fmt.Sprintf("%v", this.Len) + `,`,
		`LenBytes:` + fmt.Sprintf("%v", this.LenBytes) + `,`,
		`MinIpPrefixLength:` + fmt.Sprintf("%v", this.MinIpPrefixLength) + `,`,
		`MaxIpPrefixLength:` + fmt.Sprintf("%v", this.MaxIpPrefixLength) + `,`,
		`}`,
	}, "")
	return s
}
func (this *StringRules_Email) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&StringRules_Email{`,
		`Email:` + fmt.Sprintf("%v", this.Email) + `,`,
		`}`,
	}, "")
	return s
}
func (this *StringRules_Hostname) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&StringRules_Hostname{`,
		`Hostname:` + fmt.Sprintf("%v", this.Hostname) + `,`,
		`}`,
	}, "")
	return s
}
func (this *StringRules_Ip) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&StringRules_Ip{`,
		`Ip:` + fmt.Sprintf("%v", this.Ip) + `,`,
		`}`,
	}, "")
	return s
}
func (this *StringRules_Ipv4) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&StringRules_Ipv4{`,
		`Ipv4:` + fmt.Sprintf("%v", this.Ipv4) + `,`,
		`}`,
	}, "")
	return s
}
func (this *StringRules_Ipv6) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&StringRules_Ipv6{`,
		`Ipv6:` + fmt.Sprintf("%v", this.Ipv6) + `,`,
		`}`,
	}, "")
	return s
}
func (this *StringRules_Uri) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&StringRules_Uri{`,
		`Uri:` + fmt.Sprintf("%v", this.Uri) + `,`,
		`}`,
	}, "")
	return s
}
func (this *StringRules_UriRef) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&StringRules_UriRef{`,
		`UriRef:` + fmt.Sprintf("%v", this.UriRef) + `,`,
		`}`,
	}, "")
	return s
}
func (this *StringRules_IpPrefix) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&StringRules_IpPrefix{`,
		`IpPrefix:` + fmt.Sprintf("%v", this.IpPrefix) + `,`,
		`}`,
	}, "")
	return s
}
func (this *StringRules_PortRange) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&StringRules_PortRange{`,
		`PortRange:` + fmt.Sprintf("%v", this.PortRange) + `,`,
		`}`,
	}, "")
	return s
}
func (this *StringRules_Mac) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&StringRules_Mac{`,
		`Mac:` + fmt.Sprintf("%v", this.Mac) + `,`,
		`}`,
	}, "")
	return s
}
func (this *StringRules_Regex) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&StringRules_Regex{`,
		`Regex:` + fmt.Sprintf("%v", this.Regex) + `,`,
		`}`,
	}, "")
	return s
}
func (this *StringRules_HttpHeaderField) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&StringRules_HttpHeaderField{`,
		`HttpHeaderField:` + fmt.Sprintf("%v", this.HttpHeaderField) + `,`,
		`}`,
	}, "")
	return s
}
func (this *StringRules_K8SLabelValue) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&StringRules_K8SLabelValue{`,
		`K8SLabelValue:` + fmt.Sprintf("%v", this.K8SLabelValue) + `,`,
		`}`,
	}, "")
	return s
}
func (this *StringRules_NotEmpty) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&StringRules_NotEmpty{`,
		`NotEmpty:` + fmt.Sprintf("%v", this.NotEmpty) + `,`,
		`}`,
	}, "")
	return s
}
func (this *StringRules_Hostport) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&StringRules_Hostport{`,
		`Hostport:` + fmt.Sprintf("%v", this.Hostport) + `,`,
		`}`,
	}, "")
	return s
}
func (this *StringRules_JsonPath) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&StringRules_JsonPath{`,
		`JsonPath:` + fmt.Sprintf("%v", this.JsonPath) + `,`,
		`}`,
	}, "")
	return s
}
func (this *StringRules_Hex) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&StringRules_Hex{`,
		`Hex:` + fmt.Sprintf("%v", this.Hex) + `,`,
		`}`,
	}, "")
	return s
}
func (this *StringRules_Ipv4Prefix) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&StringRules_Ipv4Prefix{`,
		`Ipv4Prefix:` + fmt.Sprintf("%v", this.Ipv4Prefix) + `,`,
		`}`,
	}, "")
	return s
}
func (this *StringRules_Ipv6Prefix) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&StringRules_Ipv6Prefix{`,
		`Ipv6Prefix:` + fmt.Sprintf("%v", this.Ipv6Prefix) + `,`,
		`}`,
	}, "")
	return s
}
func (this *StringRules_VhDomain) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&StringRules_VhDomain{`,
		`VhDomain:` + fmt.Sprintf("%v", this.VhDomain) + `,`,
		`}`,
	}, "")
	return s
}
func (this *StringRules_VesObjectName) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&StringRules_VesObjectName{`,
		`VesObjectName:` + fmt.Sprintf("%v", this.VesObjectName) + `,`,
		`}`,
	}, "")
	return s
}
func (this *StringRules_IanaSvcName) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&StringRules_IanaSvcName{`,
		`IanaSvcName:` + fmt.Sprintf("%v", this.IanaSvcName) + `,`,
		`}`,
	}, "")
	return s
}
func (this *StringRules_Dns_1123Label) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&StringRules_Dns_1123Label{`,
		`Dns_1123Label:` + fmt.Sprintf("%v", this.Dns_1123Label) + `,`,
		`}`,
	}, "")
	return s
}
func (this *StringRules_UnixFilePath) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&StringRules_UnixFilePath{`,
		`UnixFilePath:` + fmt.Sprintf("%v", this.UnixFilePath) + `,`,
		`}`,
	}, "")
	return s
}
func (this *StringRules_PhoneNumber) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&StringRules_PhoneNumber{`,
		`PhoneNumber:` + fmt.Sprintf("%v", this.PhoneNumber) + `,`,
		`}`,
	}, "")
	return s
}
func (this *StringRules_PortRangeList) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&StringRules_PortRangeList{`,
		`PortRangeList:` + fmt.Sprintf("%v", this.PortRangeList) + `,`,
		`}`,
	}, "")
	return s
}
func (this *StringRules_VhDomainNoPort) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&StringRules_VhDomainNoPort{`,
		`VhDomainNoPort:` + fmt.Sprintf("%v", this.VhDomainNoPort) + `,`,
		`}`,
	}, "")
	return s
}
func (this *StringRules_HostnameOrIp) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&StringRules_HostnameOrIp{`,
		`HostnameOrIp:` + fmt.Sprintf("%v", this.HostnameOrIp) + `,`,
		`}`,
	}, "")
	return s
}
func (this *StringRules_K8SLabelSelector) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&StringRules_K8SLabelSelector{`,
		`K8SLabelSelector:` + fmt.Sprintf("%v", this.K8SLabelSelector) + `,`,
		`}`,
	}, "")
	return s
}
func (this *BytesRules) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&BytesRules{`,
		`Const:` + fmt.Sprintf("%v", this.Const) + `,`,
		`MinLen:` + fmt.Sprintf("%v", this.MinLen) + `,`,
		`MaxLen:` + fmt.Sprintf("%v", this.MaxLen) + `,`,
		`Pattern:` + fmt.Sprintf("%v", this.Pattern) + `,`,
		`Prefix:` + fmt.Sprintf("%v", this.Prefix) + `,`,
		`Suffix:` + fmt.Sprintf("%v", this.Suffix) + `,`,
		`Contains:` + fmt.Sprintf("%v", this.Contains) + `,`,
		`In:` + fmt.Sprintf("%v", this.In) + `,`,
		`NotIn:` + fmt.Sprintf("%v", this.NotIn) + `,`,
		`WellKnown:` + fmt.Sprintf("%v", this.WellKnown) + `,`,
		`Len:` + fmt.Sprintf("%v", this.Len) + `,`,
		`}`,
	}, "")
	return s
}
func (this *BytesRules_Ip) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&BytesRules_Ip{`,
		`Ip:` + fmt.Sprintf("%v", this.Ip) + `,`,
		`}`,
	}, "")
	return s
}
func (this *BytesRules_Ipv4) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&BytesRules_Ipv4{`,
		`Ipv4:` + fmt.Sprintf("%v", this.Ipv4) + `,`,
		`}`,
	}, "")
	return s
}
func (this *BytesRules_Ipv6) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&BytesRules_Ipv6{`,
		`Ipv6:` + fmt.Sprintf("%v", this.Ipv6) + `,`,
		`}`,
	}, "")
	return s
}
func (this *EnumRules) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&EnumRules{`,
		`Const:` + fmt.Sprintf("%v", this.Const) + `,`,
		`DefinedOnly:` + fmt.Sprintf("%v", this.DefinedOnly) + `,`,
		`In:` + fmt.Sprintf("%v", this.In) + `,`,
		`NotIn:` + fmt.Sprintf("%v", this.NotIn) + `,`,
		`}`,
	}, "")
	return s
}
func (this *MessageRules) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MessageRules{`,
		`Skip:` + fmt.Sprintf("%v", this.Skip) + `,`,
		`Required:` + fmt.Sprintf("%v", this.Required) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RepeatedRules) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RepeatedRules{`,
		`MinItems:` + fmt.Sprintf("%v", this.MinItems) + `,`,
		`MaxItems:` + fmt.Sprintf("%v", this.MaxItems) + `,`,
		`Unique:` + fmt.Sprintf("%v", this.Unique) + `,`,
		`Items:` + strings.Replace(fmt.Sprintf("%v", this.Items), "FieldRules", "FieldRules", 1) + `,`,
		`NumItems:` + fmt.Sprintf("%v", this.NumItems) + `,`,
		`UniqueMetadataName:` + fmt.Sprintf("%v", this.UniqueMetadataName) + `,`,
		`}`,
	}, "")
	return s
}
func (this *MapRules) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MapRules{`,
		`MinPairs:` + fmt.Sprintf("%v", this.MinPairs) + `,`,
		`MaxPairs:` + fmt.Sprintf("%v", this.MaxPairs) + `,`,
		`NoSparse:` + fmt.Sprintf("%v", this.NoSparse) + `,`,
		`Keys:` + strings.Replace(fmt.Sprintf("%v", this.Keys), "FieldRules", "FieldRules", 1) + `,`,
		`Values:` + strings.Replace(fmt.Sprintf("%v", this.Values), "FieldRules", "FieldRules", 1) + `,`,
		`UniqueValues:` + fmt.Sprintf("%v", this.UniqueValues) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AnyRules) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AnyRules{`,
		`Required:` + fmt.Sprintf("%v", this.Required) + `,`,
		`In:` + fmt.Sprintf("%v", this.In) + `,`,
		`NotIn:` + fmt.Sprintf("%v", this.NotIn) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DurationRules) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DurationRules{`,
		`Required:` + fmt.Sprintf("%v", this.Required) + `,`,
		`Const:` + strings.Replace(fmt.Sprintf("%v", this.Const), "Duration", "google_protobuf2.Duration", 1) + `,`,
		`Lt:` + strings.Replace(fmt.Sprintf("%v", this.Lt), "Duration", "google_protobuf2.Duration", 1) + `,`,
		`Lte:` + strings.Replace(fmt.Sprintf("%v", this.Lte), "Duration", "google_protobuf2.Duration", 1) + `,`,
		`Gt:` + strings.Replace(fmt.Sprintf("%v", this.Gt), "Duration", "google_protobuf2.Duration", 1) + `,`,
		`Gte:` + strings.Replace(fmt.Sprintf("%v", this.Gte), "Duration", "google_protobuf2.Duration", 1) + `,`,
		`In:` + strings.Replace(fmt.Sprintf("%v", this.In), "Duration", "google_protobuf2.Duration", 1) + `,`,
		`NotIn:` + strings.Replace(fmt.Sprintf("%v", this.NotIn), "Duration", "google_protobuf2.Duration", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TimestampRules) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TimestampRules{`,
		`Required:` + fmt.Sprintf("%v", this.Required) + `,`,
		`Const:` + strings.Replace(fmt.Sprintf("%v", this.Const), "Timestamp", "google_protobuf3.Timestamp", 1) + `,`,
		`Lt:` + strings.Replace(fmt.Sprintf("%v", this.Lt), "Timestamp", "google_protobuf3.Timestamp", 1) + `,`,
		`Lte:` + strings.Replace(fmt.Sprintf("%v", this.Lte), "Timestamp", "google_protobuf3.Timestamp", 1) + `,`,
		`Gt:` + strings.Replace(fmt.Sprintf("%v", this.Gt), "Timestamp", "google_protobuf3.Timestamp", 1) + `,`,
		`Gte:` + strings.Replace(fmt.Sprintf("%v", this.Gte), "Timestamp", "google_protobuf3.Timestamp", 1) + `,`,
		`LtNow:` + fmt.Sprintf("%v", this.LtNow) + `,`,
		`GtNow:` + fmt.Sprintf("%v", this.GtNow) + `,`,
		`Within:` + strings.Replace(fmt.Sprintf("%v", this.Within), "Duration", "google_protobuf2.Duration", 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringValidate(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *FieldRules) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowValidate
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FieldRules: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FieldRules: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Float", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValidate
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &FloatRules{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Type = &FieldRules_Float{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Double", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValidate
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &DoubleRules{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Type = &FieldRules_Double{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Int32", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValidate
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Int32Rules{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Type = &FieldRules_Int32{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Int64", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValidate
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Int64Rules{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Type = &FieldRules_Int64{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uint32", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValidate
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &UInt32Rules{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Type = &FieldRules_Uint32{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uint64", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValidate
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &UInt64Rules{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Type = &FieldRules_Uint64{v}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sint32", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValidate
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &SInt32Rules{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Type = &FieldRules_Sint32{v}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sint64", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValidate
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &SInt64Rules{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Type = &FieldRules_Sint64{v}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fixed32", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValidate
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Fixed32Rules{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Type = &FieldRules_Fixed32{v}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fixed64", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValidate
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Fixed64Rules{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Type = &FieldRules_Fixed64{v}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sfixed32", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValidate
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &SFixed32Rules{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Type = &FieldRules_Sfixed32{v}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sfixed64", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValidate
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &SFixed64Rules{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Type = &FieldRules_Sfixed64{v}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bool", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValidate
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &BoolRules{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Type = &FieldRules_Bool{v}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field String_", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValidate
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &StringRules{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Type = &FieldRules_String_{v}
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bytes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValidate
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &BytesRules{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Type = &FieldRules_Bytes{v}
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Enum", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValidate
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &EnumRules{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Type = &FieldRules_Enum{v}
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValidate
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &MessageRules{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Type = &FieldRules_Message{v}
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Repeated", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValidate
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &RepeatedRules{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Type = &FieldRules_Repeated{v}
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Map", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValidate
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &MapRules{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Type = &FieldRules_Map{v}
			iNdEx = postIndex
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Any", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValidate
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &AnyRules{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Type = &FieldRules_Any{v}
			iNdEx = postIndex
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Duration", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValidate
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &DurationRules{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Type = &FieldRules_Duration{v}
			iNdEx = postIndex
		case 22:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValidate
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &TimestampRules{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Type = &FieldRules_Timestamp{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipValidate(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthValidate
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FloatRules) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowValidate
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FloatRules: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FloatRules: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Const", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Const = float32(math.Float32frombits(v))
		case 2:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lt", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Lt = float32(math.Float32frombits(v))
		case 3:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lte", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Lte = float32(math.Float32frombits(v))
		case 4:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gt", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Gt = float32(math.Float32frombits(v))
		case 5:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gte", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Gte = float32(math.Float32frombits(v))
		case 6:
			if wireType == 5 {
				var v uint32
				if (iNdEx + 4) > l {
					return io.ErrUnexpectedEOF
				}
				v = uint32(binary.LittleEndian.Uint32(dAtA[iNdEx:]))
				iNdEx += 4
				v2 := float32(math.Float32frombits(v))
				m.In = append(m.In, v2)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowValidate
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthValidate
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v uint32
					if (iNdEx + 4) > l {
						return io.ErrUnexpectedEOF
					}
					v = uint32(binary.LittleEndian.Uint32(dAtA[iNdEx:]))
					iNdEx += 4
					v2 := float32(math.Float32frombits(v))
					m.In = append(m.In, v2)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field In", wireType)
			}
		case 7:
			if wireType == 5 {
				var v uint32
				if (iNdEx + 4) > l {
					return io.ErrUnexpectedEOF
				}
				v = uint32(binary.LittleEndian.Uint32(dAtA[iNdEx:]))
				iNdEx += 4
				v2 := float32(math.Float32frombits(v))
				m.NotIn = append(m.NotIn, v2)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowValidate
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthValidate
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v uint32
					if (iNdEx + 4) > l {
						return io.ErrUnexpectedEOF
					}
					v = uint32(binary.LittleEndian.Uint32(dAtA[iNdEx:]))
					iNdEx += 4
					v2 := float32(math.Float32frombits(v))
					m.NotIn = append(m.NotIn, v2)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field NotIn", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipValidate(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthValidate
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DoubleRules) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowValidate
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DoubleRules: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DoubleRules: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Const", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Const = float64(math.Float64frombits(v))
		case 2:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lt", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Lt = float64(math.Float64frombits(v))
		case 3:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lte", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Lte = float64(math.Float64frombits(v))
		case 4:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gt", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Gt = float64(math.Float64frombits(v))
		case 5:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gte", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Gte = float64(math.Float64frombits(v))
		case 6:
			if wireType == 1 {
				var v uint64
				if (iNdEx + 8) > l {
					return io.ErrUnexpectedEOF
				}
				v = uint64(binary.LittleEndian.Uint64(dAtA[iNdEx:]))
				iNdEx += 8
				v2 := float64(math.Float64frombits(v))
				m.In = append(m.In, v2)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowValidate
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthValidate
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v uint64
					if (iNdEx + 8) > l {
						return io.ErrUnexpectedEOF
					}
					v = uint64(binary.LittleEndian.Uint64(dAtA[iNdEx:]))
					iNdEx += 8
					v2 := float64(math.Float64frombits(v))
					m.In = append(m.In, v2)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field In", wireType)
			}
		case 7:
			if wireType == 1 {
				var v uint64
				if (iNdEx + 8) > l {
					return io.ErrUnexpectedEOF
				}
				v = uint64(binary.LittleEndian.Uint64(dAtA[iNdEx:]))
				iNdEx += 8
				v2 := float64(math.Float64frombits(v))
				m.NotIn = append(m.NotIn, v2)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowValidate
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthValidate
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v uint64
					if (iNdEx + 8) > l {
						return io.ErrUnexpectedEOF
					}
					v = uint64(binary.LittleEndian.Uint64(dAtA[iNdEx:]))
					iNdEx += 8
					v2 := float64(math.Float64frombits(v))
					m.NotIn = append(m.NotIn, v2)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field NotIn", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipValidate(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthValidate
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Int32Rules) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowValidate
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Int32Rules: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Int32Rules: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Const", wireType)
			}
			m.Const = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Const |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lt", wireType)
			}
			m.Lt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Lt |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lte", wireType)
			}
			m.Lte = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Lte |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gt", wireType)
			}
			m.Gt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Gt |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gte", wireType)
			}
			m.Gte = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Gte |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowValidate
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.In = append(m.In, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowValidate
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthValidate
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowValidate
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.In = append(m.In, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field In", wireType)
			}
		case 7:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowValidate
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.NotIn = append(m.NotIn, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowValidate
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthValidate
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowValidate
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.NotIn = append(m.NotIn, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field NotIn", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipValidate(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthValidate
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Int64Rules) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowValidate
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Int64Rules: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Int64Rules: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Const", wireType)
			}
			m.Const = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Const |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lt", wireType)
			}
			m.Lt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Lt |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lte", wireType)
			}
			m.Lte = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Lte |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gt", wireType)
			}
			m.Gt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Gt |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gte", wireType)
			}
			m.Gte = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Gte |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowValidate
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.In = append(m.In, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowValidate
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthValidate
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowValidate
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.In = append(m.In, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field In", wireType)
			}
		case 7:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowValidate
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.NotIn = append(m.NotIn, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowValidate
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthValidate
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowValidate
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.NotIn = append(m.NotIn, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field NotIn", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipValidate(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthValidate
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UInt32Rules) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowValidate
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UInt32Rules: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UInt32Rules: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Const", wireType)
			}
			m.Const = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Const |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lt", wireType)
			}
			m.Lt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Lt |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lte", wireType)
			}
			m.Lte = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Lte |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gt", wireType)
			}
			m.Gt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Gt |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gte", wireType)
			}
			m.Gte = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Gte |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowValidate
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (uint32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.In = append(m.In, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowValidate
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthValidate
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowValidate
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (uint32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.In = append(m.In, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field In", wireType)
			}
		case 7:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowValidate
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (uint32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.NotIn = append(m.NotIn, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowValidate
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthValidate
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowValidate
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (uint32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.NotIn = append(m.NotIn, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field NotIn", wireType)
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ranges", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthValidate
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ranges = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NotInRanges", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthValidate
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NotInRanges = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipValidate(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthValidate
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UInt64Rules) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowValidate
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UInt64Rules: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UInt64Rules: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Const", wireType)
			}
			m.Const = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Const |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lt", wireType)
			}
			m.Lt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Lt |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lte", wireType)
			}
			m.Lte = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Lte |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gt", wireType)
			}
			m.Gt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Gt |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gte", wireType)
			}
			m.Gte = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Gte |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowValidate
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.In = append(m.In, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowValidate
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthValidate
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowValidate
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.In = append(m.In, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field In", wireType)
			}
		case 7:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowValidate
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.NotIn = append(m.NotIn, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowValidate
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthValidate
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowValidate
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.NotIn = append(m.NotIn, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field NotIn", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipValidate(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthValidate
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SInt32Rules) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowValidate
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SInt32Rules: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SInt32Rules: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Const", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.Const = v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lt", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.Lt = v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lte", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.Lte = v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gt", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.Gt = v
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gte", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.Gte = v
		case 6:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowValidate
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
				m.In = append(m.In, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowValidate
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthValidate
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowValidate
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
					m.In = append(m.In, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field In", wireType)
			}
		case 7:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowValidate
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
				m.NotIn = append(m.NotIn, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowValidate
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthValidate
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowValidate
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
					m.NotIn = append(m.NotIn, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field NotIn", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipValidate(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthValidate
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SInt64Rules) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowValidate
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SInt64Rules: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SInt64Rules: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Const", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			m.Const = int64(v)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lt", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			m.Lt = int64(v)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lte", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			m.Lte = int64(v)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gt", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			m.Gt = int64(v)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gte", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			m.Gte = int64(v)
		case 6:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowValidate
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
				m.In = append(m.In, int64(v))
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowValidate
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthValidate
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowValidate
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
					m.In = append(m.In, int64(v))
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field In", wireType)
			}
		case 7:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowValidate
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
				m.NotIn = append(m.NotIn, int64(v))
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowValidate
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthValidate
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowValidate
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
					m.NotIn = append(m.NotIn, int64(v))
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field NotIn", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipValidate(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthValidate
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Fixed32Rules) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowValidate
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Fixed32Rules: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Fixed32Rules: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Const", wireType)
			}
			m.Const = 0
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			m.Const = uint32(binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
		case 2:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lt", wireType)
			}
			m.Lt = 0
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			m.Lt = uint32(binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
		case 3:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lte", wireType)
			}
			m.Lte = 0
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			m.Lte = uint32(binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
		case 4:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gt", wireType)
			}
			m.Gt = 0
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			m.Gt = uint32(binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
		case 5:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gte", wireType)
			}
			m.Gte = 0
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			m.Gte = uint32(binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
		case 6:
			if wireType == 5 {
				var v uint32
				if (iNdEx + 4) > l {
					return io.ErrUnexpectedEOF
				}
				v = uint32(binary.LittleEndian.Uint32(dAtA[iNdEx:]))
				iNdEx += 4
				m.In = append(m.In, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowValidate
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthValidate
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v uint32
					if (iNdEx + 4) > l {
						return io.ErrUnexpectedEOF
					}
					v = uint32(binary.LittleEndian.Uint32(dAtA[iNdEx:]))
					iNdEx += 4
					m.In = append(m.In, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field In", wireType)
			}
		case 7:
			if wireType == 5 {
				var v uint32
				if (iNdEx + 4) > l {
					return io.ErrUnexpectedEOF
				}
				v = uint32(binary.LittleEndian.Uint32(dAtA[iNdEx:]))
				iNdEx += 4
				m.NotIn = append(m.NotIn, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowValidate
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthValidate
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v uint32
					if (iNdEx + 4) > l {
						return io.ErrUnexpectedEOF
					}
					v = uint32(binary.LittleEndian.Uint32(dAtA[iNdEx:]))
					iNdEx += 4
					m.NotIn = append(m.NotIn, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field NotIn", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipValidate(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthValidate
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Fixed64Rules) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowValidate
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Fixed64Rules: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Fixed64Rules: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Const", wireType)
			}
			m.Const = 0
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			m.Const = uint64(binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
		case 2:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lt", wireType)
			}
			m.Lt = 0
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			m.Lt = uint64(binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
		case 3:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lte", wireType)
			}
			m.Lte = 0
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			m.Lte = uint64(binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
		case 4:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gt", wireType)
			}
			m.Gt = 0
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			m.Gt = uint64(binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
		case 5:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gte", wireType)
			}
			m.Gte = 0
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			m.Gte = uint64(binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
		case 6:
			if wireType == 1 {
				var v uint64
				if (iNdEx + 8) > l {
					return io.ErrUnexpectedEOF
				}
				v = uint64(binary.LittleEndian.Uint64(dAtA[iNdEx:]))
				iNdEx += 8
				m.In = append(m.In, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowValidate
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthValidate
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v uint64
					if (iNdEx + 8) > l {
						return io.ErrUnexpectedEOF
					}
					v = uint64(binary.LittleEndian.Uint64(dAtA[iNdEx:]))
					iNdEx += 8
					m.In = append(m.In, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field In", wireType)
			}
		case 7:
			if wireType == 1 {
				var v uint64
				if (iNdEx + 8) > l {
					return io.ErrUnexpectedEOF
				}
				v = uint64(binary.LittleEndian.Uint64(dAtA[iNdEx:]))
				iNdEx += 8
				m.NotIn = append(m.NotIn, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowValidate
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthValidate
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v uint64
					if (iNdEx + 8) > l {
						return io.ErrUnexpectedEOF
					}
					v = uint64(binary.LittleEndian.Uint64(dAtA[iNdEx:]))
					iNdEx += 8
					m.NotIn = append(m.NotIn, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field NotIn", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipValidate(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthValidate
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SFixed32Rules) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowValidate
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SFixed32Rules: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SFixed32Rules: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Const", wireType)
			}
			m.Const = 0
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			m.Const = int32(binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
		case 2:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lt", wireType)
			}
			m.Lt = 0
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			m.Lt = int32(binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
		case 3:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lte", wireType)
			}
			m.Lte = 0
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			m.Lte = int32(binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
		case 4:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gt", wireType)
			}
			m.Gt = 0
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			m.Gt = int32(binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
		case 5:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gte", wireType)
			}
			m.Gte = 0
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			m.Gte = int32(binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
		case 6:
			if wireType == 5 {
				var v int32
				if (iNdEx + 4) > l {
					return io.ErrUnexpectedEOF
				}
				v = int32(binary.LittleEndian.Uint32(dAtA[iNdEx:]))
				iNdEx += 4
				m.In = append(m.In, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowValidate
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthValidate
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					if (iNdEx + 4) > l {
						return io.ErrUnexpectedEOF
					}
					v = int32(binary.LittleEndian.Uint32(dAtA[iNdEx:]))
					iNdEx += 4
					m.In = append(m.In, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field In", wireType)
			}
		case 7:
			if wireType == 5 {
				var v int32
				if (iNdEx + 4) > l {
					return io.ErrUnexpectedEOF
				}
				v = int32(binary.LittleEndian.Uint32(dAtA[iNdEx:]))
				iNdEx += 4
				m.NotIn = append(m.NotIn, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowValidate
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthValidate
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					if (iNdEx + 4) > l {
						return io.ErrUnexpectedEOF
					}
					v = int32(binary.LittleEndian.Uint32(dAtA[iNdEx:]))
					iNdEx += 4
					m.NotIn = append(m.NotIn, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field NotIn", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipValidate(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthValidate
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SFixed64Rules) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowValidate
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SFixed64Rules: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SFixed64Rules: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Const", wireType)
			}
			m.Const = 0
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			m.Const = int64(binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
		case 2:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lt", wireType)
			}
			m.Lt = 0
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			m.Lt = int64(binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
		case 3:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lte", wireType)
			}
			m.Lte = 0
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			m.Lte = int64(binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
		case 4:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gt", wireType)
			}
			m.Gt = 0
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			m.Gt = int64(binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
		case 5:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gte", wireType)
			}
			m.Gte = 0
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			m.Gte = int64(binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
		case 6:
			if wireType == 1 {
				var v int64
				if (iNdEx + 8) > l {
					return io.ErrUnexpectedEOF
				}
				v = int64(binary.LittleEndian.Uint64(dAtA[iNdEx:]))
				iNdEx += 8
				m.In = append(m.In, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowValidate
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthValidate
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int64
					if (iNdEx + 8) > l {
						return io.ErrUnexpectedEOF
					}
					v = int64(binary.LittleEndian.Uint64(dAtA[iNdEx:]))
					iNdEx += 8
					m.In = append(m.In, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field In", wireType)
			}
		case 7:
			if wireType == 1 {
				var v int64
				if (iNdEx + 8) > l {
					return io.ErrUnexpectedEOF
				}
				v = int64(binary.LittleEndian.Uint64(dAtA[iNdEx:]))
				iNdEx += 8
				m.NotIn = append(m.NotIn, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowValidate
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthValidate
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int64
					if (iNdEx + 8) > l {
						return io.ErrUnexpectedEOF
					}
					v = int64(binary.LittleEndian.Uint64(dAtA[iNdEx:]))
					iNdEx += 8
					m.NotIn = append(m.NotIn, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field NotIn", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipValidate(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthValidate
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BoolRules) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowValidate
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BoolRules: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BoolRules: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Const", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Const = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipValidate(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthValidate
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StringRules) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowValidate
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StringRules: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StringRules: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Const", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthValidate
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Const = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinLen", wireType)
			}
			m.MinLen = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MinLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxLen", wireType)
			}
			m.MaxLen = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinBytes", wireType)
			}
			m.MinBytes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MinBytes |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxBytes", wireType)
			}
			m.MaxBytes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxBytes |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pattern", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthValidate
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pattern = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Prefix", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthValidate
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Prefix = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Suffix", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthValidate
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Suffix = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Contains", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthValidate
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Contains = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field In", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthValidate
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.In = append(m.In, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NotIn", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthValidate
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NotIn = append(m.NotIn, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Email", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.WellKnown = &StringRules_Email{b}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hostname", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.WellKnown = &StringRules_Hostname{b}
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ip", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.WellKnown = &StringRules_Ip{b}
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ipv4", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.WellKnown = &StringRules_Ipv4{b}
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ipv6", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.WellKnown = &StringRules_Ipv6{b}
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uri", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.WellKnown = &StringRules_Uri{b}
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UriRef", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.WellKnown = &StringRules_UriRef{b}
		case 19:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Len", wireType)
			}
			m.Len = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Len |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 20:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LenBytes", wireType)
			}
			m.LenBytes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LenBytes |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 21:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IpPrefix", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.WellKnown = &StringRules_IpPrefix{b}
		case 22:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PortRange", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.WellKnown = &StringRules_PortRange{b}
		case 23:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mac", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.WellKnown = &StringRules_Mac{b}
		case 24:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Regex", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.WellKnown = &StringRules_Regex{b}
		case 25:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HttpHeaderField", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.WellKnown = &StringRules_HttpHeaderField{b}
		case 26:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field K8SLabelValue", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.WellKnown = &StringRules_K8SLabelValue{b}
		case 27:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NotEmpty", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.WellKnown = &StringRules_NotEmpty{b}
		case 28:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hostport", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.WellKnown = &StringRules_Hostport{b}
		case 29:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field JsonPath", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.WellKnown = &StringRules_JsonPath{b}
		case 30:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hex", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.WellKnown = &StringRules_Hex{b}
		case 31:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ipv4Prefix", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.WellKnown = &StringRules_Ipv4Prefix{b}
		case 32:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ipv6Prefix", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.WellKnown = &StringRules_Ipv6Prefix{b}
		case 33:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VhDomain", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.WellKnown = &StringRules_VhDomain{b}
		case 34:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinIpPrefixLength", wireType)
			}
			m.MinIpPrefixLength = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MinIpPrefixLength |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 35:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxIpPrefixLength", wireType)
			}
			m.MaxIpPrefixLength = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxIpPrefixLength |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 36:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VesObjectName", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.WellKnown = &StringRules_VesObjectName{b}
		case 37:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IanaSvcName", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.WellKnown = &StringRules_IanaSvcName{b}
		case 38:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dns_1123Label", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.WellKnown = &StringRules_Dns_1123Label{b}
		case 39:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnixFilePath", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.WellKnown = &StringRules_UnixFilePath{b}
		case 40:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PhoneNumber", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.WellKnown = &StringRules_PhoneNumber{b}
		case 41:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PortRangeList", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.WellKnown = &StringRules_PortRangeList{b}
		case 42:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VhDomainNoPort", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.WellKnown = &StringRules_VhDomainNoPort{b}
		case 43:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HostnameOrIp", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.WellKnown = &StringRules_HostnameOrIp{b}
		case 44:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field K8SLabelSelector", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.WellKnown = &StringRules_K8SLabelSelector{b}
		default:
			iNdEx = preIndex
			skippy, err := skipValidate(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthValidate
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BytesRules) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowValidate
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BytesRules: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BytesRules: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Const", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthValidate
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Const = append(m.Const[:0], dAtA[iNdEx:postIndex]...)
			if m.Const == nil {
				m.Const = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinLen", wireType)
			}
			m.MinLen = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MinLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxLen", wireType)
			}
			m.MaxLen = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pattern", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthValidate
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pattern = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Prefix", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthValidate
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Prefix = append(m.Prefix[:0], dAtA[iNdEx:postIndex]...)
			if m.Prefix == nil {
				m.Prefix = []byte{}
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Suffix", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthValidate
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Suffix = append(m.Suffix[:0], dAtA[iNdEx:postIndex]...)
			if m.Suffix == nil {
				m.Suffix = []byte{}
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Contains", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthValidate
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Contains = append(m.Contains[:0], dAtA[iNdEx:postIndex]...)
			if m.Contains == nil {
				m.Contains = []byte{}
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field In", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthValidate
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.In = append(m.In, make([]byte, postIndex-iNdEx))
			copy(m.In[len(m.In)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NotIn", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthValidate
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NotIn = append(m.NotIn, make([]byte, postIndex-iNdEx))
			copy(m.NotIn[len(m.NotIn)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ip", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.WellKnown = &BytesRules_Ip{b}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ipv4", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.WellKnown = &BytesRules_Ipv4{b}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ipv6", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.WellKnown = &BytesRules_Ipv6{b}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Len", wireType)
			}
			m.Len = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Len |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipValidate(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthValidate
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EnumRules) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowValidate
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EnumRules: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EnumRules: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Const", wireType)
			}
			m.Const = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Const |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefinedOnly", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DefinedOnly = bool(v != 0)
		case 3:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowValidate
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.In = append(m.In, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowValidate
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthValidate
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowValidate
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.In = append(m.In, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field In", wireType)
			}
		case 4:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowValidate
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.NotIn = append(m.NotIn, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowValidate
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthValidate
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowValidate
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.NotIn = append(m.NotIn, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field NotIn", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipValidate(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthValidate
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MessageRules) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowValidate
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MessageRules: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MessageRules: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Skip", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Skip = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Required", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Required = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipValidate(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthValidate
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RepeatedRules) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowValidate
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RepeatedRules: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RepeatedRules: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinItems", wireType)
			}
			m.MinItems = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MinItems |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxItems", wireType)
			}
			m.MaxItems = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxItems |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Unique", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Unique = bool(v != 0)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValidate
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Items == nil {
				m.Items = &FieldRules{}
			}
			if err := m.Items.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumItems", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthValidate
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NumItems = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UniqueMetadataName", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UniqueMetadataName = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipValidate(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthValidate
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MapRules) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowValidate
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MapRules: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MapRules: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinPairs", wireType)
			}
			m.MinPairs = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MinPairs |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxPairs", wireType)
			}
			m.MaxPairs = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxPairs |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoSparse", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.NoSparse = bool(v != 0)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Keys", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValidate
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Keys == nil {
				m.Keys = &FieldRules{}
			}
			if err := m.Keys.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Values", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValidate
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Values == nil {
				m.Values = &FieldRules{}
			}
			if err := m.Values.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UniqueValues", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UniqueValues = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipValidate(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthValidate
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AnyRules) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowValidate
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AnyRules: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AnyRules: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Required", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Required = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field In", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthValidate
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.In = append(m.In, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NotIn", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthValidate
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NotIn = append(m.NotIn, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipValidate(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthValidate
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DurationRules) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowValidate
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DurationRules: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DurationRules: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Required", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Required = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Const", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValidate
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Const == nil {
				m.Const = &google_protobuf2.Duration{}
			}
			if err := m.Const.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValidate
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Lt == nil {
				m.Lt = &google_protobuf2.Duration{}
			}
			if err := m.Lt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lte", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValidate
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Lte == nil {
				m.Lte = &google_protobuf2.Duration{}
			}
			if err := m.Lte.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValidate
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Gt == nil {
				m.Gt = &google_protobuf2.Duration{}
			}
			if err := m.Gt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gte", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValidate
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Gte == nil {
				m.Gte = &google_protobuf2.Duration{}
			}
			if err := m.Gte.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field In", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValidate
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.In = append(m.In, &google_protobuf2.Duration{})
			if err := m.In[len(m.In)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NotIn", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValidate
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NotIn = append(m.NotIn, &google_protobuf2.Duration{})
			if err := m.NotIn[len(m.NotIn)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipValidate(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthValidate
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TimestampRules) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowValidate
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TimestampRules: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TimestampRules: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Required", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Required = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Const", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValidate
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Const == nil {
				m.Const = &google_protobuf3.Timestamp{}
			}
			if err := m.Const.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValidate
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Lt == nil {
				m.Lt = &google_protobuf3.Timestamp{}
			}
			if err := m.Lt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lte", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValidate
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Lte == nil {
				m.Lte = &google_protobuf3.Timestamp{}
			}
			if err := m.Lte.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValidate
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Gt == nil {
				m.Gt = &google_protobuf3.Timestamp{}
			}
			if err := m.Gt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gte", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValidate
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Gte == nil {
				m.Gte = &google_protobuf3.Timestamp{}
			}
			if err := m.Gte.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LtNow", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.LtNow = bool(v != 0)
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GtNow", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.GtNow = bool(v != 0)
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Within", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValidate
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Within == nil {
				m.Within = &google_protobuf2.Duration{}
			}
			if err := m.Within.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipValidate(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthValidate
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipValidate(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowValidate
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowValidate
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowValidate
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthValidate
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowValidate
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipValidate(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthValidate = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowValidate   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("ves.io/schema/validate.proto", fileDescriptorValidate) }

var fileDescriptorValidate = []byte{
	// 2235 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x59, 0xcb, 0x72, 0xdb, 0xc8,
	0xd5, 0x36, 0x78, 0x01, 0xc9, 0x26, 0x29, 0x92, 0xfd, 0xcb, 0x36, 0x2c, 0xdb, 0xb4, 0x4c, 0xcf,
	0xef, 0xc8, 0x37, 0xc9, 0x17, 0x95, 0xe2, 0x72, 0x6a, 0x52, 0x15, 0xc7, 0xe3, 0x1a, 0x57, 0xf9,
	0x56, 0x54, 0x9c, 0x45, 0x36, 0x28, 0x48, 0x6c, 0x92, 0x3d, 0x02, 0x1a, 0x30, 0xd0, 0xa4, 0xa9,
	0x5d, 0x5e, 0x60, 0x92, 0xd9, 0xe5, 0x15, 0xf2, 0x08, 0xd9, 0x65, 0x9b, 0xca, 0x6a, 0x96, 0x59,
	0xc6, 0xca, 0x66, 0x52, 0xd9, 0x4c, 0x55, 0x5e, 0x20, 0xd5, 0xa7, 0xbb, 0x41, 0xb2, 0x01, 0x52,
	0xa9, 0xac, 0xc4, 0x3e, 0xe7, 0x3b, 0x7d, 0xbe, 0xfe, 0xba, 0x71, 0xfa, 0x00, 0x42, 0xd7, 0xa6,
	0x24, 0xd9, 0xa5, 0xe1, 0x5e, 0x72, 0x3c, 0x26, 0x81, 0xb7, 0x37, 0xf5, 0x7c, 0x3a, 0xf0, 0x38,
	0xd9, 0x8d, 0xe2, 0x90, 0x87, 0xb8, 0x29, 0xbd, 0xbb, 0xd2, 0xbb, 0xb5, 0x3d, 0x0a, 0xc3, 0x91,
	0x4f, 0xf6, 0xc0, 0x79, 0x34, 0x19, 0xee, 0x0d, 0x48, 0x72, 0x1c, 0xd3, 0x88, 0x87, 0xb1, 0x0c,
	0xd8, 0xea, 0x66, 0x10, 0x93, 0xd8, 0xe3, 0x34, 0x64, 0xca, 0x7f, 0xc3, 0xf4, 0x73, 0x1a, 0x90,
	0x84, 0x7b, 0x41, 0x24, 0x01, 0xbd, 0x3f, 0xd5, 0x10, 0x7a, 0x49, 0x89, 0x3f, 0xe8, 0x4f, 0x7c,
	0x92, 0xe0, 0x47, 0xa8, 0x3c, 0xf4, 0x43, 0x8f, 0x3b, 0xd6, 0xb6, 0xb5, 0x53, 0x7f, 0x7c, 0x65,
	0x77, 0x89, 0xd0, 0xee, 0x4b, 0xe1, 0x03, 0xe4, 0xd7, 0x17, 0xfa, 0x12, 0x89, 0xf7, 0x91, 0x3d,
	0x08, 0x27, 0x47, 0x3e, 0x71, 0x0a, 0x10, 0xb3, 0x65, 0xc4, 0xbc, 0x00, 0xa7, 0x0e, 0x52, 0x58,
	0x91, 0x88, 0x32, 0xfe, 0xe4, 0xb1, 0x53, 0xcc, 0x4d, 0xf4, 0x4a, 0xf8, 0xd2, 0x44, 0x80, 0x54,
	0x21, 0x07, 0xfb, 0x4e, 0x69, 0x55, 0xc8, 0xc1, 0xfe, 0x62, 0xc8, 0xc1, 0xbe, 0xe0, 0x36, 0x91,
	0x69, 0xca, 0xb9, 0xdc, 0x3e, 0x2c, 0xe5, 0x51, 0x58, 0x1d, 0x75, 0xb0, 0xef, 0xd8, 0x2b, 0xa3,
	0xe6, 0xa9, 0x14, 0x56, 0x44, 0x25, 0x32, 0x57, 0x25, 0x37, 0xea, 0x70, 0x39, 0x57, 0x92, 0xe6,
	0x4a, 0x64, 0xae, 0xea, 0xca, 0xa8, 0x85, 0x5c, 0x12, 0x8b, 0x7f, 0x8a, 0x2a, 0x43, 0x3a, 0x23,
	0x83, 0x27, 0x8f, 0x9d, 0x1a, 0x84, 0x5d, 0x35, 0x37, 0x4a, 0x7a, 0x75, 0x9c, 0x46, 0xa7, 0x81,
	0x07, 0xfb, 0x0e, 0x5a, 0x1d, 0x38, 0x4f, 0xa8, 0xd1, 0xf8, 0x19, 0xaa, 0x26, 0x3a, 0x65, 0x1d,
	0x22, 0xaf, 0x99, 0x4c, 0x8d, 0x9c, 0x29, 0x7e, 0x1e, 0x7b, 0xb0, 0xef, 0x34, 0xd6, 0xc4, 0xce,
	0xd3, 0xa6, 0x78, 0xbc, 0x8b, 0x4a, 0x47, 0x61, 0xe8, 0x3b, 0x4d, 0x88, 0x73, 0x8c, 0xb8, 0xe7,
	0x61, 0xe8, 0xeb, 0x18, 0xc0, 0x81, 0x9e, 0x3c, 0xa6, 0x6c, 0xe4, 0x6c, 0xe4, 0xeb, 0x09, 0xce,
	0xb9, 0x9e, 0x30, 0x14, 0x47, 0xeb, 0xe8, 0x94, 0x93, 0xc4, 0x69, 0xe5, 0x1e, 0xad, 0xe7, 0xc2,
	0x97, 0x1e, 0x2d, 0x40, 0x0a, 0x62, 0x84, 0x4d, 0x02, 0xa7, 0x9d, 0x4b, 0xec, 0x2b, 0x36, 0x09,
	0x52, 0x62, 0x02, 0x27, 0x94, 0x0f, 0x48, 0x92, 0x78, 0x23, 0xe2, 0x74, 0x72, 0x95, 0x7f, 0x23,
	0xbd, 0xa9, 0xf2, 0x0a, 0x2d, 0xd4, 0x8b, 0x49, 0x44, 0x3c, 0x4e, 0x06, 0x0e, 0xce, 0x55, 0xaf,
	0xaf, 0xdc, 0xa9, 0x7a, 0x1a, 0x8f, 0xef, 0xa1, 0x62, 0xe0, 0x45, 0xce, 0xff, 0x41, 0xd8, 0x65,
	0x33, 0xa1, 0x17, 0xe9, 0x08, 0x81, 0x12, 0x60, 0x8f, 0x9d, 0x3a, 0x9b, 0xb9, 0xe0, 0x5f, 0xb0,
	0xd3, 0x14, 0xec, 0xb1, 0x53, 0xc1, 0x4a, 0x97, 0x1a, 0xe7, 0x62, 0x2e, 0xab, 0x17, 0xca, 0x9d,
	0xb2, 0xd2, 0x78, 0xfc, 0x25, 0xaa, 0xa5, 0x65, 0xc8, 0xb9, 0x04, 0xc1, 0xd7, 0x8d, 0xe0, 0x5f,
	0x69, 0xbf, 0x8e, 0x9e, 0x47, 0x3c, 0xb7, 0x51, 0x89, 0x9f, 0x46, 0xa4, 0xf7, 0xad, 0x85, 0xd0,
	0xbc, 0x20, 0xe1, 0x4d, 0x54, 0x3e, 0x0e, 0x59, 0x22, 0x4b, 0x57, 0xa1, 0x2f, 0x07, 0x78, 0x03,
	0x15, 0x7c, 0x0e, 0x95, 0xa9, 0xd0, 0x2f, 0xf8, 0x1c, 0xb7, 0x51, 0xd1, 0xe7, 0x04, 0xaa, 0x4e,
	0xa1, 0x2f, 0x7e, 0x0a, 0xc4, 0x88, 0x43, 0x4d, 0x29, 0xf4, 0x0b, 0x23, 0x40, 0x8c, 0x38, 0x81,
	0x82, 0x51, 0xe8, 0x8b, 0x9f, 0x02, 0x41, 0x99, 0x63, 0x6f, 0x17, 0x05, 0x82, 0x32, 0x7c, 0x11,
	0xd9, 0x2c, 0xe4, 0x2e, 0x65, 0x4e, 0x05, 0x6c, 0x65, 0x16, 0xf2, 0x57, 0xac, 0xf7, 0x3b, 0x0b,
	0xd5, 0x17, 0x8a, 0xdd, 0x32, 0x21, 0x2b, 0x4b, 0xc8, 0x32, 0x09, 0x59, 0x26, 0x21, 0xcb, 0x24,
	0x64, 0x99, 0x84, 0xac, 0x1c, 0x42, 0x96, 0x26, 0x24, 0x04, 0x9a, 0x17, 0x9d, 0x65, 0x3e, 0xe5,
	0x2c, 0x9f, 0xb2, 0xc9, 0xa7, 0x6c, 0xf2, 0x29, 0x9b, 0x7c, 0xca, 0x26, 0x9f, 0x72, 0x0e, 0x9f,
	0xb2, 0xc1, 0x47, 0x3d, 0xe6, 0xcb, 0x7c, 0x8a, 0x59, 0x3e, 0x45, 0x93, 0x4f, 0xd1, 0xe4, 0x53,
	0x34, 0xf9, 0x14, 0x4d, 0x3e, 0xc5, 0x1c, 0x3e, 0x45, 0xcd, 0xe7, 0xaf, 0x16, 0xaa, 0x7f, 0x58,
	0x25, 0x50, 0x33, 0x4b, 0xa8, 0x69, 0x12, 0x6a, 0x9a, 0x84, 0x9a, 0x26, 0xa1, 0xa6, 0x49, 0xa8,
	0x99, 0x43, 0xa8, 0xa9, 0x08, 0xe1, 0x4b, 0xc8, 0x8e, 0x3d, 0x36, 0x22, 0x09, 0x5c, 0x06, 0xb5,
	0xbe, 0x1a, 0xe1, 0x1e, 0x6a, 0x4a, 0xb8, 0xab, 0xdc, 0x35, 0x70, 0xd7, 0x21, 0xaa, 0x0f, 0x26,
	0x38, 0x7d, 0x1f, 0x56, 0xa9, 0x5b, 0xca, 0x2e, 0xa6, 0x64, 0x2e, 0xa6, 0x64, 0x2e, 0xa6, 0x64,
	0x2e, 0xa6, 0x64, 0x2e, 0xa6, 0x94, 0xb3, 0x98, 0xd2, 0xe2, 0xe3, 0x70, 0xb8, 0x4a, 0xdd, 0x4e,
	0x96, 0x50, 0xc7, 0x24, 0xd4, 0x31, 0x09, 0x75, 0x4c, 0x42, 0x1d, 0x93, 0x50, 0x27, 0x87, 0x50,
	0xc7, 0x24, 0x94, 0xab, 0x10, 0xce, 0x12, 0xc2, 0x26, 0x21, 0x6c, 0x12, 0xc2, 0x26, 0x21, 0x6c,
	0x12, 0xc2, 0x39, 0x84, 0xb0, 0x26, 0xf4, 0x7b, 0x0b, 0x35, 0x16, 0x2f, 0xcd, 0x65, 0x46, 0x95,
	0x2c, 0xa3, 0x8a, 0xc9, 0xa8, 0x62, 0x32, 0xaa, 0x98, 0x8c, 0x2a, 0x26, 0xa3, 0x4a, 0x0e, 0xa3,
	0x4a, 0x86, 0x51, 0xae, 0x46, 0x76, 0x96, 0x91, 0x6d, 0x32, 0xb2, 0x4d, 0x46, 0xb6, 0xc9, 0xc8,
	0x36, 0x19, 0xd9, 0x39, 0x8c, 0x6c, 0xcd, 0xe8, 0x3b, 0x0b, 0x35, 0x0f, 0x57, 0x8b, 0xd4, 0xca,
	0x52, 0x6a, 0x99, 0x94, 0x5a, 0x26, 0xa5, 0x96, 0x49, 0xa9, 0x65, 0x52, 0x6a, 0xe5, 0x50, 0x6a,
	0x65, 0x29, 0xe5, 0xaa, 0xd4, 0xce, 0x52, 0x6a, 0x9b, 0x94, 0xda, 0x26, 0xa5, 0xb6, 0x49, 0xa9,
	0x6d, 0x52, 0x6a, 0xe7, 0x50, 0x6a, 0x6b, 0x4a, 0x37, 0x51, 0x2d, 0x6d, 0x85, 0x96, 0xd9, 0x54,
	0x15, 0x9b, 0xde, 0xbf, 0x10, 0xaa, 0x2f, 0x34, 0x3f, 0xcb, 0xa8, 0x9a, 0xe6, 0x7c, 0x19, 0x55,
	0x02, 0xca, 0x5c, 0x9f, 0x30, 0x55, 0x24, 0xec, 0x80, 0xb2, 0xd7, 0x84, 0x81, 0xc3, 0x9b, 0x81,
	0xa3, 0xa8, 0x1c, 0xde, 0x4c, 0x38, 0xae, 0xa2, 0x9a, 0x88, 0x90, 0xed, 0x93, 0x2c, 0x1b, 0xd5,
	0x80, 0x32, 0x68, 0x99, 0xc0, 0xe9, 0xcd, 0x94, 0xb3, 0xac, 0x9c, 0xde, 0x4c, 0x3a, 0x1d, 0x54,
	0x89, 0x3c, 0xce, 0x49, 0xcc, 0xa0, 0xcf, 0xae, 0xf5, 0xf5, 0x50, 0xd4, 0xc1, 0x28, 0x26, 0x43,
	0x3a, 0x83, 0x56, 0xba, 0xd6, 0x57, 0x23, 0x61, 0x4f, 0x26, 0x43, 0x61, 0x57, 0xf5, 0x51, 0x8e,
	0xf0, 0x16, 0xaa, 0x1e, 0x87, 0x8c, 0x7b, 0x94, 0xe9, 0xd2, 0x98, 0x8e, 0x95, 0x82, 0x68, 0xbb,
	0xb8, 0x53, 0x33, 0x14, 0xac, 0x83, 0x2d, 0x2d, 0xbd, 0x65, 0x12, 0x78, 0xd4, 0x87, 0x06, 0xb5,
	0x2a, 0xda, 0x3c, 0x18, 0xe2, 0x6b, 0xa8, 0x3a, 0x0e, 0x13, 0xce, 0xbc, 0x80, 0x40, 0x0f, 0x2a,
	0x5c, 0xa9, 0x05, 0xb7, 0x51, 0x81, 0x46, 0xd0, 0x69, 0x0a, 0x7b, 0x81, 0x46, 0x78, 0x13, 0x95,
	0x68, 0x34, 0xdd, 0x87, 0x46, 0x52, 0xd8, 0x60, 0xa4, 0xac, 0x07, 0xd0, 0x2c, 0x6a, 0xeb, 0x01,
	0xc6, 0xa8, 0x38, 0x89, 0x29, 0xb4, 0x83, 0xc2, 0x28, 0x06, 0xf8, 0x0a, 0xaa, 0x4c, 0x62, 0xea,
	0xc6, 0x64, 0x08, 0xcd, 0x5e, 0x15, 0x5e, 0x30, 0x62, 0xda, 0x27, 0x43, 0x38, 0x3f, 0x84, 0x41,
	0x33, 0x27, 0x6a, 0xb5, 0xd4, 0xde, 0x27, 0x5a, 0xfb, 0x4d, 0x29, 0xaf, 0x4f, 0x94, 0xf6, 0xd7,
	0x51, 0x8d, 0x46, 0xae, 0xd2, 0xf1, 0xa2, 0xa6, 0x4e, 0xa3, 0xf7, 0x52, 0xcb, 0x1b, 0x08, 0x45,
	0x61, 0xcc, 0xe5, 0x8d, 0x02, 0x5d, 0x98, 0xf0, 0xd7, 0x84, 0x0d, 0x6e, 0x14, 0xc1, 0x2e, 0xf0,
	0x8e, 0x9d, 0xcb, 0x9a, 0x5d, 0xe0, 0x1d, 0x0b, 0x95, 0x62, 0x32, 0x22, 0x33, 0xc7, 0xd1, 0x2a,
	0xc1, 0x10, 0xdf, 0x47, 0x9d, 0x31, 0xe7, 0x91, 0x3b, 0x26, 0xde, 0x80, 0xc4, 0xee, 0x50, 0xbc,
	0x50, 0x3a, 0x57, 0x14, 0xa6, 0x25, 0x5c, 0x5f, 0x83, 0x07, 0xde, 0x34, 0xf1, 0x0e, 0x6a, 0x9d,
	0x3c, 0x4d, 0x5c, 0xdf, 0x3b, 0x22, 0xbe, 0x3b, 0xf5, 0xfc, 0x09, 0x71, 0xb6, 0x14, 0xb6, 0x79,
	0xf2, 0x34, 0x79, 0x2d, 0xec, 0xbf, 0x16, 0x66, 0xb1, 0x06, 0xb1, 0x59, 0x24, 0x88, 0xf8, 0xa9,
	0x73, 0x55, 0xaf, 0x81, 0x85, 0xfc, 0x2b, 0x61, 0xd1, 0x9b, 0x23, 0x38, 0x3b, 0xd7, 0x16, 0x37,
	0x47, 0x58, 0x44, 0xf0, 0x37, 0x49, 0xc8, 0xdc, 0xc8, 0xe3, 0x63, 0xe7, 0xba, 0x76, 0x0b, 0xd3,
	0x7b, 0x8f, 0x8f, 0xc5, 0xfa, 0xc6, 0x64, 0xe6, 0x74, 0xf5, 0xfa, 0xc6, 0x64, 0x86, 0x6f, 0xa2,
	0xba, 0xd8, 0x2f, 0xad, 0xda, 0x0d, 0xe5, 0x43, 0xc2, 0xa8, 0x74, 0x93, 0x90, 0x03, 0x0d, 0xd9,
	0x5e, 0x80, 0x1c, 0x28, 0xc8, 0x75, 0x54, 0x9b, 0x8e, 0xdd, 0x41, 0x18, 0x78, 0x94, 0x39, 0x37,
	0x75, 0xe2, 0xe9, 0xf8, 0x05, 0x58, 0xf0, 0x1e, 0xda, 0x14, 0x4f, 0x4c, 0xba, 0x39, 0xe2, 0xa1,
	0x1a, 0xf1, 0xb1, 0xd3, 0x83, 0x86, 0xaa, 0x13, 0x50, 0xf6, 0x4a, 0x6d, 0xd2, 0x6b, 0x70, 0x40,
	0x80, 0x37, 0xcb, 0x06, 0xdc, 0x52, 0x01, 0xde, 0xcc, 0x08, 0xd8, 0x41, 0xad, 0x29, 0x49, 0xdc,
	0xf0, 0xe8, 0x1b, 0x72, 0xcc, 0x5d, 0x38, 0xbb, 0x5f, 0x68, 0x81, 0xa7, 0x24, 0x79, 0x07, 0xf6,
	0xb7, 0xe2, 0x00, 0x7f, 0x81, 0x9a, 0xd4, 0x63, 0x9e, 0x9b, 0x4c, 0x8f, 0x25, 0xee, 0xff, 0x15,
	0xae, 0x2e, 0xcc, 0x87, 0xd3, 0x63, 0x40, 0xdd, 0x46, 0x1b, 0x03, 0x96, 0xb8, 0x8f, 0x1e, 0x3d,
	0x7e, 0x22, 0x77, 0xcd, 0xb9, 0xad, 0x60, 0x8d, 0x01, 0x4b, 0x84, 0x19, 0xf6, 0x4c, 0xe0, 0x26,
	0x8c, 0xce, 0xdc, 0x21, 0xf5, 0x89, 0x94, 0xfd, 0x27, 0x1a, 0x27, 0xec, 0x2f, 0xa9, 0x4f, 0x40,
	0xfa, 0x5b, 0xa8, 0x11, 0x8d, 0x43, 0x46, 0x5c, 0x36, 0x09, 0x8e, 0x48, 0xec, 0xec, 0xe8, 0xa4,
	0x60, 0x7d, 0x0b, 0x46, 0xb1, 0x88, 0xf9, 0x01, 0x75, 0x7d, 0x9a, 0x70, 0xe7, 0x8e, 0x5e, 0x44,
	0x7a, 0x4a, 0x5f, 0xd3, 0x84, 0xe3, 0x7b, 0xa8, 0x93, 0xea, 0xed, 0xb2, 0xd0, 0x85, 0xf3, 0x70,
	0x57, 0x61, 0x37, 0xb4, 0xee, 0x6f, 0xc3, 0xf7, 0xe2, 0x54, 0xdc, 0x46, 0x1b, 0xfa, 0xf1, 0x75,
	0xc3, 0xd8, 0xa5, 0x91, 0x73, 0x4f, 0x73, 0xd4, 0xf6, 0x77, 0xf1, 0xab, 0x08, 0xef, 0x22, 0x3c,
	0x3f, 0xa4, 0x09, 0xf1, 0xc9, 0x31, 0x0f, 0x63, 0xe7, 0xbe, 0xc2, 0xb6, 0xf5, 0x39, 0x3d, 0x54,
	0x9e, 0xe7, 0x0d, 0x84, 0x3e, 0x11, 0xdf, 0x77, 0x4f, 0x58, 0xf8, 0x89, 0xf5, 0xfe, 0x5c, 0x40,
	0x68, 0xfe, 0xd6, 0xb8, 0x5c, 0x6c, 0x1b, 0xff, 0x7b, 0xb1, 0x5d, 0x28, 0x99, 0xa5, 0x55, 0x25,
	0xb3, 0x0c, 0x29, 0xb2, 0x25, 0xd3, 0x96, 0xf6, 0x9c, 0x92, 0x59, 0x01, 0x8f, 0x59, 0x32, 0xab,
	0xdb, 0xc5, 0x9d, 0x86, 0x51, 0x32, 0x6b, 0x60, 0x53, 0x25, 0x53, 0x16, 0x3f, 0x94, 0x53, 0xfc,
	0xea, 0xb9, 0xc5, 0xaf, 0xb1, 0x54, 0xfc, 0x54, 0x35, 0x6b, 0xa6, 0xd5, 0xcc, 0x50, 0xf0, 0x04,
	0xd5, 0xd2, 0x97, 0xe8, 0x15, 0xaf, 0x2e, 0x37, 0x51, 0x63, 0x40, 0x86, 0x94, 0x91, 0x81, 0x1b,
	0x32, 0xff, 0x14, 0x44, 0xac, 0xf6, 0xeb, 0xca, 0xf6, 0x8e, 0xf9, 0xa7, 0x6a, 0x29, 0xc5, 0x9c,
	0x37, 0x93, 0xd2, 0xe2, 0x9b, 0xc9, 0xcf, 0x51, 0x63, 0xf1, 0xf5, 0x1b, 0x63, 0x54, 0x4a, 0x4e,
	0x68, 0xa4, 0x6e, 0x50, 0xf8, 0x2d, 0x14, 0x8b, 0xc9, 0xc7, 0x09, 0x8d, 0xc9, 0x40, 0x65, 0x4a,
	0xc7, 0xbd, 0xcf, 0x16, 0x6a, 0x2e, 0xbd, 0x85, 0xeb, 0x6b, 0x91, 0x72, 0x12, 0x24, 0xaa, 0x05,
	0x17, 0xd7, 0xe2, 0x2b, 0x31, 0xd6, 0xd7, 0xa2, 0x74, 0x16, 0xd2, 0x6b, 0x51, 0x3a, 0x2f, 0x21,
	0x7b, 0xc2, 0xe8, 0xc7, 0x89, 0xec, 0x14, 0xaa, 0x7d, 0x35, 0xc2, 0x7b, 0xa8, 0x2c, 0x03, 0xf2,
	0x3f, 0x7f, 0xcd, 0x3f, 0xe2, 0xf5, 0x25, 0x4e, 0x64, 0x61, 0x93, 0x40, 0x65, 0x29, 0xcb, 0x6b,
	0x91, 0x4d, 0x02, 0x99, 0xe5, 0x21, 0xda, 0x94, 0xf3, 0xba, 0x01, 0xe1, 0xde, 0xc0, 0xe3, 0x9e,
	0x7c, 0xfe, 0x6d, 0xc8, 0x89, 0xa5, 0xef, 0x8d, 0x72, 0x89, 0x22, 0xd0, 0xfb, 0xc1, 0x42, 0x55,
	0xfd, 0xc9, 0x40, 0x2f, 0x2f, 0xf2, 0x68, 0xbc, 0xb8, 0xbc, 0xf7, 0x62, 0xac, 0x97, 0x27, 0x9d,
	0xf3, 0xe5, 0xa5, 0x4e, 0x16, 0xba, 0x49, 0xe4, 0xc5, 0x89, 0x5e, 0x61, 0x95, 0x85, 0x87, 0x30,
	0xc6, 0x0f, 0x50, 0xe9, 0x84, 0x9c, 0xfe, 0x17, 0x4b, 0x04, 0x18, 0x7e, 0x84, 0x6c, 0xb8, 0x3e,
	0x12, 0xf5, 0x79, 0x6f, 0x4d, 0x80, 0x02, 0xe2, 0x5b, 0xa8, 0xa9, 0xd6, 0xad, 0x22, 0xe5, 0x82,
	0x1b, 0xd2, 0x08, 0xb7, 0x4e, 0xd2, 0x7b, 0x83, 0xaa, 0xfa, 0x7b, 0xc7, 0xd2, 0xb6, 0x5b, 0xcb,
	0xdb, 0xae, 0x4e, 0x57, 0x21, 0xa7, 0xb7, 0x28, 0x2e, 0xf4, 0x16, 0xbd, 0x7f, 0x16, 0x50, 0x73,
	0xe9, 0x6b, 0xc8, 0xda, 0x49, 0xf7, 0xf4, 0x59, 0x2f, 0xa8, 0x35, 0xc9, 0x4f, 0xb8, 0xbb, 0xfa,
	0x13, 0xee, 0xfc, 0xc3, 0x8a, 0x7a, 0x0c, 0xee, 0x40, 0x9f, 0x59, 0x3c, 0x0f, 0x2d, 0x5a, 0xd0,
	0x7b, 0xb2, 0x05, 0x2d, 0x9d, 0x87, 0x85, 0xee, 0xf4, 0x0e, 0x74, 0xa7, 0xe5, 0x73, 0xe7, 0x1d,
	0xc1, 0xbc, 0xa2, 0x71, 0xb5, 0xcf, 0x9d, 0x77, 0x24, 0xe7, 0x55, 0xfd, 0xeb, 0xfa, 0x79, 0x29,
	0xc3, 0x0f, 0x53, 0x41, 0xab, 0xe7, 0xc1, 0x95, 0xd6, 0xff, 0x2e, 0xa0, 0x8d, 0xe5, 0x8f, 0x47,
	0x6b, 0xc5, 0x7e, 0xb8, 0x2c, 0xf6, 0x56, 0x66, 0xfe, 0xf9, 0x5c, 0x4a, 0xed, 0xbb, 0x0b, 0x6a,
	0xaf, 0x83, 0x0b, 0xb9, 0xef, 0x2f, 0xca, 0xbd, 0x0e, 0x0c, 0x7a, 0xdf, 0x5d, 0xd0, 0x7b, 0xed,
	0xcc, 0x23, 0x98, 0x79, 0x2e, 0xf8, 0xda, 0x99, 0x85, 0xe2, 0x17, 0x91, 0xed, 0x73, 0x97, 0x85,
	0x9f, 0xa0, 0xd4, 0x57, 0xfb, 0x65, 0x9f, 0xbf, 0x0d, 0x3f, 0x09, 0xf3, 0x48, 0x9a, 0xab, 0xd2,
	0x3c, 0x02, 0xf3, 0x23, 0x64, 0x7f, 0xa2, 0x7c, 0x0c, 0xe5, 0xfe, 0x9c, 0xfd, 0x54, 0xc0, 0x67,
	0x5f, 0xa2, 0xea, 0x80, 0x26, 0xde, 0x91, 0x4f, 0x06, 0xf8, 0x46, 0x06, 0xae, 0x4a, 0xeb, 0xbb,
	0x48, 0xc4, 0x24, 0xce, 0x1f, 0xbe, 0x7d, 0x2a, 0x77, 0x41, 0x87, 0x3c, 0xfb, 0xd9, 0x7c, 0x87,
	0xf0, 0xf5, 0x4c, 0xf8, 0x3b, 0x46, 0xc2, 0x61, 0x26, 0x58, 0x07, 0x3c, 0x7b, 0x8f, 0xca, 0x31,
	0xec, 0x73, 0x36, 0x12, 0x9e, 0xff, 0xe5, 0xc8, 0xf5, 0x85, 0x13, 0x26, 0x7a, 0xfe, 0xf1, 0xfb,
	0xcf, 0xdd, 0x0b, 0x7f, 0xfb, 0xdc, 0xbd, 0xf0, 0xe3, 0xe7, 0xae, 0xf5, 0xdb, 0xb3, 0xae, 0xf5,
	0xc7, 0xb3, 0xae, 0xf5, 0x97, 0xb3, 0xae, 0xf5, 0xfd, 0x59, 0xd7, 0xfa, 0xfb, 0x59, 0xd7, 0xfa,
	0xe1, 0xac, 0x7b, 0xe1, 0xc7, 0xb3, 0xae, 0xf5, 0xdd, 0x3f, 0xba, 0x17, 0x7e, 0xf3, 0xcb, 0x51,
	0x18, 0x9d, 0x8c, 0x76, 0xa7, 0xa1, 0xcf, 0x49, 0x1c, 0x7b, 0xbb, 0x93, 0x64, 0x0f, 0x7e, 0x0c,
	0xc3, 0x38, 0x78, 0x10, 0xc5, 0xe1, 0x94, 0x0e, 0x48, 0xfc, 0x40, 0xbb, 0xf7, 0xa2, 0xa3, 0x51,
	0xb8, 0x47, 0x66, 0x5c, 0xfd, 0x03, 0x48, 0xfe, 0x39, 0xb2, 0x81, 0xf3, 0x93, 0xff, 0x04, 0x00,
	0x00, 0xff, 0xff, 0x46, 0x25, 0x1b, 0x53, 0x1f, 0x1a, 0x00, 0x00,
}
