// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ves.io/schema/views/types.proto

package views

import proto "github.com/gogo/protobuf/proto"
import golang_proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"
import _ "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
import ves_io_schema4 "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
import _ "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
import _ "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"

import strconv "strconv"

import strings "strings"
import reflect "reflect"
import sortkeys "github.com/gogo/protobuf/sortkeys"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// SiteNetwork
//
// x-displayName: "Site Network"
// This defines network types to be used on site
type SiteNetwork int32

const (
	// x-displayName: "Inside and Outside Network"
	// All inside and outside networks.
	SITE_NETWORK_INSIDE_AND_OUTSIDE SiteNetwork = 0
	// x-displayName: "Inside Network"
	// All inside networks.
	SITE_NETWORK_INSIDE SiteNetwork = 1
	// x-displayName: "Outside Network"
	// All outside networks.
	SITE_NETWORK_OUTSIDE SiteNetwork = 2
)

var SiteNetwork_name = map[int32]string{
	0: "SITE_NETWORK_INSIDE_AND_OUTSIDE",
	1: "SITE_NETWORK_INSIDE",
	2: "SITE_NETWORK_OUTSIDE",
}
var SiteNetwork_value = map[string]int32{
	"SITE_NETWORK_INSIDE_AND_OUTSIDE": 0,
	"SITE_NETWORK_INSIDE":             1,
	"SITE_NETWORK_OUTSIDE":            2,
}

func (SiteNetwork) EnumDescriptor() ([]byte, []int) { return fileDescriptorTypes, []int{0} }

// ObjectRefType
//
// x-displayName: "Object reference"
// This type establishes a direct reference from one object(the referrer) to another(the referred).
// Such a reference is in form of tenant/namespace/name
type ObjectRefType struct {
	// tenant
	//
	// x-displayName: "Tenant"
	// x-example: "acmecorp"
	// When a configuration object(e.g. virtual_host) refers to another(e.g route)
	// then tenant will hold the referred object's(e.g. route's) tenant.
	Tenant string `protobuf:"bytes,1,opt,name=tenant,proto3" json:"tenant,omitempty"`
	// namespace
	//
	// x-displayName: "Namespace"
	// x-example: "ns1"
	// When a configuration object(e.g. virtual_host) refers to another(e.g route)
	// then namespace will hold the referred object's(e.g. route's) namespace.
	Namespace string `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// name
	//
	// x-displayName: "Name"
	// x-example: "contacts-route"
	// x-required
	// When a configuration object(e.g. virtual_host) refers to another(e.g route)
	// then name will hold the referred object's(e.g. route's) name.
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
}

func (m *ObjectRefType) Reset()                    { *m = ObjectRefType{} }
func (*ObjectRefType) ProtoMessage()               {}
func (*ObjectRefType) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{0} }

func (m *ObjectRefType) GetTenant() string {
	if m != nil {
		return m.Tenant
	}
	return ""
}

func (m *ObjectRefType) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *ObjectRefType) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

// SiteLocator
//
// x-displayName: "Site or Virtual Site"
// This message defines a reference to a site or virtual site object
type SiteLocator struct {
	// SiteLocator
	//
	// x-displayName: "Select Site or Virtual Site"
	// x-required
	// Reference to a site or virtual site object
	//
	// Types that are valid to be assigned to Choice:
	//	*SiteLocator_Site
	//	*SiteLocator_VirtualSite
	Choice isSiteLocator_Choice `protobuf_oneof:"choice"`
}

func (m *SiteLocator) Reset()                    { *m = SiteLocator{} }
func (*SiteLocator) ProtoMessage()               {}
func (*SiteLocator) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{1} }

type isSiteLocator_Choice interface {
	isSiteLocator_Choice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type SiteLocator_Site struct {
	Site *ObjectRefType `protobuf:"bytes,1,opt,name=site,oneof"`
}
type SiteLocator_VirtualSite struct {
	VirtualSite *ObjectRefType `protobuf:"bytes,2,opt,name=virtual_site,json=virtualSite,oneof"`
}

func (*SiteLocator_Site) isSiteLocator_Choice()        {}
func (*SiteLocator_VirtualSite) isSiteLocator_Choice() {}

func (m *SiteLocator) GetChoice() isSiteLocator_Choice {
	if m != nil {
		return m.Choice
	}
	return nil
}

func (m *SiteLocator) GetSite() *ObjectRefType {
	if x, ok := m.GetChoice().(*SiteLocator_Site); ok {
		return x.Site
	}
	return nil
}

func (m *SiteLocator) GetVirtualSite() *ObjectRefType {
	if x, ok := m.GetChoice().(*SiteLocator_VirtualSite); ok {
		return x.VirtualSite
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*SiteLocator) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _SiteLocator_OneofMarshaler, _SiteLocator_OneofUnmarshaler, _SiteLocator_OneofSizer, []interface{}{
		(*SiteLocator_Site)(nil),
		(*SiteLocator_VirtualSite)(nil),
	}
}

func _SiteLocator_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*SiteLocator)
	// choice
	switch x := m.Choice.(type) {
	case *SiteLocator_Site:
		_ = b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Site); err != nil {
			return err
		}
	case *SiteLocator_VirtualSite:
		_ = b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.VirtualSite); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("SiteLocator.Choice has unexpected type %T", x)
	}
	return nil
}

func _SiteLocator_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*SiteLocator)
	switch tag {
	case 1: // choice.site
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ObjectRefType)
		err := b.DecodeMessage(msg)
		m.Choice = &SiteLocator_Site{msg}
		return true, err
	case 2: // choice.virtual_site
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ObjectRefType)
		err := b.DecodeMessage(msg)
		m.Choice = &SiteLocator_VirtualSite{msg}
		return true, err
	default:
		return false, nil
	}
}

func _SiteLocator_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*SiteLocator)
	// choice
	switch x := m.Choice.(type) {
	case *SiteLocator_Site:
		s := proto.Size(x.Site)
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *SiteLocator_VirtualSite:
		s := proto.Size(x.VirtualSite)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// WhereVirtualNetwork
//
// x-displayName: "Virtual Network"
// Parameters to advertise on a given virtual network
type WhereVirtualNetwork struct {
	// Virtual Network
	//
	// x-displayName: "Virtual Network"
	// x-required
	// Select virtual network reference
	VirtualNetwork *ObjectRefType `protobuf:"bytes,1,opt,name=virtual_network,json=virtualNetwork" json:"virtual_network,omitempty"`
	// Select VIP
	//
	// x-displayName: "Select VIP"
	// x-required
	// Select default VIP or specify ip address
	//
	// Types that are valid to be assigned to VipChoice:
	//	*WhereVirtualNetwork_DefaultVip
	//	*WhereVirtualNetwork_SpecificVip
	VipChoice isWhereVirtualNetwork_VipChoice `protobuf_oneof:"vip_choice"`
}

func (m *WhereVirtualNetwork) Reset()                    { *m = WhereVirtualNetwork{} }
func (*WhereVirtualNetwork) ProtoMessage()               {}
func (*WhereVirtualNetwork) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{2} }

type isWhereVirtualNetwork_VipChoice interface {
	isWhereVirtualNetwork_VipChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type WhereVirtualNetwork_DefaultVip struct {
	DefaultVip *ves_io_schema4.Empty `protobuf:"bytes,3,opt,name=default_vip,json=defaultVip,oneof"`
}
type WhereVirtualNetwork_SpecificVip struct {
	SpecificVip string `protobuf:"bytes,4,opt,name=specific_vip,json=specificVip,proto3,oneof"`
}

func (*WhereVirtualNetwork_DefaultVip) isWhereVirtualNetwork_VipChoice()  {}
func (*WhereVirtualNetwork_SpecificVip) isWhereVirtualNetwork_VipChoice() {}

func (m *WhereVirtualNetwork) GetVipChoice() isWhereVirtualNetwork_VipChoice {
	if m != nil {
		return m.VipChoice
	}
	return nil
}

func (m *WhereVirtualNetwork) GetVirtualNetwork() *ObjectRefType {
	if m != nil {
		return m.VirtualNetwork
	}
	return nil
}

func (m *WhereVirtualNetwork) GetDefaultVip() *ves_io_schema4.Empty {
	if x, ok := m.GetVipChoice().(*WhereVirtualNetwork_DefaultVip); ok {
		return x.DefaultVip
	}
	return nil
}

func (m *WhereVirtualNetwork) GetSpecificVip() string {
	if x, ok := m.GetVipChoice().(*WhereVirtualNetwork_SpecificVip); ok {
		return x.SpecificVip
	}
	return ""
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*WhereVirtualNetwork) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _WhereVirtualNetwork_OneofMarshaler, _WhereVirtualNetwork_OneofUnmarshaler, _WhereVirtualNetwork_OneofSizer, []interface{}{
		(*WhereVirtualNetwork_DefaultVip)(nil),
		(*WhereVirtualNetwork_SpecificVip)(nil),
	}
}

func _WhereVirtualNetwork_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*WhereVirtualNetwork)
	// vip_choice
	switch x := m.VipChoice.(type) {
	case *WhereVirtualNetwork_DefaultVip:
		_ = b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.DefaultVip); err != nil {
			return err
		}
	case *WhereVirtualNetwork_SpecificVip:
		_ = b.EncodeVarint(4<<3 | proto.WireBytes)
		_ = b.EncodeStringBytes(x.SpecificVip)
	case nil:
	default:
		return fmt.Errorf("WhereVirtualNetwork.VipChoice has unexpected type %T", x)
	}
	return nil
}

func _WhereVirtualNetwork_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*WhereVirtualNetwork)
	switch tag {
	case 3: // vip_choice.default_vip
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.VipChoice = &WhereVirtualNetwork_DefaultVip{msg}
		return true, err
	case 4: // vip_choice.specific_vip
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.VipChoice = &WhereVirtualNetwork_SpecificVip{x}
		return true, err
	default:
		return false, nil
	}
}

func _WhereVirtualNetwork_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*WhereVirtualNetwork)
	// vip_choice
	switch x := m.VipChoice.(type) {
	case *WhereVirtualNetwork_DefaultVip:
		s := proto.Size(x.DefaultVip)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *WhereVirtualNetwork_SpecificVip:
		n += proto.SizeVarint(4<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.SpecificVip)))
		n += len(x.SpecificVip)
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// WhereSite
//
// x-displayName: "Site"
// This defines a reference to a CE site along with network type and an optional ip address where a load balancer could be advertised
type WhereSite struct {
	// SiteNetwork
	//
	// x-displayName: "Site Network"
	// x-required
	// Select network types to be used on site
	// By default VIP chosen as ip address of primary network interface in the network
	Network SiteNetwork `protobuf:"varint,1,opt,name=network,proto3,enum=ves.io.schema.views.SiteNetwork" json:"network,omitempty"`
	// Site
	//
	// x-displayName: "Site Reference"
	// x-required
	// Reference to site object
	Site *ObjectRefType `protobuf:"bytes,2,opt,name=site" json:"site,omitempty"`
	// IP address on the site
	//
	// x-displayName: "IP Address"
	// Use given IP address as VIP on the site
	Ip string `protobuf:"bytes,3,opt,name=ip,proto3" json:"ip,omitempty"`
}

func (m *WhereSite) Reset()                    { *m = WhereSite{} }
func (*WhereSite) ProtoMessage()               {}
func (*WhereSite) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{3} }

func (m *WhereSite) GetNetwork() SiteNetwork {
	if m != nil {
		return m.Network
	}
	return SITE_NETWORK_INSIDE_AND_OUTSIDE
}

func (m *WhereSite) GetSite() *ObjectRefType {
	if m != nil {
		return m.Site
	}
	return nil
}

func (m *WhereSite) GetIp() string {
	if m != nil {
		return m.Ip
	}
	return ""
}

// WhereVirtualSite
//
// x-displayName: "Virtual Site"
// This defines a reference to a customer site virtual site along with network type where a load balancer could be advertised
type WhereVirtualSite struct {
	// SiteNetwork
	//
	// x-displayName: "Site Network"
	// x-required
	// Select network types to be used on site.
	// IP address of primary network interface in the network
	Network SiteNetwork `protobuf:"varint,1,opt,name=network,proto3,enum=ves.io.schema.views.SiteNetwork" json:"network,omitempty"`
	// Virtual Site
	//
	// x-displayName: "Virtual Site Reference"
	// x-required
	// Reference to virtual site object
	VirtualSite *ObjectRefType `protobuf:"bytes,2,opt,name=virtual_site,json=virtualSite" json:"virtual_site,omitempty"`
}

func (m *WhereVirtualSite) Reset()                    { *m = WhereVirtualSite{} }
func (*WhereVirtualSite) ProtoMessage()               {}
func (*WhereVirtualSite) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{4} }

func (m *WhereVirtualSite) GetNetwork() SiteNetwork {
	if m != nil {
		return m.Network
	}
	return SITE_NETWORK_INSIDE_AND_OUTSIDE
}

func (m *WhereVirtualSite) GetVirtualSite() *ObjectRefType {
	if m != nil {
		return m.VirtualSite
	}
	return nil
}

// WhereVK8SService
//
// x-displayName: "vK8s Services on RE"
// This defines a reference to a RE site or virtual site where a load balancer could be advertised in the vK8s service network
type WhereVK8SService struct {
	// RE or RE Virtual Site
	//
	// x-displayName: "RE or RE Virtual Site"
	// x-required
	// This defines a reference to a RE site or virtual site where a VIP could be advertised in the vK8s service network
	//
	// Types that are valid to be assigned to Choice:
	//	*WhereVK8SService_Site
	//	*WhereVK8SService_VirtualSite
	Choice isWhereVK8SService_Choice `protobuf_oneof:"choice"`
}

func (m *WhereVK8SService) Reset()                    { *m = WhereVK8SService{} }
func (*WhereVK8SService) ProtoMessage()               {}
func (*WhereVK8SService) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{5} }

type isWhereVK8SService_Choice interface {
	isWhereVK8SService_Choice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type WhereVK8SService_Site struct {
	Site *ObjectRefType `protobuf:"bytes,1,opt,name=site,oneof"`
}
type WhereVK8SService_VirtualSite struct {
	VirtualSite *ObjectRefType `protobuf:"bytes,2,opt,name=virtual_site,json=virtualSite,oneof"`
}

func (*WhereVK8SService_Site) isWhereVK8SService_Choice()        {}
func (*WhereVK8SService_VirtualSite) isWhereVK8SService_Choice() {}

func (m *WhereVK8SService) GetChoice() isWhereVK8SService_Choice {
	if m != nil {
		return m.Choice
	}
	return nil
}

func (m *WhereVK8SService) GetSite() *ObjectRefType {
	if x, ok := m.GetChoice().(*WhereVK8SService_Site); ok {
		return x.Site
	}
	return nil
}

func (m *WhereVK8SService) GetVirtualSite() *ObjectRefType {
	if x, ok := m.GetChoice().(*WhereVK8SService_VirtualSite); ok {
		return x.VirtualSite
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*WhereVK8SService) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _WhereVK8SService_OneofMarshaler, _WhereVK8SService_OneofUnmarshaler, _WhereVK8SService_OneofSizer, []interface{}{
		(*WhereVK8SService_Site)(nil),
		(*WhereVK8SService_VirtualSite)(nil),
	}
}

func _WhereVK8SService_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*WhereVK8SService)
	// choice
	switch x := m.Choice.(type) {
	case *WhereVK8SService_Site:
		_ = b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Site); err != nil {
			return err
		}
	case *WhereVK8SService_VirtualSite:
		_ = b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.VirtualSite); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("WhereVK8SService.Choice has unexpected type %T", x)
	}
	return nil
}

func _WhereVK8SService_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*WhereVK8SService)
	switch tag {
	case 1: // choice.site
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ObjectRefType)
		err := b.DecodeMessage(msg)
		m.Choice = &WhereVK8SService_Site{msg}
		return true, err
	case 2: // choice.virtual_site
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ObjectRefType)
		err := b.DecodeMessage(msg)
		m.Choice = &WhereVK8SService_VirtualSite{msg}
		return true, err
	default:
		return false, nil
	}
}

func _WhereVK8SService_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*WhereVK8SService)
	// choice
	switch x := m.Choice.(type) {
	case *WhereVK8SService_Site:
		s := proto.Size(x.Site)
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *WhereVK8SService_VirtualSite:
		s := proto.Size(x.VirtualSite)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// WhereType
//
// x-displayName: "Select Where to Advertise"
// This defines various options where a Loadbalancer could be advertised
type WhereType struct {
	// Advertise choice
	//
	// x-displayName: "Select Where to Advertise"
	// x-required
	// This defines various options where a Loadbalancer could be advertised
	//
	// Types that are valid to be assigned to Choice:
	//	*WhereType_Site
	//	*WhereType_VirtualSite
	//	*WhereType_Vk8SService
	//	*WhereType_VirtualNetwork
	Choice isWhereType_Choice `protobuf_oneof:"choice"`
	//  Listen TCP Port Choice
	//
	// x-displayName: "TCP Listen Port Choice"
	// x-required
	// Available options: user provided port or system default port
	//
	// Types that are valid to be assigned to PortChoice:
	//	*WhereType_UseDefaultPort
	//	*WhereType_Port
	PortChoice isWhereType_PortChoice `protobuf_oneof:"port_choice"`
}

func (m *WhereType) Reset()                    { *m = WhereType{} }
func (*WhereType) ProtoMessage()               {}
func (*WhereType) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{6} }

type isWhereType_Choice interface {
	isWhereType_Choice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isWhereType_PortChoice interface {
	isWhereType_PortChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type WhereType_Site struct {
	Site *WhereSite `protobuf:"bytes,1,opt,name=site,oneof"`
}
type WhereType_VirtualSite struct {
	VirtualSite *WhereVirtualSite `protobuf:"bytes,2,opt,name=virtual_site,json=virtualSite,oneof"`
}
type WhereType_Vk8SService struct {
	Vk8SService *WhereVK8SService `protobuf:"bytes,3,opt,name=vk8s_service,json=vk8sService,oneof"`
}
type WhereType_VirtualNetwork struct {
	VirtualNetwork *WhereVirtualNetwork `protobuf:"bytes,9,opt,name=virtual_network,json=virtualNetwork,oneof"`
}
type WhereType_UseDefaultPort struct {
	UseDefaultPort *ves_io_schema4.Empty `protobuf:"bytes,6,opt,name=use_default_port,json=useDefaultPort,oneof"`
}
type WhereType_Port struct {
	Port uint32 `protobuf:"varint,7,opt,name=port,proto3,oneof"`
}

func (*WhereType_Site) isWhereType_Choice()               {}
func (*WhereType_VirtualSite) isWhereType_Choice()        {}
func (*WhereType_Vk8SService) isWhereType_Choice()        {}
func (*WhereType_VirtualNetwork) isWhereType_Choice()     {}
func (*WhereType_UseDefaultPort) isWhereType_PortChoice() {}
func (*WhereType_Port) isWhereType_PortChoice()           {}

func (m *WhereType) GetChoice() isWhereType_Choice {
	if m != nil {
		return m.Choice
	}
	return nil
}
func (m *WhereType) GetPortChoice() isWhereType_PortChoice {
	if m != nil {
		return m.PortChoice
	}
	return nil
}

func (m *WhereType) GetSite() *WhereSite {
	if x, ok := m.GetChoice().(*WhereType_Site); ok {
		return x.Site
	}
	return nil
}

func (m *WhereType) GetVirtualSite() *WhereVirtualSite {
	if x, ok := m.GetChoice().(*WhereType_VirtualSite); ok {
		return x.VirtualSite
	}
	return nil
}

func (m *WhereType) GetVk8SService() *WhereVK8SService {
	if x, ok := m.GetChoice().(*WhereType_Vk8SService); ok {
		return x.Vk8SService
	}
	return nil
}

func (m *WhereType) GetVirtualNetwork() *WhereVirtualNetwork {
	if x, ok := m.GetChoice().(*WhereType_VirtualNetwork); ok {
		return x.VirtualNetwork
	}
	return nil
}

func (m *WhereType) GetUseDefaultPort() *ves_io_schema4.Empty {
	if x, ok := m.GetPortChoice().(*WhereType_UseDefaultPort); ok {
		return x.UseDefaultPort
	}
	return nil
}

func (m *WhereType) GetPort() uint32 {
	if x, ok := m.GetPortChoice().(*WhereType_Port); ok {
		return x.Port
	}
	return 0
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*WhereType) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _WhereType_OneofMarshaler, _WhereType_OneofUnmarshaler, _WhereType_OneofSizer, []interface{}{
		(*WhereType_Site)(nil),
		(*WhereType_VirtualSite)(nil),
		(*WhereType_Vk8SService)(nil),
		(*WhereType_VirtualNetwork)(nil),
		(*WhereType_UseDefaultPort)(nil),
		(*WhereType_Port)(nil),
	}
}

func _WhereType_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*WhereType)
	// choice
	switch x := m.Choice.(type) {
	case *WhereType_Site:
		_ = b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Site); err != nil {
			return err
		}
	case *WhereType_VirtualSite:
		_ = b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.VirtualSite); err != nil {
			return err
		}
	case *WhereType_Vk8SService:
		_ = b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Vk8SService); err != nil {
			return err
		}
	case *WhereType_VirtualNetwork:
		_ = b.EncodeVarint(9<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.VirtualNetwork); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("WhereType.Choice has unexpected type %T", x)
	}
	// port_choice
	switch x := m.PortChoice.(type) {
	case *WhereType_UseDefaultPort:
		_ = b.EncodeVarint(6<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.UseDefaultPort); err != nil {
			return err
		}
	case *WhereType_Port:
		_ = b.EncodeVarint(7<<3 | proto.WireVarint)
		_ = b.EncodeVarint(uint64(x.Port))
	case nil:
	default:
		return fmt.Errorf("WhereType.PortChoice has unexpected type %T", x)
	}
	return nil
}

func _WhereType_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*WhereType)
	switch tag {
	case 1: // choice.site
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(WhereSite)
		err := b.DecodeMessage(msg)
		m.Choice = &WhereType_Site{msg}
		return true, err
	case 2: // choice.virtual_site
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(WhereVirtualSite)
		err := b.DecodeMessage(msg)
		m.Choice = &WhereType_VirtualSite{msg}
		return true, err
	case 3: // choice.vk8s_service
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(WhereVK8SService)
		err := b.DecodeMessage(msg)
		m.Choice = &WhereType_Vk8SService{msg}
		return true, err
	case 9: // choice.virtual_network
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(WhereVirtualNetwork)
		err := b.DecodeMessage(msg)
		m.Choice = &WhereType_VirtualNetwork{msg}
		return true, err
	case 6: // port_choice.use_default_port
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.PortChoice = &WhereType_UseDefaultPort{msg}
		return true, err
	case 7: // port_choice.port
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.PortChoice = &WhereType_Port{uint32(x)}
		return true, err
	default:
		return false, nil
	}
}

func _WhereType_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*WhereType)
	// choice
	switch x := m.Choice.(type) {
	case *WhereType_Site:
		s := proto.Size(x.Site)
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *WhereType_VirtualSite:
		s := proto.Size(x.VirtualSite)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *WhereType_Vk8SService:
		s := proto.Size(x.Vk8SService)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *WhereType_VirtualNetwork:
		s := proto.Size(x.VirtualNetwork)
		n += proto.SizeVarint(9<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	// port_choice
	switch x := m.PortChoice.(type) {
	case *WhereType_UseDefaultPort:
		s := proto.Size(x.UseDefaultPort)
		n += proto.SizeVarint(6<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *WhereType_Port:
		n += proto.SizeVarint(7<<3 | proto.WireVarint)
		n += proto.SizeVarint(uint64(x.Port))
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// WhereTypeSiteVsite
//
// x-displayName: "Select Where to Advertise"
// This defines various options where a Loadbalancer could be advertised
type WhereTypeSiteVsite struct {
	// Advertise choice
	//
	// x-displayName: "Select Where to Advertise"
	// x-required
	// This defines various options where a Loadbalancer could be advertised
	//
	// Types that are valid to be assigned to Choice:
	//	*WhereTypeSiteVsite_Site
	//	*WhereTypeSiteVsite_VirtualSite
	Choice isWhereTypeSiteVsite_Choice `protobuf_oneof:"choice"`
	//  Listen TCP Port Choice
	//
	// x-displayName: "TCP Listen Port Choice"
	// Available options: user provided port or system default port
	//
	// Types that are valid to be assigned to PortChoice:
	//	*WhereTypeSiteVsite_UseDefaultPort
	//	*WhereTypeSiteVsite_Port
	PortChoice isWhereTypeSiteVsite_PortChoice `protobuf_oneof:"port_choice"`
}

func (m *WhereTypeSiteVsite) Reset()                    { *m = WhereTypeSiteVsite{} }
func (*WhereTypeSiteVsite) ProtoMessage()               {}
func (*WhereTypeSiteVsite) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{7} }

type isWhereTypeSiteVsite_Choice interface {
	isWhereTypeSiteVsite_Choice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isWhereTypeSiteVsite_PortChoice interface {
	isWhereTypeSiteVsite_PortChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type WhereTypeSiteVsite_Site struct {
	Site *WhereSite `protobuf:"bytes,1,opt,name=site,oneof"`
}
type WhereTypeSiteVsite_VirtualSite struct {
	VirtualSite *WhereVirtualSite `protobuf:"bytes,2,opt,name=virtual_site,json=virtualSite,oneof"`
}
type WhereTypeSiteVsite_UseDefaultPort struct {
	UseDefaultPort *ves_io_schema4.Empty `protobuf:"bytes,5,opt,name=use_default_port,json=useDefaultPort,oneof"`
}
type WhereTypeSiteVsite_Port struct {
	Port uint32 `protobuf:"varint,6,opt,name=port,proto3,oneof"`
}

func (*WhereTypeSiteVsite_Site) isWhereTypeSiteVsite_Choice()               {}
func (*WhereTypeSiteVsite_VirtualSite) isWhereTypeSiteVsite_Choice()        {}
func (*WhereTypeSiteVsite_UseDefaultPort) isWhereTypeSiteVsite_PortChoice() {}
func (*WhereTypeSiteVsite_Port) isWhereTypeSiteVsite_PortChoice()           {}

func (m *WhereTypeSiteVsite) GetChoice() isWhereTypeSiteVsite_Choice {
	if m != nil {
		return m.Choice
	}
	return nil
}
func (m *WhereTypeSiteVsite) GetPortChoice() isWhereTypeSiteVsite_PortChoice {
	if m != nil {
		return m.PortChoice
	}
	return nil
}

func (m *WhereTypeSiteVsite) GetSite() *WhereSite {
	if x, ok := m.GetChoice().(*WhereTypeSiteVsite_Site); ok {
		return x.Site
	}
	return nil
}

func (m *WhereTypeSiteVsite) GetVirtualSite() *WhereVirtualSite {
	if x, ok := m.GetChoice().(*WhereTypeSiteVsite_VirtualSite); ok {
		return x.VirtualSite
	}
	return nil
}

func (m *WhereTypeSiteVsite) GetUseDefaultPort() *ves_io_schema4.Empty {
	if x, ok := m.GetPortChoice().(*WhereTypeSiteVsite_UseDefaultPort); ok {
		return x.UseDefaultPort
	}
	return nil
}

func (m *WhereTypeSiteVsite) GetPort() uint32 {
	if x, ok := m.GetPortChoice().(*WhereTypeSiteVsite_Port); ok {
		return x.Port
	}
	return 0
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*WhereTypeSiteVsite) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _WhereTypeSiteVsite_OneofMarshaler, _WhereTypeSiteVsite_OneofUnmarshaler, _WhereTypeSiteVsite_OneofSizer, []interface{}{
		(*WhereTypeSiteVsite_Site)(nil),
		(*WhereTypeSiteVsite_VirtualSite)(nil),
		(*WhereTypeSiteVsite_UseDefaultPort)(nil),
		(*WhereTypeSiteVsite_Port)(nil),
	}
}

func _WhereTypeSiteVsite_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*WhereTypeSiteVsite)
	// choice
	switch x := m.Choice.(type) {
	case *WhereTypeSiteVsite_Site:
		_ = b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Site); err != nil {
			return err
		}
	case *WhereTypeSiteVsite_VirtualSite:
		_ = b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.VirtualSite); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("WhereTypeSiteVsite.Choice has unexpected type %T", x)
	}
	// port_choice
	switch x := m.PortChoice.(type) {
	case *WhereTypeSiteVsite_UseDefaultPort:
		_ = b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.UseDefaultPort); err != nil {
			return err
		}
	case *WhereTypeSiteVsite_Port:
		_ = b.EncodeVarint(6<<3 | proto.WireVarint)
		_ = b.EncodeVarint(uint64(x.Port))
	case nil:
	default:
		return fmt.Errorf("WhereTypeSiteVsite.PortChoice has unexpected type %T", x)
	}
	return nil
}

func _WhereTypeSiteVsite_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*WhereTypeSiteVsite)
	switch tag {
	case 1: // choice.site
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(WhereSite)
		err := b.DecodeMessage(msg)
		m.Choice = &WhereTypeSiteVsite_Site{msg}
		return true, err
	case 2: // choice.virtual_site
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(WhereVirtualSite)
		err := b.DecodeMessage(msg)
		m.Choice = &WhereTypeSiteVsite_VirtualSite{msg}
		return true, err
	case 5: // port_choice.use_default_port
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.PortChoice = &WhereTypeSiteVsite_UseDefaultPort{msg}
		return true, err
	case 6: // port_choice.port
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.PortChoice = &WhereTypeSiteVsite_Port{uint32(x)}
		return true, err
	default:
		return false, nil
	}
}

func _WhereTypeSiteVsite_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*WhereTypeSiteVsite)
	// choice
	switch x := m.Choice.(type) {
	case *WhereTypeSiteVsite_Site:
		s := proto.Size(x.Site)
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *WhereTypeSiteVsite_VirtualSite:
		s := proto.Size(x.VirtualSite)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	// port_choice
	switch x := m.PortChoice.(type) {
	case *WhereTypeSiteVsite_UseDefaultPort:
		s := proto.Size(x.UseDefaultPort)
		n += proto.SizeVarint(5<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *WhereTypeSiteVsite_Port:
		n += proto.SizeVarint(6<<3 | proto.WireVarint)
		n += proto.SizeVarint(uint64(x.Port))
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// AdvertisePublic
//
// x-displayName: "Advertise Public"
// This defines a way to advertise a load balancer on public. If optional public_ip is provided, it will only be advertised on RE sites where that public_ip is available
type AdvertisePublic struct {
	// Public IP
	//
	// x-displayName: "Public IP"
	// x-required
	// Use dedicated public ip as VIP instead of default public VIP
	//
	// Dedicated public ip are allocated by volterra on request
	PublicIp *ObjectRefType `protobuf:"bytes,1,opt,name=public_ip,json=publicIp" json:"public_ip,omitempty"`
}

func (m *AdvertisePublic) Reset()                    { *m = AdvertisePublic{} }
func (*AdvertisePublic) ProtoMessage()               {}
func (*AdvertisePublic) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{8} }

func (m *AdvertisePublic) GetPublicIp() *ObjectRefType {
	if m != nil {
		return m.PublicIp
	}
	return nil
}

// AdvertiseWhere
//
// x-displayName: "Advertise Custom"
// This defines a way to advertise a VIP on specific sites
type AdvertiseCustom struct {
	// Advertise Where
	//
	// x-displayName: "List of Sites to Advertise"
	// x-required
	// Where should this load balancer be available
	AdvertiseWhere []*WhereType `protobuf:"bytes,1,rep,name=advertise_where,json=advertiseWhere" json:"advertise_where,omitempty"`
}

func (m *AdvertiseCustom) Reset()                    { *m = AdvertiseCustom{} }
func (*AdvertiseCustom) ProtoMessage()               {}
func (*AdvertiseCustom) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{9} }

func (m *AdvertiseCustom) GetAdvertiseWhere() []*WhereType {
	if m != nil {
		return m.AdvertiseWhere
	}
	return nil
}

// AdvertiseSiteVsite
//
// x-displayName: "Advertise Site or Virtual Site"
// This defines a way to advertise a VIP on specific sites
type AdvertiseSiteVsite struct {
	// Advertise Where
	//
	// x-displayName: "List of Sites to Advertise"
	// x-required
	// Where should this load balancer be available
	AdvertiseWhere []*WhereTypeSiteVsite `protobuf:"bytes,1,rep,name=advertise_where,json=advertiseWhere" json:"advertise_where,omitempty"`
}

func (m *AdvertiseSiteVsite) Reset()                    { *m = AdvertiseSiteVsite{} }
func (*AdvertiseSiteVsite) ProtoMessage()               {}
func (*AdvertiseSiteVsite) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{10} }

func (m *AdvertiseSiteVsite) GetAdvertiseWhere() []*WhereTypeSiteVsite {
	if m != nil {
		return m.AdvertiseWhere
	}
	return nil
}

// CustomCiphers
//
// x-displayName: "Custom Ciphers"
// This defines TLS protocol config including min/max versions and allowed ciphers
type CustomCiphers struct {
	// minimum_protocol_version
	//
	// x-displayName: "Minimum TLS version"
	// Minimum TLS protocol version.
	MinVersion ves_io_schema4.TlsProtocol `protobuf:"varint,1,opt,name=min_version,json=minVersion,proto3,enum=ves.io.schema.TlsProtocol" json:"min_version,omitempty"`
	// maximum_protocol_version
	//
	// x-displayName: "Maximum TLS version"
	// Maximum TLS protocol version.
	MaxVersion ves_io_schema4.TlsProtocol `protobuf:"varint,2,opt,name=max_version,json=maxVersion,proto3,enum=ves.io.schema.TlsProtocol" json:"max_version,omitempty"`
	// cipher_suites
	//
	// x-displayName: "Cipher Suites"
	// x-required
	// The TLS listener will only support the specified cipher list.
	CipherSuites []string `protobuf:"bytes,3,rep,name=cipher_suites,json=cipherSuites" json:"cipher_suites,omitempty"`
}

func (m *CustomCiphers) Reset()                    { *m = CustomCiphers{} }
func (*CustomCiphers) ProtoMessage()               {}
func (*CustomCiphers) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{11} }

func (m *CustomCiphers) GetMinVersion() ves_io_schema4.TlsProtocol {
	if m != nil {
		return m.MinVersion
	}
	return ves_io_schema4.TLS_AUTO
}

func (m *CustomCiphers) GetMaxVersion() ves_io_schema4.TlsProtocol {
	if m != nil {
		return m.MaxVersion
	}
	return ves_io_schema4.TLS_AUTO
}

func (m *CustomCiphers) GetCipherSuites() []string {
	if m != nil {
		return m.CipherSuites
	}
	return nil
}

// TlsConfig
//
// x-displayName: "TLS Config"
// This defines various options to configure TLS configuration parameters
type TlsConfig struct {
	// Choose TLS config
	//
	// x-displayName: "Select TLS security"
	// x-required
	// Choice of security level in TLS config
	//
	// Types that are valid to be assigned to Choice:
	//	*TlsConfig_DefaultSecurity
	//	*TlsConfig_MediumSecurity
	//	*TlsConfig_LowSecurity
	//	*TlsConfig_CustomSecurity
	Choice isTlsConfig_Choice `protobuf_oneof:"choice"`
}

func (m *TlsConfig) Reset()                    { *m = TlsConfig{} }
func (*TlsConfig) ProtoMessage()               {}
func (*TlsConfig) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{12} }

type isTlsConfig_Choice interface {
	isTlsConfig_Choice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type TlsConfig_DefaultSecurity struct {
	DefaultSecurity *ves_io_schema4.Empty `protobuf:"bytes,1,opt,name=default_security,json=defaultSecurity,oneof"`
}
type TlsConfig_MediumSecurity struct {
	MediumSecurity *ves_io_schema4.Empty `protobuf:"bytes,2,opt,name=medium_security,json=mediumSecurity,oneof"`
}
type TlsConfig_LowSecurity struct {
	LowSecurity *ves_io_schema4.Empty `protobuf:"bytes,3,opt,name=low_security,json=lowSecurity,oneof"`
}
type TlsConfig_CustomSecurity struct {
	CustomSecurity *CustomCiphers `protobuf:"bytes,4,opt,name=custom_security,json=customSecurity,oneof"`
}

func (*TlsConfig_DefaultSecurity) isTlsConfig_Choice() {}
func (*TlsConfig_MediumSecurity) isTlsConfig_Choice()  {}
func (*TlsConfig_LowSecurity) isTlsConfig_Choice()     {}
func (*TlsConfig_CustomSecurity) isTlsConfig_Choice()  {}

func (m *TlsConfig) GetChoice() isTlsConfig_Choice {
	if m != nil {
		return m.Choice
	}
	return nil
}

func (m *TlsConfig) GetDefaultSecurity() *ves_io_schema4.Empty {
	if x, ok := m.GetChoice().(*TlsConfig_DefaultSecurity); ok {
		return x.DefaultSecurity
	}
	return nil
}

func (m *TlsConfig) GetMediumSecurity() *ves_io_schema4.Empty {
	if x, ok := m.GetChoice().(*TlsConfig_MediumSecurity); ok {
		return x.MediumSecurity
	}
	return nil
}

func (m *TlsConfig) GetLowSecurity() *ves_io_schema4.Empty {
	if x, ok := m.GetChoice().(*TlsConfig_LowSecurity); ok {
		return x.LowSecurity
	}
	return nil
}

func (m *TlsConfig) GetCustomSecurity() *CustomCiphers {
	if x, ok := m.GetChoice().(*TlsConfig_CustomSecurity); ok {
		return x.CustomSecurity
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*TlsConfig) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _TlsConfig_OneofMarshaler, _TlsConfig_OneofUnmarshaler, _TlsConfig_OneofSizer, []interface{}{
		(*TlsConfig_DefaultSecurity)(nil),
		(*TlsConfig_MediumSecurity)(nil),
		(*TlsConfig_LowSecurity)(nil),
		(*TlsConfig_CustomSecurity)(nil),
	}
}

func _TlsConfig_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*TlsConfig)
	// choice
	switch x := m.Choice.(type) {
	case *TlsConfig_DefaultSecurity:
		_ = b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.DefaultSecurity); err != nil {
			return err
		}
	case *TlsConfig_MediumSecurity:
		_ = b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.MediumSecurity); err != nil {
			return err
		}
	case *TlsConfig_LowSecurity:
		_ = b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.LowSecurity); err != nil {
			return err
		}
	case *TlsConfig_CustomSecurity:
		_ = b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.CustomSecurity); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("TlsConfig.Choice has unexpected type %T", x)
	}
	return nil
}

func _TlsConfig_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*TlsConfig)
	switch tag {
	case 1: // choice.default_security
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.Choice = &TlsConfig_DefaultSecurity{msg}
		return true, err
	case 2: // choice.medium_security
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.Choice = &TlsConfig_MediumSecurity{msg}
		return true, err
	case 3: // choice.low_security
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.Choice = &TlsConfig_LowSecurity{msg}
		return true, err
	case 4: // choice.custom_security
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(CustomCiphers)
		err := b.DecodeMessage(msg)
		m.Choice = &TlsConfig_CustomSecurity{msg}
		return true, err
	default:
		return false, nil
	}
}

func _TlsConfig_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*TlsConfig)
	// choice
	switch x := m.Choice.(type) {
	case *TlsConfig_DefaultSecurity:
		s := proto.Size(x.DefaultSecurity)
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *TlsConfig_MediumSecurity:
		s := proto.Size(x.MediumSecurity)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *TlsConfig_LowSecurity:
		s := proto.Size(x.LowSecurity)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *TlsConfig_CustomSecurity:
		s := proto.Size(x.CustomSecurity)
		n += proto.SizeVarint(4<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// OriginPoolWithWeight
//
// x-displayName: "Origin Pool with Weight"
// This defines a combination of origin pool with weight
type OriginPoolWithWeight struct {
	// Pool Choice
	//
	// x-displayName: "Select Origin Pool Method"
	// x-required
	// Select origin pool method, simple origin pool method or more flexible cluster object.
	//
	// Types that are valid to be assigned to PoolChoice:
	//	*OriginPoolWithWeight_Pool
	//	*OriginPoolWithWeight_Cluster
	PoolChoice isOriginPoolWithWeight_PoolChoice `protobuf_oneof:"pool_choice"`
	// Weight
	//
	// x-displayName: "Weight"
	// Weight of this origin pool, valid only with multiple origin pool. Value of 0 will disable the pool
	Weight uint32 `protobuf:"varint,2,opt,name=weight,proto3" json:"weight,omitempty"`
	// Origin Servers Subset
	//
	// x-displayName: "Origin Servers Subsets"
	// Upstream origin pool may be configured to divide its origin servers into subsets based on metadata
	// attached to the origin servers. Routes may then specify the metadata that a endpoint must match in
	// order to be selected by the load balancer
	//
	// For origin servers which are discovered in K8S or Consul cluster, the label of the service is merged with
	// endpoint's labels. In case of Consul, the label is derived from the "Tag" field.
	// For labels that are common between configured endpoint and discovered service, labels from discovered service
	// takes precedence.
	//
	// List of key-value pairs that will be used as matching metadata. Only those origin servers of
	// upstream origin pool which match this metadata will be selected for load balancing
	EndpointSubsets map[string]string `protobuf:"bytes,5,rep,name=endpoint_subsets,json=endpointSubsets" json:"endpoint_subsets,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *OriginPoolWithWeight) Reset()                    { *m = OriginPoolWithWeight{} }
func (*OriginPoolWithWeight) ProtoMessage()               {}
func (*OriginPoolWithWeight) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{13} }

type isOriginPoolWithWeight_PoolChoice interface {
	isOriginPoolWithWeight_PoolChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type OriginPoolWithWeight_Pool struct {
	Pool *ObjectRefType `protobuf:"bytes,1,opt,name=pool,oneof"`
}
type OriginPoolWithWeight_Cluster struct {
	Cluster *ObjectRefType `protobuf:"bytes,4,opt,name=cluster,oneof"`
}

func (*OriginPoolWithWeight_Pool) isOriginPoolWithWeight_PoolChoice()    {}
func (*OriginPoolWithWeight_Cluster) isOriginPoolWithWeight_PoolChoice() {}

func (m *OriginPoolWithWeight) GetPoolChoice() isOriginPoolWithWeight_PoolChoice {
	if m != nil {
		return m.PoolChoice
	}
	return nil
}

func (m *OriginPoolWithWeight) GetPool() *ObjectRefType {
	if x, ok := m.GetPoolChoice().(*OriginPoolWithWeight_Pool); ok {
		return x.Pool
	}
	return nil
}

func (m *OriginPoolWithWeight) GetCluster() *ObjectRefType {
	if x, ok := m.GetPoolChoice().(*OriginPoolWithWeight_Cluster); ok {
		return x.Cluster
	}
	return nil
}

func (m *OriginPoolWithWeight) GetWeight() uint32 {
	if m != nil {
		return m.Weight
	}
	return 0
}

func (m *OriginPoolWithWeight) GetEndpointSubsets() map[string]string {
	if m != nil {
		return m.EndpointSubsets
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*OriginPoolWithWeight) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _OriginPoolWithWeight_OneofMarshaler, _OriginPoolWithWeight_OneofUnmarshaler, _OriginPoolWithWeight_OneofSizer, []interface{}{
		(*OriginPoolWithWeight_Pool)(nil),
		(*OriginPoolWithWeight_Cluster)(nil),
	}
}

func _OriginPoolWithWeight_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*OriginPoolWithWeight)
	// pool_choice
	switch x := m.PoolChoice.(type) {
	case *OriginPoolWithWeight_Pool:
		_ = b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Pool); err != nil {
			return err
		}
	case *OriginPoolWithWeight_Cluster:
		_ = b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Cluster); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("OriginPoolWithWeight.PoolChoice has unexpected type %T", x)
	}
	return nil
}

func _OriginPoolWithWeight_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*OriginPoolWithWeight)
	switch tag {
	case 1: // pool_choice.pool
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ObjectRefType)
		err := b.DecodeMessage(msg)
		m.PoolChoice = &OriginPoolWithWeight_Pool{msg}
		return true, err
	case 4: // pool_choice.cluster
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ObjectRefType)
		err := b.DecodeMessage(msg)
		m.PoolChoice = &OriginPoolWithWeight_Cluster{msg}
		return true, err
	default:
		return false, nil
	}
}

func _OriginPoolWithWeight_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*OriginPoolWithWeight)
	// pool_choice
	switch x := m.PoolChoice.(type) {
	case *OriginPoolWithWeight_Pool:
		s := proto.Size(x.Pool)
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *OriginPoolWithWeight_Cluster:
		s := proto.Size(x.Cluster)
		n += proto.SizeVarint(4<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// ipv4 prefix list
//
// x-displayName: "IPv4 Prefix List"
// x-example: "192.168.20.0/24"
// List of IPv4 prefixes that represent an endpoint
type PrefixStringListType struct {
	// ipv4 prefix list
	//
	// x-displayName: "IPv4 Prefix List"
	// x-example: "192.168.20.0/24"
	// x-required
	// List of IPv4 prefixes that represent an endpoint
	Prefixes []string `protobuf:"bytes,1,rep,name=prefixes" json:"prefixes,omitempty"`
}

func (m *PrefixStringListType) Reset()                    { *m = PrefixStringListType{} }
func (*PrefixStringListType) ProtoMessage()               {}
func (*PrefixStringListType) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{14} }

func (m *PrefixStringListType) GetPrefixes() []string {
	if m != nil {
		return m.Prefixes
	}
	return nil
}

// Global Network
//
// x-displayName: "Global Network"
// Global network reference for direct connection
type GlobalConnectorType struct {
	// Virtual Network
	//
	// x-displayName: "Global Virtual Network"
	// x-required
	// Select Virtual Network of Global Type
	GlobalVn *ObjectRefType `protobuf:"bytes,1,opt,name=global_vn,json=globalVn" json:"global_vn,omitempty"`
}

func (m *GlobalConnectorType) Reset()                    { *m = GlobalConnectorType{} }
func (*GlobalConnectorType) ProtoMessage()               {}
func (*GlobalConnectorType) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{15} }

func (m *GlobalConnectorType) GetGlobalVn() *ObjectRefType {
	if m != nil {
		return m.GlobalVn
	}
	return nil
}

func init() {
	proto.RegisterType((*ObjectRefType)(nil), "ves.io.schema.views.ObjectRefType")
	golang_proto.RegisterType((*ObjectRefType)(nil), "ves.io.schema.views.ObjectRefType")
	proto.RegisterType((*SiteLocator)(nil), "ves.io.schema.views.SiteLocator")
	golang_proto.RegisterType((*SiteLocator)(nil), "ves.io.schema.views.SiteLocator")
	proto.RegisterType((*WhereVirtualNetwork)(nil), "ves.io.schema.views.WhereVirtualNetwork")
	golang_proto.RegisterType((*WhereVirtualNetwork)(nil), "ves.io.schema.views.WhereVirtualNetwork")
	proto.RegisterType((*WhereSite)(nil), "ves.io.schema.views.WhereSite")
	golang_proto.RegisterType((*WhereSite)(nil), "ves.io.schema.views.WhereSite")
	proto.RegisterType((*WhereVirtualSite)(nil), "ves.io.schema.views.WhereVirtualSite")
	golang_proto.RegisterType((*WhereVirtualSite)(nil), "ves.io.schema.views.WhereVirtualSite")
	proto.RegisterType((*WhereVK8SService)(nil), "ves.io.schema.views.WhereVK8SService")
	golang_proto.RegisterType((*WhereVK8SService)(nil), "ves.io.schema.views.WhereVK8SService")
	proto.RegisterType((*WhereType)(nil), "ves.io.schema.views.WhereType")
	golang_proto.RegisterType((*WhereType)(nil), "ves.io.schema.views.WhereType")
	proto.RegisterType((*WhereTypeSiteVsite)(nil), "ves.io.schema.views.WhereTypeSiteVsite")
	golang_proto.RegisterType((*WhereTypeSiteVsite)(nil), "ves.io.schema.views.WhereTypeSiteVsite")
	proto.RegisterType((*AdvertisePublic)(nil), "ves.io.schema.views.AdvertisePublic")
	golang_proto.RegisterType((*AdvertisePublic)(nil), "ves.io.schema.views.AdvertisePublic")
	proto.RegisterType((*AdvertiseCustom)(nil), "ves.io.schema.views.AdvertiseCustom")
	golang_proto.RegisterType((*AdvertiseCustom)(nil), "ves.io.schema.views.AdvertiseCustom")
	proto.RegisterType((*AdvertiseSiteVsite)(nil), "ves.io.schema.views.AdvertiseSiteVsite")
	golang_proto.RegisterType((*AdvertiseSiteVsite)(nil), "ves.io.schema.views.AdvertiseSiteVsite")
	proto.RegisterType((*CustomCiphers)(nil), "ves.io.schema.views.CustomCiphers")
	golang_proto.RegisterType((*CustomCiphers)(nil), "ves.io.schema.views.CustomCiphers")
	proto.RegisterType((*TlsConfig)(nil), "ves.io.schema.views.TlsConfig")
	golang_proto.RegisterType((*TlsConfig)(nil), "ves.io.schema.views.TlsConfig")
	proto.RegisterType((*OriginPoolWithWeight)(nil), "ves.io.schema.views.OriginPoolWithWeight")
	golang_proto.RegisterType((*OriginPoolWithWeight)(nil), "ves.io.schema.views.OriginPoolWithWeight")
	proto.RegisterType((*PrefixStringListType)(nil), "ves.io.schema.views.PrefixStringListType")
	golang_proto.RegisterType((*PrefixStringListType)(nil), "ves.io.schema.views.PrefixStringListType")
	proto.RegisterType((*GlobalConnectorType)(nil), "ves.io.schema.views.GlobalConnectorType")
	golang_proto.RegisterType((*GlobalConnectorType)(nil), "ves.io.schema.views.GlobalConnectorType")
	proto.RegisterEnum("ves.io.schema.views.SiteNetwork", SiteNetwork_name, SiteNetwork_value)
	golang_proto.RegisterEnum("ves.io.schema.views.SiteNetwork", SiteNetwork_name, SiteNetwork_value)
}
func (x SiteNetwork) String() string {
	s, ok := SiteNetwork_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *ObjectRefType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ObjectRefType)
	if !ok {
		that2, ok := that.(ObjectRefType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Tenant != that1.Tenant {
		return false
	}
	if this.Namespace != that1.Namespace {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	return true
}
func (this *SiteLocator) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SiteLocator)
	if !ok {
		that2, ok := that.(SiteLocator)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.Choice == nil {
		if this.Choice != nil {
			return false
		}
	} else if this.Choice == nil {
		return false
	} else if !this.Choice.Equal(that1.Choice) {
		return false
	}
	return true
}
func (this *SiteLocator_Site) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SiteLocator_Site)
	if !ok {
		that2, ok := that.(SiteLocator_Site)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Site.Equal(that1.Site) {
		return false
	}
	return true
}
func (this *SiteLocator_VirtualSite) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SiteLocator_VirtualSite)
	if !ok {
		that2, ok := that.(SiteLocator_VirtualSite)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.VirtualSite.Equal(that1.VirtualSite) {
		return false
	}
	return true
}
func (this *WhereVirtualNetwork) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*WhereVirtualNetwork)
	if !ok {
		that2, ok := that.(WhereVirtualNetwork)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.VirtualNetwork.Equal(that1.VirtualNetwork) {
		return false
	}
	if that1.VipChoice == nil {
		if this.VipChoice != nil {
			return false
		}
	} else if this.VipChoice == nil {
		return false
	} else if !this.VipChoice.Equal(that1.VipChoice) {
		return false
	}
	return true
}
func (this *WhereVirtualNetwork_DefaultVip) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*WhereVirtualNetwork_DefaultVip)
	if !ok {
		that2, ok := that.(WhereVirtualNetwork_DefaultVip)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DefaultVip.Equal(that1.DefaultVip) {
		return false
	}
	return true
}
func (this *WhereVirtualNetwork_SpecificVip) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*WhereVirtualNetwork_SpecificVip)
	if !ok {
		that2, ok := that.(WhereVirtualNetwork_SpecificVip)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.SpecificVip != that1.SpecificVip {
		return false
	}
	return true
}
func (this *WhereSite) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*WhereSite)
	if !ok {
		that2, ok := that.(WhereSite)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Network != that1.Network {
		return false
	}
	if !this.Site.Equal(that1.Site) {
		return false
	}
	if this.Ip != that1.Ip {
		return false
	}
	return true
}
func (this *WhereVirtualSite) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*WhereVirtualSite)
	if !ok {
		that2, ok := that.(WhereVirtualSite)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Network != that1.Network {
		return false
	}
	if !this.VirtualSite.Equal(that1.VirtualSite) {
		return false
	}
	return true
}
func (this *WhereVK8SService) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*WhereVK8SService)
	if !ok {
		that2, ok := that.(WhereVK8SService)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.Choice == nil {
		if this.Choice != nil {
			return false
		}
	} else if this.Choice == nil {
		return false
	} else if !this.Choice.Equal(that1.Choice) {
		return false
	}
	return true
}
func (this *WhereVK8SService_Site) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*WhereVK8SService_Site)
	if !ok {
		that2, ok := that.(WhereVK8SService_Site)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Site.Equal(that1.Site) {
		return false
	}
	return true
}
func (this *WhereVK8SService_VirtualSite) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*WhereVK8SService_VirtualSite)
	if !ok {
		that2, ok := that.(WhereVK8SService_VirtualSite)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.VirtualSite.Equal(that1.VirtualSite) {
		return false
	}
	return true
}
func (this *WhereType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*WhereType)
	if !ok {
		that2, ok := that.(WhereType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.Choice == nil {
		if this.Choice != nil {
			return false
		}
	} else if this.Choice == nil {
		return false
	} else if !this.Choice.Equal(that1.Choice) {
		return false
	}
	if that1.PortChoice == nil {
		if this.PortChoice != nil {
			return false
		}
	} else if this.PortChoice == nil {
		return false
	} else if !this.PortChoice.Equal(that1.PortChoice) {
		return false
	}
	return true
}
func (this *WhereType_Site) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*WhereType_Site)
	if !ok {
		that2, ok := that.(WhereType_Site)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Site.Equal(that1.Site) {
		return false
	}
	return true
}
func (this *WhereType_VirtualSite) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*WhereType_VirtualSite)
	if !ok {
		that2, ok := that.(WhereType_VirtualSite)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.VirtualSite.Equal(that1.VirtualSite) {
		return false
	}
	return true
}
func (this *WhereType_Vk8SService) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*WhereType_Vk8SService)
	if !ok {
		that2, ok := that.(WhereType_Vk8SService)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Vk8SService.Equal(that1.Vk8SService) {
		return false
	}
	return true
}
func (this *WhereType_VirtualNetwork) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*WhereType_VirtualNetwork)
	if !ok {
		that2, ok := that.(WhereType_VirtualNetwork)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.VirtualNetwork.Equal(that1.VirtualNetwork) {
		return false
	}
	return true
}
func (this *WhereType_UseDefaultPort) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*WhereType_UseDefaultPort)
	if !ok {
		that2, ok := that.(WhereType_UseDefaultPort)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.UseDefaultPort.Equal(that1.UseDefaultPort) {
		return false
	}
	return true
}
func (this *WhereType_Port) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*WhereType_Port)
	if !ok {
		that2, ok := that.(WhereType_Port)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Port != that1.Port {
		return false
	}
	return true
}
func (this *WhereTypeSiteVsite) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*WhereTypeSiteVsite)
	if !ok {
		that2, ok := that.(WhereTypeSiteVsite)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.Choice == nil {
		if this.Choice != nil {
			return false
		}
	} else if this.Choice == nil {
		return false
	} else if !this.Choice.Equal(that1.Choice) {
		return false
	}
	if that1.PortChoice == nil {
		if this.PortChoice != nil {
			return false
		}
	} else if this.PortChoice == nil {
		return false
	} else if !this.PortChoice.Equal(that1.PortChoice) {
		return false
	}
	return true
}
func (this *WhereTypeSiteVsite_Site) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*WhereTypeSiteVsite_Site)
	if !ok {
		that2, ok := that.(WhereTypeSiteVsite_Site)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Site.Equal(that1.Site) {
		return false
	}
	return true
}
func (this *WhereTypeSiteVsite_VirtualSite) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*WhereTypeSiteVsite_VirtualSite)
	if !ok {
		that2, ok := that.(WhereTypeSiteVsite_VirtualSite)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.VirtualSite.Equal(that1.VirtualSite) {
		return false
	}
	return true
}
func (this *WhereTypeSiteVsite_UseDefaultPort) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*WhereTypeSiteVsite_UseDefaultPort)
	if !ok {
		that2, ok := that.(WhereTypeSiteVsite_UseDefaultPort)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.UseDefaultPort.Equal(that1.UseDefaultPort) {
		return false
	}
	return true
}
func (this *WhereTypeSiteVsite_Port) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*WhereTypeSiteVsite_Port)
	if !ok {
		that2, ok := that.(WhereTypeSiteVsite_Port)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Port != that1.Port {
		return false
	}
	return true
}
func (this *AdvertisePublic) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AdvertisePublic)
	if !ok {
		that2, ok := that.(AdvertisePublic)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.PublicIp.Equal(that1.PublicIp) {
		return false
	}
	return true
}
func (this *AdvertiseCustom) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AdvertiseCustom)
	if !ok {
		that2, ok := that.(AdvertiseCustom)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.AdvertiseWhere) != len(that1.AdvertiseWhere) {
		return false
	}
	for i := range this.AdvertiseWhere {
		if !this.AdvertiseWhere[i].Equal(that1.AdvertiseWhere[i]) {
			return false
		}
	}
	return true
}
func (this *AdvertiseSiteVsite) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AdvertiseSiteVsite)
	if !ok {
		that2, ok := that.(AdvertiseSiteVsite)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.AdvertiseWhere) != len(that1.AdvertiseWhere) {
		return false
	}
	for i := range this.AdvertiseWhere {
		if !this.AdvertiseWhere[i].Equal(that1.AdvertiseWhere[i]) {
			return false
		}
	}
	return true
}
func (this *CustomCiphers) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CustomCiphers)
	if !ok {
		that2, ok := that.(CustomCiphers)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.MinVersion != that1.MinVersion {
		return false
	}
	if this.MaxVersion != that1.MaxVersion {
		return false
	}
	if len(this.CipherSuites) != len(that1.CipherSuites) {
		return false
	}
	for i := range this.CipherSuites {
		if this.CipherSuites[i] != that1.CipherSuites[i] {
			return false
		}
	}
	return true
}
func (this *TlsConfig) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TlsConfig)
	if !ok {
		that2, ok := that.(TlsConfig)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.Choice == nil {
		if this.Choice != nil {
			return false
		}
	} else if this.Choice == nil {
		return false
	} else if !this.Choice.Equal(that1.Choice) {
		return false
	}
	return true
}
func (this *TlsConfig_DefaultSecurity) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TlsConfig_DefaultSecurity)
	if !ok {
		that2, ok := that.(TlsConfig_DefaultSecurity)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DefaultSecurity.Equal(that1.DefaultSecurity) {
		return false
	}
	return true
}
func (this *TlsConfig_MediumSecurity) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TlsConfig_MediumSecurity)
	if !ok {
		that2, ok := that.(TlsConfig_MediumSecurity)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.MediumSecurity.Equal(that1.MediumSecurity) {
		return false
	}
	return true
}
func (this *TlsConfig_LowSecurity) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TlsConfig_LowSecurity)
	if !ok {
		that2, ok := that.(TlsConfig_LowSecurity)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.LowSecurity.Equal(that1.LowSecurity) {
		return false
	}
	return true
}
func (this *TlsConfig_CustomSecurity) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TlsConfig_CustomSecurity)
	if !ok {
		that2, ok := that.(TlsConfig_CustomSecurity)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.CustomSecurity.Equal(that1.CustomSecurity) {
		return false
	}
	return true
}
func (this *OriginPoolWithWeight) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*OriginPoolWithWeight)
	if !ok {
		that2, ok := that.(OriginPoolWithWeight)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.PoolChoice == nil {
		if this.PoolChoice != nil {
			return false
		}
	} else if this.PoolChoice == nil {
		return false
	} else if !this.PoolChoice.Equal(that1.PoolChoice) {
		return false
	}
	if this.Weight != that1.Weight {
		return false
	}
	if len(this.EndpointSubsets) != len(that1.EndpointSubsets) {
		return false
	}
	for i := range this.EndpointSubsets {
		if this.EndpointSubsets[i] != that1.EndpointSubsets[i] {
			return false
		}
	}
	return true
}
func (this *OriginPoolWithWeight_Pool) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*OriginPoolWithWeight_Pool)
	if !ok {
		that2, ok := that.(OriginPoolWithWeight_Pool)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Pool.Equal(that1.Pool) {
		return false
	}
	return true
}
func (this *OriginPoolWithWeight_Cluster) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*OriginPoolWithWeight_Cluster)
	if !ok {
		that2, ok := that.(OriginPoolWithWeight_Cluster)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Cluster.Equal(that1.Cluster) {
		return false
	}
	return true
}
func (this *PrefixStringListType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PrefixStringListType)
	if !ok {
		that2, ok := that.(PrefixStringListType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Prefixes) != len(that1.Prefixes) {
		return false
	}
	for i := range this.Prefixes {
		if this.Prefixes[i] != that1.Prefixes[i] {
			return false
		}
	}
	return true
}
func (this *GlobalConnectorType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalConnectorType)
	if !ok {
		that2, ok := that.(GlobalConnectorType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.GlobalVn.Equal(that1.GlobalVn) {
		return false
	}
	return true
}
func (this *ObjectRefType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&views.ObjectRefType{")
	s = append(s, "Tenant: "+fmt.Sprintf("%#v", this.Tenant)+",\n")
	s = append(s, "Namespace: "+fmt.Sprintf("%#v", this.Namespace)+",\n")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SiteLocator) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&views.SiteLocator{")
	if this.Choice != nil {
		s = append(s, "Choice: "+fmt.Sprintf("%#v", this.Choice)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SiteLocator_Site) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&views.SiteLocator_Site{` +
		`Site:` + fmt.Sprintf("%#v", this.Site) + `}`}, ", ")
	return s
}
func (this *SiteLocator_VirtualSite) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&views.SiteLocator_VirtualSite{` +
		`VirtualSite:` + fmt.Sprintf("%#v", this.VirtualSite) + `}`}, ", ")
	return s
}
func (this *WhereVirtualNetwork) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&views.WhereVirtualNetwork{")
	if this.VirtualNetwork != nil {
		s = append(s, "VirtualNetwork: "+fmt.Sprintf("%#v", this.VirtualNetwork)+",\n")
	}
	if this.VipChoice != nil {
		s = append(s, "VipChoice: "+fmt.Sprintf("%#v", this.VipChoice)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *WhereVirtualNetwork_DefaultVip) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&views.WhereVirtualNetwork_DefaultVip{` +
		`DefaultVip:` + fmt.Sprintf("%#v", this.DefaultVip) + `}`}, ", ")
	return s
}
func (this *WhereVirtualNetwork_SpecificVip) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&views.WhereVirtualNetwork_SpecificVip{` +
		`SpecificVip:` + fmt.Sprintf("%#v", this.SpecificVip) + `}`}, ", ")
	return s
}
func (this *WhereSite) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&views.WhereSite{")
	s = append(s, "Network: "+fmt.Sprintf("%#v", this.Network)+",\n")
	if this.Site != nil {
		s = append(s, "Site: "+fmt.Sprintf("%#v", this.Site)+",\n")
	}
	s = append(s, "Ip: "+fmt.Sprintf("%#v", this.Ip)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *WhereVirtualSite) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&views.WhereVirtualSite{")
	s = append(s, "Network: "+fmt.Sprintf("%#v", this.Network)+",\n")
	if this.VirtualSite != nil {
		s = append(s, "VirtualSite: "+fmt.Sprintf("%#v", this.VirtualSite)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *WhereVK8SService) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&views.WhereVK8SService{")
	if this.Choice != nil {
		s = append(s, "Choice: "+fmt.Sprintf("%#v", this.Choice)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *WhereVK8SService_Site) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&views.WhereVK8SService_Site{` +
		`Site:` + fmt.Sprintf("%#v", this.Site) + `}`}, ", ")
	return s
}
func (this *WhereVK8SService_VirtualSite) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&views.WhereVK8SService_VirtualSite{` +
		`VirtualSite:` + fmt.Sprintf("%#v", this.VirtualSite) + `}`}, ", ")
	return s
}
func (this *WhereType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&views.WhereType{")
	if this.Choice != nil {
		s = append(s, "Choice: "+fmt.Sprintf("%#v", this.Choice)+",\n")
	}
	if this.PortChoice != nil {
		s = append(s, "PortChoice: "+fmt.Sprintf("%#v", this.PortChoice)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *WhereType_Site) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&views.WhereType_Site{` +
		`Site:` + fmt.Sprintf("%#v", this.Site) + `}`}, ", ")
	return s
}
func (this *WhereType_VirtualSite) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&views.WhereType_VirtualSite{` +
		`VirtualSite:` + fmt.Sprintf("%#v", this.VirtualSite) + `}`}, ", ")
	return s
}
func (this *WhereType_Vk8SService) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&views.WhereType_Vk8SService{` +
		`Vk8SService:` + fmt.Sprintf("%#v", this.Vk8SService) + `}`}, ", ")
	return s
}
func (this *WhereType_VirtualNetwork) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&views.WhereType_VirtualNetwork{` +
		`VirtualNetwork:` + fmt.Sprintf("%#v", this.VirtualNetwork) + `}`}, ", ")
	return s
}
func (this *WhereType_UseDefaultPort) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&views.WhereType_UseDefaultPort{` +
		`UseDefaultPort:` + fmt.Sprintf("%#v", this.UseDefaultPort) + `}`}, ", ")
	return s
}
func (this *WhereType_Port) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&views.WhereType_Port{` +
		`Port:` + fmt.Sprintf("%#v", this.Port) + `}`}, ", ")
	return s
}
func (this *WhereTypeSiteVsite) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&views.WhereTypeSiteVsite{")
	if this.Choice != nil {
		s = append(s, "Choice: "+fmt.Sprintf("%#v", this.Choice)+",\n")
	}
	if this.PortChoice != nil {
		s = append(s, "PortChoice: "+fmt.Sprintf("%#v", this.PortChoice)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *WhereTypeSiteVsite_Site) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&views.WhereTypeSiteVsite_Site{` +
		`Site:` + fmt.Sprintf("%#v", this.Site) + `}`}, ", ")
	return s
}
func (this *WhereTypeSiteVsite_VirtualSite) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&views.WhereTypeSiteVsite_VirtualSite{` +
		`VirtualSite:` + fmt.Sprintf("%#v", this.VirtualSite) + `}`}, ", ")
	return s
}
func (this *WhereTypeSiteVsite_UseDefaultPort) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&views.WhereTypeSiteVsite_UseDefaultPort{` +
		`UseDefaultPort:` + fmt.Sprintf("%#v", this.UseDefaultPort) + `}`}, ", ")
	return s
}
func (this *WhereTypeSiteVsite_Port) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&views.WhereTypeSiteVsite_Port{` +
		`Port:` + fmt.Sprintf("%#v", this.Port) + `}`}, ", ")
	return s
}
func (this *AdvertisePublic) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&views.AdvertisePublic{")
	if this.PublicIp != nil {
		s = append(s, "PublicIp: "+fmt.Sprintf("%#v", this.PublicIp)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AdvertiseCustom) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&views.AdvertiseCustom{")
	if this.AdvertiseWhere != nil {
		s = append(s, "AdvertiseWhere: "+fmt.Sprintf("%#v", this.AdvertiseWhere)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AdvertiseSiteVsite) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&views.AdvertiseSiteVsite{")
	if this.AdvertiseWhere != nil {
		s = append(s, "AdvertiseWhere: "+fmt.Sprintf("%#v", this.AdvertiseWhere)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CustomCiphers) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&views.CustomCiphers{")
	s = append(s, "MinVersion: "+fmt.Sprintf("%#v", this.MinVersion)+",\n")
	s = append(s, "MaxVersion: "+fmt.Sprintf("%#v", this.MaxVersion)+",\n")
	s = append(s, "CipherSuites: "+fmt.Sprintf("%#v", this.CipherSuites)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TlsConfig) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&views.TlsConfig{")
	if this.Choice != nil {
		s = append(s, "Choice: "+fmt.Sprintf("%#v", this.Choice)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TlsConfig_DefaultSecurity) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&views.TlsConfig_DefaultSecurity{` +
		`DefaultSecurity:` + fmt.Sprintf("%#v", this.DefaultSecurity) + `}`}, ", ")
	return s
}
func (this *TlsConfig_MediumSecurity) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&views.TlsConfig_MediumSecurity{` +
		`MediumSecurity:` + fmt.Sprintf("%#v", this.MediumSecurity) + `}`}, ", ")
	return s
}
func (this *TlsConfig_LowSecurity) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&views.TlsConfig_LowSecurity{` +
		`LowSecurity:` + fmt.Sprintf("%#v", this.LowSecurity) + `}`}, ", ")
	return s
}
func (this *TlsConfig_CustomSecurity) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&views.TlsConfig_CustomSecurity{` +
		`CustomSecurity:` + fmt.Sprintf("%#v", this.CustomSecurity) + `}`}, ", ")
	return s
}
func (this *OriginPoolWithWeight) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&views.OriginPoolWithWeight{")
	if this.PoolChoice != nil {
		s = append(s, "PoolChoice: "+fmt.Sprintf("%#v", this.PoolChoice)+",\n")
	}
	s = append(s, "Weight: "+fmt.Sprintf("%#v", this.Weight)+",\n")
	keysForEndpointSubsets := make([]string, 0, len(this.EndpointSubsets))
	for k, _ := range this.EndpointSubsets {
		keysForEndpointSubsets = append(keysForEndpointSubsets, k)
	}
	sortkeys.Strings(keysForEndpointSubsets)
	mapStringForEndpointSubsets := "map[string]string{"
	for _, k := range keysForEndpointSubsets {
		mapStringForEndpointSubsets += fmt.Sprintf("%#v: %#v,", k, this.EndpointSubsets[k])
	}
	mapStringForEndpointSubsets += "}"
	if this.EndpointSubsets != nil {
		s = append(s, "EndpointSubsets: "+mapStringForEndpointSubsets+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *OriginPoolWithWeight_Pool) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&views.OriginPoolWithWeight_Pool{` +
		`Pool:` + fmt.Sprintf("%#v", this.Pool) + `}`}, ", ")
	return s
}
func (this *OriginPoolWithWeight_Cluster) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&views.OriginPoolWithWeight_Cluster{` +
		`Cluster:` + fmt.Sprintf("%#v", this.Cluster) + `}`}, ", ")
	return s
}
func (this *PrefixStringListType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&views.PrefixStringListType{")
	s = append(s, "Prefixes: "+fmt.Sprintf("%#v", this.Prefixes)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GlobalConnectorType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&views.GlobalConnectorType{")
	if this.GlobalVn != nil {
		s = append(s, "GlobalVn: "+fmt.Sprintf("%#v", this.GlobalVn)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringTypes(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *ObjectRefType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ObjectRefType) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Tenant) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Tenant)))
		i += copy(dAtA[i:], m.Tenant)
	}
	if len(m.Namespace) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Namespace)))
		i += copy(dAtA[i:], m.Namespace)
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	return i, nil
}

func (m *SiteLocator) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SiteLocator) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Choice != nil {
		nn1, err := m.Choice.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn1
	}
	return i, nil
}

func (m *SiteLocator_Site) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Site != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.Site.Size()))
		n2, err := m.Site.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	return i, nil
}
func (m *SiteLocator_VirtualSite) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.VirtualSite != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.VirtualSite.Size()))
		n3, err := m.VirtualSite.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	return i, nil
}
func (m *WhereVirtualNetwork) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WhereVirtualNetwork) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.VirtualNetwork != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.VirtualNetwork.Size()))
		n4, err := m.VirtualNetwork.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	if m.VipChoice != nil {
		nn5, err := m.VipChoice.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn5
	}
	return i, nil
}

func (m *WhereVirtualNetwork_DefaultVip) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.DefaultVip != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.DefaultVip.Size()))
		n6, err := m.DefaultVip.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	return i, nil
}
func (m *WhereVirtualNetwork_SpecificVip) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x22
	i++
	i = encodeVarintTypes(dAtA, i, uint64(len(m.SpecificVip)))
	i += copy(dAtA[i:], m.SpecificVip)
	return i, nil
}
func (m *WhereSite) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WhereSite) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Network != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.Network))
	}
	if m.Site != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.Site.Size()))
		n7, err := m.Site.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	if len(m.Ip) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Ip)))
		i += copy(dAtA[i:], m.Ip)
	}
	return i, nil
}

func (m *WhereVirtualSite) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WhereVirtualSite) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Network != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.Network))
	}
	if m.VirtualSite != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.VirtualSite.Size()))
		n8, err := m.VirtualSite.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n8
	}
	return i, nil
}

func (m *WhereVK8SService) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WhereVK8SService) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Choice != nil {
		nn9, err := m.Choice.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn9
	}
	return i, nil
}

func (m *WhereVK8SService_Site) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Site != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.Site.Size()))
		n10, err := m.Site.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n10
	}
	return i, nil
}
func (m *WhereVK8SService_VirtualSite) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.VirtualSite != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.VirtualSite.Size()))
		n11, err := m.VirtualSite.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n11
	}
	return i, nil
}
func (m *WhereType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WhereType) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Choice != nil {
		nn12, err := m.Choice.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn12
	}
	if m.PortChoice != nil {
		nn13, err := m.PortChoice.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn13
	}
	return i, nil
}

func (m *WhereType_Site) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Site != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.Site.Size()))
		n14, err := m.Site.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n14
	}
	return i, nil
}
func (m *WhereType_VirtualSite) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.VirtualSite != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.VirtualSite.Size()))
		n15, err := m.VirtualSite.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n15
	}
	return i, nil
}
func (m *WhereType_Vk8SService) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Vk8SService != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.Vk8SService.Size()))
		n16, err := m.Vk8SService.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n16
	}
	return i, nil
}
func (m *WhereType_UseDefaultPort) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.UseDefaultPort != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.UseDefaultPort.Size()))
		n17, err := m.UseDefaultPort.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n17
	}
	return i, nil
}
func (m *WhereType_Port) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x38
	i++
	i = encodeVarintTypes(dAtA, i, uint64(m.Port))
	return i, nil
}
func (m *WhereType_VirtualNetwork) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.VirtualNetwork != nil {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.VirtualNetwork.Size()))
		n18, err := m.VirtualNetwork.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n18
	}
	return i, nil
}
func (m *WhereTypeSiteVsite) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WhereTypeSiteVsite) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Choice != nil {
		nn19, err := m.Choice.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn19
	}
	if m.PortChoice != nil {
		nn20, err := m.PortChoice.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn20
	}
	return i, nil
}

func (m *WhereTypeSiteVsite_Site) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Site != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.Site.Size()))
		n21, err := m.Site.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n21
	}
	return i, nil
}
func (m *WhereTypeSiteVsite_VirtualSite) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.VirtualSite != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.VirtualSite.Size()))
		n22, err := m.VirtualSite.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n22
	}
	return i, nil
}
func (m *WhereTypeSiteVsite_UseDefaultPort) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.UseDefaultPort != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.UseDefaultPort.Size()))
		n23, err := m.UseDefaultPort.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n23
	}
	return i, nil
}
func (m *WhereTypeSiteVsite_Port) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x30
	i++
	i = encodeVarintTypes(dAtA, i, uint64(m.Port))
	return i, nil
}
func (m *AdvertisePublic) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AdvertisePublic) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.PublicIp != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.PublicIp.Size()))
		n24, err := m.PublicIp.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n24
	}
	return i, nil
}

func (m *AdvertiseCustom) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AdvertiseCustom) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.AdvertiseWhere) > 0 {
		for _, msg := range m.AdvertiseWhere {
			dAtA[i] = 0xa
			i++
			i = encodeVarintTypes(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *AdvertiseSiteVsite) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AdvertiseSiteVsite) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.AdvertiseWhere) > 0 {
		for _, msg := range m.AdvertiseWhere {
			dAtA[i] = 0xa
			i++
			i = encodeVarintTypes(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *CustomCiphers) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CustomCiphers) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.MinVersion != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.MinVersion))
	}
	if m.MaxVersion != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.MaxVersion))
	}
	if len(m.CipherSuites) > 0 {
		for _, s := range m.CipherSuites {
			dAtA[i] = 0x1a
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	return i, nil
}

func (m *TlsConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TlsConfig) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Choice != nil {
		nn25, err := m.Choice.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn25
	}
	return i, nil
}

func (m *TlsConfig_DefaultSecurity) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.DefaultSecurity != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.DefaultSecurity.Size()))
		n26, err := m.DefaultSecurity.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n26
	}
	return i, nil
}
func (m *TlsConfig_MediumSecurity) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.MediumSecurity != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.MediumSecurity.Size()))
		n27, err := m.MediumSecurity.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n27
	}
	return i, nil
}
func (m *TlsConfig_LowSecurity) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.LowSecurity != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.LowSecurity.Size()))
		n28, err := m.LowSecurity.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n28
	}
	return i, nil
}
func (m *TlsConfig_CustomSecurity) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.CustomSecurity != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.CustomSecurity.Size()))
		n29, err := m.CustomSecurity.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n29
	}
	return i, nil
}
func (m *OriginPoolWithWeight) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OriginPoolWithWeight) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.PoolChoice != nil {
		nn30, err := m.PoolChoice.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn30
	}
	if m.Weight != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.Weight))
	}
	if len(m.EndpointSubsets) > 0 {
		keysForEndpointSubsets := make([]string, 0, len(m.EndpointSubsets))
		for k, _ := range m.EndpointSubsets {
			keysForEndpointSubsets = append(keysForEndpointSubsets, string(k))
		}
		sortkeys.Strings(keysForEndpointSubsets)
		for _, k := range keysForEndpointSubsets {
			dAtA[i] = 0x2a
			i++
			v := m.EndpointSubsets[string(k)]
			mapSize := 1 + len(k) + sovTypes(uint64(len(k))) + 1 + len(v) + sovTypes(uint64(len(v)))
			i = encodeVarintTypes(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintTypes(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			dAtA[i] = 0x12
			i++
			i = encodeVarintTypes(dAtA, i, uint64(len(v)))
			i += copy(dAtA[i:], v)
		}
	}
	return i, nil
}

func (m *OriginPoolWithWeight_Pool) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Pool != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.Pool.Size()))
		n31, err := m.Pool.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n31
	}
	return i, nil
}
func (m *OriginPoolWithWeight_Cluster) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Cluster != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.Cluster.Size()))
		n32, err := m.Cluster.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n32
	}
	return i, nil
}
func (m *PrefixStringListType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PrefixStringListType) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Prefixes) > 0 {
		for _, s := range m.Prefixes {
			dAtA[i] = 0xa
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	return i, nil
}

func (m *GlobalConnectorType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GlobalConnectorType) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.GlobalVn != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.GlobalVn.Size()))
		n33, err := m.GlobalVn.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n33
	}
	return i, nil
}

func encodeVarintTypes(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *ObjectRefType) Size() (n int) {
	var l int
	_ = l
	l = len(m.Tenant)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *SiteLocator) Size() (n int) {
	var l int
	_ = l
	if m.Choice != nil {
		n += m.Choice.Size()
	}
	return n
}

func (m *SiteLocator_Site) Size() (n int) {
	var l int
	_ = l
	if m.Site != nil {
		l = m.Site.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *SiteLocator_VirtualSite) Size() (n int) {
	var l int
	_ = l
	if m.VirtualSite != nil {
		l = m.VirtualSite.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *WhereVirtualNetwork) Size() (n int) {
	var l int
	_ = l
	if m.VirtualNetwork != nil {
		l = m.VirtualNetwork.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.VipChoice != nil {
		n += m.VipChoice.Size()
	}
	return n
}

func (m *WhereVirtualNetwork_DefaultVip) Size() (n int) {
	var l int
	_ = l
	if m.DefaultVip != nil {
		l = m.DefaultVip.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *WhereVirtualNetwork_SpecificVip) Size() (n int) {
	var l int
	_ = l
	l = len(m.SpecificVip)
	n += 1 + l + sovTypes(uint64(l))
	return n
}
func (m *WhereSite) Size() (n int) {
	var l int
	_ = l
	if m.Network != 0 {
		n += 1 + sovTypes(uint64(m.Network))
	}
	if m.Site != nil {
		l = m.Site.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.Ip)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *WhereVirtualSite) Size() (n int) {
	var l int
	_ = l
	if m.Network != 0 {
		n += 1 + sovTypes(uint64(m.Network))
	}
	if m.VirtualSite != nil {
		l = m.VirtualSite.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *WhereVK8SService) Size() (n int) {
	var l int
	_ = l
	if m.Choice != nil {
		n += m.Choice.Size()
	}
	return n
}

func (m *WhereVK8SService_Site) Size() (n int) {
	var l int
	_ = l
	if m.Site != nil {
		l = m.Site.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *WhereVK8SService_VirtualSite) Size() (n int) {
	var l int
	_ = l
	if m.VirtualSite != nil {
		l = m.VirtualSite.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *WhereType) Size() (n int) {
	var l int
	_ = l
	if m.Choice != nil {
		n += m.Choice.Size()
	}
	if m.PortChoice != nil {
		n += m.PortChoice.Size()
	}
	return n
}

func (m *WhereType_Site) Size() (n int) {
	var l int
	_ = l
	if m.Site != nil {
		l = m.Site.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *WhereType_VirtualSite) Size() (n int) {
	var l int
	_ = l
	if m.VirtualSite != nil {
		l = m.VirtualSite.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *WhereType_Vk8SService) Size() (n int) {
	var l int
	_ = l
	if m.Vk8SService != nil {
		l = m.Vk8SService.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *WhereType_UseDefaultPort) Size() (n int) {
	var l int
	_ = l
	if m.UseDefaultPort != nil {
		l = m.UseDefaultPort.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *WhereType_Port) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovTypes(uint64(m.Port))
	return n
}
func (m *WhereType_VirtualNetwork) Size() (n int) {
	var l int
	_ = l
	if m.VirtualNetwork != nil {
		l = m.VirtualNetwork.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *WhereTypeSiteVsite) Size() (n int) {
	var l int
	_ = l
	if m.Choice != nil {
		n += m.Choice.Size()
	}
	if m.PortChoice != nil {
		n += m.PortChoice.Size()
	}
	return n
}

func (m *WhereTypeSiteVsite_Site) Size() (n int) {
	var l int
	_ = l
	if m.Site != nil {
		l = m.Site.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *WhereTypeSiteVsite_VirtualSite) Size() (n int) {
	var l int
	_ = l
	if m.VirtualSite != nil {
		l = m.VirtualSite.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *WhereTypeSiteVsite_UseDefaultPort) Size() (n int) {
	var l int
	_ = l
	if m.UseDefaultPort != nil {
		l = m.UseDefaultPort.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *WhereTypeSiteVsite_Port) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovTypes(uint64(m.Port))
	return n
}
func (m *AdvertisePublic) Size() (n int) {
	var l int
	_ = l
	if m.PublicIp != nil {
		l = m.PublicIp.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *AdvertiseCustom) Size() (n int) {
	var l int
	_ = l
	if len(m.AdvertiseWhere) > 0 {
		for _, e := range m.AdvertiseWhere {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *AdvertiseSiteVsite) Size() (n int) {
	var l int
	_ = l
	if len(m.AdvertiseWhere) > 0 {
		for _, e := range m.AdvertiseWhere {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *CustomCiphers) Size() (n int) {
	var l int
	_ = l
	if m.MinVersion != 0 {
		n += 1 + sovTypes(uint64(m.MinVersion))
	}
	if m.MaxVersion != 0 {
		n += 1 + sovTypes(uint64(m.MaxVersion))
	}
	if len(m.CipherSuites) > 0 {
		for _, s := range m.CipherSuites {
			l = len(s)
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *TlsConfig) Size() (n int) {
	var l int
	_ = l
	if m.Choice != nil {
		n += m.Choice.Size()
	}
	return n
}

func (m *TlsConfig_DefaultSecurity) Size() (n int) {
	var l int
	_ = l
	if m.DefaultSecurity != nil {
		l = m.DefaultSecurity.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *TlsConfig_MediumSecurity) Size() (n int) {
	var l int
	_ = l
	if m.MediumSecurity != nil {
		l = m.MediumSecurity.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *TlsConfig_LowSecurity) Size() (n int) {
	var l int
	_ = l
	if m.LowSecurity != nil {
		l = m.LowSecurity.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *TlsConfig_CustomSecurity) Size() (n int) {
	var l int
	_ = l
	if m.CustomSecurity != nil {
		l = m.CustomSecurity.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *OriginPoolWithWeight) Size() (n int) {
	var l int
	_ = l
	if m.PoolChoice != nil {
		n += m.PoolChoice.Size()
	}
	if m.Weight != 0 {
		n += 1 + sovTypes(uint64(m.Weight))
	}
	if len(m.EndpointSubsets) > 0 {
		for k, v := range m.EndpointSubsets {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovTypes(uint64(len(k))) + 1 + len(v) + sovTypes(uint64(len(v)))
			n += mapEntrySize + 1 + sovTypes(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *OriginPoolWithWeight_Pool) Size() (n int) {
	var l int
	_ = l
	if m.Pool != nil {
		l = m.Pool.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *OriginPoolWithWeight_Cluster) Size() (n int) {
	var l int
	_ = l
	if m.Cluster != nil {
		l = m.Cluster.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *PrefixStringListType) Size() (n int) {
	var l int
	_ = l
	if len(m.Prefixes) > 0 {
		for _, s := range m.Prefixes {
			l = len(s)
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *GlobalConnectorType) Size() (n int) {
	var l int
	_ = l
	if m.GlobalVn != nil {
		l = m.GlobalVn.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func sovTypes(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozTypes(x uint64) (n int) {
	return sovTypes(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *ObjectRefType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ObjectRefType{`,
		`Tenant:` + fmt.Sprintf("%v", this.Tenant) + `,`,
		`Namespace:` + fmt.Sprintf("%v", this.Namespace) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SiteLocator) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SiteLocator{`,
		`Choice:` + fmt.Sprintf("%v", this.Choice) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SiteLocator_Site) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SiteLocator_Site{`,
		`Site:` + strings.Replace(fmt.Sprintf("%v", this.Site), "ObjectRefType", "ObjectRefType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SiteLocator_VirtualSite) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SiteLocator_VirtualSite{`,
		`VirtualSite:` + strings.Replace(fmt.Sprintf("%v", this.VirtualSite), "ObjectRefType", "ObjectRefType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *WhereVirtualNetwork) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&WhereVirtualNetwork{`,
		`VirtualNetwork:` + strings.Replace(fmt.Sprintf("%v", this.VirtualNetwork), "ObjectRefType", "ObjectRefType", 1) + `,`,
		`VipChoice:` + fmt.Sprintf("%v", this.VipChoice) + `,`,
		`}`,
	}, "")
	return s
}
func (this *WhereVirtualNetwork_DefaultVip) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&WhereVirtualNetwork_DefaultVip{`,
		`DefaultVip:` + strings.Replace(fmt.Sprintf("%v", this.DefaultVip), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *WhereVirtualNetwork_SpecificVip) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&WhereVirtualNetwork_SpecificVip{`,
		`SpecificVip:` + fmt.Sprintf("%v", this.SpecificVip) + `,`,
		`}`,
	}, "")
	return s
}
func (this *WhereSite) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&WhereSite{`,
		`Network:` + fmt.Sprintf("%v", this.Network) + `,`,
		`Site:` + strings.Replace(fmt.Sprintf("%v", this.Site), "ObjectRefType", "ObjectRefType", 1) + `,`,
		`Ip:` + fmt.Sprintf("%v", this.Ip) + `,`,
		`}`,
	}, "")
	return s
}
func (this *WhereVirtualSite) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&WhereVirtualSite{`,
		`Network:` + fmt.Sprintf("%v", this.Network) + `,`,
		`VirtualSite:` + strings.Replace(fmt.Sprintf("%v", this.VirtualSite), "ObjectRefType", "ObjectRefType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *WhereVK8SService) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&WhereVK8SService{`,
		`Choice:` + fmt.Sprintf("%v", this.Choice) + `,`,
		`}`,
	}, "")
	return s
}
func (this *WhereVK8SService_Site) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&WhereVK8SService_Site{`,
		`Site:` + strings.Replace(fmt.Sprintf("%v", this.Site), "ObjectRefType", "ObjectRefType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *WhereVK8SService_VirtualSite) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&WhereVK8SService_VirtualSite{`,
		`VirtualSite:` + strings.Replace(fmt.Sprintf("%v", this.VirtualSite), "ObjectRefType", "ObjectRefType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *WhereType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&WhereType{`,
		`Choice:` + fmt.Sprintf("%v", this.Choice) + `,`,
		`PortChoice:` + fmt.Sprintf("%v", this.PortChoice) + `,`,
		`}`,
	}, "")
	return s
}
func (this *WhereType_Site) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&WhereType_Site{`,
		`Site:` + strings.Replace(fmt.Sprintf("%v", this.Site), "WhereSite", "WhereSite", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *WhereType_VirtualSite) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&WhereType_VirtualSite{`,
		`VirtualSite:` + strings.Replace(fmt.Sprintf("%v", this.VirtualSite), "WhereVirtualSite", "WhereVirtualSite", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *WhereType_Vk8SService) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&WhereType_Vk8SService{`,
		`Vk8SService:` + strings.Replace(fmt.Sprintf("%v", this.Vk8SService), "WhereVK8SService", "WhereVK8SService", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *WhereType_UseDefaultPort) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&WhereType_UseDefaultPort{`,
		`UseDefaultPort:` + strings.Replace(fmt.Sprintf("%v", this.UseDefaultPort), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *WhereType_Port) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&WhereType_Port{`,
		`Port:` + fmt.Sprintf("%v", this.Port) + `,`,
		`}`,
	}, "")
	return s
}
func (this *WhereType_VirtualNetwork) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&WhereType_VirtualNetwork{`,
		`VirtualNetwork:` + strings.Replace(fmt.Sprintf("%v", this.VirtualNetwork), "WhereVirtualNetwork", "WhereVirtualNetwork", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *WhereTypeSiteVsite) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&WhereTypeSiteVsite{`,
		`Choice:` + fmt.Sprintf("%v", this.Choice) + `,`,
		`PortChoice:` + fmt.Sprintf("%v", this.PortChoice) + `,`,
		`}`,
	}, "")
	return s
}
func (this *WhereTypeSiteVsite_Site) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&WhereTypeSiteVsite_Site{`,
		`Site:` + strings.Replace(fmt.Sprintf("%v", this.Site), "WhereSite", "WhereSite", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *WhereTypeSiteVsite_VirtualSite) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&WhereTypeSiteVsite_VirtualSite{`,
		`VirtualSite:` + strings.Replace(fmt.Sprintf("%v", this.VirtualSite), "WhereVirtualSite", "WhereVirtualSite", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *WhereTypeSiteVsite_UseDefaultPort) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&WhereTypeSiteVsite_UseDefaultPort{`,
		`UseDefaultPort:` + strings.Replace(fmt.Sprintf("%v", this.UseDefaultPort), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *WhereTypeSiteVsite_Port) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&WhereTypeSiteVsite_Port{`,
		`Port:` + fmt.Sprintf("%v", this.Port) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AdvertisePublic) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AdvertisePublic{`,
		`PublicIp:` + strings.Replace(fmt.Sprintf("%v", this.PublicIp), "ObjectRefType", "ObjectRefType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AdvertiseCustom) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AdvertiseCustom{`,
		`AdvertiseWhere:` + strings.Replace(fmt.Sprintf("%v", this.AdvertiseWhere), "WhereType", "WhereType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AdvertiseSiteVsite) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AdvertiseSiteVsite{`,
		`AdvertiseWhere:` + strings.Replace(fmt.Sprintf("%v", this.AdvertiseWhere), "WhereTypeSiteVsite", "WhereTypeSiteVsite", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CustomCiphers) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CustomCiphers{`,
		`MinVersion:` + fmt.Sprintf("%v", this.MinVersion) + `,`,
		`MaxVersion:` + fmt.Sprintf("%v", this.MaxVersion) + `,`,
		`CipherSuites:` + fmt.Sprintf("%v", this.CipherSuites) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TlsConfig) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TlsConfig{`,
		`Choice:` + fmt.Sprintf("%v", this.Choice) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TlsConfig_DefaultSecurity) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TlsConfig_DefaultSecurity{`,
		`DefaultSecurity:` + strings.Replace(fmt.Sprintf("%v", this.DefaultSecurity), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TlsConfig_MediumSecurity) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TlsConfig_MediumSecurity{`,
		`MediumSecurity:` + strings.Replace(fmt.Sprintf("%v", this.MediumSecurity), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TlsConfig_LowSecurity) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TlsConfig_LowSecurity{`,
		`LowSecurity:` + strings.Replace(fmt.Sprintf("%v", this.LowSecurity), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TlsConfig_CustomSecurity) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TlsConfig_CustomSecurity{`,
		`CustomSecurity:` + strings.Replace(fmt.Sprintf("%v", this.CustomSecurity), "CustomCiphers", "CustomCiphers", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *OriginPoolWithWeight) String() string {
	if this == nil {
		return "nil"
	}
	keysForEndpointSubsets := make([]string, 0, len(this.EndpointSubsets))
	for k, _ := range this.EndpointSubsets {
		keysForEndpointSubsets = append(keysForEndpointSubsets, k)
	}
	sortkeys.Strings(keysForEndpointSubsets)
	mapStringForEndpointSubsets := "map[string]string{"
	for _, k := range keysForEndpointSubsets {
		mapStringForEndpointSubsets += fmt.Sprintf("%v: %v,", k, this.EndpointSubsets[k])
	}
	mapStringForEndpointSubsets += "}"
	s := strings.Join([]string{`&OriginPoolWithWeight{`,
		`PoolChoice:` + fmt.Sprintf("%v", this.PoolChoice) + `,`,
		`Weight:` + fmt.Sprintf("%v", this.Weight) + `,`,
		`EndpointSubsets:` + mapStringForEndpointSubsets + `,`,
		`}`,
	}, "")
	return s
}
func (this *OriginPoolWithWeight_Pool) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&OriginPoolWithWeight_Pool{`,
		`Pool:` + strings.Replace(fmt.Sprintf("%v", this.Pool), "ObjectRefType", "ObjectRefType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *OriginPoolWithWeight_Cluster) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&OriginPoolWithWeight_Cluster{`,
		`Cluster:` + strings.Replace(fmt.Sprintf("%v", this.Cluster), "ObjectRefType", "ObjectRefType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PrefixStringListType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PrefixStringListType{`,
		`Prefixes:` + fmt.Sprintf("%v", this.Prefixes) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalConnectorType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalConnectorType{`,
		`GlobalVn:` + strings.Replace(fmt.Sprintf("%v", this.GlobalVn), "ObjectRefType", "ObjectRefType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringTypes(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *ObjectRefType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ObjectRefType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ObjectRefType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tenant", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tenant = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SiteLocator) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SiteLocator: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SiteLocator: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Site", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ObjectRefType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Choice = &SiteLocator_Site{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VirtualSite", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ObjectRefType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Choice = &SiteLocator_VirtualSite{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WhereVirtualNetwork) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WhereVirtualNetwork: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WhereVirtualNetwork: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VirtualNetwork", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.VirtualNetwork == nil {
				m.VirtualNetwork = &ObjectRefType{}
			}
			if err := m.VirtualNetwork.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultVip", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.VipChoice = &WhereVirtualNetwork_DefaultVip{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpecificVip", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VipChoice = &WhereVirtualNetwork_SpecificVip{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WhereSite) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WhereSite: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WhereSite: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Network", wireType)
			}
			m.Network = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Network |= (SiteNetwork(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Site", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Site == nil {
				m.Site = &ObjectRefType{}
			}
			if err := m.Site.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ip", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ip = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WhereVirtualSite) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WhereVirtualSite: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WhereVirtualSite: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Network", wireType)
			}
			m.Network = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Network |= (SiteNetwork(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VirtualSite", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.VirtualSite == nil {
				m.VirtualSite = &ObjectRefType{}
			}
			if err := m.VirtualSite.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WhereVK8SService) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WhereVK8SService: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WhereVK8SService: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Site", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ObjectRefType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Choice = &WhereVK8SService_Site{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VirtualSite", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ObjectRefType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Choice = &WhereVK8SService_VirtualSite{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WhereType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WhereType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WhereType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Site", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &WhereSite{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Choice = &WhereType_Site{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VirtualSite", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &WhereVirtualSite{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Choice = &WhereType_VirtualSite{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vk8SService", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &WhereVK8SService{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Choice = &WhereType_Vk8SService{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UseDefaultPort", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.PortChoice = &WhereType_UseDefaultPort{v}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Port", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PortChoice = &WhereType_Port{v}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VirtualNetwork", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &WhereVirtualNetwork{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Choice = &WhereType_VirtualNetwork{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WhereTypeSiteVsite) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WhereTypeSiteVsite: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WhereTypeSiteVsite: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Site", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &WhereSite{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Choice = &WhereTypeSiteVsite_Site{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VirtualSite", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &WhereVirtualSite{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Choice = &WhereTypeSiteVsite_VirtualSite{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UseDefaultPort", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.PortChoice = &WhereTypeSiteVsite_UseDefaultPort{v}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Port", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PortChoice = &WhereTypeSiteVsite_Port{v}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AdvertisePublic) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AdvertisePublic: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AdvertisePublic: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PublicIp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PublicIp == nil {
				m.PublicIp = &ObjectRefType{}
			}
			if err := m.PublicIp.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AdvertiseCustom) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AdvertiseCustom: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AdvertiseCustom: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdvertiseWhere", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AdvertiseWhere = append(m.AdvertiseWhere, &WhereType{})
			if err := m.AdvertiseWhere[len(m.AdvertiseWhere)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AdvertiseSiteVsite) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AdvertiseSiteVsite: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AdvertiseSiteVsite: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdvertiseWhere", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AdvertiseWhere = append(m.AdvertiseWhere, &WhereTypeSiteVsite{})
			if err := m.AdvertiseWhere[len(m.AdvertiseWhere)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CustomCiphers) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CustomCiphers: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CustomCiphers: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinVersion", wireType)
			}
			m.MinVersion = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MinVersion |= (ves_io_schema4.TlsProtocol(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxVersion", wireType)
			}
			m.MaxVersion = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxVersion |= (ves_io_schema4.TlsProtocol(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CipherSuites", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CipherSuites = append(m.CipherSuites, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TlsConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TlsConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TlsConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultSecurity", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Choice = &TlsConfig_DefaultSecurity{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MediumSecurity", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Choice = &TlsConfig_MediumSecurity{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LowSecurity", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Choice = &TlsConfig_LowSecurity{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CustomSecurity", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &CustomCiphers{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Choice = &TlsConfig_CustomSecurity{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OriginPoolWithWeight) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OriginPoolWithWeight: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OriginPoolWithWeight: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pool", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ObjectRefType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.PoolChoice = &OriginPoolWithWeight_Pool{v}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Weight", wireType)
			}
			m.Weight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Weight |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cluster", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ObjectRefType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.PoolChoice = &OriginPoolWithWeight_Cluster{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndpointSubsets", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.EndpointSubsets == nil {
				m.EndpointSubsets = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTypes
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthTypes
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTypes
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthTypes
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipTypes(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthTypes
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.EndpointSubsets[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PrefixStringListType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PrefixStringListType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PrefixStringListType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Prefixes", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Prefixes = append(m.Prefixes, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GlobalConnectorType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GlobalConnectorType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GlobalConnectorType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GlobalVn", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.GlobalVn == nil {
				m.GlobalVn = &ObjectRefType{}
			}
			if err := m.GlobalVn.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTypes(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthTypes
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipTypes(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthTypes = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTypes   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("ves.io/schema/views/types.proto", fileDescriptorTypes) }
func init() { golang_proto.RegisterFile("ves.io/schema/views/types.proto", fileDescriptorTypes) }

var fileDescriptorTypes = []byte{
	// 1843 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x58, 0xcf, 0x6f, 0x23, 0x57,
	0x1d, 0xf7, 0x9b, 0x19, 0x3b, 0xf6, 0x73, 0x12, 0xcf, 0x4e, 0xb2, 0x8b, 0x1b, 0xba, 0x8e, 0xeb,
	0x52, 0x36, 0xb4, 0x8e, 0xd3, 0x38, 0x3f, 0x9a, 0x06, 0x69, 0xd9, 0x8c, 0xd7, 0xd4, 0xc9, 0xfe,
	0x48, 0x18, 0x87, 0x84, 0x22, 0xc4, 0xc8, 0x9e, 0xbc, 0x38, 0xaf, 0xb1, 0xe7, 0x8d, 0x66, 0xc6,
	0x4e, 0x72, 0x88, 0xd8, 0x33, 0xe2, 0x50, 0x72, 0x42, 0x15, 0x7f, 0x00, 0xe4, 0x88, 0xe0, 0x82,
	0xf7, 0xb0, 0xaa, 0x40, 0x2a, 0x5c, 0xc8, 0x09, 0x55, 0x08, 0x89, 0xae, 0x2b, 0x55, 0x70, 0x2b,
	0x7b, 0x40, 0xbd, 0x15, 0xbd, 0x37, 0x33, 0xfe, 0x95, 0xb1, 0x77, 0x83, 0x40, 0x5c, 0x92, 0xf7,
	0xe3, 0xf3, 0xf9, 0xfe, 0xfe, 0xbe, 0xf7, 0x3c, 0x70, 0xba, 0x81, 0xac, 0x0c, 0x26, 0x73, 0x96,
	0x76, 0x80, 0x6a, 0xa5, 0xb9, 0x06, 0x46, 0x47, 0xd6, 0x9c, 0x7d, 0x62, 0x20, 0x2b, 0x63, 0x98,
	0xc4, 0x26, 0xd2, 0x84, 0x03, 0xc8, 0x38, 0x80, 0x0c, 0x03, 0x4c, 0xcd, 0x56, 0xb0, 0x7d, 0x50,
	0x2f, 0x67, 0x34, 0x52, 0x9b, 0xab, 0x90, 0x0a, 0x99, 0x63, 0xd8, 0x72, 0x7d, 0x9f, 0xcd, 0xd8,
	0x84, 0x8d, 0x1c, 0x19, 0x53, 0x5f, 0xed, 0x55, 0x42, 0x0c, 0x1b, 0x13, 0xdd, 0x55, 0x30, 0xf5,
	0x52, 0xef, 0x66, 0x97, 0xee, 0xa9, 0x97, 0xfb, 0x8c, 0x2b, 0x55, 0xf1, 0x5e, 0xc9, 0x46, 0xee,
	0x6e, 0xf2, 0xb2, 0xe9, 0x6a, 0x8f, 0xe8, 0xd4, 0x4f, 0x01, 0x1c, 0xdb, 0x2c, 0xbf, 0x87, 0x34,
	0x5b, 0x41, 0xfb, 0xdb, 0x27, 0x06, 0x92, 0x66, 0x60, 0xc8, 0x46, 0x7a, 0x49, 0xb7, 0xe3, 0x20,
	0x09, 0x66, 0x22, 0xb2, 0x78, 0x71, 0x0a, 0xbe, 0x68, 0x82, 0xc0, 0x6f, 0xff, 0xf1, 0x84, 0x17,
	0x4c, 0x6e, 0xe6, 0x8e, 0xe2, 0xee, 0x4b, 0x19, 0x18, 0xd1, 0x4b, 0x35, 0x64, 0x19, 0x25, 0x0d,
	0xc5, 0xb9, 0x01, 0xe0, 0x0e, 0x44, 0xfa, 0x3a, 0x14, 0xe8, 0x24, 0xce, 0x33, 0xa8, 0xd4, 0x05,
	0x0d, 0x99, 0x42, 0x12, 0xcc, 0xdc, 0x51, 0xd8, 0x7e, 0xea, 0x4f, 0x00, 0x46, 0x8b, 0xd8, 0x46,
	0xf7, 0x89, 0x56, 0xb2, 0x89, 0x29, 0xe5, 0xa1, 0x60, 0x61, 0x1b, 0x31, 0x7b, 0xa2, 0xd9, 0x54,
	0xc6, 0x27, 0xdc, 0x99, 0x1e, 0x1f, 0xe4, 0xe8, 0xf9, 0x29, 0xa3, 0x3c, 0x7a, 0x0c, 0x40, 0x21,
	0xa0, 0xb0, 0xb1, 0xf4, 0x3d, 0x38, 0xda, 0xc0, 0xa6, 0x5d, 0x2f, 0x55, 0x55, 0x26, 0x8e, 0x7b,
	0x61, 0x71, 0xb1, 0xf3, 0xd3, 0x1e, 0x6a, 0x21, 0xa0, 0x44, 0xdd, 0x39, 0xb5, 0x53, 0x7e, 0x09,
	0x86, 0xb4, 0x03, 0x82, 0x35, 0x24, 0xc5, 0x9e, 0x34, 0x01, 0xb8, 0x68, 0x02, 0xbe, 0xd5, 0x04,
	0xfc, 0x7c, 0x3a, 0xbb, 0x21, 0x84, 0x79, 0x51, 0x48, 0xfd, 0x8c, 0x83, 0x13, 0xbb, 0x07, 0xc8,
	0x44, 0x3b, 0x0e, 0xeb, 0x21, 0xb2, 0x8f, 0x88, 0x79, 0x28, 0x69, 0x30, 0xe6, 0xc9, 0xd5, 0x9d,
	0xa5, 0x2b, 0x38, 0x79, 0xe3, 0xfc, 0xb4, 0x9f, 0x4d, 0xfd, 0x55, 0xc6, 0x1b, 0xbd, 0x4a, 0xde,
	0x82, 0xd1, 0x3d, 0xb4, 0x5f, 0xaa, 0x57, 0x6d, 0xb5, 0x81, 0x0d, 0x16, 0xfd, 0x68, 0x76, 0xb2,
	0x4f, 0x41, 0xbe, 0x66, 0xd8, 0x27, 0x85, 0x80, 0x02, 0x5d, 0xe8, 0x0e, 0x36, 0xa4, 0x65, 0x38,
	0x6a, 0x19, 0x48, 0xc3, 0xfb, 0x58, 0x63, 0x4c, 0x81, 0xe5, 0xed, 0x1a, 0x75, 0xb1, 0x2b, 0xc7,
	0x06, 0x8d, 0x70, 0xd4, 0x03, 0xee, 0x60, 0x63, 0x35, 0xf4, 0xec, 0x36, 0xf5, 0x5d, 0xbe, 0x09,
	0x61, 0x03, 0x1b, 0x6a, 0x57, 0x68, 0xf8, 0x8b, 0x26, 0xe0, 0x68, 0x68, 0x16, 0xd2, 0x8b, 0x1b,
	0x42, 0x98, 0x13, 0xf9, 0xd4, 0x1f, 0x00, 0x8c, 0xb0, 0xd0, 0xd0, 0x48, 0x4a, 0x77, 0xe0, 0x48,
	0x77, 0x20, 0xc6, 0xb3, 0x49, 0xdf, 0x40, 0x50, 0xac, 0xeb, 0x9e, 0x2c, 0x50, 0x5b, 0x14, 0x8f,
	0x26, 0x3d, 0x70, 0x8b, 0xe5, 0xc5, 0xb3, 0x7b, 0xdd, 0x2d, 0x96, 0x3f, 0x36, 0x01, 0xa7, 0x21,
	0x2a, 0x8d, 0x85, 0xd1, 0x29, 0x9a, 0x57, 0x20, 0xe7, 0xc6, 0xec, 0xb2, 0xe7, 0xc7, 0x40, 0xe1,
	0xb0, 0xb1, 0x1a, 0x7e, 0x76, 0x3b, 0x38, 0x9f, 0xce, 0xa6, 0x17, 0x52, 0xbf, 0x06, 0x50, 0xec,
	0x4e, 0x33, 0x73, 0x69, 0xf5, 0xca, 0x2e, 0x75, 0x9c, 0xf9, 0xc1, 0x7f, 0x5c, 0xb2, 0xd7, 0xfb,
	0x4a, 0xd6, 0x71, 0xae, 0xa7, 0x6c, 0xbd, 0x3c, 0xa5, 0x3e, 0x6b, 0x9b, 0x7d, 0x6f, 0xa5, 0x58,
	0x44, 0x66, 0x83, 0xa6, 0xeb, 0xde, 0x95, 0x9b, 0xee, 0x5a, 0x57, 0x1c, 0xcd, 0xde, 0xd6, 0xfb,
	0xe1, 0x7f, 0xd5, 0x0f, 0xb3, 0xbf, 0x01, 0x57, 0x85, 0x67, 0xb7, 0xc1, 0xc2, 0xf3, 0xdb, 0xf0,
	0x7d, 0xc1, 0xad, 0x35, 0x76, 0xd0, 0x2d, 0xf6, 0x78, 0x98, 0xf0, 0x35, 0xa6, 0x5d, 0x99, 0x6d,
	0x57, 0x36, 0x7c, 0x5d, 0x79, 0x6d, 0x30, 0xbb, 0xab, 0x16, 0xfa, 0xcc, 0x96, 0xb6, 0xe0, 0x68,
	0xe3, 0x70, 0xc5, 0x52, 0x2d, 0x27, 0xe6, 0x6e, 0x6b, 0x0e, 0x93, 0xd5, 0x49, 0x90, 0x2c, 0x50,
	0x1f, 0x99, 0xc4, 0xc3, 0x15, 0xcb, 0xcb, 0xda, 0x06, 0x14, 0xeb, 0x16, 0x52, 0xbd, 0x7e, 0x37,
	0x88, 0x69, 0xc7, 0x43, 0x83, 0x1b, 0x5e, 0x0e, 0x7b, 0x25, 0x5d, 0x00, 0xca, 0x78, 0xdd, 0x42,
	0x77, 0x1d, 0xe2, 0x16, 0x31, 0x6d, 0xe9, 0x0d, 0x28, 0x30, 0xfe, 0x48, 0x12, 0xcc, 0x8c, 0xc9,
	0xd7, 0xbb, 0x8b, 0x3f, 0xfc, 0x7a, 0x28, 0xfe, 0xe5, 0x97, 0xfc, 0x0c, 0x28, 0x00, 0x85, 0x81,
	0xa4, 0x77, 0x2f, 0x9f, 0x64, 0x11, 0xa6, 0x77, 0xe6, 0xb9, 0x91, 0x69, 0x37, 0xb2, 0xeb, 0x50,
	0xdf, 0xf9, 0xc5, 0xca, 0x74, 0x31, 0xbd, 0x24, 0xdf, 0x6c, 0xa7, 0x77, 0xc2, 0x4d, 0xaf, 0xd0,
	0x6a, 0x82, 0x11, 0xd6, 0x7a, 0xe9, 0xb7, 0xe5, 0x14, 0x8c, 0x52, 0x4b, 0xd4, 0x2e, 0x4c, 0xe8,
	0x23, 0x07, 0x17, 0xa4, 0x65, 0xb0, 0x9c, 0x7e, 0x6b, 0x43, 0x08, 0x0b, 0x62, 0x70, 0x43, 0x08,
	0x87, 0xc5, 0xc8, 0x86, 0x10, 0x0e, 0x8a, 0xa1, 0xd4, 0x9f, 0x39, 0x28, 0xb5, 0x4b, 0x82, 0x26,
	0x65, 0x87, 0x65, 0xf9, 0xff, 0x5f, 0x1b, 0xdf, 0xf6, 0xc9, 0x64, 0x70, 0x48, 0x26, 0x85, 0x01,
	0x59, 0xbc, 0xe5, 0x66, 0x31, 0xc4, 0xb2, 0x78, 0x6d, 0x60, 0x06, 0x59, 0x98, 0x17, 0xd2, 0x8b,
	0x43, 0xba, 0x48, 0x4e, 0xf4, 0x86, 0x98, 0xee, 0x07, 0xdd, 0x34, 0xf0, 0x4b, 0xe9, 0x65, 0xa7,
	0xcb, 0x9c, 0x20, 0xa7, 0xf6, 0x60, 0x6c, 0x6d, 0xaf, 0x81, 0x4c, 0x1b, 0x5b, 0x68, 0xab, 0x5e,
	0xae, 0x62, 0x4d, 0xfa, 0x0e, 0x8c, 0x18, 0x6c, 0xa4, 0x62, 0xe3, 0x0a, 0xe7, 0x8a, 0x78, 0x7e,
	0xda, 0xe1, 0xb1, 0xa3, 0x39, 0xec, 0x4c, 0xd7, 0x8d, 0xd4, 0x2f, 0x41, 0x97, 0x9a, 0x5c, 0xdd,
	0xb2, 0x49, 0x4d, 0xaa, 0xc0, 0x58, 0xc9, 0x5b, 0x52, 0x8f, 0x68, 0x98, 0xe3, 0x20, 0xc9, 0x0f,
	0x4f, 0x23, 0x53, 0x94, 0xa0, 0x81, 0x09, 0x9e, 0x01, 0x4e, 0x4c, 0x7a, 0xa3, 0x30, 0xf0, 0x46,
	0x71, 0xa0, 0x8c, 0xb7, 0xc5, 0x32, 0xce, 0xea, 0xec, 0x87, 0x4d, 0xf0, 0x0d, 0x78, 0x0b, 0xa6,
	0x1c, 0xc5, 0xc9, 0xb6, 0x21, 0xc9, 0x9d, 0xf5, 0xad, 0x64, 0x8e, 0xe8, 0xfb, 0xb8, 0x52, 0x37,
	0x4b, 0xf4, 0xb9, 0x25, 0x81, 0xf9, 0xd4, 0x6f, 0x00, 0x94, 0xda, 0x90, 0x4e, 0xa9, 0x19, 0x83,
	0xcc, 0xbd, 0x35, 0xdc, 0xdc, 0xb6, 0x84, 0xff, 0xb5, 0xdd, 0xbf, 0x0a, 0xc1, 0x31, 0x07, 0x99,
	0xc3, 0xc6, 0x01, 0x32, 0x2d, 0xe9, 0x9b, 0x30, 0x5a, 0xc3, 0xba, 0xda, 0x40, 0xa6, 0x85, 0x89,
	0xee, 0x5e, 0x6b, 0x53, 0x7d, 0xe6, 0x6e, 0x57, 0xad, 0x2d, 0xfa, 0xc4, 0xd4, 0x48, 0x55, 0x81,
	0x35, 0xac, 0xef, 0x38, 0x68, 0x46, 0x2e, 0x1d, 0xb7, 0xc9, 0xdc, 0x0b, 0x90, 0x4b, 0xc7, 0x1e,
	0xf9, 0xe7, 0x41, 0x38, 0xa6, 0x31, 0x2b, 0x54, 0xab, 0x8e, 0x6d, 0x64, 0xc5, 0xf9, 0x24, 0x3f,
	0x13, 0x91, 0xff, 0x25, 0x50, 0x7f, 0x3f, 0x13, 0xce, 0x40, 0x4b, 0x48, 0xfd, 0x4d, 0x30, 0xff,
	0x2a, 0x28, 0x37, 0xb6, 0xef, 0x17, 0xd5, 0xb5, 0x7c, 0x51, 0x9d, 0xcf, 0xae, 0xa8, 0xef, 0xe4,
	0x1e, 0xa8, 0xc5, 0xc2, 0x5a, 0x76, 0x69, 0xb9, 0xb3, 0x9e, 0x5d, 0x5a, 0xf6, 0xd6, 0x17, 0x56,
	0x16, 0x95, 0x97, 0xe9, 0x7a, 0xae, 0xb0, 0x96, 0x2b, 0xac, 0x65, 0xdf, 0x54, 0xb7, 0x36, 0xef,
	0xbf, 0x3b, 0xbf, 0xf0, 0xe6, 0x92, 0xc7, 0xba, 0x45, 0x77, 0xf3, 0xb9, 0xbb, 0x85, 0x3c, 0xfd,
	0x5b, 0x5c, 0x53, 0x77, 0xd7, 0xb7, 0x0b, 0x7e, 0xe2, 0x07, 0x03, 0xfb, 0xf4, 0xcd, 0xfa, 0x02,
	0x07, 0x1a, 0xf0, 0x5a, 0x07, 0xae, 0x0c, 0x51, 0x3f, 0x08, 0xd6, 0xa7, 0xfc, 0x0d, 0x1f, 0xd8,
	0x40, 0xd5, 0x5f, 0x1b, 0xea, 0x7b, 0x4e, 0xce, 0x51, 0xe0, 0x10, 0x14, 0xd5, 0xed, 0xa1, 0x52,
	0x43, 0xdc, 0x78, 0x1e, 0xa6, 0x5b, 0x0e, 0xcb, 0xd6, 0x40, 0x09, 0xd3, 0xbe, 0xbb, 0x5d, 0x61,
	0xba, 0x4c, 0xef, 0x16, 0x3e, 0xed, 0xbb, 0xdb, 0x09, 0x5f, 0x57, 0x6f, 0x8d, 0x3a, 0xd5, 0x58,
	0x64, 0xc5, 0xd8, 0xf5, 0x14, 0xfc, 0x1d, 0x07, 0x23, 0xdb, 0x55, 0xcb, 0x69, 0x26, 0x69, 0x0d,
	0x8a, 0xde, 0x41, 0x6e, 0x21, 0xad, 0x6e, 0x62, 0xfb, 0xc4, 0x3d, 0x00, 0x07, 0xbd, 0xc3, 0x63,
	0x2e, 0xbe, 0xe8, 0xc2, 0xa5, 0x6f, 0xc1, 0x58, 0x0d, 0xed, 0xe1, 0x7a, 0xad, 0x23, 0x81, 0x1b,
	0x2a, 0x61, 0xdc, 0x81, 0xb7, 0x05, 0xbc, 0x0d, 0x47, 0xab, 0xe4, 0xa8, 0xc3, 0x1e, 0xfe, 0x3b,
	0x20, 0x5a, 0x25, 0x47, 0x6d, 0xea, 0x03, 0x18, 0xd3, 0xd8, 0x01, 0xd0, 0x61, 0x0b, 0x43, 0x8e,
	0xef, 0x9e, 0xc3, 0x82, 0x5a, 0xe2, 0x90, 0x3d, 0x71, 0xec, 0xb5, 0xe6, 0x77, 0x9d, 0x07, 0x3b,
	0xd7, 0xf9, 0xa2, 0x7b, 0x3d, 0xff, 0x93, 0x87, 0x93, 0x9b, 0x26, 0xae, 0x60, 0x7d, 0x8b, 0x90,
	0xea, 0x2e, 0xb6, 0x0f, 0x76, 0x11, 0xae, 0x1c, 0xd8, 0x52, 0x81, 0x5e, 0x6b, 0xa4, 0x7a, 0x85,
	0x6b, 0x64, 0xfc, 0xfc, 0x34, 0x4a, 0x98, 0x28, 0x95, 0x32, 0xe9, 0xa5, 0x4d, 0xff, 0x4b, 0x37,
	0x61, 0xe8, 0x88, 0xc9, 0x64, 0xf1, 0x1c, 0x93, 0x83, 0x7f, 0x69, 0x02, 0x30, 0xaf, 0xb8, 0x8b,
	0x92, 0x02, 0x47, 0xb4, 0x6a, 0xdd, 0xb2, 0x91, 0x39, 0xd4, 0xe7, 0x5e, 0x5d, 0xd2, 0xf9, 0xa9,
	0xc7, 0xa2, 0xbe, 0xb9, 0x6f, 0x61, 0x6f, 0x49, 0xfa, 0x09, 0x80, 0x22, 0xd2, 0xf7, 0x0c, 0x82,
	0x75, 0x5b, 0xb5, 0xea, 0x65, 0x0b, 0xd9, 0x56, 0x3c, 0xc8, 0x0e, 0xfd, 0xdb, 0xfe, 0xd2, 0x7d,
	0x42, 0x90, 0xc9, 0xbb, 0x12, 0x8a, 0x8e, 0x80, 0xbc, 0x6e, 0x9b, 0x27, 0xf2, 0x2b, 0x54, 0xdf,
	0x07, 0x8f, 0x81, 0x00, 0xb9, 0x80, 0x73, 0x07, 0x7c, 0x00, 0x38, 0x51, 0x6c, 0x7d, 0xf2, 0x7b,
	0x3e, 0xf4, 0xe3, 0xc7, 0x80, 0x0b, 0x07, 0x94, 0x18, 0xea, 0x25, 0x4e, 0xc9, 0x70, 0xd2, 0x4f,
	0x96, 0x24, 0x42, 0xfe, 0x10, 0x39, 0x85, 0x1a, 0x51, 0xe8, 0x50, 0x9a, 0x84, 0xc1, 0x46, 0xa9,
	0x5a, 0x77, 0x7f, 0xed, 0x2b, 0xce, 0x64, 0x95, 0x5b, 0x01, 0xab, 0xaf, 0x7e, 0xd8, 0x04, 0xd3,
	0xf0, 0x26, 0xbc, 0xe1, 0x98, 0x9a, 0xa4, 0xb6, 0x26, 0x4b, 0xfa, 0x5e, 0xd2, 0xcd, 0x17, 0xbf,
	0xe0, 0xbd, 0x1f, 0x48, 0x55, 0xf5, 0x7f, 0x5f, 0x2c, 0xba, 0xaf, 0xf4, 0x32, 0x9c, 0xdc, 0x32,
	0xd1, 0x3e, 0x3e, 0x2e, 0xda, 0x26, 0xd6, 0x2b, 0xf7, 0xb1, 0x65, 0xb3, 0xf7, 0xfa, 0x06, 0x0c,
	0x1b, 0x6c, 0x1d, 0x59, 0xec, 0x86, 0x8c, 0xc8, 0x19, 0xea, 0x20, 0x3c, 0x03, 0x23, 0xa9, 0xa0,
	0xc9, 0x7f, 0x01, 0x98, 0xbf, 0xa1, 0x33, 0xc0, 0x8b, 0x8f, 0x80, 0xef, 0x45, 0xd8, 0xe6, 0xa7,
	0xde, 0x83, 0x13, 0xef, 0x54, 0x49, 0xb9, 0x54, 0xcd, 0x11, 0x5d, 0x47, 0x9a, 0x4d, 0x4c, 0xa6,
	0xa2, 0x08, 0x23, 0x15, 0xb6, 0xac, 0x36, 0xf4, 0x2b, 0x94, 0x96, 0x74, 0xf9, 0x97, 0xb8, 0x12,
	0x76, 0x04, 0xed, 0xe8, 0xaf, 0x1f, 0x3a, 0x5f, 0x33, 0xbc, 0x9f, 0xe3, 0xaf, 0xc2, 0xe9, 0xe2,
	0xfa, 0x76, 0x5e, 0x7d, 0x98, 0xdf, 0xde, 0xdd, 0x54, 0xee, 0xa9, 0xeb, 0x0f, 0x8b, 0xeb, 0x77,
	0xf3, 0xea, 0xda, 0xc3, 0xbb, 0xea, 0xe6, 0x77, 0xb7, 0xe9, 0x58, 0x0c, 0x48, 0x5f, 0x81, 0x13,
	0x3e, 0x20, 0x11, 0x48, 0x71, 0x38, 0xd9, 0xb3, 0xe1, 0x51, 0xb8, 0x29, 0xfa, 0x7c, 0x0e, 0xc8,
	0x3f, 0xba, 0x78, 0x9a, 0x08, 0x7c, 0xfc, 0x34, 0x11, 0xf8, 0xfc, 0x69, 0x02, 0x3c, 0x6a, 0x25,
	0xc0, 0x2f, 0x5a, 0x09, 0xf0, 0x51, 0x2b, 0x01, 0x2e, 0x5a, 0x09, 0xf0, 0x71, 0x2b, 0x01, 0x3e,
	0x69, 0x25, 0xc0, 0xdf, 0x5b, 0x89, 0xc0, 0xe7, 0xad, 0x04, 0x78, 0xff, 0xd3, 0x44, 0xe0, 0xc9,
	0xa7, 0x09, 0xf0, 0xfd, 0xf5, 0x0a, 0x31, 0x0e, 0x2b, 0x99, 0x06, 0xa9, 0xda, 0xc8, 0x34, 0x4b,
	0x99, 0xba, 0x35, 0xc7, 0x06, 0xfb, 0xc4, 0xac, 0xcd, 0x1a, 0x26, 0x69, 0xe0, 0x3d, 0x64, 0xce,
	0x7a, 0xdb, 0x73, 0x46, 0xb9, 0x42, 0xe6, 0xd0, 0xb1, 0xed, 0x7e, 0x56, 0xea, 0xfe, 0x30, 0x56,
	0x0e, 0xb1, 0xef, 0x4a, 0x0b, 0xff, 0x0e, 0x00, 0x00, 0xff, 0xff, 0x68, 0xe9, 0xcd, 0xd2, 0x36,
	0x13, 0x00, 0x00,
}
