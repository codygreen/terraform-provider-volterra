// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ves.io/schema/views/network_policy_view/public_custom_data_api.proto

package network_policy_view

import (
	proto "github.com/gogo/protobuf/proto"
	golang_proto "github.com/golang/protobuf/proto"

	fmt "fmt"

	math "math"

	_ "github.com/gogo/protobuf/gogoproto"

	_ "github.com/gogo/googleapis/google/api"

	_ "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"

	ves_io_schema4 "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"

	_ "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/vesenv"

	strconv "strconv"

	strings "strings"

	reflect "reflect"

	context "golang.org/x/net/context"

	grpc "google.golang.org/grpc"

	io "io"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Network Policy Metric Labels
//
// x-displayName: "Network Policy Metric Labels"
// Network policy hits can be sliced and diced based on one or more labels listed below.
type NetworkPolicyMetricLabel int32

const (
	// x-displayName: "Namespace"
	NAMESPACE NetworkPolicyMetricLabel = 0
	// x-displayName: "Policy"
	POLICY NetworkPolicyMetricLabel = 1
	// x-displayName: "Policy Rule"
	POLICY_RULE NetworkPolicyMetricLabel = 2
	// x-displayName: "Action"
	ACTION NetworkPolicyMetricLabel = 3
	// x-displayName: "Site"
	SITE NetworkPolicyMetricLabel = 4
)

var NetworkPolicyMetricLabel_name = map[int32]string{
	0: "NAMESPACE",
	1: "POLICY",
	2: "POLICY_RULE",
	3: "ACTION",
	4: "SITE",
}
var NetworkPolicyMetricLabel_value = map[string]int32{
	"NAMESPACE":   0,
	"POLICY":      1,
	"POLICY_RULE": 2,
	"ACTION":      3,
	"SITE":        4,
}

func (NetworkPolicyMetricLabel) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorPublicCustomDataApi, []int{0}
}

// Network Policy Hits Request
//
// x-displayName: "Network Policy Hits Request"
// Request to get the network policy hits counter.
type NetworkPolicyHitsRequest struct {
	// Namespace
	//
	// x-displayName: "Namespace"
	// x-example: "ns1"
	// Namespace is used to scope network policy hits for the given namespace.
	Namespace string `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// Label Filter
	//
	// x-displayName: "Label Filter"
	// List of label filter expressions of the form "label" Op "value".
	// Response will only contain data that matches all the conditions specified in the label_filter.
	//
	// Optional: If not specified, then the metrics will be filtered only based on the namespace in the request.
	LabelFilter []*NetworkPolicyMetricLabelFilter `protobuf:"bytes,2,rep,name=label_filter,json=labelFilter" json:"label_filter,omitempty"`
	// Group by
	//
	// x-displayName: "Group By"
	// Aggregate data by one of more labels specified in group_by.
	//
	// Optional: If not specified, then the rule hits are aggregated/grouped by POLICY.
	GroupBy []NetworkPolicyMetricLabel `protobuf:"varint,3,rep,packed,name=group_by,json=groupBy,enum=ves.io.schema.views.network_policy_view.NetworkPolicyMetricLabel" json:"group_by,omitempty"`
	// Start time
	//
	// x-displayName: "Start Time"
	// x-example: "1570007981"
	// start time of metric collection from which data will be considered.
	// Format: unix_timestamp|rfc 3339
	//
	// Optional: If not specified, then the start_time will be evaluated to end_time-10m
	//           If end_time is not specified, then the start_time will be evaluated to <current time>-10m
	StartTime string `protobuf:"bytes,4,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	// End time
	//
	// x-displayName: "End Time"
	// x-example: "1570007981"
	// end time of metric collection from which data will be considered.
	// Format: unix_timestamp|rfc 3339
	//
	// Optional: If not specified, then the end_time will be evaluated to start_time+10m
	//           If start_time is not specified, then the end_time will be evaluated to <current time>
	EndTime string `protobuf:"bytes,5,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	// Step
	//
	// x-displayName: "Step"
	// x-example: "5m"
	// step is the resolution width, which determines the number of the data points [x-axis (time)] to be returned in the response.
	// The timestamps in the response will be t1=start_time, t2=t1+step, ... tn=tn-1+step, where tn <= end_time.
	// Format: [0-9][smhd], where s - seconds, m - minutes, h - hours, d - days
	//
	// Optional: If not specified, then step size is evaluated to <end_time - start_time>
	Step string `protobuf:"bytes,6,opt,name=step,proto3" json:"step,omitempty"`
}

func (m *NetworkPolicyHitsRequest) Reset()      { *m = NetworkPolicyHitsRequest{} }
func (*NetworkPolicyHitsRequest) ProtoMessage() {}
func (*NetworkPolicyHitsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorPublicCustomDataApi, []int{0}
}

func (m *NetworkPolicyHitsRequest) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *NetworkPolicyHitsRequest) GetLabelFilter() []*NetworkPolicyMetricLabelFilter {
	if m != nil {
		return m.LabelFilter
	}
	return nil
}

func (m *NetworkPolicyHitsRequest) GetGroupBy() []NetworkPolicyMetricLabel {
	if m != nil {
		return m.GroupBy
	}
	return nil
}

func (m *NetworkPolicyHitsRequest) GetStartTime() string {
	if m != nil {
		return m.StartTime
	}
	return ""
}

func (m *NetworkPolicyHitsRequest) GetEndTime() string {
	if m != nil {
		return m.EndTime
	}
	return ""
}

func (m *NetworkPolicyHitsRequest) GetStep() string {
	if m != nil {
		return m.Step
	}
	return ""
}

// Network Policy Metric Label Filter
//
// x-displayName: "Network Policy Metric Label Filter"
// Label filter can be specified to filter metrics based on label match
type NetworkPolicyMetricLabelFilter struct {
	// Label
	//
	// x-displayName: "Label"
	// Label associated with Network policy hits
	Label NetworkPolicyMetricLabel `protobuf:"varint,1,opt,name=label,proto3,enum=ves.io.schema.views.network_policy_view.NetworkPolicyMetricLabel" json:"label,omitempty"`
	// Operator
	//
	// x-displayName: "Operator"
	// Operator to evaluate the label
	Op ves_io_schema4.MetricLabelOp `protobuf:"varint,2,opt,name=op,proto3,enum=ves.io.schema.MetricLabelOp" json:"op,omitempty"`
	// Value
	//
	// x-displayName: "Value"
	// x-example: "policy1"
	// Value to be compared with
	Value string `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *NetworkPolicyMetricLabelFilter) Reset()      { *m = NetworkPolicyMetricLabelFilter{} }
func (*NetworkPolicyMetricLabelFilter) ProtoMessage() {}
func (*NetworkPolicyMetricLabelFilter) Descriptor() ([]byte, []int) {
	return fileDescriptorPublicCustomDataApi, []int{1}
}

func (m *NetworkPolicyMetricLabelFilter) GetLabel() NetworkPolicyMetricLabel {
	if m != nil {
		return m.Label
	}
	return NAMESPACE
}

func (m *NetworkPolicyMetricLabelFilter) GetOp() ves_io_schema4.MetricLabelOp {
	if m != nil {
		return m.Op
	}
	return ves_io_schema4.EQ
}

func (m *NetworkPolicyMetricLabelFilter) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

// Network Policy Hits ID
//
// x-displayName: "Network Policy Hits ID"
// NetworkPolicyHitsId uniquely identifies an entry in the response to network policy hits request.
// Network policy hits counter is aggregated based on the labels specified in the group_by field in the request.
// Therefore, only the feields that corresponds to the MetricLabel in the group_by field will have non-empty
// value in the response.
type NetworkPolicyHitsId struct {
	// Namespace
	//
	// x-displayName: "Namespace"
	// x-example: "ns1"
	// Namespace in which the policy rule was hit
	Namespace string `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// Policy
	//
	// x-displayName: "Policy"
	// x-example: "policy1"
	// Policy name
	Policy string `protobuf:"bytes,2,opt,name=policy,proto3" json:"policy,omitempty"`
	// Policy Rule
	//
	// x-displayName: "Policy Rule"
	// x-example: "rule1"
	// Policy Rule name
	PolicyRule string `protobuf:"bytes,3,opt,name=policy_rule,json=policyRule,proto3" json:"policy_rule,omitempty"`
	// Action
	//
	// x-displayName: "Action"
	// x-example: "allow"
	// Action associated with the policy rule
	Action string `protobuf:"bytes,4,opt,name=action,proto3" json:"action,omitempty"`
	// Site
	//
	// x-displayName: "Site"
	// x-example: "ce1"
	// Site name
	Site string `protobuf:"bytes,5,opt,name=site,proto3" json:"site,omitempty"`
}

func (m *NetworkPolicyHitsId) Reset()      { *m = NetworkPolicyHitsId{} }
func (*NetworkPolicyHitsId) ProtoMessage() {}
func (*NetworkPolicyHitsId) Descriptor() ([]byte, []int) {
	return fileDescriptorPublicCustomDataApi, []int{2}
}

func (m *NetworkPolicyHitsId) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *NetworkPolicyHitsId) GetPolicy() string {
	if m != nil {
		return m.Policy
	}
	return ""
}

func (m *NetworkPolicyHitsId) GetPolicyRule() string {
	if m != nil {
		return m.PolicyRule
	}
	return ""
}

func (m *NetworkPolicyHitsId) GetAction() string {
	if m != nil {
		return m.Action
	}
	return ""
}

func (m *NetworkPolicyHitsId) GetSite() string {
	if m != nil {
		return m.Site
	}
	return ""
}

// Network Policy Hits
//
// x-displayName: "Network Policy Hits"
// NetworkPolicyHits contains the timeseries data of network policy hits
type NetworkPolicyHits struct {
	// ID
	//
	// x-displayName: "ID"
	// ID identifies the unique combination of group_by label values in the response
	Id *NetworkPolicyHitsId `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	// Metric
	//
	// x-displayName: "Metric"
	// x-unit: "count"
	// List of metric values
	Metric []*ves_io_schema4.MetricValue `protobuf:"bytes,2,rep,name=metric" json:"metric,omitempty"`
}

func (m *NetworkPolicyHits) Reset()      { *m = NetworkPolicyHits{} }
func (*NetworkPolicyHits) ProtoMessage() {}
func (*NetworkPolicyHits) Descriptor() ([]byte, []int) {
	return fileDescriptorPublicCustomDataApi, []int{3}
}

func (m *NetworkPolicyHits) GetId() *NetworkPolicyHitsId {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *NetworkPolicyHits) GetMetric() []*ves_io_schema4.MetricValue {
	if m != nil {
		return m.Metric
	}
	return nil
}

// Network Policy Hits Response
//
// x-displayName: "Network Policy Hits Response"
// Number of network policy rule hits for each unique combination of group_by labels in the request.
type NetworkPolicyHitsResponse struct {
	// Network policy Hits
	//
	// x-displayName: "Network Policy Hits"
	// List of network policy hits data
	Data []*NetworkPolicyHits `protobuf:"bytes,1,rep,name=data" json:"data,omitempty"`
}

func (m *NetworkPolicyHitsResponse) Reset()      { *m = NetworkPolicyHitsResponse{} }
func (*NetworkPolicyHitsResponse) ProtoMessage() {}
func (*NetworkPolicyHitsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptorPublicCustomDataApi, []int{4}
}

func (m *NetworkPolicyHitsResponse) GetData() []*NetworkPolicyHits {
	if m != nil {
		return m.Data
	}
	return nil
}

func init() {
	proto.RegisterType((*NetworkPolicyHitsRequest)(nil), "ves.io.schema.views.network_policy_view.NetworkPolicyHitsRequest")
	golang_proto.RegisterType((*NetworkPolicyHitsRequest)(nil), "ves.io.schema.views.network_policy_view.NetworkPolicyHitsRequest")
	proto.RegisterType((*NetworkPolicyMetricLabelFilter)(nil), "ves.io.schema.views.network_policy_view.NetworkPolicyMetricLabelFilter")
	golang_proto.RegisterType((*NetworkPolicyMetricLabelFilter)(nil), "ves.io.schema.views.network_policy_view.NetworkPolicyMetricLabelFilter")
	proto.RegisterType((*NetworkPolicyHitsId)(nil), "ves.io.schema.views.network_policy_view.NetworkPolicyHitsId")
	golang_proto.RegisterType((*NetworkPolicyHitsId)(nil), "ves.io.schema.views.network_policy_view.NetworkPolicyHitsId")
	proto.RegisterType((*NetworkPolicyHits)(nil), "ves.io.schema.views.network_policy_view.NetworkPolicyHits")
	golang_proto.RegisterType((*NetworkPolicyHits)(nil), "ves.io.schema.views.network_policy_view.NetworkPolicyHits")
	proto.RegisterType((*NetworkPolicyHitsResponse)(nil), "ves.io.schema.views.network_policy_view.NetworkPolicyHitsResponse")
	golang_proto.RegisterType((*NetworkPolicyHitsResponse)(nil), "ves.io.schema.views.network_policy_view.NetworkPolicyHitsResponse")
	proto.RegisterEnum("ves.io.schema.views.network_policy_view.NetworkPolicyMetricLabel", NetworkPolicyMetricLabel_name, NetworkPolicyMetricLabel_value)
	golang_proto.RegisterEnum("ves.io.schema.views.network_policy_view.NetworkPolicyMetricLabel", NetworkPolicyMetricLabel_name, NetworkPolicyMetricLabel_value)
}
func (x NetworkPolicyMetricLabel) String() string {
	s, ok := NetworkPolicyMetricLabel_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *NetworkPolicyHitsRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NetworkPolicyHitsRequest)
	if !ok {
		that2, ok := that.(NetworkPolicyHitsRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Namespace != that1.Namespace {
		return false
	}
	if len(this.LabelFilter) != len(that1.LabelFilter) {
		return false
	}
	for i := range this.LabelFilter {
		if !this.LabelFilter[i].Equal(that1.LabelFilter[i]) {
			return false
		}
	}
	if len(this.GroupBy) != len(that1.GroupBy) {
		return false
	}
	for i := range this.GroupBy {
		if this.GroupBy[i] != that1.GroupBy[i] {
			return false
		}
	}
	if this.StartTime != that1.StartTime {
		return false
	}
	if this.EndTime != that1.EndTime {
		return false
	}
	if this.Step != that1.Step {
		return false
	}
	return true
}
func (this *NetworkPolicyMetricLabelFilter) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NetworkPolicyMetricLabelFilter)
	if !ok {
		that2, ok := that.(NetworkPolicyMetricLabelFilter)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Label != that1.Label {
		return false
	}
	if this.Op != that1.Op {
		return false
	}
	if this.Value != that1.Value {
		return false
	}
	return true
}
func (this *NetworkPolicyHitsId) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NetworkPolicyHitsId)
	if !ok {
		that2, ok := that.(NetworkPolicyHitsId)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Namespace != that1.Namespace {
		return false
	}
	if this.Policy != that1.Policy {
		return false
	}
	if this.PolicyRule != that1.PolicyRule {
		return false
	}
	if this.Action != that1.Action {
		return false
	}
	if this.Site != that1.Site {
		return false
	}
	return true
}
func (this *NetworkPolicyHits) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NetworkPolicyHits)
	if !ok {
		that2, ok := that.(NetworkPolicyHits)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Id.Equal(that1.Id) {
		return false
	}
	if len(this.Metric) != len(that1.Metric) {
		return false
	}
	for i := range this.Metric {
		if !this.Metric[i].Equal(that1.Metric[i]) {
			return false
		}
	}
	return true
}
func (this *NetworkPolicyHitsResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NetworkPolicyHitsResponse)
	if !ok {
		that2, ok := that.(NetworkPolicyHitsResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Data) != len(that1.Data) {
		return false
	}
	for i := range this.Data {
		if !this.Data[i].Equal(that1.Data[i]) {
			return false
		}
	}
	return true
}
func (this *NetworkPolicyHitsRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&network_policy_view.NetworkPolicyHitsRequest{")
	s = append(s, "Namespace: "+fmt.Sprintf("%#v", this.Namespace)+",\n")
	if this.LabelFilter != nil {
		s = append(s, "LabelFilter: "+fmt.Sprintf("%#v", this.LabelFilter)+",\n")
	}
	s = append(s, "GroupBy: "+fmt.Sprintf("%#v", this.GroupBy)+",\n")
	s = append(s, "StartTime: "+fmt.Sprintf("%#v", this.StartTime)+",\n")
	s = append(s, "EndTime: "+fmt.Sprintf("%#v", this.EndTime)+",\n")
	s = append(s, "Step: "+fmt.Sprintf("%#v", this.Step)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *NetworkPolicyMetricLabelFilter) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&network_policy_view.NetworkPolicyMetricLabelFilter{")
	s = append(s, "Label: "+fmt.Sprintf("%#v", this.Label)+",\n")
	s = append(s, "Op: "+fmt.Sprintf("%#v", this.Op)+",\n")
	s = append(s, "Value: "+fmt.Sprintf("%#v", this.Value)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *NetworkPolicyHitsId) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&network_policy_view.NetworkPolicyHitsId{")
	s = append(s, "Namespace: "+fmt.Sprintf("%#v", this.Namespace)+",\n")
	s = append(s, "Policy: "+fmt.Sprintf("%#v", this.Policy)+",\n")
	s = append(s, "PolicyRule: "+fmt.Sprintf("%#v", this.PolicyRule)+",\n")
	s = append(s, "Action: "+fmt.Sprintf("%#v", this.Action)+",\n")
	s = append(s, "Site: "+fmt.Sprintf("%#v", this.Site)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *NetworkPolicyHits) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&network_policy_view.NetworkPolicyHits{")
	if this.Id != nil {
		s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	}
	if this.Metric != nil {
		s = append(s, "Metric: "+fmt.Sprintf("%#v", this.Metric)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *NetworkPolicyHitsResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&network_policy_view.NetworkPolicyHitsResponse{")
	if this.Data != nil {
		s = append(s, "Data: "+fmt.Sprintf("%#v", this.Data)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringPublicCustomDataApi(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for CustomDataAPI service

type CustomDataAPIClient interface {
	// Network Policy Hits
	//
	// x-displayName: "Network Policy Hits"
	// Get the counter for Network Policy hits for a given namespace.
	NetworkPolicyHits(ctx context.Context, in *NetworkPolicyHitsRequest, opts ...grpc.CallOption) (*NetworkPolicyHitsResponse, error)
}

type customDataAPIClient struct {
	cc *grpc.ClientConn
}

func NewCustomDataAPIClient(cc *grpc.ClientConn) CustomDataAPIClient {
	return &customDataAPIClient{cc}
}

func (c *customDataAPIClient) NetworkPolicyHits(ctx context.Context, in *NetworkPolicyHitsRequest, opts ...grpc.CallOption) (*NetworkPolicyHitsResponse, error) {
	out := new(NetworkPolicyHitsResponse)
	err := grpc.Invoke(ctx, "/ves.io.schema.views.network_policy_view.CustomDataAPI/NetworkPolicyHits", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for CustomDataAPI service

type CustomDataAPIServer interface {
	// Network Policy Hits
	//
	// x-displayName: "Network Policy Hits"
	// Get the counter for Network Policy hits for a given namespace.
	NetworkPolicyHits(context.Context, *NetworkPolicyHitsRequest) (*NetworkPolicyHitsResponse, error)
}

func RegisterCustomDataAPIServer(s *grpc.Server, srv CustomDataAPIServer) {
	s.RegisterService(&_CustomDataAPI_serviceDesc, srv)
}

func _CustomDataAPI_NetworkPolicyHits_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NetworkPolicyHitsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomDataAPIServer).NetworkPolicyHits(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ves.io.schema.views.network_policy_view.CustomDataAPI/NetworkPolicyHits",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomDataAPIServer).NetworkPolicyHits(ctx, req.(*NetworkPolicyHitsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _CustomDataAPI_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ves.io.schema.views.network_policy_view.CustomDataAPI",
	HandlerType: (*CustomDataAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "NetworkPolicyHits",
			Handler:    _CustomDataAPI_NetworkPolicyHits_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ves.io/schema/views/network_policy_view/public_custom_data_api.proto",
}

func (m *NetworkPolicyHitsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NetworkPolicyHitsRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Namespace) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPublicCustomDataApi(dAtA, i, uint64(len(m.Namespace)))
		i += copy(dAtA[i:], m.Namespace)
	}
	if len(m.LabelFilter) > 0 {
		for _, msg := range m.LabelFilter {
			dAtA[i] = 0x12
			i++
			i = encodeVarintPublicCustomDataApi(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.GroupBy) > 0 {
		dAtA2 := make([]byte, len(m.GroupBy)*10)
		var j1 int
		for _, num := range m.GroupBy {
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		dAtA[i] = 0x1a
		i++
		i = encodeVarintPublicCustomDataApi(dAtA, i, uint64(j1))
		i += copy(dAtA[i:], dAtA2[:j1])
	}
	if len(m.StartTime) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintPublicCustomDataApi(dAtA, i, uint64(len(m.StartTime)))
		i += copy(dAtA[i:], m.StartTime)
	}
	if len(m.EndTime) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintPublicCustomDataApi(dAtA, i, uint64(len(m.EndTime)))
		i += copy(dAtA[i:], m.EndTime)
	}
	if len(m.Step) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintPublicCustomDataApi(dAtA, i, uint64(len(m.Step)))
		i += copy(dAtA[i:], m.Step)
	}
	return i, nil
}

func (m *NetworkPolicyMetricLabelFilter) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NetworkPolicyMetricLabelFilter) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Label != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPublicCustomDataApi(dAtA, i, uint64(m.Label))
	}
	if m.Op != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPublicCustomDataApi(dAtA, i, uint64(m.Op))
	}
	if len(m.Value) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintPublicCustomDataApi(dAtA, i, uint64(len(m.Value)))
		i += copy(dAtA[i:], m.Value)
	}
	return i, nil
}

func (m *NetworkPolicyHitsId) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NetworkPolicyHitsId) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Namespace) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPublicCustomDataApi(dAtA, i, uint64(len(m.Namespace)))
		i += copy(dAtA[i:], m.Namespace)
	}
	if len(m.Policy) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintPublicCustomDataApi(dAtA, i, uint64(len(m.Policy)))
		i += copy(dAtA[i:], m.Policy)
	}
	if len(m.PolicyRule) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintPublicCustomDataApi(dAtA, i, uint64(len(m.PolicyRule)))
		i += copy(dAtA[i:], m.PolicyRule)
	}
	if len(m.Action) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintPublicCustomDataApi(dAtA, i, uint64(len(m.Action)))
		i += copy(dAtA[i:], m.Action)
	}
	if len(m.Site) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintPublicCustomDataApi(dAtA, i, uint64(len(m.Site)))
		i += copy(dAtA[i:], m.Site)
	}
	return i, nil
}

func (m *NetworkPolicyHits) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NetworkPolicyHits) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPublicCustomDataApi(dAtA, i, uint64(m.Id.Size()))
		n3, err := m.Id.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	if len(m.Metric) > 0 {
		for _, msg := range m.Metric {
			dAtA[i] = 0x12
			i++
			i = encodeVarintPublicCustomDataApi(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *NetworkPolicyHitsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NetworkPolicyHitsResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Data) > 0 {
		for _, msg := range m.Data {
			dAtA[i] = 0xa
			i++
			i = encodeVarintPublicCustomDataApi(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func encodeVarintPublicCustomDataApi(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *NetworkPolicyHitsRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovPublicCustomDataApi(uint64(l))
	}
	if len(m.LabelFilter) > 0 {
		for _, e := range m.LabelFilter {
			l = e.Size()
			n += 1 + l + sovPublicCustomDataApi(uint64(l))
		}
	}
	if len(m.GroupBy) > 0 {
		l = 0
		for _, e := range m.GroupBy {
			l += sovPublicCustomDataApi(uint64(e))
		}
		n += 1 + sovPublicCustomDataApi(uint64(l)) + l
	}
	l = len(m.StartTime)
	if l > 0 {
		n += 1 + l + sovPublicCustomDataApi(uint64(l))
	}
	l = len(m.EndTime)
	if l > 0 {
		n += 1 + l + sovPublicCustomDataApi(uint64(l))
	}
	l = len(m.Step)
	if l > 0 {
		n += 1 + l + sovPublicCustomDataApi(uint64(l))
	}
	return n
}

func (m *NetworkPolicyMetricLabelFilter) Size() (n int) {
	var l int
	_ = l
	if m.Label != 0 {
		n += 1 + sovPublicCustomDataApi(uint64(m.Label))
	}
	if m.Op != 0 {
		n += 1 + sovPublicCustomDataApi(uint64(m.Op))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovPublicCustomDataApi(uint64(l))
	}
	return n
}

func (m *NetworkPolicyHitsId) Size() (n int) {
	var l int
	_ = l
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovPublicCustomDataApi(uint64(l))
	}
	l = len(m.Policy)
	if l > 0 {
		n += 1 + l + sovPublicCustomDataApi(uint64(l))
	}
	l = len(m.PolicyRule)
	if l > 0 {
		n += 1 + l + sovPublicCustomDataApi(uint64(l))
	}
	l = len(m.Action)
	if l > 0 {
		n += 1 + l + sovPublicCustomDataApi(uint64(l))
	}
	l = len(m.Site)
	if l > 0 {
		n += 1 + l + sovPublicCustomDataApi(uint64(l))
	}
	return n
}

func (m *NetworkPolicyHits) Size() (n int) {
	var l int
	_ = l
	if m.Id != nil {
		l = m.Id.Size()
		n += 1 + l + sovPublicCustomDataApi(uint64(l))
	}
	if len(m.Metric) > 0 {
		for _, e := range m.Metric {
			l = e.Size()
			n += 1 + l + sovPublicCustomDataApi(uint64(l))
		}
	}
	return n
}

func (m *NetworkPolicyHitsResponse) Size() (n int) {
	var l int
	_ = l
	if len(m.Data) > 0 {
		for _, e := range m.Data {
			l = e.Size()
			n += 1 + l + sovPublicCustomDataApi(uint64(l))
		}
	}
	return n
}

func sovPublicCustomDataApi(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozPublicCustomDataApi(x uint64) (n int) {
	return sovPublicCustomDataApi(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *NetworkPolicyHitsRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&NetworkPolicyHitsRequest{`,
		`Namespace:` + fmt.Sprintf("%v", this.Namespace) + `,`,
		`LabelFilter:` + strings.Replace(fmt.Sprintf("%v", this.LabelFilter), "NetworkPolicyMetricLabelFilter", "NetworkPolicyMetricLabelFilter", 1) + `,`,
		`GroupBy:` + fmt.Sprintf("%v", this.GroupBy) + `,`,
		`StartTime:` + fmt.Sprintf("%v", this.StartTime) + `,`,
		`EndTime:` + fmt.Sprintf("%v", this.EndTime) + `,`,
		`Step:` + fmt.Sprintf("%v", this.Step) + `,`,
		`}`,
	}, "")
	return s
}
func (this *NetworkPolicyMetricLabelFilter) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&NetworkPolicyMetricLabelFilter{`,
		`Label:` + fmt.Sprintf("%v", this.Label) + `,`,
		`Op:` + fmt.Sprintf("%v", this.Op) + `,`,
		`Value:` + fmt.Sprintf("%v", this.Value) + `,`,
		`}`,
	}, "")
	return s
}
func (this *NetworkPolicyHitsId) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&NetworkPolicyHitsId{`,
		`Namespace:` + fmt.Sprintf("%v", this.Namespace) + `,`,
		`Policy:` + fmt.Sprintf("%v", this.Policy) + `,`,
		`PolicyRule:` + fmt.Sprintf("%v", this.PolicyRule) + `,`,
		`Action:` + fmt.Sprintf("%v", this.Action) + `,`,
		`Site:` + fmt.Sprintf("%v", this.Site) + `,`,
		`}`,
	}, "")
	return s
}
func (this *NetworkPolicyHits) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&NetworkPolicyHits{`,
		`Id:` + strings.Replace(fmt.Sprintf("%v", this.Id), "NetworkPolicyHitsId", "NetworkPolicyHitsId", 1) + `,`,
		`Metric:` + strings.Replace(fmt.Sprintf("%v", this.Metric), "MetricValue", "ves_io_schema4.MetricValue", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *NetworkPolicyHitsResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&NetworkPolicyHitsResponse{`,
		`Data:` + strings.Replace(fmt.Sprintf("%v", this.Data), "NetworkPolicyHits", "NetworkPolicyHits", 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringPublicCustomDataApi(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *NetworkPolicyHitsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCustomDataApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NetworkPolicyHitsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NetworkPolicyHitsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomDataApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomDataApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LabelFilter", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomDataApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCustomDataApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LabelFilter = append(m.LabelFilter, &NetworkPolicyMetricLabelFilter{})
			if err := m.LabelFilter[len(m.LabelFilter)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType == 0 {
				var v NetworkPolicyMetricLabel
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPublicCustomDataApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (NetworkPolicyMetricLabel(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.GroupBy = append(m.GroupBy, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPublicCustomDataApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthPublicCustomDataApi
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v NetworkPolicyMetricLabel
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPublicCustomDataApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (NetworkPolicyMetricLabel(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.GroupBy = append(m.GroupBy, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupBy", wireType)
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomDataApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomDataApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StartTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomDataApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomDataApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EndTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Step", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomDataApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomDataApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Step = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCustomDataApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCustomDataApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NetworkPolicyMetricLabelFilter) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCustomDataApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NetworkPolicyMetricLabelFilter: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NetworkPolicyMetricLabelFilter: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Label", wireType)
			}
			m.Label = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomDataApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Label |= (NetworkPolicyMetricLabel(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Op", wireType)
			}
			m.Op = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomDataApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Op |= (ves_io_schema4.MetricLabelOp(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomDataApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomDataApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCustomDataApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCustomDataApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NetworkPolicyHitsId) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCustomDataApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NetworkPolicyHitsId: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NetworkPolicyHitsId: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomDataApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomDataApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Policy", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomDataApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomDataApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Policy = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PolicyRule", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomDataApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomDataApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PolicyRule = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Action", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomDataApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomDataApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Action = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Site", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomDataApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomDataApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Site = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCustomDataApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCustomDataApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NetworkPolicyHits) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCustomDataApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NetworkPolicyHits: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NetworkPolicyHits: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomDataApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCustomDataApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Id == nil {
				m.Id = &NetworkPolicyHitsId{}
			}
			if err := m.Id.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metric", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomDataApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCustomDataApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Metric = append(m.Metric, &ves_io_schema4.MetricValue{})
			if err := m.Metric[len(m.Metric)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCustomDataApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCustomDataApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NetworkPolicyHitsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCustomDataApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NetworkPolicyHitsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NetworkPolicyHitsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomDataApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCustomDataApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data, &NetworkPolicyHits{})
			if err := m.Data[len(m.Data)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCustomDataApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCustomDataApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPublicCustomDataApi(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPublicCustomDataApi
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPublicCustomDataApi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPublicCustomDataApi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthPublicCustomDataApi
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowPublicCustomDataApi
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipPublicCustomDataApi(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthPublicCustomDataApi = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPublicCustomDataApi   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("ves.io/schema/views/network_policy_view/public_custom_data_api.proto", fileDescriptorPublicCustomDataApi)
}
func init() {
	golang_proto.RegisterFile("ves.io/schema/views/network_policy_view/public_custom_data_api.proto", fileDescriptorPublicCustomDataApi)
}

var fileDescriptorPublicCustomDataApi = []byte{
	// 801 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x55, 0x41, 0x8f, 0xdb, 0x44,
	0x14, 0xce, 0x38, 0xd9, 0x74, 0x77, 0x42, 0x21, 0x4c, 0x11, 0xf2, 0x86, 0xc5, 0xac, 0x7c, 0x61,
	0x55, 0x11, 0x5b, 0x0a, 0x07, 0xa4, 0x6a, 0x2f, 0xd9, 0x34, 0x40, 0xa4, 0x34, 0x89, 0xdc, 0x05,
	0x54, 0x54, 0x64, 0x8d, 0xed, 0x59, 0xef, 0x74, 0x6d, 0xcf, 0xe0, 0x19, 0xa7, 0x44, 0x08, 0x09,
	0xf5, 0x0f, 0x80, 0x84, 0x90, 0xf8, 0x09, 0xfc, 0x87, 0x0a, 0xa9, 0x17, 0x04, 0x27, 0xb4, 0x82,
	0x0b, 0x47, 0xd6, 0xe5, 0xc0, 0xb1, 0x17, 0xee, 0x28, 0x63, 0xa7, 0xdd, 0x6c, 0x23, 0x5a, 0xed,
	0xf6, 0xf6, 0xde, 0xfb, 0x3c, 0xdf, 0xbc, 0xef, 0xf3, 0xf3, 0x33, 0xbc, 0x3e, 0x25, 0xc2, 0xa2,
	0xcc, 0x16, 0xfe, 0x21, 0x89, 0xb1, 0x3d, 0xa5, 0xe4, 0xae, 0xb0, 0x13, 0x22, 0xef, 0xb2, 0xf4,
	0xc8, 0xe5, 0x2c, 0xa2, 0xfe, 0xcc, 0x9d, 0x17, 0x6d, 0x9e, 0x79, 0x11, 0xf5, 0x5d, 0x3f, 0x13,
	0x92, 0xc5, 0x6e, 0x80, 0x25, 0x76, 0x31, 0xa7, 0x16, 0x4f, 0x99, 0x64, 0xe8, 0xed, 0x82, 0xc5,
	0x2a, 0x58, 0x2c, 0xc5, 0x62, 0xad, 0x60, 0x69, 0xb5, 0x43, 0x2a, 0x0f, 0x33, 0xcf, 0xf2, 0x59,
	0x6c, 0x87, 0x2c, 0x64, 0xb6, 0x3a, 0xef, 0x65, 0x07, 0x2a, 0x53, 0x89, 0x8a, 0x0a, 0xde, 0xd6,
	0x56, 0xc8, 0x58, 0x18, 0x11, 0x1b, 0x73, 0x6a, 0xe3, 0x24, 0x61, 0x12, 0x4b, 0xca, 0x12, 0x51,
	0xa2, 0x6f, 0x2c, 0xf7, 0xce, 0xf8, 0x69, 0x70, 0x73, 0x19, 0x94, 0x33, 0x4e, 0x16, 0x90, 0x79,
	0x46, 0x33, 0x11, 0x24, 0x99, 0x2e, 0x1f, 0x37, 0x8f, 0x35, 0xa8, 0x8f, 0x0a, 0x01, 0x13, 0xd5,
	0xff, 0x87, 0x54, 0x0a, 0x87, 0x7c, 0x9e, 0x11, 0x21, 0xd1, 0x16, 0xdc, 0x48, 0x70, 0x4c, 0x04,
	0xc7, 0x3e, 0xd1, 0xc1, 0x36, 0xd8, 0xd9, 0x70, 0x9e, 0x14, 0xd0, 0x1d, 0xf8, 0x52, 0x84, 0x3d,
	0x12, 0xb9, 0x07, 0x34, 0x92, 0x24, 0xd5, 0xb5, 0xed, 0xea, 0x4e, 0xa3, 0xf3, 0x81, 0xf5, 0x9c,
	0x1e, 0x59, 0x4b, 0xd7, 0xde, 0x20, 0x32, 0xa5, 0xfe, 0x70, 0xce, 0xf7, 0xbe, 0xa2, 0x73, 0x1a,
	0xd1, 0x93, 0x04, 0xdd, 0x86, 0xeb, 0x61, 0xca, 0x32, 0xee, 0x7a, 0x33, 0xbd, 0xba, 0x5d, 0xdd,
	0x79, 0xb9, 0xd3, 0xbd, 0xf0, 0x3d, 0xce, 0x25, 0x45, 0xb9, 0x37, 0x43, 0x6f, 0x42, 0x28, 0x24,
	0x4e, 0xa5, 0x2b, 0x69, 0x4c, 0xf4, 0x5a, 0x21, 0x54, 0x55, 0xf6, 0x69, 0x4c, 0xd0, 0x26, 0x5c,
	0x27, 0x49, 0x50, 0x80, 0x6b, 0x0a, 0xbc, 0x44, 0x92, 0x40, 0x41, 0x08, 0xd6, 0x84, 0x24, 0x5c,
	0xaf, 0xab, 0xb2, 0x8a, 0xcd, 0x9f, 0x00, 0x34, 0xfe, 0x5f, 0x1b, 0xfa, 0x04, 0xae, 0x29, 0x75,
	0xca, 0xd4, 0x17, 0xa2, 0xa5, 0xe0, 0x43, 0xef, 0x40, 0x8d, 0x71, 0x5d, 0x53, 0xac, 0x5b, 0x67,
	0x58, 0x4f, 0x3d, 0x3e, 0xe6, 0x8e, 0xc6, 0x38, 0x7a, 0x0d, 0xae, 0x4d, 0x71, 0x94, 0x11, 0xbd,
	0xaa, 0xda, 0x2f, 0x12, 0xf3, 0x07, 0x00, 0xaf, 0x3c, 0x35, 0x12, 0x83, 0xe0, 0x19, 0xd3, 0xf0,
	0x3a, 0xac, 0x17, 0x8d, 0xaa, 0xdb, 0x37, 0x9c, 0x32, 0x43, 0x6f, 0xc1, 0x46, 0x29, 0x20, 0xcd,
	0xa2, 0xc5, 0x4d, 0xb0, 0x28, 0x39, 0x59, 0xa4, 0x0e, 0x62, 0x7f, 0x3e, 0x92, 0xa5, 0xf1, 0x65,
	0xa6, 0xac, 0xa5, 0x72, 0xe1, 0xb8, 0x8a, 0xcd, 0xef, 0x01, 0x7c, 0xf5, 0xa9, 0xd6, 0xd0, 0x10,
	0x6a, 0x34, 0x50, 0x1d, 0x35, 0x3a, 0xbb, 0xe7, 0xb3, 0xb2, 0x90, 0xe8, 0x68, 0x34, 0x40, 0x1d,
	0x58, 0x8f, 0x95, 0x53, 0xe5, 0x40, 0xb7, 0x56, 0xda, 0xf8, 0xf1, 0xdc, 0x2a, 0xa7, 0x7c, 0xd2,
	0x3c, 0x82, 0x9b, 0x2b, 0x3e, 0x22, 0xc1, 0x59, 0x22, 0x08, 0x1a, 0xc1, 0xda, 0x7c, 0x8d, 0xe8,
	0x40, 0xd1, 0x5d, 0x3b, 0x7f, 0x83, 0x8e, 0xe2, 0xb9, 0x7a, 0xfb, 0xcc, 0x17, 0x7b, 0xea, 0xbd,
	0xa2, 0xcb, 0x70, 0x63, 0xd4, 0xbd, 0xd1, 0xbf, 0x39, 0xe9, 0xf6, 0xfa, 0xcd, 0x0a, 0x82, 0xb0,
	0x3e, 0x19, 0x0f, 0x07, 0xbd, 0x5b, 0x4d, 0x80, 0x5e, 0x81, 0x8d, 0x22, 0x76, 0x9d, 0x8f, 0x86,
	0xfd, 0xa6, 0x36, 0x07, 0xbb, 0xbd, 0xfd, 0xc1, 0x78, 0xd4, 0xac, 0xa2, 0x75, 0x58, 0xbb, 0x39,
	0xd8, 0xef, 0x37, 0x6b, 0x9d, 0x9f, 0x35, 0x78, 0xb9, 0xa7, 0x96, 0xdf, 0x75, 0x2c, 0x71, 0x77,
	0x32, 0x40, 0xff, 0xae, 0x34, 0xbd, 0x7b, 0x01, 0x1d, 0xc5, 0x7a, 0x69, 0xed, 0x5d, 0x84, 0xa2,
	0x30, 0xd7, 0xbc, 0x95, 0xff, 0xa2, 0x5f, 0x99, 0x12, 0xd1, 0xa6, 0xac, 0x1d, 0x92, 0x84, 0xa4,
	0x38, 0x6a, 0xa7, 0x04, 0x07, 0xf7, 0xfe, 0xf8, 0xfb, 0x3b, 0x6d, 0xd7, 0x7c, 0xaf, 0xdc, 0xe7,
	0xf6, 0xe3, 0x41, 0x15, 0xf6, 0x97, 0x8f, 0xe3, 0xaf, 0x56, 0xfe, 0x01, 0x0e, 0xa9, 0x14, 0xd7,
	0xc0, 0xd5, 0xd6, 0xee, 0x83, 0xfb, 0xa0, 0xfa, 0xfb, 0x7d, 0xf0, 0xdc, 0x5d, 0x8e, 0xbd, 0x3b,
	0xc4, 0x97, 0xf7, 0x7e, 0xd3, 0x35, 0x1d, 0xec, 0x7d, 0x03, 0x8e, 0x4f, 0x8c, 0xca, 0x9f, 0x27,
	0x46, 0xe5, 0xd1, 0x89, 0x01, 0xbe, 0xce, 0x0d, 0xf0, 0x63, 0x6e, 0x80, 0x5f, 0x73, 0x03, 0x1c,
	0xe7, 0x06, 0xf8, 0x2b, 0x37, 0xc0, 0x3f, 0xb9, 0x51, 0x79, 0x94, 0x1b, 0xe0, 0xdb, 0x87, 0x46,
	0xe5, 0xc1, 0x43, 0x03, 0x7c, 0xfa, 0x59, 0xc8, 0xf8, 0x51, 0x68, 0x4d, 0xd9, 0x7c, 0x47, 0xa4,
	0xd8, 0xca, 0x84, 0xad, 0x82, 0x03, 0x96, 0xc6, 0x6d, 0x9e, 0xb2, 0x29, 0x0d, 0x48, 0xda, 0x5e,
	0xc0, 0x36, 0xf7, 0x42, 0x66, 0x93, 0x2f, 0x64, 0xb9, 0xde, 0x9f, 0xf5, 0x67, 0xf3, 0xea, 0x6a,
	0xe3, 0xbf, 0xfb, 0x5f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xe7, 0x5e, 0xe2, 0xcb, 0x0b, 0x07, 0x00,
	0x00,
}
