// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ves.io/schema/views/origin_pool/types.proto

package origin_pool

import proto "github.com/gogo/protobuf/proto"
import golang_proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"
import ves_io_schema_cluster "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/cluster"
import _ "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/healthcheck"
import _ "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
import ves_io_schema4 "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
import _ "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
import _ "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
import ves_io_schema_views "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/views"

import strings "strings"
import reflect "reflect"
import sortkeys "github.com/gogo/protobuf/sortkeys"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// OriginServerPublicIP
//
// x-displayName: "Public IP"
// Specify origin server with public IP address
type OriginServerPublicIP struct {
	// IP
	//
	// x-displayName: "Public IP"
	// x-required
	// Public IP address
	Ip string `protobuf:"bytes,1,opt,name=ip,proto3" json:"ip,omitempty"`
}

func (m *OriginServerPublicIP) Reset()                    { *m = OriginServerPublicIP{} }
func (*OriginServerPublicIP) ProtoMessage()               {}
func (*OriginServerPublicIP) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{0} }

func (m *OriginServerPublicIP) GetIp() string {
	if m != nil {
		return m.Ip
	}
	return ""
}

// OriginServerPublicName
//
// x-displayName: "Public DNS Name"
// Specify origin server with public DNS name
type OriginServerPublicName struct {
	// DNS name
	//
	// x-displayName: "DNS Name"
	// x-required
	// DNS Name
	DnsName string `protobuf:"bytes,1,opt,name=dns_name,json=dnsName,proto3" json:"dns_name,omitempty"`
}

func (m *OriginServerPublicName) Reset()                    { *m = OriginServerPublicName{} }
func (*OriginServerPublicName) ProtoMessage()               {}
func (*OriginServerPublicName) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{1} }

func (m *OriginServerPublicName) GetDnsName() string {
	if m != nil {
		return m.DnsName
	}
	return ""
}

// OriginServerPrivateIP
//
// x-displayName: "IP address on given Sites"
// Specify origin server with private or public IP address and site information
type OriginServerPrivateIP struct {
	// IP
	//
	// x-displayName: "IP"
	// x-required
	// IP address
	Ip string `protobuf:"bytes,1,opt,name=ip,proto3" json:"ip,omitempty"`
	// Site Locator
	//
	// x-displayName: "Site or Virtual Site"
	// x-required
	// Site or Virtual site where this origin server is located
	SiteLocator *ves_io_schema_views.SiteLocator `protobuf:"bytes,2,opt,name=site_locator,json=siteLocator" json:"site_locator,omitempty"`
	// Site Network
	//
	// x-displayName: "Select Network on the site"
	// x-required
	// Inside or Outside Network
	//
	// Types that are valid to be assigned to NetworkChoice:
	//	*OriginServerPrivateIP_InsideNetwork
	//	*OriginServerPrivateIP_OutsideNetwork
	NetworkChoice isOriginServerPrivateIP_NetworkChoice `protobuf_oneof:"network_choice"`
}

func (m *OriginServerPrivateIP) Reset()                    { *m = OriginServerPrivateIP{} }
func (*OriginServerPrivateIP) ProtoMessage()               {}
func (*OriginServerPrivateIP) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{2} }

type isOriginServerPrivateIP_NetworkChoice interface {
	isOriginServerPrivateIP_NetworkChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type OriginServerPrivateIP_InsideNetwork struct {
	InsideNetwork *ves_io_schema4.Empty `protobuf:"bytes,4,opt,name=inside_network,json=insideNetwork,oneof"`
}
type OriginServerPrivateIP_OutsideNetwork struct {
	OutsideNetwork *ves_io_schema4.Empty `protobuf:"bytes,5,opt,name=outside_network,json=outsideNetwork,oneof"`
}

func (*OriginServerPrivateIP_InsideNetwork) isOriginServerPrivateIP_NetworkChoice()  {}
func (*OriginServerPrivateIP_OutsideNetwork) isOriginServerPrivateIP_NetworkChoice() {}

func (m *OriginServerPrivateIP) GetNetworkChoice() isOriginServerPrivateIP_NetworkChoice {
	if m != nil {
		return m.NetworkChoice
	}
	return nil
}

func (m *OriginServerPrivateIP) GetIp() string {
	if m != nil {
		return m.Ip
	}
	return ""
}

func (m *OriginServerPrivateIP) GetSiteLocator() *ves_io_schema_views.SiteLocator {
	if m != nil {
		return m.SiteLocator
	}
	return nil
}

func (m *OriginServerPrivateIP) GetInsideNetwork() *ves_io_schema4.Empty {
	if x, ok := m.GetNetworkChoice().(*OriginServerPrivateIP_InsideNetwork); ok {
		return x.InsideNetwork
	}
	return nil
}

func (m *OriginServerPrivateIP) GetOutsideNetwork() *ves_io_schema4.Empty {
	if x, ok := m.GetNetworkChoice().(*OriginServerPrivateIP_OutsideNetwork); ok {
		return x.OutsideNetwork
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*OriginServerPrivateIP) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _OriginServerPrivateIP_OneofMarshaler, _OriginServerPrivateIP_OneofUnmarshaler, _OriginServerPrivateIP_OneofSizer, []interface{}{
		(*OriginServerPrivateIP_InsideNetwork)(nil),
		(*OriginServerPrivateIP_OutsideNetwork)(nil),
	}
}

func _OriginServerPrivateIP_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*OriginServerPrivateIP)
	// network_choice
	switch x := m.NetworkChoice.(type) {
	case *OriginServerPrivateIP_InsideNetwork:
		_ = b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.InsideNetwork); err != nil {
			return err
		}
	case *OriginServerPrivateIP_OutsideNetwork:
		_ = b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.OutsideNetwork); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("OriginServerPrivateIP.NetworkChoice has unexpected type %T", x)
	}
	return nil
}

func _OriginServerPrivateIP_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*OriginServerPrivateIP)
	switch tag {
	case 4: // network_choice.inside_network
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.NetworkChoice = &OriginServerPrivateIP_InsideNetwork{msg}
		return true, err
	case 5: // network_choice.outside_network
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.NetworkChoice = &OriginServerPrivateIP_OutsideNetwork{msg}
		return true, err
	default:
		return false, nil
	}
}

func _OriginServerPrivateIP_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*OriginServerPrivateIP)
	// network_choice
	switch x := m.NetworkChoice.(type) {
	case *OriginServerPrivateIP_InsideNetwork:
		s := proto.Size(x.InsideNetwork)
		n += proto.SizeVarint(4<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *OriginServerPrivateIP_OutsideNetwork:
		s := proto.Size(x.OutsideNetwork)
		n += proto.SizeVarint(5<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// OriginServerPrivateName
//
// x-displayName: "DNS Name on given Sites"
// Specify origin server with private or public DNS name and site information
type OriginServerPrivateName struct {
	// DNS name
	//
	// x-displayName: "DNS Name"
	// x-required
	// DNS Name
	DnsName string `protobuf:"bytes,1,opt,name=dns_name,json=dnsName,proto3" json:"dns_name,omitempty"`
	// Site Locator
	//
	// x-displayName: "Site or Virtual Site"
	// x-required
	// Site or Virtual site where this origin server is located
	SiteLocator *ves_io_schema_views.SiteLocator `protobuf:"bytes,2,opt,name=site_locator,json=siteLocator" json:"site_locator,omitempty"`
	// Site Network
	//
	// x-displayName: "Select Network on the site"
	// x-required
	// Inside or Outside Network
	//
	// Types that are valid to be assigned to NetworkChoice:
	//	*OriginServerPrivateName_InsideNetwork
	//	*OriginServerPrivateName_OutsideNetwork
	NetworkChoice isOriginServerPrivateName_NetworkChoice `protobuf_oneof:"network_choice"`
}

func (m *OriginServerPrivateName) Reset()                    { *m = OriginServerPrivateName{} }
func (*OriginServerPrivateName) ProtoMessage()               {}
func (*OriginServerPrivateName) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{3} }

type isOriginServerPrivateName_NetworkChoice interface {
	isOriginServerPrivateName_NetworkChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type OriginServerPrivateName_InsideNetwork struct {
	InsideNetwork *ves_io_schema4.Empty `protobuf:"bytes,4,opt,name=inside_network,json=insideNetwork,oneof"`
}
type OriginServerPrivateName_OutsideNetwork struct {
	OutsideNetwork *ves_io_schema4.Empty `protobuf:"bytes,5,opt,name=outside_network,json=outsideNetwork,oneof"`
}

func (*OriginServerPrivateName_InsideNetwork) isOriginServerPrivateName_NetworkChoice()  {}
func (*OriginServerPrivateName_OutsideNetwork) isOriginServerPrivateName_NetworkChoice() {}

func (m *OriginServerPrivateName) GetNetworkChoice() isOriginServerPrivateName_NetworkChoice {
	if m != nil {
		return m.NetworkChoice
	}
	return nil
}

func (m *OriginServerPrivateName) GetDnsName() string {
	if m != nil {
		return m.DnsName
	}
	return ""
}

func (m *OriginServerPrivateName) GetSiteLocator() *ves_io_schema_views.SiteLocator {
	if m != nil {
		return m.SiteLocator
	}
	return nil
}

func (m *OriginServerPrivateName) GetInsideNetwork() *ves_io_schema4.Empty {
	if x, ok := m.GetNetworkChoice().(*OriginServerPrivateName_InsideNetwork); ok {
		return x.InsideNetwork
	}
	return nil
}

func (m *OriginServerPrivateName) GetOutsideNetwork() *ves_io_schema4.Empty {
	if x, ok := m.GetNetworkChoice().(*OriginServerPrivateName_OutsideNetwork); ok {
		return x.OutsideNetwork
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*OriginServerPrivateName) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _OriginServerPrivateName_OneofMarshaler, _OriginServerPrivateName_OneofUnmarshaler, _OriginServerPrivateName_OneofSizer, []interface{}{
		(*OriginServerPrivateName_InsideNetwork)(nil),
		(*OriginServerPrivateName_OutsideNetwork)(nil),
	}
}

func _OriginServerPrivateName_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*OriginServerPrivateName)
	// network_choice
	switch x := m.NetworkChoice.(type) {
	case *OriginServerPrivateName_InsideNetwork:
		_ = b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.InsideNetwork); err != nil {
			return err
		}
	case *OriginServerPrivateName_OutsideNetwork:
		_ = b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.OutsideNetwork); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("OriginServerPrivateName.NetworkChoice has unexpected type %T", x)
	}
	return nil
}

func _OriginServerPrivateName_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*OriginServerPrivateName)
	switch tag {
	case 4: // network_choice.inside_network
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.NetworkChoice = &OriginServerPrivateName_InsideNetwork{msg}
		return true, err
	case 5: // network_choice.outside_network
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.NetworkChoice = &OriginServerPrivateName_OutsideNetwork{msg}
		return true, err
	default:
		return false, nil
	}
}

func _OriginServerPrivateName_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*OriginServerPrivateName)
	// network_choice
	switch x := m.NetworkChoice.(type) {
	case *OriginServerPrivateName_InsideNetwork:
		s := proto.Size(x.InsideNetwork)
		n += proto.SizeVarint(4<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *OriginServerPrivateName_OutsideNetwork:
		s := proto.Size(x.OutsideNetwork)
		n += proto.SizeVarint(5<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// OriginServerVirtualNetworkPrivateIP
//
// x-displayName: "IP address in Virtual Network"
// Specify origin server with IP on VoltADN Private Network
type OriginServerVirtualNetworkPrivateIP struct {
	// IP
	//
	// x-displayName: "IP"
	// x-required
	// IP address
	Ip string `protobuf:"bytes,1,opt,name=ip,proto3" json:"ip,omitempty"`
	// Virtual Network
	//
	// x-displayName: "Virtual Network"
	// x-required
	// Virtual Network where this IP will be present
	VirtualNetwork *ves_io_schema_views.ObjectRefType `protobuf:"bytes,2,opt,name=virtual_network,json=virtualNetwork" json:"virtual_network,omitempty"`
}

func (m *OriginServerVirtualNetworkPrivateIP) Reset()      { *m = OriginServerVirtualNetworkPrivateIP{} }
func (*OriginServerVirtualNetworkPrivateIP) ProtoMessage() {}
func (*OriginServerVirtualNetworkPrivateIP) Descriptor() ([]byte, []int) {
	return fileDescriptorTypes, []int{4}
}

func (m *OriginServerVirtualNetworkPrivateIP) GetIp() string {
	if m != nil {
		return m.Ip
	}
	return ""
}

func (m *OriginServerVirtualNetworkPrivateIP) GetVirtualNetwork() *ves_io_schema_views.ObjectRefType {
	if m != nil {
		return m.VirtualNetwork
	}
	return nil
}

// OriginServerVirtualNetworkPrivateName
//
// x-displayName: "DNS Name in Virtual Network"
// Specify origin server with DNS name on VoltADN private Network
type OriginServerVirtualNetworkPrivateName struct {
	// DNS name
	//
	// x-displayName: "DNS Name"
	// x-required
	// DNS Name
	DnsName string `protobuf:"bytes,1,opt,name=dns_name,json=dnsName,proto3" json:"dns_name,omitempty"`
	// Virtual Network
	//
	// x-displayName: "Virtual Network"
	// x-required
	// Virtual Network where this Name will be present
	PrivateNetwork *ves_io_schema_views.ObjectRefType `protobuf:"bytes,2,opt,name=private_network,json=privateNetwork" json:"private_network,omitempty"`
}

func (m *OriginServerVirtualNetworkPrivateName) Reset()      { *m = OriginServerVirtualNetworkPrivateName{} }
func (*OriginServerVirtualNetworkPrivateName) ProtoMessage() {}
func (*OriginServerVirtualNetworkPrivateName) Descriptor() ([]byte, []int) {
	return fileDescriptorTypes, []int{5}
}

func (m *OriginServerVirtualNetworkPrivateName) GetDnsName() string {
	if m != nil {
		return m.DnsName
	}
	return ""
}

func (m *OriginServerVirtualNetworkPrivateName) GetPrivateNetwork() *ves_io_schema_views.ObjectRefType {
	if m != nil {
		return m.PrivateNetwork
	}
	return nil
}

// OriginServerK8SService
//
// x-displayName: "K8s Service Name on given Sites"
// Specify origin server with K8s service name and site information
type OriginServerK8SService struct {
	// Service Name
	//
	// x-displayName: "Service Name"
	// x-required
	// K8s service name of the origin server, including the namespace (servicename.namespace). For example, if the servicename is "frontend" and namespace is "speedtest", then you will enter "frontend.speedtest".
	ServiceName string `protobuf:"bytes,1,opt,name=service_name,json=serviceName,proto3" json:"service_name,omitempty"`
	// Site Locator
	//
	// x-displayName: "Site or Virtual Site"
	// x-required
	// Site or Virtual site where this origin server is located
	SiteLocator *ves_io_schema_views.SiteLocator `protobuf:"bytes,2,opt,name=site_locator,json=siteLocator" json:"site_locator,omitempty"`
	// Site Network
	//
	// x-displayName: "Select Network on the site"
	// x-required
	// Inside or Outside Network
	//
	// Types that are valid to be assigned to NetworkChoice:
	//	*OriginServerK8SService_InsideNetwork
	//	*OriginServerK8SService_OutsideNetwork
	//	*OriginServerK8SService_Vk8SNetworks
	NetworkChoice isOriginServerK8SService_NetworkChoice `protobuf_oneof:"network_choice"`
}

func (m *OriginServerK8SService) Reset()                    { *m = OriginServerK8SService{} }
func (*OriginServerK8SService) ProtoMessage()               {}
func (*OriginServerK8SService) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{6} }

type isOriginServerK8SService_NetworkChoice interface {
	isOriginServerK8SService_NetworkChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type OriginServerK8SService_InsideNetwork struct {
	InsideNetwork *ves_io_schema4.Empty `protobuf:"bytes,4,opt,name=inside_network,json=insideNetwork,oneof"`
}
type OriginServerK8SService_OutsideNetwork struct {
	OutsideNetwork *ves_io_schema4.Empty `protobuf:"bytes,5,opt,name=outside_network,json=outsideNetwork,oneof"`
}
type OriginServerK8SService_Vk8SNetworks struct {
	Vk8SNetworks *ves_io_schema4.Empty `protobuf:"bytes,6,opt,name=vk8s_networks,json=vk8sNetworks,oneof"`
}

func (*OriginServerK8SService_InsideNetwork) isOriginServerK8SService_NetworkChoice()  {}
func (*OriginServerK8SService_OutsideNetwork) isOriginServerK8SService_NetworkChoice() {}
func (*OriginServerK8SService_Vk8SNetworks) isOriginServerK8SService_NetworkChoice()   {}

func (m *OriginServerK8SService) GetNetworkChoice() isOriginServerK8SService_NetworkChoice {
	if m != nil {
		return m.NetworkChoice
	}
	return nil
}

func (m *OriginServerK8SService) GetServiceName() string {
	if m != nil {
		return m.ServiceName
	}
	return ""
}

func (m *OriginServerK8SService) GetSiteLocator() *ves_io_schema_views.SiteLocator {
	if m != nil {
		return m.SiteLocator
	}
	return nil
}

func (m *OriginServerK8SService) GetInsideNetwork() *ves_io_schema4.Empty {
	if x, ok := m.GetNetworkChoice().(*OriginServerK8SService_InsideNetwork); ok {
		return x.InsideNetwork
	}
	return nil
}

func (m *OriginServerK8SService) GetOutsideNetwork() *ves_io_schema4.Empty {
	if x, ok := m.GetNetworkChoice().(*OriginServerK8SService_OutsideNetwork); ok {
		return x.OutsideNetwork
	}
	return nil
}

func (m *OriginServerK8SService) GetVk8SNetworks() *ves_io_schema4.Empty {
	if x, ok := m.GetNetworkChoice().(*OriginServerK8SService_Vk8SNetworks); ok {
		return x.Vk8SNetworks
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*OriginServerK8SService) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _OriginServerK8SService_OneofMarshaler, _OriginServerK8SService_OneofUnmarshaler, _OriginServerK8SService_OneofSizer, []interface{}{
		(*OriginServerK8SService_InsideNetwork)(nil),
		(*OriginServerK8SService_OutsideNetwork)(nil),
		(*OriginServerK8SService_Vk8SNetworks)(nil),
	}
}

func _OriginServerK8SService_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*OriginServerK8SService)
	// network_choice
	switch x := m.NetworkChoice.(type) {
	case *OriginServerK8SService_InsideNetwork:
		_ = b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.InsideNetwork); err != nil {
			return err
		}
	case *OriginServerK8SService_OutsideNetwork:
		_ = b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.OutsideNetwork); err != nil {
			return err
		}
	case *OriginServerK8SService_Vk8SNetworks:
		_ = b.EncodeVarint(6<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Vk8SNetworks); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("OriginServerK8SService.NetworkChoice has unexpected type %T", x)
	}
	return nil
}

func _OriginServerK8SService_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*OriginServerK8SService)
	switch tag {
	case 4: // network_choice.inside_network
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.NetworkChoice = &OriginServerK8SService_InsideNetwork{msg}
		return true, err
	case 5: // network_choice.outside_network
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.NetworkChoice = &OriginServerK8SService_OutsideNetwork{msg}
		return true, err
	case 6: // network_choice.vk8s_networks
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.NetworkChoice = &OriginServerK8SService_Vk8SNetworks{msg}
		return true, err
	default:
		return false, nil
	}
}

func _OriginServerK8SService_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*OriginServerK8SService)
	// network_choice
	switch x := m.NetworkChoice.(type) {
	case *OriginServerK8SService_InsideNetwork:
		s := proto.Size(x.InsideNetwork)
		n += proto.SizeVarint(4<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *OriginServerK8SService_OutsideNetwork:
		s := proto.Size(x.OutsideNetwork)
		n += proto.SizeVarint(5<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *OriginServerK8SService_Vk8SNetworks:
		s := proto.Size(x.Vk8SNetworks)
		n += proto.SizeVarint(6<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// OriginServerConsulService
//
// x-displayName: "Consul Service Name on given Sites"
// Specify origin server with Hashi Corp Consul service name and site information
type OriginServerConsulService struct {
	// Service Name
	//
	// x-displayName: "Service Name"
	// x-required
	// Consul service name of this origin server
	ServiceName string `protobuf:"bytes,1,opt,name=service_name,json=serviceName,proto3" json:"service_name,omitempty"`
	// Site Locator
	//
	// x-displayName: "Site or Virtual Site"
	// x-required
	// Site or Virtual site where this origin server is located
	SiteLocator *ves_io_schema_views.SiteLocator `protobuf:"bytes,2,opt,name=site_locator,json=siteLocator" json:"site_locator,omitempty"`
	// Site Network
	//
	// x-displayName: "Select Network on the site"
	// x-required
	// Inside or Outside Network
	//
	// Types that are valid to be assigned to NetworkChoice:
	//	*OriginServerConsulService_InsideNetwork
	//	*OriginServerConsulService_OutsideNetwork
	NetworkChoice isOriginServerConsulService_NetworkChoice `protobuf_oneof:"network_choice"`
}

func (m *OriginServerConsulService) Reset()                    { *m = OriginServerConsulService{} }
func (*OriginServerConsulService) ProtoMessage()               {}
func (*OriginServerConsulService) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{7} }

type isOriginServerConsulService_NetworkChoice interface {
	isOriginServerConsulService_NetworkChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type OriginServerConsulService_InsideNetwork struct {
	InsideNetwork *ves_io_schema4.Empty `protobuf:"bytes,4,opt,name=inside_network,json=insideNetwork,oneof"`
}
type OriginServerConsulService_OutsideNetwork struct {
	OutsideNetwork *ves_io_schema4.Empty `protobuf:"bytes,5,opt,name=outside_network,json=outsideNetwork,oneof"`
}

func (*OriginServerConsulService_InsideNetwork) isOriginServerConsulService_NetworkChoice()  {}
func (*OriginServerConsulService_OutsideNetwork) isOriginServerConsulService_NetworkChoice() {}

func (m *OriginServerConsulService) GetNetworkChoice() isOriginServerConsulService_NetworkChoice {
	if m != nil {
		return m.NetworkChoice
	}
	return nil
}

func (m *OriginServerConsulService) GetServiceName() string {
	if m != nil {
		return m.ServiceName
	}
	return ""
}

func (m *OriginServerConsulService) GetSiteLocator() *ves_io_schema_views.SiteLocator {
	if m != nil {
		return m.SiteLocator
	}
	return nil
}

func (m *OriginServerConsulService) GetInsideNetwork() *ves_io_schema4.Empty {
	if x, ok := m.GetNetworkChoice().(*OriginServerConsulService_InsideNetwork); ok {
		return x.InsideNetwork
	}
	return nil
}

func (m *OriginServerConsulService) GetOutsideNetwork() *ves_io_schema4.Empty {
	if x, ok := m.GetNetworkChoice().(*OriginServerConsulService_OutsideNetwork); ok {
		return x.OutsideNetwork
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*OriginServerConsulService) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _OriginServerConsulService_OneofMarshaler, _OriginServerConsulService_OneofUnmarshaler, _OriginServerConsulService_OneofSizer, []interface{}{
		(*OriginServerConsulService_InsideNetwork)(nil),
		(*OriginServerConsulService_OutsideNetwork)(nil),
	}
}

func _OriginServerConsulService_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*OriginServerConsulService)
	// network_choice
	switch x := m.NetworkChoice.(type) {
	case *OriginServerConsulService_InsideNetwork:
		_ = b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.InsideNetwork); err != nil {
			return err
		}
	case *OriginServerConsulService_OutsideNetwork:
		_ = b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.OutsideNetwork); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("OriginServerConsulService.NetworkChoice has unexpected type %T", x)
	}
	return nil
}

func _OriginServerConsulService_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*OriginServerConsulService)
	switch tag {
	case 4: // network_choice.inside_network
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.NetworkChoice = &OriginServerConsulService_InsideNetwork{msg}
		return true, err
	case 5: // network_choice.outside_network
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.NetworkChoice = &OriginServerConsulService_OutsideNetwork{msg}
		return true, err
	default:
		return false, nil
	}
}

func _OriginServerConsulService_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*OriginServerConsulService)
	// network_choice
	switch x := m.NetworkChoice.(type) {
	case *OriginServerConsulService_InsideNetwork:
		s := proto.Size(x.InsideNetwork)
		n += proto.SizeVarint(4<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *OriginServerConsulService_OutsideNetwork:
		s := proto.Size(x.OutsideNetwork)
		n += proto.SizeVarint(5<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// OriginServerCustomEndpoint
//
// x-displayName: "Custom Endpoint Object for Origin Server"
// Specify origin server with a reference to endpoint object
type OriginServerCustomEndpoint struct {
	// Endpoint
	//
	// x-displayName: "Endpoint"
	// x-required
	// Reference to an endpoint object
	Endpoint *ves_io_schema_views.ObjectRefType `protobuf:"bytes,1,opt,name=endpoint" json:"endpoint,omitempty"`
}

func (m *OriginServerCustomEndpoint) Reset()                    { *m = OriginServerCustomEndpoint{} }
func (*OriginServerCustomEndpoint) ProtoMessage()               {}
func (*OriginServerCustomEndpoint) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{8} }

func (m *OriginServerCustomEndpoint) GetEndpoint() *ves_io_schema_views.ObjectRefType {
	if m != nil {
		return m.Endpoint
	}
	return nil
}

// OriginServerType
//
// x-displayName: "Origin Server"
// Various options to specify origin server
type OriginServerType struct {
	// Origin Server Type
	//
	// x-displayName: "Select Type of Origin Server"
	// x-required
	// Various options to specify origin server
	//
	// Types that are valid to be assigned to Choice:
	//	*OriginServerType_PublicIp
	//	*OriginServerType_PublicName
	//	*OriginServerType_PrivateIp
	//	*OriginServerType_PrivateName
	//	*OriginServerType_K8SService
	//	*OriginServerType_ConsulService
	//	*OriginServerType_CustomEndpointObject
	//	*OriginServerType_VoltadnPrivateIp
	//	*OriginServerType_VoltadnPrivateName
	//	*OriginServerType_Srv6PrivateIp
	//	*OriginServerType_Srv6PrivateName
	Choice isOriginServerType_Choice `protobuf_oneof:"choice"`
	// Origin Server Labels
	//
	// x-displayName: "Origin Server Labels"
	// Add Labels for this origin server, these labels can be used to form subset.
	Labels map[string]string `protobuf:"bytes,9,rep,name=labels" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *OriginServerType) Reset()                    { *m = OriginServerType{} }
func (*OriginServerType) ProtoMessage()               {}
func (*OriginServerType) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{9} }

type isOriginServerType_Choice interface {
	isOriginServerType_Choice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type OriginServerType_PublicIp struct {
	PublicIp *OriginServerPublicIP `protobuf:"bytes,1,opt,name=public_ip,json=publicIp,oneof"`
}
type OriginServerType_PublicName struct {
	PublicName *OriginServerPublicName `protobuf:"bytes,3,opt,name=public_name,json=publicName,oneof"`
}
type OriginServerType_PrivateIp struct {
	PrivateIp *OriginServerPrivateIP `protobuf:"bytes,2,opt,name=private_ip,json=privateIp,oneof"`
}
type OriginServerType_PrivateName struct {
	PrivateName *OriginServerPrivateName `protobuf:"bytes,4,opt,name=private_name,json=privateName,oneof"`
}
type OriginServerType_K8SService struct {
	K8SService *OriginServerK8SService `protobuf:"bytes,5,opt,name=k8s_service,json=k8sService,oneof"`
}
type OriginServerType_ConsulService struct {
	ConsulService *OriginServerConsulService `protobuf:"bytes,6,opt,name=consul_service,json=consulService,oneof"`
}
type OriginServerType_CustomEndpointObject struct {
	CustomEndpointObject *OriginServerCustomEndpoint `protobuf:"bytes,7,opt,name=custom_endpoint_object,json=customEndpointObject,oneof"`
}
type OriginServerType_VoltadnPrivateIp struct {
	VoltadnPrivateIp *OriginServerVirtualNetworkPrivateIP `protobuf:"bytes,10,opt,name=voltadn_private_ip,json=voltadnPrivateIp,oneof"`
}
type OriginServerType_VoltadnPrivateName struct {
	VoltadnPrivateName *OriginServerVirtualNetworkPrivateName `protobuf:"bytes,11,opt,name=voltadn_private_name,json=voltadnPrivateName,oneof"`
}
type OriginServerType_Srv6PrivateIp struct {
	Srv6PrivateIp *OriginServerVirtualNetworkPrivateIP `protobuf:"bytes,12,opt,name=srv6_private_ip,json=srv6PrivateIp,oneof"`
}
type OriginServerType_Srv6PrivateName struct {
	Srv6PrivateName *OriginServerVirtualNetworkPrivateName `protobuf:"bytes,13,opt,name=srv6_private_name,json=srv6PrivateName,oneof"`
}

func (*OriginServerType_PublicIp) isOriginServerType_Choice()             {}
func (*OriginServerType_PublicName) isOriginServerType_Choice()           {}
func (*OriginServerType_PrivateIp) isOriginServerType_Choice()            {}
func (*OriginServerType_PrivateName) isOriginServerType_Choice()          {}
func (*OriginServerType_K8SService) isOriginServerType_Choice()           {}
func (*OriginServerType_ConsulService) isOriginServerType_Choice()        {}
func (*OriginServerType_CustomEndpointObject) isOriginServerType_Choice() {}
func (*OriginServerType_VoltadnPrivateIp) isOriginServerType_Choice()     {}
func (*OriginServerType_VoltadnPrivateName) isOriginServerType_Choice()   {}
func (*OriginServerType_Srv6PrivateIp) isOriginServerType_Choice()        {}
func (*OriginServerType_Srv6PrivateName) isOriginServerType_Choice()      {}

func (m *OriginServerType) GetChoice() isOriginServerType_Choice {
	if m != nil {
		return m.Choice
	}
	return nil
}

func (m *OriginServerType) GetPublicIp() *OriginServerPublicIP {
	if x, ok := m.GetChoice().(*OriginServerType_PublicIp); ok {
		return x.PublicIp
	}
	return nil
}

func (m *OriginServerType) GetPublicName() *OriginServerPublicName {
	if x, ok := m.GetChoice().(*OriginServerType_PublicName); ok {
		return x.PublicName
	}
	return nil
}

func (m *OriginServerType) GetPrivateIp() *OriginServerPrivateIP {
	if x, ok := m.GetChoice().(*OriginServerType_PrivateIp); ok {
		return x.PrivateIp
	}
	return nil
}

func (m *OriginServerType) GetPrivateName() *OriginServerPrivateName {
	if x, ok := m.GetChoice().(*OriginServerType_PrivateName); ok {
		return x.PrivateName
	}
	return nil
}

func (m *OriginServerType) GetK8SService() *OriginServerK8SService {
	if x, ok := m.GetChoice().(*OriginServerType_K8SService); ok {
		return x.K8SService
	}
	return nil
}

func (m *OriginServerType) GetConsulService() *OriginServerConsulService {
	if x, ok := m.GetChoice().(*OriginServerType_ConsulService); ok {
		return x.ConsulService
	}
	return nil
}

func (m *OriginServerType) GetCustomEndpointObject() *OriginServerCustomEndpoint {
	if x, ok := m.GetChoice().(*OriginServerType_CustomEndpointObject); ok {
		return x.CustomEndpointObject
	}
	return nil
}

func (m *OriginServerType) GetVoltadnPrivateIp() *OriginServerVirtualNetworkPrivateIP {
	if x, ok := m.GetChoice().(*OriginServerType_VoltadnPrivateIp); ok {
		return x.VoltadnPrivateIp
	}
	return nil
}

func (m *OriginServerType) GetVoltadnPrivateName() *OriginServerVirtualNetworkPrivateName {
	if x, ok := m.GetChoice().(*OriginServerType_VoltadnPrivateName); ok {
		return x.VoltadnPrivateName
	}
	return nil
}

func (m *OriginServerType) GetSrv6PrivateIp() *OriginServerVirtualNetworkPrivateIP {
	if x, ok := m.GetChoice().(*OriginServerType_Srv6PrivateIp); ok {
		return x.Srv6PrivateIp
	}
	return nil
}

func (m *OriginServerType) GetSrv6PrivateName() *OriginServerVirtualNetworkPrivateName {
	if x, ok := m.GetChoice().(*OriginServerType_Srv6PrivateName); ok {
		return x.Srv6PrivateName
	}
	return nil
}

func (m *OriginServerType) GetLabels() map[string]string {
	if m != nil {
		return m.Labels
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*OriginServerType) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _OriginServerType_OneofMarshaler, _OriginServerType_OneofUnmarshaler, _OriginServerType_OneofSizer, []interface{}{
		(*OriginServerType_PublicIp)(nil),
		(*OriginServerType_PublicName)(nil),
		(*OriginServerType_PrivateIp)(nil),
		(*OriginServerType_PrivateName)(nil),
		(*OriginServerType_K8SService)(nil),
		(*OriginServerType_ConsulService)(nil),
		(*OriginServerType_CustomEndpointObject)(nil),
		(*OriginServerType_VoltadnPrivateIp)(nil),
		(*OriginServerType_VoltadnPrivateName)(nil),
		(*OriginServerType_Srv6PrivateIp)(nil),
		(*OriginServerType_Srv6PrivateName)(nil),
	}
}

func _OriginServerType_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*OriginServerType)
	// choice
	switch x := m.Choice.(type) {
	case *OriginServerType_PublicIp:
		_ = b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.PublicIp); err != nil {
			return err
		}
	case *OriginServerType_PublicName:
		_ = b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.PublicName); err != nil {
			return err
		}
	case *OriginServerType_PrivateIp:
		_ = b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.PrivateIp); err != nil {
			return err
		}
	case *OriginServerType_PrivateName:
		_ = b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.PrivateName); err != nil {
			return err
		}
	case *OriginServerType_K8SService:
		_ = b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.K8SService); err != nil {
			return err
		}
	case *OriginServerType_ConsulService:
		_ = b.EncodeVarint(6<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ConsulService); err != nil {
			return err
		}
	case *OriginServerType_CustomEndpointObject:
		_ = b.EncodeVarint(7<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.CustomEndpointObject); err != nil {
			return err
		}
	case *OriginServerType_VoltadnPrivateIp:
		_ = b.EncodeVarint(10<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.VoltadnPrivateIp); err != nil {
			return err
		}
	case *OriginServerType_VoltadnPrivateName:
		_ = b.EncodeVarint(11<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.VoltadnPrivateName); err != nil {
			return err
		}
	case *OriginServerType_Srv6PrivateIp:
		_ = b.EncodeVarint(12<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Srv6PrivateIp); err != nil {
			return err
		}
	case *OriginServerType_Srv6PrivateName:
		_ = b.EncodeVarint(13<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Srv6PrivateName); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("OriginServerType.Choice has unexpected type %T", x)
	}
	return nil
}

func _OriginServerType_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*OriginServerType)
	switch tag {
	case 1: // choice.public_ip
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(OriginServerPublicIP)
		err := b.DecodeMessage(msg)
		m.Choice = &OriginServerType_PublicIp{msg}
		return true, err
	case 3: // choice.public_name
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(OriginServerPublicName)
		err := b.DecodeMessage(msg)
		m.Choice = &OriginServerType_PublicName{msg}
		return true, err
	case 2: // choice.private_ip
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(OriginServerPrivateIP)
		err := b.DecodeMessage(msg)
		m.Choice = &OriginServerType_PrivateIp{msg}
		return true, err
	case 4: // choice.private_name
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(OriginServerPrivateName)
		err := b.DecodeMessage(msg)
		m.Choice = &OriginServerType_PrivateName{msg}
		return true, err
	case 5: // choice.k8s_service
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(OriginServerK8SService)
		err := b.DecodeMessage(msg)
		m.Choice = &OriginServerType_K8SService{msg}
		return true, err
	case 6: // choice.consul_service
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(OriginServerConsulService)
		err := b.DecodeMessage(msg)
		m.Choice = &OriginServerType_ConsulService{msg}
		return true, err
	case 7: // choice.custom_endpoint_object
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(OriginServerCustomEndpoint)
		err := b.DecodeMessage(msg)
		m.Choice = &OriginServerType_CustomEndpointObject{msg}
		return true, err
	case 10: // choice.voltadn_private_ip
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(OriginServerVirtualNetworkPrivateIP)
		err := b.DecodeMessage(msg)
		m.Choice = &OriginServerType_VoltadnPrivateIp{msg}
		return true, err
	case 11: // choice.voltadn_private_name
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(OriginServerVirtualNetworkPrivateName)
		err := b.DecodeMessage(msg)
		m.Choice = &OriginServerType_VoltadnPrivateName{msg}
		return true, err
	case 12: // choice.srv6_private_ip
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(OriginServerVirtualNetworkPrivateIP)
		err := b.DecodeMessage(msg)
		m.Choice = &OriginServerType_Srv6PrivateIp{msg}
		return true, err
	case 13: // choice.srv6_private_name
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(OriginServerVirtualNetworkPrivateName)
		err := b.DecodeMessage(msg)
		m.Choice = &OriginServerType_Srv6PrivateName{msg}
		return true, err
	default:
		return false, nil
	}
}

func _OriginServerType_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*OriginServerType)
	// choice
	switch x := m.Choice.(type) {
	case *OriginServerType_PublicIp:
		s := proto.Size(x.PublicIp)
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *OriginServerType_PublicName:
		s := proto.Size(x.PublicName)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *OriginServerType_PrivateIp:
		s := proto.Size(x.PrivateIp)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *OriginServerType_PrivateName:
		s := proto.Size(x.PrivateName)
		n += proto.SizeVarint(4<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *OriginServerType_K8SService:
		s := proto.Size(x.K8SService)
		n += proto.SizeVarint(5<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *OriginServerType_ConsulService:
		s := proto.Size(x.ConsulService)
		n += proto.SizeVarint(6<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *OriginServerType_CustomEndpointObject:
		s := proto.Size(x.CustomEndpointObject)
		n += proto.SizeVarint(7<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *OriginServerType_VoltadnPrivateIp:
		s := proto.Size(x.VoltadnPrivateIp)
		n += proto.SizeVarint(10<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *OriginServerType_VoltadnPrivateName:
		s := proto.Size(x.VoltadnPrivateName)
		n += proto.SizeVarint(11<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *OriginServerType_Srv6PrivateIp:
		s := proto.Size(x.Srv6PrivateIp)
		n += proto.SizeVarint(12<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *OriginServerType_Srv6PrivateName:
		s := proto.Size(x.Srv6PrivateName)
		n += proto.SizeVarint(13<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// UpstreamTlsValidationContext
//
// x-displayName: "TLS Validation Context for Origin Servers"
// Upstream TLS Validation Context
type UpstreamTlsValidationContext struct {
	// Trusted CAs
	//
	// x-displayName: "Trusted CAs"
	// x-required
	// Trusted CA certificates for verification of Server's certificate
	TrustedCaUrl string `protobuf:"bytes,1,opt,name=trusted_ca_url,json=trustedCaUrl,proto3" json:"trusted_ca_url,omitempty"`
}

func (m *UpstreamTlsValidationContext) Reset()      { *m = UpstreamTlsValidationContext{} }
func (*UpstreamTlsValidationContext) ProtoMessage() {}
func (*UpstreamTlsValidationContext) Descriptor() ([]byte, []int) {
	return fileDescriptorTypes, []int{10}
}

func (m *UpstreamTlsValidationContext) GetTrustedCaUrl() string {
	if m != nil {
		return m.TrustedCaUrl
	}
	return ""
}

// TlsCertificatesType
//
// x-displayName: "TLS Certificates"
// TLS Certificates
type TlsCertificatesType struct {
	// TLS certificates
	//
	// x-displayName: "TLS Certificates"
	// TLS Certificates
	TlsCertificates []*ves_io_schema4.TlsCertificateType `protobuf:"bytes,1,rep,name=tls_certificates,json=tlsCertificates" json:"tls_certificates,omitempty"`
}

func (m *TlsCertificatesType) Reset()                    { *m = TlsCertificatesType{} }
func (*TlsCertificatesType) ProtoMessage()               {}
func (*TlsCertificatesType) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{11} }

func (m *TlsCertificatesType) GetTlsCertificates() []*ves_io_schema4.TlsCertificateType {
	if m != nil {
		return m.TlsCertificates
	}
	return nil
}

// UpstreamTlsParameters
//
// x-displayName: "TLS Parameters for Origin Servers"
// Upstream TLS Parameters
type UpstreamTlsParameters struct {
	// sni choice
	//
	// x-displayName: "SNI Selection"
	// x-required
	// Select SNI to be used for upstream connection
	//
	// Types that are valid to be assigned to SniChoice:
	//	*UpstreamTlsParameters_Sni
	//	*UpstreamTlsParameters_UseHostHeaderAsSni
	//	*UpstreamTlsParameters_DisableSni
	SniChoice isUpstreamTlsParameters_SniChoice `protobuf_oneof:"sni_choice"`
	// TLS Config
	//
	// x-displayName: "TLS Configuration for Origin Servers"
	// x-required
	// TLS parameters such as min/max TLS version and ciphers
	TlsConfig *ves_io_schema_views.TlsConfig `protobuf:"bytes,2,opt,name=tls_config,json=tlsConfig" json:"tls_config,omitempty"`
	// Server verification choice
	//
	// x-displayName: "Origin Server Verification"
	// x-required
	// Choose whether to perform origin server verification.
	//
	// Types that are valid to be assigned to ServerValidationChoice:
	//	*UpstreamTlsParameters_UseServerVerification
	//	*UpstreamTlsParameters_SkipServerVerification
	//	*UpstreamTlsParameters_VolterraTrustedCa
	ServerValidationChoice isUpstreamTlsParameters_ServerValidationChoice `protobuf_oneof:"server_validation_choice"`
	// Server MTLS choice
	//
	// x-displayName: "MTLS with Origin Servers"
	// x-required
	// TLS parameters such as min/max TLS version and ciphers
	//
	// Types that are valid to be assigned to MtlsChoice:
	//	*UpstreamTlsParameters_NoMtls
	//	*UpstreamTlsParameters_UseMtls
	MtlsChoice isUpstreamTlsParameters_MtlsChoice `protobuf_oneof:"mtls_choice"`
}

func (m *UpstreamTlsParameters) Reset()                    { *m = UpstreamTlsParameters{} }
func (*UpstreamTlsParameters) ProtoMessage()               {}
func (*UpstreamTlsParameters) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{12} }

type isUpstreamTlsParameters_SniChoice interface {
	isUpstreamTlsParameters_SniChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isUpstreamTlsParameters_ServerValidationChoice interface {
	isUpstreamTlsParameters_ServerValidationChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isUpstreamTlsParameters_MtlsChoice interface {
	isUpstreamTlsParameters_MtlsChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type UpstreamTlsParameters_Sni struct {
	Sni string `protobuf:"bytes,1,opt,name=sni,proto3,oneof"`
}
type UpstreamTlsParameters_UseHostHeaderAsSni struct {
	UseHostHeaderAsSni *ves_io_schema4.Empty `protobuf:"bytes,11,opt,name=use_host_header_as_sni,json=useHostHeaderAsSni,oneof"`
}
type UpstreamTlsParameters_DisableSni struct {
	DisableSni *ves_io_schema4.Empty `protobuf:"bytes,12,opt,name=disable_sni,json=disableSni,oneof"`
}
type UpstreamTlsParameters_UseServerVerification struct {
	UseServerVerification *UpstreamTlsValidationContext `protobuf:"bytes,4,opt,name=use_server_verification,json=useServerVerification,oneof"`
}
type UpstreamTlsParameters_SkipServerVerification struct {
	SkipServerVerification *ves_io_schema4.Empty `protobuf:"bytes,5,opt,name=skip_server_verification,json=skipServerVerification,oneof"`
}
type UpstreamTlsParameters_VolterraTrustedCa struct {
	VolterraTrustedCa *ves_io_schema4.Empty `protobuf:"bytes,13,opt,name=volterra_trusted_ca,json=volterraTrustedCa,oneof"`
}
type UpstreamTlsParameters_NoMtls struct {
	NoMtls *ves_io_schema4.Empty `protobuf:"bytes,6,opt,name=no_mtls,json=noMtls,oneof"`
}
type UpstreamTlsParameters_UseMtls struct {
	UseMtls *TlsCertificatesType `protobuf:"bytes,7,opt,name=use_mtls,json=useMtls,oneof"`
}

func (*UpstreamTlsParameters_Sni) isUpstreamTlsParameters_SniChoice()                {}
func (*UpstreamTlsParameters_UseHostHeaderAsSni) isUpstreamTlsParameters_SniChoice() {}
func (*UpstreamTlsParameters_DisableSni) isUpstreamTlsParameters_SniChoice()         {}
func (*UpstreamTlsParameters_UseServerVerification) isUpstreamTlsParameters_ServerValidationChoice() {
}
func (*UpstreamTlsParameters_SkipServerVerification) isUpstreamTlsParameters_ServerValidationChoice() {
}
func (*UpstreamTlsParameters_VolterraTrustedCa) isUpstreamTlsParameters_ServerValidationChoice() {}
func (*UpstreamTlsParameters_NoMtls) isUpstreamTlsParameters_MtlsChoice()                        {}
func (*UpstreamTlsParameters_UseMtls) isUpstreamTlsParameters_MtlsChoice()                       {}

func (m *UpstreamTlsParameters) GetSniChoice() isUpstreamTlsParameters_SniChoice {
	if m != nil {
		return m.SniChoice
	}
	return nil
}
func (m *UpstreamTlsParameters) GetServerValidationChoice() isUpstreamTlsParameters_ServerValidationChoice {
	if m != nil {
		return m.ServerValidationChoice
	}
	return nil
}
func (m *UpstreamTlsParameters) GetMtlsChoice() isUpstreamTlsParameters_MtlsChoice {
	if m != nil {
		return m.MtlsChoice
	}
	return nil
}

func (m *UpstreamTlsParameters) GetSni() string {
	if x, ok := m.GetSniChoice().(*UpstreamTlsParameters_Sni); ok {
		return x.Sni
	}
	return ""
}

func (m *UpstreamTlsParameters) GetUseHostHeaderAsSni() *ves_io_schema4.Empty {
	if x, ok := m.GetSniChoice().(*UpstreamTlsParameters_UseHostHeaderAsSni); ok {
		return x.UseHostHeaderAsSni
	}
	return nil
}

func (m *UpstreamTlsParameters) GetDisableSni() *ves_io_schema4.Empty {
	if x, ok := m.GetSniChoice().(*UpstreamTlsParameters_DisableSni); ok {
		return x.DisableSni
	}
	return nil
}

func (m *UpstreamTlsParameters) GetTlsConfig() *ves_io_schema_views.TlsConfig {
	if m != nil {
		return m.TlsConfig
	}
	return nil
}

func (m *UpstreamTlsParameters) GetUseServerVerification() *UpstreamTlsValidationContext {
	if x, ok := m.GetServerValidationChoice().(*UpstreamTlsParameters_UseServerVerification); ok {
		return x.UseServerVerification
	}
	return nil
}

func (m *UpstreamTlsParameters) GetSkipServerVerification() *ves_io_schema4.Empty {
	if x, ok := m.GetServerValidationChoice().(*UpstreamTlsParameters_SkipServerVerification); ok {
		return x.SkipServerVerification
	}
	return nil
}

func (m *UpstreamTlsParameters) GetVolterraTrustedCa() *ves_io_schema4.Empty {
	if x, ok := m.GetServerValidationChoice().(*UpstreamTlsParameters_VolterraTrustedCa); ok {
		return x.VolterraTrustedCa
	}
	return nil
}

func (m *UpstreamTlsParameters) GetNoMtls() *ves_io_schema4.Empty {
	if x, ok := m.GetMtlsChoice().(*UpstreamTlsParameters_NoMtls); ok {
		return x.NoMtls
	}
	return nil
}

func (m *UpstreamTlsParameters) GetUseMtls() *TlsCertificatesType {
	if x, ok := m.GetMtlsChoice().(*UpstreamTlsParameters_UseMtls); ok {
		return x.UseMtls
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*UpstreamTlsParameters) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _UpstreamTlsParameters_OneofMarshaler, _UpstreamTlsParameters_OneofUnmarshaler, _UpstreamTlsParameters_OneofSizer, []interface{}{
		(*UpstreamTlsParameters_Sni)(nil),
		(*UpstreamTlsParameters_UseHostHeaderAsSni)(nil),
		(*UpstreamTlsParameters_DisableSni)(nil),
		(*UpstreamTlsParameters_UseServerVerification)(nil),
		(*UpstreamTlsParameters_SkipServerVerification)(nil),
		(*UpstreamTlsParameters_VolterraTrustedCa)(nil),
		(*UpstreamTlsParameters_NoMtls)(nil),
		(*UpstreamTlsParameters_UseMtls)(nil),
	}
}

func _UpstreamTlsParameters_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*UpstreamTlsParameters)
	// sni_choice
	switch x := m.SniChoice.(type) {
	case *UpstreamTlsParameters_Sni:
		_ = b.EncodeVarint(1<<3 | proto.WireBytes)
		_ = b.EncodeStringBytes(x.Sni)
	case *UpstreamTlsParameters_UseHostHeaderAsSni:
		_ = b.EncodeVarint(11<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.UseHostHeaderAsSni); err != nil {
			return err
		}
	case *UpstreamTlsParameters_DisableSni:
		_ = b.EncodeVarint(12<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.DisableSni); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("UpstreamTlsParameters.SniChoice has unexpected type %T", x)
	}
	// server_validation_choice
	switch x := m.ServerValidationChoice.(type) {
	case *UpstreamTlsParameters_UseServerVerification:
		_ = b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.UseServerVerification); err != nil {
			return err
		}
	case *UpstreamTlsParameters_SkipServerVerification:
		_ = b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.SkipServerVerification); err != nil {
			return err
		}
	case *UpstreamTlsParameters_VolterraTrustedCa:
		_ = b.EncodeVarint(13<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.VolterraTrustedCa); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("UpstreamTlsParameters.ServerValidationChoice has unexpected type %T", x)
	}
	// mtls_choice
	switch x := m.MtlsChoice.(type) {
	case *UpstreamTlsParameters_NoMtls:
		_ = b.EncodeVarint(6<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.NoMtls); err != nil {
			return err
		}
	case *UpstreamTlsParameters_UseMtls:
		_ = b.EncodeVarint(7<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.UseMtls); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("UpstreamTlsParameters.MtlsChoice has unexpected type %T", x)
	}
	return nil
}

func _UpstreamTlsParameters_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*UpstreamTlsParameters)
	switch tag {
	case 1: // sni_choice.sni
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.SniChoice = &UpstreamTlsParameters_Sni{x}
		return true, err
	case 11: // sni_choice.use_host_header_as_sni
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.SniChoice = &UpstreamTlsParameters_UseHostHeaderAsSni{msg}
		return true, err
	case 12: // sni_choice.disable_sni
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.SniChoice = &UpstreamTlsParameters_DisableSni{msg}
		return true, err
	case 4: // server_validation_choice.use_server_verification
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(UpstreamTlsValidationContext)
		err := b.DecodeMessage(msg)
		m.ServerValidationChoice = &UpstreamTlsParameters_UseServerVerification{msg}
		return true, err
	case 5: // server_validation_choice.skip_server_verification
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.ServerValidationChoice = &UpstreamTlsParameters_SkipServerVerification{msg}
		return true, err
	case 13: // server_validation_choice.volterra_trusted_ca
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.ServerValidationChoice = &UpstreamTlsParameters_VolterraTrustedCa{msg}
		return true, err
	case 6: // mtls_choice.no_mtls
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.MtlsChoice = &UpstreamTlsParameters_NoMtls{msg}
		return true, err
	case 7: // mtls_choice.use_mtls
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(TlsCertificatesType)
		err := b.DecodeMessage(msg)
		m.MtlsChoice = &UpstreamTlsParameters_UseMtls{msg}
		return true, err
	default:
		return false, nil
	}
}

func _UpstreamTlsParameters_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*UpstreamTlsParameters)
	// sni_choice
	switch x := m.SniChoice.(type) {
	case *UpstreamTlsParameters_Sni:
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.Sni)))
		n += len(x.Sni)
	case *UpstreamTlsParameters_UseHostHeaderAsSni:
		s := proto.Size(x.UseHostHeaderAsSni)
		n += proto.SizeVarint(11<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *UpstreamTlsParameters_DisableSni:
		s := proto.Size(x.DisableSni)
		n += proto.SizeVarint(12<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	// server_validation_choice
	switch x := m.ServerValidationChoice.(type) {
	case *UpstreamTlsParameters_UseServerVerification:
		s := proto.Size(x.UseServerVerification)
		n += proto.SizeVarint(4<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *UpstreamTlsParameters_SkipServerVerification:
		s := proto.Size(x.SkipServerVerification)
		n += proto.SizeVarint(5<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *UpstreamTlsParameters_VolterraTrustedCa:
		s := proto.Size(x.VolterraTrustedCa)
		n += proto.SizeVarint(13<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	// mtls_choice
	switch x := m.MtlsChoice.(type) {
	case *UpstreamTlsParameters_NoMtls:
		s := proto.Size(x.NoMtls)
		n += proto.SizeVarint(6<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *UpstreamTlsParameters_UseMtls:
		s := proto.Size(x.UseMtls)
		n += proto.SizeVarint(7<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// Origin Pool Default Subset
//
// x-displayName: "Origin Pool Default Subset"
// Default Subset definition
type OriginPoolDefaultSubset struct {
	// default_subset
	//
	// x-displayName: "Default Subset for Origin Pool"
	// x-example: "key:value"
	// List of key-value pairs that define default subset.
	// which gets used when route specifies no metadata or no subset matching the metadata exists.
	DefaultSubset map[string]string `protobuf:"bytes,6,rep,name=default_subset,json=defaultSubset" json:"default_subset,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *OriginPoolDefaultSubset) Reset()                    { *m = OriginPoolDefaultSubset{} }
func (*OriginPoolDefaultSubset) ProtoMessage()               {}
func (*OriginPoolDefaultSubset) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{13} }

func (m *OriginPoolDefaultSubset) GetDefaultSubset() map[string]string {
	if m != nil {
		return m.DefaultSubset
	}
	return nil
}

// Origin Pool Subset Options
//
// x-displayName: "Origin Pool Subset Options"
// Configure subset options for origin pool
type OriginPoolSubsets struct {
	// Origin Server Subsets Classes
	//
	// x-displayName: "Origin Server Subsets Classes"
	// List of subset class. Subsets class is defined using list of keys. Every unique combination of values of these keys form a subset withing the class.
	EndpointSubsets []*ves_io_schema_cluster.EndpointSubsetSelectorType `protobuf:"bytes,1,rep,name=endpoint_subsets,json=endpointSubsets" json:"endpoint_subsets,omitempty"`
	// Fallback Policy Choice
	//
	// x-displayName: "Fallback Policy Choice"
	// x-required
	// Select subset fallback policy if no subset could be determined based on route.
	//
	// Types that are valid to be assigned to FallbackPolicyChoice:
	//	*OriginPoolSubsets_AnyEndpoint
	//	*OriginPoolSubsets_DefaultSubset
	//	*OriginPoolSubsets_FailRequest
	FallbackPolicyChoice isOriginPoolSubsets_FallbackPolicyChoice `protobuf_oneof:"fallback_policy_choice"`
}

func (m *OriginPoolSubsets) Reset()                    { *m = OriginPoolSubsets{} }
func (*OriginPoolSubsets) ProtoMessage()               {}
func (*OriginPoolSubsets) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{14} }

type isOriginPoolSubsets_FallbackPolicyChoice interface {
	isOriginPoolSubsets_FallbackPolicyChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type OriginPoolSubsets_AnyEndpoint struct {
	AnyEndpoint *ves_io_schema4.Empty `protobuf:"bytes,3,opt,name=any_endpoint,json=anyEndpoint,oneof"`
}
type OriginPoolSubsets_DefaultSubset struct {
	DefaultSubset *OriginPoolDefaultSubset `protobuf:"bytes,4,opt,name=default_subset,json=defaultSubset,oneof"`
}
type OriginPoolSubsets_FailRequest struct {
	FailRequest *ves_io_schema4.Empty `protobuf:"bytes,5,opt,name=fail_request,json=failRequest,oneof"`
}

func (*OriginPoolSubsets_AnyEndpoint) isOriginPoolSubsets_FallbackPolicyChoice()   {}
func (*OriginPoolSubsets_DefaultSubset) isOriginPoolSubsets_FallbackPolicyChoice() {}
func (*OriginPoolSubsets_FailRequest) isOriginPoolSubsets_FallbackPolicyChoice()   {}

func (m *OriginPoolSubsets) GetFallbackPolicyChoice() isOriginPoolSubsets_FallbackPolicyChoice {
	if m != nil {
		return m.FallbackPolicyChoice
	}
	return nil
}

func (m *OriginPoolSubsets) GetEndpointSubsets() []*ves_io_schema_cluster.EndpointSubsetSelectorType {
	if m != nil {
		return m.EndpointSubsets
	}
	return nil
}

func (m *OriginPoolSubsets) GetAnyEndpoint() *ves_io_schema4.Empty {
	if x, ok := m.GetFallbackPolicyChoice().(*OriginPoolSubsets_AnyEndpoint); ok {
		return x.AnyEndpoint
	}
	return nil
}

func (m *OriginPoolSubsets) GetDefaultSubset() *OriginPoolDefaultSubset {
	if x, ok := m.GetFallbackPolicyChoice().(*OriginPoolSubsets_DefaultSubset); ok {
		return x.DefaultSubset
	}
	return nil
}

func (m *OriginPoolSubsets) GetFailRequest() *ves_io_schema4.Empty {
	if x, ok := m.GetFallbackPolicyChoice().(*OriginPoolSubsets_FailRequest); ok {
		return x.FailRequest
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*OriginPoolSubsets) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _OriginPoolSubsets_OneofMarshaler, _OriginPoolSubsets_OneofUnmarshaler, _OriginPoolSubsets_OneofSizer, []interface{}{
		(*OriginPoolSubsets_AnyEndpoint)(nil),
		(*OriginPoolSubsets_DefaultSubset)(nil),
		(*OriginPoolSubsets_FailRequest)(nil),
	}
}

func _OriginPoolSubsets_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*OriginPoolSubsets)
	// fallback_policy_choice
	switch x := m.FallbackPolicyChoice.(type) {
	case *OriginPoolSubsets_AnyEndpoint:
		_ = b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.AnyEndpoint); err != nil {
			return err
		}
	case *OriginPoolSubsets_DefaultSubset:
		_ = b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.DefaultSubset); err != nil {
			return err
		}
	case *OriginPoolSubsets_FailRequest:
		_ = b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.FailRequest); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("OriginPoolSubsets.FallbackPolicyChoice has unexpected type %T", x)
	}
	return nil
}

func _OriginPoolSubsets_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*OriginPoolSubsets)
	switch tag {
	case 3: // fallback_policy_choice.any_endpoint
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.FallbackPolicyChoice = &OriginPoolSubsets_AnyEndpoint{msg}
		return true, err
	case 4: // fallback_policy_choice.default_subset
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(OriginPoolDefaultSubset)
		err := b.DecodeMessage(msg)
		m.FallbackPolicyChoice = &OriginPoolSubsets_DefaultSubset{msg}
		return true, err
	case 5: // fallback_policy_choice.fail_request
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.FallbackPolicyChoice = &OriginPoolSubsets_FailRequest{msg}
		return true, err
	default:
		return false, nil
	}
}

func _OriginPoolSubsets_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*OriginPoolSubsets)
	// fallback_policy_choice
	switch x := m.FallbackPolicyChoice.(type) {
	case *OriginPoolSubsets_AnyEndpoint:
		s := proto.Size(x.AnyEndpoint)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *OriginPoolSubsets_DefaultSubset:
		s := proto.Size(x.DefaultSubset)
		n += proto.SizeVarint(4<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *OriginPoolSubsets_FailRequest:
		s := proto.Size(x.FailRequest)
		n += proto.SizeVarint(5<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// Origin Pool Advanced Options
//
// x-displayName: "Origin Pool Advanced Options"
// Configure Advanced options for origin pool
type OriginPoolAdvancedOptions struct {
	// connection_timeout
	//
	// x-displayName: "Connection Timeout"
	// x-example: "4000"
	// The timeout for new network connections to endpoints in the cluster.
	// This is specified in milliseconds. The default value is 2 seconds
	ConnectionTimeout uint32 `protobuf:"varint,1,opt,name=connection_timeout,json=connectionTimeout,proto3" json:"connection_timeout,omitempty"`
	// http_idle_timeout
	//
	// x-displayName: "HTTP Idle Timeout"
	// x-example: "60000"
	// The idle timeout for upstream connection pool connections. The idle timeout is defined as the
	// period in which there are no active requests. When the idle timeout is reached the connection
	// will be closed. Note that request based timeouts mean that HTTP/2 PINGs will not keep the connection alive.
	// This is specified in milliseconds. The default value is 5 minutes.
	HttpIdleTimeout uint32 `protobuf:"varint,2,opt,name=http_idle_timeout,json=httpIdleTimeout,proto3" json:"http_idle_timeout,omitempty"`
	// Enable Circuit Breaker
	//
	// x-displayName: "Enable/Disable Circuit Breaker"
	// x-required
	// Select to enable or disable circuit breaker configuration
	//
	// Types that are valid to be assigned to CircuitBreakerChoice:
	//	*OriginPoolAdvancedOptions_DisableCircuitBreaker
	//	*OriginPoolAdvancedOptions_CircuitBreaker
	CircuitBreakerChoice isOriginPoolAdvancedOptions_CircuitBreakerChoice `protobuf_oneof:"circuit_breaker_choice"`
	// Enable Outlier Detection
	//
	// x-displayName: "Enable/Disable Outlier Detection"
	// x-required
	// Select to enable or disable circuit breaker configuration
	//
	// Types that are valid to be assigned to OutlierDetectionChoice:
	//	*OriginPoolAdvancedOptions_DisableOutlierDetection
	//	*OriginPoolAdvancedOptions_OutlierDetection
	OutlierDetectionChoice isOriginPoolAdvancedOptions_OutlierDetectionChoice `protobuf_oneof:"outlier_detection_choice"`
	// Panic threshold
	//
	// x-displayName: "Panic threshold"
	// x-required
	// During load balancing, ADC will only consider healthy endpoints in an upstream cluster.
	// However, if the percentage of healthy endpoints in the cluster becomes too low, ADC can disregard health status
	// and load balance either amongst all endpoints or no endpoints. This is known as the panic threshold.
	//
	// Types that are valid to be assigned to PanicThresholdType:
	//	*OriginPoolAdvancedOptions_NoPanicThreshold
	//	*OriginPoolAdvancedOptions_PanicThreshold
	PanicThresholdType isOriginPoolAdvancedOptions_PanicThresholdType `protobuf_oneof:"panic_threshold_type"`
	// Enable Subset Load Balancing
	//
	// x-displayName: "Enable/Disable Subset Load Balancing"
	// x-required
	// Select enable or disable subset load balancing. origin servers could be divided into subsets and chosen from routes.
	//
	// Types that are valid to be assigned to SubsetChoice:
	//	*OriginPoolAdvancedOptions_DisableSubsets
	//	*OriginPoolAdvancedOptions_EnableSubsets
	SubsetChoice isOriginPoolAdvancedOptions_SubsetChoice `protobuf_oneof:"subset_choice"`
	// http2_options
	//
	// x-displayName: "Http2 Protocol Configuration"
	// Http2 Protocol options for upstream connections
	Http2Options *ves_io_schema_cluster.Http2ProtocolOptions `protobuf:"bytes,15,opt,name=http2_options,json=http2Options" json:"http2_options,omitempty"`
}

func (m *OriginPoolAdvancedOptions) Reset()                    { *m = OriginPoolAdvancedOptions{} }
func (*OriginPoolAdvancedOptions) ProtoMessage()               {}
func (*OriginPoolAdvancedOptions) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{15} }

type isOriginPoolAdvancedOptions_CircuitBreakerChoice interface {
	isOriginPoolAdvancedOptions_CircuitBreakerChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isOriginPoolAdvancedOptions_OutlierDetectionChoice interface {
	isOriginPoolAdvancedOptions_OutlierDetectionChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isOriginPoolAdvancedOptions_PanicThresholdType interface {
	isOriginPoolAdvancedOptions_PanicThresholdType()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isOriginPoolAdvancedOptions_SubsetChoice interface {
	isOriginPoolAdvancedOptions_SubsetChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type OriginPoolAdvancedOptions_DisableCircuitBreaker struct {
	DisableCircuitBreaker *ves_io_schema4.Empty `protobuf:"bytes,4,opt,name=disable_circuit_breaker,json=disableCircuitBreaker,oneof"`
}
type OriginPoolAdvancedOptions_CircuitBreaker struct {
	CircuitBreaker *ves_io_schema_cluster.CircuitBreaker `protobuf:"bytes,5,opt,name=circuit_breaker,json=circuitBreaker,oneof"`
}
type OriginPoolAdvancedOptions_DisableOutlierDetection struct {
	DisableOutlierDetection *ves_io_schema4.Empty `protobuf:"bytes,7,opt,name=disable_outlier_detection,json=disableOutlierDetection,oneof"`
}
type OriginPoolAdvancedOptions_OutlierDetection struct {
	OutlierDetection *ves_io_schema_cluster.OutlierDetectionType `protobuf:"bytes,8,opt,name=outlier_detection,json=outlierDetection,oneof"`
}
type OriginPoolAdvancedOptions_NoPanicThreshold struct {
	NoPanicThreshold *ves_io_schema4.Empty `protobuf:"bytes,10,opt,name=no_panic_threshold,json=noPanicThreshold,oneof"`
}
type OriginPoolAdvancedOptions_PanicThreshold struct {
	PanicThreshold uint32 `protobuf:"varint,11,opt,name=panic_threshold,json=panicThreshold,proto3,oneof"`
}
type OriginPoolAdvancedOptions_DisableSubsets struct {
	DisableSubsets *ves_io_schema4.Empty `protobuf:"bytes,13,opt,name=disable_subsets,json=disableSubsets,oneof"`
}
type OriginPoolAdvancedOptions_EnableSubsets struct {
	EnableSubsets *OriginPoolSubsets `protobuf:"bytes,14,opt,name=enable_subsets,json=enableSubsets,oneof"`
}

func (*OriginPoolAdvancedOptions_DisableCircuitBreaker) isOriginPoolAdvancedOptions_CircuitBreakerChoice() {
}
func (*OriginPoolAdvancedOptions_CircuitBreaker) isOriginPoolAdvancedOptions_CircuitBreakerChoice() {}
func (*OriginPoolAdvancedOptions_DisableOutlierDetection) isOriginPoolAdvancedOptions_OutlierDetectionChoice() {
}
func (*OriginPoolAdvancedOptions_OutlierDetection) isOriginPoolAdvancedOptions_OutlierDetectionChoice() {
}
func (*OriginPoolAdvancedOptions_NoPanicThreshold) isOriginPoolAdvancedOptions_PanicThresholdType() {}
func (*OriginPoolAdvancedOptions_PanicThreshold) isOriginPoolAdvancedOptions_PanicThresholdType()   {}
func (*OriginPoolAdvancedOptions_DisableSubsets) isOriginPoolAdvancedOptions_SubsetChoice()         {}
func (*OriginPoolAdvancedOptions_EnableSubsets) isOriginPoolAdvancedOptions_SubsetChoice()          {}

func (m *OriginPoolAdvancedOptions) GetCircuitBreakerChoice() isOriginPoolAdvancedOptions_CircuitBreakerChoice {
	if m != nil {
		return m.CircuitBreakerChoice
	}
	return nil
}
func (m *OriginPoolAdvancedOptions) GetOutlierDetectionChoice() isOriginPoolAdvancedOptions_OutlierDetectionChoice {
	if m != nil {
		return m.OutlierDetectionChoice
	}
	return nil
}
func (m *OriginPoolAdvancedOptions) GetPanicThresholdType() isOriginPoolAdvancedOptions_PanicThresholdType {
	if m != nil {
		return m.PanicThresholdType
	}
	return nil
}
func (m *OriginPoolAdvancedOptions) GetSubsetChoice() isOriginPoolAdvancedOptions_SubsetChoice {
	if m != nil {
		return m.SubsetChoice
	}
	return nil
}

func (m *OriginPoolAdvancedOptions) GetConnectionTimeout() uint32 {
	if m != nil {
		return m.ConnectionTimeout
	}
	return 0
}

func (m *OriginPoolAdvancedOptions) GetHttpIdleTimeout() uint32 {
	if m != nil {
		return m.HttpIdleTimeout
	}
	return 0
}

func (m *OriginPoolAdvancedOptions) GetDisableCircuitBreaker() *ves_io_schema4.Empty {
	if x, ok := m.GetCircuitBreakerChoice().(*OriginPoolAdvancedOptions_DisableCircuitBreaker); ok {
		return x.DisableCircuitBreaker
	}
	return nil
}

func (m *OriginPoolAdvancedOptions) GetCircuitBreaker() *ves_io_schema_cluster.CircuitBreaker {
	if x, ok := m.GetCircuitBreakerChoice().(*OriginPoolAdvancedOptions_CircuitBreaker); ok {
		return x.CircuitBreaker
	}
	return nil
}

func (m *OriginPoolAdvancedOptions) GetDisableOutlierDetection() *ves_io_schema4.Empty {
	if x, ok := m.GetOutlierDetectionChoice().(*OriginPoolAdvancedOptions_DisableOutlierDetection); ok {
		return x.DisableOutlierDetection
	}
	return nil
}

func (m *OriginPoolAdvancedOptions) GetOutlierDetection() *ves_io_schema_cluster.OutlierDetectionType {
	if x, ok := m.GetOutlierDetectionChoice().(*OriginPoolAdvancedOptions_OutlierDetection); ok {
		return x.OutlierDetection
	}
	return nil
}

func (m *OriginPoolAdvancedOptions) GetNoPanicThreshold() *ves_io_schema4.Empty {
	if x, ok := m.GetPanicThresholdType().(*OriginPoolAdvancedOptions_NoPanicThreshold); ok {
		return x.NoPanicThreshold
	}
	return nil
}

func (m *OriginPoolAdvancedOptions) GetPanicThreshold() uint32 {
	if x, ok := m.GetPanicThresholdType().(*OriginPoolAdvancedOptions_PanicThreshold); ok {
		return x.PanicThreshold
	}
	return 0
}

func (m *OriginPoolAdvancedOptions) GetDisableSubsets() *ves_io_schema4.Empty {
	if x, ok := m.GetSubsetChoice().(*OriginPoolAdvancedOptions_DisableSubsets); ok {
		return x.DisableSubsets
	}
	return nil
}

func (m *OriginPoolAdvancedOptions) GetEnableSubsets() *OriginPoolSubsets {
	if x, ok := m.GetSubsetChoice().(*OriginPoolAdvancedOptions_EnableSubsets); ok {
		return x.EnableSubsets
	}
	return nil
}

func (m *OriginPoolAdvancedOptions) GetHttp2Options() *ves_io_schema_cluster.Http2ProtocolOptions {
	if m != nil {
		return m.Http2Options
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*OriginPoolAdvancedOptions) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _OriginPoolAdvancedOptions_OneofMarshaler, _OriginPoolAdvancedOptions_OneofUnmarshaler, _OriginPoolAdvancedOptions_OneofSizer, []interface{}{
		(*OriginPoolAdvancedOptions_DisableCircuitBreaker)(nil),
		(*OriginPoolAdvancedOptions_CircuitBreaker)(nil),
		(*OriginPoolAdvancedOptions_DisableOutlierDetection)(nil),
		(*OriginPoolAdvancedOptions_OutlierDetection)(nil),
		(*OriginPoolAdvancedOptions_NoPanicThreshold)(nil),
		(*OriginPoolAdvancedOptions_PanicThreshold)(nil),
		(*OriginPoolAdvancedOptions_DisableSubsets)(nil),
		(*OriginPoolAdvancedOptions_EnableSubsets)(nil),
	}
}

func _OriginPoolAdvancedOptions_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*OriginPoolAdvancedOptions)
	// circuit_breaker_choice
	switch x := m.CircuitBreakerChoice.(type) {
	case *OriginPoolAdvancedOptions_DisableCircuitBreaker:
		_ = b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.DisableCircuitBreaker); err != nil {
			return err
		}
	case *OriginPoolAdvancedOptions_CircuitBreaker:
		_ = b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.CircuitBreaker); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("OriginPoolAdvancedOptions.CircuitBreakerChoice has unexpected type %T", x)
	}
	// outlier_detection_choice
	switch x := m.OutlierDetectionChoice.(type) {
	case *OriginPoolAdvancedOptions_DisableOutlierDetection:
		_ = b.EncodeVarint(7<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.DisableOutlierDetection); err != nil {
			return err
		}
	case *OriginPoolAdvancedOptions_OutlierDetection:
		_ = b.EncodeVarint(8<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.OutlierDetection); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("OriginPoolAdvancedOptions.OutlierDetectionChoice has unexpected type %T", x)
	}
	// panic_threshold_type
	switch x := m.PanicThresholdType.(type) {
	case *OriginPoolAdvancedOptions_NoPanicThreshold:
		_ = b.EncodeVarint(10<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.NoPanicThreshold); err != nil {
			return err
		}
	case *OriginPoolAdvancedOptions_PanicThreshold:
		_ = b.EncodeVarint(11<<3 | proto.WireVarint)
		_ = b.EncodeVarint(uint64(x.PanicThreshold))
	case nil:
	default:
		return fmt.Errorf("OriginPoolAdvancedOptions.PanicThresholdType has unexpected type %T", x)
	}
	// subset_choice
	switch x := m.SubsetChoice.(type) {
	case *OriginPoolAdvancedOptions_DisableSubsets:
		_ = b.EncodeVarint(13<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.DisableSubsets); err != nil {
			return err
		}
	case *OriginPoolAdvancedOptions_EnableSubsets:
		_ = b.EncodeVarint(14<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.EnableSubsets); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("OriginPoolAdvancedOptions.SubsetChoice has unexpected type %T", x)
	}
	return nil
}

func _OriginPoolAdvancedOptions_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*OriginPoolAdvancedOptions)
	switch tag {
	case 4: // circuit_breaker_choice.disable_circuit_breaker
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.CircuitBreakerChoice = &OriginPoolAdvancedOptions_DisableCircuitBreaker{msg}
		return true, err
	case 5: // circuit_breaker_choice.circuit_breaker
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema_cluster.CircuitBreaker)
		err := b.DecodeMessage(msg)
		m.CircuitBreakerChoice = &OriginPoolAdvancedOptions_CircuitBreaker{msg}
		return true, err
	case 7: // outlier_detection_choice.disable_outlier_detection
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.OutlierDetectionChoice = &OriginPoolAdvancedOptions_DisableOutlierDetection{msg}
		return true, err
	case 8: // outlier_detection_choice.outlier_detection
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema_cluster.OutlierDetectionType)
		err := b.DecodeMessage(msg)
		m.OutlierDetectionChoice = &OriginPoolAdvancedOptions_OutlierDetection{msg}
		return true, err
	case 10: // panic_threshold_type.no_panic_threshold
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.PanicThresholdType = &OriginPoolAdvancedOptions_NoPanicThreshold{msg}
		return true, err
	case 11: // panic_threshold_type.panic_threshold
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.PanicThresholdType = &OriginPoolAdvancedOptions_PanicThreshold{uint32(x)}
		return true, err
	case 13: // subset_choice.disable_subsets
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.SubsetChoice = &OriginPoolAdvancedOptions_DisableSubsets{msg}
		return true, err
	case 14: // subset_choice.enable_subsets
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(OriginPoolSubsets)
		err := b.DecodeMessage(msg)
		m.SubsetChoice = &OriginPoolAdvancedOptions_EnableSubsets{msg}
		return true, err
	default:
		return false, nil
	}
}

func _OriginPoolAdvancedOptions_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*OriginPoolAdvancedOptions)
	// circuit_breaker_choice
	switch x := m.CircuitBreakerChoice.(type) {
	case *OriginPoolAdvancedOptions_DisableCircuitBreaker:
		s := proto.Size(x.DisableCircuitBreaker)
		n += proto.SizeVarint(4<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *OriginPoolAdvancedOptions_CircuitBreaker:
		s := proto.Size(x.CircuitBreaker)
		n += proto.SizeVarint(5<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	// outlier_detection_choice
	switch x := m.OutlierDetectionChoice.(type) {
	case *OriginPoolAdvancedOptions_DisableOutlierDetection:
		s := proto.Size(x.DisableOutlierDetection)
		n += proto.SizeVarint(7<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *OriginPoolAdvancedOptions_OutlierDetection:
		s := proto.Size(x.OutlierDetection)
		n += proto.SizeVarint(8<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	// panic_threshold_type
	switch x := m.PanicThresholdType.(type) {
	case *OriginPoolAdvancedOptions_NoPanicThreshold:
		s := proto.Size(x.NoPanicThreshold)
		n += proto.SizeVarint(10<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *OriginPoolAdvancedOptions_PanicThreshold:
		n += proto.SizeVarint(11<<3 | proto.WireVarint)
		n += proto.SizeVarint(uint64(x.PanicThreshold))
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	// subset_choice
	switch x := m.SubsetChoice.(type) {
	case *OriginPoolAdvancedOptions_DisableSubsets:
		s := proto.Size(x.DisableSubsets)
		n += proto.SizeVarint(13<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *OriginPoolAdvancedOptions_EnableSubsets:
		s := proto.Size(x.EnableSubsets)
		n += proto.SizeVarint(14<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// GlobalSpecType
//
// x-displayName: "Global Specification"
// Shape of the origin pool specification
type GlobalSpecType struct {
	// List of Origin Servers
	//
	// x-displayName: "Origin Servers"
	// x-required
	// List of origin servers in this pool
	OriginServers []*OriginServerType `protobuf:"bytes,1,rep,name=origin_servers,json=originServers" json:"origin_servers,omitempty"`
	// Enable TLS
	//
	// x-displayName: "Enable TLS for Origin Servers"
	// x-required
	// Choice to enable TLS for origin servers
	//
	// Types that are valid to be assigned to TlsChoice:
	//	*GlobalSpecType_NoTls
	//	*GlobalSpecType_UseTls
	TlsChoice isGlobalSpecType_TlsChoice `protobuf_oneof:"tls_choice"`
	// Port
	//
	// x-displayName: "Port"
	// x-required
	// x-example: "9080"
	// Endpoint service is available on this port
	Port uint32 `protobuf:"varint,5,opt,name=port,proto3" json:"port,omitempty"`
	// Health check Port
	//
	// x-displayName: "Port used for health check"
	// x-example: "9080"
	// By default the health check port of an endpoint is the same as the endpoint’s port. This option provides an alternative health check port.
	// Setting this with a non-zero value allows an endpoint to have different health check port.
	//
	// Types that are valid to be assigned to HealthCheckPortChoice:
	//	*GlobalSpecType_SameAsEndpointPort
	//	*GlobalSpecType_HealthCheckPort
	HealthCheckPortChoice isGlobalSpecType_HealthCheckPortChoice `protobuf_oneof:"health_check_port_choice"`
	// Health Check
	//
	// x-displayName: "Health Check object"
	// Reference to healthcheck configuration objects
	Healthcheck []*ves_io_schema_views.ObjectRefType `protobuf:"bytes,6,rep,name=healthcheck" json:"healthcheck,omitempty"`
	// loadbalancer_algorithm
	//
	// x-displayName: "LoadBalancer Algorithm"
	// x-required
	// When a connection to a endpoint in an upstream cluster is required, the loadbalancer uses
	// loadbalancer_algorithm to determine which host is selected.
	LoadbalancerAlgorithm ves_io_schema_cluster.LoadbalancerAlgorithm `protobuf:"varint,7,opt,name=loadbalancer_algorithm,json=loadbalancerAlgorithm,proto3,enum=ves.io.schema.cluster.LoadbalancerAlgorithm" json:"loadbalancer_algorithm,omitempty"`
	// endpoint_selection
	//
	// x-displayName: "Endpoint Selection"
	// x-required
	// Policy for selection of endpoints from local site or remote site or both
	EndpointSelection ves_io_schema_cluster.EndpointSelectionPolicy `protobuf:"varint,8,opt,name=endpoint_selection,json=endpointSelection,proto3,enum=ves.io.schema.cluster.EndpointSelectionPolicy" json:"endpoint_selection,omitempty"`
	// Advanced Options
	//
	// x-displayName: "Advanced Options"
	// Advanced options configuration like timeouts, circuit breaker, subset load balancing
	AdvancedOptions *OriginPoolAdvancedOptions `protobuf:"bytes,12,opt,name=advanced_options,json=advancedOptions" json:"advanced_options,omitempty"`
	// view_internal
	//
	// x-displayName: "View Internal"
	// Reference to view internal object
	ViewInternal *ves_io_schema_views.ObjectRefType `protobuf:"bytes,1000,opt,name=view_internal,json=viewInternal" json:"view_internal,omitempty"`
}

func (m *GlobalSpecType) Reset()                    { *m = GlobalSpecType{} }
func (*GlobalSpecType) ProtoMessage()               {}
func (*GlobalSpecType) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{16} }

type isGlobalSpecType_TlsChoice interface {
	isGlobalSpecType_TlsChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isGlobalSpecType_HealthCheckPortChoice interface {
	isGlobalSpecType_HealthCheckPortChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type GlobalSpecType_NoTls struct {
	NoTls *ves_io_schema4.Empty `protobuf:"bytes,2,opt,name=no_tls,json=noTls,oneof"`
}
type GlobalSpecType_UseTls struct {
	UseTls *UpstreamTlsParameters `protobuf:"bytes,3,opt,name=use_tls,json=useTls,oneof"`
}
type GlobalSpecType_SameAsEndpointPort struct {
	SameAsEndpointPort *ves_io_schema4.Empty `protobuf:"bytes,10,opt,name=same_as_endpoint_port,json=sameAsEndpointPort,oneof"`
}
type GlobalSpecType_HealthCheckPort struct {
	HealthCheckPort uint32 `protobuf:"varint,11,opt,name=health_check_port,json=healthCheckPort,proto3,oneof"`
}

func (*GlobalSpecType_NoTls) isGlobalSpecType_TlsChoice()                          {}
func (*GlobalSpecType_UseTls) isGlobalSpecType_TlsChoice()                         {}
func (*GlobalSpecType_SameAsEndpointPort) isGlobalSpecType_HealthCheckPortChoice() {}
func (*GlobalSpecType_HealthCheckPort) isGlobalSpecType_HealthCheckPortChoice()    {}

func (m *GlobalSpecType) GetTlsChoice() isGlobalSpecType_TlsChoice {
	if m != nil {
		return m.TlsChoice
	}
	return nil
}
func (m *GlobalSpecType) GetHealthCheckPortChoice() isGlobalSpecType_HealthCheckPortChoice {
	if m != nil {
		return m.HealthCheckPortChoice
	}
	return nil
}

func (m *GlobalSpecType) GetOriginServers() []*OriginServerType {
	if m != nil {
		return m.OriginServers
	}
	return nil
}

func (m *GlobalSpecType) GetNoTls() *ves_io_schema4.Empty {
	if x, ok := m.GetTlsChoice().(*GlobalSpecType_NoTls); ok {
		return x.NoTls
	}
	return nil
}

func (m *GlobalSpecType) GetUseTls() *UpstreamTlsParameters {
	if x, ok := m.GetTlsChoice().(*GlobalSpecType_UseTls); ok {
		return x.UseTls
	}
	return nil
}

func (m *GlobalSpecType) GetPort() uint32 {
	if m != nil {
		return m.Port
	}
	return 0
}

func (m *GlobalSpecType) GetSameAsEndpointPort() *ves_io_schema4.Empty {
	if x, ok := m.GetHealthCheckPortChoice().(*GlobalSpecType_SameAsEndpointPort); ok {
		return x.SameAsEndpointPort
	}
	return nil
}

func (m *GlobalSpecType) GetHealthCheckPort() uint32 {
	if x, ok := m.GetHealthCheckPortChoice().(*GlobalSpecType_HealthCheckPort); ok {
		return x.HealthCheckPort
	}
	return 0
}

func (m *GlobalSpecType) GetHealthcheck() []*ves_io_schema_views.ObjectRefType {
	if m != nil {
		return m.Healthcheck
	}
	return nil
}

func (m *GlobalSpecType) GetLoadbalancerAlgorithm() ves_io_schema_cluster.LoadbalancerAlgorithm {
	if m != nil {
		return m.LoadbalancerAlgorithm
	}
	return ves_io_schema_cluster.ROUND_ROBIN
}

func (m *GlobalSpecType) GetEndpointSelection() ves_io_schema_cluster.EndpointSelectionPolicy {
	if m != nil {
		return m.EndpointSelection
	}
	return ves_io_schema_cluster.DISTRIBUTED
}

func (m *GlobalSpecType) GetAdvancedOptions() *OriginPoolAdvancedOptions {
	if m != nil {
		return m.AdvancedOptions
	}
	return nil
}

func (m *GlobalSpecType) GetViewInternal() *ves_io_schema_views.ObjectRefType {
	if m != nil {
		return m.ViewInternal
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*GlobalSpecType) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _GlobalSpecType_OneofMarshaler, _GlobalSpecType_OneofUnmarshaler, _GlobalSpecType_OneofSizer, []interface{}{
		(*GlobalSpecType_NoTls)(nil),
		(*GlobalSpecType_UseTls)(nil),
		(*GlobalSpecType_SameAsEndpointPort)(nil),
		(*GlobalSpecType_HealthCheckPort)(nil),
	}
}

func _GlobalSpecType_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*GlobalSpecType)
	// tls_choice
	switch x := m.TlsChoice.(type) {
	case *GlobalSpecType_NoTls:
		_ = b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.NoTls); err != nil {
			return err
		}
	case *GlobalSpecType_UseTls:
		_ = b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.UseTls); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("GlobalSpecType.TlsChoice has unexpected type %T", x)
	}
	// health_check_port_choice
	switch x := m.HealthCheckPortChoice.(type) {
	case *GlobalSpecType_SameAsEndpointPort:
		_ = b.EncodeVarint(10<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.SameAsEndpointPort); err != nil {
			return err
		}
	case *GlobalSpecType_HealthCheckPort:
		_ = b.EncodeVarint(11<<3 | proto.WireVarint)
		_ = b.EncodeVarint(uint64(x.HealthCheckPort))
	case nil:
	default:
		return fmt.Errorf("GlobalSpecType.HealthCheckPortChoice has unexpected type %T", x)
	}
	return nil
}

func _GlobalSpecType_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*GlobalSpecType)
	switch tag {
	case 2: // tls_choice.no_tls
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.TlsChoice = &GlobalSpecType_NoTls{msg}
		return true, err
	case 3: // tls_choice.use_tls
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(UpstreamTlsParameters)
		err := b.DecodeMessage(msg)
		m.TlsChoice = &GlobalSpecType_UseTls{msg}
		return true, err
	case 10: // health_check_port_choice.same_as_endpoint_port
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.HealthCheckPortChoice = &GlobalSpecType_SameAsEndpointPort{msg}
		return true, err
	case 11: // health_check_port_choice.health_check_port
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.HealthCheckPortChoice = &GlobalSpecType_HealthCheckPort{uint32(x)}
		return true, err
	default:
		return false, nil
	}
}

func _GlobalSpecType_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*GlobalSpecType)
	// tls_choice
	switch x := m.TlsChoice.(type) {
	case *GlobalSpecType_NoTls:
		s := proto.Size(x.NoTls)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *GlobalSpecType_UseTls:
		s := proto.Size(x.UseTls)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	// health_check_port_choice
	switch x := m.HealthCheckPortChoice.(type) {
	case *GlobalSpecType_SameAsEndpointPort:
		s := proto.Size(x.SameAsEndpointPort)
		n += proto.SizeVarint(10<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *GlobalSpecType_HealthCheckPort:
		n += proto.SizeVarint(11<<3 | proto.WireVarint)
		n += proto.SizeVarint(uint64(x.HealthCheckPort))
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// CreateSpecType
//
// x-displayName: "Create Origin Pool"
// Shape of the origin pool create specification
type CreateSpecType struct {
	OriginServers []*OriginServerType `protobuf:"bytes,1,rep,name=origin_servers,json=originServers" json:"origin_servers,omitempty"`
	// Types that are valid to be assigned to TlsChoice:
	//	*CreateSpecType_NoTls
	//	*CreateSpecType_UseTls
	TlsChoice isCreateSpecType_TlsChoice `protobuf_oneof:"tls_choice"`
	Port      uint32                     `protobuf:"varint,5,opt,name=port,proto3" json:"port,omitempty"`
	// Types that are valid to be assigned to HealthCheckPortChoice:
	//	*CreateSpecType_SameAsEndpointPort
	//	*CreateSpecType_HealthCheckPort
	HealthCheckPortChoice isCreateSpecType_HealthCheckPortChoice        `protobuf_oneof:"health_check_port_choice"`
	Healthcheck           []*ves_io_schema_views.ObjectRefType          `protobuf:"bytes,6,rep,name=healthcheck" json:"healthcheck,omitempty"`
	LoadbalancerAlgorithm ves_io_schema_cluster.LoadbalancerAlgorithm   `protobuf:"varint,7,opt,name=loadbalancer_algorithm,json=loadbalancerAlgorithm,proto3,enum=ves.io.schema.cluster.LoadbalancerAlgorithm" json:"loadbalancer_algorithm,omitempty"`
	EndpointSelection     ves_io_schema_cluster.EndpointSelectionPolicy `protobuf:"varint,8,opt,name=endpoint_selection,json=endpointSelection,proto3,enum=ves.io.schema.cluster.EndpointSelectionPolicy" json:"endpoint_selection,omitempty"`
	AdvancedOptions       *OriginPoolAdvancedOptions                    `protobuf:"bytes,12,opt,name=advanced_options,json=advancedOptions" json:"advanced_options,omitempty"`
}

func (m *CreateSpecType) Reset()                    { *m = CreateSpecType{} }
func (*CreateSpecType) ProtoMessage()               {}
func (*CreateSpecType) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{17} }

type isCreateSpecType_TlsChoice interface {
	isCreateSpecType_TlsChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isCreateSpecType_HealthCheckPortChoice interface {
	isCreateSpecType_HealthCheckPortChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type CreateSpecType_NoTls struct {
	NoTls *ves_io_schema4.Empty `protobuf:"bytes,2,opt,name=no_tls,json=noTls,oneof"`
}
type CreateSpecType_UseTls struct {
	UseTls *UpstreamTlsParameters `protobuf:"bytes,3,opt,name=use_tls,json=useTls,oneof"`
}
type CreateSpecType_SameAsEndpointPort struct {
	SameAsEndpointPort *ves_io_schema4.Empty `protobuf:"bytes,10,opt,name=same_as_endpoint_port,json=sameAsEndpointPort,oneof"`
}
type CreateSpecType_HealthCheckPort struct {
	HealthCheckPort uint32 `protobuf:"varint,11,opt,name=health_check_port,json=healthCheckPort,proto3,oneof"`
}

func (*CreateSpecType_NoTls) isCreateSpecType_TlsChoice()                          {}
func (*CreateSpecType_UseTls) isCreateSpecType_TlsChoice()                         {}
func (*CreateSpecType_SameAsEndpointPort) isCreateSpecType_HealthCheckPortChoice() {}
func (*CreateSpecType_HealthCheckPort) isCreateSpecType_HealthCheckPortChoice()    {}

func (m *CreateSpecType) GetTlsChoice() isCreateSpecType_TlsChoice {
	if m != nil {
		return m.TlsChoice
	}
	return nil
}
func (m *CreateSpecType) GetHealthCheckPortChoice() isCreateSpecType_HealthCheckPortChoice {
	if m != nil {
		return m.HealthCheckPortChoice
	}
	return nil
}

func (m *CreateSpecType) GetOriginServers() []*OriginServerType {
	if m != nil {
		return m.OriginServers
	}
	return nil
}

func (m *CreateSpecType) GetNoTls() *ves_io_schema4.Empty {
	if x, ok := m.GetTlsChoice().(*CreateSpecType_NoTls); ok {
		return x.NoTls
	}
	return nil
}

func (m *CreateSpecType) GetUseTls() *UpstreamTlsParameters {
	if x, ok := m.GetTlsChoice().(*CreateSpecType_UseTls); ok {
		return x.UseTls
	}
	return nil
}

func (m *CreateSpecType) GetPort() uint32 {
	if m != nil {
		return m.Port
	}
	return 0
}

func (m *CreateSpecType) GetSameAsEndpointPort() *ves_io_schema4.Empty {
	if x, ok := m.GetHealthCheckPortChoice().(*CreateSpecType_SameAsEndpointPort); ok {
		return x.SameAsEndpointPort
	}
	return nil
}

func (m *CreateSpecType) GetHealthCheckPort() uint32 {
	if x, ok := m.GetHealthCheckPortChoice().(*CreateSpecType_HealthCheckPort); ok {
		return x.HealthCheckPort
	}
	return 0
}

func (m *CreateSpecType) GetHealthcheck() []*ves_io_schema_views.ObjectRefType {
	if m != nil {
		return m.Healthcheck
	}
	return nil
}

func (m *CreateSpecType) GetLoadbalancerAlgorithm() ves_io_schema_cluster.LoadbalancerAlgorithm {
	if m != nil {
		return m.LoadbalancerAlgorithm
	}
	return ves_io_schema_cluster.ROUND_ROBIN
}

func (m *CreateSpecType) GetEndpointSelection() ves_io_schema_cluster.EndpointSelectionPolicy {
	if m != nil {
		return m.EndpointSelection
	}
	return ves_io_schema_cluster.DISTRIBUTED
}

func (m *CreateSpecType) GetAdvancedOptions() *OriginPoolAdvancedOptions {
	if m != nil {
		return m.AdvancedOptions
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*CreateSpecType) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _CreateSpecType_OneofMarshaler, _CreateSpecType_OneofUnmarshaler, _CreateSpecType_OneofSizer, []interface{}{
		(*CreateSpecType_NoTls)(nil),
		(*CreateSpecType_UseTls)(nil),
		(*CreateSpecType_SameAsEndpointPort)(nil),
		(*CreateSpecType_HealthCheckPort)(nil),
	}
}

func _CreateSpecType_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*CreateSpecType)
	// tls_choice
	switch x := m.TlsChoice.(type) {
	case *CreateSpecType_NoTls:
		_ = b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.NoTls); err != nil {
			return err
		}
	case *CreateSpecType_UseTls:
		_ = b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.UseTls); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("CreateSpecType.TlsChoice has unexpected type %T", x)
	}
	// health_check_port_choice
	switch x := m.HealthCheckPortChoice.(type) {
	case *CreateSpecType_SameAsEndpointPort:
		_ = b.EncodeVarint(10<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.SameAsEndpointPort); err != nil {
			return err
		}
	case *CreateSpecType_HealthCheckPort:
		_ = b.EncodeVarint(11<<3 | proto.WireVarint)
		_ = b.EncodeVarint(uint64(x.HealthCheckPort))
	case nil:
	default:
		return fmt.Errorf("CreateSpecType.HealthCheckPortChoice has unexpected type %T", x)
	}
	return nil
}

func _CreateSpecType_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*CreateSpecType)
	switch tag {
	case 2: // tls_choice.no_tls
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.TlsChoice = &CreateSpecType_NoTls{msg}
		return true, err
	case 3: // tls_choice.use_tls
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(UpstreamTlsParameters)
		err := b.DecodeMessage(msg)
		m.TlsChoice = &CreateSpecType_UseTls{msg}
		return true, err
	case 10: // health_check_port_choice.same_as_endpoint_port
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.HealthCheckPortChoice = &CreateSpecType_SameAsEndpointPort{msg}
		return true, err
	case 11: // health_check_port_choice.health_check_port
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.HealthCheckPortChoice = &CreateSpecType_HealthCheckPort{uint32(x)}
		return true, err
	default:
		return false, nil
	}
}

func _CreateSpecType_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*CreateSpecType)
	// tls_choice
	switch x := m.TlsChoice.(type) {
	case *CreateSpecType_NoTls:
		s := proto.Size(x.NoTls)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *CreateSpecType_UseTls:
		s := proto.Size(x.UseTls)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	// health_check_port_choice
	switch x := m.HealthCheckPortChoice.(type) {
	case *CreateSpecType_SameAsEndpointPort:
		s := proto.Size(x.SameAsEndpointPort)
		n += proto.SizeVarint(10<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *CreateSpecType_HealthCheckPort:
		n += proto.SizeVarint(11<<3 | proto.WireVarint)
		n += proto.SizeVarint(uint64(x.HealthCheckPort))
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// ReplaceSpecType
//
// x-displayName: "Replace Origin Pool"
// Shape of the origin pool create specification
type ReplaceSpecType struct {
	OriginServers []*OriginServerType `protobuf:"bytes,1,rep,name=origin_servers,json=originServers" json:"origin_servers,omitempty"`
	// Types that are valid to be assigned to TlsChoice:
	//	*ReplaceSpecType_NoTls
	//	*ReplaceSpecType_UseTls
	TlsChoice isReplaceSpecType_TlsChoice `protobuf_oneof:"tls_choice"`
	Port      uint32                      `protobuf:"varint,5,opt,name=port,proto3" json:"port,omitempty"`
	// Types that are valid to be assigned to HealthCheckPortChoice:
	//	*ReplaceSpecType_SameAsEndpointPort
	//	*ReplaceSpecType_HealthCheckPort
	HealthCheckPortChoice isReplaceSpecType_HealthCheckPortChoice       `protobuf_oneof:"health_check_port_choice"`
	Healthcheck           []*ves_io_schema_views.ObjectRefType          `protobuf:"bytes,6,rep,name=healthcheck" json:"healthcheck,omitempty"`
	LoadbalancerAlgorithm ves_io_schema_cluster.LoadbalancerAlgorithm   `protobuf:"varint,7,opt,name=loadbalancer_algorithm,json=loadbalancerAlgorithm,proto3,enum=ves.io.schema.cluster.LoadbalancerAlgorithm" json:"loadbalancer_algorithm,omitempty"`
	EndpointSelection     ves_io_schema_cluster.EndpointSelectionPolicy `protobuf:"varint,8,opt,name=endpoint_selection,json=endpointSelection,proto3,enum=ves.io.schema.cluster.EndpointSelectionPolicy" json:"endpoint_selection,omitempty"`
	AdvancedOptions       *OriginPoolAdvancedOptions                    `protobuf:"bytes,12,opt,name=advanced_options,json=advancedOptions" json:"advanced_options,omitempty"`
}

func (m *ReplaceSpecType) Reset()                    { *m = ReplaceSpecType{} }
func (*ReplaceSpecType) ProtoMessage()               {}
func (*ReplaceSpecType) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{18} }

type isReplaceSpecType_TlsChoice interface {
	isReplaceSpecType_TlsChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isReplaceSpecType_HealthCheckPortChoice interface {
	isReplaceSpecType_HealthCheckPortChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type ReplaceSpecType_NoTls struct {
	NoTls *ves_io_schema4.Empty `protobuf:"bytes,2,opt,name=no_tls,json=noTls,oneof"`
}
type ReplaceSpecType_UseTls struct {
	UseTls *UpstreamTlsParameters `protobuf:"bytes,3,opt,name=use_tls,json=useTls,oneof"`
}
type ReplaceSpecType_SameAsEndpointPort struct {
	SameAsEndpointPort *ves_io_schema4.Empty `protobuf:"bytes,10,opt,name=same_as_endpoint_port,json=sameAsEndpointPort,oneof"`
}
type ReplaceSpecType_HealthCheckPort struct {
	HealthCheckPort uint32 `protobuf:"varint,11,opt,name=health_check_port,json=healthCheckPort,proto3,oneof"`
}

func (*ReplaceSpecType_NoTls) isReplaceSpecType_TlsChoice()                          {}
func (*ReplaceSpecType_UseTls) isReplaceSpecType_TlsChoice()                         {}
func (*ReplaceSpecType_SameAsEndpointPort) isReplaceSpecType_HealthCheckPortChoice() {}
func (*ReplaceSpecType_HealthCheckPort) isReplaceSpecType_HealthCheckPortChoice()    {}

func (m *ReplaceSpecType) GetTlsChoice() isReplaceSpecType_TlsChoice {
	if m != nil {
		return m.TlsChoice
	}
	return nil
}
func (m *ReplaceSpecType) GetHealthCheckPortChoice() isReplaceSpecType_HealthCheckPortChoice {
	if m != nil {
		return m.HealthCheckPortChoice
	}
	return nil
}

func (m *ReplaceSpecType) GetOriginServers() []*OriginServerType {
	if m != nil {
		return m.OriginServers
	}
	return nil
}

func (m *ReplaceSpecType) GetNoTls() *ves_io_schema4.Empty {
	if x, ok := m.GetTlsChoice().(*ReplaceSpecType_NoTls); ok {
		return x.NoTls
	}
	return nil
}

func (m *ReplaceSpecType) GetUseTls() *UpstreamTlsParameters {
	if x, ok := m.GetTlsChoice().(*ReplaceSpecType_UseTls); ok {
		return x.UseTls
	}
	return nil
}

func (m *ReplaceSpecType) GetPort() uint32 {
	if m != nil {
		return m.Port
	}
	return 0
}

func (m *ReplaceSpecType) GetSameAsEndpointPort() *ves_io_schema4.Empty {
	if x, ok := m.GetHealthCheckPortChoice().(*ReplaceSpecType_SameAsEndpointPort); ok {
		return x.SameAsEndpointPort
	}
	return nil
}

func (m *ReplaceSpecType) GetHealthCheckPort() uint32 {
	if x, ok := m.GetHealthCheckPortChoice().(*ReplaceSpecType_HealthCheckPort); ok {
		return x.HealthCheckPort
	}
	return 0
}

func (m *ReplaceSpecType) GetHealthcheck() []*ves_io_schema_views.ObjectRefType {
	if m != nil {
		return m.Healthcheck
	}
	return nil
}

func (m *ReplaceSpecType) GetLoadbalancerAlgorithm() ves_io_schema_cluster.LoadbalancerAlgorithm {
	if m != nil {
		return m.LoadbalancerAlgorithm
	}
	return ves_io_schema_cluster.ROUND_ROBIN
}

func (m *ReplaceSpecType) GetEndpointSelection() ves_io_schema_cluster.EndpointSelectionPolicy {
	if m != nil {
		return m.EndpointSelection
	}
	return ves_io_schema_cluster.DISTRIBUTED
}

func (m *ReplaceSpecType) GetAdvancedOptions() *OriginPoolAdvancedOptions {
	if m != nil {
		return m.AdvancedOptions
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*ReplaceSpecType) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _ReplaceSpecType_OneofMarshaler, _ReplaceSpecType_OneofUnmarshaler, _ReplaceSpecType_OneofSizer, []interface{}{
		(*ReplaceSpecType_NoTls)(nil),
		(*ReplaceSpecType_UseTls)(nil),
		(*ReplaceSpecType_SameAsEndpointPort)(nil),
		(*ReplaceSpecType_HealthCheckPort)(nil),
	}
}

func _ReplaceSpecType_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*ReplaceSpecType)
	// tls_choice
	switch x := m.TlsChoice.(type) {
	case *ReplaceSpecType_NoTls:
		_ = b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.NoTls); err != nil {
			return err
		}
	case *ReplaceSpecType_UseTls:
		_ = b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.UseTls); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("ReplaceSpecType.TlsChoice has unexpected type %T", x)
	}
	// health_check_port_choice
	switch x := m.HealthCheckPortChoice.(type) {
	case *ReplaceSpecType_SameAsEndpointPort:
		_ = b.EncodeVarint(10<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.SameAsEndpointPort); err != nil {
			return err
		}
	case *ReplaceSpecType_HealthCheckPort:
		_ = b.EncodeVarint(11<<3 | proto.WireVarint)
		_ = b.EncodeVarint(uint64(x.HealthCheckPort))
	case nil:
	default:
		return fmt.Errorf("ReplaceSpecType.HealthCheckPortChoice has unexpected type %T", x)
	}
	return nil
}

func _ReplaceSpecType_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*ReplaceSpecType)
	switch tag {
	case 2: // tls_choice.no_tls
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.TlsChoice = &ReplaceSpecType_NoTls{msg}
		return true, err
	case 3: // tls_choice.use_tls
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(UpstreamTlsParameters)
		err := b.DecodeMessage(msg)
		m.TlsChoice = &ReplaceSpecType_UseTls{msg}
		return true, err
	case 10: // health_check_port_choice.same_as_endpoint_port
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.HealthCheckPortChoice = &ReplaceSpecType_SameAsEndpointPort{msg}
		return true, err
	case 11: // health_check_port_choice.health_check_port
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.HealthCheckPortChoice = &ReplaceSpecType_HealthCheckPort{uint32(x)}
		return true, err
	default:
		return false, nil
	}
}

func _ReplaceSpecType_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*ReplaceSpecType)
	// tls_choice
	switch x := m.TlsChoice.(type) {
	case *ReplaceSpecType_NoTls:
		s := proto.Size(x.NoTls)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ReplaceSpecType_UseTls:
		s := proto.Size(x.UseTls)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	// health_check_port_choice
	switch x := m.HealthCheckPortChoice.(type) {
	case *ReplaceSpecType_SameAsEndpointPort:
		s := proto.Size(x.SameAsEndpointPort)
		n += proto.SizeVarint(10<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ReplaceSpecType_HealthCheckPort:
		n += proto.SizeVarint(11<<3 | proto.WireVarint)
		n += proto.SizeVarint(uint64(x.HealthCheckPort))
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// GetSpecType
//
// x-displayName: "Get Origin Pool"
// Shape of the origin pool get specification
type GetSpecType struct {
	OriginServers []*OriginServerType `protobuf:"bytes,1,rep,name=origin_servers,json=originServers" json:"origin_servers,omitempty"`
	// Types that are valid to be assigned to TlsChoice:
	//	*GetSpecType_NoTls
	//	*GetSpecType_UseTls
	TlsChoice isGetSpecType_TlsChoice `protobuf_oneof:"tls_choice"`
	Port      uint32                  `protobuf:"varint,5,opt,name=port,proto3" json:"port,omitempty"`
	// Types that are valid to be assigned to HealthCheckPortChoice:
	//	*GetSpecType_SameAsEndpointPort
	//	*GetSpecType_HealthCheckPort
	HealthCheckPortChoice isGetSpecType_HealthCheckPortChoice           `protobuf_oneof:"health_check_port_choice"`
	Healthcheck           []*ves_io_schema_views.ObjectRefType          `protobuf:"bytes,6,rep,name=healthcheck" json:"healthcheck,omitempty"`
	LoadbalancerAlgorithm ves_io_schema_cluster.LoadbalancerAlgorithm   `protobuf:"varint,7,opt,name=loadbalancer_algorithm,json=loadbalancerAlgorithm,proto3,enum=ves.io.schema.cluster.LoadbalancerAlgorithm" json:"loadbalancer_algorithm,omitempty"`
	EndpointSelection     ves_io_schema_cluster.EndpointSelectionPolicy `protobuf:"varint,8,opt,name=endpoint_selection,json=endpointSelection,proto3,enum=ves.io.schema.cluster.EndpointSelectionPolicy" json:"endpoint_selection,omitempty"`
	AdvancedOptions       *OriginPoolAdvancedOptions                    `protobuf:"bytes,12,opt,name=advanced_options,json=advancedOptions" json:"advanced_options,omitempty"`
}

func (m *GetSpecType) Reset()                    { *m = GetSpecType{} }
func (*GetSpecType) ProtoMessage()               {}
func (*GetSpecType) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{19} }

type isGetSpecType_TlsChoice interface {
	isGetSpecType_TlsChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isGetSpecType_HealthCheckPortChoice interface {
	isGetSpecType_HealthCheckPortChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type GetSpecType_NoTls struct {
	NoTls *ves_io_schema4.Empty `protobuf:"bytes,2,opt,name=no_tls,json=noTls,oneof"`
}
type GetSpecType_UseTls struct {
	UseTls *UpstreamTlsParameters `protobuf:"bytes,3,opt,name=use_tls,json=useTls,oneof"`
}
type GetSpecType_SameAsEndpointPort struct {
	SameAsEndpointPort *ves_io_schema4.Empty `protobuf:"bytes,10,opt,name=same_as_endpoint_port,json=sameAsEndpointPort,oneof"`
}
type GetSpecType_HealthCheckPort struct {
	HealthCheckPort uint32 `protobuf:"varint,11,opt,name=health_check_port,json=healthCheckPort,proto3,oneof"`
}

func (*GetSpecType_NoTls) isGetSpecType_TlsChoice()                          {}
func (*GetSpecType_UseTls) isGetSpecType_TlsChoice()                         {}
func (*GetSpecType_SameAsEndpointPort) isGetSpecType_HealthCheckPortChoice() {}
func (*GetSpecType_HealthCheckPort) isGetSpecType_HealthCheckPortChoice()    {}

func (m *GetSpecType) GetTlsChoice() isGetSpecType_TlsChoice {
	if m != nil {
		return m.TlsChoice
	}
	return nil
}
func (m *GetSpecType) GetHealthCheckPortChoice() isGetSpecType_HealthCheckPortChoice {
	if m != nil {
		return m.HealthCheckPortChoice
	}
	return nil
}

func (m *GetSpecType) GetOriginServers() []*OriginServerType {
	if m != nil {
		return m.OriginServers
	}
	return nil
}

func (m *GetSpecType) GetNoTls() *ves_io_schema4.Empty {
	if x, ok := m.GetTlsChoice().(*GetSpecType_NoTls); ok {
		return x.NoTls
	}
	return nil
}

func (m *GetSpecType) GetUseTls() *UpstreamTlsParameters {
	if x, ok := m.GetTlsChoice().(*GetSpecType_UseTls); ok {
		return x.UseTls
	}
	return nil
}

func (m *GetSpecType) GetPort() uint32 {
	if m != nil {
		return m.Port
	}
	return 0
}

func (m *GetSpecType) GetSameAsEndpointPort() *ves_io_schema4.Empty {
	if x, ok := m.GetHealthCheckPortChoice().(*GetSpecType_SameAsEndpointPort); ok {
		return x.SameAsEndpointPort
	}
	return nil
}

func (m *GetSpecType) GetHealthCheckPort() uint32 {
	if x, ok := m.GetHealthCheckPortChoice().(*GetSpecType_HealthCheckPort); ok {
		return x.HealthCheckPort
	}
	return 0
}

func (m *GetSpecType) GetHealthcheck() []*ves_io_schema_views.ObjectRefType {
	if m != nil {
		return m.Healthcheck
	}
	return nil
}

func (m *GetSpecType) GetLoadbalancerAlgorithm() ves_io_schema_cluster.LoadbalancerAlgorithm {
	if m != nil {
		return m.LoadbalancerAlgorithm
	}
	return ves_io_schema_cluster.ROUND_ROBIN
}

func (m *GetSpecType) GetEndpointSelection() ves_io_schema_cluster.EndpointSelectionPolicy {
	if m != nil {
		return m.EndpointSelection
	}
	return ves_io_schema_cluster.DISTRIBUTED
}

func (m *GetSpecType) GetAdvancedOptions() *OriginPoolAdvancedOptions {
	if m != nil {
		return m.AdvancedOptions
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*GetSpecType) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _GetSpecType_OneofMarshaler, _GetSpecType_OneofUnmarshaler, _GetSpecType_OneofSizer, []interface{}{
		(*GetSpecType_NoTls)(nil),
		(*GetSpecType_UseTls)(nil),
		(*GetSpecType_SameAsEndpointPort)(nil),
		(*GetSpecType_HealthCheckPort)(nil),
	}
}

func _GetSpecType_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*GetSpecType)
	// tls_choice
	switch x := m.TlsChoice.(type) {
	case *GetSpecType_NoTls:
		_ = b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.NoTls); err != nil {
			return err
		}
	case *GetSpecType_UseTls:
		_ = b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.UseTls); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("GetSpecType.TlsChoice has unexpected type %T", x)
	}
	// health_check_port_choice
	switch x := m.HealthCheckPortChoice.(type) {
	case *GetSpecType_SameAsEndpointPort:
		_ = b.EncodeVarint(10<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.SameAsEndpointPort); err != nil {
			return err
		}
	case *GetSpecType_HealthCheckPort:
		_ = b.EncodeVarint(11<<3 | proto.WireVarint)
		_ = b.EncodeVarint(uint64(x.HealthCheckPort))
	case nil:
	default:
		return fmt.Errorf("GetSpecType.HealthCheckPortChoice has unexpected type %T", x)
	}
	return nil
}

func _GetSpecType_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*GetSpecType)
	switch tag {
	case 2: // tls_choice.no_tls
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.TlsChoice = &GetSpecType_NoTls{msg}
		return true, err
	case 3: // tls_choice.use_tls
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(UpstreamTlsParameters)
		err := b.DecodeMessage(msg)
		m.TlsChoice = &GetSpecType_UseTls{msg}
		return true, err
	case 10: // health_check_port_choice.same_as_endpoint_port
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.HealthCheckPortChoice = &GetSpecType_SameAsEndpointPort{msg}
		return true, err
	case 11: // health_check_port_choice.health_check_port
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.HealthCheckPortChoice = &GetSpecType_HealthCheckPort{uint32(x)}
		return true, err
	default:
		return false, nil
	}
}

func _GetSpecType_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*GetSpecType)
	// tls_choice
	switch x := m.TlsChoice.(type) {
	case *GetSpecType_NoTls:
		s := proto.Size(x.NoTls)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *GetSpecType_UseTls:
		s := proto.Size(x.UseTls)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	// health_check_port_choice
	switch x := m.HealthCheckPortChoice.(type) {
	case *GetSpecType_SameAsEndpointPort:
		s := proto.Size(x.SameAsEndpointPort)
		n += proto.SizeVarint(10<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *GetSpecType_HealthCheckPort:
		n += proto.SizeVarint(11<<3 | proto.WireVarint)
		n += proto.SizeVarint(uint64(x.HealthCheckPort))
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

func init() {
	proto.RegisterType((*OriginServerPublicIP)(nil), "ves.io.schema.views.origin_pool.OriginServerPublicIP")
	golang_proto.RegisterType((*OriginServerPublicIP)(nil), "ves.io.schema.views.origin_pool.OriginServerPublicIP")
	proto.RegisterType((*OriginServerPublicName)(nil), "ves.io.schema.views.origin_pool.OriginServerPublicName")
	golang_proto.RegisterType((*OriginServerPublicName)(nil), "ves.io.schema.views.origin_pool.OriginServerPublicName")
	proto.RegisterType((*OriginServerPrivateIP)(nil), "ves.io.schema.views.origin_pool.OriginServerPrivateIP")
	golang_proto.RegisterType((*OriginServerPrivateIP)(nil), "ves.io.schema.views.origin_pool.OriginServerPrivateIP")
	proto.RegisterType((*OriginServerPrivateName)(nil), "ves.io.schema.views.origin_pool.OriginServerPrivateName")
	golang_proto.RegisterType((*OriginServerPrivateName)(nil), "ves.io.schema.views.origin_pool.OriginServerPrivateName")
	proto.RegisterType((*OriginServerVirtualNetworkPrivateIP)(nil), "ves.io.schema.views.origin_pool.OriginServerVirtualNetworkPrivateIP")
	golang_proto.RegisterType((*OriginServerVirtualNetworkPrivateIP)(nil), "ves.io.schema.views.origin_pool.OriginServerVirtualNetworkPrivateIP")
	proto.RegisterType((*OriginServerVirtualNetworkPrivateName)(nil), "ves.io.schema.views.origin_pool.OriginServerVirtualNetworkPrivateName")
	golang_proto.RegisterType((*OriginServerVirtualNetworkPrivateName)(nil), "ves.io.schema.views.origin_pool.OriginServerVirtualNetworkPrivateName")
	proto.RegisterType((*OriginServerK8SService)(nil), "ves.io.schema.views.origin_pool.OriginServerK8SService")
	golang_proto.RegisterType((*OriginServerK8SService)(nil), "ves.io.schema.views.origin_pool.OriginServerK8SService")
	proto.RegisterType((*OriginServerConsulService)(nil), "ves.io.schema.views.origin_pool.OriginServerConsulService")
	golang_proto.RegisterType((*OriginServerConsulService)(nil), "ves.io.schema.views.origin_pool.OriginServerConsulService")
	proto.RegisterType((*OriginServerCustomEndpoint)(nil), "ves.io.schema.views.origin_pool.OriginServerCustomEndpoint")
	golang_proto.RegisterType((*OriginServerCustomEndpoint)(nil), "ves.io.schema.views.origin_pool.OriginServerCustomEndpoint")
	proto.RegisterType((*OriginServerType)(nil), "ves.io.schema.views.origin_pool.OriginServerType")
	golang_proto.RegisterType((*OriginServerType)(nil), "ves.io.schema.views.origin_pool.OriginServerType")
	proto.RegisterType((*UpstreamTlsValidationContext)(nil), "ves.io.schema.views.origin_pool.UpstreamTlsValidationContext")
	golang_proto.RegisterType((*UpstreamTlsValidationContext)(nil), "ves.io.schema.views.origin_pool.UpstreamTlsValidationContext")
	proto.RegisterType((*TlsCertificatesType)(nil), "ves.io.schema.views.origin_pool.TlsCertificatesType")
	golang_proto.RegisterType((*TlsCertificatesType)(nil), "ves.io.schema.views.origin_pool.TlsCertificatesType")
	proto.RegisterType((*UpstreamTlsParameters)(nil), "ves.io.schema.views.origin_pool.UpstreamTlsParameters")
	golang_proto.RegisterType((*UpstreamTlsParameters)(nil), "ves.io.schema.views.origin_pool.UpstreamTlsParameters")
	proto.RegisterType((*OriginPoolDefaultSubset)(nil), "ves.io.schema.views.origin_pool.OriginPoolDefaultSubset")
	golang_proto.RegisterType((*OriginPoolDefaultSubset)(nil), "ves.io.schema.views.origin_pool.OriginPoolDefaultSubset")
	proto.RegisterType((*OriginPoolSubsets)(nil), "ves.io.schema.views.origin_pool.OriginPoolSubsets")
	golang_proto.RegisterType((*OriginPoolSubsets)(nil), "ves.io.schema.views.origin_pool.OriginPoolSubsets")
	proto.RegisterType((*OriginPoolAdvancedOptions)(nil), "ves.io.schema.views.origin_pool.OriginPoolAdvancedOptions")
	golang_proto.RegisterType((*OriginPoolAdvancedOptions)(nil), "ves.io.schema.views.origin_pool.OriginPoolAdvancedOptions")
	proto.RegisterType((*GlobalSpecType)(nil), "ves.io.schema.views.origin_pool.GlobalSpecType")
	golang_proto.RegisterType((*GlobalSpecType)(nil), "ves.io.schema.views.origin_pool.GlobalSpecType")
	proto.RegisterType((*CreateSpecType)(nil), "ves.io.schema.views.origin_pool.CreateSpecType")
	golang_proto.RegisterType((*CreateSpecType)(nil), "ves.io.schema.views.origin_pool.CreateSpecType")
	proto.RegisterType((*ReplaceSpecType)(nil), "ves.io.schema.views.origin_pool.ReplaceSpecType")
	golang_proto.RegisterType((*ReplaceSpecType)(nil), "ves.io.schema.views.origin_pool.ReplaceSpecType")
	proto.RegisterType((*GetSpecType)(nil), "ves.io.schema.views.origin_pool.GetSpecType")
	golang_proto.RegisterType((*GetSpecType)(nil), "ves.io.schema.views.origin_pool.GetSpecType")
}
func (this *OriginServerPublicIP) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*OriginServerPublicIP)
	if !ok {
		that2, ok := that.(OriginServerPublicIP)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Ip != that1.Ip {
		return false
	}
	return true
}
func (this *OriginServerPublicName) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*OriginServerPublicName)
	if !ok {
		that2, ok := that.(OriginServerPublicName)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.DnsName != that1.DnsName {
		return false
	}
	return true
}
func (this *OriginServerPrivateIP) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*OriginServerPrivateIP)
	if !ok {
		that2, ok := that.(OriginServerPrivateIP)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Ip != that1.Ip {
		return false
	}
	if !this.SiteLocator.Equal(that1.SiteLocator) {
		return false
	}
	if that1.NetworkChoice == nil {
		if this.NetworkChoice != nil {
			return false
		}
	} else if this.NetworkChoice == nil {
		return false
	} else if !this.NetworkChoice.Equal(that1.NetworkChoice) {
		return false
	}
	return true
}
func (this *OriginServerPrivateIP_InsideNetwork) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*OriginServerPrivateIP_InsideNetwork)
	if !ok {
		that2, ok := that.(OriginServerPrivateIP_InsideNetwork)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.InsideNetwork.Equal(that1.InsideNetwork) {
		return false
	}
	return true
}
func (this *OriginServerPrivateIP_OutsideNetwork) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*OriginServerPrivateIP_OutsideNetwork)
	if !ok {
		that2, ok := that.(OriginServerPrivateIP_OutsideNetwork)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.OutsideNetwork.Equal(that1.OutsideNetwork) {
		return false
	}
	return true
}
func (this *OriginServerPrivateName) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*OriginServerPrivateName)
	if !ok {
		that2, ok := that.(OriginServerPrivateName)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.DnsName != that1.DnsName {
		return false
	}
	if !this.SiteLocator.Equal(that1.SiteLocator) {
		return false
	}
	if that1.NetworkChoice == nil {
		if this.NetworkChoice != nil {
			return false
		}
	} else if this.NetworkChoice == nil {
		return false
	} else if !this.NetworkChoice.Equal(that1.NetworkChoice) {
		return false
	}
	return true
}
func (this *OriginServerPrivateName_InsideNetwork) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*OriginServerPrivateName_InsideNetwork)
	if !ok {
		that2, ok := that.(OriginServerPrivateName_InsideNetwork)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.InsideNetwork.Equal(that1.InsideNetwork) {
		return false
	}
	return true
}
func (this *OriginServerPrivateName_OutsideNetwork) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*OriginServerPrivateName_OutsideNetwork)
	if !ok {
		that2, ok := that.(OriginServerPrivateName_OutsideNetwork)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.OutsideNetwork.Equal(that1.OutsideNetwork) {
		return false
	}
	return true
}
func (this *OriginServerVirtualNetworkPrivateIP) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*OriginServerVirtualNetworkPrivateIP)
	if !ok {
		that2, ok := that.(OriginServerVirtualNetworkPrivateIP)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Ip != that1.Ip {
		return false
	}
	if !this.VirtualNetwork.Equal(that1.VirtualNetwork) {
		return false
	}
	return true
}
func (this *OriginServerVirtualNetworkPrivateName) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*OriginServerVirtualNetworkPrivateName)
	if !ok {
		that2, ok := that.(OriginServerVirtualNetworkPrivateName)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.DnsName != that1.DnsName {
		return false
	}
	if !this.PrivateNetwork.Equal(that1.PrivateNetwork) {
		return false
	}
	return true
}
func (this *OriginServerK8SService) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*OriginServerK8SService)
	if !ok {
		that2, ok := that.(OriginServerK8SService)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ServiceName != that1.ServiceName {
		return false
	}
	if !this.SiteLocator.Equal(that1.SiteLocator) {
		return false
	}
	if that1.NetworkChoice == nil {
		if this.NetworkChoice != nil {
			return false
		}
	} else if this.NetworkChoice == nil {
		return false
	} else if !this.NetworkChoice.Equal(that1.NetworkChoice) {
		return false
	}
	return true
}
func (this *OriginServerK8SService_InsideNetwork) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*OriginServerK8SService_InsideNetwork)
	if !ok {
		that2, ok := that.(OriginServerK8SService_InsideNetwork)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.InsideNetwork.Equal(that1.InsideNetwork) {
		return false
	}
	return true
}
func (this *OriginServerK8SService_OutsideNetwork) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*OriginServerK8SService_OutsideNetwork)
	if !ok {
		that2, ok := that.(OriginServerK8SService_OutsideNetwork)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.OutsideNetwork.Equal(that1.OutsideNetwork) {
		return false
	}
	return true
}
func (this *OriginServerK8SService_Vk8SNetworks) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*OriginServerK8SService_Vk8SNetworks)
	if !ok {
		that2, ok := that.(OriginServerK8SService_Vk8SNetworks)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Vk8SNetworks.Equal(that1.Vk8SNetworks) {
		return false
	}
	return true
}
func (this *OriginServerConsulService) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*OriginServerConsulService)
	if !ok {
		that2, ok := that.(OriginServerConsulService)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ServiceName != that1.ServiceName {
		return false
	}
	if !this.SiteLocator.Equal(that1.SiteLocator) {
		return false
	}
	if that1.NetworkChoice == nil {
		if this.NetworkChoice != nil {
			return false
		}
	} else if this.NetworkChoice == nil {
		return false
	} else if !this.NetworkChoice.Equal(that1.NetworkChoice) {
		return false
	}
	return true
}
func (this *OriginServerConsulService_InsideNetwork) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*OriginServerConsulService_InsideNetwork)
	if !ok {
		that2, ok := that.(OriginServerConsulService_InsideNetwork)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.InsideNetwork.Equal(that1.InsideNetwork) {
		return false
	}
	return true
}
func (this *OriginServerConsulService_OutsideNetwork) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*OriginServerConsulService_OutsideNetwork)
	if !ok {
		that2, ok := that.(OriginServerConsulService_OutsideNetwork)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.OutsideNetwork.Equal(that1.OutsideNetwork) {
		return false
	}
	return true
}
func (this *OriginServerCustomEndpoint) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*OriginServerCustomEndpoint)
	if !ok {
		that2, ok := that.(OriginServerCustomEndpoint)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Endpoint.Equal(that1.Endpoint) {
		return false
	}
	return true
}
func (this *OriginServerType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*OriginServerType)
	if !ok {
		that2, ok := that.(OriginServerType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.Choice == nil {
		if this.Choice != nil {
			return false
		}
	} else if this.Choice == nil {
		return false
	} else if !this.Choice.Equal(that1.Choice) {
		return false
	}
	if len(this.Labels) != len(that1.Labels) {
		return false
	}
	for i := range this.Labels {
		if this.Labels[i] != that1.Labels[i] {
			return false
		}
	}
	return true
}
func (this *OriginServerType_PublicIp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*OriginServerType_PublicIp)
	if !ok {
		that2, ok := that.(OriginServerType_PublicIp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.PublicIp.Equal(that1.PublicIp) {
		return false
	}
	return true
}
func (this *OriginServerType_PublicName) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*OriginServerType_PublicName)
	if !ok {
		that2, ok := that.(OriginServerType_PublicName)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.PublicName.Equal(that1.PublicName) {
		return false
	}
	return true
}
func (this *OriginServerType_PrivateIp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*OriginServerType_PrivateIp)
	if !ok {
		that2, ok := that.(OriginServerType_PrivateIp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.PrivateIp.Equal(that1.PrivateIp) {
		return false
	}
	return true
}
func (this *OriginServerType_PrivateName) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*OriginServerType_PrivateName)
	if !ok {
		that2, ok := that.(OriginServerType_PrivateName)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.PrivateName.Equal(that1.PrivateName) {
		return false
	}
	return true
}
func (this *OriginServerType_K8SService) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*OriginServerType_K8SService)
	if !ok {
		that2, ok := that.(OriginServerType_K8SService)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.K8SService.Equal(that1.K8SService) {
		return false
	}
	return true
}
func (this *OriginServerType_ConsulService) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*OriginServerType_ConsulService)
	if !ok {
		that2, ok := that.(OriginServerType_ConsulService)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ConsulService.Equal(that1.ConsulService) {
		return false
	}
	return true
}
func (this *OriginServerType_CustomEndpointObject) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*OriginServerType_CustomEndpointObject)
	if !ok {
		that2, ok := that.(OriginServerType_CustomEndpointObject)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.CustomEndpointObject.Equal(that1.CustomEndpointObject) {
		return false
	}
	return true
}
func (this *OriginServerType_VoltadnPrivateIp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*OriginServerType_VoltadnPrivateIp)
	if !ok {
		that2, ok := that.(OriginServerType_VoltadnPrivateIp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.VoltadnPrivateIp.Equal(that1.VoltadnPrivateIp) {
		return false
	}
	return true
}
func (this *OriginServerType_VoltadnPrivateName) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*OriginServerType_VoltadnPrivateName)
	if !ok {
		that2, ok := that.(OriginServerType_VoltadnPrivateName)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.VoltadnPrivateName.Equal(that1.VoltadnPrivateName) {
		return false
	}
	return true
}
func (this *OriginServerType_Srv6PrivateIp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*OriginServerType_Srv6PrivateIp)
	if !ok {
		that2, ok := that.(OriginServerType_Srv6PrivateIp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Srv6PrivateIp.Equal(that1.Srv6PrivateIp) {
		return false
	}
	return true
}
func (this *OriginServerType_Srv6PrivateName) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*OriginServerType_Srv6PrivateName)
	if !ok {
		that2, ok := that.(OriginServerType_Srv6PrivateName)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Srv6PrivateName.Equal(that1.Srv6PrivateName) {
		return false
	}
	return true
}
func (this *UpstreamTlsValidationContext) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpstreamTlsValidationContext)
	if !ok {
		that2, ok := that.(UpstreamTlsValidationContext)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.TrustedCaUrl != that1.TrustedCaUrl {
		return false
	}
	return true
}
func (this *TlsCertificatesType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TlsCertificatesType)
	if !ok {
		that2, ok := that.(TlsCertificatesType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.TlsCertificates) != len(that1.TlsCertificates) {
		return false
	}
	for i := range this.TlsCertificates {
		if !this.TlsCertificates[i].Equal(that1.TlsCertificates[i]) {
			return false
		}
	}
	return true
}
func (this *UpstreamTlsParameters) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpstreamTlsParameters)
	if !ok {
		that2, ok := that.(UpstreamTlsParameters)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.SniChoice == nil {
		if this.SniChoice != nil {
			return false
		}
	} else if this.SniChoice == nil {
		return false
	} else if !this.SniChoice.Equal(that1.SniChoice) {
		return false
	}
	if !this.TlsConfig.Equal(that1.TlsConfig) {
		return false
	}
	if that1.ServerValidationChoice == nil {
		if this.ServerValidationChoice != nil {
			return false
		}
	} else if this.ServerValidationChoice == nil {
		return false
	} else if !this.ServerValidationChoice.Equal(that1.ServerValidationChoice) {
		return false
	}
	if that1.MtlsChoice == nil {
		if this.MtlsChoice != nil {
			return false
		}
	} else if this.MtlsChoice == nil {
		return false
	} else if !this.MtlsChoice.Equal(that1.MtlsChoice) {
		return false
	}
	return true
}
func (this *UpstreamTlsParameters_Sni) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpstreamTlsParameters_Sni)
	if !ok {
		that2, ok := that.(UpstreamTlsParameters_Sni)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Sni != that1.Sni {
		return false
	}
	return true
}
func (this *UpstreamTlsParameters_UseHostHeaderAsSni) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpstreamTlsParameters_UseHostHeaderAsSni)
	if !ok {
		that2, ok := that.(UpstreamTlsParameters_UseHostHeaderAsSni)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.UseHostHeaderAsSni.Equal(that1.UseHostHeaderAsSni) {
		return false
	}
	return true
}
func (this *UpstreamTlsParameters_DisableSni) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpstreamTlsParameters_DisableSni)
	if !ok {
		that2, ok := that.(UpstreamTlsParameters_DisableSni)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DisableSni.Equal(that1.DisableSni) {
		return false
	}
	return true
}
func (this *UpstreamTlsParameters_UseServerVerification) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpstreamTlsParameters_UseServerVerification)
	if !ok {
		that2, ok := that.(UpstreamTlsParameters_UseServerVerification)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.UseServerVerification.Equal(that1.UseServerVerification) {
		return false
	}
	return true
}
func (this *UpstreamTlsParameters_SkipServerVerification) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpstreamTlsParameters_SkipServerVerification)
	if !ok {
		that2, ok := that.(UpstreamTlsParameters_SkipServerVerification)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.SkipServerVerification.Equal(that1.SkipServerVerification) {
		return false
	}
	return true
}
func (this *UpstreamTlsParameters_VolterraTrustedCa) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpstreamTlsParameters_VolterraTrustedCa)
	if !ok {
		that2, ok := that.(UpstreamTlsParameters_VolterraTrustedCa)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.VolterraTrustedCa.Equal(that1.VolterraTrustedCa) {
		return false
	}
	return true
}
func (this *UpstreamTlsParameters_NoMtls) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpstreamTlsParameters_NoMtls)
	if !ok {
		that2, ok := that.(UpstreamTlsParameters_NoMtls)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NoMtls.Equal(that1.NoMtls) {
		return false
	}
	return true
}
func (this *UpstreamTlsParameters_UseMtls) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpstreamTlsParameters_UseMtls)
	if !ok {
		that2, ok := that.(UpstreamTlsParameters_UseMtls)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.UseMtls.Equal(that1.UseMtls) {
		return false
	}
	return true
}
func (this *OriginPoolDefaultSubset) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*OriginPoolDefaultSubset)
	if !ok {
		that2, ok := that.(OriginPoolDefaultSubset)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.DefaultSubset) != len(that1.DefaultSubset) {
		return false
	}
	for i := range this.DefaultSubset {
		if this.DefaultSubset[i] != that1.DefaultSubset[i] {
			return false
		}
	}
	return true
}
func (this *OriginPoolSubsets) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*OriginPoolSubsets)
	if !ok {
		that2, ok := that.(OriginPoolSubsets)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.EndpointSubsets) != len(that1.EndpointSubsets) {
		return false
	}
	for i := range this.EndpointSubsets {
		if !this.EndpointSubsets[i].Equal(that1.EndpointSubsets[i]) {
			return false
		}
	}
	if that1.FallbackPolicyChoice == nil {
		if this.FallbackPolicyChoice != nil {
			return false
		}
	} else if this.FallbackPolicyChoice == nil {
		return false
	} else if !this.FallbackPolicyChoice.Equal(that1.FallbackPolicyChoice) {
		return false
	}
	return true
}
func (this *OriginPoolSubsets_AnyEndpoint) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*OriginPoolSubsets_AnyEndpoint)
	if !ok {
		that2, ok := that.(OriginPoolSubsets_AnyEndpoint)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AnyEndpoint.Equal(that1.AnyEndpoint) {
		return false
	}
	return true
}
func (this *OriginPoolSubsets_DefaultSubset) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*OriginPoolSubsets_DefaultSubset)
	if !ok {
		that2, ok := that.(OriginPoolSubsets_DefaultSubset)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DefaultSubset.Equal(that1.DefaultSubset) {
		return false
	}
	return true
}
func (this *OriginPoolSubsets_FailRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*OriginPoolSubsets_FailRequest)
	if !ok {
		that2, ok := that.(OriginPoolSubsets_FailRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.FailRequest.Equal(that1.FailRequest) {
		return false
	}
	return true
}
func (this *OriginPoolAdvancedOptions) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*OriginPoolAdvancedOptions)
	if !ok {
		that2, ok := that.(OriginPoolAdvancedOptions)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ConnectionTimeout != that1.ConnectionTimeout {
		return false
	}
	if this.HttpIdleTimeout != that1.HttpIdleTimeout {
		return false
	}
	if that1.CircuitBreakerChoice == nil {
		if this.CircuitBreakerChoice != nil {
			return false
		}
	} else if this.CircuitBreakerChoice == nil {
		return false
	} else if !this.CircuitBreakerChoice.Equal(that1.CircuitBreakerChoice) {
		return false
	}
	if that1.OutlierDetectionChoice == nil {
		if this.OutlierDetectionChoice != nil {
			return false
		}
	} else if this.OutlierDetectionChoice == nil {
		return false
	} else if !this.OutlierDetectionChoice.Equal(that1.OutlierDetectionChoice) {
		return false
	}
	if that1.PanicThresholdType == nil {
		if this.PanicThresholdType != nil {
			return false
		}
	} else if this.PanicThresholdType == nil {
		return false
	} else if !this.PanicThresholdType.Equal(that1.PanicThresholdType) {
		return false
	}
	if that1.SubsetChoice == nil {
		if this.SubsetChoice != nil {
			return false
		}
	} else if this.SubsetChoice == nil {
		return false
	} else if !this.SubsetChoice.Equal(that1.SubsetChoice) {
		return false
	}
	if !this.Http2Options.Equal(that1.Http2Options) {
		return false
	}
	return true
}
func (this *OriginPoolAdvancedOptions_DisableCircuitBreaker) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*OriginPoolAdvancedOptions_DisableCircuitBreaker)
	if !ok {
		that2, ok := that.(OriginPoolAdvancedOptions_DisableCircuitBreaker)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DisableCircuitBreaker.Equal(that1.DisableCircuitBreaker) {
		return false
	}
	return true
}
func (this *OriginPoolAdvancedOptions_CircuitBreaker) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*OriginPoolAdvancedOptions_CircuitBreaker)
	if !ok {
		that2, ok := that.(OriginPoolAdvancedOptions_CircuitBreaker)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.CircuitBreaker.Equal(that1.CircuitBreaker) {
		return false
	}
	return true
}
func (this *OriginPoolAdvancedOptions_DisableOutlierDetection) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*OriginPoolAdvancedOptions_DisableOutlierDetection)
	if !ok {
		that2, ok := that.(OriginPoolAdvancedOptions_DisableOutlierDetection)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DisableOutlierDetection.Equal(that1.DisableOutlierDetection) {
		return false
	}
	return true
}
func (this *OriginPoolAdvancedOptions_OutlierDetection) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*OriginPoolAdvancedOptions_OutlierDetection)
	if !ok {
		that2, ok := that.(OriginPoolAdvancedOptions_OutlierDetection)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.OutlierDetection.Equal(that1.OutlierDetection) {
		return false
	}
	return true
}
func (this *OriginPoolAdvancedOptions_NoPanicThreshold) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*OriginPoolAdvancedOptions_NoPanicThreshold)
	if !ok {
		that2, ok := that.(OriginPoolAdvancedOptions_NoPanicThreshold)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NoPanicThreshold.Equal(that1.NoPanicThreshold) {
		return false
	}
	return true
}
func (this *OriginPoolAdvancedOptions_PanicThreshold) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*OriginPoolAdvancedOptions_PanicThreshold)
	if !ok {
		that2, ok := that.(OriginPoolAdvancedOptions_PanicThreshold)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.PanicThreshold != that1.PanicThreshold {
		return false
	}
	return true
}
func (this *OriginPoolAdvancedOptions_DisableSubsets) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*OriginPoolAdvancedOptions_DisableSubsets)
	if !ok {
		that2, ok := that.(OriginPoolAdvancedOptions_DisableSubsets)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DisableSubsets.Equal(that1.DisableSubsets) {
		return false
	}
	return true
}
func (this *OriginPoolAdvancedOptions_EnableSubsets) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*OriginPoolAdvancedOptions_EnableSubsets)
	if !ok {
		that2, ok := that.(OriginPoolAdvancedOptions_EnableSubsets)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.EnableSubsets.Equal(that1.EnableSubsets) {
		return false
	}
	return true
}
func (this *GlobalSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType)
	if !ok {
		that2, ok := that.(GlobalSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.OriginServers) != len(that1.OriginServers) {
		return false
	}
	for i := range this.OriginServers {
		if !this.OriginServers[i].Equal(that1.OriginServers[i]) {
			return false
		}
	}
	if that1.TlsChoice == nil {
		if this.TlsChoice != nil {
			return false
		}
	} else if this.TlsChoice == nil {
		return false
	} else if !this.TlsChoice.Equal(that1.TlsChoice) {
		return false
	}
	if this.Port != that1.Port {
		return false
	}
	if that1.HealthCheckPortChoice == nil {
		if this.HealthCheckPortChoice != nil {
			return false
		}
	} else if this.HealthCheckPortChoice == nil {
		return false
	} else if !this.HealthCheckPortChoice.Equal(that1.HealthCheckPortChoice) {
		return false
	}
	if len(this.Healthcheck) != len(that1.Healthcheck) {
		return false
	}
	for i := range this.Healthcheck {
		if !this.Healthcheck[i].Equal(that1.Healthcheck[i]) {
			return false
		}
	}
	if this.LoadbalancerAlgorithm != that1.LoadbalancerAlgorithm {
		return false
	}
	if this.EndpointSelection != that1.EndpointSelection {
		return false
	}
	if !this.AdvancedOptions.Equal(that1.AdvancedOptions) {
		return false
	}
	if !this.ViewInternal.Equal(that1.ViewInternal) {
		return false
	}
	return true
}
func (this *GlobalSpecType_NoTls) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_NoTls)
	if !ok {
		that2, ok := that.(GlobalSpecType_NoTls)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NoTls.Equal(that1.NoTls) {
		return false
	}
	return true
}
func (this *GlobalSpecType_UseTls) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_UseTls)
	if !ok {
		that2, ok := that.(GlobalSpecType_UseTls)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.UseTls.Equal(that1.UseTls) {
		return false
	}
	return true
}
func (this *GlobalSpecType_SameAsEndpointPort) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_SameAsEndpointPort)
	if !ok {
		that2, ok := that.(GlobalSpecType_SameAsEndpointPort)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.SameAsEndpointPort.Equal(that1.SameAsEndpointPort) {
		return false
	}
	return true
}
func (this *GlobalSpecType_HealthCheckPort) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_HealthCheckPort)
	if !ok {
		that2, ok := that.(GlobalSpecType_HealthCheckPort)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.HealthCheckPort != that1.HealthCheckPort {
		return false
	}
	return true
}
func (this *CreateSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType)
	if !ok {
		that2, ok := that.(CreateSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.OriginServers) != len(that1.OriginServers) {
		return false
	}
	for i := range this.OriginServers {
		if !this.OriginServers[i].Equal(that1.OriginServers[i]) {
			return false
		}
	}
	if that1.TlsChoice == nil {
		if this.TlsChoice != nil {
			return false
		}
	} else if this.TlsChoice == nil {
		return false
	} else if !this.TlsChoice.Equal(that1.TlsChoice) {
		return false
	}
	if this.Port != that1.Port {
		return false
	}
	if that1.HealthCheckPortChoice == nil {
		if this.HealthCheckPortChoice != nil {
			return false
		}
	} else if this.HealthCheckPortChoice == nil {
		return false
	} else if !this.HealthCheckPortChoice.Equal(that1.HealthCheckPortChoice) {
		return false
	}
	if len(this.Healthcheck) != len(that1.Healthcheck) {
		return false
	}
	for i := range this.Healthcheck {
		if !this.Healthcheck[i].Equal(that1.Healthcheck[i]) {
			return false
		}
	}
	if this.LoadbalancerAlgorithm != that1.LoadbalancerAlgorithm {
		return false
	}
	if this.EndpointSelection != that1.EndpointSelection {
		return false
	}
	if !this.AdvancedOptions.Equal(that1.AdvancedOptions) {
		return false
	}
	return true
}
func (this *CreateSpecType_NoTls) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_NoTls)
	if !ok {
		that2, ok := that.(CreateSpecType_NoTls)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NoTls.Equal(that1.NoTls) {
		return false
	}
	return true
}
func (this *CreateSpecType_UseTls) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_UseTls)
	if !ok {
		that2, ok := that.(CreateSpecType_UseTls)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.UseTls.Equal(that1.UseTls) {
		return false
	}
	return true
}
func (this *CreateSpecType_SameAsEndpointPort) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_SameAsEndpointPort)
	if !ok {
		that2, ok := that.(CreateSpecType_SameAsEndpointPort)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.SameAsEndpointPort.Equal(that1.SameAsEndpointPort) {
		return false
	}
	return true
}
func (this *CreateSpecType_HealthCheckPort) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_HealthCheckPort)
	if !ok {
		that2, ok := that.(CreateSpecType_HealthCheckPort)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.HealthCheckPort != that1.HealthCheckPort {
		return false
	}
	return true
}
func (this *ReplaceSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType)
	if !ok {
		that2, ok := that.(ReplaceSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.OriginServers) != len(that1.OriginServers) {
		return false
	}
	for i := range this.OriginServers {
		if !this.OriginServers[i].Equal(that1.OriginServers[i]) {
			return false
		}
	}
	if that1.TlsChoice == nil {
		if this.TlsChoice != nil {
			return false
		}
	} else if this.TlsChoice == nil {
		return false
	} else if !this.TlsChoice.Equal(that1.TlsChoice) {
		return false
	}
	if this.Port != that1.Port {
		return false
	}
	if that1.HealthCheckPortChoice == nil {
		if this.HealthCheckPortChoice != nil {
			return false
		}
	} else if this.HealthCheckPortChoice == nil {
		return false
	} else if !this.HealthCheckPortChoice.Equal(that1.HealthCheckPortChoice) {
		return false
	}
	if len(this.Healthcheck) != len(that1.Healthcheck) {
		return false
	}
	for i := range this.Healthcheck {
		if !this.Healthcheck[i].Equal(that1.Healthcheck[i]) {
			return false
		}
	}
	if this.LoadbalancerAlgorithm != that1.LoadbalancerAlgorithm {
		return false
	}
	if this.EndpointSelection != that1.EndpointSelection {
		return false
	}
	if !this.AdvancedOptions.Equal(that1.AdvancedOptions) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_NoTls) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_NoTls)
	if !ok {
		that2, ok := that.(ReplaceSpecType_NoTls)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NoTls.Equal(that1.NoTls) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_UseTls) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_UseTls)
	if !ok {
		that2, ok := that.(ReplaceSpecType_UseTls)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.UseTls.Equal(that1.UseTls) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_SameAsEndpointPort) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_SameAsEndpointPort)
	if !ok {
		that2, ok := that.(ReplaceSpecType_SameAsEndpointPort)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.SameAsEndpointPort.Equal(that1.SameAsEndpointPort) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_HealthCheckPort) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_HealthCheckPort)
	if !ok {
		that2, ok := that.(ReplaceSpecType_HealthCheckPort)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.HealthCheckPort != that1.HealthCheckPort {
		return false
	}
	return true
}
func (this *GetSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType)
	if !ok {
		that2, ok := that.(GetSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.OriginServers) != len(that1.OriginServers) {
		return false
	}
	for i := range this.OriginServers {
		if !this.OriginServers[i].Equal(that1.OriginServers[i]) {
			return false
		}
	}
	if that1.TlsChoice == nil {
		if this.TlsChoice != nil {
			return false
		}
	} else if this.TlsChoice == nil {
		return false
	} else if !this.TlsChoice.Equal(that1.TlsChoice) {
		return false
	}
	if this.Port != that1.Port {
		return false
	}
	if that1.HealthCheckPortChoice == nil {
		if this.HealthCheckPortChoice != nil {
			return false
		}
	} else if this.HealthCheckPortChoice == nil {
		return false
	} else if !this.HealthCheckPortChoice.Equal(that1.HealthCheckPortChoice) {
		return false
	}
	if len(this.Healthcheck) != len(that1.Healthcheck) {
		return false
	}
	for i := range this.Healthcheck {
		if !this.Healthcheck[i].Equal(that1.Healthcheck[i]) {
			return false
		}
	}
	if this.LoadbalancerAlgorithm != that1.LoadbalancerAlgorithm {
		return false
	}
	if this.EndpointSelection != that1.EndpointSelection {
		return false
	}
	if !this.AdvancedOptions.Equal(that1.AdvancedOptions) {
		return false
	}
	return true
}
func (this *GetSpecType_NoTls) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_NoTls)
	if !ok {
		that2, ok := that.(GetSpecType_NoTls)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NoTls.Equal(that1.NoTls) {
		return false
	}
	return true
}
func (this *GetSpecType_UseTls) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_UseTls)
	if !ok {
		that2, ok := that.(GetSpecType_UseTls)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.UseTls.Equal(that1.UseTls) {
		return false
	}
	return true
}
func (this *GetSpecType_SameAsEndpointPort) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_SameAsEndpointPort)
	if !ok {
		that2, ok := that.(GetSpecType_SameAsEndpointPort)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.SameAsEndpointPort.Equal(that1.SameAsEndpointPort) {
		return false
	}
	return true
}
func (this *GetSpecType_HealthCheckPort) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_HealthCheckPort)
	if !ok {
		that2, ok := that.(GetSpecType_HealthCheckPort)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.HealthCheckPort != that1.HealthCheckPort {
		return false
	}
	return true
}
func (this *OriginServerPublicIP) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&origin_pool.OriginServerPublicIP{")
	s = append(s, "Ip: "+fmt.Sprintf("%#v", this.Ip)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *OriginServerPublicName) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&origin_pool.OriginServerPublicName{")
	s = append(s, "DnsName: "+fmt.Sprintf("%#v", this.DnsName)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *OriginServerPrivateIP) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&origin_pool.OriginServerPrivateIP{")
	s = append(s, "Ip: "+fmt.Sprintf("%#v", this.Ip)+",\n")
	if this.SiteLocator != nil {
		s = append(s, "SiteLocator: "+fmt.Sprintf("%#v", this.SiteLocator)+",\n")
	}
	if this.NetworkChoice != nil {
		s = append(s, "NetworkChoice: "+fmt.Sprintf("%#v", this.NetworkChoice)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *OriginServerPrivateIP_InsideNetwork) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&origin_pool.OriginServerPrivateIP_InsideNetwork{` +
		`InsideNetwork:` + fmt.Sprintf("%#v", this.InsideNetwork) + `}`}, ", ")
	return s
}
func (this *OriginServerPrivateIP_OutsideNetwork) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&origin_pool.OriginServerPrivateIP_OutsideNetwork{` +
		`OutsideNetwork:` + fmt.Sprintf("%#v", this.OutsideNetwork) + `}`}, ", ")
	return s
}
func (this *OriginServerPrivateName) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&origin_pool.OriginServerPrivateName{")
	s = append(s, "DnsName: "+fmt.Sprintf("%#v", this.DnsName)+",\n")
	if this.SiteLocator != nil {
		s = append(s, "SiteLocator: "+fmt.Sprintf("%#v", this.SiteLocator)+",\n")
	}
	if this.NetworkChoice != nil {
		s = append(s, "NetworkChoice: "+fmt.Sprintf("%#v", this.NetworkChoice)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *OriginServerPrivateName_InsideNetwork) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&origin_pool.OriginServerPrivateName_InsideNetwork{` +
		`InsideNetwork:` + fmt.Sprintf("%#v", this.InsideNetwork) + `}`}, ", ")
	return s
}
func (this *OriginServerPrivateName_OutsideNetwork) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&origin_pool.OriginServerPrivateName_OutsideNetwork{` +
		`OutsideNetwork:` + fmt.Sprintf("%#v", this.OutsideNetwork) + `}`}, ", ")
	return s
}
func (this *OriginServerVirtualNetworkPrivateIP) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&origin_pool.OriginServerVirtualNetworkPrivateIP{")
	s = append(s, "Ip: "+fmt.Sprintf("%#v", this.Ip)+",\n")
	if this.VirtualNetwork != nil {
		s = append(s, "VirtualNetwork: "+fmt.Sprintf("%#v", this.VirtualNetwork)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *OriginServerVirtualNetworkPrivateName) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&origin_pool.OriginServerVirtualNetworkPrivateName{")
	s = append(s, "DnsName: "+fmt.Sprintf("%#v", this.DnsName)+",\n")
	if this.PrivateNetwork != nil {
		s = append(s, "PrivateNetwork: "+fmt.Sprintf("%#v", this.PrivateNetwork)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *OriginServerK8SService) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&origin_pool.OriginServerK8SService{")
	s = append(s, "ServiceName: "+fmt.Sprintf("%#v", this.ServiceName)+",\n")
	if this.SiteLocator != nil {
		s = append(s, "SiteLocator: "+fmt.Sprintf("%#v", this.SiteLocator)+",\n")
	}
	if this.NetworkChoice != nil {
		s = append(s, "NetworkChoice: "+fmt.Sprintf("%#v", this.NetworkChoice)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *OriginServerK8SService_InsideNetwork) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&origin_pool.OriginServerK8SService_InsideNetwork{` +
		`InsideNetwork:` + fmt.Sprintf("%#v", this.InsideNetwork) + `}`}, ", ")
	return s
}
func (this *OriginServerK8SService_OutsideNetwork) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&origin_pool.OriginServerK8SService_OutsideNetwork{` +
		`OutsideNetwork:` + fmt.Sprintf("%#v", this.OutsideNetwork) + `}`}, ", ")
	return s
}
func (this *OriginServerK8SService_Vk8SNetworks) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&origin_pool.OriginServerK8SService_Vk8SNetworks{` +
		`Vk8SNetworks:` + fmt.Sprintf("%#v", this.Vk8SNetworks) + `}`}, ", ")
	return s
}
func (this *OriginServerConsulService) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&origin_pool.OriginServerConsulService{")
	s = append(s, "ServiceName: "+fmt.Sprintf("%#v", this.ServiceName)+",\n")
	if this.SiteLocator != nil {
		s = append(s, "SiteLocator: "+fmt.Sprintf("%#v", this.SiteLocator)+",\n")
	}
	if this.NetworkChoice != nil {
		s = append(s, "NetworkChoice: "+fmt.Sprintf("%#v", this.NetworkChoice)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *OriginServerConsulService_InsideNetwork) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&origin_pool.OriginServerConsulService_InsideNetwork{` +
		`InsideNetwork:` + fmt.Sprintf("%#v", this.InsideNetwork) + `}`}, ", ")
	return s
}
func (this *OriginServerConsulService_OutsideNetwork) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&origin_pool.OriginServerConsulService_OutsideNetwork{` +
		`OutsideNetwork:` + fmt.Sprintf("%#v", this.OutsideNetwork) + `}`}, ", ")
	return s
}
func (this *OriginServerCustomEndpoint) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&origin_pool.OriginServerCustomEndpoint{")
	if this.Endpoint != nil {
		s = append(s, "Endpoint: "+fmt.Sprintf("%#v", this.Endpoint)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *OriginServerType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 16)
	s = append(s, "&origin_pool.OriginServerType{")
	if this.Choice != nil {
		s = append(s, "Choice: "+fmt.Sprintf("%#v", this.Choice)+",\n")
	}
	keysForLabels := make([]string, 0, len(this.Labels))
	for k, _ := range this.Labels {
		keysForLabels = append(keysForLabels, k)
	}
	sortkeys.Strings(keysForLabels)
	mapStringForLabels := "map[string]string{"
	for _, k := range keysForLabels {
		mapStringForLabels += fmt.Sprintf("%#v: %#v,", k, this.Labels[k])
	}
	mapStringForLabels += "}"
	if this.Labels != nil {
		s = append(s, "Labels: "+mapStringForLabels+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *OriginServerType_PublicIp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&origin_pool.OriginServerType_PublicIp{` +
		`PublicIp:` + fmt.Sprintf("%#v", this.PublicIp) + `}`}, ", ")
	return s
}
func (this *OriginServerType_PublicName) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&origin_pool.OriginServerType_PublicName{` +
		`PublicName:` + fmt.Sprintf("%#v", this.PublicName) + `}`}, ", ")
	return s
}
func (this *OriginServerType_PrivateIp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&origin_pool.OriginServerType_PrivateIp{` +
		`PrivateIp:` + fmt.Sprintf("%#v", this.PrivateIp) + `}`}, ", ")
	return s
}
func (this *OriginServerType_PrivateName) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&origin_pool.OriginServerType_PrivateName{` +
		`PrivateName:` + fmt.Sprintf("%#v", this.PrivateName) + `}`}, ", ")
	return s
}
func (this *OriginServerType_K8SService) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&origin_pool.OriginServerType_K8SService{` +
		`K8SService:` + fmt.Sprintf("%#v", this.K8SService) + `}`}, ", ")
	return s
}
func (this *OriginServerType_ConsulService) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&origin_pool.OriginServerType_ConsulService{` +
		`ConsulService:` + fmt.Sprintf("%#v", this.ConsulService) + `}`}, ", ")
	return s
}
func (this *OriginServerType_CustomEndpointObject) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&origin_pool.OriginServerType_CustomEndpointObject{` +
		`CustomEndpointObject:` + fmt.Sprintf("%#v", this.CustomEndpointObject) + `}`}, ", ")
	return s
}
func (this *OriginServerType_VoltadnPrivateIp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&origin_pool.OriginServerType_VoltadnPrivateIp{` +
		`VoltadnPrivateIp:` + fmt.Sprintf("%#v", this.VoltadnPrivateIp) + `}`}, ", ")
	return s
}
func (this *OriginServerType_VoltadnPrivateName) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&origin_pool.OriginServerType_VoltadnPrivateName{` +
		`VoltadnPrivateName:` + fmt.Sprintf("%#v", this.VoltadnPrivateName) + `}`}, ", ")
	return s
}
func (this *OriginServerType_Srv6PrivateIp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&origin_pool.OriginServerType_Srv6PrivateIp{` +
		`Srv6PrivateIp:` + fmt.Sprintf("%#v", this.Srv6PrivateIp) + `}`}, ", ")
	return s
}
func (this *OriginServerType_Srv6PrivateName) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&origin_pool.OriginServerType_Srv6PrivateName{` +
		`Srv6PrivateName:` + fmt.Sprintf("%#v", this.Srv6PrivateName) + `}`}, ", ")
	return s
}
func (this *UpstreamTlsValidationContext) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&origin_pool.UpstreamTlsValidationContext{")
	s = append(s, "TrustedCaUrl: "+fmt.Sprintf("%#v", this.TrustedCaUrl)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TlsCertificatesType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&origin_pool.TlsCertificatesType{")
	if this.TlsCertificates != nil {
		s = append(s, "TlsCertificates: "+fmt.Sprintf("%#v", this.TlsCertificates)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UpstreamTlsParameters) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 13)
	s = append(s, "&origin_pool.UpstreamTlsParameters{")
	if this.SniChoice != nil {
		s = append(s, "SniChoice: "+fmt.Sprintf("%#v", this.SniChoice)+",\n")
	}
	if this.TlsConfig != nil {
		s = append(s, "TlsConfig: "+fmt.Sprintf("%#v", this.TlsConfig)+",\n")
	}
	if this.ServerValidationChoice != nil {
		s = append(s, "ServerValidationChoice: "+fmt.Sprintf("%#v", this.ServerValidationChoice)+",\n")
	}
	if this.MtlsChoice != nil {
		s = append(s, "MtlsChoice: "+fmt.Sprintf("%#v", this.MtlsChoice)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UpstreamTlsParameters_Sni) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&origin_pool.UpstreamTlsParameters_Sni{` +
		`Sni:` + fmt.Sprintf("%#v", this.Sni) + `}`}, ", ")
	return s
}
func (this *UpstreamTlsParameters_UseHostHeaderAsSni) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&origin_pool.UpstreamTlsParameters_UseHostHeaderAsSni{` +
		`UseHostHeaderAsSni:` + fmt.Sprintf("%#v", this.UseHostHeaderAsSni) + `}`}, ", ")
	return s
}
func (this *UpstreamTlsParameters_DisableSni) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&origin_pool.UpstreamTlsParameters_DisableSni{` +
		`DisableSni:` + fmt.Sprintf("%#v", this.DisableSni) + `}`}, ", ")
	return s
}
func (this *UpstreamTlsParameters_UseServerVerification) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&origin_pool.UpstreamTlsParameters_UseServerVerification{` +
		`UseServerVerification:` + fmt.Sprintf("%#v", this.UseServerVerification) + `}`}, ", ")
	return s
}
func (this *UpstreamTlsParameters_SkipServerVerification) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&origin_pool.UpstreamTlsParameters_SkipServerVerification{` +
		`SkipServerVerification:` + fmt.Sprintf("%#v", this.SkipServerVerification) + `}`}, ", ")
	return s
}
func (this *UpstreamTlsParameters_VolterraTrustedCa) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&origin_pool.UpstreamTlsParameters_VolterraTrustedCa{` +
		`VolterraTrustedCa:` + fmt.Sprintf("%#v", this.VolterraTrustedCa) + `}`}, ", ")
	return s
}
func (this *UpstreamTlsParameters_NoMtls) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&origin_pool.UpstreamTlsParameters_NoMtls{` +
		`NoMtls:` + fmt.Sprintf("%#v", this.NoMtls) + `}`}, ", ")
	return s
}
func (this *UpstreamTlsParameters_UseMtls) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&origin_pool.UpstreamTlsParameters_UseMtls{` +
		`UseMtls:` + fmt.Sprintf("%#v", this.UseMtls) + `}`}, ", ")
	return s
}
func (this *OriginPoolDefaultSubset) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&origin_pool.OriginPoolDefaultSubset{")
	keysForDefaultSubset := make([]string, 0, len(this.DefaultSubset))
	for k, _ := range this.DefaultSubset {
		keysForDefaultSubset = append(keysForDefaultSubset, k)
	}
	sortkeys.Strings(keysForDefaultSubset)
	mapStringForDefaultSubset := "map[string]string{"
	for _, k := range keysForDefaultSubset {
		mapStringForDefaultSubset += fmt.Sprintf("%#v: %#v,", k, this.DefaultSubset[k])
	}
	mapStringForDefaultSubset += "}"
	if this.DefaultSubset != nil {
		s = append(s, "DefaultSubset: "+mapStringForDefaultSubset+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *OriginPoolSubsets) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&origin_pool.OriginPoolSubsets{")
	if this.EndpointSubsets != nil {
		s = append(s, "EndpointSubsets: "+fmt.Sprintf("%#v", this.EndpointSubsets)+",\n")
	}
	if this.FallbackPolicyChoice != nil {
		s = append(s, "FallbackPolicyChoice: "+fmt.Sprintf("%#v", this.FallbackPolicyChoice)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *OriginPoolSubsets_AnyEndpoint) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&origin_pool.OriginPoolSubsets_AnyEndpoint{` +
		`AnyEndpoint:` + fmt.Sprintf("%#v", this.AnyEndpoint) + `}`}, ", ")
	return s
}
func (this *OriginPoolSubsets_DefaultSubset) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&origin_pool.OriginPoolSubsets_DefaultSubset{` +
		`DefaultSubset:` + fmt.Sprintf("%#v", this.DefaultSubset) + `}`}, ", ")
	return s
}
func (this *OriginPoolSubsets_FailRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&origin_pool.OriginPoolSubsets_FailRequest{` +
		`FailRequest:` + fmt.Sprintf("%#v", this.FailRequest) + `}`}, ", ")
	return s
}
func (this *OriginPoolAdvancedOptions) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 15)
	s = append(s, "&origin_pool.OriginPoolAdvancedOptions{")
	s = append(s, "ConnectionTimeout: "+fmt.Sprintf("%#v", this.ConnectionTimeout)+",\n")
	s = append(s, "HttpIdleTimeout: "+fmt.Sprintf("%#v", this.HttpIdleTimeout)+",\n")
	if this.CircuitBreakerChoice != nil {
		s = append(s, "CircuitBreakerChoice: "+fmt.Sprintf("%#v", this.CircuitBreakerChoice)+",\n")
	}
	if this.OutlierDetectionChoice != nil {
		s = append(s, "OutlierDetectionChoice: "+fmt.Sprintf("%#v", this.OutlierDetectionChoice)+",\n")
	}
	if this.PanicThresholdType != nil {
		s = append(s, "PanicThresholdType: "+fmt.Sprintf("%#v", this.PanicThresholdType)+",\n")
	}
	if this.SubsetChoice != nil {
		s = append(s, "SubsetChoice: "+fmt.Sprintf("%#v", this.SubsetChoice)+",\n")
	}
	if this.Http2Options != nil {
		s = append(s, "Http2Options: "+fmt.Sprintf("%#v", this.Http2Options)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *OriginPoolAdvancedOptions_DisableCircuitBreaker) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&origin_pool.OriginPoolAdvancedOptions_DisableCircuitBreaker{` +
		`DisableCircuitBreaker:` + fmt.Sprintf("%#v", this.DisableCircuitBreaker) + `}`}, ", ")
	return s
}
func (this *OriginPoolAdvancedOptions_CircuitBreaker) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&origin_pool.OriginPoolAdvancedOptions_CircuitBreaker{` +
		`CircuitBreaker:` + fmt.Sprintf("%#v", this.CircuitBreaker) + `}`}, ", ")
	return s
}
func (this *OriginPoolAdvancedOptions_DisableOutlierDetection) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&origin_pool.OriginPoolAdvancedOptions_DisableOutlierDetection{` +
		`DisableOutlierDetection:` + fmt.Sprintf("%#v", this.DisableOutlierDetection) + `}`}, ", ")
	return s
}
func (this *OriginPoolAdvancedOptions_OutlierDetection) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&origin_pool.OriginPoolAdvancedOptions_OutlierDetection{` +
		`OutlierDetection:` + fmt.Sprintf("%#v", this.OutlierDetection) + `}`}, ", ")
	return s
}
func (this *OriginPoolAdvancedOptions_NoPanicThreshold) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&origin_pool.OriginPoolAdvancedOptions_NoPanicThreshold{` +
		`NoPanicThreshold:` + fmt.Sprintf("%#v", this.NoPanicThreshold) + `}`}, ", ")
	return s
}
func (this *OriginPoolAdvancedOptions_PanicThreshold) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&origin_pool.OriginPoolAdvancedOptions_PanicThreshold{` +
		`PanicThreshold:` + fmt.Sprintf("%#v", this.PanicThreshold) + `}`}, ", ")
	return s
}
func (this *OriginPoolAdvancedOptions_DisableSubsets) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&origin_pool.OriginPoolAdvancedOptions_DisableSubsets{` +
		`DisableSubsets:` + fmt.Sprintf("%#v", this.DisableSubsets) + `}`}, ", ")
	return s
}
func (this *OriginPoolAdvancedOptions_EnableSubsets) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&origin_pool.OriginPoolAdvancedOptions_EnableSubsets{` +
		`EnableSubsets:` + fmt.Sprintf("%#v", this.EnableSubsets) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 15)
	s = append(s, "&origin_pool.GlobalSpecType{")
	if this.OriginServers != nil {
		s = append(s, "OriginServers: "+fmt.Sprintf("%#v", this.OriginServers)+",\n")
	}
	if this.TlsChoice != nil {
		s = append(s, "TlsChoice: "+fmt.Sprintf("%#v", this.TlsChoice)+",\n")
	}
	s = append(s, "Port: "+fmt.Sprintf("%#v", this.Port)+",\n")
	if this.HealthCheckPortChoice != nil {
		s = append(s, "HealthCheckPortChoice: "+fmt.Sprintf("%#v", this.HealthCheckPortChoice)+",\n")
	}
	if this.Healthcheck != nil {
		s = append(s, "Healthcheck: "+fmt.Sprintf("%#v", this.Healthcheck)+",\n")
	}
	s = append(s, "LoadbalancerAlgorithm: "+fmt.Sprintf("%#v", this.LoadbalancerAlgorithm)+",\n")
	s = append(s, "EndpointSelection: "+fmt.Sprintf("%#v", this.EndpointSelection)+",\n")
	if this.AdvancedOptions != nil {
		s = append(s, "AdvancedOptions: "+fmt.Sprintf("%#v", this.AdvancedOptions)+",\n")
	}
	if this.ViewInternal != nil {
		s = append(s, "ViewInternal: "+fmt.Sprintf("%#v", this.ViewInternal)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GlobalSpecType_NoTls) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&origin_pool.GlobalSpecType_NoTls{` +
		`NoTls:` + fmt.Sprintf("%#v", this.NoTls) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_UseTls) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&origin_pool.GlobalSpecType_UseTls{` +
		`UseTls:` + fmt.Sprintf("%#v", this.UseTls) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_SameAsEndpointPort) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&origin_pool.GlobalSpecType_SameAsEndpointPort{` +
		`SameAsEndpointPort:` + fmt.Sprintf("%#v", this.SameAsEndpointPort) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_HealthCheckPort) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&origin_pool.GlobalSpecType_HealthCheckPort{` +
		`HealthCheckPort:` + fmt.Sprintf("%#v", this.HealthCheckPort) + `}`}, ", ")
	return s
}
func (this *CreateSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 14)
	s = append(s, "&origin_pool.CreateSpecType{")
	if this.OriginServers != nil {
		s = append(s, "OriginServers: "+fmt.Sprintf("%#v", this.OriginServers)+",\n")
	}
	if this.TlsChoice != nil {
		s = append(s, "TlsChoice: "+fmt.Sprintf("%#v", this.TlsChoice)+",\n")
	}
	s = append(s, "Port: "+fmt.Sprintf("%#v", this.Port)+",\n")
	if this.HealthCheckPortChoice != nil {
		s = append(s, "HealthCheckPortChoice: "+fmt.Sprintf("%#v", this.HealthCheckPortChoice)+",\n")
	}
	if this.Healthcheck != nil {
		s = append(s, "Healthcheck: "+fmt.Sprintf("%#v", this.Healthcheck)+",\n")
	}
	s = append(s, "LoadbalancerAlgorithm: "+fmt.Sprintf("%#v", this.LoadbalancerAlgorithm)+",\n")
	s = append(s, "EndpointSelection: "+fmt.Sprintf("%#v", this.EndpointSelection)+",\n")
	if this.AdvancedOptions != nil {
		s = append(s, "AdvancedOptions: "+fmt.Sprintf("%#v", this.AdvancedOptions)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CreateSpecType_NoTls) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&origin_pool.CreateSpecType_NoTls{` +
		`NoTls:` + fmt.Sprintf("%#v", this.NoTls) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_UseTls) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&origin_pool.CreateSpecType_UseTls{` +
		`UseTls:` + fmt.Sprintf("%#v", this.UseTls) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_SameAsEndpointPort) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&origin_pool.CreateSpecType_SameAsEndpointPort{` +
		`SameAsEndpointPort:` + fmt.Sprintf("%#v", this.SameAsEndpointPort) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_HealthCheckPort) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&origin_pool.CreateSpecType_HealthCheckPort{` +
		`HealthCheckPort:` + fmt.Sprintf("%#v", this.HealthCheckPort) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 14)
	s = append(s, "&origin_pool.ReplaceSpecType{")
	if this.OriginServers != nil {
		s = append(s, "OriginServers: "+fmt.Sprintf("%#v", this.OriginServers)+",\n")
	}
	if this.TlsChoice != nil {
		s = append(s, "TlsChoice: "+fmt.Sprintf("%#v", this.TlsChoice)+",\n")
	}
	s = append(s, "Port: "+fmt.Sprintf("%#v", this.Port)+",\n")
	if this.HealthCheckPortChoice != nil {
		s = append(s, "HealthCheckPortChoice: "+fmt.Sprintf("%#v", this.HealthCheckPortChoice)+",\n")
	}
	if this.Healthcheck != nil {
		s = append(s, "Healthcheck: "+fmt.Sprintf("%#v", this.Healthcheck)+",\n")
	}
	s = append(s, "LoadbalancerAlgorithm: "+fmt.Sprintf("%#v", this.LoadbalancerAlgorithm)+",\n")
	s = append(s, "EndpointSelection: "+fmt.Sprintf("%#v", this.EndpointSelection)+",\n")
	if this.AdvancedOptions != nil {
		s = append(s, "AdvancedOptions: "+fmt.Sprintf("%#v", this.AdvancedOptions)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ReplaceSpecType_NoTls) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&origin_pool.ReplaceSpecType_NoTls{` +
		`NoTls:` + fmt.Sprintf("%#v", this.NoTls) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_UseTls) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&origin_pool.ReplaceSpecType_UseTls{` +
		`UseTls:` + fmt.Sprintf("%#v", this.UseTls) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_SameAsEndpointPort) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&origin_pool.ReplaceSpecType_SameAsEndpointPort{` +
		`SameAsEndpointPort:` + fmt.Sprintf("%#v", this.SameAsEndpointPort) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_HealthCheckPort) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&origin_pool.ReplaceSpecType_HealthCheckPort{` +
		`HealthCheckPort:` + fmt.Sprintf("%#v", this.HealthCheckPort) + `}`}, ", ")
	return s
}
func (this *GetSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 14)
	s = append(s, "&origin_pool.GetSpecType{")
	if this.OriginServers != nil {
		s = append(s, "OriginServers: "+fmt.Sprintf("%#v", this.OriginServers)+",\n")
	}
	if this.TlsChoice != nil {
		s = append(s, "TlsChoice: "+fmt.Sprintf("%#v", this.TlsChoice)+",\n")
	}
	s = append(s, "Port: "+fmt.Sprintf("%#v", this.Port)+",\n")
	if this.HealthCheckPortChoice != nil {
		s = append(s, "HealthCheckPortChoice: "+fmt.Sprintf("%#v", this.HealthCheckPortChoice)+",\n")
	}
	if this.Healthcheck != nil {
		s = append(s, "Healthcheck: "+fmt.Sprintf("%#v", this.Healthcheck)+",\n")
	}
	s = append(s, "LoadbalancerAlgorithm: "+fmt.Sprintf("%#v", this.LoadbalancerAlgorithm)+",\n")
	s = append(s, "EndpointSelection: "+fmt.Sprintf("%#v", this.EndpointSelection)+",\n")
	if this.AdvancedOptions != nil {
		s = append(s, "AdvancedOptions: "+fmt.Sprintf("%#v", this.AdvancedOptions)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetSpecType_NoTls) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&origin_pool.GetSpecType_NoTls{` +
		`NoTls:` + fmt.Sprintf("%#v", this.NoTls) + `}`}, ", ")
	return s
}
func (this *GetSpecType_UseTls) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&origin_pool.GetSpecType_UseTls{` +
		`UseTls:` + fmt.Sprintf("%#v", this.UseTls) + `}`}, ", ")
	return s
}
func (this *GetSpecType_SameAsEndpointPort) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&origin_pool.GetSpecType_SameAsEndpointPort{` +
		`SameAsEndpointPort:` + fmt.Sprintf("%#v", this.SameAsEndpointPort) + `}`}, ", ")
	return s
}
func (this *GetSpecType_HealthCheckPort) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&origin_pool.GetSpecType_HealthCheckPort{` +
		`HealthCheckPort:` + fmt.Sprintf("%#v", this.HealthCheckPort) + `}`}, ", ")
	return s
}
func valueToGoStringTypes(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *OriginServerPublicIP) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OriginServerPublicIP) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Ip) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Ip)))
		i += copy(dAtA[i:], m.Ip)
	}
	return i, nil
}

func (m *OriginServerPublicName) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OriginServerPublicName) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.DnsName) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTypes(dAtA, i, uint64(len(m.DnsName)))
		i += copy(dAtA[i:], m.DnsName)
	}
	return i, nil
}

func (m *OriginServerPrivateIP) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OriginServerPrivateIP) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Ip) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Ip)))
		i += copy(dAtA[i:], m.Ip)
	}
	if m.SiteLocator != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.SiteLocator.Size()))
		n1, err := m.SiteLocator.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.NetworkChoice != nil {
		nn2, err := m.NetworkChoice.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn2
	}
	return i, nil
}

func (m *OriginServerPrivateIP_InsideNetwork) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.InsideNetwork != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.InsideNetwork.Size()))
		n3, err := m.InsideNetwork.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	return i, nil
}
func (m *OriginServerPrivateIP_OutsideNetwork) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.OutsideNetwork != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.OutsideNetwork.Size()))
		n4, err := m.OutsideNetwork.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	return i, nil
}
func (m *OriginServerPrivateName) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OriginServerPrivateName) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.DnsName) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTypes(dAtA, i, uint64(len(m.DnsName)))
		i += copy(dAtA[i:], m.DnsName)
	}
	if m.SiteLocator != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.SiteLocator.Size()))
		n5, err := m.SiteLocator.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	if m.NetworkChoice != nil {
		nn6, err := m.NetworkChoice.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn6
	}
	return i, nil
}

func (m *OriginServerPrivateName_InsideNetwork) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.InsideNetwork != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.InsideNetwork.Size()))
		n7, err := m.InsideNetwork.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	return i, nil
}
func (m *OriginServerPrivateName_OutsideNetwork) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.OutsideNetwork != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.OutsideNetwork.Size()))
		n8, err := m.OutsideNetwork.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n8
	}
	return i, nil
}
func (m *OriginServerVirtualNetworkPrivateIP) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OriginServerVirtualNetworkPrivateIP) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Ip) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Ip)))
		i += copy(dAtA[i:], m.Ip)
	}
	if m.VirtualNetwork != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.VirtualNetwork.Size()))
		n9, err := m.VirtualNetwork.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n9
	}
	return i, nil
}

func (m *OriginServerVirtualNetworkPrivateName) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OriginServerVirtualNetworkPrivateName) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.DnsName) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTypes(dAtA, i, uint64(len(m.DnsName)))
		i += copy(dAtA[i:], m.DnsName)
	}
	if m.PrivateNetwork != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.PrivateNetwork.Size()))
		n10, err := m.PrivateNetwork.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n10
	}
	return i, nil
}

func (m *OriginServerK8SService) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OriginServerK8SService) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ServiceName) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTypes(dAtA, i, uint64(len(m.ServiceName)))
		i += copy(dAtA[i:], m.ServiceName)
	}
	if m.SiteLocator != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.SiteLocator.Size()))
		n11, err := m.SiteLocator.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n11
	}
	if m.NetworkChoice != nil {
		nn12, err := m.NetworkChoice.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn12
	}
	return i, nil
}

func (m *OriginServerK8SService_InsideNetwork) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.InsideNetwork != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.InsideNetwork.Size()))
		n13, err := m.InsideNetwork.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n13
	}
	return i, nil
}
func (m *OriginServerK8SService_OutsideNetwork) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.OutsideNetwork != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.OutsideNetwork.Size()))
		n14, err := m.OutsideNetwork.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n14
	}
	return i, nil
}
func (m *OriginServerK8SService_Vk8SNetworks) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Vk8SNetworks != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.Vk8SNetworks.Size()))
		n15, err := m.Vk8SNetworks.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n15
	}
	return i, nil
}
func (m *OriginServerConsulService) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OriginServerConsulService) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ServiceName) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTypes(dAtA, i, uint64(len(m.ServiceName)))
		i += copy(dAtA[i:], m.ServiceName)
	}
	if m.SiteLocator != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.SiteLocator.Size()))
		n16, err := m.SiteLocator.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n16
	}
	if m.NetworkChoice != nil {
		nn17, err := m.NetworkChoice.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn17
	}
	return i, nil
}

func (m *OriginServerConsulService_InsideNetwork) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.InsideNetwork != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.InsideNetwork.Size()))
		n18, err := m.InsideNetwork.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n18
	}
	return i, nil
}
func (m *OriginServerConsulService_OutsideNetwork) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.OutsideNetwork != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.OutsideNetwork.Size()))
		n19, err := m.OutsideNetwork.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n19
	}
	return i, nil
}
func (m *OriginServerCustomEndpoint) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OriginServerCustomEndpoint) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Endpoint != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.Endpoint.Size()))
		n20, err := m.Endpoint.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n20
	}
	return i, nil
}

func (m *OriginServerType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OriginServerType) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Choice != nil {
		nn21, err := m.Choice.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn21
	}
	if len(m.Labels) > 0 {
		keysForLabels := make([]string, 0, len(m.Labels))
		for k, _ := range m.Labels {
			keysForLabels = append(keysForLabels, string(k))
		}
		sortkeys.Strings(keysForLabels)
		for _, k := range keysForLabels {
			dAtA[i] = 0x4a
			i++
			v := m.Labels[string(k)]
			mapSize := 1 + len(k) + sovTypes(uint64(len(k))) + 1 + len(v) + sovTypes(uint64(len(v)))
			i = encodeVarintTypes(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintTypes(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			dAtA[i] = 0x12
			i++
			i = encodeVarintTypes(dAtA, i, uint64(len(v)))
			i += copy(dAtA[i:], v)
		}
	}
	return i, nil
}

func (m *OriginServerType_PublicIp) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.PublicIp != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.PublicIp.Size()))
		n22, err := m.PublicIp.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n22
	}
	return i, nil
}
func (m *OriginServerType_PrivateIp) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.PrivateIp != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.PrivateIp.Size()))
		n23, err := m.PrivateIp.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n23
	}
	return i, nil
}
func (m *OriginServerType_PublicName) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.PublicName != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.PublicName.Size()))
		n24, err := m.PublicName.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n24
	}
	return i, nil
}
func (m *OriginServerType_PrivateName) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.PrivateName != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.PrivateName.Size()))
		n25, err := m.PrivateName.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n25
	}
	return i, nil
}
func (m *OriginServerType_K8SService) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.K8SService != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.K8SService.Size()))
		n26, err := m.K8SService.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n26
	}
	return i, nil
}
func (m *OriginServerType_ConsulService) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.ConsulService != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.ConsulService.Size()))
		n27, err := m.ConsulService.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n27
	}
	return i, nil
}
func (m *OriginServerType_CustomEndpointObject) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.CustomEndpointObject != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.CustomEndpointObject.Size()))
		n28, err := m.CustomEndpointObject.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n28
	}
	return i, nil
}
func (m *OriginServerType_VoltadnPrivateIp) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.VoltadnPrivateIp != nil {
		dAtA[i] = 0x52
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.VoltadnPrivateIp.Size()))
		n29, err := m.VoltadnPrivateIp.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n29
	}
	return i, nil
}
func (m *OriginServerType_VoltadnPrivateName) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.VoltadnPrivateName != nil {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.VoltadnPrivateName.Size()))
		n30, err := m.VoltadnPrivateName.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n30
	}
	return i, nil
}
func (m *OriginServerType_Srv6PrivateIp) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Srv6PrivateIp != nil {
		dAtA[i] = 0x62
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.Srv6PrivateIp.Size()))
		n31, err := m.Srv6PrivateIp.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n31
	}
	return i, nil
}
func (m *OriginServerType_Srv6PrivateName) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Srv6PrivateName != nil {
		dAtA[i] = 0x6a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.Srv6PrivateName.Size()))
		n32, err := m.Srv6PrivateName.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n32
	}
	return i, nil
}
func (m *UpstreamTlsValidationContext) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpstreamTlsValidationContext) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.TrustedCaUrl) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTypes(dAtA, i, uint64(len(m.TrustedCaUrl)))
		i += copy(dAtA[i:], m.TrustedCaUrl)
	}
	return i, nil
}

func (m *TlsCertificatesType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TlsCertificatesType) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.TlsCertificates) > 0 {
		for _, msg := range m.TlsCertificates {
			dAtA[i] = 0xa
			i++
			i = encodeVarintTypes(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *UpstreamTlsParameters) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpstreamTlsParameters) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.SniChoice != nil {
		nn33, err := m.SniChoice.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn33
	}
	if m.TlsConfig != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.TlsConfig.Size()))
		n34, err := m.TlsConfig.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n34
	}
	if m.ServerValidationChoice != nil {
		nn35, err := m.ServerValidationChoice.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn35
	}
	if m.MtlsChoice != nil {
		nn36, err := m.MtlsChoice.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn36
	}
	return i, nil
}

func (m *UpstreamTlsParameters_Sni) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0xa
	i++
	i = encodeVarintTypes(dAtA, i, uint64(len(m.Sni)))
	i += copy(dAtA[i:], m.Sni)
	return i, nil
}
func (m *UpstreamTlsParameters_UseServerVerification) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.UseServerVerification != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.UseServerVerification.Size()))
		n37, err := m.UseServerVerification.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n37
	}
	return i, nil
}
func (m *UpstreamTlsParameters_SkipServerVerification) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.SkipServerVerification != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.SkipServerVerification.Size()))
		n38, err := m.SkipServerVerification.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n38
	}
	return i, nil
}
func (m *UpstreamTlsParameters_NoMtls) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.NoMtls != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.NoMtls.Size()))
		n39, err := m.NoMtls.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n39
	}
	return i, nil
}
func (m *UpstreamTlsParameters_UseMtls) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.UseMtls != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.UseMtls.Size()))
		n40, err := m.UseMtls.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n40
	}
	return i, nil
}
func (m *UpstreamTlsParameters_UseHostHeaderAsSni) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.UseHostHeaderAsSni != nil {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.UseHostHeaderAsSni.Size()))
		n41, err := m.UseHostHeaderAsSni.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n41
	}
	return i, nil
}
func (m *UpstreamTlsParameters_DisableSni) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.DisableSni != nil {
		dAtA[i] = 0x62
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.DisableSni.Size()))
		n42, err := m.DisableSni.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n42
	}
	return i, nil
}
func (m *UpstreamTlsParameters_VolterraTrustedCa) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.VolterraTrustedCa != nil {
		dAtA[i] = 0x6a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.VolterraTrustedCa.Size()))
		n43, err := m.VolterraTrustedCa.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n43
	}
	return i, nil
}
func (m *OriginPoolDefaultSubset) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OriginPoolDefaultSubset) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.DefaultSubset) > 0 {
		keysForDefaultSubset := make([]string, 0, len(m.DefaultSubset))
		for k, _ := range m.DefaultSubset {
			keysForDefaultSubset = append(keysForDefaultSubset, string(k))
		}
		sortkeys.Strings(keysForDefaultSubset)
		for _, k := range keysForDefaultSubset {
			dAtA[i] = 0x32
			i++
			v := m.DefaultSubset[string(k)]
			mapSize := 1 + len(k) + sovTypes(uint64(len(k))) + 1 + len(v) + sovTypes(uint64(len(v)))
			i = encodeVarintTypes(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintTypes(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			dAtA[i] = 0x12
			i++
			i = encodeVarintTypes(dAtA, i, uint64(len(v)))
			i += copy(dAtA[i:], v)
		}
	}
	return i, nil
}

func (m *OriginPoolSubsets) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OriginPoolSubsets) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.EndpointSubsets) > 0 {
		for _, msg := range m.EndpointSubsets {
			dAtA[i] = 0xa
			i++
			i = encodeVarintTypes(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.FallbackPolicyChoice != nil {
		nn44, err := m.FallbackPolicyChoice.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn44
	}
	return i, nil
}

func (m *OriginPoolSubsets_AnyEndpoint) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.AnyEndpoint != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.AnyEndpoint.Size()))
		n45, err := m.AnyEndpoint.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n45
	}
	return i, nil
}
func (m *OriginPoolSubsets_DefaultSubset) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.DefaultSubset != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.DefaultSubset.Size()))
		n46, err := m.DefaultSubset.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n46
	}
	return i, nil
}
func (m *OriginPoolSubsets_FailRequest) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.FailRequest != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.FailRequest.Size()))
		n47, err := m.FailRequest.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n47
	}
	return i, nil
}
func (m *OriginPoolAdvancedOptions) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OriginPoolAdvancedOptions) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ConnectionTimeout != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.ConnectionTimeout))
	}
	if m.HttpIdleTimeout != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.HttpIdleTimeout))
	}
	if m.CircuitBreakerChoice != nil {
		nn48, err := m.CircuitBreakerChoice.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn48
	}
	if m.OutlierDetectionChoice != nil {
		nn49, err := m.OutlierDetectionChoice.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn49
	}
	if m.PanicThresholdType != nil {
		nn50, err := m.PanicThresholdType.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn50
	}
	if m.SubsetChoice != nil {
		nn51, err := m.SubsetChoice.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn51
	}
	if m.Http2Options != nil {
		dAtA[i] = 0x7a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.Http2Options.Size()))
		n52, err := m.Http2Options.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n52
	}
	return i, nil
}

func (m *OriginPoolAdvancedOptions_DisableCircuitBreaker) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.DisableCircuitBreaker != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.DisableCircuitBreaker.Size()))
		n53, err := m.DisableCircuitBreaker.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n53
	}
	return i, nil
}
func (m *OriginPoolAdvancedOptions_CircuitBreaker) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.CircuitBreaker != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.CircuitBreaker.Size()))
		n54, err := m.CircuitBreaker.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n54
	}
	return i, nil
}
func (m *OriginPoolAdvancedOptions_DisableOutlierDetection) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.DisableOutlierDetection != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.DisableOutlierDetection.Size()))
		n55, err := m.DisableOutlierDetection.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n55
	}
	return i, nil
}
func (m *OriginPoolAdvancedOptions_OutlierDetection) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.OutlierDetection != nil {
		dAtA[i] = 0x42
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.OutlierDetection.Size()))
		n56, err := m.OutlierDetection.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n56
	}
	return i, nil
}
func (m *OriginPoolAdvancedOptions_NoPanicThreshold) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.NoPanicThreshold != nil {
		dAtA[i] = 0x52
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.NoPanicThreshold.Size()))
		n57, err := m.NoPanicThreshold.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n57
	}
	return i, nil
}
func (m *OriginPoolAdvancedOptions_PanicThreshold) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x58
	i++
	i = encodeVarintTypes(dAtA, i, uint64(m.PanicThreshold))
	return i, nil
}
func (m *OriginPoolAdvancedOptions_DisableSubsets) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.DisableSubsets != nil {
		dAtA[i] = 0x6a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.DisableSubsets.Size()))
		n58, err := m.DisableSubsets.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n58
	}
	return i, nil
}
func (m *OriginPoolAdvancedOptions_EnableSubsets) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.EnableSubsets != nil {
		dAtA[i] = 0x72
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.EnableSubsets.Size()))
		n59, err := m.EnableSubsets.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n59
	}
	return i, nil
}
func (m *GlobalSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GlobalSpecType) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.OriginServers) > 0 {
		for _, msg := range m.OriginServers {
			dAtA[i] = 0xa
			i++
			i = encodeVarintTypes(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.TlsChoice != nil {
		nn60, err := m.TlsChoice.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn60
	}
	if m.Port != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.Port))
	}
	if len(m.Healthcheck) > 0 {
		for _, msg := range m.Healthcheck {
			dAtA[i] = 0x32
			i++
			i = encodeVarintTypes(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.LoadbalancerAlgorithm != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.LoadbalancerAlgorithm))
	}
	if m.EndpointSelection != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.EndpointSelection))
	}
	if m.HealthCheckPortChoice != nil {
		nn61, err := m.HealthCheckPortChoice.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn61
	}
	if m.AdvancedOptions != nil {
		dAtA[i] = 0x62
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.AdvancedOptions.Size()))
		n62, err := m.AdvancedOptions.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n62
	}
	if m.ViewInternal != nil {
		dAtA[i] = 0xc2
		i++
		dAtA[i] = 0x3e
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.ViewInternal.Size()))
		n63, err := m.ViewInternal.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n63
	}
	return i, nil
}

func (m *GlobalSpecType_NoTls) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.NoTls != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.NoTls.Size()))
		n64, err := m.NoTls.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n64
	}
	return i, nil
}
func (m *GlobalSpecType_UseTls) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.UseTls != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.UseTls.Size()))
		n65, err := m.UseTls.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n65
	}
	return i, nil
}
func (m *GlobalSpecType_SameAsEndpointPort) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.SameAsEndpointPort != nil {
		dAtA[i] = 0x52
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.SameAsEndpointPort.Size()))
		n66, err := m.SameAsEndpointPort.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n66
	}
	return i, nil
}
func (m *GlobalSpecType_HealthCheckPort) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x58
	i++
	i = encodeVarintTypes(dAtA, i, uint64(m.HealthCheckPort))
	return i, nil
}
func (m *CreateSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateSpecType) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.OriginServers) > 0 {
		for _, msg := range m.OriginServers {
			dAtA[i] = 0xa
			i++
			i = encodeVarintTypes(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.TlsChoice != nil {
		nn67, err := m.TlsChoice.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn67
	}
	if m.Port != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.Port))
	}
	if len(m.Healthcheck) > 0 {
		for _, msg := range m.Healthcheck {
			dAtA[i] = 0x32
			i++
			i = encodeVarintTypes(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.LoadbalancerAlgorithm != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.LoadbalancerAlgorithm))
	}
	if m.EndpointSelection != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.EndpointSelection))
	}
	if m.HealthCheckPortChoice != nil {
		nn68, err := m.HealthCheckPortChoice.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn68
	}
	if m.AdvancedOptions != nil {
		dAtA[i] = 0x62
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.AdvancedOptions.Size()))
		n69, err := m.AdvancedOptions.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n69
	}
	return i, nil
}

func (m *CreateSpecType_NoTls) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.NoTls != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.NoTls.Size()))
		n70, err := m.NoTls.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n70
	}
	return i, nil
}
func (m *CreateSpecType_UseTls) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.UseTls != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.UseTls.Size()))
		n71, err := m.UseTls.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n71
	}
	return i, nil
}
func (m *CreateSpecType_SameAsEndpointPort) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.SameAsEndpointPort != nil {
		dAtA[i] = 0x52
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.SameAsEndpointPort.Size()))
		n72, err := m.SameAsEndpointPort.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n72
	}
	return i, nil
}
func (m *CreateSpecType_HealthCheckPort) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x58
	i++
	i = encodeVarintTypes(dAtA, i, uint64(m.HealthCheckPort))
	return i, nil
}
func (m *ReplaceSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplaceSpecType) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.OriginServers) > 0 {
		for _, msg := range m.OriginServers {
			dAtA[i] = 0xa
			i++
			i = encodeVarintTypes(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.TlsChoice != nil {
		nn73, err := m.TlsChoice.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn73
	}
	if m.Port != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.Port))
	}
	if len(m.Healthcheck) > 0 {
		for _, msg := range m.Healthcheck {
			dAtA[i] = 0x32
			i++
			i = encodeVarintTypes(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.LoadbalancerAlgorithm != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.LoadbalancerAlgorithm))
	}
	if m.EndpointSelection != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.EndpointSelection))
	}
	if m.HealthCheckPortChoice != nil {
		nn74, err := m.HealthCheckPortChoice.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn74
	}
	if m.AdvancedOptions != nil {
		dAtA[i] = 0x62
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.AdvancedOptions.Size()))
		n75, err := m.AdvancedOptions.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n75
	}
	return i, nil
}

func (m *ReplaceSpecType_NoTls) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.NoTls != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.NoTls.Size()))
		n76, err := m.NoTls.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n76
	}
	return i, nil
}
func (m *ReplaceSpecType_UseTls) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.UseTls != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.UseTls.Size()))
		n77, err := m.UseTls.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n77
	}
	return i, nil
}
func (m *ReplaceSpecType_SameAsEndpointPort) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.SameAsEndpointPort != nil {
		dAtA[i] = 0x52
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.SameAsEndpointPort.Size()))
		n78, err := m.SameAsEndpointPort.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n78
	}
	return i, nil
}
func (m *ReplaceSpecType_HealthCheckPort) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x58
	i++
	i = encodeVarintTypes(dAtA, i, uint64(m.HealthCheckPort))
	return i, nil
}
func (m *GetSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetSpecType) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.OriginServers) > 0 {
		for _, msg := range m.OriginServers {
			dAtA[i] = 0xa
			i++
			i = encodeVarintTypes(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.TlsChoice != nil {
		nn79, err := m.TlsChoice.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn79
	}
	if m.Port != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.Port))
	}
	if len(m.Healthcheck) > 0 {
		for _, msg := range m.Healthcheck {
			dAtA[i] = 0x32
			i++
			i = encodeVarintTypes(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.LoadbalancerAlgorithm != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.LoadbalancerAlgorithm))
	}
	if m.EndpointSelection != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.EndpointSelection))
	}
	if m.HealthCheckPortChoice != nil {
		nn80, err := m.HealthCheckPortChoice.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn80
	}
	if m.AdvancedOptions != nil {
		dAtA[i] = 0x62
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.AdvancedOptions.Size()))
		n81, err := m.AdvancedOptions.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n81
	}
	return i, nil
}

func (m *GetSpecType_NoTls) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.NoTls != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.NoTls.Size()))
		n82, err := m.NoTls.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n82
	}
	return i, nil
}
func (m *GetSpecType_UseTls) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.UseTls != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.UseTls.Size()))
		n83, err := m.UseTls.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n83
	}
	return i, nil
}
func (m *GetSpecType_SameAsEndpointPort) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.SameAsEndpointPort != nil {
		dAtA[i] = 0x52
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.SameAsEndpointPort.Size()))
		n84, err := m.SameAsEndpointPort.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n84
	}
	return i, nil
}
func (m *GetSpecType_HealthCheckPort) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x58
	i++
	i = encodeVarintTypes(dAtA, i, uint64(m.HealthCheckPort))
	return i, nil
}
func encodeVarintTypes(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *OriginServerPublicIP) Size() (n int) {
	var l int
	_ = l
	l = len(m.Ip)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *OriginServerPublicName) Size() (n int) {
	var l int
	_ = l
	l = len(m.DnsName)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *OriginServerPrivateIP) Size() (n int) {
	var l int
	_ = l
	l = len(m.Ip)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.SiteLocator != nil {
		l = m.SiteLocator.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.NetworkChoice != nil {
		n += m.NetworkChoice.Size()
	}
	return n
}

func (m *OriginServerPrivateIP_InsideNetwork) Size() (n int) {
	var l int
	_ = l
	if m.InsideNetwork != nil {
		l = m.InsideNetwork.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *OriginServerPrivateIP_OutsideNetwork) Size() (n int) {
	var l int
	_ = l
	if m.OutsideNetwork != nil {
		l = m.OutsideNetwork.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *OriginServerPrivateName) Size() (n int) {
	var l int
	_ = l
	l = len(m.DnsName)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.SiteLocator != nil {
		l = m.SiteLocator.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.NetworkChoice != nil {
		n += m.NetworkChoice.Size()
	}
	return n
}

func (m *OriginServerPrivateName_InsideNetwork) Size() (n int) {
	var l int
	_ = l
	if m.InsideNetwork != nil {
		l = m.InsideNetwork.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *OriginServerPrivateName_OutsideNetwork) Size() (n int) {
	var l int
	_ = l
	if m.OutsideNetwork != nil {
		l = m.OutsideNetwork.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *OriginServerVirtualNetworkPrivateIP) Size() (n int) {
	var l int
	_ = l
	l = len(m.Ip)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.VirtualNetwork != nil {
		l = m.VirtualNetwork.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *OriginServerVirtualNetworkPrivateName) Size() (n int) {
	var l int
	_ = l
	l = len(m.DnsName)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.PrivateNetwork != nil {
		l = m.PrivateNetwork.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *OriginServerK8SService) Size() (n int) {
	var l int
	_ = l
	l = len(m.ServiceName)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.SiteLocator != nil {
		l = m.SiteLocator.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.NetworkChoice != nil {
		n += m.NetworkChoice.Size()
	}
	return n
}

func (m *OriginServerK8SService_InsideNetwork) Size() (n int) {
	var l int
	_ = l
	if m.InsideNetwork != nil {
		l = m.InsideNetwork.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *OriginServerK8SService_OutsideNetwork) Size() (n int) {
	var l int
	_ = l
	if m.OutsideNetwork != nil {
		l = m.OutsideNetwork.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *OriginServerK8SService_Vk8SNetworks) Size() (n int) {
	var l int
	_ = l
	if m.Vk8SNetworks != nil {
		l = m.Vk8SNetworks.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *OriginServerConsulService) Size() (n int) {
	var l int
	_ = l
	l = len(m.ServiceName)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.SiteLocator != nil {
		l = m.SiteLocator.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.NetworkChoice != nil {
		n += m.NetworkChoice.Size()
	}
	return n
}

func (m *OriginServerConsulService_InsideNetwork) Size() (n int) {
	var l int
	_ = l
	if m.InsideNetwork != nil {
		l = m.InsideNetwork.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *OriginServerConsulService_OutsideNetwork) Size() (n int) {
	var l int
	_ = l
	if m.OutsideNetwork != nil {
		l = m.OutsideNetwork.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *OriginServerCustomEndpoint) Size() (n int) {
	var l int
	_ = l
	if m.Endpoint != nil {
		l = m.Endpoint.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *OriginServerType) Size() (n int) {
	var l int
	_ = l
	if m.Choice != nil {
		n += m.Choice.Size()
	}
	if len(m.Labels) > 0 {
		for k, v := range m.Labels {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovTypes(uint64(len(k))) + 1 + len(v) + sovTypes(uint64(len(v)))
			n += mapEntrySize + 1 + sovTypes(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *OriginServerType_PublicIp) Size() (n int) {
	var l int
	_ = l
	if m.PublicIp != nil {
		l = m.PublicIp.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *OriginServerType_PrivateIp) Size() (n int) {
	var l int
	_ = l
	if m.PrivateIp != nil {
		l = m.PrivateIp.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *OriginServerType_PublicName) Size() (n int) {
	var l int
	_ = l
	if m.PublicName != nil {
		l = m.PublicName.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *OriginServerType_PrivateName) Size() (n int) {
	var l int
	_ = l
	if m.PrivateName != nil {
		l = m.PrivateName.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *OriginServerType_K8SService) Size() (n int) {
	var l int
	_ = l
	if m.K8SService != nil {
		l = m.K8SService.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *OriginServerType_ConsulService) Size() (n int) {
	var l int
	_ = l
	if m.ConsulService != nil {
		l = m.ConsulService.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *OriginServerType_CustomEndpointObject) Size() (n int) {
	var l int
	_ = l
	if m.CustomEndpointObject != nil {
		l = m.CustomEndpointObject.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *OriginServerType_VoltadnPrivateIp) Size() (n int) {
	var l int
	_ = l
	if m.VoltadnPrivateIp != nil {
		l = m.VoltadnPrivateIp.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *OriginServerType_VoltadnPrivateName) Size() (n int) {
	var l int
	_ = l
	if m.VoltadnPrivateName != nil {
		l = m.VoltadnPrivateName.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *OriginServerType_Srv6PrivateIp) Size() (n int) {
	var l int
	_ = l
	if m.Srv6PrivateIp != nil {
		l = m.Srv6PrivateIp.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *OriginServerType_Srv6PrivateName) Size() (n int) {
	var l int
	_ = l
	if m.Srv6PrivateName != nil {
		l = m.Srv6PrivateName.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *UpstreamTlsValidationContext) Size() (n int) {
	var l int
	_ = l
	l = len(m.TrustedCaUrl)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *TlsCertificatesType) Size() (n int) {
	var l int
	_ = l
	if len(m.TlsCertificates) > 0 {
		for _, e := range m.TlsCertificates {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *UpstreamTlsParameters) Size() (n int) {
	var l int
	_ = l
	if m.SniChoice != nil {
		n += m.SniChoice.Size()
	}
	if m.TlsConfig != nil {
		l = m.TlsConfig.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.ServerValidationChoice != nil {
		n += m.ServerValidationChoice.Size()
	}
	if m.MtlsChoice != nil {
		n += m.MtlsChoice.Size()
	}
	return n
}

func (m *UpstreamTlsParameters_Sni) Size() (n int) {
	var l int
	_ = l
	l = len(m.Sni)
	n += 1 + l + sovTypes(uint64(l))
	return n
}
func (m *UpstreamTlsParameters_UseServerVerification) Size() (n int) {
	var l int
	_ = l
	if m.UseServerVerification != nil {
		l = m.UseServerVerification.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *UpstreamTlsParameters_SkipServerVerification) Size() (n int) {
	var l int
	_ = l
	if m.SkipServerVerification != nil {
		l = m.SkipServerVerification.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *UpstreamTlsParameters_NoMtls) Size() (n int) {
	var l int
	_ = l
	if m.NoMtls != nil {
		l = m.NoMtls.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *UpstreamTlsParameters_UseMtls) Size() (n int) {
	var l int
	_ = l
	if m.UseMtls != nil {
		l = m.UseMtls.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *UpstreamTlsParameters_UseHostHeaderAsSni) Size() (n int) {
	var l int
	_ = l
	if m.UseHostHeaderAsSni != nil {
		l = m.UseHostHeaderAsSni.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *UpstreamTlsParameters_DisableSni) Size() (n int) {
	var l int
	_ = l
	if m.DisableSni != nil {
		l = m.DisableSni.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *UpstreamTlsParameters_VolterraTrustedCa) Size() (n int) {
	var l int
	_ = l
	if m.VolterraTrustedCa != nil {
		l = m.VolterraTrustedCa.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *OriginPoolDefaultSubset) Size() (n int) {
	var l int
	_ = l
	if len(m.DefaultSubset) > 0 {
		for k, v := range m.DefaultSubset {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovTypes(uint64(len(k))) + 1 + len(v) + sovTypes(uint64(len(v)))
			n += mapEntrySize + 1 + sovTypes(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *OriginPoolSubsets) Size() (n int) {
	var l int
	_ = l
	if len(m.EndpointSubsets) > 0 {
		for _, e := range m.EndpointSubsets {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if m.FallbackPolicyChoice != nil {
		n += m.FallbackPolicyChoice.Size()
	}
	return n
}

func (m *OriginPoolSubsets_AnyEndpoint) Size() (n int) {
	var l int
	_ = l
	if m.AnyEndpoint != nil {
		l = m.AnyEndpoint.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *OriginPoolSubsets_DefaultSubset) Size() (n int) {
	var l int
	_ = l
	if m.DefaultSubset != nil {
		l = m.DefaultSubset.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *OriginPoolSubsets_FailRequest) Size() (n int) {
	var l int
	_ = l
	if m.FailRequest != nil {
		l = m.FailRequest.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *OriginPoolAdvancedOptions) Size() (n int) {
	var l int
	_ = l
	if m.ConnectionTimeout != 0 {
		n += 1 + sovTypes(uint64(m.ConnectionTimeout))
	}
	if m.HttpIdleTimeout != 0 {
		n += 1 + sovTypes(uint64(m.HttpIdleTimeout))
	}
	if m.CircuitBreakerChoice != nil {
		n += m.CircuitBreakerChoice.Size()
	}
	if m.OutlierDetectionChoice != nil {
		n += m.OutlierDetectionChoice.Size()
	}
	if m.PanicThresholdType != nil {
		n += m.PanicThresholdType.Size()
	}
	if m.SubsetChoice != nil {
		n += m.SubsetChoice.Size()
	}
	if m.Http2Options != nil {
		l = m.Http2Options.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *OriginPoolAdvancedOptions_DisableCircuitBreaker) Size() (n int) {
	var l int
	_ = l
	if m.DisableCircuitBreaker != nil {
		l = m.DisableCircuitBreaker.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *OriginPoolAdvancedOptions_CircuitBreaker) Size() (n int) {
	var l int
	_ = l
	if m.CircuitBreaker != nil {
		l = m.CircuitBreaker.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *OriginPoolAdvancedOptions_DisableOutlierDetection) Size() (n int) {
	var l int
	_ = l
	if m.DisableOutlierDetection != nil {
		l = m.DisableOutlierDetection.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *OriginPoolAdvancedOptions_OutlierDetection) Size() (n int) {
	var l int
	_ = l
	if m.OutlierDetection != nil {
		l = m.OutlierDetection.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *OriginPoolAdvancedOptions_NoPanicThreshold) Size() (n int) {
	var l int
	_ = l
	if m.NoPanicThreshold != nil {
		l = m.NoPanicThreshold.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *OriginPoolAdvancedOptions_PanicThreshold) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovTypes(uint64(m.PanicThreshold))
	return n
}
func (m *OriginPoolAdvancedOptions_DisableSubsets) Size() (n int) {
	var l int
	_ = l
	if m.DisableSubsets != nil {
		l = m.DisableSubsets.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *OriginPoolAdvancedOptions_EnableSubsets) Size() (n int) {
	var l int
	_ = l
	if m.EnableSubsets != nil {
		l = m.EnableSubsets.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType) Size() (n int) {
	var l int
	_ = l
	if len(m.OriginServers) > 0 {
		for _, e := range m.OriginServers {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if m.TlsChoice != nil {
		n += m.TlsChoice.Size()
	}
	if m.Port != 0 {
		n += 1 + sovTypes(uint64(m.Port))
	}
	if len(m.Healthcheck) > 0 {
		for _, e := range m.Healthcheck {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if m.LoadbalancerAlgorithm != 0 {
		n += 1 + sovTypes(uint64(m.LoadbalancerAlgorithm))
	}
	if m.EndpointSelection != 0 {
		n += 1 + sovTypes(uint64(m.EndpointSelection))
	}
	if m.HealthCheckPortChoice != nil {
		n += m.HealthCheckPortChoice.Size()
	}
	if m.AdvancedOptions != nil {
		l = m.AdvancedOptions.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.ViewInternal != nil {
		l = m.ViewInternal.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *GlobalSpecType_NoTls) Size() (n int) {
	var l int
	_ = l
	if m.NoTls != nil {
		l = m.NoTls.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_UseTls) Size() (n int) {
	var l int
	_ = l
	if m.UseTls != nil {
		l = m.UseTls.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_SameAsEndpointPort) Size() (n int) {
	var l int
	_ = l
	if m.SameAsEndpointPort != nil {
		l = m.SameAsEndpointPort.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_HealthCheckPort) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovTypes(uint64(m.HealthCheckPort))
	return n
}
func (m *CreateSpecType) Size() (n int) {
	var l int
	_ = l
	if len(m.OriginServers) > 0 {
		for _, e := range m.OriginServers {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if m.TlsChoice != nil {
		n += m.TlsChoice.Size()
	}
	if m.Port != 0 {
		n += 1 + sovTypes(uint64(m.Port))
	}
	if len(m.Healthcheck) > 0 {
		for _, e := range m.Healthcheck {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if m.LoadbalancerAlgorithm != 0 {
		n += 1 + sovTypes(uint64(m.LoadbalancerAlgorithm))
	}
	if m.EndpointSelection != 0 {
		n += 1 + sovTypes(uint64(m.EndpointSelection))
	}
	if m.HealthCheckPortChoice != nil {
		n += m.HealthCheckPortChoice.Size()
	}
	if m.AdvancedOptions != nil {
		l = m.AdvancedOptions.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *CreateSpecType_NoTls) Size() (n int) {
	var l int
	_ = l
	if m.NoTls != nil {
		l = m.NoTls.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_UseTls) Size() (n int) {
	var l int
	_ = l
	if m.UseTls != nil {
		l = m.UseTls.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_SameAsEndpointPort) Size() (n int) {
	var l int
	_ = l
	if m.SameAsEndpointPort != nil {
		l = m.SameAsEndpointPort.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_HealthCheckPort) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovTypes(uint64(m.HealthCheckPort))
	return n
}
func (m *ReplaceSpecType) Size() (n int) {
	var l int
	_ = l
	if len(m.OriginServers) > 0 {
		for _, e := range m.OriginServers {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if m.TlsChoice != nil {
		n += m.TlsChoice.Size()
	}
	if m.Port != 0 {
		n += 1 + sovTypes(uint64(m.Port))
	}
	if len(m.Healthcheck) > 0 {
		for _, e := range m.Healthcheck {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if m.LoadbalancerAlgorithm != 0 {
		n += 1 + sovTypes(uint64(m.LoadbalancerAlgorithm))
	}
	if m.EndpointSelection != 0 {
		n += 1 + sovTypes(uint64(m.EndpointSelection))
	}
	if m.HealthCheckPortChoice != nil {
		n += m.HealthCheckPortChoice.Size()
	}
	if m.AdvancedOptions != nil {
		l = m.AdvancedOptions.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *ReplaceSpecType_NoTls) Size() (n int) {
	var l int
	_ = l
	if m.NoTls != nil {
		l = m.NoTls.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_UseTls) Size() (n int) {
	var l int
	_ = l
	if m.UseTls != nil {
		l = m.UseTls.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_SameAsEndpointPort) Size() (n int) {
	var l int
	_ = l
	if m.SameAsEndpointPort != nil {
		l = m.SameAsEndpointPort.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_HealthCheckPort) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovTypes(uint64(m.HealthCheckPort))
	return n
}
func (m *GetSpecType) Size() (n int) {
	var l int
	_ = l
	if len(m.OriginServers) > 0 {
		for _, e := range m.OriginServers {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if m.TlsChoice != nil {
		n += m.TlsChoice.Size()
	}
	if m.Port != 0 {
		n += 1 + sovTypes(uint64(m.Port))
	}
	if len(m.Healthcheck) > 0 {
		for _, e := range m.Healthcheck {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if m.LoadbalancerAlgorithm != 0 {
		n += 1 + sovTypes(uint64(m.LoadbalancerAlgorithm))
	}
	if m.EndpointSelection != 0 {
		n += 1 + sovTypes(uint64(m.EndpointSelection))
	}
	if m.HealthCheckPortChoice != nil {
		n += m.HealthCheckPortChoice.Size()
	}
	if m.AdvancedOptions != nil {
		l = m.AdvancedOptions.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *GetSpecType_NoTls) Size() (n int) {
	var l int
	_ = l
	if m.NoTls != nil {
		l = m.NoTls.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_UseTls) Size() (n int) {
	var l int
	_ = l
	if m.UseTls != nil {
		l = m.UseTls.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_SameAsEndpointPort) Size() (n int) {
	var l int
	_ = l
	if m.SameAsEndpointPort != nil {
		l = m.SameAsEndpointPort.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_HealthCheckPort) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovTypes(uint64(m.HealthCheckPort))
	return n
}

func sovTypes(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozTypes(x uint64) (n int) {
	return sovTypes(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *OriginServerPublicIP) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&OriginServerPublicIP{`,
		`Ip:` + fmt.Sprintf("%v", this.Ip) + `,`,
		`}`,
	}, "")
	return s
}
func (this *OriginServerPublicName) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&OriginServerPublicName{`,
		`DnsName:` + fmt.Sprintf("%v", this.DnsName) + `,`,
		`}`,
	}, "")
	return s
}
func (this *OriginServerPrivateIP) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&OriginServerPrivateIP{`,
		`Ip:` + fmt.Sprintf("%v", this.Ip) + `,`,
		`SiteLocator:` + strings.Replace(fmt.Sprintf("%v", this.SiteLocator), "SiteLocator", "ves_io_schema_views.SiteLocator", 1) + `,`,
		`NetworkChoice:` + fmt.Sprintf("%v", this.NetworkChoice) + `,`,
		`}`,
	}, "")
	return s
}
func (this *OriginServerPrivateIP_InsideNetwork) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&OriginServerPrivateIP_InsideNetwork{`,
		`InsideNetwork:` + strings.Replace(fmt.Sprintf("%v", this.InsideNetwork), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *OriginServerPrivateIP_OutsideNetwork) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&OriginServerPrivateIP_OutsideNetwork{`,
		`OutsideNetwork:` + strings.Replace(fmt.Sprintf("%v", this.OutsideNetwork), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *OriginServerPrivateName) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&OriginServerPrivateName{`,
		`DnsName:` + fmt.Sprintf("%v", this.DnsName) + `,`,
		`SiteLocator:` + strings.Replace(fmt.Sprintf("%v", this.SiteLocator), "SiteLocator", "ves_io_schema_views.SiteLocator", 1) + `,`,
		`NetworkChoice:` + fmt.Sprintf("%v", this.NetworkChoice) + `,`,
		`}`,
	}, "")
	return s
}
func (this *OriginServerPrivateName_InsideNetwork) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&OriginServerPrivateName_InsideNetwork{`,
		`InsideNetwork:` + strings.Replace(fmt.Sprintf("%v", this.InsideNetwork), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *OriginServerPrivateName_OutsideNetwork) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&OriginServerPrivateName_OutsideNetwork{`,
		`OutsideNetwork:` + strings.Replace(fmt.Sprintf("%v", this.OutsideNetwork), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *OriginServerVirtualNetworkPrivateIP) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&OriginServerVirtualNetworkPrivateIP{`,
		`Ip:` + fmt.Sprintf("%v", this.Ip) + `,`,
		`VirtualNetwork:` + strings.Replace(fmt.Sprintf("%v", this.VirtualNetwork), "ObjectRefType", "ves_io_schema_views.ObjectRefType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *OriginServerVirtualNetworkPrivateName) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&OriginServerVirtualNetworkPrivateName{`,
		`DnsName:` + fmt.Sprintf("%v", this.DnsName) + `,`,
		`PrivateNetwork:` + strings.Replace(fmt.Sprintf("%v", this.PrivateNetwork), "ObjectRefType", "ves_io_schema_views.ObjectRefType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *OriginServerK8SService) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&OriginServerK8SService{`,
		`ServiceName:` + fmt.Sprintf("%v", this.ServiceName) + `,`,
		`SiteLocator:` + strings.Replace(fmt.Sprintf("%v", this.SiteLocator), "SiteLocator", "ves_io_schema_views.SiteLocator", 1) + `,`,
		`NetworkChoice:` + fmt.Sprintf("%v", this.NetworkChoice) + `,`,
		`}`,
	}, "")
	return s
}
func (this *OriginServerK8SService_InsideNetwork) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&OriginServerK8SService_InsideNetwork{`,
		`InsideNetwork:` + strings.Replace(fmt.Sprintf("%v", this.InsideNetwork), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *OriginServerK8SService_OutsideNetwork) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&OriginServerK8SService_OutsideNetwork{`,
		`OutsideNetwork:` + strings.Replace(fmt.Sprintf("%v", this.OutsideNetwork), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *OriginServerK8SService_Vk8SNetworks) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&OriginServerK8SService_Vk8SNetworks{`,
		`Vk8SNetworks:` + strings.Replace(fmt.Sprintf("%v", this.Vk8SNetworks), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *OriginServerConsulService) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&OriginServerConsulService{`,
		`ServiceName:` + fmt.Sprintf("%v", this.ServiceName) + `,`,
		`SiteLocator:` + strings.Replace(fmt.Sprintf("%v", this.SiteLocator), "SiteLocator", "ves_io_schema_views.SiteLocator", 1) + `,`,
		`NetworkChoice:` + fmt.Sprintf("%v", this.NetworkChoice) + `,`,
		`}`,
	}, "")
	return s
}
func (this *OriginServerConsulService_InsideNetwork) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&OriginServerConsulService_InsideNetwork{`,
		`InsideNetwork:` + strings.Replace(fmt.Sprintf("%v", this.InsideNetwork), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *OriginServerConsulService_OutsideNetwork) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&OriginServerConsulService_OutsideNetwork{`,
		`OutsideNetwork:` + strings.Replace(fmt.Sprintf("%v", this.OutsideNetwork), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *OriginServerCustomEndpoint) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&OriginServerCustomEndpoint{`,
		`Endpoint:` + strings.Replace(fmt.Sprintf("%v", this.Endpoint), "ObjectRefType", "ves_io_schema_views.ObjectRefType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *OriginServerType) String() string {
	if this == nil {
		return "nil"
	}
	keysForLabels := make([]string, 0, len(this.Labels))
	for k, _ := range this.Labels {
		keysForLabels = append(keysForLabels, k)
	}
	sortkeys.Strings(keysForLabels)
	mapStringForLabels := "map[string]string{"
	for _, k := range keysForLabels {
		mapStringForLabels += fmt.Sprintf("%v: %v,", k, this.Labels[k])
	}
	mapStringForLabels += "}"
	s := strings.Join([]string{`&OriginServerType{`,
		`Choice:` + fmt.Sprintf("%v", this.Choice) + `,`,
		`Labels:` + mapStringForLabels + `,`,
		`}`,
	}, "")
	return s
}
func (this *OriginServerType_PublicIp) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&OriginServerType_PublicIp{`,
		`PublicIp:` + strings.Replace(fmt.Sprintf("%v", this.PublicIp), "OriginServerPublicIP", "OriginServerPublicIP", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *OriginServerType_PrivateIp) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&OriginServerType_PrivateIp{`,
		`PrivateIp:` + strings.Replace(fmt.Sprintf("%v", this.PrivateIp), "OriginServerPrivateIP", "OriginServerPrivateIP", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *OriginServerType_PublicName) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&OriginServerType_PublicName{`,
		`PublicName:` + strings.Replace(fmt.Sprintf("%v", this.PublicName), "OriginServerPublicName", "OriginServerPublicName", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *OriginServerType_PrivateName) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&OriginServerType_PrivateName{`,
		`PrivateName:` + strings.Replace(fmt.Sprintf("%v", this.PrivateName), "OriginServerPrivateName", "OriginServerPrivateName", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *OriginServerType_K8SService) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&OriginServerType_K8SService{`,
		`K8SService:` + strings.Replace(fmt.Sprintf("%v", this.K8SService), "OriginServerK8SService", "OriginServerK8SService", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *OriginServerType_ConsulService) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&OriginServerType_ConsulService{`,
		`ConsulService:` + strings.Replace(fmt.Sprintf("%v", this.ConsulService), "OriginServerConsulService", "OriginServerConsulService", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *OriginServerType_CustomEndpointObject) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&OriginServerType_CustomEndpointObject{`,
		`CustomEndpointObject:` + strings.Replace(fmt.Sprintf("%v", this.CustomEndpointObject), "OriginServerCustomEndpoint", "OriginServerCustomEndpoint", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *OriginServerType_VoltadnPrivateIp) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&OriginServerType_VoltadnPrivateIp{`,
		`VoltadnPrivateIp:` + strings.Replace(fmt.Sprintf("%v", this.VoltadnPrivateIp), "OriginServerVirtualNetworkPrivateIP", "OriginServerVirtualNetworkPrivateIP", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *OriginServerType_VoltadnPrivateName) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&OriginServerType_VoltadnPrivateName{`,
		`VoltadnPrivateName:` + strings.Replace(fmt.Sprintf("%v", this.VoltadnPrivateName), "OriginServerVirtualNetworkPrivateName", "OriginServerVirtualNetworkPrivateName", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *OriginServerType_Srv6PrivateIp) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&OriginServerType_Srv6PrivateIp{`,
		`Srv6PrivateIp:` + strings.Replace(fmt.Sprintf("%v", this.Srv6PrivateIp), "OriginServerVirtualNetworkPrivateIP", "OriginServerVirtualNetworkPrivateIP", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *OriginServerType_Srv6PrivateName) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&OriginServerType_Srv6PrivateName{`,
		`Srv6PrivateName:` + strings.Replace(fmt.Sprintf("%v", this.Srv6PrivateName), "OriginServerVirtualNetworkPrivateName", "OriginServerVirtualNetworkPrivateName", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpstreamTlsValidationContext) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpstreamTlsValidationContext{`,
		`TrustedCaUrl:` + fmt.Sprintf("%v", this.TrustedCaUrl) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TlsCertificatesType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TlsCertificatesType{`,
		`TlsCertificates:` + strings.Replace(fmt.Sprintf("%v", this.TlsCertificates), "TlsCertificateType", "ves_io_schema4.TlsCertificateType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpstreamTlsParameters) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpstreamTlsParameters{`,
		`SniChoice:` + fmt.Sprintf("%v", this.SniChoice) + `,`,
		`TlsConfig:` + strings.Replace(fmt.Sprintf("%v", this.TlsConfig), "TlsConfig", "ves_io_schema_views.TlsConfig", 1) + `,`,
		`ServerValidationChoice:` + fmt.Sprintf("%v", this.ServerValidationChoice) + `,`,
		`MtlsChoice:` + fmt.Sprintf("%v", this.MtlsChoice) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpstreamTlsParameters_Sni) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpstreamTlsParameters_Sni{`,
		`Sni:` + fmt.Sprintf("%v", this.Sni) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpstreamTlsParameters_UseServerVerification) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpstreamTlsParameters_UseServerVerification{`,
		`UseServerVerification:` + strings.Replace(fmt.Sprintf("%v", this.UseServerVerification), "UpstreamTlsValidationContext", "UpstreamTlsValidationContext", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpstreamTlsParameters_SkipServerVerification) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpstreamTlsParameters_SkipServerVerification{`,
		`SkipServerVerification:` + strings.Replace(fmt.Sprintf("%v", this.SkipServerVerification), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpstreamTlsParameters_NoMtls) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpstreamTlsParameters_NoMtls{`,
		`NoMtls:` + strings.Replace(fmt.Sprintf("%v", this.NoMtls), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpstreamTlsParameters_UseMtls) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpstreamTlsParameters_UseMtls{`,
		`UseMtls:` + strings.Replace(fmt.Sprintf("%v", this.UseMtls), "TlsCertificatesType", "TlsCertificatesType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpstreamTlsParameters_UseHostHeaderAsSni) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpstreamTlsParameters_UseHostHeaderAsSni{`,
		`UseHostHeaderAsSni:` + strings.Replace(fmt.Sprintf("%v", this.UseHostHeaderAsSni), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpstreamTlsParameters_DisableSni) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpstreamTlsParameters_DisableSni{`,
		`DisableSni:` + strings.Replace(fmt.Sprintf("%v", this.DisableSni), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpstreamTlsParameters_VolterraTrustedCa) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpstreamTlsParameters_VolterraTrustedCa{`,
		`VolterraTrustedCa:` + strings.Replace(fmt.Sprintf("%v", this.VolterraTrustedCa), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *OriginPoolDefaultSubset) String() string {
	if this == nil {
		return "nil"
	}
	keysForDefaultSubset := make([]string, 0, len(this.DefaultSubset))
	for k, _ := range this.DefaultSubset {
		keysForDefaultSubset = append(keysForDefaultSubset, k)
	}
	sortkeys.Strings(keysForDefaultSubset)
	mapStringForDefaultSubset := "map[string]string{"
	for _, k := range keysForDefaultSubset {
		mapStringForDefaultSubset += fmt.Sprintf("%v: %v,", k, this.DefaultSubset[k])
	}
	mapStringForDefaultSubset += "}"
	s := strings.Join([]string{`&OriginPoolDefaultSubset{`,
		`DefaultSubset:` + mapStringForDefaultSubset + `,`,
		`}`,
	}, "")
	return s
}
func (this *OriginPoolSubsets) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&OriginPoolSubsets{`,
		`EndpointSubsets:` + strings.Replace(fmt.Sprintf("%v", this.EndpointSubsets), "EndpointSubsetSelectorType", "ves_io_schema_cluster.EndpointSubsetSelectorType", 1) + `,`,
		`FallbackPolicyChoice:` + fmt.Sprintf("%v", this.FallbackPolicyChoice) + `,`,
		`}`,
	}, "")
	return s
}
func (this *OriginPoolSubsets_AnyEndpoint) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&OriginPoolSubsets_AnyEndpoint{`,
		`AnyEndpoint:` + strings.Replace(fmt.Sprintf("%v", this.AnyEndpoint), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *OriginPoolSubsets_DefaultSubset) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&OriginPoolSubsets_DefaultSubset{`,
		`DefaultSubset:` + strings.Replace(fmt.Sprintf("%v", this.DefaultSubset), "OriginPoolDefaultSubset", "OriginPoolDefaultSubset", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *OriginPoolSubsets_FailRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&OriginPoolSubsets_FailRequest{`,
		`FailRequest:` + strings.Replace(fmt.Sprintf("%v", this.FailRequest), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *OriginPoolAdvancedOptions) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&OriginPoolAdvancedOptions{`,
		`ConnectionTimeout:` + fmt.Sprintf("%v", this.ConnectionTimeout) + `,`,
		`HttpIdleTimeout:` + fmt.Sprintf("%v", this.HttpIdleTimeout) + `,`,
		`CircuitBreakerChoice:` + fmt.Sprintf("%v", this.CircuitBreakerChoice) + `,`,
		`OutlierDetectionChoice:` + fmt.Sprintf("%v", this.OutlierDetectionChoice) + `,`,
		`PanicThresholdType:` + fmt.Sprintf("%v", this.PanicThresholdType) + `,`,
		`SubsetChoice:` + fmt.Sprintf("%v", this.SubsetChoice) + `,`,
		`Http2Options:` + strings.Replace(fmt.Sprintf("%v", this.Http2Options), "Http2ProtocolOptions", "ves_io_schema_cluster.Http2ProtocolOptions", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *OriginPoolAdvancedOptions_DisableCircuitBreaker) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&OriginPoolAdvancedOptions_DisableCircuitBreaker{`,
		`DisableCircuitBreaker:` + strings.Replace(fmt.Sprintf("%v", this.DisableCircuitBreaker), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *OriginPoolAdvancedOptions_CircuitBreaker) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&OriginPoolAdvancedOptions_CircuitBreaker{`,
		`CircuitBreaker:` + strings.Replace(fmt.Sprintf("%v", this.CircuitBreaker), "CircuitBreaker", "ves_io_schema_cluster.CircuitBreaker", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *OriginPoolAdvancedOptions_DisableOutlierDetection) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&OriginPoolAdvancedOptions_DisableOutlierDetection{`,
		`DisableOutlierDetection:` + strings.Replace(fmt.Sprintf("%v", this.DisableOutlierDetection), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *OriginPoolAdvancedOptions_OutlierDetection) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&OriginPoolAdvancedOptions_OutlierDetection{`,
		`OutlierDetection:` + strings.Replace(fmt.Sprintf("%v", this.OutlierDetection), "OutlierDetectionType", "ves_io_schema_cluster.OutlierDetectionType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *OriginPoolAdvancedOptions_NoPanicThreshold) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&OriginPoolAdvancedOptions_NoPanicThreshold{`,
		`NoPanicThreshold:` + strings.Replace(fmt.Sprintf("%v", this.NoPanicThreshold), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *OriginPoolAdvancedOptions_PanicThreshold) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&OriginPoolAdvancedOptions_PanicThreshold{`,
		`PanicThreshold:` + fmt.Sprintf("%v", this.PanicThreshold) + `,`,
		`}`,
	}, "")
	return s
}
func (this *OriginPoolAdvancedOptions_DisableSubsets) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&OriginPoolAdvancedOptions_DisableSubsets{`,
		`DisableSubsets:` + strings.Replace(fmt.Sprintf("%v", this.DisableSubsets), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *OriginPoolAdvancedOptions_EnableSubsets) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&OriginPoolAdvancedOptions_EnableSubsets{`,
		`EnableSubsets:` + strings.Replace(fmt.Sprintf("%v", this.EnableSubsets), "OriginPoolSubsets", "OriginPoolSubsets", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType{`,
		`OriginServers:` + strings.Replace(fmt.Sprintf("%v", this.OriginServers), "OriginServerType", "OriginServerType", 1) + `,`,
		`TlsChoice:` + fmt.Sprintf("%v", this.TlsChoice) + `,`,
		`Port:` + fmt.Sprintf("%v", this.Port) + `,`,
		`Healthcheck:` + strings.Replace(fmt.Sprintf("%v", this.Healthcheck), "ObjectRefType", "ves_io_schema_views.ObjectRefType", 1) + `,`,
		`LoadbalancerAlgorithm:` + fmt.Sprintf("%v", this.LoadbalancerAlgorithm) + `,`,
		`EndpointSelection:` + fmt.Sprintf("%v", this.EndpointSelection) + `,`,
		`HealthCheckPortChoice:` + fmt.Sprintf("%v", this.HealthCheckPortChoice) + `,`,
		`AdvancedOptions:` + strings.Replace(fmt.Sprintf("%v", this.AdvancedOptions), "OriginPoolAdvancedOptions", "OriginPoolAdvancedOptions", 1) + `,`,
		`ViewInternal:` + strings.Replace(fmt.Sprintf("%v", this.ViewInternal), "ObjectRefType", "ves_io_schema_views.ObjectRefType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_NoTls) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_NoTls{`,
		`NoTls:` + strings.Replace(fmt.Sprintf("%v", this.NoTls), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_UseTls) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_UseTls{`,
		`UseTls:` + strings.Replace(fmt.Sprintf("%v", this.UseTls), "UpstreamTlsParameters", "UpstreamTlsParameters", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_SameAsEndpointPort) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_SameAsEndpointPort{`,
		`SameAsEndpointPort:` + strings.Replace(fmt.Sprintf("%v", this.SameAsEndpointPort), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_HealthCheckPort) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_HealthCheckPort{`,
		`HealthCheckPort:` + fmt.Sprintf("%v", this.HealthCheckPort) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType{`,
		`OriginServers:` + strings.Replace(fmt.Sprintf("%v", this.OriginServers), "OriginServerType", "OriginServerType", 1) + `,`,
		`TlsChoice:` + fmt.Sprintf("%v", this.TlsChoice) + `,`,
		`Port:` + fmt.Sprintf("%v", this.Port) + `,`,
		`Healthcheck:` + strings.Replace(fmt.Sprintf("%v", this.Healthcheck), "ObjectRefType", "ves_io_schema_views.ObjectRefType", 1) + `,`,
		`LoadbalancerAlgorithm:` + fmt.Sprintf("%v", this.LoadbalancerAlgorithm) + `,`,
		`EndpointSelection:` + fmt.Sprintf("%v", this.EndpointSelection) + `,`,
		`HealthCheckPortChoice:` + fmt.Sprintf("%v", this.HealthCheckPortChoice) + `,`,
		`AdvancedOptions:` + strings.Replace(fmt.Sprintf("%v", this.AdvancedOptions), "OriginPoolAdvancedOptions", "OriginPoolAdvancedOptions", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_NoTls) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_NoTls{`,
		`NoTls:` + strings.Replace(fmt.Sprintf("%v", this.NoTls), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_UseTls) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_UseTls{`,
		`UseTls:` + strings.Replace(fmt.Sprintf("%v", this.UseTls), "UpstreamTlsParameters", "UpstreamTlsParameters", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_SameAsEndpointPort) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_SameAsEndpointPort{`,
		`SameAsEndpointPort:` + strings.Replace(fmt.Sprintf("%v", this.SameAsEndpointPort), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_HealthCheckPort) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_HealthCheckPort{`,
		`HealthCheckPort:` + fmt.Sprintf("%v", this.HealthCheckPort) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType{`,
		`OriginServers:` + strings.Replace(fmt.Sprintf("%v", this.OriginServers), "OriginServerType", "OriginServerType", 1) + `,`,
		`TlsChoice:` + fmt.Sprintf("%v", this.TlsChoice) + `,`,
		`Port:` + fmt.Sprintf("%v", this.Port) + `,`,
		`Healthcheck:` + strings.Replace(fmt.Sprintf("%v", this.Healthcheck), "ObjectRefType", "ves_io_schema_views.ObjectRefType", 1) + `,`,
		`LoadbalancerAlgorithm:` + fmt.Sprintf("%v", this.LoadbalancerAlgorithm) + `,`,
		`EndpointSelection:` + fmt.Sprintf("%v", this.EndpointSelection) + `,`,
		`HealthCheckPortChoice:` + fmt.Sprintf("%v", this.HealthCheckPortChoice) + `,`,
		`AdvancedOptions:` + strings.Replace(fmt.Sprintf("%v", this.AdvancedOptions), "OriginPoolAdvancedOptions", "OriginPoolAdvancedOptions", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_NoTls) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_NoTls{`,
		`NoTls:` + strings.Replace(fmt.Sprintf("%v", this.NoTls), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_UseTls) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_UseTls{`,
		`UseTls:` + strings.Replace(fmt.Sprintf("%v", this.UseTls), "UpstreamTlsParameters", "UpstreamTlsParameters", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_SameAsEndpointPort) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_SameAsEndpointPort{`,
		`SameAsEndpointPort:` + strings.Replace(fmt.Sprintf("%v", this.SameAsEndpointPort), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_HealthCheckPort) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_HealthCheckPort{`,
		`HealthCheckPort:` + fmt.Sprintf("%v", this.HealthCheckPort) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType{`,
		`OriginServers:` + strings.Replace(fmt.Sprintf("%v", this.OriginServers), "OriginServerType", "OriginServerType", 1) + `,`,
		`TlsChoice:` + fmt.Sprintf("%v", this.TlsChoice) + `,`,
		`Port:` + fmt.Sprintf("%v", this.Port) + `,`,
		`Healthcheck:` + strings.Replace(fmt.Sprintf("%v", this.Healthcheck), "ObjectRefType", "ves_io_schema_views.ObjectRefType", 1) + `,`,
		`LoadbalancerAlgorithm:` + fmt.Sprintf("%v", this.LoadbalancerAlgorithm) + `,`,
		`EndpointSelection:` + fmt.Sprintf("%v", this.EndpointSelection) + `,`,
		`HealthCheckPortChoice:` + fmt.Sprintf("%v", this.HealthCheckPortChoice) + `,`,
		`AdvancedOptions:` + strings.Replace(fmt.Sprintf("%v", this.AdvancedOptions), "OriginPoolAdvancedOptions", "OriginPoolAdvancedOptions", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_NoTls) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_NoTls{`,
		`NoTls:` + strings.Replace(fmt.Sprintf("%v", this.NoTls), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_UseTls) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_UseTls{`,
		`UseTls:` + strings.Replace(fmt.Sprintf("%v", this.UseTls), "UpstreamTlsParameters", "UpstreamTlsParameters", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_SameAsEndpointPort) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_SameAsEndpointPort{`,
		`SameAsEndpointPort:` + strings.Replace(fmt.Sprintf("%v", this.SameAsEndpointPort), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_HealthCheckPort) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_HealthCheckPort{`,
		`HealthCheckPort:` + fmt.Sprintf("%v", this.HealthCheckPort) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringTypes(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *OriginServerPublicIP) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OriginServerPublicIP: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OriginServerPublicIP: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ip", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ip = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OriginServerPublicName) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OriginServerPublicName: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OriginServerPublicName: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DnsName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DnsName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OriginServerPrivateIP) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OriginServerPrivateIP: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OriginServerPrivateIP: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ip", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ip = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SiteLocator", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SiteLocator == nil {
				m.SiteLocator = &ves_io_schema_views.SiteLocator{}
			}
			if err := m.SiteLocator.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InsideNetwork", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.NetworkChoice = &OriginServerPrivateIP_InsideNetwork{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutsideNetwork", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.NetworkChoice = &OriginServerPrivateIP_OutsideNetwork{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OriginServerPrivateName) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OriginServerPrivateName: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OriginServerPrivateName: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DnsName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DnsName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SiteLocator", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SiteLocator == nil {
				m.SiteLocator = &ves_io_schema_views.SiteLocator{}
			}
			if err := m.SiteLocator.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InsideNetwork", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.NetworkChoice = &OriginServerPrivateName_InsideNetwork{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutsideNetwork", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.NetworkChoice = &OriginServerPrivateName_OutsideNetwork{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OriginServerVirtualNetworkPrivateIP) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OriginServerVirtualNetworkPrivateIP: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OriginServerVirtualNetworkPrivateIP: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ip", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ip = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VirtualNetwork", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.VirtualNetwork == nil {
				m.VirtualNetwork = &ves_io_schema_views.ObjectRefType{}
			}
			if err := m.VirtualNetwork.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OriginServerVirtualNetworkPrivateName) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OriginServerVirtualNetworkPrivateName: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OriginServerVirtualNetworkPrivateName: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DnsName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DnsName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrivateNetwork", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PrivateNetwork == nil {
				m.PrivateNetwork = &ves_io_schema_views.ObjectRefType{}
			}
			if err := m.PrivateNetwork.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OriginServerK8SService) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OriginServerK8SService: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OriginServerK8SService: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServiceName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServiceName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SiteLocator", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SiteLocator == nil {
				m.SiteLocator = &ves_io_schema_views.SiteLocator{}
			}
			if err := m.SiteLocator.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InsideNetwork", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.NetworkChoice = &OriginServerK8SService_InsideNetwork{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutsideNetwork", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.NetworkChoice = &OriginServerK8SService_OutsideNetwork{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vk8SNetworks", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.NetworkChoice = &OriginServerK8SService_Vk8SNetworks{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OriginServerConsulService) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OriginServerConsulService: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OriginServerConsulService: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServiceName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServiceName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SiteLocator", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SiteLocator == nil {
				m.SiteLocator = &ves_io_schema_views.SiteLocator{}
			}
			if err := m.SiteLocator.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InsideNetwork", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.NetworkChoice = &OriginServerConsulService_InsideNetwork{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutsideNetwork", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.NetworkChoice = &OriginServerConsulService_OutsideNetwork{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OriginServerCustomEndpoint) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OriginServerCustomEndpoint: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OriginServerCustomEndpoint: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Endpoint", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Endpoint == nil {
				m.Endpoint = &ves_io_schema_views.ObjectRefType{}
			}
			if err := m.Endpoint.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OriginServerType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OriginServerType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OriginServerType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PublicIp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &OriginServerPublicIP{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Choice = &OriginServerType_PublicIp{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrivateIp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &OriginServerPrivateIP{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Choice = &OriginServerType_PrivateIp{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PublicName", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &OriginServerPublicName{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Choice = &OriginServerType_PublicName{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrivateName", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &OriginServerPrivateName{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Choice = &OriginServerType_PrivateName{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field K8SService", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &OriginServerK8SService{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Choice = &OriginServerType_K8SService{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConsulService", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &OriginServerConsulService{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Choice = &OriginServerType_ConsulService{v}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CustomEndpointObject", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &OriginServerCustomEndpoint{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Choice = &OriginServerType_CustomEndpointObject{v}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Labels", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Labels == nil {
				m.Labels = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTypes
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthTypes
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTypes
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthTypes
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipTypes(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthTypes
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Labels[mapkey] = mapvalue
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VoltadnPrivateIp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &OriginServerVirtualNetworkPrivateIP{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Choice = &OriginServerType_VoltadnPrivateIp{v}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VoltadnPrivateName", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &OriginServerVirtualNetworkPrivateName{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Choice = &OriginServerType_VoltadnPrivateName{v}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Srv6PrivateIp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &OriginServerVirtualNetworkPrivateIP{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Choice = &OriginServerType_Srv6PrivateIp{v}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Srv6PrivateName", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &OriginServerVirtualNetworkPrivateName{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Choice = &OriginServerType_Srv6PrivateName{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpstreamTlsValidationContext) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpstreamTlsValidationContext: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpstreamTlsValidationContext: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TrustedCaUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TrustedCaUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TlsCertificatesType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TlsCertificatesType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TlsCertificatesType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TlsCertificates", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TlsCertificates = append(m.TlsCertificates, &ves_io_schema4.TlsCertificateType{})
			if err := m.TlsCertificates[len(m.TlsCertificates)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpstreamTlsParameters) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpstreamTlsParameters: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpstreamTlsParameters: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sni", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SniChoice = &UpstreamTlsParameters_Sni{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TlsConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TlsConfig == nil {
				m.TlsConfig = &ves_io_schema_views.TlsConfig{}
			}
			if err := m.TlsConfig.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UseServerVerification", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &UpstreamTlsValidationContext{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ServerValidationChoice = &UpstreamTlsParameters_UseServerVerification{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SkipServerVerification", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ServerValidationChoice = &UpstreamTlsParameters_SkipServerVerification{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoMtls", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.MtlsChoice = &UpstreamTlsParameters_NoMtls{v}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UseMtls", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &TlsCertificatesType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.MtlsChoice = &UpstreamTlsParameters_UseMtls{v}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UseHostHeaderAsSni", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.SniChoice = &UpstreamTlsParameters_UseHostHeaderAsSni{v}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisableSni", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.SniChoice = &UpstreamTlsParameters_DisableSni{v}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VolterraTrustedCa", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ServerValidationChoice = &UpstreamTlsParameters_VolterraTrustedCa{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OriginPoolDefaultSubset) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OriginPoolDefaultSubset: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OriginPoolDefaultSubset: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultSubset", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DefaultSubset == nil {
				m.DefaultSubset = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTypes
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthTypes
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTypes
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthTypes
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipTypes(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthTypes
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.DefaultSubset[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OriginPoolSubsets) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OriginPoolSubsets: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OriginPoolSubsets: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndpointSubsets", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EndpointSubsets = append(m.EndpointSubsets, &ves_io_schema_cluster.EndpointSubsetSelectorType{})
			if err := m.EndpointSubsets[len(m.EndpointSubsets)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AnyEndpoint", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.FallbackPolicyChoice = &OriginPoolSubsets_AnyEndpoint{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultSubset", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &OriginPoolDefaultSubset{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.FallbackPolicyChoice = &OriginPoolSubsets_DefaultSubset{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FailRequest", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.FallbackPolicyChoice = &OriginPoolSubsets_FailRequest{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OriginPoolAdvancedOptions) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OriginPoolAdvancedOptions: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OriginPoolAdvancedOptions: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConnectionTimeout", wireType)
			}
			m.ConnectionTimeout = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ConnectionTimeout |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HttpIdleTimeout", wireType)
			}
			m.HttpIdleTimeout = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HttpIdleTimeout |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisableCircuitBreaker", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.CircuitBreakerChoice = &OriginPoolAdvancedOptions_DisableCircuitBreaker{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CircuitBreaker", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema_cluster.CircuitBreaker{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.CircuitBreakerChoice = &OriginPoolAdvancedOptions_CircuitBreaker{v}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisableOutlierDetection", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.OutlierDetectionChoice = &OriginPoolAdvancedOptions_DisableOutlierDetection{v}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutlierDetection", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema_cluster.OutlierDetectionType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.OutlierDetectionChoice = &OriginPoolAdvancedOptions_OutlierDetection{v}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoPanicThreshold", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.PanicThresholdType = &OriginPoolAdvancedOptions_NoPanicThreshold{v}
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PanicThreshold", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PanicThresholdType = &OriginPoolAdvancedOptions_PanicThreshold{v}
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisableSubsets", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.SubsetChoice = &OriginPoolAdvancedOptions_DisableSubsets{v}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnableSubsets", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &OriginPoolSubsets{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.SubsetChoice = &OriginPoolAdvancedOptions_EnableSubsets{v}
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Http2Options", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Http2Options == nil {
				m.Http2Options = &ves_io_schema_cluster.Http2ProtocolOptions{}
			}
			if err := m.Http2Options.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GlobalSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GlobalSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GlobalSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OriginServers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OriginServers = append(m.OriginServers, &OriginServerType{})
			if err := m.OriginServers[len(m.OriginServers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoTls", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.TlsChoice = &GlobalSpecType_NoTls{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UseTls", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &UpstreamTlsParameters{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.TlsChoice = &GlobalSpecType_UseTls{v}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Port", wireType)
			}
			m.Port = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Port |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Healthcheck", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Healthcheck = append(m.Healthcheck, &ves_io_schema_views.ObjectRefType{})
			if err := m.Healthcheck[len(m.Healthcheck)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LoadbalancerAlgorithm", wireType)
			}
			m.LoadbalancerAlgorithm = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LoadbalancerAlgorithm |= (ves_io_schema_cluster.LoadbalancerAlgorithm(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndpointSelection", wireType)
			}
			m.EndpointSelection = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EndpointSelection |= (ves_io_schema_cluster.EndpointSelectionPolicy(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SameAsEndpointPort", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.HealthCheckPortChoice = &GlobalSpecType_SameAsEndpointPort{v}
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HealthCheckPort", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.HealthCheckPortChoice = &GlobalSpecType_HealthCheckPort{v}
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdvancedOptions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AdvancedOptions == nil {
				m.AdvancedOptions = &OriginPoolAdvancedOptions{}
			}
			if err := m.AdvancedOptions.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 1000:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ViewInternal", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ViewInternal == nil {
				m.ViewInternal = &ves_io_schema_views.ObjectRefType{}
			}
			if err := m.ViewInternal.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OriginServers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OriginServers = append(m.OriginServers, &OriginServerType{})
			if err := m.OriginServers[len(m.OriginServers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoTls", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.TlsChoice = &CreateSpecType_NoTls{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UseTls", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &UpstreamTlsParameters{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.TlsChoice = &CreateSpecType_UseTls{v}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Port", wireType)
			}
			m.Port = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Port |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Healthcheck", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Healthcheck = append(m.Healthcheck, &ves_io_schema_views.ObjectRefType{})
			if err := m.Healthcheck[len(m.Healthcheck)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LoadbalancerAlgorithm", wireType)
			}
			m.LoadbalancerAlgorithm = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LoadbalancerAlgorithm |= (ves_io_schema_cluster.LoadbalancerAlgorithm(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndpointSelection", wireType)
			}
			m.EndpointSelection = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EndpointSelection |= (ves_io_schema_cluster.EndpointSelectionPolicy(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SameAsEndpointPort", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.HealthCheckPortChoice = &CreateSpecType_SameAsEndpointPort{v}
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HealthCheckPort", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.HealthCheckPortChoice = &CreateSpecType_HealthCheckPort{v}
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdvancedOptions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AdvancedOptions == nil {
				m.AdvancedOptions = &OriginPoolAdvancedOptions{}
			}
			if err := m.AdvancedOptions.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplaceSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplaceSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplaceSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OriginServers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OriginServers = append(m.OriginServers, &OriginServerType{})
			if err := m.OriginServers[len(m.OriginServers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoTls", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.TlsChoice = &ReplaceSpecType_NoTls{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UseTls", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &UpstreamTlsParameters{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.TlsChoice = &ReplaceSpecType_UseTls{v}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Port", wireType)
			}
			m.Port = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Port |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Healthcheck", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Healthcheck = append(m.Healthcheck, &ves_io_schema_views.ObjectRefType{})
			if err := m.Healthcheck[len(m.Healthcheck)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LoadbalancerAlgorithm", wireType)
			}
			m.LoadbalancerAlgorithm = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LoadbalancerAlgorithm |= (ves_io_schema_cluster.LoadbalancerAlgorithm(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndpointSelection", wireType)
			}
			m.EndpointSelection = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EndpointSelection |= (ves_io_schema_cluster.EndpointSelectionPolicy(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SameAsEndpointPort", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.HealthCheckPortChoice = &ReplaceSpecType_SameAsEndpointPort{v}
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HealthCheckPort", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.HealthCheckPortChoice = &ReplaceSpecType_HealthCheckPort{v}
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdvancedOptions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AdvancedOptions == nil {
				m.AdvancedOptions = &OriginPoolAdvancedOptions{}
			}
			if err := m.AdvancedOptions.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OriginServers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OriginServers = append(m.OriginServers, &OriginServerType{})
			if err := m.OriginServers[len(m.OriginServers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoTls", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.TlsChoice = &GetSpecType_NoTls{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UseTls", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &UpstreamTlsParameters{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.TlsChoice = &GetSpecType_UseTls{v}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Port", wireType)
			}
			m.Port = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Port |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Healthcheck", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Healthcheck = append(m.Healthcheck, &ves_io_schema_views.ObjectRefType{})
			if err := m.Healthcheck[len(m.Healthcheck)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LoadbalancerAlgorithm", wireType)
			}
			m.LoadbalancerAlgorithm = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LoadbalancerAlgorithm |= (ves_io_schema_cluster.LoadbalancerAlgorithm(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndpointSelection", wireType)
			}
			m.EndpointSelection = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EndpointSelection |= (ves_io_schema_cluster.EndpointSelectionPolicy(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SameAsEndpointPort", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.HealthCheckPortChoice = &GetSpecType_SameAsEndpointPort{v}
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HealthCheckPort", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.HealthCheckPortChoice = &GetSpecType_HealthCheckPort{v}
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdvancedOptions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AdvancedOptions == nil {
				m.AdvancedOptions = &OriginPoolAdvancedOptions{}
			}
			if err := m.AdvancedOptions.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTypes(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthTypes
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipTypes(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthTypes = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTypes   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("ves.io/schema/views/origin_pool/types.proto", fileDescriptorTypes) }
func init() {
	golang_proto.RegisterFile("ves.io/schema/views/origin_pool/types.proto", fileDescriptorTypes)
}

var fileDescriptorTypes = []byte{
	// 2982 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x5a, 0x4d, 0x6c, 0x1b, 0xc7,
	0x15, 0xe6, 0x90, 0x14, 0x45, 0x3d, 0x4a, 0x24, 0xb5, 0xb6, 0x64, 0xfa, 0x27, 0x0c, 0xad, 0xd4,
	0x80, 0x1b, 0xd3, 0x94, 0x48, 0xeb, 0x87, 0x56, 0x10, 0xa7, 0x5e, 0x59, 0x0e, 0x25, 0x2b, 0x91,
	0xba, 0x52, 0x9c, 0xc0, 0x45, 0xba, 0x5d, 0x2e, 0x47, 0xd2, 0x56, 0xab, 0xdd, 0xcd, 0xce, 0x52,
	0xb6, 0x8a, 0x1a, 0x30, 0x72, 0x2a, 0xda, 0x4b, 0xd2, 0x63, 0x8e, 0x3d, 0x15, 0x06, 0xda, 0x02,
	0x3d, 0x96, 0x2e, 0x20, 0x04, 0x08, 0x10, 0xf4, 0x52, 0x1d, 0x7a, 0x08, 0x7c, 0x4a, 0x94, 0x8b,
	0x7b, 0x69, 0x53, 0x1f, 0x8a, 0x20, 0x97, 0x14, 0x33, 0x3b, 0x4b, 0xed, 0x52, 0x14, 0x25, 0xb9,
	0x4e, 0x50, 0xa4, 0xbe, 0x2c, 0x76, 0x67, 0xdf, 0xf7, 0xde, 0x9b, 0x99, 0xf7, 0xbe, 0xf7, 0x66,
	0x49, 0xb8, 0xb0, 0x81, 0x49, 0x41, 0x33, 0x87, 0x89, 0xba, 0x8a, 0xd7, 0x95, 0xe1, 0x0d, 0x0d,
	0xdf, 0x26, 0xc3, 0xa6, 0xad, 0xad, 0x68, 0x86, 0x6c, 0x99, 0xa6, 0x3e, 0xec, 0x6c, 0x5a, 0x98,
	0x14, 0x2c, 0xdb, 0x74, 0x4c, 0xe1, 0x79, 0x57, 0xb8, 0xe0, 0x0a, 0x17, 0x98, 0x70, 0xc1, 0x27,
	0x7c, 0xea, 0xe2, 0x8a, 0xe6, 0xac, 0xd6, 0xab, 0x05, 0xd5, 0x5c, 0x1f, 0x5e, 0x31, 0x57, 0xcc,
	0x61, 0x86, 0xab, 0xd6, 0x97, 0xd9, 0x13, 0x7b, 0x60, 0x77, 0xae, 0xbe, 0x53, 0x67, 0x83, 0xc6,
	0x55, 0xbd, 0x4e, 0x1c, 0x6c, 0xfb, 0x4d, 0x9e, 0x3a, 0x17, 0x14, 0x59, 0xc5, 0x8a, 0xee, 0xac,
	0xaa, 0xab, 0x58, 0x5d, 0x0b, 0x88, 0x9d, 0x0e, 0x8a, 0x99, 0x96, 0xa3, 0x99, 0x86, 0xf7, 0xf2,
	0x64, 0xf0, 0xa5, 0x1f, 0x77, 0xa6, 0x65, 0xfa, 0x8a, 0xae, 0xd5, 0x14, 0x07, 0xf3, 0xb7, 0xb9,
	0xbd, 0x8b, 0x23, 0x07, 0x55, 0x3f, 0xdf, 0x6e, 0xf9, 0x7c, 0x06, 0x86, 0x26, 0xe0, 0xf8, 0x3c,
	0x5b, 0xa0, 0x45, 0x6c, 0x6f, 0x60, 0x7b, 0xa1, 0x5e, 0xd5, 0x35, 0x75, 0x66, 0x41, 0x38, 0x09,
	0x61, 0xcd, 0xca, 0xa0, 0x1c, 0x3a, 0xdf, 0x23, 0xf6, 0xfc, 0xe9, 0xef, 0x5b, 0x91, 0xa8, 0x1d,
	0xb6, 0x90, 0x14, 0xd6, 0xac, 0xc9, 0xe8, 0xe3, 0x2b, 0xa8, 0x38, 0xb4, 0x00, 0x83, 0x7b, 0x81,
	0xaf, 0x2b, 0xeb, 0x58, 0x18, 0x81, 0x78, 0xcd, 0x20, 0xb2, 0xa1, 0xac, 0x63, 0xae, 0x60, 0x80,
	0x2a, 0xe8, 0xb6, 0xbb, 0xd2, 0x28, 0x73, 0x2f, 0xcc, 0x95, 0xad, 0x22, 0xa9, 0xbb, 0x66, 0x10,
	0x8a, 0xe0, 0x1a, 0x7f, 0x1f, 0x86, 0x81, 0x80, 0x4a, 0x5b, 0xdb, 0x50, 0x1c, 0xdc, 0xd1, 0x19,
	0x61, 0x06, 0x7a, 0x89, 0xe6, 0x60, 0x59, 0x37, 0x55, 0xc5, 0x31, 0xed, 0x4c, 0x38, 0x87, 0xce,
	0x27, 0x4a, 0xb9, 0x42, 0xbb, 0x48, 0x58, 0xd4, 0x1c, 0x3c, 0xe7, 0xca, 0x89, 0xd1, 0x2f, 0x1a,
	0x08, 0x49, 0x09, 0xb2, 0x3b, 0x24, 0xbc, 0x0c, 0x49, 0xcd, 0x20, 0x5a, 0x0d, 0xcb, 0x06, 0x76,
	0x6e, 0x9b, 0xf6, 0x5a, 0x26, 0xca, 0x94, 0x1d, 0x6f, 0x51, 0x36, 0xbd, 0x6e, 0x39, 0x9b, 0x95,
	0x90, 0xd4, 0xe7, 0x4a, 0xbf, 0xee, 0x0a, 0x0b, 0xaf, 0x40, 0xca, 0xac, 0x3b, 0x01, 0x7c, 0x57,
	0x47, 0x7c, 0x92, 0x8b, 0x73, 0x05, 0x93, 0xb1, 0xc7, 0x57, 0x22, 0xc5, 0x7c, 0x49, 0x3c, 0x0b,
	0x49, 0xae, 0x40, 0x56, 0x57, 0x4d, 0x4d, 0xc5, 0x42, 0x6a, 0xab, 0x81, 0xa2, 0xdb, 0x0d, 0x14,
	0xd9, 0x69, 0xa0, 0xc8, 0x68, 0x7e, 0x6c, 0x36, 0x1a, 0x8f, 0xa4, 0xa3, 0x43, 0x7f, 0x0c, 0xc3,
	0x89, 0x36, 0x0b, 0xc6, 0x36, 0xe1, 0x64, 0xeb, 0x26, 0x34, 0x57, 0xfb, 0xbb, 0xb4, 0x64, 0xf1,
	0xc7, 0x57, 0xba, 0x8a, 0xf9, 0x52, 0xfe, 0xd2, 0xe1, 0x17, 0xed, 0x77, 0x08, 0x5e, 0xf0, 0x2f,
	0xda, 0x4d, 0xcd, 0x76, 0xea, 0x8a, 0xce, 0x35, 0x1e, 0x2a, 0xe6, 0x54, 0x48, 0x6d, 0xb8, 0xa8,
	0xa6, 0xdb, 0xee, 0x1a, 0x0e, 0xb5, 0x5d, 0xc3, 0xf9, 0xea, 0x4f, 0xb1, 0xea, 0x48, 0x78, 0x79,
	0x69, 0xd3, 0xc2, 0xe2, 0xe0, 0xfd, 0xbb, 0xad, 0xe8, 0x7b, 0x0f, 0x10, 0x92, 0x92, 0x1b, 0x01,
	0x47, 0xbc, 0x68, 0x18, 0xfa, 0x03, 0x82, 0x73, 0x07, 0xfa, 0x7b, 0xd0, 0x96, 0xab, 0x90, 0xb2,
	0x5c, 0xc9, 0xa7, 0xe9, 0x31, 0x57, 0xd9, 0xea, 0xf1, 0xbf, 0xc3, 0x41, 0x6a, 0xb8, 0x51, 0x5e,
	0xa4, 0x37, 0x74, 0x4f, 0xce, 0x42, 0x2f, 0x71, 0x6f, 0xfd, 0x6e, 0x26, 0xf8, 0xd8, 0x77, 0x2c,
	0x3a, 0x85, 0x97, 0xa0, 0x6f, 0x63, 0xad, 0x4c, 0x3c, 0x34, 0xc9, 0xc4, 0x3a, 0xc2, 0x7b, 0xa9,
	0x30, 0xc7, 0x92, 0x27, 0x09, 0xed, 0x07, 0x61, 0x38, 0xe9, 0x5f, 0xf8, 0x29, 0xd3, 0x20, 0x75,
	0xfd, 0xff, 0x72, 0xed, 0x9f, 0x64, 0xf9, 0x08, 0x9c, 0x0a, 0xac, 0x5e, 0x9d, 0x38, 0xe6, 0xfa,
	0xb4, 0x51, 0xb3, 0x4c, 0xcd, 0x70, 0x84, 0x79, 0x88, 0x63, 0x7e, 0xcf, 0x96, 0xee, 0x70, 0xb9,
	0x93, 0xba, 0x7f, 0xb7, 0x09, 0x63, 0x49, 0xd3, 0x7c, 0xe2, 0x45, 0xef, 0xfd, 0x04, 0xa4, 0xfd,
	0x56, 0x29, 0x4a, 0x58, 0x82, 0x1e, 0x8b, 0xd5, 0x53, 0x99, 0x53, 0x50, 0xa2, 0x34, 0x56, 0x38,
	0xa0, 0xb7, 0x29, 0xb4, 0x2b, 0xe3, 0x95, 0x90, 0x14, 0x77, 0x35, 0xcd, 0x58, 0xc2, 0x9b, 0x00,
	0x1e, 0x09, 0x68, 0x16, 0xdf, 0xdb, 0xf1, 0xa3, 0xa9, 0xf5, 0xd8, 0xb1, 0x12, 0x92, 0x7a, 0xb8,
	0xae, 0x19, 0x4b, 0xb8, 0x05, 0x09, 0xee, 0x2e, 0x0b, 0xac, 0x08, 0xd3, 0x3c, 0xf1, 0x04, 0x0e,
	0xd3, 0x20, 0xac, 0x84, 0x24, 0xb0, 0x76, 0x9b, 0x89, 0xb7, 0xa1, 0xb7, 0xc9, 0x5c, 0x54, 0xb9,
	0x1b, 0x45, 0xe5, 0x27, 0x71, 0x9b, 0x6b, 0x4f, 0x58, 0x3e, 0xce, 0xbc, 0x05, 0x09, 0x9a, 0xa1,
	0x3c, 0x09, 0x78, 0x8c, 0x1d, 0xcd, 0xf5, 0x5d, 0x7a, 0xa3, 0xae, 0xaf, 0x95, 0x89, 0x97, 0x70,
	0x2a, 0x24, 0x55, 0x96, 0x81, 0x4d, 0xf5, 0x6e, 0xfe, 0x4f, 0x1e, 0x49, 0x7d, 0x20, 0x89, 0x69,
	0xa2, 0xa8, 0x81, 0xac, 0x26, 0x30, 0xa8, 0xb2, 0x40, 0x95, 0xbd, 0xc0, 0x92, 0x4d, 0x16, 0x81,
	0x99, 0x6e, 0x66, 0xec, 0xa5, 0xa3, 0x19, 0x0b, 0xc4, 0x7c, 0x25, 0x24, 0x1d, 0x57, 0x03, 0x23,
	0x6e, 0x70, 0x0b, 0x06, 0xc4, 0x74, 0xa5, 0x8a, 0x75, 0x92, 0xe9, 0xc9, 0x45, 0xce, 0x27, 0x4a,
	0x2f, 0x1f, 0xc9, 0x08, 0x0d, 0xf1, 0xc2, 0x1c, 0xc3, 0x4f, 0x1b, 0x8e, 0xbd, 0x29, 0x9e, 0xd8,
	0x6a, 0x20, 0xf4, 0xc1, 0x03, 0x14, 0x85, 0x70, 0x08, 0xed, 0x7c, 0xfa, 0x51, 0x24, 0xf6, 0xcb,
	0x07, 0x28, 0x1c, 0x0f, 0x49, 0xdc, 0x8a, 0xf0, 0x33, 0x10, 0x36, 0x4c, 0xdd, 0x51, 0x6a, 0x86,
	0xec, 0x8b, 0x60, 0x60, 0x13, 0xbc, 0x76, 0x24, 0xdb, 0xfb, 0x54, 0x7b, 0x31, 0x4a, 0x5d, 0xa8,
	0x84, 0xa4, 0x34, 0xb7, 0xb3, 0xd0, 0x0c, 0xee, 0x7b, 0x08, 0x8e, 0xb7, 0x1a, 0x67, 0x91, 0x98,
	0x60, 0xe6, 0xaf, 0xff, 0xf7, 0xe6, 0x69, 0x20, 0x36, 0x1d, 0x10, 0x82, 0x0e, 0xb0, 0x20, 0xbd,
	0x0d, 0x29, 0x62, 0x6f, 0x8c, 0xfb, 0xe7, 0xde, 0xfb, 0x14, 0xe7, 0xde, 0xfd, 0xc9, 0x5d, 0xf4,
	0xc8, 0xb5, 0xde, 0x47, 0xed, 0xec, 0xce, 0xfd, 0x2e, 0xf4, 0x07, 0x0c, 0xb3, 0x79, 0xf7, 0x3d,
	0xd5, 0x79, 0xfb, 0x8c, 0xa7, 0x7c, 0xc6, 0xe9, 0xbb, 0x53, 0x97, 0x21, 0xe1, 0x0b, 0x13, 0x21,
	0x0d, 0x91, 0x35, 0xbc, 0xc9, 0xeb, 0x16, 0xbd, 0x15, 0x8e, 0x43, 0xd7, 0x86, 0xa2, 0xd7, 0x31,
	0x23, 0xb3, 0x1e, 0xc9, 0x7d, 0x98, 0x0c, 0x97, 0x11, 0xeb, 0x45, 0x2e, 0xe7, 0xcb, 0xe2, 0x45,
	0x88, 0x71, 0xd2, 0x7f, 0x61, 0xab, 0x81, 0x22, 0xdb, 0x0d, 0x14, 0xdf, 0x69, 0xa0, 0x63, 0xac,
	0x32, 0xe4, 0x47, 0xf3, 0x63, 0xf9, 0xf1, 0x7c, 0x71, 0x24, 0x5f, 0x2c, 0xe6, 0x27, 0xbe, 0x6c,
	0x20, 0x34, 0x1b, 0x8d, 0xc7, 0xd3, 0x3d, 0x43, 0xef, 0xc0, 0x99, 0x37, 0x2c, 0xe2, 0xd8, 0x58,
	0x59, 0x5f, 0xd2, 0xc9, 0x4d, 0xf7, 0xcc, 0xa5, 0x99, 0xc6, 0x94, 0x69, 0x38, 0xf8, 0x8e, 0x23,
	0xdc, 0x80, 0xa4, 0x63, 0xd3, 0xa3, 0x60, 0x4d, 0x56, 0x15, 0xb9, 0x6e, 0xeb, 0xbc, 0x4d, 0x3c,
	0xf7, 0x65, 0x03, 0x45, 0x7f, 0xf3, 0x00, 0xc5, 0xaa, 0x0a, 0xc1, 0xe3, 0xa3, 0xb4, 0x69, 0x8c,
	0xdb, 0x34, 0xe7, 0xef, 0xdd, 0x8b, 0xd3, 0x87, 0x2e, 0x3b, 0xf2, 0x1e, 0x42, 0x52, 0x2f, 0x07,
	0x4f, 0x29, 0x6f, 0xd8, 0x3a, 0x2f, 0x03, 0x1a, 0x1c, 0x5b, 0xd2, 0xc9, 0x14, 0xb6, 0x1d, 0x6d,
	0x59, 0x53, 0x15, 0x07, 0x13, 0x56, 0x08, 0xe6, 0x20, 0xed, 0xe8, 0x44, 0x56, 0x7d, 0xe3, 0x19,
	0xc4, 0x52, 0xee, 0x6c, 0xcb, 0xfa, 0x07, 0xd1, 0x14, 0x2c, 0xa5, 0x9c, 0xa0, 0x46, 0x6e, 0xea,
	0xcf, 0x31, 0x18, 0xf0, 0x4d, 0x6f, 0x41, 0xb1, 0x95, 0x75, 0xec, 0x60, 0x9b, 0x08, 0x17, 0x20,
	0x42, 0x0c, 0x8d, 0x4f, 0xe6, 0xc4, 0x97, 0x0d, 0x14, 0x6a, 0x9e, 0xd5, 0xb8, 0xfb, 0x99, 0x7b,
	0xe1, 0x4a, 0x48, 0xa2, 0x52, 0xc2, 0x14, 0x00, 0x73, 0xcd, 0x34, 0x96, 0xb5, 0x15, 0x5e, 0x4d,
	0xb2, 0x6d, 0x83, 0x82, 0xba, 0xc6, 0xa4, 0x78, 0x9f, 0xd0, 0xe3, 0x78, 0x03, 0xc2, 0x6d, 0x38,
	0x51, 0x27, 0x98, 0xf1, 0x23, 0xb6, 0xe5, 0x0d, 0x6c, 0xbb, 0xbe, 0x6a, 0xa6, 0xc1, 0x89, 0xfe,
	0x60, 0x66, 0xe9, 0xb4, 0x53, 0x15, 0x24, 0x0d, 0xd4, 0x09, 0xe6, 0x31, 0xe8, 0xd3, 0x2e, 0x2c,
	0x40, 0x86, 0xac, 0x69, 0x56, 0x5b, 0xcb, 0x9d, 0x1a, 0x0d, 0x24, 0x0d, 0x52, 0x5c, 0x1b, 0x8d,
	0xc3, 0xd0, 0x6d, 0x98, 0xf2, 0xba, 0xa3, 0x77, 0x6e, 0xf3, 0xc2, 0x52, 0xcc, 0x30, 0x5f, 0x73,
	0x74, 0x22, 0xbc, 0x09, 0x71, 0x3a, 0x77, 0x86, 0x70, 0xb9, 0x7a, 0xf4, 0xc0, 0xc9, 0xb6, 0x89,
	0x11, 0x91, 0x76, 0x32, 0xa8, 0x12, 0x96, 0xba, 0xeb, 0x04, 0x33, 0xc5, 0xb3, 0x30, 0x48, 0x15,
	0xaf, 0x9a, 0xc4, 0x91, 0x57, 0xb1, 0x52, 0xc3, 0xb6, 0xac, 0x10, 0x99, 0xee, 0x6c, 0xa2, 0x63,
	0x0b, 0x25, 0xd4, 0x09, 0xae, 0x98, 0xc4, 0xa9, 0x30, 0xcc, 0x55, 0xb2, 0x68, 0x68, 0xc2, 0x04,
	0x24, 0x6a, 0x1a, 0x51, 0xaa, 0x3a, 0x66, 0x0a, 0x7a, 0x3b, 0x2a, 0x00, 0x2e, 0x4a, 0x81, 0xd7,
	0xe1, 0x18, 0x65, 0x32, 0x6c, 0xdb, 0x8a, 0xbc, 0x9b, 0x2c, 0x9c, 0x3c, 0xf6, 0x5b, 0xdb, 0x7e,
	0x0f, 0xb2, 0xe4, 0x65, 0xc8, 0x64, 0xe2, 0xf1, 0x95, 0x78, 0x71, 0x24, 0x5f, 0xca, 0x97, 0xf3,
	0x97, 0xc5, 0xb3, 0x00, 0xc4, 0xd0, 0xbc, 0x36, 0xee, 0xd8, 0x56, 0x03, 0x25, 0xb6, 0x1b, 0x08,
	0x76, 0x1a, 0xa8, 0xbb, 0x58, 0xcc, 0x17, 0xf3, 0xc5, 0x92, 0x58, 0x80, 0x8c, 0xb7, 0xa7, 0xcd,
	0x68, 0xf0, 0x00, 0xc2, 0x56, 0x03, 0xf5, 0x71, 0x0a, 0x88, 0x15, 0x59, 0xfe, 0x8b, 0x59, 0x48,
	0xac, 0xb3, 0x38, 0xde, 0x6d, 0x0d, 0x63, 0xdb, 0x0d, 0xd4, 0x43, 0x5b, 0xc3, 0xf1, 0xfc, 0xc4,
	0x6c, 0x34, 0x0e, 0xe9, 0x84, 0xcb, 0x0b, 0xb3, 0xd1, 0x78, 0x4f, 0x1a, 0x86, 0xfe, 0x89, 0xbc,
	0x53, 0xf7, 0x82, 0x69, 0xea, 0xd7, 0xf0, 0xb2, 0x52, 0xd7, 0x9d, 0xc5, 0x7a, 0x95, 0x60, 0x47,
	0x78, 0x1f, 0x41, 0xb2, 0xe6, 0x8e, 0xc8, 0x84, 0x0d, 0x65, 0x62, 0x2c, 0x5d, 0x6f, 0x1c, 0x92,
	0x2e, 0xf7, 0xa8, 0x2c, 0x04, 0x9e, 0xdc, 0x7a, 0xf9, 0x9c, 0x57, 0x2b, 0x59, 0x56, 0x7e, 0x80,
	0xc2, 0xe9, 0x9c, 0xbf, 0x6a, 0xf6, 0xd5, 0xfc, 0x90, 0x53, 0x3f, 0x00, 0x61, 0xaf, 0x8e, 0xa3,
	0x90, 0xe9, 0xd0, 0x47, 0x11, 0xe8, 0xdf, 0x75, 0xcf, 0xd5, 0x42, 0x04, 0x1d, 0xd2, 0xcd, 0x96,
	0xc3, 0x9d, 0xab, 0xc7, 0x4d, 0xc5, 0x96, 0xc9, 0xf2, 0xef, 0x66, 0x05, 0xaf, 0x8b, 0x70, 0x35,
	0x2c, 0x62, 0x1d, 0xab, 0x8e, 0xc9, 0xda, 0x01, 0x31, 0xe9, 0xb1, 0x4d, 0xd7, 0xaf, 0xe9, 0x74,
	0xa4, 0x14, 0x0e, 0xc8, 0x12, 0xe1, 0x32, 0xf4, 0x2a, 0xc6, 0x66, 0xb3, 0xc9, 0xe1, 0x4d, 0xe6,
	0x7e, 0x91, 0x98, 0x50, 0x8c, 0xcd, 0x66, 0xe7, 0xae, 0xec, 0xd9, 0x93, 0xa3, 0x35, 0x91, 0x7b,
	0xf6, 0xa4, 0xd2, 0xba, 0xc6, 0xd4, 0xbb, 0x65, 0x45, 0xd3, 0x65, 0x1b, 0xbf, 0x53, 0xc7, 0xc4,
	0x39, 0xe0, 0xac, 0x92, 0xa0, 0xb2, 0x92, 0x2b, 0x3a, 0x39, 0xfe, 0x61, 0x03, 0x95, 0xe0, 0x18,
	0x24, 0x5d, 0x55, 0xb9, 0x29, 0x5d, 0x21, 0x04, 0x13, 0x01, 0x15, 0xe1, 0x34, 0x0c, 0xf2, 0xc1,
	0xeb, 0x8a, 0xae, 0x57, 0x15, 0x75, 0x2d, 0xb7, 0x60, 0xea, 0x9a, 0xba, 0x29, 0xa0, 0x92, 0x78,
	0x01, 0x06, 0x97, 0xf9, 0xa8, 0x6c, 0xb1, 0x51, 0x2f, 0x86, 0xfb, 0x79, 0xa5, 0x0b, 0xef, 0x34,
	0x50, 0x17, 0x8b, 0xf2, 0xd9, 0x68, 0x3c, 0x9c, 0x8e, 0x0c, 0xfd, 0xad, 0xc7, 0x3b, 0x1f, 0xd2,
	0x29, 0x5d, 0xad, 0x6d, 0x28, 0x86, 0x8a, 0x6b, 0xf3, 0xee, 0x07, 0x43, 0x61, 0x16, 0x04, 0xd5,
	0x34, 0x0c, 0xac, 0xb2, 0x94, 0x71, 0xb4, 0x75, 0x6c, 0xd6, 0xdd, 0xa3, 0x4e, 0x9f, 0x78, 0xfa,
	0x61, 0x03, 0x45, 0x4b, 0x23, 0x23, 0x23, 0x74, 0x9b, 0x7e, 0xf1, 0xc0, 0xdd, 0xaa, 0xd8, 0x8b,
	0xd1, 0xcc, 0xd6, 0x5f, 0xbf, 0x27, 0xf5, 0xef, 0xc2, 0x96, 0x5c, 0x94, 0x30, 0x03, 0xfd, 0xab,
	0x8e, 0x63, 0xc9, 0x5a, 0x4d, 0xc7, 0x4d, 0x55, 0x61, 0xa6, 0xea, 0xb9, 0x87, 0x0d, 0x14, 0xbb,
	0x34, 0x32, 0xb2, 0x8f, 0xb2, 0x14, 0xc5, 0xcd, 0xd4, 0x74, 0xec, 0xa9, 0x5a, 0x82, 0x13, 0x1e,
	0x03, 0xa9, 0x9a, 0xad, 0xd6, 0x35, 0x47, 0xae, 0xda, 0x58, 0x59, 0xc3, 0x76, 0xa7, 0x13, 0x65,
	0xb3, 0x9f, 0x1a, 0xe0, 0xe0, 0x29, 0x17, 0x2b, 0xba, 0x50, 0xe1, 0x26, 0xa4, 0x5a, 0xb5, 0xb9,
	0x7b, 0x76, 0x6e, 0x9f, 0xd8, 0x0d, 0xe2, 0x9b, 0xea, 0x93, 0x6a, 0x50, 0xef, 0x5b, 0x70, 0xd2,
	0xf3, 0xd6, 0xac, 0x3b, 0xba, 0x86, 0x6d, 0xb9, 0x86, 0x1d, 0x77, 0x71, 0x38, 0xcb, 0x77, 0xf2,
	0x17, 0x49, 0xde, 0x64, 0xe7, 0x5d, 0xf4, 0x35, 0x0f, 0x2c, 0xfc, 0x04, 0xfa, 0xf7, 0x6a, 0x8c,
	0x33, 0x8d, 0x17, 0xf6, 0xf1, 0xb9, 0x55, 0x87, 0x5b, 0x2e, 0xb8, 0xa1, 0xb4, 0xd9, 0x6a, 0x61,
	0x16, 0x04, 0xc3, 0x94, 0x2d, 0xc5, 0xd0, 0x54, 0xd9, 0x59, 0xb5, 0x31, 0x59, 0x35, 0xf5, 0x1a,
	0xef, 0xb2, 0x3b, 0x39, 0x1d, 0x96, 0xd2, 0x86, 0xb9, 0x40, 0x61, 0x4b, 0x1e, 0x4a, 0xb8, 0x02,
	0xa9, 0x56, 0x45, 0x09, 0xb6, 0xfd, 0x94, 0xb4, 0xd1, 0xc3, 0x06, 0x0a, 0x97, 0xc6, 0x58, 0x73,
	0xf1, 0x62, 0x38, 0x53, 0xab, 0x84, 0xa5, 0xa4, 0x15, 0xc4, 0xbf, 0x02, 0xa9, 0x66, 0xdd, 0xe1,
	0xdc, 0xd2, 0xa9, 0x74, 0x44, 0xa4, 0xa4, 0x57, 0x7b, 0x38, 0x5f, 0x28, 0x90, 0xc4, 0x46, 0x00,
	0x9f, 0x64, 0xf8, 0xd2, 0x11, 0x92, 0x9e, 0xeb, 0xe2, 0x15, 0x36, 0x22, 0xf5, 0xb9, 0x1a, 0x3d,
	0x13, 0xb7, 0xa0, 0x8f, 0x06, 0x6b, 0xc9, 0xfb, 0xe4, 0x9e, 0x49, 0x75, 0xdc, 0x8d, 0x0a, 0x95,
	0x5d, 0xb0, 0x4d, 0xc7, 0x54, 0x4d, 0x9d, 0x27, 0x9d, 0x18, 0xa7, 0xcb, 0x41, 0xf3, 0x40, 0xea,
	0x65, 0xba, 0xf8, 0xf8, 0xa4, 0xfc, 0x61, 0x03, 0xfd, 0x08, 0x9e, 0x07, 0x61, 0xfa, 0x8e, 0x8a,
	0xd9, 0x58, 0xae, 0xa2, 0x18, 0x35, 0x5d, 0x33, 0x56, 0x84, 0x1e, 0xb7, 0x7b, 0x1d, 0xcf, 0x5f,
	0x86, 0xd3, 0xde, 0x17, 0xf3, 0x9c, 0xdb, 0x91, 0xe4, 0x3c, 0xdf, 0xc2, 0xc5, 0x12, 0x7d, 0xf9,
	0x9a, 0x46, 0x54, 0xac, 0xeb, 0x8a, 0x81, 0xcd, 0x3a, 0xc9, 0x79, 0x99, 0x1e, 0x2e, 0x8e, 0x89,
	0x17, 0x61, 0xb0, 0x25, 0x01, 0xfc, 0x65, 0x35, 0xfa, 0x71, 0x03, 0x21, 0xdf, 0x17, 0x12, 0x71,
	0x18, 0x32, 0x7b, 0xa2, 0xcf, 0x0f, 0xe8, 0xe6, 0x80, 0x18, 0x05, 0x4c, 0xb0, 0xc6, 0xfb, 0x78,
	0x4b, 0x00, 0xc8, 0x0e, 0xed, 0x68, 0x07, 0xb6, 0x1a, 0x08, 0xb8, 0x30, 0x2d, 0xb2, 0x5d, 0xac,
	0xfd, 0x16, 0x87, 0xa0, 0xcf, 0xdd, 0x27, 0x3f, 0x89, 0xd1, 0x5a, 0xdd, 0xcb, 0x64, 0x2e, 0xe5,
	0x8b, 0xa3, 0xee, 0x57, 0x9a, 0xd9, 0x68, 0x3c, 0x96, 0xee, 0x76, 0x4b, 0xf1, 0x6c, 0x34, 0xde,
	0x9b, 0xee, 0x1b, 0x7a, 0x04, 0x90, 0x7c, 0x55, 0x37, 0xab, 0x8a, 0xbe, 0x68, 0x61, 0x95, 0xf5,
	0xcd, 0x3f, 0x87, 0x24, 0xdf, 0x52, 0xb7, 0x19, 0xd8, 0xaf, 0x32, 0x1d, 0x7c, 0x50, 0x15, 0x87,
	0x68, 0xcf, 0xba, 0x5b, 0x99, 0xbc, 0xbb, 0x78, 0x73, 0x2c, 0x83, 0xa4, 0x3e, 0xd3, 0x87, 0x22,
	0xc2, 0x45, 0x88, 0x19, 0xa6, 0x4c, 0xfb, 0xba, 0x70, 0xc7, 0x3a, 0xd0, 0x65, 0x98, 0x4b, 0x3a,
	0x11, 0x7e, 0x08, 0xb4, 0x75, 0x63, 0xf2, 0x91, 0x43, 0x7e, 0x94, 0x69, 0xdb, 0xbf, 0x57, 0x42,
	0x52, 0xac, 0x4e, 0x30, 0x55, 0xf9, 0x2e, 0x82, 0xa8, 0x65, 0xda, 0x6e, 0x21, 0xea, 0x13, 0x8d,
	0x87, 0x74, 0x1b, 0x47, 0x2f, 0xed, 0x34, 0xd0, 0x0d, 0x08, 0x97, 0x47, 0x20, 0x5a, 0x1e, 0x61,
	0xd7, 0x32, 0xbd, 0x96, 0x46, 0xc6, 0x4a, 0xf4, 0x5a, 0x76, 0xaf, 0xe3, 0xf4, 0x7a, 0x79, 0x0c,
	0x28, 0x80, 0xbd, 0x64, 0xd7, 0xb2, 0x7b, 0x9d, 0x60, 0x2f, 0xc7, 0x21, 0x5a, 0x1e, 0x1d, 0xbd,
	0xd4, 0x3c, 0x21, 0xbc, 0x18, 0x3e, 0x8f, 0x3c, 0x12, 0xff, 0xfa, 0xeb, 0x88, 0xc4, 0x6c, 0x0b,
	0x3f, 0x86, 0x84, 0xef, 0xe7, 0x30, 0xde, 0x08, 0x1d, 0xe6, 0xa3, 0x59, 0xe6, 0xfe, 0x5d, 0x3f,
	0xb2, 0xb9, 0xf8, 0x51, 0xc9, 0x3f, 0x2c, 0xdc, 0x81, 0x41, 0xdd, 0x54, 0x6a, 0x55, 0x45, 0xa7,
	0x75, 0xcc, 0x96, 0x15, 0x7d, 0xc5, 0xb4, 0x35, 0x67, 0x75, 0x9d, 0x11, 0x6d, 0xb2, 0x94, 0xdf,
	0x27, 0x11, 0xe7, 0x7c, 0xa0, 0xab, 0x1e, 0x46, 0x3c, 0xf6, 0xb0, 0x81, 0x12, 0x73, 0xa2, 0x3c,
	0x7f, 0x73, 0x5a, 0x92, 0x66, 0xae, 0x4d, 0xb3, 0xa4, 0x1c, 0xd0, 0xdb, 0xc9, 0x0a, 0x1b, 0x20,
	0xec, 0xb6, 0x3e, 0xac, 0x8d, 0xf1, 0xc8, 0x38, 0x59, 0x2a, 0x1c, 0xd4, 0xfc, 0x78, 0xf2, 0x6e,
	0x29, 0x17, 0x4f, 0x3c, 0x6c, 0xa0, 0xd4, 0xdc, 0xfc, 0xd4, 0xd5, 0x39, 0x79, 0x41, 0x9a, 0xbe,
	0x3e, 0x2d, 0x49, 0xd3, 0xd7, 0x98, 0xed, 0x7e, 0xdc, 0x8a, 0x10, 0xe6, 0x61, 0x80, 0x28, 0xeb,
	0x98, 0xb6, 0xf3, 0x4d, 0xfb, 0x6c, 0x9b, 0xe1, 0x10, 0x95, 0x45, 0xa0, 0xd0, 0xab, 0xc4, 0xf3,
	0x63, 0x81, 0x6e, 0xd1, 0x7b, 0x08, 0xfa, 0xdd, 0x25, 0x95, 0xd9, 0x9a, 0xba, 0xda, 0x5c, 0xa6,
	0xae, 0x52, 0xdc, 0x37, 0x14, 0x31, 0x3c, 0x50, 0x2a, 0x48, 0x4a, 0xb9, 0xe6, 0xa7, 0xa8, 0x75,
	0xe6, 0xd2, 0x1a, 0xa4, 0x15, 0xde, 0x99, 0x34, 0x89, 0xb5, 0xf7, 0x48, 0xdf, 0xcd, 0xda, 0x34,
	0x37, 0x2e, 0x85, 0x4b, 0x29, 0xa5, 0xa5, 0xe7, 0xb9, 0x05, 0x7d, 0xec, 0x47, 0x53, 0xcd, 0x70,
	0xb0, 0x6d, 0x28, 0x7a, 0xe6, 0x51, 0xf7, 0xa1, 0x3f, 0xed, 0xa6, 0xef, 0xdf, 0x0d, 0x82, 0xa5,
	0x5e, 0xfa, 0x38, 0xc3, 0x9f, 0x26, 0x9d, 0x0f, 0x1b, 0xc8, 0x82, 0x1c, 0x1c, 0x13, 0x15, 0xa2,
	0xa9, 0x39, 0xf7, 0xc4, 0x5b, 0xb7, 0xdd, 0xd3, 0x62, 0x4f, 0x31, 0x3f, 0x96, 0xbf, 0x9c, 0x9f,
	0xc8, 0x97, 0xe1, 0x0c, 0x9c, 0x98, 0xd3, 0x88, 0x93, 0x33, 0x97, 0x73, 0x15, 0xb6, 0x16, 0x39,
	0xb6, 0x18, 0xe7, 0xc9, 0xf7, 0x05, 0x34, 0x0e, 0x83, 0xd0, 0xbf, 0x34, 0xb7, 0xd8, 0x82, 0x46,
	0xa3, 0x30, 0x08, 0x69, 0x6f, 0x8e, 0x3e, 0x5e, 0x2f, 0x89, 0xcf, 0xf1, 0x63, 0xf9, 0xee, 0x71,
	0x26, 0xbc, 0xdd, 0x40, 0x51, 0x4a, 0xcb, 0xa5, 0xfc, 0x25, 0xb1, 0x08, 0x99, 0x3d, 0xfb, 0xed,
	0x09, 0xb7, 0xa7, 0xe6, 0xd9, 0x68, 0x3c, 0x9a, 0xee, 0xe2, 0x67, 0x9f, 0x7f, 0xc5, 0x20, 0x39,
	0x65, 0x63, 0xc5, 0xc1, 0x4d, 0xaa, 0x7d, 0xeb, 0xa9, 0x51, 0xed, 0xff, 0x1e, 0x8d, 0x0a, 0x7e,
	0x16, 0xe5, 0xac, 0xb6, 0xf4, 0xa4, 0xac, 0x96, 0x0c, 0xb2, 0x5a, 0x90, 0xcb, 0xd4, 0xa7, 0xc9,
	0x65, 0xfb, 0xd1, 0xd6, 0xdb, 0x4f, 0x8f, 0xb6, 0xda, 0xb1, 0xd3, 0xcc, 0x13, 0xb0, 0xd3, 0x3e,
	0xbc, 0x94, 0xdf, 0x97, 0x96, 0xda, 0x51, 0x06, 0xfe, 0x26, 0x28, 0x63, 0x0f, 0x59, 0x4c, 0xf6,
	0xff, 0xe5, 0x4a, 0x4b, 0x9f, 0x21, 0x9e, 0x09, 0x64, 0x5b, 0xf2, 0xdd, 0xaf, 0x90, 0xef, 0x59,
	0x2c, 0x77, 0x48, 0xb6, 0x33, 0xef, 0x7e, 0x85, 0xf6, 0x7d, 0x1b, 0xc8, 0xb9, 0xc7, 0x31, 0x48,
	0x49, 0xd8, 0xd2, 0x15, 0xf5, 0x59, 0xd2, 0x3d, 0x4b, 0xba, 0x67, 0x49, 0xf7, 0xad, 0x24, 0xdd,
	0x3f, 0x62, 0x90, 0x78, 0x15, 0x3b, 0xcf, 0x12, 0xee, 0x59, 0xc2, 0x3d, 0x4b, 0xb8, 0x6f, 0x21,
	0xe1, 0xc4, 0x5f, 0xa1, 0xed, 0xcf, 0xb2, 0xa1, 0x4f, 0x3e, 0xcb, 0x86, 0xbe, 0xf8, 0x2c, 0x8b,
	0xee, 0xed, 0x64, 0xd1, 0x6f, 0x77, 0xb2, 0xe8, 0xe3, 0x9d, 0x2c, 0xda, 0xde, 0xc9, 0xa2, 0x4f,
	0x76, 0xb2, 0xe8, 0xd3, 0x9d, 0x2c, 0x7a, 0xb4, 0x93, 0x0d, 0x7d, 0xb1, 0x93, 0x45, 0xef, 0x7d,
	0x9e, 0x0d, 0x6d, 0x7d, 0x9e, 0x45, 0xb7, 0xde, 0x58, 0x31, 0xad, 0xb5, 0x95, 0x82, 0xf7, 0xbb,
	0x41, 0xa1, 0x4e, 0x86, 0xd9, 0xcd, 0xb2, 0x69, 0xaf, 0x5f, 0xb4, 0x6c, 0x73, 0x43, 0xab, 0x61,
	0xfb, 0xa2, 0xf7, 0x7a, 0xd8, 0xaa, 0xae, 0x98, 0xc3, 0xf8, 0x8e, 0xc3, 0xff, 0x0e, 0xb9, 0xdf,
	0x9f, 0x4a, 0xab, 0x31, 0xf6, 0xe7, 0xc8, 0x4b, 0xff, 0x09, 0x00, 0x00, 0xff, 0xff, 0xa5, 0x43,
	0x7c, 0x7b, 0x7e, 0x2a, 0x00, 0x00,
}
