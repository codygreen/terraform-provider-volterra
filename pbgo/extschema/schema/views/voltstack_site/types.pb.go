// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ves.io/schema/views/voltstack_site/types.proto

package voltstack_site

import proto "github.com/gogo/protobuf/proto"
import golang_proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"
import ves_io_schema_fleet "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/fleet"
import ves_io_schema_network_firewall "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/network_firewall"
import ves_io_schema_network_interface "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/network_interface"
import _ "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
import ves_io_schema_site "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/site"
import ves_io_schema4 "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
import _ "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
import _ "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
import ves_io_schema_views1 "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/views"
import ves_io_schema_views "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/views"
import ves_io_schema_virtual_network "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/virtual_network"

import strings "strings"
import reflect "reflect"
import sortkeys "github.com/gogo/protobuf/sortkeys"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Interface
//
// x-displayName: "Interface"
// Interface definition
type Interface struct {
	// Interface Description
	//
	// x-displayName: "Interface Description"
	// Description for this Interface
	Description string `protobuf:"bytes,1,opt,name=description,proto3" json:"description,omitempty"`
	// Interface labels
	//
	// x-displayName: "Interface Labels"
	// Add Labels for this Interface, these labels can be used in network policy
	Labels map[string]string `protobuf:"bytes,2,rep,name=labels" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Interface Config Type
	//
	// x-displayName: "Interface Config Type"
	// x-required
	// Select the interface configuration type
	//
	// Types that are valid to be assigned to InterfaceChoice:
	//	*Interface_EthernetInterface
	//	*Interface_DedicatedInterface
	//	*Interface_DedicatedManagementInterface
	//	*Interface_TunnelInterface
	InterfaceChoice isInterface_InterfaceChoice `protobuf_oneof:"interface_choice"`
}

func (m *Interface) Reset()                    { *m = Interface{} }
func (*Interface) ProtoMessage()               {}
func (*Interface) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{0} }

type isInterface_InterfaceChoice interface {
	isInterface_InterfaceChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type Interface_EthernetInterface struct {
	EthernetInterface *ves_io_schema_network_interface.EthernetInterfaceType `protobuf:"bytes,5,opt,name=ethernet_interface,json=ethernetInterface,oneof"`
}
type Interface_DedicatedInterface struct {
	DedicatedInterface *ves_io_schema_network_interface.DedicatedInterfaceType `protobuf:"bytes,6,opt,name=dedicated_interface,json=dedicatedInterface,oneof"`
}
type Interface_DedicatedManagementInterface struct {
	DedicatedManagementInterface *ves_io_schema_network_interface.DedicatedManagementInterfaceType `protobuf:"bytes,7,opt,name=dedicated_management_interface,json=dedicatedManagementInterface,oneof"`
}
type Interface_TunnelInterface struct {
	TunnelInterface *ves_io_schema_network_interface.TunnelInterfaceType `protobuf:"bytes,8,opt,name=tunnel_interface,json=tunnelInterface,oneof"`
}

func (*Interface_EthernetInterface) isInterface_InterfaceChoice()            {}
func (*Interface_DedicatedInterface) isInterface_InterfaceChoice()           {}
func (*Interface_DedicatedManagementInterface) isInterface_InterfaceChoice() {}
func (*Interface_TunnelInterface) isInterface_InterfaceChoice()              {}

func (m *Interface) GetInterfaceChoice() isInterface_InterfaceChoice {
	if m != nil {
		return m.InterfaceChoice
	}
	return nil
}

func (m *Interface) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Interface) GetLabels() map[string]string {
	if m != nil {
		return m.Labels
	}
	return nil
}

func (m *Interface) GetEthernetInterface() *ves_io_schema_network_interface.EthernetInterfaceType {
	if x, ok := m.GetInterfaceChoice().(*Interface_EthernetInterface); ok {
		return x.EthernetInterface
	}
	return nil
}

func (m *Interface) GetDedicatedInterface() *ves_io_schema_network_interface.DedicatedInterfaceType {
	if x, ok := m.GetInterfaceChoice().(*Interface_DedicatedInterface); ok {
		return x.DedicatedInterface
	}
	return nil
}

func (m *Interface) GetDedicatedManagementInterface() *ves_io_schema_network_interface.DedicatedManagementInterfaceType {
	if x, ok := m.GetInterfaceChoice().(*Interface_DedicatedManagementInterface); ok {
		return x.DedicatedManagementInterface
	}
	return nil
}

func (m *Interface) GetTunnelInterface() *ves_io_schema_network_interface.TunnelInterfaceType {
	if x, ok := m.GetInterfaceChoice().(*Interface_TunnelInterface); ok {
		return x.TunnelInterface
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Interface) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Interface_OneofMarshaler, _Interface_OneofUnmarshaler, _Interface_OneofSizer, []interface{}{
		(*Interface_EthernetInterface)(nil),
		(*Interface_DedicatedInterface)(nil),
		(*Interface_DedicatedManagementInterface)(nil),
		(*Interface_TunnelInterface)(nil),
	}
}

func _Interface_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Interface)
	// interface_choice
	switch x := m.InterfaceChoice.(type) {
	case *Interface_EthernetInterface:
		_ = b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.EthernetInterface); err != nil {
			return err
		}
	case *Interface_DedicatedInterface:
		_ = b.EncodeVarint(6<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.DedicatedInterface); err != nil {
			return err
		}
	case *Interface_DedicatedManagementInterface:
		_ = b.EncodeVarint(7<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.DedicatedManagementInterface); err != nil {
			return err
		}
	case *Interface_TunnelInterface:
		_ = b.EncodeVarint(8<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.TunnelInterface); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("Interface.InterfaceChoice has unexpected type %T", x)
	}
	return nil
}

func _Interface_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Interface)
	switch tag {
	case 5: // interface_choice.ethernet_interface
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema_network_interface.EthernetInterfaceType)
		err := b.DecodeMessage(msg)
		m.InterfaceChoice = &Interface_EthernetInterface{msg}
		return true, err
	case 6: // interface_choice.dedicated_interface
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema_network_interface.DedicatedInterfaceType)
		err := b.DecodeMessage(msg)
		m.InterfaceChoice = &Interface_DedicatedInterface{msg}
		return true, err
	case 7: // interface_choice.dedicated_management_interface
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema_network_interface.DedicatedManagementInterfaceType)
		err := b.DecodeMessage(msg)
		m.InterfaceChoice = &Interface_DedicatedManagementInterface{msg}
		return true, err
	case 8: // interface_choice.tunnel_interface
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema_network_interface.TunnelInterfaceType)
		err := b.DecodeMessage(msg)
		m.InterfaceChoice = &Interface_TunnelInterface{msg}
		return true, err
	default:
		return false, nil
	}
}

func _Interface_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Interface)
	// interface_choice
	switch x := m.InterfaceChoice.(type) {
	case *Interface_EthernetInterface:
		s := proto.Size(x.EthernetInterface)
		n += proto.SizeVarint(5<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Interface_DedicatedInterface:
		s := proto.Size(x.DedicatedInterface)
		n += proto.SizeVarint(6<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Interface_DedicatedManagementInterface:
		s := proto.Size(x.DedicatedManagementInterface)
		n += proto.SizeVarint(7<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Interface_TunnelInterface:
		s := proto.Size(x.TunnelInterface)
		n += proto.SizeVarint(8<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// List of Interfaces
//
// x-displayName: "List of Interface"
// Configure network interfaces for this voltstack
type InterfaceListType struct {
	// List of Interfaces
	//
	// x-displayName: "List of Interface"
	// x-required
	// Configure network interfaces for this voltstack
	Interfaces []*Interface `protobuf:"bytes,1,rep,name=interfaces" json:"interfaces,omitempty"`
}

func (m *InterfaceListType) Reset()                    { *m = InterfaceListType{} }
func (*InterfaceListType) ProtoMessage()               {}
func (*InterfaceListType) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{1} }

func (m *InterfaceListType) GetInterfaces() []*Interface {
	if m != nil {
		return m.Interfaces
	}
	return nil
}

// Storage Interfaces
//
// x-displayName: "Storage Interface"
// Configure storage interface for this voltstack
type StorageInterfaceType struct {
	// Interface Description
	//
	// x-displayName: "Interface Description"
	// Description for this Interface
	Description string `protobuf:"bytes,1,opt,name=description,proto3" json:"description,omitempty"`
	// Interface labels
	//
	// x-displayName: "Interface Labels"
	// Add Labels for this Interface, these labels can be used in network policy
	Labels map[string]string `protobuf:"bytes,2,rep,name=labels" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	//  Interface
	//
	// x-displayName: "Interface"
	// x-required
	// Configure storage interface for this voltstack
	StorageInterface *ves_io_schema_network_interface.EthernetInterfaceType `protobuf:"bytes,3,opt,name=storage_interface,json=storageInterface" json:"storage_interface,omitempty"`
}

func (m *StorageInterfaceType) Reset()                    { *m = StorageInterfaceType{} }
func (*StorageInterfaceType) ProtoMessage()               {}
func (*StorageInterfaceType) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{2} }

func (m *StorageInterfaceType) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *StorageInterfaceType) GetLabels() map[string]string {
	if m != nil {
		return m.Labels
	}
	return nil
}

func (m *StorageInterfaceType) GetStorageInterface() *ves_io_schema_network_interface.EthernetInterfaceType {
	if m != nil {
		return m.StorageInterface
	}
	return nil
}

// List of Interfaces
//
// x-displayName: "List of Interface"
// Configure storage interfaces for this voltstack
type StorageInterfaceListType struct {
	// List of Interfaces
	//
	// x-displayName: "List of Interface"
	// x-required
	// Configure storage interfaces for this voltstack
	StorageInterfaces []*StorageInterfaceType `protobuf:"bytes,1,rep,name=storage_interfaces,json=storageInterfaces" json:"storage_interfaces,omitempty"`
}

func (m *StorageInterfaceListType) Reset()                    { *m = StorageInterfaceListType{} }
func (*StorageInterfaceListType) ProtoMessage()               {}
func (*StorageInterfaceListType) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{3} }

func (m *StorageInterfaceListType) GetStorageInterfaces() []*StorageInterfaceType {
	if m != nil {
		return m.StorageInterfaces
	}
	return nil
}

// Static Routes List
//
// x-displayName: "Static Routes List"
// List of static routes
type StaticRoutesListType struct {
	// static_routes
	//
	// x-displayName: "Static Routes"
	// x-required
	// List of static routes
	StaticRoutes []*ves_io_schema_virtual_network.StaticRouteViewType `protobuf:"bytes,1,rep,name=static_routes,json=staticRoutes" json:"static_routes,omitempty"`
}

func (m *StaticRoutesListType) Reset()                    { *m = StaticRoutesListType{} }
func (*StaticRoutesListType) ProtoMessage()               {}
func (*StaticRoutesListType) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{4} }

func (m *StaticRoutesListType) GetStaticRoutes() []*ves_io_schema_virtual_network.StaticRouteViewType {
	if m != nil {
		return m.StaticRoutes
	}
	return nil
}

// Virtual Network Configuration
//
// x-displayName: "Site Local Network Configuration"
// Site local network configuration
type VnConfiguration struct {
	// Network labels
	//
	// x-displayName: "Network Labels"
	// Add Labels for this network, these labels can be used in network policy
	Labels map[string]string `protobuf:"bytes,1,rep,name=labels" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Manage Static Routes
	//
	// x-displayName: "Manage Static Routes"
	// x-required
	// Add static routes to network. Used to reach indirectly connected subnets.
	//
	// Types that are valid to be assigned to StaticRouteChoice:
	//	*VnConfiguration_NoStaticRoutes
	//	*VnConfiguration_StaticRoutes
	StaticRouteChoice isVnConfiguration_StaticRouteChoice `protobuf_oneof:"static_route_choice"`
	// Select DC Cluster Group
	//
	// x-displayName: "Select DC Cluster Group"
	// x-required
	// Is this site member of a dc cluster group via this network
	//
	// Types that are valid to be assigned to DcClusterGroupChoice:
	//	*VnConfiguration_NoDcClusterGroup
	//	*VnConfiguration_DcClusterGroup
	DcClusterGroupChoice isVnConfiguration_DcClusterGroupChoice `protobuf_oneof:"dc_cluster_group_choice"`
}

func (m *VnConfiguration) Reset()                    { *m = VnConfiguration{} }
func (*VnConfiguration) ProtoMessage()               {}
func (*VnConfiguration) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{5} }

type isVnConfiguration_StaticRouteChoice interface {
	isVnConfiguration_StaticRouteChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isVnConfiguration_DcClusterGroupChoice interface {
	isVnConfiguration_DcClusterGroupChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type VnConfiguration_NoStaticRoutes struct {
	NoStaticRoutes *ves_io_schema4.Empty `protobuf:"bytes,3,opt,name=no_static_routes,json=noStaticRoutes,oneof"`
}
type VnConfiguration_StaticRoutes struct {
	StaticRoutes *StaticRoutesListType `protobuf:"bytes,4,opt,name=static_routes,json=staticRoutes,oneof"`
}
type VnConfiguration_NoDcClusterGroup struct {
	NoDcClusterGroup *ves_io_schema4.Empty `protobuf:"bytes,6,opt,name=no_dc_cluster_group,json=noDcClusterGroup,oneof"`
}
type VnConfiguration_DcClusterGroup struct {
	DcClusterGroup *ves_io_schema_views.ObjectRefType `protobuf:"bytes,7,opt,name=dc_cluster_group,json=dcClusterGroup,oneof"`
}

func (*VnConfiguration_NoStaticRoutes) isVnConfiguration_StaticRouteChoice()      {}
func (*VnConfiguration_StaticRoutes) isVnConfiguration_StaticRouteChoice()        {}
func (*VnConfiguration_NoDcClusterGroup) isVnConfiguration_DcClusterGroupChoice() {}
func (*VnConfiguration_DcClusterGroup) isVnConfiguration_DcClusterGroupChoice()   {}

func (m *VnConfiguration) GetStaticRouteChoice() isVnConfiguration_StaticRouteChoice {
	if m != nil {
		return m.StaticRouteChoice
	}
	return nil
}
func (m *VnConfiguration) GetDcClusterGroupChoice() isVnConfiguration_DcClusterGroupChoice {
	if m != nil {
		return m.DcClusterGroupChoice
	}
	return nil
}

func (m *VnConfiguration) GetLabels() map[string]string {
	if m != nil {
		return m.Labels
	}
	return nil
}

func (m *VnConfiguration) GetNoStaticRoutes() *ves_io_schema4.Empty {
	if x, ok := m.GetStaticRouteChoice().(*VnConfiguration_NoStaticRoutes); ok {
		return x.NoStaticRoutes
	}
	return nil
}

func (m *VnConfiguration) GetStaticRoutes() *StaticRoutesListType {
	if x, ok := m.GetStaticRouteChoice().(*VnConfiguration_StaticRoutes); ok {
		return x.StaticRoutes
	}
	return nil
}

func (m *VnConfiguration) GetNoDcClusterGroup() *ves_io_schema4.Empty {
	if x, ok := m.GetDcClusterGroupChoice().(*VnConfiguration_NoDcClusterGroup); ok {
		return x.NoDcClusterGroup
	}
	return nil
}

func (m *VnConfiguration) GetDcClusterGroup() *ves_io_schema_views.ObjectRefType {
	if x, ok := m.GetDcClusterGroupChoice().(*VnConfiguration_DcClusterGroup); ok {
		return x.DcClusterGroup
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*VnConfiguration) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _VnConfiguration_OneofMarshaler, _VnConfiguration_OneofUnmarshaler, _VnConfiguration_OneofSizer, []interface{}{
		(*VnConfiguration_NoStaticRoutes)(nil),
		(*VnConfiguration_StaticRoutes)(nil),
		(*VnConfiguration_NoDcClusterGroup)(nil),
		(*VnConfiguration_DcClusterGroup)(nil),
	}
}

func _VnConfiguration_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*VnConfiguration)
	// static_route_choice
	switch x := m.StaticRouteChoice.(type) {
	case *VnConfiguration_NoStaticRoutes:
		_ = b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.NoStaticRoutes); err != nil {
			return err
		}
	case *VnConfiguration_StaticRoutes:
		_ = b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.StaticRoutes); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("VnConfiguration.StaticRouteChoice has unexpected type %T", x)
	}
	// dc_cluster_group_choice
	switch x := m.DcClusterGroupChoice.(type) {
	case *VnConfiguration_NoDcClusterGroup:
		_ = b.EncodeVarint(6<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.NoDcClusterGroup); err != nil {
			return err
		}
	case *VnConfiguration_DcClusterGroup:
		_ = b.EncodeVarint(7<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.DcClusterGroup); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("VnConfiguration.DcClusterGroupChoice has unexpected type %T", x)
	}
	return nil
}

func _VnConfiguration_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*VnConfiguration)
	switch tag {
	case 3: // static_route_choice.no_static_routes
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.StaticRouteChoice = &VnConfiguration_NoStaticRoutes{msg}
		return true, err
	case 4: // static_route_choice.static_routes
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(StaticRoutesListType)
		err := b.DecodeMessage(msg)
		m.StaticRouteChoice = &VnConfiguration_StaticRoutes{msg}
		return true, err
	case 6: // dc_cluster_group_choice.no_dc_cluster_group
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.DcClusterGroupChoice = &VnConfiguration_NoDcClusterGroup{msg}
		return true, err
	case 7: // dc_cluster_group_choice.dc_cluster_group
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema_views.ObjectRefType)
		err := b.DecodeMessage(msg)
		m.DcClusterGroupChoice = &VnConfiguration_DcClusterGroup{msg}
		return true, err
	default:
		return false, nil
	}
}

func _VnConfiguration_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*VnConfiguration)
	// static_route_choice
	switch x := m.StaticRouteChoice.(type) {
	case *VnConfiguration_NoStaticRoutes:
		s := proto.Size(x.NoStaticRoutes)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *VnConfiguration_StaticRoutes:
		s := proto.Size(x.StaticRoutes)
		n += proto.SizeVarint(4<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	// dc_cluster_group_choice
	switch x := m.DcClusterGroupChoice.(type) {
	case *VnConfiguration_NoDcClusterGroup:
		s := proto.Size(x.NoDcClusterGroup)
		n += proto.SizeVarint(6<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *VnConfiguration_DcClusterGroup:
		s := proto.Size(x.DcClusterGroup)
		n += proto.SizeVarint(7<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// Global Network Connection
//
// x-displayName: "Global Network Connection"
// Global network connection
type GlobalNetworkConnectionType struct {
	// Connector Choice
	//
	// x-displayName: "Select Network Connection Type"
	// x-required
	// Select the networks and method in which they are connected.
	//
	// Types that are valid to be assigned to ConnectionChoice:
	//	*GlobalNetworkConnectionType_SloToGlobalDr
	ConnectionChoice isGlobalNetworkConnectionType_ConnectionChoice `protobuf_oneof:"connection_choice"`
	// Select Forward Proxy
	//
	// x-displayName: "Select Forward Proxy"
	// x-required
	// Select to enable forward proxy
	//
	// Types that are valid to be assigned to ForwardProxyChoice:
	//	*GlobalNetworkConnectionType_DisableForwardProxy
	//	*GlobalNetworkConnectionType_EnableForwardProxy
	ForwardProxyChoice isGlobalNetworkConnectionType_ForwardProxyChoice `protobuf_oneof:"forward_proxy_choice"`
}

func (m *GlobalNetworkConnectionType) Reset()                    { *m = GlobalNetworkConnectionType{} }
func (*GlobalNetworkConnectionType) ProtoMessage()               {}
func (*GlobalNetworkConnectionType) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{6} }

type isGlobalNetworkConnectionType_ConnectionChoice interface {
	isGlobalNetworkConnectionType_ConnectionChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isGlobalNetworkConnectionType_ForwardProxyChoice interface {
	isGlobalNetworkConnectionType_ForwardProxyChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type GlobalNetworkConnectionType_SloToGlobalDr struct {
	SloToGlobalDr *ves_io_schema_views.GlobalConnectorType `protobuf:"bytes,3,opt,name=slo_to_global_dr,json=sloToGlobalDr,oneof"`
}
type GlobalNetworkConnectionType_DisableForwardProxy struct {
	DisableForwardProxy *ves_io_schema4.Empty `protobuf:"bytes,5,opt,name=disable_forward_proxy,json=disableForwardProxy,oneof"`
}
type GlobalNetworkConnectionType_EnableForwardProxy struct {
	EnableForwardProxy *ves_io_schema4.ForwardProxyConfigType `protobuf:"bytes,6,opt,name=enable_forward_proxy,json=enableForwardProxy,oneof"`
}

func (*GlobalNetworkConnectionType_SloToGlobalDr) isGlobalNetworkConnectionType_ConnectionChoice() {}
func (*GlobalNetworkConnectionType_DisableForwardProxy) isGlobalNetworkConnectionType_ForwardProxyChoice() {
}
func (*GlobalNetworkConnectionType_EnableForwardProxy) isGlobalNetworkConnectionType_ForwardProxyChoice() {
}

func (m *GlobalNetworkConnectionType) GetConnectionChoice() isGlobalNetworkConnectionType_ConnectionChoice {
	if m != nil {
		return m.ConnectionChoice
	}
	return nil
}
func (m *GlobalNetworkConnectionType) GetForwardProxyChoice() isGlobalNetworkConnectionType_ForwardProxyChoice {
	if m != nil {
		return m.ForwardProxyChoice
	}
	return nil
}

func (m *GlobalNetworkConnectionType) GetSloToGlobalDr() *ves_io_schema_views.GlobalConnectorType {
	if x, ok := m.GetConnectionChoice().(*GlobalNetworkConnectionType_SloToGlobalDr); ok {
		return x.SloToGlobalDr
	}
	return nil
}

func (m *GlobalNetworkConnectionType) GetDisableForwardProxy() *ves_io_schema4.Empty {
	if x, ok := m.GetForwardProxyChoice().(*GlobalNetworkConnectionType_DisableForwardProxy); ok {
		return x.DisableForwardProxy
	}
	return nil
}

func (m *GlobalNetworkConnectionType) GetEnableForwardProxy() *ves_io_schema4.ForwardProxyConfigType {
	if x, ok := m.GetForwardProxyChoice().(*GlobalNetworkConnectionType_EnableForwardProxy); ok {
		return x.EnableForwardProxy
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*GlobalNetworkConnectionType) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _GlobalNetworkConnectionType_OneofMarshaler, _GlobalNetworkConnectionType_OneofUnmarshaler, _GlobalNetworkConnectionType_OneofSizer, []interface{}{
		(*GlobalNetworkConnectionType_SloToGlobalDr)(nil),
		(*GlobalNetworkConnectionType_DisableForwardProxy)(nil),
		(*GlobalNetworkConnectionType_EnableForwardProxy)(nil),
	}
}

func _GlobalNetworkConnectionType_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*GlobalNetworkConnectionType)
	// connection_choice
	switch x := m.ConnectionChoice.(type) {
	case *GlobalNetworkConnectionType_SloToGlobalDr:
		_ = b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.SloToGlobalDr); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("GlobalNetworkConnectionType.ConnectionChoice has unexpected type %T", x)
	}
	// forward_proxy_choice
	switch x := m.ForwardProxyChoice.(type) {
	case *GlobalNetworkConnectionType_DisableForwardProxy:
		_ = b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.DisableForwardProxy); err != nil {
			return err
		}
	case *GlobalNetworkConnectionType_EnableForwardProxy:
		_ = b.EncodeVarint(6<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.EnableForwardProxy); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("GlobalNetworkConnectionType.ForwardProxyChoice has unexpected type %T", x)
	}
	return nil
}

func _GlobalNetworkConnectionType_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*GlobalNetworkConnectionType)
	switch tag {
	case 3: // connection_choice.slo_to_global_dr
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema_views.GlobalConnectorType)
		err := b.DecodeMessage(msg)
		m.ConnectionChoice = &GlobalNetworkConnectionType_SloToGlobalDr{msg}
		return true, err
	case 5: // forward_proxy_choice.disable_forward_proxy
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.ForwardProxyChoice = &GlobalNetworkConnectionType_DisableForwardProxy{msg}
		return true, err
	case 6: // forward_proxy_choice.enable_forward_proxy
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.ForwardProxyConfigType)
		err := b.DecodeMessage(msg)
		m.ForwardProxyChoice = &GlobalNetworkConnectionType_EnableForwardProxy{msg}
		return true, err
	default:
		return false, nil
	}
}

func _GlobalNetworkConnectionType_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*GlobalNetworkConnectionType)
	// connection_choice
	switch x := m.ConnectionChoice.(type) {
	case *GlobalNetworkConnectionType_SloToGlobalDr:
		s := proto.Size(x.SloToGlobalDr)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	// forward_proxy_choice
	switch x := m.ForwardProxyChoice.(type) {
	case *GlobalNetworkConnectionType_DisableForwardProxy:
		s := proto.Size(x.DisableForwardProxy)
		n += proto.SizeVarint(5<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *GlobalNetworkConnectionType_EnableForwardProxy:
		s := proto.Size(x.EnableForwardProxy)
		n += proto.SizeVarint(6<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// Global Network Connection List
//
// x-displayName: "Global Network Connection List"
// List of global network connections
type GlobalNetworkConnectionListType struct {
	// Global Network Connections
	//
	// x-displayName: "Global Network Connections"
	// x-required
	// Global network connections
	GlobalNetworkConnections []*GlobalNetworkConnectionType `protobuf:"bytes,1,rep,name=global_network_connections,json=globalNetworkConnections" json:"global_network_connections,omitempty"`
}

func (m *GlobalNetworkConnectionListType) Reset()      { *m = GlobalNetworkConnectionListType{} }
func (*GlobalNetworkConnectionListType) ProtoMessage() {}
func (*GlobalNetworkConnectionListType) Descriptor() ([]byte, []int) {
	return fileDescriptorTypes, []int{7}
}

func (m *GlobalNetworkConnectionListType) GetGlobalNetworkConnections() []*GlobalNetworkConnectionType {
	if m != nil {
		return m.GlobalNetworkConnections
	}
	return nil
}

type VssNetworkConfiguration struct {
	// Site Local Network
	//
	// x-displayName: "Select Configuration For Site Local Network"
	// x-required
	// Select to configure site local network
	//
	// Types that are valid to be assigned to SloChoice:
	//	*VssNetworkConfiguration_DefaultConfig
	//	*VssNetworkConfiguration_SloConfig
	SloChoice isVssNetworkConfiguration_SloChoice `protobuf_oneof:"slo_choice"`
	// Select Interface Config
	//
	// x-displayName: "Select Interface Configuration"
	// x-required
	// Select how interfaces are configured for this site
	//
	// Types that are valid to be assigned to InterfaceChoice:
	//	*VssNetworkConfiguration_DefaultInterfaceConfig
	//	*VssNetworkConfiguration_InterfaceList
	InterfaceChoice isVssNetworkConfiguration_InterfaceChoice `protobuf_oneof:"interface_choice"`
	// Manage Network Policy
	//
	// x-displayName: "Manage Network Policy"
	// x-required
	// Manage Network Policy via this view
	//
	// Types that are valid to be assigned to NetworkPolicyChoice:
	//	*VssNetworkConfiguration_NoNetworkPolicy
	//	*VssNetworkConfiguration_ActiveNetworkPolicies
	NetworkPolicyChoice isVssNetworkConfiguration_NetworkPolicyChoice `protobuf_oneof:"network_policy_choice"`
	// Manage Forward Proxy
	//
	// x-displayName: "Manage Forward Proxy"
	// x-required
	// Manage Forward Proxy for this site
	//
	// Types that are valid to be assigned to ForwardProxyChoice:
	//	*VssNetworkConfiguration_NoForwardProxy
	//	*VssNetworkConfiguration_ActiveForwardProxyPolicies
	//	*VssNetworkConfiguration_ForwardProxyAllowAll
	ForwardProxyChoice isVssNetworkConfiguration_ForwardProxyChoice `protobuf_oneof:"forward_proxy_choice"`
	// Connect to Global Network
	//
	// x-displayName: "Select Global Networks to Connect"
	// x-required
	// Select global networks to connect to site local network
	//
	// Types that are valid to be assigned to GlobalNetworkChoice:
	//	*VssNetworkConfiguration_NoGlobalNetwork
	//	*VssNetworkConfiguration_GlobalNetworkList
	GlobalNetworkChoice isVssNetworkConfiguration_GlobalNetworkChoice `protobuf_oneof:"global_network_choice"`
	// Common VIP
	//
	// x-displayName: "Common VIP"
	// x-example: "10.1.1.1"
	// Optional common virtual IP  across all nodes to be used as automatic VIP for site local network.
	OutsideVip string `protobuf:"bytes,16,opt,name=outside_vip,json=outsideVip,proto3" json:"outside_vip,omitempty"`
	// outside_nameserver
	//
	// x-displayName: "DNS Server for Local Network"
	// x-example: "10.1.1.1"
	// Optional DNS server IP to be used for name resolution in local network
	OutsideNameserver string `protobuf:"bytes,17,opt,name=outside_nameserver,json=outsideNameserver,proto3" json:"outside_nameserver,omitempty"`
	// bgp_router_id
	//
	// x-displayName: "BGP Router ID"
	// x-example: "10.1.1.1"
	// Optional bgp router id that can be used as parameter for BGP configuration when BGP is configured to
	// fetch BGP router ID from site object.
	BgpRouterId string `protobuf:"bytes,18,opt,name=bgp_router_id,json=bgpRouterId,proto3" json:"bgp_router_id,omitempty"`
	// bgp_peer_address
	//
	// x-displayName: "BGP Peer Address"
	// x-example: "10.1.1.1"
	// Optional bgp peer address that can be used as parameter for BGP configuration when BGP is configured
	// to fetch BGP peer address from site Object. This can be used to change peer address per site in fleet.
	BgpPeerAddress string `protobuf:"bytes,19,opt,name=bgp_peer_address,json=bgpPeerAddress,proto3" json:"bgp_peer_address,omitempty"`
	// vip_vrrp_mode
	//
	// x-displayName: "VIP Advertisement Mode"
	// Optional VIP VRRP advertisement mode. This controls the ARP behavior for  Common VIP
	// addresses, when it is configured. When turned on, the Master VER would advertise gratuitous ARPs and
	// would respond to ARP queries for these addresses. When turned off, ARP responses are not given by VER.
	//
	// If BGP is configured, common VIP addresses will be advertised by BGP. This is
	// irrespective of the vrrp mode.
	//
	// When Outside VIP / Inside VIP are configured, it is recommended to turn on vrrp and also configure BGP.
	VipVrrpMode ves_io_schema4.VipVrrpType `protobuf:"varint,20,opt,name=vip_vrrp_mode,json=vipVrrpMode,proto3,enum=ves.io.schema.VipVrrpType" json:"vip_vrrp_mode,omitempty"`
	// site_to_site_tunnel_ip
	//
	// x-displayName: "Site To Site Tunnel IP"
	// x-example: "10.1.1.1"
	// Optional, VIP in the site_to_site_network_type configured above used for terminating IPSec/SSL tunnels created with SiteMeshGroup.
	SiteToSiteTunnelIp string `protobuf:"bytes,21,opt,name=site_to_site_tunnel_ip,json=siteToSiteTunnelIp,proto3" json:"site_to_site_tunnel_ip,omitempty"`
	// tunnel_dead_timeout
	//
	// x-displayName: "Tunnel Dead Timeout (msec)"
	// x-example: "0"
	// Time interval, in millisec, within which any ipsec / ssl connection from the site going down is detected.
	// When not set (== 0), a default value of 10000 msec will be used.
	TunnelDeadTimeout uint32 `protobuf:"varint,22,opt,name=tunnel_dead_timeout,json=tunnelDeadTimeout,proto3" json:"tunnel_dead_timeout,omitempty"`
}

func (m *VssNetworkConfiguration) Reset()                    { *m = VssNetworkConfiguration{} }
func (*VssNetworkConfiguration) ProtoMessage()               {}
func (*VssNetworkConfiguration) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{8} }

type isVssNetworkConfiguration_SloChoice interface {
	isVssNetworkConfiguration_SloChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isVssNetworkConfiguration_InterfaceChoice interface {
	isVssNetworkConfiguration_InterfaceChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isVssNetworkConfiguration_NetworkPolicyChoice interface {
	isVssNetworkConfiguration_NetworkPolicyChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isVssNetworkConfiguration_ForwardProxyChoice interface {
	isVssNetworkConfiguration_ForwardProxyChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isVssNetworkConfiguration_GlobalNetworkChoice interface {
	isVssNetworkConfiguration_GlobalNetworkChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type VssNetworkConfiguration_DefaultConfig struct {
	DefaultConfig *ves_io_schema4.Empty `protobuf:"bytes,2,opt,name=default_config,json=defaultConfig,oneof"`
}
type VssNetworkConfiguration_SloConfig struct {
	SloConfig *VnConfiguration `protobuf:"bytes,3,opt,name=slo_config,json=sloConfig,oneof"`
}
type VssNetworkConfiguration_DefaultInterfaceConfig struct {
	DefaultInterfaceConfig *ves_io_schema4.Empty `protobuf:"bytes,5,opt,name=default_interface_config,json=defaultInterfaceConfig,oneof"`
}
type VssNetworkConfiguration_InterfaceList struct {
	InterfaceList *InterfaceListType `protobuf:"bytes,6,opt,name=interface_list,json=interfaceList,oneof"`
}
type VssNetworkConfiguration_NoNetworkPolicy struct {
	NoNetworkPolicy *ves_io_schema4.Empty `protobuf:"bytes,8,opt,name=no_network_policy,json=noNetworkPolicy,oneof"`
}
type VssNetworkConfiguration_ActiveNetworkPolicies struct {
	ActiveNetworkPolicies *ves_io_schema_network_firewall.ActiveNetworkPoliciesType `protobuf:"bytes,9,opt,name=active_network_policies,json=activeNetworkPolicies,oneof"`
}
type VssNetworkConfiguration_NoForwardProxy struct {
	NoForwardProxy *ves_io_schema4.Empty `protobuf:"bytes,11,opt,name=no_forward_proxy,json=noForwardProxy,oneof"`
}
type VssNetworkConfiguration_ActiveForwardProxyPolicies struct {
	ActiveForwardProxyPolicies *ves_io_schema_network_firewall.ActiveForwardProxyPoliciesType `protobuf:"bytes,12,opt,name=active_forward_proxy_policies,json=activeForwardProxyPolicies,oneof"`
}
type VssNetworkConfiguration_ForwardProxyAllowAll struct {
	ForwardProxyAllowAll *ves_io_schema4.Empty `protobuf:"bytes,23,opt,name=forward_proxy_allow_all,json=forwardProxyAllowAll,oneof"`
}
type VssNetworkConfiguration_NoGlobalNetwork struct {
	NoGlobalNetwork *ves_io_schema4.Empty `protobuf:"bytes,14,opt,name=no_global_network,json=noGlobalNetwork,oneof"`
}
type VssNetworkConfiguration_GlobalNetworkList struct {
	GlobalNetworkList *ves_io_schema_views1.GlobalNetworkConnectionListType `protobuf:"bytes,15,opt,name=global_network_list,json=globalNetworkList,oneof"`
}

func (*VssNetworkConfiguration_DefaultConfig) isVssNetworkConfiguration_SloChoice()                {}
func (*VssNetworkConfiguration_SloConfig) isVssNetworkConfiguration_SloChoice()                    {}
func (*VssNetworkConfiguration_DefaultInterfaceConfig) isVssNetworkConfiguration_InterfaceChoice() {}
func (*VssNetworkConfiguration_InterfaceList) isVssNetworkConfiguration_InterfaceChoice()          {}
func (*VssNetworkConfiguration_NoNetworkPolicy) isVssNetworkConfiguration_NetworkPolicyChoice()    {}
func (*VssNetworkConfiguration_ActiveNetworkPolicies) isVssNetworkConfiguration_NetworkPolicyChoice() {
}
func (*VssNetworkConfiguration_NoForwardProxy) isVssNetworkConfiguration_ForwardProxyChoice() {}
func (*VssNetworkConfiguration_ActiveForwardProxyPolicies) isVssNetworkConfiguration_ForwardProxyChoice() {
}
func (*VssNetworkConfiguration_ForwardProxyAllowAll) isVssNetworkConfiguration_ForwardProxyChoice() {}
func (*VssNetworkConfiguration_NoGlobalNetwork) isVssNetworkConfiguration_GlobalNetworkChoice()     {}
func (*VssNetworkConfiguration_GlobalNetworkList) isVssNetworkConfiguration_GlobalNetworkChoice()   {}

func (m *VssNetworkConfiguration) GetSloChoice() isVssNetworkConfiguration_SloChoice {
	if m != nil {
		return m.SloChoice
	}
	return nil
}
func (m *VssNetworkConfiguration) GetInterfaceChoice() isVssNetworkConfiguration_InterfaceChoice {
	if m != nil {
		return m.InterfaceChoice
	}
	return nil
}
func (m *VssNetworkConfiguration) GetNetworkPolicyChoice() isVssNetworkConfiguration_NetworkPolicyChoice {
	if m != nil {
		return m.NetworkPolicyChoice
	}
	return nil
}
func (m *VssNetworkConfiguration) GetForwardProxyChoice() isVssNetworkConfiguration_ForwardProxyChoice {
	if m != nil {
		return m.ForwardProxyChoice
	}
	return nil
}
func (m *VssNetworkConfiguration) GetGlobalNetworkChoice() isVssNetworkConfiguration_GlobalNetworkChoice {
	if m != nil {
		return m.GlobalNetworkChoice
	}
	return nil
}

func (m *VssNetworkConfiguration) GetDefaultConfig() *ves_io_schema4.Empty {
	if x, ok := m.GetSloChoice().(*VssNetworkConfiguration_DefaultConfig); ok {
		return x.DefaultConfig
	}
	return nil
}

func (m *VssNetworkConfiguration) GetSloConfig() *VnConfiguration {
	if x, ok := m.GetSloChoice().(*VssNetworkConfiguration_SloConfig); ok {
		return x.SloConfig
	}
	return nil
}

func (m *VssNetworkConfiguration) GetDefaultInterfaceConfig() *ves_io_schema4.Empty {
	if x, ok := m.GetInterfaceChoice().(*VssNetworkConfiguration_DefaultInterfaceConfig); ok {
		return x.DefaultInterfaceConfig
	}
	return nil
}

func (m *VssNetworkConfiguration) GetInterfaceList() *InterfaceListType {
	if x, ok := m.GetInterfaceChoice().(*VssNetworkConfiguration_InterfaceList); ok {
		return x.InterfaceList
	}
	return nil
}

func (m *VssNetworkConfiguration) GetNoNetworkPolicy() *ves_io_schema4.Empty {
	if x, ok := m.GetNetworkPolicyChoice().(*VssNetworkConfiguration_NoNetworkPolicy); ok {
		return x.NoNetworkPolicy
	}
	return nil
}

func (m *VssNetworkConfiguration) GetActiveNetworkPolicies() *ves_io_schema_network_firewall.ActiveNetworkPoliciesType {
	if x, ok := m.GetNetworkPolicyChoice().(*VssNetworkConfiguration_ActiveNetworkPolicies); ok {
		return x.ActiveNetworkPolicies
	}
	return nil
}

func (m *VssNetworkConfiguration) GetNoForwardProxy() *ves_io_schema4.Empty {
	if x, ok := m.GetForwardProxyChoice().(*VssNetworkConfiguration_NoForwardProxy); ok {
		return x.NoForwardProxy
	}
	return nil
}

func (m *VssNetworkConfiguration) GetActiveForwardProxyPolicies() *ves_io_schema_network_firewall.ActiveForwardProxyPoliciesType {
	if x, ok := m.GetForwardProxyChoice().(*VssNetworkConfiguration_ActiveForwardProxyPolicies); ok {
		return x.ActiveForwardProxyPolicies
	}
	return nil
}

func (m *VssNetworkConfiguration) GetForwardProxyAllowAll() *ves_io_schema4.Empty {
	if x, ok := m.GetForwardProxyChoice().(*VssNetworkConfiguration_ForwardProxyAllowAll); ok {
		return x.ForwardProxyAllowAll
	}
	return nil
}

func (m *VssNetworkConfiguration) GetNoGlobalNetwork() *ves_io_schema4.Empty {
	if x, ok := m.GetGlobalNetworkChoice().(*VssNetworkConfiguration_NoGlobalNetwork); ok {
		return x.NoGlobalNetwork
	}
	return nil
}

func (m *VssNetworkConfiguration) GetGlobalNetworkList() *ves_io_schema_views1.GlobalNetworkConnectionListType {
	if x, ok := m.GetGlobalNetworkChoice().(*VssNetworkConfiguration_GlobalNetworkList); ok {
		return x.GlobalNetworkList
	}
	return nil
}

func (m *VssNetworkConfiguration) GetOutsideVip() string {
	if m != nil {
		return m.OutsideVip
	}
	return ""
}

func (m *VssNetworkConfiguration) GetOutsideNameserver() string {
	if m != nil {
		return m.OutsideNameserver
	}
	return ""
}

func (m *VssNetworkConfiguration) GetBgpRouterId() string {
	if m != nil {
		return m.BgpRouterId
	}
	return ""
}

func (m *VssNetworkConfiguration) GetBgpPeerAddress() string {
	if m != nil {
		return m.BgpPeerAddress
	}
	return ""
}

func (m *VssNetworkConfiguration) GetVipVrrpMode() ves_io_schema4.VipVrrpType {
	if m != nil {
		return m.VipVrrpMode
	}
	return ves_io_schema4.VIP_VRRP_INVALID
}

func (m *VssNetworkConfiguration) GetSiteToSiteTunnelIp() string {
	if m != nil {
		return m.SiteToSiteTunnelIp
	}
	return ""
}

func (m *VssNetworkConfiguration) GetTunnelDeadTimeout() uint32 {
	if m != nil {
		return m.TunnelDeadTimeout
	}
	return 0
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*VssNetworkConfiguration) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _VssNetworkConfiguration_OneofMarshaler, _VssNetworkConfiguration_OneofUnmarshaler, _VssNetworkConfiguration_OneofSizer, []interface{}{
		(*VssNetworkConfiguration_DefaultConfig)(nil),
		(*VssNetworkConfiguration_SloConfig)(nil),
		(*VssNetworkConfiguration_DefaultInterfaceConfig)(nil),
		(*VssNetworkConfiguration_InterfaceList)(nil),
		(*VssNetworkConfiguration_NoNetworkPolicy)(nil),
		(*VssNetworkConfiguration_ActiveNetworkPolicies)(nil),
		(*VssNetworkConfiguration_NoForwardProxy)(nil),
		(*VssNetworkConfiguration_ActiveForwardProxyPolicies)(nil),
		(*VssNetworkConfiguration_ForwardProxyAllowAll)(nil),
		(*VssNetworkConfiguration_NoGlobalNetwork)(nil),
		(*VssNetworkConfiguration_GlobalNetworkList)(nil),
	}
}

func _VssNetworkConfiguration_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*VssNetworkConfiguration)
	// slo_choice
	switch x := m.SloChoice.(type) {
	case *VssNetworkConfiguration_DefaultConfig:
		_ = b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.DefaultConfig); err != nil {
			return err
		}
	case *VssNetworkConfiguration_SloConfig:
		_ = b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.SloConfig); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("VssNetworkConfiguration.SloChoice has unexpected type %T", x)
	}
	// interface_choice
	switch x := m.InterfaceChoice.(type) {
	case *VssNetworkConfiguration_DefaultInterfaceConfig:
		_ = b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.DefaultInterfaceConfig); err != nil {
			return err
		}
	case *VssNetworkConfiguration_InterfaceList:
		_ = b.EncodeVarint(6<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.InterfaceList); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("VssNetworkConfiguration.InterfaceChoice has unexpected type %T", x)
	}
	// network_policy_choice
	switch x := m.NetworkPolicyChoice.(type) {
	case *VssNetworkConfiguration_NoNetworkPolicy:
		_ = b.EncodeVarint(8<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.NoNetworkPolicy); err != nil {
			return err
		}
	case *VssNetworkConfiguration_ActiveNetworkPolicies:
		_ = b.EncodeVarint(9<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ActiveNetworkPolicies); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("VssNetworkConfiguration.NetworkPolicyChoice has unexpected type %T", x)
	}
	// forward_proxy_choice
	switch x := m.ForwardProxyChoice.(type) {
	case *VssNetworkConfiguration_NoForwardProxy:
		_ = b.EncodeVarint(11<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.NoForwardProxy); err != nil {
			return err
		}
	case *VssNetworkConfiguration_ActiveForwardProxyPolicies:
		_ = b.EncodeVarint(12<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ActiveForwardProxyPolicies); err != nil {
			return err
		}
	case *VssNetworkConfiguration_ForwardProxyAllowAll:
		_ = b.EncodeVarint(23<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ForwardProxyAllowAll); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("VssNetworkConfiguration.ForwardProxyChoice has unexpected type %T", x)
	}
	// global_network_choice
	switch x := m.GlobalNetworkChoice.(type) {
	case *VssNetworkConfiguration_NoGlobalNetwork:
		_ = b.EncodeVarint(14<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.NoGlobalNetwork); err != nil {
			return err
		}
	case *VssNetworkConfiguration_GlobalNetworkList:
		_ = b.EncodeVarint(15<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.GlobalNetworkList); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("VssNetworkConfiguration.GlobalNetworkChoice has unexpected type %T", x)
	}
	return nil
}

func _VssNetworkConfiguration_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*VssNetworkConfiguration)
	switch tag {
	case 2: // slo_choice.default_config
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.SloChoice = &VssNetworkConfiguration_DefaultConfig{msg}
		return true, err
	case 3: // slo_choice.slo_config
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(VnConfiguration)
		err := b.DecodeMessage(msg)
		m.SloChoice = &VssNetworkConfiguration_SloConfig{msg}
		return true, err
	case 5: // interface_choice.default_interface_config
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.InterfaceChoice = &VssNetworkConfiguration_DefaultInterfaceConfig{msg}
		return true, err
	case 6: // interface_choice.interface_list
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(InterfaceListType)
		err := b.DecodeMessage(msg)
		m.InterfaceChoice = &VssNetworkConfiguration_InterfaceList{msg}
		return true, err
	case 8: // network_policy_choice.no_network_policy
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.NetworkPolicyChoice = &VssNetworkConfiguration_NoNetworkPolicy{msg}
		return true, err
	case 9: // network_policy_choice.active_network_policies
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema_network_firewall.ActiveNetworkPoliciesType)
		err := b.DecodeMessage(msg)
		m.NetworkPolicyChoice = &VssNetworkConfiguration_ActiveNetworkPolicies{msg}
		return true, err
	case 11: // forward_proxy_choice.no_forward_proxy
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.ForwardProxyChoice = &VssNetworkConfiguration_NoForwardProxy{msg}
		return true, err
	case 12: // forward_proxy_choice.active_forward_proxy_policies
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema_network_firewall.ActiveForwardProxyPoliciesType)
		err := b.DecodeMessage(msg)
		m.ForwardProxyChoice = &VssNetworkConfiguration_ActiveForwardProxyPolicies{msg}
		return true, err
	case 23: // forward_proxy_choice.forward_proxy_allow_all
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.ForwardProxyChoice = &VssNetworkConfiguration_ForwardProxyAllowAll{msg}
		return true, err
	case 14: // global_network_choice.no_global_network
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.GlobalNetworkChoice = &VssNetworkConfiguration_NoGlobalNetwork{msg}
		return true, err
	case 15: // global_network_choice.global_network_list
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema_views1.GlobalNetworkConnectionListType)
		err := b.DecodeMessage(msg)
		m.GlobalNetworkChoice = &VssNetworkConfiguration_GlobalNetworkList{msg}
		return true, err
	default:
		return false, nil
	}
}

func _VssNetworkConfiguration_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*VssNetworkConfiguration)
	// slo_choice
	switch x := m.SloChoice.(type) {
	case *VssNetworkConfiguration_DefaultConfig:
		s := proto.Size(x.DefaultConfig)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *VssNetworkConfiguration_SloConfig:
		s := proto.Size(x.SloConfig)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	// interface_choice
	switch x := m.InterfaceChoice.(type) {
	case *VssNetworkConfiguration_DefaultInterfaceConfig:
		s := proto.Size(x.DefaultInterfaceConfig)
		n += proto.SizeVarint(5<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *VssNetworkConfiguration_InterfaceList:
		s := proto.Size(x.InterfaceList)
		n += proto.SizeVarint(6<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	// network_policy_choice
	switch x := m.NetworkPolicyChoice.(type) {
	case *VssNetworkConfiguration_NoNetworkPolicy:
		s := proto.Size(x.NoNetworkPolicy)
		n += proto.SizeVarint(8<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *VssNetworkConfiguration_ActiveNetworkPolicies:
		s := proto.Size(x.ActiveNetworkPolicies)
		n += proto.SizeVarint(9<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	// forward_proxy_choice
	switch x := m.ForwardProxyChoice.(type) {
	case *VssNetworkConfiguration_NoForwardProxy:
		s := proto.Size(x.NoForwardProxy)
		n += proto.SizeVarint(11<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *VssNetworkConfiguration_ActiveForwardProxyPolicies:
		s := proto.Size(x.ActiveForwardProxyPolicies)
		n += proto.SizeVarint(12<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *VssNetworkConfiguration_ForwardProxyAllowAll:
		s := proto.Size(x.ForwardProxyAllowAll)
		n += proto.SizeVarint(23<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	// global_network_choice
	switch x := m.GlobalNetworkChoice.(type) {
	case *VssNetworkConfiguration_NoGlobalNetwork:
		s := proto.Size(x.NoGlobalNetwork)
		n += proto.SizeVarint(14<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *VssNetworkConfiguration_GlobalNetworkList:
		s := proto.Size(x.GlobalNetworkList)
		n += proto.SizeVarint(15<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type VssStorageConfiguration struct {
	// Storage Interfaces
	//
	// x-displayName: "Select Storage Interface Configuration"
	// x-required
	// Select if storage interfaces are configured
	//
	// Types that are valid to be assigned to StorageInterfaceChoice:
	//	*VssStorageConfiguration_NoStorageInterfaces
	//	*VssStorageConfiguration_StorageInterfaceList
	StorageInterfaceChoice isVssStorageConfiguration_StorageInterfaceChoice `protobuf_oneof:"storage_interface_choice"`
	// Storage Device Configuration
	//
	// x-displayName: "Select Storage Device Configuration"
	// x-required
	// Configure storage devices for this site
	//
	// Types that are valid to be assigned to StorageDeviceChoice:
	//	*VssStorageConfiguration_NoStorageDevice
	//	*VssStorageConfiguration_StorageDeviceList
	StorageDeviceChoice isVssStorageConfiguration_StorageDeviceChoice `protobuf_oneof:"storage_device_choice"`
	// Storage Class Configuration
	//
	// x-displayName: "Select Configuration for Storage Classes"
	// x-required
	// Configure custom storage classes in kubernetes for this site
	//
	// Types that are valid to be assigned to StorageClassChoice:
	//	*VssStorageConfiguration_DefaultStorageClass
	//	*VssStorageConfiguration_StorageClassList
	StorageClassChoice isVssStorageConfiguration_StorageClassChoice `protobuf_oneof:"storage_class_choice"`
	// Manage Storage Static Routes
	//
	// x-displayName: "Manage Storage Static Routes"
	// x-required
	// Add static routes for storage network. Used to reach indirectly connected storage devices.
	//
	// Types that are valid to be assigned to StaticRouteChoice:
	//	*VssStorageConfiguration_NoStaticRoutes
	//	*VssStorageConfiguration_StaticRoutes
	StaticRouteChoice isVssStorageConfiguration_StaticRouteChoice `protobuf_oneof:"static_route_choice"`
}

func (m *VssStorageConfiguration) Reset()                    { *m = VssStorageConfiguration{} }
func (*VssStorageConfiguration) ProtoMessage()               {}
func (*VssStorageConfiguration) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{9} }

type isVssStorageConfiguration_StorageInterfaceChoice interface {
	isVssStorageConfiguration_StorageInterfaceChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isVssStorageConfiguration_StorageDeviceChoice interface {
	isVssStorageConfiguration_StorageDeviceChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isVssStorageConfiguration_StorageClassChoice interface {
	isVssStorageConfiguration_StorageClassChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isVssStorageConfiguration_StaticRouteChoice interface {
	isVssStorageConfiguration_StaticRouteChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type VssStorageConfiguration_NoStorageInterfaces struct {
	NoStorageInterfaces *ves_io_schema4.Empty `protobuf:"bytes,2,opt,name=no_storage_interfaces,json=noStorageInterfaces,oneof"`
}
type VssStorageConfiguration_StorageInterfaceList struct {
	StorageInterfaceList *StorageInterfaceListType `protobuf:"bytes,3,opt,name=storage_interface_list,json=storageInterfaceList,oneof"`
}
type VssStorageConfiguration_NoStorageDevice struct {
	NoStorageDevice *ves_io_schema4.Empty `protobuf:"bytes,5,opt,name=no_storage_device,json=noStorageDevice,oneof"`
}
type VssStorageConfiguration_StorageDeviceList struct {
	StorageDeviceList *ves_io_schema_fleet.FleetStorageDeviceListType `protobuf:"bytes,6,opt,name=storage_device_list,json=storageDeviceList,oneof"`
}
type VssStorageConfiguration_DefaultStorageClass struct {
	DefaultStorageClass *ves_io_schema4.Empty `protobuf:"bytes,8,opt,name=default_storage_class,json=defaultStorageClass,oneof"`
}
type VssStorageConfiguration_StorageClassList struct {
	StorageClassList *ves_io_schema_fleet.FleetStorageClassListType `protobuf:"bytes,9,opt,name=storage_class_list,json=storageClassList,oneof"`
}
type VssStorageConfiguration_NoStaticRoutes struct {
	NoStaticRoutes *ves_io_schema4.Empty `protobuf:"bytes,11,opt,name=no_static_routes,json=noStaticRoutes,oneof"`
}
type VssStorageConfiguration_StaticRoutes struct {
	StaticRoutes *StaticRoutesListType `protobuf:"bytes,12,opt,name=static_routes,json=staticRoutes,oneof"`
}

func (*VssStorageConfiguration_NoStorageInterfaces) isVssStorageConfiguration_StorageInterfaceChoice() {
}
func (*VssStorageConfiguration_StorageInterfaceList) isVssStorageConfiguration_StorageInterfaceChoice() {
}
func (*VssStorageConfiguration_NoStorageDevice) isVssStorageConfiguration_StorageDeviceChoice()    {}
func (*VssStorageConfiguration_StorageDeviceList) isVssStorageConfiguration_StorageDeviceChoice()  {}
func (*VssStorageConfiguration_DefaultStorageClass) isVssStorageConfiguration_StorageClassChoice() {}
func (*VssStorageConfiguration_StorageClassList) isVssStorageConfiguration_StorageClassChoice()    {}
func (*VssStorageConfiguration_NoStaticRoutes) isVssStorageConfiguration_StaticRouteChoice()       {}
func (*VssStorageConfiguration_StaticRoutes) isVssStorageConfiguration_StaticRouteChoice()         {}

func (m *VssStorageConfiguration) GetStorageInterfaceChoice() isVssStorageConfiguration_StorageInterfaceChoice {
	if m != nil {
		return m.StorageInterfaceChoice
	}
	return nil
}
func (m *VssStorageConfiguration) GetStorageDeviceChoice() isVssStorageConfiguration_StorageDeviceChoice {
	if m != nil {
		return m.StorageDeviceChoice
	}
	return nil
}
func (m *VssStorageConfiguration) GetStorageClassChoice() isVssStorageConfiguration_StorageClassChoice {
	if m != nil {
		return m.StorageClassChoice
	}
	return nil
}
func (m *VssStorageConfiguration) GetStaticRouteChoice() isVssStorageConfiguration_StaticRouteChoice {
	if m != nil {
		return m.StaticRouteChoice
	}
	return nil
}

func (m *VssStorageConfiguration) GetNoStorageInterfaces() *ves_io_schema4.Empty {
	if x, ok := m.GetStorageInterfaceChoice().(*VssStorageConfiguration_NoStorageInterfaces); ok {
		return x.NoStorageInterfaces
	}
	return nil
}

func (m *VssStorageConfiguration) GetStorageInterfaceList() *StorageInterfaceListType {
	if x, ok := m.GetStorageInterfaceChoice().(*VssStorageConfiguration_StorageInterfaceList); ok {
		return x.StorageInterfaceList
	}
	return nil
}

func (m *VssStorageConfiguration) GetNoStorageDevice() *ves_io_schema4.Empty {
	if x, ok := m.GetStorageDeviceChoice().(*VssStorageConfiguration_NoStorageDevice); ok {
		return x.NoStorageDevice
	}
	return nil
}

func (m *VssStorageConfiguration) GetStorageDeviceList() *ves_io_schema_fleet.FleetStorageDeviceListType {
	if x, ok := m.GetStorageDeviceChoice().(*VssStorageConfiguration_StorageDeviceList); ok {
		return x.StorageDeviceList
	}
	return nil
}

func (m *VssStorageConfiguration) GetDefaultStorageClass() *ves_io_schema4.Empty {
	if x, ok := m.GetStorageClassChoice().(*VssStorageConfiguration_DefaultStorageClass); ok {
		return x.DefaultStorageClass
	}
	return nil
}

func (m *VssStorageConfiguration) GetStorageClassList() *ves_io_schema_fleet.FleetStorageClassListType {
	if x, ok := m.GetStorageClassChoice().(*VssStorageConfiguration_StorageClassList); ok {
		return x.StorageClassList
	}
	return nil
}

func (m *VssStorageConfiguration) GetNoStaticRoutes() *ves_io_schema4.Empty {
	if x, ok := m.GetStaticRouteChoice().(*VssStorageConfiguration_NoStaticRoutes); ok {
		return x.NoStaticRoutes
	}
	return nil
}

func (m *VssStorageConfiguration) GetStaticRoutes() *StaticRoutesListType {
	if x, ok := m.GetStaticRouteChoice().(*VssStorageConfiguration_StaticRoutes); ok {
		return x.StaticRoutes
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*VssStorageConfiguration) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _VssStorageConfiguration_OneofMarshaler, _VssStorageConfiguration_OneofUnmarshaler, _VssStorageConfiguration_OneofSizer, []interface{}{
		(*VssStorageConfiguration_NoStorageInterfaces)(nil),
		(*VssStorageConfiguration_StorageInterfaceList)(nil),
		(*VssStorageConfiguration_NoStorageDevice)(nil),
		(*VssStorageConfiguration_StorageDeviceList)(nil),
		(*VssStorageConfiguration_DefaultStorageClass)(nil),
		(*VssStorageConfiguration_StorageClassList)(nil),
		(*VssStorageConfiguration_NoStaticRoutes)(nil),
		(*VssStorageConfiguration_StaticRoutes)(nil),
	}
}

func _VssStorageConfiguration_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*VssStorageConfiguration)
	// storage_interface_choice
	switch x := m.StorageInterfaceChoice.(type) {
	case *VssStorageConfiguration_NoStorageInterfaces:
		_ = b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.NoStorageInterfaces); err != nil {
			return err
		}
	case *VssStorageConfiguration_StorageInterfaceList:
		_ = b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.StorageInterfaceList); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("VssStorageConfiguration.StorageInterfaceChoice has unexpected type %T", x)
	}
	// storage_device_choice
	switch x := m.StorageDeviceChoice.(type) {
	case *VssStorageConfiguration_NoStorageDevice:
		_ = b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.NoStorageDevice); err != nil {
			return err
		}
	case *VssStorageConfiguration_StorageDeviceList:
		_ = b.EncodeVarint(6<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.StorageDeviceList); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("VssStorageConfiguration.StorageDeviceChoice has unexpected type %T", x)
	}
	// storage_class_choice
	switch x := m.StorageClassChoice.(type) {
	case *VssStorageConfiguration_DefaultStorageClass:
		_ = b.EncodeVarint(8<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.DefaultStorageClass); err != nil {
			return err
		}
	case *VssStorageConfiguration_StorageClassList:
		_ = b.EncodeVarint(9<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.StorageClassList); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("VssStorageConfiguration.StorageClassChoice has unexpected type %T", x)
	}
	// static_route_choice
	switch x := m.StaticRouteChoice.(type) {
	case *VssStorageConfiguration_NoStaticRoutes:
		_ = b.EncodeVarint(11<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.NoStaticRoutes); err != nil {
			return err
		}
	case *VssStorageConfiguration_StaticRoutes:
		_ = b.EncodeVarint(12<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.StaticRoutes); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("VssStorageConfiguration.StaticRouteChoice has unexpected type %T", x)
	}
	return nil
}

func _VssStorageConfiguration_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*VssStorageConfiguration)
	switch tag {
	case 2: // storage_interface_choice.no_storage_interfaces
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.StorageInterfaceChoice = &VssStorageConfiguration_NoStorageInterfaces{msg}
		return true, err
	case 3: // storage_interface_choice.storage_interface_list
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(StorageInterfaceListType)
		err := b.DecodeMessage(msg)
		m.StorageInterfaceChoice = &VssStorageConfiguration_StorageInterfaceList{msg}
		return true, err
	case 5: // storage_device_choice.no_storage_device
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.StorageDeviceChoice = &VssStorageConfiguration_NoStorageDevice{msg}
		return true, err
	case 6: // storage_device_choice.storage_device_list
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema_fleet.FleetStorageDeviceListType)
		err := b.DecodeMessage(msg)
		m.StorageDeviceChoice = &VssStorageConfiguration_StorageDeviceList{msg}
		return true, err
	case 8: // storage_class_choice.default_storage_class
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.StorageClassChoice = &VssStorageConfiguration_DefaultStorageClass{msg}
		return true, err
	case 9: // storage_class_choice.storage_class_list
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema_fleet.FleetStorageClassListType)
		err := b.DecodeMessage(msg)
		m.StorageClassChoice = &VssStorageConfiguration_StorageClassList{msg}
		return true, err
	case 11: // static_route_choice.no_static_routes
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.StaticRouteChoice = &VssStorageConfiguration_NoStaticRoutes{msg}
		return true, err
	case 12: // static_route_choice.static_routes
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(StaticRoutesListType)
		err := b.DecodeMessage(msg)
		m.StaticRouteChoice = &VssStorageConfiguration_StaticRoutes{msg}
		return true, err
	default:
		return false, nil
	}
}

func _VssStorageConfiguration_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*VssStorageConfiguration)
	// storage_interface_choice
	switch x := m.StorageInterfaceChoice.(type) {
	case *VssStorageConfiguration_NoStorageInterfaces:
		s := proto.Size(x.NoStorageInterfaces)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *VssStorageConfiguration_StorageInterfaceList:
		s := proto.Size(x.StorageInterfaceList)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	// storage_device_choice
	switch x := m.StorageDeviceChoice.(type) {
	case *VssStorageConfiguration_NoStorageDevice:
		s := proto.Size(x.NoStorageDevice)
		n += proto.SizeVarint(5<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *VssStorageConfiguration_StorageDeviceList:
		s := proto.Size(x.StorageDeviceList)
		n += proto.SizeVarint(6<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	// storage_class_choice
	switch x := m.StorageClassChoice.(type) {
	case *VssStorageConfiguration_DefaultStorageClass:
		s := proto.Size(x.DefaultStorageClass)
		n += proto.SizeVarint(8<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *VssStorageConfiguration_StorageClassList:
		s := proto.Size(x.StorageClassList)
		n += proto.SizeVarint(9<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	// static_route_choice
	switch x := m.StaticRouteChoice.(type) {
	case *VssStorageConfiguration_NoStaticRoutes:
		s := proto.Size(x.NoStaticRoutes)
		n += proto.SizeVarint(11<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *VssStorageConfiguration_StaticRoutes:
		s := proto.Size(x.StaticRoutes)
		n += proto.SizeVarint(12<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// GlobalSpecType
//
// x-displayName: "Global Specification"
// Shape of the voltstack site specification
type GlobalSpecType struct {
	// Generic Server Certified Hardware
	//
	// x-displayName: "Generic Server Certified Hardware"
	// x-example: "isv-8000-series-voltstack-combo"
	// x-required
	// Name for generic server certified hardware to form this voltstack site.
	VolterraCertifiedHw string `protobuf:"bytes,1,opt,name=volterra_certified_hw,json=volterraCertifiedHw,proto3" json:"volterra_certified_hw,omitempty"`
	// Master Nodes
	//
	// x-displayName: "Master Nodes"
	// x-required
	// x-example: "master-0"
	// Names of master nodes
	MasterNodes []string `protobuf:"bytes,2,rep,name=master_nodes,json=masterNodes" json:"master_nodes,omitempty"`
	// Worker Nodes
	//
	// x-displayName: "Worker Nodes"
	// x-example: "worker-0"
	// Names of worker nodes
	WorkerNodes []string `protobuf:"bytes,3,rep,name=worker_nodes,json=workerNodes" json:"worker_nodes,omitempty"`
	// Software Version
	//
	// x-displayName: "Software Version"
	// x-example: "value"
	// Desired volterra software version that should be installed on the site
	VolterraSoftwareVersion string `protobuf:"bytes,4,opt,name=volterra_software_version,json=volterraSoftwareVersion,proto3" json:"volterra_software_version,omitempty"`
	// Operating System Version
	//
	// x-displayName: "Operating System Version"
	// x-example: "value"
	// Desired Operating System version that should be installed on the site
	OperatingSystemVersion string `protobuf:"bytes,5,opt,name=operating_system_version,json=operatingSystemVersion,proto3" json:"operating_system_version,omitempty"`
	// Select Bond Configuration
	//
	// x-displayName: "Select Bond Configuration"
	// x-required
	// Add bond interface devices to the voltstack site
	//
	// Types that are valid to be assigned to BondChoice:
	//	*GlobalSpecType_NoBondDevices
	//	*GlobalSpecType_BondDeviceList
	BondChoice isGlobalSpecType_BondChoice `protobuf_oneof:"bond_choice"`
	// Select to Configure Networking
	//
	// x-displayName: "Select to Configure Networking"
	// x-required
	// Select to use default or custom networking configuration
	//
	// Types that are valid to be assigned to NetworkCfgChoice:
	//	*GlobalSpecType_DefaultNetworkConfig
	//	*GlobalSpecType_CustomNetworkConfig
	NetworkCfgChoice isGlobalSpecType_NetworkCfgChoice `protobuf_oneof:"network_cfg_choice"`
	// Select to Configure Storage
	//
	// x-displayName: "Select to Configure Storage"
	// x-required
	// Select to use default or custom storage configuration
	//
	// Types that are valid to be assigned to StorageCfgChoice:
	//	*GlobalSpecType_DefaultStorageConfig
	//	*GlobalSpecType_CustomStorageConfig
	StorageCfgChoice isGlobalSpecType_StorageCfgChoice `protobuf_oneof:"storage_cfg_choice"`
	// Select GPU Enable/Disable
	//
	// x-displayName: "Enable/Disable GPU"
	// x-required
	// Enable or Disable GPU for this Site
	//
	// Types that are valid to be assigned to GpuChoice:
	//	*GlobalSpecType_DisableGpu
	//	*GlobalSpecType_EnableGpu
	GpuChoice isGlobalSpecType_GpuChoice `protobuf_oneof:"gpu_choice"`
	// address
	//
	// x-displayName: "Geographical Address"
	// x-example: "123 Street, city, country, postal code"
	// Site's geographical address that can be used determine its latitude and longitude.
	Address string `protobuf:"bytes,18,opt,name=address,proto3" json:"address,omitempty"`
	// coordinates
	//
	// x-displayName: "Coordinates"
	// Coordinates of the site, longitude and latitude
	Coordinates *ves_io_schema_site.Coordinates `protobuf:"bytes,19,opt,name=coordinates" json:"coordinates,omitempty"`
	// Site Local K8s API access
	//
	// x-displayName: "Site Local K8s API access"
	// x-required
	// Enable/Disable choice for site local K8s API access
	//
	// Types that are valid to be assigned to K8SClusterChoice:
	//	*GlobalSpecType_NoK8SCluster
	//	*GlobalSpecType_K8SCluster
	K8SClusterChoice isGlobalSpecType_K8SClusterChoice `protobuf_oneof:"k8s_cluster_choice"`
	// Logs Streaming
	//
	// x-displayName: "Logs Streaming"
	// x-required
	// Select Logs receiver for logs streaming
	//
	// Types that are valid to be assigned to LogsReceiverChoice:
	//	*GlobalSpecType_LogsStreamingDisabled
	//	*GlobalSpecType_LogReceiver
	LogsReceiverChoice isGlobalSpecType_LogsReceiverChoice `protobuf_oneof:"logs_receiver_choice"`
	// USB Device Policy
	//
	// x-displayName: "USB Device Policy"
	// x-required
	// Select USB device policy
	//
	// Types that are valid to be assigned to UsbPolicyChoice:
	//	*GlobalSpecType_DenyAllUsb
	//	*GlobalSpecType_AllowAllUsb
	//	*GlobalSpecType_UsbPolicy
	UsbPolicyChoice isGlobalSpecType_UsbPolicyChoice `protobuf_oneof:"usb_policy_choice"`
	// view_internal
	//
	// x-displayName: "View Internal"
	// Reference to view internal object
	ViewInternal *ves_io_schema_views.ObjectRefType `protobuf:"bytes,1000,opt,name=view_internal,json=viewInternal" json:"view_internal,omitempty"`
}

func (m *GlobalSpecType) Reset()                    { *m = GlobalSpecType{} }
func (*GlobalSpecType) ProtoMessage()               {}
func (*GlobalSpecType) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{10} }

type isGlobalSpecType_BondChoice interface {
	isGlobalSpecType_BondChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isGlobalSpecType_NetworkCfgChoice interface {
	isGlobalSpecType_NetworkCfgChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isGlobalSpecType_StorageCfgChoice interface {
	isGlobalSpecType_StorageCfgChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isGlobalSpecType_GpuChoice interface {
	isGlobalSpecType_GpuChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isGlobalSpecType_K8SClusterChoice interface {
	isGlobalSpecType_K8SClusterChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isGlobalSpecType_LogsReceiverChoice interface {
	isGlobalSpecType_LogsReceiverChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isGlobalSpecType_UsbPolicyChoice interface {
	isGlobalSpecType_UsbPolicyChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type GlobalSpecType_NoBondDevices struct {
	NoBondDevices *ves_io_schema4.Empty `protobuf:"bytes,7,opt,name=no_bond_devices,json=noBondDevices,oneof"`
}
type GlobalSpecType_BondDeviceList struct {
	BondDeviceList *ves_io_schema_fleet.FleetBondDevicesListType `protobuf:"bytes,8,opt,name=bond_device_list,json=bondDeviceList,oneof"`
}
type GlobalSpecType_DefaultNetworkConfig struct {
	DefaultNetworkConfig *ves_io_schema4.Empty `protobuf:"bytes,10,opt,name=default_network_config,json=defaultNetworkConfig,oneof"`
}
type GlobalSpecType_CustomNetworkConfig struct {
	CustomNetworkConfig *VssNetworkConfiguration `protobuf:"bytes,11,opt,name=custom_network_config,json=customNetworkConfig,oneof"`
}
type GlobalSpecType_DefaultStorageConfig struct {
	DefaultStorageConfig *ves_io_schema4.Empty `protobuf:"bytes,13,opt,name=default_storage_config,json=defaultStorageConfig,oneof"`
}
type GlobalSpecType_CustomStorageConfig struct {
	CustomStorageConfig *VssStorageConfiguration `protobuf:"bytes,14,opt,name=custom_storage_config,json=customStorageConfig,oneof"`
}
type GlobalSpecType_DisableGpu struct {
	DisableGpu *ves_io_schema4.Empty `protobuf:"bytes,16,opt,name=disable_gpu,json=disableGpu,oneof"`
}
type GlobalSpecType_EnableGpu struct {
	EnableGpu *ves_io_schema4.Empty `protobuf:"bytes,17,opt,name=enable_gpu,json=enableGpu,oneof"`
}
type GlobalSpecType_NoK8SCluster struct {
	NoK8SCluster *ves_io_schema4.Empty `protobuf:"bytes,21,opt,name=no_k8s_cluster,json=noK8sCluster,oneof"`
}
type GlobalSpecType_K8SCluster struct {
	K8SCluster *ves_io_schema_views.ObjectRefType `protobuf:"bytes,22,opt,name=k8s_cluster,json=k8sCluster,oneof"`
}
type GlobalSpecType_LogsStreamingDisabled struct {
	LogsStreamingDisabled *ves_io_schema4.Empty `protobuf:"bytes,24,opt,name=logs_streaming_disabled,json=logsStreamingDisabled,oneof"`
}
type GlobalSpecType_LogReceiver struct {
	LogReceiver *ves_io_schema_views.ObjectRefType `protobuf:"bytes,25,opt,name=log_receiver,json=logReceiver,oneof"`
}
type GlobalSpecType_DenyAllUsb struct {
	DenyAllUsb *ves_io_schema4.Empty `protobuf:"bytes,27,opt,name=deny_all_usb,json=denyAllUsb,oneof"`
}
type GlobalSpecType_AllowAllUsb struct {
	AllowAllUsb *ves_io_schema4.Empty `protobuf:"bytes,28,opt,name=allow_all_usb,json=allowAllUsb,oneof"`
}
type GlobalSpecType_UsbPolicy struct {
	UsbPolicy *ves_io_schema_views.ObjectRefType `protobuf:"bytes,29,opt,name=usb_policy,json=usbPolicy,oneof"`
}

func (*GlobalSpecType_NoBondDevices) isGlobalSpecType_BondChoice()                 {}
func (*GlobalSpecType_BondDeviceList) isGlobalSpecType_BondChoice()                {}
func (*GlobalSpecType_DefaultNetworkConfig) isGlobalSpecType_NetworkCfgChoice()    {}
func (*GlobalSpecType_CustomNetworkConfig) isGlobalSpecType_NetworkCfgChoice()     {}
func (*GlobalSpecType_DefaultStorageConfig) isGlobalSpecType_StorageCfgChoice()    {}
func (*GlobalSpecType_CustomStorageConfig) isGlobalSpecType_StorageCfgChoice()     {}
func (*GlobalSpecType_DisableGpu) isGlobalSpecType_GpuChoice()                     {}
func (*GlobalSpecType_EnableGpu) isGlobalSpecType_GpuChoice()                      {}
func (*GlobalSpecType_NoK8SCluster) isGlobalSpecType_K8SClusterChoice()            {}
func (*GlobalSpecType_K8SCluster) isGlobalSpecType_K8SClusterChoice()              {}
func (*GlobalSpecType_LogsStreamingDisabled) isGlobalSpecType_LogsReceiverChoice() {}
func (*GlobalSpecType_LogReceiver) isGlobalSpecType_LogsReceiverChoice()           {}
func (*GlobalSpecType_DenyAllUsb) isGlobalSpecType_UsbPolicyChoice()               {}
func (*GlobalSpecType_AllowAllUsb) isGlobalSpecType_UsbPolicyChoice()              {}
func (*GlobalSpecType_UsbPolicy) isGlobalSpecType_UsbPolicyChoice()                {}

func (m *GlobalSpecType) GetBondChoice() isGlobalSpecType_BondChoice {
	if m != nil {
		return m.BondChoice
	}
	return nil
}
func (m *GlobalSpecType) GetNetworkCfgChoice() isGlobalSpecType_NetworkCfgChoice {
	if m != nil {
		return m.NetworkCfgChoice
	}
	return nil
}
func (m *GlobalSpecType) GetStorageCfgChoice() isGlobalSpecType_StorageCfgChoice {
	if m != nil {
		return m.StorageCfgChoice
	}
	return nil
}
func (m *GlobalSpecType) GetGpuChoice() isGlobalSpecType_GpuChoice {
	if m != nil {
		return m.GpuChoice
	}
	return nil
}
func (m *GlobalSpecType) GetK8SClusterChoice() isGlobalSpecType_K8SClusterChoice {
	if m != nil {
		return m.K8SClusterChoice
	}
	return nil
}
func (m *GlobalSpecType) GetLogsReceiverChoice() isGlobalSpecType_LogsReceiverChoice {
	if m != nil {
		return m.LogsReceiverChoice
	}
	return nil
}
func (m *GlobalSpecType) GetUsbPolicyChoice() isGlobalSpecType_UsbPolicyChoice {
	if m != nil {
		return m.UsbPolicyChoice
	}
	return nil
}

func (m *GlobalSpecType) GetVolterraCertifiedHw() string {
	if m != nil {
		return m.VolterraCertifiedHw
	}
	return ""
}

func (m *GlobalSpecType) GetMasterNodes() []string {
	if m != nil {
		return m.MasterNodes
	}
	return nil
}

func (m *GlobalSpecType) GetWorkerNodes() []string {
	if m != nil {
		return m.WorkerNodes
	}
	return nil
}

func (m *GlobalSpecType) GetVolterraSoftwareVersion() string {
	if m != nil {
		return m.VolterraSoftwareVersion
	}
	return ""
}

func (m *GlobalSpecType) GetOperatingSystemVersion() string {
	if m != nil {
		return m.OperatingSystemVersion
	}
	return ""
}

func (m *GlobalSpecType) GetNoBondDevices() *ves_io_schema4.Empty {
	if x, ok := m.GetBondChoice().(*GlobalSpecType_NoBondDevices); ok {
		return x.NoBondDevices
	}
	return nil
}

func (m *GlobalSpecType) GetBondDeviceList() *ves_io_schema_fleet.FleetBondDevicesListType {
	if x, ok := m.GetBondChoice().(*GlobalSpecType_BondDeviceList); ok {
		return x.BondDeviceList
	}
	return nil
}

func (m *GlobalSpecType) GetDefaultNetworkConfig() *ves_io_schema4.Empty {
	if x, ok := m.GetNetworkCfgChoice().(*GlobalSpecType_DefaultNetworkConfig); ok {
		return x.DefaultNetworkConfig
	}
	return nil
}

func (m *GlobalSpecType) GetCustomNetworkConfig() *VssNetworkConfiguration {
	if x, ok := m.GetNetworkCfgChoice().(*GlobalSpecType_CustomNetworkConfig); ok {
		return x.CustomNetworkConfig
	}
	return nil
}

func (m *GlobalSpecType) GetDefaultStorageConfig() *ves_io_schema4.Empty {
	if x, ok := m.GetStorageCfgChoice().(*GlobalSpecType_DefaultStorageConfig); ok {
		return x.DefaultStorageConfig
	}
	return nil
}

func (m *GlobalSpecType) GetCustomStorageConfig() *VssStorageConfiguration {
	if x, ok := m.GetStorageCfgChoice().(*GlobalSpecType_CustomStorageConfig); ok {
		return x.CustomStorageConfig
	}
	return nil
}

func (m *GlobalSpecType) GetDisableGpu() *ves_io_schema4.Empty {
	if x, ok := m.GetGpuChoice().(*GlobalSpecType_DisableGpu); ok {
		return x.DisableGpu
	}
	return nil
}

func (m *GlobalSpecType) GetEnableGpu() *ves_io_schema4.Empty {
	if x, ok := m.GetGpuChoice().(*GlobalSpecType_EnableGpu); ok {
		return x.EnableGpu
	}
	return nil
}

func (m *GlobalSpecType) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *GlobalSpecType) GetCoordinates() *ves_io_schema_site.Coordinates {
	if m != nil {
		return m.Coordinates
	}
	return nil
}

func (m *GlobalSpecType) GetNoK8SCluster() *ves_io_schema4.Empty {
	if x, ok := m.GetK8SClusterChoice().(*GlobalSpecType_NoK8SCluster); ok {
		return x.NoK8SCluster
	}
	return nil
}

func (m *GlobalSpecType) GetK8SCluster() *ves_io_schema_views.ObjectRefType {
	if x, ok := m.GetK8SClusterChoice().(*GlobalSpecType_K8SCluster); ok {
		return x.K8SCluster
	}
	return nil
}

func (m *GlobalSpecType) GetLogsStreamingDisabled() *ves_io_schema4.Empty {
	if x, ok := m.GetLogsReceiverChoice().(*GlobalSpecType_LogsStreamingDisabled); ok {
		return x.LogsStreamingDisabled
	}
	return nil
}

func (m *GlobalSpecType) GetLogReceiver() *ves_io_schema_views.ObjectRefType {
	if x, ok := m.GetLogsReceiverChoice().(*GlobalSpecType_LogReceiver); ok {
		return x.LogReceiver
	}
	return nil
}

func (m *GlobalSpecType) GetDenyAllUsb() *ves_io_schema4.Empty {
	if x, ok := m.GetUsbPolicyChoice().(*GlobalSpecType_DenyAllUsb); ok {
		return x.DenyAllUsb
	}
	return nil
}

func (m *GlobalSpecType) GetAllowAllUsb() *ves_io_schema4.Empty {
	if x, ok := m.GetUsbPolicyChoice().(*GlobalSpecType_AllowAllUsb); ok {
		return x.AllowAllUsb
	}
	return nil
}

func (m *GlobalSpecType) GetUsbPolicy() *ves_io_schema_views.ObjectRefType {
	if x, ok := m.GetUsbPolicyChoice().(*GlobalSpecType_UsbPolicy); ok {
		return x.UsbPolicy
	}
	return nil
}

func (m *GlobalSpecType) GetViewInternal() *ves_io_schema_views.ObjectRefType {
	if m != nil {
		return m.ViewInternal
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*GlobalSpecType) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _GlobalSpecType_OneofMarshaler, _GlobalSpecType_OneofUnmarshaler, _GlobalSpecType_OneofSizer, []interface{}{
		(*GlobalSpecType_NoBondDevices)(nil),
		(*GlobalSpecType_BondDeviceList)(nil),
		(*GlobalSpecType_DefaultNetworkConfig)(nil),
		(*GlobalSpecType_CustomNetworkConfig)(nil),
		(*GlobalSpecType_DefaultStorageConfig)(nil),
		(*GlobalSpecType_CustomStorageConfig)(nil),
		(*GlobalSpecType_DisableGpu)(nil),
		(*GlobalSpecType_EnableGpu)(nil),
		(*GlobalSpecType_NoK8SCluster)(nil),
		(*GlobalSpecType_K8SCluster)(nil),
		(*GlobalSpecType_LogsStreamingDisabled)(nil),
		(*GlobalSpecType_LogReceiver)(nil),
		(*GlobalSpecType_DenyAllUsb)(nil),
		(*GlobalSpecType_AllowAllUsb)(nil),
		(*GlobalSpecType_UsbPolicy)(nil),
	}
}

func _GlobalSpecType_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*GlobalSpecType)
	// bond_choice
	switch x := m.BondChoice.(type) {
	case *GlobalSpecType_NoBondDevices:
		_ = b.EncodeVarint(7<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.NoBondDevices); err != nil {
			return err
		}
	case *GlobalSpecType_BondDeviceList:
		_ = b.EncodeVarint(8<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.BondDeviceList); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("GlobalSpecType.BondChoice has unexpected type %T", x)
	}
	// network_cfg_choice
	switch x := m.NetworkCfgChoice.(type) {
	case *GlobalSpecType_DefaultNetworkConfig:
		_ = b.EncodeVarint(10<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.DefaultNetworkConfig); err != nil {
			return err
		}
	case *GlobalSpecType_CustomNetworkConfig:
		_ = b.EncodeVarint(11<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.CustomNetworkConfig); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("GlobalSpecType.NetworkCfgChoice has unexpected type %T", x)
	}
	// storage_cfg_choice
	switch x := m.StorageCfgChoice.(type) {
	case *GlobalSpecType_DefaultStorageConfig:
		_ = b.EncodeVarint(13<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.DefaultStorageConfig); err != nil {
			return err
		}
	case *GlobalSpecType_CustomStorageConfig:
		_ = b.EncodeVarint(14<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.CustomStorageConfig); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("GlobalSpecType.StorageCfgChoice has unexpected type %T", x)
	}
	// gpu_choice
	switch x := m.GpuChoice.(type) {
	case *GlobalSpecType_DisableGpu:
		_ = b.EncodeVarint(16<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.DisableGpu); err != nil {
			return err
		}
	case *GlobalSpecType_EnableGpu:
		_ = b.EncodeVarint(17<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.EnableGpu); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("GlobalSpecType.GpuChoice has unexpected type %T", x)
	}
	// k8s_cluster_choice
	switch x := m.K8SClusterChoice.(type) {
	case *GlobalSpecType_NoK8SCluster:
		_ = b.EncodeVarint(21<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.NoK8SCluster); err != nil {
			return err
		}
	case *GlobalSpecType_K8SCluster:
		_ = b.EncodeVarint(22<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.K8SCluster); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("GlobalSpecType.K8SClusterChoice has unexpected type %T", x)
	}
	// logs_receiver_choice
	switch x := m.LogsReceiverChoice.(type) {
	case *GlobalSpecType_LogsStreamingDisabled:
		_ = b.EncodeVarint(24<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.LogsStreamingDisabled); err != nil {
			return err
		}
	case *GlobalSpecType_LogReceiver:
		_ = b.EncodeVarint(25<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.LogReceiver); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("GlobalSpecType.LogsReceiverChoice has unexpected type %T", x)
	}
	// usb_policy_choice
	switch x := m.UsbPolicyChoice.(type) {
	case *GlobalSpecType_DenyAllUsb:
		_ = b.EncodeVarint(27<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.DenyAllUsb); err != nil {
			return err
		}
	case *GlobalSpecType_AllowAllUsb:
		_ = b.EncodeVarint(28<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.AllowAllUsb); err != nil {
			return err
		}
	case *GlobalSpecType_UsbPolicy:
		_ = b.EncodeVarint(29<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.UsbPolicy); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("GlobalSpecType.UsbPolicyChoice has unexpected type %T", x)
	}
	return nil
}

func _GlobalSpecType_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*GlobalSpecType)
	switch tag {
	case 7: // bond_choice.no_bond_devices
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.BondChoice = &GlobalSpecType_NoBondDevices{msg}
		return true, err
	case 8: // bond_choice.bond_device_list
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema_fleet.FleetBondDevicesListType)
		err := b.DecodeMessage(msg)
		m.BondChoice = &GlobalSpecType_BondDeviceList{msg}
		return true, err
	case 10: // network_cfg_choice.default_network_config
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.NetworkCfgChoice = &GlobalSpecType_DefaultNetworkConfig{msg}
		return true, err
	case 11: // network_cfg_choice.custom_network_config
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(VssNetworkConfiguration)
		err := b.DecodeMessage(msg)
		m.NetworkCfgChoice = &GlobalSpecType_CustomNetworkConfig{msg}
		return true, err
	case 13: // storage_cfg_choice.default_storage_config
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.StorageCfgChoice = &GlobalSpecType_DefaultStorageConfig{msg}
		return true, err
	case 14: // storage_cfg_choice.custom_storage_config
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(VssStorageConfiguration)
		err := b.DecodeMessage(msg)
		m.StorageCfgChoice = &GlobalSpecType_CustomStorageConfig{msg}
		return true, err
	case 16: // gpu_choice.disable_gpu
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.GpuChoice = &GlobalSpecType_DisableGpu{msg}
		return true, err
	case 17: // gpu_choice.enable_gpu
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.GpuChoice = &GlobalSpecType_EnableGpu{msg}
		return true, err
	case 21: // k8s_cluster_choice.no_k8s_cluster
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.K8SClusterChoice = &GlobalSpecType_NoK8SCluster{msg}
		return true, err
	case 22: // k8s_cluster_choice.k8s_cluster
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema_views.ObjectRefType)
		err := b.DecodeMessage(msg)
		m.K8SClusterChoice = &GlobalSpecType_K8SCluster{msg}
		return true, err
	case 24: // logs_receiver_choice.logs_streaming_disabled
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.LogsReceiverChoice = &GlobalSpecType_LogsStreamingDisabled{msg}
		return true, err
	case 25: // logs_receiver_choice.log_receiver
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema_views.ObjectRefType)
		err := b.DecodeMessage(msg)
		m.LogsReceiverChoice = &GlobalSpecType_LogReceiver{msg}
		return true, err
	case 27: // usb_policy_choice.deny_all_usb
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.UsbPolicyChoice = &GlobalSpecType_DenyAllUsb{msg}
		return true, err
	case 28: // usb_policy_choice.allow_all_usb
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.UsbPolicyChoice = &GlobalSpecType_AllowAllUsb{msg}
		return true, err
	case 29: // usb_policy_choice.usb_policy
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema_views.ObjectRefType)
		err := b.DecodeMessage(msg)
		m.UsbPolicyChoice = &GlobalSpecType_UsbPolicy{msg}
		return true, err
	default:
		return false, nil
	}
}

func _GlobalSpecType_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*GlobalSpecType)
	// bond_choice
	switch x := m.BondChoice.(type) {
	case *GlobalSpecType_NoBondDevices:
		s := proto.Size(x.NoBondDevices)
		n += proto.SizeVarint(7<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *GlobalSpecType_BondDeviceList:
		s := proto.Size(x.BondDeviceList)
		n += proto.SizeVarint(8<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	// network_cfg_choice
	switch x := m.NetworkCfgChoice.(type) {
	case *GlobalSpecType_DefaultNetworkConfig:
		s := proto.Size(x.DefaultNetworkConfig)
		n += proto.SizeVarint(10<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *GlobalSpecType_CustomNetworkConfig:
		s := proto.Size(x.CustomNetworkConfig)
		n += proto.SizeVarint(11<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	// storage_cfg_choice
	switch x := m.StorageCfgChoice.(type) {
	case *GlobalSpecType_DefaultStorageConfig:
		s := proto.Size(x.DefaultStorageConfig)
		n += proto.SizeVarint(13<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *GlobalSpecType_CustomStorageConfig:
		s := proto.Size(x.CustomStorageConfig)
		n += proto.SizeVarint(14<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	// gpu_choice
	switch x := m.GpuChoice.(type) {
	case *GlobalSpecType_DisableGpu:
		s := proto.Size(x.DisableGpu)
		n += proto.SizeVarint(16<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *GlobalSpecType_EnableGpu:
		s := proto.Size(x.EnableGpu)
		n += proto.SizeVarint(17<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	// k8s_cluster_choice
	switch x := m.K8SClusterChoice.(type) {
	case *GlobalSpecType_NoK8SCluster:
		s := proto.Size(x.NoK8SCluster)
		n += proto.SizeVarint(21<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *GlobalSpecType_K8SCluster:
		s := proto.Size(x.K8SCluster)
		n += proto.SizeVarint(22<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	// logs_receiver_choice
	switch x := m.LogsReceiverChoice.(type) {
	case *GlobalSpecType_LogsStreamingDisabled:
		s := proto.Size(x.LogsStreamingDisabled)
		n += proto.SizeVarint(24<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *GlobalSpecType_LogReceiver:
		s := proto.Size(x.LogReceiver)
		n += proto.SizeVarint(25<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	// usb_policy_choice
	switch x := m.UsbPolicyChoice.(type) {
	case *GlobalSpecType_DenyAllUsb:
		s := proto.Size(x.DenyAllUsb)
		n += proto.SizeVarint(27<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *GlobalSpecType_AllowAllUsb:
		s := proto.Size(x.AllowAllUsb)
		n += proto.SizeVarint(28<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *GlobalSpecType_UsbPolicy:
		s := proto.Size(x.UsbPolicy)
		n += proto.SizeVarint(29<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// CreateSpecType
//
// x-displayName: "Create voltstack site VPC site"
// Shape of the voltstack site VPC site specification
type CreateSpecType struct {
	VolterraCertifiedHw     string   `protobuf:"bytes,1,opt,name=volterra_certified_hw,json=volterraCertifiedHw,proto3" json:"volterra_certified_hw,omitempty"`
	MasterNodes             []string `protobuf:"bytes,2,rep,name=master_nodes,json=masterNodes" json:"master_nodes,omitempty"`
	WorkerNodes             []string `protobuf:"bytes,3,rep,name=worker_nodes,json=workerNodes" json:"worker_nodes,omitempty"`
	VolterraSoftwareVersion string   `protobuf:"bytes,4,opt,name=volterra_software_version,json=volterraSoftwareVersion,proto3" json:"volterra_software_version,omitempty"`
	OperatingSystemVersion  string   `protobuf:"bytes,5,opt,name=operating_system_version,json=operatingSystemVersion,proto3" json:"operating_system_version,omitempty"`
	// Types that are valid to be assigned to BondChoice:
	//	*CreateSpecType_NoBondDevices
	//	*CreateSpecType_BondDeviceList
	BondChoice isCreateSpecType_BondChoice `protobuf_oneof:"bond_choice"`
	// Types that are valid to be assigned to NetworkCfgChoice:
	//	*CreateSpecType_DefaultNetworkConfig
	//	*CreateSpecType_CustomNetworkConfig
	NetworkCfgChoice isCreateSpecType_NetworkCfgChoice `protobuf_oneof:"network_cfg_choice"`
	// Types that are valid to be assigned to StorageCfgChoice:
	//	*CreateSpecType_DefaultStorageConfig
	//	*CreateSpecType_CustomStorageConfig
	StorageCfgChoice isCreateSpecType_StorageCfgChoice `protobuf_oneof:"storage_cfg_choice"`
	// Types that are valid to be assigned to GpuChoice:
	//	*CreateSpecType_DisableGpu
	//	*CreateSpecType_EnableGpu
	GpuChoice   isCreateSpecType_GpuChoice      `protobuf_oneof:"gpu_choice"`
	Address     string                          `protobuf:"bytes,18,opt,name=address,proto3" json:"address,omitempty"`
	Coordinates *ves_io_schema_site.Coordinates `protobuf:"bytes,19,opt,name=coordinates" json:"coordinates,omitempty"`
	// Types that are valid to be assigned to K8SClusterChoice:
	//	*CreateSpecType_NoK8SCluster
	//	*CreateSpecType_K8SCluster
	K8SClusterChoice isCreateSpecType_K8SClusterChoice `protobuf_oneof:"k8s_cluster_choice"`
	// Types that are valid to be assigned to LogsReceiverChoice:
	//	*CreateSpecType_LogsStreamingDisabled
	//	*CreateSpecType_LogReceiver
	LogsReceiverChoice isCreateSpecType_LogsReceiverChoice `protobuf_oneof:"logs_receiver_choice"`
	// Types that are valid to be assigned to UsbPolicyChoice:
	//	*CreateSpecType_DenyAllUsb
	//	*CreateSpecType_AllowAllUsb
	//	*CreateSpecType_UsbPolicy
	UsbPolicyChoice isCreateSpecType_UsbPolicyChoice `protobuf_oneof:"usb_policy_choice"`
}

func (m *CreateSpecType) Reset()                    { *m = CreateSpecType{} }
func (*CreateSpecType) ProtoMessage()               {}
func (*CreateSpecType) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{11} }

type isCreateSpecType_BondChoice interface {
	isCreateSpecType_BondChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isCreateSpecType_NetworkCfgChoice interface {
	isCreateSpecType_NetworkCfgChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isCreateSpecType_StorageCfgChoice interface {
	isCreateSpecType_StorageCfgChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isCreateSpecType_GpuChoice interface {
	isCreateSpecType_GpuChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isCreateSpecType_K8SClusterChoice interface {
	isCreateSpecType_K8SClusterChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isCreateSpecType_LogsReceiverChoice interface {
	isCreateSpecType_LogsReceiverChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isCreateSpecType_UsbPolicyChoice interface {
	isCreateSpecType_UsbPolicyChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type CreateSpecType_NoBondDevices struct {
	NoBondDevices *ves_io_schema4.Empty `protobuf:"bytes,7,opt,name=no_bond_devices,json=noBondDevices,oneof"`
}
type CreateSpecType_BondDeviceList struct {
	BondDeviceList *ves_io_schema_fleet.FleetBondDevicesListType `protobuf:"bytes,8,opt,name=bond_device_list,json=bondDeviceList,oneof"`
}
type CreateSpecType_DefaultNetworkConfig struct {
	DefaultNetworkConfig *ves_io_schema4.Empty `protobuf:"bytes,10,opt,name=default_network_config,json=defaultNetworkConfig,oneof"`
}
type CreateSpecType_CustomNetworkConfig struct {
	CustomNetworkConfig *VssNetworkConfiguration `protobuf:"bytes,11,opt,name=custom_network_config,json=customNetworkConfig,oneof"`
}
type CreateSpecType_DefaultStorageConfig struct {
	DefaultStorageConfig *ves_io_schema4.Empty `protobuf:"bytes,13,opt,name=default_storage_config,json=defaultStorageConfig,oneof"`
}
type CreateSpecType_CustomStorageConfig struct {
	CustomStorageConfig *VssStorageConfiguration `protobuf:"bytes,14,opt,name=custom_storage_config,json=customStorageConfig,oneof"`
}
type CreateSpecType_DisableGpu struct {
	DisableGpu *ves_io_schema4.Empty `protobuf:"bytes,16,opt,name=disable_gpu,json=disableGpu,oneof"`
}
type CreateSpecType_EnableGpu struct {
	EnableGpu *ves_io_schema4.Empty `protobuf:"bytes,17,opt,name=enable_gpu,json=enableGpu,oneof"`
}
type CreateSpecType_NoK8SCluster struct {
	NoK8SCluster *ves_io_schema4.Empty `protobuf:"bytes,21,opt,name=no_k8s_cluster,json=noK8sCluster,oneof"`
}
type CreateSpecType_K8SCluster struct {
	K8SCluster *ves_io_schema_views.ObjectRefType `protobuf:"bytes,22,opt,name=k8s_cluster,json=k8sCluster,oneof"`
}
type CreateSpecType_LogsStreamingDisabled struct {
	LogsStreamingDisabled *ves_io_schema4.Empty `protobuf:"bytes,24,opt,name=logs_streaming_disabled,json=logsStreamingDisabled,oneof"`
}
type CreateSpecType_LogReceiver struct {
	LogReceiver *ves_io_schema_views.ObjectRefType `protobuf:"bytes,25,opt,name=log_receiver,json=logReceiver,oneof"`
}
type CreateSpecType_DenyAllUsb struct {
	DenyAllUsb *ves_io_schema4.Empty `protobuf:"bytes,27,opt,name=deny_all_usb,json=denyAllUsb,oneof"`
}
type CreateSpecType_AllowAllUsb struct {
	AllowAllUsb *ves_io_schema4.Empty `protobuf:"bytes,28,opt,name=allow_all_usb,json=allowAllUsb,oneof"`
}
type CreateSpecType_UsbPolicy struct {
	UsbPolicy *ves_io_schema_views.ObjectRefType `protobuf:"bytes,29,opt,name=usb_policy,json=usbPolicy,oneof"`
}

func (*CreateSpecType_NoBondDevices) isCreateSpecType_BondChoice()                 {}
func (*CreateSpecType_BondDeviceList) isCreateSpecType_BondChoice()                {}
func (*CreateSpecType_DefaultNetworkConfig) isCreateSpecType_NetworkCfgChoice()    {}
func (*CreateSpecType_CustomNetworkConfig) isCreateSpecType_NetworkCfgChoice()     {}
func (*CreateSpecType_DefaultStorageConfig) isCreateSpecType_StorageCfgChoice()    {}
func (*CreateSpecType_CustomStorageConfig) isCreateSpecType_StorageCfgChoice()     {}
func (*CreateSpecType_DisableGpu) isCreateSpecType_GpuChoice()                     {}
func (*CreateSpecType_EnableGpu) isCreateSpecType_GpuChoice()                      {}
func (*CreateSpecType_NoK8SCluster) isCreateSpecType_K8SClusterChoice()            {}
func (*CreateSpecType_K8SCluster) isCreateSpecType_K8SClusterChoice()              {}
func (*CreateSpecType_LogsStreamingDisabled) isCreateSpecType_LogsReceiverChoice() {}
func (*CreateSpecType_LogReceiver) isCreateSpecType_LogsReceiverChoice()           {}
func (*CreateSpecType_DenyAllUsb) isCreateSpecType_UsbPolicyChoice()               {}
func (*CreateSpecType_AllowAllUsb) isCreateSpecType_UsbPolicyChoice()              {}
func (*CreateSpecType_UsbPolicy) isCreateSpecType_UsbPolicyChoice()                {}

func (m *CreateSpecType) GetBondChoice() isCreateSpecType_BondChoice {
	if m != nil {
		return m.BondChoice
	}
	return nil
}
func (m *CreateSpecType) GetNetworkCfgChoice() isCreateSpecType_NetworkCfgChoice {
	if m != nil {
		return m.NetworkCfgChoice
	}
	return nil
}
func (m *CreateSpecType) GetStorageCfgChoice() isCreateSpecType_StorageCfgChoice {
	if m != nil {
		return m.StorageCfgChoice
	}
	return nil
}
func (m *CreateSpecType) GetGpuChoice() isCreateSpecType_GpuChoice {
	if m != nil {
		return m.GpuChoice
	}
	return nil
}
func (m *CreateSpecType) GetK8SClusterChoice() isCreateSpecType_K8SClusterChoice {
	if m != nil {
		return m.K8SClusterChoice
	}
	return nil
}
func (m *CreateSpecType) GetLogsReceiverChoice() isCreateSpecType_LogsReceiverChoice {
	if m != nil {
		return m.LogsReceiverChoice
	}
	return nil
}
func (m *CreateSpecType) GetUsbPolicyChoice() isCreateSpecType_UsbPolicyChoice {
	if m != nil {
		return m.UsbPolicyChoice
	}
	return nil
}

func (m *CreateSpecType) GetVolterraCertifiedHw() string {
	if m != nil {
		return m.VolterraCertifiedHw
	}
	return ""
}

func (m *CreateSpecType) GetMasterNodes() []string {
	if m != nil {
		return m.MasterNodes
	}
	return nil
}

func (m *CreateSpecType) GetWorkerNodes() []string {
	if m != nil {
		return m.WorkerNodes
	}
	return nil
}

func (m *CreateSpecType) GetVolterraSoftwareVersion() string {
	if m != nil {
		return m.VolterraSoftwareVersion
	}
	return ""
}

func (m *CreateSpecType) GetOperatingSystemVersion() string {
	if m != nil {
		return m.OperatingSystemVersion
	}
	return ""
}

func (m *CreateSpecType) GetNoBondDevices() *ves_io_schema4.Empty {
	if x, ok := m.GetBondChoice().(*CreateSpecType_NoBondDevices); ok {
		return x.NoBondDevices
	}
	return nil
}

func (m *CreateSpecType) GetBondDeviceList() *ves_io_schema_fleet.FleetBondDevicesListType {
	if x, ok := m.GetBondChoice().(*CreateSpecType_BondDeviceList); ok {
		return x.BondDeviceList
	}
	return nil
}

func (m *CreateSpecType) GetDefaultNetworkConfig() *ves_io_schema4.Empty {
	if x, ok := m.GetNetworkCfgChoice().(*CreateSpecType_DefaultNetworkConfig); ok {
		return x.DefaultNetworkConfig
	}
	return nil
}

func (m *CreateSpecType) GetCustomNetworkConfig() *VssNetworkConfiguration {
	if x, ok := m.GetNetworkCfgChoice().(*CreateSpecType_CustomNetworkConfig); ok {
		return x.CustomNetworkConfig
	}
	return nil
}

func (m *CreateSpecType) GetDefaultStorageConfig() *ves_io_schema4.Empty {
	if x, ok := m.GetStorageCfgChoice().(*CreateSpecType_DefaultStorageConfig); ok {
		return x.DefaultStorageConfig
	}
	return nil
}

func (m *CreateSpecType) GetCustomStorageConfig() *VssStorageConfiguration {
	if x, ok := m.GetStorageCfgChoice().(*CreateSpecType_CustomStorageConfig); ok {
		return x.CustomStorageConfig
	}
	return nil
}

func (m *CreateSpecType) GetDisableGpu() *ves_io_schema4.Empty {
	if x, ok := m.GetGpuChoice().(*CreateSpecType_DisableGpu); ok {
		return x.DisableGpu
	}
	return nil
}

func (m *CreateSpecType) GetEnableGpu() *ves_io_schema4.Empty {
	if x, ok := m.GetGpuChoice().(*CreateSpecType_EnableGpu); ok {
		return x.EnableGpu
	}
	return nil
}

func (m *CreateSpecType) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *CreateSpecType) GetCoordinates() *ves_io_schema_site.Coordinates {
	if m != nil {
		return m.Coordinates
	}
	return nil
}

func (m *CreateSpecType) GetNoK8SCluster() *ves_io_schema4.Empty {
	if x, ok := m.GetK8SClusterChoice().(*CreateSpecType_NoK8SCluster); ok {
		return x.NoK8SCluster
	}
	return nil
}

func (m *CreateSpecType) GetK8SCluster() *ves_io_schema_views.ObjectRefType {
	if x, ok := m.GetK8SClusterChoice().(*CreateSpecType_K8SCluster); ok {
		return x.K8SCluster
	}
	return nil
}

func (m *CreateSpecType) GetLogsStreamingDisabled() *ves_io_schema4.Empty {
	if x, ok := m.GetLogsReceiverChoice().(*CreateSpecType_LogsStreamingDisabled); ok {
		return x.LogsStreamingDisabled
	}
	return nil
}

func (m *CreateSpecType) GetLogReceiver() *ves_io_schema_views.ObjectRefType {
	if x, ok := m.GetLogsReceiverChoice().(*CreateSpecType_LogReceiver); ok {
		return x.LogReceiver
	}
	return nil
}

func (m *CreateSpecType) GetDenyAllUsb() *ves_io_schema4.Empty {
	if x, ok := m.GetUsbPolicyChoice().(*CreateSpecType_DenyAllUsb); ok {
		return x.DenyAllUsb
	}
	return nil
}

func (m *CreateSpecType) GetAllowAllUsb() *ves_io_schema4.Empty {
	if x, ok := m.GetUsbPolicyChoice().(*CreateSpecType_AllowAllUsb); ok {
		return x.AllowAllUsb
	}
	return nil
}

func (m *CreateSpecType) GetUsbPolicy() *ves_io_schema_views.ObjectRefType {
	if x, ok := m.GetUsbPolicyChoice().(*CreateSpecType_UsbPolicy); ok {
		return x.UsbPolicy
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*CreateSpecType) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _CreateSpecType_OneofMarshaler, _CreateSpecType_OneofUnmarshaler, _CreateSpecType_OneofSizer, []interface{}{
		(*CreateSpecType_NoBondDevices)(nil),
		(*CreateSpecType_BondDeviceList)(nil),
		(*CreateSpecType_DefaultNetworkConfig)(nil),
		(*CreateSpecType_CustomNetworkConfig)(nil),
		(*CreateSpecType_DefaultStorageConfig)(nil),
		(*CreateSpecType_CustomStorageConfig)(nil),
		(*CreateSpecType_DisableGpu)(nil),
		(*CreateSpecType_EnableGpu)(nil),
		(*CreateSpecType_NoK8SCluster)(nil),
		(*CreateSpecType_K8SCluster)(nil),
		(*CreateSpecType_LogsStreamingDisabled)(nil),
		(*CreateSpecType_LogReceiver)(nil),
		(*CreateSpecType_DenyAllUsb)(nil),
		(*CreateSpecType_AllowAllUsb)(nil),
		(*CreateSpecType_UsbPolicy)(nil),
	}
}

func _CreateSpecType_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*CreateSpecType)
	// bond_choice
	switch x := m.BondChoice.(type) {
	case *CreateSpecType_NoBondDevices:
		_ = b.EncodeVarint(7<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.NoBondDevices); err != nil {
			return err
		}
	case *CreateSpecType_BondDeviceList:
		_ = b.EncodeVarint(8<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.BondDeviceList); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("CreateSpecType.BondChoice has unexpected type %T", x)
	}
	// network_cfg_choice
	switch x := m.NetworkCfgChoice.(type) {
	case *CreateSpecType_DefaultNetworkConfig:
		_ = b.EncodeVarint(10<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.DefaultNetworkConfig); err != nil {
			return err
		}
	case *CreateSpecType_CustomNetworkConfig:
		_ = b.EncodeVarint(11<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.CustomNetworkConfig); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("CreateSpecType.NetworkCfgChoice has unexpected type %T", x)
	}
	// storage_cfg_choice
	switch x := m.StorageCfgChoice.(type) {
	case *CreateSpecType_DefaultStorageConfig:
		_ = b.EncodeVarint(13<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.DefaultStorageConfig); err != nil {
			return err
		}
	case *CreateSpecType_CustomStorageConfig:
		_ = b.EncodeVarint(14<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.CustomStorageConfig); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("CreateSpecType.StorageCfgChoice has unexpected type %T", x)
	}
	// gpu_choice
	switch x := m.GpuChoice.(type) {
	case *CreateSpecType_DisableGpu:
		_ = b.EncodeVarint(16<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.DisableGpu); err != nil {
			return err
		}
	case *CreateSpecType_EnableGpu:
		_ = b.EncodeVarint(17<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.EnableGpu); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("CreateSpecType.GpuChoice has unexpected type %T", x)
	}
	// k8s_cluster_choice
	switch x := m.K8SClusterChoice.(type) {
	case *CreateSpecType_NoK8SCluster:
		_ = b.EncodeVarint(21<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.NoK8SCluster); err != nil {
			return err
		}
	case *CreateSpecType_K8SCluster:
		_ = b.EncodeVarint(22<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.K8SCluster); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("CreateSpecType.K8SClusterChoice has unexpected type %T", x)
	}
	// logs_receiver_choice
	switch x := m.LogsReceiverChoice.(type) {
	case *CreateSpecType_LogsStreamingDisabled:
		_ = b.EncodeVarint(24<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.LogsStreamingDisabled); err != nil {
			return err
		}
	case *CreateSpecType_LogReceiver:
		_ = b.EncodeVarint(25<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.LogReceiver); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("CreateSpecType.LogsReceiverChoice has unexpected type %T", x)
	}
	// usb_policy_choice
	switch x := m.UsbPolicyChoice.(type) {
	case *CreateSpecType_DenyAllUsb:
		_ = b.EncodeVarint(27<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.DenyAllUsb); err != nil {
			return err
		}
	case *CreateSpecType_AllowAllUsb:
		_ = b.EncodeVarint(28<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.AllowAllUsb); err != nil {
			return err
		}
	case *CreateSpecType_UsbPolicy:
		_ = b.EncodeVarint(29<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.UsbPolicy); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("CreateSpecType.UsbPolicyChoice has unexpected type %T", x)
	}
	return nil
}

func _CreateSpecType_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*CreateSpecType)
	switch tag {
	case 7: // bond_choice.no_bond_devices
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.BondChoice = &CreateSpecType_NoBondDevices{msg}
		return true, err
	case 8: // bond_choice.bond_device_list
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema_fleet.FleetBondDevicesListType)
		err := b.DecodeMessage(msg)
		m.BondChoice = &CreateSpecType_BondDeviceList{msg}
		return true, err
	case 10: // network_cfg_choice.default_network_config
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.NetworkCfgChoice = &CreateSpecType_DefaultNetworkConfig{msg}
		return true, err
	case 11: // network_cfg_choice.custom_network_config
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(VssNetworkConfiguration)
		err := b.DecodeMessage(msg)
		m.NetworkCfgChoice = &CreateSpecType_CustomNetworkConfig{msg}
		return true, err
	case 13: // storage_cfg_choice.default_storage_config
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.StorageCfgChoice = &CreateSpecType_DefaultStorageConfig{msg}
		return true, err
	case 14: // storage_cfg_choice.custom_storage_config
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(VssStorageConfiguration)
		err := b.DecodeMessage(msg)
		m.StorageCfgChoice = &CreateSpecType_CustomStorageConfig{msg}
		return true, err
	case 16: // gpu_choice.disable_gpu
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.GpuChoice = &CreateSpecType_DisableGpu{msg}
		return true, err
	case 17: // gpu_choice.enable_gpu
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.GpuChoice = &CreateSpecType_EnableGpu{msg}
		return true, err
	case 21: // k8s_cluster_choice.no_k8s_cluster
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.K8SClusterChoice = &CreateSpecType_NoK8SCluster{msg}
		return true, err
	case 22: // k8s_cluster_choice.k8s_cluster
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema_views.ObjectRefType)
		err := b.DecodeMessage(msg)
		m.K8SClusterChoice = &CreateSpecType_K8SCluster{msg}
		return true, err
	case 24: // logs_receiver_choice.logs_streaming_disabled
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.LogsReceiverChoice = &CreateSpecType_LogsStreamingDisabled{msg}
		return true, err
	case 25: // logs_receiver_choice.log_receiver
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema_views.ObjectRefType)
		err := b.DecodeMessage(msg)
		m.LogsReceiverChoice = &CreateSpecType_LogReceiver{msg}
		return true, err
	case 27: // usb_policy_choice.deny_all_usb
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.UsbPolicyChoice = &CreateSpecType_DenyAllUsb{msg}
		return true, err
	case 28: // usb_policy_choice.allow_all_usb
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.UsbPolicyChoice = &CreateSpecType_AllowAllUsb{msg}
		return true, err
	case 29: // usb_policy_choice.usb_policy
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema_views.ObjectRefType)
		err := b.DecodeMessage(msg)
		m.UsbPolicyChoice = &CreateSpecType_UsbPolicy{msg}
		return true, err
	default:
		return false, nil
	}
}

func _CreateSpecType_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*CreateSpecType)
	// bond_choice
	switch x := m.BondChoice.(type) {
	case *CreateSpecType_NoBondDevices:
		s := proto.Size(x.NoBondDevices)
		n += proto.SizeVarint(7<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *CreateSpecType_BondDeviceList:
		s := proto.Size(x.BondDeviceList)
		n += proto.SizeVarint(8<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	// network_cfg_choice
	switch x := m.NetworkCfgChoice.(type) {
	case *CreateSpecType_DefaultNetworkConfig:
		s := proto.Size(x.DefaultNetworkConfig)
		n += proto.SizeVarint(10<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *CreateSpecType_CustomNetworkConfig:
		s := proto.Size(x.CustomNetworkConfig)
		n += proto.SizeVarint(11<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	// storage_cfg_choice
	switch x := m.StorageCfgChoice.(type) {
	case *CreateSpecType_DefaultStorageConfig:
		s := proto.Size(x.DefaultStorageConfig)
		n += proto.SizeVarint(13<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *CreateSpecType_CustomStorageConfig:
		s := proto.Size(x.CustomStorageConfig)
		n += proto.SizeVarint(14<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	// gpu_choice
	switch x := m.GpuChoice.(type) {
	case *CreateSpecType_DisableGpu:
		s := proto.Size(x.DisableGpu)
		n += proto.SizeVarint(16<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *CreateSpecType_EnableGpu:
		s := proto.Size(x.EnableGpu)
		n += proto.SizeVarint(17<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	// k8s_cluster_choice
	switch x := m.K8SClusterChoice.(type) {
	case *CreateSpecType_NoK8SCluster:
		s := proto.Size(x.NoK8SCluster)
		n += proto.SizeVarint(21<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *CreateSpecType_K8SCluster:
		s := proto.Size(x.K8SCluster)
		n += proto.SizeVarint(22<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	// logs_receiver_choice
	switch x := m.LogsReceiverChoice.(type) {
	case *CreateSpecType_LogsStreamingDisabled:
		s := proto.Size(x.LogsStreamingDisabled)
		n += proto.SizeVarint(24<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *CreateSpecType_LogReceiver:
		s := proto.Size(x.LogReceiver)
		n += proto.SizeVarint(25<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	// usb_policy_choice
	switch x := m.UsbPolicyChoice.(type) {
	case *CreateSpecType_DenyAllUsb:
		s := proto.Size(x.DenyAllUsb)
		n += proto.SizeVarint(27<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *CreateSpecType_AllowAllUsb:
		s := proto.Size(x.AllowAllUsb)
		n += proto.SizeVarint(28<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *CreateSpecType_UsbPolicy:
		s := proto.Size(x.UsbPolicy)
		n += proto.SizeVarint(29<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// ReplaceSpecType
//
// x-displayName: "Replace voltstack site VPC site"
// Shape of the voltstack site VPC site replace specification
type ReplaceSpecType struct {
	VolterraCertifiedHw     string   `protobuf:"bytes,1,opt,name=volterra_certified_hw,json=volterraCertifiedHw,proto3" json:"volterra_certified_hw,omitempty"`
	MasterNodes             []string `protobuf:"bytes,2,rep,name=master_nodes,json=masterNodes" json:"master_nodes,omitempty"`
	WorkerNodes             []string `protobuf:"bytes,3,rep,name=worker_nodes,json=workerNodes" json:"worker_nodes,omitempty"`
	VolterraSoftwareVersion string   `protobuf:"bytes,4,opt,name=volterra_software_version,json=volterraSoftwareVersion,proto3" json:"volterra_software_version,omitempty"`
	OperatingSystemVersion  string   `protobuf:"bytes,5,opt,name=operating_system_version,json=operatingSystemVersion,proto3" json:"operating_system_version,omitempty"`
	// Types that are valid to be assigned to BondChoice:
	//	*ReplaceSpecType_NoBondDevices
	//	*ReplaceSpecType_BondDeviceList
	BondChoice isReplaceSpecType_BondChoice `protobuf_oneof:"bond_choice"`
	// Types that are valid to be assigned to NetworkCfgChoice:
	//	*ReplaceSpecType_DefaultNetworkConfig
	//	*ReplaceSpecType_CustomNetworkConfig
	NetworkCfgChoice isReplaceSpecType_NetworkCfgChoice `protobuf_oneof:"network_cfg_choice"`
	// Types that are valid to be assigned to StorageCfgChoice:
	//	*ReplaceSpecType_DefaultStorageConfig
	//	*ReplaceSpecType_CustomStorageConfig
	StorageCfgChoice isReplaceSpecType_StorageCfgChoice `protobuf_oneof:"storage_cfg_choice"`
	// Types that are valid to be assigned to GpuChoice:
	//	*ReplaceSpecType_DisableGpu
	//	*ReplaceSpecType_EnableGpu
	GpuChoice   isReplaceSpecType_GpuChoice     `protobuf_oneof:"gpu_choice"`
	Address     string                          `protobuf:"bytes,18,opt,name=address,proto3" json:"address,omitempty"`
	Coordinates *ves_io_schema_site.Coordinates `protobuf:"bytes,19,opt,name=coordinates" json:"coordinates,omitempty"`
	// Types that are valid to be assigned to K8SClusterChoice:
	//	*ReplaceSpecType_NoK8SCluster
	//	*ReplaceSpecType_K8SCluster
	K8SClusterChoice isReplaceSpecType_K8SClusterChoice `protobuf_oneof:"k8s_cluster_choice"`
	// Types that are valid to be assigned to LogsReceiverChoice:
	//	*ReplaceSpecType_LogsStreamingDisabled
	//	*ReplaceSpecType_LogReceiver
	LogsReceiverChoice isReplaceSpecType_LogsReceiverChoice `protobuf_oneof:"logs_receiver_choice"`
	// Types that are valid to be assigned to UsbPolicyChoice:
	//	*ReplaceSpecType_DenyAllUsb
	//	*ReplaceSpecType_AllowAllUsb
	//	*ReplaceSpecType_UsbPolicy
	UsbPolicyChoice isReplaceSpecType_UsbPolicyChoice `protobuf_oneof:"usb_policy_choice"`
}

func (m *ReplaceSpecType) Reset()                    { *m = ReplaceSpecType{} }
func (*ReplaceSpecType) ProtoMessage()               {}
func (*ReplaceSpecType) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{12} }

type isReplaceSpecType_BondChoice interface {
	isReplaceSpecType_BondChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isReplaceSpecType_NetworkCfgChoice interface {
	isReplaceSpecType_NetworkCfgChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isReplaceSpecType_StorageCfgChoice interface {
	isReplaceSpecType_StorageCfgChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isReplaceSpecType_GpuChoice interface {
	isReplaceSpecType_GpuChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isReplaceSpecType_K8SClusterChoice interface {
	isReplaceSpecType_K8SClusterChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isReplaceSpecType_LogsReceiverChoice interface {
	isReplaceSpecType_LogsReceiverChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isReplaceSpecType_UsbPolicyChoice interface {
	isReplaceSpecType_UsbPolicyChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type ReplaceSpecType_NoBondDevices struct {
	NoBondDevices *ves_io_schema4.Empty `protobuf:"bytes,7,opt,name=no_bond_devices,json=noBondDevices,oneof"`
}
type ReplaceSpecType_BondDeviceList struct {
	BondDeviceList *ves_io_schema_fleet.FleetBondDevicesListType `protobuf:"bytes,8,opt,name=bond_device_list,json=bondDeviceList,oneof"`
}
type ReplaceSpecType_DefaultNetworkConfig struct {
	DefaultNetworkConfig *ves_io_schema4.Empty `protobuf:"bytes,10,opt,name=default_network_config,json=defaultNetworkConfig,oneof"`
}
type ReplaceSpecType_CustomNetworkConfig struct {
	CustomNetworkConfig *VssNetworkConfiguration `protobuf:"bytes,11,opt,name=custom_network_config,json=customNetworkConfig,oneof"`
}
type ReplaceSpecType_DefaultStorageConfig struct {
	DefaultStorageConfig *ves_io_schema4.Empty `protobuf:"bytes,13,opt,name=default_storage_config,json=defaultStorageConfig,oneof"`
}
type ReplaceSpecType_CustomStorageConfig struct {
	CustomStorageConfig *VssStorageConfiguration `protobuf:"bytes,14,opt,name=custom_storage_config,json=customStorageConfig,oneof"`
}
type ReplaceSpecType_DisableGpu struct {
	DisableGpu *ves_io_schema4.Empty `protobuf:"bytes,16,opt,name=disable_gpu,json=disableGpu,oneof"`
}
type ReplaceSpecType_EnableGpu struct {
	EnableGpu *ves_io_schema4.Empty `protobuf:"bytes,17,opt,name=enable_gpu,json=enableGpu,oneof"`
}
type ReplaceSpecType_NoK8SCluster struct {
	NoK8SCluster *ves_io_schema4.Empty `protobuf:"bytes,21,opt,name=no_k8s_cluster,json=noK8sCluster,oneof"`
}
type ReplaceSpecType_K8SCluster struct {
	K8SCluster *ves_io_schema_views.ObjectRefType `protobuf:"bytes,22,opt,name=k8s_cluster,json=k8sCluster,oneof"`
}
type ReplaceSpecType_LogsStreamingDisabled struct {
	LogsStreamingDisabled *ves_io_schema4.Empty `protobuf:"bytes,24,opt,name=logs_streaming_disabled,json=logsStreamingDisabled,oneof"`
}
type ReplaceSpecType_LogReceiver struct {
	LogReceiver *ves_io_schema_views.ObjectRefType `protobuf:"bytes,25,opt,name=log_receiver,json=logReceiver,oneof"`
}
type ReplaceSpecType_DenyAllUsb struct {
	DenyAllUsb *ves_io_schema4.Empty `protobuf:"bytes,27,opt,name=deny_all_usb,json=denyAllUsb,oneof"`
}
type ReplaceSpecType_AllowAllUsb struct {
	AllowAllUsb *ves_io_schema4.Empty `protobuf:"bytes,28,opt,name=allow_all_usb,json=allowAllUsb,oneof"`
}
type ReplaceSpecType_UsbPolicy struct {
	UsbPolicy *ves_io_schema_views.ObjectRefType `protobuf:"bytes,29,opt,name=usb_policy,json=usbPolicy,oneof"`
}

func (*ReplaceSpecType_NoBondDevices) isReplaceSpecType_BondChoice()                 {}
func (*ReplaceSpecType_BondDeviceList) isReplaceSpecType_BondChoice()                {}
func (*ReplaceSpecType_DefaultNetworkConfig) isReplaceSpecType_NetworkCfgChoice()    {}
func (*ReplaceSpecType_CustomNetworkConfig) isReplaceSpecType_NetworkCfgChoice()     {}
func (*ReplaceSpecType_DefaultStorageConfig) isReplaceSpecType_StorageCfgChoice()    {}
func (*ReplaceSpecType_CustomStorageConfig) isReplaceSpecType_StorageCfgChoice()     {}
func (*ReplaceSpecType_DisableGpu) isReplaceSpecType_GpuChoice()                     {}
func (*ReplaceSpecType_EnableGpu) isReplaceSpecType_GpuChoice()                      {}
func (*ReplaceSpecType_NoK8SCluster) isReplaceSpecType_K8SClusterChoice()            {}
func (*ReplaceSpecType_K8SCluster) isReplaceSpecType_K8SClusterChoice()              {}
func (*ReplaceSpecType_LogsStreamingDisabled) isReplaceSpecType_LogsReceiverChoice() {}
func (*ReplaceSpecType_LogReceiver) isReplaceSpecType_LogsReceiverChoice()           {}
func (*ReplaceSpecType_DenyAllUsb) isReplaceSpecType_UsbPolicyChoice()               {}
func (*ReplaceSpecType_AllowAllUsb) isReplaceSpecType_UsbPolicyChoice()              {}
func (*ReplaceSpecType_UsbPolicy) isReplaceSpecType_UsbPolicyChoice()                {}

func (m *ReplaceSpecType) GetBondChoice() isReplaceSpecType_BondChoice {
	if m != nil {
		return m.BondChoice
	}
	return nil
}
func (m *ReplaceSpecType) GetNetworkCfgChoice() isReplaceSpecType_NetworkCfgChoice {
	if m != nil {
		return m.NetworkCfgChoice
	}
	return nil
}
func (m *ReplaceSpecType) GetStorageCfgChoice() isReplaceSpecType_StorageCfgChoice {
	if m != nil {
		return m.StorageCfgChoice
	}
	return nil
}
func (m *ReplaceSpecType) GetGpuChoice() isReplaceSpecType_GpuChoice {
	if m != nil {
		return m.GpuChoice
	}
	return nil
}
func (m *ReplaceSpecType) GetK8SClusterChoice() isReplaceSpecType_K8SClusterChoice {
	if m != nil {
		return m.K8SClusterChoice
	}
	return nil
}
func (m *ReplaceSpecType) GetLogsReceiverChoice() isReplaceSpecType_LogsReceiverChoice {
	if m != nil {
		return m.LogsReceiverChoice
	}
	return nil
}
func (m *ReplaceSpecType) GetUsbPolicyChoice() isReplaceSpecType_UsbPolicyChoice {
	if m != nil {
		return m.UsbPolicyChoice
	}
	return nil
}

func (m *ReplaceSpecType) GetVolterraCertifiedHw() string {
	if m != nil {
		return m.VolterraCertifiedHw
	}
	return ""
}

func (m *ReplaceSpecType) GetMasterNodes() []string {
	if m != nil {
		return m.MasterNodes
	}
	return nil
}

func (m *ReplaceSpecType) GetWorkerNodes() []string {
	if m != nil {
		return m.WorkerNodes
	}
	return nil
}

func (m *ReplaceSpecType) GetVolterraSoftwareVersion() string {
	if m != nil {
		return m.VolterraSoftwareVersion
	}
	return ""
}

func (m *ReplaceSpecType) GetOperatingSystemVersion() string {
	if m != nil {
		return m.OperatingSystemVersion
	}
	return ""
}

func (m *ReplaceSpecType) GetNoBondDevices() *ves_io_schema4.Empty {
	if x, ok := m.GetBondChoice().(*ReplaceSpecType_NoBondDevices); ok {
		return x.NoBondDevices
	}
	return nil
}

func (m *ReplaceSpecType) GetBondDeviceList() *ves_io_schema_fleet.FleetBondDevicesListType {
	if x, ok := m.GetBondChoice().(*ReplaceSpecType_BondDeviceList); ok {
		return x.BondDeviceList
	}
	return nil
}

func (m *ReplaceSpecType) GetDefaultNetworkConfig() *ves_io_schema4.Empty {
	if x, ok := m.GetNetworkCfgChoice().(*ReplaceSpecType_DefaultNetworkConfig); ok {
		return x.DefaultNetworkConfig
	}
	return nil
}

func (m *ReplaceSpecType) GetCustomNetworkConfig() *VssNetworkConfiguration {
	if x, ok := m.GetNetworkCfgChoice().(*ReplaceSpecType_CustomNetworkConfig); ok {
		return x.CustomNetworkConfig
	}
	return nil
}

func (m *ReplaceSpecType) GetDefaultStorageConfig() *ves_io_schema4.Empty {
	if x, ok := m.GetStorageCfgChoice().(*ReplaceSpecType_DefaultStorageConfig); ok {
		return x.DefaultStorageConfig
	}
	return nil
}

func (m *ReplaceSpecType) GetCustomStorageConfig() *VssStorageConfiguration {
	if x, ok := m.GetStorageCfgChoice().(*ReplaceSpecType_CustomStorageConfig); ok {
		return x.CustomStorageConfig
	}
	return nil
}

func (m *ReplaceSpecType) GetDisableGpu() *ves_io_schema4.Empty {
	if x, ok := m.GetGpuChoice().(*ReplaceSpecType_DisableGpu); ok {
		return x.DisableGpu
	}
	return nil
}

func (m *ReplaceSpecType) GetEnableGpu() *ves_io_schema4.Empty {
	if x, ok := m.GetGpuChoice().(*ReplaceSpecType_EnableGpu); ok {
		return x.EnableGpu
	}
	return nil
}

func (m *ReplaceSpecType) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *ReplaceSpecType) GetCoordinates() *ves_io_schema_site.Coordinates {
	if m != nil {
		return m.Coordinates
	}
	return nil
}

func (m *ReplaceSpecType) GetNoK8SCluster() *ves_io_schema4.Empty {
	if x, ok := m.GetK8SClusterChoice().(*ReplaceSpecType_NoK8SCluster); ok {
		return x.NoK8SCluster
	}
	return nil
}

func (m *ReplaceSpecType) GetK8SCluster() *ves_io_schema_views.ObjectRefType {
	if x, ok := m.GetK8SClusterChoice().(*ReplaceSpecType_K8SCluster); ok {
		return x.K8SCluster
	}
	return nil
}

func (m *ReplaceSpecType) GetLogsStreamingDisabled() *ves_io_schema4.Empty {
	if x, ok := m.GetLogsReceiverChoice().(*ReplaceSpecType_LogsStreamingDisabled); ok {
		return x.LogsStreamingDisabled
	}
	return nil
}

func (m *ReplaceSpecType) GetLogReceiver() *ves_io_schema_views.ObjectRefType {
	if x, ok := m.GetLogsReceiverChoice().(*ReplaceSpecType_LogReceiver); ok {
		return x.LogReceiver
	}
	return nil
}

func (m *ReplaceSpecType) GetDenyAllUsb() *ves_io_schema4.Empty {
	if x, ok := m.GetUsbPolicyChoice().(*ReplaceSpecType_DenyAllUsb); ok {
		return x.DenyAllUsb
	}
	return nil
}

func (m *ReplaceSpecType) GetAllowAllUsb() *ves_io_schema4.Empty {
	if x, ok := m.GetUsbPolicyChoice().(*ReplaceSpecType_AllowAllUsb); ok {
		return x.AllowAllUsb
	}
	return nil
}

func (m *ReplaceSpecType) GetUsbPolicy() *ves_io_schema_views.ObjectRefType {
	if x, ok := m.GetUsbPolicyChoice().(*ReplaceSpecType_UsbPolicy); ok {
		return x.UsbPolicy
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*ReplaceSpecType) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _ReplaceSpecType_OneofMarshaler, _ReplaceSpecType_OneofUnmarshaler, _ReplaceSpecType_OneofSizer, []interface{}{
		(*ReplaceSpecType_NoBondDevices)(nil),
		(*ReplaceSpecType_BondDeviceList)(nil),
		(*ReplaceSpecType_DefaultNetworkConfig)(nil),
		(*ReplaceSpecType_CustomNetworkConfig)(nil),
		(*ReplaceSpecType_DefaultStorageConfig)(nil),
		(*ReplaceSpecType_CustomStorageConfig)(nil),
		(*ReplaceSpecType_DisableGpu)(nil),
		(*ReplaceSpecType_EnableGpu)(nil),
		(*ReplaceSpecType_NoK8SCluster)(nil),
		(*ReplaceSpecType_K8SCluster)(nil),
		(*ReplaceSpecType_LogsStreamingDisabled)(nil),
		(*ReplaceSpecType_LogReceiver)(nil),
		(*ReplaceSpecType_DenyAllUsb)(nil),
		(*ReplaceSpecType_AllowAllUsb)(nil),
		(*ReplaceSpecType_UsbPolicy)(nil),
	}
}

func _ReplaceSpecType_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*ReplaceSpecType)
	// bond_choice
	switch x := m.BondChoice.(type) {
	case *ReplaceSpecType_NoBondDevices:
		_ = b.EncodeVarint(7<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.NoBondDevices); err != nil {
			return err
		}
	case *ReplaceSpecType_BondDeviceList:
		_ = b.EncodeVarint(8<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.BondDeviceList); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("ReplaceSpecType.BondChoice has unexpected type %T", x)
	}
	// network_cfg_choice
	switch x := m.NetworkCfgChoice.(type) {
	case *ReplaceSpecType_DefaultNetworkConfig:
		_ = b.EncodeVarint(10<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.DefaultNetworkConfig); err != nil {
			return err
		}
	case *ReplaceSpecType_CustomNetworkConfig:
		_ = b.EncodeVarint(11<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.CustomNetworkConfig); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("ReplaceSpecType.NetworkCfgChoice has unexpected type %T", x)
	}
	// storage_cfg_choice
	switch x := m.StorageCfgChoice.(type) {
	case *ReplaceSpecType_DefaultStorageConfig:
		_ = b.EncodeVarint(13<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.DefaultStorageConfig); err != nil {
			return err
		}
	case *ReplaceSpecType_CustomStorageConfig:
		_ = b.EncodeVarint(14<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.CustomStorageConfig); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("ReplaceSpecType.StorageCfgChoice has unexpected type %T", x)
	}
	// gpu_choice
	switch x := m.GpuChoice.(type) {
	case *ReplaceSpecType_DisableGpu:
		_ = b.EncodeVarint(16<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.DisableGpu); err != nil {
			return err
		}
	case *ReplaceSpecType_EnableGpu:
		_ = b.EncodeVarint(17<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.EnableGpu); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("ReplaceSpecType.GpuChoice has unexpected type %T", x)
	}
	// k8s_cluster_choice
	switch x := m.K8SClusterChoice.(type) {
	case *ReplaceSpecType_NoK8SCluster:
		_ = b.EncodeVarint(21<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.NoK8SCluster); err != nil {
			return err
		}
	case *ReplaceSpecType_K8SCluster:
		_ = b.EncodeVarint(22<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.K8SCluster); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("ReplaceSpecType.K8SClusterChoice has unexpected type %T", x)
	}
	// logs_receiver_choice
	switch x := m.LogsReceiverChoice.(type) {
	case *ReplaceSpecType_LogsStreamingDisabled:
		_ = b.EncodeVarint(24<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.LogsStreamingDisabled); err != nil {
			return err
		}
	case *ReplaceSpecType_LogReceiver:
		_ = b.EncodeVarint(25<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.LogReceiver); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("ReplaceSpecType.LogsReceiverChoice has unexpected type %T", x)
	}
	// usb_policy_choice
	switch x := m.UsbPolicyChoice.(type) {
	case *ReplaceSpecType_DenyAllUsb:
		_ = b.EncodeVarint(27<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.DenyAllUsb); err != nil {
			return err
		}
	case *ReplaceSpecType_AllowAllUsb:
		_ = b.EncodeVarint(28<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.AllowAllUsb); err != nil {
			return err
		}
	case *ReplaceSpecType_UsbPolicy:
		_ = b.EncodeVarint(29<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.UsbPolicy); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("ReplaceSpecType.UsbPolicyChoice has unexpected type %T", x)
	}
	return nil
}

func _ReplaceSpecType_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*ReplaceSpecType)
	switch tag {
	case 7: // bond_choice.no_bond_devices
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.BondChoice = &ReplaceSpecType_NoBondDevices{msg}
		return true, err
	case 8: // bond_choice.bond_device_list
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema_fleet.FleetBondDevicesListType)
		err := b.DecodeMessage(msg)
		m.BondChoice = &ReplaceSpecType_BondDeviceList{msg}
		return true, err
	case 10: // network_cfg_choice.default_network_config
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.NetworkCfgChoice = &ReplaceSpecType_DefaultNetworkConfig{msg}
		return true, err
	case 11: // network_cfg_choice.custom_network_config
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(VssNetworkConfiguration)
		err := b.DecodeMessage(msg)
		m.NetworkCfgChoice = &ReplaceSpecType_CustomNetworkConfig{msg}
		return true, err
	case 13: // storage_cfg_choice.default_storage_config
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.StorageCfgChoice = &ReplaceSpecType_DefaultStorageConfig{msg}
		return true, err
	case 14: // storage_cfg_choice.custom_storage_config
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(VssStorageConfiguration)
		err := b.DecodeMessage(msg)
		m.StorageCfgChoice = &ReplaceSpecType_CustomStorageConfig{msg}
		return true, err
	case 16: // gpu_choice.disable_gpu
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.GpuChoice = &ReplaceSpecType_DisableGpu{msg}
		return true, err
	case 17: // gpu_choice.enable_gpu
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.GpuChoice = &ReplaceSpecType_EnableGpu{msg}
		return true, err
	case 21: // k8s_cluster_choice.no_k8s_cluster
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.K8SClusterChoice = &ReplaceSpecType_NoK8SCluster{msg}
		return true, err
	case 22: // k8s_cluster_choice.k8s_cluster
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema_views.ObjectRefType)
		err := b.DecodeMessage(msg)
		m.K8SClusterChoice = &ReplaceSpecType_K8SCluster{msg}
		return true, err
	case 24: // logs_receiver_choice.logs_streaming_disabled
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.LogsReceiverChoice = &ReplaceSpecType_LogsStreamingDisabled{msg}
		return true, err
	case 25: // logs_receiver_choice.log_receiver
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema_views.ObjectRefType)
		err := b.DecodeMessage(msg)
		m.LogsReceiverChoice = &ReplaceSpecType_LogReceiver{msg}
		return true, err
	case 27: // usb_policy_choice.deny_all_usb
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.UsbPolicyChoice = &ReplaceSpecType_DenyAllUsb{msg}
		return true, err
	case 28: // usb_policy_choice.allow_all_usb
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.UsbPolicyChoice = &ReplaceSpecType_AllowAllUsb{msg}
		return true, err
	case 29: // usb_policy_choice.usb_policy
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema_views.ObjectRefType)
		err := b.DecodeMessage(msg)
		m.UsbPolicyChoice = &ReplaceSpecType_UsbPolicy{msg}
		return true, err
	default:
		return false, nil
	}
}

func _ReplaceSpecType_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*ReplaceSpecType)
	// bond_choice
	switch x := m.BondChoice.(type) {
	case *ReplaceSpecType_NoBondDevices:
		s := proto.Size(x.NoBondDevices)
		n += proto.SizeVarint(7<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ReplaceSpecType_BondDeviceList:
		s := proto.Size(x.BondDeviceList)
		n += proto.SizeVarint(8<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	// network_cfg_choice
	switch x := m.NetworkCfgChoice.(type) {
	case *ReplaceSpecType_DefaultNetworkConfig:
		s := proto.Size(x.DefaultNetworkConfig)
		n += proto.SizeVarint(10<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ReplaceSpecType_CustomNetworkConfig:
		s := proto.Size(x.CustomNetworkConfig)
		n += proto.SizeVarint(11<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	// storage_cfg_choice
	switch x := m.StorageCfgChoice.(type) {
	case *ReplaceSpecType_DefaultStorageConfig:
		s := proto.Size(x.DefaultStorageConfig)
		n += proto.SizeVarint(13<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ReplaceSpecType_CustomStorageConfig:
		s := proto.Size(x.CustomStorageConfig)
		n += proto.SizeVarint(14<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	// gpu_choice
	switch x := m.GpuChoice.(type) {
	case *ReplaceSpecType_DisableGpu:
		s := proto.Size(x.DisableGpu)
		n += proto.SizeVarint(16<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ReplaceSpecType_EnableGpu:
		s := proto.Size(x.EnableGpu)
		n += proto.SizeVarint(17<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	// k8s_cluster_choice
	switch x := m.K8SClusterChoice.(type) {
	case *ReplaceSpecType_NoK8SCluster:
		s := proto.Size(x.NoK8SCluster)
		n += proto.SizeVarint(21<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ReplaceSpecType_K8SCluster:
		s := proto.Size(x.K8SCluster)
		n += proto.SizeVarint(22<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	// logs_receiver_choice
	switch x := m.LogsReceiverChoice.(type) {
	case *ReplaceSpecType_LogsStreamingDisabled:
		s := proto.Size(x.LogsStreamingDisabled)
		n += proto.SizeVarint(24<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ReplaceSpecType_LogReceiver:
		s := proto.Size(x.LogReceiver)
		n += proto.SizeVarint(25<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	// usb_policy_choice
	switch x := m.UsbPolicyChoice.(type) {
	case *ReplaceSpecType_DenyAllUsb:
		s := proto.Size(x.DenyAllUsb)
		n += proto.SizeVarint(27<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ReplaceSpecType_AllowAllUsb:
		s := proto.Size(x.AllowAllUsb)
		n += proto.SizeVarint(28<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ReplaceSpecType_UsbPolicy:
		s := proto.Size(x.UsbPolicy)
		n += proto.SizeVarint(29<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// GetSpecType
//
// x-displayName: "Get voltstack site VPC site"
// Shape of the voltstack site VPC site specification
type GetSpecType struct {
	VolterraCertifiedHw     string   `protobuf:"bytes,1,opt,name=volterra_certified_hw,json=volterraCertifiedHw,proto3" json:"volterra_certified_hw,omitempty"`
	MasterNodes             []string `protobuf:"bytes,2,rep,name=master_nodes,json=masterNodes" json:"master_nodes,omitempty"`
	WorkerNodes             []string `protobuf:"bytes,3,rep,name=worker_nodes,json=workerNodes" json:"worker_nodes,omitempty"`
	VolterraSoftwareVersion string   `protobuf:"bytes,4,opt,name=volterra_software_version,json=volterraSoftwareVersion,proto3" json:"volterra_software_version,omitempty"`
	OperatingSystemVersion  string   `protobuf:"bytes,5,opt,name=operating_system_version,json=operatingSystemVersion,proto3" json:"operating_system_version,omitempty"`
	// Types that are valid to be assigned to BondChoice:
	//	*GetSpecType_NoBondDevices
	//	*GetSpecType_BondDeviceList
	BondChoice isGetSpecType_BondChoice `protobuf_oneof:"bond_choice"`
	// Types that are valid to be assigned to NetworkCfgChoice:
	//	*GetSpecType_DefaultNetworkConfig
	//	*GetSpecType_CustomNetworkConfig
	NetworkCfgChoice isGetSpecType_NetworkCfgChoice `protobuf_oneof:"network_cfg_choice"`
	// Types that are valid to be assigned to StorageCfgChoice:
	//	*GetSpecType_DefaultStorageConfig
	//	*GetSpecType_CustomStorageConfig
	StorageCfgChoice isGetSpecType_StorageCfgChoice `protobuf_oneof:"storage_cfg_choice"`
	// Types that are valid to be assigned to GpuChoice:
	//	*GetSpecType_DisableGpu
	//	*GetSpecType_EnableGpu
	GpuChoice   isGetSpecType_GpuChoice         `protobuf_oneof:"gpu_choice"`
	Address     string                          `protobuf:"bytes,18,opt,name=address,proto3" json:"address,omitempty"`
	Coordinates *ves_io_schema_site.Coordinates `protobuf:"bytes,19,opt,name=coordinates" json:"coordinates,omitempty"`
	// Types that are valid to be assigned to K8SClusterChoice:
	//	*GetSpecType_NoK8SCluster
	//	*GetSpecType_K8SCluster
	K8SClusterChoice isGetSpecType_K8SClusterChoice `protobuf_oneof:"k8s_cluster_choice"`
	// Types that are valid to be assigned to LogsReceiverChoice:
	//	*GetSpecType_LogsStreamingDisabled
	//	*GetSpecType_LogReceiver
	LogsReceiverChoice isGetSpecType_LogsReceiverChoice `protobuf_oneof:"logs_receiver_choice"`
	// Types that are valid to be assigned to UsbPolicyChoice:
	//	*GetSpecType_DenyAllUsb
	//	*GetSpecType_AllowAllUsb
	//	*GetSpecType_UsbPolicy
	UsbPolicyChoice isGetSpecType_UsbPolicyChoice `protobuf_oneof:"usb_policy_choice"`
}

func (m *GetSpecType) Reset()                    { *m = GetSpecType{} }
func (*GetSpecType) ProtoMessage()               {}
func (*GetSpecType) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{13} }

type isGetSpecType_BondChoice interface {
	isGetSpecType_BondChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isGetSpecType_NetworkCfgChoice interface {
	isGetSpecType_NetworkCfgChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isGetSpecType_StorageCfgChoice interface {
	isGetSpecType_StorageCfgChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isGetSpecType_GpuChoice interface {
	isGetSpecType_GpuChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isGetSpecType_K8SClusterChoice interface {
	isGetSpecType_K8SClusterChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isGetSpecType_LogsReceiverChoice interface {
	isGetSpecType_LogsReceiverChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isGetSpecType_UsbPolicyChoice interface {
	isGetSpecType_UsbPolicyChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type GetSpecType_NoBondDevices struct {
	NoBondDevices *ves_io_schema4.Empty `protobuf:"bytes,7,opt,name=no_bond_devices,json=noBondDevices,oneof"`
}
type GetSpecType_BondDeviceList struct {
	BondDeviceList *ves_io_schema_fleet.FleetBondDevicesListType `protobuf:"bytes,8,opt,name=bond_device_list,json=bondDeviceList,oneof"`
}
type GetSpecType_DefaultNetworkConfig struct {
	DefaultNetworkConfig *ves_io_schema4.Empty `protobuf:"bytes,10,opt,name=default_network_config,json=defaultNetworkConfig,oneof"`
}
type GetSpecType_CustomNetworkConfig struct {
	CustomNetworkConfig *VssNetworkConfiguration `protobuf:"bytes,11,opt,name=custom_network_config,json=customNetworkConfig,oneof"`
}
type GetSpecType_DefaultStorageConfig struct {
	DefaultStorageConfig *ves_io_schema4.Empty `protobuf:"bytes,13,opt,name=default_storage_config,json=defaultStorageConfig,oneof"`
}
type GetSpecType_CustomStorageConfig struct {
	CustomStorageConfig *VssStorageConfiguration `protobuf:"bytes,14,opt,name=custom_storage_config,json=customStorageConfig,oneof"`
}
type GetSpecType_DisableGpu struct {
	DisableGpu *ves_io_schema4.Empty `protobuf:"bytes,16,opt,name=disable_gpu,json=disableGpu,oneof"`
}
type GetSpecType_EnableGpu struct {
	EnableGpu *ves_io_schema4.Empty `protobuf:"bytes,17,opt,name=enable_gpu,json=enableGpu,oneof"`
}
type GetSpecType_NoK8SCluster struct {
	NoK8SCluster *ves_io_schema4.Empty `protobuf:"bytes,21,opt,name=no_k8s_cluster,json=noK8sCluster,oneof"`
}
type GetSpecType_K8SCluster struct {
	K8SCluster *ves_io_schema_views.ObjectRefType `protobuf:"bytes,22,opt,name=k8s_cluster,json=k8sCluster,oneof"`
}
type GetSpecType_LogsStreamingDisabled struct {
	LogsStreamingDisabled *ves_io_schema4.Empty `protobuf:"bytes,24,opt,name=logs_streaming_disabled,json=logsStreamingDisabled,oneof"`
}
type GetSpecType_LogReceiver struct {
	LogReceiver *ves_io_schema_views.ObjectRefType `protobuf:"bytes,25,opt,name=log_receiver,json=logReceiver,oneof"`
}
type GetSpecType_DenyAllUsb struct {
	DenyAllUsb *ves_io_schema4.Empty `protobuf:"bytes,27,opt,name=deny_all_usb,json=denyAllUsb,oneof"`
}
type GetSpecType_AllowAllUsb struct {
	AllowAllUsb *ves_io_schema4.Empty `protobuf:"bytes,28,opt,name=allow_all_usb,json=allowAllUsb,oneof"`
}
type GetSpecType_UsbPolicy struct {
	UsbPolicy *ves_io_schema_views.ObjectRefType `protobuf:"bytes,29,opt,name=usb_policy,json=usbPolicy,oneof"`
}

func (*GetSpecType_NoBondDevices) isGetSpecType_BondChoice()                 {}
func (*GetSpecType_BondDeviceList) isGetSpecType_BondChoice()                {}
func (*GetSpecType_DefaultNetworkConfig) isGetSpecType_NetworkCfgChoice()    {}
func (*GetSpecType_CustomNetworkConfig) isGetSpecType_NetworkCfgChoice()     {}
func (*GetSpecType_DefaultStorageConfig) isGetSpecType_StorageCfgChoice()    {}
func (*GetSpecType_CustomStorageConfig) isGetSpecType_StorageCfgChoice()     {}
func (*GetSpecType_DisableGpu) isGetSpecType_GpuChoice()                     {}
func (*GetSpecType_EnableGpu) isGetSpecType_GpuChoice()                      {}
func (*GetSpecType_NoK8SCluster) isGetSpecType_K8SClusterChoice()            {}
func (*GetSpecType_K8SCluster) isGetSpecType_K8SClusterChoice()              {}
func (*GetSpecType_LogsStreamingDisabled) isGetSpecType_LogsReceiverChoice() {}
func (*GetSpecType_LogReceiver) isGetSpecType_LogsReceiverChoice()           {}
func (*GetSpecType_DenyAllUsb) isGetSpecType_UsbPolicyChoice()               {}
func (*GetSpecType_AllowAllUsb) isGetSpecType_UsbPolicyChoice()              {}
func (*GetSpecType_UsbPolicy) isGetSpecType_UsbPolicyChoice()                {}

func (m *GetSpecType) GetBondChoice() isGetSpecType_BondChoice {
	if m != nil {
		return m.BondChoice
	}
	return nil
}
func (m *GetSpecType) GetNetworkCfgChoice() isGetSpecType_NetworkCfgChoice {
	if m != nil {
		return m.NetworkCfgChoice
	}
	return nil
}
func (m *GetSpecType) GetStorageCfgChoice() isGetSpecType_StorageCfgChoice {
	if m != nil {
		return m.StorageCfgChoice
	}
	return nil
}
func (m *GetSpecType) GetGpuChoice() isGetSpecType_GpuChoice {
	if m != nil {
		return m.GpuChoice
	}
	return nil
}
func (m *GetSpecType) GetK8SClusterChoice() isGetSpecType_K8SClusterChoice {
	if m != nil {
		return m.K8SClusterChoice
	}
	return nil
}
func (m *GetSpecType) GetLogsReceiverChoice() isGetSpecType_LogsReceiverChoice {
	if m != nil {
		return m.LogsReceiverChoice
	}
	return nil
}
func (m *GetSpecType) GetUsbPolicyChoice() isGetSpecType_UsbPolicyChoice {
	if m != nil {
		return m.UsbPolicyChoice
	}
	return nil
}

func (m *GetSpecType) GetVolterraCertifiedHw() string {
	if m != nil {
		return m.VolterraCertifiedHw
	}
	return ""
}

func (m *GetSpecType) GetMasterNodes() []string {
	if m != nil {
		return m.MasterNodes
	}
	return nil
}

func (m *GetSpecType) GetWorkerNodes() []string {
	if m != nil {
		return m.WorkerNodes
	}
	return nil
}

func (m *GetSpecType) GetVolterraSoftwareVersion() string {
	if m != nil {
		return m.VolterraSoftwareVersion
	}
	return ""
}

func (m *GetSpecType) GetOperatingSystemVersion() string {
	if m != nil {
		return m.OperatingSystemVersion
	}
	return ""
}

func (m *GetSpecType) GetNoBondDevices() *ves_io_schema4.Empty {
	if x, ok := m.GetBondChoice().(*GetSpecType_NoBondDevices); ok {
		return x.NoBondDevices
	}
	return nil
}

func (m *GetSpecType) GetBondDeviceList() *ves_io_schema_fleet.FleetBondDevicesListType {
	if x, ok := m.GetBondChoice().(*GetSpecType_BondDeviceList); ok {
		return x.BondDeviceList
	}
	return nil
}

func (m *GetSpecType) GetDefaultNetworkConfig() *ves_io_schema4.Empty {
	if x, ok := m.GetNetworkCfgChoice().(*GetSpecType_DefaultNetworkConfig); ok {
		return x.DefaultNetworkConfig
	}
	return nil
}

func (m *GetSpecType) GetCustomNetworkConfig() *VssNetworkConfiguration {
	if x, ok := m.GetNetworkCfgChoice().(*GetSpecType_CustomNetworkConfig); ok {
		return x.CustomNetworkConfig
	}
	return nil
}

func (m *GetSpecType) GetDefaultStorageConfig() *ves_io_schema4.Empty {
	if x, ok := m.GetStorageCfgChoice().(*GetSpecType_DefaultStorageConfig); ok {
		return x.DefaultStorageConfig
	}
	return nil
}

func (m *GetSpecType) GetCustomStorageConfig() *VssStorageConfiguration {
	if x, ok := m.GetStorageCfgChoice().(*GetSpecType_CustomStorageConfig); ok {
		return x.CustomStorageConfig
	}
	return nil
}

func (m *GetSpecType) GetDisableGpu() *ves_io_schema4.Empty {
	if x, ok := m.GetGpuChoice().(*GetSpecType_DisableGpu); ok {
		return x.DisableGpu
	}
	return nil
}

func (m *GetSpecType) GetEnableGpu() *ves_io_schema4.Empty {
	if x, ok := m.GetGpuChoice().(*GetSpecType_EnableGpu); ok {
		return x.EnableGpu
	}
	return nil
}

func (m *GetSpecType) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *GetSpecType) GetCoordinates() *ves_io_schema_site.Coordinates {
	if m != nil {
		return m.Coordinates
	}
	return nil
}

func (m *GetSpecType) GetNoK8SCluster() *ves_io_schema4.Empty {
	if x, ok := m.GetK8SClusterChoice().(*GetSpecType_NoK8SCluster); ok {
		return x.NoK8SCluster
	}
	return nil
}

func (m *GetSpecType) GetK8SCluster() *ves_io_schema_views.ObjectRefType {
	if x, ok := m.GetK8SClusterChoice().(*GetSpecType_K8SCluster); ok {
		return x.K8SCluster
	}
	return nil
}

func (m *GetSpecType) GetLogsStreamingDisabled() *ves_io_schema4.Empty {
	if x, ok := m.GetLogsReceiverChoice().(*GetSpecType_LogsStreamingDisabled); ok {
		return x.LogsStreamingDisabled
	}
	return nil
}

func (m *GetSpecType) GetLogReceiver() *ves_io_schema_views.ObjectRefType {
	if x, ok := m.GetLogsReceiverChoice().(*GetSpecType_LogReceiver); ok {
		return x.LogReceiver
	}
	return nil
}

func (m *GetSpecType) GetDenyAllUsb() *ves_io_schema4.Empty {
	if x, ok := m.GetUsbPolicyChoice().(*GetSpecType_DenyAllUsb); ok {
		return x.DenyAllUsb
	}
	return nil
}

func (m *GetSpecType) GetAllowAllUsb() *ves_io_schema4.Empty {
	if x, ok := m.GetUsbPolicyChoice().(*GetSpecType_AllowAllUsb); ok {
		return x.AllowAllUsb
	}
	return nil
}

func (m *GetSpecType) GetUsbPolicy() *ves_io_schema_views.ObjectRefType {
	if x, ok := m.GetUsbPolicyChoice().(*GetSpecType_UsbPolicy); ok {
		return x.UsbPolicy
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*GetSpecType) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _GetSpecType_OneofMarshaler, _GetSpecType_OneofUnmarshaler, _GetSpecType_OneofSizer, []interface{}{
		(*GetSpecType_NoBondDevices)(nil),
		(*GetSpecType_BondDeviceList)(nil),
		(*GetSpecType_DefaultNetworkConfig)(nil),
		(*GetSpecType_CustomNetworkConfig)(nil),
		(*GetSpecType_DefaultStorageConfig)(nil),
		(*GetSpecType_CustomStorageConfig)(nil),
		(*GetSpecType_DisableGpu)(nil),
		(*GetSpecType_EnableGpu)(nil),
		(*GetSpecType_NoK8SCluster)(nil),
		(*GetSpecType_K8SCluster)(nil),
		(*GetSpecType_LogsStreamingDisabled)(nil),
		(*GetSpecType_LogReceiver)(nil),
		(*GetSpecType_DenyAllUsb)(nil),
		(*GetSpecType_AllowAllUsb)(nil),
		(*GetSpecType_UsbPolicy)(nil),
	}
}

func _GetSpecType_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*GetSpecType)
	// bond_choice
	switch x := m.BondChoice.(type) {
	case *GetSpecType_NoBondDevices:
		_ = b.EncodeVarint(7<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.NoBondDevices); err != nil {
			return err
		}
	case *GetSpecType_BondDeviceList:
		_ = b.EncodeVarint(8<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.BondDeviceList); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("GetSpecType.BondChoice has unexpected type %T", x)
	}
	// network_cfg_choice
	switch x := m.NetworkCfgChoice.(type) {
	case *GetSpecType_DefaultNetworkConfig:
		_ = b.EncodeVarint(10<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.DefaultNetworkConfig); err != nil {
			return err
		}
	case *GetSpecType_CustomNetworkConfig:
		_ = b.EncodeVarint(11<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.CustomNetworkConfig); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("GetSpecType.NetworkCfgChoice has unexpected type %T", x)
	}
	// storage_cfg_choice
	switch x := m.StorageCfgChoice.(type) {
	case *GetSpecType_DefaultStorageConfig:
		_ = b.EncodeVarint(13<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.DefaultStorageConfig); err != nil {
			return err
		}
	case *GetSpecType_CustomStorageConfig:
		_ = b.EncodeVarint(14<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.CustomStorageConfig); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("GetSpecType.StorageCfgChoice has unexpected type %T", x)
	}
	// gpu_choice
	switch x := m.GpuChoice.(type) {
	case *GetSpecType_DisableGpu:
		_ = b.EncodeVarint(16<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.DisableGpu); err != nil {
			return err
		}
	case *GetSpecType_EnableGpu:
		_ = b.EncodeVarint(17<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.EnableGpu); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("GetSpecType.GpuChoice has unexpected type %T", x)
	}
	// k8s_cluster_choice
	switch x := m.K8SClusterChoice.(type) {
	case *GetSpecType_NoK8SCluster:
		_ = b.EncodeVarint(21<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.NoK8SCluster); err != nil {
			return err
		}
	case *GetSpecType_K8SCluster:
		_ = b.EncodeVarint(22<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.K8SCluster); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("GetSpecType.K8SClusterChoice has unexpected type %T", x)
	}
	// logs_receiver_choice
	switch x := m.LogsReceiverChoice.(type) {
	case *GetSpecType_LogsStreamingDisabled:
		_ = b.EncodeVarint(24<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.LogsStreamingDisabled); err != nil {
			return err
		}
	case *GetSpecType_LogReceiver:
		_ = b.EncodeVarint(25<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.LogReceiver); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("GetSpecType.LogsReceiverChoice has unexpected type %T", x)
	}
	// usb_policy_choice
	switch x := m.UsbPolicyChoice.(type) {
	case *GetSpecType_DenyAllUsb:
		_ = b.EncodeVarint(27<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.DenyAllUsb); err != nil {
			return err
		}
	case *GetSpecType_AllowAllUsb:
		_ = b.EncodeVarint(28<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.AllowAllUsb); err != nil {
			return err
		}
	case *GetSpecType_UsbPolicy:
		_ = b.EncodeVarint(29<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.UsbPolicy); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("GetSpecType.UsbPolicyChoice has unexpected type %T", x)
	}
	return nil
}

func _GetSpecType_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*GetSpecType)
	switch tag {
	case 7: // bond_choice.no_bond_devices
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.BondChoice = &GetSpecType_NoBondDevices{msg}
		return true, err
	case 8: // bond_choice.bond_device_list
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema_fleet.FleetBondDevicesListType)
		err := b.DecodeMessage(msg)
		m.BondChoice = &GetSpecType_BondDeviceList{msg}
		return true, err
	case 10: // network_cfg_choice.default_network_config
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.NetworkCfgChoice = &GetSpecType_DefaultNetworkConfig{msg}
		return true, err
	case 11: // network_cfg_choice.custom_network_config
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(VssNetworkConfiguration)
		err := b.DecodeMessage(msg)
		m.NetworkCfgChoice = &GetSpecType_CustomNetworkConfig{msg}
		return true, err
	case 13: // storage_cfg_choice.default_storage_config
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.StorageCfgChoice = &GetSpecType_DefaultStorageConfig{msg}
		return true, err
	case 14: // storage_cfg_choice.custom_storage_config
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(VssStorageConfiguration)
		err := b.DecodeMessage(msg)
		m.StorageCfgChoice = &GetSpecType_CustomStorageConfig{msg}
		return true, err
	case 16: // gpu_choice.disable_gpu
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.GpuChoice = &GetSpecType_DisableGpu{msg}
		return true, err
	case 17: // gpu_choice.enable_gpu
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.GpuChoice = &GetSpecType_EnableGpu{msg}
		return true, err
	case 21: // k8s_cluster_choice.no_k8s_cluster
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.K8SClusterChoice = &GetSpecType_NoK8SCluster{msg}
		return true, err
	case 22: // k8s_cluster_choice.k8s_cluster
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema_views.ObjectRefType)
		err := b.DecodeMessage(msg)
		m.K8SClusterChoice = &GetSpecType_K8SCluster{msg}
		return true, err
	case 24: // logs_receiver_choice.logs_streaming_disabled
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.LogsReceiverChoice = &GetSpecType_LogsStreamingDisabled{msg}
		return true, err
	case 25: // logs_receiver_choice.log_receiver
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema_views.ObjectRefType)
		err := b.DecodeMessage(msg)
		m.LogsReceiverChoice = &GetSpecType_LogReceiver{msg}
		return true, err
	case 27: // usb_policy_choice.deny_all_usb
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.UsbPolicyChoice = &GetSpecType_DenyAllUsb{msg}
		return true, err
	case 28: // usb_policy_choice.allow_all_usb
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.UsbPolicyChoice = &GetSpecType_AllowAllUsb{msg}
		return true, err
	case 29: // usb_policy_choice.usb_policy
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema_views.ObjectRefType)
		err := b.DecodeMessage(msg)
		m.UsbPolicyChoice = &GetSpecType_UsbPolicy{msg}
		return true, err
	default:
		return false, nil
	}
}

func _GetSpecType_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*GetSpecType)
	// bond_choice
	switch x := m.BondChoice.(type) {
	case *GetSpecType_NoBondDevices:
		s := proto.Size(x.NoBondDevices)
		n += proto.SizeVarint(7<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *GetSpecType_BondDeviceList:
		s := proto.Size(x.BondDeviceList)
		n += proto.SizeVarint(8<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	// network_cfg_choice
	switch x := m.NetworkCfgChoice.(type) {
	case *GetSpecType_DefaultNetworkConfig:
		s := proto.Size(x.DefaultNetworkConfig)
		n += proto.SizeVarint(10<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *GetSpecType_CustomNetworkConfig:
		s := proto.Size(x.CustomNetworkConfig)
		n += proto.SizeVarint(11<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	// storage_cfg_choice
	switch x := m.StorageCfgChoice.(type) {
	case *GetSpecType_DefaultStorageConfig:
		s := proto.Size(x.DefaultStorageConfig)
		n += proto.SizeVarint(13<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *GetSpecType_CustomStorageConfig:
		s := proto.Size(x.CustomStorageConfig)
		n += proto.SizeVarint(14<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	// gpu_choice
	switch x := m.GpuChoice.(type) {
	case *GetSpecType_DisableGpu:
		s := proto.Size(x.DisableGpu)
		n += proto.SizeVarint(16<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *GetSpecType_EnableGpu:
		s := proto.Size(x.EnableGpu)
		n += proto.SizeVarint(17<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	// k8s_cluster_choice
	switch x := m.K8SClusterChoice.(type) {
	case *GetSpecType_NoK8SCluster:
		s := proto.Size(x.NoK8SCluster)
		n += proto.SizeVarint(21<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *GetSpecType_K8SCluster:
		s := proto.Size(x.K8SCluster)
		n += proto.SizeVarint(22<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	// logs_receiver_choice
	switch x := m.LogsReceiverChoice.(type) {
	case *GetSpecType_LogsStreamingDisabled:
		s := proto.Size(x.LogsStreamingDisabled)
		n += proto.SizeVarint(24<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *GetSpecType_LogReceiver:
		s := proto.Size(x.LogReceiver)
		n += proto.SizeVarint(25<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	// usb_policy_choice
	switch x := m.UsbPolicyChoice.(type) {
	case *GetSpecType_DenyAllUsb:
		s := proto.Size(x.DenyAllUsb)
		n += proto.SizeVarint(27<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *GetSpecType_AllowAllUsb:
		s := proto.Size(x.AllowAllUsb)
		n += proto.SizeVarint(28<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *GetSpecType_UsbPolicy:
		s := proto.Size(x.UsbPolicy)
		n += proto.SizeVarint(29<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

func init() {
	proto.RegisterType((*Interface)(nil), "ves.io.schema.views.voltstack_site.Interface")
	golang_proto.RegisterType((*Interface)(nil), "ves.io.schema.views.voltstack_site.Interface")
	proto.RegisterType((*InterfaceListType)(nil), "ves.io.schema.views.voltstack_site.InterfaceListType")
	golang_proto.RegisterType((*InterfaceListType)(nil), "ves.io.schema.views.voltstack_site.InterfaceListType")
	proto.RegisterType((*StorageInterfaceType)(nil), "ves.io.schema.views.voltstack_site.StorageInterfaceType")
	golang_proto.RegisterType((*StorageInterfaceType)(nil), "ves.io.schema.views.voltstack_site.StorageInterfaceType")
	proto.RegisterType((*StorageInterfaceListType)(nil), "ves.io.schema.views.voltstack_site.StorageInterfaceListType")
	golang_proto.RegisterType((*StorageInterfaceListType)(nil), "ves.io.schema.views.voltstack_site.StorageInterfaceListType")
	proto.RegisterType((*StaticRoutesListType)(nil), "ves.io.schema.views.voltstack_site.StaticRoutesListType")
	golang_proto.RegisterType((*StaticRoutesListType)(nil), "ves.io.schema.views.voltstack_site.StaticRoutesListType")
	proto.RegisterType((*VnConfiguration)(nil), "ves.io.schema.views.voltstack_site.VnConfiguration")
	golang_proto.RegisterType((*VnConfiguration)(nil), "ves.io.schema.views.voltstack_site.VnConfiguration")
	proto.RegisterType((*GlobalNetworkConnectionType)(nil), "ves.io.schema.views.voltstack_site.GlobalNetworkConnectionType")
	golang_proto.RegisterType((*GlobalNetworkConnectionType)(nil), "ves.io.schema.views.voltstack_site.GlobalNetworkConnectionType")
	proto.RegisterType((*GlobalNetworkConnectionListType)(nil), "ves.io.schema.views.voltstack_site.GlobalNetworkConnectionListType")
	golang_proto.RegisterType((*GlobalNetworkConnectionListType)(nil), "ves.io.schema.views.voltstack_site.GlobalNetworkConnectionListType")
	proto.RegisterType((*VssNetworkConfiguration)(nil), "ves.io.schema.views.voltstack_site.VssNetworkConfiguration")
	golang_proto.RegisterType((*VssNetworkConfiguration)(nil), "ves.io.schema.views.voltstack_site.VssNetworkConfiguration")
	proto.RegisterType((*VssStorageConfiguration)(nil), "ves.io.schema.views.voltstack_site.VssStorageConfiguration")
	golang_proto.RegisterType((*VssStorageConfiguration)(nil), "ves.io.schema.views.voltstack_site.VssStorageConfiguration")
	proto.RegisterType((*GlobalSpecType)(nil), "ves.io.schema.views.voltstack_site.GlobalSpecType")
	golang_proto.RegisterType((*GlobalSpecType)(nil), "ves.io.schema.views.voltstack_site.GlobalSpecType")
	proto.RegisterType((*CreateSpecType)(nil), "ves.io.schema.views.voltstack_site.CreateSpecType")
	golang_proto.RegisterType((*CreateSpecType)(nil), "ves.io.schema.views.voltstack_site.CreateSpecType")
	proto.RegisterType((*ReplaceSpecType)(nil), "ves.io.schema.views.voltstack_site.ReplaceSpecType")
	golang_proto.RegisterType((*ReplaceSpecType)(nil), "ves.io.schema.views.voltstack_site.ReplaceSpecType")
	proto.RegisterType((*GetSpecType)(nil), "ves.io.schema.views.voltstack_site.GetSpecType")
	golang_proto.RegisterType((*GetSpecType)(nil), "ves.io.schema.views.voltstack_site.GetSpecType")
}
func (this *Interface) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Interface)
	if !ok {
		that2, ok := that.(Interface)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Description != that1.Description {
		return false
	}
	if len(this.Labels) != len(that1.Labels) {
		return false
	}
	for i := range this.Labels {
		if this.Labels[i] != that1.Labels[i] {
			return false
		}
	}
	if that1.InterfaceChoice == nil {
		if this.InterfaceChoice != nil {
			return false
		}
	} else if this.InterfaceChoice == nil {
		return false
	} else if !this.InterfaceChoice.Equal(that1.InterfaceChoice) {
		return false
	}
	return true
}
func (this *Interface_EthernetInterface) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Interface_EthernetInterface)
	if !ok {
		that2, ok := that.(Interface_EthernetInterface)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.EthernetInterface.Equal(that1.EthernetInterface) {
		return false
	}
	return true
}
func (this *Interface_DedicatedInterface) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Interface_DedicatedInterface)
	if !ok {
		that2, ok := that.(Interface_DedicatedInterface)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DedicatedInterface.Equal(that1.DedicatedInterface) {
		return false
	}
	return true
}
func (this *Interface_DedicatedManagementInterface) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Interface_DedicatedManagementInterface)
	if !ok {
		that2, ok := that.(Interface_DedicatedManagementInterface)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DedicatedManagementInterface.Equal(that1.DedicatedManagementInterface) {
		return false
	}
	return true
}
func (this *Interface_TunnelInterface) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Interface_TunnelInterface)
	if !ok {
		that2, ok := that.(Interface_TunnelInterface)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.TunnelInterface.Equal(that1.TunnelInterface) {
		return false
	}
	return true
}
func (this *InterfaceListType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*InterfaceListType)
	if !ok {
		that2, ok := that.(InterfaceListType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Interfaces) != len(that1.Interfaces) {
		return false
	}
	for i := range this.Interfaces {
		if !this.Interfaces[i].Equal(that1.Interfaces[i]) {
			return false
		}
	}
	return true
}
func (this *StorageInterfaceType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*StorageInterfaceType)
	if !ok {
		that2, ok := that.(StorageInterfaceType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Description != that1.Description {
		return false
	}
	if len(this.Labels) != len(that1.Labels) {
		return false
	}
	for i := range this.Labels {
		if this.Labels[i] != that1.Labels[i] {
			return false
		}
	}
	if !this.StorageInterface.Equal(that1.StorageInterface) {
		return false
	}
	return true
}
func (this *StorageInterfaceListType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*StorageInterfaceListType)
	if !ok {
		that2, ok := that.(StorageInterfaceListType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.StorageInterfaces) != len(that1.StorageInterfaces) {
		return false
	}
	for i := range this.StorageInterfaces {
		if !this.StorageInterfaces[i].Equal(that1.StorageInterfaces[i]) {
			return false
		}
	}
	return true
}
func (this *StaticRoutesListType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*StaticRoutesListType)
	if !ok {
		that2, ok := that.(StaticRoutesListType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.StaticRoutes) != len(that1.StaticRoutes) {
		return false
	}
	for i := range this.StaticRoutes {
		if !this.StaticRoutes[i].Equal(that1.StaticRoutes[i]) {
			return false
		}
	}
	return true
}
func (this *VnConfiguration) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*VnConfiguration)
	if !ok {
		that2, ok := that.(VnConfiguration)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Labels) != len(that1.Labels) {
		return false
	}
	for i := range this.Labels {
		if this.Labels[i] != that1.Labels[i] {
			return false
		}
	}
	if that1.StaticRouteChoice == nil {
		if this.StaticRouteChoice != nil {
			return false
		}
	} else if this.StaticRouteChoice == nil {
		return false
	} else if !this.StaticRouteChoice.Equal(that1.StaticRouteChoice) {
		return false
	}
	if that1.DcClusterGroupChoice == nil {
		if this.DcClusterGroupChoice != nil {
			return false
		}
	} else if this.DcClusterGroupChoice == nil {
		return false
	} else if !this.DcClusterGroupChoice.Equal(that1.DcClusterGroupChoice) {
		return false
	}
	return true
}
func (this *VnConfiguration_NoStaticRoutes) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*VnConfiguration_NoStaticRoutes)
	if !ok {
		that2, ok := that.(VnConfiguration_NoStaticRoutes)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NoStaticRoutes.Equal(that1.NoStaticRoutes) {
		return false
	}
	return true
}
func (this *VnConfiguration_StaticRoutes) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*VnConfiguration_StaticRoutes)
	if !ok {
		that2, ok := that.(VnConfiguration_StaticRoutes)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.StaticRoutes.Equal(that1.StaticRoutes) {
		return false
	}
	return true
}
func (this *VnConfiguration_NoDcClusterGroup) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*VnConfiguration_NoDcClusterGroup)
	if !ok {
		that2, ok := that.(VnConfiguration_NoDcClusterGroup)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NoDcClusterGroup.Equal(that1.NoDcClusterGroup) {
		return false
	}
	return true
}
func (this *VnConfiguration_DcClusterGroup) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*VnConfiguration_DcClusterGroup)
	if !ok {
		that2, ok := that.(VnConfiguration_DcClusterGroup)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DcClusterGroup.Equal(that1.DcClusterGroup) {
		return false
	}
	return true
}
func (this *GlobalNetworkConnectionType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalNetworkConnectionType)
	if !ok {
		that2, ok := that.(GlobalNetworkConnectionType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.ConnectionChoice == nil {
		if this.ConnectionChoice != nil {
			return false
		}
	} else if this.ConnectionChoice == nil {
		return false
	} else if !this.ConnectionChoice.Equal(that1.ConnectionChoice) {
		return false
	}
	if that1.ForwardProxyChoice == nil {
		if this.ForwardProxyChoice != nil {
			return false
		}
	} else if this.ForwardProxyChoice == nil {
		return false
	} else if !this.ForwardProxyChoice.Equal(that1.ForwardProxyChoice) {
		return false
	}
	return true
}
func (this *GlobalNetworkConnectionType_SloToGlobalDr) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalNetworkConnectionType_SloToGlobalDr)
	if !ok {
		that2, ok := that.(GlobalNetworkConnectionType_SloToGlobalDr)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.SloToGlobalDr.Equal(that1.SloToGlobalDr) {
		return false
	}
	return true
}
func (this *GlobalNetworkConnectionType_DisableForwardProxy) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalNetworkConnectionType_DisableForwardProxy)
	if !ok {
		that2, ok := that.(GlobalNetworkConnectionType_DisableForwardProxy)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DisableForwardProxy.Equal(that1.DisableForwardProxy) {
		return false
	}
	return true
}
func (this *GlobalNetworkConnectionType_EnableForwardProxy) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalNetworkConnectionType_EnableForwardProxy)
	if !ok {
		that2, ok := that.(GlobalNetworkConnectionType_EnableForwardProxy)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.EnableForwardProxy.Equal(that1.EnableForwardProxy) {
		return false
	}
	return true
}
func (this *GlobalNetworkConnectionListType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalNetworkConnectionListType)
	if !ok {
		that2, ok := that.(GlobalNetworkConnectionListType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.GlobalNetworkConnections) != len(that1.GlobalNetworkConnections) {
		return false
	}
	for i := range this.GlobalNetworkConnections {
		if !this.GlobalNetworkConnections[i].Equal(that1.GlobalNetworkConnections[i]) {
			return false
		}
	}
	return true
}
func (this *VssNetworkConfiguration) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*VssNetworkConfiguration)
	if !ok {
		that2, ok := that.(VssNetworkConfiguration)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.SloChoice == nil {
		if this.SloChoice != nil {
			return false
		}
	} else if this.SloChoice == nil {
		return false
	} else if !this.SloChoice.Equal(that1.SloChoice) {
		return false
	}
	if that1.InterfaceChoice == nil {
		if this.InterfaceChoice != nil {
			return false
		}
	} else if this.InterfaceChoice == nil {
		return false
	} else if !this.InterfaceChoice.Equal(that1.InterfaceChoice) {
		return false
	}
	if that1.NetworkPolicyChoice == nil {
		if this.NetworkPolicyChoice != nil {
			return false
		}
	} else if this.NetworkPolicyChoice == nil {
		return false
	} else if !this.NetworkPolicyChoice.Equal(that1.NetworkPolicyChoice) {
		return false
	}
	if that1.ForwardProxyChoice == nil {
		if this.ForwardProxyChoice != nil {
			return false
		}
	} else if this.ForwardProxyChoice == nil {
		return false
	} else if !this.ForwardProxyChoice.Equal(that1.ForwardProxyChoice) {
		return false
	}
	if that1.GlobalNetworkChoice == nil {
		if this.GlobalNetworkChoice != nil {
			return false
		}
	} else if this.GlobalNetworkChoice == nil {
		return false
	} else if !this.GlobalNetworkChoice.Equal(that1.GlobalNetworkChoice) {
		return false
	}
	if this.OutsideVip != that1.OutsideVip {
		return false
	}
	if this.OutsideNameserver != that1.OutsideNameserver {
		return false
	}
	if this.BgpRouterId != that1.BgpRouterId {
		return false
	}
	if this.BgpPeerAddress != that1.BgpPeerAddress {
		return false
	}
	if this.VipVrrpMode != that1.VipVrrpMode {
		return false
	}
	if this.SiteToSiteTunnelIp != that1.SiteToSiteTunnelIp {
		return false
	}
	if this.TunnelDeadTimeout != that1.TunnelDeadTimeout {
		return false
	}
	return true
}
func (this *VssNetworkConfiguration_DefaultConfig) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*VssNetworkConfiguration_DefaultConfig)
	if !ok {
		that2, ok := that.(VssNetworkConfiguration_DefaultConfig)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DefaultConfig.Equal(that1.DefaultConfig) {
		return false
	}
	return true
}
func (this *VssNetworkConfiguration_SloConfig) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*VssNetworkConfiguration_SloConfig)
	if !ok {
		that2, ok := that.(VssNetworkConfiguration_SloConfig)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.SloConfig.Equal(that1.SloConfig) {
		return false
	}
	return true
}
func (this *VssNetworkConfiguration_DefaultInterfaceConfig) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*VssNetworkConfiguration_DefaultInterfaceConfig)
	if !ok {
		that2, ok := that.(VssNetworkConfiguration_DefaultInterfaceConfig)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DefaultInterfaceConfig.Equal(that1.DefaultInterfaceConfig) {
		return false
	}
	return true
}
func (this *VssNetworkConfiguration_InterfaceList) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*VssNetworkConfiguration_InterfaceList)
	if !ok {
		that2, ok := that.(VssNetworkConfiguration_InterfaceList)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.InterfaceList.Equal(that1.InterfaceList) {
		return false
	}
	return true
}
func (this *VssNetworkConfiguration_NoNetworkPolicy) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*VssNetworkConfiguration_NoNetworkPolicy)
	if !ok {
		that2, ok := that.(VssNetworkConfiguration_NoNetworkPolicy)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NoNetworkPolicy.Equal(that1.NoNetworkPolicy) {
		return false
	}
	return true
}
func (this *VssNetworkConfiguration_ActiveNetworkPolicies) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*VssNetworkConfiguration_ActiveNetworkPolicies)
	if !ok {
		that2, ok := that.(VssNetworkConfiguration_ActiveNetworkPolicies)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ActiveNetworkPolicies.Equal(that1.ActiveNetworkPolicies) {
		return false
	}
	return true
}
func (this *VssNetworkConfiguration_NoForwardProxy) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*VssNetworkConfiguration_NoForwardProxy)
	if !ok {
		that2, ok := that.(VssNetworkConfiguration_NoForwardProxy)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NoForwardProxy.Equal(that1.NoForwardProxy) {
		return false
	}
	return true
}
func (this *VssNetworkConfiguration_ActiveForwardProxyPolicies) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*VssNetworkConfiguration_ActiveForwardProxyPolicies)
	if !ok {
		that2, ok := that.(VssNetworkConfiguration_ActiveForwardProxyPolicies)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ActiveForwardProxyPolicies.Equal(that1.ActiveForwardProxyPolicies) {
		return false
	}
	return true
}
func (this *VssNetworkConfiguration_ForwardProxyAllowAll) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*VssNetworkConfiguration_ForwardProxyAllowAll)
	if !ok {
		that2, ok := that.(VssNetworkConfiguration_ForwardProxyAllowAll)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ForwardProxyAllowAll.Equal(that1.ForwardProxyAllowAll) {
		return false
	}
	return true
}
func (this *VssNetworkConfiguration_NoGlobalNetwork) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*VssNetworkConfiguration_NoGlobalNetwork)
	if !ok {
		that2, ok := that.(VssNetworkConfiguration_NoGlobalNetwork)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NoGlobalNetwork.Equal(that1.NoGlobalNetwork) {
		return false
	}
	return true
}
func (this *VssNetworkConfiguration_GlobalNetworkList) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*VssNetworkConfiguration_GlobalNetworkList)
	if !ok {
		that2, ok := that.(VssNetworkConfiguration_GlobalNetworkList)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.GlobalNetworkList.Equal(that1.GlobalNetworkList) {
		return false
	}
	return true
}
func (this *VssStorageConfiguration) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*VssStorageConfiguration)
	if !ok {
		that2, ok := that.(VssStorageConfiguration)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.StorageInterfaceChoice == nil {
		if this.StorageInterfaceChoice != nil {
			return false
		}
	} else if this.StorageInterfaceChoice == nil {
		return false
	} else if !this.StorageInterfaceChoice.Equal(that1.StorageInterfaceChoice) {
		return false
	}
	if that1.StorageDeviceChoice == nil {
		if this.StorageDeviceChoice != nil {
			return false
		}
	} else if this.StorageDeviceChoice == nil {
		return false
	} else if !this.StorageDeviceChoice.Equal(that1.StorageDeviceChoice) {
		return false
	}
	if that1.StorageClassChoice == nil {
		if this.StorageClassChoice != nil {
			return false
		}
	} else if this.StorageClassChoice == nil {
		return false
	} else if !this.StorageClassChoice.Equal(that1.StorageClassChoice) {
		return false
	}
	if that1.StaticRouteChoice == nil {
		if this.StaticRouteChoice != nil {
			return false
		}
	} else if this.StaticRouteChoice == nil {
		return false
	} else if !this.StaticRouteChoice.Equal(that1.StaticRouteChoice) {
		return false
	}
	return true
}
func (this *VssStorageConfiguration_NoStorageInterfaces) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*VssStorageConfiguration_NoStorageInterfaces)
	if !ok {
		that2, ok := that.(VssStorageConfiguration_NoStorageInterfaces)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NoStorageInterfaces.Equal(that1.NoStorageInterfaces) {
		return false
	}
	return true
}
func (this *VssStorageConfiguration_StorageInterfaceList) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*VssStorageConfiguration_StorageInterfaceList)
	if !ok {
		that2, ok := that.(VssStorageConfiguration_StorageInterfaceList)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.StorageInterfaceList.Equal(that1.StorageInterfaceList) {
		return false
	}
	return true
}
func (this *VssStorageConfiguration_NoStorageDevice) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*VssStorageConfiguration_NoStorageDevice)
	if !ok {
		that2, ok := that.(VssStorageConfiguration_NoStorageDevice)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NoStorageDevice.Equal(that1.NoStorageDevice) {
		return false
	}
	return true
}
func (this *VssStorageConfiguration_StorageDeviceList) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*VssStorageConfiguration_StorageDeviceList)
	if !ok {
		that2, ok := that.(VssStorageConfiguration_StorageDeviceList)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.StorageDeviceList.Equal(that1.StorageDeviceList) {
		return false
	}
	return true
}
func (this *VssStorageConfiguration_DefaultStorageClass) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*VssStorageConfiguration_DefaultStorageClass)
	if !ok {
		that2, ok := that.(VssStorageConfiguration_DefaultStorageClass)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DefaultStorageClass.Equal(that1.DefaultStorageClass) {
		return false
	}
	return true
}
func (this *VssStorageConfiguration_StorageClassList) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*VssStorageConfiguration_StorageClassList)
	if !ok {
		that2, ok := that.(VssStorageConfiguration_StorageClassList)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.StorageClassList.Equal(that1.StorageClassList) {
		return false
	}
	return true
}
func (this *VssStorageConfiguration_NoStaticRoutes) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*VssStorageConfiguration_NoStaticRoutes)
	if !ok {
		that2, ok := that.(VssStorageConfiguration_NoStaticRoutes)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NoStaticRoutes.Equal(that1.NoStaticRoutes) {
		return false
	}
	return true
}
func (this *VssStorageConfiguration_StaticRoutes) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*VssStorageConfiguration_StaticRoutes)
	if !ok {
		that2, ok := that.(VssStorageConfiguration_StaticRoutes)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.StaticRoutes.Equal(that1.StaticRoutes) {
		return false
	}
	return true
}
func (this *GlobalSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType)
	if !ok {
		that2, ok := that.(GlobalSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.VolterraCertifiedHw != that1.VolterraCertifiedHw {
		return false
	}
	if len(this.MasterNodes) != len(that1.MasterNodes) {
		return false
	}
	for i := range this.MasterNodes {
		if this.MasterNodes[i] != that1.MasterNodes[i] {
			return false
		}
	}
	if len(this.WorkerNodes) != len(that1.WorkerNodes) {
		return false
	}
	for i := range this.WorkerNodes {
		if this.WorkerNodes[i] != that1.WorkerNodes[i] {
			return false
		}
	}
	if this.VolterraSoftwareVersion != that1.VolterraSoftwareVersion {
		return false
	}
	if this.OperatingSystemVersion != that1.OperatingSystemVersion {
		return false
	}
	if that1.BondChoice == nil {
		if this.BondChoice != nil {
			return false
		}
	} else if this.BondChoice == nil {
		return false
	} else if !this.BondChoice.Equal(that1.BondChoice) {
		return false
	}
	if that1.NetworkCfgChoice == nil {
		if this.NetworkCfgChoice != nil {
			return false
		}
	} else if this.NetworkCfgChoice == nil {
		return false
	} else if !this.NetworkCfgChoice.Equal(that1.NetworkCfgChoice) {
		return false
	}
	if that1.StorageCfgChoice == nil {
		if this.StorageCfgChoice != nil {
			return false
		}
	} else if this.StorageCfgChoice == nil {
		return false
	} else if !this.StorageCfgChoice.Equal(that1.StorageCfgChoice) {
		return false
	}
	if that1.GpuChoice == nil {
		if this.GpuChoice != nil {
			return false
		}
	} else if this.GpuChoice == nil {
		return false
	} else if !this.GpuChoice.Equal(that1.GpuChoice) {
		return false
	}
	if this.Address != that1.Address {
		return false
	}
	if !this.Coordinates.Equal(that1.Coordinates) {
		return false
	}
	if that1.K8SClusterChoice == nil {
		if this.K8SClusterChoice != nil {
			return false
		}
	} else if this.K8SClusterChoice == nil {
		return false
	} else if !this.K8SClusterChoice.Equal(that1.K8SClusterChoice) {
		return false
	}
	if that1.LogsReceiverChoice == nil {
		if this.LogsReceiverChoice != nil {
			return false
		}
	} else if this.LogsReceiverChoice == nil {
		return false
	} else if !this.LogsReceiverChoice.Equal(that1.LogsReceiverChoice) {
		return false
	}
	if that1.UsbPolicyChoice == nil {
		if this.UsbPolicyChoice != nil {
			return false
		}
	} else if this.UsbPolicyChoice == nil {
		return false
	} else if !this.UsbPolicyChoice.Equal(that1.UsbPolicyChoice) {
		return false
	}
	if !this.ViewInternal.Equal(that1.ViewInternal) {
		return false
	}
	return true
}
func (this *GlobalSpecType_NoBondDevices) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_NoBondDevices)
	if !ok {
		that2, ok := that.(GlobalSpecType_NoBondDevices)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NoBondDevices.Equal(that1.NoBondDevices) {
		return false
	}
	return true
}
func (this *GlobalSpecType_BondDeviceList) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_BondDeviceList)
	if !ok {
		that2, ok := that.(GlobalSpecType_BondDeviceList)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.BondDeviceList.Equal(that1.BondDeviceList) {
		return false
	}
	return true
}
func (this *GlobalSpecType_DefaultNetworkConfig) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_DefaultNetworkConfig)
	if !ok {
		that2, ok := that.(GlobalSpecType_DefaultNetworkConfig)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DefaultNetworkConfig.Equal(that1.DefaultNetworkConfig) {
		return false
	}
	return true
}
func (this *GlobalSpecType_CustomNetworkConfig) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_CustomNetworkConfig)
	if !ok {
		that2, ok := that.(GlobalSpecType_CustomNetworkConfig)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.CustomNetworkConfig.Equal(that1.CustomNetworkConfig) {
		return false
	}
	return true
}
func (this *GlobalSpecType_DefaultStorageConfig) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_DefaultStorageConfig)
	if !ok {
		that2, ok := that.(GlobalSpecType_DefaultStorageConfig)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DefaultStorageConfig.Equal(that1.DefaultStorageConfig) {
		return false
	}
	return true
}
func (this *GlobalSpecType_CustomStorageConfig) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_CustomStorageConfig)
	if !ok {
		that2, ok := that.(GlobalSpecType_CustomStorageConfig)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.CustomStorageConfig.Equal(that1.CustomStorageConfig) {
		return false
	}
	return true
}
func (this *GlobalSpecType_DisableGpu) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_DisableGpu)
	if !ok {
		that2, ok := that.(GlobalSpecType_DisableGpu)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DisableGpu.Equal(that1.DisableGpu) {
		return false
	}
	return true
}
func (this *GlobalSpecType_EnableGpu) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_EnableGpu)
	if !ok {
		that2, ok := that.(GlobalSpecType_EnableGpu)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.EnableGpu.Equal(that1.EnableGpu) {
		return false
	}
	return true
}
func (this *GlobalSpecType_NoK8SCluster) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_NoK8SCluster)
	if !ok {
		that2, ok := that.(GlobalSpecType_NoK8SCluster)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NoK8SCluster.Equal(that1.NoK8SCluster) {
		return false
	}
	return true
}
func (this *GlobalSpecType_K8SCluster) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_K8SCluster)
	if !ok {
		that2, ok := that.(GlobalSpecType_K8SCluster)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.K8SCluster.Equal(that1.K8SCluster) {
		return false
	}
	return true
}
func (this *GlobalSpecType_LogsStreamingDisabled) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_LogsStreamingDisabled)
	if !ok {
		that2, ok := that.(GlobalSpecType_LogsStreamingDisabled)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.LogsStreamingDisabled.Equal(that1.LogsStreamingDisabled) {
		return false
	}
	return true
}
func (this *GlobalSpecType_LogReceiver) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_LogReceiver)
	if !ok {
		that2, ok := that.(GlobalSpecType_LogReceiver)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.LogReceiver.Equal(that1.LogReceiver) {
		return false
	}
	return true
}
func (this *GlobalSpecType_DenyAllUsb) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_DenyAllUsb)
	if !ok {
		that2, ok := that.(GlobalSpecType_DenyAllUsb)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DenyAllUsb.Equal(that1.DenyAllUsb) {
		return false
	}
	return true
}
func (this *GlobalSpecType_AllowAllUsb) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_AllowAllUsb)
	if !ok {
		that2, ok := that.(GlobalSpecType_AllowAllUsb)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AllowAllUsb.Equal(that1.AllowAllUsb) {
		return false
	}
	return true
}
func (this *GlobalSpecType_UsbPolicy) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_UsbPolicy)
	if !ok {
		that2, ok := that.(GlobalSpecType_UsbPolicy)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.UsbPolicy.Equal(that1.UsbPolicy) {
		return false
	}
	return true
}
func (this *CreateSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType)
	if !ok {
		that2, ok := that.(CreateSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.VolterraCertifiedHw != that1.VolterraCertifiedHw {
		return false
	}
	if len(this.MasterNodes) != len(that1.MasterNodes) {
		return false
	}
	for i := range this.MasterNodes {
		if this.MasterNodes[i] != that1.MasterNodes[i] {
			return false
		}
	}
	if len(this.WorkerNodes) != len(that1.WorkerNodes) {
		return false
	}
	for i := range this.WorkerNodes {
		if this.WorkerNodes[i] != that1.WorkerNodes[i] {
			return false
		}
	}
	if this.VolterraSoftwareVersion != that1.VolterraSoftwareVersion {
		return false
	}
	if this.OperatingSystemVersion != that1.OperatingSystemVersion {
		return false
	}
	if that1.BondChoice == nil {
		if this.BondChoice != nil {
			return false
		}
	} else if this.BondChoice == nil {
		return false
	} else if !this.BondChoice.Equal(that1.BondChoice) {
		return false
	}
	if that1.NetworkCfgChoice == nil {
		if this.NetworkCfgChoice != nil {
			return false
		}
	} else if this.NetworkCfgChoice == nil {
		return false
	} else if !this.NetworkCfgChoice.Equal(that1.NetworkCfgChoice) {
		return false
	}
	if that1.StorageCfgChoice == nil {
		if this.StorageCfgChoice != nil {
			return false
		}
	} else if this.StorageCfgChoice == nil {
		return false
	} else if !this.StorageCfgChoice.Equal(that1.StorageCfgChoice) {
		return false
	}
	if that1.GpuChoice == nil {
		if this.GpuChoice != nil {
			return false
		}
	} else if this.GpuChoice == nil {
		return false
	} else if !this.GpuChoice.Equal(that1.GpuChoice) {
		return false
	}
	if this.Address != that1.Address {
		return false
	}
	if !this.Coordinates.Equal(that1.Coordinates) {
		return false
	}
	if that1.K8SClusterChoice == nil {
		if this.K8SClusterChoice != nil {
			return false
		}
	} else if this.K8SClusterChoice == nil {
		return false
	} else if !this.K8SClusterChoice.Equal(that1.K8SClusterChoice) {
		return false
	}
	if that1.LogsReceiverChoice == nil {
		if this.LogsReceiverChoice != nil {
			return false
		}
	} else if this.LogsReceiverChoice == nil {
		return false
	} else if !this.LogsReceiverChoice.Equal(that1.LogsReceiverChoice) {
		return false
	}
	if that1.UsbPolicyChoice == nil {
		if this.UsbPolicyChoice != nil {
			return false
		}
	} else if this.UsbPolicyChoice == nil {
		return false
	} else if !this.UsbPolicyChoice.Equal(that1.UsbPolicyChoice) {
		return false
	}
	return true
}
func (this *CreateSpecType_NoBondDevices) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_NoBondDevices)
	if !ok {
		that2, ok := that.(CreateSpecType_NoBondDevices)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NoBondDevices.Equal(that1.NoBondDevices) {
		return false
	}
	return true
}
func (this *CreateSpecType_BondDeviceList) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_BondDeviceList)
	if !ok {
		that2, ok := that.(CreateSpecType_BondDeviceList)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.BondDeviceList.Equal(that1.BondDeviceList) {
		return false
	}
	return true
}
func (this *CreateSpecType_DefaultNetworkConfig) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_DefaultNetworkConfig)
	if !ok {
		that2, ok := that.(CreateSpecType_DefaultNetworkConfig)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DefaultNetworkConfig.Equal(that1.DefaultNetworkConfig) {
		return false
	}
	return true
}
func (this *CreateSpecType_CustomNetworkConfig) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_CustomNetworkConfig)
	if !ok {
		that2, ok := that.(CreateSpecType_CustomNetworkConfig)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.CustomNetworkConfig.Equal(that1.CustomNetworkConfig) {
		return false
	}
	return true
}
func (this *CreateSpecType_DefaultStorageConfig) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_DefaultStorageConfig)
	if !ok {
		that2, ok := that.(CreateSpecType_DefaultStorageConfig)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DefaultStorageConfig.Equal(that1.DefaultStorageConfig) {
		return false
	}
	return true
}
func (this *CreateSpecType_CustomStorageConfig) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_CustomStorageConfig)
	if !ok {
		that2, ok := that.(CreateSpecType_CustomStorageConfig)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.CustomStorageConfig.Equal(that1.CustomStorageConfig) {
		return false
	}
	return true
}
func (this *CreateSpecType_DisableGpu) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_DisableGpu)
	if !ok {
		that2, ok := that.(CreateSpecType_DisableGpu)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DisableGpu.Equal(that1.DisableGpu) {
		return false
	}
	return true
}
func (this *CreateSpecType_EnableGpu) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_EnableGpu)
	if !ok {
		that2, ok := that.(CreateSpecType_EnableGpu)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.EnableGpu.Equal(that1.EnableGpu) {
		return false
	}
	return true
}
func (this *CreateSpecType_NoK8SCluster) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_NoK8SCluster)
	if !ok {
		that2, ok := that.(CreateSpecType_NoK8SCluster)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NoK8SCluster.Equal(that1.NoK8SCluster) {
		return false
	}
	return true
}
func (this *CreateSpecType_K8SCluster) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_K8SCluster)
	if !ok {
		that2, ok := that.(CreateSpecType_K8SCluster)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.K8SCluster.Equal(that1.K8SCluster) {
		return false
	}
	return true
}
func (this *CreateSpecType_LogsStreamingDisabled) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_LogsStreamingDisabled)
	if !ok {
		that2, ok := that.(CreateSpecType_LogsStreamingDisabled)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.LogsStreamingDisabled.Equal(that1.LogsStreamingDisabled) {
		return false
	}
	return true
}
func (this *CreateSpecType_LogReceiver) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_LogReceiver)
	if !ok {
		that2, ok := that.(CreateSpecType_LogReceiver)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.LogReceiver.Equal(that1.LogReceiver) {
		return false
	}
	return true
}
func (this *CreateSpecType_DenyAllUsb) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_DenyAllUsb)
	if !ok {
		that2, ok := that.(CreateSpecType_DenyAllUsb)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DenyAllUsb.Equal(that1.DenyAllUsb) {
		return false
	}
	return true
}
func (this *CreateSpecType_AllowAllUsb) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_AllowAllUsb)
	if !ok {
		that2, ok := that.(CreateSpecType_AllowAllUsb)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AllowAllUsb.Equal(that1.AllowAllUsb) {
		return false
	}
	return true
}
func (this *CreateSpecType_UsbPolicy) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_UsbPolicy)
	if !ok {
		that2, ok := that.(CreateSpecType_UsbPolicy)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.UsbPolicy.Equal(that1.UsbPolicy) {
		return false
	}
	return true
}
func (this *ReplaceSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType)
	if !ok {
		that2, ok := that.(ReplaceSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.VolterraCertifiedHw != that1.VolterraCertifiedHw {
		return false
	}
	if len(this.MasterNodes) != len(that1.MasterNodes) {
		return false
	}
	for i := range this.MasterNodes {
		if this.MasterNodes[i] != that1.MasterNodes[i] {
			return false
		}
	}
	if len(this.WorkerNodes) != len(that1.WorkerNodes) {
		return false
	}
	for i := range this.WorkerNodes {
		if this.WorkerNodes[i] != that1.WorkerNodes[i] {
			return false
		}
	}
	if this.VolterraSoftwareVersion != that1.VolterraSoftwareVersion {
		return false
	}
	if this.OperatingSystemVersion != that1.OperatingSystemVersion {
		return false
	}
	if that1.BondChoice == nil {
		if this.BondChoice != nil {
			return false
		}
	} else if this.BondChoice == nil {
		return false
	} else if !this.BondChoice.Equal(that1.BondChoice) {
		return false
	}
	if that1.NetworkCfgChoice == nil {
		if this.NetworkCfgChoice != nil {
			return false
		}
	} else if this.NetworkCfgChoice == nil {
		return false
	} else if !this.NetworkCfgChoice.Equal(that1.NetworkCfgChoice) {
		return false
	}
	if that1.StorageCfgChoice == nil {
		if this.StorageCfgChoice != nil {
			return false
		}
	} else if this.StorageCfgChoice == nil {
		return false
	} else if !this.StorageCfgChoice.Equal(that1.StorageCfgChoice) {
		return false
	}
	if that1.GpuChoice == nil {
		if this.GpuChoice != nil {
			return false
		}
	} else if this.GpuChoice == nil {
		return false
	} else if !this.GpuChoice.Equal(that1.GpuChoice) {
		return false
	}
	if this.Address != that1.Address {
		return false
	}
	if !this.Coordinates.Equal(that1.Coordinates) {
		return false
	}
	if that1.K8SClusterChoice == nil {
		if this.K8SClusterChoice != nil {
			return false
		}
	} else if this.K8SClusterChoice == nil {
		return false
	} else if !this.K8SClusterChoice.Equal(that1.K8SClusterChoice) {
		return false
	}
	if that1.LogsReceiverChoice == nil {
		if this.LogsReceiverChoice != nil {
			return false
		}
	} else if this.LogsReceiverChoice == nil {
		return false
	} else if !this.LogsReceiverChoice.Equal(that1.LogsReceiverChoice) {
		return false
	}
	if that1.UsbPolicyChoice == nil {
		if this.UsbPolicyChoice != nil {
			return false
		}
	} else if this.UsbPolicyChoice == nil {
		return false
	} else if !this.UsbPolicyChoice.Equal(that1.UsbPolicyChoice) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_NoBondDevices) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_NoBondDevices)
	if !ok {
		that2, ok := that.(ReplaceSpecType_NoBondDevices)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NoBondDevices.Equal(that1.NoBondDevices) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_BondDeviceList) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_BondDeviceList)
	if !ok {
		that2, ok := that.(ReplaceSpecType_BondDeviceList)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.BondDeviceList.Equal(that1.BondDeviceList) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_DefaultNetworkConfig) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_DefaultNetworkConfig)
	if !ok {
		that2, ok := that.(ReplaceSpecType_DefaultNetworkConfig)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DefaultNetworkConfig.Equal(that1.DefaultNetworkConfig) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_CustomNetworkConfig) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_CustomNetworkConfig)
	if !ok {
		that2, ok := that.(ReplaceSpecType_CustomNetworkConfig)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.CustomNetworkConfig.Equal(that1.CustomNetworkConfig) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_DefaultStorageConfig) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_DefaultStorageConfig)
	if !ok {
		that2, ok := that.(ReplaceSpecType_DefaultStorageConfig)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DefaultStorageConfig.Equal(that1.DefaultStorageConfig) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_CustomStorageConfig) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_CustomStorageConfig)
	if !ok {
		that2, ok := that.(ReplaceSpecType_CustomStorageConfig)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.CustomStorageConfig.Equal(that1.CustomStorageConfig) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_DisableGpu) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_DisableGpu)
	if !ok {
		that2, ok := that.(ReplaceSpecType_DisableGpu)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DisableGpu.Equal(that1.DisableGpu) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_EnableGpu) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_EnableGpu)
	if !ok {
		that2, ok := that.(ReplaceSpecType_EnableGpu)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.EnableGpu.Equal(that1.EnableGpu) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_NoK8SCluster) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_NoK8SCluster)
	if !ok {
		that2, ok := that.(ReplaceSpecType_NoK8SCluster)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NoK8SCluster.Equal(that1.NoK8SCluster) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_K8SCluster) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_K8SCluster)
	if !ok {
		that2, ok := that.(ReplaceSpecType_K8SCluster)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.K8SCluster.Equal(that1.K8SCluster) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_LogsStreamingDisabled) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_LogsStreamingDisabled)
	if !ok {
		that2, ok := that.(ReplaceSpecType_LogsStreamingDisabled)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.LogsStreamingDisabled.Equal(that1.LogsStreamingDisabled) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_LogReceiver) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_LogReceiver)
	if !ok {
		that2, ok := that.(ReplaceSpecType_LogReceiver)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.LogReceiver.Equal(that1.LogReceiver) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_DenyAllUsb) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_DenyAllUsb)
	if !ok {
		that2, ok := that.(ReplaceSpecType_DenyAllUsb)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DenyAllUsb.Equal(that1.DenyAllUsb) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_AllowAllUsb) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_AllowAllUsb)
	if !ok {
		that2, ok := that.(ReplaceSpecType_AllowAllUsb)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AllowAllUsb.Equal(that1.AllowAllUsb) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_UsbPolicy) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_UsbPolicy)
	if !ok {
		that2, ok := that.(ReplaceSpecType_UsbPolicy)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.UsbPolicy.Equal(that1.UsbPolicy) {
		return false
	}
	return true
}
func (this *GetSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType)
	if !ok {
		that2, ok := that.(GetSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.VolterraCertifiedHw != that1.VolterraCertifiedHw {
		return false
	}
	if len(this.MasterNodes) != len(that1.MasterNodes) {
		return false
	}
	for i := range this.MasterNodes {
		if this.MasterNodes[i] != that1.MasterNodes[i] {
			return false
		}
	}
	if len(this.WorkerNodes) != len(that1.WorkerNodes) {
		return false
	}
	for i := range this.WorkerNodes {
		if this.WorkerNodes[i] != that1.WorkerNodes[i] {
			return false
		}
	}
	if this.VolterraSoftwareVersion != that1.VolterraSoftwareVersion {
		return false
	}
	if this.OperatingSystemVersion != that1.OperatingSystemVersion {
		return false
	}
	if that1.BondChoice == nil {
		if this.BondChoice != nil {
			return false
		}
	} else if this.BondChoice == nil {
		return false
	} else if !this.BondChoice.Equal(that1.BondChoice) {
		return false
	}
	if that1.NetworkCfgChoice == nil {
		if this.NetworkCfgChoice != nil {
			return false
		}
	} else if this.NetworkCfgChoice == nil {
		return false
	} else if !this.NetworkCfgChoice.Equal(that1.NetworkCfgChoice) {
		return false
	}
	if that1.StorageCfgChoice == nil {
		if this.StorageCfgChoice != nil {
			return false
		}
	} else if this.StorageCfgChoice == nil {
		return false
	} else if !this.StorageCfgChoice.Equal(that1.StorageCfgChoice) {
		return false
	}
	if that1.GpuChoice == nil {
		if this.GpuChoice != nil {
			return false
		}
	} else if this.GpuChoice == nil {
		return false
	} else if !this.GpuChoice.Equal(that1.GpuChoice) {
		return false
	}
	if this.Address != that1.Address {
		return false
	}
	if !this.Coordinates.Equal(that1.Coordinates) {
		return false
	}
	if that1.K8SClusterChoice == nil {
		if this.K8SClusterChoice != nil {
			return false
		}
	} else if this.K8SClusterChoice == nil {
		return false
	} else if !this.K8SClusterChoice.Equal(that1.K8SClusterChoice) {
		return false
	}
	if that1.LogsReceiverChoice == nil {
		if this.LogsReceiverChoice != nil {
			return false
		}
	} else if this.LogsReceiverChoice == nil {
		return false
	} else if !this.LogsReceiverChoice.Equal(that1.LogsReceiverChoice) {
		return false
	}
	if that1.UsbPolicyChoice == nil {
		if this.UsbPolicyChoice != nil {
			return false
		}
	} else if this.UsbPolicyChoice == nil {
		return false
	} else if !this.UsbPolicyChoice.Equal(that1.UsbPolicyChoice) {
		return false
	}
	return true
}
func (this *GetSpecType_NoBondDevices) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_NoBondDevices)
	if !ok {
		that2, ok := that.(GetSpecType_NoBondDevices)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NoBondDevices.Equal(that1.NoBondDevices) {
		return false
	}
	return true
}
func (this *GetSpecType_BondDeviceList) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_BondDeviceList)
	if !ok {
		that2, ok := that.(GetSpecType_BondDeviceList)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.BondDeviceList.Equal(that1.BondDeviceList) {
		return false
	}
	return true
}
func (this *GetSpecType_DefaultNetworkConfig) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_DefaultNetworkConfig)
	if !ok {
		that2, ok := that.(GetSpecType_DefaultNetworkConfig)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DefaultNetworkConfig.Equal(that1.DefaultNetworkConfig) {
		return false
	}
	return true
}
func (this *GetSpecType_CustomNetworkConfig) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_CustomNetworkConfig)
	if !ok {
		that2, ok := that.(GetSpecType_CustomNetworkConfig)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.CustomNetworkConfig.Equal(that1.CustomNetworkConfig) {
		return false
	}
	return true
}
func (this *GetSpecType_DefaultStorageConfig) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_DefaultStorageConfig)
	if !ok {
		that2, ok := that.(GetSpecType_DefaultStorageConfig)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DefaultStorageConfig.Equal(that1.DefaultStorageConfig) {
		return false
	}
	return true
}
func (this *GetSpecType_CustomStorageConfig) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_CustomStorageConfig)
	if !ok {
		that2, ok := that.(GetSpecType_CustomStorageConfig)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.CustomStorageConfig.Equal(that1.CustomStorageConfig) {
		return false
	}
	return true
}
func (this *GetSpecType_DisableGpu) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_DisableGpu)
	if !ok {
		that2, ok := that.(GetSpecType_DisableGpu)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DisableGpu.Equal(that1.DisableGpu) {
		return false
	}
	return true
}
func (this *GetSpecType_EnableGpu) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_EnableGpu)
	if !ok {
		that2, ok := that.(GetSpecType_EnableGpu)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.EnableGpu.Equal(that1.EnableGpu) {
		return false
	}
	return true
}
func (this *GetSpecType_NoK8SCluster) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_NoK8SCluster)
	if !ok {
		that2, ok := that.(GetSpecType_NoK8SCluster)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NoK8SCluster.Equal(that1.NoK8SCluster) {
		return false
	}
	return true
}
func (this *GetSpecType_K8SCluster) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_K8SCluster)
	if !ok {
		that2, ok := that.(GetSpecType_K8SCluster)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.K8SCluster.Equal(that1.K8SCluster) {
		return false
	}
	return true
}
func (this *GetSpecType_LogsStreamingDisabled) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_LogsStreamingDisabled)
	if !ok {
		that2, ok := that.(GetSpecType_LogsStreamingDisabled)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.LogsStreamingDisabled.Equal(that1.LogsStreamingDisabled) {
		return false
	}
	return true
}
func (this *GetSpecType_LogReceiver) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_LogReceiver)
	if !ok {
		that2, ok := that.(GetSpecType_LogReceiver)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.LogReceiver.Equal(that1.LogReceiver) {
		return false
	}
	return true
}
func (this *GetSpecType_DenyAllUsb) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_DenyAllUsb)
	if !ok {
		that2, ok := that.(GetSpecType_DenyAllUsb)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DenyAllUsb.Equal(that1.DenyAllUsb) {
		return false
	}
	return true
}
func (this *GetSpecType_AllowAllUsb) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_AllowAllUsb)
	if !ok {
		that2, ok := that.(GetSpecType_AllowAllUsb)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AllowAllUsb.Equal(that1.AllowAllUsb) {
		return false
	}
	return true
}
func (this *GetSpecType_UsbPolicy) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_UsbPolicy)
	if !ok {
		that2, ok := that.(GetSpecType_UsbPolicy)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.UsbPolicy.Equal(that1.UsbPolicy) {
		return false
	}
	return true
}
func (this *Interface) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&voltstack_site.Interface{")
	s = append(s, "Description: "+fmt.Sprintf("%#v", this.Description)+",\n")
	keysForLabels := make([]string, 0, len(this.Labels))
	for k, _ := range this.Labels {
		keysForLabels = append(keysForLabels, k)
	}
	sortkeys.Strings(keysForLabels)
	mapStringForLabels := "map[string]string{"
	for _, k := range keysForLabels {
		mapStringForLabels += fmt.Sprintf("%#v: %#v,", k, this.Labels[k])
	}
	mapStringForLabels += "}"
	if this.Labels != nil {
		s = append(s, "Labels: "+mapStringForLabels+",\n")
	}
	if this.InterfaceChoice != nil {
		s = append(s, "InterfaceChoice: "+fmt.Sprintf("%#v", this.InterfaceChoice)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Interface_EthernetInterface) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&voltstack_site.Interface_EthernetInterface{` +
		`EthernetInterface:` + fmt.Sprintf("%#v", this.EthernetInterface) + `}`}, ", ")
	return s
}
func (this *Interface_DedicatedInterface) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&voltstack_site.Interface_DedicatedInterface{` +
		`DedicatedInterface:` + fmt.Sprintf("%#v", this.DedicatedInterface) + `}`}, ", ")
	return s
}
func (this *Interface_DedicatedManagementInterface) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&voltstack_site.Interface_DedicatedManagementInterface{` +
		`DedicatedManagementInterface:` + fmt.Sprintf("%#v", this.DedicatedManagementInterface) + `}`}, ", ")
	return s
}
func (this *Interface_TunnelInterface) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&voltstack_site.Interface_TunnelInterface{` +
		`TunnelInterface:` + fmt.Sprintf("%#v", this.TunnelInterface) + `}`}, ", ")
	return s
}
func (this *InterfaceListType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&voltstack_site.InterfaceListType{")
	if this.Interfaces != nil {
		s = append(s, "Interfaces: "+fmt.Sprintf("%#v", this.Interfaces)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *StorageInterfaceType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&voltstack_site.StorageInterfaceType{")
	s = append(s, "Description: "+fmt.Sprintf("%#v", this.Description)+",\n")
	keysForLabels := make([]string, 0, len(this.Labels))
	for k, _ := range this.Labels {
		keysForLabels = append(keysForLabels, k)
	}
	sortkeys.Strings(keysForLabels)
	mapStringForLabels := "map[string]string{"
	for _, k := range keysForLabels {
		mapStringForLabels += fmt.Sprintf("%#v: %#v,", k, this.Labels[k])
	}
	mapStringForLabels += "}"
	if this.Labels != nil {
		s = append(s, "Labels: "+mapStringForLabels+",\n")
	}
	if this.StorageInterface != nil {
		s = append(s, "StorageInterface: "+fmt.Sprintf("%#v", this.StorageInterface)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *StorageInterfaceListType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&voltstack_site.StorageInterfaceListType{")
	if this.StorageInterfaces != nil {
		s = append(s, "StorageInterfaces: "+fmt.Sprintf("%#v", this.StorageInterfaces)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *StaticRoutesListType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&voltstack_site.StaticRoutesListType{")
	if this.StaticRoutes != nil {
		s = append(s, "StaticRoutes: "+fmt.Sprintf("%#v", this.StaticRoutes)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *VnConfiguration) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&voltstack_site.VnConfiguration{")
	keysForLabels := make([]string, 0, len(this.Labels))
	for k, _ := range this.Labels {
		keysForLabels = append(keysForLabels, k)
	}
	sortkeys.Strings(keysForLabels)
	mapStringForLabels := "map[string]string{"
	for _, k := range keysForLabels {
		mapStringForLabels += fmt.Sprintf("%#v: %#v,", k, this.Labels[k])
	}
	mapStringForLabels += "}"
	if this.Labels != nil {
		s = append(s, "Labels: "+mapStringForLabels+",\n")
	}
	if this.StaticRouteChoice != nil {
		s = append(s, "StaticRouteChoice: "+fmt.Sprintf("%#v", this.StaticRouteChoice)+",\n")
	}
	if this.DcClusterGroupChoice != nil {
		s = append(s, "DcClusterGroupChoice: "+fmt.Sprintf("%#v", this.DcClusterGroupChoice)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *VnConfiguration_NoStaticRoutes) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&voltstack_site.VnConfiguration_NoStaticRoutes{` +
		`NoStaticRoutes:` + fmt.Sprintf("%#v", this.NoStaticRoutes) + `}`}, ", ")
	return s
}
func (this *VnConfiguration_StaticRoutes) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&voltstack_site.VnConfiguration_StaticRoutes{` +
		`StaticRoutes:` + fmt.Sprintf("%#v", this.StaticRoutes) + `}`}, ", ")
	return s
}
func (this *VnConfiguration_NoDcClusterGroup) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&voltstack_site.VnConfiguration_NoDcClusterGroup{` +
		`NoDcClusterGroup:` + fmt.Sprintf("%#v", this.NoDcClusterGroup) + `}`}, ", ")
	return s
}
func (this *VnConfiguration_DcClusterGroup) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&voltstack_site.VnConfiguration_DcClusterGroup{` +
		`DcClusterGroup:` + fmt.Sprintf("%#v", this.DcClusterGroup) + `}`}, ", ")
	return s
}
func (this *GlobalNetworkConnectionType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&voltstack_site.GlobalNetworkConnectionType{")
	if this.ConnectionChoice != nil {
		s = append(s, "ConnectionChoice: "+fmt.Sprintf("%#v", this.ConnectionChoice)+",\n")
	}
	if this.ForwardProxyChoice != nil {
		s = append(s, "ForwardProxyChoice: "+fmt.Sprintf("%#v", this.ForwardProxyChoice)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GlobalNetworkConnectionType_SloToGlobalDr) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&voltstack_site.GlobalNetworkConnectionType_SloToGlobalDr{` +
		`SloToGlobalDr:` + fmt.Sprintf("%#v", this.SloToGlobalDr) + `}`}, ", ")
	return s
}
func (this *GlobalNetworkConnectionType_DisableForwardProxy) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&voltstack_site.GlobalNetworkConnectionType_DisableForwardProxy{` +
		`DisableForwardProxy:` + fmt.Sprintf("%#v", this.DisableForwardProxy) + `}`}, ", ")
	return s
}
func (this *GlobalNetworkConnectionType_EnableForwardProxy) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&voltstack_site.GlobalNetworkConnectionType_EnableForwardProxy{` +
		`EnableForwardProxy:` + fmt.Sprintf("%#v", this.EnableForwardProxy) + `}`}, ", ")
	return s
}
func (this *GlobalNetworkConnectionListType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&voltstack_site.GlobalNetworkConnectionListType{")
	if this.GlobalNetworkConnections != nil {
		s = append(s, "GlobalNetworkConnections: "+fmt.Sprintf("%#v", this.GlobalNetworkConnections)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *VssNetworkConfiguration) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 22)
	s = append(s, "&voltstack_site.VssNetworkConfiguration{")
	if this.SloChoice != nil {
		s = append(s, "SloChoice: "+fmt.Sprintf("%#v", this.SloChoice)+",\n")
	}
	if this.InterfaceChoice != nil {
		s = append(s, "InterfaceChoice: "+fmt.Sprintf("%#v", this.InterfaceChoice)+",\n")
	}
	if this.NetworkPolicyChoice != nil {
		s = append(s, "NetworkPolicyChoice: "+fmt.Sprintf("%#v", this.NetworkPolicyChoice)+",\n")
	}
	if this.ForwardProxyChoice != nil {
		s = append(s, "ForwardProxyChoice: "+fmt.Sprintf("%#v", this.ForwardProxyChoice)+",\n")
	}
	if this.GlobalNetworkChoice != nil {
		s = append(s, "GlobalNetworkChoice: "+fmt.Sprintf("%#v", this.GlobalNetworkChoice)+",\n")
	}
	s = append(s, "OutsideVip: "+fmt.Sprintf("%#v", this.OutsideVip)+",\n")
	s = append(s, "OutsideNameserver: "+fmt.Sprintf("%#v", this.OutsideNameserver)+",\n")
	s = append(s, "BgpRouterId: "+fmt.Sprintf("%#v", this.BgpRouterId)+",\n")
	s = append(s, "BgpPeerAddress: "+fmt.Sprintf("%#v", this.BgpPeerAddress)+",\n")
	s = append(s, "VipVrrpMode: "+fmt.Sprintf("%#v", this.VipVrrpMode)+",\n")
	s = append(s, "SiteToSiteTunnelIp: "+fmt.Sprintf("%#v", this.SiteToSiteTunnelIp)+",\n")
	s = append(s, "TunnelDeadTimeout: "+fmt.Sprintf("%#v", this.TunnelDeadTimeout)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *VssNetworkConfiguration_DefaultConfig) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&voltstack_site.VssNetworkConfiguration_DefaultConfig{` +
		`DefaultConfig:` + fmt.Sprintf("%#v", this.DefaultConfig) + `}`}, ", ")
	return s
}
func (this *VssNetworkConfiguration_SloConfig) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&voltstack_site.VssNetworkConfiguration_SloConfig{` +
		`SloConfig:` + fmt.Sprintf("%#v", this.SloConfig) + `}`}, ", ")
	return s
}
func (this *VssNetworkConfiguration_DefaultInterfaceConfig) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&voltstack_site.VssNetworkConfiguration_DefaultInterfaceConfig{` +
		`DefaultInterfaceConfig:` + fmt.Sprintf("%#v", this.DefaultInterfaceConfig) + `}`}, ", ")
	return s
}
func (this *VssNetworkConfiguration_InterfaceList) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&voltstack_site.VssNetworkConfiguration_InterfaceList{` +
		`InterfaceList:` + fmt.Sprintf("%#v", this.InterfaceList) + `}`}, ", ")
	return s
}
func (this *VssNetworkConfiguration_NoNetworkPolicy) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&voltstack_site.VssNetworkConfiguration_NoNetworkPolicy{` +
		`NoNetworkPolicy:` + fmt.Sprintf("%#v", this.NoNetworkPolicy) + `}`}, ", ")
	return s
}
func (this *VssNetworkConfiguration_ActiveNetworkPolicies) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&voltstack_site.VssNetworkConfiguration_ActiveNetworkPolicies{` +
		`ActiveNetworkPolicies:` + fmt.Sprintf("%#v", this.ActiveNetworkPolicies) + `}`}, ", ")
	return s
}
func (this *VssNetworkConfiguration_NoForwardProxy) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&voltstack_site.VssNetworkConfiguration_NoForwardProxy{` +
		`NoForwardProxy:` + fmt.Sprintf("%#v", this.NoForwardProxy) + `}`}, ", ")
	return s
}
func (this *VssNetworkConfiguration_ActiveForwardProxyPolicies) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&voltstack_site.VssNetworkConfiguration_ActiveForwardProxyPolicies{` +
		`ActiveForwardProxyPolicies:` + fmt.Sprintf("%#v", this.ActiveForwardProxyPolicies) + `}`}, ", ")
	return s
}
func (this *VssNetworkConfiguration_ForwardProxyAllowAll) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&voltstack_site.VssNetworkConfiguration_ForwardProxyAllowAll{` +
		`ForwardProxyAllowAll:` + fmt.Sprintf("%#v", this.ForwardProxyAllowAll) + `}`}, ", ")
	return s
}
func (this *VssNetworkConfiguration_NoGlobalNetwork) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&voltstack_site.VssNetworkConfiguration_NoGlobalNetwork{` +
		`NoGlobalNetwork:` + fmt.Sprintf("%#v", this.NoGlobalNetwork) + `}`}, ", ")
	return s
}
func (this *VssNetworkConfiguration_GlobalNetworkList) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&voltstack_site.VssNetworkConfiguration_GlobalNetworkList{` +
		`GlobalNetworkList:` + fmt.Sprintf("%#v", this.GlobalNetworkList) + `}`}, ", ")
	return s
}
func (this *VssStorageConfiguration) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 12)
	s = append(s, "&voltstack_site.VssStorageConfiguration{")
	if this.StorageInterfaceChoice != nil {
		s = append(s, "StorageInterfaceChoice: "+fmt.Sprintf("%#v", this.StorageInterfaceChoice)+",\n")
	}
	if this.StorageDeviceChoice != nil {
		s = append(s, "StorageDeviceChoice: "+fmt.Sprintf("%#v", this.StorageDeviceChoice)+",\n")
	}
	if this.StorageClassChoice != nil {
		s = append(s, "StorageClassChoice: "+fmt.Sprintf("%#v", this.StorageClassChoice)+",\n")
	}
	if this.StaticRouteChoice != nil {
		s = append(s, "StaticRouteChoice: "+fmt.Sprintf("%#v", this.StaticRouteChoice)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *VssStorageConfiguration_NoStorageInterfaces) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&voltstack_site.VssStorageConfiguration_NoStorageInterfaces{` +
		`NoStorageInterfaces:` + fmt.Sprintf("%#v", this.NoStorageInterfaces) + `}`}, ", ")
	return s
}
func (this *VssStorageConfiguration_StorageInterfaceList) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&voltstack_site.VssStorageConfiguration_StorageInterfaceList{` +
		`StorageInterfaceList:` + fmt.Sprintf("%#v", this.StorageInterfaceList) + `}`}, ", ")
	return s
}
func (this *VssStorageConfiguration_NoStorageDevice) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&voltstack_site.VssStorageConfiguration_NoStorageDevice{` +
		`NoStorageDevice:` + fmt.Sprintf("%#v", this.NoStorageDevice) + `}`}, ", ")
	return s
}
func (this *VssStorageConfiguration_StorageDeviceList) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&voltstack_site.VssStorageConfiguration_StorageDeviceList{` +
		`StorageDeviceList:` + fmt.Sprintf("%#v", this.StorageDeviceList) + `}`}, ", ")
	return s
}
func (this *VssStorageConfiguration_DefaultStorageClass) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&voltstack_site.VssStorageConfiguration_DefaultStorageClass{` +
		`DefaultStorageClass:` + fmt.Sprintf("%#v", this.DefaultStorageClass) + `}`}, ", ")
	return s
}
func (this *VssStorageConfiguration_StorageClassList) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&voltstack_site.VssStorageConfiguration_StorageClassList{` +
		`StorageClassList:` + fmt.Sprintf("%#v", this.StorageClassList) + `}`}, ", ")
	return s
}
func (this *VssStorageConfiguration_NoStaticRoutes) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&voltstack_site.VssStorageConfiguration_NoStaticRoutes{` +
		`NoStaticRoutes:` + fmt.Sprintf("%#v", this.NoStaticRoutes) + `}`}, ", ")
	return s
}
func (this *VssStorageConfiguration_StaticRoutes) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&voltstack_site.VssStorageConfiguration_StaticRoutes{` +
		`StaticRoutes:` + fmt.Sprintf("%#v", this.StaticRoutes) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 27)
	s = append(s, "&voltstack_site.GlobalSpecType{")
	s = append(s, "VolterraCertifiedHw: "+fmt.Sprintf("%#v", this.VolterraCertifiedHw)+",\n")
	s = append(s, "MasterNodes: "+fmt.Sprintf("%#v", this.MasterNodes)+",\n")
	s = append(s, "WorkerNodes: "+fmt.Sprintf("%#v", this.WorkerNodes)+",\n")
	s = append(s, "VolterraSoftwareVersion: "+fmt.Sprintf("%#v", this.VolterraSoftwareVersion)+",\n")
	s = append(s, "OperatingSystemVersion: "+fmt.Sprintf("%#v", this.OperatingSystemVersion)+",\n")
	if this.BondChoice != nil {
		s = append(s, "BondChoice: "+fmt.Sprintf("%#v", this.BondChoice)+",\n")
	}
	if this.NetworkCfgChoice != nil {
		s = append(s, "NetworkCfgChoice: "+fmt.Sprintf("%#v", this.NetworkCfgChoice)+",\n")
	}
	if this.StorageCfgChoice != nil {
		s = append(s, "StorageCfgChoice: "+fmt.Sprintf("%#v", this.StorageCfgChoice)+",\n")
	}
	if this.GpuChoice != nil {
		s = append(s, "GpuChoice: "+fmt.Sprintf("%#v", this.GpuChoice)+",\n")
	}
	s = append(s, "Address: "+fmt.Sprintf("%#v", this.Address)+",\n")
	if this.Coordinates != nil {
		s = append(s, "Coordinates: "+fmt.Sprintf("%#v", this.Coordinates)+",\n")
	}
	if this.K8SClusterChoice != nil {
		s = append(s, "K8SClusterChoice: "+fmt.Sprintf("%#v", this.K8SClusterChoice)+",\n")
	}
	if this.LogsReceiverChoice != nil {
		s = append(s, "LogsReceiverChoice: "+fmt.Sprintf("%#v", this.LogsReceiverChoice)+",\n")
	}
	if this.UsbPolicyChoice != nil {
		s = append(s, "UsbPolicyChoice: "+fmt.Sprintf("%#v", this.UsbPolicyChoice)+",\n")
	}
	if this.ViewInternal != nil {
		s = append(s, "ViewInternal: "+fmt.Sprintf("%#v", this.ViewInternal)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GlobalSpecType_NoBondDevices) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&voltstack_site.GlobalSpecType_NoBondDevices{` +
		`NoBondDevices:` + fmt.Sprintf("%#v", this.NoBondDevices) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_BondDeviceList) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&voltstack_site.GlobalSpecType_BondDeviceList{` +
		`BondDeviceList:` + fmt.Sprintf("%#v", this.BondDeviceList) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_DefaultNetworkConfig) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&voltstack_site.GlobalSpecType_DefaultNetworkConfig{` +
		`DefaultNetworkConfig:` + fmt.Sprintf("%#v", this.DefaultNetworkConfig) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_CustomNetworkConfig) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&voltstack_site.GlobalSpecType_CustomNetworkConfig{` +
		`CustomNetworkConfig:` + fmt.Sprintf("%#v", this.CustomNetworkConfig) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_DefaultStorageConfig) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&voltstack_site.GlobalSpecType_DefaultStorageConfig{` +
		`DefaultStorageConfig:` + fmt.Sprintf("%#v", this.DefaultStorageConfig) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_CustomStorageConfig) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&voltstack_site.GlobalSpecType_CustomStorageConfig{` +
		`CustomStorageConfig:` + fmt.Sprintf("%#v", this.CustomStorageConfig) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_DisableGpu) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&voltstack_site.GlobalSpecType_DisableGpu{` +
		`DisableGpu:` + fmt.Sprintf("%#v", this.DisableGpu) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_EnableGpu) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&voltstack_site.GlobalSpecType_EnableGpu{` +
		`EnableGpu:` + fmt.Sprintf("%#v", this.EnableGpu) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_NoK8SCluster) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&voltstack_site.GlobalSpecType_NoK8SCluster{` +
		`NoK8SCluster:` + fmt.Sprintf("%#v", this.NoK8SCluster) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_K8SCluster) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&voltstack_site.GlobalSpecType_K8SCluster{` +
		`K8SCluster:` + fmt.Sprintf("%#v", this.K8SCluster) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_LogsStreamingDisabled) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&voltstack_site.GlobalSpecType_LogsStreamingDisabled{` +
		`LogsStreamingDisabled:` + fmt.Sprintf("%#v", this.LogsStreamingDisabled) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_LogReceiver) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&voltstack_site.GlobalSpecType_LogReceiver{` +
		`LogReceiver:` + fmt.Sprintf("%#v", this.LogReceiver) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_DenyAllUsb) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&voltstack_site.GlobalSpecType_DenyAllUsb{` +
		`DenyAllUsb:` + fmt.Sprintf("%#v", this.DenyAllUsb) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_AllowAllUsb) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&voltstack_site.GlobalSpecType_AllowAllUsb{` +
		`AllowAllUsb:` + fmt.Sprintf("%#v", this.AllowAllUsb) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_UsbPolicy) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&voltstack_site.GlobalSpecType_UsbPolicy{` +
		`UsbPolicy:` + fmt.Sprintf("%#v", this.UsbPolicy) + `}`}, ", ")
	return s
}
func (this *CreateSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 26)
	s = append(s, "&voltstack_site.CreateSpecType{")
	s = append(s, "VolterraCertifiedHw: "+fmt.Sprintf("%#v", this.VolterraCertifiedHw)+",\n")
	s = append(s, "MasterNodes: "+fmt.Sprintf("%#v", this.MasterNodes)+",\n")
	s = append(s, "WorkerNodes: "+fmt.Sprintf("%#v", this.WorkerNodes)+",\n")
	s = append(s, "VolterraSoftwareVersion: "+fmt.Sprintf("%#v", this.VolterraSoftwareVersion)+",\n")
	s = append(s, "OperatingSystemVersion: "+fmt.Sprintf("%#v", this.OperatingSystemVersion)+",\n")
	if this.BondChoice != nil {
		s = append(s, "BondChoice: "+fmt.Sprintf("%#v", this.BondChoice)+",\n")
	}
	if this.NetworkCfgChoice != nil {
		s = append(s, "NetworkCfgChoice: "+fmt.Sprintf("%#v", this.NetworkCfgChoice)+",\n")
	}
	if this.StorageCfgChoice != nil {
		s = append(s, "StorageCfgChoice: "+fmt.Sprintf("%#v", this.StorageCfgChoice)+",\n")
	}
	if this.GpuChoice != nil {
		s = append(s, "GpuChoice: "+fmt.Sprintf("%#v", this.GpuChoice)+",\n")
	}
	s = append(s, "Address: "+fmt.Sprintf("%#v", this.Address)+",\n")
	if this.Coordinates != nil {
		s = append(s, "Coordinates: "+fmt.Sprintf("%#v", this.Coordinates)+",\n")
	}
	if this.K8SClusterChoice != nil {
		s = append(s, "K8SClusterChoice: "+fmt.Sprintf("%#v", this.K8SClusterChoice)+",\n")
	}
	if this.LogsReceiverChoice != nil {
		s = append(s, "LogsReceiverChoice: "+fmt.Sprintf("%#v", this.LogsReceiverChoice)+",\n")
	}
	if this.UsbPolicyChoice != nil {
		s = append(s, "UsbPolicyChoice: "+fmt.Sprintf("%#v", this.UsbPolicyChoice)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CreateSpecType_NoBondDevices) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&voltstack_site.CreateSpecType_NoBondDevices{` +
		`NoBondDevices:` + fmt.Sprintf("%#v", this.NoBondDevices) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_BondDeviceList) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&voltstack_site.CreateSpecType_BondDeviceList{` +
		`BondDeviceList:` + fmt.Sprintf("%#v", this.BondDeviceList) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_DefaultNetworkConfig) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&voltstack_site.CreateSpecType_DefaultNetworkConfig{` +
		`DefaultNetworkConfig:` + fmt.Sprintf("%#v", this.DefaultNetworkConfig) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_CustomNetworkConfig) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&voltstack_site.CreateSpecType_CustomNetworkConfig{` +
		`CustomNetworkConfig:` + fmt.Sprintf("%#v", this.CustomNetworkConfig) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_DefaultStorageConfig) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&voltstack_site.CreateSpecType_DefaultStorageConfig{` +
		`DefaultStorageConfig:` + fmt.Sprintf("%#v", this.DefaultStorageConfig) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_CustomStorageConfig) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&voltstack_site.CreateSpecType_CustomStorageConfig{` +
		`CustomStorageConfig:` + fmt.Sprintf("%#v", this.CustomStorageConfig) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_DisableGpu) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&voltstack_site.CreateSpecType_DisableGpu{` +
		`DisableGpu:` + fmt.Sprintf("%#v", this.DisableGpu) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_EnableGpu) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&voltstack_site.CreateSpecType_EnableGpu{` +
		`EnableGpu:` + fmt.Sprintf("%#v", this.EnableGpu) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_NoK8SCluster) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&voltstack_site.CreateSpecType_NoK8SCluster{` +
		`NoK8SCluster:` + fmt.Sprintf("%#v", this.NoK8SCluster) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_K8SCluster) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&voltstack_site.CreateSpecType_K8SCluster{` +
		`K8SCluster:` + fmt.Sprintf("%#v", this.K8SCluster) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_LogsStreamingDisabled) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&voltstack_site.CreateSpecType_LogsStreamingDisabled{` +
		`LogsStreamingDisabled:` + fmt.Sprintf("%#v", this.LogsStreamingDisabled) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_LogReceiver) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&voltstack_site.CreateSpecType_LogReceiver{` +
		`LogReceiver:` + fmt.Sprintf("%#v", this.LogReceiver) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_DenyAllUsb) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&voltstack_site.CreateSpecType_DenyAllUsb{` +
		`DenyAllUsb:` + fmt.Sprintf("%#v", this.DenyAllUsb) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_AllowAllUsb) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&voltstack_site.CreateSpecType_AllowAllUsb{` +
		`AllowAllUsb:` + fmt.Sprintf("%#v", this.AllowAllUsb) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_UsbPolicy) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&voltstack_site.CreateSpecType_UsbPolicy{` +
		`UsbPolicy:` + fmt.Sprintf("%#v", this.UsbPolicy) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 26)
	s = append(s, "&voltstack_site.ReplaceSpecType{")
	s = append(s, "VolterraCertifiedHw: "+fmt.Sprintf("%#v", this.VolterraCertifiedHw)+",\n")
	s = append(s, "MasterNodes: "+fmt.Sprintf("%#v", this.MasterNodes)+",\n")
	s = append(s, "WorkerNodes: "+fmt.Sprintf("%#v", this.WorkerNodes)+",\n")
	s = append(s, "VolterraSoftwareVersion: "+fmt.Sprintf("%#v", this.VolterraSoftwareVersion)+",\n")
	s = append(s, "OperatingSystemVersion: "+fmt.Sprintf("%#v", this.OperatingSystemVersion)+",\n")
	if this.BondChoice != nil {
		s = append(s, "BondChoice: "+fmt.Sprintf("%#v", this.BondChoice)+",\n")
	}
	if this.NetworkCfgChoice != nil {
		s = append(s, "NetworkCfgChoice: "+fmt.Sprintf("%#v", this.NetworkCfgChoice)+",\n")
	}
	if this.StorageCfgChoice != nil {
		s = append(s, "StorageCfgChoice: "+fmt.Sprintf("%#v", this.StorageCfgChoice)+",\n")
	}
	if this.GpuChoice != nil {
		s = append(s, "GpuChoice: "+fmt.Sprintf("%#v", this.GpuChoice)+",\n")
	}
	s = append(s, "Address: "+fmt.Sprintf("%#v", this.Address)+",\n")
	if this.Coordinates != nil {
		s = append(s, "Coordinates: "+fmt.Sprintf("%#v", this.Coordinates)+",\n")
	}
	if this.K8SClusterChoice != nil {
		s = append(s, "K8SClusterChoice: "+fmt.Sprintf("%#v", this.K8SClusterChoice)+",\n")
	}
	if this.LogsReceiverChoice != nil {
		s = append(s, "LogsReceiverChoice: "+fmt.Sprintf("%#v", this.LogsReceiverChoice)+",\n")
	}
	if this.UsbPolicyChoice != nil {
		s = append(s, "UsbPolicyChoice: "+fmt.Sprintf("%#v", this.UsbPolicyChoice)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ReplaceSpecType_NoBondDevices) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&voltstack_site.ReplaceSpecType_NoBondDevices{` +
		`NoBondDevices:` + fmt.Sprintf("%#v", this.NoBondDevices) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_BondDeviceList) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&voltstack_site.ReplaceSpecType_BondDeviceList{` +
		`BondDeviceList:` + fmt.Sprintf("%#v", this.BondDeviceList) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_DefaultNetworkConfig) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&voltstack_site.ReplaceSpecType_DefaultNetworkConfig{` +
		`DefaultNetworkConfig:` + fmt.Sprintf("%#v", this.DefaultNetworkConfig) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_CustomNetworkConfig) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&voltstack_site.ReplaceSpecType_CustomNetworkConfig{` +
		`CustomNetworkConfig:` + fmt.Sprintf("%#v", this.CustomNetworkConfig) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_DefaultStorageConfig) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&voltstack_site.ReplaceSpecType_DefaultStorageConfig{` +
		`DefaultStorageConfig:` + fmt.Sprintf("%#v", this.DefaultStorageConfig) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_CustomStorageConfig) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&voltstack_site.ReplaceSpecType_CustomStorageConfig{` +
		`CustomStorageConfig:` + fmt.Sprintf("%#v", this.CustomStorageConfig) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_DisableGpu) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&voltstack_site.ReplaceSpecType_DisableGpu{` +
		`DisableGpu:` + fmt.Sprintf("%#v", this.DisableGpu) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_EnableGpu) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&voltstack_site.ReplaceSpecType_EnableGpu{` +
		`EnableGpu:` + fmt.Sprintf("%#v", this.EnableGpu) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_NoK8SCluster) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&voltstack_site.ReplaceSpecType_NoK8SCluster{` +
		`NoK8SCluster:` + fmt.Sprintf("%#v", this.NoK8SCluster) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_K8SCluster) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&voltstack_site.ReplaceSpecType_K8SCluster{` +
		`K8SCluster:` + fmt.Sprintf("%#v", this.K8SCluster) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_LogsStreamingDisabled) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&voltstack_site.ReplaceSpecType_LogsStreamingDisabled{` +
		`LogsStreamingDisabled:` + fmt.Sprintf("%#v", this.LogsStreamingDisabled) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_LogReceiver) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&voltstack_site.ReplaceSpecType_LogReceiver{` +
		`LogReceiver:` + fmt.Sprintf("%#v", this.LogReceiver) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_DenyAllUsb) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&voltstack_site.ReplaceSpecType_DenyAllUsb{` +
		`DenyAllUsb:` + fmt.Sprintf("%#v", this.DenyAllUsb) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_AllowAllUsb) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&voltstack_site.ReplaceSpecType_AllowAllUsb{` +
		`AllowAllUsb:` + fmt.Sprintf("%#v", this.AllowAllUsb) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_UsbPolicy) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&voltstack_site.ReplaceSpecType_UsbPolicy{` +
		`UsbPolicy:` + fmt.Sprintf("%#v", this.UsbPolicy) + `}`}, ", ")
	return s
}
func (this *GetSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 26)
	s = append(s, "&voltstack_site.GetSpecType{")
	s = append(s, "VolterraCertifiedHw: "+fmt.Sprintf("%#v", this.VolterraCertifiedHw)+",\n")
	s = append(s, "MasterNodes: "+fmt.Sprintf("%#v", this.MasterNodes)+",\n")
	s = append(s, "WorkerNodes: "+fmt.Sprintf("%#v", this.WorkerNodes)+",\n")
	s = append(s, "VolterraSoftwareVersion: "+fmt.Sprintf("%#v", this.VolterraSoftwareVersion)+",\n")
	s = append(s, "OperatingSystemVersion: "+fmt.Sprintf("%#v", this.OperatingSystemVersion)+",\n")
	if this.BondChoice != nil {
		s = append(s, "BondChoice: "+fmt.Sprintf("%#v", this.BondChoice)+",\n")
	}
	if this.NetworkCfgChoice != nil {
		s = append(s, "NetworkCfgChoice: "+fmt.Sprintf("%#v", this.NetworkCfgChoice)+",\n")
	}
	if this.StorageCfgChoice != nil {
		s = append(s, "StorageCfgChoice: "+fmt.Sprintf("%#v", this.StorageCfgChoice)+",\n")
	}
	if this.GpuChoice != nil {
		s = append(s, "GpuChoice: "+fmt.Sprintf("%#v", this.GpuChoice)+",\n")
	}
	s = append(s, "Address: "+fmt.Sprintf("%#v", this.Address)+",\n")
	if this.Coordinates != nil {
		s = append(s, "Coordinates: "+fmt.Sprintf("%#v", this.Coordinates)+",\n")
	}
	if this.K8SClusterChoice != nil {
		s = append(s, "K8SClusterChoice: "+fmt.Sprintf("%#v", this.K8SClusterChoice)+",\n")
	}
	if this.LogsReceiverChoice != nil {
		s = append(s, "LogsReceiverChoice: "+fmt.Sprintf("%#v", this.LogsReceiverChoice)+",\n")
	}
	if this.UsbPolicyChoice != nil {
		s = append(s, "UsbPolicyChoice: "+fmt.Sprintf("%#v", this.UsbPolicyChoice)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetSpecType_NoBondDevices) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&voltstack_site.GetSpecType_NoBondDevices{` +
		`NoBondDevices:` + fmt.Sprintf("%#v", this.NoBondDevices) + `}`}, ", ")
	return s
}
func (this *GetSpecType_BondDeviceList) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&voltstack_site.GetSpecType_BondDeviceList{` +
		`BondDeviceList:` + fmt.Sprintf("%#v", this.BondDeviceList) + `}`}, ", ")
	return s
}
func (this *GetSpecType_DefaultNetworkConfig) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&voltstack_site.GetSpecType_DefaultNetworkConfig{` +
		`DefaultNetworkConfig:` + fmt.Sprintf("%#v", this.DefaultNetworkConfig) + `}`}, ", ")
	return s
}
func (this *GetSpecType_CustomNetworkConfig) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&voltstack_site.GetSpecType_CustomNetworkConfig{` +
		`CustomNetworkConfig:` + fmt.Sprintf("%#v", this.CustomNetworkConfig) + `}`}, ", ")
	return s
}
func (this *GetSpecType_DefaultStorageConfig) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&voltstack_site.GetSpecType_DefaultStorageConfig{` +
		`DefaultStorageConfig:` + fmt.Sprintf("%#v", this.DefaultStorageConfig) + `}`}, ", ")
	return s
}
func (this *GetSpecType_CustomStorageConfig) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&voltstack_site.GetSpecType_CustomStorageConfig{` +
		`CustomStorageConfig:` + fmt.Sprintf("%#v", this.CustomStorageConfig) + `}`}, ", ")
	return s
}
func (this *GetSpecType_DisableGpu) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&voltstack_site.GetSpecType_DisableGpu{` +
		`DisableGpu:` + fmt.Sprintf("%#v", this.DisableGpu) + `}`}, ", ")
	return s
}
func (this *GetSpecType_EnableGpu) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&voltstack_site.GetSpecType_EnableGpu{` +
		`EnableGpu:` + fmt.Sprintf("%#v", this.EnableGpu) + `}`}, ", ")
	return s
}
func (this *GetSpecType_NoK8SCluster) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&voltstack_site.GetSpecType_NoK8SCluster{` +
		`NoK8SCluster:` + fmt.Sprintf("%#v", this.NoK8SCluster) + `}`}, ", ")
	return s
}
func (this *GetSpecType_K8SCluster) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&voltstack_site.GetSpecType_K8SCluster{` +
		`K8SCluster:` + fmt.Sprintf("%#v", this.K8SCluster) + `}`}, ", ")
	return s
}
func (this *GetSpecType_LogsStreamingDisabled) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&voltstack_site.GetSpecType_LogsStreamingDisabled{` +
		`LogsStreamingDisabled:` + fmt.Sprintf("%#v", this.LogsStreamingDisabled) + `}`}, ", ")
	return s
}
func (this *GetSpecType_LogReceiver) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&voltstack_site.GetSpecType_LogReceiver{` +
		`LogReceiver:` + fmt.Sprintf("%#v", this.LogReceiver) + `}`}, ", ")
	return s
}
func (this *GetSpecType_DenyAllUsb) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&voltstack_site.GetSpecType_DenyAllUsb{` +
		`DenyAllUsb:` + fmt.Sprintf("%#v", this.DenyAllUsb) + `}`}, ", ")
	return s
}
func (this *GetSpecType_AllowAllUsb) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&voltstack_site.GetSpecType_AllowAllUsb{` +
		`AllowAllUsb:` + fmt.Sprintf("%#v", this.AllowAllUsb) + `}`}, ", ")
	return s
}
func (this *GetSpecType_UsbPolicy) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&voltstack_site.GetSpecType_UsbPolicy{` +
		`UsbPolicy:` + fmt.Sprintf("%#v", this.UsbPolicy) + `}`}, ", ")
	return s
}
func valueToGoStringTypes(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *Interface) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Interface) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Description) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Description)))
		i += copy(dAtA[i:], m.Description)
	}
	if len(m.Labels) > 0 {
		keysForLabels := make([]string, 0, len(m.Labels))
		for k, _ := range m.Labels {
			keysForLabels = append(keysForLabels, string(k))
		}
		sortkeys.Strings(keysForLabels)
		for _, k := range keysForLabels {
			dAtA[i] = 0x12
			i++
			v := m.Labels[string(k)]
			mapSize := 1 + len(k) + sovTypes(uint64(len(k))) + 1 + len(v) + sovTypes(uint64(len(v)))
			i = encodeVarintTypes(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintTypes(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			dAtA[i] = 0x12
			i++
			i = encodeVarintTypes(dAtA, i, uint64(len(v)))
			i += copy(dAtA[i:], v)
		}
	}
	if m.InterfaceChoice != nil {
		nn1, err := m.InterfaceChoice.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn1
	}
	return i, nil
}

func (m *Interface_EthernetInterface) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.EthernetInterface != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.EthernetInterface.Size()))
		n2, err := m.EthernetInterface.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	return i, nil
}
func (m *Interface_DedicatedInterface) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.DedicatedInterface != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.DedicatedInterface.Size()))
		n3, err := m.DedicatedInterface.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	return i, nil
}
func (m *Interface_DedicatedManagementInterface) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.DedicatedManagementInterface != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.DedicatedManagementInterface.Size()))
		n4, err := m.DedicatedManagementInterface.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	return i, nil
}
func (m *Interface_TunnelInterface) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.TunnelInterface != nil {
		dAtA[i] = 0x42
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.TunnelInterface.Size()))
		n5, err := m.TunnelInterface.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	return i, nil
}
func (m *InterfaceListType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InterfaceListType) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Interfaces) > 0 {
		for _, msg := range m.Interfaces {
			dAtA[i] = 0xa
			i++
			i = encodeVarintTypes(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *StorageInterfaceType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StorageInterfaceType) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Description) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Description)))
		i += copy(dAtA[i:], m.Description)
	}
	if len(m.Labels) > 0 {
		keysForLabels := make([]string, 0, len(m.Labels))
		for k, _ := range m.Labels {
			keysForLabels = append(keysForLabels, string(k))
		}
		sortkeys.Strings(keysForLabels)
		for _, k := range keysForLabels {
			dAtA[i] = 0x12
			i++
			v := m.Labels[string(k)]
			mapSize := 1 + len(k) + sovTypes(uint64(len(k))) + 1 + len(v) + sovTypes(uint64(len(v)))
			i = encodeVarintTypes(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintTypes(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			dAtA[i] = 0x12
			i++
			i = encodeVarintTypes(dAtA, i, uint64(len(v)))
			i += copy(dAtA[i:], v)
		}
	}
	if m.StorageInterface != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.StorageInterface.Size()))
		n6, err := m.StorageInterface.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	return i, nil
}

func (m *StorageInterfaceListType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StorageInterfaceListType) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.StorageInterfaces) > 0 {
		for _, msg := range m.StorageInterfaces {
			dAtA[i] = 0xa
			i++
			i = encodeVarintTypes(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *StaticRoutesListType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StaticRoutesListType) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.StaticRoutes) > 0 {
		for _, msg := range m.StaticRoutes {
			dAtA[i] = 0xa
			i++
			i = encodeVarintTypes(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *VnConfiguration) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VnConfiguration) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Labels) > 0 {
		keysForLabels := make([]string, 0, len(m.Labels))
		for k, _ := range m.Labels {
			keysForLabels = append(keysForLabels, string(k))
		}
		sortkeys.Strings(keysForLabels)
		for _, k := range keysForLabels {
			dAtA[i] = 0xa
			i++
			v := m.Labels[string(k)]
			mapSize := 1 + len(k) + sovTypes(uint64(len(k))) + 1 + len(v) + sovTypes(uint64(len(v)))
			i = encodeVarintTypes(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintTypes(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			dAtA[i] = 0x12
			i++
			i = encodeVarintTypes(dAtA, i, uint64(len(v)))
			i += copy(dAtA[i:], v)
		}
	}
	if m.StaticRouteChoice != nil {
		nn7, err := m.StaticRouteChoice.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn7
	}
	if m.DcClusterGroupChoice != nil {
		nn8, err := m.DcClusterGroupChoice.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn8
	}
	return i, nil
}

func (m *VnConfiguration_NoStaticRoutes) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.NoStaticRoutes != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.NoStaticRoutes.Size()))
		n9, err := m.NoStaticRoutes.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n9
	}
	return i, nil
}
func (m *VnConfiguration_StaticRoutes) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.StaticRoutes != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.StaticRoutes.Size()))
		n10, err := m.StaticRoutes.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n10
	}
	return i, nil
}
func (m *VnConfiguration_NoDcClusterGroup) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.NoDcClusterGroup != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.NoDcClusterGroup.Size()))
		n11, err := m.NoDcClusterGroup.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n11
	}
	return i, nil
}
func (m *VnConfiguration_DcClusterGroup) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.DcClusterGroup != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.DcClusterGroup.Size()))
		n12, err := m.DcClusterGroup.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n12
	}
	return i, nil
}
func (m *GlobalNetworkConnectionType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GlobalNetworkConnectionType) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ConnectionChoice != nil {
		nn13, err := m.ConnectionChoice.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn13
	}
	if m.ForwardProxyChoice != nil {
		nn14, err := m.ForwardProxyChoice.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn14
	}
	return i, nil
}

func (m *GlobalNetworkConnectionType_SloToGlobalDr) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.SloToGlobalDr != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.SloToGlobalDr.Size()))
		n15, err := m.SloToGlobalDr.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n15
	}
	return i, nil
}
func (m *GlobalNetworkConnectionType_DisableForwardProxy) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.DisableForwardProxy != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.DisableForwardProxy.Size()))
		n16, err := m.DisableForwardProxy.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n16
	}
	return i, nil
}
func (m *GlobalNetworkConnectionType_EnableForwardProxy) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.EnableForwardProxy != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.EnableForwardProxy.Size()))
		n17, err := m.EnableForwardProxy.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n17
	}
	return i, nil
}
func (m *GlobalNetworkConnectionListType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GlobalNetworkConnectionListType) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.GlobalNetworkConnections) > 0 {
		for _, msg := range m.GlobalNetworkConnections {
			dAtA[i] = 0xa
			i++
			i = encodeVarintTypes(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *VssNetworkConfiguration) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VssNetworkConfiguration) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.SloChoice != nil {
		nn18, err := m.SloChoice.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn18
	}
	if m.InterfaceChoice != nil {
		nn19, err := m.InterfaceChoice.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn19
	}
	if m.NetworkPolicyChoice != nil {
		nn20, err := m.NetworkPolicyChoice.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn20
	}
	if m.ForwardProxyChoice != nil {
		nn21, err := m.ForwardProxyChoice.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn21
	}
	if m.GlobalNetworkChoice != nil {
		nn22, err := m.GlobalNetworkChoice.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn22
	}
	if len(m.OutsideVip) > 0 {
		dAtA[i] = 0x82
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTypes(dAtA, i, uint64(len(m.OutsideVip)))
		i += copy(dAtA[i:], m.OutsideVip)
	}
	if len(m.OutsideNameserver) > 0 {
		dAtA[i] = 0x8a
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTypes(dAtA, i, uint64(len(m.OutsideNameserver)))
		i += copy(dAtA[i:], m.OutsideNameserver)
	}
	if len(m.BgpRouterId) > 0 {
		dAtA[i] = 0x92
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTypes(dAtA, i, uint64(len(m.BgpRouterId)))
		i += copy(dAtA[i:], m.BgpRouterId)
	}
	if len(m.BgpPeerAddress) > 0 {
		dAtA[i] = 0x9a
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTypes(dAtA, i, uint64(len(m.BgpPeerAddress)))
		i += copy(dAtA[i:], m.BgpPeerAddress)
	}
	if m.VipVrrpMode != 0 {
		dAtA[i] = 0xa0
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.VipVrrpMode))
	}
	if len(m.SiteToSiteTunnelIp) > 0 {
		dAtA[i] = 0xaa
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTypes(dAtA, i, uint64(len(m.SiteToSiteTunnelIp)))
		i += copy(dAtA[i:], m.SiteToSiteTunnelIp)
	}
	if m.TunnelDeadTimeout != 0 {
		dAtA[i] = 0xb0
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.TunnelDeadTimeout))
	}
	return i, nil
}

func (m *VssNetworkConfiguration_DefaultConfig) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.DefaultConfig != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.DefaultConfig.Size()))
		n23, err := m.DefaultConfig.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n23
	}
	return i, nil
}
func (m *VssNetworkConfiguration_SloConfig) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.SloConfig != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.SloConfig.Size()))
		n24, err := m.SloConfig.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n24
	}
	return i, nil
}
func (m *VssNetworkConfiguration_DefaultInterfaceConfig) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.DefaultInterfaceConfig != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.DefaultInterfaceConfig.Size()))
		n25, err := m.DefaultInterfaceConfig.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n25
	}
	return i, nil
}
func (m *VssNetworkConfiguration_InterfaceList) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.InterfaceList != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.InterfaceList.Size()))
		n26, err := m.InterfaceList.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n26
	}
	return i, nil
}
func (m *VssNetworkConfiguration_NoNetworkPolicy) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.NoNetworkPolicy != nil {
		dAtA[i] = 0x42
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.NoNetworkPolicy.Size()))
		n27, err := m.NoNetworkPolicy.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n27
	}
	return i, nil
}
func (m *VssNetworkConfiguration_ActiveNetworkPolicies) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.ActiveNetworkPolicies != nil {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.ActiveNetworkPolicies.Size()))
		n28, err := m.ActiveNetworkPolicies.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n28
	}
	return i, nil
}
func (m *VssNetworkConfiguration_NoForwardProxy) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.NoForwardProxy != nil {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.NoForwardProxy.Size()))
		n29, err := m.NoForwardProxy.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n29
	}
	return i, nil
}
func (m *VssNetworkConfiguration_ActiveForwardProxyPolicies) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.ActiveForwardProxyPolicies != nil {
		dAtA[i] = 0x62
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.ActiveForwardProxyPolicies.Size()))
		n30, err := m.ActiveForwardProxyPolicies.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n30
	}
	return i, nil
}
func (m *VssNetworkConfiguration_NoGlobalNetwork) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.NoGlobalNetwork != nil {
		dAtA[i] = 0x72
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.NoGlobalNetwork.Size()))
		n31, err := m.NoGlobalNetwork.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n31
	}
	return i, nil
}
func (m *VssNetworkConfiguration_GlobalNetworkList) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.GlobalNetworkList != nil {
		dAtA[i] = 0x7a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.GlobalNetworkList.Size()))
		n32, err := m.GlobalNetworkList.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n32
	}
	return i, nil
}
func (m *VssNetworkConfiguration_ForwardProxyAllowAll) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.ForwardProxyAllowAll != nil {
		dAtA[i] = 0xba
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.ForwardProxyAllowAll.Size()))
		n33, err := m.ForwardProxyAllowAll.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n33
	}
	return i, nil
}
func (m *VssStorageConfiguration) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VssStorageConfiguration) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.StorageInterfaceChoice != nil {
		nn34, err := m.StorageInterfaceChoice.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn34
	}
	if m.StorageDeviceChoice != nil {
		nn35, err := m.StorageDeviceChoice.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn35
	}
	if m.StorageClassChoice != nil {
		nn36, err := m.StorageClassChoice.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn36
	}
	if m.StaticRouteChoice != nil {
		nn37, err := m.StaticRouteChoice.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn37
	}
	return i, nil
}

func (m *VssStorageConfiguration_NoStorageInterfaces) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.NoStorageInterfaces != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.NoStorageInterfaces.Size()))
		n38, err := m.NoStorageInterfaces.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n38
	}
	return i, nil
}
func (m *VssStorageConfiguration_StorageInterfaceList) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.StorageInterfaceList != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.StorageInterfaceList.Size()))
		n39, err := m.StorageInterfaceList.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n39
	}
	return i, nil
}
func (m *VssStorageConfiguration_NoStorageDevice) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.NoStorageDevice != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.NoStorageDevice.Size()))
		n40, err := m.NoStorageDevice.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n40
	}
	return i, nil
}
func (m *VssStorageConfiguration_StorageDeviceList) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.StorageDeviceList != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.StorageDeviceList.Size()))
		n41, err := m.StorageDeviceList.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n41
	}
	return i, nil
}
func (m *VssStorageConfiguration_DefaultStorageClass) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.DefaultStorageClass != nil {
		dAtA[i] = 0x42
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.DefaultStorageClass.Size()))
		n42, err := m.DefaultStorageClass.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n42
	}
	return i, nil
}
func (m *VssStorageConfiguration_StorageClassList) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.StorageClassList != nil {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.StorageClassList.Size()))
		n43, err := m.StorageClassList.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n43
	}
	return i, nil
}
func (m *VssStorageConfiguration_NoStaticRoutes) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.NoStaticRoutes != nil {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.NoStaticRoutes.Size()))
		n44, err := m.NoStaticRoutes.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n44
	}
	return i, nil
}
func (m *VssStorageConfiguration_StaticRoutes) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.StaticRoutes != nil {
		dAtA[i] = 0x62
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.StaticRoutes.Size()))
		n45, err := m.StaticRoutes.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n45
	}
	return i, nil
}
func (m *GlobalSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GlobalSpecType) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.VolterraCertifiedHw) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTypes(dAtA, i, uint64(len(m.VolterraCertifiedHw)))
		i += copy(dAtA[i:], m.VolterraCertifiedHw)
	}
	if len(m.MasterNodes) > 0 {
		for _, s := range m.MasterNodes {
			dAtA[i] = 0x12
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.WorkerNodes) > 0 {
		for _, s := range m.WorkerNodes {
			dAtA[i] = 0x1a
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.VolterraSoftwareVersion) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintTypes(dAtA, i, uint64(len(m.VolterraSoftwareVersion)))
		i += copy(dAtA[i:], m.VolterraSoftwareVersion)
	}
	if len(m.OperatingSystemVersion) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(len(m.OperatingSystemVersion)))
		i += copy(dAtA[i:], m.OperatingSystemVersion)
	}
	if m.BondChoice != nil {
		nn46, err := m.BondChoice.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn46
	}
	if m.NetworkCfgChoice != nil {
		nn47, err := m.NetworkCfgChoice.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn47
	}
	if m.StorageCfgChoice != nil {
		nn48, err := m.StorageCfgChoice.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn48
	}
	if m.GpuChoice != nil {
		nn49, err := m.GpuChoice.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn49
	}
	if len(m.Address) > 0 {
		dAtA[i] = 0x92
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Address)))
		i += copy(dAtA[i:], m.Address)
	}
	if m.Coordinates != nil {
		dAtA[i] = 0x9a
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.Coordinates.Size()))
		n50, err := m.Coordinates.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n50
	}
	if m.K8SClusterChoice != nil {
		nn51, err := m.K8SClusterChoice.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn51
	}
	if m.LogsReceiverChoice != nil {
		nn52, err := m.LogsReceiverChoice.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn52
	}
	if m.UsbPolicyChoice != nil {
		nn53, err := m.UsbPolicyChoice.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn53
	}
	if m.ViewInternal != nil {
		dAtA[i] = 0xc2
		i++
		dAtA[i] = 0x3e
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.ViewInternal.Size()))
		n54, err := m.ViewInternal.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n54
	}
	return i, nil
}

func (m *GlobalSpecType_NoBondDevices) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.NoBondDevices != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.NoBondDevices.Size()))
		n55, err := m.NoBondDevices.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n55
	}
	return i, nil
}
func (m *GlobalSpecType_BondDeviceList) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.BondDeviceList != nil {
		dAtA[i] = 0x42
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.BondDeviceList.Size()))
		n56, err := m.BondDeviceList.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n56
	}
	return i, nil
}
func (m *GlobalSpecType_DefaultNetworkConfig) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.DefaultNetworkConfig != nil {
		dAtA[i] = 0x52
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.DefaultNetworkConfig.Size()))
		n57, err := m.DefaultNetworkConfig.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n57
	}
	return i, nil
}
func (m *GlobalSpecType_CustomNetworkConfig) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.CustomNetworkConfig != nil {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.CustomNetworkConfig.Size()))
		n58, err := m.CustomNetworkConfig.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n58
	}
	return i, nil
}
func (m *GlobalSpecType_DefaultStorageConfig) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.DefaultStorageConfig != nil {
		dAtA[i] = 0x6a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.DefaultStorageConfig.Size()))
		n59, err := m.DefaultStorageConfig.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n59
	}
	return i, nil
}
func (m *GlobalSpecType_CustomStorageConfig) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.CustomStorageConfig != nil {
		dAtA[i] = 0x72
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.CustomStorageConfig.Size()))
		n60, err := m.CustomStorageConfig.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n60
	}
	return i, nil
}
func (m *GlobalSpecType_DisableGpu) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.DisableGpu != nil {
		dAtA[i] = 0x82
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.DisableGpu.Size()))
		n61, err := m.DisableGpu.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n61
	}
	return i, nil
}
func (m *GlobalSpecType_EnableGpu) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.EnableGpu != nil {
		dAtA[i] = 0x8a
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.EnableGpu.Size()))
		n62, err := m.EnableGpu.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n62
	}
	return i, nil
}
func (m *GlobalSpecType_NoK8SCluster) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.NoK8SCluster != nil {
		dAtA[i] = 0xaa
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.NoK8SCluster.Size()))
		n63, err := m.NoK8SCluster.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n63
	}
	return i, nil
}
func (m *GlobalSpecType_K8SCluster) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.K8SCluster != nil {
		dAtA[i] = 0xb2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.K8SCluster.Size()))
		n64, err := m.K8SCluster.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n64
	}
	return i, nil
}
func (m *GlobalSpecType_LogsStreamingDisabled) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.LogsStreamingDisabled != nil {
		dAtA[i] = 0xc2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.LogsStreamingDisabled.Size()))
		n65, err := m.LogsStreamingDisabled.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n65
	}
	return i, nil
}
func (m *GlobalSpecType_LogReceiver) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.LogReceiver != nil {
		dAtA[i] = 0xca
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.LogReceiver.Size()))
		n66, err := m.LogReceiver.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n66
	}
	return i, nil
}
func (m *GlobalSpecType_DenyAllUsb) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.DenyAllUsb != nil {
		dAtA[i] = 0xda
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.DenyAllUsb.Size()))
		n67, err := m.DenyAllUsb.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n67
	}
	return i, nil
}
func (m *GlobalSpecType_AllowAllUsb) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.AllowAllUsb != nil {
		dAtA[i] = 0xe2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.AllowAllUsb.Size()))
		n68, err := m.AllowAllUsb.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n68
	}
	return i, nil
}
func (m *GlobalSpecType_UsbPolicy) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.UsbPolicy != nil {
		dAtA[i] = 0xea
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.UsbPolicy.Size()))
		n69, err := m.UsbPolicy.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n69
	}
	return i, nil
}
func (m *CreateSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateSpecType) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.VolterraCertifiedHw) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTypes(dAtA, i, uint64(len(m.VolterraCertifiedHw)))
		i += copy(dAtA[i:], m.VolterraCertifiedHw)
	}
	if len(m.MasterNodes) > 0 {
		for _, s := range m.MasterNodes {
			dAtA[i] = 0x12
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.WorkerNodes) > 0 {
		for _, s := range m.WorkerNodes {
			dAtA[i] = 0x1a
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.VolterraSoftwareVersion) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintTypes(dAtA, i, uint64(len(m.VolterraSoftwareVersion)))
		i += copy(dAtA[i:], m.VolterraSoftwareVersion)
	}
	if len(m.OperatingSystemVersion) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(len(m.OperatingSystemVersion)))
		i += copy(dAtA[i:], m.OperatingSystemVersion)
	}
	if m.BondChoice != nil {
		nn70, err := m.BondChoice.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn70
	}
	if m.NetworkCfgChoice != nil {
		nn71, err := m.NetworkCfgChoice.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn71
	}
	if m.StorageCfgChoice != nil {
		nn72, err := m.StorageCfgChoice.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn72
	}
	if m.GpuChoice != nil {
		nn73, err := m.GpuChoice.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn73
	}
	if len(m.Address) > 0 {
		dAtA[i] = 0x92
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Address)))
		i += copy(dAtA[i:], m.Address)
	}
	if m.Coordinates != nil {
		dAtA[i] = 0x9a
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.Coordinates.Size()))
		n74, err := m.Coordinates.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n74
	}
	if m.K8SClusterChoice != nil {
		nn75, err := m.K8SClusterChoice.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn75
	}
	if m.LogsReceiverChoice != nil {
		nn76, err := m.LogsReceiverChoice.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn76
	}
	if m.UsbPolicyChoice != nil {
		nn77, err := m.UsbPolicyChoice.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn77
	}
	return i, nil
}

func (m *CreateSpecType_NoBondDevices) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.NoBondDevices != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.NoBondDevices.Size()))
		n78, err := m.NoBondDevices.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n78
	}
	return i, nil
}
func (m *CreateSpecType_BondDeviceList) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.BondDeviceList != nil {
		dAtA[i] = 0x42
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.BondDeviceList.Size()))
		n79, err := m.BondDeviceList.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n79
	}
	return i, nil
}
func (m *CreateSpecType_DefaultNetworkConfig) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.DefaultNetworkConfig != nil {
		dAtA[i] = 0x52
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.DefaultNetworkConfig.Size()))
		n80, err := m.DefaultNetworkConfig.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n80
	}
	return i, nil
}
func (m *CreateSpecType_CustomNetworkConfig) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.CustomNetworkConfig != nil {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.CustomNetworkConfig.Size()))
		n81, err := m.CustomNetworkConfig.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n81
	}
	return i, nil
}
func (m *CreateSpecType_DefaultStorageConfig) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.DefaultStorageConfig != nil {
		dAtA[i] = 0x6a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.DefaultStorageConfig.Size()))
		n82, err := m.DefaultStorageConfig.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n82
	}
	return i, nil
}
func (m *CreateSpecType_CustomStorageConfig) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.CustomStorageConfig != nil {
		dAtA[i] = 0x72
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.CustomStorageConfig.Size()))
		n83, err := m.CustomStorageConfig.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n83
	}
	return i, nil
}
func (m *CreateSpecType_DisableGpu) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.DisableGpu != nil {
		dAtA[i] = 0x82
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.DisableGpu.Size()))
		n84, err := m.DisableGpu.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n84
	}
	return i, nil
}
func (m *CreateSpecType_EnableGpu) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.EnableGpu != nil {
		dAtA[i] = 0x8a
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.EnableGpu.Size()))
		n85, err := m.EnableGpu.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n85
	}
	return i, nil
}
func (m *CreateSpecType_NoK8SCluster) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.NoK8SCluster != nil {
		dAtA[i] = 0xaa
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.NoK8SCluster.Size()))
		n86, err := m.NoK8SCluster.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n86
	}
	return i, nil
}
func (m *CreateSpecType_K8SCluster) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.K8SCluster != nil {
		dAtA[i] = 0xb2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.K8SCluster.Size()))
		n87, err := m.K8SCluster.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n87
	}
	return i, nil
}
func (m *CreateSpecType_LogsStreamingDisabled) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.LogsStreamingDisabled != nil {
		dAtA[i] = 0xc2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.LogsStreamingDisabled.Size()))
		n88, err := m.LogsStreamingDisabled.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n88
	}
	return i, nil
}
func (m *CreateSpecType_LogReceiver) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.LogReceiver != nil {
		dAtA[i] = 0xca
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.LogReceiver.Size()))
		n89, err := m.LogReceiver.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n89
	}
	return i, nil
}
func (m *CreateSpecType_DenyAllUsb) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.DenyAllUsb != nil {
		dAtA[i] = 0xda
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.DenyAllUsb.Size()))
		n90, err := m.DenyAllUsb.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n90
	}
	return i, nil
}
func (m *CreateSpecType_AllowAllUsb) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.AllowAllUsb != nil {
		dAtA[i] = 0xe2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.AllowAllUsb.Size()))
		n91, err := m.AllowAllUsb.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n91
	}
	return i, nil
}
func (m *CreateSpecType_UsbPolicy) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.UsbPolicy != nil {
		dAtA[i] = 0xea
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.UsbPolicy.Size()))
		n92, err := m.UsbPolicy.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n92
	}
	return i, nil
}
func (m *ReplaceSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplaceSpecType) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.VolterraCertifiedHw) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTypes(dAtA, i, uint64(len(m.VolterraCertifiedHw)))
		i += copy(dAtA[i:], m.VolterraCertifiedHw)
	}
	if len(m.MasterNodes) > 0 {
		for _, s := range m.MasterNodes {
			dAtA[i] = 0x12
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.WorkerNodes) > 0 {
		for _, s := range m.WorkerNodes {
			dAtA[i] = 0x1a
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.VolterraSoftwareVersion) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintTypes(dAtA, i, uint64(len(m.VolterraSoftwareVersion)))
		i += copy(dAtA[i:], m.VolterraSoftwareVersion)
	}
	if len(m.OperatingSystemVersion) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(len(m.OperatingSystemVersion)))
		i += copy(dAtA[i:], m.OperatingSystemVersion)
	}
	if m.BondChoice != nil {
		nn93, err := m.BondChoice.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn93
	}
	if m.NetworkCfgChoice != nil {
		nn94, err := m.NetworkCfgChoice.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn94
	}
	if m.StorageCfgChoice != nil {
		nn95, err := m.StorageCfgChoice.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn95
	}
	if m.GpuChoice != nil {
		nn96, err := m.GpuChoice.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn96
	}
	if len(m.Address) > 0 {
		dAtA[i] = 0x92
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Address)))
		i += copy(dAtA[i:], m.Address)
	}
	if m.Coordinates != nil {
		dAtA[i] = 0x9a
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.Coordinates.Size()))
		n97, err := m.Coordinates.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n97
	}
	if m.K8SClusterChoice != nil {
		nn98, err := m.K8SClusterChoice.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn98
	}
	if m.LogsReceiverChoice != nil {
		nn99, err := m.LogsReceiverChoice.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn99
	}
	if m.UsbPolicyChoice != nil {
		nn100, err := m.UsbPolicyChoice.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn100
	}
	return i, nil
}

func (m *ReplaceSpecType_NoBondDevices) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.NoBondDevices != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.NoBondDevices.Size()))
		n101, err := m.NoBondDevices.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n101
	}
	return i, nil
}
func (m *ReplaceSpecType_BondDeviceList) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.BondDeviceList != nil {
		dAtA[i] = 0x42
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.BondDeviceList.Size()))
		n102, err := m.BondDeviceList.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n102
	}
	return i, nil
}
func (m *ReplaceSpecType_DefaultNetworkConfig) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.DefaultNetworkConfig != nil {
		dAtA[i] = 0x52
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.DefaultNetworkConfig.Size()))
		n103, err := m.DefaultNetworkConfig.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n103
	}
	return i, nil
}
func (m *ReplaceSpecType_CustomNetworkConfig) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.CustomNetworkConfig != nil {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.CustomNetworkConfig.Size()))
		n104, err := m.CustomNetworkConfig.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n104
	}
	return i, nil
}
func (m *ReplaceSpecType_DefaultStorageConfig) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.DefaultStorageConfig != nil {
		dAtA[i] = 0x6a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.DefaultStorageConfig.Size()))
		n105, err := m.DefaultStorageConfig.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n105
	}
	return i, nil
}
func (m *ReplaceSpecType_CustomStorageConfig) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.CustomStorageConfig != nil {
		dAtA[i] = 0x72
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.CustomStorageConfig.Size()))
		n106, err := m.CustomStorageConfig.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n106
	}
	return i, nil
}
func (m *ReplaceSpecType_DisableGpu) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.DisableGpu != nil {
		dAtA[i] = 0x82
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.DisableGpu.Size()))
		n107, err := m.DisableGpu.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n107
	}
	return i, nil
}
func (m *ReplaceSpecType_EnableGpu) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.EnableGpu != nil {
		dAtA[i] = 0x8a
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.EnableGpu.Size()))
		n108, err := m.EnableGpu.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n108
	}
	return i, nil
}
func (m *ReplaceSpecType_NoK8SCluster) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.NoK8SCluster != nil {
		dAtA[i] = 0xaa
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.NoK8SCluster.Size()))
		n109, err := m.NoK8SCluster.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n109
	}
	return i, nil
}
func (m *ReplaceSpecType_K8SCluster) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.K8SCluster != nil {
		dAtA[i] = 0xb2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.K8SCluster.Size()))
		n110, err := m.K8SCluster.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n110
	}
	return i, nil
}
func (m *ReplaceSpecType_LogsStreamingDisabled) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.LogsStreamingDisabled != nil {
		dAtA[i] = 0xc2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.LogsStreamingDisabled.Size()))
		n111, err := m.LogsStreamingDisabled.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n111
	}
	return i, nil
}
func (m *ReplaceSpecType_LogReceiver) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.LogReceiver != nil {
		dAtA[i] = 0xca
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.LogReceiver.Size()))
		n112, err := m.LogReceiver.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n112
	}
	return i, nil
}
func (m *ReplaceSpecType_DenyAllUsb) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.DenyAllUsb != nil {
		dAtA[i] = 0xda
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.DenyAllUsb.Size()))
		n113, err := m.DenyAllUsb.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n113
	}
	return i, nil
}
func (m *ReplaceSpecType_AllowAllUsb) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.AllowAllUsb != nil {
		dAtA[i] = 0xe2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.AllowAllUsb.Size()))
		n114, err := m.AllowAllUsb.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n114
	}
	return i, nil
}
func (m *ReplaceSpecType_UsbPolicy) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.UsbPolicy != nil {
		dAtA[i] = 0xea
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.UsbPolicy.Size()))
		n115, err := m.UsbPolicy.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n115
	}
	return i, nil
}
func (m *GetSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetSpecType) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.VolterraCertifiedHw) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTypes(dAtA, i, uint64(len(m.VolterraCertifiedHw)))
		i += copy(dAtA[i:], m.VolterraCertifiedHw)
	}
	if len(m.MasterNodes) > 0 {
		for _, s := range m.MasterNodes {
			dAtA[i] = 0x12
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.WorkerNodes) > 0 {
		for _, s := range m.WorkerNodes {
			dAtA[i] = 0x1a
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.VolterraSoftwareVersion) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintTypes(dAtA, i, uint64(len(m.VolterraSoftwareVersion)))
		i += copy(dAtA[i:], m.VolterraSoftwareVersion)
	}
	if len(m.OperatingSystemVersion) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(len(m.OperatingSystemVersion)))
		i += copy(dAtA[i:], m.OperatingSystemVersion)
	}
	if m.BondChoice != nil {
		nn116, err := m.BondChoice.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn116
	}
	if m.NetworkCfgChoice != nil {
		nn117, err := m.NetworkCfgChoice.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn117
	}
	if m.StorageCfgChoice != nil {
		nn118, err := m.StorageCfgChoice.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn118
	}
	if m.GpuChoice != nil {
		nn119, err := m.GpuChoice.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn119
	}
	if len(m.Address) > 0 {
		dAtA[i] = 0x92
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Address)))
		i += copy(dAtA[i:], m.Address)
	}
	if m.Coordinates != nil {
		dAtA[i] = 0x9a
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.Coordinates.Size()))
		n120, err := m.Coordinates.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n120
	}
	if m.K8SClusterChoice != nil {
		nn121, err := m.K8SClusterChoice.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn121
	}
	if m.LogsReceiverChoice != nil {
		nn122, err := m.LogsReceiverChoice.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn122
	}
	if m.UsbPolicyChoice != nil {
		nn123, err := m.UsbPolicyChoice.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn123
	}
	return i, nil
}

func (m *GetSpecType_NoBondDevices) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.NoBondDevices != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.NoBondDevices.Size()))
		n124, err := m.NoBondDevices.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n124
	}
	return i, nil
}
func (m *GetSpecType_BondDeviceList) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.BondDeviceList != nil {
		dAtA[i] = 0x42
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.BondDeviceList.Size()))
		n125, err := m.BondDeviceList.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n125
	}
	return i, nil
}
func (m *GetSpecType_DefaultNetworkConfig) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.DefaultNetworkConfig != nil {
		dAtA[i] = 0x52
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.DefaultNetworkConfig.Size()))
		n126, err := m.DefaultNetworkConfig.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n126
	}
	return i, nil
}
func (m *GetSpecType_CustomNetworkConfig) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.CustomNetworkConfig != nil {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.CustomNetworkConfig.Size()))
		n127, err := m.CustomNetworkConfig.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n127
	}
	return i, nil
}
func (m *GetSpecType_DefaultStorageConfig) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.DefaultStorageConfig != nil {
		dAtA[i] = 0x6a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.DefaultStorageConfig.Size()))
		n128, err := m.DefaultStorageConfig.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n128
	}
	return i, nil
}
func (m *GetSpecType_CustomStorageConfig) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.CustomStorageConfig != nil {
		dAtA[i] = 0x72
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.CustomStorageConfig.Size()))
		n129, err := m.CustomStorageConfig.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n129
	}
	return i, nil
}
func (m *GetSpecType_DisableGpu) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.DisableGpu != nil {
		dAtA[i] = 0x82
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.DisableGpu.Size()))
		n130, err := m.DisableGpu.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n130
	}
	return i, nil
}
func (m *GetSpecType_EnableGpu) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.EnableGpu != nil {
		dAtA[i] = 0x8a
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.EnableGpu.Size()))
		n131, err := m.EnableGpu.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n131
	}
	return i, nil
}
func (m *GetSpecType_NoK8SCluster) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.NoK8SCluster != nil {
		dAtA[i] = 0xaa
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.NoK8SCluster.Size()))
		n132, err := m.NoK8SCluster.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n132
	}
	return i, nil
}
func (m *GetSpecType_K8SCluster) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.K8SCluster != nil {
		dAtA[i] = 0xb2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.K8SCluster.Size()))
		n133, err := m.K8SCluster.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n133
	}
	return i, nil
}
func (m *GetSpecType_LogsStreamingDisabled) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.LogsStreamingDisabled != nil {
		dAtA[i] = 0xc2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.LogsStreamingDisabled.Size()))
		n134, err := m.LogsStreamingDisabled.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n134
	}
	return i, nil
}
func (m *GetSpecType_LogReceiver) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.LogReceiver != nil {
		dAtA[i] = 0xca
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.LogReceiver.Size()))
		n135, err := m.LogReceiver.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n135
	}
	return i, nil
}
func (m *GetSpecType_DenyAllUsb) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.DenyAllUsb != nil {
		dAtA[i] = 0xda
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.DenyAllUsb.Size()))
		n136, err := m.DenyAllUsb.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n136
	}
	return i, nil
}
func (m *GetSpecType_AllowAllUsb) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.AllowAllUsb != nil {
		dAtA[i] = 0xe2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.AllowAllUsb.Size()))
		n137, err := m.AllowAllUsb.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n137
	}
	return i, nil
}
func (m *GetSpecType_UsbPolicy) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.UsbPolicy != nil {
		dAtA[i] = 0xea
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.UsbPolicy.Size()))
		n138, err := m.UsbPolicy.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n138
	}
	return i, nil
}
func encodeVarintTypes(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func NewPopulatedInterface(r randyTypes, easy bool) *Interface {
	this := &Interface{}
	this.Description = string(randStringTypes(r))
	if r.Intn(10) != 0 {
		v1 := r.Intn(10)
		this.Labels = make(map[string]string)
		for i := 0; i < v1; i++ {
			this.Labels[randStringTypes(r)] = randStringTypes(r)
		}
	}
	oneofNumber_InterfaceChoice := []int32{5, 6, 7, 8}[r.Intn(4)]
	switch oneofNumber_InterfaceChoice {
	case 5:
		this.InterfaceChoice = NewPopulatedInterface_EthernetInterface(r, easy)
	case 6:
		this.InterfaceChoice = NewPopulatedInterface_DedicatedInterface(r, easy)
	case 7:
		this.InterfaceChoice = NewPopulatedInterface_DedicatedManagementInterface(r, easy)
	case 8:
		this.InterfaceChoice = NewPopulatedInterface_TunnelInterface(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedInterface_EthernetInterface(r randyTypes, easy bool) *Interface_EthernetInterface {
	this := &Interface_EthernetInterface{}
	this.EthernetInterface = ves_io_schema_network_interface.NewPopulatedEthernetInterfaceType(r, easy)
	return this
}
func NewPopulatedInterface_DedicatedInterface(r randyTypes, easy bool) *Interface_DedicatedInterface {
	this := &Interface_DedicatedInterface{}
	this.DedicatedInterface = ves_io_schema_network_interface.NewPopulatedDedicatedInterfaceType(r, easy)
	return this
}
func NewPopulatedInterface_DedicatedManagementInterface(r randyTypes, easy bool) *Interface_DedicatedManagementInterface {
	this := &Interface_DedicatedManagementInterface{}
	this.DedicatedManagementInterface = ves_io_schema_network_interface.NewPopulatedDedicatedManagementInterfaceType(r, easy)
	return this
}
func NewPopulatedInterface_TunnelInterface(r randyTypes, easy bool) *Interface_TunnelInterface {
	this := &Interface_TunnelInterface{}
	this.TunnelInterface = ves_io_schema_network_interface.NewPopulatedTunnelInterfaceType(r, easy)
	return this
}
func NewPopulatedInterfaceListType(r randyTypes, easy bool) *InterfaceListType {
	this := &InterfaceListType{}
	if r.Intn(10) != 0 {
		v2 := r.Intn(5)
		this.Interfaces = make([]*Interface, v2)
		for i := 0; i < v2; i++ {
			this.Interfaces[i] = NewPopulatedInterface(r, easy)
		}
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedStorageInterfaceType(r randyTypes, easy bool) *StorageInterfaceType {
	this := &StorageInterfaceType{}
	this.Description = string(randStringTypes(r))
	if r.Intn(10) != 0 {
		v3 := r.Intn(10)
		this.Labels = make(map[string]string)
		for i := 0; i < v3; i++ {
			this.Labels[randStringTypes(r)] = randStringTypes(r)
		}
	}
	if r.Intn(10) != 0 {
		this.StorageInterface = ves_io_schema_network_interface.NewPopulatedEthernetInterfaceType(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedStorageInterfaceListType(r randyTypes, easy bool) *StorageInterfaceListType {
	this := &StorageInterfaceListType{}
	if r.Intn(10) != 0 {
		v4 := r.Intn(5)
		this.StorageInterfaces = make([]*StorageInterfaceType, v4)
		for i := 0; i < v4; i++ {
			this.StorageInterfaces[i] = NewPopulatedStorageInterfaceType(r, easy)
		}
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedStaticRoutesListType(r randyTypes, easy bool) *StaticRoutesListType {
	this := &StaticRoutesListType{}
	if r.Intn(10) != 0 {
		v5 := r.Intn(5)
		this.StaticRoutes = make([]*ves_io_schema_virtual_network.StaticRouteViewType, v5)
		for i := 0; i < v5; i++ {
			this.StaticRoutes[i] = ves_io_schema_virtual_network.NewPopulatedStaticRouteViewType(r, easy)
		}
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedVnConfiguration(r randyTypes, easy bool) *VnConfiguration {
	this := &VnConfiguration{}
	if r.Intn(10) != 0 {
		v6 := r.Intn(10)
		this.Labels = make(map[string]string)
		for i := 0; i < v6; i++ {
			this.Labels[randStringTypes(r)] = randStringTypes(r)
		}
	}
	oneofNumber_StaticRouteChoice := []int32{3, 4}[r.Intn(2)]
	switch oneofNumber_StaticRouteChoice {
	case 3:
		this.StaticRouteChoice = NewPopulatedVnConfiguration_NoStaticRoutes(r, easy)
	case 4:
		this.StaticRouteChoice = NewPopulatedVnConfiguration_StaticRoutes(r, easy)
	}
	oneofNumber_DcClusterGroupChoice := []int32{6, 7}[r.Intn(2)]
	switch oneofNumber_DcClusterGroupChoice {
	case 6:
		this.DcClusterGroupChoice = NewPopulatedVnConfiguration_NoDcClusterGroup(r, easy)
	case 7:
		this.DcClusterGroupChoice = NewPopulatedVnConfiguration_DcClusterGroup(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedVnConfiguration_NoStaticRoutes(r randyTypes, easy bool) *VnConfiguration_NoStaticRoutes {
	this := &VnConfiguration_NoStaticRoutes{}
	this.NoStaticRoutes = ves_io_schema4.NewPopulatedEmpty(r, easy)
	return this
}
func NewPopulatedVnConfiguration_StaticRoutes(r randyTypes, easy bool) *VnConfiguration_StaticRoutes {
	this := &VnConfiguration_StaticRoutes{}
	this.StaticRoutes = NewPopulatedStaticRoutesListType(r, easy)
	return this
}
func NewPopulatedVnConfiguration_NoDcClusterGroup(r randyTypes, easy bool) *VnConfiguration_NoDcClusterGroup {
	this := &VnConfiguration_NoDcClusterGroup{}
	this.NoDcClusterGroup = ves_io_schema4.NewPopulatedEmpty(r, easy)
	return this
}
func NewPopulatedVnConfiguration_DcClusterGroup(r randyTypes, easy bool) *VnConfiguration_DcClusterGroup {
	this := &VnConfiguration_DcClusterGroup{}
	this.DcClusterGroup = ves_io_schema_views.NewPopulatedObjectRefType(r, easy)
	return this
}
func NewPopulatedGlobalNetworkConnectionType(r randyTypes, easy bool) *GlobalNetworkConnectionType {
	this := &GlobalNetworkConnectionType{}
	oneofNumber_ConnectionChoice := []int32{3}[r.Intn(1)]
	switch oneofNumber_ConnectionChoice {
	case 3:
		this.ConnectionChoice = NewPopulatedGlobalNetworkConnectionType_SloToGlobalDr(r, easy)
	}
	oneofNumber_ForwardProxyChoice := []int32{5, 6}[r.Intn(2)]
	switch oneofNumber_ForwardProxyChoice {
	case 5:
		this.ForwardProxyChoice = NewPopulatedGlobalNetworkConnectionType_DisableForwardProxy(r, easy)
	case 6:
		this.ForwardProxyChoice = NewPopulatedGlobalNetworkConnectionType_EnableForwardProxy(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedGlobalNetworkConnectionType_SloToGlobalDr(r randyTypes, easy bool) *GlobalNetworkConnectionType_SloToGlobalDr {
	this := &GlobalNetworkConnectionType_SloToGlobalDr{}
	this.SloToGlobalDr = ves_io_schema_views.NewPopulatedGlobalConnectorType(r, easy)
	return this
}
func NewPopulatedGlobalNetworkConnectionType_DisableForwardProxy(r randyTypes, easy bool) *GlobalNetworkConnectionType_DisableForwardProxy {
	this := &GlobalNetworkConnectionType_DisableForwardProxy{}
	this.DisableForwardProxy = ves_io_schema4.NewPopulatedEmpty(r, easy)
	return this
}
func NewPopulatedGlobalNetworkConnectionType_EnableForwardProxy(r randyTypes, easy bool) *GlobalNetworkConnectionType_EnableForwardProxy {
	this := &GlobalNetworkConnectionType_EnableForwardProxy{}
	this.EnableForwardProxy = ves_io_schema4.NewPopulatedForwardProxyConfigType(r, easy)
	return this
}
func NewPopulatedGlobalNetworkConnectionListType(r randyTypes, easy bool) *GlobalNetworkConnectionListType {
	this := &GlobalNetworkConnectionListType{}
	if r.Intn(10) != 0 {
		v7 := r.Intn(5)
		this.GlobalNetworkConnections = make([]*GlobalNetworkConnectionType, v7)
		for i := 0; i < v7; i++ {
			this.GlobalNetworkConnections[i] = NewPopulatedGlobalNetworkConnectionType(r, easy)
		}
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedVssNetworkConfiguration(r randyTypes, easy bool) *VssNetworkConfiguration {
	this := &VssNetworkConfiguration{}
	oneofNumber_SloChoice := []int32{2, 3}[r.Intn(2)]
	switch oneofNumber_SloChoice {
	case 2:
		this.SloChoice = NewPopulatedVssNetworkConfiguration_DefaultConfig(r, easy)
	case 3:
		this.SloChoice = NewPopulatedVssNetworkConfiguration_SloConfig(r, easy)
	}
	oneofNumber_InterfaceChoice := []int32{5, 6}[r.Intn(2)]
	switch oneofNumber_InterfaceChoice {
	case 5:
		this.InterfaceChoice = NewPopulatedVssNetworkConfiguration_DefaultInterfaceConfig(r, easy)
	case 6:
		this.InterfaceChoice = NewPopulatedVssNetworkConfiguration_InterfaceList(r, easy)
	}
	oneofNumber_NetworkPolicyChoice := []int32{8, 9}[r.Intn(2)]
	switch oneofNumber_NetworkPolicyChoice {
	case 8:
		this.NetworkPolicyChoice = NewPopulatedVssNetworkConfiguration_NoNetworkPolicy(r, easy)
	case 9:
		this.NetworkPolicyChoice = NewPopulatedVssNetworkConfiguration_ActiveNetworkPolicies(r, easy)
	}
	oneofNumber_ForwardProxyChoice := []int32{11, 12, 23}[r.Intn(3)]
	switch oneofNumber_ForwardProxyChoice {
	case 11:
		this.ForwardProxyChoice = NewPopulatedVssNetworkConfiguration_NoForwardProxy(r, easy)
	case 12:
		this.ForwardProxyChoice = NewPopulatedVssNetworkConfiguration_ActiveForwardProxyPolicies(r, easy)
	case 23:
		this.ForwardProxyChoice = NewPopulatedVssNetworkConfiguration_ForwardProxyAllowAll(r, easy)
	}
	oneofNumber_GlobalNetworkChoice := []int32{14, 15}[r.Intn(2)]
	switch oneofNumber_GlobalNetworkChoice {
	case 14:
		this.GlobalNetworkChoice = NewPopulatedVssNetworkConfiguration_NoGlobalNetwork(r, easy)
	case 15:
		this.GlobalNetworkChoice = NewPopulatedVssNetworkConfiguration_GlobalNetworkList(r, easy)
	}
	this.OutsideVip = string(randStringTypes(r))
	this.OutsideNameserver = string(randStringTypes(r))
	this.BgpRouterId = string(randStringTypes(r))
	this.BgpPeerAddress = string(randStringTypes(r))
	this.VipVrrpMode = ves_io_schema4.VipVrrpType([]int32{0, 1, 2}[r.Intn(3)])
	this.SiteToSiteTunnelIp = string(randStringTypes(r))
	this.TunnelDeadTimeout = uint32(r.Uint32())
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedVssNetworkConfiguration_DefaultConfig(r randyTypes, easy bool) *VssNetworkConfiguration_DefaultConfig {
	this := &VssNetworkConfiguration_DefaultConfig{}
	this.DefaultConfig = ves_io_schema4.NewPopulatedEmpty(r, easy)
	return this
}
func NewPopulatedVssNetworkConfiguration_SloConfig(r randyTypes, easy bool) *VssNetworkConfiguration_SloConfig {
	this := &VssNetworkConfiguration_SloConfig{}
	this.SloConfig = NewPopulatedVnConfiguration(r, easy)
	return this
}
func NewPopulatedVssNetworkConfiguration_DefaultInterfaceConfig(r randyTypes, easy bool) *VssNetworkConfiguration_DefaultInterfaceConfig {
	this := &VssNetworkConfiguration_DefaultInterfaceConfig{}
	this.DefaultInterfaceConfig = ves_io_schema4.NewPopulatedEmpty(r, easy)
	return this
}
func NewPopulatedVssNetworkConfiguration_InterfaceList(r randyTypes, easy bool) *VssNetworkConfiguration_InterfaceList {
	this := &VssNetworkConfiguration_InterfaceList{}
	this.InterfaceList = NewPopulatedInterfaceListType(r, easy)
	return this
}
func NewPopulatedVssNetworkConfiguration_NoNetworkPolicy(r randyTypes, easy bool) *VssNetworkConfiguration_NoNetworkPolicy {
	this := &VssNetworkConfiguration_NoNetworkPolicy{}
	this.NoNetworkPolicy = ves_io_schema4.NewPopulatedEmpty(r, easy)
	return this
}
func NewPopulatedVssNetworkConfiguration_ActiveNetworkPolicies(r randyTypes, easy bool) *VssNetworkConfiguration_ActiveNetworkPolicies {
	this := &VssNetworkConfiguration_ActiveNetworkPolicies{}
	this.ActiveNetworkPolicies = ves_io_schema_network_firewall.NewPopulatedActiveNetworkPoliciesType(r, easy)
	return this
}
func NewPopulatedVssNetworkConfiguration_NoForwardProxy(r randyTypes, easy bool) *VssNetworkConfiguration_NoForwardProxy {
	this := &VssNetworkConfiguration_NoForwardProxy{}
	this.NoForwardProxy = ves_io_schema4.NewPopulatedEmpty(r, easy)
	return this
}
func NewPopulatedVssNetworkConfiguration_ActiveForwardProxyPolicies(r randyTypes, easy bool) *VssNetworkConfiguration_ActiveForwardProxyPolicies {
	this := &VssNetworkConfiguration_ActiveForwardProxyPolicies{}
	this.ActiveForwardProxyPolicies = ves_io_schema_network_firewall.NewPopulatedActiveForwardProxyPoliciesType(r, easy)
	return this
}
func NewPopulatedVssNetworkConfiguration_NoGlobalNetwork(r randyTypes, easy bool) *VssNetworkConfiguration_NoGlobalNetwork {
	this := &VssNetworkConfiguration_NoGlobalNetwork{}
	this.NoGlobalNetwork = ves_io_schema4.NewPopulatedEmpty(r, easy)
	return this
}
func NewPopulatedVssNetworkConfiguration_GlobalNetworkList(r randyTypes, easy bool) *VssNetworkConfiguration_GlobalNetworkList {
	this := &VssNetworkConfiguration_GlobalNetworkList{}
	this.GlobalNetworkList = ves_io_schema_views1.NewPopulatedGlobalNetworkConnectionListType(r, easy)
	return this
}
func NewPopulatedVssNetworkConfiguration_ForwardProxyAllowAll(r randyTypes, easy bool) *VssNetworkConfiguration_ForwardProxyAllowAll {
	this := &VssNetworkConfiguration_ForwardProxyAllowAll{}
	this.ForwardProxyAllowAll = ves_io_schema4.NewPopulatedEmpty(r, easy)
	return this
}
func NewPopulatedVssStorageConfiguration(r randyTypes, easy bool) *VssStorageConfiguration {
	this := &VssStorageConfiguration{}
	oneofNumber_StorageInterfaceChoice := []int32{2, 3}[r.Intn(2)]
	switch oneofNumber_StorageInterfaceChoice {
	case 2:
		this.StorageInterfaceChoice = NewPopulatedVssStorageConfiguration_NoStorageInterfaces(r, easy)
	case 3:
		this.StorageInterfaceChoice = NewPopulatedVssStorageConfiguration_StorageInterfaceList(r, easy)
	}
	oneofNumber_StorageDeviceChoice := []int32{5, 6}[r.Intn(2)]
	switch oneofNumber_StorageDeviceChoice {
	case 5:
		this.StorageDeviceChoice = NewPopulatedVssStorageConfiguration_NoStorageDevice(r, easy)
	case 6:
		this.StorageDeviceChoice = NewPopulatedVssStorageConfiguration_StorageDeviceList(r, easy)
	}
	oneofNumber_StorageClassChoice := []int32{8, 9}[r.Intn(2)]
	switch oneofNumber_StorageClassChoice {
	case 8:
		this.StorageClassChoice = NewPopulatedVssStorageConfiguration_DefaultStorageClass(r, easy)
	case 9:
		this.StorageClassChoice = NewPopulatedVssStorageConfiguration_StorageClassList(r, easy)
	}
	oneofNumber_StaticRouteChoice := []int32{11, 12}[r.Intn(2)]
	switch oneofNumber_StaticRouteChoice {
	case 11:
		this.StaticRouteChoice = NewPopulatedVssStorageConfiguration_NoStaticRoutes(r, easy)
	case 12:
		this.StaticRouteChoice = NewPopulatedVssStorageConfiguration_StaticRoutes(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedVssStorageConfiguration_NoStorageInterfaces(r randyTypes, easy bool) *VssStorageConfiguration_NoStorageInterfaces {
	this := &VssStorageConfiguration_NoStorageInterfaces{}
	this.NoStorageInterfaces = ves_io_schema4.NewPopulatedEmpty(r, easy)
	return this
}
func NewPopulatedVssStorageConfiguration_StorageInterfaceList(r randyTypes, easy bool) *VssStorageConfiguration_StorageInterfaceList {
	this := &VssStorageConfiguration_StorageInterfaceList{}
	this.StorageInterfaceList = NewPopulatedStorageInterfaceListType(r, easy)
	return this
}
func NewPopulatedVssStorageConfiguration_NoStorageDevice(r randyTypes, easy bool) *VssStorageConfiguration_NoStorageDevice {
	this := &VssStorageConfiguration_NoStorageDevice{}
	this.NoStorageDevice = ves_io_schema4.NewPopulatedEmpty(r, easy)
	return this
}
func NewPopulatedVssStorageConfiguration_StorageDeviceList(r randyTypes, easy bool) *VssStorageConfiguration_StorageDeviceList {
	this := &VssStorageConfiguration_StorageDeviceList{}
	this.StorageDeviceList = ves_io_schema_fleet.NewPopulatedFleetStorageDeviceListType(r, easy)
	return this
}
func NewPopulatedVssStorageConfiguration_DefaultStorageClass(r randyTypes, easy bool) *VssStorageConfiguration_DefaultStorageClass {
	this := &VssStorageConfiguration_DefaultStorageClass{}
	this.DefaultStorageClass = ves_io_schema4.NewPopulatedEmpty(r, easy)
	return this
}
func NewPopulatedVssStorageConfiguration_StorageClassList(r randyTypes, easy bool) *VssStorageConfiguration_StorageClassList {
	this := &VssStorageConfiguration_StorageClassList{}
	this.StorageClassList = ves_io_schema_fleet.NewPopulatedFleetStorageClassListType(r, easy)
	return this
}
func NewPopulatedVssStorageConfiguration_NoStaticRoutes(r randyTypes, easy bool) *VssStorageConfiguration_NoStaticRoutes {
	this := &VssStorageConfiguration_NoStaticRoutes{}
	this.NoStaticRoutes = ves_io_schema4.NewPopulatedEmpty(r, easy)
	return this
}
func NewPopulatedVssStorageConfiguration_StaticRoutes(r randyTypes, easy bool) *VssStorageConfiguration_StaticRoutes {
	this := &VssStorageConfiguration_StaticRoutes{}
	this.StaticRoutes = NewPopulatedStaticRoutesListType(r, easy)
	return this
}
func NewPopulatedGlobalSpecType(r randyTypes, easy bool) *GlobalSpecType {
	this := &GlobalSpecType{}
	this.VolterraCertifiedHw = string(randStringTypes(r))
	v8 := r.Intn(10)
	this.MasterNodes = make([]string, v8)
	for i := 0; i < v8; i++ {
		this.MasterNodes[i] = string(randStringTypes(r))
	}
	v9 := r.Intn(10)
	this.WorkerNodes = make([]string, v9)
	for i := 0; i < v9; i++ {
		this.WorkerNodes[i] = string(randStringTypes(r))
	}
	this.VolterraSoftwareVersion = string(randStringTypes(r))
	this.OperatingSystemVersion = string(randStringTypes(r))
	oneofNumber_BondChoice := []int32{7, 8}[r.Intn(2)]
	switch oneofNumber_BondChoice {
	case 7:
		this.BondChoice = NewPopulatedGlobalSpecType_NoBondDevices(r, easy)
	case 8:
		this.BondChoice = NewPopulatedGlobalSpecType_BondDeviceList(r, easy)
	}
	oneofNumber_NetworkCfgChoice := []int32{10, 11}[r.Intn(2)]
	switch oneofNumber_NetworkCfgChoice {
	case 10:
		this.NetworkCfgChoice = NewPopulatedGlobalSpecType_DefaultNetworkConfig(r, easy)
	case 11:
		this.NetworkCfgChoice = NewPopulatedGlobalSpecType_CustomNetworkConfig(r, easy)
	}
	oneofNumber_StorageCfgChoice := []int32{13, 14}[r.Intn(2)]
	switch oneofNumber_StorageCfgChoice {
	case 13:
		this.StorageCfgChoice = NewPopulatedGlobalSpecType_DefaultStorageConfig(r, easy)
	case 14:
		this.StorageCfgChoice = NewPopulatedGlobalSpecType_CustomStorageConfig(r, easy)
	}
	oneofNumber_GpuChoice := []int32{16, 17}[r.Intn(2)]
	switch oneofNumber_GpuChoice {
	case 16:
		this.GpuChoice = NewPopulatedGlobalSpecType_DisableGpu(r, easy)
	case 17:
		this.GpuChoice = NewPopulatedGlobalSpecType_EnableGpu(r, easy)
	}
	this.Address = string(randStringTypes(r))
	if r.Intn(10) != 0 {
		this.Coordinates = ves_io_schema_site.NewPopulatedCoordinates(r, easy)
	}
	oneofNumber_K8SClusterChoice := []int32{21, 22}[r.Intn(2)]
	switch oneofNumber_K8SClusterChoice {
	case 21:
		this.K8SClusterChoice = NewPopulatedGlobalSpecType_NoK8SCluster(r, easy)
	case 22:
		this.K8SClusterChoice = NewPopulatedGlobalSpecType_K8SCluster(r, easy)
	}
	oneofNumber_LogsReceiverChoice := []int32{24, 25}[r.Intn(2)]
	switch oneofNumber_LogsReceiverChoice {
	case 24:
		this.LogsReceiverChoice = NewPopulatedGlobalSpecType_LogsStreamingDisabled(r, easy)
	case 25:
		this.LogsReceiverChoice = NewPopulatedGlobalSpecType_LogReceiver(r, easy)
	}
	oneofNumber_UsbPolicyChoice := []int32{27, 28, 29}[r.Intn(3)]
	switch oneofNumber_UsbPolicyChoice {
	case 27:
		this.UsbPolicyChoice = NewPopulatedGlobalSpecType_DenyAllUsb(r, easy)
	case 28:
		this.UsbPolicyChoice = NewPopulatedGlobalSpecType_AllowAllUsb(r, easy)
	case 29:
		this.UsbPolicyChoice = NewPopulatedGlobalSpecType_UsbPolicy(r, easy)
	}
	if r.Intn(10) != 0 {
		this.ViewInternal = ves_io_schema_views.NewPopulatedObjectRefType(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedGlobalSpecType_NoBondDevices(r randyTypes, easy bool) *GlobalSpecType_NoBondDevices {
	this := &GlobalSpecType_NoBondDevices{}
	this.NoBondDevices = ves_io_schema4.NewPopulatedEmpty(r, easy)
	return this
}
func NewPopulatedGlobalSpecType_BondDeviceList(r randyTypes, easy bool) *GlobalSpecType_BondDeviceList {
	this := &GlobalSpecType_BondDeviceList{}
	this.BondDeviceList = ves_io_schema_fleet.NewPopulatedFleetBondDevicesListType(r, easy)
	return this
}
func NewPopulatedGlobalSpecType_DefaultNetworkConfig(r randyTypes, easy bool) *GlobalSpecType_DefaultNetworkConfig {
	this := &GlobalSpecType_DefaultNetworkConfig{}
	this.DefaultNetworkConfig = ves_io_schema4.NewPopulatedEmpty(r, easy)
	return this
}
func NewPopulatedGlobalSpecType_CustomNetworkConfig(r randyTypes, easy bool) *GlobalSpecType_CustomNetworkConfig {
	this := &GlobalSpecType_CustomNetworkConfig{}
	this.CustomNetworkConfig = NewPopulatedVssNetworkConfiguration(r, easy)
	return this
}
func NewPopulatedGlobalSpecType_DefaultStorageConfig(r randyTypes, easy bool) *GlobalSpecType_DefaultStorageConfig {
	this := &GlobalSpecType_DefaultStorageConfig{}
	this.DefaultStorageConfig = ves_io_schema4.NewPopulatedEmpty(r, easy)
	return this
}
func NewPopulatedGlobalSpecType_CustomStorageConfig(r randyTypes, easy bool) *GlobalSpecType_CustomStorageConfig {
	this := &GlobalSpecType_CustomStorageConfig{}
	this.CustomStorageConfig = NewPopulatedVssStorageConfiguration(r, easy)
	return this
}
func NewPopulatedGlobalSpecType_DisableGpu(r randyTypes, easy bool) *GlobalSpecType_DisableGpu {
	this := &GlobalSpecType_DisableGpu{}
	this.DisableGpu = ves_io_schema4.NewPopulatedEmpty(r, easy)
	return this
}
func NewPopulatedGlobalSpecType_EnableGpu(r randyTypes, easy bool) *GlobalSpecType_EnableGpu {
	this := &GlobalSpecType_EnableGpu{}
	this.EnableGpu = ves_io_schema4.NewPopulatedEmpty(r, easy)
	return this
}
func NewPopulatedGlobalSpecType_NoK8SCluster(r randyTypes, easy bool) *GlobalSpecType_NoK8SCluster {
	this := &GlobalSpecType_NoK8SCluster{}
	this.NoK8SCluster = ves_io_schema4.NewPopulatedEmpty(r, easy)
	return this
}
func NewPopulatedGlobalSpecType_K8SCluster(r randyTypes, easy bool) *GlobalSpecType_K8SCluster {
	this := &GlobalSpecType_K8SCluster{}
	this.K8SCluster = ves_io_schema_views.NewPopulatedObjectRefType(r, easy)
	return this
}
func NewPopulatedGlobalSpecType_LogsStreamingDisabled(r randyTypes, easy bool) *GlobalSpecType_LogsStreamingDisabled {
	this := &GlobalSpecType_LogsStreamingDisabled{}
	this.LogsStreamingDisabled = ves_io_schema4.NewPopulatedEmpty(r, easy)
	return this
}
func NewPopulatedGlobalSpecType_LogReceiver(r randyTypes, easy bool) *GlobalSpecType_LogReceiver {
	this := &GlobalSpecType_LogReceiver{}
	this.LogReceiver = ves_io_schema_views.NewPopulatedObjectRefType(r, easy)
	return this
}
func NewPopulatedGlobalSpecType_DenyAllUsb(r randyTypes, easy bool) *GlobalSpecType_DenyAllUsb {
	this := &GlobalSpecType_DenyAllUsb{}
	this.DenyAllUsb = ves_io_schema4.NewPopulatedEmpty(r, easy)
	return this
}
func NewPopulatedGlobalSpecType_AllowAllUsb(r randyTypes, easy bool) *GlobalSpecType_AllowAllUsb {
	this := &GlobalSpecType_AllowAllUsb{}
	this.AllowAllUsb = ves_io_schema4.NewPopulatedEmpty(r, easy)
	return this
}
func NewPopulatedGlobalSpecType_UsbPolicy(r randyTypes, easy bool) *GlobalSpecType_UsbPolicy {
	this := &GlobalSpecType_UsbPolicy{}
	this.UsbPolicy = ves_io_schema_views.NewPopulatedObjectRefType(r, easy)
	return this
}
func NewPopulatedCreateSpecType(r randyTypes, easy bool) *CreateSpecType {
	this := &CreateSpecType{}
	this.VolterraCertifiedHw = string(randStringTypes(r))
	v10 := r.Intn(10)
	this.MasterNodes = make([]string, v10)
	for i := 0; i < v10; i++ {
		this.MasterNodes[i] = string(randStringTypes(r))
	}
	v11 := r.Intn(10)
	this.WorkerNodes = make([]string, v11)
	for i := 0; i < v11; i++ {
		this.WorkerNodes[i] = string(randStringTypes(r))
	}
	this.VolterraSoftwareVersion = string(randStringTypes(r))
	this.OperatingSystemVersion = string(randStringTypes(r))
	oneofNumber_BondChoice := []int32{7, 8}[r.Intn(2)]
	switch oneofNumber_BondChoice {
	case 7:
		this.BondChoice = NewPopulatedCreateSpecType_NoBondDevices(r, easy)
	case 8:
		this.BondChoice = NewPopulatedCreateSpecType_BondDeviceList(r, easy)
	}
	oneofNumber_NetworkCfgChoice := []int32{10, 11}[r.Intn(2)]
	switch oneofNumber_NetworkCfgChoice {
	case 10:
		this.NetworkCfgChoice = NewPopulatedCreateSpecType_DefaultNetworkConfig(r, easy)
	case 11:
		this.NetworkCfgChoice = NewPopulatedCreateSpecType_CustomNetworkConfig(r, easy)
	}
	oneofNumber_StorageCfgChoice := []int32{13, 14}[r.Intn(2)]
	switch oneofNumber_StorageCfgChoice {
	case 13:
		this.StorageCfgChoice = NewPopulatedCreateSpecType_DefaultStorageConfig(r, easy)
	case 14:
		this.StorageCfgChoice = NewPopulatedCreateSpecType_CustomStorageConfig(r, easy)
	}
	oneofNumber_GpuChoice := []int32{16, 17}[r.Intn(2)]
	switch oneofNumber_GpuChoice {
	case 16:
		this.GpuChoice = NewPopulatedCreateSpecType_DisableGpu(r, easy)
	case 17:
		this.GpuChoice = NewPopulatedCreateSpecType_EnableGpu(r, easy)
	}
	this.Address = string(randStringTypes(r))
	if r.Intn(10) != 0 {
		this.Coordinates = ves_io_schema_site.NewPopulatedCoordinates(r, easy)
	}
	oneofNumber_K8SClusterChoice := []int32{21, 22}[r.Intn(2)]
	switch oneofNumber_K8SClusterChoice {
	case 21:
		this.K8SClusterChoice = NewPopulatedCreateSpecType_NoK8SCluster(r, easy)
	case 22:
		this.K8SClusterChoice = NewPopulatedCreateSpecType_K8SCluster(r, easy)
	}
	oneofNumber_LogsReceiverChoice := []int32{24, 25}[r.Intn(2)]
	switch oneofNumber_LogsReceiverChoice {
	case 24:
		this.LogsReceiverChoice = NewPopulatedCreateSpecType_LogsStreamingDisabled(r, easy)
	case 25:
		this.LogsReceiverChoice = NewPopulatedCreateSpecType_LogReceiver(r, easy)
	}
	oneofNumber_UsbPolicyChoice := []int32{27, 28, 29}[r.Intn(3)]
	switch oneofNumber_UsbPolicyChoice {
	case 27:
		this.UsbPolicyChoice = NewPopulatedCreateSpecType_DenyAllUsb(r, easy)
	case 28:
		this.UsbPolicyChoice = NewPopulatedCreateSpecType_AllowAllUsb(r, easy)
	case 29:
		this.UsbPolicyChoice = NewPopulatedCreateSpecType_UsbPolicy(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedCreateSpecType_NoBondDevices(r randyTypes, easy bool) *CreateSpecType_NoBondDevices {
	this := &CreateSpecType_NoBondDevices{}
	this.NoBondDevices = ves_io_schema4.NewPopulatedEmpty(r, easy)
	return this
}
func NewPopulatedCreateSpecType_BondDeviceList(r randyTypes, easy bool) *CreateSpecType_BondDeviceList {
	this := &CreateSpecType_BondDeviceList{}
	this.BondDeviceList = ves_io_schema_fleet.NewPopulatedFleetBondDevicesListType(r, easy)
	return this
}
func NewPopulatedCreateSpecType_DefaultNetworkConfig(r randyTypes, easy bool) *CreateSpecType_DefaultNetworkConfig {
	this := &CreateSpecType_DefaultNetworkConfig{}
	this.DefaultNetworkConfig = ves_io_schema4.NewPopulatedEmpty(r, easy)
	return this
}
func NewPopulatedCreateSpecType_CustomNetworkConfig(r randyTypes, easy bool) *CreateSpecType_CustomNetworkConfig {
	this := &CreateSpecType_CustomNetworkConfig{}
	this.CustomNetworkConfig = NewPopulatedVssNetworkConfiguration(r, easy)
	return this
}
func NewPopulatedCreateSpecType_DefaultStorageConfig(r randyTypes, easy bool) *CreateSpecType_DefaultStorageConfig {
	this := &CreateSpecType_DefaultStorageConfig{}
	this.DefaultStorageConfig = ves_io_schema4.NewPopulatedEmpty(r, easy)
	return this
}
func NewPopulatedCreateSpecType_CustomStorageConfig(r randyTypes, easy bool) *CreateSpecType_CustomStorageConfig {
	this := &CreateSpecType_CustomStorageConfig{}
	this.CustomStorageConfig = NewPopulatedVssStorageConfiguration(r, easy)
	return this
}
func NewPopulatedCreateSpecType_DisableGpu(r randyTypes, easy bool) *CreateSpecType_DisableGpu {
	this := &CreateSpecType_DisableGpu{}
	this.DisableGpu = ves_io_schema4.NewPopulatedEmpty(r, easy)
	return this
}
func NewPopulatedCreateSpecType_EnableGpu(r randyTypes, easy bool) *CreateSpecType_EnableGpu {
	this := &CreateSpecType_EnableGpu{}
	this.EnableGpu = ves_io_schema4.NewPopulatedEmpty(r, easy)
	return this
}
func NewPopulatedCreateSpecType_NoK8SCluster(r randyTypes, easy bool) *CreateSpecType_NoK8SCluster {
	this := &CreateSpecType_NoK8SCluster{}
	this.NoK8SCluster = ves_io_schema4.NewPopulatedEmpty(r, easy)
	return this
}
func NewPopulatedCreateSpecType_K8SCluster(r randyTypes, easy bool) *CreateSpecType_K8SCluster {
	this := &CreateSpecType_K8SCluster{}
	this.K8SCluster = ves_io_schema_views.NewPopulatedObjectRefType(r, easy)
	return this
}
func NewPopulatedCreateSpecType_LogsStreamingDisabled(r randyTypes, easy bool) *CreateSpecType_LogsStreamingDisabled {
	this := &CreateSpecType_LogsStreamingDisabled{}
	this.LogsStreamingDisabled = ves_io_schema4.NewPopulatedEmpty(r, easy)
	return this
}
func NewPopulatedCreateSpecType_LogReceiver(r randyTypes, easy bool) *CreateSpecType_LogReceiver {
	this := &CreateSpecType_LogReceiver{}
	this.LogReceiver = ves_io_schema_views.NewPopulatedObjectRefType(r, easy)
	return this
}
func NewPopulatedCreateSpecType_DenyAllUsb(r randyTypes, easy bool) *CreateSpecType_DenyAllUsb {
	this := &CreateSpecType_DenyAllUsb{}
	this.DenyAllUsb = ves_io_schema4.NewPopulatedEmpty(r, easy)
	return this
}
func NewPopulatedCreateSpecType_AllowAllUsb(r randyTypes, easy bool) *CreateSpecType_AllowAllUsb {
	this := &CreateSpecType_AllowAllUsb{}
	this.AllowAllUsb = ves_io_schema4.NewPopulatedEmpty(r, easy)
	return this
}
func NewPopulatedCreateSpecType_UsbPolicy(r randyTypes, easy bool) *CreateSpecType_UsbPolicy {
	this := &CreateSpecType_UsbPolicy{}
	this.UsbPolicy = ves_io_schema_views.NewPopulatedObjectRefType(r, easy)
	return this
}
func NewPopulatedReplaceSpecType(r randyTypes, easy bool) *ReplaceSpecType {
	this := &ReplaceSpecType{}
	this.VolterraCertifiedHw = string(randStringTypes(r))
	v12 := r.Intn(10)
	this.MasterNodes = make([]string, v12)
	for i := 0; i < v12; i++ {
		this.MasterNodes[i] = string(randStringTypes(r))
	}
	v13 := r.Intn(10)
	this.WorkerNodes = make([]string, v13)
	for i := 0; i < v13; i++ {
		this.WorkerNodes[i] = string(randStringTypes(r))
	}
	this.VolterraSoftwareVersion = string(randStringTypes(r))
	this.OperatingSystemVersion = string(randStringTypes(r))
	oneofNumber_BondChoice := []int32{7, 8}[r.Intn(2)]
	switch oneofNumber_BondChoice {
	case 7:
		this.BondChoice = NewPopulatedReplaceSpecType_NoBondDevices(r, easy)
	case 8:
		this.BondChoice = NewPopulatedReplaceSpecType_BondDeviceList(r, easy)
	}
	oneofNumber_NetworkCfgChoice := []int32{10, 11}[r.Intn(2)]
	switch oneofNumber_NetworkCfgChoice {
	case 10:
		this.NetworkCfgChoice = NewPopulatedReplaceSpecType_DefaultNetworkConfig(r, easy)
	case 11:
		this.NetworkCfgChoice = NewPopulatedReplaceSpecType_CustomNetworkConfig(r, easy)
	}
	oneofNumber_StorageCfgChoice := []int32{13, 14}[r.Intn(2)]
	switch oneofNumber_StorageCfgChoice {
	case 13:
		this.StorageCfgChoice = NewPopulatedReplaceSpecType_DefaultStorageConfig(r, easy)
	case 14:
		this.StorageCfgChoice = NewPopulatedReplaceSpecType_CustomStorageConfig(r, easy)
	}
	oneofNumber_GpuChoice := []int32{16, 17}[r.Intn(2)]
	switch oneofNumber_GpuChoice {
	case 16:
		this.GpuChoice = NewPopulatedReplaceSpecType_DisableGpu(r, easy)
	case 17:
		this.GpuChoice = NewPopulatedReplaceSpecType_EnableGpu(r, easy)
	}
	this.Address = string(randStringTypes(r))
	if r.Intn(10) != 0 {
		this.Coordinates = ves_io_schema_site.NewPopulatedCoordinates(r, easy)
	}
	oneofNumber_K8SClusterChoice := []int32{21, 22}[r.Intn(2)]
	switch oneofNumber_K8SClusterChoice {
	case 21:
		this.K8SClusterChoice = NewPopulatedReplaceSpecType_NoK8SCluster(r, easy)
	case 22:
		this.K8SClusterChoice = NewPopulatedReplaceSpecType_K8SCluster(r, easy)
	}
	oneofNumber_LogsReceiverChoice := []int32{24, 25}[r.Intn(2)]
	switch oneofNumber_LogsReceiverChoice {
	case 24:
		this.LogsReceiverChoice = NewPopulatedReplaceSpecType_LogsStreamingDisabled(r, easy)
	case 25:
		this.LogsReceiverChoice = NewPopulatedReplaceSpecType_LogReceiver(r, easy)
	}
	oneofNumber_UsbPolicyChoice := []int32{27, 28, 29}[r.Intn(3)]
	switch oneofNumber_UsbPolicyChoice {
	case 27:
		this.UsbPolicyChoice = NewPopulatedReplaceSpecType_DenyAllUsb(r, easy)
	case 28:
		this.UsbPolicyChoice = NewPopulatedReplaceSpecType_AllowAllUsb(r, easy)
	case 29:
		this.UsbPolicyChoice = NewPopulatedReplaceSpecType_UsbPolicy(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedReplaceSpecType_NoBondDevices(r randyTypes, easy bool) *ReplaceSpecType_NoBondDevices {
	this := &ReplaceSpecType_NoBondDevices{}
	this.NoBondDevices = ves_io_schema4.NewPopulatedEmpty(r, easy)
	return this
}
func NewPopulatedReplaceSpecType_BondDeviceList(r randyTypes, easy bool) *ReplaceSpecType_BondDeviceList {
	this := &ReplaceSpecType_BondDeviceList{}
	this.BondDeviceList = ves_io_schema_fleet.NewPopulatedFleetBondDevicesListType(r, easy)
	return this
}
func NewPopulatedReplaceSpecType_DefaultNetworkConfig(r randyTypes, easy bool) *ReplaceSpecType_DefaultNetworkConfig {
	this := &ReplaceSpecType_DefaultNetworkConfig{}
	this.DefaultNetworkConfig = ves_io_schema4.NewPopulatedEmpty(r, easy)
	return this
}
func NewPopulatedReplaceSpecType_CustomNetworkConfig(r randyTypes, easy bool) *ReplaceSpecType_CustomNetworkConfig {
	this := &ReplaceSpecType_CustomNetworkConfig{}
	this.CustomNetworkConfig = NewPopulatedVssNetworkConfiguration(r, easy)
	return this
}
func NewPopulatedReplaceSpecType_DefaultStorageConfig(r randyTypes, easy bool) *ReplaceSpecType_DefaultStorageConfig {
	this := &ReplaceSpecType_DefaultStorageConfig{}
	this.DefaultStorageConfig = ves_io_schema4.NewPopulatedEmpty(r, easy)
	return this
}
func NewPopulatedReplaceSpecType_CustomStorageConfig(r randyTypes, easy bool) *ReplaceSpecType_CustomStorageConfig {
	this := &ReplaceSpecType_CustomStorageConfig{}
	this.CustomStorageConfig = NewPopulatedVssStorageConfiguration(r, easy)
	return this
}
func NewPopulatedReplaceSpecType_DisableGpu(r randyTypes, easy bool) *ReplaceSpecType_DisableGpu {
	this := &ReplaceSpecType_DisableGpu{}
	this.DisableGpu = ves_io_schema4.NewPopulatedEmpty(r, easy)
	return this
}
func NewPopulatedReplaceSpecType_EnableGpu(r randyTypes, easy bool) *ReplaceSpecType_EnableGpu {
	this := &ReplaceSpecType_EnableGpu{}
	this.EnableGpu = ves_io_schema4.NewPopulatedEmpty(r, easy)
	return this
}
func NewPopulatedReplaceSpecType_NoK8SCluster(r randyTypes, easy bool) *ReplaceSpecType_NoK8SCluster {
	this := &ReplaceSpecType_NoK8SCluster{}
	this.NoK8SCluster = ves_io_schema4.NewPopulatedEmpty(r, easy)
	return this
}
func NewPopulatedReplaceSpecType_K8SCluster(r randyTypes, easy bool) *ReplaceSpecType_K8SCluster {
	this := &ReplaceSpecType_K8SCluster{}
	this.K8SCluster = ves_io_schema_views.NewPopulatedObjectRefType(r, easy)
	return this
}
func NewPopulatedReplaceSpecType_LogsStreamingDisabled(r randyTypes, easy bool) *ReplaceSpecType_LogsStreamingDisabled {
	this := &ReplaceSpecType_LogsStreamingDisabled{}
	this.LogsStreamingDisabled = ves_io_schema4.NewPopulatedEmpty(r, easy)
	return this
}
func NewPopulatedReplaceSpecType_LogReceiver(r randyTypes, easy bool) *ReplaceSpecType_LogReceiver {
	this := &ReplaceSpecType_LogReceiver{}
	this.LogReceiver = ves_io_schema_views.NewPopulatedObjectRefType(r, easy)
	return this
}
func NewPopulatedReplaceSpecType_DenyAllUsb(r randyTypes, easy bool) *ReplaceSpecType_DenyAllUsb {
	this := &ReplaceSpecType_DenyAllUsb{}
	this.DenyAllUsb = ves_io_schema4.NewPopulatedEmpty(r, easy)
	return this
}
func NewPopulatedReplaceSpecType_AllowAllUsb(r randyTypes, easy bool) *ReplaceSpecType_AllowAllUsb {
	this := &ReplaceSpecType_AllowAllUsb{}
	this.AllowAllUsb = ves_io_schema4.NewPopulatedEmpty(r, easy)
	return this
}
func NewPopulatedReplaceSpecType_UsbPolicy(r randyTypes, easy bool) *ReplaceSpecType_UsbPolicy {
	this := &ReplaceSpecType_UsbPolicy{}
	this.UsbPolicy = ves_io_schema_views.NewPopulatedObjectRefType(r, easy)
	return this
}
func NewPopulatedGetSpecType(r randyTypes, easy bool) *GetSpecType {
	this := &GetSpecType{}
	this.VolterraCertifiedHw = string(randStringTypes(r))
	v14 := r.Intn(10)
	this.MasterNodes = make([]string, v14)
	for i := 0; i < v14; i++ {
		this.MasterNodes[i] = string(randStringTypes(r))
	}
	v15 := r.Intn(10)
	this.WorkerNodes = make([]string, v15)
	for i := 0; i < v15; i++ {
		this.WorkerNodes[i] = string(randStringTypes(r))
	}
	this.VolterraSoftwareVersion = string(randStringTypes(r))
	this.OperatingSystemVersion = string(randStringTypes(r))
	oneofNumber_BondChoice := []int32{7, 8}[r.Intn(2)]
	switch oneofNumber_BondChoice {
	case 7:
		this.BondChoice = NewPopulatedGetSpecType_NoBondDevices(r, easy)
	case 8:
		this.BondChoice = NewPopulatedGetSpecType_BondDeviceList(r, easy)
	}
	oneofNumber_NetworkCfgChoice := []int32{10, 11}[r.Intn(2)]
	switch oneofNumber_NetworkCfgChoice {
	case 10:
		this.NetworkCfgChoice = NewPopulatedGetSpecType_DefaultNetworkConfig(r, easy)
	case 11:
		this.NetworkCfgChoice = NewPopulatedGetSpecType_CustomNetworkConfig(r, easy)
	}
	oneofNumber_StorageCfgChoice := []int32{13, 14}[r.Intn(2)]
	switch oneofNumber_StorageCfgChoice {
	case 13:
		this.StorageCfgChoice = NewPopulatedGetSpecType_DefaultStorageConfig(r, easy)
	case 14:
		this.StorageCfgChoice = NewPopulatedGetSpecType_CustomStorageConfig(r, easy)
	}
	oneofNumber_GpuChoice := []int32{16, 17}[r.Intn(2)]
	switch oneofNumber_GpuChoice {
	case 16:
		this.GpuChoice = NewPopulatedGetSpecType_DisableGpu(r, easy)
	case 17:
		this.GpuChoice = NewPopulatedGetSpecType_EnableGpu(r, easy)
	}
	this.Address = string(randStringTypes(r))
	if r.Intn(10) != 0 {
		this.Coordinates = ves_io_schema_site.NewPopulatedCoordinates(r, easy)
	}
	oneofNumber_K8SClusterChoice := []int32{21, 22}[r.Intn(2)]
	switch oneofNumber_K8SClusterChoice {
	case 21:
		this.K8SClusterChoice = NewPopulatedGetSpecType_NoK8SCluster(r, easy)
	case 22:
		this.K8SClusterChoice = NewPopulatedGetSpecType_K8SCluster(r, easy)
	}
	oneofNumber_LogsReceiverChoice := []int32{24, 25}[r.Intn(2)]
	switch oneofNumber_LogsReceiverChoice {
	case 24:
		this.LogsReceiverChoice = NewPopulatedGetSpecType_LogsStreamingDisabled(r, easy)
	case 25:
		this.LogsReceiverChoice = NewPopulatedGetSpecType_LogReceiver(r, easy)
	}
	oneofNumber_UsbPolicyChoice := []int32{27, 28, 29}[r.Intn(3)]
	switch oneofNumber_UsbPolicyChoice {
	case 27:
		this.UsbPolicyChoice = NewPopulatedGetSpecType_DenyAllUsb(r, easy)
	case 28:
		this.UsbPolicyChoice = NewPopulatedGetSpecType_AllowAllUsb(r, easy)
	case 29:
		this.UsbPolicyChoice = NewPopulatedGetSpecType_UsbPolicy(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedGetSpecType_NoBondDevices(r randyTypes, easy bool) *GetSpecType_NoBondDevices {
	this := &GetSpecType_NoBondDevices{}
	this.NoBondDevices = ves_io_schema4.NewPopulatedEmpty(r, easy)
	return this
}
func NewPopulatedGetSpecType_BondDeviceList(r randyTypes, easy bool) *GetSpecType_BondDeviceList {
	this := &GetSpecType_BondDeviceList{}
	this.BondDeviceList = ves_io_schema_fleet.NewPopulatedFleetBondDevicesListType(r, easy)
	return this
}
func NewPopulatedGetSpecType_DefaultNetworkConfig(r randyTypes, easy bool) *GetSpecType_DefaultNetworkConfig {
	this := &GetSpecType_DefaultNetworkConfig{}
	this.DefaultNetworkConfig = ves_io_schema4.NewPopulatedEmpty(r, easy)
	return this
}
func NewPopulatedGetSpecType_CustomNetworkConfig(r randyTypes, easy bool) *GetSpecType_CustomNetworkConfig {
	this := &GetSpecType_CustomNetworkConfig{}
	this.CustomNetworkConfig = NewPopulatedVssNetworkConfiguration(r, easy)
	return this
}
func NewPopulatedGetSpecType_DefaultStorageConfig(r randyTypes, easy bool) *GetSpecType_DefaultStorageConfig {
	this := &GetSpecType_DefaultStorageConfig{}
	this.DefaultStorageConfig = ves_io_schema4.NewPopulatedEmpty(r, easy)
	return this
}
func NewPopulatedGetSpecType_CustomStorageConfig(r randyTypes, easy bool) *GetSpecType_CustomStorageConfig {
	this := &GetSpecType_CustomStorageConfig{}
	this.CustomStorageConfig = NewPopulatedVssStorageConfiguration(r, easy)
	return this
}
func NewPopulatedGetSpecType_DisableGpu(r randyTypes, easy bool) *GetSpecType_DisableGpu {
	this := &GetSpecType_DisableGpu{}
	this.DisableGpu = ves_io_schema4.NewPopulatedEmpty(r, easy)
	return this
}
func NewPopulatedGetSpecType_EnableGpu(r randyTypes, easy bool) *GetSpecType_EnableGpu {
	this := &GetSpecType_EnableGpu{}
	this.EnableGpu = ves_io_schema4.NewPopulatedEmpty(r, easy)
	return this
}
func NewPopulatedGetSpecType_NoK8SCluster(r randyTypes, easy bool) *GetSpecType_NoK8SCluster {
	this := &GetSpecType_NoK8SCluster{}
	this.NoK8SCluster = ves_io_schema4.NewPopulatedEmpty(r, easy)
	return this
}
func NewPopulatedGetSpecType_K8SCluster(r randyTypes, easy bool) *GetSpecType_K8SCluster {
	this := &GetSpecType_K8SCluster{}
	this.K8SCluster = ves_io_schema_views.NewPopulatedObjectRefType(r, easy)
	return this
}
func NewPopulatedGetSpecType_LogsStreamingDisabled(r randyTypes, easy bool) *GetSpecType_LogsStreamingDisabled {
	this := &GetSpecType_LogsStreamingDisabled{}
	this.LogsStreamingDisabled = ves_io_schema4.NewPopulatedEmpty(r, easy)
	return this
}
func NewPopulatedGetSpecType_LogReceiver(r randyTypes, easy bool) *GetSpecType_LogReceiver {
	this := &GetSpecType_LogReceiver{}
	this.LogReceiver = ves_io_schema_views.NewPopulatedObjectRefType(r, easy)
	return this
}
func NewPopulatedGetSpecType_DenyAllUsb(r randyTypes, easy bool) *GetSpecType_DenyAllUsb {
	this := &GetSpecType_DenyAllUsb{}
	this.DenyAllUsb = ves_io_schema4.NewPopulatedEmpty(r, easy)
	return this
}
func NewPopulatedGetSpecType_AllowAllUsb(r randyTypes, easy bool) *GetSpecType_AllowAllUsb {
	this := &GetSpecType_AllowAllUsb{}
	this.AllowAllUsb = ves_io_schema4.NewPopulatedEmpty(r, easy)
	return this
}
func NewPopulatedGetSpecType_UsbPolicy(r randyTypes, easy bool) *GetSpecType_UsbPolicy {
	this := &GetSpecType_UsbPolicy{}
	this.UsbPolicy = ves_io_schema_views.NewPopulatedObjectRefType(r, easy)
	return this
}

type randyTypes interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneTypes(r randyTypes) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringTypes(r randyTypes) string {
	v16 := r.Intn(100)
	tmps := make([]rune, v16)
	for i := 0; i < v16; i++ {
		tmps[i] = randUTF8RuneTypes(r)
	}
	return string(tmps)
}
func randUnrecognizedTypes(r randyTypes, maxFieldNumber int) (dAtA []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		dAtA = randFieldTypes(dAtA, r, fieldNumber, wire)
	}
	return dAtA
}
func randFieldTypes(dAtA []byte, r randyTypes, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		dAtA = encodeVarintPopulateTypes(dAtA, uint64(key))
		v17 := r.Int63()
		if r.Intn(2) == 0 {
			v17 *= -1
		}
		dAtA = encodeVarintPopulateTypes(dAtA, uint64(v17))
	case 1:
		dAtA = encodeVarintPopulateTypes(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		dAtA = encodeVarintPopulateTypes(dAtA, uint64(key))
		ll := r.Intn(100)
		dAtA = encodeVarintPopulateTypes(dAtA, uint64(ll))
		for j := 0; j < ll; j++ {
			dAtA = append(dAtA, byte(r.Intn(256)))
		}
	default:
		dAtA = encodeVarintPopulateTypes(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return dAtA
}
func encodeVarintPopulateTypes(dAtA []byte, v uint64) []byte {
	for v >= 1<<7 {
		dAtA = append(dAtA, uint8(uint64(v)&0x7f|0x80))
		v >>= 7
	}
	dAtA = append(dAtA, uint8(v))
	return dAtA
}
func (m *Interface) Size() (n int) {
	var l int
	_ = l
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if len(m.Labels) > 0 {
		for k, v := range m.Labels {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovTypes(uint64(len(k))) + 1 + len(v) + sovTypes(uint64(len(v)))
			n += mapEntrySize + 1 + sovTypes(uint64(mapEntrySize))
		}
	}
	if m.InterfaceChoice != nil {
		n += m.InterfaceChoice.Size()
	}
	return n
}

func (m *Interface_EthernetInterface) Size() (n int) {
	var l int
	_ = l
	if m.EthernetInterface != nil {
		l = m.EthernetInterface.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *Interface_DedicatedInterface) Size() (n int) {
	var l int
	_ = l
	if m.DedicatedInterface != nil {
		l = m.DedicatedInterface.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *Interface_DedicatedManagementInterface) Size() (n int) {
	var l int
	_ = l
	if m.DedicatedManagementInterface != nil {
		l = m.DedicatedManagementInterface.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *Interface_TunnelInterface) Size() (n int) {
	var l int
	_ = l
	if m.TunnelInterface != nil {
		l = m.TunnelInterface.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *InterfaceListType) Size() (n int) {
	var l int
	_ = l
	if len(m.Interfaces) > 0 {
		for _, e := range m.Interfaces {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *StorageInterfaceType) Size() (n int) {
	var l int
	_ = l
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if len(m.Labels) > 0 {
		for k, v := range m.Labels {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovTypes(uint64(len(k))) + 1 + len(v) + sovTypes(uint64(len(v)))
			n += mapEntrySize + 1 + sovTypes(uint64(mapEntrySize))
		}
	}
	if m.StorageInterface != nil {
		l = m.StorageInterface.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *StorageInterfaceListType) Size() (n int) {
	var l int
	_ = l
	if len(m.StorageInterfaces) > 0 {
		for _, e := range m.StorageInterfaces {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *StaticRoutesListType) Size() (n int) {
	var l int
	_ = l
	if len(m.StaticRoutes) > 0 {
		for _, e := range m.StaticRoutes {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *VnConfiguration) Size() (n int) {
	var l int
	_ = l
	if len(m.Labels) > 0 {
		for k, v := range m.Labels {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovTypes(uint64(len(k))) + 1 + len(v) + sovTypes(uint64(len(v)))
			n += mapEntrySize + 1 + sovTypes(uint64(mapEntrySize))
		}
	}
	if m.StaticRouteChoice != nil {
		n += m.StaticRouteChoice.Size()
	}
	if m.DcClusterGroupChoice != nil {
		n += m.DcClusterGroupChoice.Size()
	}
	return n
}

func (m *VnConfiguration_NoStaticRoutes) Size() (n int) {
	var l int
	_ = l
	if m.NoStaticRoutes != nil {
		l = m.NoStaticRoutes.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *VnConfiguration_StaticRoutes) Size() (n int) {
	var l int
	_ = l
	if m.StaticRoutes != nil {
		l = m.StaticRoutes.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *VnConfiguration_NoDcClusterGroup) Size() (n int) {
	var l int
	_ = l
	if m.NoDcClusterGroup != nil {
		l = m.NoDcClusterGroup.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *VnConfiguration_DcClusterGroup) Size() (n int) {
	var l int
	_ = l
	if m.DcClusterGroup != nil {
		l = m.DcClusterGroup.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalNetworkConnectionType) Size() (n int) {
	var l int
	_ = l
	if m.ConnectionChoice != nil {
		n += m.ConnectionChoice.Size()
	}
	if m.ForwardProxyChoice != nil {
		n += m.ForwardProxyChoice.Size()
	}
	return n
}

func (m *GlobalNetworkConnectionType_SloToGlobalDr) Size() (n int) {
	var l int
	_ = l
	if m.SloToGlobalDr != nil {
		l = m.SloToGlobalDr.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalNetworkConnectionType_DisableForwardProxy) Size() (n int) {
	var l int
	_ = l
	if m.DisableForwardProxy != nil {
		l = m.DisableForwardProxy.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalNetworkConnectionType_EnableForwardProxy) Size() (n int) {
	var l int
	_ = l
	if m.EnableForwardProxy != nil {
		l = m.EnableForwardProxy.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalNetworkConnectionListType) Size() (n int) {
	var l int
	_ = l
	if len(m.GlobalNetworkConnections) > 0 {
		for _, e := range m.GlobalNetworkConnections {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *VssNetworkConfiguration) Size() (n int) {
	var l int
	_ = l
	if m.SloChoice != nil {
		n += m.SloChoice.Size()
	}
	if m.InterfaceChoice != nil {
		n += m.InterfaceChoice.Size()
	}
	if m.NetworkPolicyChoice != nil {
		n += m.NetworkPolicyChoice.Size()
	}
	if m.ForwardProxyChoice != nil {
		n += m.ForwardProxyChoice.Size()
	}
	if m.GlobalNetworkChoice != nil {
		n += m.GlobalNetworkChoice.Size()
	}
	l = len(m.OutsideVip)
	if l > 0 {
		n += 2 + l + sovTypes(uint64(l))
	}
	l = len(m.OutsideNameserver)
	if l > 0 {
		n += 2 + l + sovTypes(uint64(l))
	}
	l = len(m.BgpRouterId)
	if l > 0 {
		n += 2 + l + sovTypes(uint64(l))
	}
	l = len(m.BgpPeerAddress)
	if l > 0 {
		n += 2 + l + sovTypes(uint64(l))
	}
	if m.VipVrrpMode != 0 {
		n += 2 + sovTypes(uint64(m.VipVrrpMode))
	}
	l = len(m.SiteToSiteTunnelIp)
	if l > 0 {
		n += 2 + l + sovTypes(uint64(l))
	}
	if m.TunnelDeadTimeout != 0 {
		n += 2 + sovTypes(uint64(m.TunnelDeadTimeout))
	}
	return n
}

func (m *VssNetworkConfiguration_DefaultConfig) Size() (n int) {
	var l int
	_ = l
	if m.DefaultConfig != nil {
		l = m.DefaultConfig.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *VssNetworkConfiguration_SloConfig) Size() (n int) {
	var l int
	_ = l
	if m.SloConfig != nil {
		l = m.SloConfig.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *VssNetworkConfiguration_DefaultInterfaceConfig) Size() (n int) {
	var l int
	_ = l
	if m.DefaultInterfaceConfig != nil {
		l = m.DefaultInterfaceConfig.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *VssNetworkConfiguration_InterfaceList) Size() (n int) {
	var l int
	_ = l
	if m.InterfaceList != nil {
		l = m.InterfaceList.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *VssNetworkConfiguration_NoNetworkPolicy) Size() (n int) {
	var l int
	_ = l
	if m.NoNetworkPolicy != nil {
		l = m.NoNetworkPolicy.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *VssNetworkConfiguration_ActiveNetworkPolicies) Size() (n int) {
	var l int
	_ = l
	if m.ActiveNetworkPolicies != nil {
		l = m.ActiveNetworkPolicies.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *VssNetworkConfiguration_NoForwardProxy) Size() (n int) {
	var l int
	_ = l
	if m.NoForwardProxy != nil {
		l = m.NoForwardProxy.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *VssNetworkConfiguration_ActiveForwardProxyPolicies) Size() (n int) {
	var l int
	_ = l
	if m.ActiveForwardProxyPolicies != nil {
		l = m.ActiveForwardProxyPolicies.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *VssNetworkConfiguration_NoGlobalNetwork) Size() (n int) {
	var l int
	_ = l
	if m.NoGlobalNetwork != nil {
		l = m.NoGlobalNetwork.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *VssNetworkConfiguration_GlobalNetworkList) Size() (n int) {
	var l int
	_ = l
	if m.GlobalNetworkList != nil {
		l = m.GlobalNetworkList.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *VssNetworkConfiguration_ForwardProxyAllowAll) Size() (n int) {
	var l int
	_ = l
	if m.ForwardProxyAllowAll != nil {
		l = m.ForwardProxyAllowAll.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *VssStorageConfiguration) Size() (n int) {
	var l int
	_ = l
	if m.StorageInterfaceChoice != nil {
		n += m.StorageInterfaceChoice.Size()
	}
	if m.StorageDeviceChoice != nil {
		n += m.StorageDeviceChoice.Size()
	}
	if m.StorageClassChoice != nil {
		n += m.StorageClassChoice.Size()
	}
	if m.StaticRouteChoice != nil {
		n += m.StaticRouteChoice.Size()
	}
	return n
}

func (m *VssStorageConfiguration_NoStorageInterfaces) Size() (n int) {
	var l int
	_ = l
	if m.NoStorageInterfaces != nil {
		l = m.NoStorageInterfaces.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *VssStorageConfiguration_StorageInterfaceList) Size() (n int) {
	var l int
	_ = l
	if m.StorageInterfaceList != nil {
		l = m.StorageInterfaceList.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *VssStorageConfiguration_NoStorageDevice) Size() (n int) {
	var l int
	_ = l
	if m.NoStorageDevice != nil {
		l = m.NoStorageDevice.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *VssStorageConfiguration_StorageDeviceList) Size() (n int) {
	var l int
	_ = l
	if m.StorageDeviceList != nil {
		l = m.StorageDeviceList.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *VssStorageConfiguration_DefaultStorageClass) Size() (n int) {
	var l int
	_ = l
	if m.DefaultStorageClass != nil {
		l = m.DefaultStorageClass.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *VssStorageConfiguration_StorageClassList) Size() (n int) {
	var l int
	_ = l
	if m.StorageClassList != nil {
		l = m.StorageClassList.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *VssStorageConfiguration_NoStaticRoutes) Size() (n int) {
	var l int
	_ = l
	if m.NoStaticRoutes != nil {
		l = m.NoStaticRoutes.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *VssStorageConfiguration_StaticRoutes) Size() (n int) {
	var l int
	_ = l
	if m.StaticRoutes != nil {
		l = m.StaticRoutes.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType) Size() (n int) {
	var l int
	_ = l
	l = len(m.VolterraCertifiedHw)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if len(m.MasterNodes) > 0 {
		for _, s := range m.MasterNodes {
			l = len(s)
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if len(m.WorkerNodes) > 0 {
		for _, s := range m.WorkerNodes {
			l = len(s)
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	l = len(m.VolterraSoftwareVersion)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.OperatingSystemVersion)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.BondChoice != nil {
		n += m.BondChoice.Size()
	}
	if m.NetworkCfgChoice != nil {
		n += m.NetworkCfgChoice.Size()
	}
	if m.StorageCfgChoice != nil {
		n += m.StorageCfgChoice.Size()
	}
	if m.GpuChoice != nil {
		n += m.GpuChoice.Size()
	}
	l = len(m.Address)
	if l > 0 {
		n += 2 + l + sovTypes(uint64(l))
	}
	if m.Coordinates != nil {
		l = m.Coordinates.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	if m.K8SClusterChoice != nil {
		n += m.K8SClusterChoice.Size()
	}
	if m.LogsReceiverChoice != nil {
		n += m.LogsReceiverChoice.Size()
	}
	if m.UsbPolicyChoice != nil {
		n += m.UsbPolicyChoice.Size()
	}
	if m.ViewInternal != nil {
		l = m.ViewInternal.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *GlobalSpecType_NoBondDevices) Size() (n int) {
	var l int
	_ = l
	if m.NoBondDevices != nil {
		l = m.NoBondDevices.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_BondDeviceList) Size() (n int) {
	var l int
	_ = l
	if m.BondDeviceList != nil {
		l = m.BondDeviceList.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_DefaultNetworkConfig) Size() (n int) {
	var l int
	_ = l
	if m.DefaultNetworkConfig != nil {
		l = m.DefaultNetworkConfig.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_CustomNetworkConfig) Size() (n int) {
	var l int
	_ = l
	if m.CustomNetworkConfig != nil {
		l = m.CustomNetworkConfig.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_DefaultStorageConfig) Size() (n int) {
	var l int
	_ = l
	if m.DefaultStorageConfig != nil {
		l = m.DefaultStorageConfig.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_CustomStorageConfig) Size() (n int) {
	var l int
	_ = l
	if m.CustomStorageConfig != nil {
		l = m.CustomStorageConfig.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_DisableGpu) Size() (n int) {
	var l int
	_ = l
	if m.DisableGpu != nil {
		l = m.DisableGpu.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_EnableGpu) Size() (n int) {
	var l int
	_ = l
	if m.EnableGpu != nil {
		l = m.EnableGpu.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_NoK8SCluster) Size() (n int) {
	var l int
	_ = l
	if m.NoK8SCluster != nil {
		l = m.NoK8SCluster.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_K8SCluster) Size() (n int) {
	var l int
	_ = l
	if m.K8SCluster != nil {
		l = m.K8SCluster.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_LogsStreamingDisabled) Size() (n int) {
	var l int
	_ = l
	if m.LogsStreamingDisabled != nil {
		l = m.LogsStreamingDisabled.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_LogReceiver) Size() (n int) {
	var l int
	_ = l
	if m.LogReceiver != nil {
		l = m.LogReceiver.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_DenyAllUsb) Size() (n int) {
	var l int
	_ = l
	if m.DenyAllUsb != nil {
		l = m.DenyAllUsb.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_AllowAllUsb) Size() (n int) {
	var l int
	_ = l
	if m.AllowAllUsb != nil {
		l = m.AllowAllUsb.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_UsbPolicy) Size() (n int) {
	var l int
	_ = l
	if m.UsbPolicy != nil {
		l = m.UsbPolicy.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType) Size() (n int) {
	var l int
	_ = l
	l = len(m.VolterraCertifiedHw)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if len(m.MasterNodes) > 0 {
		for _, s := range m.MasterNodes {
			l = len(s)
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if len(m.WorkerNodes) > 0 {
		for _, s := range m.WorkerNodes {
			l = len(s)
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	l = len(m.VolterraSoftwareVersion)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.OperatingSystemVersion)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.BondChoice != nil {
		n += m.BondChoice.Size()
	}
	if m.NetworkCfgChoice != nil {
		n += m.NetworkCfgChoice.Size()
	}
	if m.StorageCfgChoice != nil {
		n += m.StorageCfgChoice.Size()
	}
	if m.GpuChoice != nil {
		n += m.GpuChoice.Size()
	}
	l = len(m.Address)
	if l > 0 {
		n += 2 + l + sovTypes(uint64(l))
	}
	if m.Coordinates != nil {
		l = m.Coordinates.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	if m.K8SClusterChoice != nil {
		n += m.K8SClusterChoice.Size()
	}
	if m.LogsReceiverChoice != nil {
		n += m.LogsReceiverChoice.Size()
	}
	if m.UsbPolicyChoice != nil {
		n += m.UsbPolicyChoice.Size()
	}
	return n
}

func (m *CreateSpecType_NoBondDevices) Size() (n int) {
	var l int
	_ = l
	if m.NoBondDevices != nil {
		l = m.NoBondDevices.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_BondDeviceList) Size() (n int) {
	var l int
	_ = l
	if m.BondDeviceList != nil {
		l = m.BondDeviceList.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_DefaultNetworkConfig) Size() (n int) {
	var l int
	_ = l
	if m.DefaultNetworkConfig != nil {
		l = m.DefaultNetworkConfig.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_CustomNetworkConfig) Size() (n int) {
	var l int
	_ = l
	if m.CustomNetworkConfig != nil {
		l = m.CustomNetworkConfig.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_DefaultStorageConfig) Size() (n int) {
	var l int
	_ = l
	if m.DefaultStorageConfig != nil {
		l = m.DefaultStorageConfig.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_CustomStorageConfig) Size() (n int) {
	var l int
	_ = l
	if m.CustomStorageConfig != nil {
		l = m.CustomStorageConfig.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_DisableGpu) Size() (n int) {
	var l int
	_ = l
	if m.DisableGpu != nil {
		l = m.DisableGpu.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_EnableGpu) Size() (n int) {
	var l int
	_ = l
	if m.EnableGpu != nil {
		l = m.EnableGpu.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_NoK8SCluster) Size() (n int) {
	var l int
	_ = l
	if m.NoK8SCluster != nil {
		l = m.NoK8SCluster.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_K8SCluster) Size() (n int) {
	var l int
	_ = l
	if m.K8SCluster != nil {
		l = m.K8SCluster.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_LogsStreamingDisabled) Size() (n int) {
	var l int
	_ = l
	if m.LogsStreamingDisabled != nil {
		l = m.LogsStreamingDisabled.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_LogReceiver) Size() (n int) {
	var l int
	_ = l
	if m.LogReceiver != nil {
		l = m.LogReceiver.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_DenyAllUsb) Size() (n int) {
	var l int
	_ = l
	if m.DenyAllUsb != nil {
		l = m.DenyAllUsb.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_AllowAllUsb) Size() (n int) {
	var l int
	_ = l
	if m.AllowAllUsb != nil {
		l = m.AllowAllUsb.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_UsbPolicy) Size() (n int) {
	var l int
	_ = l
	if m.UsbPolicy != nil {
		l = m.UsbPolicy.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType) Size() (n int) {
	var l int
	_ = l
	l = len(m.VolterraCertifiedHw)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if len(m.MasterNodes) > 0 {
		for _, s := range m.MasterNodes {
			l = len(s)
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if len(m.WorkerNodes) > 0 {
		for _, s := range m.WorkerNodes {
			l = len(s)
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	l = len(m.VolterraSoftwareVersion)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.OperatingSystemVersion)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.BondChoice != nil {
		n += m.BondChoice.Size()
	}
	if m.NetworkCfgChoice != nil {
		n += m.NetworkCfgChoice.Size()
	}
	if m.StorageCfgChoice != nil {
		n += m.StorageCfgChoice.Size()
	}
	if m.GpuChoice != nil {
		n += m.GpuChoice.Size()
	}
	l = len(m.Address)
	if l > 0 {
		n += 2 + l + sovTypes(uint64(l))
	}
	if m.Coordinates != nil {
		l = m.Coordinates.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	if m.K8SClusterChoice != nil {
		n += m.K8SClusterChoice.Size()
	}
	if m.LogsReceiverChoice != nil {
		n += m.LogsReceiverChoice.Size()
	}
	if m.UsbPolicyChoice != nil {
		n += m.UsbPolicyChoice.Size()
	}
	return n
}

func (m *ReplaceSpecType_NoBondDevices) Size() (n int) {
	var l int
	_ = l
	if m.NoBondDevices != nil {
		l = m.NoBondDevices.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_BondDeviceList) Size() (n int) {
	var l int
	_ = l
	if m.BondDeviceList != nil {
		l = m.BondDeviceList.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_DefaultNetworkConfig) Size() (n int) {
	var l int
	_ = l
	if m.DefaultNetworkConfig != nil {
		l = m.DefaultNetworkConfig.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_CustomNetworkConfig) Size() (n int) {
	var l int
	_ = l
	if m.CustomNetworkConfig != nil {
		l = m.CustomNetworkConfig.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_DefaultStorageConfig) Size() (n int) {
	var l int
	_ = l
	if m.DefaultStorageConfig != nil {
		l = m.DefaultStorageConfig.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_CustomStorageConfig) Size() (n int) {
	var l int
	_ = l
	if m.CustomStorageConfig != nil {
		l = m.CustomStorageConfig.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_DisableGpu) Size() (n int) {
	var l int
	_ = l
	if m.DisableGpu != nil {
		l = m.DisableGpu.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_EnableGpu) Size() (n int) {
	var l int
	_ = l
	if m.EnableGpu != nil {
		l = m.EnableGpu.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_NoK8SCluster) Size() (n int) {
	var l int
	_ = l
	if m.NoK8SCluster != nil {
		l = m.NoK8SCluster.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_K8SCluster) Size() (n int) {
	var l int
	_ = l
	if m.K8SCluster != nil {
		l = m.K8SCluster.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_LogsStreamingDisabled) Size() (n int) {
	var l int
	_ = l
	if m.LogsStreamingDisabled != nil {
		l = m.LogsStreamingDisabled.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_LogReceiver) Size() (n int) {
	var l int
	_ = l
	if m.LogReceiver != nil {
		l = m.LogReceiver.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_DenyAllUsb) Size() (n int) {
	var l int
	_ = l
	if m.DenyAllUsb != nil {
		l = m.DenyAllUsb.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_AllowAllUsb) Size() (n int) {
	var l int
	_ = l
	if m.AllowAllUsb != nil {
		l = m.AllowAllUsb.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_UsbPolicy) Size() (n int) {
	var l int
	_ = l
	if m.UsbPolicy != nil {
		l = m.UsbPolicy.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType) Size() (n int) {
	var l int
	_ = l
	l = len(m.VolterraCertifiedHw)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if len(m.MasterNodes) > 0 {
		for _, s := range m.MasterNodes {
			l = len(s)
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if len(m.WorkerNodes) > 0 {
		for _, s := range m.WorkerNodes {
			l = len(s)
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	l = len(m.VolterraSoftwareVersion)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.OperatingSystemVersion)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.BondChoice != nil {
		n += m.BondChoice.Size()
	}
	if m.NetworkCfgChoice != nil {
		n += m.NetworkCfgChoice.Size()
	}
	if m.StorageCfgChoice != nil {
		n += m.StorageCfgChoice.Size()
	}
	if m.GpuChoice != nil {
		n += m.GpuChoice.Size()
	}
	l = len(m.Address)
	if l > 0 {
		n += 2 + l + sovTypes(uint64(l))
	}
	if m.Coordinates != nil {
		l = m.Coordinates.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	if m.K8SClusterChoice != nil {
		n += m.K8SClusterChoice.Size()
	}
	if m.LogsReceiverChoice != nil {
		n += m.LogsReceiverChoice.Size()
	}
	if m.UsbPolicyChoice != nil {
		n += m.UsbPolicyChoice.Size()
	}
	return n
}

func (m *GetSpecType_NoBondDevices) Size() (n int) {
	var l int
	_ = l
	if m.NoBondDevices != nil {
		l = m.NoBondDevices.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_BondDeviceList) Size() (n int) {
	var l int
	_ = l
	if m.BondDeviceList != nil {
		l = m.BondDeviceList.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_DefaultNetworkConfig) Size() (n int) {
	var l int
	_ = l
	if m.DefaultNetworkConfig != nil {
		l = m.DefaultNetworkConfig.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_CustomNetworkConfig) Size() (n int) {
	var l int
	_ = l
	if m.CustomNetworkConfig != nil {
		l = m.CustomNetworkConfig.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_DefaultStorageConfig) Size() (n int) {
	var l int
	_ = l
	if m.DefaultStorageConfig != nil {
		l = m.DefaultStorageConfig.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_CustomStorageConfig) Size() (n int) {
	var l int
	_ = l
	if m.CustomStorageConfig != nil {
		l = m.CustomStorageConfig.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_DisableGpu) Size() (n int) {
	var l int
	_ = l
	if m.DisableGpu != nil {
		l = m.DisableGpu.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_EnableGpu) Size() (n int) {
	var l int
	_ = l
	if m.EnableGpu != nil {
		l = m.EnableGpu.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_NoK8SCluster) Size() (n int) {
	var l int
	_ = l
	if m.NoK8SCluster != nil {
		l = m.NoK8SCluster.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_K8SCluster) Size() (n int) {
	var l int
	_ = l
	if m.K8SCluster != nil {
		l = m.K8SCluster.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_LogsStreamingDisabled) Size() (n int) {
	var l int
	_ = l
	if m.LogsStreamingDisabled != nil {
		l = m.LogsStreamingDisabled.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_LogReceiver) Size() (n int) {
	var l int
	_ = l
	if m.LogReceiver != nil {
		l = m.LogReceiver.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_DenyAllUsb) Size() (n int) {
	var l int
	_ = l
	if m.DenyAllUsb != nil {
		l = m.DenyAllUsb.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_AllowAllUsb) Size() (n int) {
	var l int
	_ = l
	if m.AllowAllUsb != nil {
		l = m.AllowAllUsb.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_UsbPolicy) Size() (n int) {
	var l int
	_ = l
	if m.UsbPolicy != nil {
		l = m.UsbPolicy.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}

func sovTypes(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozTypes(x uint64) (n int) {
	return sovTypes(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *Interface) String() string {
	if this == nil {
		return "nil"
	}
	keysForLabels := make([]string, 0, len(this.Labels))
	for k, _ := range this.Labels {
		keysForLabels = append(keysForLabels, k)
	}
	sortkeys.Strings(keysForLabels)
	mapStringForLabels := "map[string]string{"
	for _, k := range keysForLabels {
		mapStringForLabels += fmt.Sprintf("%v: %v,", k, this.Labels[k])
	}
	mapStringForLabels += "}"
	s := strings.Join([]string{`&Interface{`,
		`Description:` + fmt.Sprintf("%v", this.Description) + `,`,
		`Labels:` + mapStringForLabels + `,`,
		`InterfaceChoice:` + fmt.Sprintf("%v", this.InterfaceChoice) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Interface_EthernetInterface) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Interface_EthernetInterface{`,
		`EthernetInterface:` + strings.Replace(fmt.Sprintf("%v", this.EthernetInterface), "EthernetInterfaceType", "ves_io_schema_network_interface.EthernetInterfaceType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Interface_DedicatedInterface) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Interface_DedicatedInterface{`,
		`DedicatedInterface:` + strings.Replace(fmt.Sprintf("%v", this.DedicatedInterface), "DedicatedInterfaceType", "ves_io_schema_network_interface.DedicatedInterfaceType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Interface_DedicatedManagementInterface) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Interface_DedicatedManagementInterface{`,
		`DedicatedManagementInterface:` + strings.Replace(fmt.Sprintf("%v", this.DedicatedManagementInterface), "DedicatedManagementInterfaceType", "ves_io_schema_network_interface.DedicatedManagementInterfaceType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Interface_TunnelInterface) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Interface_TunnelInterface{`,
		`TunnelInterface:` + strings.Replace(fmt.Sprintf("%v", this.TunnelInterface), "TunnelInterfaceType", "ves_io_schema_network_interface.TunnelInterfaceType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *InterfaceListType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&InterfaceListType{`,
		`Interfaces:` + strings.Replace(fmt.Sprintf("%v", this.Interfaces), "Interface", "Interface", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *StorageInterfaceType) String() string {
	if this == nil {
		return "nil"
	}
	keysForLabels := make([]string, 0, len(this.Labels))
	for k, _ := range this.Labels {
		keysForLabels = append(keysForLabels, k)
	}
	sortkeys.Strings(keysForLabels)
	mapStringForLabels := "map[string]string{"
	for _, k := range keysForLabels {
		mapStringForLabels += fmt.Sprintf("%v: %v,", k, this.Labels[k])
	}
	mapStringForLabels += "}"
	s := strings.Join([]string{`&StorageInterfaceType{`,
		`Description:` + fmt.Sprintf("%v", this.Description) + `,`,
		`Labels:` + mapStringForLabels + `,`,
		`StorageInterface:` + strings.Replace(fmt.Sprintf("%v", this.StorageInterface), "EthernetInterfaceType", "ves_io_schema_network_interface.EthernetInterfaceType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *StorageInterfaceListType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&StorageInterfaceListType{`,
		`StorageInterfaces:` + strings.Replace(fmt.Sprintf("%v", this.StorageInterfaces), "StorageInterfaceType", "StorageInterfaceType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *StaticRoutesListType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&StaticRoutesListType{`,
		`StaticRoutes:` + strings.Replace(fmt.Sprintf("%v", this.StaticRoutes), "StaticRouteViewType", "ves_io_schema_virtual_network.StaticRouteViewType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *VnConfiguration) String() string {
	if this == nil {
		return "nil"
	}
	keysForLabels := make([]string, 0, len(this.Labels))
	for k, _ := range this.Labels {
		keysForLabels = append(keysForLabels, k)
	}
	sortkeys.Strings(keysForLabels)
	mapStringForLabels := "map[string]string{"
	for _, k := range keysForLabels {
		mapStringForLabels += fmt.Sprintf("%v: %v,", k, this.Labels[k])
	}
	mapStringForLabels += "}"
	s := strings.Join([]string{`&VnConfiguration{`,
		`Labels:` + mapStringForLabels + `,`,
		`StaticRouteChoice:` + fmt.Sprintf("%v", this.StaticRouteChoice) + `,`,
		`DcClusterGroupChoice:` + fmt.Sprintf("%v", this.DcClusterGroupChoice) + `,`,
		`}`,
	}, "")
	return s
}
func (this *VnConfiguration_NoStaticRoutes) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&VnConfiguration_NoStaticRoutes{`,
		`NoStaticRoutes:` + strings.Replace(fmt.Sprintf("%v", this.NoStaticRoutes), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *VnConfiguration_StaticRoutes) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&VnConfiguration_StaticRoutes{`,
		`StaticRoutes:` + strings.Replace(fmt.Sprintf("%v", this.StaticRoutes), "StaticRoutesListType", "StaticRoutesListType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *VnConfiguration_NoDcClusterGroup) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&VnConfiguration_NoDcClusterGroup{`,
		`NoDcClusterGroup:` + strings.Replace(fmt.Sprintf("%v", this.NoDcClusterGroup), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *VnConfiguration_DcClusterGroup) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&VnConfiguration_DcClusterGroup{`,
		`DcClusterGroup:` + strings.Replace(fmt.Sprintf("%v", this.DcClusterGroup), "ObjectRefType", "ves_io_schema_views.ObjectRefType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalNetworkConnectionType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalNetworkConnectionType{`,
		`ConnectionChoice:` + fmt.Sprintf("%v", this.ConnectionChoice) + `,`,
		`ForwardProxyChoice:` + fmt.Sprintf("%v", this.ForwardProxyChoice) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalNetworkConnectionType_SloToGlobalDr) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalNetworkConnectionType_SloToGlobalDr{`,
		`SloToGlobalDr:` + strings.Replace(fmt.Sprintf("%v", this.SloToGlobalDr), "GlobalConnectorType", "ves_io_schema_views.GlobalConnectorType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalNetworkConnectionType_DisableForwardProxy) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalNetworkConnectionType_DisableForwardProxy{`,
		`DisableForwardProxy:` + strings.Replace(fmt.Sprintf("%v", this.DisableForwardProxy), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalNetworkConnectionType_EnableForwardProxy) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalNetworkConnectionType_EnableForwardProxy{`,
		`EnableForwardProxy:` + strings.Replace(fmt.Sprintf("%v", this.EnableForwardProxy), "ForwardProxyConfigType", "ves_io_schema4.ForwardProxyConfigType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalNetworkConnectionListType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalNetworkConnectionListType{`,
		`GlobalNetworkConnections:` + strings.Replace(fmt.Sprintf("%v", this.GlobalNetworkConnections), "GlobalNetworkConnectionType", "GlobalNetworkConnectionType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *VssNetworkConfiguration) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&VssNetworkConfiguration{`,
		`SloChoice:` + fmt.Sprintf("%v", this.SloChoice) + `,`,
		`InterfaceChoice:` + fmt.Sprintf("%v", this.InterfaceChoice) + `,`,
		`NetworkPolicyChoice:` + fmt.Sprintf("%v", this.NetworkPolicyChoice) + `,`,
		`ForwardProxyChoice:` + fmt.Sprintf("%v", this.ForwardProxyChoice) + `,`,
		`GlobalNetworkChoice:` + fmt.Sprintf("%v", this.GlobalNetworkChoice) + `,`,
		`OutsideVip:` + fmt.Sprintf("%v", this.OutsideVip) + `,`,
		`OutsideNameserver:` + fmt.Sprintf("%v", this.OutsideNameserver) + `,`,
		`BgpRouterId:` + fmt.Sprintf("%v", this.BgpRouterId) + `,`,
		`BgpPeerAddress:` + fmt.Sprintf("%v", this.BgpPeerAddress) + `,`,
		`VipVrrpMode:` + fmt.Sprintf("%v", this.VipVrrpMode) + `,`,
		`SiteToSiteTunnelIp:` + fmt.Sprintf("%v", this.SiteToSiteTunnelIp) + `,`,
		`TunnelDeadTimeout:` + fmt.Sprintf("%v", this.TunnelDeadTimeout) + `,`,
		`}`,
	}, "")
	return s
}
func (this *VssNetworkConfiguration_DefaultConfig) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&VssNetworkConfiguration_DefaultConfig{`,
		`DefaultConfig:` + strings.Replace(fmt.Sprintf("%v", this.DefaultConfig), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *VssNetworkConfiguration_SloConfig) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&VssNetworkConfiguration_SloConfig{`,
		`SloConfig:` + strings.Replace(fmt.Sprintf("%v", this.SloConfig), "VnConfiguration", "VnConfiguration", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *VssNetworkConfiguration_DefaultInterfaceConfig) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&VssNetworkConfiguration_DefaultInterfaceConfig{`,
		`DefaultInterfaceConfig:` + strings.Replace(fmt.Sprintf("%v", this.DefaultInterfaceConfig), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *VssNetworkConfiguration_InterfaceList) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&VssNetworkConfiguration_InterfaceList{`,
		`InterfaceList:` + strings.Replace(fmt.Sprintf("%v", this.InterfaceList), "InterfaceListType", "InterfaceListType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *VssNetworkConfiguration_NoNetworkPolicy) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&VssNetworkConfiguration_NoNetworkPolicy{`,
		`NoNetworkPolicy:` + strings.Replace(fmt.Sprintf("%v", this.NoNetworkPolicy), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *VssNetworkConfiguration_ActiveNetworkPolicies) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&VssNetworkConfiguration_ActiveNetworkPolicies{`,
		`ActiveNetworkPolicies:` + strings.Replace(fmt.Sprintf("%v", this.ActiveNetworkPolicies), "ActiveNetworkPoliciesType", "ves_io_schema_network_firewall.ActiveNetworkPoliciesType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *VssNetworkConfiguration_NoForwardProxy) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&VssNetworkConfiguration_NoForwardProxy{`,
		`NoForwardProxy:` + strings.Replace(fmt.Sprintf("%v", this.NoForwardProxy), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *VssNetworkConfiguration_ActiveForwardProxyPolicies) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&VssNetworkConfiguration_ActiveForwardProxyPolicies{`,
		`ActiveForwardProxyPolicies:` + strings.Replace(fmt.Sprintf("%v", this.ActiveForwardProxyPolicies), "ActiveForwardProxyPoliciesType", "ves_io_schema_network_firewall.ActiveForwardProxyPoliciesType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *VssNetworkConfiguration_NoGlobalNetwork) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&VssNetworkConfiguration_NoGlobalNetwork{`,
		`NoGlobalNetwork:` + strings.Replace(fmt.Sprintf("%v", this.NoGlobalNetwork), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *VssNetworkConfiguration_GlobalNetworkList) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&VssNetworkConfiguration_GlobalNetworkList{`,
		`GlobalNetworkList:` + strings.Replace(fmt.Sprintf("%v", this.GlobalNetworkList), "GlobalNetworkConnectionListType", "ves_io_schema_views1.GlobalNetworkConnectionListType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *VssNetworkConfiguration_ForwardProxyAllowAll) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&VssNetworkConfiguration_ForwardProxyAllowAll{`,
		`ForwardProxyAllowAll:` + strings.Replace(fmt.Sprintf("%v", this.ForwardProxyAllowAll), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *VssStorageConfiguration) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&VssStorageConfiguration{`,
		`StorageInterfaceChoice:` + fmt.Sprintf("%v", this.StorageInterfaceChoice) + `,`,
		`StorageDeviceChoice:` + fmt.Sprintf("%v", this.StorageDeviceChoice) + `,`,
		`StorageClassChoice:` + fmt.Sprintf("%v", this.StorageClassChoice) + `,`,
		`StaticRouteChoice:` + fmt.Sprintf("%v", this.StaticRouteChoice) + `,`,
		`}`,
	}, "")
	return s
}
func (this *VssStorageConfiguration_NoStorageInterfaces) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&VssStorageConfiguration_NoStorageInterfaces{`,
		`NoStorageInterfaces:` + strings.Replace(fmt.Sprintf("%v", this.NoStorageInterfaces), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *VssStorageConfiguration_StorageInterfaceList) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&VssStorageConfiguration_StorageInterfaceList{`,
		`StorageInterfaceList:` + strings.Replace(fmt.Sprintf("%v", this.StorageInterfaceList), "StorageInterfaceListType", "StorageInterfaceListType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *VssStorageConfiguration_NoStorageDevice) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&VssStorageConfiguration_NoStorageDevice{`,
		`NoStorageDevice:` + strings.Replace(fmt.Sprintf("%v", this.NoStorageDevice), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *VssStorageConfiguration_StorageDeviceList) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&VssStorageConfiguration_StorageDeviceList{`,
		`StorageDeviceList:` + strings.Replace(fmt.Sprintf("%v", this.StorageDeviceList), "FleetStorageDeviceListType", "ves_io_schema_fleet.FleetStorageDeviceListType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *VssStorageConfiguration_DefaultStorageClass) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&VssStorageConfiguration_DefaultStorageClass{`,
		`DefaultStorageClass:` + strings.Replace(fmt.Sprintf("%v", this.DefaultStorageClass), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *VssStorageConfiguration_StorageClassList) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&VssStorageConfiguration_StorageClassList{`,
		`StorageClassList:` + strings.Replace(fmt.Sprintf("%v", this.StorageClassList), "FleetStorageClassListType", "ves_io_schema_fleet.FleetStorageClassListType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *VssStorageConfiguration_NoStaticRoutes) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&VssStorageConfiguration_NoStaticRoutes{`,
		`NoStaticRoutes:` + strings.Replace(fmt.Sprintf("%v", this.NoStaticRoutes), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *VssStorageConfiguration_StaticRoutes) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&VssStorageConfiguration_StaticRoutes{`,
		`StaticRoutes:` + strings.Replace(fmt.Sprintf("%v", this.StaticRoutes), "StaticRoutesListType", "StaticRoutesListType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType{`,
		`VolterraCertifiedHw:` + fmt.Sprintf("%v", this.VolterraCertifiedHw) + `,`,
		`MasterNodes:` + fmt.Sprintf("%v", this.MasterNodes) + `,`,
		`WorkerNodes:` + fmt.Sprintf("%v", this.WorkerNodes) + `,`,
		`VolterraSoftwareVersion:` + fmt.Sprintf("%v", this.VolterraSoftwareVersion) + `,`,
		`OperatingSystemVersion:` + fmt.Sprintf("%v", this.OperatingSystemVersion) + `,`,
		`BondChoice:` + fmt.Sprintf("%v", this.BondChoice) + `,`,
		`NetworkCfgChoice:` + fmt.Sprintf("%v", this.NetworkCfgChoice) + `,`,
		`StorageCfgChoice:` + fmt.Sprintf("%v", this.StorageCfgChoice) + `,`,
		`GpuChoice:` + fmt.Sprintf("%v", this.GpuChoice) + `,`,
		`Address:` + fmt.Sprintf("%v", this.Address) + `,`,
		`Coordinates:` + strings.Replace(fmt.Sprintf("%v", this.Coordinates), "Coordinates", "ves_io_schema_site.Coordinates", 1) + `,`,
		`K8SClusterChoice:` + fmt.Sprintf("%v", this.K8SClusterChoice) + `,`,
		`LogsReceiverChoice:` + fmt.Sprintf("%v", this.LogsReceiverChoice) + `,`,
		`UsbPolicyChoice:` + fmt.Sprintf("%v", this.UsbPolicyChoice) + `,`,
		`ViewInternal:` + strings.Replace(fmt.Sprintf("%v", this.ViewInternal), "ObjectRefType", "ves_io_schema_views.ObjectRefType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_NoBondDevices) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_NoBondDevices{`,
		`NoBondDevices:` + strings.Replace(fmt.Sprintf("%v", this.NoBondDevices), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_BondDeviceList) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_BondDeviceList{`,
		`BondDeviceList:` + strings.Replace(fmt.Sprintf("%v", this.BondDeviceList), "FleetBondDevicesListType", "ves_io_schema_fleet.FleetBondDevicesListType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_DefaultNetworkConfig) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_DefaultNetworkConfig{`,
		`DefaultNetworkConfig:` + strings.Replace(fmt.Sprintf("%v", this.DefaultNetworkConfig), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_CustomNetworkConfig) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_CustomNetworkConfig{`,
		`CustomNetworkConfig:` + strings.Replace(fmt.Sprintf("%v", this.CustomNetworkConfig), "VssNetworkConfiguration", "VssNetworkConfiguration", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_DefaultStorageConfig) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_DefaultStorageConfig{`,
		`DefaultStorageConfig:` + strings.Replace(fmt.Sprintf("%v", this.DefaultStorageConfig), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_CustomStorageConfig) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_CustomStorageConfig{`,
		`CustomStorageConfig:` + strings.Replace(fmt.Sprintf("%v", this.CustomStorageConfig), "VssStorageConfiguration", "VssStorageConfiguration", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_DisableGpu) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_DisableGpu{`,
		`DisableGpu:` + strings.Replace(fmt.Sprintf("%v", this.DisableGpu), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_EnableGpu) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_EnableGpu{`,
		`EnableGpu:` + strings.Replace(fmt.Sprintf("%v", this.EnableGpu), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_NoK8SCluster) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_NoK8SCluster{`,
		`NoK8SCluster:` + strings.Replace(fmt.Sprintf("%v", this.NoK8SCluster), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_K8SCluster) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_K8SCluster{`,
		`K8SCluster:` + strings.Replace(fmt.Sprintf("%v", this.K8SCluster), "ObjectRefType", "ves_io_schema_views.ObjectRefType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_LogsStreamingDisabled) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_LogsStreamingDisabled{`,
		`LogsStreamingDisabled:` + strings.Replace(fmt.Sprintf("%v", this.LogsStreamingDisabled), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_LogReceiver) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_LogReceiver{`,
		`LogReceiver:` + strings.Replace(fmt.Sprintf("%v", this.LogReceiver), "ObjectRefType", "ves_io_schema_views.ObjectRefType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_DenyAllUsb) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_DenyAllUsb{`,
		`DenyAllUsb:` + strings.Replace(fmt.Sprintf("%v", this.DenyAllUsb), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_AllowAllUsb) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_AllowAllUsb{`,
		`AllowAllUsb:` + strings.Replace(fmt.Sprintf("%v", this.AllowAllUsb), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_UsbPolicy) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_UsbPolicy{`,
		`UsbPolicy:` + strings.Replace(fmt.Sprintf("%v", this.UsbPolicy), "ObjectRefType", "ves_io_schema_views.ObjectRefType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType{`,
		`VolterraCertifiedHw:` + fmt.Sprintf("%v", this.VolterraCertifiedHw) + `,`,
		`MasterNodes:` + fmt.Sprintf("%v", this.MasterNodes) + `,`,
		`WorkerNodes:` + fmt.Sprintf("%v", this.WorkerNodes) + `,`,
		`VolterraSoftwareVersion:` + fmt.Sprintf("%v", this.VolterraSoftwareVersion) + `,`,
		`OperatingSystemVersion:` + fmt.Sprintf("%v", this.OperatingSystemVersion) + `,`,
		`BondChoice:` + fmt.Sprintf("%v", this.BondChoice) + `,`,
		`NetworkCfgChoice:` + fmt.Sprintf("%v", this.NetworkCfgChoice) + `,`,
		`StorageCfgChoice:` + fmt.Sprintf("%v", this.StorageCfgChoice) + `,`,
		`GpuChoice:` + fmt.Sprintf("%v", this.GpuChoice) + `,`,
		`Address:` + fmt.Sprintf("%v", this.Address) + `,`,
		`Coordinates:` + strings.Replace(fmt.Sprintf("%v", this.Coordinates), "Coordinates", "ves_io_schema_site.Coordinates", 1) + `,`,
		`K8SClusterChoice:` + fmt.Sprintf("%v", this.K8SClusterChoice) + `,`,
		`LogsReceiverChoice:` + fmt.Sprintf("%v", this.LogsReceiverChoice) + `,`,
		`UsbPolicyChoice:` + fmt.Sprintf("%v", this.UsbPolicyChoice) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_NoBondDevices) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_NoBondDevices{`,
		`NoBondDevices:` + strings.Replace(fmt.Sprintf("%v", this.NoBondDevices), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_BondDeviceList) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_BondDeviceList{`,
		`BondDeviceList:` + strings.Replace(fmt.Sprintf("%v", this.BondDeviceList), "FleetBondDevicesListType", "ves_io_schema_fleet.FleetBondDevicesListType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_DefaultNetworkConfig) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_DefaultNetworkConfig{`,
		`DefaultNetworkConfig:` + strings.Replace(fmt.Sprintf("%v", this.DefaultNetworkConfig), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_CustomNetworkConfig) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_CustomNetworkConfig{`,
		`CustomNetworkConfig:` + strings.Replace(fmt.Sprintf("%v", this.CustomNetworkConfig), "VssNetworkConfiguration", "VssNetworkConfiguration", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_DefaultStorageConfig) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_DefaultStorageConfig{`,
		`DefaultStorageConfig:` + strings.Replace(fmt.Sprintf("%v", this.DefaultStorageConfig), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_CustomStorageConfig) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_CustomStorageConfig{`,
		`CustomStorageConfig:` + strings.Replace(fmt.Sprintf("%v", this.CustomStorageConfig), "VssStorageConfiguration", "VssStorageConfiguration", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_DisableGpu) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_DisableGpu{`,
		`DisableGpu:` + strings.Replace(fmt.Sprintf("%v", this.DisableGpu), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_EnableGpu) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_EnableGpu{`,
		`EnableGpu:` + strings.Replace(fmt.Sprintf("%v", this.EnableGpu), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_NoK8SCluster) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_NoK8SCluster{`,
		`NoK8SCluster:` + strings.Replace(fmt.Sprintf("%v", this.NoK8SCluster), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_K8SCluster) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_K8SCluster{`,
		`K8SCluster:` + strings.Replace(fmt.Sprintf("%v", this.K8SCluster), "ObjectRefType", "ves_io_schema_views.ObjectRefType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_LogsStreamingDisabled) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_LogsStreamingDisabled{`,
		`LogsStreamingDisabled:` + strings.Replace(fmt.Sprintf("%v", this.LogsStreamingDisabled), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_LogReceiver) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_LogReceiver{`,
		`LogReceiver:` + strings.Replace(fmt.Sprintf("%v", this.LogReceiver), "ObjectRefType", "ves_io_schema_views.ObjectRefType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_DenyAllUsb) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_DenyAllUsb{`,
		`DenyAllUsb:` + strings.Replace(fmt.Sprintf("%v", this.DenyAllUsb), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_AllowAllUsb) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_AllowAllUsb{`,
		`AllowAllUsb:` + strings.Replace(fmt.Sprintf("%v", this.AllowAllUsb), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_UsbPolicy) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_UsbPolicy{`,
		`UsbPolicy:` + strings.Replace(fmt.Sprintf("%v", this.UsbPolicy), "ObjectRefType", "ves_io_schema_views.ObjectRefType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType{`,
		`VolterraCertifiedHw:` + fmt.Sprintf("%v", this.VolterraCertifiedHw) + `,`,
		`MasterNodes:` + fmt.Sprintf("%v", this.MasterNodes) + `,`,
		`WorkerNodes:` + fmt.Sprintf("%v", this.WorkerNodes) + `,`,
		`VolterraSoftwareVersion:` + fmt.Sprintf("%v", this.VolterraSoftwareVersion) + `,`,
		`OperatingSystemVersion:` + fmt.Sprintf("%v", this.OperatingSystemVersion) + `,`,
		`BondChoice:` + fmt.Sprintf("%v", this.BondChoice) + `,`,
		`NetworkCfgChoice:` + fmt.Sprintf("%v", this.NetworkCfgChoice) + `,`,
		`StorageCfgChoice:` + fmt.Sprintf("%v", this.StorageCfgChoice) + `,`,
		`GpuChoice:` + fmt.Sprintf("%v", this.GpuChoice) + `,`,
		`Address:` + fmt.Sprintf("%v", this.Address) + `,`,
		`Coordinates:` + strings.Replace(fmt.Sprintf("%v", this.Coordinates), "Coordinates", "ves_io_schema_site.Coordinates", 1) + `,`,
		`K8SClusterChoice:` + fmt.Sprintf("%v", this.K8SClusterChoice) + `,`,
		`LogsReceiverChoice:` + fmt.Sprintf("%v", this.LogsReceiverChoice) + `,`,
		`UsbPolicyChoice:` + fmt.Sprintf("%v", this.UsbPolicyChoice) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_NoBondDevices) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_NoBondDevices{`,
		`NoBondDevices:` + strings.Replace(fmt.Sprintf("%v", this.NoBondDevices), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_BondDeviceList) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_BondDeviceList{`,
		`BondDeviceList:` + strings.Replace(fmt.Sprintf("%v", this.BondDeviceList), "FleetBondDevicesListType", "ves_io_schema_fleet.FleetBondDevicesListType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_DefaultNetworkConfig) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_DefaultNetworkConfig{`,
		`DefaultNetworkConfig:` + strings.Replace(fmt.Sprintf("%v", this.DefaultNetworkConfig), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_CustomNetworkConfig) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_CustomNetworkConfig{`,
		`CustomNetworkConfig:` + strings.Replace(fmt.Sprintf("%v", this.CustomNetworkConfig), "VssNetworkConfiguration", "VssNetworkConfiguration", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_DefaultStorageConfig) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_DefaultStorageConfig{`,
		`DefaultStorageConfig:` + strings.Replace(fmt.Sprintf("%v", this.DefaultStorageConfig), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_CustomStorageConfig) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_CustomStorageConfig{`,
		`CustomStorageConfig:` + strings.Replace(fmt.Sprintf("%v", this.CustomStorageConfig), "VssStorageConfiguration", "VssStorageConfiguration", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_DisableGpu) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_DisableGpu{`,
		`DisableGpu:` + strings.Replace(fmt.Sprintf("%v", this.DisableGpu), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_EnableGpu) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_EnableGpu{`,
		`EnableGpu:` + strings.Replace(fmt.Sprintf("%v", this.EnableGpu), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_NoK8SCluster) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_NoK8SCluster{`,
		`NoK8SCluster:` + strings.Replace(fmt.Sprintf("%v", this.NoK8SCluster), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_K8SCluster) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_K8SCluster{`,
		`K8SCluster:` + strings.Replace(fmt.Sprintf("%v", this.K8SCluster), "ObjectRefType", "ves_io_schema_views.ObjectRefType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_LogsStreamingDisabled) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_LogsStreamingDisabled{`,
		`LogsStreamingDisabled:` + strings.Replace(fmt.Sprintf("%v", this.LogsStreamingDisabled), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_LogReceiver) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_LogReceiver{`,
		`LogReceiver:` + strings.Replace(fmt.Sprintf("%v", this.LogReceiver), "ObjectRefType", "ves_io_schema_views.ObjectRefType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_DenyAllUsb) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_DenyAllUsb{`,
		`DenyAllUsb:` + strings.Replace(fmt.Sprintf("%v", this.DenyAllUsb), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_AllowAllUsb) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_AllowAllUsb{`,
		`AllowAllUsb:` + strings.Replace(fmt.Sprintf("%v", this.AllowAllUsb), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_UsbPolicy) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_UsbPolicy{`,
		`UsbPolicy:` + strings.Replace(fmt.Sprintf("%v", this.UsbPolicy), "ObjectRefType", "ves_io_schema_views.ObjectRefType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType{`,
		`VolterraCertifiedHw:` + fmt.Sprintf("%v", this.VolterraCertifiedHw) + `,`,
		`MasterNodes:` + fmt.Sprintf("%v", this.MasterNodes) + `,`,
		`WorkerNodes:` + fmt.Sprintf("%v", this.WorkerNodes) + `,`,
		`VolterraSoftwareVersion:` + fmt.Sprintf("%v", this.VolterraSoftwareVersion) + `,`,
		`OperatingSystemVersion:` + fmt.Sprintf("%v", this.OperatingSystemVersion) + `,`,
		`BondChoice:` + fmt.Sprintf("%v", this.BondChoice) + `,`,
		`NetworkCfgChoice:` + fmt.Sprintf("%v", this.NetworkCfgChoice) + `,`,
		`StorageCfgChoice:` + fmt.Sprintf("%v", this.StorageCfgChoice) + `,`,
		`GpuChoice:` + fmt.Sprintf("%v", this.GpuChoice) + `,`,
		`Address:` + fmt.Sprintf("%v", this.Address) + `,`,
		`Coordinates:` + strings.Replace(fmt.Sprintf("%v", this.Coordinates), "Coordinates", "ves_io_schema_site.Coordinates", 1) + `,`,
		`K8SClusterChoice:` + fmt.Sprintf("%v", this.K8SClusterChoice) + `,`,
		`LogsReceiverChoice:` + fmt.Sprintf("%v", this.LogsReceiverChoice) + `,`,
		`UsbPolicyChoice:` + fmt.Sprintf("%v", this.UsbPolicyChoice) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_NoBondDevices) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_NoBondDevices{`,
		`NoBondDevices:` + strings.Replace(fmt.Sprintf("%v", this.NoBondDevices), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_BondDeviceList) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_BondDeviceList{`,
		`BondDeviceList:` + strings.Replace(fmt.Sprintf("%v", this.BondDeviceList), "FleetBondDevicesListType", "ves_io_schema_fleet.FleetBondDevicesListType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_DefaultNetworkConfig) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_DefaultNetworkConfig{`,
		`DefaultNetworkConfig:` + strings.Replace(fmt.Sprintf("%v", this.DefaultNetworkConfig), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_CustomNetworkConfig) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_CustomNetworkConfig{`,
		`CustomNetworkConfig:` + strings.Replace(fmt.Sprintf("%v", this.CustomNetworkConfig), "VssNetworkConfiguration", "VssNetworkConfiguration", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_DefaultStorageConfig) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_DefaultStorageConfig{`,
		`DefaultStorageConfig:` + strings.Replace(fmt.Sprintf("%v", this.DefaultStorageConfig), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_CustomStorageConfig) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_CustomStorageConfig{`,
		`CustomStorageConfig:` + strings.Replace(fmt.Sprintf("%v", this.CustomStorageConfig), "VssStorageConfiguration", "VssStorageConfiguration", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_DisableGpu) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_DisableGpu{`,
		`DisableGpu:` + strings.Replace(fmt.Sprintf("%v", this.DisableGpu), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_EnableGpu) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_EnableGpu{`,
		`EnableGpu:` + strings.Replace(fmt.Sprintf("%v", this.EnableGpu), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_NoK8SCluster) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_NoK8SCluster{`,
		`NoK8SCluster:` + strings.Replace(fmt.Sprintf("%v", this.NoK8SCluster), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_K8SCluster) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_K8SCluster{`,
		`K8SCluster:` + strings.Replace(fmt.Sprintf("%v", this.K8SCluster), "ObjectRefType", "ves_io_schema_views.ObjectRefType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_LogsStreamingDisabled) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_LogsStreamingDisabled{`,
		`LogsStreamingDisabled:` + strings.Replace(fmt.Sprintf("%v", this.LogsStreamingDisabled), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_LogReceiver) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_LogReceiver{`,
		`LogReceiver:` + strings.Replace(fmt.Sprintf("%v", this.LogReceiver), "ObjectRefType", "ves_io_schema_views.ObjectRefType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_DenyAllUsb) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_DenyAllUsb{`,
		`DenyAllUsb:` + strings.Replace(fmt.Sprintf("%v", this.DenyAllUsb), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_AllowAllUsb) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_AllowAllUsb{`,
		`AllowAllUsb:` + strings.Replace(fmt.Sprintf("%v", this.AllowAllUsb), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_UsbPolicy) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_UsbPolicy{`,
		`UsbPolicy:` + strings.Replace(fmt.Sprintf("%v", this.UsbPolicy), "ObjectRefType", "ves_io_schema_views.ObjectRefType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringTypes(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *Interface) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Interface: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Interface: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Labels", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Labels == nil {
				m.Labels = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTypes
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthTypes
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTypes
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthTypes
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipTypes(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthTypes
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Labels[mapkey] = mapvalue
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EthernetInterface", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema_network_interface.EthernetInterfaceType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.InterfaceChoice = &Interface_EthernetInterface{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DedicatedInterface", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema_network_interface.DedicatedInterfaceType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.InterfaceChoice = &Interface_DedicatedInterface{v}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DedicatedManagementInterface", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema_network_interface.DedicatedManagementInterfaceType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.InterfaceChoice = &Interface_DedicatedManagementInterface{v}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TunnelInterface", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema_network_interface.TunnelInterfaceType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.InterfaceChoice = &Interface_TunnelInterface{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InterfaceListType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InterfaceListType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InterfaceListType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Interfaces", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Interfaces = append(m.Interfaces, &Interface{})
			if err := m.Interfaces[len(m.Interfaces)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StorageInterfaceType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StorageInterfaceType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StorageInterfaceType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Labels", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Labels == nil {
				m.Labels = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTypes
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthTypes
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTypes
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthTypes
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipTypes(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthTypes
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Labels[mapkey] = mapvalue
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StorageInterface", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.StorageInterface == nil {
				m.StorageInterface = &ves_io_schema_network_interface.EthernetInterfaceType{}
			}
			if err := m.StorageInterface.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StorageInterfaceListType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StorageInterfaceListType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StorageInterfaceListType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StorageInterfaces", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StorageInterfaces = append(m.StorageInterfaces, &StorageInterfaceType{})
			if err := m.StorageInterfaces[len(m.StorageInterfaces)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StaticRoutesListType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StaticRoutesListType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StaticRoutesListType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StaticRoutes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StaticRoutes = append(m.StaticRoutes, &ves_io_schema_virtual_network.StaticRouteViewType{})
			if err := m.StaticRoutes[len(m.StaticRoutes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VnConfiguration) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VnConfiguration: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VnConfiguration: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Labels", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Labels == nil {
				m.Labels = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTypes
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthTypes
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTypes
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthTypes
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipTypes(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthTypes
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Labels[mapkey] = mapvalue
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoStaticRoutes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.StaticRouteChoice = &VnConfiguration_NoStaticRoutes{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StaticRoutes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &StaticRoutesListType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.StaticRouteChoice = &VnConfiguration_StaticRoutes{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoDcClusterGroup", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.DcClusterGroupChoice = &VnConfiguration_NoDcClusterGroup{v}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DcClusterGroup", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema_views.ObjectRefType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.DcClusterGroupChoice = &VnConfiguration_DcClusterGroup{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GlobalNetworkConnectionType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GlobalNetworkConnectionType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GlobalNetworkConnectionType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SloToGlobalDr", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema_views.GlobalConnectorType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ConnectionChoice = &GlobalNetworkConnectionType_SloToGlobalDr{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisableForwardProxy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ForwardProxyChoice = &GlobalNetworkConnectionType_DisableForwardProxy{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnableForwardProxy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.ForwardProxyConfigType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ForwardProxyChoice = &GlobalNetworkConnectionType_EnableForwardProxy{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GlobalNetworkConnectionListType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GlobalNetworkConnectionListType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GlobalNetworkConnectionListType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GlobalNetworkConnections", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GlobalNetworkConnections = append(m.GlobalNetworkConnections, &GlobalNetworkConnectionType{})
			if err := m.GlobalNetworkConnections[len(m.GlobalNetworkConnections)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VssNetworkConfiguration) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VssNetworkConfiguration: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VssNetworkConfiguration: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.SloChoice = &VssNetworkConfiguration_DefaultConfig{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SloConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &VnConfiguration{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.SloChoice = &VssNetworkConfiguration_SloConfig{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultInterfaceConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.InterfaceChoice = &VssNetworkConfiguration_DefaultInterfaceConfig{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InterfaceList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &InterfaceListType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.InterfaceChoice = &VssNetworkConfiguration_InterfaceList{v}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoNetworkPolicy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.NetworkPolicyChoice = &VssNetworkConfiguration_NoNetworkPolicy{v}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActiveNetworkPolicies", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema_network_firewall.ActiveNetworkPoliciesType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.NetworkPolicyChoice = &VssNetworkConfiguration_ActiveNetworkPolicies{v}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoForwardProxy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ForwardProxyChoice = &VssNetworkConfiguration_NoForwardProxy{v}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActiveForwardProxyPolicies", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema_network_firewall.ActiveForwardProxyPoliciesType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ForwardProxyChoice = &VssNetworkConfiguration_ActiveForwardProxyPolicies{v}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoGlobalNetwork", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.GlobalNetworkChoice = &VssNetworkConfiguration_NoGlobalNetwork{v}
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GlobalNetworkList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema_views1.GlobalNetworkConnectionListType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.GlobalNetworkChoice = &VssNetworkConfiguration_GlobalNetworkList{v}
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutsideVip", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OutsideVip = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutsideNameserver", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OutsideNameserver = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BgpRouterId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BgpRouterId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BgpPeerAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BgpPeerAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 20:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VipVrrpMode", wireType)
			}
			m.VipVrrpMode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VipVrrpMode |= (ves_io_schema4.VipVrrpType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SiteToSiteTunnelIp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SiteToSiteTunnelIp = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 22:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TunnelDeadTimeout", wireType)
			}
			m.TunnelDeadTimeout = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TunnelDeadTimeout |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 23:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ForwardProxyAllowAll", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ForwardProxyChoice = &VssNetworkConfiguration_ForwardProxyAllowAll{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VssStorageConfiguration) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VssStorageConfiguration: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VssStorageConfiguration: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoStorageInterfaces", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.StorageInterfaceChoice = &VssStorageConfiguration_NoStorageInterfaces{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StorageInterfaceList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &StorageInterfaceListType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.StorageInterfaceChoice = &VssStorageConfiguration_StorageInterfaceList{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoStorageDevice", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.StorageDeviceChoice = &VssStorageConfiguration_NoStorageDevice{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StorageDeviceList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema_fleet.FleetStorageDeviceListType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.StorageDeviceChoice = &VssStorageConfiguration_StorageDeviceList{v}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultStorageClass", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.StorageClassChoice = &VssStorageConfiguration_DefaultStorageClass{v}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StorageClassList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema_fleet.FleetStorageClassListType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.StorageClassChoice = &VssStorageConfiguration_StorageClassList{v}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoStaticRoutes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.StaticRouteChoice = &VssStorageConfiguration_NoStaticRoutes{v}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StaticRoutes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &StaticRoutesListType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.StaticRouteChoice = &VssStorageConfiguration_StaticRoutes{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GlobalSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GlobalSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GlobalSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VolterraCertifiedHw", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VolterraCertifiedHw = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MasterNodes", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MasterNodes = append(m.MasterNodes, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkerNodes", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WorkerNodes = append(m.WorkerNodes, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VolterraSoftwareVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VolterraSoftwareVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperatingSystemVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OperatingSystemVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoBondDevices", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.BondChoice = &GlobalSpecType_NoBondDevices{v}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BondDeviceList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema_fleet.FleetBondDevicesListType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.BondChoice = &GlobalSpecType_BondDeviceList{v}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultNetworkConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.NetworkCfgChoice = &GlobalSpecType_DefaultNetworkConfig{v}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CustomNetworkConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &VssNetworkConfiguration{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.NetworkCfgChoice = &GlobalSpecType_CustomNetworkConfig{v}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultStorageConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.StorageCfgChoice = &GlobalSpecType_DefaultStorageConfig{v}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CustomStorageConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &VssStorageConfiguration{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.StorageCfgChoice = &GlobalSpecType_CustomStorageConfig{v}
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisableGpu", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.GpuChoice = &GlobalSpecType_DisableGpu{v}
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnableGpu", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.GpuChoice = &GlobalSpecType_EnableGpu{v}
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Coordinates", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Coordinates == nil {
				m.Coordinates = &ves_io_schema_site.Coordinates{}
			}
			if err := m.Coordinates.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoK8SCluster", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.K8SClusterChoice = &GlobalSpecType_NoK8SCluster{v}
			iNdEx = postIndex
		case 22:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field K8SCluster", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema_views.ObjectRefType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.K8SClusterChoice = &GlobalSpecType_K8SCluster{v}
			iNdEx = postIndex
		case 24:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LogsStreamingDisabled", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.LogsReceiverChoice = &GlobalSpecType_LogsStreamingDisabled{v}
			iNdEx = postIndex
		case 25:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LogReceiver", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema_views.ObjectRefType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.LogsReceiverChoice = &GlobalSpecType_LogReceiver{v}
			iNdEx = postIndex
		case 27:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DenyAllUsb", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.UsbPolicyChoice = &GlobalSpecType_DenyAllUsb{v}
			iNdEx = postIndex
		case 28:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllowAllUsb", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.UsbPolicyChoice = &GlobalSpecType_AllowAllUsb{v}
			iNdEx = postIndex
		case 29:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UsbPolicy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema_views.ObjectRefType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.UsbPolicyChoice = &GlobalSpecType_UsbPolicy{v}
			iNdEx = postIndex
		case 1000:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ViewInternal", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ViewInternal == nil {
				m.ViewInternal = &ves_io_schema_views.ObjectRefType{}
			}
			if err := m.ViewInternal.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VolterraCertifiedHw", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VolterraCertifiedHw = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MasterNodes", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MasterNodes = append(m.MasterNodes, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkerNodes", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WorkerNodes = append(m.WorkerNodes, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VolterraSoftwareVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VolterraSoftwareVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperatingSystemVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OperatingSystemVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoBondDevices", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.BondChoice = &CreateSpecType_NoBondDevices{v}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BondDeviceList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema_fleet.FleetBondDevicesListType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.BondChoice = &CreateSpecType_BondDeviceList{v}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultNetworkConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.NetworkCfgChoice = &CreateSpecType_DefaultNetworkConfig{v}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CustomNetworkConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &VssNetworkConfiguration{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.NetworkCfgChoice = &CreateSpecType_CustomNetworkConfig{v}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultStorageConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.StorageCfgChoice = &CreateSpecType_DefaultStorageConfig{v}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CustomStorageConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &VssStorageConfiguration{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.StorageCfgChoice = &CreateSpecType_CustomStorageConfig{v}
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisableGpu", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.GpuChoice = &CreateSpecType_DisableGpu{v}
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnableGpu", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.GpuChoice = &CreateSpecType_EnableGpu{v}
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Coordinates", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Coordinates == nil {
				m.Coordinates = &ves_io_schema_site.Coordinates{}
			}
			if err := m.Coordinates.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoK8SCluster", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.K8SClusterChoice = &CreateSpecType_NoK8SCluster{v}
			iNdEx = postIndex
		case 22:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field K8SCluster", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema_views.ObjectRefType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.K8SClusterChoice = &CreateSpecType_K8SCluster{v}
			iNdEx = postIndex
		case 24:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LogsStreamingDisabled", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.LogsReceiverChoice = &CreateSpecType_LogsStreamingDisabled{v}
			iNdEx = postIndex
		case 25:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LogReceiver", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema_views.ObjectRefType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.LogsReceiverChoice = &CreateSpecType_LogReceiver{v}
			iNdEx = postIndex
		case 27:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DenyAllUsb", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.UsbPolicyChoice = &CreateSpecType_DenyAllUsb{v}
			iNdEx = postIndex
		case 28:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllowAllUsb", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.UsbPolicyChoice = &CreateSpecType_AllowAllUsb{v}
			iNdEx = postIndex
		case 29:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UsbPolicy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema_views.ObjectRefType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.UsbPolicyChoice = &CreateSpecType_UsbPolicy{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplaceSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplaceSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplaceSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VolterraCertifiedHw", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VolterraCertifiedHw = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MasterNodes", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MasterNodes = append(m.MasterNodes, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkerNodes", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WorkerNodes = append(m.WorkerNodes, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VolterraSoftwareVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VolterraSoftwareVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperatingSystemVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OperatingSystemVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoBondDevices", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.BondChoice = &ReplaceSpecType_NoBondDevices{v}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BondDeviceList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema_fleet.FleetBondDevicesListType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.BondChoice = &ReplaceSpecType_BondDeviceList{v}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultNetworkConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.NetworkCfgChoice = &ReplaceSpecType_DefaultNetworkConfig{v}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CustomNetworkConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &VssNetworkConfiguration{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.NetworkCfgChoice = &ReplaceSpecType_CustomNetworkConfig{v}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultStorageConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.StorageCfgChoice = &ReplaceSpecType_DefaultStorageConfig{v}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CustomStorageConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &VssStorageConfiguration{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.StorageCfgChoice = &ReplaceSpecType_CustomStorageConfig{v}
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisableGpu", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.GpuChoice = &ReplaceSpecType_DisableGpu{v}
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnableGpu", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.GpuChoice = &ReplaceSpecType_EnableGpu{v}
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Coordinates", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Coordinates == nil {
				m.Coordinates = &ves_io_schema_site.Coordinates{}
			}
			if err := m.Coordinates.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoK8SCluster", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.K8SClusterChoice = &ReplaceSpecType_NoK8SCluster{v}
			iNdEx = postIndex
		case 22:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field K8SCluster", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema_views.ObjectRefType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.K8SClusterChoice = &ReplaceSpecType_K8SCluster{v}
			iNdEx = postIndex
		case 24:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LogsStreamingDisabled", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.LogsReceiverChoice = &ReplaceSpecType_LogsStreamingDisabled{v}
			iNdEx = postIndex
		case 25:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LogReceiver", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema_views.ObjectRefType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.LogsReceiverChoice = &ReplaceSpecType_LogReceiver{v}
			iNdEx = postIndex
		case 27:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DenyAllUsb", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.UsbPolicyChoice = &ReplaceSpecType_DenyAllUsb{v}
			iNdEx = postIndex
		case 28:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllowAllUsb", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.UsbPolicyChoice = &ReplaceSpecType_AllowAllUsb{v}
			iNdEx = postIndex
		case 29:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UsbPolicy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema_views.ObjectRefType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.UsbPolicyChoice = &ReplaceSpecType_UsbPolicy{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VolterraCertifiedHw", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VolterraCertifiedHw = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MasterNodes", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MasterNodes = append(m.MasterNodes, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkerNodes", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WorkerNodes = append(m.WorkerNodes, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VolterraSoftwareVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VolterraSoftwareVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperatingSystemVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OperatingSystemVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoBondDevices", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.BondChoice = &GetSpecType_NoBondDevices{v}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BondDeviceList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema_fleet.FleetBondDevicesListType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.BondChoice = &GetSpecType_BondDeviceList{v}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultNetworkConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.NetworkCfgChoice = &GetSpecType_DefaultNetworkConfig{v}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CustomNetworkConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &VssNetworkConfiguration{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.NetworkCfgChoice = &GetSpecType_CustomNetworkConfig{v}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultStorageConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.StorageCfgChoice = &GetSpecType_DefaultStorageConfig{v}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CustomStorageConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &VssStorageConfiguration{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.StorageCfgChoice = &GetSpecType_CustomStorageConfig{v}
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisableGpu", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.GpuChoice = &GetSpecType_DisableGpu{v}
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnableGpu", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.GpuChoice = &GetSpecType_EnableGpu{v}
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Coordinates", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Coordinates == nil {
				m.Coordinates = &ves_io_schema_site.Coordinates{}
			}
			if err := m.Coordinates.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoK8SCluster", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.K8SClusterChoice = &GetSpecType_NoK8SCluster{v}
			iNdEx = postIndex
		case 22:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field K8SCluster", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema_views.ObjectRefType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.K8SClusterChoice = &GetSpecType_K8SCluster{v}
			iNdEx = postIndex
		case 24:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LogsStreamingDisabled", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.LogsReceiverChoice = &GetSpecType_LogsStreamingDisabled{v}
			iNdEx = postIndex
		case 25:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LogReceiver", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema_views.ObjectRefType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.LogsReceiverChoice = &GetSpecType_LogReceiver{v}
			iNdEx = postIndex
		case 27:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DenyAllUsb", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.UsbPolicyChoice = &GetSpecType_DenyAllUsb{v}
			iNdEx = postIndex
		case 28:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllowAllUsb", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.UsbPolicyChoice = &GetSpecType_AllowAllUsb{v}
			iNdEx = postIndex
		case 29:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UsbPolicy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema_views.ObjectRefType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.UsbPolicyChoice = &GetSpecType_UsbPolicy{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTypes(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthTypes
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipTypes(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthTypes = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTypes   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("ves.io/schema/views/voltstack_site/types.proto", fileDescriptorTypes) }
func init() {
	golang_proto.RegisterFile("ves.io/schema/views/voltstack_site/types.proto", fileDescriptorTypes)
}

var fileDescriptorTypes = []byte{
	// 3435 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x5b, 0x4f, 0x6c, 0x23, 0xd7,
	0x79, 0xd7, 0x23, 0x29, 0x89, 0xfa, 0x28, 0x51, 0xd4, 0x50, 0x94, 0xc6, 0xda, 0x35, 0x57, 0x96,
	0xed, 0x5a, 0x5d, 0x8f, 0xa8, 0x25, 0x25, 0xad, 0xb4, 0x4a, 0xe2, 0x44, 0xb3, 0xb2, 0x2d, 0x33,
	0xb6, 0xbb, 0x98, 0xdd, 0x2c, 0x92, 0xa0, 0xc8, 0x60, 0xc8, 0x79, 0xe2, 0x4e, 0x34, 0x9c, 0x61,
	0x66, 0x86, 0x54, 0xd4, 0x62, 0x01, 0x63, 0x0b, 0xb4, 0x40, 0x7b, 0x29, 0x9c, 0x43, 0x01, 0x5f,
	0x9a, 0x02, 0x41, 0x91, 0xee, 0xa5, 0xd7, 0x22, 0x4c, 0x01, 0x61, 0x81, 0x02, 0x41, 0x4f, 0x3a,
	0xf4, 0x90, 0x16, 0x2d, 0x10, 0x33, 0x97, 0x6d, 0x4f, 0x3e, 0x1a, 0x7b, 0x28, 0x8a, 0xf7, 0xe6,
	0xcd, 0x70, 0x66, 0x38, 0x94, 0xb8, 0xeb, 0xf5, 0xa5, 0xd0, 0x45, 0x22, 0xdf, 0xfb, 0x7d, 0x7f,
	0xde, 0x7b, 0xdf, 0xfb, 0x7e, 0xdf, 0xf7, 0x00, 0x42, 0xa9, 0x83, 0xed, 0x92, 0x66, 0xae, 0xdb,
	0xf5, 0x07, 0xb8, 0xa9, 0xac, 0x77, 0x34, 0x7c, 0x6c, 0xaf, 0x77, 0x4c, 0xdd, 0xb1, 0x1d, 0xa5,
	0x7e, 0x24, 0xdb, 0x9a, 0x83, 0xd7, 0x9d, 0x93, 0x16, 0xb6, 0x4b, 0x2d, 0xcb, 0x74, 0x4c, 0x6e,
	0xc5, 0xc5, 0x97, 0x5c, 0x7c, 0x89, 0xe2, 0x4b, 0x61, 0xfc, 0xd2, 0x5a, 0x43, 0x73, 0x1e, 0xb4,
	0x6b, 0xa5, 0xba, 0xd9, 0x5c, 0x6f, 0x98, 0x0d, 0x73, 0x9d, 0x8a, 0xd6, 0xda, 0x87, 0xf4, 0x1b,
	0xfd, 0x42, 0x3f, 0xb9, 0x2a, 0x97, 0xae, 0x85, 0x5d, 0x38, 0xd4, 0x31, 0x76, 0x82, 0x36, 0x97,
	0xae, 0x87, 0x01, 0x06, 0x76, 0x8e, 0x4d, 0xeb, 0x48, 0x3e, 0xd4, 0x2c, 0x7c, 0xac, 0xe8, 0x7a,
	0x08, 0xfb, 0x76, 0x3c, 0x56, 0x33, 0x1c, 0x6c, 0x1d, 0x2a, 0xf5, 0xd0, 0x62, 0x96, 0xae, 0x84,
	0xc1, 0x66, 0xcb, 0xd1, 0x4c, 0xc3, 0x9b, 0x2c, 0x86, 0x27, 0xa3, 0x3b, 0xb1, 0xf4, 0x4a, 0x78,
	0x3e, 0x38, 0x75, 0x35, 0xb2, 0xa9, 0x8a, 0xae, 0xa9, 0x8a, 0x83, 0xd9, 0xec, 0xf2, 0xe0, 0x96,
	0xcb, 0x61, 0xd3, 0x6f, 0xc4, 0x1d, 0x0a, 0x71, 0x40, 0x0e, 0x5a, 0xb9, 0x16, 0x87, 0x0a, 0x02,
	0xfe, 0x30, 0x0a, 0xb0, 0x9c, 0xb6, 0xa2, 0xcb, 0x6c, 0x4f, 0x82, 0xd0, 0x95, 0x5f, 0x4c, 0xc0,
	0xd4, 0x07, 0xde, 0x1e, 0x71, 0x02, 0x64, 0x54, 0x6c, 0xd7, 0x2d, 0x8d, 0x7a, 0xc5, 0xa3, 0x65,
	0xb4, 0x3a, 0x25, 0xc2, 0xaf, 0xfe, 0xfb, 0x34, 0x39, 0x6e, 0x25, 0xf9, 0x4f, 0x12, 0x52, 0x70,
	0x9a, 0xc3, 0x30, 0xa1, 0x2b, 0x35, 0xac, 0xdb, 0x7c, 0x62, 0x39, 0xb9, 0x9a, 0xa9, 0xdc, 0x2a,
	0x5d, 0x1c, 0x23, 0x25, 0xdf, 0x58, 0xe9, 0x43, 0x2a, 0xfb, 0xae, 0xe1, 0x58, 0x27, 0x22, 0xf7,
	0xd9, 0xaf, 0x51, 0x12, 0x10, 0xea, 0xfd, 0xee, 0x5f, 0x92, 0x13, 0x7f, 0xf9, 0x6b, 0x94, 0x48,
	0x8f, 0x49, 0x4c, 0x39, 0xd7, 0x04, 0x0e, 0x3b, 0x0f, 0xb0, 0x65, 0x60, 0xa7, 0x7f, 0x9c, 0xfc,
	0xf8, 0x32, 0x5a, 0xcd, 0x54, 0x6e, 0x46, 0x4c, 0x0e, 0x1c, 0x7b, 0xe9, 0x5d, 0x26, 0xea, 0xdb,
	0xbd, 0x77, 0xd2, 0xc2, 0x62, 0xea, 0xac, 0x8b, 0xd0, 0xc1, 0x98, 0x34, 0x87, 0xa3, 0xd3, 0xdc,
	0x8f, 0x21, 0xaf, 0x62, 0x55, 0xab, 0x2b, 0x0e, 0x56, 0x03, 0xf6, 0x26, 0xa8, 0xbd, 0xed, 0x0b,
	0xed, 0xed, 0x7b, 0xb2, 0x21, 0x83, 0x07, 0x63, 0x12, 0xa7, 0x0e, 0xcc, 0x70, 0x3f, 0x43, 0x50,
	0xec, 0x1b, 0x6b, 0x2a, 0x86, 0xd2, 0xc0, 0x4d, 0x6c, 0x04, 0xd7, 0x39, 0x49, 0xed, 0xee, 0x8d,
	0x6e, 0xf7, 0x23, 0x5f, 0x4b, 0x78, 0xc9, 0xe9, 0xd3, 0x2e, 0x42, 0x6c, 0xd9, 0x57, 0xd5, 0x73,
	0xd0, 0xdc, 0x11, 0xe4, 0x9c, 0xb6, 0x61, 0x60, 0x3d, 0xe0, 0x46, 0x9a, 0xba, 0xb1, 0x79, 0xa1,
	0x1b, 0xf7, 0xa8, 0xe0, 0x70, 0xcb, 0xb3, 0x4e, 0x18, 0xb0, 0x74, 0x0b, 0x32, 0x81, 0x40, 0xe0,
	0x72, 0x90, 0x3c, 0xc2, 0x27, 0x6e, 0xe4, 0x49, 0xe4, 0x23, 0x37, 0x0f, 0xe3, 0x1d, 0x45, 0x6f,
	0x63, 0x3e, 0x41, 0xc7, 0xdc, 0x2f, 0xbb, 0x89, 0x1d, 0xb4, 0xbb, 0xf9, 0xa4, 0x8b, 0x6e, 0xc0,
	0x2b, 0xc0, 0xf9, 0xda, 0x96, 0x3f, 0xc2, 0x8e, 0xa2, 0x2a, 0x8e, 0xc2, 0x25, 0xcb, 0x42, 0x05,
	0xf2, 0x90, 0xed, 0x4f, 0x11, 0x57, 0x38, 0xb4, 0x21, 0xbe, 0x05, 0x39, 0xdf, 0x5d, 0xb9, 0xfe,
	0xc0, 0xd4, 0xea, 0x98, 0xcb, 0x9f, 0x76, 0xd1, 0xf8, 0x59, 0x17, 0x25, 0x7b, 0x5d, 0x34, 0xb9,
	0x25, 0xdc, 0x14, 0xb6, 0x85, 0x9d, 0x6a, 0x2a, 0x9d, 0xcc, 0xa5, 0xaa, 0xa9, 0x74, 0x2a, 0x37,
	0xbe, 0xf2, 0xe7, 0x08, 0xe6, 0x7c, 0x55, 0x1f, 0x6a, 0xb6, 0x43, 0xb5, 0xfd, 0x04, 0xc0, 0x57,
	0x65, 0xf3, 0x88, 0x5e, 0x82, 0xb5, 0xe7, 0xba, 0x04, 0xe2, 0x0a, 0xd9, 0x17, 0x7a, 0xc1, 0x3e,
	0x45, 0x89, 0xdc, 0xb2, 0xf7, 0x29, 0xed, 0x8f, 0xf1, 0x48, 0x0a, 0x18, 0x59, 0xf9, 0x8b, 0x24,
	0xcc, 0xdf, 0x75, 0x4c, 0x4b, 0x69, 0xe0, 0xd0, 0x26, 0x3f, 0xe7, 0xd5, 0x6d, 0x45, 0xae, 0xee,
	0xfe, 0x28, 0x5e, 0xc7, 0xd9, 0x1d, 0xf9, 0x16, 0xd7, 0x61, 0xce, 0x76, 0xe5, 0x03, 0x51, 0x95,
	0xfc, 0x2a, 0x97, 0x58, 0xca, 0xd9, 0x11, 0x87, 0xbe, 0x4a, 0x30, 0xad, 0x3f, 0xe9, 0xa2, 0xb7,
	0xcf, 0x0b, 0xa6, 0x6c, 0x30, 0x51, 0xa2, 0x8d, 0x95, 0x5f, 0x22, 0xe0, 0xa3, 0x3b, 0xe2, 0x47,
	0xc6, 0x5f, 0x21, 0xe0, 0x06, 0x96, 0xeb, 0x85, 0xc8, 0xce, 0x8b, 0x6e, 0xf6, 0x48, 0xd1, 0x32,
	0x17, 0xdd, 0x15, 0x7b, 0xe5, 0x67, 0x88, 0x04, 0x8d, 0xe2, 0x68, 0x75, 0xc9, 0x6c, 0x3b, 0xd8,
	0xf6, 0xdd, 0xfc, 0x53, 0x98, 0xb1, 0xe9, 0xb8, 0x6c, 0xd1, 0x09, 0xe6, 0x60, 0x65, 0xc0, 0xc1,
	0x10, 0x81, 0x94, 0x02, 0xba, 0xee, 0x6b, 0xf8, 0x38, 0xc6, 0xb5, 0x5c, 0xac, 0x6b, 0xd3, 0x76,
	0xc0, 0x89, 0x95, 0x27, 0xe3, 0x30, 0x7b, 0xdf, 0xb8, 0x6d, 0x1a, 0x87, 0x5a, 0xa3, 0x6d, 0x29,
	0x34, 0x2e, 0x8f, 0xfc, 0xb8, 0x74, 0x3d, 0xf9, 0xf6, 0x28, 0x5b, 0x15, 0x51, 0x32, 0x72, 0x48,
	0x7e, 0x07, 0x72, 0x86, 0x29, 0x87, 0x37, 0xc0, 0x8d, 0xc8, 0xf9, 0x88, 0xd9, 0x77, 0x9b, 0x2d,
	0xe7, 0xe4, 0x60, 0x4c, 0xca, 0x1a, 0x66, 0x70, 0x1f, 0x39, 0x39, 0xba, 0x7f, 0x29, 0x2a, 0x3e,
	0xe2, 0x01, 0x0f, 0x1e, 0xc8, 0xc1, 0x58, 0x78, 0x8f, 0xb8, 0xef, 0x42, 0xde, 0x30, 0x65, 0xb5,
	0x2e, 0xd7, 0xf5, 0xb6, 0xed, 0x60, 0x4b, 0x6e, 0x58, 0x66, 0xbb, 0xc5, 0xc8, 0x28, 0xd6, 0x4b,
	0x31, 0x45, 0xb2, 0xed, 0x01, 0x92, 0x72, 0x86, 0xb9, 0x5f, 0xbf, 0xed, 0x8a, 0xbd, 0x4f, 0xa4,
	0xb8, 0x06, 0xe4, 0x06, 0x34, 0xb9, 0xf4, 0xb2, 0x12, 0xeb, 0xf0, 0x1f, 0xd5, 0x7e, 0x8c, 0xeb,
	0x8e, 0x84, 0x0f, 0xe9, 0x01, 0x2f, 0x3e, 0x7e, 0x38, 0x20, 0xce, 0x4c, 0x65, 0xd5, 0x90, 0xa1,
	0xaf, 0x72, 0x0d, 0xdf, 0x7b, 0xd2, 0x45, 0x22, 0x14, 0x20, 0xf7, 0xb1, 0x1b, 0x6b, 0xfd, 0x4b,
	0x88, 0xca, 0xc0, 0xc1, 0x8c, 0xbb, 0x6b, 0xcb, 0x6c, 0x7b, 0x50, 0x85, 0x40, 0xf7, 0xeb, 0xcb,
	0xcc, 0xfc, 0xb2, 0xbb, 0x50, 0xb4, 0x25, 0x5e, 0x87, 0x7c, 0xf0, 0x64, 0x82, 0x89, 0x3e, 0xf9,
	0x1b, 0x97, 0x8e, 0x12, 0xbd, 0x2e, 0x4a, 0x6e, 0x08, 0x9b, 0x62, 0x09, 0x16, 0xa3, 0x0b, 0x0b,
	0xe2, 0x27, 0x18, 0x7e, 0x9c, 0xe0, 0x6f, 0x0a, 0xdb, 0xd5, 0x54, 0x3a, 0x91, 0x4b, 0x56, 0x53,
	0xe9, 0xf1, 0xdc, 0xc4, 0xca, 0x3f, 0x26, 0xe1, 0xca, 0xfb, 0xba, 0x59, 0x53, 0x74, 0xe6, 0xf0,
	0x6d, 0xd3, 0x30, 0x70, 0x9d, 0xc4, 0x21, 0xbd, 0x61, 0x77, 0x21, 0x67, 0xeb, 0xa6, 0xec, 0x98,
	0x72, 0x83, 0xa2, 0x64, 0xd5, 0x62, 0x31, 0xb6, 0x1a, 0xbb, 0xe7, 0xae, 0x2e, 0xa6, 0xc4, 0xb4,
	0x58, 0x50, 0xcc, 0xd8, 0xba, 0x79, 0xcf, 0x74, 0xe7, 0xf6, 0x2d, 0xee, 0x0e, 0x14, 0x54, 0xcd,
	0x56, 0x6a, 0x3a, 0x96, 0x0f, 0x4d, 0xeb, 0x58, 0xb1, 0x54, 0xb9, 0x65, 0x99, 0x3f, 0x3d, 0x61,
	0x45, 0xd1, 0x90, 0xb8, 0x78, 0xea, 0x1e, 0x56, 0x9e, 0x89, 0xbe, 0xe7, 0x4a, 0xde, 0x21, 0x82,
	0x9c, 0x0c, 0xf3, 0xd8, 0x88, 0x51, 0xe8, 0x06, 0xda, 0x9b, 0x11, 0x85, 0x41, 0x51, 0xf7, 0xea,
	0xb9, 0x45, 0x15, 0xb3, 0xc0, 0xb9, 0xaa, 0x82, 0xa8, 0xdd, 0xb7, 0x9e, 0x74, 0xd1, 0xeb, 0xf0,
	0x1a, 0x2c, 0xb9, 0x8b, 0x58, 0xf6, 0x8e, 0xb7, 0xbf, 0x5d, 0x36, 0x49, 0xb3, 0x9b, 0xe2, 0x0a,
	0xcc, 0xd5, 0xfd, 0x31, 0xef, 0x18, 0x66, 0x4e, 0xbb, 0x28, 0x41, 0x12, 0x4c, 0xaf, 0x8b, 0xd0,
	0x86, 0xb8, 0x0e, 0xf3, 0x21, 0x37, 0x3d, 0xd8, 0x22, 0xa1, 0x71, 0x76, 0x5a, 0x29, 0x72, 0x5a,
	0x5b, 0xc2, 0xcd, 0x2f, 0xba, 0x08, 0x55, 0x53, 0x69, 0x94, 0x4b, 0x30, 0x2a, 0xef, 0x22, 0xb8,
	0x36, 0xe4, 0xc4, 0xfc, 0xbc, 0xf8, 0x37, 0x08, 0x96, 0xd8, 0x79, 0x79, 0x64, 0xd4, 0x77, 0xea,
	0xb9, 0x72, 0xd3, 0x39, 0xb1, 0x21, 0xf2, 0xa1, 0x94, 0x99, 0xee, 0xa7, 0x4c, 0x89, 0x6f, 0xc4,
	0x8b, 0xd9, 0x2b, 0x9f, 0x65, 0x61, 0xf1, 0xbe, 0x6d, 0xf7, 0x67, 0x02, 0xc9, 0xf3, 0x5b, 0x90,
	0x55, 0xf1, 0xa1, 0xd2, 0xd6, 0x1d, 0xe2, 0xed, 0xa1, 0xd6, 0xa0, 0xd7, 0x6b, 0x78, 0x36, 0x9b,
	0x61, 0x68, 0x57, 0x0b, 0xf7, 0x43, 0x00, 0x12, 0xaa, 0x4c, 0xd4, 0x0d, 0xd2, 0x8d, 0x17, 0xc8,
	0xbf, 0x7e, 0x71, 0x3d, 0x65, 0xeb, 0x26, 0xd3, 0x7d, 0x07, 0x78, 0xcf, 0xb5, 0x40, 0xf1, 0xe5,
	0x5a, 0x3a, 0x27, 0x68, 0x0f, 0x90, 0xb4, 0xc0, 0xe4, 0x7c, 0x3a, 0x63, 0x1a, 0x55, 0xc8, 0xf6,
	0x35, 0xe9, 0x9a, 0xed, 0xb0, 0x58, 0xdd, 0x7a, 0xae, 0xfa, 0xcb, 0x3b, 0x71, 0xe6, 0x33, 0x92,
	0x66, 0xb4, 0xe0, 0x14, 0x27, 0xc2, 0x9c, 0x61, 0xfa, 0x31, 0xd0, 0x32, 0x75, 0xad, 0x7e, 0xc2,
	0x6a, 0xe1, 0x78, 0x87, 0x13, 0xd2, 0xac, 0x61, 0xb2, 0xd3, 0xb9, 0x43, 0xe1, 0x9c, 0x0d, 0x8b,
	0x4a, 0xdd, 0xd1, 0x3a, 0x38, 0xac, 0x47, 0xc3, 0x36, 0x3f, 0x45, 0x35, 0xdd, 0x1a, 0x52, 0xff,
	0x78, 0x7d, 0x6e, 0x69, 0x8f, 0x8a, 0x07, 0xb5, 0x6a, 0xd8, 0xa6, 0xa9, 0x21, 0x21, 0x15, 0x94,
	0xb8, 0x49, 0xc6, 0x6d, 0xe1, 0xcb, 0x9c, 0x39, 0xc7, 0xef, 0x24, 0xe1, 0xb6, 0x50, 0x4a, 0xf8,
	0x33, 0x04, 0xaf, 0x32, 0xbf, 0xc3, 0x97, 0xcd, 0xf7, 0x7e, 0x9a, 0xea, 0x7b, 0x67, 0x34, 0xef,
	0x83, 0xba, 0x43, 0x4b, 0x48, 0x4a, 0x4b, 0xca, 0x50, 0x04, 0x3b, 0x80, 0xf0, 0x5d, 0xe4, 0xb3,
	0xe7, 0x2c, 0x24, 0x45, 0x0e, 0x20, 0x74, 0xeb, 0xb8, 0x43, 0xc8, 0x47, 0x2e, 0x33, 0x8d, 0x97,
	0xd9, 0xd8, 0x96, 0x26, 0x98, 0x86, 0x87, 0x26, 0x88, 0x83, 0x94, 0x34, 0x17, 0xba, 0xa2, 0x34,
	0x58, 0xae, 0x43, 0xc6, 0x6c, 0x3b, 0xb6, 0xa6, 0x62, 0xb9, 0xa3, 0xb5, 0xf8, 0x1c, 0x2d, 0xc1,
	0xa7, 0xc8, 0xb5, 0x4e, 0x59, 0x89, 0x16, 0x92, 0x80, 0xcd, 0xde, 0xd7, 0x5a, 0xdc, 0x0e, 0x70,
	0x1e, 0xd6, 0x50, 0x9a, 0xd8, 0xc6, 0x56, 0x07, 0x5b, 0xfc, 0x5c, 0x54, 0x64, 0x8e, 0x81, 0x3e,
	0xf6, 0x31, 0x5c, 0x19, 0x66, 0x6a, 0x8d, 0x96, 0x4b, 0x6b, 0x96, 0xac, 0xa9, 0x3c, 0x47, 0x85,
	0x48, 0x8a, 0x44, 0x7d, 0xc1, 0x4c, 0xad, 0xd1, 0xa2, 0x24, 0x69, 0x7d, 0xa0, 0x72, 0xdb, 0x90,
	0x23, 0x22, 0x2d, 0x8c, 0x2d, 0x59, 0x51, 0x55, 0x0b, 0xdb, 0x36, 0x9f, 0x8f, 0x93, 0xca, 0xd6,
	0x1a, 0xad, 0x3b, 0x18, 0x5b, 0x7b, 0x2e, 0x88, 0xdb, 0x87, 0x99, 0x8e, 0xd6, 0x92, 0x3b, 0x96,
	0xd5, 0x92, 0x9b, 0xa6, 0x8a, 0xf9, 0xf9, 0x65, 0xb4, 0x9a, 0xad, 0x2c, 0x45, 0xf6, 0xec, 0xbe,
	0xd6, 0xba, 0x6f, 0x59, 0x2d, 0xf7, 0x22, 0x11, 0x8d, 0x52, 0xa6, 0xe3, 0x0e, 0x7d, 0x64, 0xaa,
	0x98, 0xdb, 0x83, 0x05, 0xf7, 0x0d, 0xc3, 0x94, 0xdd, 0xff, 0xac, 0xb9, 0x6c, 0xf1, 0x85, 0x38,
	0x27, 0x38, 0x02, 0xba, 0x67, 0xde, 0x25, 0x7f, 0xdd, 0x66, 0xb1, 0xc5, 0x7d, 0x1b, 0xf2, 0x4c,
	0x4a, 0xc5, 0x8a, 0x2a, 0x3b, 0x5a, 0x13, 0x9b, 0x6d, 0x87, 0x5f, 0x58, 0x46, 0xab, 0x33, 0xe2,
	0xac, 0x27, 0x3f, 0x71, 0x3d, 0xc5, 0xff, 0xfc, 0x7f, 0x41, 0x9a, 0x73, 0xb1, 0xfb, 0x58, 0x51,
	0xef, 0xb9, 0x48, 0xee, 0x23, 0x58, 0x0c, 0x47, 0xb1, 0xa2, 0xeb, 0xe6, 0x31, 0xf9, 0xcb, 0x2f,
	0x9e, 0x7b, 0x2d, 0x3c, 0xa6, 0xa1, 0x61, 0xb9, 0x47, 0x84, 0xf6, 0x74, 0x7d, 0xf7, 0x1f, 0xd0,
	0x93, 0x2e, 0xfa, 0x05, 0x82, 0x65, 0x28, 0x04, 0x98, 0x2c, 0x90, 0x8b, 0x27, 0xcb, 0x42, 0xf9,
	0xa6, 0x50, 0xde, 0x86, 0xab, 0xb0, 0xd8, 0xef, 0x28, 0xc2, 0x18, 0xb4, 0x09, 0x45, 0x58, 0xb8,
	0x8b, 0xeb, 0x6d, 0x4b, 0x73, 0x4e, 0x22, 0x93, 0xa9, 0x6d, 0xa1, 0x7c, 0x03, 0x78, 0xe0, 0x18,
	0x61, 0x06, 0x89, 0x32, 0x51, 0xde, 0x80, 0x55, 0x58, 0xd8, 0x53, 0x3b, 0x8a, 0x51, 0xc7, 0x6a,
	0x44, 0x32, 0x5b, 0xde, 0x11, 0xca, 0xb7, 0x84, 0xca, 0x0d, 0xa1, 0x52, 0x16, 0x2a, 0x15, 0xf1,
	0x55, 0x96, 0xd7, 0x5d, 0x8e, 0x9c, 0x0d, 0x50, 0x69, 0xb2, 0x22, 0x6c, 0x88, 0xaf, 0xc7, 0xf4,
	0xc3, 0xb3, 0xac, 0x1f, 0xf6, 0x48, 0x54, 0x5c, 0x85, 0x42, 0x38, 0x09, 0x06, 0x91, 0xe9, 0xb3,
	0x2e, 0x9a, 0x24, 0xc8, 0x1d, 0xe1, 0x96, 0x28, 0x0c, 0xe1, 0xe6, 0xf9, 0xd3, 0x2e, 0xca, 0x9c,
	0x75, 0x11, 0xf4, 0xba, 0x28, 0x5d, 0x2e, 0x0b, 0x95, 0x0d, 0xa1, 0x5c, 0x11, 0x4b, 0x50, 0x88,
	0xf2, 0xac, 0x0b, 0x2f, 0x9c, 0x76, 0x51, 0x96, 0x51, 0xf9, 0x4c, 0xaf, 0x8b, 0xc6, 0xcb, 0x9b,
	0x42, 0x79, 0x2b, 0x48, 0xe4, 0xd5, 0x54, 0x7a, 0x32, 0x97, 0xae, 0xa6, 0xd2, 0x90, 0xcb, 0x54,
	0x53, 0xe9, 0x99, 0x5c, 0x76, 0xe5, 0xe9, 0x24, 0x25, 0x47, 0xd6, 0x3a, 0x85, 0x77, 0xa5, 0x0a,
	0x05, 0x5a, 0xec, 0x0f, 0xf4, 0x64, 0xe7, 0x73, 0x64, 0x9e, 0x54, 0xfc, 0x91, 0x7e, 0x8a, 0xfb,
	0x13, 0x58, 0x18, 0x50, 0xe4, 0xe6, 0x14, 0x97, 0x35, 0xbf, 0xf9, 0x22, 0x0d, 0x5e, 0x84, 0x8a,
	0xc6, 0xa4, 0x79, 0x3b, 0x06, 0xc1, 0x12, 0xa2, 0x67, 0x5e, 0xc5, 0x1d, 0xcd, 0x7f, 0x0c, 0x1b,
	0x46, 0xa1, 0xb3, 0xfe, 0x1a, 0xf6, 0x29, 0x9c, 0x53, 0x48, 0x71, 0x1c, 0x54, 0x10, 0x24, 0xd0,
	0xf5, 0x88, 0x16, 0xfa, 0x2c, 0x5b, 0x7a, 0x8f, 0xfc, 0x0d, 0x69, 0xf1, 0x73, 0x61, 0xbf, 0xe5,
	0xec, 0x4f, 0x90, 0xed, 0xf6, 0x08, 0xdf, 0x33, 0x55, 0xd7, 0x15, 0xdb, 0xbe, 0x80, 0x3c, 0xf3,
	0x4c, 0xc8, 0x3b, 0x42, 0x22, 0xc2, 0xfd, 0xa8, 0xdf, 0x4b, 0x53, 0x1d, 0xae, 0xb7, 0x2e, 0x77,
	0x96, 0x2e, 0xf4, 0x96, 0xea, 0xf0, 0x9d, 0x4d, 0xf8, 0xaf, 0x06, 0xfe, 0x78, 0x6c, 0x1f, 0x78,
	0x21, 0x57, 0x9e, 0xdf, 0x07, 0x4e, 0x7f, 0xc5, 0x3e, 0x30, 0x19, 0xee, 0x03, 0x77, 0x3f, 0x78,
	0xd2, 0x45, 0xef, 0xc2, 0x9b, 0xf0, 0x2a, 0x5b, 0xd4, 0x72, 0x7c, 0xd6, 0x49, 0x95, 0x49, 0xd2,
	0xb8, 0x0a, 0x05, 0x0f, 0x16, 0x9e, 0x4e, 0x6e, 0x0a, 0xdb, 0xe2, 0xdb, 0xc0, 0x0f, 0x06, 0xef,
	0xb0, 0xe4, 0xb0, 0x0a, 0x85, 0x48, 0xa4, 0x0c, 0xcb, 0x10, 0x6f, 0xc1, 0x7c, 0xf8, 0x90, 0x86,
	0x27, 0x88, 0xd8, 0xce, 0x8c, 0x5c, 0xf8, 0x0c, 0xbb, 0xf0, 0x40, 0x2f, 0x7c, 0x59, 0x28, 0x57,
	0x86, 0x5d, 0xf8, 0x95, 0x7f, 0xcb, 0x43, 0xd6, 0xcd, 0x8c, 0x77, 0x5b, 0xb8, 0x4e, 0x8b, 0xf6,
	0xbf, 0x4d, 0x40, 0x81, 0xec, 0x2d, 0xb6, 0x2c, 0x45, 0xae, 0x63, 0xcb, 0xd1, 0x0e, 0x35, 0xac,
	0xca, 0x0f, 0x8e, 0xd9, 0x63, 0xd8, 0xff, 0xa0, 0xff, 0xe8, 0xa2, 0x6b, 0x9a, 0xdd, 0x59, 0xdb,
	0xb9, 0x71, 0xe3, 0xc6, 0x9a, 0x8d, 0x2d, 0x0d, 0xdb, 0x6b, 0xfe, 0x69, 0xac, 0xd5, 0xcd, 0x66,
	0xcd, 0xfc, 0xb2, 0x8b, 0xc6, 0x08, 0x95, 0xfc, 0x33, 0xb2, 0x7e, 0x85, 0xa4, 0x37, 0x54, 0xac,
	0xeb, 0x6b, 0x58, 0x6d, 0x60, 0xeb, 0xe6, 0xe6, 0x30, 0x11, 0xe9, 0x9a, 0xd6, 0x38, 0x5e, 0xdb,
	0x1a, 0xae, 0x53, 0xba, 0xc8, 0xa8, 0xb4, 0xd0, 0x69, 0x1e, 0x2b, 0x16, 0x1e, 0x18, 0xe7, 0x8e,
	0x3a, 0x4d, 0x32, 0x18, 0x1c, 0x7b, 0xad, 0x81, 0x0d, 0x6c, 0x69, 0xf5, 0x35, 0x5b, 0x33, 0x1a,
	0x3a, 0x5e, 0x33, 0xb4, 0x7a, 0x04, 0xf2, 0xf3, 0x04, 0x92, 0xf2, 0xde, 0x4e, 0xdc, 0xf6, 0x36,
	0xe2, 0xe0, 0x98, 0xdb, 0x85, 0xe9, 0xa6, 0x42, 0x9b, 0x5c, 0xc3, 0x54, 0xb1, 0xfb, 0xf6, 0x37,
	0x25, 0x2e, 0x92, 0xf5, 0xa6, 0x3f, 0x45, 0xe3, 0xd7, 0x93, 0x65, 0x61, 0x23, 0xf0, 0x5c, 0x93,
	0x71, 0xc1, 0x1f, 0x13, 0x2c, 0xb7, 0x03, 0xd3, 0x24, 0xe0, 0x7c, 0xd9, 0x24, 0x95, 0x2d, 0x50,
	0xda, 0xfd, 0x14, 0x25, 0x73, 0x9f, 0x04, 0x1f, 0x7a, 0x32, 0x2e, 0xd4, 0x95, 0xac, 0xc2, 0x2b,
	0xfe, 0xb1, 0xd8, 0xe6, 0xa1, 0x43, 0x56, 0x2a, 0x77, 0xb0, 0x65, 0x6b, 0xa6, 0x41, 0x1f, 0x4c,
	0xa6, 0xc4, 0xac, 0xb7, 0xed, 0xec, 0xad, 0x72, 0xd1, 0x13, 0xb8, 0xcb, 0xf0, 0xf7, 0x5d, 0x38,
	0x77, 0x00, 0xbc, 0xd9, 0xc2, 0x24, 0x9c, 0x8d, 0x86, 0x6c, 0x9f, 0xd8, 0x0e, 0x6e, 0xfa, 0xaa,
	0xc6, 0x63, 0x55, 0x2d, 0xf8, 0xf8, 0xbb, 0x14, 0xee, 0x69, 0x7a, 0x07, 0x66, 0x0d, 0x53, 0xae,
	0x99, 0x86, 0xca, 0x22, 0xdb, 0x66, 0x6f, 0x21, 0x43, 0xbb, 0x25, 0xc3, 0x14, 0x4d, 0x43, 0x75,
	0x73, 0x1c, 0xb9, 0xf2, 0xb9, 0x80, 0xb0, 0x9b, 0x92, 0xdc, 0xdc, 0xb6, 0x36, 0x3c, 0x25, 0x05,
	0x14, 0x0c, 0xa4, 0xfb, 0x6c, 0xcd, 0x9f, 0xa4, 0x59, 0xe9, 0x43, 0xf0, 0x5a, 0x9f, 0x60, 0x0f,
	0x4a, 0x1a, 0x26, 0x38, 0x37, 0xdb, 0xcf, 0x33, 0xa9, 0x50, 0x8b, 0xc8, 0x1d, 0x43, 0xa1, 0xde,
	0xb6, 0x1d, 0xb3, 0x19, 0x55, 0xe6, 0x26, 0xba, 0x6f, 0x8c, 0xd4, 0xe7, 0xc5, 0xf7, 0x9d, 0x7e,
	0xef, 0x94, 0x77, 0x2d, 0x84, 0x0d, 0x07, 0x96, 0xe1, 0xe7, 0x07, 0xd7, 0xf2, 0xcc, 0xb9, 0x4c,
	0x30, 0x1f, 0x61, 0x82, 0xe8, 0x32, 0x22, 0xca, 0xb2, 0xcf, 0xb5, 0x8c, 0xb8, 0x0a, 0x81, 0x2d,
	0x23, 0xe1, 0x2d, 0x23, 0x6c, 0xf8, 0x5b, 0x90, 0xf1, 0x9e, 0x5c, 0x1a, 0xad, 0x36, 0xad, 0xed,
	0xcf, 0x7f, 0x80, 0x4b, 0x4a, 0xc0, 0x04, 0xde, 0x6f, 0xb5, 0xb9, 0x6f, 0x00, 0xb0, 0xf7, 0x15,
	0x22, 0x3d, 0x37, 0x82, 0xf4, 0x94, 0x8b, 0x27, 0xc2, 0x6f, 0xc0, 0xa4, 0x57, 0xb5, 0x73, 0x03,
	0xcf, 0xfa, 0xde, 0x14, 0xb7, 0x07, 0x99, 0xba, 0x69, 0x5a, 0xaa, 0x66, 0x28, 0x84, 0x81, 0xf2,
	0xd4, 0xc6, 0xb5, 0x88, 0x0d, 0xba, 0x01, 0xb7, 0xfb, 0x30, 0x29, 0x28, 0xc3, 0x89, 0x90, 0x35,
	0x4c, 0xf9, 0x68, 0xc7, 0xf6, 0x1e, 0xc3, 0x68, 0x81, 0x7e, 0xbe, 0xa7, 0x29, 0x69, 0xda, 0x30,
	0xbf, 0xbb, 0x63, 0xb3, 0x17, 0x38, 0xee, 0x07, 0x90, 0x09, 0x2a, 0x58, 0x18, 0xf9, 0x7d, 0x91,
	0x7b, 0xfc, 0x30, 0x28, 0xc9, 0x94, 0xc3, 0x51, 0x5f, 0xf5, 0x3d, 0x58, 0xd4, 0xcd, 0x86, 0x2d,
	0xdb, 0x8e, 0x85, 0x95, 0x26, 0xc9, 0x00, 0x6c, 0x87, 0x55, 0x9e, 0xbf, 0xd0, 0xcf, 0x71, 0xa9,
	0x40, 0x84, 0xef, 0x7a, 0xb2, 0xfb, 0x4c, 0x94, 0xfb, 0x63, 0x98, 0xd6, 0xcd, 0x86, 0x6c, 0xe1,
	0x3a, 0xd6, 0x48, 0x0f, 0xf6, 0xca, 0xc8, 0x1e, 0xe7, 0x1f, 0x3f, 0x0c, 0x89, 0x32, 0x3b, 0x19,
	0xdd, 0x6c, 0x48, 0x6c, 0x88, 0x7b, 0x07, 0xa6, 0x55, 0x6c, 0xd0, 0x76, 0x43, 0x6e, 0xdb, 0x35,
	0xfe, 0xca, 0x85, 0x8e, 0x4e, 0x48, 0x40, 0x24, 0xf6, 0x74, 0xfd, 0x7b, 0x76, 0x8d, 0xfb, 0x0e,
	0xcc, 0xf8, 0x9d, 0x0a, 0x55, 0x70, 0x75, 0x04, 0x05, 0x19, 0x85, 0xf5, 0x29, 0x44, 0xc3, 0x7d,
	0x80, 0xb6, 0x5d, 0xf3, 0xde, 0x2e, 0x5e, 0x1d, 0x79, 0x75, 0x73, 0x8f, 0x1f, 0x06, 0x04, 0x99,
	0xe6, 0xa9, 0xb6, 0x5d, 0x63, 0xcf, 0x1a, 0x3f, 0x22, 0xbd, 0x21, 0x3e, 0x76, 0x8b, 0x08, 0x43,
	0xd1, 0xf9, 0xa7, 0xa3, 0xbf, 0x25, 0xcf, 0x3f, 0x7e, 0x18, 0x16, 0x7e, 0x4a, 0x9a, 0xc6, 0x69,
	0x32, 0xf4, 0x01, 0x1b, 0xd9, 0xfd, 0x7b, 0xd2, 0x62, 0xfd, 0x1d, 0x82, 0x3f, 0x80, 0xbc, 0xa8,
	0xd8, 0x5a, 0x3d, 0x52, 0xcb, 0xcc, 0x96, 0x85, 0x8a, 0xb0, 0x21, 0x6c, 0x0a, 0x5b, 0x02, 0xed,
	0x77, 0x60, 0x11, 0x38, 0x92, 0x5e, 0xa3, 0x3d, 0xd6, 0x4d, 0x58, 0x1a, 0xd6, 0xa3, 0xa1, 0x5b,
	0x70, 0x65, 0x58, 0xa9, 0x94, 0x28, 0x57, 0xe0, 0xcd, 0xa1, 0x2d, 0x56, 0xa6, 0xbc, 0x45, 0xfb,
	0xab, 0x0d, 0xa1, 0x72, 0x53, 0x2c, 0x42, 0x86, 0x32, 0x41, 0xa0, 0xe0, 0x99, 0x3c, 0xeb, 0xa2,
	0x09, 0x52, 0xf0, 0x6c, 0x0b, 0x3b, 0xe2, 0x5b, 0xc0, 0xf9, 0x39, 0xf7, 0xb0, 0xe1, 0xc1, 0xe6,
	0x4e, 0xbb, 0x08, 0xce, 0xba, 0x68, 0x8a, 0xd6, 0x3a, 0x37, 0x84, 0x72, 0x99, 0x00, 0xfd, 0xac,
	0x16, 0x06, 0xce, 0x9c, 0x75, 0xd1, 0x34, 0x05, 0x6e, 0x08, 0xe5, 0x4d, 0xf1, 0x75, 0x80, 0x46,
	0xab, 0x1d, 0xac, 0x9c, 0x72, 0xac, 0x72, 0x9a, 0xa5, 0x20, 0xd2, 0x78, 0x8a, 0x6f, 0x03, 0x17,
	0xb8, 0x4e, 0x41, 0x70, 0x81, 0x81, 0xe7, 0x09, 0xd8, 0xed, 0x11, 0xd7, 0x60, 0x9e, 0x5e, 0x2d,
	0x2f, 0x94, 0x83, 0x70, 0x9e, 0xc1, 0x17, 0x29, 0x7c, 0x53, 0xa8, 0x6c, 0x89, 0x6b, 0x30, 0xd7,
	0x0f, 0x0d, 0x0f, 0xcb, 0x9f, 0x76, 0xd1, 0x15, 0x86, 0x5d, 0x22, 0x5d, 0x5e, 0x65, 0x5b, 0xa8,
	0xec, 0x08, 0x95, 0x5b, 0xd5, 0x54, 0x7a, 0x22, 0x37, 0x59, 0x4d, 0xa5, 0xa7, 0x72, 0x50, 0x4d,
	0xa5, 0xa7, 0x73, 0x33, 0xd5, 0x54, 0x7a, 0x36, 0x97, 0xab, 0xa6, 0xd2, 0xf3, 0xb9, 0x42, 0x35,
	0x95, 0x5e, 0xcc, 0xf1, 0xd5, 0x54, 0x7a, 0x29, 0x77, 0x65, 0xe5, 0x3f, 0xb3, 0x90, 0xbd, 0x6d,
	0x61, 0xc5, 0xc1, 0x7e, 0x59, 0x57, 0x39, 0xb7, 0xaa, 0x8b, 0x2f, 0x74, 0x5e, 0x8b, 0x2b, 0x74,
	0xc2, 0xf5, 0xcc, 0x6b, 0x71, 0xf5, 0x4c, 0xb8, 0x70, 0xd9, 0xbd, 0xb0, 0x70, 0x19, 0x5e, 0xa8,
	0xec, 0x5c, 0x54, 0xa8, 0x7c, 0x6d, 0x85, 0xc9, 0x0f, 0x5e, 0x52, 0x61, 0xf2, 0xb5, 0x97, 0x24,
	0x3f, 0xf9, 0xfa, 0x4a, 0x92, 0xff, 0xe7, 0xc5, 0xc8, 0xf6, 0xc8, 0xc5, 0x48, 0xa4, 0x0c, 0xd9,
	0x1a, 0xb5, 0x0c, 0x09, 0x17, 0x20, 0x7c, 0xa4, 0x00, 0x79, 0xa9, 0x45, 0xc7, 0x37, 0x9f, 0xa7,
	0xe8, 0x18, 0x28, 0x37, 0xbe, 0xf7, 0xa2, 0xe5, 0x46, 0x36, 0x5c, 0x6e, 0x44, 0x4a, 0x8d, 0x8f,
	0x5f, 0xa8, 0xd4, 0x18, 0x5e, 0x64, 0x7c, 0xff, 0x85, 0x8b, 0x8c, 0xd9, 0x48, 0x91, 0x11, 0x2d,
	0x30, 0x76, 0x46, 0x2f, 0x30, 0x22, 0xa5, 0xc5, 0xee, 0x73, 0x94, 0x16, 0xd1, 0xa2, 0x42, 0x7a,
	0xc1, 0xa2, 0x62, 0x26, 0x54, 0x54, 0x84, 0x0a, 0x8a, 0xdd, 0xb9, 0x7f, 0x7d, 0x27, 0xd2, 0xd2,
	0x0f, 0x50, 0xeb, 0xa3, 0x67, 0x28, 0x38, 0x20, 0x0a, 0xb1, 0xd4, 0xba, 0xf0, 0xe8, 0x19, 0x8a,
	0x19, 0x27, 0xe8, 0x18, 0x7e, 0xa5, 0xe8, 0xc1, 0x71, 0xf1, 0x6a, 0x88, 0x64, 0xb3, 0x8f, 0x9e,
	0xa1, 0xc0, 0x77, 0xa2, 0x2b, 0x86, 0x5d, 0xa9, 0xae, 0xc1, 0x71, 0xf1, 0xc6, 0x10, 0x7a, 0xe5,
	0x1f, 0x3d, 0x43, 0xb1, 0x33, 0xe2, 0xf5, 0x38, 0x86, 0x2d, 0x3c, 0x7a, 0x86, 0x06, 0x87, 0x9f,
	0x83, 0x5e, 0xff, 0x2b, 0x0b, 0xb3, 0x12, 0x6e, 0xe9, 0x4a, 0xfd, 0x92, 0x5f, 0x2f, 0xf9, 0xf5,
	0x92, 0x5f, 0x2f, 0xf9, 0xf5, 0x92, 0x5f, 0x2f, 0xf9, 0xf5, 0x92, 0x5f, 0x5f, 0x16, 0xbf, 0xfe,
	0x7b, 0x16, 0x32, 0xef, 0x63, 0xe7, 0x92, 0x5b, 0x2f, 0xb9, 0xf5, 0x92, 0x5b, 0x2f, 0xb9, 0xf5,
	0x92, 0x5b, 0x2f, 0xb9, 0xf5, 0x92, 0x5b, 0x5f, 0x0e, 0xb7, 0x8a, 0x9f, 0xa1, 0xb3, 0xcf, 0x8b,
	0x63, 0xbf, 0xfd, 0xbc, 0x38, 0xf6, 0xc5, 0xe7, 0x45, 0xf4, 0xe5, 0xe7, 0x45, 0xf4, 0x49, 0xaf,
	0x88, 0x7e, 0xd9, 0x2b, 0xa2, 0x7f, 0xea, 0x15, 0xd1, 0x69, 0xaf, 0x88, 0x7e, 0xd3, 0x2b, 0xa2,
	0xb3, 0x5e, 0x11, 0xfd, 0xb6, 0x57, 0x44, 0xbf, 0xeb, 0x15, 0xd1, 0xd3, 0x5e, 0x71, 0xec, 0x8b,
	0x5e, 0x11, 0xfd, 0xf5, 0xef, 0x8b, 0x63, 0xa7, 0xbf, 0x2f, 0xa2, 0x1f, 0x7e, 0xbf, 0x61, 0xb6,
	0x8e, 0x1a, 0x25, 0x8f, 0xf7, 0x4a, 0x6d, 0x7b, 0x9d, 0x7e, 0x38, 0x34, 0xad, 0xe6, 0x5a, 0xcb,
	0x32, 0x3b, 0x9a, 0x8a, 0xad, 0x35, 0x6f, 0x7a, 0xbd, 0x55, 0x6b, 0x98, 0xeb, 0xf8, 0xa7, 0x8e,
	0xf7, 0x43, 0xc0, 0xe1, 0xbf, 0x94, 0xac, 0x4d, 0xd0, 0x5f, 0xd3, 0x6d, 0xfc, 0x5f, 0x00, 0x00,
	0x00, 0xff, 0xff, 0xdf, 0xed, 0x34, 0x69, 0x56, 0x39, 0x00, 0x00,
}
