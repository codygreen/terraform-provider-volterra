// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ves.io/schema/views/aws_tgw_site/types.proto

package aws_tgw_site

import proto "github.com/gogo/protobuf/proto"
import golang_proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"
import google_protobuf1 "github.com/gogo/protobuf/types"
import ves_io_schema_network_firewall "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/network_firewall"
import _ "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
import ves_io_schema_site "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/site"
import ves_io_schema4 "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
import _ "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
import _ "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
import ves_io_schema_views1 "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/views"
import ves_io_schema_views "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/views"

import strings "strings"
import reflect "reflect"
import sortkeys "github.com/gogo/protobuf/sortkeys"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// TGW Assigned ASN Type
//
// x-displayName: "TGW Assigned ASN Type"
// Information needed when ASNs are assigned by the user
type TGWAssignedASNType struct {
	// TGW ASN
	//
	// x-displayName: "Enter TGW ASN"
	// x-example: "64512"
	// TGW ASN. Allowed range for 16-bit private ASNs include 64512 to 65534.
	TgwAsn uint32 `protobuf:"varint,1,opt,name=tgw_asn,json=tgwAsn,proto3" json:"tgw_asn,omitempty"`
	// Volterra Site ASN
	//
	// x-displayName: "Enter Volterra Site ASN"
	// x-example: "64500"
	// Volterra Site ASN.
	VolterraSiteAsn uint32 `protobuf:"varint,2,opt,name=volterra_site_asn,json=volterraSiteAsn,proto3" json:"volterra_site_asn,omitempty"`
}

func (m *TGWAssignedASNType) Reset()                    { *m = TGWAssignedASNType{} }
func (*TGWAssignedASNType) ProtoMessage()               {}
func (*TGWAssignedASNType) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{0} }

func (m *TGWAssignedASNType) GetTgwAsn() uint32 {
	if m != nil {
		return m.TgwAsn
	}
	return 0
}

func (m *TGWAssignedASNType) GetVolterraSiteAsn() uint32 {
	if m != nil {
		return m.VolterraSiteAsn
	}
	return 0
}

// Existing TGW Type
//
// x-displayName: "Existing TGW Type"
// Information needed for existing TGW
type ExistingTGWType struct {
	// Existing TGW ID
	//
	// x-displayName: "Existing TGW ID"
	// x-example: "tgw-12345678901234567"
	// Existing TGW ID
	TgwId string `protobuf:"bytes,1,opt,name=tgw_id,json=tgwId,proto3" json:"tgw_id,omitempty"`
	// TGW ASN
	//
	// x-displayName: "Enter TGW ASN"
	// x-example: "64500"
	// TGW ASN.
	TgwAsn uint32 `protobuf:"varint,2,opt,name=tgw_asn,json=tgwAsn,proto3" json:"tgw_asn,omitempty"`
	// Volterra Site ASN
	//
	// x-displayName: "Enter Volterra Site ASN"
	// x-example: "64501"
	// Volterra Site ASN.
	VolterraSiteAsn uint32 `protobuf:"varint,3,opt,name=volterra_site_asn,json=volterraSiteAsn,proto3" json:"volterra_site_asn,omitempty"`
}

func (m *ExistingTGWType) Reset()                    { *m = ExistingTGWType{} }
func (*ExistingTGWType) ProtoMessage()               {}
func (*ExistingTGWType) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{1} }

func (m *ExistingTGWType) GetTgwId() string {
	if m != nil {
		return m.TgwId
	}
	return ""
}

func (m *ExistingTGWType) GetTgwAsn() uint32 {
	if m != nil {
		return m.TgwAsn
	}
	return 0
}

func (m *ExistingTGWType) GetVolterraSiteAsn() uint32 {
	if m != nil {
		return m.VolterraSiteAsn
	}
	return 0
}

type TGWParamsType struct {
	// BGP ASN config
	//
	// x-displayName: "Select BGP ASN"
	// x-required
	// Select BGP ASN config mode
	//
	// Types that are valid to be assigned to AsnChoice:
	//	*TGWParamsType_SystemGenerated
	//	*TGWParamsType_UserAssigned
	AsnChoice isTGWParamsType_AsnChoice `protobuf_oneof:"asn_choice"`
}

func (m *TGWParamsType) Reset()                    { *m = TGWParamsType{} }
func (*TGWParamsType) ProtoMessage()               {}
func (*TGWParamsType) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{2} }

type isTGWParamsType_AsnChoice interface {
	isTGWParamsType_AsnChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type TGWParamsType_SystemGenerated struct {
	SystemGenerated *ves_io_schema4.Empty `protobuf:"bytes,2,opt,name=system_generated,json=systemGenerated,oneof"`
}
type TGWParamsType_UserAssigned struct {
	UserAssigned *TGWAssignedASNType `protobuf:"bytes,3,opt,name=user_assigned,json=userAssigned,oneof"`
}

func (*TGWParamsType_SystemGenerated) isTGWParamsType_AsnChoice() {}
func (*TGWParamsType_UserAssigned) isTGWParamsType_AsnChoice()    {}

func (m *TGWParamsType) GetAsnChoice() isTGWParamsType_AsnChoice {
	if m != nil {
		return m.AsnChoice
	}
	return nil
}

func (m *TGWParamsType) GetSystemGenerated() *ves_io_schema4.Empty {
	if x, ok := m.GetAsnChoice().(*TGWParamsType_SystemGenerated); ok {
		return x.SystemGenerated
	}
	return nil
}

func (m *TGWParamsType) GetUserAssigned() *TGWAssignedASNType {
	if x, ok := m.GetAsnChoice().(*TGWParamsType_UserAssigned); ok {
		return x.UserAssigned
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*TGWParamsType) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _TGWParamsType_OneofMarshaler, _TGWParamsType_OneofUnmarshaler, _TGWParamsType_OneofSizer, []interface{}{
		(*TGWParamsType_SystemGenerated)(nil),
		(*TGWParamsType_UserAssigned)(nil),
	}
}

func _TGWParamsType_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*TGWParamsType)
	// asn_choice
	switch x := m.AsnChoice.(type) {
	case *TGWParamsType_SystemGenerated:
		_ = b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.SystemGenerated); err != nil {
			return err
		}
	case *TGWParamsType_UserAssigned:
		_ = b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.UserAssigned); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("TGWParamsType.AsnChoice has unexpected type %T", x)
	}
	return nil
}

func _TGWParamsType_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*TGWParamsType)
	switch tag {
	case 2: // asn_choice.system_generated
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.AsnChoice = &TGWParamsType_SystemGenerated{msg}
		return true, err
	case 3: // asn_choice.user_assigned
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(TGWAssignedASNType)
		err := b.DecodeMessage(msg)
		m.AsnChoice = &TGWParamsType_UserAssigned{msg}
		return true, err
	default:
		return false, nil
	}
}

func _TGWParamsType_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*TGWParamsType)
	// asn_choice
	switch x := m.AsnChoice.(type) {
	case *TGWParamsType_SystemGenerated:
		s := proto.Size(x.SystemGenerated)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *TGWParamsType_UserAssigned:
		s := proto.Size(x.UserAssigned)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// AWS Service VPC and TGW
//
// x-displayName: "AWS Service VPC and TGW"
// Setup AWS services VPC, transit gateway and site
type ServicesVPCType struct {
	// AWS Region
	//
	// x-displayName: "AWS Region"
	// x-example: "us-east-1"
	// x-required
	// Name for AWS Region.
	AwsRegion string `protobuf:"bytes,1,opt,name=aws_region,json=awsRegion,proto3" json:"aws_region,omitempty"`
	// Choice of existing or new Services VPC
	//
	// x-displayName: "Select Services VPC"
	// x-required
	// Choice of using existing or create new services VPC
	//
	// Types that are valid to be assigned to ServiceVpcChoice:
	//	*ServicesVPCType_NewVpc
	//	*ServicesVPCType_VpcId
	ServiceVpcChoice isServicesVPCType_ServiceVpcChoice `protobuf_oneof:"service_vpc_choice"`
	// TGW
	//
	// x-displayName: "Select Transit Gateway"
	// x-required
	// Choice of using existing TGW or create new TGW
	//
	// Types that are valid to be assigned to TgwChoice:
	//	*ServicesVPCType_NewTgw
	//	*ServicesVPCType_ExistingTgw
	TgwChoice isServicesVPCType_TgwChoice `protobuf_oneof:"tgw_choice"`
	// AWS Certified Hardware
	//
	// x-displayName: "AWS Certified Hardware"
	// x-example: "aws-byol-multi-nic-voltmesh"
	// x-required
	// Name for AWS certified hardware.
	AwsCertifiedHw string `protobuf:"bytes,8,opt,name=aws_certified_hw,json=awsCertifiedHw,proto3" json:"aws_certified_hw,omitempty"`
	// Instance Type
	//
	// x-displayName: "AWS Instance Type for Node"
	// x-example: "a1.xlarge"
	// x-required
	// Select Instance size based on performance needed
	InstanceType string `protobuf:"bytes,9,opt,name=instance_type,json=instanceType,proto3" json:"instance_type,omitempty"`
	// Public SSH key
	//
	// x-displayName: "Public SSH key"
	// x-example: "ssh-rsa AAAAB..."
	// Public SSH key for accessing nodes of the site.
	SshKey string `protobuf:"bytes,10,opt,name=ssh_key,json=sshKey,proto3" json:"ssh_key,omitempty"`
	// Nodes
	//
	// x-displayName: "Ingress/Egress Gateway (two Interface) Nodes in AZ"
	// Only Single AZ or Three AZ(s) nodes are supported currently.
	AzNodes []*ves_io_schema_views1.AWSVPCTwoInterfaceNodeType `protobuf:"bytes,11,rep,name=az_nodes,json=azNodes" json:"az_nodes,omitempty"`
	// Desired Worker Nodes Per AZ
	//
	// x-displayName: "Desired Worker Nodes Per AZ"
	// x-example: "2"
	// Desired Worker Nodes Per AZ. Max limit is up to 21
	NodesPerAz uint32 `protobuf:"varint,12,opt,name=nodes_per_az,json=nodesPerAz,proto3" json:"nodes_per_az,omitempty"`
	// Cloud Disk size
	//
	// x-displayName: "Cloud Disk Size"
	// x-example: "80"
	// Disk size to be used for this instance in GiB. 80 is 80 GiB
	DiskSize uint32 `protobuf:"varint,22,opt,name=disk_size,json=diskSize,proto3" json:"disk_size,omitempty"`
	// Automatic Deployment
	//
	// x-displayName: "Select Automatic or Assisted Deployment"
	// x-required
	// Choice of deploying automatic via volterra or Assisted using volterra generated parameters.
	//
	// Types that are valid to be assigned to Deployment:
	//	*ServicesVPCType_AwsCred
	//	*ServicesVPCType_Assisted
	Deployment isServicesVPCType_Deployment `protobuf_oneof:"deployment"`
}

func (m *ServicesVPCType) Reset()                    { *m = ServicesVPCType{} }
func (*ServicesVPCType) ProtoMessage()               {}
func (*ServicesVPCType) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{3} }

type isServicesVPCType_ServiceVpcChoice interface {
	isServicesVPCType_ServiceVpcChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isServicesVPCType_TgwChoice interface {
	isServicesVPCType_TgwChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isServicesVPCType_Deployment interface {
	isServicesVPCType_Deployment()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type ServicesVPCType_NewVpc struct {
	NewVpc *ves_io_schema_views1.AWSVPCParamsType `protobuf:"bytes,3,opt,name=new_vpc,json=newVpc,oneof"`
}
type ServicesVPCType_VpcId struct {
	VpcId string `protobuf:"bytes,4,opt,name=vpc_id,json=vpcId,proto3,oneof"`
}
type ServicesVPCType_NewTgw struct {
	NewTgw *TGWParamsType `protobuf:"bytes,6,opt,name=new_tgw,json=newTgw,oneof"`
}
type ServicesVPCType_ExistingTgw struct {
	ExistingTgw *ExistingTGWType `protobuf:"bytes,7,opt,name=existing_tgw,json=existingTgw,oneof"`
}
type ServicesVPCType_AwsCred struct {
	AwsCred *ves_io_schema_views.ObjectRefType `protobuf:"bytes,14,opt,name=aws_cred,json=awsCred,oneof"`
}
type ServicesVPCType_Assisted struct {
	Assisted *ves_io_schema4.Empty `protobuf:"bytes,15,opt,name=assisted,oneof"`
}

func (*ServicesVPCType_NewVpc) isServicesVPCType_ServiceVpcChoice() {}
func (*ServicesVPCType_VpcId) isServicesVPCType_ServiceVpcChoice()  {}
func (*ServicesVPCType_NewTgw) isServicesVPCType_TgwChoice()        {}
func (*ServicesVPCType_ExistingTgw) isServicesVPCType_TgwChoice()   {}
func (*ServicesVPCType_AwsCred) isServicesVPCType_Deployment()      {}
func (*ServicesVPCType_Assisted) isServicesVPCType_Deployment()     {}

func (m *ServicesVPCType) GetServiceVpcChoice() isServicesVPCType_ServiceVpcChoice {
	if m != nil {
		return m.ServiceVpcChoice
	}
	return nil
}
func (m *ServicesVPCType) GetTgwChoice() isServicesVPCType_TgwChoice {
	if m != nil {
		return m.TgwChoice
	}
	return nil
}
func (m *ServicesVPCType) GetDeployment() isServicesVPCType_Deployment {
	if m != nil {
		return m.Deployment
	}
	return nil
}

func (m *ServicesVPCType) GetAwsRegion() string {
	if m != nil {
		return m.AwsRegion
	}
	return ""
}

func (m *ServicesVPCType) GetNewVpc() *ves_io_schema_views1.AWSVPCParamsType {
	if x, ok := m.GetServiceVpcChoice().(*ServicesVPCType_NewVpc); ok {
		return x.NewVpc
	}
	return nil
}

func (m *ServicesVPCType) GetVpcId() string {
	if x, ok := m.GetServiceVpcChoice().(*ServicesVPCType_VpcId); ok {
		return x.VpcId
	}
	return ""
}

func (m *ServicesVPCType) GetNewTgw() *TGWParamsType {
	if x, ok := m.GetTgwChoice().(*ServicesVPCType_NewTgw); ok {
		return x.NewTgw
	}
	return nil
}

func (m *ServicesVPCType) GetExistingTgw() *ExistingTGWType {
	if x, ok := m.GetTgwChoice().(*ServicesVPCType_ExistingTgw); ok {
		return x.ExistingTgw
	}
	return nil
}

func (m *ServicesVPCType) GetAwsCertifiedHw() string {
	if m != nil {
		return m.AwsCertifiedHw
	}
	return ""
}

func (m *ServicesVPCType) GetInstanceType() string {
	if m != nil {
		return m.InstanceType
	}
	return ""
}

func (m *ServicesVPCType) GetSshKey() string {
	if m != nil {
		return m.SshKey
	}
	return ""
}

func (m *ServicesVPCType) GetAzNodes() []*ves_io_schema_views1.AWSVPCTwoInterfaceNodeType {
	if m != nil {
		return m.AzNodes
	}
	return nil
}

func (m *ServicesVPCType) GetNodesPerAz() uint32 {
	if m != nil {
		return m.NodesPerAz
	}
	return 0
}

func (m *ServicesVPCType) GetDiskSize() uint32 {
	if m != nil {
		return m.DiskSize
	}
	return 0
}

func (m *ServicesVPCType) GetAwsCred() *ves_io_schema_views.ObjectRefType {
	if x, ok := m.GetDeployment().(*ServicesVPCType_AwsCred); ok {
		return x.AwsCred
	}
	return nil
}

func (m *ServicesVPCType) GetAssisted() *ves_io_schema4.Empty {
	if x, ok := m.GetDeployment().(*ServicesVPCType_Assisted); ok {
		return x.Assisted
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*ServicesVPCType) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _ServicesVPCType_OneofMarshaler, _ServicesVPCType_OneofUnmarshaler, _ServicesVPCType_OneofSizer, []interface{}{
		(*ServicesVPCType_NewVpc)(nil),
		(*ServicesVPCType_VpcId)(nil),
		(*ServicesVPCType_NewTgw)(nil),
		(*ServicesVPCType_ExistingTgw)(nil),
		(*ServicesVPCType_AwsCred)(nil),
		(*ServicesVPCType_Assisted)(nil),
	}
}

func _ServicesVPCType_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*ServicesVPCType)
	// service_vpc_choice
	switch x := m.ServiceVpcChoice.(type) {
	case *ServicesVPCType_NewVpc:
		_ = b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.NewVpc); err != nil {
			return err
		}
	case *ServicesVPCType_VpcId:
		_ = b.EncodeVarint(4<<3 | proto.WireBytes)
		_ = b.EncodeStringBytes(x.VpcId)
	case nil:
	default:
		return fmt.Errorf("ServicesVPCType.ServiceVpcChoice has unexpected type %T", x)
	}
	// tgw_choice
	switch x := m.TgwChoice.(type) {
	case *ServicesVPCType_NewTgw:
		_ = b.EncodeVarint(6<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.NewTgw); err != nil {
			return err
		}
	case *ServicesVPCType_ExistingTgw:
		_ = b.EncodeVarint(7<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ExistingTgw); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("ServicesVPCType.TgwChoice has unexpected type %T", x)
	}
	// deployment
	switch x := m.Deployment.(type) {
	case *ServicesVPCType_AwsCred:
		_ = b.EncodeVarint(14<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.AwsCred); err != nil {
			return err
		}
	case *ServicesVPCType_Assisted:
		_ = b.EncodeVarint(15<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Assisted); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("ServicesVPCType.Deployment has unexpected type %T", x)
	}
	return nil
}

func _ServicesVPCType_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*ServicesVPCType)
	switch tag {
	case 3: // service_vpc_choice.new_vpc
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema_views1.AWSVPCParamsType)
		err := b.DecodeMessage(msg)
		m.ServiceVpcChoice = &ServicesVPCType_NewVpc{msg}
		return true, err
	case 4: // service_vpc_choice.vpc_id
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.ServiceVpcChoice = &ServicesVPCType_VpcId{x}
		return true, err
	case 6: // tgw_choice.new_tgw
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(TGWParamsType)
		err := b.DecodeMessage(msg)
		m.TgwChoice = &ServicesVPCType_NewTgw{msg}
		return true, err
	case 7: // tgw_choice.existing_tgw
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ExistingTGWType)
		err := b.DecodeMessage(msg)
		m.TgwChoice = &ServicesVPCType_ExistingTgw{msg}
		return true, err
	case 14: // deployment.aws_cred
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema_views.ObjectRefType)
		err := b.DecodeMessage(msg)
		m.Deployment = &ServicesVPCType_AwsCred{msg}
		return true, err
	case 15: // deployment.assisted
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.Deployment = &ServicesVPCType_Assisted{msg}
		return true, err
	default:
		return false, nil
	}
}

func _ServicesVPCType_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*ServicesVPCType)
	// service_vpc_choice
	switch x := m.ServiceVpcChoice.(type) {
	case *ServicesVPCType_NewVpc:
		s := proto.Size(x.NewVpc)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ServicesVPCType_VpcId:
		n += proto.SizeVarint(4<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.VpcId)))
		n += len(x.VpcId)
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	// tgw_choice
	switch x := m.TgwChoice.(type) {
	case *ServicesVPCType_NewTgw:
		s := proto.Size(x.NewTgw)
		n += proto.SizeVarint(6<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ServicesVPCType_ExistingTgw:
		s := proto.Size(x.ExistingTgw)
		n += proto.SizeVarint(7<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	// deployment
	switch x := m.Deployment.(type) {
	case *ServicesVPCType_AwsCred:
		s := proto.Size(x.AwsCred)
		n += proto.SizeVarint(14<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ServicesVPCType_Assisted:
		s := proto.Size(x.Assisted)
		n += proto.SizeVarint(15<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// Virtual Network Configuration
//
// x-displayName: "Virtual Network Configuration"
// Virtual Network Configuration
type VnConfiguration struct {
	// Manage Static Routes for Inside Network
	//
	// x-displayName: "Manage Static Routes for Inside Network"
	// x-required
	// Add static routes to inside network. Used to reach indirectly connected subnets.
	//
	// Types that are valid to be assigned to InsideStaticRouteChoice:
	//	*VnConfiguration_NoInsideStaticRoutes
	//	*VnConfiguration_InsideStaticRoutes
	InsideStaticRouteChoice isVnConfiguration_InsideStaticRouteChoice `protobuf_oneof:"inside_static_route_choice"`
	// Manage Static Routes for Outside Network
	//
	// x-displayName: "Manage Static Routes for Outside Network"
	// x-required
	// Add static routes to outside network. Used to reach indirectly connected subnets.
	//
	// Types that are valid to be assigned to OutsideStaticRouteChoice:
	//	*VnConfiguration_NoOutsideStaticRoutes
	//	*VnConfiguration_OutsideStaticRoutes
	OutsideStaticRouteChoice isVnConfiguration_OutsideStaticRouteChoice `protobuf_oneof:"outside_static_route_choice"`
	// Connect to Global Network
	//
	// x-displayName: "Select Global Networks to Connect"
	// x-required
	// Select global networks to connect to inside or outside network
	//
	// Types that are valid to be assigned to GlobalNetworkChoice:
	//	*VnConfiguration_NoGlobalNetwork
	//	*VnConfiguration_GlobalNetworkList
	GlobalNetworkChoice isVnConfiguration_GlobalNetworkChoice `protobuf_oneof:"global_network_choice"`
}

func (m *VnConfiguration) Reset()                    { *m = VnConfiguration{} }
func (*VnConfiguration) ProtoMessage()               {}
func (*VnConfiguration) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{4} }

type isVnConfiguration_InsideStaticRouteChoice interface {
	isVnConfiguration_InsideStaticRouteChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isVnConfiguration_OutsideStaticRouteChoice interface {
	isVnConfiguration_OutsideStaticRouteChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isVnConfiguration_GlobalNetworkChoice interface {
	isVnConfiguration_GlobalNetworkChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type VnConfiguration_NoInsideStaticRoutes struct {
	NoInsideStaticRoutes *ves_io_schema4.Empty `protobuf:"bytes,2,opt,name=no_inside_static_routes,json=noInsideStaticRoutes,oneof"`
}
type VnConfiguration_InsideStaticRoutes struct {
	InsideStaticRoutes *ves_io_schema_views1.SiteStaticRoutesListType `protobuf:"bytes,3,opt,name=inside_static_routes,json=insideStaticRoutes,oneof"`
}
type VnConfiguration_NoOutsideStaticRoutes struct {
	NoOutsideStaticRoutes *ves_io_schema4.Empty `protobuf:"bytes,5,opt,name=no_outside_static_routes,json=noOutsideStaticRoutes,oneof"`
}
type VnConfiguration_OutsideStaticRoutes struct {
	OutsideStaticRoutes *ves_io_schema_views1.SiteStaticRoutesListType `protobuf:"bytes,6,opt,name=outside_static_routes,json=outsideStaticRoutes,oneof"`
}
type VnConfiguration_NoGlobalNetwork struct {
	NoGlobalNetwork *ves_io_schema4.Empty `protobuf:"bytes,8,opt,name=no_global_network,json=noGlobalNetwork,oneof"`
}
type VnConfiguration_GlobalNetworkList struct {
	GlobalNetworkList *ves_io_schema_views1.GlobalNetworkConnectionListType `protobuf:"bytes,9,opt,name=global_network_list,json=globalNetworkList,oneof"`
}

func (*VnConfiguration_NoInsideStaticRoutes) isVnConfiguration_InsideStaticRouteChoice()   {}
func (*VnConfiguration_InsideStaticRoutes) isVnConfiguration_InsideStaticRouteChoice()     {}
func (*VnConfiguration_NoOutsideStaticRoutes) isVnConfiguration_OutsideStaticRouteChoice() {}
func (*VnConfiguration_OutsideStaticRoutes) isVnConfiguration_OutsideStaticRouteChoice()   {}
func (*VnConfiguration_NoGlobalNetwork) isVnConfiguration_GlobalNetworkChoice()            {}
func (*VnConfiguration_GlobalNetworkList) isVnConfiguration_GlobalNetworkChoice()          {}

func (m *VnConfiguration) GetInsideStaticRouteChoice() isVnConfiguration_InsideStaticRouteChoice {
	if m != nil {
		return m.InsideStaticRouteChoice
	}
	return nil
}
func (m *VnConfiguration) GetOutsideStaticRouteChoice() isVnConfiguration_OutsideStaticRouteChoice {
	if m != nil {
		return m.OutsideStaticRouteChoice
	}
	return nil
}
func (m *VnConfiguration) GetGlobalNetworkChoice() isVnConfiguration_GlobalNetworkChoice {
	if m != nil {
		return m.GlobalNetworkChoice
	}
	return nil
}

func (m *VnConfiguration) GetNoInsideStaticRoutes() *ves_io_schema4.Empty {
	if x, ok := m.GetInsideStaticRouteChoice().(*VnConfiguration_NoInsideStaticRoutes); ok {
		return x.NoInsideStaticRoutes
	}
	return nil
}

func (m *VnConfiguration) GetInsideStaticRoutes() *ves_io_schema_views1.SiteStaticRoutesListType {
	if x, ok := m.GetInsideStaticRouteChoice().(*VnConfiguration_InsideStaticRoutes); ok {
		return x.InsideStaticRoutes
	}
	return nil
}

func (m *VnConfiguration) GetNoOutsideStaticRoutes() *ves_io_schema4.Empty {
	if x, ok := m.GetOutsideStaticRouteChoice().(*VnConfiguration_NoOutsideStaticRoutes); ok {
		return x.NoOutsideStaticRoutes
	}
	return nil
}

func (m *VnConfiguration) GetOutsideStaticRoutes() *ves_io_schema_views1.SiteStaticRoutesListType {
	if x, ok := m.GetOutsideStaticRouteChoice().(*VnConfiguration_OutsideStaticRoutes); ok {
		return x.OutsideStaticRoutes
	}
	return nil
}

func (m *VnConfiguration) GetNoGlobalNetwork() *ves_io_schema4.Empty {
	if x, ok := m.GetGlobalNetworkChoice().(*VnConfiguration_NoGlobalNetwork); ok {
		return x.NoGlobalNetwork
	}
	return nil
}

func (m *VnConfiguration) GetGlobalNetworkList() *ves_io_schema_views1.GlobalNetworkConnectionListType {
	if x, ok := m.GetGlobalNetworkChoice().(*VnConfiguration_GlobalNetworkList); ok {
		return x.GlobalNetworkList
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*VnConfiguration) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _VnConfiguration_OneofMarshaler, _VnConfiguration_OneofUnmarshaler, _VnConfiguration_OneofSizer, []interface{}{
		(*VnConfiguration_NoInsideStaticRoutes)(nil),
		(*VnConfiguration_InsideStaticRoutes)(nil),
		(*VnConfiguration_NoOutsideStaticRoutes)(nil),
		(*VnConfiguration_OutsideStaticRoutes)(nil),
		(*VnConfiguration_NoGlobalNetwork)(nil),
		(*VnConfiguration_GlobalNetworkList)(nil),
	}
}

func _VnConfiguration_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*VnConfiguration)
	// inside_static_route_choice
	switch x := m.InsideStaticRouteChoice.(type) {
	case *VnConfiguration_NoInsideStaticRoutes:
		_ = b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.NoInsideStaticRoutes); err != nil {
			return err
		}
	case *VnConfiguration_InsideStaticRoutes:
		_ = b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.InsideStaticRoutes); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("VnConfiguration.InsideStaticRouteChoice has unexpected type %T", x)
	}
	// outside_static_route_choice
	switch x := m.OutsideStaticRouteChoice.(type) {
	case *VnConfiguration_NoOutsideStaticRoutes:
		_ = b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.NoOutsideStaticRoutes); err != nil {
			return err
		}
	case *VnConfiguration_OutsideStaticRoutes:
		_ = b.EncodeVarint(6<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.OutsideStaticRoutes); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("VnConfiguration.OutsideStaticRouteChoice has unexpected type %T", x)
	}
	// global_network_choice
	switch x := m.GlobalNetworkChoice.(type) {
	case *VnConfiguration_NoGlobalNetwork:
		_ = b.EncodeVarint(8<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.NoGlobalNetwork); err != nil {
			return err
		}
	case *VnConfiguration_GlobalNetworkList:
		_ = b.EncodeVarint(9<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.GlobalNetworkList); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("VnConfiguration.GlobalNetworkChoice has unexpected type %T", x)
	}
	return nil
}

func _VnConfiguration_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*VnConfiguration)
	switch tag {
	case 2: // inside_static_route_choice.no_inside_static_routes
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.InsideStaticRouteChoice = &VnConfiguration_NoInsideStaticRoutes{msg}
		return true, err
	case 3: // inside_static_route_choice.inside_static_routes
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema_views1.SiteStaticRoutesListType)
		err := b.DecodeMessage(msg)
		m.InsideStaticRouteChoice = &VnConfiguration_InsideStaticRoutes{msg}
		return true, err
	case 5: // outside_static_route_choice.no_outside_static_routes
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.OutsideStaticRouteChoice = &VnConfiguration_NoOutsideStaticRoutes{msg}
		return true, err
	case 6: // outside_static_route_choice.outside_static_routes
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema_views1.SiteStaticRoutesListType)
		err := b.DecodeMessage(msg)
		m.OutsideStaticRouteChoice = &VnConfiguration_OutsideStaticRoutes{msg}
		return true, err
	case 8: // global_network_choice.no_global_network
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.GlobalNetworkChoice = &VnConfiguration_NoGlobalNetwork{msg}
		return true, err
	case 9: // global_network_choice.global_network_list
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema_views1.GlobalNetworkConnectionListType)
		err := b.DecodeMessage(msg)
		m.GlobalNetworkChoice = &VnConfiguration_GlobalNetworkList{msg}
		return true, err
	default:
		return false, nil
	}
}

func _VnConfiguration_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*VnConfiguration)
	// inside_static_route_choice
	switch x := m.InsideStaticRouteChoice.(type) {
	case *VnConfiguration_NoInsideStaticRoutes:
		s := proto.Size(x.NoInsideStaticRoutes)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *VnConfiguration_InsideStaticRoutes:
		s := proto.Size(x.InsideStaticRoutes)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	// outside_static_route_choice
	switch x := m.OutsideStaticRouteChoice.(type) {
	case *VnConfiguration_NoOutsideStaticRoutes:
		s := proto.Size(x.NoOutsideStaticRoutes)
		n += proto.SizeVarint(5<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *VnConfiguration_OutsideStaticRoutes:
		s := proto.Size(x.OutsideStaticRoutes)
		n += proto.SizeVarint(6<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	// global_network_choice
	switch x := m.GlobalNetworkChoice.(type) {
	case *VnConfiguration_NoGlobalNetwork:
		s := proto.Size(x.NoGlobalNetwork)
		n += proto.SizeVarint(8<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *VnConfiguration_GlobalNetworkList:
		s := proto.Size(x.GlobalNetworkList)
		n += proto.SizeVarint(9<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// VPC attachment
//
// x-displayName: "VPC"
// VPC attachments to transit gateway
type VPCAttachmentType struct {
	// VPC ID
	//
	// x-displayName: "VPC ID"
	// x-example: "vpc-12345678901234567"
	// Information about existing VPC
	VpcId string `protobuf:"bytes,1,opt,name=vpc_id,json=vpcId,proto3" json:"vpc_id,omitempty"`
	// Labels For VPC ID
	//
	// x-displayName: "Labels For VPC ID"
	// Add Labels for each of the VPC ID, these labels can be used in network policy
	// These labels used must be from known key and label defined in shared namespace
	Labels map[string]string `protobuf:"bytes,2,rep,name=labels" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *VPCAttachmentType) Reset()                    { *m = VPCAttachmentType{} }
func (*VPCAttachmentType) ProtoMessage()               {}
func (*VPCAttachmentType) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{5} }

func (m *VPCAttachmentType) GetVpcId() string {
	if m != nil {
		return m.VpcId
	}
	return ""
}

func (m *VPCAttachmentType) GetLabels() map[string]string {
	if m != nil {
		return m.Labels
	}
	return nil
}

// VPC IP prefixes
//
// x-displayName: "VPC IP prefixes"
// VPC IP prefixes
type VPCIpPrefixesType struct {
	// IP prefixes
	//
	// x-displayName: "Prefixes"
	// x-required
	// x-example: "['10.2.1.0/24', '192.168.8.0/29', '10.7.64.160/27']"
	// An unordered list of IP prefixes.
	Prefixes []string `protobuf:"bytes,1,rep,name=prefixes" json:"prefixes,omitempty"`
}

func (m *VPCIpPrefixesType) Reset()                    { *m = VPCIpPrefixesType{} }
func (*VPCIpPrefixesType) ProtoMessage()               {}
func (*VPCIpPrefixesType) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{6} }

func (m *VPCIpPrefixesType) GetPrefixes() []string {
	if m != nil {
		return m.Prefixes
	}
	return nil
}

// VPC attachments
//
// x-displayName: "VPC attachments"
// VPC attachments to transit gateway
type VPCAttachmentListType struct {
	// vpc_list
	//
	// x-displayName: "VPC List"
	// List of VPC attachments to transit gateway
	VpcList []*VPCAttachmentType `protobuf:"bytes,1,rep,name=vpc_list,json=vpcList" json:"vpc_list,omitempty"`
}

func (m *VPCAttachmentListType) Reset()                    { *m = VPCAttachmentListType{} }
func (*VPCAttachmentListType) ProtoMessage()               {}
func (*VPCAttachmentListType) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{7} }

func (m *VPCAttachmentListType) GetVpcList() []*VPCAttachmentType {
	if m != nil {
		return m.VpcList
	}
	return nil
}

// Active Service Policies
//
// x-displayName: "Active Service Policies"
// Active service policies for the east-west  proxy
type ActiveServicePoliciesType struct {
	// service_policies
	//
	// x-displayName: "Service Policies"
	// A list of references to service_policy objects.
	ServicePolicies []*ves_io_schema_views.ObjectRefType `protobuf:"bytes,1,rep,name=service_policies,json=servicePolicies" json:"service_policies,omitempty"`
}

func (m *ActiveServicePoliciesType) Reset()                    { *m = ActiveServicePoliciesType{} }
func (*ActiveServicePoliciesType) ProtoMessage()               {}
func (*ActiveServicePoliciesType) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{8} }

func (m *ActiveServicePoliciesType) GetServicePolicies() []*ves_io_schema_views.ObjectRefType {
	if m != nil {
		return m.ServicePolicies
	}
	return nil
}

// TGW Security Configuration
//
// x-displayName: "TGW Security Configuration"
// Security Configuration for transit gateway
type SecurityConfigType struct {
	// Manage Forward Proxy
	//
	// x-displayName: "Manage Forward Proxy"
	// x-required
	// Manage Forward Proxy for this site
	//
	// Types that are valid to be assigned to ForwardProxyChoice:
	//	*SecurityConfigType_NoForwardProxy
	//	*SecurityConfigType_ActiveForwardProxyPolicies
	//	*SecurityConfigType_ForwardProxyAllowAll
	ForwardProxyChoice isSecurityConfigType_ForwardProxyChoice `protobuf_oneof:"forward_proxy_choice"`
	// Manage East-West Service Policy
	//
	// x-displayName: "Manage East-West Service Policy"
	// x-required
	// Select service policy between east-west traffic between spoke VPC(s), traffic goes via proxy when service policy is enabled.
	//
	// Types that are valid to be assigned to EastWestServicePolicyChoice:
	//	*SecurityConfigType_NoEastWestPolicy
	//	*SecurityConfigType_ActiveEastWestServicePolicies
	//	*SecurityConfigType_EastWestServicePolicyAllowAll
	EastWestServicePolicyChoice isSecurityConfigType_EastWestServicePolicyChoice `protobuf_oneof:"east_west_service_policy_choice"`
	// Manage Network Policy
	//
	// x-displayName: "Manage Network Policy"
	// x-required
	// Manage Network Policy via this view
	//
	// Types that are valid to be assigned to NetworkPolicyChoice:
	//	*SecurityConfigType_NoNetworkPolicy
	//	*SecurityConfigType_ActiveNetworkPolicies
	NetworkPolicyChoice isSecurityConfigType_NetworkPolicyChoice `protobuf_oneof:"network_policy_choice"`
}

func (m *SecurityConfigType) Reset()                    { *m = SecurityConfigType{} }
func (*SecurityConfigType) ProtoMessage()               {}
func (*SecurityConfigType) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{9} }

type isSecurityConfigType_ForwardProxyChoice interface {
	isSecurityConfigType_ForwardProxyChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isSecurityConfigType_EastWestServicePolicyChoice interface {
	isSecurityConfigType_EastWestServicePolicyChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isSecurityConfigType_NetworkPolicyChoice interface {
	isSecurityConfigType_NetworkPolicyChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type SecurityConfigType_NoForwardProxy struct {
	NoForwardProxy *ves_io_schema4.Empty `protobuf:"bytes,2,opt,name=no_forward_proxy,json=noForwardProxy,oneof"`
}
type SecurityConfigType_ActiveForwardProxyPolicies struct {
	ActiveForwardProxyPolicies *ves_io_schema_network_firewall.ActiveForwardProxyPoliciesType `protobuf:"bytes,3,opt,name=active_forward_proxy_policies,json=activeForwardProxyPolicies,oneof"`
}
type SecurityConfigType_ForwardProxyAllowAll struct {
	ForwardProxyAllowAll *ves_io_schema4.Empty `protobuf:"bytes,7,opt,name=forward_proxy_allow_all,json=forwardProxyAllowAll,oneof"`
}
type SecurityConfigType_NoEastWestPolicy struct {
	NoEastWestPolicy *ves_io_schema4.Empty `protobuf:"bytes,9,opt,name=no_east_west_policy,json=noEastWestPolicy,oneof"`
}
type SecurityConfigType_ActiveEastWestServicePolicies struct {
	ActiveEastWestServicePolicies *ActiveServicePoliciesType `protobuf:"bytes,10,opt,name=active_east_west_service_policies,json=activeEastWestServicePolicies,oneof"`
}
type SecurityConfigType_EastWestServicePolicyAllowAll struct {
	EastWestServicePolicyAllowAll *ves_io_schema4.Empty `protobuf:"bytes,11,opt,name=east_west_service_policy_allow_all,json=eastWestServicePolicyAllowAll,oneof"`
}
type SecurityConfigType_NoNetworkPolicy struct {
	NoNetworkPolicy *ves_io_schema4.Empty `protobuf:"bytes,5,opt,name=no_network_policy,json=noNetworkPolicy,oneof"`
}
type SecurityConfigType_ActiveNetworkPolicies struct {
	ActiveNetworkPolicies *ves_io_schema_network_firewall.ActiveNetworkPoliciesType `protobuf:"bytes,6,opt,name=active_network_policies,json=activeNetworkPolicies,oneof"`
}

func (*SecurityConfigType_NoForwardProxy) isSecurityConfigType_ForwardProxyChoice()             {}
func (*SecurityConfigType_ActiveForwardProxyPolicies) isSecurityConfigType_ForwardProxyChoice() {}
func (*SecurityConfigType_ForwardProxyAllowAll) isSecurityConfigType_ForwardProxyChoice()       {}
func (*SecurityConfigType_NoEastWestPolicy) isSecurityConfigType_EastWestServicePolicyChoice()  {}
func (*SecurityConfigType_ActiveEastWestServicePolicies) isSecurityConfigType_EastWestServicePolicyChoice() {
}
func (*SecurityConfigType_EastWestServicePolicyAllowAll) isSecurityConfigType_EastWestServicePolicyChoice() {
}
func (*SecurityConfigType_NoNetworkPolicy) isSecurityConfigType_NetworkPolicyChoice()       {}
func (*SecurityConfigType_ActiveNetworkPolicies) isSecurityConfigType_NetworkPolicyChoice() {}

func (m *SecurityConfigType) GetForwardProxyChoice() isSecurityConfigType_ForwardProxyChoice {
	if m != nil {
		return m.ForwardProxyChoice
	}
	return nil
}
func (m *SecurityConfigType) GetEastWestServicePolicyChoice() isSecurityConfigType_EastWestServicePolicyChoice {
	if m != nil {
		return m.EastWestServicePolicyChoice
	}
	return nil
}
func (m *SecurityConfigType) GetNetworkPolicyChoice() isSecurityConfigType_NetworkPolicyChoice {
	if m != nil {
		return m.NetworkPolicyChoice
	}
	return nil
}

func (m *SecurityConfigType) GetNoForwardProxy() *ves_io_schema4.Empty {
	if x, ok := m.GetForwardProxyChoice().(*SecurityConfigType_NoForwardProxy); ok {
		return x.NoForwardProxy
	}
	return nil
}

func (m *SecurityConfigType) GetActiveForwardProxyPolicies() *ves_io_schema_network_firewall.ActiveForwardProxyPoliciesType {
	if x, ok := m.GetForwardProxyChoice().(*SecurityConfigType_ActiveForwardProxyPolicies); ok {
		return x.ActiveForwardProxyPolicies
	}
	return nil
}

func (m *SecurityConfigType) GetForwardProxyAllowAll() *ves_io_schema4.Empty {
	if x, ok := m.GetForwardProxyChoice().(*SecurityConfigType_ForwardProxyAllowAll); ok {
		return x.ForwardProxyAllowAll
	}
	return nil
}

func (m *SecurityConfigType) GetNoEastWestPolicy() *ves_io_schema4.Empty {
	if x, ok := m.GetEastWestServicePolicyChoice().(*SecurityConfigType_NoEastWestPolicy); ok {
		return x.NoEastWestPolicy
	}
	return nil
}

func (m *SecurityConfigType) GetActiveEastWestServicePolicies() *ActiveServicePoliciesType {
	if x, ok := m.GetEastWestServicePolicyChoice().(*SecurityConfigType_ActiveEastWestServicePolicies); ok {
		return x.ActiveEastWestServicePolicies
	}
	return nil
}

func (m *SecurityConfigType) GetEastWestServicePolicyAllowAll() *ves_io_schema4.Empty {
	if x, ok := m.GetEastWestServicePolicyChoice().(*SecurityConfigType_EastWestServicePolicyAllowAll); ok {
		return x.EastWestServicePolicyAllowAll
	}
	return nil
}

func (m *SecurityConfigType) GetNoNetworkPolicy() *ves_io_schema4.Empty {
	if x, ok := m.GetNetworkPolicyChoice().(*SecurityConfigType_NoNetworkPolicy); ok {
		return x.NoNetworkPolicy
	}
	return nil
}

func (m *SecurityConfigType) GetActiveNetworkPolicies() *ves_io_schema_network_firewall.ActiveNetworkPoliciesType {
	if x, ok := m.GetNetworkPolicyChoice().(*SecurityConfigType_ActiveNetworkPolicies); ok {
		return x.ActiveNetworkPolicies
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*SecurityConfigType) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _SecurityConfigType_OneofMarshaler, _SecurityConfigType_OneofUnmarshaler, _SecurityConfigType_OneofSizer, []interface{}{
		(*SecurityConfigType_NoForwardProxy)(nil),
		(*SecurityConfigType_ActiveForwardProxyPolicies)(nil),
		(*SecurityConfigType_ForwardProxyAllowAll)(nil),
		(*SecurityConfigType_NoEastWestPolicy)(nil),
		(*SecurityConfigType_ActiveEastWestServicePolicies)(nil),
		(*SecurityConfigType_EastWestServicePolicyAllowAll)(nil),
		(*SecurityConfigType_NoNetworkPolicy)(nil),
		(*SecurityConfigType_ActiveNetworkPolicies)(nil),
	}
}

func _SecurityConfigType_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*SecurityConfigType)
	// forward_proxy_choice
	switch x := m.ForwardProxyChoice.(type) {
	case *SecurityConfigType_NoForwardProxy:
		_ = b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.NoForwardProxy); err != nil {
			return err
		}
	case *SecurityConfigType_ActiveForwardProxyPolicies:
		_ = b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ActiveForwardProxyPolicies); err != nil {
			return err
		}
	case *SecurityConfigType_ForwardProxyAllowAll:
		_ = b.EncodeVarint(7<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ForwardProxyAllowAll); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("SecurityConfigType.ForwardProxyChoice has unexpected type %T", x)
	}
	// east_west_service_policy_choice
	switch x := m.EastWestServicePolicyChoice.(type) {
	case *SecurityConfigType_NoEastWestPolicy:
		_ = b.EncodeVarint(9<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.NoEastWestPolicy); err != nil {
			return err
		}
	case *SecurityConfigType_ActiveEastWestServicePolicies:
		_ = b.EncodeVarint(10<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ActiveEastWestServicePolicies); err != nil {
			return err
		}
	case *SecurityConfigType_EastWestServicePolicyAllowAll:
		_ = b.EncodeVarint(11<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.EastWestServicePolicyAllowAll); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("SecurityConfigType.EastWestServicePolicyChoice has unexpected type %T", x)
	}
	// network_policy_choice
	switch x := m.NetworkPolicyChoice.(type) {
	case *SecurityConfigType_NoNetworkPolicy:
		_ = b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.NoNetworkPolicy); err != nil {
			return err
		}
	case *SecurityConfigType_ActiveNetworkPolicies:
		_ = b.EncodeVarint(6<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ActiveNetworkPolicies); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("SecurityConfigType.NetworkPolicyChoice has unexpected type %T", x)
	}
	return nil
}

func _SecurityConfigType_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*SecurityConfigType)
	switch tag {
	case 2: // forward_proxy_choice.no_forward_proxy
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.ForwardProxyChoice = &SecurityConfigType_NoForwardProxy{msg}
		return true, err
	case 3: // forward_proxy_choice.active_forward_proxy_policies
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema_network_firewall.ActiveForwardProxyPoliciesType)
		err := b.DecodeMessage(msg)
		m.ForwardProxyChoice = &SecurityConfigType_ActiveForwardProxyPolicies{msg}
		return true, err
	case 7: // forward_proxy_choice.forward_proxy_allow_all
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.ForwardProxyChoice = &SecurityConfigType_ForwardProxyAllowAll{msg}
		return true, err
	case 9: // east_west_service_policy_choice.no_east_west_policy
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.EastWestServicePolicyChoice = &SecurityConfigType_NoEastWestPolicy{msg}
		return true, err
	case 10: // east_west_service_policy_choice.active_east_west_service_policies
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ActiveServicePoliciesType)
		err := b.DecodeMessage(msg)
		m.EastWestServicePolicyChoice = &SecurityConfigType_ActiveEastWestServicePolicies{msg}
		return true, err
	case 11: // east_west_service_policy_choice.east_west_service_policy_allow_all
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.EastWestServicePolicyChoice = &SecurityConfigType_EastWestServicePolicyAllowAll{msg}
		return true, err
	case 5: // network_policy_choice.no_network_policy
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.NetworkPolicyChoice = &SecurityConfigType_NoNetworkPolicy{msg}
		return true, err
	case 6: // network_policy_choice.active_network_policies
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema_network_firewall.ActiveNetworkPoliciesType)
		err := b.DecodeMessage(msg)
		m.NetworkPolicyChoice = &SecurityConfigType_ActiveNetworkPolicies{msg}
		return true, err
	default:
		return false, nil
	}
}

func _SecurityConfigType_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*SecurityConfigType)
	// forward_proxy_choice
	switch x := m.ForwardProxyChoice.(type) {
	case *SecurityConfigType_NoForwardProxy:
		s := proto.Size(x.NoForwardProxy)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *SecurityConfigType_ActiveForwardProxyPolicies:
		s := proto.Size(x.ActiveForwardProxyPolicies)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *SecurityConfigType_ForwardProxyAllowAll:
		s := proto.Size(x.ForwardProxyAllowAll)
		n += proto.SizeVarint(7<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	// east_west_service_policy_choice
	switch x := m.EastWestServicePolicyChoice.(type) {
	case *SecurityConfigType_NoEastWestPolicy:
		s := proto.Size(x.NoEastWestPolicy)
		n += proto.SizeVarint(9<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *SecurityConfigType_ActiveEastWestServicePolicies:
		s := proto.Size(x.ActiveEastWestServicePolicies)
		n += proto.SizeVarint(10<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *SecurityConfigType_EastWestServicePolicyAllowAll:
		s := proto.Size(x.EastWestServicePolicyAllowAll)
		n += proto.SizeVarint(11<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	// network_policy_choice
	switch x := m.NetworkPolicyChoice.(type) {
	case *SecurityConfigType_NoNetworkPolicy:
		s := proto.Size(x.NoNetworkPolicy)
		n += proto.SizeVarint(5<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *SecurityConfigType_ActiveNetworkPolicies:
		s := proto.Size(x.ActiveNetworkPolicies)
		n += proto.SizeVarint(6<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// AWS VPN Tunnel Config
//
// x-displayName: "AWS VPN Tunnel Config"
// Remote IP for VPN tunnels of a node
type AWSVPNTunnelConfigType struct {
	// Name of the Node
	//
	// x-displayName: "Name of the Node"
	// x-example: "master-0"
	// x-required
	// Name of the node for which this tunnel is configured
	NodeName string `protobuf:"bytes,1,opt,name=node_name,json=nodeName,proto3" json:"node_name,omitempty"`
	// Remote IP(s)
	//
	// x-displayName: "Remote IP(s)"
	// x-example: "3.4.5.6"
	// x-required
	// Remote IP(s) for up to two tunnels
	TunnelRemoteIp []string `protobuf:"bytes,2,rep,name=tunnel_remote_ip,json=tunnelRemoteIp" json:"tunnel_remote_ip,omitempty"`
	// Volterra Node ID
	//
	// x-displayName: "Volterra Node ID"
	// x-example: "ves-node-id-xxxxxx"
	// x-required
	// Volterra Node ID for which this tunnel is configured
	NodeId string `protobuf:"bytes,3,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
}

func (m *AWSVPNTunnelConfigType) Reset()                    { *m = AWSVPNTunnelConfigType{} }
func (*AWSVPNTunnelConfigType) ProtoMessage()               {}
func (*AWSVPNTunnelConfigType) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{10} }

func (m *AWSVPNTunnelConfigType) GetNodeName() string {
	if m != nil {
		return m.NodeName
	}
	return ""
}

func (m *AWSVPNTunnelConfigType) GetTunnelRemoteIp() []string {
	if m != nil {
		return m.TunnelRemoteIp
	}
	return nil
}

func (m *AWSVPNTunnelConfigType) GetNodeId() string {
	if m != nil {
		return m.NodeId
	}
	return ""
}

// AWS TGW Information Config
//
// x-displayName: "AWS TGW Information Config"
// AWS tgw information like tgw-id and site's vpc-id
type AWSTGWInfoConfigType struct {
	// TGW ID
	//
	// x-displayName: "TGW ID"
	// x-example: "tgw-12345678"
	// x-required
	// TGW ID populated by AWS
	TgwId string `protobuf:"bytes,1,opt,name=tgw_id,json=tgwId,proto3" json:"tgw_id,omitempty"`
	// VPC ID
	//
	// x-displayName: "VPC ID"
	// x-example: "vpc-12345678"
	// x-required
	// VPC ID where the volterra site exists
	VpcId string `protobuf:"bytes,2,opt,name=vpc_id,json=vpcId,proto3" json:"vpc_id,omitempty"`
}

func (m *AWSTGWInfoConfigType) Reset()                    { *m = AWSTGWInfoConfigType{} }
func (*AWSTGWInfoConfigType) ProtoMessage()               {}
func (*AWSTGWInfoConfigType) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{11} }

func (m *AWSTGWInfoConfigType) GetTgwId() string {
	if m != nil {
		return m.TgwId
	}
	return ""
}

func (m *AWSTGWInfoConfigType) GetVpcId() string {
	if m != nil {
		return m.VpcId
	}
	return ""
}

// GlobalSpecType
//
// x-displayName: "Global Specification"
// Shape of the AWS TGW site specification
type GlobalSpecType struct {
	// AWS TGW, Services VPC and Nodes
	//
	// x-displayName: "AWS TGW, Services VPC and Nodes"
	// x-required
	// Configure AWS TGW, services VPC and site nodes parameters.
	AwsParameters *ServicesVPCType `protobuf:"bytes,1,opt,name=aws_parameters,json=awsParameters" json:"aws_parameters,omitempty"`
	// VPC attachments
	//
	// x-displayName: "VPC attachments"
	// VPC attachments to transit gateway
	VpcAttachments *VPCAttachmentListType `protobuf:"bytes,2,opt,name=vpc_attachments,json=vpcAttachments" json:"vpc_attachments,omitempty"`
	// TGW Security Configuration
	//
	// x-displayName: "TGW Security Configuration"
	// Security Configuration for transit gateway
	TgwSecurity *SecurityConfigType `protobuf:"bytes,3,opt,name=tgw_security,json=tgwSecurity" json:"tgw_security,omitempty"`
	// volterra_software_version
	//
	// x-displayName: "Software Version"
	// x-example: "value"
	// Desired Volterra software version for this site, a string matching released set of software components.
	VolterraSoftwareVersion string `protobuf:"bytes,4,opt,name=volterra_software_version,json=volterraSoftwareVersion,proto3" json:"volterra_software_version,omitempty"`
	// operating_system_version
	//
	// x-displayName: "Operating System Version"
	// x-example: "value"
	// Desired Operating System version for this site.
	OperatingSystemVersion string `protobuf:"bytes,5,opt,name=operating_system_version,json=operatingSystemVersion,proto3" json:"operating_system_version,omitempty"`
	// VPC IP Prefixes
	//
	// x-displayName: "VPC IP Prefixes"
	// All IP prefixes of subnets in the VPC. These are managed by custom API.
	VpcIpPrefixes map[string]*VPCIpPrefixesType `protobuf:"bytes,6,rep,name=vpc_ip_prefixes,json=vpcIpPrefixes" json:"vpc_ip_prefixes,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value"`
	// TGW Virtual Network Configuration
	//
	// x-displayName: "TGW Virtual Network Configuration"
	// Virtual Network Configuration for transit gateway
	VnConfig *VnConfiguration `protobuf:"bytes,7,opt,name=vn_config,json=vnConfig" json:"vn_config,omitempty"`
	// address
	//
	// x-displayName: "Geographical Address"
	// x-example: "123 Street, city, country, postal code"
	// Site's geographical address that can be used determine its latitude and longitude.
	Address string `protobuf:"bytes,8,opt,name=address,proto3" json:"address,omitempty"`
	// coordinates
	//
	// x-displayName: "Co-ordinates"
	// Site longitude and latitude co-ordinates
	Coordinates *ves_io_schema_site.Coordinates `protobuf:"bytes,9,opt,name=coordinates" json:"coordinates,omitempty"`
	// user_modification_timestamp
	//
	// x-displayName: "User Modification Timestamp"
	// ModificationTimestamp is a timestamp representing time when the user
	// last modified the object.
	UserModificationTimestamp *google_protobuf1.Timestamp `protobuf:"bytes,10,opt,name=user_modification_timestamp,json=userModificationTimestamp" json:"user_modification_timestamp,omitempty"`
	// TGW information
	//
	// x-displayName: "TGW Site Information"
	// TGW Site information obtained after creating the site and TGW
	TgwInfo *AWSTGWInfoConfigType `protobuf:"bytes,11,opt,name=tgw_info,json=tgwInfo" json:"tgw_info,omitempty"`
	// Logs Streaming
	//
	// x-displayName: "Logs Streaming"
	// x-required
	// Select Logs receiver for logs streaming
	//
	// Types that are valid to be assigned to LogsReceiverChoice:
	//	*GlobalSpecType_LogsStreamingDisabled
	//	*GlobalSpecType_LogReceiver
	LogsReceiverChoice isGlobalSpecType_LogsReceiverChoice `protobuf_oneof:"logs_receiver_choice"`
	// AWS VPN tunnel config
	//
	// x-displayName: "AWS VPN Tunnel Config"
	// AWS VPN Tunner Config
	Tunnels []*AWSVPNTunnelConfigType `protobuf:"bytes,998,rep,name=tunnels" json:"tunnels,omitempty"`
	// Reference to terraform parameters
	//
	// x-displayName: "Terraform Parameters"
	// Reference to terraform parameters object
	TfParams *ves_io_schema_views.ObjectRefType `protobuf:"bytes,999,opt,name=tf_params,json=tfParams" json:"tf_params,omitempty"`
	// view_internal
	//
	// x-displayName: "View Internal"
	// Reference to view internal object
	ViewInternal *ves_io_schema_views.ObjectRefType `protobuf:"bytes,1000,opt,name=view_internal,json=viewInternal" json:"view_internal,omitempty"`
}

func (m *GlobalSpecType) Reset()                    { *m = GlobalSpecType{} }
func (*GlobalSpecType) ProtoMessage()               {}
func (*GlobalSpecType) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{12} }

type isGlobalSpecType_LogsReceiverChoice interface {
	isGlobalSpecType_LogsReceiverChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type GlobalSpecType_LogsStreamingDisabled struct {
	LogsStreamingDisabled *ves_io_schema4.Empty `protobuf:"bytes,13,opt,name=logs_streaming_disabled,json=logsStreamingDisabled,oneof"`
}
type GlobalSpecType_LogReceiver struct {
	LogReceiver *ves_io_schema_views.ObjectRefType `protobuf:"bytes,14,opt,name=log_receiver,json=logReceiver,oneof"`
}

func (*GlobalSpecType_LogsStreamingDisabled) isGlobalSpecType_LogsReceiverChoice() {}
func (*GlobalSpecType_LogReceiver) isGlobalSpecType_LogsReceiverChoice()           {}

func (m *GlobalSpecType) GetLogsReceiverChoice() isGlobalSpecType_LogsReceiverChoice {
	if m != nil {
		return m.LogsReceiverChoice
	}
	return nil
}

func (m *GlobalSpecType) GetAwsParameters() *ServicesVPCType {
	if m != nil {
		return m.AwsParameters
	}
	return nil
}

func (m *GlobalSpecType) GetVpcAttachments() *VPCAttachmentListType {
	if m != nil {
		return m.VpcAttachments
	}
	return nil
}

func (m *GlobalSpecType) GetTgwSecurity() *SecurityConfigType {
	if m != nil {
		return m.TgwSecurity
	}
	return nil
}

func (m *GlobalSpecType) GetVolterraSoftwareVersion() string {
	if m != nil {
		return m.VolterraSoftwareVersion
	}
	return ""
}

func (m *GlobalSpecType) GetOperatingSystemVersion() string {
	if m != nil {
		return m.OperatingSystemVersion
	}
	return ""
}

func (m *GlobalSpecType) GetVpcIpPrefixes() map[string]*VPCIpPrefixesType {
	if m != nil {
		return m.VpcIpPrefixes
	}
	return nil
}

func (m *GlobalSpecType) GetVnConfig() *VnConfiguration {
	if m != nil {
		return m.VnConfig
	}
	return nil
}

func (m *GlobalSpecType) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *GlobalSpecType) GetCoordinates() *ves_io_schema_site.Coordinates {
	if m != nil {
		return m.Coordinates
	}
	return nil
}

func (m *GlobalSpecType) GetUserModificationTimestamp() *google_protobuf1.Timestamp {
	if m != nil {
		return m.UserModificationTimestamp
	}
	return nil
}

func (m *GlobalSpecType) GetTgwInfo() *AWSTGWInfoConfigType {
	if m != nil {
		return m.TgwInfo
	}
	return nil
}

func (m *GlobalSpecType) GetLogsStreamingDisabled() *ves_io_schema4.Empty {
	if x, ok := m.GetLogsReceiverChoice().(*GlobalSpecType_LogsStreamingDisabled); ok {
		return x.LogsStreamingDisabled
	}
	return nil
}

func (m *GlobalSpecType) GetLogReceiver() *ves_io_schema_views.ObjectRefType {
	if x, ok := m.GetLogsReceiverChoice().(*GlobalSpecType_LogReceiver); ok {
		return x.LogReceiver
	}
	return nil
}

func (m *GlobalSpecType) GetTunnels() []*AWSVPNTunnelConfigType {
	if m != nil {
		return m.Tunnels
	}
	return nil
}

func (m *GlobalSpecType) GetTfParams() *ves_io_schema_views.ObjectRefType {
	if m != nil {
		return m.TfParams
	}
	return nil
}

func (m *GlobalSpecType) GetViewInternal() *ves_io_schema_views.ObjectRefType {
	if m != nil {
		return m.ViewInternal
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*GlobalSpecType) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _GlobalSpecType_OneofMarshaler, _GlobalSpecType_OneofUnmarshaler, _GlobalSpecType_OneofSizer, []interface{}{
		(*GlobalSpecType_LogsStreamingDisabled)(nil),
		(*GlobalSpecType_LogReceiver)(nil),
	}
}

func _GlobalSpecType_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*GlobalSpecType)
	// logs_receiver_choice
	switch x := m.LogsReceiverChoice.(type) {
	case *GlobalSpecType_LogsStreamingDisabled:
		_ = b.EncodeVarint(13<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.LogsStreamingDisabled); err != nil {
			return err
		}
	case *GlobalSpecType_LogReceiver:
		_ = b.EncodeVarint(14<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.LogReceiver); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("GlobalSpecType.LogsReceiverChoice has unexpected type %T", x)
	}
	return nil
}

func _GlobalSpecType_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*GlobalSpecType)
	switch tag {
	case 13: // logs_receiver_choice.logs_streaming_disabled
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.LogsReceiverChoice = &GlobalSpecType_LogsStreamingDisabled{msg}
		return true, err
	case 14: // logs_receiver_choice.log_receiver
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema_views.ObjectRefType)
		err := b.DecodeMessage(msg)
		m.LogsReceiverChoice = &GlobalSpecType_LogReceiver{msg}
		return true, err
	default:
		return false, nil
	}
}

func _GlobalSpecType_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*GlobalSpecType)
	// logs_receiver_choice
	switch x := m.LogsReceiverChoice.(type) {
	case *GlobalSpecType_LogsStreamingDisabled:
		s := proto.Size(x.LogsStreamingDisabled)
		n += proto.SizeVarint(13<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *GlobalSpecType_LogReceiver:
		s := proto.Size(x.LogReceiver)
		n += proto.SizeVarint(14<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// CreateSpecType
//
// x-displayName: "Create AWS TGW site"
// Shape of the AWS TGW site specification
type CreateSpecType struct {
	AwsParameters           *ServicesVPCType                `protobuf:"bytes,1,opt,name=aws_parameters,json=awsParameters" json:"aws_parameters,omitempty"`
	VpcAttachments          *VPCAttachmentListType          `protobuf:"bytes,2,opt,name=vpc_attachments,json=vpcAttachments" json:"vpc_attachments,omitempty"`
	VnConfig                *VnConfiguration                `protobuf:"bytes,7,opt,name=vn_config,json=vnConfig" json:"vn_config,omitempty"`
	TgwSecurity             *SecurityConfigType             `protobuf:"bytes,3,opt,name=tgw_security,json=tgwSecurity" json:"tgw_security,omitempty"`
	VolterraSoftwareVersion string                          `protobuf:"bytes,4,opt,name=volterra_software_version,json=volterraSoftwareVersion,proto3" json:"volterra_software_version,omitempty"`
	OperatingSystemVersion  string                          `protobuf:"bytes,5,opt,name=operating_system_version,json=operatingSystemVersion,proto3" json:"operating_system_version,omitempty"`
	Address                 string                          `protobuf:"bytes,8,opt,name=address,proto3" json:"address,omitempty"`
	Coordinates             *ves_io_schema_site.Coordinates `protobuf:"bytes,9,opt,name=coordinates" json:"coordinates,omitempty"`
	// Types that are valid to be assigned to LogsReceiverChoice:
	//	*CreateSpecType_LogsStreamingDisabled
	//	*CreateSpecType_LogReceiver
	LogsReceiverChoice isCreateSpecType_LogsReceiverChoice `protobuf_oneof:"logs_receiver_choice"`
}

func (m *CreateSpecType) Reset()                    { *m = CreateSpecType{} }
func (*CreateSpecType) ProtoMessage()               {}
func (*CreateSpecType) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{13} }

type isCreateSpecType_LogsReceiverChoice interface {
	isCreateSpecType_LogsReceiverChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type CreateSpecType_LogsStreamingDisabled struct {
	LogsStreamingDisabled *ves_io_schema4.Empty `protobuf:"bytes,13,opt,name=logs_streaming_disabled,json=logsStreamingDisabled,oneof"`
}
type CreateSpecType_LogReceiver struct {
	LogReceiver *ves_io_schema_views.ObjectRefType `protobuf:"bytes,14,opt,name=log_receiver,json=logReceiver,oneof"`
}

func (*CreateSpecType_LogsStreamingDisabled) isCreateSpecType_LogsReceiverChoice() {}
func (*CreateSpecType_LogReceiver) isCreateSpecType_LogsReceiverChoice()           {}

func (m *CreateSpecType) GetLogsReceiverChoice() isCreateSpecType_LogsReceiverChoice {
	if m != nil {
		return m.LogsReceiverChoice
	}
	return nil
}

func (m *CreateSpecType) GetAwsParameters() *ServicesVPCType {
	if m != nil {
		return m.AwsParameters
	}
	return nil
}

func (m *CreateSpecType) GetVpcAttachments() *VPCAttachmentListType {
	if m != nil {
		return m.VpcAttachments
	}
	return nil
}

func (m *CreateSpecType) GetVnConfig() *VnConfiguration {
	if m != nil {
		return m.VnConfig
	}
	return nil
}

func (m *CreateSpecType) GetTgwSecurity() *SecurityConfigType {
	if m != nil {
		return m.TgwSecurity
	}
	return nil
}

func (m *CreateSpecType) GetVolterraSoftwareVersion() string {
	if m != nil {
		return m.VolterraSoftwareVersion
	}
	return ""
}

func (m *CreateSpecType) GetOperatingSystemVersion() string {
	if m != nil {
		return m.OperatingSystemVersion
	}
	return ""
}

func (m *CreateSpecType) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *CreateSpecType) GetCoordinates() *ves_io_schema_site.Coordinates {
	if m != nil {
		return m.Coordinates
	}
	return nil
}

func (m *CreateSpecType) GetLogsStreamingDisabled() *ves_io_schema4.Empty {
	if x, ok := m.GetLogsReceiverChoice().(*CreateSpecType_LogsStreamingDisabled); ok {
		return x.LogsStreamingDisabled
	}
	return nil
}

func (m *CreateSpecType) GetLogReceiver() *ves_io_schema_views.ObjectRefType {
	if x, ok := m.GetLogsReceiverChoice().(*CreateSpecType_LogReceiver); ok {
		return x.LogReceiver
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*CreateSpecType) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _CreateSpecType_OneofMarshaler, _CreateSpecType_OneofUnmarshaler, _CreateSpecType_OneofSizer, []interface{}{
		(*CreateSpecType_LogsStreamingDisabled)(nil),
		(*CreateSpecType_LogReceiver)(nil),
	}
}

func _CreateSpecType_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*CreateSpecType)
	// logs_receiver_choice
	switch x := m.LogsReceiverChoice.(type) {
	case *CreateSpecType_LogsStreamingDisabled:
		_ = b.EncodeVarint(13<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.LogsStreamingDisabled); err != nil {
			return err
		}
	case *CreateSpecType_LogReceiver:
		_ = b.EncodeVarint(14<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.LogReceiver); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("CreateSpecType.LogsReceiverChoice has unexpected type %T", x)
	}
	return nil
}

func _CreateSpecType_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*CreateSpecType)
	switch tag {
	case 13: // logs_receiver_choice.logs_streaming_disabled
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.LogsReceiverChoice = &CreateSpecType_LogsStreamingDisabled{msg}
		return true, err
	case 14: // logs_receiver_choice.log_receiver
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema_views.ObjectRefType)
		err := b.DecodeMessage(msg)
		m.LogsReceiverChoice = &CreateSpecType_LogReceiver{msg}
		return true, err
	default:
		return false, nil
	}
}

func _CreateSpecType_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*CreateSpecType)
	// logs_receiver_choice
	switch x := m.LogsReceiverChoice.(type) {
	case *CreateSpecType_LogsStreamingDisabled:
		s := proto.Size(x.LogsStreamingDisabled)
		n += proto.SizeVarint(13<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *CreateSpecType_LogReceiver:
		s := proto.Size(x.LogReceiver)
		n += proto.SizeVarint(14<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// ReplaceSpecType
//
// x-displayName: "Replace AWS TGW site"
// Shape of the AWS TGW site replace specification
type ReplaceSpecType struct {
	VpcAttachments          *VPCAttachmentListType          `protobuf:"bytes,2,opt,name=vpc_attachments,json=vpcAttachments" json:"vpc_attachments,omitempty"`
	VnConfig                *VnConfiguration                `protobuf:"bytes,7,opt,name=vn_config,json=vnConfig" json:"vn_config,omitempty"`
	TgwSecurity             *SecurityConfigType             `protobuf:"bytes,3,opt,name=tgw_security,json=tgwSecurity" json:"tgw_security,omitempty"`
	VolterraSoftwareVersion string                          `protobuf:"bytes,4,opt,name=volterra_software_version,json=volterraSoftwareVersion,proto3" json:"volterra_software_version,omitempty"`
	OperatingSystemVersion  string                          `protobuf:"bytes,5,opt,name=operating_system_version,json=operatingSystemVersion,proto3" json:"operating_system_version,omitempty"`
	Address                 string                          `protobuf:"bytes,8,opt,name=address,proto3" json:"address,omitempty"`
	Coordinates             *ves_io_schema_site.Coordinates `protobuf:"bytes,9,opt,name=coordinates" json:"coordinates,omitempty"`
	// Types that are valid to be assigned to LogsReceiverChoice:
	//	*ReplaceSpecType_LogsStreamingDisabled
	//	*ReplaceSpecType_LogReceiver
	LogsReceiverChoice isReplaceSpecType_LogsReceiverChoice `protobuf_oneof:"logs_receiver_choice"`
}

func (m *ReplaceSpecType) Reset()                    { *m = ReplaceSpecType{} }
func (*ReplaceSpecType) ProtoMessage()               {}
func (*ReplaceSpecType) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{14} }

type isReplaceSpecType_LogsReceiverChoice interface {
	isReplaceSpecType_LogsReceiverChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type ReplaceSpecType_LogsStreamingDisabled struct {
	LogsStreamingDisabled *ves_io_schema4.Empty `protobuf:"bytes,13,opt,name=logs_streaming_disabled,json=logsStreamingDisabled,oneof"`
}
type ReplaceSpecType_LogReceiver struct {
	LogReceiver *ves_io_schema_views.ObjectRefType `protobuf:"bytes,14,opt,name=log_receiver,json=logReceiver,oneof"`
}

func (*ReplaceSpecType_LogsStreamingDisabled) isReplaceSpecType_LogsReceiverChoice() {}
func (*ReplaceSpecType_LogReceiver) isReplaceSpecType_LogsReceiverChoice()           {}

func (m *ReplaceSpecType) GetLogsReceiverChoice() isReplaceSpecType_LogsReceiverChoice {
	if m != nil {
		return m.LogsReceiverChoice
	}
	return nil
}

func (m *ReplaceSpecType) GetVpcAttachments() *VPCAttachmentListType {
	if m != nil {
		return m.VpcAttachments
	}
	return nil
}

func (m *ReplaceSpecType) GetVnConfig() *VnConfiguration {
	if m != nil {
		return m.VnConfig
	}
	return nil
}

func (m *ReplaceSpecType) GetTgwSecurity() *SecurityConfigType {
	if m != nil {
		return m.TgwSecurity
	}
	return nil
}

func (m *ReplaceSpecType) GetVolterraSoftwareVersion() string {
	if m != nil {
		return m.VolterraSoftwareVersion
	}
	return ""
}

func (m *ReplaceSpecType) GetOperatingSystemVersion() string {
	if m != nil {
		return m.OperatingSystemVersion
	}
	return ""
}

func (m *ReplaceSpecType) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *ReplaceSpecType) GetCoordinates() *ves_io_schema_site.Coordinates {
	if m != nil {
		return m.Coordinates
	}
	return nil
}

func (m *ReplaceSpecType) GetLogsStreamingDisabled() *ves_io_schema4.Empty {
	if x, ok := m.GetLogsReceiverChoice().(*ReplaceSpecType_LogsStreamingDisabled); ok {
		return x.LogsStreamingDisabled
	}
	return nil
}

func (m *ReplaceSpecType) GetLogReceiver() *ves_io_schema_views.ObjectRefType {
	if x, ok := m.GetLogsReceiverChoice().(*ReplaceSpecType_LogReceiver); ok {
		return x.LogReceiver
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*ReplaceSpecType) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _ReplaceSpecType_OneofMarshaler, _ReplaceSpecType_OneofUnmarshaler, _ReplaceSpecType_OneofSizer, []interface{}{
		(*ReplaceSpecType_LogsStreamingDisabled)(nil),
		(*ReplaceSpecType_LogReceiver)(nil),
	}
}

func _ReplaceSpecType_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*ReplaceSpecType)
	// logs_receiver_choice
	switch x := m.LogsReceiverChoice.(type) {
	case *ReplaceSpecType_LogsStreamingDisabled:
		_ = b.EncodeVarint(13<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.LogsStreamingDisabled); err != nil {
			return err
		}
	case *ReplaceSpecType_LogReceiver:
		_ = b.EncodeVarint(14<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.LogReceiver); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("ReplaceSpecType.LogsReceiverChoice has unexpected type %T", x)
	}
	return nil
}

func _ReplaceSpecType_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*ReplaceSpecType)
	switch tag {
	case 13: // logs_receiver_choice.logs_streaming_disabled
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.LogsReceiverChoice = &ReplaceSpecType_LogsStreamingDisabled{msg}
		return true, err
	case 14: // logs_receiver_choice.log_receiver
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema_views.ObjectRefType)
		err := b.DecodeMessage(msg)
		m.LogsReceiverChoice = &ReplaceSpecType_LogReceiver{msg}
		return true, err
	default:
		return false, nil
	}
}

func _ReplaceSpecType_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*ReplaceSpecType)
	// logs_receiver_choice
	switch x := m.LogsReceiverChoice.(type) {
	case *ReplaceSpecType_LogsStreamingDisabled:
		s := proto.Size(x.LogsStreamingDisabled)
		n += proto.SizeVarint(13<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ReplaceSpecType_LogReceiver:
		s := proto.Size(x.LogReceiver)
		n += proto.SizeVarint(14<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// GetSpecType
//
// x-displayName: "Get AWS TGW site"
// Shape of the AWS TGW site specification
type GetSpecType struct {
	AwsParameters             *ServicesVPCType                `protobuf:"bytes,1,opt,name=aws_parameters,json=awsParameters" json:"aws_parameters,omitempty"`
	VpcAttachments            *VPCAttachmentListType          `protobuf:"bytes,2,opt,name=vpc_attachments,json=vpcAttachments" json:"vpc_attachments,omitempty"`
	VnConfig                  *VnConfiguration                `protobuf:"bytes,7,opt,name=vn_config,json=vnConfig" json:"vn_config,omitempty"`
	TgwSecurity               *SecurityConfigType             `protobuf:"bytes,3,opt,name=tgw_security,json=tgwSecurity" json:"tgw_security,omitempty"`
	VolterraSoftwareVersion   string                          `protobuf:"bytes,4,opt,name=volterra_software_version,json=volterraSoftwareVersion,proto3" json:"volterra_software_version,omitempty"`
	OperatingSystemVersion    string                          `protobuf:"bytes,5,opt,name=operating_system_version,json=operatingSystemVersion,proto3" json:"operating_system_version,omitempty"`
	VpcIpPrefixes             map[string]*VPCIpPrefixesType   `protobuf:"bytes,6,rep,name=vpc_ip_prefixes,json=vpcIpPrefixes" json:"vpc_ip_prefixes,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value"`
	Tunnels                   []*AWSVPNTunnelConfigType       `protobuf:"bytes,998,rep,name=tunnels" json:"tunnels,omitempty"`
	Address                   string                          `protobuf:"bytes,8,opt,name=address,proto3" json:"address,omitempty"`
	Coordinates               *ves_io_schema_site.Coordinates `protobuf:"bytes,9,opt,name=coordinates" json:"coordinates,omitempty"`
	UserModificationTimestamp *google_protobuf1.Timestamp     `protobuf:"bytes,10,opt,name=user_modification_timestamp,json=userModificationTimestamp" json:"user_modification_timestamp,omitempty"`
	TgwInfo                   *AWSTGWInfoConfigType           `protobuf:"bytes,11,opt,name=tgw_info,json=tgwInfo" json:"tgw_info,omitempty"`
	// Types that are valid to be assigned to LogsReceiverChoice:
	//	*GetSpecType_LogsStreamingDisabled
	//	*GetSpecType_LogReceiver
	LogsReceiverChoice isGetSpecType_LogsReceiverChoice `protobuf_oneof:"logs_receiver_choice"`
}

func (m *GetSpecType) Reset()                    { *m = GetSpecType{} }
func (*GetSpecType) ProtoMessage()               {}
func (*GetSpecType) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{15} }

type isGetSpecType_LogsReceiverChoice interface {
	isGetSpecType_LogsReceiverChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type GetSpecType_LogsStreamingDisabled struct {
	LogsStreamingDisabled *ves_io_schema4.Empty `protobuf:"bytes,13,opt,name=logs_streaming_disabled,json=logsStreamingDisabled,oneof"`
}
type GetSpecType_LogReceiver struct {
	LogReceiver *ves_io_schema_views.ObjectRefType `protobuf:"bytes,14,opt,name=log_receiver,json=logReceiver,oneof"`
}

func (*GetSpecType_LogsStreamingDisabled) isGetSpecType_LogsReceiverChoice() {}
func (*GetSpecType_LogReceiver) isGetSpecType_LogsReceiverChoice()           {}

func (m *GetSpecType) GetLogsReceiverChoice() isGetSpecType_LogsReceiverChoice {
	if m != nil {
		return m.LogsReceiverChoice
	}
	return nil
}

func (m *GetSpecType) GetAwsParameters() *ServicesVPCType {
	if m != nil {
		return m.AwsParameters
	}
	return nil
}

func (m *GetSpecType) GetVpcAttachments() *VPCAttachmentListType {
	if m != nil {
		return m.VpcAttachments
	}
	return nil
}

func (m *GetSpecType) GetVnConfig() *VnConfiguration {
	if m != nil {
		return m.VnConfig
	}
	return nil
}

func (m *GetSpecType) GetTgwSecurity() *SecurityConfigType {
	if m != nil {
		return m.TgwSecurity
	}
	return nil
}

func (m *GetSpecType) GetVolterraSoftwareVersion() string {
	if m != nil {
		return m.VolterraSoftwareVersion
	}
	return ""
}

func (m *GetSpecType) GetOperatingSystemVersion() string {
	if m != nil {
		return m.OperatingSystemVersion
	}
	return ""
}

func (m *GetSpecType) GetVpcIpPrefixes() map[string]*VPCIpPrefixesType {
	if m != nil {
		return m.VpcIpPrefixes
	}
	return nil
}

func (m *GetSpecType) GetTunnels() []*AWSVPNTunnelConfigType {
	if m != nil {
		return m.Tunnels
	}
	return nil
}

func (m *GetSpecType) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *GetSpecType) GetCoordinates() *ves_io_schema_site.Coordinates {
	if m != nil {
		return m.Coordinates
	}
	return nil
}

func (m *GetSpecType) GetUserModificationTimestamp() *google_protobuf1.Timestamp {
	if m != nil {
		return m.UserModificationTimestamp
	}
	return nil
}

func (m *GetSpecType) GetTgwInfo() *AWSTGWInfoConfigType {
	if m != nil {
		return m.TgwInfo
	}
	return nil
}

func (m *GetSpecType) GetLogsStreamingDisabled() *ves_io_schema4.Empty {
	if x, ok := m.GetLogsReceiverChoice().(*GetSpecType_LogsStreamingDisabled); ok {
		return x.LogsStreamingDisabled
	}
	return nil
}

func (m *GetSpecType) GetLogReceiver() *ves_io_schema_views.ObjectRefType {
	if x, ok := m.GetLogsReceiverChoice().(*GetSpecType_LogReceiver); ok {
		return x.LogReceiver
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*GetSpecType) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _GetSpecType_OneofMarshaler, _GetSpecType_OneofUnmarshaler, _GetSpecType_OneofSizer, []interface{}{
		(*GetSpecType_LogsStreamingDisabled)(nil),
		(*GetSpecType_LogReceiver)(nil),
	}
}

func _GetSpecType_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*GetSpecType)
	// logs_receiver_choice
	switch x := m.LogsReceiverChoice.(type) {
	case *GetSpecType_LogsStreamingDisabled:
		_ = b.EncodeVarint(13<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.LogsStreamingDisabled); err != nil {
			return err
		}
	case *GetSpecType_LogReceiver:
		_ = b.EncodeVarint(14<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.LogReceiver); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("GetSpecType.LogsReceiverChoice has unexpected type %T", x)
	}
	return nil
}

func _GetSpecType_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*GetSpecType)
	switch tag {
	case 13: // logs_receiver_choice.logs_streaming_disabled
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.LogsReceiverChoice = &GetSpecType_LogsStreamingDisabled{msg}
		return true, err
	case 14: // logs_receiver_choice.log_receiver
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema_views.ObjectRefType)
		err := b.DecodeMessage(msg)
		m.LogsReceiverChoice = &GetSpecType_LogReceiver{msg}
		return true, err
	default:
		return false, nil
	}
}

func _GetSpecType_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*GetSpecType)
	// logs_receiver_choice
	switch x := m.LogsReceiverChoice.(type) {
	case *GetSpecType_LogsStreamingDisabled:
		s := proto.Size(x.LogsStreamingDisabled)
		n += proto.SizeVarint(13<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *GetSpecType_LogReceiver:
		s := proto.Size(x.LogReceiver)
		n += proto.SizeVarint(14<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

func init() {
	proto.RegisterType((*TGWAssignedASNType)(nil), "ves.io.schema.views.aws_tgw_site.TGWAssignedASNType")
	golang_proto.RegisterType((*TGWAssignedASNType)(nil), "ves.io.schema.views.aws_tgw_site.TGWAssignedASNType")
	proto.RegisterType((*ExistingTGWType)(nil), "ves.io.schema.views.aws_tgw_site.ExistingTGWType")
	golang_proto.RegisterType((*ExistingTGWType)(nil), "ves.io.schema.views.aws_tgw_site.ExistingTGWType")
	proto.RegisterType((*TGWParamsType)(nil), "ves.io.schema.views.aws_tgw_site.TGWParamsType")
	golang_proto.RegisterType((*TGWParamsType)(nil), "ves.io.schema.views.aws_tgw_site.TGWParamsType")
	proto.RegisterType((*ServicesVPCType)(nil), "ves.io.schema.views.aws_tgw_site.ServicesVPCType")
	golang_proto.RegisterType((*ServicesVPCType)(nil), "ves.io.schema.views.aws_tgw_site.ServicesVPCType")
	proto.RegisterType((*VnConfiguration)(nil), "ves.io.schema.views.aws_tgw_site.VnConfiguration")
	golang_proto.RegisterType((*VnConfiguration)(nil), "ves.io.schema.views.aws_tgw_site.VnConfiguration")
	proto.RegisterType((*VPCAttachmentType)(nil), "ves.io.schema.views.aws_tgw_site.VPCAttachmentType")
	golang_proto.RegisterType((*VPCAttachmentType)(nil), "ves.io.schema.views.aws_tgw_site.VPCAttachmentType")
	proto.RegisterType((*VPCIpPrefixesType)(nil), "ves.io.schema.views.aws_tgw_site.VPCIpPrefixesType")
	golang_proto.RegisterType((*VPCIpPrefixesType)(nil), "ves.io.schema.views.aws_tgw_site.VPCIpPrefixesType")
	proto.RegisterType((*VPCAttachmentListType)(nil), "ves.io.schema.views.aws_tgw_site.VPCAttachmentListType")
	golang_proto.RegisterType((*VPCAttachmentListType)(nil), "ves.io.schema.views.aws_tgw_site.VPCAttachmentListType")
	proto.RegisterType((*ActiveServicePoliciesType)(nil), "ves.io.schema.views.aws_tgw_site.ActiveServicePoliciesType")
	golang_proto.RegisterType((*ActiveServicePoliciesType)(nil), "ves.io.schema.views.aws_tgw_site.ActiveServicePoliciesType")
	proto.RegisterType((*SecurityConfigType)(nil), "ves.io.schema.views.aws_tgw_site.SecurityConfigType")
	golang_proto.RegisterType((*SecurityConfigType)(nil), "ves.io.schema.views.aws_tgw_site.SecurityConfigType")
	proto.RegisterType((*AWSVPNTunnelConfigType)(nil), "ves.io.schema.views.aws_tgw_site.AWSVPNTunnelConfigType")
	golang_proto.RegisterType((*AWSVPNTunnelConfigType)(nil), "ves.io.schema.views.aws_tgw_site.AWSVPNTunnelConfigType")
	proto.RegisterType((*AWSTGWInfoConfigType)(nil), "ves.io.schema.views.aws_tgw_site.AWSTGWInfoConfigType")
	golang_proto.RegisterType((*AWSTGWInfoConfigType)(nil), "ves.io.schema.views.aws_tgw_site.AWSTGWInfoConfigType")
	proto.RegisterType((*GlobalSpecType)(nil), "ves.io.schema.views.aws_tgw_site.GlobalSpecType")
	golang_proto.RegisterType((*GlobalSpecType)(nil), "ves.io.schema.views.aws_tgw_site.GlobalSpecType")
	proto.RegisterType((*CreateSpecType)(nil), "ves.io.schema.views.aws_tgw_site.CreateSpecType")
	golang_proto.RegisterType((*CreateSpecType)(nil), "ves.io.schema.views.aws_tgw_site.CreateSpecType")
	proto.RegisterType((*ReplaceSpecType)(nil), "ves.io.schema.views.aws_tgw_site.ReplaceSpecType")
	golang_proto.RegisterType((*ReplaceSpecType)(nil), "ves.io.schema.views.aws_tgw_site.ReplaceSpecType")
	proto.RegisterType((*GetSpecType)(nil), "ves.io.schema.views.aws_tgw_site.GetSpecType")
	golang_proto.RegisterType((*GetSpecType)(nil), "ves.io.schema.views.aws_tgw_site.GetSpecType")
}
func (this *TGWAssignedASNType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TGWAssignedASNType)
	if !ok {
		that2, ok := that.(TGWAssignedASNType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.TgwAsn != that1.TgwAsn {
		return false
	}
	if this.VolterraSiteAsn != that1.VolterraSiteAsn {
		return false
	}
	return true
}
func (this *ExistingTGWType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ExistingTGWType)
	if !ok {
		that2, ok := that.(ExistingTGWType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.TgwId != that1.TgwId {
		return false
	}
	if this.TgwAsn != that1.TgwAsn {
		return false
	}
	if this.VolterraSiteAsn != that1.VolterraSiteAsn {
		return false
	}
	return true
}
func (this *TGWParamsType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TGWParamsType)
	if !ok {
		that2, ok := that.(TGWParamsType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.AsnChoice == nil {
		if this.AsnChoice != nil {
			return false
		}
	} else if this.AsnChoice == nil {
		return false
	} else if !this.AsnChoice.Equal(that1.AsnChoice) {
		return false
	}
	return true
}
func (this *TGWParamsType_SystemGenerated) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TGWParamsType_SystemGenerated)
	if !ok {
		that2, ok := that.(TGWParamsType_SystemGenerated)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.SystemGenerated.Equal(that1.SystemGenerated) {
		return false
	}
	return true
}
func (this *TGWParamsType_UserAssigned) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TGWParamsType_UserAssigned)
	if !ok {
		that2, ok := that.(TGWParamsType_UserAssigned)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.UserAssigned.Equal(that1.UserAssigned) {
		return false
	}
	return true
}
func (this *ServicesVPCType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ServicesVPCType)
	if !ok {
		that2, ok := that.(ServicesVPCType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.AwsRegion != that1.AwsRegion {
		return false
	}
	if that1.ServiceVpcChoice == nil {
		if this.ServiceVpcChoice != nil {
			return false
		}
	} else if this.ServiceVpcChoice == nil {
		return false
	} else if !this.ServiceVpcChoice.Equal(that1.ServiceVpcChoice) {
		return false
	}
	if that1.TgwChoice == nil {
		if this.TgwChoice != nil {
			return false
		}
	} else if this.TgwChoice == nil {
		return false
	} else if !this.TgwChoice.Equal(that1.TgwChoice) {
		return false
	}
	if this.AwsCertifiedHw != that1.AwsCertifiedHw {
		return false
	}
	if this.InstanceType != that1.InstanceType {
		return false
	}
	if this.SshKey != that1.SshKey {
		return false
	}
	if len(this.AzNodes) != len(that1.AzNodes) {
		return false
	}
	for i := range this.AzNodes {
		if !this.AzNodes[i].Equal(that1.AzNodes[i]) {
			return false
		}
	}
	if this.NodesPerAz != that1.NodesPerAz {
		return false
	}
	if this.DiskSize != that1.DiskSize {
		return false
	}
	if that1.Deployment == nil {
		if this.Deployment != nil {
			return false
		}
	} else if this.Deployment == nil {
		return false
	} else if !this.Deployment.Equal(that1.Deployment) {
		return false
	}
	return true
}
func (this *ServicesVPCType_NewVpc) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ServicesVPCType_NewVpc)
	if !ok {
		that2, ok := that.(ServicesVPCType_NewVpc)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NewVpc.Equal(that1.NewVpc) {
		return false
	}
	return true
}
func (this *ServicesVPCType_VpcId) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ServicesVPCType_VpcId)
	if !ok {
		that2, ok := that.(ServicesVPCType_VpcId)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.VpcId != that1.VpcId {
		return false
	}
	return true
}
func (this *ServicesVPCType_NewTgw) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ServicesVPCType_NewTgw)
	if !ok {
		that2, ok := that.(ServicesVPCType_NewTgw)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NewTgw.Equal(that1.NewTgw) {
		return false
	}
	return true
}
func (this *ServicesVPCType_ExistingTgw) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ServicesVPCType_ExistingTgw)
	if !ok {
		that2, ok := that.(ServicesVPCType_ExistingTgw)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ExistingTgw.Equal(that1.ExistingTgw) {
		return false
	}
	return true
}
func (this *ServicesVPCType_AwsCred) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ServicesVPCType_AwsCred)
	if !ok {
		that2, ok := that.(ServicesVPCType_AwsCred)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AwsCred.Equal(that1.AwsCred) {
		return false
	}
	return true
}
func (this *ServicesVPCType_Assisted) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ServicesVPCType_Assisted)
	if !ok {
		that2, ok := that.(ServicesVPCType_Assisted)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Assisted.Equal(that1.Assisted) {
		return false
	}
	return true
}
func (this *VnConfiguration) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*VnConfiguration)
	if !ok {
		that2, ok := that.(VnConfiguration)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.InsideStaticRouteChoice == nil {
		if this.InsideStaticRouteChoice != nil {
			return false
		}
	} else if this.InsideStaticRouteChoice == nil {
		return false
	} else if !this.InsideStaticRouteChoice.Equal(that1.InsideStaticRouteChoice) {
		return false
	}
	if that1.OutsideStaticRouteChoice == nil {
		if this.OutsideStaticRouteChoice != nil {
			return false
		}
	} else if this.OutsideStaticRouteChoice == nil {
		return false
	} else if !this.OutsideStaticRouteChoice.Equal(that1.OutsideStaticRouteChoice) {
		return false
	}
	if that1.GlobalNetworkChoice == nil {
		if this.GlobalNetworkChoice != nil {
			return false
		}
	} else if this.GlobalNetworkChoice == nil {
		return false
	} else if !this.GlobalNetworkChoice.Equal(that1.GlobalNetworkChoice) {
		return false
	}
	return true
}
func (this *VnConfiguration_NoInsideStaticRoutes) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*VnConfiguration_NoInsideStaticRoutes)
	if !ok {
		that2, ok := that.(VnConfiguration_NoInsideStaticRoutes)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NoInsideStaticRoutes.Equal(that1.NoInsideStaticRoutes) {
		return false
	}
	return true
}
func (this *VnConfiguration_InsideStaticRoutes) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*VnConfiguration_InsideStaticRoutes)
	if !ok {
		that2, ok := that.(VnConfiguration_InsideStaticRoutes)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.InsideStaticRoutes.Equal(that1.InsideStaticRoutes) {
		return false
	}
	return true
}
func (this *VnConfiguration_NoOutsideStaticRoutes) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*VnConfiguration_NoOutsideStaticRoutes)
	if !ok {
		that2, ok := that.(VnConfiguration_NoOutsideStaticRoutes)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NoOutsideStaticRoutes.Equal(that1.NoOutsideStaticRoutes) {
		return false
	}
	return true
}
func (this *VnConfiguration_OutsideStaticRoutes) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*VnConfiguration_OutsideStaticRoutes)
	if !ok {
		that2, ok := that.(VnConfiguration_OutsideStaticRoutes)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.OutsideStaticRoutes.Equal(that1.OutsideStaticRoutes) {
		return false
	}
	return true
}
func (this *VnConfiguration_NoGlobalNetwork) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*VnConfiguration_NoGlobalNetwork)
	if !ok {
		that2, ok := that.(VnConfiguration_NoGlobalNetwork)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NoGlobalNetwork.Equal(that1.NoGlobalNetwork) {
		return false
	}
	return true
}
func (this *VnConfiguration_GlobalNetworkList) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*VnConfiguration_GlobalNetworkList)
	if !ok {
		that2, ok := that.(VnConfiguration_GlobalNetworkList)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.GlobalNetworkList.Equal(that1.GlobalNetworkList) {
		return false
	}
	return true
}
func (this *VPCAttachmentType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*VPCAttachmentType)
	if !ok {
		that2, ok := that.(VPCAttachmentType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.VpcId != that1.VpcId {
		return false
	}
	if len(this.Labels) != len(that1.Labels) {
		return false
	}
	for i := range this.Labels {
		if this.Labels[i] != that1.Labels[i] {
			return false
		}
	}
	return true
}
func (this *VPCIpPrefixesType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*VPCIpPrefixesType)
	if !ok {
		that2, ok := that.(VPCIpPrefixesType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Prefixes) != len(that1.Prefixes) {
		return false
	}
	for i := range this.Prefixes {
		if this.Prefixes[i] != that1.Prefixes[i] {
			return false
		}
	}
	return true
}
func (this *VPCAttachmentListType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*VPCAttachmentListType)
	if !ok {
		that2, ok := that.(VPCAttachmentListType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.VpcList) != len(that1.VpcList) {
		return false
	}
	for i := range this.VpcList {
		if !this.VpcList[i].Equal(that1.VpcList[i]) {
			return false
		}
	}
	return true
}
func (this *ActiveServicePoliciesType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ActiveServicePoliciesType)
	if !ok {
		that2, ok := that.(ActiveServicePoliciesType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.ServicePolicies) != len(that1.ServicePolicies) {
		return false
	}
	for i := range this.ServicePolicies {
		if !this.ServicePolicies[i].Equal(that1.ServicePolicies[i]) {
			return false
		}
	}
	return true
}
func (this *SecurityConfigType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SecurityConfigType)
	if !ok {
		that2, ok := that.(SecurityConfigType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.ForwardProxyChoice == nil {
		if this.ForwardProxyChoice != nil {
			return false
		}
	} else if this.ForwardProxyChoice == nil {
		return false
	} else if !this.ForwardProxyChoice.Equal(that1.ForwardProxyChoice) {
		return false
	}
	if that1.EastWestServicePolicyChoice == nil {
		if this.EastWestServicePolicyChoice != nil {
			return false
		}
	} else if this.EastWestServicePolicyChoice == nil {
		return false
	} else if !this.EastWestServicePolicyChoice.Equal(that1.EastWestServicePolicyChoice) {
		return false
	}
	if that1.NetworkPolicyChoice == nil {
		if this.NetworkPolicyChoice != nil {
			return false
		}
	} else if this.NetworkPolicyChoice == nil {
		return false
	} else if !this.NetworkPolicyChoice.Equal(that1.NetworkPolicyChoice) {
		return false
	}
	return true
}
func (this *SecurityConfigType_NoForwardProxy) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SecurityConfigType_NoForwardProxy)
	if !ok {
		that2, ok := that.(SecurityConfigType_NoForwardProxy)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NoForwardProxy.Equal(that1.NoForwardProxy) {
		return false
	}
	return true
}
func (this *SecurityConfigType_ActiveForwardProxyPolicies) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SecurityConfigType_ActiveForwardProxyPolicies)
	if !ok {
		that2, ok := that.(SecurityConfigType_ActiveForwardProxyPolicies)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ActiveForwardProxyPolicies.Equal(that1.ActiveForwardProxyPolicies) {
		return false
	}
	return true
}
func (this *SecurityConfigType_ForwardProxyAllowAll) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SecurityConfigType_ForwardProxyAllowAll)
	if !ok {
		that2, ok := that.(SecurityConfigType_ForwardProxyAllowAll)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ForwardProxyAllowAll.Equal(that1.ForwardProxyAllowAll) {
		return false
	}
	return true
}
func (this *SecurityConfigType_NoEastWestPolicy) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SecurityConfigType_NoEastWestPolicy)
	if !ok {
		that2, ok := that.(SecurityConfigType_NoEastWestPolicy)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NoEastWestPolicy.Equal(that1.NoEastWestPolicy) {
		return false
	}
	return true
}
func (this *SecurityConfigType_ActiveEastWestServicePolicies) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SecurityConfigType_ActiveEastWestServicePolicies)
	if !ok {
		that2, ok := that.(SecurityConfigType_ActiveEastWestServicePolicies)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ActiveEastWestServicePolicies.Equal(that1.ActiveEastWestServicePolicies) {
		return false
	}
	return true
}
func (this *SecurityConfigType_EastWestServicePolicyAllowAll) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SecurityConfigType_EastWestServicePolicyAllowAll)
	if !ok {
		that2, ok := that.(SecurityConfigType_EastWestServicePolicyAllowAll)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.EastWestServicePolicyAllowAll.Equal(that1.EastWestServicePolicyAllowAll) {
		return false
	}
	return true
}
func (this *SecurityConfigType_NoNetworkPolicy) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SecurityConfigType_NoNetworkPolicy)
	if !ok {
		that2, ok := that.(SecurityConfigType_NoNetworkPolicy)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NoNetworkPolicy.Equal(that1.NoNetworkPolicy) {
		return false
	}
	return true
}
func (this *SecurityConfigType_ActiveNetworkPolicies) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SecurityConfigType_ActiveNetworkPolicies)
	if !ok {
		that2, ok := that.(SecurityConfigType_ActiveNetworkPolicies)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ActiveNetworkPolicies.Equal(that1.ActiveNetworkPolicies) {
		return false
	}
	return true
}
func (this *AWSVPNTunnelConfigType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AWSVPNTunnelConfigType)
	if !ok {
		that2, ok := that.(AWSVPNTunnelConfigType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.NodeName != that1.NodeName {
		return false
	}
	if len(this.TunnelRemoteIp) != len(that1.TunnelRemoteIp) {
		return false
	}
	for i := range this.TunnelRemoteIp {
		if this.TunnelRemoteIp[i] != that1.TunnelRemoteIp[i] {
			return false
		}
	}
	if this.NodeId != that1.NodeId {
		return false
	}
	return true
}
func (this *AWSTGWInfoConfigType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AWSTGWInfoConfigType)
	if !ok {
		that2, ok := that.(AWSTGWInfoConfigType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.TgwId != that1.TgwId {
		return false
	}
	if this.VpcId != that1.VpcId {
		return false
	}
	return true
}
func (this *GlobalSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType)
	if !ok {
		that2, ok := that.(GlobalSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AwsParameters.Equal(that1.AwsParameters) {
		return false
	}
	if !this.VpcAttachments.Equal(that1.VpcAttachments) {
		return false
	}
	if !this.TgwSecurity.Equal(that1.TgwSecurity) {
		return false
	}
	if this.VolterraSoftwareVersion != that1.VolterraSoftwareVersion {
		return false
	}
	if this.OperatingSystemVersion != that1.OperatingSystemVersion {
		return false
	}
	if len(this.VpcIpPrefixes) != len(that1.VpcIpPrefixes) {
		return false
	}
	for i := range this.VpcIpPrefixes {
		if !this.VpcIpPrefixes[i].Equal(that1.VpcIpPrefixes[i]) {
			return false
		}
	}
	if !this.VnConfig.Equal(that1.VnConfig) {
		return false
	}
	if this.Address != that1.Address {
		return false
	}
	if !this.Coordinates.Equal(that1.Coordinates) {
		return false
	}
	if !this.UserModificationTimestamp.Equal(that1.UserModificationTimestamp) {
		return false
	}
	if !this.TgwInfo.Equal(that1.TgwInfo) {
		return false
	}
	if that1.LogsReceiverChoice == nil {
		if this.LogsReceiverChoice != nil {
			return false
		}
	} else if this.LogsReceiverChoice == nil {
		return false
	} else if !this.LogsReceiverChoice.Equal(that1.LogsReceiverChoice) {
		return false
	}
	if len(this.Tunnels) != len(that1.Tunnels) {
		return false
	}
	for i := range this.Tunnels {
		if !this.Tunnels[i].Equal(that1.Tunnels[i]) {
			return false
		}
	}
	if !this.TfParams.Equal(that1.TfParams) {
		return false
	}
	if !this.ViewInternal.Equal(that1.ViewInternal) {
		return false
	}
	return true
}
func (this *GlobalSpecType_LogsStreamingDisabled) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_LogsStreamingDisabled)
	if !ok {
		that2, ok := that.(GlobalSpecType_LogsStreamingDisabled)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.LogsStreamingDisabled.Equal(that1.LogsStreamingDisabled) {
		return false
	}
	return true
}
func (this *GlobalSpecType_LogReceiver) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_LogReceiver)
	if !ok {
		that2, ok := that.(GlobalSpecType_LogReceiver)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.LogReceiver.Equal(that1.LogReceiver) {
		return false
	}
	return true
}
func (this *CreateSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType)
	if !ok {
		that2, ok := that.(CreateSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AwsParameters.Equal(that1.AwsParameters) {
		return false
	}
	if !this.VpcAttachments.Equal(that1.VpcAttachments) {
		return false
	}
	if !this.VnConfig.Equal(that1.VnConfig) {
		return false
	}
	if !this.TgwSecurity.Equal(that1.TgwSecurity) {
		return false
	}
	if this.VolterraSoftwareVersion != that1.VolterraSoftwareVersion {
		return false
	}
	if this.OperatingSystemVersion != that1.OperatingSystemVersion {
		return false
	}
	if this.Address != that1.Address {
		return false
	}
	if !this.Coordinates.Equal(that1.Coordinates) {
		return false
	}
	if that1.LogsReceiverChoice == nil {
		if this.LogsReceiverChoice != nil {
			return false
		}
	} else if this.LogsReceiverChoice == nil {
		return false
	} else if !this.LogsReceiverChoice.Equal(that1.LogsReceiverChoice) {
		return false
	}
	return true
}
func (this *CreateSpecType_LogsStreamingDisabled) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_LogsStreamingDisabled)
	if !ok {
		that2, ok := that.(CreateSpecType_LogsStreamingDisabled)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.LogsStreamingDisabled.Equal(that1.LogsStreamingDisabled) {
		return false
	}
	return true
}
func (this *CreateSpecType_LogReceiver) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_LogReceiver)
	if !ok {
		that2, ok := that.(CreateSpecType_LogReceiver)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.LogReceiver.Equal(that1.LogReceiver) {
		return false
	}
	return true
}
func (this *ReplaceSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType)
	if !ok {
		that2, ok := that.(ReplaceSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.VpcAttachments.Equal(that1.VpcAttachments) {
		return false
	}
	if !this.VnConfig.Equal(that1.VnConfig) {
		return false
	}
	if !this.TgwSecurity.Equal(that1.TgwSecurity) {
		return false
	}
	if this.VolterraSoftwareVersion != that1.VolterraSoftwareVersion {
		return false
	}
	if this.OperatingSystemVersion != that1.OperatingSystemVersion {
		return false
	}
	if this.Address != that1.Address {
		return false
	}
	if !this.Coordinates.Equal(that1.Coordinates) {
		return false
	}
	if that1.LogsReceiverChoice == nil {
		if this.LogsReceiverChoice != nil {
			return false
		}
	} else if this.LogsReceiverChoice == nil {
		return false
	} else if !this.LogsReceiverChoice.Equal(that1.LogsReceiverChoice) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_LogsStreamingDisabled) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_LogsStreamingDisabled)
	if !ok {
		that2, ok := that.(ReplaceSpecType_LogsStreamingDisabled)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.LogsStreamingDisabled.Equal(that1.LogsStreamingDisabled) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_LogReceiver) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_LogReceiver)
	if !ok {
		that2, ok := that.(ReplaceSpecType_LogReceiver)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.LogReceiver.Equal(that1.LogReceiver) {
		return false
	}
	return true
}
func (this *GetSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType)
	if !ok {
		that2, ok := that.(GetSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AwsParameters.Equal(that1.AwsParameters) {
		return false
	}
	if !this.VpcAttachments.Equal(that1.VpcAttachments) {
		return false
	}
	if !this.VnConfig.Equal(that1.VnConfig) {
		return false
	}
	if !this.TgwSecurity.Equal(that1.TgwSecurity) {
		return false
	}
	if this.VolterraSoftwareVersion != that1.VolterraSoftwareVersion {
		return false
	}
	if this.OperatingSystemVersion != that1.OperatingSystemVersion {
		return false
	}
	if len(this.VpcIpPrefixes) != len(that1.VpcIpPrefixes) {
		return false
	}
	for i := range this.VpcIpPrefixes {
		if !this.VpcIpPrefixes[i].Equal(that1.VpcIpPrefixes[i]) {
			return false
		}
	}
	if len(this.Tunnels) != len(that1.Tunnels) {
		return false
	}
	for i := range this.Tunnels {
		if !this.Tunnels[i].Equal(that1.Tunnels[i]) {
			return false
		}
	}
	if this.Address != that1.Address {
		return false
	}
	if !this.Coordinates.Equal(that1.Coordinates) {
		return false
	}
	if !this.UserModificationTimestamp.Equal(that1.UserModificationTimestamp) {
		return false
	}
	if !this.TgwInfo.Equal(that1.TgwInfo) {
		return false
	}
	if that1.LogsReceiverChoice == nil {
		if this.LogsReceiverChoice != nil {
			return false
		}
	} else if this.LogsReceiverChoice == nil {
		return false
	} else if !this.LogsReceiverChoice.Equal(that1.LogsReceiverChoice) {
		return false
	}
	return true
}
func (this *GetSpecType_LogsStreamingDisabled) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_LogsStreamingDisabled)
	if !ok {
		that2, ok := that.(GetSpecType_LogsStreamingDisabled)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.LogsStreamingDisabled.Equal(that1.LogsStreamingDisabled) {
		return false
	}
	return true
}
func (this *GetSpecType_LogReceiver) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_LogReceiver)
	if !ok {
		that2, ok := that.(GetSpecType_LogReceiver)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.LogReceiver.Equal(that1.LogReceiver) {
		return false
	}
	return true
}
func (this *TGWAssignedASNType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&aws_tgw_site.TGWAssignedASNType{")
	s = append(s, "TgwAsn: "+fmt.Sprintf("%#v", this.TgwAsn)+",\n")
	s = append(s, "VolterraSiteAsn: "+fmt.Sprintf("%#v", this.VolterraSiteAsn)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ExistingTGWType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&aws_tgw_site.ExistingTGWType{")
	s = append(s, "TgwId: "+fmt.Sprintf("%#v", this.TgwId)+",\n")
	s = append(s, "TgwAsn: "+fmt.Sprintf("%#v", this.TgwAsn)+",\n")
	s = append(s, "VolterraSiteAsn: "+fmt.Sprintf("%#v", this.VolterraSiteAsn)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TGWParamsType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&aws_tgw_site.TGWParamsType{")
	if this.AsnChoice != nil {
		s = append(s, "AsnChoice: "+fmt.Sprintf("%#v", this.AsnChoice)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TGWParamsType_SystemGenerated) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&aws_tgw_site.TGWParamsType_SystemGenerated{` +
		`SystemGenerated:` + fmt.Sprintf("%#v", this.SystemGenerated) + `}`}, ", ")
	return s
}
func (this *TGWParamsType_UserAssigned) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&aws_tgw_site.TGWParamsType_UserAssigned{` +
		`UserAssigned:` + fmt.Sprintf("%#v", this.UserAssigned) + `}`}, ", ")
	return s
}
func (this *ServicesVPCType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 17)
	s = append(s, "&aws_tgw_site.ServicesVPCType{")
	s = append(s, "AwsRegion: "+fmt.Sprintf("%#v", this.AwsRegion)+",\n")
	if this.ServiceVpcChoice != nil {
		s = append(s, "ServiceVpcChoice: "+fmt.Sprintf("%#v", this.ServiceVpcChoice)+",\n")
	}
	if this.TgwChoice != nil {
		s = append(s, "TgwChoice: "+fmt.Sprintf("%#v", this.TgwChoice)+",\n")
	}
	s = append(s, "AwsCertifiedHw: "+fmt.Sprintf("%#v", this.AwsCertifiedHw)+",\n")
	s = append(s, "InstanceType: "+fmt.Sprintf("%#v", this.InstanceType)+",\n")
	s = append(s, "SshKey: "+fmt.Sprintf("%#v", this.SshKey)+",\n")
	if this.AzNodes != nil {
		s = append(s, "AzNodes: "+fmt.Sprintf("%#v", this.AzNodes)+",\n")
	}
	s = append(s, "NodesPerAz: "+fmt.Sprintf("%#v", this.NodesPerAz)+",\n")
	s = append(s, "DiskSize: "+fmt.Sprintf("%#v", this.DiskSize)+",\n")
	if this.Deployment != nil {
		s = append(s, "Deployment: "+fmt.Sprintf("%#v", this.Deployment)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ServicesVPCType_NewVpc) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&aws_tgw_site.ServicesVPCType_NewVpc{` +
		`NewVpc:` + fmt.Sprintf("%#v", this.NewVpc) + `}`}, ", ")
	return s
}
func (this *ServicesVPCType_VpcId) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&aws_tgw_site.ServicesVPCType_VpcId{` +
		`VpcId:` + fmt.Sprintf("%#v", this.VpcId) + `}`}, ", ")
	return s
}
func (this *ServicesVPCType_NewTgw) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&aws_tgw_site.ServicesVPCType_NewTgw{` +
		`NewTgw:` + fmt.Sprintf("%#v", this.NewTgw) + `}`}, ", ")
	return s
}
func (this *ServicesVPCType_ExistingTgw) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&aws_tgw_site.ServicesVPCType_ExistingTgw{` +
		`ExistingTgw:` + fmt.Sprintf("%#v", this.ExistingTgw) + `}`}, ", ")
	return s
}
func (this *ServicesVPCType_AwsCred) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&aws_tgw_site.ServicesVPCType_AwsCred{` +
		`AwsCred:` + fmt.Sprintf("%#v", this.AwsCred) + `}`}, ", ")
	return s
}
func (this *ServicesVPCType_Assisted) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&aws_tgw_site.ServicesVPCType_Assisted{` +
		`Assisted:` + fmt.Sprintf("%#v", this.Assisted) + `}`}, ", ")
	return s
}
func (this *VnConfiguration) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&aws_tgw_site.VnConfiguration{")
	if this.InsideStaticRouteChoice != nil {
		s = append(s, "InsideStaticRouteChoice: "+fmt.Sprintf("%#v", this.InsideStaticRouteChoice)+",\n")
	}
	if this.OutsideStaticRouteChoice != nil {
		s = append(s, "OutsideStaticRouteChoice: "+fmt.Sprintf("%#v", this.OutsideStaticRouteChoice)+",\n")
	}
	if this.GlobalNetworkChoice != nil {
		s = append(s, "GlobalNetworkChoice: "+fmt.Sprintf("%#v", this.GlobalNetworkChoice)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *VnConfiguration_NoInsideStaticRoutes) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&aws_tgw_site.VnConfiguration_NoInsideStaticRoutes{` +
		`NoInsideStaticRoutes:` + fmt.Sprintf("%#v", this.NoInsideStaticRoutes) + `}`}, ", ")
	return s
}
func (this *VnConfiguration_InsideStaticRoutes) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&aws_tgw_site.VnConfiguration_InsideStaticRoutes{` +
		`InsideStaticRoutes:` + fmt.Sprintf("%#v", this.InsideStaticRoutes) + `}`}, ", ")
	return s
}
func (this *VnConfiguration_NoOutsideStaticRoutes) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&aws_tgw_site.VnConfiguration_NoOutsideStaticRoutes{` +
		`NoOutsideStaticRoutes:` + fmt.Sprintf("%#v", this.NoOutsideStaticRoutes) + `}`}, ", ")
	return s
}
func (this *VnConfiguration_OutsideStaticRoutes) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&aws_tgw_site.VnConfiguration_OutsideStaticRoutes{` +
		`OutsideStaticRoutes:` + fmt.Sprintf("%#v", this.OutsideStaticRoutes) + `}`}, ", ")
	return s
}
func (this *VnConfiguration_NoGlobalNetwork) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&aws_tgw_site.VnConfiguration_NoGlobalNetwork{` +
		`NoGlobalNetwork:` + fmt.Sprintf("%#v", this.NoGlobalNetwork) + `}`}, ", ")
	return s
}
func (this *VnConfiguration_GlobalNetworkList) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&aws_tgw_site.VnConfiguration_GlobalNetworkList{` +
		`GlobalNetworkList:` + fmt.Sprintf("%#v", this.GlobalNetworkList) + `}`}, ", ")
	return s
}
func (this *VPCAttachmentType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&aws_tgw_site.VPCAttachmentType{")
	s = append(s, "VpcId: "+fmt.Sprintf("%#v", this.VpcId)+",\n")
	keysForLabels := make([]string, 0, len(this.Labels))
	for k, _ := range this.Labels {
		keysForLabels = append(keysForLabels, k)
	}
	sortkeys.Strings(keysForLabels)
	mapStringForLabels := "map[string]string{"
	for _, k := range keysForLabels {
		mapStringForLabels += fmt.Sprintf("%#v: %#v,", k, this.Labels[k])
	}
	mapStringForLabels += "}"
	if this.Labels != nil {
		s = append(s, "Labels: "+mapStringForLabels+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *VPCIpPrefixesType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&aws_tgw_site.VPCIpPrefixesType{")
	s = append(s, "Prefixes: "+fmt.Sprintf("%#v", this.Prefixes)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *VPCAttachmentListType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&aws_tgw_site.VPCAttachmentListType{")
	if this.VpcList != nil {
		s = append(s, "VpcList: "+fmt.Sprintf("%#v", this.VpcList)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ActiveServicePoliciesType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&aws_tgw_site.ActiveServicePoliciesType{")
	if this.ServicePolicies != nil {
		s = append(s, "ServicePolicies: "+fmt.Sprintf("%#v", this.ServicePolicies)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SecurityConfigType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 12)
	s = append(s, "&aws_tgw_site.SecurityConfigType{")
	if this.ForwardProxyChoice != nil {
		s = append(s, "ForwardProxyChoice: "+fmt.Sprintf("%#v", this.ForwardProxyChoice)+",\n")
	}
	if this.EastWestServicePolicyChoice != nil {
		s = append(s, "EastWestServicePolicyChoice: "+fmt.Sprintf("%#v", this.EastWestServicePolicyChoice)+",\n")
	}
	if this.NetworkPolicyChoice != nil {
		s = append(s, "NetworkPolicyChoice: "+fmt.Sprintf("%#v", this.NetworkPolicyChoice)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SecurityConfigType_NoForwardProxy) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&aws_tgw_site.SecurityConfigType_NoForwardProxy{` +
		`NoForwardProxy:` + fmt.Sprintf("%#v", this.NoForwardProxy) + `}`}, ", ")
	return s
}
func (this *SecurityConfigType_ActiveForwardProxyPolicies) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&aws_tgw_site.SecurityConfigType_ActiveForwardProxyPolicies{` +
		`ActiveForwardProxyPolicies:` + fmt.Sprintf("%#v", this.ActiveForwardProxyPolicies) + `}`}, ", ")
	return s
}
func (this *SecurityConfigType_ForwardProxyAllowAll) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&aws_tgw_site.SecurityConfigType_ForwardProxyAllowAll{` +
		`ForwardProxyAllowAll:` + fmt.Sprintf("%#v", this.ForwardProxyAllowAll) + `}`}, ", ")
	return s
}
func (this *SecurityConfigType_NoEastWestPolicy) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&aws_tgw_site.SecurityConfigType_NoEastWestPolicy{` +
		`NoEastWestPolicy:` + fmt.Sprintf("%#v", this.NoEastWestPolicy) + `}`}, ", ")
	return s
}
func (this *SecurityConfigType_ActiveEastWestServicePolicies) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&aws_tgw_site.SecurityConfigType_ActiveEastWestServicePolicies{` +
		`ActiveEastWestServicePolicies:` + fmt.Sprintf("%#v", this.ActiveEastWestServicePolicies) + `}`}, ", ")
	return s
}
func (this *SecurityConfigType_EastWestServicePolicyAllowAll) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&aws_tgw_site.SecurityConfigType_EastWestServicePolicyAllowAll{` +
		`EastWestServicePolicyAllowAll:` + fmt.Sprintf("%#v", this.EastWestServicePolicyAllowAll) + `}`}, ", ")
	return s
}
func (this *SecurityConfigType_NoNetworkPolicy) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&aws_tgw_site.SecurityConfigType_NoNetworkPolicy{` +
		`NoNetworkPolicy:` + fmt.Sprintf("%#v", this.NoNetworkPolicy) + `}`}, ", ")
	return s
}
func (this *SecurityConfigType_ActiveNetworkPolicies) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&aws_tgw_site.SecurityConfigType_ActiveNetworkPolicies{` +
		`ActiveNetworkPolicies:` + fmt.Sprintf("%#v", this.ActiveNetworkPolicies) + `}`}, ", ")
	return s
}
func (this *AWSVPNTunnelConfigType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&aws_tgw_site.AWSVPNTunnelConfigType{")
	s = append(s, "NodeName: "+fmt.Sprintf("%#v", this.NodeName)+",\n")
	s = append(s, "TunnelRemoteIp: "+fmt.Sprintf("%#v", this.TunnelRemoteIp)+",\n")
	s = append(s, "NodeId: "+fmt.Sprintf("%#v", this.NodeId)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AWSTGWInfoConfigType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&aws_tgw_site.AWSTGWInfoConfigType{")
	s = append(s, "TgwId: "+fmt.Sprintf("%#v", this.TgwId)+",\n")
	s = append(s, "VpcId: "+fmt.Sprintf("%#v", this.VpcId)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GlobalSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 20)
	s = append(s, "&aws_tgw_site.GlobalSpecType{")
	if this.AwsParameters != nil {
		s = append(s, "AwsParameters: "+fmt.Sprintf("%#v", this.AwsParameters)+",\n")
	}
	if this.VpcAttachments != nil {
		s = append(s, "VpcAttachments: "+fmt.Sprintf("%#v", this.VpcAttachments)+",\n")
	}
	if this.TgwSecurity != nil {
		s = append(s, "TgwSecurity: "+fmt.Sprintf("%#v", this.TgwSecurity)+",\n")
	}
	s = append(s, "VolterraSoftwareVersion: "+fmt.Sprintf("%#v", this.VolterraSoftwareVersion)+",\n")
	s = append(s, "OperatingSystemVersion: "+fmt.Sprintf("%#v", this.OperatingSystemVersion)+",\n")
	keysForVpcIpPrefixes := make([]string, 0, len(this.VpcIpPrefixes))
	for k, _ := range this.VpcIpPrefixes {
		keysForVpcIpPrefixes = append(keysForVpcIpPrefixes, k)
	}
	sortkeys.Strings(keysForVpcIpPrefixes)
	mapStringForVpcIpPrefixes := "map[string]*VPCIpPrefixesType{"
	for _, k := range keysForVpcIpPrefixes {
		mapStringForVpcIpPrefixes += fmt.Sprintf("%#v: %#v,", k, this.VpcIpPrefixes[k])
	}
	mapStringForVpcIpPrefixes += "}"
	if this.VpcIpPrefixes != nil {
		s = append(s, "VpcIpPrefixes: "+mapStringForVpcIpPrefixes+",\n")
	}
	if this.VnConfig != nil {
		s = append(s, "VnConfig: "+fmt.Sprintf("%#v", this.VnConfig)+",\n")
	}
	s = append(s, "Address: "+fmt.Sprintf("%#v", this.Address)+",\n")
	if this.Coordinates != nil {
		s = append(s, "Coordinates: "+fmt.Sprintf("%#v", this.Coordinates)+",\n")
	}
	if this.UserModificationTimestamp != nil {
		s = append(s, "UserModificationTimestamp: "+fmt.Sprintf("%#v", this.UserModificationTimestamp)+",\n")
	}
	if this.TgwInfo != nil {
		s = append(s, "TgwInfo: "+fmt.Sprintf("%#v", this.TgwInfo)+",\n")
	}
	if this.LogsReceiverChoice != nil {
		s = append(s, "LogsReceiverChoice: "+fmt.Sprintf("%#v", this.LogsReceiverChoice)+",\n")
	}
	if this.Tunnels != nil {
		s = append(s, "Tunnels: "+fmt.Sprintf("%#v", this.Tunnels)+",\n")
	}
	if this.TfParams != nil {
		s = append(s, "TfParams: "+fmt.Sprintf("%#v", this.TfParams)+",\n")
	}
	if this.ViewInternal != nil {
		s = append(s, "ViewInternal: "+fmt.Sprintf("%#v", this.ViewInternal)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GlobalSpecType_LogsStreamingDisabled) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&aws_tgw_site.GlobalSpecType_LogsStreamingDisabled{` +
		`LogsStreamingDisabled:` + fmt.Sprintf("%#v", this.LogsStreamingDisabled) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_LogReceiver) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&aws_tgw_site.GlobalSpecType_LogReceiver{` +
		`LogReceiver:` + fmt.Sprintf("%#v", this.LogReceiver) + `}`}, ", ")
	return s
}
func (this *CreateSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 14)
	s = append(s, "&aws_tgw_site.CreateSpecType{")
	if this.AwsParameters != nil {
		s = append(s, "AwsParameters: "+fmt.Sprintf("%#v", this.AwsParameters)+",\n")
	}
	if this.VpcAttachments != nil {
		s = append(s, "VpcAttachments: "+fmt.Sprintf("%#v", this.VpcAttachments)+",\n")
	}
	if this.VnConfig != nil {
		s = append(s, "VnConfig: "+fmt.Sprintf("%#v", this.VnConfig)+",\n")
	}
	if this.TgwSecurity != nil {
		s = append(s, "TgwSecurity: "+fmt.Sprintf("%#v", this.TgwSecurity)+",\n")
	}
	s = append(s, "VolterraSoftwareVersion: "+fmt.Sprintf("%#v", this.VolterraSoftwareVersion)+",\n")
	s = append(s, "OperatingSystemVersion: "+fmt.Sprintf("%#v", this.OperatingSystemVersion)+",\n")
	s = append(s, "Address: "+fmt.Sprintf("%#v", this.Address)+",\n")
	if this.Coordinates != nil {
		s = append(s, "Coordinates: "+fmt.Sprintf("%#v", this.Coordinates)+",\n")
	}
	if this.LogsReceiverChoice != nil {
		s = append(s, "LogsReceiverChoice: "+fmt.Sprintf("%#v", this.LogsReceiverChoice)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CreateSpecType_LogsStreamingDisabled) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&aws_tgw_site.CreateSpecType_LogsStreamingDisabled{` +
		`LogsStreamingDisabled:` + fmt.Sprintf("%#v", this.LogsStreamingDisabled) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_LogReceiver) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&aws_tgw_site.CreateSpecType_LogReceiver{` +
		`LogReceiver:` + fmt.Sprintf("%#v", this.LogReceiver) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 13)
	s = append(s, "&aws_tgw_site.ReplaceSpecType{")
	if this.VpcAttachments != nil {
		s = append(s, "VpcAttachments: "+fmt.Sprintf("%#v", this.VpcAttachments)+",\n")
	}
	if this.VnConfig != nil {
		s = append(s, "VnConfig: "+fmt.Sprintf("%#v", this.VnConfig)+",\n")
	}
	if this.TgwSecurity != nil {
		s = append(s, "TgwSecurity: "+fmt.Sprintf("%#v", this.TgwSecurity)+",\n")
	}
	s = append(s, "VolterraSoftwareVersion: "+fmt.Sprintf("%#v", this.VolterraSoftwareVersion)+",\n")
	s = append(s, "OperatingSystemVersion: "+fmt.Sprintf("%#v", this.OperatingSystemVersion)+",\n")
	s = append(s, "Address: "+fmt.Sprintf("%#v", this.Address)+",\n")
	if this.Coordinates != nil {
		s = append(s, "Coordinates: "+fmt.Sprintf("%#v", this.Coordinates)+",\n")
	}
	if this.LogsReceiverChoice != nil {
		s = append(s, "LogsReceiverChoice: "+fmt.Sprintf("%#v", this.LogsReceiverChoice)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ReplaceSpecType_LogsStreamingDisabled) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&aws_tgw_site.ReplaceSpecType_LogsStreamingDisabled{` +
		`LogsStreamingDisabled:` + fmt.Sprintf("%#v", this.LogsStreamingDisabled) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_LogReceiver) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&aws_tgw_site.ReplaceSpecType_LogReceiver{` +
		`LogReceiver:` + fmt.Sprintf("%#v", this.LogReceiver) + `}`}, ", ")
	return s
}
func (this *GetSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 18)
	s = append(s, "&aws_tgw_site.GetSpecType{")
	if this.AwsParameters != nil {
		s = append(s, "AwsParameters: "+fmt.Sprintf("%#v", this.AwsParameters)+",\n")
	}
	if this.VpcAttachments != nil {
		s = append(s, "VpcAttachments: "+fmt.Sprintf("%#v", this.VpcAttachments)+",\n")
	}
	if this.VnConfig != nil {
		s = append(s, "VnConfig: "+fmt.Sprintf("%#v", this.VnConfig)+",\n")
	}
	if this.TgwSecurity != nil {
		s = append(s, "TgwSecurity: "+fmt.Sprintf("%#v", this.TgwSecurity)+",\n")
	}
	s = append(s, "VolterraSoftwareVersion: "+fmt.Sprintf("%#v", this.VolterraSoftwareVersion)+",\n")
	s = append(s, "OperatingSystemVersion: "+fmt.Sprintf("%#v", this.OperatingSystemVersion)+",\n")
	keysForVpcIpPrefixes := make([]string, 0, len(this.VpcIpPrefixes))
	for k, _ := range this.VpcIpPrefixes {
		keysForVpcIpPrefixes = append(keysForVpcIpPrefixes, k)
	}
	sortkeys.Strings(keysForVpcIpPrefixes)
	mapStringForVpcIpPrefixes := "map[string]*VPCIpPrefixesType{"
	for _, k := range keysForVpcIpPrefixes {
		mapStringForVpcIpPrefixes += fmt.Sprintf("%#v: %#v,", k, this.VpcIpPrefixes[k])
	}
	mapStringForVpcIpPrefixes += "}"
	if this.VpcIpPrefixes != nil {
		s = append(s, "VpcIpPrefixes: "+mapStringForVpcIpPrefixes+",\n")
	}
	if this.Tunnels != nil {
		s = append(s, "Tunnels: "+fmt.Sprintf("%#v", this.Tunnels)+",\n")
	}
	s = append(s, "Address: "+fmt.Sprintf("%#v", this.Address)+",\n")
	if this.Coordinates != nil {
		s = append(s, "Coordinates: "+fmt.Sprintf("%#v", this.Coordinates)+",\n")
	}
	if this.UserModificationTimestamp != nil {
		s = append(s, "UserModificationTimestamp: "+fmt.Sprintf("%#v", this.UserModificationTimestamp)+",\n")
	}
	if this.TgwInfo != nil {
		s = append(s, "TgwInfo: "+fmt.Sprintf("%#v", this.TgwInfo)+",\n")
	}
	if this.LogsReceiverChoice != nil {
		s = append(s, "LogsReceiverChoice: "+fmt.Sprintf("%#v", this.LogsReceiverChoice)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetSpecType_LogsStreamingDisabled) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&aws_tgw_site.GetSpecType_LogsStreamingDisabled{` +
		`LogsStreamingDisabled:` + fmt.Sprintf("%#v", this.LogsStreamingDisabled) + `}`}, ", ")
	return s
}
func (this *GetSpecType_LogReceiver) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&aws_tgw_site.GetSpecType_LogReceiver{` +
		`LogReceiver:` + fmt.Sprintf("%#v", this.LogReceiver) + `}`}, ", ")
	return s
}
func valueToGoStringTypes(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *TGWAssignedASNType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TGWAssignedASNType) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.TgwAsn != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.TgwAsn))
	}
	if m.VolterraSiteAsn != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.VolterraSiteAsn))
	}
	return i, nil
}

func (m *ExistingTGWType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ExistingTGWType) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.TgwId) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTypes(dAtA, i, uint64(len(m.TgwId)))
		i += copy(dAtA[i:], m.TgwId)
	}
	if m.TgwAsn != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.TgwAsn))
	}
	if m.VolterraSiteAsn != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.VolterraSiteAsn))
	}
	return i, nil
}

func (m *TGWParamsType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TGWParamsType) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.AsnChoice != nil {
		nn1, err := m.AsnChoice.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn1
	}
	return i, nil
}

func (m *TGWParamsType_SystemGenerated) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.SystemGenerated != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.SystemGenerated.Size()))
		n2, err := m.SystemGenerated.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	return i, nil
}
func (m *TGWParamsType_UserAssigned) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.UserAssigned != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.UserAssigned.Size()))
		n3, err := m.UserAssigned.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	return i, nil
}
func (m *ServicesVPCType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ServicesVPCType) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.AwsRegion) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTypes(dAtA, i, uint64(len(m.AwsRegion)))
		i += copy(dAtA[i:], m.AwsRegion)
	}
	if m.ServiceVpcChoice != nil {
		nn4, err := m.ServiceVpcChoice.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn4
	}
	if m.TgwChoice != nil {
		nn5, err := m.TgwChoice.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn5
	}
	if len(m.AwsCertifiedHw) > 0 {
		dAtA[i] = 0x42
		i++
		i = encodeVarintTypes(dAtA, i, uint64(len(m.AwsCertifiedHw)))
		i += copy(dAtA[i:], m.AwsCertifiedHw)
	}
	if len(m.InstanceType) > 0 {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(len(m.InstanceType)))
		i += copy(dAtA[i:], m.InstanceType)
	}
	if len(m.SshKey) > 0 {
		dAtA[i] = 0x52
		i++
		i = encodeVarintTypes(dAtA, i, uint64(len(m.SshKey)))
		i += copy(dAtA[i:], m.SshKey)
	}
	if len(m.AzNodes) > 0 {
		for _, msg := range m.AzNodes {
			dAtA[i] = 0x5a
			i++
			i = encodeVarintTypes(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.NodesPerAz != 0 {
		dAtA[i] = 0x60
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.NodesPerAz))
	}
	if m.Deployment != nil {
		nn6, err := m.Deployment.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn6
	}
	if m.DiskSize != 0 {
		dAtA[i] = 0xb0
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.DiskSize))
	}
	return i, nil
}

func (m *ServicesVPCType_NewVpc) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.NewVpc != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.NewVpc.Size()))
		n7, err := m.NewVpc.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	return i, nil
}
func (m *ServicesVPCType_VpcId) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x22
	i++
	i = encodeVarintTypes(dAtA, i, uint64(len(m.VpcId)))
	i += copy(dAtA[i:], m.VpcId)
	return i, nil
}
func (m *ServicesVPCType_NewTgw) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.NewTgw != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.NewTgw.Size()))
		n8, err := m.NewTgw.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n8
	}
	return i, nil
}
func (m *ServicesVPCType_ExistingTgw) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.ExistingTgw != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.ExistingTgw.Size()))
		n9, err := m.ExistingTgw.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n9
	}
	return i, nil
}
func (m *ServicesVPCType_AwsCred) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.AwsCred != nil {
		dAtA[i] = 0x72
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.AwsCred.Size()))
		n10, err := m.AwsCred.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n10
	}
	return i, nil
}
func (m *ServicesVPCType_Assisted) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Assisted != nil {
		dAtA[i] = 0x7a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.Assisted.Size()))
		n11, err := m.Assisted.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n11
	}
	return i, nil
}
func (m *VnConfiguration) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VnConfiguration) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.InsideStaticRouteChoice != nil {
		nn12, err := m.InsideStaticRouteChoice.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn12
	}
	if m.OutsideStaticRouteChoice != nil {
		nn13, err := m.OutsideStaticRouteChoice.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn13
	}
	if m.GlobalNetworkChoice != nil {
		nn14, err := m.GlobalNetworkChoice.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn14
	}
	return i, nil
}

func (m *VnConfiguration_NoInsideStaticRoutes) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.NoInsideStaticRoutes != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.NoInsideStaticRoutes.Size()))
		n15, err := m.NoInsideStaticRoutes.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n15
	}
	return i, nil
}
func (m *VnConfiguration_InsideStaticRoutes) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.InsideStaticRoutes != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.InsideStaticRoutes.Size()))
		n16, err := m.InsideStaticRoutes.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n16
	}
	return i, nil
}
func (m *VnConfiguration_NoOutsideStaticRoutes) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.NoOutsideStaticRoutes != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.NoOutsideStaticRoutes.Size()))
		n17, err := m.NoOutsideStaticRoutes.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n17
	}
	return i, nil
}
func (m *VnConfiguration_OutsideStaticRoutes) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.OutsideStaticRoutes != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.OutsideStaticRoutes.Size()))
		n18, err := m.OutsideStaticRoutes.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n18
	}
	return i, nil
}
func (m *VnConfiguration_NoGlobalNetwork) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.NoGlobalNetwork != nil {
		dAtA[i] = 0x42
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.NoGlobalNetwork.Size()))
		n19, err := m.NoGlobalNetwork.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n19
	}
	return i, nil
}
func (m *VnConfiguration_GlobalNetworkList) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.GlobalNetworkList != nil {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.GlobalNetworkList.Size()))
		n20, err := m.GlobalNetworkList.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n20
	}
	return i, nil
}
func (m *VPCAttachmentType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VPCAttachmentType) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.VpcId) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTypes(dAtA, i, uint64(len(m.VpcId)))
		i += copy(dAtA[i:], m.VpcId)
	}
	if len(m.Labels) > 0 {
		keysForLabels := make([]string, 0, len(m.Labels))
		for k, _ := range m.Labels {
			keysForLabels = append(keysForLabels, string(k))
		}
		sortkeys.Strings(keysForLabels)
		for _, k := range keysForLabels {
			dAtA[i] = 0x12
			i++
			v := m.Labels[string(k)]
			mapSize := 1 + len(k) + sovTypes(uint64(len(k))) + 1 + len(v) + sovTypes(uint64(len(v)))
			i = encodeVarintTypes(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintTypes(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			dAtA[i] = 0x12
			i++
			i = encodeVarintTypes(dAtA, i, uint64(len(v)))
			i += copy(dAtA[i:], v)
		}
	}
	return i, nil
}

func (m *VPCIpPrefixesType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VPCIpPrefixesType) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Prefixes) > 0 {
		for _, s := range m.Prefixes {
			dAtA[i] = 0xa
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	return i, nil
}

func (m *VPCAttachmentListType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VPCAttachmentListType) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.VpcList) > 0 {
		for _, msg := range m.VpcList {
			dAtA[i] = 0xa
			i++
			i = encodeVarintTypes(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *ActiveServicePoliciesType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ActiveServicePoliciesType) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ServicePolicies) > 0 {
		for _, msg := range m.ServicePolicies {
			dAtA[i] = 0xa
			i++
			i = encodeVarintTypes(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *SecurityConfigType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SecurityConfigType) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ForwardProxyChoice != nil {
		nn21, err := m.ForwardProxyChoice.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn21
	}
	if m.NetworkPolicyChoice != nil {
		nn22, err := m.NetworkPolicyChoice.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn22
	}
	if m.EastWestServicePolicyChoice != nil {
		nn23, err := m.EastWestServicePolicyChoice.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn23
	}
	return i, nil
}

func (m *SecurityConfigType_NoForwardProxy) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.NoForwardProxy != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.NoForwardProxy.Size()))
		n24, err := m.NoForwardProxy.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n24
	}
	return i, nil
}
func (m *SecurityConfigType_ActiveForwardProxyPolicies) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.ActiveForwardProxyPolicies != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.ActiveForwardProxyPolicies.Size()))
		n25, err := m.ActiveForwardProxyPolicies.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n25
	}
	return i, nil
}
func (m *SecurityConfigType_NoNetworkPolicy) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.NoNetworkPolicy != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.NoNetworkPolicy.Size()))
		n26, err := m.NoNetworkPolicy.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n26
	}
	return i, nil
}
func (m *SecurityConfigType_ActiveNetworkPolicies) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.ActiveNetworkPolicies != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.ActiveNetworkPolicies.Size()))
		n27, err := m.ActiveNetworkPolicies.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n27
	}
	return i, nil
}
func (m *SecurityConfigType_ForwardProxyAllowAll) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.ForwardProxyAllowAll != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.ForwardProxyAllowAll.Size()))
		n28, err := m.ForwardProxyAllowAll.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n28
	}
	return i, nil
}
func (m *SecurityConfigType_NoEastWestPolicy) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.NoEastWestPolicy != nil {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.NoEastWestPolicy.Size()))
		n29, err := m.NoEastWestPolicy.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n29
	}
	return i, nil
}
func (m *SecurityConfigType_ActiveEastWestServicePolicies) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.ActiveEastWestServicePolicies != nil {
		dAtA[i] = 0x52
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.ActiveEastWestServicePolicies.Size()))
		n30, err := m.ActiveEastWestServicePolicies.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n30
	}
	return i, nil
}
func (m *SecurityConfigType_EastWestServicePolicyAllowAll) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.EastWestServicePolicyAllowAll != nil {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.EastWestServicePolicyAllowAll.Size()))
		n31, err := m.EastWestServicePolicyAllowAll.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n31
	}
	return i, nil
}
func (m *AWSVPNTunnelConfigType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AWSVPNTunnelConfigType) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.NodeName) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTypes(dAtA, i, uint64(len(m.NodeName)))
		i += copy(dAtA[i:], m.NodeName)
	}
	if len(m.TunnelRemoteIp) > 0 {
		for _, s := range m.TunnelRemoteIp {
			dAtA[i] = 0x12
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.NodeId) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(len(m.NodeId)))
		i += copy(dAtA[i:], m.NodeId)
	}
	return i, nil
}

func (m *AWSTGWInfoConfigType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AWSTGWInfoConfigType) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.TgwId) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTypes(dAtA, i, uint64(len(m.TgwId)))
		i += copy(dAtA[i:], m.TgwId)
	}
	if len(m.VpcId) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTypes(dAtA, i, uint64(len(m.VpcId)))
		i += copy(dAtA[i:], m.VpcId)
	}
	return i, nil
}

func (m *GlobalSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GlobalSpecType) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.AwsParameters != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.AwsParameters.Size()))
		n32, err := m.AwsParameters.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n32
	}
	if m.VpcAttachments != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.VpcAttachments.Size()))
		n33, err := m.VpcAttachments.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n33
	}
	if m.TgwSecurity != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.TgwSecurity.Size()))
		n34, err := m.TgwSecurity.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n34
	}
	if len(m.VolterraSoftwareVersion) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintTypes(dAtA, i, uint64(len(m.VolterraSoftwareVersion)))
		i += copy(dAtA[i:], m.VolterraSoftwareVersion)
	}
	if len(m.OperatingSystemVersion) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(len(m.OperatingSystemVersion)))
		i += copy(dAtA[i:], m.OperatingSystemVersion)
	}
	if len(m.VpcIpPrefixes) > 0 {
		keysForVpcIpPrefixes := make([]string, 0, len(m.VpcIpPrefixes))
		for k, _ := range m.VpcIpPrefixes {
			keysForVpcIpPrefixes = append(keysForVpcIpPrefixes, string(k))
		}
		sortkeys.Strings(keysForVpcIpPrefixes)
		for _, k := range keysForVpcIpPrefixes {
			dAtA[i] = 0x32
			i++
			v := m.VpcIpPrefixes[string(k)]
			msgSize := 0
			if v != nil {
				msgSize = v.Size()
				msgSize += 1 + sovTypes(uint64(msgSize))
			}
			mapSize := 1 + len(k) + sovTypes(uint64(len(k))) + msgSize
			i = encodeVarintTypes(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintTypes(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			if v != nil {
				dAtA[i] = 0x12
				i++
				i = encodeVarintTypes(dAtA, i, uint64(v.Size()))
				n35, err := v.MarshalTo(dAtA[i:])
				if err != nil {
					return 0, err
				}
				i += n35
			}
		}
	}
	if m.VnConfig != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.VnConfig.Size()))
		n36, err := m.VnConfig.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n36
	}
	if len(m.Address) > 0 {
		dAtA[i] = 0x42
		i++
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Address)))
		i += copy(dAtA[i:], m.Address)
	}
	if m.Coordinates != nil {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.Coordinates.Size()))
		n37, err := m.Coordinates.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n37
	}
	if m.UserModificationTimestamp != nil {
		dAtA[i] = 0x52
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.UserModificationTimestamp.Size()))
		n38, err := m.UserModificationTimestamp.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n38
	}
	if m.TgwInfo != nil {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.TgwInfo.Size()))
		n39, err := m.TgwInfo.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n39
	}
	if m.LogsReceiverChoice != nil {
		nn40, err := m.LogsReceiverChoice.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn40
	}
	if len(m.Tunnels) > 0 {
		for _, msg := range m.Tunnels {
			dAtA[i] = 0xb2
			i++
			dAtA[i] = 0x3e
			i++
			i = encodeVarintTypes(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.TfParams != nil {
		dAtA[i] = 0xba
		i++
		dAtA[i] = 0x3e
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.TfParams.Size()))
		n41, err := m.TfParams.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n41
	}
	if m.ViewInternal != nil {
		dAtA[i] = 0xc2
		i++
		dAtA[i] = 0x3e
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.ViewInternal.Size()))
		n42, err := m.ViewInternal.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n42
	}
	return i, nil
}

func (m *GlobalSpecType_LogsStreamingDisabled) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.LogsStreamingDisabled != nil {
		dAtA[i] = 0x6a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.LogsStreamingDisabled.Size()))
		n43, err := m.LogsStreamingDisabled.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n43
	}
	return i, nil
}
func (m *GlobalSpecType_LogReceiver) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.LogReceiver != nil {
		dAtA[i] = 0x72
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.LogReceiver.Size()))
		n44, err := m.LogReceiver.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n44
	}
	return i, nil
}
func (m *CreateSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateSpecType) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.AwsParameters != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.AwsParameters.Size()))
		n45, err := m.AwsParameters.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n45
	}
	if m.VpcAttachments != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.VpcAttachments.Size()))
		n46, err := m.VpcAttachments.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n46
	}
	if m.TgwSecurity != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.TgwSecurity.Size()))
		n47, err := m.TgwSecurity.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n47
	}
	if len(m.VolterraSoftwareVersion) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintTypes(dAtA, i, uint64(len(m.VolterraSoftwareVersion)))
		i += copy(dAtA[i:], m.VolterraSoftwareVersion)
	}
	if len(m.OperatingSystemVersion) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(len(m.OperatingSystemVersion)))
		i += copy(dAtA[i:], m.OperatingSystemVersion)
	}
	if m.VnConfig != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.VnConfig.Size()))
		n48, err := m.VnConfig.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n48
	}
	if len(m.Address) > 0 {
		dAtA[i] = 0x42
		i++
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Address)))
		i += copy(dAtA[i:], m.Address)
	}
	if m.Coordinates != nil {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.Coordinates.Size()))
		n49, err := m.Coordinates.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n49
	}
	if m.LogsReceiverChoice != nil {
		nn50, err := m.LogsReceiverChoice.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn50
	}
	return i, nil
}

func (m *CreateSpecType_LogsStreamingDisabled) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.LogsStreamingDisabled != nil {
		dAtA[i] = 0x6a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.LogsStreamingDisabled.Size()))
		n51, err := m.LogsStreamingDisabled.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n51
	}
	return i, nil
}
func (m *CreateSpecType_LogReceiver) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.LogReceiver != nil {
		dAtA[i] = 0x72
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.LogReceiver.Size()))
		n52, err := m.LogReceiver.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n52
	}
	return i, nil
}
func (m *ReplaceSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplaceSpecType) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.VpcAttachments != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.VpcAttachments.Size()))
		n53, err := m.VpcAttachments.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n53
	}
	if m.TgwSecurity != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.TgwSecurity.Size()))
		n54, err := m.TgwSecurity.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n54
	}
	if len(m.VolterraSoftwareVersion) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintTypes(dAtA, i, uint64(len(m.VolterraSoftwareVersion)))
		i += copy(dAtA[i:], m.VolterraSoftwareVersion)
	}
	if len(m.OperatingSystemVersion) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(len(m.OperatingSystemVersion)))
		i += copy(dAtA[i:], m.OperatingSystemVersion)
	}
	if m.VnConfig != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.VnConfig.Size()))
		n55, err := m.VnConfig.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n55
	}
	if len(m.Address) > 0 {
		dAtA[i] = 0x42
		i++
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Address)))
		i += copy(dAtA[i:], m.Address)
	}
	if m.Coordinates != nil {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.Coordinates.Size()))
		n56, err := m.Coordinates.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n56
	}
	if m.LogsReceiverChoice != nil {
		nn57, err := m.LogsReceiverChoice.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn57
	}
	return i, nil
}

func (m *ReplaceSpecType_LogsStreamingDisabled) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.LogsStreamingDisabled != nil {
		dAtA[i] = 0x6a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.LogsStreamingDisabled.Size()))
		n58, err := m.LogsStreamingDisabled.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n58
	}
	return i, nil
}
func (m *ReplaceSpecType_LogReceiver) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.LogReceiver != nil {
		dAtA[i] = 0x72
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.LogReceiver.Size()))
		n59, err := m.LogReceiver.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n59
	}
	return i, nil
}
func (m *GetSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetSpecType) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.AwsParameters != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.AwsParameters.Size()))
		n60, err := m.AwsParameters.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n60
	}
	if m.VpcAttachments != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.VpcAttachments.Size()))
		n61, err := m.VpcAttachments.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n61
	}
	if m.TgwSecurity != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.TgwSecurity.Size()))
		n62, err := m.TgwSecurity.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n62
	}
	if len(m.VolterraSoftwareVersion) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintTypes(dAtA, i, uint64(len(m.VolterraSoftwareVersion)))
		i += copy(dAtA[i:], m.VolterraSoftwareVersion)
	}
	if len(m.OperatingSystemVersion) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(len(m.OperatingSystemVersion)))
		i += copy(dAtA[i:], m.OperatingSystemVersion)
	}
	if len(m.VpcIpPrefixes) > 0 {
		keysForVpcIpPrefixes := make([]string, 0, len(m.VpcIpPrefixes))
		for k, _ := range m.VpcIpPrefixes {
			keysForVpcIpPrefixes = append(keysForVpcIpPrefixes, string(k))
		}
		sortkeys.Strings(keysForVpcIpPrefixes)
		for _, k := range keysForVpcIpPrefixes {
			dAtA[i] = 0x32
			i++
			v := m.VpcIpPrefixes[string(k)]
			msgSize := 0
			if v != nil {
				msgSize = v.Size()
				msgSize += 1 + sovTypes(uint64(msgSize))
			}
			mapSize := 1 + len(k) + sovTypes(uint64(len(k))) + msgSize
			i = encodeVarintTypes(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintTypes(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			if v != nil {
				dAtA[i] = 0x12
				i++
				i = encodeVarintTypes(dAtA, i, uint64(v.Size()))
				n63, err := v.MarshalTo(dAtA[i:])
				if err != nil {
					return 0, err
				}
				i += n63
			}
		}
	}
	if m.VnConfig != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.VnConfig.Size()))
		n64, err := m.VnConfig.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n64
	}
	if len(m.Address) > 0 {
		dAtA[i] = 0x42
		i++
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Address)))
		i += copy(dAtA[i:], m.Address)
	}
	if m.Coordinates != nil {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.Coordinates.Size()))
		n65, err := m.Coordinates.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n65
	}
	if m.UserModificationTimestamp != nil {
		dAtA[i] = 0x52
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.UserModificationTimestamp.Size()))
		n66, err := m.UserModificationTimestamp.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n66
	}
	if m.TgwInfo != nil {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.TgwInfo.Size()))
		n67, err := m.TgwInfo.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n67
	}
	if m.LogsReceiverChoice != nil {
		nn68, err := m.LogsReceiverChoice.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn68
	}
	if len(m.Tunnels) > 0 {
		for _, msg := range m.Tunnels {
			dAtA[i] = 0xb2
			i++
			dAtA[i] = 0x3e
			i++
			i = encodeVarintTypes(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *GetSpecType_LogsStreamingDisabled) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.LogsStreamingDisabled != nil {
		dAtA[i] = 0x6a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.LogsStreamingDisabled.Size()))
		n69, err := m.LogsStreamingDisabled.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n69
	}
	return i, nil
}
func (m *GetSpecType_LogReceiver) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.LogReceiver != nil {
		dAtA[i] = 0x72
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.LogReceiver.Size()))
		n70, err := m.LogReceiver.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n70
	}
	return i, nil
}
func encodeVarintTypes(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func NewPopulatedTGWAssignedASNType(r randyTypes, easy bool) *TGWAssignedASNType {
	this := &TGWAssignedASNType{}
	this.TgwAsn = uint32(r.Uint32())
	this.VolterraSiteAsn = uint32(r.Uint32())
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedExistingTGWType(r randyTypes, easy bool) *ExistingTGWType {
	this := &ExistingTGWType{}
	this.TgwId = string(randStringTypes(r))
	this.TgwAsn = uint32(r.Uint32())
	this.VolterraSiteAsn = uint32(r.Uint32())
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedTGWParamsType(r randyTypes, easy bool) *TGWParamsType {
	this := &TGWParamsType{}
	oneofNumber_AsnChoice := []int32{2, 3}[r.Intn(2)]
	switch oneofNumber_AsnChoice {
	case 2:
		this.AsnChoice = NewPopulatedTGWParamsType_SystemGenerated(r, easy)
	case 3:
		this.AsnChoice = NewPopulatedTGWParamsType_UserAssigned(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedTGWParamsType_SystemGenerated(r randyTypes, easy bool) *TGWParamsType_SystemGenerated {
	this := &TGWParamsType_SystemGenerated{}
	this.SystemGenerated = ves_io_schema4.NewPopulatedEmpty(r, easy)
	return this
}
func NewPopulatedTGWParamsType_UserAssigned(r randyTypes, easy bool) *TGWParamsType_UserAssigned {
	this := &TGWParamsType_UserAssigned{}
	this.UserAssigned = NewPopulatedTGWAssignedASNType(r, easy)
	return this
}
func NewPopulatedServicesVPCType(r randyTypes, easy bool) *ServicesVPCType {
	this := &ServicesVPCType{}
	this.AwsRegion = string(randStringTypes(r))
	oneofNumber_ServiceVpcChoice := []int32{3, 4}[r.Intn(2)]
	switch oneofNumber_ServiceVpcChoice {
	case 3:
		this.ServiceVpcChoice = NewPopulatedServicesVPCType_NewVpc(r, easy)
	case 4:
		this.ServiceVpcChoice = NewPopulatedServicesVPCType_VpcId(r, easy)
	}
	oneofNumber_TgwChoice := []int32{6, 7}[r.Intn(2)]
	switch oneofNumber_TgwChoice {
	case 6:
		this.TgwChoice = NewPopulatedServicesVPCType_NewTgw(r, easy)
	case 7:
		this.TgwChoice = NewPopulatedServicesVPCType_ExistingTgw(r, easy)
	}
	this.AwsCertifiedHw = string(randStringTypes(r))
	this.InstanceType = string(randStringTypes(r))
	this.SshKey = string(randStringTypes(r))
	if r.Intn(10) != 0 {
		v1 := r.Intn(5)
		this.AzNodes = make([]*ves_io_schema_views1.AWSVPCTwoInterfaceNodeType, v1)
		for i := 0; i < v1; i++ {
			this.AzNodes[i] = ves_io_schema_views1.NewPopulatedAWSVPCTwoInterfaceNodeType(r, easy)
		}
	}
	this.NodesPerAz = uint32(r.Uint32())
	oneofNumber_Deployment := []int32{14, 15}[r.Intn(2)]
	switch oneofNumber_Deployment {
	case 14:
		this.Deployment = NewPopulatedServicesVPCType_AwsCred(r, easy)
	case 15:
		this.Deployment = NewPopulatedServicesVPCType_Assisted(r, easy)
	}
	this.DiskSize = uint32(r.Uint32())
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedServicesVPCType_NewVpc(r randyTypes, easy bool) *ServicesVPCType_NewVpc {
	this := &ServicesVPCType_NewVpc{}
	this.NewVpc = ves_io_schema_views1.NewPopulatedAWSVPCParamsType(r, easy)
	return this
}
func NewPopulatedServicesVPCType_VpcId(r randyTypes, easy bool) *ServicesVPCType_VpcId {
	this := &ServicesVPCType_VpcId{}
	this.VpcId = string(randStringTypes(r))
	return this
}
func NewPopulatedServicesVPCType_NewTgw(r randyTypes, easy bool) *ServicesVPCType_NewTgw {
	this := &ServicesVPCType_NewTgw{}
	this.NewTgw = NewPopulatedTGWParamsType(r, easy)
	return this
}
func NewPopulatedServicesVPCType_ExistingTgw(r randyTypes, easy bool) *ServicesVPCType_ExistingTgw {
	this := &ServicesVPCType_ExistingTgw{}
	this.ExistingTgw = NewPopulatedExistingTGWType(r, easy)
	return this
}
func NewPopulatedServicesVPCType_AwsCred(r randyTypes, easy bool) *ServicesVPCType_AwsCred {
	this := &ServicesVPCType_AwsCred{}
	this.AwsCred = ves_io_schema_views.NewPopulatedObjectRefType(r, easy)
	return this
}
func NewPopulatedServicesVPCType_Assisted(r randyTypes, easy bool) *ServicesVPCType_Assisted {
	this := &ServicesVPCType_Assisted{}
	this.Assisted = ves_io_schema4.NewPopulatedEmpty(r, easy)
	return this
}
func NewPopulatedVnConfiguration(r randyTypes, easy bool) *VnConfiguration {
	this := &VnConfiguration{}
	oneofNumber_InsideStaticRouteChoice := []int32{2, 3}[r.Intn(2)]
	switch oneofNumber_InsideStaticRouteChoice {
	case 2:
		this.InsideStaticRouteChoice = NewPopulatedVnConfiguration_NoInsideStaticRoutes(r, easy)
	case 3:
		this.InsideStaticRouteChoice = NewPopulatedVnConfiguration_InsideStaticRoutes(r, easy)
	}
	oneofNumber_OutsideStaticRouteChoice := []int32{5, 6}[r.Intn(2)]
	switch oneofNumber_OutsideStaticRouteChoice {
	case 5:
		this.OutsideStaticRouteChoice = NewPopulatedVnConfiguration_NoOutsideStaticRoutes(r, easy)
	case 6:
		this.OutsideStaticRouteChoice = NewPopulatedVnConfiguration_OutsideStaticRoutes(r, easy)
	}
	oneofNumber_GlobalNetworkChoice := []int32{8, 9}[r.Intn(2)]
	switch oneofNumber_GlobalNetworkChoice {
	case 8:
		this.GlobalNetworkChoice = NewPopulatedVnConfiguration_NoGlobalNetwork(r, easy)
	case 9:
		this.GlobalNetworkChoice = NewPopulatedVnConfiguration_GlobalNetworkList(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedVnConfiguration_NoInsideStaticRoutes(r randyTypes, easy bool) *VnConfiguration_NoInsideStaticRoutes {
	this := &VnConfiguration_NoInsideStaticRoutes{}
	this.NoInsideStaticRoutes = ves_io_schema4.NewPopulatedEmpty(r, easy)
	return this
}
func NewPopulatedVnConfiguration_InsideStaticRoutes(r randyTypes, easy bool) *VnConfiguration_InsideStaticRoutes {
	this := &VnConfiguration_InsideStaticRoutes{}
	this.InsideStaticRoutes = ves_io_schema_views1.NewPopulatedSiteStaticRoutesListType(r, easy)
	return this
}
func NewPopulatedVnConfiguration_NoOutsideStaticRoutes(r randyTypes, easy bool) *VnConfiguration_NoOutsideStaticRoutes {
	this := &VnConfiguration_NoOutsideStaticRoutes{}
	this.NoOutsideStaticRoutes = ves_io_schema4.NewPopulatedEmpty(r, easy)
	return this
}
func NewPopulatedVnConfiguration_OutsideStaticRoutes(r randyTypes, easy bool) *VnConfiguration_OutsideStaticRoutes {
	this := &VnConfiguration_OutsideStaticRoutes{}
	this.OutsideStaticRoutes = ves_io_schema_views1.NewPopulatedSiteStaticRoutesListType(r, easy)
	return this
}
func NewPopulatedVnConfiguration_NoGlobalNetwork(r randyTypes, easy bool) *VnConfiguration_NoGlobalNetwork {
	this := &VnConfiguration_NoGlobalNetwork{}
	this.NoGlobalNetwork = ves_io_schema4.NewPopulatedEmpty(r, easy)
	return this
}
func NewPopulatedVnConfiguration_GlobalNetworkList(r randyTypes, easy bool) *VnConfiguration_GlobalNetworkList {
	this := &VnConfiguration_GlobalNetworkList{}
	this.GlobalNetworkList = ves_io_schema_views1.NewPopulatedGlobalNetworkConnectionListType(r, easy)
	return this
}
func NewPopulatedVPCAttachmentType(r randyTypes, easy bool) *VPCAttachmentType {
	this := &VPCAttachmentType{}
	this.VpcId = string(randStringTypes(r))
	if r.Intn(10) != 0 {
		v2 := r.Intn(10)
		this.Labels = make(map[string]string)
		for i := 0; i < v2; i++ {
			this.Labels[randStringTypes(r)] = randStringTypes(r)
		}
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedVPCIpPrefixesType(r randyTypes, easy bool) *VPCIpPrefixesType {
	this := &VPCIpPrefixesType{}
	v3 := r.Intn(10)
	this.Prefixes = make([]string, v3)
	for i := 0; i < v3; i++ {
		this.Prefixes[i] = string(randStringTypes(r))
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedVPCAttachmentListType(r randyTypes, easy bool) *VPCAttachmentListType {
	this := &VPCAttachmentListType{}
	if r.Intn(10) != 0 {
		v4 := r.Intn(5)
		this.VpcList = make([]*VPCAttachmentType, v4)
		for i := 0; i < v4; i++ {
			this.VpcList[i] = NewPopulatedVPCAttachmentType(r, easy)
		}
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedActiveServicePoliciesType(r randyTypes, easy bool) *ActiveServicePoliciesType {
	this := &ActiveServicePoliciesType{}
	if r.Intn(10) != 0 {
		v5 := r.Intn(5)
		this.ServicePolicies = make([]*ves_io_schema_views.ObjectRefType, v5)
		for i := 0; i < v5; i++ {
			this.ServicePolicies[i] = ves_io_schema_views.NewPopulatedObjectRefType(r, easy)
		}
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedSecurityConfigType(r randyTypes, easy bool) *SecurityConfigType {
	this := &SecurityConfigType{}
	oneofNumber_ForwardProxyChoice := []int32{2, 3, 7}[r.Intn(3)]
	switch oneofNumber_ForwardProxyChoice {
	case 2:
		this.ForwardProxyChoice = NewPopulatedSecurityConfigType_NoForwardProxy(r, easy)
	case 3:
		this.ForwardProxyChoice = NewPopulatedSecurityConfigType_ActiveForwardProxyPolicies(r, easy)
	case 7:
		this.ForwardProxyChoice = NewPopulatedSecurityConfigType_ForwardProxyAllowAll(r, easy)
	}
	oneofNumber_NetworkPolicyChoice := []int32{5, 6}[r.Intn(2)]
	switch oneofNumber_NetworkPolicyChoice {
	case 5:
		this.NetworkPolicyChoice = NewPopulatedSecurityConfigType_NoNetworkPolicy(r, easy)
	case 6:
		this.NetworkPolicyChoice = NewPopulatedSecurityConfigType_ActiveNetworkPolicies(r, easy)
	}
	oneofNumber_EastWestServicePolicyChoice := []int32{9, 10, 11}[r.Intn(3)]
	switch oneofNumber_EastWestServicePolicyChoice {
	case 9:
		this.EastWestServicePolicyChoice = NewPopulatedSecurityConfigType_NoEastWestPolicy(r, easy)
	case 10:
		this.EastWestServicePolicyChoice = NewPopulatedSecurityConfigType_ActiveEastWestServicePolicies(r, easy)
	case 11:
		this.EastWestServicePolicyChoice = NewPopulatedSecurityConfigType_EastWestServicePolicyAllowAll(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedSecurityConfigType_NoForwardProxy(r randyTypes, easy bool) *SecurityConfigType_NoForwardProxy {
	this := &SecurityConfigType_NoForwardProxy{}
	this.NoForwardProxy = ves_io_schema4.NewPopulatedEmpty(r, easy)
	return this
}
func NewPopulatedSecurityConfigType_ActiveForwardProxyPolicies(r randyTypes, easy bool) *SecurityConfigType_ActiveForwardProxyPolicies {
	this := &SecurityConfigType_ActiveForwardProxyPolicies{}
	this.ActiveForwardProxyPolicies = ves_io_schema_network_firewall.NewPopulatedActiveForwardProxyPoliciesType(r, easy)
	return this
}
func NewPopulatedSecurityConfigType_NoNetworkPolicy(r randyTypes, easy bool) *SecurityConfigType_NoNetworkPolicy {
	this := &SecurityConfigType_NoNetworkPolicy{}
	this.NoNetworkPolicy = ves_io_schema4.NewPopulatedEmpty(r, easy)
	return this
}
func NewPopulatedSecurityConfigType_ActiveNetworkPolicies(r randyTypes, easy bool) *SecurityConfigType_ActiveNetworkPolicies {
	this := &SecurityConfigType_ActiveNetworkPolicies{}
	this.ActiveNetworkPolicies = ves_io_schema_network_firewall.NewPopulatedActiveNetworkPoliciesType(r, easy)
	return this
}
func NewPopulatedSecurityConfigType_ForwardProxyAllowAll(r randyTypes, easy bool) *SecurityConfigType_ForwardProxyAllowAll {
	this := &SecurityConfigType_ForwardProxyAllowAll{}
	this.ForwardProxyAllowAll = ves_io_schema4.NewPopulatedEmpty(r, easy)
	return this
}
func NewPopulatedSecurityConfigType_NoEastWestPolicy(r randyTypes, easy bool) *SecurityConfigType_NoEastWestPolicy {
	this := &SecurityConfigType_NoEastWestPolicy{}
	this.NoEastWestPolicy = ves_io_schema4.NewPopulatedEmpty(r, easy)
	return this
}
func NewPopulatedSecurityConfigType_ActiveEastWestServicePolicies(r randyTypes, easy bool) *SecurityConfigType_ActiveEastWestServicePolicies {
	this := &SecurityConfigType_ActiveEastWestServicePolicies{}
	this.ActiveEastWestServicePolicies = NewPopulatedActiveServicePoliciesType(r, easy)
	return this
}
func NewPopulatedSecurityConfigType_EastWestServicePolicyAllowAll(r randyTypes, easy bool) *SecurityConfigType_EastWestServicePolicyAllowAll {
	this := &SecurityConfigType_EastWestServicePolicyAllowAll{}
	this.EastWestServicePolicyAllowAll = ves_io_schema4.NewPopulatedEmpty(r, easy)
	return this
}
func NewPopulatedAWSVPNTunnelConfigType(r randyTypes, easy bool) *AWSVPNTunnelConfigType {
	this := &AWSVPNTunnelConfigType{}
	this.NodeName = string(randStringTypes(r))
	v6 := r.Intn(10)
	this.TunnelRemoteIp = make([]string, v6)
	for i := 0; i < v6; i++ {
		this.TunnelRemoteIp[i] = string(randStringTypes(r))
	}
	this.NodeId = string(randStringTypes(r))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedAWSTGWInfoConfigType(r randyTypes, easy bool) *AWSTGWInfoConfigType {
	this := &AWSTGWInfoConfigType{}
	this.TgwId = string(randStringTypes(r))
	this.VpcId = string(randStringTypes(r))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedGlobalSpecType(r randyTypes, easy bool) *GlobalSpecType {
	this := &GlobalSpecType{}
	if r.Intn(10) != 0 {
		this.AwsParameters = NewPopulatedServicesVPCType(r, easy)
	}
	if r.Intn(10) != 0 {
		this.VpcAttachments = NewPopulatedVPCAttachmentListType(r, easy)
	}
	if r.Intn(10) != 0 {
		this.TgwSecurity = NewPopulatedSecurityConfigType(r, easy)
	}
	this.VolterraSoftwareVersion = string(randStringTypes(r))
	this.OperatingSystemVersion = string(randStringTypes(r))
	if r.Intn(10) != 0 {
		v7 := r.Intn(10)
		this.VpcIpPrefixes = make(map[string]*VPCIpPrefixesType)
		for i := 0; i < v7; i++ {
			this.VpcIpPrefixes[randStringTypes(r)] = NewPopulatedVPCIpPrefixesType(r, easy)
		}
	}
	if r.Intn(10) != 0 {
		this.VnConfig = NewPopulatedVnConfiguration(r, easy)
	}
	this.Address = string(randStringTypes(r))
	if r.Intn(10) != 0 {
		this.Coordinates = ves_io_schema_site.NewPopulatedCoordinates(r, easy)
	}
	if r.Intn(10) != 0 {
		this.UserModificationTimestamp = google_protobuf1.NewPopulatedTimestamp(r, easy)
	}
	if r.Intn(10) != 0 {
		this.TgwInfo = NewPopulatedAWSTGWInfoConfigType(r, easy)
	}
	oneofNumber_LogsReceiverChoice := []int32{13, 14}[r.Intn(2)]
	switch oneofNumber_LogsReceiverChoice {
	case 13:
		this.LogsReceiverChoice = NewPopulatedGlobalSpecType_LogsStreamingDisabled(r, easy)
	case 14:
		this.LogsReceiverChoice = NewPopulatedGlobalSpecType_LogReceiver(r, easy)
	}
	if r.Intn(10) != 0 {
		v8 := r.Intn(5)
		this.Tunnels = make([]*AWSVPNTunnelConfigType, v8)
		for i := 0; i < v8; i++ {
			this.Tunnels[i] = NewPopulatedAWSVPNTunnelConfigType(r, easy)
		}
	}
	if r.Intn(10) != 0 {
		this.TfParams = ves_io_schema_views.NewPopulatedObjectRefType(r, easy)
	}
	if r.Intn(10) != 0 {
		this.ViewInternal = ves_io_schema_views.NewPopulatedObjectRefType(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedGlobalSpecType_LogsStreamingDisabled(r randyTypes, easy bool) *GlobalSpecType_LogsStreamingDisabled {
	this := &GlobalSpecType_LogsStreamingDisabled{}
	this.LogsStreamingDisabled = ves_io_schema4.NewPopulatedEmpty(r, easy)
	return this
}
func NewPopulatedGlobalSpecType_LogReceiver(r randyTypes, easy bool) *GlobalSpecType_LogReceiver {
	this := &GlobalSpecType_LogReceiver{}
	this.LogReceiver = ves_io_schema_views.NewPopulatedObjectRefType(r, easy)
	return this
}
func NewPopulatedCreateSpecType(r randyTypes, easy bool) *CreateSpecType {
	this := &CreateSpecType{}
	if r.Intn(10) != 0 {
		this.AwsParameters = NewPopulatedServicesVPCType(r, easy)
	}
	if r.Intn(10) != 0 {
		this.VpcAttachments = NewPopulatedVPCAttachmentListType(r, easy)
	}
	if r.Intn(10) != 0 {
		this.TgwSecurity = NewPopulatedSecurityConfigType(r, easy)
	}
	this.VolterraSoftwareVersion = string(randStringTypes(r))
	this.OperatingSystemVersion = string(randStringTypes(r))
	if r.Intn(10) != 0 {
		this.VnConfig = NewPopulatedVnConfiguration(r, easy)
	}
	this.Address = string(randStringTypes(r))
	if r.Intn(10) != 0 {
		this.Coordinates = ves_io_schema_site.NewPopulatedCoordinates(r, easy)
	}
	oneofNumber_LogsReceiverChoice := []int32{13, 14}[r.Intn(2)]
	switch oneofNumber_LogsReceiverChoice {
	case 13:
		this.LogsReceiverChoice = NewPopulatedCreateSpecType_LogsStreamingDisabled(r, easy)
	case 14:
		this.LogsReceiverChoice = NewPopulatedCreateSpecType_LogReceiver(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedCreateSpecType_LogsStreamingDisabled(r randyTypes, easy bool) *CreateSpecType_LogsStreamingDisabled {
	this := &CreateSpecType_LogsStreamingDisabled{}
	this.LogsStreamingDisabled = ves_io_schema4.NewPopulatedEmpty(r, easy)
	return this
}
func NewPopulatedCreateSpecType_LogReceiver(r randyTypes, easy bool) *CreateSpecType_LogReceiver {
	this := &CreateSpecType_LogReceiver{}
	this.LogReceiver = ves_io_schema_views.NewPopulatedObjectRefType(r, easy)
	return this
}
func NewPopulatedReplaceSpecType(r randyTypes, easy bool) *ReplaceSpecType {
	this := &ReplaceSpecType{}
	if r.Intn(10) != 0 {
		this.VpcAttachments = NewPopulatedVPCAttachmentListType(r, easy)
	}
	if r.Intn(10) != 0 {
		this.TgwSecurity = NewPopulatedSecurityConfigType(r, easy)
	}
	this.VolterraSoftwareVersion = string(randStringTypes(r))
	this.OperatingSystemVersion = string(randStringTypes(r))
	if r.Intn(10) != 0 {
		this.VnConfig = NewPopulatedVnConfiguration(r, easy)
	}
	this.Address = string(randStringTypes(r))
	if r.Intn(10) != 0 {
		this.Coordinates = ves_io_schema_site.NewPopulatedCoordinates(r, easy)
	}
	oneofNumber_LogsReceiverChoice := []int32{13, 14}[r.Intn(2)]
	switch oneofNumber_LogsReceiverChoice {
	case 13:
		this.LogsReceiverChoice = NewPopulatedReplaceSpecType_LogsStreamingDisabled(r, easy)
	case 14:
		this.LogsReceiverChoice = NewPopulatedReplaceSpecType_LogReceiver(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedReplaceSpecType_LogsStreamingDisabled(r randyTypes, easy bool) *ReplaceSpecType_LogsStreamingDisabled {
	this := &ReplaceSpecType_LogsStreamingDisabled{}
	this.LogsStreamingDisabled = ves_io_schema4.NewPopulatedEmpty(r, easy)
	return this
}
func NewPopulatedReplaceSpecType_LogReceiver(r randyTypes, easy bool) *ReplaceSpecType_LogReceiver {
	this := &ReplaceSpecType_LogReceiver{}
	this.LogReceiver = ves_io_schema_views.NewPopulatedObjectRefType(r, easy)
	return this
}
func NewPopulatedGetSpecType(r randyTypes, easy bool) *GetSpecType {
	this := &GetSpecType{}
	if r.Intn(10) != 0 {
		this.AwsParameters = NewPopulatedServicesVPCType(r, easy)
	}
	if r.Intn(10) != 0 {
		this.VpcAttachments = NewPopulatedVPCAttachmentListType(r, easy)
	}
	if r.Intn(10) != 0 {
		this.TgwSecurity = NewPopulatedSecurityConfigType(r, easy)
	}
	this.VolterraSoftwareVersion = string(randStringTypes(r))
	this.OperatingSystemVersion = string(randStringTypes(r))
	if r.Intn(10) != 0 {
		v9 := r.Intn(10)
		this.VpcIpPrefixes = make(map[string]*VPCIpPrefixesType)
		for i := 0; i < v9; i++ {
			this.VpcIpPrefixes[randStringTypes(r)] = NewPopulatedVPCIpPrefixesType(r, easy)
		}
	}
	if r.Intn(10) != 0 {
		this.VnConfig = NewPopulatedVnConfiguration(r, easy)
	}
	this.Address = string(randStringTypes(r))
	if r.Intn(10) != 0 {
		this.Coordinates = ves_io_schema_site.NewPopulatedCoordinates(r, easy)
	}
	if r.Intn(10) != 0 {
		this.UserModificationTimestamp = google_protobuf1.NewPopulatedTimestamp(r, easy)
	}
	if r.Intn(10) != 0 {
		this.TgwInfo = NewPopulatedAWSTGWInfoConfigType(r, easy)
	}
	oneofNumber_LogsReceiverChoice := []int32{13, 14}[r.Intn(2)]
	switch oneofNumber_LogsReceiverChoice {
	case 13:
		this.LogsReceiverChoice = NewPopulatedGetSpecType_LogsStreamingDisabled(r, easy)
	case 14:
		this.LogsReceiverChoice = NewPopulatedGetSpecType_LogReceiver(r, easy)
	}
	if r.Intn(10) != 0 {
		v10 := r.Intn(5)
		this.Tunnels = make([]*AWSVPNTunnelConfigType, v10)
		for i := 0; i < v10; i++ {
			this.Tunnels[i] = NewPopulatedAWSVPNTunnelConfigType(r, easy)
		}
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedGetSpecType_LogsStreamingDisabled(r randyTypes, easy bool) *GetSpecType_LogsStreamingDisabled {
	this := &GetSpecType_LogsStreamingDisabled{}
	this.LogsStreamingDisabled = ves_io_schema4.NewPopulatedEmpty(r, easy)
	return this
}
func NewPopulatedGetSpecType_LogReceiver(r randyTypes, easy bool) *GetSpecType_LogReceiver {
	this := &GetSpecType_LogReceiver{}
	this.LogReceiver = ves_io_schema_views.NewPopulatedObjectRefType(r, easy)
	return this
}

type randyTypes interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneTypes(r randyTypes) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringTypes(r randyTypes) string {
	v11 := r.Intn(100)
	tmps := make([]rune, v11)
	for i := 0; i < v11; i++ {
		tmps[i] = randUTF8RuneTypes(r)
	}
	return string(tmps)
}
func randUnrecognizedTypes(r randyTypes, maxFieldNumber int) (dAtA []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		dAtA = randFieldTypes(dAtA, r, fieldNumber, wire)
	}
	return dAtA
}
func randFieldTypes(dAtA []byte, r randyTypes, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		dAtA = encodeVarintPopulateTypes(dAtA, uint64(key))
		v12 := r.Int63()
		if r.Intn(2) == 0 {
			v12 *= -1
		}
		dAtA = encodeVarintPopulateTypes(dAtA, uint64(v12))
	case 1:
		dAtA = encodeVarintPopulateTypes(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		dAtA = encodeVarintPopulateTypes(dAtA, uint64(key))
		ll := r.Intn(100)
		dAtA = encodeVarintPopulateTypes(dAtA, uint64(ll))
		for j := 0; j < ll; j++ {
			dAtA = append(dAtA, byte(r.Intn(256)))
		}
	default:
		dAtA = encodeVarintPopulateTypes(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return dAtA
}
func encodeVarintPopulateTypes(dAtA []byte, v uint64) []byte {
	for v >= 1<<7 {
		dAtA = append(dAtA, uint8(uint64(v)&0x7f|0x80))
		v >>= 7
	}
	dAtA = append(dAtA, uint8(v))
	return dAtA
}
func (m *TGWAssignedASNType) Size() (n int) {
	var l int
	_ = l
	if m.TgwAsn != 0 {
		n += 1 + sovTypes(uint64(m.TgwAsn))
	}
	if m.VolterraSiteAsn != 0 {
		n += 1 + sovTypes(uint64(m.VolterraSiteAsn))
	}
	return n
}

func (m *ExistingTGWType) Size() (n int) {
	var l int
	_ = l
	l = len(m.TgwId)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.TgwAsn != 0 {
		n += 1 + sovTypes(uint64(m.TgwAsn))
	}
	if m.VolterraSiteAsn != 0 {
		n += 1 + sovTypes(uint64(m.VolterraSiteAsn))
	}
	return n
}

func (m *TGWParamsType) Size() (n int) {
	var l int
	_ = l
	if m.AsnChoice != nil {
		n += m.AsnChoice.Size()
	}
	return n
}

func (m *TGWParamsType_SystemGenerated) Size() (n int) {
	var l int
	_ = l
	if m.SystemGenerated != nil {
		l = m.SystemGenerated.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *TGWParamsType_UserAssigned) Size() (n int) {
	var l int
	_ = l
	if m.UserAssigned != nil {
		l = m.UserAssigned.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ServicesVPCType) Size() (n int) {
	var l int
	_ = l
	l = len(m.AwsRegion)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.ServiceVpcChoice != nil {
		n += m.ServiceVpcChoice.Size()
	}
	if m.TgwChoice != nil {
		n += m.TgwChoice.Size()
	}
	l = len(m.AwsCertifiedHw)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.InstanceType)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.SshKey)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if len(m.AzNodes) > 0 {
		for _, e := range m.AzNodes {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if m.NodesPerAz != 0 {
		n += 1 + sovTypes(uint64(m.NodesPerAz))
	}
	if m.Deployment != nil {
		n += m.Deployment.Size()
	}
	if m.DiskSize != 0 {
		n += 2 + sovTypes(uint64(m.DiskSize))
	}
	return n
}

func (m *ServicesVPCType_NewVpc) Size() (n int) {
	var l int
	_ = l
	if m.NewVpc != nil {
		l = m.NewVpc.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ServicesVPCType_VpcId) Size() (n int) {
	var l int
	_ = l
	l = len(m.VpcId)
	n += 1 + l + sovTypes(uint64(l))
	return n
}
func (m *ServicesVPCType_NewTgw) Size() (n int) {
	var l int
	_ = l
	if m.NewTgw != nil {
		l = m.NewTgw.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ServicesVPCType_ExistingTgw) Size() (n int) {
	var l int
	_ = l
	if m.ExistingTgw != nil {
		l = m.ExistingTgw.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ServicesVPCType_AwsCred) Size() (n int) {
	var l int
	_ = l
	if m.AwsCred != nil {
		l = m.AwsCred.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ServicesVPCType_Assisted) Size() (n int) {
	var l int
	_ = l
	if m.Assisted != nil {
		l = m.Assisted.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *VnConfiguration) Size() (n int) {
	var l int
	_ = l
	if m.InsideStaticRouteChoice != nil {
		n += m.InsideStaticRouteChoice.Size()
	}
	if m.OutsideStaticRouteChoice != nil {
		n += m.OutsideStaticRouteChoice.Size()
	}
	if m.GlobalNetworkChoice != nil {
		n += m.GlobalNetworkChoice.Size()
	}
	return n
}

func (m *VnConfiguration_NoInsideStaticRoutes) Size() (n int) {
	var l int
	_ = l
	if m.NoInsideStaticRoutes != nil {
		l = m.NoInsideStaticRoutes.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *VnConfiguration_InsideStaticRoutes) Size() (n int) {
	var l int
	_ = l
	if m.InsideStaticRoutes != nil {
		l = m.InsideStaticRoutes.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *VnConfiguration_NoOutsideStaticRoutes) Size() (n int) {
	var l int
	_ = l
	if m.NoOutsideStaticRoutes != nil {
		l = m.NoOutsideStaticRoutes.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *VnConfiguration_OutsideStaticRoutes) Size() (n int) {
	var l int
	_ = l
	if m.OutsideStaticRoutes != nil {
		l = m.OutsideStaticRoutes.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *VnConfiguration_NoGlobalNetwork) Size() (n int) {
	var l int
	_ = l
	if m.NoGlobalNetwork != nil {
		l = m.NoGlobalNetwork.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *VnConfiguration_GlobalNetworkList) Size() (n int) {
	var l int
	_ = l
	if m.GlobalNetworkList != nil {
		l = m.GlobalNetworkList.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *VPCAttachmentType) Size() (n int) {
	var l int
	_ = l
	l = len(m.VpcId)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if len(m.Labels) > 0 {
		for k, v := range m.Labels {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovTypes(uint64(len(k))) + 1 + len(v) + sovTypes(uint64(len(v)))
			n += mapEntrySize + 1 + sovTypes(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *VPCIpPrefixesType) Size() (n int) {
	var l int
	_ = l
	if len(m.Prefixes) > 0 {
		for _, s := range m.Prefixes {
			l = len(s)
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *VPCAttachmentListType) Size() (n int) {
	var l int
	_ = l
	if len(m.VpcList) > 0 {
		for _, e := range m.VpcList {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *ActiveServicePoliciesType) Size() (n int) {
	var l int
	_ = l
	if len(m.ServicePolicies) > 0 {
		for _, e := range m.ServicePolicies {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *SecurityConfigType) Size() (n int) {
	var l int
	_ = l
	if m.ForwardProxyChoice != nil {
		n += m.ForwardProxyChoice.Size()
	}
	if m.NetworkPolicyChoice != nil {
		n += m.NetworkPolicyChoice.Size()
	}
	if m.EastWestServicePolicyChoice != nil {
		n += m.EastWestServicePolicyChoice.Size()
	}
	return n
}

func (m *SecurityConfigType_NoForwardProxy) Size() (n int) {
	var l int
	_ = l
	if m.NoForwardProxy != nil {
		l = m.NoForwardProxy.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *SecurityConfigType_ActiveForwardProxyPolicies) Size() (n int) {
	var l int
	_ = l
	if m.ActiveForwardProxyPolicies != nil {
		l = m.ActiveForwardProxyPolicies.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *SecurityConfigType_NoNetworkPolicy) Size() (n int) {
	var l int
	_ = l
	if m.NoNetworkPolicy != nil {
		l = m.NoNetworkPolicy.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *SecurityConfigType_ActiveNetworkPolicies) Size() (n int) {
	var l int
	_ = l
	if m.ActiveNetworkPolicies != nil {
		l = m.ActiveNetworkPolicies.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *SecurityConfigType_ForwardProxyAllowAll) Size() (n int) {
	var l int
	_ = l
	if m.ForwardProxyAllowAll != nil {
		l = m.ForwardProxyAllowAll.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *SecurityConfigType_NoEastWestPolicy) Size() (n int) {
	var l int
	_ = l
	if m.NoEastWestPolicy != nil {
		l = m.NoEastWestPolicy.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *SecurityConfigType_ActiveEastWestServicePolicies) Size() (n int) {
	var l int
	_ = l
	if m.ActiveEastWestServicePolicies != nil {
		l = m.ActiveEastWestServicePolicies.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *SecurityConfigType_EastWestServicePolicyAllowAll) Size() (n int) {
	var l int
	_ = l
	if m.EastWestServicePolicyAllowAll != nil {
		l = m.EastWestServicePolicyAllowAll.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *AWSVPNTunnelConfigType) Size() (n int) {
	var l int
	_ = l
	l = len(m.NodeName)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if len(m.TunnelRemoteIp) > 0 {
		for _, s := range m.TunnelRemoteIp {
			l = len(s)
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	l = len(m.NodeId)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *AWSTGWInfoConfigType) Size() (n int) {
	var l int
	_ = l
	l = len(m.TgwId)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.VpcId)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *GlobalSpecType) Size() (n int) {
	var l int
	_ = l
	if m.AwsParameters != nil {
		l = m.AwsParameters.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.VpcAttachments != nil {
		l = m.VpcAttachments.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.TgwSecurity != nil {
		l = m.TgwSecurity.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.VolterraSoftwareVersion)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.OperatingSystemVersion)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if len(m.VpcIpPrefixes) > 0 {
		for k, v := range m.VpcIpPrefixes {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovTypes(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovTypes(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovTypes(uint64(mapEntrySize))
		}
	}
	if m.VnConfig != nil {
		l = m.VnConfig.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.Coordinates != nil {
		l = m.Coordinates.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.UserModificationTimestamp != nil {
		l = m.UserModificationTimestamp.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.TgwInfo != nil {
		l = m.TgwInfo.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.LogsReceiverChoice != nil {
		n += m.LogsReceiverChoice.Size()
	}
	if len(m.Tunnels) > 0 {
		for _, e := range m.Tunnels {
			l = e.Size()
			n += 2 + l + sovTypes(uint64(l))
		}
	}
	if m.TfParams != nil {
		l = m.TfParams.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	if m.ViewInternal != nil {
		l = m.ViewInternal.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *GlobalSpecType_LogsStreamingDisabled) Size() (n int) {
	var l int
	_ = l
	if m.LogsStreamingDisabled != nil {
		l = m.LogsStreamingDisabled.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_LogReceiver) Size() (n int) {
	var l int
	_ = l
	if m.LogReceiver != nil {
		l = m.LogReceiver.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType) Size() (n int) {
	var l int
	_ = l
	if m.AwsParameters != nil {
		l = m.AwsParameters.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.VpcAttachments != nil {
		l = m.VpcAttachments.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.TgwSecurity != nil {
		l = m.TgwSecurity.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.VolterraSoftwareVersion)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.OperatingSystemVersion)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.VnConfig != nil {
		l = m.VnConfig.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.Coordinates != nil {
		l = m.Coordinates.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.LogsReceiverChoice != nil {
		n += m.LogsReceiverChoice.Size()
	}
	return n
}

func (m *CreateSpecType_LogsStreamingDisabled) Size() (n int) {
	var l int
	_ = l
	if m.LogsStreamingDisabled != nil {
		l = m.LogsStreamingDisabled.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_LogReceiver) Size() (n int) {
	var l int
	_ = l
	if m.LogReceiver != nil {
		l = m.LogReceiver.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType) Size() (n int) {
	var l int
	_ = l
	if m.VpcAttachments != nil {
		l = m.VpcAttachments.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.TgwSecurity != nil {
		l = m.TgwSecurity.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.VolterraSoftwareVersion)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.OperatingSystemVersion)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.VnConfig != nil {
		l = m.VnConfig.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.Coordinates != nil {
		l = m.Coordinates.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.LogsReceiverChoice != nil {
		n += m.LogsReceiverChoice.Size()
	}
	return n
}

func (m *ReplaceSpecType_LogsStreamingDisabled) Size() (n int) {
	var l int
	_ = l
	if m.LogsStreamingDisabled != nil {
		l = m.LogsStreamingDisabled.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_LogReceiver) Size() (n int) {
	var l int
	_ = l
	if m.LogReceiver != nil {
		l = m.LogReceiver.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType) Size() (n int) {
	var l int
	_ = l
	if m.AwsParameters != nil {
		l = m.AwsParameters.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.VpcAttachments != nil {
		l = m.VpcAttachments.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.TgwSecurity != nil {
		l = m.TgwSecurity.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.VolterraSoftwareVersion)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.OperatingSystemVersion)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if len(m.VpcIpPrefixes) > 0 {
		for k, v := range m.VpcIpPrefixes {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovTypes(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovTypes(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovTypes(uint64(mapEntrySize))
		}
	}
	if m.VnConfig != nil {
		l = m.VnConfig.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.Coordinates != nil {
		l = m.Coordinates.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.UserModificationTimestamp != nil {
		l = m.UserModificationTimestamp.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.TgwInfo != nil {
		l = m.TgwInfo.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.LogsReceiverChoice != nil {
		n += m.LogsReceiverChoice.Size()
	}
	if len(m.Tunnels) > 0 {
		for _, e := range m.Tunnels {
			l = e.Size()
			n += 2 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *GetSpecType_LogsStreamingDisabled) Size() (n int) {
	var l int
	_ = l
	if m.LogsStreamingDisabled != nil {
		l = m.LogsStreamingDisabled.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_LogReceiver) Size() (n int) {
	var l int
	_ = l
	if m.LogReceiver != nil {
		l = m.LogReceiver.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func sovTypes(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozTypes(x uint64) (n int) {
	return sovTypes(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *TGWAssignedASNType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TGWAssignedASNType{`,
		`TgwAsn:` + fmt.Sprintf("%v", this.TgwAsn) + `,`,
		`VolterraSiteAsn:` + fmt.Sprintf("%v", this.VolterraSiteAsn) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ExistingTGWType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ExistingTGWType{`,
		`TgwId:` + fmt.Sprintf("%v", this.TgwId) + `,`,
		`TgwAsn:` + fmt.Sprintf("%v", this.TgwAsn) + `,`,
		`VolterraSiteAsn:` + fmt.Sprintf("%v", this.VolterraSiteAsn) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TGWParamsType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TGWParamsType{`,
		`AsnChoice:` + fmt.Sprintf("%v", this.AsnChoice) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TGWParamsType_SystemGenerated) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TGWParamsType_SystemGenerated{`,
		`SystemGenerated:` + strings.Replace(fmt.Sprintf("%v", this.SystemGenerated), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TGWParamsType_UserAssigned) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TGWParamsType_UserAssigned{`,
		`UserAssigned:` + strings.Replace(fmt.Sprintf("%v", this.UserAssigned), "TGWAssignedASNType", "TGWAssignedASNType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ServicesVPCType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ServicesVPCType{`,
		`AwsRegion:` + fmt.Sprintf("%v", this.AwsRegion) + `,`,
		`ServiceVpcChoice:` + fmt.Sprintf("%v", this.ServiceVpcChoice) + `,`,
		`TgwChoice:` + fmt.Sprintf("%v", this.TgwChoice) + `,`,
		`AwsCertifiedHw:` + fmt.Sprintf("%v", this.AwsCertifiedHw) + `,`,
		`InstanceType:` + fmt.Sprintf("%v", this.InstanceType) + `,`,
		`SshKey:` + fmt.Sprintf("%v", this.SshKey) + `,`,
		`AzNodes:` + strings.Replace(fmt.Sprintf("%v", this.AzNodes), "AWSVPCTwoInterfaceNodeType", "ves_io_schema_views1.AWSVPCTwoInterfaceNodeType", 1) + `,`,
		`NodesPerAz:` + fmt.Sprintf("%v", this.NodesPerAz) + `,`,
		`Deployment:` + fmt.Sprintf("%v", this.Deployment) + `,`,
		`DiskSize:` + fmt.Sprintf("%v", this.DiskSize) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ServicesVPCType_NewVpc) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ServicesVPCType_NewVpc{`,
		`NewVpc:` + strings.Replace(fmt.Sprintf("%v", this.NewVpc), "AWSVPCParamsType", "ves_io_schema_views1.AWSVPCParamsType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ServicesVPCType_VpcId) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ServicesVPCType_VpcId{`,
		`VpcId:` + fmt.Sprintf("%v", this.VpcId) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ServicesVPCType_NewTgw) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ServicesVPCType_NewTgw{`,
		`NewTgw:` + strings.Replace(fmt.Sprintf("%v", this.NewTgw), "TGWParamsType", "TGWParamsType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ServicesVPCType_ExistingTgw) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ServicesVPCType_ExistingTgw{`,
		`ExistingTgw:` + strings.Replace(fmt.Sprintf("%v", this.ExistingTgw), "ExistingTGWType", "ExistingTGWType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ServicesVPCType_AwsCred) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ServicesVPCType_AwsCred{`,
		`AwsCred:` + strings.Replace(fmt.Sprintf("%v", this.AwsCred), "ObjectRefType", "ves_io_schema_views.ObjectRefType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ServicesVPCType_Assisted) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ServicesVPCType_Assisted{`,
		`Assisted:` + strings.Replace(fmt.Sprintf("%v", this.Assisted), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *VnConfiguration) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&VnConfiguration{`,
		`InsideStaticRouteChoice:` + fmt.Sprintf("%v", this.InsideStaticRouteChoice) + `,`,
		`OutsideStaticRouteChoice:` + fmt.Sprintf("%v", this.OutsideStaticRouteChoice) + `,`,
		`GlobalNetworkChoice:` + fmt.Sprintf("%v", this.GlobalNetworkChoice) + `,`,
		`}`,
	}, "")
	return s
}
func (this *VnConfiguration_NoInsideStaticRoutes) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&VnConfiguration_NoInsideStaticRoutes{`,
		`NoInsideStaticRoutes:` + strings.Replace(fmt.Sprintf("%v", this.NoInsideStaticRoutes), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *VnConfiguration_InsideStaticRoutes) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&VnConfiguration_InsideStaticRoutes{`,
		`InsideStaticRoutes:` + strings.Replace(fmt.Sprintf("%v", this.InsideStaticRoutes), "SiteStaticRoutesListType", "ves_io_schema_views1.SiteStaticRoutesListType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *VnConfiguration_NoOutsideStaticRoutes) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&VnConfiguration_NoOutsideStaticRoutes{`,
		`NoOutsideStaticRoutes:` + strings.Replace(fmt.Sprintf("%v", this.NoOutsideStaticRoutes), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *VnConfiguration_OutsideStaticRoutes) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&VnConfiguration_OutsideStaticRoutes{`,
		`OutsideStaticRoutes:` + strings.Replace(fmt.Sprintf("%v", this.OutsideStaticRoutes), "SiteStaticRoutesListType", "ves_io_schema_views1.SiteStaticRoutesListType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *VnConfiguration_NoGlobalNetwork) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&VnConfiguration_NoGlobalNetwork{`,
		`NoGlobalNetwork:` + strings.Replace(fmt.Sprintf("%v", this.NoGlobalNetwork), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *VnConfiguration_GlobalNetworkList) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&VnConfiguration_GlobalNetworkList{`,
		`GlobalNetworkList:` + strings.Replace(fmt.Sprintf("%v", this.GlobalNetworkList), "GlobalNetworkConnectionListType", "ves_io_schema_views1.GlobalNetworkConnectionListType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *VPCAttachmentType) String() string {
	if this == nil {
		return "nil"
	}
	keysForLabels := make([]string, 0, len(this.Labels))
	for k, _ := range this.Labels {
		keysForLabels = append(keysForLabels, k)
	}
	sortkeys.Strings(keysForLabels)
	mapStringForLabels := "map[string]string{"
	for _, k := range keysForLabels {
		mapStringForLabels += fmt.Sprintf("%v: %v,", k, this.Labels[k])
	}
	mapStringForLabels += "}"
	s := strings.Join([]string{`&VPCAttachmentType{`,
		`VpcId:` + fmt.Sprintf("%v", this.VpcId) + `,`,
		`Labels:` + mapStringForLabels + `,`,
		`}`,
	}, "")
	return s
}
func (this *VPCIpPrefixesType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&VPCIpPrefixesType{`,
		`Prefixes:` + fmt.Sprintf("%v", this.Prefixes) + `,`,
		`}`,
	}, "")
	return s
}
func (this *VPCAttachmentListType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&VPCAttachmentListType{`,
		`VpcList:` + strings.Replace(fmt.Sprintf("%v", this.VpcList), "VPCAttachmentType", "VPCAttachmentType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ActiveServicePoliciesType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ActiveServicePoliciesType{`,
		`ServicePolicies:` + strings.Replace(fmt.Sprintf("%v", this.ServicePolicies), "ObjectRefType", "ves_io_schema_views.ObjectRefType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SecurityConfigType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SecurityConfigType{`,
		`ForwardProxyChoice:` + fmt.Sprintf("%v", this.ForwardProxyChoice) + `,`,
		`NetworkPolicyChoice:` + fmt.Sprintf("%v", this.NetworkPolicyChoice) + `,`,
		`EastWestServicePolicyChoice:` + fmt.Sprintf("%v", this.EastWestServicePolicyChoice) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SecurityConfigType_NoForwardProxy) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SecurityConfigType_NoForwardProxy{`,
		`NoForwardProxy:` + strings.Replace(fmt.Sprintf("%v", this.NoForwardProxy), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SecurityConfigType_ActiveForwardProxyPolicies) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SecurityConfigType_ActiveForwardProxyPolicies{`,
		`ActiveForwardProxyPolicies:` + strings.Replace(fmt.Sprintf("%v", this.ActiveForwardProxyPolicies), "ActiveForwardProxyPoliciesType", "ves_io_schema_network_firewall.ActiveForwardProxyPoliciesType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SecurityConfigType_NoNetworkPolicy) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SecurityConfigType_NoNetworkPolicy{`,
		`NoNetworkPolicy:` + strings.Replace(fmt.Sprintf("%v", this.NoNetworkPolicy), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SecurityConfigType_ActiveNetworkPolicies) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SecurityConfigType_ActiveNetworkPolicies{`,
		`ActiveNetworkPolicies:` + strings.Replace(fmt.Sprintf("%v", this.ActiveNetworkPolicies), "ActiveNetworkPoliciesType", "ves_io_schema_network_firewall.ActiveNetworkPoliciesType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SecurityConfigType_ForwardProxyAllowAll) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SecurityConfigType_ForwardProxyAllowAll{`,
		`ForwardProxyAllowAll:` + strings.Replace(fmt.Sprintf("%v", this.ForwardProxyAllowAll), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SecurityConfigType_NoEastWestPolicy) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SecurityConfigType_NoEastWestPolicy{`,
		`NoEastWestPolicy:` + strings.Replace(fmt.Sprintf("%v", this.NoEastWestPolicy), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SecurityConfigType_ActiveEastWestServicePolicies) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SecurityConfigType_ActiveEastWestServicePolicies{`,
		`ActiveEastWestServicePolicies:` + strings.Replace(fmt.Sprintf("%v", this.ActiveEastWestServicePolicies), "ActiveServicePoliciesType", "ActiveServicePoliciesType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SecurityConfigType_EastWestServicePolicyAllowAll) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SecurityConfigType_EastWestServicePolicyAllowAll{`,
		`EastWestServicePolicyAllowAll:` + strings.Replace(fmt.Sprintf("%v", this.EastWestServicePolicyAllowAll), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AWSVPNTunnelConfigType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AWSVPNTunnelConfigType{`,
		`NodeName:` + fmt.Sprintf("%v", this.NodeName) + `,`,
		`TunnelRemoteIp:` + fmt.Sprintf("%v", this.TunnelRemoteIp) + `,`,
		`NodeId:` + fmt.Sprintf("%v", this.NodeId) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AWSTGWInfoConfigType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AWSTGWInfoConfigType{`,
		`TgwId:` + fmt.Sprintf("%v", this.TgwId) + `,`,
		`VpcId:` + fmt.Sprintf("%v", this.VpcId) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType) String() string {
	if this == nil {
		return "nil"
	}
	keysForVpcIpPrefixes := make([]string, 0, len(this.VpcIpPrefixes))
	for k, _ := range this.VpcIpPrefixes {
		keysForVpcIpPrefixes = append(keysForVpcIpPrefixes, k)
	}
	sortkeys.Strings(keysForVpcIpPrefixes)
	mapStringForVpcIpPrefixes := "map[string]*VPCIpPrefixesType{"
	for _, k := range keysForVpcIpPrefixes {
		mapStringForVpcIpPrefixes += fmt.Sprintf("%v: %v,", k, this.VpcIpPrefixes[k])
	}
	mapStringForVpcIpPrefixes += "}"
	s := strings.Join([]string{`&GlobalSpecType{`,
		`AwsParameters:` + strings.Replace(fmt.Sprintf("%v", this.AwsParameters), "ServicesVPCType", "ServicesVPCType", 1) + `,`,
		`VpcAttachments:` + strings.Replace(fmt.Sprintf("%v", this.VpcAttachments), "VPCAttachmentListType", "VPCAttachmentListType", 1) + `,`,
		`TgwSecurity:` + strings.Replace(fmt.Sprintf("%v", this.TgwSecurity), "SecurityConfigType", "SecurityConfigType", 1) + `,`,
		`VolterraSoftwareVersion:` + fmt.Sprintf("%v", this.VolterraSoftwareVersion) + `,`,
		`OperatingSystemVersion:` + fmt.Sprintf("%v", this.OperatingSystemVersion) + `,`,
		`VpcIpPrefixes:` + mapStringForVpcIpPrefixes + `,`,
		`VnConfig:` + strings.Replace(fmt.Sprintf("%v", this.VnConfig), "VnConfiguration", "VnConfiguration", 1) + `,`,
		`Address:` + fmt.Sprintf("%v", this.Address) + `,`,
		`Coordinates:` + strings.Replace(fmt.Sprintf("%v", this.Coordinates), "Coordinates", "ves_io_schema_site.Coordinates", 1) + `,`,
		`UserModificationTimestamp:` + strings.Replace(fmt.Sprintf("%v", this.UserModificationTimestamp), "Timestamp", "google_protobuf1.Timestamp", 1) + `,`,
		`TgwInfo:` + strings.Replace(fmt.Sprintf("%v", this.TgwInfo), "AWSTGWInfoConfigType", "AWSTGWInfoConfigType", 1) + `,`,
		`LogsReceiverChoice:` + fmt.Sprintf("%v", this.LogsReceiverChoice) + `,`,
		`Tunnels:` + strings.Replace(fmt.Sprintf("%v", this.Tunnels), "AWSVPNTunnelConfigType", "AWSVPNTunnelConfigType", 1) + `,`,
		`TfParams:` + strings.Replace(fmt.Sprintf("%v", this.TfParams), "ObjectRefType", "ves_io_schema_views.ObjectRefType", 1) + `,`,
		`ViewInternal:` + strings.Replace(fmt.Sprintf("%v", this.ViewInternal), "ObjectRefType", "ves_io_schema_views.ObjectRefType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_LogsStreamingDisabled) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_LogsStreamingDisabled{`,
		`LogsStreamingDisabled:` + strings.Replace(fmt.Sprintf("%v", this.LogsStreamingDisabled), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_LogReceiver) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_LogReceiver{`,
		`LogReceiver:` + strings.Replace(fmt.Sprintf("%v", this.LogReceiver), "ObjectRefType", "ves_io_schema_views.ObjectRefType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType{`,
		`AwsParameters:` + strings.Replace(fmt.Sprintf("%v", this.AwsParameters), "ServicesVPCType", "ServicesVPCType", 1) + `,`,
		`VpcAttachments:` + strings.Replace(fmt.Sprintf("%v", this.VpcAttachments), "VPCAttachmentListType", "VPCAttachmentListType", 1) + `,`,
		`TgwSecurity:` + strings.Replace(fmt.Sprintf("%v", this.TgwSecurity), "SecurityConfigType", "SecurityConfigType", 1) + `,`,
		`VolterraSoftwareVersion:` + fmt.Sprintf("%v", this.VolterraSoftwareVersion) + `,`,
		`OperatingSystemVersion:` + fmt.Sprintf("%v", this.OperatingSystemVersion) + `,`,
		`VnConfig:` + strings.Replace(fmt.Sprintf("%v", this.VnConfig), "VnConfiguration", "VnConfiguration", 1) + `,`,
		`Address:` + fmt.Sprintf("%v", this.Address) + `,`,
		`Coordinates:` + strings.Replace(fmt.Sprintf("%v", this.Coordinates), "Coordinates", "ves_io_schema_site.Coordinates", 1) + `,`,
		`LogsReceiverChoice:` + fmt.Sprintf("%v", this.LogsReceiverChoice) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_LogsStreamingDisabled) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_LogsStreamingDisabled{`,
		`LogsStreamingDisabled:` + strings.Replace(fmt.Sprintf("%v", this.LogsStreamingDisabled), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_LogReceiver) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_LogReceiver{`,
		`LogReceiver:` + strings.Replace(fmt.Sprintf("%v", this.LogReceiver), "ObjectRefType", "ves_io_schema_views.ObjectRefType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType{`,
		`VpcAttachments:` + strings.Replace(fmt.Sprintf("%v", this.VpcAttachments), "VPCAttachmentListType", "VPCAttachmentListType", 1) + `,`,
		`TgwSecurity:` + strings.Replace(fmt.Sprintf("%v", this.TgwSecurity), "SecurityConfigType", "SecurityConfigType", 1) + `,`,
		`VolterraSoftwareVersion:` + fmt.Sprintf("%v", this.VolterraSoftwareVersion) + `,`,
		`OperatingSystemVersion:` + fmt.Sprintf("%v", this.OperatingSystemVersion) + `,`,
		`VnConfig:` + strings.Replace(fmt.Sprintf("%v", this.VnConfig), "VnConfiguration", "VnConfiguration", 1) + `,`,
		`Address:` + fmt.Sprintf("%v", this.Address) + `,`,
		`Coordinates:` + strings.Replace(fmt.Sprintf("%v", this.Coordinates), "Coordinates", "ves_io_schema_site.Coordinates", 1) + `,`,
		`LogsReceiverChoice:` + fmt.Sprintf("%v", this.LogsReceiverChoice) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_LogsStreamingDisabled) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_LogsStreamingDisabled{`,
		`LogsStreamingDisabled:` + strings.Replace(fmt.Sprintf("%v", this.LogsStreamingDisabled), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_LogReceiver) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_LogReceiver{`,
		`LogReceiver:` + strings.Replace(fmt.Sprintf("%v", this.LogReceiver), "ObjectRefType", "ves_io_schema_views.ObjectRefType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType) String() string {
	if this == nil {
		return "nil"
	}
	keysForVpcIpPrefixes := make([]string, 0, len(this.VpcIpPrefixes))
	for k, _ := range this.VpcIpPrefixes {
		keysForVpcIpPrefixes = append(keysForVpcIpPrefixes, k)
	}
	sortkeys.Strings(keysForVpcIpPrefixes)
	mapStringForVpcIpPrefixes := "map[string]*VPCIpPrefixesType{"
	for _, k := range keysForVpcIpPrefixes {
		mapStringForVpcIpPrefixes += fmt.Sprintf("%v: %v,", k, this.VpcIpPrefixes[k])
	}
	mapStringForVpcIpPrefixes += "}"
	s := strings.Join([]string{`&GetSpecType{`,
		`AwsParameters:` + strings.Replace(fmt.Sprintf("%v", this.AwsParameters), "ServicesVPCType", "ServicesVPCType", 1) + `,`,
		`VpcAttachments:` + strings.Replace(fmt.Sprintf("%v", this.VpcAttachments), "VPCAttachmentListType", "VPCAttachmentListType", 1) + `,`,
		`TgwSecurity:` + strings.Replace(fmt.Sprintf("%v", this.TgwSecurity), "SecurityConfigType", "SecurityConfigType", 1) + `,`,
		`VolterraSoftwareVersion:` + fmt.Sprintf("%v", this.VolterraSoftwareVersion) + `,`,
		`OperatingSystemVersion:` + fmt.Sprintf("%v", this.OperatingSystemVersion) + `,`,
		`VpcIpPrefixes:` + mapStringForVpcIpPrefixes + `,`,
		`VnConfig:` + strings.Replace(fmt.Sprintf("%v", this.VnConfig), "VnConfiguration", "VnConfiguration", 1) + `,`,
		`Address:` + fmt.Sprintf("%v", this.Address) + `,`,
		`Coordinates:` + strings.Replace(fmt.Sprintf("%v", this.Coordinates), "Coordinates", "ves_io_schema_site.Coordinates", 1) + `,`,
		`UserModificationTimestamp:` + strings.Replace(fmt.Sprintf("%v", this.UserModificationTimestamp), "Timestamp", "google_protobuf1.Timestamp", 1) + `,`,
		`TgwInfo:` + strings.Replace(fmt.Sprintf("%v", this.TgwInfo), "AWSTGWInfoConfigType", "AWSTGWInfoConfigType", 1) + `,`,
		`LogsReceiverChoice:` + fmt.Sprintf("%v", this.LogsReceiverChoice) + `,`,
		`Tunnels:` + strings.Replace(fmt.Sprintf("%v", this.Tunnels), "AWSVPNTunnelConfigType", "AWSVPNTunnelConfigType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_LogsStreamingDisabled) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_LogsStreamingDisabled{`,
		`LogsStreamingDisabled:` + strings.Replace(fmt.Sprintf("%v", this.LogsStreamingDisabled), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_LogReceiver) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_LogReceiver{`,
		`LogReceiver:` + strings.Replace(fmt.Sprintf("%v", this.LogReceiver), "ObjectRefType", "ves_io_schema_views.ObjectRefType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringTypes(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *TGWAssignedASNType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TGWAssignedASNType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TGWAssignedASNType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TgwAsn", wireType)
			}
			m.TgwAsn = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TgwAsn |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VolterraSiteAsn", wireType)
			}
			m.VolterraSiteAsn = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VolterraSiteAsn |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ExistingTGWType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExistingTGWType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExistingTGWType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TgwId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TgwId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TgwAsn", wireType)
			}
			m.TgwAsn = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TgwAsn |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VolterraSiteAsn", wireType)
			}
			m.VolterraSiteAsn = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VolterraSiteAsn |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TGWParamsType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TGWParamsType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TGWParamsType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SystemGenerated", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.AsnChoice = &TGWParamsType_SystemGenerated{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserAssigned", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &TGWAssignedASNType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.AsnChoice = &TGWParamsType_UserAssigned{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ServicesVPCType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ServicesVPCType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ServicesVPCType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AwsRegion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AwsRegion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewVpc", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema_views1.AWSVPCParamsType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ServiceVpcChoice = &ServicesVPCType_NewVpc{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VpcId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServiceVpcChoice = &ServicesVPCType_VpcId{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewTgw", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &TGWParamsType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.TgwChoice = &ServicesVPCType_NewTgw{v}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExistingTgw", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ExistingTGWType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.TgwChoice = &ServicesVPCType_ExistingTgw{v}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AwsCertifiedHw", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AwsCertifiedHw = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InstanceType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InstanceType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SshKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SshKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AzNodes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AzNodes = append(m.AzNodes, &ves_io_schema_views1.AWSVPCTwoInterfaceNodeType{})
			if err := m.AzNodes[len(m.AzNodes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodesPerAz", wireType)
			}
			m.NodesPerAz = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NodesPerAz |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AwsCred", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema_views.ObjectRefType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Deployment = &ServicesVPCType_AwsCred{v}
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Assisted", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Deployment = &ServicesVPCType_Assisted{v}
			iNdEx = postIndex
		case 22:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DiskSize", wireType)
			}
			m.DiskSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DiskSize |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VnConfiguration) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VnConfiguration: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VnConfiguration: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoInsideStaticRoutes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.InsideStaticRouteChoice = &VnConfiguration_NoInsideStaticRoutes{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InsideStaticRoutes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema_views1.SiteStaticRoutesListType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.InsideStaticRouteChoice = &VnConfiguration_InsideStaticRoutes{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoOutsideStaticRoutes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.OutsideStaticRouteChoice = &VnConfiguration_NoOutsideStaticRoutes{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutsideStaticRoutes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema_views1.SiteStaticRoutesListType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.OutsideStaticRouteChoice = &VnConfiguration_OutsideStaticRoutes{v}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoGlobalNetwork", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.GlobalNetworkChoice = &VnConfiguration_NoGlobalNetwork{v}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GlobalNetworkList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema_views1.GlobalNetworkConnectionListType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.GlobalNetworkChoice = &VnConfiguration_GlobalNetworkList{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VPCAttachmentType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VPCAttachmentType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VPCAttachmentType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VpcId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VpcId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Labels", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Labels == nil {
				m.Labels = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTypes
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthTypes
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTypes
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthTypes
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipTypes(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthTypes
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Labels[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VPCIpPrefixesType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VPCIpPrefixesType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VPCIpPrefixesType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Prefixes", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Prefixes = append(m.Prefixes, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VPCAttachmentListType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VPCAttachmentListType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VPCAttachmentListType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VpcList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VpcList = append(m.VpcList, &VPCAttachmentType{})
			if err := m.VpcList[len(m.VpcList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ActiveServicePoliciesType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ActiveServicePoliciesType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ActiveServicePoliciesType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServicePolicies", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServicePolicies = append(m.ServicePolicies, &ves_io_schema_views.ObjectRefType{})
			if err := m.ServicePolicies[len(m.ServicePolicies)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SecurityConfigType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SecurityConfigType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SecurityConfigType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoForwardProxy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ForwardProxyChoice = &SecurityConfigType_NoForwardProxy{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActiveForwardProxyPolicies", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema_network_firewall.ActiveForwardProxyPoliciesType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ForwardProxyChoice = &SecurityConfigType_ActiveForwardProxyPolicies{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoNetworkPolicy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.NetworkPolicyChoice = &SecurityConfigType_NoNetworkPolicy{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActiveNetworkPolicies", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema_network_firewall.ActiveNetworkPoliciesType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.NetworkPolicyChoice = &SecurityConfigType_ActiveNetworkPolicies{v}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ForwardProxyAllowAll", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ForwardProxyChoice = &SecurityConfigType_ForwardProxyAllowAll{v}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoEastWestPolicy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.EastWestServicePolicyChoice = &SecurityConfigType_NoEastWestPolicy{v}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActiveEastWestServicePolicies", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ActiveServicePoliciesType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.EastWestServicePolicyChoice = &SecurityConfigType_ActiveEastWestServicePolicies{v}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EastWestServicePolicyAllowAll", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.EastWestServicePolicyChoice = &SecurityConfigType_EastWestServicePolicyAllowAll{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AWSVPNTunnelConfigType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AWSVPNTunnelConfigType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AWSVPNTunnelConfigType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NodeName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TunnelRemoteIp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TunnelRemoteIp = append(m.TunnelRemoteIp, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NodeId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AWSTGWInfoConfigType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AWSTGWInfoConfigType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AWSTGWInfoConfigType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TgwId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TgwId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VpcId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VpcId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GlobalSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GlobalSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GlobalSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AwsParameters", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AwsParameters == nil {
				m.AwsParameters = &ServicesVPCType{}
			}
			if err := m.AwsParameters.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VpcAttachments", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.VpcAttachments == nil {
				m.VpcAttachments = &VPCAttachmentListType{}
			}
			if err := m.VpcAttachments.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TgwSecurity", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TgwSecurity == nil {
				m.TgwSecurity = &SecurityConfigType{}
			}
			if err := m.TgwSecurity.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VolterraSoftwareVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VolterraSoftwareVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperatingSystemVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OperatingSystemVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VpcIpPrefixes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.VpcIpPrefixes == nil {
				m.VpcIpPrefixes = make(map[string]*VPCIpPrefixesType)
			}
			var mapkey string
			var mapvalue *VPCIpPrefixesType
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTypes
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthTypes
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTypes
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= (int(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthTypes
					}
					postmsgIndex := iNdEx + mapmsglen
					if mapmsglen < 0 {
						return ErrInvalidLengthTypes
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &VPCIpPrefixesType{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipTypes(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthTypes
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.VpcIpPrefixes[mapkey] = mapvalue
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VnConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.VnConfig == nil {
				m.VnConfig = &VnConfiguration{}
			}
			if err := m.VnConfig.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Coordinates", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Coordinates == nil {
				m.Coordinates = &ves_io_schema_site.Coordinates{}
			}
			if err := m.Coordinates.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserModificationTimestamp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UserModificationTimestamp == nil {
				m.UserModificationTimestamp = &google_protobuf1.Timestamp{}
			}
			if err := m.UserModificationTimestamp.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TgwInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TgwInfo == nil {
				m.TgwInfo = &AWSTGWInfoConfigType{}
			}
			if err := m.TgwInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LogsStreamingDisabled", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.LogsReceiverChoice = &GlobalSpecType_LogsStreamingDisabled{v}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LogReceiver", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema_views.ObjectRefType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.LogsReceiverChoice = &GlobalSpecType_LogReceiver{v}
			iNdEx = postIndex
		case 998:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tunnels", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tunnels = append(m.Tunnels, &AWSVPNTunnelConfigType{})
			if err := m.Tunnels[len(m.Tunnels)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 999:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TfParams", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TfParams == nil {
				m.TfParams = &ves_io_schema_views.ObjectRefType{}
			}
			if err := m.TfParams.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 1000:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ViewInternal", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ViewInternal == nil {
				m.ViewInternal = &ves_io_schema_views.ObjectRefType{}
			}
			if err := m.ViewInternal.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AwsParameters", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AwsParameters == nil {
				m.AwsParameters = &ServicesVPCType{}
			}
			if err := m.AwsParameters.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VpcAttachments", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.VpcAttachments == nil {
				m.VpcAttachments = &VPCAttachmentListType{}
			}
			if err := m.VpcAttachments.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TgwSecurity", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TgwSecurity == nil {
				m.TgwSecurity = &SecurityConfigType{}
			}
			if err := m.TgwSecurity.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VolterraSoftwareVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VolterraSoftwareVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperatingSystemVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OperatingSystemVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VnConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.VnConfig == nil {
				m.VnConfig = &VnConfiguration{}
			}
			if err := m.VnConfig.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Coordinates", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Coordinates == nil {
				m.Coordinates = &ves_io_schema_site.Coordinates{}
			}
			if err := m.Coordinates.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LogsStreamingDisabled", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.LogsReceiverChoice = &CreateSpecType_LogsStreamingDisabled{v}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LogReceiver", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema_views.ObjectRefType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.LogsReceiverChoice = &CreateSpecType_LogReceiver{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplaceSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplaceSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplaceSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VpcAttachments", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.VpcAttachments == nil {
				m.VpcAttachments = &VPCAttachmentListType{}
			}
			if err := m.VpcAttachments.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TgwSecurity", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TgwSecurity == nil {
				m.TgwSecurity = &SecurityConfigType{}
			}
			if err := m.TgwSecurity.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VolterraSoftwareVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VolterraSoftwareVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperatingSystemVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OperatingSystemVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VnConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.VnConfig == nil {
				m.VnConfig = &VnConfiguration{}
			}
			if err := m.VnConfig.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Coordinates", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Coordinates == nil {
				m.Coordinates = &ves_io_schema_site.Coordinates{}
			}
			if err := m.Coordinates.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LogsStreamingDisabled", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.LogsReceiverChoice = &ReplaceSpecType_LogsStreamingDisabled{v}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LogReceiver", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema_views.ObjectRefType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.LogsReceiverChoice = &ReplaceSpecType_LogReceiver{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AwsParameters", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AwsParameters == nil {
				m.AwsParameters = &ServicesVPCType{}
			}
			if err := m.AwsParameters.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VpcAttachments", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.VpcAttachments == nil {
				m.VpcAttachments = &VPCAttachmentListType{}
			}
			if err := m.VpcAttachments.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TgwSecurity", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TgwSecurity == nil {
				m.TgwSecurity = &SecurityConfigType{}
			}
			if err := m.TgwSecurity.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VolterraSoftwareVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VolterraSoftwareVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperatingSystemVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OperatingSystemVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VpcIpPrefixes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.VpcIpPrefixes == nil {
				m.VpcIpPrefixes = make(map[string]*VPCIpPrefixesType)
			}
			var mapkey string
			var mapvalue *VPCIpPrefixesType
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTypes
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthTypes
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTypes
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= (int(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthTypes
					}
					postmsgIndex := iNdEx + mapmsglen
					if mapmsglen < 0 {
						return ErrInvalidLengthTypes
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &VPCIpPrefixesType{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipTypes(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthTypes
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.VpcIpPrefixes[mapkey] = mapvalue
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VnConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.VnConfig == nil {
				m.VnConfig = &VnConfiguration{}
			}
			if err := m.VnConfig.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Coordinates", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Coordinates == nil {
				m.Coordinates = &ves_io_schema_site.Coordinates{}
			}
			if err := m.Coordinates.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserModificationTimestamp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UserModificationTimestamp == nil {
				m.UserModificationTimestamp = &google_protobuf1.Timestamp{}
			}
			if err := m.UserModificationTimestamp.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TgwInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TgwInfo == nil {
				m.TgwInfo = &AWSTGWInfoConfigType{}
			}
			if err := m.TgwInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LogsStreamingDisabled", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.LogsReceiverChoice = &GetSpecType_LogsStreamingDisabled{v}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LogReceiver", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema_views.ObjectRefType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.LogsReceiverChoice = &GetSpecType_LogReceiver{v}
			iNdEx = postIndex
		case 998:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tunnels", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tunnels = append(m.Tunnels, &AWSVPNTunnelConfigType{})
			if err := m.Tunnels[len(m.Tunnels)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTypes(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthTypes
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipTypes(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthTypes = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTypes   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("ves.io/schema/views/aws_tgw_site/types.proto", fileDescriptorTypes) }
func init() {
	golang_proto.RegisterFile("ves.io/schema/views/aws_tgw_site/types.proto", fileDescriptorTypes)
}

var fileDescriptorTypes = []byte{
	// 3356 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x5a, 0x4d, 0x6c, 0x1b, 0xd7,
	0x76, 0xd6, 0xe5, 0xef, 0xf0, 0xea, 0x87, 0xd4, 0x88, 0x92, 0x69, 0xf9, 0x85, 0x9e, 0xb0, 0x76,
	0x23, 0xfb, 0x91, 0x94, 0x49, 0xc9, 0xb6, 0xec, 0x87, 0xbe, 0x9a, 0x54, 0x5c, 0xfd, 0x34, 0x51,
	0xf4, 0x46, 0x8a, 0xf4, 0xfa, 0x7e, 0x32, 0x19, 0x0d, 0x2f, 0x47, 0x13, 0x0f, 0xe7, 0x0e, 0xe6,
	0x0e, 0x49, 0xd3, 0xad, 0x01, 0xa3, 0x59, 0xb4, 0x30, 0xba, 0x68, 0xbd, 0x2a, 0xba, 0xe8, 0xb2,
	0x08, 0x0c, 0x74, 0x57, 0x14, 0x41, 0xe9, 0xa2, 0xae, 0x81, 0x16, 0x41, 0x57, 0x5e, 0x74, 0x11,
	0x64, 0x15, 0x33, 0x45, 0x9b, 0x06, 0x2d, 0x90, 0x45, 0x17, 0x46, 0x0b, 0x24, 0xc5, 0xbd, 0x33,
	0x43, 0x0e, 0x29, 0xea, 0x27, 0xae, 0x81, 0xbe, 0x04, 0xd9, 0x08, 0x33, 0x73, 0xcf, 0xdf, 0x3d,
	0xf7, 0x9c, 0xf3, 0x9d, 0x73, 0x29, 0x98, 0x6d, 0x20, 0x92, 0xd7, 0xf0, 0x3c, 0x51, 0xf6, 0x51,
	0x4d, 0x9e, 0x6f, 0x68, 0xa8, 0x49, 0xe6, 0xe5, 0x26, 0x91, 0x6c, 0xb5, 0x29, 0x11, 0xcd, 0x46,
	0xf3, 0x76, 0xcb, 0x44, 0x24, 0x6f, 0x5a, 0xd8, 0xc6, 0xbc, 0xe0, 0x50, 0xe7, 0x1d, 0xea, 0x3c,
	0xa3, 0xce, 0xfb, 0xa9, 0x67, 0x73, 0xaa, 0x66, 0xef, 0xd7, 0xf7, 0xf2, 0x0a, 0xae, 0xcd, 0xab,
	0x58, 0xc5, 0xf3, 0x8c, 0x71, 0xaf, 0x5e, 0x65, 0x6f, 0xec, 0x85, 0x3d, 0x39, 0x02, 0x67, 0xcf,
	0xaa, 0x18, 0xab, 0x3a, 0xea, 0x51, 0xd9, 0x5a, 0x0d, 0x11, 0x5b, 0xae, 0x99, 0x2e, 0xc1, 0xc5,
	0x7e, 0xfb, 0x0c, 0x64, 0x37, 0xb1, 0x75, 0x4b, 0xaa, 0x6a, 0x16, 0x6a, 0xca, 0xba, 0xee, 0xb7,
	0x6e, 0xf6, 0x4c, 0x3f, 0x2d, 0x36, 0x6d, 0x0d, 0x1b, 0xde, 0x62, 0xba, 0x7f, 0x71, 0x70, 0x6b,
	0xb3, 0xa7, 0xfb, 0xd7, 0xfd, 0x4b, 0x3f, 0x18, 0xf0, 0x91, 0xac, 0x6b, 0x15, 0xd9, 0x46, 0xee,
	0xaa, 0x70, 0xd0, 0x83, 0x52, 0xbf, 0xea, 0x73, 0xc3, 0x7c, 0x4c, 0x0d, 0x90, 0xfc, 0x5a, 0xce,
	0x0e, 0xa3, 0xf2, 0x11, 0x64, 0x9a, 0x90, 0xdf, 0x5e, 0xd9, 0x2d, 0x11, 0xa2, 0xa9, 0x06, 0xaa,
	0x94, 0xb6, 0x36, 0xb6, 0x5b, 0x26, 0xe2, 0xe7, 0x60, 0x94, 0x3a, 0x5f, 0x26, 0x46, 0x0a, 0x08,
	0x60, 0x6e, 0xbc, 0x1c, 0xff, 0x9b, 0x7f, 0x7f, 0x1c, 0x84, 0x17, 0xb9, 0xd4, 0x57, 0x5f, 0x07,
	0x85, 0x7b, 0xcf, 0x83, 0x62, 0xc4, 0x56, 0x9b, 0x25, 0x62, 0xf0, 0x57, 0xe1, 0x64, 0x03, 0xeb,
	0x36, 0xb2, 0x2c, 0x99, 0x9d, 0x15, 0xe3, 0x09, 0x30, 0x9e, 0x51, 0xca, 0x13, 0xb9, 0x18, 0x4a,
	0x7d, 0xfd, 0x75, 0x50, 0x8c, 0x7b, 0x54, 0x5b, 0x9a, 0x8d, 0x4a, 0xc4, 0xc8, 0xfc, 0x3d, 0x80,
	0xf1, 0x9b, 0xb7, 0x35, 0x62, 0x6b, 0x86, 0xba, 0xbd, 0xb2, 0xcb, 0xd4, 0xbe, 0x05, 0xa9, 0x58,
	0x49, 0xab, 0x30, 0xad, 0xb1, 0xf2, 0xd2, 0xf3, 0x36, 0x18, 0xa1, 0x52, 0x42, 0x56, 0x20, 0x75,
	0x83, 0x3e, 0xfc, 0xba, 0x75, 0xae, 0x98, 0x79, 0x67, 0xce, 0x56, 0x9b, 0xb9, 0x0b, 0x73, 0x3f,
	0x97, 0x73, 0x77, 0x2e, 0xe5, 0xae, 0xfd, 0xf2, 0x77, 0x97, 0xee, 0xfe, 0x5e, 0xf7, 0xb9, 0x70,
	0xf5, 0xee, 0x85, 0x73, 0x62, 0xd8, 0x56, 0x9b, 0x6b, 0x15, 0xfe, 0x5c, 0x6f, 0x1f, 0x43, 0x6c,
	0x3a, 0x72, 0x0f, 0xc1, 0x13, 0xec, 0xe1, 0x9f, 0x01, 0x1c, 0xdf, 0x5e, 0xd9, 0xdd, 0x94, 0x2d,
	0xb9, 0x46, 0xd8, 0x0e, 0x4a, 0x30, 0x41, 0x5a, 0xc4, 0x46, 0x35, 0x49, 0x45, 0x06, 0xb2, 0x64,
	0x1b, 0x55, 0x98, 0xe6, 0xd1, 0x62, 0x32, 0xdf, 0x1f, 0xe6, 0x37, 0x6b, 0xa6, 0xdd, 0x5a, 0x1d,
	0x11, 0xe3, 0x0e, 0xfd, 0x8a, 0x47, 0xce, 0xff, 0x1c, 0x8e, 0xd7, 0x09, 0xb2, 0x24, 0xd9, 0x3d,
	0x13, 0x66, 0xc9, 0x68, 0x71, 0x31, 0x7f, 0x5c, 0x9a, 0xe4, 0x0f, 0x1e, 0xe4, 0xea, 0x88, 0x38,
	0x46, 0x85, 0x79, 0x9f, 0xcb, 0xaf, 0x40, 0x28, 0x13, 0x43, 0x52, 0xf6, 0xb1, 0xa6, 0x20, 0x3e,
	0xfe, 0xb8, 0x0d, 0x02, 0x4f, 0xdb, 0x00, 0x74, 0xda, 0x20, 0x58, 0xcc, 0x2e, 0xac, 0x87, 0x38,
	0x90, 0x08, 0x64, 0xde, 0x1f, 0x87, 0xf1, 0x2d, 0x64, 0x35, 0x34, 0x05, 0x91, 0x9d, 0xcd, 0x65,
	0xb6, 0xb1, 0x0f, 0x02, 0x10, 0x52, 0x65, 0x16, 0x52, 0x35, 0x6c, 0xb8, 0xe7, 0xf3, 0x87, 0x01,
	0xef, 0x80, 0xbe, 0x02, 0xd6, 0xff, 0x00, 0x71, 0x42, 0x36, 0x73, 0x06, 0xb6, 0xec, 0x7d, 0x24,
	0x13, 0x3b, 0x57, 0x60, 0xef, 0x04, 0xd7, 0xbb, 0xef, 0x63, 0xa8, 0x9e, 0x53, 0x90, 0x61, 0x5b,
	0xb2, 0x9e, 0x2b, 0x88, 0x31, 0x54, 0xcf, 0x35, 0x11, 0x5b, 0xe8, 0x3e, 0x2e, 0x88, 0x31, 0x22,
	0xe7, 0x5c, 0xf2, 0x58, 0x9d, 0x1c, 0x78, 0x2c, 0xb2, 0x47, 0x46, 0x5b, 0x14, 0xc7, 0x14, 0xd9,
	0x27, 0x0f, 0xca, 0x55, 0x47, 0x1b, 0xa5, 0x97, 0x4d, 0x8f, 0x15, 0x7a, 0x46, 0xb8, 0x06, 0xf5,
	0x0c, 0x2c, 0x0e, 0x18, 0x58, 0x14, 0x21, 0xaa, 0x77, 0x69, 0xe9, 0x33, 0xa3, 0xf5, 0xdb, 0x57,
	0x14, 0x61, 0x0d, 0xf5, 0xb4, 0x78, 0xa6, 0x50, 0x85, 0x4d, 0x22, 0x32, 0xdf, 0xf0, 0x37, 0x60,
	0xd4, 0x40, 0x4d, 0xa9, 0x61, 0x2a, 0xee, 0xd1, 0x9d, 0x1f, 0x7a, 0x74, 0xa5, 0xdd, 0xad, 0x9d,
	0xcd, 0xe5, 0x5e, 0xec, 0xac, 0x8e, 0x88, 0x11, 0x03, 0x35, 0x77, 0x4c, 0x85, 0xff, 0x09, 0x8c,
	0x34, 0x4c, 0x85, 0xe6, 0x41, 0xe8, 0xe8, 0x3c, 0x68, 0x98, 0xca, 0x91, 0x79, 0xb0, 0x3a, 0x22,
	0x86, 0x1b, 0xa6, 0xb2, 0x56, 0xe1, 0xd7, 0x1d, 0xa3, 0x6c, 0xb5, 0x99, 0x8a, 0x30, 0xa3, 0xe6,
	0x4f, 0x14, 0x4f, 0x3e, 0xf3, 0x00, 0x33, 0x6f, 0x5b, 0x6d, 0xf2, 0x3b, 0x70, 0x0c, 0xb9, 0x99,
	0xcb, 0x04, 0x46, 0x99, 0xc0, 0xc2, 0xf1, 0x02, 0x07, 0xf2, 0x7d, 0x15, 0x88, 0xa3, 0x9e, 0x20,
	0x2a, 0x97, 0xc0, 0x04, 0x25, 0x57, 0x90, 0x65, 0x6b, 0x55, 0x0d, 0x55, 0xa4, 0xfd, 0x66, 0x8a,
	0x63, 0x0e, 0x58, 0xfb, 0xa4, 0x0d, 0xce, 0xc8, 0x4d, 0x92, 0xdb, 0x6b, 0x61, 0x3d, 0x57, 0xab,
	0xeb, 0xb6, 0x96, 0x33, 0x34, 0x25, 0x47, 0x13, 0xb2, 0x86, 0xc8, 0xbe, 0xe7, 0x9f, 0x57, 0xad,
	0xb3, 0xa9, 0x1b, 0xe2, 0x51, 0x94, 0xe2, 0x84, 0xdc, 0x24, 0xcb, 0x9e, 0x86, 0xd5, 0x26, 0xff,
	0x20, 0x00, 0xc7, 0x35, 0x83, 0xd8, 0xb2, 0xa1, 0x38, 0xa5, 0x33, 0x15, 0x63, 0x2a, 0xff, 0x03,
	0x7c, 0xd2, 0x06, 0x31, 0x7b, 0x21, 0x7f, 0x5b, 0x97, 0x2d, 0x15, 0x75, 0xda, 0xe0, 0xd7, 0x60,
	0xef, 0x15, 0x42, 0x7b, 0x21, 0x5f, 0xf4, 0x9e, 0x6b, 0x97, 0xf3, 0x8b, 0xce, 0x33, 0x35, 0xe4,
	0xc1, 0x23, 0xf0, 0x17, 0x00, 0x2e, 0xfa, 0xa8, 0xf9, 0xd7, 0xe6, 0x16, 0x85, 0xdb, 0x42, 0x63,
	0x79, 0xf3, 0xed, 0xac, 0x50, 0xb8, 0xb2, 0x52, 0x16, 0xc4, 0xd2, 0x9b, 0x17, 0x84, 0x1a, 0xaa,
	0x68, 0xf5, 0x9a, 0x60, 0x22, 0xab, 0x8a, 0xad, 0x1a, 0x35, 0x00, 0x2e, 0xf8, 0x05, 0xf3, 0xe7,
	0xe7, 0x96, 0xba, 0x6c, 0x0b, 0x45, 0x8f, 0x6d, 0x5f, 0x53, 0xf7, 0xfb, 0x98, 0xae, 0xf9, 0x2d,
	0xe0, 0x7f, 0x38, 0x57, 0xb8, 0xd2, 0xe5, 0xba, 0xb2, 0xe8, 0x71, 0x35, 0x90, 0xd5, 0x3a, 0xc0,
	0xda, 0x8d, 0x29, 0x71, 0xcc, 0xf3, 0x01, 0xcb, 0xf6, 0xd7, 0x60, 0x94, 0x90, 0x7d, 0xe9, 0x16,
	0x6a, 0xa5, 0x20, 0xf3, 0xc6, 0xc4, 0xf3, 0x36, 0x08, 0x52, 0xea, 0xb0, 0x15, 0x4c, 0xdd, 0xbb,
	0x21, 0x46, 0x08, 0xd9, 0xff, 0x6d, 0xd4, 0xe2, 0x7f, 0x07, 0x72, 0xf2, 0x1d, 0xc9, 0xc0, 0x15,
	0x44, 0x52, 0xa3, 0x42, 0xf0, 0xd0, 0xb8, 0x72, 0x82, 0x7d, 0xbb, 0x89, 0xd7, 0x0c, 0x1b, 0x59,
	0x55, 0x59, 0x41, 0x1b, 0xb8, 0xc2, 0x74, 0x95, 0xc7, 0xa9, 0x58, 0xee, 0x01, 0x08, 0x5f, 0x0c,
	0x16, 0xb2, 0x0b, 0x62, 0x54, 0xbe, 0x43, 0x97, 0x08, 0xbf, 0x04, 0xc7, 0x98, 0x5c, 0xc9, 0xa4,
	0xc5, 0xf0, 0x4e, 0x6a, 0x8c, 0x15, 0xe4, 0x99, 0xc7, 0x6d, 0x40, 0x4f, 0x06, 0x5c, 0xea, 0xe6,
	0xc4, 0xc5, 0x40, 0x6a, 0x5a, 0x84, 0x8c, 0x76, 0x13, 0x59, 0xa5, 0x3b, 0xfc, 0xdb, 0x90, 0x63,
	0x71, 0x64, 0xa1, 0x4a, 0x6a, 0x82, 0xc5, 0x66, 0x66, 0xa8, 0x51, 0x6f, 0xed, 0xbd, 0x87, 0x14,
	0x5b, 0x44, 0x55, 0x66, 0x47, 0xf2, 0xe1, 0xdd, 0x49, 0x45, 0xc7, 0xf5, 0x0a, 0x63, 0x44, 0x86,
	0xad, 0xc9, 0x3a, 0x59, 0x0d, 0x88, 0x51, 0x1a, 0x30, 0x16, 0xaa, 0xf0, 0x45, 0xc8, 0xd1, 0x9a,
	0x4c, 0x68, 0x4d, 0x8f, 0x1f, 0x51, 0xd3, 0x03, 0x62, 0x97, 0x8e, 0xbf, 0x04, 0x63, 0x15, 0x8d,
	0xdc, 0x92, 0x88, 0x76, 0x07, 0xa5, 0x66, 0xd8, 0x0e, 0xa6, 0xe8, 0x0e, 0x3c, 0xe3, 0x29, 0xb4,
	0xdc, 0xfb, 0xaf, 0xa0, 0xc8, 0x51, 0xaa, 0x2d, 0xed, 0x0e, 0xba, 0xfe, 0xde, 0x93, 0x36, 0xa8,
	0xc2, 0x29, 0x38, 0xe6, 0x55, 0x60, 0x61, 0x67, 0x73, 0x99, 0x0f, 0x16, 0xb2, 0x45, 0x98, 0x84,
	0xf1, 0x6d, 0x4b, 0x36, 0x88, 0x66, 0x0b, 0x2b, 0xb2, 0x8d, 0x9a, 0x72, 0x8b, 0x07, 0x97, 0xe1,
	0x6b, 0x30, 0x49, 0xf1, 0x48, 0xa0, 0x5e, 0x13, 0x58, 0xbe, 0x22, 0x1b, 0x59, 0x84, 0x8f, 0x2f,
	0x65, 0xaf, 0x65, 0x0b, 0x97, 0xb2, 0x85, 0x42, 0xb6, 0x50, 0xcc, 0x16, 0x8b, 0x30, 0x01, 0xe1,
	0xeb, 0xc8, 0xd4, 0x71, 0xab, 0x86, 0x0c, 0x9b, 0x0f, 0x14, 0x16, 0xca, 0xe7, 0x21, 0x4f, 0x1c,
	0x2d, 0xb4, 0x5a, 0xf9, 0x51, 0x21, 0xf8, 0xb4, 0x0d, 0x02, 0x14, 0x15, 0x16, 0xb2, 0x8b, 0x14,
	0x34, 0x68, 0x0a, 0xfb, 0x96, 0x23, 0x4f, 0xdb, 0x20, 0x4c, 0x97, 0xaf, 0x64, 0xaf, 0x96, 0xcf,
	0x42, 0x58, 0xe9, 0xc9, 0x9d, 0x7c, 0xdc, 0x06, 0x13, 0x4f, 0xdb, 0x60, 0xbc, 0xd3, 0x06, 0xe1,
	0xc2, 0x62, 0xb6, 0x70, 0x79, 0x3d, 0xc4, 0x05, 0x12, 0xc1, 0xf5, 0x10, 0x17, 0x4e, 0x44, 0xd6,
	0x43, 0xdc, 0x78, 0x62, 0x62, 0x3d, 0xc4, 0x25, 0x12, 0x93, 0xeb, 0x21, 0x6e, 0x32, 0xc1, 0xaf,
	0x87, 0x38, 0x3e, 0x31, 0xb5, 0x1e, 0xe2, 0xa6, 0x12, 0xc9, 0xf5, 0x10, 0x97, 0x4c, 0x4c, 0xaf,
	0x87, 0xb8, 0xe9, 0xc4, 0x4c, 0xe6, 0x5f, 0xc2, 0x30, 0xbe, 0x63, 0x2c, 0x63, 0xa3, 0xaa, 0xa9,
	0x75, 0x4b, 0xa6, 0xbd, 0x0f, 0xbf, 0x05, 0x4f, 0x19, 0x58, 0xd2, 0x0c, 0xa2, 0x55, 0x90, 0x44,
	0x6c, 0xd9, 0xd6, 0x14, 0xc9, 0xc2, 0x75, 0x1b, 0x91, 0xa3, 0x50, 0xb6, 0x1c, 0xa2, 0x2e, 0x5f,
	0x1d, 0x11, 0x93, 0x06, 0x5e, 0x63, 0xbc, 0x5b, 0x8c, 0x55, 0x64, 0x9c, 0xbc, 0x0a, 0x93, 0x43,
	0x25, 0x3a, 0xc5, 0x3b, 0x37, 0x34, 0x74, 0xa8, 0xc7, 0xfd, 0x42, 0xde, 0xd0, 0x88, 0xcd, 0xa2,
	0xc8, 0x53, 0xc5, 0x6b, 0x07, 0x15, 0xbd, 0x0d, 0x53, 0x06, 0x96, 0x70, 0xdd, 0x1e, 0xa2, 0x2c,
	0x7c, 0xac, 0xf9, 0x40, 0x9c, 0x36, 0xf0, 0x5b, 0x0e, 0x73, 0x9f, 0x58, 0x0d, 0x4e, 0x0f, 0x97,
	0x19, 0x79, 0xf1, 0x0d, 0x00, 0x71, 0x0a, 0x0f, 0x51, 0x55, 0x86, 0x93, 0x06, 0x96, 0x54, 0x1d,
	0xef, 0xc9, 0xba, 0xe4, 0xb6, 0xcd, 0xac, 0x44, 0x1f, 0x9e, 0x0b, 0x71, 0x03, 0xaf, 0x30, 0xfa,
	0x0d, 0x87, 0x9c, 0xaf, 0xc2, 0xa9, 0x7e, 0x01, 0x92, 0xae, 0x11, 0x9b, 0x55, 0xdd, 0xc3, 0xba,
	0x9c, 0x3e, 0x01, 0xcb, 0xd8, 0x30, 0x90, 0x42, 0xc3, 0xc1, 0xb3, 0x79, 0x35, 0x20, 0x4e, 0xaa,
	0x7e, 0x12, 0xba, 0x50, 0x2e, 0xc0, 0xd9, 0x21, 0xc7, 0xea, 0x45, 0x31, 0xcd, 0xc2, 0xc0, 0x47,
	0x6d, 0x00, 0x7c, 0xed, 0x4f, 0xb9, 0x08, 0xcf, 0x0c, 0xf3, 0xa4, 0x9f, 0x27, 0xec, 0xf2, 0x84,
	0x28, 0xcf, 0xe5, 0xec, 0x95, 0x72, 0x16, 0x4e, 0x0f, 0x6c, 0xc7, 0x47, 0xcd, 0xb9, 0xd4, 0x51,
	0x4a, 0xbd, 0x94, 0xbd, 0xe6, 0x34, 0x58, 0xeb, 0x21, 0x2e, 0x94, 0x08, 0xaf, 0x87, 0xb8, 0x68,
	0x82, 0xcb, 0xfc, 0x51, 0x00, 0x4e, 0xee, 0x6c, 0x2e, 0x97, 0x6c, 0x5b, 0x56, 0xf6, 0x69, 0x06,
	0x79, 0x9d, 0xb0, 0xdb, 0x01, 0x80, 0xff, 0x5b, 0x07, 0xe0, 0xe1, 0xff, 0x2d, 0x18, 0xd1, 0xe5,
	0x3d, 0xa4, 0xd3, 0x44, 0xa1, 0x65, 0xfa, 0x37, 0x8f, 0x47, 0xeb, 0x03, 0x56, 0xe5, 0xdf, 0x60,
	0x12, 0x6e, 0x1a, 0xb6, 0xd5, 0x2a, 0xf3, 0x7f, 0xf6, 0x08, 0x04, 0x21, 0x00, 0x9d, 0x4f, 0xff,
	0x21, 0x18, 0xb9, 0xff, 0x08, 0x04, 0xb8, 0x11, 0xd1, 0x55, 0x31, 0x7b, 0x0d, 0x8e, 0xfa, 0x48,
	0xf9, 0x04, 0x0c, 0x52, 0x24, 0x61, 0x3b, 0x11, 0xe9, 0x23, 0x9f, 0x84, 0xe1, 0x86, 0xac, 0xd7,
	0x11, 0xcb, 0xda, 0x98, 0xe8, 0xbc, 0x5c, 0x0f, 0x2c, 0x81, 0x8c, 0xc4, 0xbc, 0xb1, 0x66, 0x6e,
	0x5a, 0xa8, 0xaa, 0xdd, 0x46, 0x4e, 0x57, 0xbd, 0x0e, 0x39, 0xd3, 0x7d, 0x4f, 0x01, 0x21, 0x38,
	0x17, 0x2b, 0xe7, 0xd9, 0x3c, 0xf2, 0x00, 0x44, 0x33, 0x61, 0x2b, 0xf8, 0x1c, 0x00, 0x56, 0x4b,
	0x1f, 0x80, 0x60, 0xe2, 0x1e, 0xc7, 0x50, 0xea, 0x01, 0x08, 0x70, 0xc0, 0x7b, 0x4a, 0x01, 0xb1,
	0xcb, 0x9f, 0xf9, 0x73, 0x00, 0xa7, 0xfb, 0x76, 0xe6, 0x45, 0x11, 0x8f, 0x20, 0x47, 0x7d, 0xce,
	0xa2, 0x11, 0x30, 0x27, 0x2d, 0xbc, 0x80, 0x93, 0xca, 0xd3, 0x3d, 0x5b, 0xba, 0x16, 0x70, 0x23,
	0x62, 0xb4, 0x61, 0x2a, 0x54, 0xd5, 0xf5, 0xf4, 0x93, 0x36, 0x98, 0x85, 0x29, 0x38, 0x55, 0xda,
	0xdd, 0xa2, 0xb5, 0x5d, 0x90, 0xbb, 0xfc, 0x84, 0x07, 0x85, 0xcc, 0x9f, 0x00, 0x78, 0xba, 0xa4,
	0xd8, 0x5a, 0x03, 0xb9, 0x08, 0xb0, 0x89, 0x75, 0x4d, 0xd1, 0x5c, 0x57, 0xd8, 0x30, 0xe1, 0x95,
	0x6c, 0xd3, 0xfd, 0xee, 0x1a, 0x7b, 0x12, 0x8c, 0x3b, 0xff, 0xf0, 0xee, 0x44, 0x1f, 0x7b, 0xcb,
	0xb3, 0x30, 0x21, 0xf8, 0xbc, 0x15, 0x27, 0xfd, 0x9a, 0x33, 0xff, 0x19, 0x85, 0xfc, 0x16, 0x52,
	0xea, 0x96, 0x66, 0xb7, 0x9c, 0x8a, 0xcc, 0x8c, 0xb9, 0x01, 0x13, 0x06, 0x96, 0xaa, 0xd8, 0x6a,
	0xca, 0x56, 0x45, 0x32, 0x2d, 0x7c, 0xbb, 0x75, 0xcc, 0xb4, 0x33, 0x61, 0xe0, 0xdf, 0x72, 0xc8,
	0x37, 0x29, 0x35, 0xff, 0x3e, 0x80, 0xaf, 0xc8, 0x6c, 0xb3, 0xfd, 0x62, 0x7a, 0x9b, 0x73, 0xaa,
	0xf0, 0x8f, 0x07, 0xe4, 0x0d, 0x8e, 0xec, 0x79, 0xc7, 0x63, 0x7e, 0xd9, 0x7e, 0xb7, 0xad, 0x8e,
	0x88, 0xb3, 0xf2, 0xa1, 0x14, 0x6e, 0x59, 0xf3, 0x64, 0x3a, 0x8e, 0x39, 0xaa, 0x22, 0x3b, 0x65,
	0xcd, 0x2d, 0x36, 0x4c, 0x4a, 0x8b, 0x27, 0xf0, 0x94, 0xbb, 0x91, 0x3e, 0x39, 0x5a, 0xb7, 0x0e,
	0x5f, 0x3b, 0xd9, 0x16, 0xfc, 0x52, 0x3d, 0xeb, 0x03, 0xe2, 0xb4, 0x3c, 0x6c, 0x91, 0x7f, 0x13,
	0x9e, 0xea, 0x77, 0x9b, 0xac, 0xeb, 0xb8, 0x49, 0xff, 0xba, 0x4d, 0xf9, 0x61, 0xe7, 0x90, 0xac,
	0xfa, 0xfc, 0x50, 0xa2, 0x4c, 0x25, 0x5d, 0xe7, 0x6f, 0xc2, 0x29, 0x03, 0x4b, 0x74, 0x16, 0x92,
	0xe8, 0x58, 0xe3, 0x79, 0x22, 0x76, 0x84, 0x28, 0x20, 0x26, 0x0c, 0x7c, 0x53, 0x26, 0xf6, 0x2e,
	0x22, 0xb6, 0xeb, 0x8a, 0x3f, 0x00, 0xf0, 0x55, 0xd7, 0x17, 0x3d, 0x59, 0x07, 0xa2, 0x16, 0x32,
	0xa9, 0x3f, 0x3a, 0x3e, 0xc5, 0x0e, 0x4d, 0x86, 0x55, 0x20, 0xba, 0xc1, 0xe3, 0x19, 0x30, 0x40,
	0xc4, 0xcb, 0x30, 0x73, 0x88, 0x05, 0x7e, 0x57, 0x8d, 0x1e, 0xb9, 0xbf, 0x57, 0xd0, 0x10, 0xe1,
	0x5d, 0x9f, 0x5d, 0x5f, 0x7c, 0xd2, 0x06, 0x97, 0xe0, 0x69, 0x98, 0x74, 0x23, 0x4b, 0x60, 0x2e,
	0x15, 0x5c, 0x57, 0x80, 0x02, 0x9c, 0x82, 0x13, 0xee, 0xb1, 0x75, 0x3f, 0x2e, 0x96, 0x2f, 0xc0,
	0x64, 0xff, 0xc1, 0xb9, 0xa0, 0x31, 0xe9, 0x9b, 0xc8, 0xc3, 0xc5, 0xec, 0xd5, 0xec, 0x42, 0xf9,
	0x0a, 0x3c, 0x7b, 0xe8, 0x1e, 0x7c, 0x50, 0x13, 0x7b, 0xda, 0x06, 0x5c, 0xa7, 0x0d, 0xa2, 0x6e,
	0xd3, 0x57, 0x9e, 0x83, 0xd3, 0xfd, 0x11, 0xed, 0x6f, 0xe0, 0xc2, 0x3e, 0x08, 0xeb, 0x82, 0x12,
	0x97, 0x88, 0x39, 0xd0, 0x94, 0xf9, 0x6b, 0x00, 0x67, 0x58, 0xcb, 0xbe, 0xb1, 0x5d, 0x37, 0x0c,
	0xa4, 0xfb, 0x72, 0x7e, 0x0e, 0xc6, 0x68, 0xab, 0x2d, 0x19, 0x72, 0x0d, 0xb9, 0xe0, 0xe4, 0x5c,
	0x92, 0x58, 0xa1, 0x04, 0x48, 0xdd, 0x10, 0x39, 0xba, 0xba, 0x21, 0xd7, 0x10, 0xff, 0x06, 0x4c,
	0xd8, 0x8c, 0x5b, 0xb2, 0x50, 0x0d, 0xdb, 0x48, 0xd2, 0x4c, 0x06, 0x3e, 0xb1, 0x72, 0x86, 0x32,
	0xc4, 0x1e, 0x80, 0x48, 0x26, 0x64, 0x05, 0x6e, 0x77, 0xab, 0x64, 0x22, 0xd0, 0xab, 0xdd, 0xe2,
	0x84, 0xc3, 0x2b, 0x32, 0xd6, 0x35, 0x93, 0x3f, 0x07, 0xa3, 0x4c, 0xaf, 0xe6, 0x5c, 0x88, 0x0c,
	0x68, 0x8d, 0xd0, 0xb5, 0xb5, 0x0a, 0xad, 0xee, 0xc9, 0xd2, 0xee, 0xd6, 0xf6, 0xca, 0xee, 0x9a,
	0x51, 0xc5, 0x3e, 0xb3, 0xcb, 0x03, 0x57, 0x4b, 0x3f, 0x7c, 0x81, 0xdb, 0xa4, 0x72, 0x17, 0x94,
	0x03, 0x07, 0x64, 0x9c, 0x10, 0x87, 0x33, 0x1f, 0xc6, 0xe1, 0x84, 0xd3, 0xce, 0x6c, 0x99, 0x48,
	0x61, 0xa6, 0xbd, 0x03, 0xe9, 0x4c, 0x2a, 0x99, 0xdd, 0xd6, 0x9d, 0x99, 0x78, 0xa2, 0x81, 0x7a,
	0xe0, 0x96, 0xa6, 0x1c, 0xa2, 0xa1, 0x23, 0x8e, 0xcb, 0x4d, 0xe2, 0x1b, 0x04, 0xaa, 0x30, 0x4e,
	0xcd, 0xf6, 0xc1, 0x8c, 0x5b, 0xa4, 0xaf, 0x7e, 0x43, 0x78, 0xeb, 0xf5, 0x88, 0x4c, 0xcd, 0x44,
	0xc3, 0x54, 0x4a, 0x3e, 0xec, 0xfa, 0x25, 0x1c, 0x63, 0x7c, 0x2e, 0x4e, 0x9c, 0xfc, 0xde, 0xea,
	0x20, 0xb2, 0xb8, 0x1a, 0x46, 0x6d, 0xb5, 0xe9, 0x2d, 0xf2, 0x9b, 0xf0, 0x74, 0xef, 0x96, 0x0e,
	0x57, 0xed, 0xa6, 0x6c, 0x21, 0xa9, 0x81, 0x2c, 0xa2, 0x61, 0xc3, 0xbd, 0x27, 0x49, 0x7e, 0x7c,
	0x17, 0x7c, 0xee, 0x9b, 0xae, 0x9c, 0xd1, 0xf6, 0x54, 0xf7, 0xda, 0xce, 0xe5, 0xda, 0x71, 0x98,
	0xf8, 0x0d, 0x98, 0xc2, 0x26, 0xa2, 0xa3, 0x85, 0xa1, 0x4a, 0xee, 0xb5, 0x9d, 0x27, 0x30, 0x7c,
	0x84, 0xc0, 0x99, 0x2e, 0xd7, 0x16, 0x63, 0xf2, 0xe4, 0xfd, 0x55, 0xc0, 0xf1, 0xb4, 0x66, 0x4a,
	0xdd, 0x76, 0x25, 0xc2, 0xb0, 0x79, 0xf9, 0x78, 0x27, 0xf4, 0x07, 0x45, 0x7e, 0xc7, 0x54, 0x7a,
	0x4d, 0x90, 0xd3, 0x71, 0xfd, 0x23, 0x70, 0xad, 0xa1, 0x2d, 0x57, 0xf2, 0xfe, 0x23, 0x90, 0xe0,
	0x27, 0xbe, 0x68, 0x03, 0xe8, 0xf5, 0x11, 0x6b, 0xaf, 0xfb, 0x16, 0x3a, 0x07, 0x16, 0xe0, 0xfd,
	0x47, 0x20, 0xc2, 0x87, 0x3e, 0x6a, 0x83, 0x91, 0x5e, 0xcf, 0xc6, 0x64, 0x95, 0xee, 0x3f, 0x02,
	0xbf, 0x31, 0xfb, 0xa3, 0x2f, 0xda, 0xe0, 0xea, 0x96, 0x6d, 0x69, 0x86, 0x2a, 0x58, 0xc8, 0xb4,
	0x10, 0xa1, 0x33, 0xb0, 0xa1, 0x0a, 0xc8, 0xb2, 0xb0, 0x25, 0x58, 0x88, 0x98, 0xd8, 0x20, 0x28,
	0x2b, 0xd4, 0x49, 0x5d, 0xd6, 0xf5, 0x96, 0x20, 0x0b, 0xfb, 0x76, 0x4d, 0x17, 0x14, 0x5c, 0x41,
	0x54, 0xca, 0xdc, 0xfd, 0x47, 0xe0, 0xdc, 0x6c, 0xa6, 0xd3, 0x06, 0x69, 0x1a, 0x28, 0x02, 0xae,
	0x0a, 0xa4, 0xbe, 0x67, 0x20, 0x9b, 0x08, 0x9a, 0x21, 0xc8, 0x82, 0xaa, 0x35, 0x90, 0x41, 0xed,
	0x11, 0xc7, 0x1b, 0xfe, 0xcd, 0xf1, 0xdb, 0x30, 0xd6, 0x30, 0x24, 0x85, 0x1d, 0xfe, 0xc9, 0xef,
	0x92, 0x06, 0x46, 0x43, 0x37, 0x62, 0xb8, 0x86, 0xfb, 0x99, 0x9f, 0x83, 0x51, 0xb9, 0x52, 0xb1,
	0x10, 0x21, 0xee, 0x1d, 0xd2, 0x04, 0x1d, 0x6c, 0xba, 0x57, 0x18, 0x74, 0xae, 0x77, 0x96, 0xf9,
	0x15, 0x38, 0xaa, 0x60, 0x6c, 0x55, 0x34, 0x43, 0xa6, 0x53, 0x93, 0x83, 0x76, 0x67, 0x07, 0x2c,
	0x60, 0x3a, 0x97, 0x7b, 0x64, 0xce, 0x9c, 0x24, 0xfa, 0x39, 0xf9, 0x9f, 0xc1, 0x33, 0xec, 0xe6,
	0xb6, 0x86, 0x2b, 0x5a, 0x55, 0x53, 0x98, 0x5d, 0x52, 0xf7, 0xb7, 0x07, 0x17, 0xf0, 0x66, 0xf3,
	0xce, 0xaf, 0x13, 0x79, 0xef, 0xd7, 0x89, 0xfc, 0xb6, 0x47, 0x21, 0x9e, 0xa6, 0xec, 0x6f, 0xfa,
	0xb8, 0xbb, 0x4b, 0xfc, 0x4f, 0x20, 0xc7, 0xea, 0x97, 0x51, 0xc5, 0x2e, 0x5e, 0x5d, 0x39, 0x01,
	0x72, 0x0e, 0xa9, 0x84, 0x62, 0x94, 0x16, 0x33, 0xa3, 0x8a, 0xf9, 0x6d, 0x78, 0x4a, 0xc7, 0x2a,
	0x91, 0x88, 0x6d, 0x21, 0xb9, 0x46, 0x73, 0xa0, 0xa2, 0x11, 0x79, 0x4f, 0x47, 0x95, 0xd4, 0xf8,
	0x09, 0x86, 0xe9, 0x69, 0xca, 0xbc, 0xe5, 0xf1, 0xbe, 0xee, 0xb2, 0xf2, 0xbf, 0x80, 0x63, 0x3a,
	0x56, 0x25, 0x0b, 0x29, 0x48, 0x6b, 0x20, 0xeb, 0x1b, 0x5c, 0xc0, 0x4c, 0x3d, 0xbc, 0xdb, 0xc7,
	0xea, 0xea, 0x19, 0xd5, 0xb1, 0x2a, 0xba, 0x9f, 0xf8, 0x5f, 0xc0, 0xa8, 0x83, 0x0b, 0x24, 0xf5,
	0xaf, 0x51, 0x96, 0x5a, 0x4b, 0x27, 0x72, 0xc3, 0x10, 0x24, 0x2b, 0x47, 0xdd, 0x74, 0x12, 0x3d,
	0x91, 0xfc, 0xbb, 0x30, 0x66, 0x57, 0x9d, 0x42, 0x4c, 0x52, 0xff, 0x16, 0x3d, 0xb1, 0xe5, 0xe9,
	0x87, 0x77, 0x93, 0xac, 0xc2, 0x54, 0xb1, 0x55, 0xf3, 0x15, 0x72, 0x4f, 0x01, 0x67, 0x57, 0x9d,
	0x8b, 0x54, 0xfe, 0x1d, 0x38, 0xce, 0x7e, 0xcb, 0xd1, 0x0c, 0x1b, 0x59, 0x86, 0xac, 0xa7, 0x3e,
	0x8f, 0x7e, 0x93, 0x0b, 0xaa, 0x7e, 0x66, 0x26, 0x7b, 0x8c, 0x7e, 0x5a, 0x73, 0xbf, 0xcc, 0xd6,
	0x21, 0x7f, 0xb0, 0x72, 0x0c, 0x19, 0xc0, 0xd6, 0xfc, 0x03, 0xd8, 0x49, 0x07, 0x9d, 0xfe, 0xa9,
	0xcc, 0x37, 0xb5, 0x5d, 0xff, 0x4b, 0xf0, 0xa4, 0x0d, 0x3e, 0x00, 0x70, 0x06, 0x4e, 0xd2, 0xa2,
	0xd3, 0x7f, 0x69, 0x03, 0x0a, 0x30, 0x09, 0xe3, 0x07, 0x26, 0x9d, 0x22, 0x9c, 0x85, 0xd3, 0x5e,
	0x67, 0x34, 0xc0, 0x71, 0x15, 0x9e, 0x81, 0x33, 0x5e, 0xe5, 0x1f, 0x5c, 0x5c, 0x80, 0xaf, 0xc2,
	0x19, 0xaf, 0x96, 0x0f, 0x2c, 0x46, 0x17, 0xb3, 0x97, 0xb3, 0x4b, 0xd9, 0x6b, 0xf0, 0x07, 0x70,
	0xa6, 0x54, 0x69, 0xc8, 0x86, 0x82, 0x2a, 0x03, 0x24, 0x81, 0x42, 0xb1, 0x9c, 0x83, 0x49, 0x16,
	0xfa, 0x5e, 0xa8, 0x79, 0xad, 0xd1, 0xf4, 0xe3, 0x36, 0x18, 0x77, 0x67, 0xf6, 0x31, 0x76, 0x81,
	0xb5, 0x90, 0x2d, 0x2c, 0xae, 0x87, 0xb8, 0xb1, 0xc4, 0x78, 0xe6, 0x6f, 0x23, 0x70, 0x62, 0xd9,
	0x42, 0xb2, 0x8d, 0xba, 0xd0, 0xfd, 0xd3, 0x97, 0x06, 0xdd, 0x83, 0xa0, 0xfd, 0xee, 0xcb, 0x06,
	0xed, 0x03, 0x70, 0xbd, 0xfb, 0xf2, 0xe0, 0xba, 0x1f, 0xa8, 0xaf, 0x1f, 0x0b, 0xd4, 0x87, 0x43,
	0xf2, 0xd2, 0x71, 0x90, 0x7c, 0x28, 0xf8, 0x6e, 0xbc, 0x0c, 0x14, 0xf1, 0xe1, 0x47, 0x6a, 0x00,
	0x3f, 0x7a, 0x78, 0x51, 0x7a, 0x11, 0xbc, 0xe8, 0x47, 0x8a, 0x8d, 0x17, 0x2a, 0xbd, 0x87, 0x17,
	0xdd, 0x9f, 0xbe, 0x70, 0xd1, 0x8d, 0x0f, 0x14, 0xdd, 0x81, 0x82, 0x7b, 0x7d, 0xf2, 0x9f, 0x7e,
	0x3c, 0xd0, 0xaf, 0x96, 0x2f, 0x1d, 0x92, 0x3c, 0xa9, 0xdf, 0xff, 0x6f, 0x30, 0x74, 0xc5, 0xcd,
	0x9f, 0x2f, 0xc2, 0x30, 0x2e, 0x22, 0x53, 0x97, 0x95, 0x5e, 0x02, 0x7d, 0x1f, 0xe6, 0xdf, 0x87,
	0xf9, 0x77, 0x28, 0xcc, 0x9d, 0x39, 0x9a, 0x06, 0x7b, 0x67, 0x14, 0x8e, 0xae, 0x20, 0xfb, 0x7b,
	0xa4, 0xf8, 0xd5, 0x4b, 0xa1, 0x87, 0x87, 0x8e, 0x69, 0x37, 0x4e, 0x30, 0xa6, 0xf5, 0xce, 0x74,
	0xd8, 0x8c, 0xf6, 0x77, 0xdf, 0xb5, 0xe1, 0xec, 0x5b, 0x55, 0x6f, 0xbe, 0x65, 0x03, 0xd8, 0xb7,
	0xa6, 0x3c, 0xf2, 0x5b, 0x2f, 0x6f, 0xec, 0xea, 0x4e, 0x5b, 0xff, 0x5f, 0xb3, 0xca, 0xcb, 0xeb,
	0x68, 0xca, 0x7f, 0x0a, 0x9e, 0x3e, 0x4b, 0x8f, 0x7c, 0xfc, 0x2c, 0x3d, 0xf2, 0xe5, 0xb3, 0x34,
	0x78, 0xfe, 0x2c, 0x0d, 0xee, 0x75, 0xd2, 0xe0, 0x83, 0x4e, 0x1a, 0x7c, 0xd8, 0x49, 0x83, 0xc7,
	0x9d, 0x34, 0xf8, 0xa8, 0x93, 0x06, 0x4f, 0x3b, 0x69, 0xf0, 0x71, 0x27, 0x0d, 0x3e, 0xed, 0xa4,
	0xc1, 0xe7, 0x9d, 0xf4, 0xc8, 0x97, 0x9d, 0x34, 0xf8, 0xe3, 0xcf, 0xd2, 0x23, 0x8f, 0x3f, 0x4b,
	0x83, 0x9f, 0xed, 0xa8, 0xd8, 0xbc, 0xa5, 0xe6, 0xbd, 0x2a, 0x97, 0xaf, 0x93, 0xf9, 0xee, 0x24,
	0x99, 0x33, 0x2d, 0xdc, 0xd0, 0x2a, 0xc8, 0xca, 0x79, 0xcb, 0xf3, 0xe6, 0x9e, 0x8a, 0xe7, 0xd1,
	0x6d, 0xdb, 0xfb, 0x87, 0xc3, 0xc3, 0xfe, 0xc1, 0x72, 0x2f, 0xc2, 0xa2, 0x7b, 0xe1, 0x7f, 0x03,
	0x00, 0x00, 0xff, 0xff, 0x49, 0x91, 0x90, 0x66, 0x8b, 0x29, 0x00, 0x00,
}
