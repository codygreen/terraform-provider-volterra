// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ves.io/schema/views/tcp_loadbalancer/types.proto

package tcp_loadbalancer

import proto "github.com/gogo/protobuf/proto"
import golang_proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"
import _ "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
import ves_io_schema4 "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
import _ "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
import _ "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
import ves_io_schema_views "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/views"
import ves_io_schema_virtual_host_dns_info "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/virtual_host_dns_info"

import strings "strings"
import reflect "reflect"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// GlobalSpecType
//
// x-displayName: "View Specification"
// Shape of the TCP loadbalancer view specification
type GlobalSpecType struct {
	// Domains
	//
	// x-displayName: "Domains"
	// x-example: "www.foo.com"
	// A list of domains (host/authority header) that will be matched to this loadbalancer.
	//
	// Domains are also used for SNI matching if the with_sni is true
	// Domains also indicate the list of names for which DNS resolution will be done by VER
	Domains []string `protobuf:"bytes,1,rep,name=domains" json:"domains,omitempty"`
	// Listen Port
	//
	// x-displayName: "Listen Port"
	// x-example: "0"
	// Listen Port for this TCP proxy
	ListenPort uint32 `protobuf:"varint,2,opt,name=listen_port,json=listenPort,proto3" json:"listen_port,omitempty"`
	// With SNI
	//
	// x-displayName: "With SNI"
	// x-example: "true"
	// Set to true to enable TCP loadbalancer with SNI
	WithSni bool `protobuf:"varint,3,opt,name=with_sni,json=withSni,proto3" json:"with_sni,omitempty"`
	// Manage DNS Domain
	//
	// x-displayName: "Automatically Manage DNS Records"
	// DNS records for domains will be managed automatically by Volterra.
	// This requires the domain to be delegated to Volterra using the Delegated Domain feature.
	DnsVolterraManaged bool `protobuf:"varint,11,opt,name=dns_volterra_managed,json=dnsVolterraManaged,proto3" json:"dns_volterra_managed,omitempty"`
	// Origin Pools
	//
	// x-displayName: "Origin Pools(deprecated)"
	// Origin pools with equal weights used for this loadbalancer. This field will be removed.
	OriginPools []*ves_io_schema_views.ObjectRefType `protobuf:"bytes,4,rep,name=origin_pools,json=originPools" json:"origin_pools,omitempty"`
	// Origin Pools with Weights
	//
	// x-displayName: "Origin Pools"
	// Origin pools and weights used for this loadbalancer.
	OriginPoolsWeights []*ves_io_schema_views.OriginPoolWithWeight `protobuf:"bytes,10,rep,name=origin_pools_weights,json=originPoolsWeights" json:"origin_pools_weights,omitempty"`
	// Advertise choice
	//
	// x-displayName: "Where to Advertise the VIP"
	// x-required
	// This is a choice to select method to advertise VIP.
	//
	// Types that are valid to be assigned to AdvertiseChoice:
	//	*GlobalSpecType_DoNotAdvertise
	//	*GlobalSpecType_AdvertiseOnPublicDefaultVip
	//	*GlobalSpecType_AdvertiseOnPublic
	//	*GlobalSpecType_AdvertiseCustom
	AdvertiseChoice isGlobalSpecType_AdvertiseChoice `protobuf_oneof:"advertise_choice"`
	// Load Balancing Control
	//
	// x-displayName: "Load Balancing Control"
	// x-required
	// Select how the connections are load-balanced
	//
	// Types that are valid to be assigned to HashPolicyChoice:
	//	*GlobalSpecType_HashPolicyChoiceRoundRobin
	//	*GlobalSpecType_HashPolicyChoiceLeastActive
	//	*GlobalSpecType_HashPolicyChoiceRandom
	//	*GlobalSpecType_HashPolicyChoiceSourceIpStickiness
	HashPolicyChoice isGlobalSpecType_HashPolicyChoice `protobuf_oneof:"hash_policy_choice"`
	// Idle timeout
	//
	// x-displayName: "Idle Timeout"
	// x-example: "2000"
	// The amount of time that a stream can exist without upstream or downstream activity, in milliseconds.
	IdleTimeout uint32 `protobuf:"varint,17,opt,name=idle_timeout,json=idleTimeout,proto3" json:"idle_timeout,omitempty"`
	// Oneof for Cluster retraction
	//
	// x-displayName: "Select Cluster retract option"
	// x-required
	// Specifies whether retraction of cluster has to be enabled or
	// disabled
	//
	// Types that are valid to be assigned to ClusterRetractChoice:
	//	*GlobalSpecType_RetractCluster
	//	*GlobalSpecType_DoNotRetractCluster
	ClusterRetractChoice isGlobalSpecType_ClusterRetractChoice `protobuf_oneof:"cluster_retract_choice"`
	// view_internal
	//
	// x-displayName: "View Internal"
	// Reference to view internal object
	ViewInternal *ves_io_schema_views.ObjectRefType `protobuf:"bytes,1000,opt,name=view_internal,json=viewInternal" json:"view_internal,omitempty"`
	// host name
	//
	// x-displayName: "Host Name"
	// x-example: "ves-io-cf8684b9-a18f-4843-a24f-1f9ee8ea2776.ac.vh.ves.io"
	// Internally generated host name to be used for the virtual host
	HostName string `protobuf:"bytes,1001,opt,name=host_name,json=hostName,proto3" json:"host_name,omitempty"`
	// DNS information
	//
	// x-displayName: "DNS Information"
	// DNS information for this virtual host
	DnsInfo []*ves_io_schema_virtual_host_dns_info.DnsInfo `protobuf:"bytes,1002,rep,name=dns_info,json=dnsInfo" json:"dns_info,omitempty"`
}

func (m *GlobalSpecType) Reset()                    { *m = GlobalSpecType{} }
func (*GlobalSpecType) ProtoMessage()               {}
func (*GlobalSpecType) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{0} }

type isGlobalSpecType_AdvertiseChoice interface {
	isGlobalSpecType_AdvertiseChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isGlobalSpecType_HashPolicyChoice interface {
	isGlobalSpecType_HashPolicyChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isGlobalSpecType_ClusterRetractChoice interface {
	isGlobalSpecType_ClusterRetractChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type GlobalSpecType_DoNotAdvertise struct {
	DoNotAdvertise *ves_io_schema4.Empty `protobuf:"bytes,7,opt,name=do_not_advertise,json=doNotAdvertise,oneof"`
}
type GlobalSpecType_AdvertiseOnPublicDefaultVip struct {
	AdvertiseOnPublicDefaultVip *ves_io_schema4.Empty `protobuf:"bytes,8,opt,name=advertise_on_public_default_vip,json=advertiseOnPublicDefaultVip,oneof"`
}
type GlobalSpecType_AdvertiseOnPublic struct {
	AdvertiseOnPublic *ves_io_schema_views.AdvertisePublic `protobuf:"bytes,5,opt,name=advertise_on_public,json=advertiseOnPublic,oneof"`
}
type GlobalSpecType_AdvertiseCustom struct {
	AdvertiseCustom *ves_io_schema_views.AdvertiseCustom `protobuf:"bytes,6,opt,name=advertise_custom,json=advertiseCustom,oneof"`
}
type GlobalSpecType_HashPolicyChoiceRoundRobin struct {
	HashPolicyChoiceRoundRobin *ves_io_schema4.Empty `protobuf:"bytes,13,opt,name=hash_policy_choice_round_robin,json=hashPolicyChoiceRoundRobin,oneof"`
}
type GlobalSpecType_HashPolicyChoiceLeastActive struct {
	HashPolicyChoiceLeastActive *ves_io_schema4.Empty `protobuf:"bytes,14,opt,name=hash_policy_choice_least_active,json=hashPolicyChoiceLeastActive,oneof"`
}
type GlobalSpecType_HashPolicyChoiceRandom struct {
	HashPolicyChoiceRandom *ves_io_schema4.Empty `protobuf:"bytes,15,opt,name=hash_policy_choice_random,json=hashPolicyChoiceRandom,oneof"`
}
type GlobalSpecType_HashPolicyChoiceSourceIpStickiness struct {
	HashPolicyChoiceSourceIpStickiness *ves_io_schema4.Empty `protobuf:"bytes,16,opt,name=hash_policy_choice_source_ip_stickiness,json=hashPolicyChoiceSourceIpStickiness,oneof"`
}
type GlobalSpecType_RetractCluster struct {
	RetractCluster *ves_io_schema4.Empty `protobuf:"bytes,19,opt,name=retract_cluster,json=retractCluster,oneof"`
}
type GlobalSpecType_DoNotRetractCluster struct {
	DoNotRetractCluster *ves_io_schema4.Empty `protobuf:"bytes,20,opt,name=do_not_retract_cluster,json=doNotRetractCluster,oneof"`
}

func (*GlobalSpecType_DoNotAdvertise) isGlobalSpecType_AdvertiseChoice()                      {}
func (*GlobalSpecType_AdvertiseOnPublicDefaultVip) isGlobalSpecType_AdvertiseChoice()         {}
func (*GlobalSpecType_AdvertiseOnPublic) isGlobalSpecType_AdvertiseChoice()                   {}
func (*GlobalSpecType_AdvertiseCustom) isGlobalSpecType_AdvertiseChoice()                     {}
func (*GlobalSpecType_HashPolicyChoiceRoundRobin) isGlobalSpecType_HashPolicyChoice()         {}
func (*GlobalSpecType_HashPolicyChoiceLeastActive) isGlobalSpecType_HashPolicyChoice()        {}
func (*GlobalSpecType_HashPolicyChoiceRandom) isGlobalSpecType_HashPolicyChoice()             {}
func (*GlobalSpecType_HashPolicyChoiceSourceIpStickiness) isGlobalSpecType_HashPolicyChoice() {}
func (*GlobalSpecType_RetractCluster) isGlobalSpecType_ClusterRetractChoice()                 {}
func (*GlobalSpecType_DoNotRetractCluster) isGlobalSpecType_ClusterRetractChoice()            {}

func (m *GlobalSpecType) GetAdvertiseChoice() isGlobalSpecType_AdvertiseChoice {
	if m != nil {
		return m.AdvertiseChoice
	}
	return nil
}
func (m *GlobalSpecType) GetHashPolicyChoice() isGlobalSpecType_HashPolicyChoice {
	if m != nil {
		return m.HashPolicyChoice
	}
	return nil
}
func (m *GlobalSpecType) GetClusterRetractChoice() isGlobalSpecType_ClusterRetractChoice {
	if m != nil {
		return m.ClusterRetractChoice
	}
	return nil
}

func (m *GlobalSpecType) GetDomains() []string {
	if m != nil {
		return m.Domains
	}
	return nil
}

func (m *GlobalSpecType) GetListenPort() uint32 {
	if m != nil {
		return m.ListenPort
	}
	return 0
}

func (m *GlobalSpecType) GetWithSni() bool {
	if m != nil {
		return m.WithSni
	}
	return false
}

func (m *GlobalSpecType) GetDnsVolterraManaged() bool {
	if m != nil {
		return m.DnsVolterraManaged
	}
	return false
}

func (m *GlobalSpecType) GetOriginPools() []*ves_io_schema_views.ObjectRefType {
	if m != nil {
		return m.OriginPools
	}
	return nil
}

func (m *GlobalSpecType) GetOriginPoolsWeights() []*ves_io_schema_views.OriginPoolWithWeight {
	if m != nil {
		return m.OriginPoolsWeights
	}
	return nil
}

func (m *GlobalSpecType) GetDoNotAdvertise() *ves_io_schema4.Empty {
	if x, ok := m.GetAdvertiseChoice().(*GlobalSpecType_DoNotAdvertise); ok {
		return x.DoNotAdvertise
	}
	return nil
}

func (m *GlobalSpecType) GetAdvertiseOnPublicDefaultVip() *ves_io_schema4.Empty {
	if x, ok := m.GetAdvertiseChoice().(*GlobalSpecType_AdvertiseOnPublicDefaultVip); ok {
		return x.AdvertiseOnPublicDefaultVip
	}
	return nil
}

func (m *GlobalSpecType) GetAdvertiseOnPublic() *ves_io_schema_views.AdvertisePublic {
	if x, ok := m.GetAdvertiseChoice().(*GlobalSpecType_AdvertiseOnPublic); ok {
		return x.AdvertiseOnPublic
	}
	return nil
}

func (m *GlobalSpecType) GetAdvertiseCustom() *ves_io_schema_views.AdvertiseCustom {
	if x, ok := m.GetAdvertiseChoice().(*GlobalSpecType_AdvertiseCustom); ok {
		return x.AdvertiseCustom
	}
	return nil
}

func (m *GlobalSpecType) GetHashPolicyChoiceRoundRobin() *ves_io_schema4.Empty {
	if x, ok := m.GetHashPolicyChoice().(*GlobalSpecType_HashPolicyChoiceRoundRobin); ok {
		return x.HashPolicyChoiceRoundRobin
	}
	return nil
}

func (m *GlobalSpecType) GetHashPolicyChoiceLeastActive() *ves_io_schema4.Empty {
	if x, ok := m.GetHashPolicyChoice().(*GlobalSpecType_HashPolicyChoiceLeastActive); ok {
		return x.HashPolicyChoiceLeastActive
	}
	return nil
}

func (m *GlobalSpecType) GetHashPolicyChoiceRandom() *ves_io_schema4.Empty {
	if x, ok := m.GetHashPolicyChoice().(*GlobalSpecType_HashPolicyChoiceRandom); ok {
		return x.HashPolicyChoiceRandom
	}
	return nil
}

func (m *GlobalSpecType) GetHashPolicyChoiceSourceIpStickiness() *ves_io_schema4.Empty {
	if x, ok := m.GetHashPolicyChoice().(*GlobalSpecType_HashPolicyChoiceSourceIpStickiness); ok {
		return x.HashPolicyChoiceSourceIpStickiness
	}
	return nil
}

func (m *GlobalSpecType) GetIdleTimeout() uint32 {
	if m != nil {
		return m.IdleTimeout
	}
	return 0
}

func (m *GlobalSpecType) GetRetractCluster() *ves_io_schema4.Empty {
	if x, ok := m.GetClusterRetractChoice().(*GlobalSpecType_RetractCluster); ok {
		return x.RetractCluster
	}
	return nil
}

func (m *GlobalSpecType) GetDoNotRetractCluster() *ves_io_schema4.Empty {
	if x, ok := m.GetClusterRetractChoice().(*GlobalSpecType_DoNotRetractCluster); ok {
		return x.DoNotRetractCluster
	}
	return nil
}

func (m *GlobalSpecType) GetViewInternal() *ves_io_schema_views.ObjectRefType {
	if m != nil {
		return m.ViewInternal
	}
	return nil
}

func (m *GlobalSpecType) GetHostName() string {
	if m != nil {
		return m.HostName
	}
	return ""
}

func (m *GlobalSpecType) GetDnsInfo() []*ves_io_schema_virtual_host_dns_info.DnsInfo {
	if m != nil {
		return m.DnsInfo
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*GlobalSpecType) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _GlobalSpecType_OneofMarshaler, _GlobalSpecType_OneofUnmarshaler, _GlobalSpecType_OneofSizer, []interface{}{
		(*GlobalSpecType_DoNotAdvertise)(nil),
		(*GlobalSpecType_AdvertiseOnPublicDefaultVip)(nil),
		(*GlobalSpecType_AdvertiseOnPublic)(nil),
		(*GlobalSpecType_AdvertiseCustom)(nil),
		(*GlobalSpecType_HashPolicyChoiceRoundRobin)(nil),
		(*GlobalSpecType_HashPolicyChoiceLeastActive)(nil),
		(*GlobalSpecType_HashPolicyChoiceRandom)(nil),
		(*GlobalSpecType_HashPolicyChoiceSourceIpStickiness)(nil),
		(*GlobalSpecType_RetractCluster)(nil),
		(*GlobalSpecType_DoNotRetractCluster)(nil),
	}
}

func _GlobalSpecType_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*GlobalSpecType)
	// advertise_choice
	switch x := m.AdvertiseChoice.(type) {
	case *GlobalSpecType_DoNotAdvertise:
		_ = b.EncodeVarint(7<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.DoNotAdvertise); err != nil {
			return err
		}
	case *GlobalSpecType_AdvertiseOnPublicDefaultVip:
		_ = b.EncodeVarint(8<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.AdvertiseOnPublicDefaultVip); err != nil {
			return err
		}
	case *GlobalSpecType_AdvertiseOnPublic:
		_ = b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.AdvertiseOnPublic); err != nil {
			return err
		}
	case *GlobalSpecType_AdvertiseCustom:
		_ = b.EncodeVarint(6<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.AdvertiseCustom); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("GlobalSpecType.AdvertiseChoice has unexpected type %T", x)
	}
	// hash_policy_choice
	switch x := m.HashPolicyChoice.(type) {
	case *GlobalSpecType_HashPolicyChoiceRoundRobin:
		_ = b.EncodeVarint(13<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.HashPolicyChoiceRoundRobin); err != nil {
			return err
		}
	case *GlobalSpecType_HashPolicyChoiceLeastActive:
		_ = b.EncodeVarint(14<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.HashPolicyChoiceLeastActive); err != nil {
			return err
		}
	case *GlobalSpecType_HashPolicyChoiceRandom:
		_ = b.EncodeVarint(15<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.HashPolicyChoiceRandom); err != nil {
			return err
		}
	case *GlobalSpecType_HashPolicyChoiceSourceIpStickiness:
		_ = b.EncodeVarint(16<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.HashPolicyChoiceSourceIpStickiness); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("GlobalSpecType.HashPolicyChoice has unexpected type %T", x)
	}
	// cluster_retract_choice
	switch x := m.ClusterRetractChoice.(type) {
	case *GlobalSpecType_RetractCluster:
		_ = b.EncodeVarint(19<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.RetractCluster); err != nil {
			return err
		}
	case *GlobalSpecType_DoNotRetractCluster:
		_ = b.EncodeVarint(20<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.DoNotRetractCluster); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("GlobalSpecType.ClusterRetractChoice has unexpected type %T", x)
	}
	return nil
}

func _GlobalSpecType_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*GlobalSpecType)
	switch tag {
	case 7: // advertise_choice.do_not_advertise
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.AdvertiseChoice = &GlobalSpecType_DoNotAdvertise{msg}
		return true, err
	case 8: // advertise_choice.advertise_on_public_default_vip
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.AdvertiseChoice = &GlobalSpecType_AdvertiseOnPublicDefaultVip{msg}
		return true, err
	case 5: // advertise_choice.advertise_on_public
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema_views.AdvertisePublic)
		err := b.DecodeMessage(msg)
		m.AdvertiseChoice = &GlobalSpecType_AdvertiseOnPublic{msg}
		return true, err
	case 6: // advertise_choice.advertise_custom
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema_views.AdvertiseCustom)
		err := b.DecodeMessage(msg)
		m.AdvertiseChoice = &GlobalSpecType_AdvertiseCustom{msg}
		return true, err
	case 13: // hash_policy_choice.hash_policy_choice_round_robin
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.HashPolicyChoice = &GlobalSpecType_HashPolicyChoiceRoundRobin{msg}
		return true, err
	case 14: // hash_policy_choice.hash_policy_choice_least_active
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.HashPolicyChoice = &GlobalSpecType_HashPolicyChoiceLeastActive{msg}
		return true, err
	case 15: // hash_policy_choice.hash_policy_choice_random
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.HashPolicyChoice = &GlobalSpecType_HashPolicyChoiceRandom{msg}
		return true, err
	case 16: // hash_policy_choice.hash_policy_choice_source_ip_stickiness
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.HashPolicyChoice = &GlobalSpecType_HashPolicyChoiceSourceIpStickiness{msg}
		return true, err
	case 19: // cluster_retract_choice.retract_cluster
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.ClusterRetractChoice = &GlobalSpecType_RetractCluster{msg}
		return true, err
	case 20: // cluster_retract_choice.do_not_retract_cluster
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.ClusterRetractChoice = &GlobalSpecType_DoNotRetractCluster{msg}
		return true, err
	default:
		return false, nil
	}
}

func _GlobalSpecType_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*GlobalSpecType)
	// advertise_choice
	switch x := m.AdvertiseChoice.(type) {
	case *GlobalSpecType_DoNotAdvertise:
		s := proto.Size(x.DoNotAdvertise)
		n += proto.SizeVarint(7<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *GlobalSpecType_AdvertiseOnPublicDefaultVip:
		s := proto.Size(x.AdvertiseOnPublicDefaultVip)
		n += proto.SizeVarint(8<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *GlobalSpecType_AdvertiseOnPublic:
		s := proto.Size(x.AdvertiseOnPublic)
		n += proto.SizeVarint(5<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *GlobalSpecType_AdvertiseCustom:
		s := proto.Size(x.AdvertiseCustom)
		n += proto.SizeVarint(6<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	// hash_policy_choice
	switch x := m.HashPolicyChoice.(type) {
	case *GlobalSpecType_HashPolicyChoiceRoundRobin:
		s := proto.Size(x.HashPolicyChoiceRoundRobin)
		n += proto.SizeVarint(13<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *GlobalSpecType_HashPolicyChoiceLeastActive:
		s := proto.Size(x.HashPolicyChoiceLeastActive)
		n += proto.SizeVarint(14<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *GlobalSpecType_HashPolicyChoiceRandom:
		s := proto.Size(x.HashPolicyChoiceRandom)
		n += proto.SizeVarint(15<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *GlobalSpecType_HashPolicyChoiceSourceIpStickiness:
		s := proto.Size(x.HashPolicyChoiceSourceIpStickiness)
		n += proto.SizeVarint(16<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	// cluster_retract_choice
	switch x := m.ClusterRetractChoice.(type) {
	case *GlobalSpecType_RetractCluster:
		s := proto.Size(x.RetractCluster)
		n += proto.SizeVarint(19<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *GlobalSpecType_DoNotRetractCluster:
		s := proto.Size(x.DoNotRetractCluster)
		n += proto.SizeVarint(20<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// CreateSpecType
//
// x-displayName: "Create TCP Loadbalancer"
// Shape of the TCP loadbalancer create specification
type CreateSpecType struct {
	Domains            []string                                    `protobuf:"bytes,1,rep,name=domains" json:"domains,omitempty"`
	ListenPort         uint32                                      `protobuf:"varint,2,opt,name=listen_port,json=listenPort,proto3" json:"listen_port,omitempty"`
	WithSni            bool                                        `protobuf:"varint,3,opt,name=with_sni,json=withSni,proto3" json:"with_sni,omitempty"`
	DnsVolterraManaged bool                                        `protobuf:"varint,11,opt,name=dns_volterra_managed,json=dnsVolterraManaged,proto3" json:"dns_volterra_managed,omitempty"`
	OriginPoolsWeights []*ves_io_schema_views.OriginPoolWithWeight `protobuf:"bytes,10,rep,name=origin_pools_weights,json=originPoolsWeights" json:"origin_pools_weights,omitempty"`
	// Types that are valid to be assigned to AdvertiseChoice:
	//	*CreateSpecType_DoNotAdvertise
	//	*CreateSpecType_AdvertiseOnPublicDefaultVip
	//	*CreateSpecType_AdvertiseOnPublic
	//	*CreateSpecType_AdvertiseCustom
	AdvertiseChoice isCreateSpecType_AdvertiseChoice `protobuf_oneof:"advertise_choice"`
	// Types that are valid to be assigned to HashPolicyChoice:
	//	*CreateSpecType_HashPolicyChoiceRoundRobin
	//	*CreateSpecType_HashPolicyChoiceLeastActive
	//	*CreateSpecType_HashPolicyChoiceRandom
	//	*CreateSpecType_HashPolicyChoiceSourceIpStickiness
	HashPolicyChoice isCreateSpecType_HashPolicyChoice `protobuf_oneof:"hash_policy_choice"`
	IdleTimeout      uint32                            `protobuf:"varint,17,opt,name=idle_timeout,json=idleTimeout,proto3" json:"idle_timeout,omitempty"`
	// Types that are valid to be assigned to ClusterRetractChoice:
	//	*CreateSpecType_RetractCluster
	//	*CreateSpecType_DoNotRetractCluster
	ClusterRetractChoice isCreateSpecType_ClusterRetractChoice `protobuf_oneof:"cluster_retract_choice"`
}

func (m *CreateSpecType) Reset()                    { *m = CreateSpecType{} }
func (*CreateSpecType) ProtoMessage()               {}
func (*CreateSpecType) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{1} }

type isCreateSpecType_AdvertiseChoice interface {
	isCreateSpecType_AdvertiseChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isCreateSpecType_HashPolicyChoice interface {
	isCreateSpecType_HashPolicyChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isCreateSpecType_ClusterRetractChoice interface {
	isCreateSpecType_ClusterRetractChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type CreateSpecType_DoNotAdvertise struct {
	DoNotAdvertise *ves_io_schema4.Empty `protobuf:"bytes,7,opt,name=do_not_advertise,json=doNotAdvertise,oneof"`
}
type CreateSpecType_AdvertiseOnPublicDefaultVip struct {
	AdvertiseOnPublicDefaultVip *ves_io_schema4.Empty `protobuf:"bytes,8,opt,name=advertise_on_public_default_vip,json=advertiseOnPublicDefaultVip,oneof"`
}
type CreateSpecType_AdvertiseOnPublic struct {
	AdvertiseOnPublic *ves_io_schema_views.AdvertisePublic `protobuf:"bytes,5,opt,name=advertise_on_public,json=advertiseOnPublic,oneof"`
}
type CreateSpecType_AdvertiseCustom struct {
	AdvertiseCustom *ves_io_schema_views.AdvertiseCustom `protobuf:"bytes,6,opt,name=advertise_custom,json=advertiseCustom,oneof"`
}
type CreateSpecType_HashPolicyChoiceRoundRobin struct {
	HashPolicyChoiceRoundRobin *ves_io_schema4.Empty `protobuf:"bytes,13,opt,name=hash_policy_choice_round_robin,json=hashPolicyChoiceRoundRobin,oneof"`
}
type CreateSpecType_HashPolicyChoiceLeastActive struct {
	HashPolicyChoiceLeastActive *ves_io_schema4.Empty `protobuf:"bytes,14,opt,name=hash_policy_choice_least_active,json=hashPolicyChoiceLeastActive,oneof"`
}
type CreateSpecType_HashPolicyChoiceRandom struct {
	HashPolicyChoiceRandom *ves_io_schema4.Empty `protobuf:"bytes,15,opt,name=hash_policy_choice_random,json=hashPolicyChoiceRandom,oneof"`
}
type CreateSpecType_HashPolicyChoiceSourceIpStickiness struct {
	HashPolicyChoiceSourceIpStickiness *ves_io_schema4.Empty `protobuf:"bytes,16,opt,name=hash_policy_choice_source_ip_stickiness,json=hashPolicyChoiceSourceIpStickiness,oneof"`
}
type CreateSpecType_RetractCluster struct {
	RetractCluster *ves_io_schema4.Empty `protobuf:"bytes,19,opt,name=retract_cluster,json=retractCluster,oneof"`
}
type CreateSpecType_DoNotRetractCluster struct {
	DoNotRetractCluster *ves_io_schema4.Empty `protobuf:"bytes,20,opt,name=do_not_retract_cluster,json=doNotRetractCluster,oneof"`
}

func (*CreateSpecType_DoNotAdvertise) isCreateSpecType_AdvertiseChoice()                      {}
func (*CreateSpecType_AdvertiseOnPublicDefaultVip) isCreateSpecType_AdvertiseChoice()         {}
func (*CreateSpecType_AdvertiseOnPublic) isCreateSpecType_AdvertiseChoice()                   {}
func (*CreateSpecType_AdvertiseCustom) isCreateSpecType_AdvertiseChoice()                     {}
func (*CreateSpecType_HashPolicyChoiceRoundRobin) isCreateSpecType_HashPolicyChoice()         {}
func (*CreateSpecType_HashPolicyChoiceLeastActive) isCreateSpecType_HashPolicyChoice()        {}
func (*CreateSpecType_HashPolicyChoiceRandom) isCreateSpecType_HashPolicyChoice()             {}
func (*CreateSpecType_HashPolicyChoiceSourceIpStickiness) isCreateSpecType_HashPolicyChoice() {}
func (*CreateSpecType_RetractCluster) isCreateSpecType_ClusterRetractChoice()                 {}
func (*CreateSpecType_DoNotRetractCluster) isCreateSpecType_ClusterRetractChoice()            {}

func (m *CreateSpecType) GetAdvertiseChoice() isCreateSpecType_AdvertiseChoice {
	if m != nil {
		return m.AdvertiseChoice
	}
	return nil
}
func (m *CreateSpecType) GetHashPolicyChoice() isCreateSpecType_HashPolicyChoice {
	if m != nil {
		return m.HashPolicyChoice
	}
	return nil
}
func (m *CreateSpecType) GetClusterRetractChoice() isCreateSpecType_ClusterRetractChoice {
	if m != nil {
		return m.ClusterRetractChoice
	}
	return nil
}

func (m *CreateSpecType) GetDomains() []string {
	if m != nil {
		return m.Domains
	}
	return nil
}

func (m *CreateSpecType) GetListenPort() uint32 {
	if m != nil {
		return m.ListenPort
	}
	return 0
}

func (m *CreateSpecType) GetWithSni() bool {
	if m != nil {
		return m.WithSni
	}
	return false
}

func (m *CreateSpecType) GetDnsVolterraManaged() bool {
	if m != nil {
		return m.DnsVolterraManaged
	}
	return false
}

func (m *CreateSpecType) GetOriginPoolsWeights() []*ves_io_schema_views.OriginPoolWithWeight {
	if m != nil {
		return m.OriginPoolsWeights
	}
	return nil
}

func (m *CreateSpecType) GetDoNotAdvertise() *ves_io_schema4.Empty {
	if x, ok := m.GetAdvertiseChoice().(*CreateSpecType_DoNotAdvertise); ok {
		return x.DoNotAdvertise
	}
	return nil
}

func (m *CreateSpecType) GetAdvertiseOnPublicDefaultVip() *ves_io_schema4.Empty {
	if x, ok := m.GetAdvertiseChoice().(*CreateSpecType_AdvertiseOnPublicDefaultVip); ok {
		return x.AdvertiseOnPublicDefaultVip
	}
	return nil
}

func (m *CreateSpecType) GetAdvertiseOnPublic() *ves_io_schema_views.AdvertisePublic {
	if x, ok := m.GetAdvertiseChoice().(*CreateSpecType_AdvertiseOnPublic); ok {
		return x.AdvertiseOnPublic
	}
	return nil
}

func (m *CreateSpecType) GetAdvertiseCustom() *ves_io_schema_views.AdvertiseCustom {
	if x, ok := m.GetAdvertiseChoice().(*CreateSpecType_AdvertiseCustom); ok {
		return x.AdvertiseCustom
	}
	return nil
}

func (m *CreateSpecType) GetHashPolicyChoiceRoundRobin() *ves_io_schema4.Empty {
	if x, ok := m.GetHashPolicyChoice().(*CreateSpecType_HashPolicyChoiceRoundRobin); ok {
		return x.HashPolicyChoiceRoundRobin
	}
	return nil
}

func (m *CreateSpecType) GetHashPolicyChoiceLeastActive() *ves_io_schema4.Empty {
	if x, ok := m.GetHashPolicyChoice().(*CreateSpecType_HashPolicyChoiceLeastActive); ok {
		return x.HashPolicyChoiceLeastActive
	}
	return nil
}

func (m *CreateSpecType) GetHashPolicyChoiceRandom() *ves_io_schema4.Empty {
	if x, ok := m.GetHashPolicyChoice().(*CreateSpecType_HashPolicyChoiceRandom); ok {
		return x.HashPolicyChoiceRandom
	}
	return nil
}

func (m *CreateSpecType) GetHashPolicyChoiceSourceIpStickiness() *ves_io_schema4.Empty {
	if x, ok := m.GetHashPolicyChoice().(*CreateSpecType_HashPolicyChoiceSourceIpStickiness); ok {
		return x.HashPolicyChoiceSourceIpStickiness
	}
	return nil
}

func (m *CreateSpecType) GetIdleTimeout() uint32 {
	if m != nil {
		return m.IdleTimeout
	}
	return 0
}

func (m *CreateSpecType) GetRetractCluster() *ves_io_schema4.Empty {
	if x, ok := m.GetClusterRetractChoice().(*CreateSpecType_RetractCluster); ok {
		return x.RetractCluster
	}
	return nil
}

func (m *CreateSpecType) GetDoNotRetractCluster() *ves_io_schema4.Empty {
	if x, ok := m.GetClusterRetractChoice().(*CreateSpecType_DoNotRetractCluster); ok {
		return x.DoNotRetractCluster
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*CreateSpecType) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _CreateSpecType_OneofMarshaler, _CreateSpecType_OneofUnmarshaler, _CreateSpecType_OneofSizer, []interface{}{
		(*CreateSpecType_DoNotAdvertise)(nil),
		(*CreateSpecType_AdvertiseOnPublicDefaultVip)(nil),
		(*CreateSpecType_AdvertiseOnPublic)(nil),
		(*CreateSpecType_AdvertiseCustom)(nil),
		(*CreateSpecType_HashPolicyChoiceRoundRobin)(nil),
		(*CreateSpecType_HashPolicyChoiceLeastActive)(nil),
		(*CreateSpecType_HashPolicyChoiceRandom)(nil),
		(*CreateSpecType_HashPolicyChoiceSourceIpStickiness)(nil),
		(*CreateSpecType_RetractCluster)(nil),
		(*CreateSpecType_DoNotRetractCluster)(nil),
	}
}

func _CreateSpecType_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*CreateSpecType)
	// advertise_choice
	switch x := m.AdvertiseChoice.(type) {
	case *CreateSpecType_DoNotAdvertise:
		_ = b.EncodeVarint(7<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.DoNotAdvertise); err != nil {
			return err
		}
	case *CreateSpecType_AdvertiseOnPublicDefaultVip:
		_ = b.EncodeVarint(8<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.AdvertiseOnPublicDefaultVip); err != nil {
			return err
		}
	case *CreateSpecType_AdvertiseOnPublic:
		_ = b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.AdvertiseOnPublic); err != nil {
			return err
		}
	case *CreateSpecType_AdvertiseCustom:
		_ = b.EncodeVarint(6<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.AdvertiseCustom); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("CreateSpecType.AdvertiseChoice has unexpected type %T", x)
	}
	// hash_policy_choice
	switch x := m.HashPolicyChoice.(type) {
	case *CreateSpecType_HashPolicyChoiceRoundRobin:
		_ = b.EncodeVarint(13<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.HashPolicyChoiceRoundRobin); err != nil {
			return err
		}
	case *CreateSpecType_HashPolicyChoiceLeastActive:
		_ = b.EncodeVarint(14<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.HashPolicyChoiceLeastActive); err != nil {
			return err
		}
	case *CreateSpecType_HashPolicyChoiceRandom:
		_ = b.EncodeVarint(15<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.HashPolicyChoiceRandom); err != nil {
			return err
		}
	case *CreateSpecType_HashPolicyChoiceSourceIpStickiness:
		_ = b.EncodeVarint(16<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.HashPolicyChoiceSourceIpStickiness); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("CreateSpecType.HashPolicyChoice has unexpected type %T", x)
	}
	// cluster_retract_choice
	switch x := m.ClusterRetractChoice.(type) {
	case *CreateSpecType_RetractCluster:
		_ = b.EncodeVarint(19<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.RetractCluster); err != nil {
			return err
		}
	case *CreateSpecType_DoNotRetractCluster:
		_ = b.EncodeVarint(20<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.DoNotRetractCluster); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("CreateSpecType.ClusterRetractChoice has unexpected type %T", x)
	}
	return nil
}

func _CreateSpecType_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*CreateSpecType)
	switch tag {
	case 7: // advertise_choice.do_not_advertise
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.AdvertiseChoice = &CreateSpecType_DoNotAdvertise{msg}
		return true, err
	case 8: // advertise_choice.advertise_on_public_default_vip
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.AdvertiseChoice = &CreateSpecType_AdvertiseOnPublicDefaultVip{msg}
		return true, err
	case 5: // advertise_choice.advertise_on_public
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema_views.AdvertisePublic)
		err := b.DecodeMessage(msg)
		m.AdvertiseChoice = &CreateSpecType_AdvertiseOnPublic{msg}
		return true, err
	case 6: // advertise_choice.advertise_custom
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema_views.AdvertiseCustom)
		err := b.DecodeMessage(msg)
		m.AdvertiseChoice = &CreateSpecType_AdvertiseCustom{msg}
		return true, err
	case 13: // hash_policy_choice.hash_policy_choice_round_robin
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.HashPolicyChoice = &CreateSpecType_HashPolicyChoiceRoundRobin{msg}
		return true, err
	case 14: // hash_policy_choice.hash_policy_choice_least_active
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.HashPolicyChoice = &CreateSpecType_HashPolicyChoiceLeastActive{msg}
		return true, err
	case 15: // hash_policy_choice.hash_policy_choice_random
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.HashPolicyChoice = &CreateSpecType_HashPolicyChoiceRandom{msg}
		return true, err
	case 16: // hash_policy_choice.hash_policy_choice_source_ip_stickiness
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.HashPolicyChoice = &CreateSpecType_HashPolicyChoiceSourceIpStickiness{msg}
		return true, err
	case 19: // cluster_retract_choice.retract_cluster
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.ClusterRetractChoice = &CreateSpecType_RetractCluster{msg}
		return true, err
	case 20: // cluster_retract_choice.do_not_retract_cluster
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.ClusterRetractChoice = &CreateSpecType_DoNotRetractCluster{msg}
		return true, err
	default:
		return false, nil
	}
}

func _CreateSpecType_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*CreateSpecType)
	// advertise_choice
	switch x := m.AdvertiseChoice.(type) {
	case *CreateSpecType_DoNotAdvertise:
		s := proto.Size(x.DoNotAdvertise)
		n += proto.SizeVarint(7<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *CreateSpecType_AdvertiseOnPublicDefaultVip:
		s := proto.Size(x.AdvertiseOnPublicDefaultVip)
		n += proto.SizeVarint(8<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *CreateSpecType_AdvertiseOnPublic:
		s := proto.Size(x.AdvertiseOnPublic)
		n += proto.SizeVarint(5<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *CreateSpecType_AdvertiseCustom:
		s := proto.Size(x.AdvertiseCustom)
		n += proto.SizeVarint(6<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	// hash_policy_choice
	switch x := m.HashPolicyChoice.(type) {
	case *CreateSpecType_HashPolicyChoiceRoundRobin:
		s := proto.Size(x.HashPolicyChoiceRoundRobin)
		n += proto.SizeVarint(13<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *CreateSpecType_HashPolicyChoiceLeastActive:
		s := proto.Size(x.HashPolicyChoiceLeastActive)
		n += proto.SizeVarint(14<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *CreateSpecType_HashPolicyChoiceRandom:
		s := proto.Size(x.HashPolicyChoiceRandom)
		n += proto.SizeVarint(15<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *CreateSpecType_HashPolicyChoiceSourceIpStickiness:
		s := proto.Size(x.HashPolicyChoiceSourceIpStickiness)
		n += proto.SizeVarint(16<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	// cluster_retract_choice
	switch x := m.ClusterRetractChoice.(type) {
	case *CreateSpecType_RetractCluster:
		s := proto.Size(x.RetractCluster)
		n += proto.SizeVarint(19<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *CreateSpecType_DoNotRetractCluster:
		s := proto.Size(x.DoNotRetractCluster)
		n += proto.SizeVarint(20<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// ReplaceSpecType
//
// x-displayName: "Replace TCP Loadbalancer"
// Shape of the TCP loadbalancer replace specification
type ReplaceSpecType struct {
	Domains            []string                                    `protobuf:"bytes,1,rep,name=domains" json:"domains,omitempty"`
	ListenPort         uint32                                      `protobuf:"varint,2,opt,name=listen_port,json=listenPort,proto3" json:"listen_port,omitempty"`
	WithSni            bool                                        `protobuf:"varint,3,opt,name=with_sni,json=withSni,proto3" json:"with_sni,omitempty"`
	DnsVolterraManaged bool                                        `protobuf:"varint,11,opt,name=dns_volterra_managed,json=dnsVolterraManaged,proto3" json:"dns_volterra_managed,omitempty"`
	OriginPools        []*ves_io_schema_views.ObjectRefType        `protobuf:"bytes,4,rep,name=origin_pools,json=originPools" json:"origin_pools,omitempty"`
	OriginPoolsWeights []*ves_io_schema_views.OriginPoolWithWeight `protobuf:"bytes,10,rep,name=origin_pools_weights,json=originPoolsWeights" json:"origin_pools_weights,omitempty"`
	// Types that are valid to be assigned to AdvertiseChoice:
	//	*ReplaceSpecType_DoNotAdvertise
	//	*ReplaceSpecType_AdvertiseOnPublicDefaultVip
	//	*ReplaceSpecType_AdvertiseOnPublic
	//	*ReplaceSpecType_AdvertiseCustom
	AdvertiseChoice isReplaceSpecType_AdvertiseChoice `protobuf_oneof:"advertise_choice"`
	// Types that are valid to be assigned to HashPolicyChoice:
	//	*ReplaceSpecType_HashPolicyChoiceRoundRobin
	//	*ReplaceSpecType_HashPolicyChoiceLeastActive
	//	*ReplaceSpecType_HashPolicyChoiceRandom
	//	*ReplaceSpecType_HashPolicyChoiceSourceIpStickiness
	HashPolicyChoice isReplaceSpecType_HashPolicyChoice `protobuf_oneof:"hash_policy_choice"`
	IdleTimeout      uint32                             `protobuf:"varint,17,opt,name=idle_timeout,json=idleTimeout,proto3" json:"idle_timeout,omitempty"`
	// Types that are valid to be assigned to ClusterRetractChoice:
	//	*ReplaceSpecType_RetractCluster
	//	*ReplaceSpecType_DoNotRetractCluster
	ClusterRetractChoice isReplaceSpecType_ClusterRetractChoice `protobuf_oneof:"cluster_retract_choice"`
}

func (m *ReplaceSpecType) Reset()                    { *m = ReplaceSpecType{} }
func (*ReplaceSpecType) ProtoMessage()               {}
func (*ReplaceSpecType) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{2} }

type isReplaceSpecType_AdvertiseChoice interface {
	isReplaceSpecType_AdvertiseChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isReplaceSpecType_HashPolicyChoice interface {
	isReplaceSpecType_HashPolicyChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isReplaceSpecType_ClusterRetractChoice interface {
	isReplaceSpecType_ClusterRetractChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type ReplaceSpecType_DoNotAdvertise struct {
	DoNotAdvertise *ves_io_schema4.Empty `protobuf:"bytes,7,opt,name=do_not_advertise,json=doNotAdvertise,oneof"`
}
type ReplaceSpecType_AdvertiseOnPublicDefaultVip struct {
	AdvertiseOnPublicDefaultVip *ves_io_schema4.Empty `protobuf:"bytes,8,opt,name=advertise_on_public_default_vip,json=advertiseOnPublicDefaultVip,oneof"`
}
type ReplaceSpecType_AdvertiseOnPublic struct {
	AdvertiseOnPublic *ves_io_schema_views.AdvertisePublic `protobuf:"bytes,5,opt,name=advertise_on_public,json=advertiseOnPublic,oneof"`
}
type ReplaceSpecType_AdvertiseCustom struct {
	AdvertiseCustom *ves_io_schema_views.AdvertiseCustom `protobuf:"bytes,6,opt,name=advertise_custom,json=advertiseCustom,oneof"`
}
type ReplaceSpecType_HashPolicyChoiceRoundRobin struct {
	HashPolicyChoiceRoundRobin *ves_io_schema4.Empty `protobuf:"bytes,13,opt,name=hash_policy_choice_round_robin,json=hashPolicyChoiceRoundRobin,oneof"`
}
type ReplaceSpecType_HashPolicyChoiceLeastActive struct {
	HashPolicyChoiceLeastActive *ves_io_schema4.Empty `protobuf:"bytes,14,opt,name=hash_policy_choice_least_active,json=hashPolicyChoiceLeastActive,oneof"`
}
type ReplaceSpecType_HashPolicyChoiceRandom struct {
	HashPolicyChoiceRandom *ves_io_schema4.Empty `protobuf:"bytes,15,opt,name=hash_policy_choice_random,json=hashPolicyChoiceRandom,oneof"`
}
type ReplaceSpecType_HashPolicyChoiceSourceIpStickiness struct {
	HashPolicyChoiceSourceIpStickiness *ves_io_schema4.Empty `protobuf:"bytes,16,opt,name=hash_policy_choice_source_ip_stickiness,json=hashPolicyChoiceSourceIpStickiness,oneof"`
}
type ReplaceSpecType_RetractCluster struct {
	RetractCluster *ves_io_schema4.Empty `protobuf:"bytes,19,opt,name=retract_cluster,json=retractCluster,oneof"`
}
type ReplaceSpecType_DoNotRetractCluster struct {
	DoNotRetractCluster *ves_io_schema4.Empty `protobuf:"bytes,20,opt,name=do_not_retract_cluster,json=doNotRetractCluster,oneof"`
}

func (*ReplaceSpecType_DoNotAdvertise) isReplaceSpecType_AdvertiseChoice()                      {}
func (*ReplaceSpecType_AdvertiseOnPublicDefaultVip) isReplaceSpecType_AdvertiseChoice()         {}
func (*ReplaceSpecType_AdvertiseOnPublic) isReplaceSpecType_AdvertiseChoice()                   {}
func (*ReplaceSpecType_AdvertiseCustom) isReplaceSpecType_AdvertiseChoice()                     {}
func (*ReplaceSpecType_HashPolicyChoiceRoundRobin) isReplaceSpecType_HashPolicyChoice()         {}
func (*ReplaceSpecType_HashPolicyChoiceLeastActive) isReplaceSpecType_HashPolicyChoice()        {}
func (*ReplaceSpecType_HashPolicyChoiceRandom) isReplaceSpecType_HashPolicyChoice()             {}
func (*ReplaceSpecType_HashPolicyChoiceSourceIpStickiness) isReplaceSpecType_HashPolicyChoice() {}
func (*ReplaceSpecType_RetractCluster) isReplaceSpecType_ClusterRetractChoice()                 {}
func (*ReplaceSpecType_DoNotRetractCluster) isReplaceSpecType_ClusterRetractChoice()            {}

func (m *ReplaceSpecType) GetAdvertiseChoice() isReplaceSpecType_AdvertiseChoice {
	if m != nil {
		return m.AdvertiseChoice
	}
	return nil
}
func (m *ReplaceSpecType) GetHashPolicyChoice() isReplaceSpecType_HashPolicyChoice {
	if m != nil {
		return m.HashPolicyChoice
	}
	return nil
}
func (m *ReplaceSpecType) GetClusterRetractChoice() isReplaceSpecType_ClusterRetractChoice {
	if m != nil {
		return m.ClusterRetractChoice
	}
	return nil
}

func (m *ReplaceSpecType) GetDomains() []string {
	if m != nil {
		return m.Domains
	}
	return nil
}

func (m *ReplaceSpecType) GetListenPort() uint32 {
	if m != nil {
		return m.ListenPort
	}
	return 0
}

func (m *ReplaceSpecType) GetWithSni() bool {
	if m != nil {
		return m.WithSni
	}
	return false
}

func (m *ReplaceSpecType) GetDnsVolterraManaged() bool {
	if m != nil {
		return m.DnsVolterraManaged
	}
	return false
}

func (m *ReplaceSpecType) GetOriginPools() []*ves_io_schema_views.ObjectRefType {
	if m != nil {
		return m.OriginPools
	}
	return nil
}

func (m *ReplaceSpecType) GetOriginPoolsWeights() []*ves_io_schema_views.OriginPoolWithWeight {
	if m != nil {
		return m.OriginPoolsWeights
	}
	return nil
}

func (m *ReplaceSpecType) GetDoNotAdvertise() *ves_io_schema4.Empty {
	if x, ok := m.GetAdvertiseChoice().(*ReplaceSpecType_DoNotAdvertise); ok {
		return x.DoNotAdvertise
	}
	return nil
}

func (m *ReplaceSpecType) GetAdvertiseOnPublicDefaultVip() *ves_io_schema4.Empty {
	if x, ok := m.GetAdvertiseChoice().(*ReplaceSpecType_AdvertiseOnPublicDefaultVip); ok {
		return x.AdvertiseOnPublicDefaultVip
	}
	return nil
}

func (m *ReplaceSpecType) GetAdvertiseOnPublic() *ves_io_schema_views.AdvertisePublic {
	if x, ok := m.GetAdvertiseChoice().(*ReplaceSpecType_AdvertiseOnPublic); ok {
		return x.AdvertiseOnPublic
	}
	return nil
}

func (m *ReplaceSpecType) GetAdvertiseCustom() *ves_io_schema_views.AdvertiseCustom {
	if x, ok := m.GetAdvertiseChoice().(*ReplaceSpecType_AdvertiseCustom); ok {
		return x.AdvertiseCustom
	}
	return nil
}

func (m *ReplaceSpecType) GetHashPolicyChoiceRoundRobin() *ves_io_schema4.Empty {
	if x, ok := m.GetHashPolicyChoice().(*ReplaceSpecType_HashPolicyChoiceRoundRobin); ok {
		return x.HashPolicyChoiceRoundRobin
	}
	return nil
}

func (m *ReplaceSpecType) GetHashPolicyChoiceLeastActive() *ves_io_schema4.Empty {
	if x, ok := m.GetHashPolicyChoice().(*ReplaceSpecType_HashPolicyChoiceLeastActive); ok {
		return x.HashPolicyChoiceLeastActive
	}
	return nil
}

func (m *ReplaceSpecType) GetHashPolicyChoiceRandom() *ves_io_schema4.Empty {
	if x, ok := m.GetHashPolicyChoice().(*ReplaceSpecType_HashPolicyChoiceRandom); ok {
		return x.HashPolicyChoiceRandom
	}
	return nil
}

func (m *ReplaceSpecType) GetHashPolicyChoiceSourceIpStickiness() *ves_io_schema4.Empty {
	if x, ok := m.GetHashPolicyChoice().(*ReplaceSpecType_HashPolicyChoiceSourceIpStickiness); ok {
		return x.HashPolicyChoiceSourceIpStickiness
	}
	return nil
}

func (m *ReplaceSpecType) GetIdleTimeout() uint32 {
	if m != nil {
		return m.IdleTimeout
	}
	return 0
}

func (m *ReplaceSpecType) GetRetractCluster() *ves_io_schema4.Empty {
	if x, ok := m.GetClusterRetractChoice().(*ReplaceSpecType_RetractCluster); ok {
		return x.RetractCluster
	}
	return nil
}

func (m *ReplaceSpecType) GetDoNotRetractCluster() *ves_io_schema4.Empty {
	if x, ok := m.GetClusterRetractChoice().(*ReplaceSpecType_DoNotRetractCluster); ok {
		return x.DoNotRetractCluster
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*ReplaceSpecType) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _ReplaceSpecType_OneofMarshaler, _ReplaceSpecType_OneofUnmarshaler, _ReplaceSpecType_OneofSizer, []interface{}{
		(*ReplaceSpecType_DoNotAdvertise)(nil),
		(*ReplaceSpecType_AdvertiseOnPublicDefaultVip)(nil),
		(*ReplaceSpecType_AdvertiseOnPublic)(nil),
		(*ReplaceSpecType_AdvertiseCustom)(nil),
		(*ReplaceSpecType_HashPolicyChoiceRoundRobin)(nil),
		(*ReplaceSpecType_HashPolicyChoiceLeastActive)(nil),
		(*ReplaceSpecType_HashPolicyChoiceRandom)(nil),
		(*ReplaceSpecType_HashPolicyChoiceSourceIpStickiness)(nil),
		(*ReplaceSpecType_RetractCluster)(nil),
		(*ReplaceSpecType_DoNotRetractCluster)(nil),
	}
}

func _ReplaceSpecType_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*ReplaceSpecType)
	// advertise_choice
	switch x := m.AdvertiseChoice.(type) {
	case *ReplaceSpecType_DoNotAdvertise:
		_ = b.EncodeVarint(7<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.DoNotAdvertise); err != nil {
			return err
		}
	case *ReplaceSpecType_AdvertiseOnPublicDefaultVip:
		_ = b.EncodeVarint(8<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.AdvertiseOnPublicDefaultVip); err != nil {
			return err
		}
	case *ReplaceSpecType_AdvertiseOnPublic:
		_ = b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.AdvertiseOnPublic); err != nil {
			return err
		}
	case *ReplaceSpecType_AdvertiseCustom:
		_ = b.EncodeVarint(6<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.AdvertiseCustom); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("ReplaceSpecType.AdvertiseChoice has unexpected type %T", x)
	}
	// hash_policy_choice
	switch x := m.HashPolicyChoice.(type) {
	case *ReplaceSpecType_HashPolicyChoiceRoundRobin:
		_ = b.EncodeVarint(13<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.HashPolicyChoiceRoundRobin); err != nil {
			return err
		}
	case *ReplaceSpecType_HashPolicyChoiceLeastActive:
		_ = b.EncodeVarint(14<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.HashPolicyChoiceLeastActive); err != nil {
			return err
		}
	case *ReplaceSpecType_HashPolicyChoiceRandom:
		_ = b.EncodeVarint(15<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.HashPolicyChoiceRandom); err != nil {
			return err
		}
	case *ReplaceSpecType_HashPolicyChoiceSourceIpStickiness:
		_ = b.EncodeVarint(16<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.HashPolicyChoiceSourceIpStickiness); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("ReplaceSpecType.HashPolicyChoice has unexpected type %T", x)
	}
	// cluster_retract_choice
	switch x := m.ClusterRetractChoice.(type) {
	case *ReplaceSpecType_RetractCluster:
		_ = b.EncodeVarint(19<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.RetractCluster); err != nil {
			return err
		}
	case *ReplaceSpecType_DoNotRetractCluster:
		_ = b.EncodeVarint(20<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.DoNotRetractCluster); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("ReplaceSpecType.ClusterRetractChoice has unexpected type %T", x)
	}
	return nil
}

func _ReplaceSpecType_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*ReplaceSpecType)
	switch tag {
	case 7: // advertise_choice.do_not_advertise
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.AdvertiseChoice = &ReplaceSpecType_DoNotAdvertise{msg}
		return true, err
	case 8: // advertise_choice.advertise_on_public_default_vip
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.AdvertiseChoice = &ReplaceSpecType_AdvertiseOnPublicDefaultVip{msg}
		return true, err
	case 5: // advertise_choice.advertise_on_public
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema_views.AdvertisePublic)
		err := b.DecodeMessage(msg)
		m.AdvertiseChoice = &ReplaceSpecType_AdvertiseOnPublic{msg}
		return true, err
	case 6: // advertise_choice.advertise_custom
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema_views.AdvertiseCustom)
		err := b.DecodeMessage(msg)
		m.AdvertiseChoice = &ReplaceSpecType_AdvertiseCustom{msg}
		return true, err
	case 13: // hash_policy_choice.hash_policy_choice_round_robin
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.HashPolicyChoice = &ReplaceSpecType_HashPolicyChoiceRoundRobin{msg}
		return true, err
	case 14: // hash_policy_choice.hash_policy_choice_least_active
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.HashPolicyChoice = &ReplaceSpecType_HashPolicyChoiceLeastActive{msg}
		return true, err
	case 15: // hash_policy_choice.hash_policy_choice_random
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.HashPolicyChoice = &ReplaceSpecType_HashPolicyChoiceRandom{msg}
		return true, err
	case 16: // hash_policy_choice.hash_policy_choice_source_ip_stickiness
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.HashPolicyChoice = &ReplaceSpecType_HashPolicyChoiceSourceIpStickiness{msg}
		return true, err
	case 19: // cluster_retract_choice.retract_cluster
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.ClusterRetractChoice = &ReplaceSpecType_RetractCluster{msg}
		return true, err
	case 20: // cluster_retract_choice.do_not_retract_cluster
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.ClusterRetractChoice = &ReplaceSpecType_DoNotRetractCluster{msg}
		return true, err
	default:
		return false, nil
	}
}

func _ReplaceSpecType_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*ReplaceSpecType)
	// advertise_choice
	switch x := m.AdvertiseChoice.(type) {
	case *ReplaceSpecType_DoNotAdvertise:
		s := proto.Size(x.DoNotAdvertise)
		n += proto.SizeVarint(7<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ReplaceSpecType_AdvertiseOnPublicDefaultVip:
		s := proto.Size(x.AdvertiseOnPublicDefaultVip)
		n += proto.SizeVarint(8<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ReplaceSpecType_AdvertiseOnPublic:
		s := proto.Size(x.AdvertiseOnPublic)
		n += proto.SizeVarint(5<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ReplaceSpecType_AdvertiseCustom:
		s := proto.Size(x.AdvertiseCustom)
		n += proto.SizeVarint(6<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	// hash_policy_choice
	switch x := m.HashPolicyChoice.(type) {
	case *ReplaceSpecType_HashPolicyChoiceRoundRobin:
		s := proto.Size(x.HashPolicyChoiceRoundRobin)
		n += proto.SizeVarint(13<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ReplaceSpecType_HashPolicyChoiceLeastActive:
		s := proto.Size(x.HashPolicyChoiceLeastActive)
		n += proto.SizeVarint(14<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ReplaceSpecType_HashPolicyChoiceRandom:
		s := proto.Size(x.HashPolicyChoiceRandom)
		n += proto.SizeVarint(15<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ReplaceSpecType_HashPolicyChoiceSourceIpStickiness:
		s := proto.Size(x.HashPolicyChoiceSourceIpStickiness)
		n += proto.SizeVarint(16<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	// cluster_retract_choice
	switch x := m.ClusterRetractChoice.(type) {
	case *ReplaceSpecType_RetractCluster:
		s := proto.Size(x.RetractCluster)
		n += proto.SizeVarint(19<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ReplaceSpecType_DoNotRetractCluster:
		s := proto.Size(x.DoNotRetractCluster)
		n += proto.SizeVarint(20<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// GetSpecType
//
// x-displayName: "Get TCP Loadbalancer"
// Shape of the TCP loadbalancer get specification
type GetSpecType struct {
	Domains            []string                                    `protobuf:"bytes,1,rep,name=domains" json:"domains,omitempty"`
	ListenPort         uint32                                      `protobuf:"varint,2,opt,name=listen_port,json=listenPort,proto3" json:"listen_port,omitempty"`
	WithSni            bool                                        `protobuf:"varint,3,opt,name=with_sni,json=withSni,proto3" json:"with_sni,omitempty"`
	DnsVolterraManaged bool                                        `protobuf:"varint,11,opt,name=dns_volterra_managed,json=dnsVolterraManaged,proto3" json:"dns_volterra_managed,omitempty"`
	OriginPools        []*ves_io_schema_views.ObjectRefType        `protobuf:"bytes,4,rep,name=origin_pools,json=originPools" json:"origin_pools,omitempty"`
	OriginPoolsWeights []*ves_io_schema_views.OriginPoolWithWeight `protobuf:"bytes,10,rep,name=origin_pools_weights,json=originPoolsWeights" json:"origin_pools_weights,omitempty"`
	// Types that are valid to be assigned to AdvertiseChoice:
	//	*GetSpecType_DoNotAdvertise
	//	*GetSpecType_AdvertiseOnPublicDefaultVip
	//	*GetSpecType_AdvertiseOnPublic
	//	*GetSpecType_AdvertiseCustom
	AdvertiseChoice isGetSpecType_AdvertiseChoice `protobuf_oneof:"advertise_choice"`
	// Types that are valid to be assigned to HashPolicyChoice:
	//	*GetSpecType_HashPolicyChoiceRoundRobin
	//	*GetSpecType_HashPolicyChoiceLeastActive
	//	*GetSpecType_HashPolicyChoiceRandom
	//	*GetSpecType_HashPolicyChoiceSourceIpStickiness
	HashPolicyChoice isGetSpecType_HashPolicyChoice `protobuf_oneof:"hash_policy_choice"`
	IdleTimeout      uint32                         `protobuf:"varint,17,opt,name=idle_timeout,json=idleTimeout,proto3" json:"idle_timeout,omitempty"`
	// Types that are valid to be assigned to ClusterRetractChoice:
	//	*GetSpecType_RetractCluster
	//	*GetSpecType_DoNotRetractCluster
	ClusterRetractChoice isGetSpecType_ClusterRetractChoice             `protobuf_oneof:"cluster_retract_choice"`
	HostName             string                                         `protobuf:"bytes,1001,opt,name=host_name,json=hostName,proto3" json:"host_name,omitempty"`
	DnsInfo              []*ves_io_schema_virtual_host_dns_info.DnsInfo `protobuf:"bytes,1002,rep,name=dns_info,json=dnsInfo" json:"dns_info,omitempty"`
}

func (m *GetSpecType) Reset()                    { *m = GetSpecType{} }
func (*GetSpecType) ProtoMessage()               {}
func (*GetSpecType) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{3} }

type isGetSpecType_AdvertiseChoice interface {
	isGetSpecType_AdvertiseChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isGetSpecType_HashPolicyChoice interface {
	isGetSpecType_HashPolicyChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isGetSpecType_ClusterRetractChoice interface {
	isGetSpecType_ClusterRetractChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type GetSpecType_DoNotAdvertise struct {
	DoNotAdvertise *ves_io_schema4.Empty `protobuf:"bytes,7,opt,name=do_not_advertise,json=doNotAdvertise,oneof"`
}
type GetSpecType_AdvertiseOnPublicDefaultVip struct {
	AdvertiseOnPublicDefaultVip *ves_io_schema4.Empty `protobuf:"bytes,8,opt,name=advertise_on_public_default_vip,json=advertiseOnPublicDefaultVip,oneof"`
}
type GetSpecType_AdvertiseOnPublic struct {
	AdvertiseOnPublic *ves_io_schema_views.AdvertisePublic `protobuf:"bytes,5,opt,name=advertise_on_public,json=advertiseOnPublic,oneof"`
}
type GetSpecType_AdvertiseCustom struct {
	AdvertiseCustom *ves_io_schema_views.AdvertiseCustom `protobuf:"bytes,6,opt,name=advertise_custom,json=advertiseCustom,oneof"`
}
type GetSpecType_HashPolicyChoiceRoundRobin struct {
	HashPolicyChoiceRoundRobin *ves_io_schema4.Empty `protobuf:"bytes,13,opt,name=hash_policy_choice_round_robin,json=hashPolicyChoiceRoundRobin,oneof"`
}
type GetSpecType_HashPolicyChoiceLeastActive struct {
	HashPolicyChoiceLeastActive *ves_io_schema4.Empty `protobuf:"bytes,14,opt,name=hash_policy_choice_least_active,json=hashPolicyChoiceLeastActive,oneof"`
}
type GetSpecType_HashPolicyChoiceRandom struct {
	HashPolicyChoiceRandom *ves_io_schema4.Empty `protobuf:"bytes,15,opt,name=hash_policy_choice_random,json=hashPolicyChoiceRandom,oneof"`
}
type GetSpecType_HashPolicyChoiceSourceIpStickiness struct {
	HashPolicyChoiceSourceIpStickiness *ves_io_schema4.Empty `protobuf:"bytes,16,opt,name=hash_policy_choice_source_ip_stickiness,json=hashPolicyChoiceSourceIpStickiness,oneof"`
}
type GetSpecType_RetractCluster struct {
	RetractCluster *ves_io_schema4.Empty `protobuf:"bytes,19,opt,name=retract_cluster,json=retractCluster,oneof"`
}
type GetSpecType_DoNotRetractCluster struct {
	DoNotRetractCluster *ves_io_schema4.Empty `protobuf:"bytes,20,opt,name=do_not_retract_cluster,json=doNotRetractCluster,oneof"`
}

func (*GetSpecType_DoNotAdvertise) isGetSpecType_AdvertiseChoice()                      {}
func (*GetSpecType_AdvertiseOnPublicDefaultVip) isGetSpecType_AdvertiseChoice()         {}
func (*GetSpecType_AdvertiseOnPublic) isGetSpecType_AdvertiseChoice()                   {}
func (*GetSpecType_AdvertiseCustom) isGetSpecType_AdvertiseChoice()                     {}
func (*GetSpecType_HashPolicyChoiceRoundRobin) isGetSpecType_HashPolicyChoice()         {}
func (*GetSpecType_HashPolicyChoiceLeastActive) isGetSpecType_HashPolicyChoice()        {}
func (*GetSpecType_HashPolicyChoiceRandom) isGetSpecType_HashPolicyChoice()             {}
func (*GetSpecType_HashPolicyChoiceSourceIpStickiness) isGetSpecType_HashPolicyChoice() {}
func (*GetSpecType_RetractCluster) isGetSpecType_ClusterRetractChoice()                 {}
func (*GetSpecType_DoNotRetractCluster) isGetSpecType_ClusterRetractChoice()            {}

func (m *GetSpecType) GetAdvertiseChoice() isGetSpecType_AdvertiseChoice {
	if m != nil {
		return m.AdvertiseChoice
	}
	return nil
}
func (m *GetSpecType) GetHashPolicyChoice() isGetSpecType_HashPolicyChoice {
	if m != nil {
		return m.HashPolicyChoice
	}
	return nil
}
func (m *GetSpecType) GetClusterRetractChoice() isGetSpecType_ClusterRetractChoice {
	if m != nil {
		return m.ClusterRetractChoice
	}
	return nil
}

func (m *GetSpecType) GetDomains() []string {
	if m != nil {
		return m.Domains
	}
	return nil
}

func (m *GetSpecType) GetListenPort() uint32 {
	if m != nil {
		return m.ListenPort
	}
	return 0
}

func (m *GetSpecType) GetWithSni() bool {
	if m != nil {
		return m.WithSni
	}
	return false
}

func (m *GetSpecType) GetDnsVolterraManaged() bool {
	if m != nil {
		return m.DnsVolterraManaged
	}
	return false
}

func (m *GetSpecType) GetOriginPools() []*ves_io_schema_views.ObjectRefType {
	if m != nil {
		return m.OriginPools
	}
	return nil
}

func (m *GetSpecType) GetOriginPoolsWeights() []*ves_io_schema_views.OriginPoolWithWeight {
	if m != nil {
		return m.OriginPoolsWeights
	}
	return nil
}

func (m *GetSpecType) GetDoNotAdvertise() *ves_io_schema4.Empty {
	if x, ok := m.GetAdvertiseChoice().(*GetSpecType_DoNotAdvertise); ok {
		return x.DoNotAdvertise
	}
	return nil
}

func (m *GetSpecType) GetAdvertiseOnPublicDefaultVip() *ves_io_schema4.Empty {
	if x, ok := m.GetAdvertiseChoice().(*GetSpecType_AdvertiseOnPublicDefaultVip); ok {
		return x.AdvertiseOnPublicDefaultVip
	}
	return nil
}

func (m *GetSpecType) GetAdvertiseOnPublic() *ves_io_schema_views.AdvertisePublic {
	if x, ok := m.GetAdvertiseChoice().(*GetSpecType_AdvertiseOnPublic); ok {
		return x.AdvertiseOnPublic
	}
	return nil
}

func (m *GetSpecType) GetAdvertiseCustom() *ves_io_schema_views.AdvertiseCustom {
	if x, ok := m.GetAdvertiseChoice().(*GetSpecType_AdvertiseCustom); ok {
		return x.AdvertiseCustom
	}
	return nil
}

func (m *GetSpecType) GetHashPolicyChoiceRoundRobin() *ves_io_schema4.Empty {
	if x, ok := m.GetHashPolicyChoice().(*GetSpecType_HashPolicyChoiceRoundRobin); ok {
		return x.HashPolicyChoiceRoundRobin
	}
	return nil
}

func (m *GetSpecType) GetHashPolicyChoiceLeastActive() *ves_io_schema4.Empty {
	if x, ok := m.GetHashPolicyChoice().(*GetSpecType_HashPolicyChoiceLeastActive); ok {
		return x.HashPolicyChoiceLeastActive
	}
	return nil
}

func (m *GetSpecType) GetHashPolicyChoiceRandom() *ves_io_schema4.Empty {
	if x, ok := m.GetHashPolicyChoice().(*GetSpecType_HashPolicyChoiceRandom); ok {
		return x.HashPolicyChoiceRandom
	}
	return nil
}

func (m *GetSpecType) GetHashPolicyChoiceSourceIpStickiness() *ves_io_schema4.Empty {
	if x, ok := m.GetHashPolicyChoice().(*GetSpecType_HashPolicyChoiceSourceIpStickiness); ok {
		return x.HashPolicyChoiceSourceIpStickiness
	}
	return nil
}

func (m *GetSpecType) GetIdleTimeout() uint32 {
	if m != nil {
		return m.IdleTimeout
	}
	return 0
}

func (m *GetSpecType) GetRetractCluster() *ves_io_schema4.Empty {
	if x, ok := m.GetClusterRetractChoice().(*GetSpecType_RetractCluster); ok {
		return x.RetractCluster
	}
	return nil
}

func (m *GetSpecType) GetDoNotRetractCluster() *ves_io_schema4.Empty {
	if x, ok := m.GetClusterRetractChoice().(*GetSpecType_DoNotRetractCluster); ok {
		return x.DoNotRetractCluster
	}
	return nil
}

func (m *GetSpecType) GetHostName() string {
	if m != nil {
		return m.HostName
	}
	return ""
}

func (m *GetSpecType) GetDnsInfo() []*ves_io_schema_virtual_host_dns_info.DnsInfo {
	if m != nil {
		return m.DnsInfo
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*GetSpecType) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _GetSpecType_OneofMarshaler, _GetSpecType_OneofUnmarshaler, _GetSpecType_OneofSizer, []interface{}{
		(*GetSpecType_DoNotAdvertise)(nil),
		(*GetSpecType_AdvertiseOnPublicDefaultVip)(nil),
		(*GetSpecType_AdvertiseOnPublic)(nil),
		(*GetSpecType_AdvertiseCustom)(nil),
		(*GetSpecType_HashPolicyChoiceRoundRobin)(nil),
		(*GetSpecType_HashPolicyChoiceLeastActive)(nil),
		(*GetSpecType_HashPolicyChoiceRandom)(nil),
		(*GetSpecType_HashPolicyChoiceSourceIpStickiness)(nil),
		(*GetSpecType_RetractCluster)(nil),
		(*GetSpecType_DoNotRetractCluster)(nil),
	}
}

func _GetSpecType_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*GetSpecType)
	// advertise_choice
	switch x := m.AdvertiseChoice.(type) {
	case *GetSpecType_DoNotAdvertise:
		_ = b.EncodeVarint(7<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.DoNotAdvertise); err != nil {
			return err
		}
	case *GetSpecType_AdvertiseOnPublicDefaultVip:
		_ = b.EncodeVarint(8<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.AdvertiseOnPublicDefaultVip); err != nil {
			return err
		}
	case *GetSpecType_AdvertiseOnPublic:
		_ = b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.AdvertiseOnPublic); err != nil {
			return err
		}
	case *GetSpecType_AdvertiseCustom:
		_ = b.EncodeVarint(6<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.AdvertiseCustom); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("GetSpecType.AdvertiseChoice has unexpected type %T", x)
	}
	// hash_policy_choice
	switch x := m.HashPolicyChoice.(type) {
	case *GetSpecType_HashPolicyChoiceRoundRobin:
		_ = b.EncodeVarint(13<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.HashPolicyChoiceRoundRobin); err != nil {
			return err
		}
	case *GetSpecType_HashPolicyChoiceLeastActive:
		_ = b.EncodeVarint(14<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.HashPolicyChoiceLeastActive); err != nil {
			return err
		}
	case *GetSpecType_HashPolicyChoiceRandom:
		_ = b.EncodeVarint(15<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.HashPolicyChoiceRandom); err != nil {
			return err
		}
	case *GetSpecType_HashPolicyChoiceSourceIpStickiness:
		_ = b.EncodeVarint(16<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.HashPolicyChoiceSourceIpStickiness); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("GetSpecType.HashPolicyChoice has unexpected type %T", x)
	}
	// cluster_retract_choice
	switch x := m.ClusterRetractChoice.(type) {
	case *GetSpecType_RetractCluster:
		_ = b.EncodeVarint(19<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.RetractCluster); err != nil {
			return err
		}
	case *GetSpecType_DoNotRetractCluster:
		_ = b.EncodeVarint(20<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.DoNotRetractCluster); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("GetSpecType.ClusterRetractChoice has unexpected type %T", x)
	}
	return nil
}

func _GetSpecType_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*GetSpecType)
	switch tag {
	case 7: // advertise_choice.do_not_advertise
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.AdvertiseChoice = &GetSpecType_DoNotAdvertise{msg}
		return true, err
	case 8: // advertise_choice.advertise_on_public_default_vip
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.AdvertiseChoice = &GetSpecType_AdvertiseOnPublicDefaultVip{msg}
		return true, err
	case 5: // advertise_choice.advertise_on_public
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema_views.AdvertisePublic)
		err := b.DecodeMessage(msg)
		m.AdvertiseChoice = &GetSpecType_AdvertiseOnPublic{msg}
		return true, err
	case 6: // advertise_choice.advertise_custom
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema_views.AdvertiseCustom)
		err := b.DecodeMessage(msg)
		m.AdvertiseChoice = &GetSpecType_AdvertiseCustom{msg}
		return true, err
	case 13: // hash_policy_choice.hash_policy_choice_round_robin
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.HashPolicyChoice = &GetSpecType_HashPolicyChoiceRoundRobin{msg}
		return true, err
	case 14: // hash_policy_choice.hash_policy_choice_least_active
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.HashPolicyChoice = &GetSpecType_HashPolicyChoiceLeastActive{msg}
		return true, err
	case 15: // hash_policy_choice.hash_policy_choice_random
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.HashPolicyChoice = &GetSpecType_HashPolicyChoiceRandom{msg}
		return true, err
	case 16: // hash_policy_choice.hash_policy_choice_source_ip_stickiness
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.HashPolicyChoice = &GetSpecType_HashPolicyChoiceSourceIpStickiness{msg}
		return true, err
	case 19: // cluster_retract_choice.retract_cluster
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.ClusterRetractChoice = &GetSpecType_RetractCluster{msg}
		return true, err
	case 20: // cluster_retract_choice.do_not_retract_cluster
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.ClusterRetractChoice = &GetSpecType_DoNotRetractCluster{msg}
		return true, err
	default:
		return false, nil
	}
}

func _GetSpecType_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*GetSpecType)
	// advertise_choice
	switch x := m.AdvertiseChoice.(type) {
	case *GetSpecType_DoNotAdvertise:
		s := proto.Size(x.DoNotAdvertise)
		n += proto.SizeVarint(7<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *GetSpecType_AdvertiseOnPublicDefaultVip:
		s := proto.Size(x.AdvertiseOnPublicDefaultVip)
		n += proto.SizeVarint(8<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *GetSpecType_AdvertiseOnPublic:
		s := proto.Size(x.AdvertiseOnPublic)
		n += proto.SizeVarint(5<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *GetSpecType_AdvertiseCustom:
		s := proto.Size(x.AdvertiseCustom)
		n += proto.SizeVarint(6<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	// hash_policy_choice
	switch x := m.HashPolicyChoice.(type) {
	case *GetSpecType_HashPolicyChoiceRoundRobin:
		s := proto.Size(x.HashPolicyChoiceRoundRobin)
		n += proto.SizeVarint(13<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *GetSpecType_HashPolicyChoiceLeastActive:
		s := proto.Size(x.HashPolicyChoiceLeastActive)
		n += proto.SizeVarint(14<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *GetSpecType_HashPolicyChoiceRandom:
		s := proto.Size(x.HashPolicyChoiceRandom)
		n += proto.SizeVarint(15<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *GetSpecType_HashPolicyChoiceSourceIpStickiness:
		s := proto.Size(x.HashPolicyChoiceSourceIpStickiness)
		n += proto.SizeVarint(16<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	// cluster_retract_choice
	switch x := m.ClusterRetractChoice.(type) {
	case *GetSpecType_RetractCluster:
		s := proto.Size(x.RetractCluster)
		n += proto.SizeVarint(19<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *GetSpecType_DoNotRetractCluster:
		s := proto.Size(x.DoNotRetractCluster)
		n += proto.SizeVarint(20<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

func init() {
	proto.RegisterType((*GlobalSpecType)(nil), "ves.io.schema.views.tcp_loadbalancer.GlobalSpecType")
	golang_proto.RegisterType((*GlobalSpecType)(nil), "ves.io.schema.views.tcp_loadbalancer.GlobalSpecType")
	proto.RegisterType((*CreateSpecType)(nil), "ves.io.schema.views.tcp_loadbalancer.CreateSpecType")
	golang_proto.RegisterType((*CreateSpecType)(nil), "ves.io.schema.views.tcp_loadbalancer.CreateSpecType")
	proto.RegisterType((*ReplaceSpecType)(nil), "ves.io.schema.views.tcp_loadbalancer.ReplaceSpecType")
	golang_proto.RegisterType((*ReplaceSpecType)(nil), "ves.io.schema.views.tcp_loadbalancer.ReplaceSpecType")
	proto.RegisterType((*GetSpecType)(nil), "ves.io.schema.views.tcp_loadbalancer.GetSpecType")
	golang_proto.RegisterType((*GetSpecType)(nil), "ves.io.schema.views.tcp_loadbalancer.GetSpecType")
}
func (this *GlobalSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType)
	if !ok {
		that2, ok := that.(GlobalSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Domains) != len(that1.Domains) {
		return false
	}
	for i := range this.Domains {
		if this.Domains[i] != that1.Domains[i] {
			return false
		}
	}
	if this.ListenPort != that1.ListenPort {
		return false
	}
	if this.WithSni != that1.WithSni {
		return false
	}
	if this.DnsVolterraManaged != that1.DnsVolterraManaged {
		return false
	}
	if len(this.OriginPools) != len(that1.OriginPools) {
		return false
	}
	for i := range this.OriginPools {
		if !this.OriginPools[i].Equal(that1.OriginPools[i]) {
			return false
		}
	}
	if len(this.OriginPoolsWeights) != len(that1.OriginPoolsWeights) {
		return false
	}
	for i := range this.OriginPoolsWeights {
		if !this.OriginPoolsWeights[i].Equal(that1.OriginPoolsWeights[i]) {
			return false
		}
	}
	if that1.AdvertiseChoice == nil {
		if this.AdvertiseChoice != nil {
			return false
		}
	} else if this.AdvertiseChoice == nil {
		return false
	} else if !this.AdvertiseChoice.Equal(that1.AdvertiseChoice) {
		return false
	}
	if that1.HashPolicyChoice == nil {
		if this.HashPolicyChoice != nil {
			return false
		}
	} else if this.HashPolicyChoice == nil {
		return false
	} else if !this.HashPolicyChoice.Equal(that1.HashPolicyChoice) {
		return false
	}
	if this.IdleTimeout != that1.IdleTimeout {
		return false
	}
	if that1.ClusterRetractChoice == nil {
		if this.ClusterRetractChoice != nil {
			return false
		}
	} else if this.ClusterRetractChoice == nil {
		return false
	} else if !this.ClusterRetractChoice.Equal(that1.ClusterRetractChoice) {
		return false
	}
	if !this.ViewInternal.Equal(that1.ViewInternal) {
		return false
	}
	if this.HostName != that1.HostName {
		return false
	}
	if len(this.DnsInfo) != len(that1.DnsInfo) {
		return false
	}
	for i := range this.DnsInfo {
		if !this.DnsInfo[i].Equal(that1.DnsInfo[i]) {
			return false
		}
	}
	return true
}
func (this *GlobalSpecType_DoNotAdvertise) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_DoNotAdvertise)
	if !ok {
		that2, ok := that.(GlobalSpecType_DoNotAdvertise)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DoNotAdvertise.Equal(that1.DoNotAdvertise) {
		return false
	}
	return true
}
func (this *GlobalSpecType_AdvertiseOnPublicDefaultVip) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_AdvertiseOnPublicDefaultVip)
	if !ok {
		that2, ok := that.(GlobalSpecType_AdvertiseOnPublicDefaultVip)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AdvertiseOnPublicDefaultVip.Equal(that1.AdvertiseOnPublicDefaultVip) {
		return false
	}
	return true
}
func (this *GlobalSpecType_AdvertiseOnPublic) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_AdvertiseOnPublic)
	if !ok {
		that2, ok := that.(GlobalSpecType_AdvertiseOnPublic)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AdvertiseOnPublic.Equal(that1.AdvertiseOnPublic) {
		return false
	}
	return true
}
func (this *GlobalSpecType_AdvertiseCustom) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_AdvertiseCustom)
	if !ok {
		that2, ok := that.(GlobalSpecType_AdvertiseCustom)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AdvertiseCustom.Equal(that1.AdvertiseCustom) {
		return false
	}
	return true
}
func (this *GlobalSpecType_HashPolicyChoiceRoundRobin) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_HashPolicyChoiceRoundRobin)
	if !ok {
		that2, ok := that.(GlobalSpecType_HashPolicyChoiceRoundRobin)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.HashPolicyChoiceRoundRobin.Equal(that1.HashPolicyChoiceRoundRobin) {
		return false
	}
	return true
}
func (this *GlobalSpecType_HashPolicyChoiceLeastActive) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_HashPolicyChoiceLeastActive)
	if !ok {
		that2, ok := that.(GlobalSpecType_HashPolicyChoiceLeastActive)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.HashPolicyChoiceLeastActive.Equal(that1.HashPolicyChoiceLeastActive) {
		return false
	}
	return true
}
func (this *GlobalSpecType_HashPolicyChoiceRandom) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_HashPolicyChoiceRandom)
	if !ok {
		that2, ok := that.(GlobalSpecType_HashPolicyChoiceRandom)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.HashPolicyChoiceRandom.Equal(that1.HashPolicyChoiceRandom) {
		return false
	}
	return true
}
func (this *GlobalSpecType_HashPolicyChoiceSourceIpStickiness) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_HashPolicyChoiceSourceIpStickiness)
	if !ok {
		that2, ok := that.(GlobalSpecType_HashPolicyChoiceSourceIpStickiness)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.HashPolicyChoiceSourceIpStickiness.Equal(that1.HashPolicyChoiceSourceIpStickiness) {
		return false
	}
	return true
}
func (this *GlobalSpecType_RetractCluster) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_RetractCluster)
	if !ok {
		that2, ok := that.(GlobalSpecType_RetractCluster)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.RetractCluster.Equal(that1.RetractCluster) {
		return false
	}
	return true
}
func (this *GlobalSpecType_DoNotRetractCluster) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_DoNotRetractCluster)
	if !ok {
		that2, ok := that.(GlobalSpecType_DoNotRetractCluster)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DoNotRetractCluster.Equal(that1.DoNotRetractCluster) {
		return false
	}
	return true
}
func (this *CreateSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType)
	if !ok {
		that2, ok := that.(CreateSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Domains) != len(that1.Domains) {
		return false
	}
	for i := range this.Domains {
		if this.Domains[i] != that1.Domains[i] {
			return false
		}
	}
	if this.ListenPort != that1.ListenPort {
		return false
	}
	if this.WithSni != that1.WithSni {
		return false
	}
	if this.DnsVolterraManaged != that1.DnsVolterraManaged {
		return false
	}
	if len(this.OriginPoolsWeights) != len(that1.OriginPoolsWeights) {
		return false
	}
	for i := range this.OriginPoolsWeights {
		if !this.OriginPoolsWeights[i].Equal(that1.OriginPoolsWeights[i]) {
			return false
		}
	}
	if that1.AdvertiseChoice == nil {
		if this.AdvertiseChoice != nil {
			return false
		}
	} else if this.AdvertiseChoice == nil {
		return false
	} else if !this.AdvertiseChoice.Equal(that1.AdvertiseChoice) {
		return false
	}
	if that1.HashPolicyChoice == nil {
		if this.HashPolicyChoice != nil {
			return false
		}
	} else if this.HashPolicyChoice == nil {
		return false
	} else if !this.HashPolicyChoice.Equal(that1.HashPolicyChoice) {
		return false
	}
	if this.IdleTimeout != that1.IdleTimeout {
		return false
	}
	if that1.ClusterRetractChoice == nil {
		if this.ClusterRetractChoice != nil {
			return false
		}
	} else if this.ClusterRetractChoice == nil {
		return false
	} else if !this.ClusterRetractChoice.Equal(that1.ClusterRetractChoice) {
		return false
	}
	return true
}
func (this *CreateSpecType_DoNotAdvertise) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_DoNotAdvertise)
	if !ok {
		that2, ok := that.(CreateSpecType_DoNotAdvertise)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DoNotAdvertise.Equal(that1.DoNotAdvertise) {
		return false
	}
	return true
}
func (this *CreateSpecType_AdvertiseOnPublicDefaultVip) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_AdvertiseOnPublicDefaultVip)
	if !ok {
		that2, ok := that.(CreateSpecType_AdvertiseOnPublicDefaultVip)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AdvertiseOnPublicDefaultVip.Equal(that1.AdvertiseOnPublicDefaultVip) {
		return false
	}
	return true
}
func (this *CreateSpecType_AdvertiseOnPublic) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_AdvertiseOnPublic)
	if !ok {
		that2, ok := that.(CreateSpecType_AdvertiseOnPublic)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AdvertiseOnPublic.Equal(that1.AdvertiseOnPublic) {
		return false
	}
	return true
}
func (this *CreateSpecType_AdvertiseCustom) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_AdvertiseCustom)
	if !ok {
		that2, ok := that.(CreateSpecType_AdvertiseCustom)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AdvertiseCustom.Equal(that1.AdvertiseCustom) {
		return false
	}
	return true
}
func (this *CreateSpecType_HashPolicyChoiceRoundRobin) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_HashPolicyChoiceRoundRobin)
	if !ok {
		that2, ok := that.(CreateSpecType_HashPolicyChoiceRoundRobin)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.HashPolicyChoiceRoundRobin.Equal(that1.HashPolicyChoiceRoundRobin) {
		return false
	}
	return true
}
func (this *CreateSpecType_HashPolicyChoiceLeastActive) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_HashPolicyChoiceLeastActive)
	if !ok {
		that2, ok := that.(CreateSpecType_HashPolicyChoiceLeastActive)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.HashPolicyChoiceLeastActive.Equal(that1.HashPolicyChoiceLeastActive) {
		return false
	}
	return true
}
func (this *CreateSpecType_HashPolicyChoiceRandom) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_HashPolicyChoiceRandom)
	if !ok {
		that2, ok := that.(CreateSpecType_HashPolicyChoiceRandom)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.HashPolicyChoiceRandom.Equal(that1.HashPolicyChoiceRandom) {
		return false
	}
	return true
}
func (this *CreateSpecType_HashPolicyChoiceSourceIpStickiness) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_HashPolicyChoiceSourceIpStickiness)
	if !ok {
		that2, ok := that.(CreateSpecType_HashPolicyChoiceSourceIpStickiness)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.HashPolicyChoiceSourceIpStickiness.Equal(that1.HashPolicyChoiceSourceIpStickiness) {
		return false
	}
	return true
}
func (this *CreateSpecType_RetractCluster) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_RetractCluster)
	if !ok {
		that2, ok := that.(CreateSpecType_RetractCluster)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.RetractCluster.Equal(that1.RetractCluster) {
		return false
	}
	return true
}
func (this *CreateSpecType_DoNotRetractCluster) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_DoNotRetractCluster)
	if !ok {
		that2, ok := that.(CreateSpecType_DoNotRetractCluster)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DoNotRetractCluster.Equal(that1.DoNotRetractCluster) {
		return false
	}
	return true
}
func (this *ReplaceSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType)
	if !ok {
		that2, ok := that.(ReplaceSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Domains) != len(that1.Domains) {
		return false
	}
	for i := range this.Domains {
		if this.Domains[i] != that1.Domains[i] {
			return false
		}
	}
	if this.ListenPort != that1.ListenPort {
		return false
	}
	if this.WithSni != that1.WithSni {
		return false
	}
	if this.DnsVolterraManaged != that1.DnsVolterraManaged {
		return false
	}
	if len(this.OriginPools) != len(that1.OriginPools) {
		return false
	}
	for i := range this.OriginPools {
		if !this.OriginPools[i].Equal(that1.OriginPools[i]) {
			return false
		}
	}
	if len(this.OriginPoolsWeights) != len(that1.OriginPoolsWeights) {
		return false
	}
	for i := range this.OriginPoolsWeights {
		if !this.OriginPoolsWeights[i].Equal(that1.OriginPoolsWeights[i]) {
			return false
		}
	}
	if that1.AdvertiseChoice == nil {
		if this.AdvertiseChoice != nil {
			return false
		}
	} else if this.AdvertiseChoice == nil {
		return false
	} else if !this.AdvertiseChoice.Equal(that1.AdvertiseChoice) {
		return false
	}
	if that1.HashPolicyChoice == nil {
		if this.HashPolicyChoice != nil {
			return false
		}
	} else if this.HashPolicyChoice == nil {
		return false
	} else if !this.HashPolicyChoice.Equal(that1.HashPolicyChoice) {
		return false
	}
	if this.IdleTimeout != that1.IdleTimeout {
		return false
	}
	if that1.ClusterRetractChoice == nil {
		if this.ClusterRetractChoice != nil {
			return false
		}
	} else if this.ClusterRetractChoice == nil {
		return false
	} else if !this.ClusterRetractChoice.Equal(that1.ClusterRetractChoice) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_DoNotAdvertise) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_DoNotAdvertise)
	if !ok {
		that2, ok := that.(ReplaceSpecType_DoNotAdvertise)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DoNotAdvertise.Equal(that1.DoNotAdvertise) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_AdvertiseOnPublicDefaultVip) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_AdvertiseOnPublicDefaultVip)
	if !ok {
		that2, ok := that.(ReplaceSpecType_AdvertiseOnPublicDefaultVip)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AdvertiseOnPublicDefaultVip.Equal(that1.AdvertiseOnPublicDefaultVip) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_AdvertiseOnPublic) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_AdvertiseOnPublic)
	if !ok {
		that2, ok := that.(ReplaceSpecType_AdvertiseOnPublic)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AdvertiseOnPublic.Equal(that1.AdvertiseOnPublic) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_AdvertiseCustom) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_AdvertiseCustom)
	if !ok {
		that2, ok := that.(ReplaceSpecType_AdvertiseCustom)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AdvertiseCustom.Equal(that1.AdvertiseCustom) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_HashPolicyChoiceRoundRobin) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_HashPolicyChoiceRoundRobin)
	if !ok {
		that2, ok := that.(ReplaceSpecType_HashPolicyChoiceRoundRobin)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.HashPolicyChoiceRoundRobin.Equal(that1.HashPolicyChoiceRoundRobin) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_HashPolicyChoiceLeastActive) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_HashPolicyChoiceLeastActive)
	if !ok {
		that2, ok := that.(ReplaceSpecType_HashPolicyChoiceLeastActive)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.HashPolicyChoiceLeastActive.Equal(that1.HashPolicyChoiceLeastActive) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_HashPolicyChoiceRandom) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_HashPolicyChoiceRandom)
	if !ok {
		that2, ok := that.(ReplaceSpecType_HashPolicyChoiceRandom)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.HashPolicyChoiceRandom.Equal(that1.HashPolicyChoiceRandom) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_HashPolicyChoiceSourceIpStickiness) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_HashPolicyChoiceSourceIpStickiness)
	if !ok {
		that2, ok := that.(ReplaceSpecType_HashPolicyChoiceSourceIpStickiness)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.HashPolicyChoiceSourceIpStickiness.Equal(that1.HashPolicyChoiceSourceIpStickiness) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_RetractCluster) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_RetractCluster)
	if !ok {
		that2, ok := that.(ReplaceSpecType_RetractCluster)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.RetractCluster.Equal(that1.RetractCluster) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_DoNotRetractCluster) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_DoNotRetractCluster)
	if !ok {
		that2, ok := that.(ReplaceSpecType_DoNotRetractCluster)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DoNotRetractCluster.Equal(that1.DoNotRetractCluster) {
		return false
	}
	return true
}
func (this *GetSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType)
	if !ok {
		that2, ok := that.(GetSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Domains) != len(that1.Domains) {
		return false
	}
	for i := range this.Domains {
		if this.Domains[i] != that1.Domains[i] {
			return false
		}
	}
	if this.ListenPort != that1.ListenPort {
		return false
	}
	if this.WithSni != that1.WithSni {
		return false
	}
	if this.DnsVolterraManaged != that1.DnsVolterraManaged {
		return false
	}
	if len(this.OriginPools) != len(that1.OriginPools) {
		return false
	}
	for i := range this.OriginPools {
		if !this.OriginPools[i].Equal(that1.OriginPools[i]) {
			return false
		}
	}
	if len(this.OriginPoolsWeights) != len(that1.OriginPoolsWeights) {
		return false
	}
	for i := range this.OriginPoolsWeights {
		if !this.OriginPoolsWeights[i].Equal(that1.OriginPoolsWeights[i]) {
			return false
		}
	}
	if that1.AdvertiseChoice == nil {
		if this.AdvertiseChoice != nil {
			return false
		}
	} else if this.AdvertiseChoice == nil {
		return false
	} else if !this.AdvertiseChoice.Equal(that1.AdvertiseChoice) {
		return false
	}
	if that1.HashPolicyChoice == nil {
		if this.HashPolicyChoice != nil {
			return false
		}
	} else if this.HashPolicyChoice == nil {
		return false
	} else if !this.HashPolicyChoice.Equal(that1.HashPolicyChoice) {
		return false
	}
	if this.IdleTimeout != that1.IdleTimeout {
		return false
	}
	if that1.ClusterRetractChoice == nil {
		if this.ClusterRetractChoice != nil {
			return false
		}
	} else if this.ClusterRetractChoice == nil {
		return false
	} else if !this.ClusterRetractChoice.Equal(that1.ClusterRetractChoice) {
		return false
	}
	if this.HostName != that1.HostName {
		return false
	}
	if len(this.DnsInfo) != len(that1.DnsInfo) {
		return false
	}
	for i := range this.DnsInfo {
		if !this.DnsInfo[i].Equal(that1.DnsInfo[i]) {
			return false
		}
	}
	return true
}
func (this *GetSpecType_DoNotAdvertise) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_DoNotAdvertise)
	if !ok {
		that2, ok := that.(GetSpecType_DoNotAdvertise)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DoNotAdvertise.Equal(that1.DoNotAdvertise) {
		return false
	}
	return true
}
func (this *GetSpecType_AdvertiseOnPublicDefaultVip) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_AdvertiseOnPublicDefaultVip)
	if !ok {
		that2, ok := that.(GetSpecType_AdvertiseOnPublicDefaultVip)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AdvertiseOnPublicDefaultVip.Equal(that1.AdvertiseOnPublicDefaultVip) {
		return false
	}
	return true
}
func (this *GetSpecType_AdvertiseOnPublic) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_AdvertiseOnPublic)
	if !ok {
		that2, ok := that.(GetSpecType_AdvertiseOnPublic)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AdvertiseOnPublic.Equal(that1.AdvertiseOnPublic) {
		return false
	}
	return true
}
func (this *GetSpecType_AdvertiseCustom) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_AdvertiseCustom)
	if !ok {
		that2, ok := that.(GetSpecType_AdvertiseCustom)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AdvertiseCustom.Equal(that1.AdvertiseCustom) {
		return false
	}
	return true
}
func (this *GetSpecType_HashPolicyChoiceRoundRobin) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_HashPolicyChoiceRoundRobin)
	if !ok {
		that2, ok := that.(GetSpecType_HashPolicyChoiceRoundRobin)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.HashPolicyChoiceRoundRobin.Equal(that1.HashPolicyChoiceRoundRobin) {
		return false
	}
	return true
}
func (this *GetSpecType_HashPolicyChoiceLeastActive) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_HashPolicyChoiceLeastActive)
	if !ok {
		that2, ok := that.(GetSpecType_HashPolicyChoiceLeastActive)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.HashPolicyChoiceLeastActive.Equal(that1.HashPolicyChoiceLeastActive) {
		return false
	}
	return true
}
func (this *GetSpecType_HashPolicyChoiceRandom) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_HashPolicyChoiceRandom)
	if !ok {
		that2, ok := that.(GetSpecType_HashPolicyChoiceRandom)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.HashPolicyChoiceRandom.Equal(that1.HashPolicyChoiceRandom) {
		return false
	}
	return true
}
func (this *GetSpecType_HashPolicyChoiceSourceIpStickiness) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_HashPolicyChoiceSourceIpStickiness)
	if !ok {
		that2, ok := that.(GetSpecType_HashPolicyChoiceSourceIpStickiness)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.HashPolicyChoiceSourceIpStickiness.Equal(that1.HashPolicyChoiceSourceIpStickiness) {
		return false
	}
	return true
}
func (this *GetSpecType_RetractCluster) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_RetractCluster)
	if !ok {
		that2, ok := that.(GetSpecType_RetractCluster)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.RetractCluster.Equal(that1.RetractCluster) {
		return false
	}
	return true
}
func (this *GetSpecType_DoNotRetractCluster) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_DoNotRetractCluster)
	if !ok {
		that2, ok := that.(GetSpecType_DoNotRetractCluster)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DoNotRetractCluster.Equal(that1.DoNotRetractCluster) {
		return false
	}
	return true
}
func (this *GlobalSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 24)
	s = append(s, "&tcp_loadbalancer.GlobalSpecType{")
	s = append(s, "Domains: "+fmt.Sprintf("%#v", this.Domains)+",\n")
	s = append(s, "ListenPort: "+fmt.Sprintf("%#v", this.ListenPort)+",\n")
	s = append(s, "WithSni: "+fmt.Sprintf("%#v", this.WithSni)+",\n")
	s = append(s, "DnsVolterraManaged: "+fmt.Sprintf("%#v", this.DnsVolterraManaged)+",\n")
	if this.OriginPools != nil {
		s = append(s, "OriginPools: "+fmt.Sprintf("%#v", this.OriginPools)+",\n")
	}
	if this.OriginPoolsWeights != nil {
		s = append(s, "OriginPoolsWeights: "+fmt.Sprintf("%#v", this.OriginPoolsWeights)+",\n")
	}
	if this.AdvertiseChoice != nil {
		s = append(s, "AdvertiseChoice: "+fmt.Sprintf("%#v", this.AdvertiseChoice)+",\n")
	}
	if this.HashPolicyChoice != nil {
		s = append(s, "HashPolicyChoice: "+fmt.Sprintf("%#v", this.HashPolicyChoice)+",\n")
	}
	s = append(s, "IdleTimeout: "+fmt.Sprintf("%#v", this.IdleTimeout)+",\n")
	if this.ClusterRetractChoice != nil {
		s = append(s, "ClusterRetractChoice: "+fmt.Sprintf("%#v", this.ClusterRetractChoice)+",\n")
	}
	if this.ViewInternal != nil {
		s = append(s, "ViewInternal: "+fmt.Sprintf("%#v", this.ViewInternal)+",\n")
	}
	s = append(s, "HostName: "+fmt.Sprintf("%#v", this.HostName)+",\n")
	if this.DnsInfo != nil {
		s = append(s, "DnsInfo: "+fmt.Sprintf("%#v", this.DnsInfo)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GlobalSpecType_DoNotAdvertise) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&tcp_loadbalancer.GlobalSpecType_DoNotAdvertise{` +
		`DoNotAdvertise:` + fmt.Sprintf("%#v", this.DoNotAdvertise) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_AdvertiseOnPublicDefaultVip) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&tcp_loadbalancer.GlobalSpecType_AdvertiseOnPublicDefaultVip{` +
		`AdvertiseOnPublicDefaultVip:` + fmt.Sprintf("%#v", this.AdvertiseOnPublicDefaultVip) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_AdvertiseOnPublic) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&tcp_loadbalancer.GlobalSpecType_AdvertiseOnPublic{` +
		`AdvertiseOnPublic:` + fmt.Sprintf("%#v", this.AdvertiseOnPublic) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_AdvertiseCustom) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&tcp_loadbalancer.GlobalSpecType_AdvertiseCustom{` +
		`AdvertiseCustom:` + fmt.Sprintf("%#v", this.AdvertiseCustom) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_HashPolicyChoiceRoundRobin) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&tcp_loadbalancer.GlobalSpecType_HashPolicyChoiceRoundRobin{` +
		`HashPolicyChoiceRoundRobin:` + fmt.Sprintf("%#v", this.HashPolicyChoiceRoundRobin) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_HashPolicyChoiceLeastActive) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&tcp_loadbalancer.GlobalSpecType_HashPolicyChoiceLeastActive{` +
		`HashPolicyChoiceLeastActive:` + fmt.Sprintf("%#v", this.HashPolicyChoiceLeastActive) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_HashPolicyChoiceRandom) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&tcp_loadbalancer.GlobalSpecType_HashPolicyChoiceRandom{` +
		`HashPolicyChoiceRandom:` + fmt.Sprintf("%#v", this.HashPolicyChoiceRandom) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_HashPolicyChoiceSourceIpStickiness) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&tcp_loadbalancer.GlobalSpecType_HashPolicyChoiceSourceIpStickiness{` +
		`HashPolicyChoiceSourceIpStickiness:` + fmt.Sprintf("%#v", this.HashPolicyChoiceSourceIpStickiness) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_RetractCluster) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&tcp_loadbalancer.GlobalSpecType_RetractCluster{` +
		`RetractCluster:` + fmt.Sprintf("%#v", this.RetractCluster) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_DoNotRetractCluster) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&tcp_loadbalancer.GlobalSpecType_DoNotRetractCluster{` +
		`DoNotRetractCluster:` + fmt.Sprintf("%#v", this.DoNotRetractCluster) + `}`}, ", ")
	return s
}
func (this *CreateSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 20)
	s = append(s, "&tcp_loadbalancer.CreateSpecType{")
	s = append(s, "Domains: "+fmt.Sprintf("%#v", this.Domains)+",\n")
	s = append(s, "ListenPort: "+fmt.Sprintf("%#v", this.ListenPort)+",\n")
	s = append(s, "WithSni: "+fmt.Sprintf("%#v", this.WithSni)+",\n")
	s = append(s, "DnsVolterraManaged: "+fmt.Sprintf("%#v", this.DnsVolterraManaged)+",\n")
	if this.OriginPoolsWeights != nil {
		s = append(s, "OriginPoolsWeights: "+fmt.Sprintf("%#v", this.OriginPoolsWeights)+",\n")
	}
	if this.AdvertiseChoice != nil {
		s = append(s, "AdvertiseChoice: "+fmt.Sprintf("%#v", this.AdvertiseChoice)+",\n")
	}
	if this.HashPolicyChoice != nil {
		s = append(s, "HashPolicyChoice: "+fmt.Sprintf("%#v", this.HashPolicyChoice)+",\n")
	}
	s = append(s, "IdleTimeout: "+fmt.Sprintf("%#v", this.IdleTimeout)+",\n")
	if this.ClusterRetractChoice != nil {
		s = append(s, "ClusterRetractChoice: "+fmt.Sprintf("%#v", this.ClusterRetractChoice)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CreateSpecType_DoNotAdvertise) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&tcp_loadbalancer.CreateSpecType_DoNotAdvertise{` +
		`DoNotAdvertise:` + fmt.Sprintf("%#v", this.DoNotAdvertise) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_AdvertiseOnPublicDefaultVip) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&tcp_loadbalancer.CreateSpecType_AdvertiseOnPublicDefaultVip{` +
		`AdvertiseOnPublicDefaultVip:` + fmt.Sprintf("%#v", this.AdvertiseOnPublicDefaultVip) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_AdvertiseOnPublic) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&tcp_loadbalancer.CreateSpecType_AdvertiseOnPublic{` +
		`AdvertiseOnPublic:` + fmt.Sprintf("%#v", this.AdvertiseOnPublic) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_AdvertiseCustom) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&tcp_loadbalancer.CreateSpecType_AdvertiseCustom{` +
		`AdvertiseCustom:` + fmt.Sprintf("%#v", this.AdvertiseCustom) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_HashPolicyChoiceRoundRobin) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&tcp_loadbalancer.CreateSpecType_HashPolicyChoiceRoundRobin{` +
		`HashPolicyChoiceRoundRobin:` + fmt.Sprintf("%#v", this.HashPolicyChoiceRoundRobin) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_HashPolicyChoiceLeastActive) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&tcp_loadbalancer.CreateSpecType_HashPolicyChoiceLeastActive{` +
		`HashPolicyChoiceLeastActive:` + fmt.Sprintf("%#v", this.HashPolicyChoiceLeastActive) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_HashPolicyChoiceRandom) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&tcp_loadbalancer.CreateSpecType_HashPolicyChoiceRandom{` +
		`HashPolicyChoiceRandom:` + fmt.Sprintf("%#v", this.HashPolicyChoiceRandom) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_HashPolicyChoiceSourceIpStickiness) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&tcp_loadbalancer.CreateSpecType_HashPolicyChoiceSourceIpStickiness{` +
		`HashPolicyChoiceSourceIpStickiness:` + fmt.Sprintf("%#v", this.HashPolicyChoiceSourceIpStickiness) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_RetractCluster) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&tcp_loadbalancer.CreateSpecType_RetractCluster{` +
		`RetractCluster:` + fmt.Sprintf("%#v", this.RetractCluster) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_DoNotRetractCluster) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&tcp_loadbalancer.CreateSpecType_DoNotRetractCluster{` +
		`DoNotRetractCluster:` + fmt.Sprintf("%#v", this.DoNotRetractCluster) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 21)
	s = append(s, "&tcp_loadbalancer.ReplaceSpecType{")
	s = append(s, "Domains: "+fmt.Sprintf("%#v", this.Domains)+",\n")
	s = append(s, "ListenPort: "+fmt.Sprintf("%#v", this.ListenPort)+",\n")
	s = append(s, "WithSni: "+fmt.Sprintf("%#v", this.WithSni)+",\n")
	s = append(s, "DnsVolterraManaged: "+fmt.Sprintf("%#v", this.DnsVolterraManaged)+",\n")
	if this.OriginPools != nil {
		s = append(s, "OriginPools: "+fmt.Sprintf("%#v", this.OriginPools)+",\n")
	}
	if this.OriginPoolsWeights != nil {
		s = append(s, "OriginPoolsWeights: "+fmt.Sprintf("%#v", this.OriginPoolsWeights)+",\n")
	}
	if this.AdvertiseChoice != nil {
		s = append(s, "AdvertiseChoice: "+fmt.Sprintf("%#v", this.AdvertiseChoice)+",\n")
	}
	if this.HashPolicyChoice != nil {
		s = append(s, "HashPolicyChoice: "+fmt.Sprintf("%#v", this.HashPolicyChoice)+",\n")
	}
	s = append(s, "IdleTimeout: "+fmt.Sprintf("%#v", this.IdleTimeout)+",\n")
	if this.ClusterRetractChoice != nil {
		s = append(s, "ClusterRetractChoice: "+fmt.Sprintf("%#v", this.ClusterRetractChoice)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ReplaceSpecType_DoNotAdvertise) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&tcp_loadbalancer.ReplaceSpecType_DoNotAdvertise{` +
		`DoNotAdvertise:` + fmt.Sprintf("%#v", this.DoNotAdvertise) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_AdvertiseOnPublicDefaultVip) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&tcp_loadbalancer.ReplaceSpecType_AdvertiseOnPublicDefaultVip{` +
		`AdvertiseOnPublicDefaultVip:` + fmt.Sprintf("%#v", this.AdvertiseOnPublicDefaultVip) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_AdvertiseOnPublic) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&tcp_loadbalancer.ReplaceSpecType_AdvertiseOnPublic{` +
		`AdvertiseOnPublic:` + fmt.Sprintf("%#v", this.AdvertiseOnPublic) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_AdvertiseCustom) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&tcp_loadbalancer.ReplaceSpecType_AdvertiseCustom{` +
		`AdvertiseCustom:` + fmt.Sprintf("%#v", this.AdvertiseCustom) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_HashPolicyChoiceRoundRobin) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&tcp_loadbalancer.ReplaceSpecType_HashPolicyChoiceRoundRobin{` +
		`HashPolicyChoiceRoundRobin:` + fmt.Sprintf("%#v", this.HashPolicyChoiceRoundRobin) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_HashPolicyChoiceLeastActive) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&tcp_loadbalancer.ReplaceSpecType_HashPolicyChoiceLeastActive{` +
		`HashPolicyChoiceLeastActive:` + fmt.Sprintf("%#v", this.HashPolicyChoiceLeastActive) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_HashPolicyChoiceRandom) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&tcp_loadbalancer.ReplaceSpecType_HashPolicyChoiceRandom{` +
		`HashPolicyChoiceRandom:` + fmt.Sprintf("%#v", this.HashPolicyChoiceRandom) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_HashPolicyChoiceSourceIpStickiness) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&tcp_loadbalancer.ReplaceSpecType_HashPolicyChoiceSourceIpStickiness{` +
		`HashPolicyChoiceSourceIpStickiness:` + fmt.Sprintf("%#v", this.HashPolicyChoiceSourceIpStickiness) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_RetractCluster) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&tcp_loadbalancer.ReplaceSpecType_RetractCluster{` +
		`RetractCluster:` + fmt.Sprintf("%#v", this.RetractCluster) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_DoNotRetractCluster) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&tcp_loadbalancer.ReplaceSpecType_DoNotRetractCluster{` +
		`DoNotRetractCluster:` + fmt.Sprintf("%#v", this.DoNotRetractCluster) + `}`}, ", ")
	return s
}
func (this *GetSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 23)
	s = append(s, "&tcp_loadbalancer.GetSpecType{")
	s = append(s, "Domains: "+fmt.Sprintf("%#v", this.Domains)+",\n")
	s = append(s, "ListenPort: "+fmt.Sprintf("%#v", this.ListenPort)+",\n")
	s = append(s, "WithSni: "+fmt.Sprintf("%#v", this.WithSni)+",\n")
	s = append(s, "DnsVolterraManaged: "+fmt.Sprintf("%#v", this.DnsVolterraManaged)+",\n")
	if this.OriginPools != nil {
		s = append(s, "OriginPools: "+fmt.Sprintf("%#v", this.OriginPools)+",\n")
	}
	if this.OriginPoolsWeights != nil {
		s = append(s, "OriginPoolsWeights: "+fmt.Sprintf("%#v", this.OriginPoolsWeights)+",\n")
	}
	if this.AdvertiseChoice != nil {
		s = append(s, "AdvertiseChoice: "+fmt.Sprintf("%#v", this.AdvertiseChoice)+",\n")
	}
	if this.HashPolicyChoice != nil {
		s = append(s, "HashPolicyChoice: "+fmt.Sprintf("%#v", this.HashPolicyChoice)+",\n")
	}
	s = append(s, "IdleTimeout: "+fmt.Sprintf("%#v", this.IdleTimeout)+",\n")
	if this.ClusterRetractChoice != nil {
		s = append(s, "ClusterRetractChoice: "+fmt.Sprintf("%#v", this.ClusterRetractChoice)+",\n")
	}
	s = append(s, "HostName: "+fmt.Sprintf("%#v", this.HostName)+",\n")
	if this.DnsInfo != nil {
		s = append(s, "DnsInfo: "+fmt.Sprintf("%#v", this.DnsInfo)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetSpecType_DoNotAdvertise) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&tcp_loadbalancer.GetSpecType_DoNotAdvertise{` +
		`DoNotAdvertise:` + fmt.Sprintf("%#v", this.DoNotAdvertise) + `}`}, ", ")
	return s
}
func (this *GetSpecType_AdvertiseOnPublicDefaultVip) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&tcp_loadbalancer.GetSpecType_AdvertiseOnPublicDefaultVip{` +
		`AdvertiseOnPublicDefaultVip:` + fmt.Sprintf("%#v", this.AdvertiseOnPublicDefaultVip) + `}`}, ", ")
	return s
}
func (this *GetSpecType_AdvertiseOnPublic) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&tcp_loadbalancer.GetSpecType_AdvertiseOnPublic{` +
		`AdvertiseOnPublic:` + fmt.Sprintf("%#v", this.AdvertiseOnPublic) + `}`}, ", ")
	return s
}
func (this *GetSpecType_AdvertiseCustom) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&tcp_loadbalancer.GetSpecType_AdvertiseCustom{` +
		`AdvertiseCustom:` + fmt.Sprintf("%#v", this.AdvertiseCustom) + `}`}, ", ")
	return s
}
func (this *GetSpecType_HashPolicyChoiceRoundRobin) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&tcp_loadbalancer.GetSpecType_HashPolicyChoiceRoundRobin{` +
		`HashPolicyChoiceRoundRobin:` + fmt.Sprintf("%#v", this.HashPolicyChoiceRoundRobin) + `}`}, ", ")
	return s
}
func (this *GetSpecType_HashPolicyChoiceLeastActive) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&tcp_loadbalancer.GetSpecType_HashPolicyChoiceLeastActive{` +
		`HashPolicyChoiceLeastActive:` + fmt.Sprintf("%#v", this.HashPolicyChoiceLeastActive) + `}`}, ", ")
	return s
}
func (this *GetSpecType_HashPolicyChoiceRandom) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&tcp_loadbalancer.GetSpecType_HashPolicyChoiceRandom{` +
		`HashPolicyChoiceRandom:` + fmt.Sprintf("%#v", this.HashPolicyChoiceRandom) + `}`}, ", ")
	return s
}
func (this *GetSpecType_HashPolicyChoiceSourceIpStickiness) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&tcp_loadbalancer.GetSpecType_HashPolicyChoiceSourceIpStickiness{` +
		`HashPolicyChoiceSourceIpStickiness:` + fmt.Sprintf("%#v", this.HashPolicyChoiceSourceIpStickiness) + `}`}, ", ")
	return s
}
func (this *GetSpecType_RetractCluster) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&tcp_loadbalancer.GetSpecType_RetractCluster{` +
		`RetractCluster:` + fmt.Sprintf("%#v", this.RetractCluster) + `}`}, ", ")
	return s
}
func (this *GetSpecType_DoNotRetractCluster) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&tcp_loadbalancer.GetSpecType_DoNotRetractCluster{` +
		`DoNotRetractCluster:` + fmt.Sprintf("%#v", this.DoNotRetractCluster) + `}`}, ", ")
	return s
}
func valueToGoStringTypes(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *GlobalSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GlobalSpecType) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Domains) > 0 {
		for _, s := range m.Domains {
			dAtA[i] = 0xa
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if m.ListenPort != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.ListenPort))
	}
	if m.WithSni {
		dAtA[i] = 0x18
		i++
		if m.WithSni {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.OriginPools) > 0 {
		for _, msg := range m.OriginPools {
			dAtA[i] = 0x22
			i++
			i = encodeVarintTypes(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.AdvertiseChoice != nil {
		nn1, err := m.AdvertiseChoice.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn1
	}
	if len(m.OriginPoolsWeights) > 0 {
		for _, msg := range m.OriginPoolsWeights {
			dAtA[i] = 0x52
			i++
			i = encodeVarintTypes(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.DnsVolterraManaged {
		dAtA[i] = 0x58
		i++
		if m.DnsVolterraManaged {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.HashPolicyChoice != nil {
		nn2, err := m.HashPolicyChoice.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn2
	}
	if m.IdleTimeout != 0 {
		dAtA[i] = 0x88
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.IdleTimeout))
	}
	if m.ClusterRetractChoice != nil {
		nn3, err := m.ClusterRetractChoice.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn3
	}
	if m.ViewInternal != nil {
		dAtA[i] = 0xc2
		i++
		dAtA[i] = 0x3e
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.ViewInternal.Size()))
		n4, err := m.ViewInternal.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	if len(m.HostName) > 0 {
		dAtA[i] = 0xca
		i++
		dAtA[i] = 0x3e
		i++
		i = encodeVarintTypes(dAtA, i, uint64(len(m.HostName)))
		i += copy(dAtA[i:], m.HostName)
	}
	if len(m.DnsInfo) > 0 {
		for _, msg := range m.DnsInfo {
			dAtA[i] = 0xd2
			i++
			dAtA[i] = 0x3e
			i++
			i = encodeVarintTypes(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *GlobalSpecType_AdvertiseOnPublic) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.AdvertiseOnPublic != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.AdvertiseOnPublic.Size()))
		n5, err := m.AdvertiseOnPublic.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	return i, nil
}
func (m *GlobalSpecType_AdvertiseCustom) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.AdvertiseCustom != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.AdvertiseCustom.Size()))
		n6, err := m.AdvertiseCustom.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	return i, nil
}
func (m *GlobalSpecType_DoNotAdvertise) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.DoNotAdvertise != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.DoNotAdvertise.Size()))
		n7, err := m.DoNotAdvertise.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	return i, nil
}
func (m *GlobalSpecType_AdvertiseOnPublicDefaultVip) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.AdvertiseOnPublicDefaultVip != nil {
		dAtA[i] = 0x42
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.AdvertiseOnPublicDefaultVip.Size()))
		n8, err := m.AdvertiseOnPublicDefaultVip.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n8
	}
	return i, nil
}
func (m *GlobalSpecType_HashPolicyChoiceRoundRobin) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.HashPolicyChoiceRoundRobin != nil {
		dAtA[i] = 0x6a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.HashPolicyChoiceRoundRobin.Size()))
		n9, err := m.HashPolicyChoiceRoundRobin.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n9
	}
	return i, nil
}
func (m *GlobalSpecType_HashPolicyChoiceLeastActive) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.HashPolicyChoiceLeastActive != nil {
		dAtA[i] = 0x72
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.HashPolicyChoiceLeastActive.Size()))
		n10, err := m.HashPolicyChoiceLeastActive.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n10
	}
	return i, nil
}
func (m *GlobalSpecType_HashPolicyChoiceRandom) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.HashPolicyChoiceRandom != nil {
		dAtA[i] = 0x7a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.HashPolicyChoiceRandom.Size()))
		n11, err := m.HashPolicyChoiceRandom.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n11
	}
	return i, nil
}
func (m *GlobalSpecType_HashPolicyChoiceSourceIpStickiness) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.HashPolicyChoiceSourceIpStickiness != nil {
		dAtA[i] = 0x82
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.HashPolicyChoiceSourceIpStickiness.Size()))
		n12, err := m.HashPolicyChoiceSourceIpStickiness.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n12
	}
	return i, nil
}
func (m *GlobalSpecType_RetractCluster) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.RetractCluster != nil {
		dAtA[i] = 0x9a
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.RetractCluster.Size()))
		n13, err := m.RetractCluster.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n13
	}
	return i, nil
}
func (m *GlobalSpecType_DoNotRetractCluster) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.DoNotRetractCluster != nil {
		dAtA[i] = 0xa2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.DoNotRetractCluster.Size()))
		n14, err := m.DoNotRetractCluster.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n14
	}
	return i, nil
}
func (m *CreateSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateSpecType) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Domains) > 0 {
		for _, s := range m.Domains {
			dAtA[i] = 0xa
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if m.ListenPort != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.ListenPort))
	}
	if m.WithSni {
		dAtA[i] = 0x18
		i++
		if m.WithSni {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.AdvertiseChoice != nil {
		nn15, err := m.AdvertiseChoice.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn15
	}
	if len(m.OriginPoolsWeights) > 0 {
		for _, msg := range m.OriginPoolsWeights {
			dAtA[i] = 0x52
			i++
			i = encodeVarintTypes(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.DnsVolterraManaged {
		dAtA[i] = 0x58
		i++
		if m.DnsVolterraManaged {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.HashPolicyChoice != nil {
		nn16, err := m.HashPolicyChoice.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn16
	}
	if m.IdleTimeout != 0 {
		dAtA[i] = 0x88
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.IdleTimeout))
	}
	if m.ClusterRetractChoice != nil {
		nn17, err := m.ClusterRetractChoice.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn17
	}
	return i, nil
}

func (m *CreateSpecType_AdvertiseOnPublic) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.AdvertiseOnPublic != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.AdvertiseOnPublic.Size()))
		n18, err := m.AdvertiseOnPublic.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n18
	}
	return i, nil
}
func (m *CreateSpecType_AdvertiseCustom) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.AdvertiseCustom != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.AdvertiseCustom.Size()))
		n19, err := m.AdvertiseCustom.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n19
	}
	return i, nil
}
func (m *CreateSpecType_DoNotAdvertise) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.DoNotAdvertise != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.DoNotAdvertise.Size()))
		n20, err := m.DoNotAdvertise.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n20
	}
	return i, nil
}
func (m *CreateSpecType_AdvertiseOnPublicDefaultVip) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.AdvertiseOnPublicDefaultVip != nil {
		dAtA[i] = 0x42
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.AdvertiseOnPublicDefaultVip.Size()))
		n21, err := m.AdvertiseOnPublicDefaultVip.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n21
	}
	return i, nil
}
func (m *CreateSpecType_HashPolicyChoiceRoundRobin) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.HashPolicyChoiceRoundRobin != nil {
		dAtA[i] = 0x6a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.HashPolicyChoiceRoundRobin.Size()))
		n22, err := m.HashPolicyChoiceRoundRobin.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n22
	}
	return i, nil
}
func (m *CreateSpecType_HashPolicyChoiceLeastActive) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.HashPolicyChoiceLeastActive != nil {
		dAtA[i] = 0x72
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.HashPolicyChoiceLeastActive.Size()))
		n23, err := m.HashPolicyChoiceLeastActive.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n23
	}
	return i, nil
}
func (m *CreateSpecType_HashPolicyChoiceRandom) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.HashPolicyChoiceRandom != nil {
		dAtA[i] = 0x7a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.HashPolicyChoiceRandom.Size()))
		n24, err := m.HashPolicyChoiceRandom.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n24
	}
	return i, nil
}
func (m *CreateSpecType_HashPolicyChoiceSourceIpStickiness) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.HashPolicyChoiceSourceIpStickiness != nil {
		dAtA[i] = 0x82
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.HashPolicyChoiceSourceIpStickiness.Size()))
		n25, err := m.HashPolicyChoiceSourceIpStickiness.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n25
	}
	return i, nil
}
func (m *CreateSpecType_RetractCluster) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.RetractCluster != nil {
		dAtA[i] = 0x9a
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.RetractCluster.Size()))
		n26, err := m.RetractCluster.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n26
	}
	return i, nil
}
func (m *CreateSpecType_DoNotRetractCluster) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.DoNotRetractCluster != nil {
		dAtA[i] = 0xa2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.DoNotRetractCluster.Size()))
		n27, err := m.DoNotRetractCluster.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n27
	}
	return i, nil
}
func (m *ReplaceSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplaceSpecType) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Domains) > 0 {
		for _, s := range m.Domains {
			dAtA[i] = 0xa
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if m.ListenPort != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.ListenPort))
	}
	if m.WithSni {
		dAtA[i] = 0x18
		i++
		if m.WithSni {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.OriginPools) > 0 {
		for _, msg := range m.OriginPools {
			dAtA[i] = 0x22
			i++
			i = encodeVarintTypes(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.AdvertiseChoice != nil {
		nn28, err := m.AdvertiseChoice.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn28
	}
	if len(m.OriginPoolsWeights) > 0 {
		for _, msg := range m.OriginPoolsWeights {
			dAtA[i] = 0x52
			i++
			i = encodeVarintTypes(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.DnsVolterraManaged {
		dAtA[i] = 0x58
		i++
		if m.DnsVolterraManaged {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.HashPolicyChoice != nil {
		nn29, err := m.HashPolicyChoice.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn29
	}
	if m.IdleTimeout != 0 {
		dAtA[i] = 0x88
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.IdleTimeout))
	}
	if m.ClusterRetractChoice != nil {
		nn30, err := m.ClusterRetractChoice.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn30
	}
	return i, nil
}

func (m *ReplaceSpecType_AdvertiseOnPublic) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.AdvertiseOnPublic != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.AdvertiseOnPublic.Size()))
		n31, err := m.AdvertiseOnPublic.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n31
	}
	return i, nil
}
func (m *ReplaceSpecType_AdvertiseCustom) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.AdvertiseCustom != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.AdvertiseCustom.Size()))
		n32, err := m.AdvertiseCustom.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n32
	}
	return i, nil
}
func (m *ReplaceSpecType_DoNotAdvertise) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.DoNotAdvertise != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.DoNotAdvertise.Size()))
		n33, err := m.DoNotAdvertise.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n33
	}
	return i, nil
}
func (m *ReplaceSpecType_AdvertiseOnPublicDefaultVip) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.AdvertiseOnPublicDefaultVip != nil {
		dAtA[i] = 0x42
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.AdvertiseOnPublicDefaultVip.Size()))
		n34, err := m.AdvertiseOnPublicDefaultVip.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n34
	}
	return i, nil
}
func (m *ReplaceSpecType_HashPolicyChoiceRoundRobin) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.HashPolicyChoiceRoundRobin != nil {
		dAtA[i] = 0x6a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.HashPolicyChoiceRoundRobin.Size()))
		n35, err := m.HashPolicyChoiceRoundRobin.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n35
	}
	return i, nil
}
func (m *ReplaceSpecType_HashPolicyChoiceLeastActive) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.HashPolicyChoiceLeastActive != nil {
		dAtA[i] = 0x72
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.HashPolicyChoiceLeastActive.Size()))
		n36, err := m.HashPolicyChoiceLeastActive.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n36
	}
	return i, nil
}
func (m *ReplaceSpecType_HashPolicyChoiceRandom) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.HashPolicyChoiceRandom != nil {
		dAtA[i] = 0x7a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.HashPolicyChoiceRandom.Size()))
		n37, err := m.HashPolicyChoiceRandom.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n37
	}
	return i, nil
}
func (m *ReplaceSpecType_HashPolicyChoiceSourceIpStickiness) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.HashPolicyChoiceSourceIpStickiness != nil {
		dAtA[i] = 0x82
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.HashPolicyChoiceSourceIpStickiness.Size()))
		n38, err := m.HashPolicyChoiceSourceIpStickiness.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n38
	}
	return i, nil
}
func (m *ReplaceSpecType_RetractCluster) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.RetractCluster != nil {
		dAtA[i] = 0x9a
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.RetractCluster.Size()))
		n39, err := m.RetractCluster.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n39
	}
	return i, nil
}
func (m *ReplaceSpecType_DoNotRetractCluster) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.DoNotRetractCluster != nil {
		dAtA[i] = 0xa2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.DoNotRetractCluster.Size()))
		n40, err := m.DoNotRetractCluster.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n40
	}
	return i, nil
}
func (m *GetSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetSpecType) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Domains) > 0 {
		for _, s := range m.Domains {
			dAtA[i] = 0xa
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if m.ListenPort != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.ListenPort))
	}
	if m.WithSni {
		dAtA[i] = 0x18
		i++
		if m.WithSni {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.OriginPools) > 0 {
		for _, msg := range m.OriginPools {
			dAtA[i] = 0x22
			i++
			i = encodeVarintTypes(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.AdvertiseChoice != nil {
		nn41, err := m.AdvertiseChoice.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn41
	}
	if len(m.OriginPoolsWeights) > 0 {
		for _, msg := range m.OriginPoolsWeights {
			dAtA[i] = 0x52
			i++
			i = encodeVarintTypes(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.DnsVolterraManaged {
		dAtA[i] = 0x58
		i++
		if m.DnsVolterraManaged {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.HashPolicyChoice != nil {
		nn42, err := m.HashPolicyChoice.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn42
	}
	if m.IdleTimeout != 0 {
		dAtA[i] = 0x88
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.IdleTimeout))
	}
	if m.ClusterRetractChoice != nil {
		nn43, err := m.ClusterRetractChoice.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn43
	}
	if len(m.HostName) > 0 {
		dAtA[i] = 0xca
		i++
		dAtA[i] = 0x3e
		i++
		i = encodeVarintTypes(dAtA, i, uint64(len(m.HostName)))
		i += copy(dAtA[i:], m.HostName)
	}
	if len(m.DnsInfo) > 0 {
		for _, msg := range m.DnsInfo {
			dAtA[i] = 0xd2
			i++
			dAtA[i] = 0x3e
			i++
			i = encodeVarintTypes(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *GetSpecType_AdvertiseOnPublic) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.AdvertiseOnPublic != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.AdvertiseOnPublic.Size()))
		n44, err := m.AdvertiseOnPublic.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n44
	}
	return i, nil
}
func (m *GetSpecType_AdvertiseCustom) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.AdvertiseCustom != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.AdvertiseCustom.Size()))
		n45, err := m.AdvertiseCustom.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n45
	}
	return i, nil
}
func (m *GetSpecType_DoNotAdvertise) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.DoNotAdvertise != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.DoNotAdvertise.Size()))
		n46, err := m.DoNotAdvertise.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n46
	}
	return i, nil
}
func (m *GetSpecType_AdvertiseOnPublicDefaultVip) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.AdvertiseOnPublicDefaultVip != nil {
		dAtA[i] = 0x42
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.AdvertiseOnPublicDefaultVip.Size()))
		n47, err := m.AdvertiseOnPublicDefaultVip.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n47
	}
	return i, nil
}
func (m *GetSpecType_HashPolicyChoiceRoundRobin) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.HashPolicyChoiceRoundRobin != nil {
		dAtA[i] = 0x6a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.HashPolicyChoiceRoundRobin.Size()))
		n48, err := m.HashPolicyChoiceRoundRobin.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n48
	}
	return i, nil
}
func (m *GetSpecType_HashPolicyChoiceLeastActive) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.HashPolicyChoiceLeastActive != nil {
		dAtA[i] = 0x72
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.HashPolicyChoiceLeastActive.Size()))
		n49, err := m.HashPolicyChoiceLeastActive.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n49
	}
	return i, nil
}
func (m *GetSpecType_HashPolicyChoiceRandom) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.HashPolicyChoiceRandom != nil {
		dAtA[i] = 0x7a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.HashPolicyChoiceRandom.Size()))
		n50, err := m.HashPolicyChoiceRandom.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n50
	}
	return i, nil
}
func (m *GetSpecType_HashPolicyChoiceSourceIpStickiness) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.HashPolicyChoiceSourceIpStickiness != nil {
		dAtA[i] = 0x82
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.HashPolicyChoiceSourceIpStickiness.Size()))
		n51, err := m.HashPolicyChoiceSourceIpStickiness.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n51
	}
	return i, nil
}
func (m *GetSpecType_RetractCluster) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.RetractCluster != nil {
		dAtA[i] = 0x9a
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.RetractCluster.Size()))
		n52, err := m.RetractCluster.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n52
	}
	return i, nil
}
func (m *GetSpecType_DoNotRetractCluster) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.DoNotRetractCluster != nil {
		dAtA[i] = 0xa2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.DoNotRetractCluster.Size()))
		n53, err := m.DoNotRetractCluster.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n53
	}
	return i, nil
}
func encodeVarintTypes(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *GlobalSpecType) Size() (n int) {
	var l int
	_ = l
	if len(m.Domains) > 0 {
		for _, s := range m.Domains {
			l = len(s)
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if m.ListenPort != 0 {
		n += 1 + sovTypes(uint64(m.ListenPort))
	}
	if m.WithSni {
		n += 2
	}
	if len(m.OriginPools) > 0 {
		for _, e := range m.OriginPools {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if m.AdvertiseChoice != nil {
		n += m.AdvertiseChoice.Size()
	}
	if len(m.OriginPoolsWeights) > 0 {
		for _, e := range m.OriginPoolsWeights {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if m.DnsVolterraManaged {
		n += 2
	}
	if m.HashPolicyChoice != nil {
		n += m.HashPolicyChoice.Size()
	}
	if m.IdleTimeout != 0 {
		n += 2 + sovTypes(uint64(m.IdleTimeout))
	}
	if m.ClusterRetractChoice != nil {
		n += m.ClusterRetractChoice.Size()
	}
	if m.ViewInternal != nil {
		l = m.ViewInternal.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	l = len(m.HostName)
	if l > 0 {
		n += 2 + l + sovTypes(uint64(l))
	}
	if len(m.DnsInfo) > 0 {
		for _, e := range m.DnsInfo {
			l = e.Size()
			n += 2 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *GlobalSpecType_AdvertiseOnPublic) Size() (n int) {
	var l int
	_ = l
	if m.AdvertiseOnPublic != nil {
		l = m.AdvertiseOnPublic.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_AdvertiseCustom) Size() (n int) {
	var l int
	_ = l
	if m.AdvertiseCustom != nil {
		l = m.AdvertiseCustom.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_DoNotAdvertise) Size() (n int) {
	var l int
	_ = l
	if m.DoNotAdvertise != nil {
		l = m.DoNotAdvertise.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_AdvertiseOnPublicDefaultVip) Size() (n int) {
	var l int
	_ = l
	if m.AdvertiseOnPublicDefaultVip != nil {
		l = m.AdvertiseOnPublicDefaultVip.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_HashPolicyChoiceRoundRobin) Size() (n int) {
	var l int
	_ = l
	if m.HashPolicyChoiceRoundRobin != nil {
		l = m.HashPolicyChoiceRoundRobin.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_HashPolicyChoiceLeastActive) Size() (n int) {
	var l int
	_ = l
	if m.HashPolicyChoiceLeastActive != nil {
		l = m.HashPolicyChoiceLeastActive.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_HashPolicyChoiceRandom) Size() (n int) {
	var l int
	_ = l
	if m.HashPolicyChoiceRandom != nil {
		l = m.HashPolicyChoiceRandom.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_HashPolicyChoiceSourceIpStickiness) Size() (n int) {
	var l int
	_ = l
	if m.HashPolicyChoiceSourceIpStickiness != nil {
		l = m.HashPolicyChoiceSourceIpStickiness.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_RetractCluster) Size() (n int) {
	var l int
	_ = l
	if m.RetractCluster != nil {
		l = m.RetractCluster.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_DoNotRetractCluster) Size() (n int) {
	var l int
	_ = l
	if m.DoNotRetractCluster != nil {
		l = m.DoNotRetractCluster.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType) Size() (n int) {
	var l int
	_ = l
	if len(m.Domains) > 0 {
		for _, s := range m.Domains {
			l = len(s)
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if m.ListenPort != 0 {
		n += 1 + sovTypes(uint64(m.ListenPort))
	}
	if m.WithSni {
		n += 2
	}
	if m.AdvertiseChoice != nil {
		n += m.AdvertiseChoice.Size()
	}
	if len(m.OriginPoolsWeights) > 0 {
		for _, e := range m.OriginPoolsWeights {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if m.DnsVolterraManaged {
		n += 2
	}
	if m.HashPolicyChoice != nil {
		n += m.HashPolicyChoice.Size()
	}
	if m.IdleTimeout != 0 {
		n += 2 + sovTypes(uint64(m.IdleTimeout))
	}
	if m.ClusterRetractChoice != nil {
		n += m.ClusterRetractChoice.Size()
	}
	return n
}

func (m *CreateSpecType_AdvertiseOnPublic) Size() (n int) {
	var l int
	_ = l
	if m.AdvertiseOnPublic != nil {
		l = m.AdvertiseOnPublic.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_AdvertiseCustom) Size() (n int) {
	var l int
	_ = l
	if m.AdvertiseCustom != nil {
		l = m.AdvertiseCustom.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_DoNotAdvertise) Size() (n int) {
	var l int
	_ = l
	if m.DoNotAdvertise != nil {
		l = m.DoNotAdvertise.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_AdvertiseOnPublicDefaultVip) Size() (n int) {
	var l int
	_ = l
	if m.AdvertiseOnPublicDefaultVip != nil {
		l = m.AdvertiseOnPublicDefaultVip.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_HashPolicyChoiceRoundRobin) Size() (n int) {
	var l int
	_ = l
	if m.HashPolicyChoiceRoundRobin != nil {
		l = m.HashPolicyChoiceRoundRobin.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_HashPolicyChoiceLeastActive) Size() (n int) {
	var l int
	_ = l
	if m.HashPolicyChoiceLeastActive != nil {
		l = m.HashPolicyChoiceLeastActive.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_HashPolicyChoiceRandom) Size() (n int) {
	var l int
	_ = l
	if m.HashPolicyChoiceRandom != nil {
		l = m.HashPolicyChoiceRandom.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_HashPolicyChoiceSourceIpStickiness) Size() (n int) {
	var l int
	_ = l
	if m.HashPolicyChoiceSourceIpStickiness != nil {
		l = m.HashPolicyChoiceSourceIpStickiness.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_RetractCluster) Size() (n int) {
	var l int
	_ = l
	if m.RetractCluster != nil {
		l = m.RetractCluster.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_DoNotRetractCluster) Size() (n int) {
	var l int
	_ = l
	if m.DoNotRetractCluster != nil {
		l = m.DoNotRetractCluster.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType) Size() (n int) {
	var l int
	_ = l
	if len(m.Domains) > 0 {
		for _, s := range m.Domains {
			l = len(s)
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if m.ListenPort != 0 {
		n += 1 + sovTypes(uint64(m.ListenPort))
	}
	if m.WithSni {
		n += 2
	}
	if len(m.OriginPools) > 0 {
		for _, e := range m.OriginPools {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if m.AdvertiseChoice != nil {
		n += m.AdvertiseChoice.Size()
	}
	if len(m.OriginPoolsWeights) > 0 {
		for _, e := range m.OriginPoolsWeights {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if m.DnsVolterraManaged {
		n += 2
	}
	if m.HashPolicyChoice != nil {
		n += m.HashPolicyChoice.Size()
	}
	if m.IdleTimeout != 0 {
		n += 2 + sovTypes(uint64(m.IdleTimeout))
	}
	if m.ClusterRetractChoice != nil {
		n += m.ClusterRetractChoice.Size()
	}
	return n
}

func (m *ReplaceSpecType_AdvertiseOnPublic) Size() (n int) {
	var l int
	_ = l
	if m.AdvertiseOnPublic != nil {
		l = m.AdvertiseOnPublic.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_AdvertiseCustom) Size() (n int) {
	var l int
	_ = l
	if m.AdvertiseCustom != nil {
		l = m.AdvertiseCustom.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_DoNotAdvertise) Size() (n int) {
	var l int
	_ = l
	if m.DoNotAdvertise != nil {
		l = m.DoNotAdvertise.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_AdvertiseOnPublicDefaultVip) Size() (n int) {
	var l int
	_ = l
	if m.AdvertiseOnPublicDefaultVip != nil {
		l = m.AdvertiseOnPublicDefaultVip.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_HashPolicyChoiceRoundRobin) Size() (n int) {
	var l int
	_ = l
	if m.HashPolicyChoiceRoundRobin != nil {
		l = m.HashPolicyChoiceRoundRobin.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_HashPolicyChoiceLeastActive) Size() (n int) {
	var l int
	_ = l
	if m.HashPolicyChoiceLeastActive != nil {
		l = m.HashPolicyChoiceLeastActive.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_HashPolicyChoiceRandom) Size() (n int) {
	var l int
	_ = l
	if m.HashPolicyChoiceRandom != nil {
		l = m.HashPolicyChoiceRandom.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_HashPolicyChoiceSourceIpStickiness) Size() (n int) {
	var l int
	_ = l
	if m.HashPolicyChoiceSourceIpStickiness != nil {
		l = m.HashPolicyChoiceSourceIpStickiness.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_RetractCluster) Size() (n int) {
	var l int
	_ = l
	if m.RetractCluster != nil {
		l = m.RetractCluster.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_DoNotRetractCluster) Size() (n int) {
	var l int
	_ = l
	if m.DoNotRetractCluster != nil {
		l = m.DoNotRetractCluster.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType) Size() (n int) {
	var l int
	_ = l
	if len(m.Domains) > 0 {
		for _, s := range m.Domains {
			l = len(s)
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if m.ListenPort != 0 {
		n += 1 + sovTypes(uint64(m.ListenPort))
	}
	if m.WithSni {
		n += 2
	}
	if len(m.OriginPools) > 0 {
		for _, e := range m.OriginPools {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if m.AdvertiseChoice != nil {
		n += m.AdvertiseChoice.Size()
	}
	if len(m.OriginPoolsWeights) > 0 {
		for _, e := range m.OriginPoolsWeights {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if m.DnsVolterraManaged {
		n += 2
	}
	if m.HashPolicyChoice != nil {
		n += m.HashPolicyChoice.Size()
	}
	if m.IdleTimeout != 0 {
		n += 2 + sovTypes(uint64(m.IdleTimeout))
	}
	if m.ClusterRetractChoice != nil {
		n += m.ClusterRetractChoice.Size()
	}
	l = len(m.HostName)
	if l > 0 {
		n += 2 + l + sovTypes(uint64(l))
	}
	if len(m.DnsInfo) > 0 {
		for _, e := range m.DnsInfo {
			l = e.Size()
			n += 2 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *GetSpecType_AdvertiseOnPublic) Size() (n int) {
	var l int
	_ = l
	if m.AdvertiseOnPublic != nil {
		l = m.AdvertiseOnPublic.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_AdvertiseCustom) Size() (n int) {
	var l int
	_ = l
	if m.AdvertiseCustom != nil {
		l = m.AdvertiseCustom.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_DoNotAdvertise) Size() (n int) {
	var l int
	_ = l
	if m.DoNotAdvertise != nil {
		l = m.DoNotAdvertise.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_AdvertiseOnPublicDefaultVip) Size() (n int) {
	var l int
	_ = l
	if m.AdvertiseOnPublicDefaultVip != nil {
		l = m.AdvertiseOnPublicDefaultVip.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_HashPolicyChoiceRoundRobin) Size() (n int) {
	var l int
	_ = l
	if m.HashPolicyChoiceRoundRobin != nil {
		l = m.HashPolicyChoiceRoundRobin.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_HashPolicyChoiceLeastActive) Size() (n int) {
	var l int
	_ = l
	if m.HashPolicyChoiceLeastActive != nil {
		l = m.HashPolicyChoiceLeastActive.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_HashPolicyChoiceRandom) Size() (n int) {
	var l int
	_ = l
	if m.HashPolicyChoiceRandom != nil {
		l = m.HashPolicyChoiceRandom.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_HashPolicyChoiceSourceIpStickiness) Size() (n int) {
	var l int
	_ = l
	if m.HashPolicyChoiceSourceIpStickiness != nil {
		l = m.HashPolicyChoiceSourceIpStickiness.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_RetractCluster) Size() (n int) {
	var l int
	_ = l
	if m.RetractCluster != nil {
		l = m.RetractCluster.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_DoNotRetractCluster) Size() (n int) {
	var l int
	_ = l
	if m.DoNotRetractCluster != nil {
		l = m.DoNotRetractCluster.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}

func sovTypes(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozTypes(x uint64) (n int) {
	return sovTypes(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *GlobalSpecType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType{`,
		`Domains:` + fmt.Sprintf("%v", this.Domains) + `,`,
		`ListenPort:` + fmt.Sprintf("%v", this.ListenPort) + `,`,
		`WithSni:` + fmt.Sprintf("%v", this.WithSni) + `,`,
		`OriginPools:` + strings.Replace(fmt.Sprintf("%v", this.OriginPools), "ObjectRefType", "ves_io_schema_views.ObjectRefType", 1) + `,`,
		`AdvertiseChoice:` + fmt.Sprintf("%v", this.AdvertiseChoice) + `,`,
		`OriginPoolsWeights:` + strings.Replace(fmt.Sprintf("%v", this.OriginPoolsWeights), "OriginPoolWithWeight", "ves_io_schema_views.OriginPoolWithWeight", 1) + `,`,
		`DnsVolterraManaged:` + fmt.Sprintf("%v", this.DnsVolterraManaged) + `,`,
		`HashPolicyChoice:` + fmt.Sprintf("%v", this.HashPolicyChoice) + `,`,
		`IdleTimeout:` + fmt.Sprintf("%v", this.IdleTimeout) + `,`,
		`ClusterRetractChoice:` + fmt.Sprintf("%v", this.ClusterRetractChoice) + `,`,
		`ViewInternal:` + strings.Replace(fmt.Sprintf("%v", this.ViewInternal), "ObjectRefType", "ves_io_schema_views.ObjectRefType", 1) + `,`,
		`HostName:` + fmt.Sprintf("%v", this.HostName) + `,`,
		`DnsInfo:` + strings.Replace(fmt.Sprintf("%v", this.DnsInfo), "DnsInfo", "ves_io_schema_virtual_host_dns_info.DnsInfo", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_AdvertiseOnPublic) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_AdvertiseOnPublic{`,
		`AdvertiseOnPublic:` + strings.Replace(fmt.Sprintf("%v", this.AdvertiseOnPublic), "AdvertisePublic", "ves_io_schema_views.AdvertisePublic", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_AdvertiseCustom) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_AdvertiseCustom{`,
		`AdvertiseCustom:` + strings.Replace(fmt.Sprintf("%v", this.AdvertiseCustom), "AdvertiseCustom", "ves_io_schema_views.AdvertiseCustom", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_DoNotAdvertise) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_DoNotAdvertise{`,
		`DoNotAdvertise:` + strings.Replace(fmt.Sprintf("%v", this.DoNotAdvertise), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_AdvertiseOnPublicDefaultVip) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_AdvertiseOnPublicDefaultVip{`,
		`AdvertiseOnPublicDefaultVip:` + strings.Replace(fmt.Sprintf("%v", this.AdvertiseOnPublicDefaultVip), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_HashPolicyChoiceRoundRobin) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_HashPolicyChoiceRoundRobin{`,
		`HashPolicyChoiceRoundRobin:` + strings.Replace(fmt.Sprintf("%v", this.HashPolicyChoiceRoundRobin), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_HashPolicyChoiceLeastActive) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_HashPolicyChoiceLeastActive{`,
		`HashPolicyChoiceLeastActive:` + strings.Replace(fmt.Sprintf("%v", this.HashPolicyChoiceLeastActive), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_HashPolicyChoiceRandom) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_HashPolicyChoiceRandom{`,
		`HashPolicyChoiceRandom:` + strings.Replace(fmt.Sprintf("%v", this.HashPolicyChoiceRandom), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_HashPolicyChoiceSourceIpStickiness) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_HashPolicyChoiceSourceIpStickiness{`,
		`HashPolicyChoiceSourceIpStickiness:` + strings.Replace(fmt.Sprintf("%v", this.HashPolicyChoiceSourceIpStickiness), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_RetractCluster) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_RetractCluster{`,
		`RetractCluster:` + strings.Replace(fmt.Sprintf("%v", this.RetractCluster), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_DoNotRetractCluster) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_DoNotRetractCluster{`,
		`DoNotRetractCluster:` + strings.Replace(fmt.Sprintf("%v", this.DoNotRetractCluster), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType{`,
		`Domains:` + fmt.Sprintf("%v", this.Domains) + `,`,
		`ListenPort:` + fmt.Sprintf("%v", this.ListenPort) + `,`,
		`WithSni:` + fmt.Sprintf("%v", this.WithSni) + `,`,
		`AdvertiseChoice:` + fmt.Sprintf("%v", this.AdvertiseChoice) + `,`,
		`OriginPoolsWeights:` + strings.Replace(fmt.Sprintf("%v", this.OriginPoolsWeights), "OriginPoolWithWeight", "ves_io_schema_views.OriginPoolWithWeight", 1) + `,`,
		`DnsVolterraManaged:` + fmt.Sprintf("%v", this.DnsVolterraManaged) + `,`,
		`HashPolicyChoice:` + fmt.Sprintf("%v", this.HashPolicyChoice) + `,`,
		`IdleTimeout:` + fmt.Sprintf("%v", this.IdleTimeout) + `,`,
		`ClusterRetractChoice:` + fmt.Sprintf("%v", this.ClusterRetractChoice) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_AdvertiseOnPublic) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_AdvertiseOnPublic{`,
		`AdvertiseOnPublic:` + strings.Replace(fmt.Sprintf("%v", this.AdvertiseOnPublic), "AdvertisePublic", "ves_io_schema_views.AdvertisePublic", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_AdvertiseCustom) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_AdvertiseCustom{`,
		`AdvertiseCustom:` + strings.Replace(fmt.Sprintf("%v", this.AdvertiseCustom), "AdvertiseCustom", "ves_io_schema_views.AdvertiseCustom", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_DoNotAdvertise) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_DoNotAdvertise{`,
		`DoNotAdvertise:` + strings.Replace(fmt.Sprintf("%v", this.DoNotAdvertise), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_AdvertiseOnPublicDefaultVip) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_AdvertiseOnPublicDefaultVip{`,
		`AdvertiseOnPublicDefaultVip:` + strings.Replace(fmt.Sprintf("%v", this.AdvertiseOnPublicDefaultVip), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_HashPolicyChoiceRoundRobin) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_HashPolicyChoiceRoundRobin{`,
		`HashPolicyChoiceRoundRobin:` + strings.Replace(fmt.Sprintf("%v", this.HashPolicyChoiceRoundRobin), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_HashPolicyChoiceLeastActive) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_HashPolicyChoiceLeastActive{`,
		`HashPolicyChoiceLeastActive:` + strings.Replace(fmt.Sprintf("%v", this.HashPolicyChoiceLeastActive), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_HashPolicyChoiceRandom) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_HashPolicyChoiceRandom{`,
		`HashPolicyChoiceRandom:` + strings.Replace(fmt.Sprintf("%v", this.HashPolicyChoiceRandom), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_HashPolicyChoiceSourceIpStickiness) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_HashPolicyChoiceSourceIpStickiness{`,
		`HashPolicyChoiceSourceIpStickiness:` + strings.Replace(fmt.Sprintf("%v", this.HashPolicyChoiceSourceIpStickiness), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_RetractCluster) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_RetractCluster{`,
		`RetractCluster:` + strings.Replace(fmt.Sprintf("%v", this.RetractCluster), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_DoNotRetractCluster) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_DoNotRetractCluster{`,
		`DoNotRetractCluster:` + strings.Replace(fmt.Sprintf("%v", this.DoNotRetractCluster), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType{`,
		`Domains:` + fmt.Sprintf("%v", this.Domains) + `,`,
		`ListenPort:` + fmt.Sprintf("%v", this.ListenPort) + `,`,
		`WithSni:` + fmt.Sprintf("%v", this.WithSni) + `,`,
		`OriginPools:` + strings.Replace(fmt.Sprintf("%v", this.OriginPools), "ObjectRefType", "ves_io_schema_views.ObjectRefType", 1) + `,`,
		`AdvertiseChoice:` + fmt.Sprintf("%v", this.AdvertiseChoice) + `,`,
		`OriginPoolsWeights:` + strings.Replace(fmt.Sprintf("%v", this.OriginPoolsWeights), "OriginPoolWithWeight", "ves_io_schema_views.OriginPoolWithWeight", 1) + `,`,
		`DnsVolterraManaged:` + fmt.Sprintf("%v", this.DnsVolterraManaged) + `,`,
		`HashPolicyChoice:` + fmt.Sprintf("%v", this.HashPolicyChoice) + `,`,
		`IdleTimeout:` + fmt.Sprintf("%v", this.IdleTimeout) + `,`,
		`ClusterRetractChoice:` + fmt.Sprintf("%v", this.ClusterRetractChoice) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_AdvertiseOnPublic) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_AdvertiseOnPublic{`,
		`AdvertiseOnPublic:` + strings.Replace(fmt.Sprintf("%v", this.AdvertiseOnPublic), "AdvertisePublic", "ves_io_schema_views.AdvertisePublic", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_AdvertiseCustom) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_AdvertiseCustom{`,
		`AdvertiseCustom:` + strings.Replace(fmt.Sprintf("%v", this.AdvertiseCustom), "AdvertiseCustom", "ves_io_schema_views.AdvertiseCustom", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_DoNotAdvertise) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_DoNotAdvertise{`,
		`DoNotAdvertise:` + strings.Replace(fmt.Sprintf("%v", this.DoNotAdvertise), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_AdvertiseOnPublicDefaultVip) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_AdvertiseOnPublicDefaultVip{`,
		`AdvertiseOnPublicDefaultVip:` + strings.Replace(fmt.Sprintf("%v", this.AdvertiseOnPublicDefaultVip), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_HashPolicyChoiceRoundRobin) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_HashPolicyChoiceRoundRobin{`,
		`HashPolicyChoiceRoundRobin:` + strings.Replace(fmt.Sprintf("%v", this.HashPolicyChoiceRoundRobin), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_HashPolicyChoiceLeastActive) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_HashPolicyChoiceLeastActive{`,
		`HashPolicyChoiceLeastActive:` + strings.Replace(fmt.Sprintf("%v", this.HashPolicyChoiceLeastActive), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_HashPolicyChoiceRandom) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_HashPolicyChoiceRandom{`,
		`HashPolicyChoiceRandom:` + strings.Replace(fmt.Sprintf("%v", this.HashPolicyChoiceRandom), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_HashPolicyChoiceSourceIpStickiness) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_HashPolicyChoiceSourceIpStickiness{`,
		`HashPolicyChoiceSourceIpStickiness:` + strings.Replace(fmt.Sprintf("%v", this.HashPolicyChoiceSourceIpStickiness), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_RetractCluster) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_RetractCluster{`,
		`RetractCluster:` + strings.Replace(fmt.Sprintf("%v", this.RetractCluster), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_DoNotRetractCluster) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_DoNotRetractCluster{`,
		`DoNotRetractCluster:` + strings.Replace(fmt.Sprintf("%v", this.DoNotRetractCluster), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType{`,
		`Domains:` + fmt.Sprintf("%v", this.Domains) + `,`,
		`ListenPort:` + fmt.Sprintf("%v", this.ListenPort) + `,`,
		`WithSni:` + fmt.Sprintf("%v", this.WithSni) + `,`,
		`OriginPools:` + strings.Replace(fmt.Sprintf("%v", this.OriginPools), "ObjectRefType", "ves_io_schema_views.ObjectRefType", 1) + `,`,
		`AdvertiseChoice:` + fmt.Sprintf("%v", this.AdvertiseChoice) + `,`,
		`OriginPoolsWeights:` + strings.Replace(fmt.Sprintf("%v", this.OriginPoolsWeights), "OriginPoolWithWeight", "ves_io_schema_views.OriginPoolWithWeight", 1) + `,`,
		`DnsVolterraManaged:` + fmt.Sprintf("%v", this.DnsVolterraManaged) + `,`,
		`HashPolicyChoice:` + fmt.Sprintf("%v", this.HashPolicyChoice) + `,`,
		`IdleTimeout:` + fmt.Sprintf("%v", this.IdleTimeout) + `,`,
		`ClusterRetractChoice:` + fmt.Sprintf("%v", this.ClusterRetractChoice) + `,`,
		`HostName:` + fmt.Sprintf("%v", this.HostName) + `,`,
		`DnsInfo:` + strings.Replace(fmt.Sprintf("%v", this.DnsInfo), "DnsInfo", "ves_io_schema_virtual_host_dns_info.DnsInfo", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_AdvertiseOnPublic) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_AdvertiseOnPublic{`,
		`AdvertiseOnPublic:` + strings.Replace(fmt.Sprintf("%v", this.AdvertiseOnPublic), "AdvertisePublic", "ves_io_schema_views.AdvertisePublic", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_AdvertiseCustom) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_AdvertiseCustom{`,
		`AdvertiseCustom:` + strings.Replace(fmt.Sprintf("%v", this.AdvertiseCustom), "AdvertiseCustom", "ves_io_schema_views.AdvertiseCustom", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_DoNotAdvertise) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_DoNotAdvertise{`,
		`DoNotAdvertise:` + strings.Replace(fmt.Sprintf("%v", this.DoNotAdvertise), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_AdvertiseOnPublicDefaultVip) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_AdvertiseOnPublicDefaultVip{`,
		`AdvertiseOnPublicDefaultVip:` + strings.Replace(fmt.Sprintf("%v", this.AdvertiseOnPublicDefaultVip), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_HashPolicyChoiceRoundRobin) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_HashPolicyChoiceRoundRobin{`,
		`HashPolicyChoiceRoundRobin:` + strings.Replace(fmt.Sprintf("%v", this.HashPolicyChoiceRoundRobin), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_HashPolicyChoiceLeastActive) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_HashPolicyChoiceLeastActive{`,
		`HashPolicyChoiceLeastActive:` + strings.Replace(fmt.Sprintf("%v", this.HashPolicyChoiceLeastActive), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_HashPolicyChoiceRandom) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_HashPolicyChoiceRandom{`,
		`HashPolicyChoiceRandom:` + strings.Replace(fmt.Sprintf("%v", this.HashPolicyChoiceRandom), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_HashPolicyChoiceSourceIpStickiness) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_HashPolicyChoiceSourceIpStickiness{`,
		`HashPolicyChoiceSourceIpStickiness:` + strings.Replace(fmt.Sprintf("%v", this.HashPolicyChoiceSourceIpStickiness), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_RetractCluster) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_RetractCluster{`,
		`RetractCluster:` + strings.Replace(fmt.Sprintf("%v", this.RetractCluster), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_DoNotRetractCluster) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_DoNotRetractCluster{`,
		`DoNotRetractCluster:` + strings.Replace(fmt.Sprintf("%v", this.DoNotRetractCluster), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringTypes(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *GlobalSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GlobalSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GlobalSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Domains", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Domains = append(m.Domains, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ListenPort", wireType)
			}
			m.ListenPort = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ListenPort |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WithSni", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.WithSni = bool(v != 0)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OriginPools", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OriginPools = append(m.OriginPools, &ves_io_schema_views.ObjectRefType{})
			if err := m.OriginPools[len(m.OriginPools)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdvertiseOnPublic", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema_views.AdvertisePublic{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.AdvertiseChoice = &GlobalSpecType_AdvertiseOnPublic{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdvertiseCustom", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema_views.AdvertiseCustom{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.AdvertiseChoice = &GlobalSpecType_AdvertiseCustom{v}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DoNotAdvertise", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.AdvertiseChoice = &GlobalSpecType_DoNotAdvertise{v}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdvertiseOnPublicDefaultVip", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.AdvertiseChoice = &GlobalSpecType_AdvertiseOnPublicDefaultVip{v}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OriginPoolsWeights", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OriginPoolsWeights = append(m.OriginPoolsWeights, &ves_io_schema_views.OriginPoolWithWeight{})
			if err := m.OriginPoolsWeights[len(m.OriginPoolsWeights)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DnsVolterraManaged", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DnsVolterraManaged = bool(v != 0)
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HashPolicyChoiceRoundRobin", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.HashPolicyChoice = &GlobalSpecType_HashPolicyChoiceRoundRobin{v}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HashPolicyChoiceLeastActive", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.HashPolicyChoice = &GlobalSpecType_HashPolicyChoiceLeastActive{v}
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HashPolicyChoiceRandom", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.HashPolicyChoice = &GlobalSpecType_HashPolicyChoiceRandom{v}
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HashPolicyChoiceSourceIpStickiness", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.HashPolicyChoice = &GlobalSpecType_HashPolicyChoiceSourceIpStickiness{v}
			iNdEx = postIndex
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IdleTimeout", wireType)
			}
			m.IdleTimeout = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IdleTimeout |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetractCluster", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ClusterRetractChoice = &GlobalSpecType_RetractCluster{v}
			iNdEx = postIndex
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DoNotRetractCluster", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ClusterRetractChoice = &GlobalSpecType_DoNotRetractCluster{v}
			iNdEx = postIndex
		case 1000:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ViewInternal", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ViewInternal == nil {
				m.ViewInternal = &ves_io_schema_views.ObjectRefType{}
			}
			if err := m.ViewInternal.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 1001:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HostName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HostName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 1002:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DnsInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DnsInfo = append(m.DnsInfo, &ves_io_schema_virtual_host_dns_info.DnsInfo{})
			if err := m.DnsInfo[len(m.DnsInfo)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Domains", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Domains = append(m.Domains, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ListenPort", wireType)
			}
			m.ListenPort = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ListenPort |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WithSni", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.WithSni = bool(v != 0)
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdvertiseOnPublic", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema_views.AdvertisePublic{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.AdvertiseChoice = &CreateSpecType_AdvertiseOnPublic{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdvertiseCustom", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema_views.AdvertiseCustom{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.AdvertiseChoice = &CreateSpecType_AdvertiseCustom{v}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DoNotAdvertise", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.AdvertiseChoice = &CreateSpecType_DoNotAdvertise{v}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdvertiseOnPublicDefaultVip", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.AdvertiseChoice = &CreateSpecType_AdvertiseOnPublicDefaultVip{v}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OriginPoolsWeights", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OriginPoolsWeights = append(m.OriginPoolsWeights, &ves_io_schema_views.OriginPoolWithWeight{})
			if err := m.OriginPoolsWeights[len(m.OriginPoolsWeights)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DnsVolterraManaged", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DnsVolterraManaged = bool(v != 0)
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HashPolicyChoiceRoundRobin", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.HashPolicyChoice = &CreateSpecType_HashPolicyChoiceRoundRobin{v}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HashPolicyChoiceLeastActive", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.HashPolicyChoice = &CreateSpecType_HashPolicyChoiceLeastActive{v}
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HashPolicyChoiceRandom", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.HashPolicyChoice = &CreateSpecType_HashPolicyChoiceRandom{v}
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HashPolicyChoiceSourceIpStickiness", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.HashPolicyChoice = &CreateSpecType_HashPolicyChoiceSourceIpStickiness{v}
			iNdEx = postIndex
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IdleTimeout", wireType)
			}
			m.IdleTimeout = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IdleTimeout |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetractCluster", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ClusterRetractChoice = &CreateSpecType_RetractCluster{v}
			iNdEx = postIndex
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DoNotRetractCluster", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ClusterRetractChoice = &CreateSpecType_DoNotRetractCluster{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplaceSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplaceSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplaceSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Domains", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Domains = append(m.Domains, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ListenPort", wireType)
			}
			m.ListenPort = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ListenPort |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WithSni", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.WithSni = bool(v != 0)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OriginPools", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OriginPools = append(m.OriginPools, &ves_io_schema_views.ObjectRefType{})
			if err := m.OriginPools[len(m.OriginPools)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdvertiseOnPublic", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema_views.AdvertisePublic{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.AdvertiseChoice = &ReplaceSpecType_AdvertiseOnPublic{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdvertiseCustom", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema_views.AdvertiseCustom{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.AdvertiseChoice = &ReplaceSpecType_AdvertiseCustom{v}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DoNotAdvertise", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.AdvertiseChoice = &ReplaceSpecType_DoNotAdvertise{v}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdvertiseOnPublicDefaultVip", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.AdvertiseChoice = &ReplaceSpecType_AdvertiseOnPublicDefaultVip{v}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OriginPoolsWeights", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OriginPoolsWeights = append(m.OriginPoolsWeights, &ves_io_schema_views.OriginPoolWithWeight{})
			if err := m.OriginPoolsWeights[len(m.OriginPoolsWeights)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DnsVolterraManaged", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DnsVolterraManaged = bool(v != 0)
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HashPolicyChoiceRoundRobin", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.HashPolicyChoice = &ReplaceSpecType_HashPolicyChoiceRoundRobin{v}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HashPolicyChoiceLeastActive", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.HashPolicyChoice = &ReplaceSpecType_HashPolicyChoiceLeastActive{v}
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HashPolicyChoiceRandom", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.HashPolicyChoice = &ReplaceSpecType_HashPolicyChoiceRandom{v}
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HashPolicyChoiceSourceIpStickiness", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.HashPolicyChoice = &ReplaceSpecType_HashPolicyChoiceSourceIpStickiness{v}
			iNdEx = postIndex
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IdleTimeout", wireType)
			}
			m.IdleTimeout = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IdleTimeout |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetractCluster", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ClusterRetractChoice = &ReplaceSpecType_RetractCluster{v}
			iNdEx = postIndex
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DoNotRetractCluster", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ClusterRetractChoice = &ReplaceSpecType_DoNotRetractCluster{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Domains", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Domains = append(m.Domains, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ListenPort", wireType)
			}
			m.ListenPort = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ListenPort |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WithSni", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.WithSni = bool(v != 0)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OriginPools", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OriginPools = append(m.OriginPools, &ves_io_schema_views.ObjectRefType{})
			if err := m.OriginPools[len(m.OriginPools)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdvertiseOnPublic", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema_views.AdvertisePublic{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.AdvertiseChoice = &GetSpecType_AdvertiseOnPublic{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdvertiseCustom", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema_views.AdvertiseCustom{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.AdvertiseChoice = &GetSpecType_AdvertiseCustom{v}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DoNotAdvertise", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.AdvertiseChoice = &GetSpecType_DoNotAdvertise{v}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdvertiseOnPublicDefaultVip", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.AdvertiseChoice = &GetSpecType_AdvertiseOnPublicDefaultVip{v}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OriginPoolsWeights", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OriginPoolsWeights = append(m.OriginPoolsWeights, &ves_io_schema_views.OriginPoolWithWeight{})
			if err := m.OriginPoolsWeights[len(m.OriginPoolsWeights)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DnsVolterraManaged", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DnsVolterraManaged = bool(v != 0)
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HashPolicyChoiceRoundRobin", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.HashPolicyChoice = &GetSpecType_HashPolicyChoiceRoundRobin{v}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HashPolicyChoiceLeastActive", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.HashPolicyChoice = &GetSpecType_HashPolicyChoiceLeastActive{v}
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HashPolicyChoiceRandom", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.HashPolicyChoice = &GetSpecType_HashPolicyChoiceRandom{v}
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HashPolicyChoiceSourceIpStickiness", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.HashPolicyChoice = &GetSpecType_HashPolicyChoiceSourceIpStickiness{v}
			iNdEx = postIndex
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IdleTimeout", wireType)
			}
			m.IdleTimeout = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IdleTimeout |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetractCluster", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ClusterRetractChoice = &GetSpecType_RetractCluster{v}
			iNdEx = postIndex
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DoNotRetractCluster", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ClusterRetractChoice = &GetSpecType_DoNotRetractCluster{v}
			iNdEx = postIndex
		case 1001:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HostName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HostName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 1002:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DnsInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DnsInfo = append(m.DnsInfo, &ves_io_schema_virtual_host_dns_info.DnsInfo{})
			if err := m.DnsInfo[len(m.DnsInfo)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTypes(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthTypes
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipTypes(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthTypes = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTypes   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("ves.io/schema/views/tcp_loadbalancer/types.proto", fileDescriptorTypes)
}
func init() {
	golang_proto.RegisterFile("ves.io/schema/views/tcp_loadbalancer/types.proto", fileDescriptorTypes)
}

var fileDescriptorTypes = []byte{
	// 1315 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x59, 0xcd, 0x6f, 0x13, 0x47,
	0x1b, 0xf7, 0x24, 0x4e, 0xe2, 0x8c, 0x13, 0xc7, 0x8c, 0xa3, 0xbc, 0x4b, 0x40, 0x8b, 0xdf, 0x88,
	0xf7, 0x25, 0x54, 0x1b, 0x7f, 0x24, 0x7c, 0x14, 0x54, 0xb5, 0x62, 0x43, 0xcb, 0x47, 0x29, 0xa4,
	0x1b, 0x0a, 0x52, 0x8a, 0xb4, 0x1a, 0xef, 0x8e, 0xed, 0x29, 0xeb, 0x9d, 0xd5, 0xee, 0xd8, 0x34,
	0x07, 0xa4, 0x8a, 0x53, 0x8f, 0x88, 0x1b, 0x7f, 0x41, 0x2b, 0xfe, 0x84, 0x6e, 0x0f, 0x69, 0x4f,
	0xa8, 0x27, 0x1f, 0x51, 0x4f, 0x60, 0x2e, 0xd0, 0x13, 0xc7, 0x0a, 0xa9, 0x52, 0xb5, 0xb3, 0x8e,
	0xf1, 0xc7, 0xc6, 0x42, 0x15, 0x54, 0x2d, 0xf2, 0x6d, 0x66, 0x9f, 0xe7, 0xf7, 0x7b, 0x9e, 0xd9,
	0x67, 0xe6, 0xf7, 0x78, 0x3d, 0xb0, 0xd0, 0x20, 0x5e, 0x8e, 0xb2, 0xbc, 0x67, 0x54, 0x49, 0x0d,
	0xe7, 0x1b, 0x94, 0xdc, 0xf2, 0xf2, 0xdc, 0x70, 0x74, 0x8b, 0x61, 0xb3, 0x84, 0x2d, 0x6c, 0x1b,
	0xc4, 0xcd, 0xf3, 0x6d, 0x87, 0x78, 0x39, 0xc7, 0x65, 0x9c, 0xa1, 0xc3, 0x21, 0x22, 0x17, 0x22,
	0x72, 0x02, 0x91, 0xeb, 0x47, 0x2c, 0xae, 0x54, 0x28, 0xaf, 0xd6, 0x4b, 0x39, 0x83, 0xd5, 0xf2,
	0x15, 0x56, 0x61, 0x79, 0x01, 0x2e, 0xd5, 0xcb, 0x62, 0x26, 0x26, 0x62, 0x14, 0x92, 0x2e, 0x1e,
	0xe8, 0x4d, 0x83, 0x39, 0x9c, 0x32, 0xbb, 0x1d, 0x71, 0x71, 0x7f, 0xaf, 0xb1, 0x2b, 0x99, 0xc5,
	0x83, 0x7d, 0xe9, 0x63, 0x8b, 0x9a, 0x98, 0x93, 0xb6, 0x35, 0x3b, 0xb8, 0x38, 0xbd, 0x97, 0xfa,
	0x50, 0xe4, 0xf2, 0xbb, 0x02, 0x0c, 0xbc, 0x1f, 0x97, 0xd7, 0xb1, 0xa5, 0x57, 0x99, 0xc7, 0x75,
	0xd3, 0xf6, 0x74, 0x6a, 0x97, 0x59, 0x9e, 0x95, 0xbe, 0x22, 0x06, 0x0f, 0x11, 0x4b, 0xf7, 0x53,
	0x30, 0x75, 0xce, 0x62, 0x25, 0x6c, 0x6d, 0x3a, 0xc4, 0xb8, 0xba, 0xed, 0x10, 0xf4, 0x01, 0x9c,
	0x32, 0x59, 0x0d, 0x53, 0xdb, 0x93, 0x40, 0x76, 0x7c, 0x79, 0x5a, 0x5d, 0xfa, 0xe1, 0xf9, 0xce,
	0xf8, 0xf4, 0x3d, 0x30, 0xb9, 0x14, 0x77, 0xc7, 0xaa, 0x20, 0x98, 0x4d, 0xdc, 0x03, 0x63, 0xe9,
	0xec, 0xee, 0x48, 0x02, 0xda, 0x2e, 0x04, 0x1d, 0x82, 0x49, 0x8b, 0x7a, 0x9c, 0xd8, 0xba, 0xc3,
	0x5c, 0x2e, 0x8d, 0x65, 0xc1, 0xf2, 0xac, 0x06, 0xc3, 0x47, 0x1b, 0xcc, 0xe5, 0x68, 0x3f, 0x4c,
	0xdc, 0xa2, 0xbc, 0xaa, 0x7b, 0x36, 0x95, 0xc6, 0xb3, 0x60, 0x39, 0xa1, 0x4d, 0x05, 0xf3, 0x4d,
	0x9b, 0x22, 0x07, 0xce, 0x30, 0x97, 0x56, 0x68, 0x80, 0x65, 0x96, 0x27, 0xc5, 0xb3, 0xe3, 0xcb,
	0xc9, 0xd5, 0xa5, 0x5c, 0x54, 0x0d, 0xaf, 0x88, 0x55, 0x68, 0xa4, 0x1c, 0xe4, 0xac, 0x1e, 0x7d,
	0x70, 0x3b, 0xd9, 0x05, 0x7d, 0x74, 0x1b, 0x3c, 0xf3, 0xc1, 0xab, 0x4c, 0xd3, 0x5d, 0x99, 0xb6,
	0xfd, 0x36, 0x82, 0x08, 0xe8, 0x06, 0xcc, 0x60, 0xb3, 0x41, 0x5c, 0x4e, 0x3d, 0xa2, 0x33, 0x5b,
	0x77, 0xea, 0x25, 0x8b, 0x1a, 0xd2, 0x44, 0x16, 0x2c, 0x27, 0x57, 0x0f, 0x47, 0x06, 0x3e, 0xb3,
	0xeb, 0xbf, 0x21, 0x7c, 0xd5, 0xf8, 0x8e, 0x0f, 0xc0, 0xf9, 0x98, 0xb6, 0xaf, 0x43, 0x74, 0xc5,
	0x0e, 0x4d, 0xe8, 0x3a, 0x4c, 0xbf, 0x62, 0x37, 0xea, 0x1e, 0x67, 0x35, 0x69, 0xf2, 0x75, 0xa8,
	0xd7, 0x85, 0xaf, 0x1a, 0x6f, 0x86, 0xd4, 0x73, 0xb8, 0xd7, 0x80, 0x3e, 0x81, 0x69, 0x93, 0xe9,
	0x36, 0xe3, 0x7a, 0xc7, 0x22, 0x4d, 0x09, 0xe2, 0xf9, 0x3e, 0xe2, 0x8f, 0x6b, 0x0e, 0xdf, 0xee,
	0xe4, 0x98, 0x32, 0xd9, 0x65, 0xc6, 0x3b, 0x61, 0xd0, 0x0d, 0x78, 0x28, 0x62, 0xf9, 0xba, 0x49,
	0xca, 0xb8, 0x6e, 0x71, 0xbd, 0x41, 0x1d, 0x29, 0xb1, 0x37, 0xed, 0xf9, 0x98, 0x76, 0x60, 0x60,
	0xd1, 0x67, 0x43, 0xec, 0x35, 0xea, 0xa0, 0x3a, 0x9c, 0xef, 0x2e, 0xa7, 0x7e, 0x8b, 0xd0, 0x4a,
	0x95, 0x7b, 0x12, 0x14, 0x65, 0x3d, 0x1a, 0x5d, 0xd6, 0x4e, 0x71, 0xae, 0x53, 0x5e, 0xbd, 0x2e,
	0x10, 0xaa, 0xd4, 0xdc, 0xab, 0x98, 0xa8, 0xab, 0x98, 0xa1, 0xb3, 0x87, 0x0a, 0x70, 0x3e, 0xd8,
	0xeb, 0x0d, 0x66, 0x71, 0xe2, 0xba, 0x58, 0xaf, 0x61, 0x1b, 0x57, 0x88, 0x29, 0x25, 0xc5, 0x66,
	0x43, 0xa6, 0xed, 0x5d, 0x6b, 0x9b, 0x3e, 0x0b, 0x2d, 0x68, 0x0b, 0xca, 0x55, 0xec, 0x55, 0x75,
	0x87, 0x59, 0xd4, 0xd8, 0xd6, 0x8d, 0x2a, 0xa3, 0x06, 0xd1, 0x5d, 0x56, 0xb7, 0x4d, 0xdd, 0x65,
	0x25, 0x6a, 0x4b, 0xb3, 0x43, 0xde, 0x02, 0xd0, 0x16, 0x03, 0xf4, 0x86, 0x00, 0xaf, 0x0b, 0xac,
	0x16, 0x40, 0xb5, 0x00, 0x19, 0xbc, 0xe2, 0x08, 0x6e, 0x8b, 0x60, 0x8f, 0xeb, 0xd8, 0xe0, 0xb4,
	0x41, 0xa4, 0xd4, 0x50, 0xf2, 0x03, 0xfd, 0xe4, 0x97, 0x02, 0xec, 0x19, 0x01, 0x45, 0x9f, 0xc3,
	0xfd, 0x51, 0x99, 0x63, 0xdb, 0x64, 0x35, 0x69, 0x6e, 0x28, 0xef, 0xc2, 0x40, 0xd2, 0x02, 0x85,
	0x6e, 0xc2, 0x23, 0x11, 0x94, 0x1e, 0xab, 0xbb, 0x06, 0xd1, 0xa9, 0xa3, 0x7b, 0x9c, 0x1a, 0x37,
	0xa9, 0x4d, 0x3c, 0x4f, 0x4a, 0x0f, 0x0d, 0xb0, 0xd4, 0x1f, 0x60, 0x53, 0x70, 0x5c, 0x70, 0x36,
	0x3b, 0x0c, 0x68, 0x1d, 0xce, 0x50, 0xd3, 0x22, 0x3a, 0xa7, 0x35, 0xc2, 0xea, 0x5c, 0xda, 0x17,
	0xc8, 0x85, 0x9a, 0x0d, 0xb6, 0xeb, 0xaf, 0x3e, 0x98, 0x58, 0x2b, 0x14, 0x0a, 0x85, 0xdf, 0x7d,
	0x10, 0xfb, 0xf6, 0x47, 0x10, 0x0b, 0xca, 0x3e, 0xf9, 0x5e, 0x5c, 0x7a, 0xfc, 0x1d, 0xd2, 0x92,
	0x01, 0xea, 0x6a, 0x08, 0x42, 0x1f, 0xc1, 0x39, 0x97, 0x70, 0x17, 0x1b, 0x5c, 0x37, 0xac, 0xba,
	0xc7, 0x89, 0x2b, 0x65, 0x86, 0x64, 0x36, 0xa6, 0xa5, 0xda, 0xee, 0xeb, 0xa1, 0x37, 0xfa, 0x14,
	0x2e, 0xb4, 0x8f, 0x53, 0x3f, 0xcf, 0xfc, 0x50, 0x9e, 0x8c, 0x38, 0x4e, 0x5a, 0x2f, 0xd9, 0x16,
	0x9c, 0x15, 0xd2, 0x4d, 0x6d, 0x4e, 0x5c, 0x1b, 0x5b, 0xd2, 0xb3, 0xf0, 0x64, 0xbe, 0x8e, 0x8c,
	0xa5, 0x1f, 0xdc, 0xee, 0x05, 0x6b, 0x33, 0xc1, 0xf4, 0x42, 0x7b, 0x86, 0x0e, 0xc2, 0x69, 0xa1,
	0xe5, 0x36, 0xae, 0x11, 0xe9, 0x79, 0xc0, 0x3b, 0xad, 0x25, 0x82, 0x27, 0x97, 0x71, 0x8d, 0xa0,
	0xf3, 0x30, 0xb1, 0x2b, 0xf2, 0xd2, 0x6f, 0x53, 0xe2, 0x90, 0x29, 0x03, 0x41, 0x23, 0x3a, 0x42,
	0xee, 0xac, 0xed, 0x5d, 0xb0, 0xcb, 0x4c, 0x9b, 0x32, 0xc3, 0xc1, 0xe9, 0xea, 0xcf, 0x3e, 0x30,
	0xe1, 0xff, 0x61, 0x46, 0xc5, 0x1e, 0x35, 0xb2, 0xeb, 0xcc, 0x2e, 0xd3, 0x4a, 0xdd, 0xc5, 0x41,
	0x33, 0x42, 0x73, 0x45, 0x65, 0x55, 0x59, 0x53, 0x8a, 0x45, 0xa5, 0x58, 0x50, 0x4e, 0x29, 0xc7,
	0xe0, 0x41, 0xb8, 0x70, 0x89, 0x61, 0x33, 0xab, 0x8a, 0x76, 0x4a, 0xed, 0x4a, 0x00, 0xe0, 0x2e,
	0xb3, 0xd0, 0x58, 0x71, 0x35, 0xb0, 0x9e, 0x31, 0x1b, 0x41, 0x9f, 0x35, 0xfb, 0x88, 0xc6, 0x8a,
	0x27, 0xd5, 0x23, 0x3d, 0x12, 0x29, 0xb6, 0x09, 0xca, 0xec, 0xf8, 0x20, 0xd1, 0xf4, 0xc1, 0x74,
	0xcb, 0x07, 0x53, 0xef, 0x2b, 0xc7, 0x95, 0x93, 0xca, 0x09, 0x75, 0x05, 0xa2, 0xc1, 0x6d, 0x89,
	0xfe, 0xb3, 0xe3, 0x83, 0xd9, 0xa6, 0x0f, 0x66, 0x5a, 0x3e, 0x48, 0x16, 0xd7, 0x94, 0xe2, 0x31,
	0xa5, 0x78, 0x5c, 0x29, 0x9e, 0x50, 0x0b, 0x70, 0xa1, 0x5d, 0xc3, 0x57, 0x35, 0x0d, 0x21, 0x0b,
	0x3b, 0x3e, 0xc8, 0x3c, 0xf4, 0x01, 0x68, 0xfa, 0x00, 0xb5, 0x7c, 0x30, 0x59, 0x3c, 0xa5, 0x64,
	0x57, 0x0b, 0x17, 0xe3, 0x89, 0xe9, 0x34, 0xbc, 0x18, 0x4f, 0xcc, 0xa4, 0x67, 0x2f, 0xc6, 0x13,
	0x28, 0x9d, 0x59, 0xfa, 0x09, 0xc2, 0xd4, 0xba, 0x4b, 0x30, 0x27, 0x9d, 0xde, 0x28, 0xf5, 0xf5,
	0xc6, 0x37, 0xd3, 0xf7, 0x46, 0x5d, 0xe8, 0x2d, 0x76, 0xa1, 0x2f, 0xdf, 0x50, 0x17, 0x1a, 0xf5,
	0x9a, 0x7f, 0x79, 0xaf, 0xf9, 0x6f, 0x54, 0xaf, 0xf9, 0x07, 0x77, 0x92, 0xd3, 0xfb, 0x7e, 0xf9,
	0xb0, 0xef, 0xb7, 0xb9, 0x7a, 0x2a, 0x42, 0x2e, 0xff, 0xd7, 0x25, 0x97, 0x13, 0x42, 0x2c, 0xef,
	0xbc, 0x04, 0x03, 0x6e, 0xaa, 0x12, 0x29, 0xa0, 0x0b, 0x77, 0x5e, 0x82, 0x88, 0xe7, 0xea, 0xb1,
	0x3d, 0xf5, 0x73, 0xf1, 0xce, 0x4b, 0xb0, 0x87, 0x2d, 0x42, 0x43, 0xef, 0x27, 0xe1, 0x9c, 0x46,
	0x1c, 0x0b, 0x1b, 0x6f, 0x5b, 0x44, 0xbf, 0xf8, 0xcb, 0x1f, 0x0f, 0xa9, 0xde, 0x8f, 0x87, 0xd1,
	0x17, 0xc2, 0x48, 0x9b, 0x47, 0xda, 0x3c, 0xd2, 0xe6, 0x77, 0x5e, 0x9b, 0xff, 0x48, 0xc2, 0xe4,
	0x39, 0xc2, 0x47, 0xba, 0x3c, 0xd2, 0xe5, 0x91, 0x2e, 0x8f, 0x74, 0xf9, 0x5d, 0xd0, 0xe5, 0xbf,
	0xed, 0x1f, 0x92, 0x77, 0x40, 0xff, 0xd5, 0xbb, 0xa0, 0xf9, 0x44, 0x8e, 0x3d, 0x7a, 0x22, 0xc7,
	0x5e, 0x3c, 0x91, 0xc1, 0x37, 0x2d, 0x19, 0x7c, 0xdf, 0x92, 0xc1, 0xc3, 0x96, 0x0c, 0x9a, 0x2d,
	0x19, 0x3c, 0x6a, 0xc9, 0xe0, 0x71, 0x4b, 0x06, 0xcf, 0x5a, 0x72, 0xec, 0x45, 0x4b, 0x06, 0x77,
	0x9f, 0xca, 0xb1, 0x9d, 0xa7, 0x32, 0xd8, 0xda, 0xaa, 0x30, 0xe7, 0x66, 0x25, 0xb7, 0x7b, 0x7e,
	0x73, 0x75, 0x2f, 0x2f, 0x06, 0x65, 0xe6, 0xd6, 0x56, 0x1c, 0x97, 0x35, 0xa8, 0x49, 0xdc, 0x95,
	0x5d, 0x73, 0xde, 0x29, 0x55, 0x58, 0x9e, 0x7c, 0xcd, 0xdb, 0x77, 0x12, 0x43, 0xaf, 0x6e, 0x4a,
	0x93, 0xe2, 0x56, 0x62, 0xed, 0xcf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x32, 0xe7, 0x4e, 0xcc, 0xe9,
	0x19, 0x00, 0x00,
}
