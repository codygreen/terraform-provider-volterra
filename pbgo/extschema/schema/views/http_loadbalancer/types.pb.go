// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ves.io/schema/views/http_loadbalancer/types.proto

package http_loadbalancer

import (
	proto "github.com/gogo/protobuf/proto"
	golang_proto "github.com/golang/protobuf/proto"

	fmt "fmt"

	math "math"

	_ "github.com/gogo/protobuf/gogoproto"

	_ "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"

	ves_io_schema_policy "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/policy"

	ves_io_schema_rate_limiter "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/rate_limiter"

	ves_io_schema_route "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/route"

	ves_io_schema4 "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"

	_ "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"

	_ "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"

	ves_io_schema_views "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/views"

	ves_io_schema_virtual_host "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/virtual_host"

	ves_io_schema_virtual_host_dns_info "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/virtual_host_dns_info"

	strings "strings"

	reflect "reflect"

	sortkeys "github.com/gogo/protobuf/sortkeys"

	io "io"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// DownstreamTlsValidationContext
//
// x-displayName: "Clients TLS validation context"
// Validation context for downstream client TLS connections
type DownstreamTlsValidationContext struct {
	// trusted_ca_url
	//
	// x-displayName: "Trusted CA"
	// x-required
	// The URL for a trust store
	TrustedCaUrl string `protobuf:"bytes,2,opt,name=trusted_ca_url,json=trustedCaUrl,proto3" json:"trusted_ca_url,omitempty"`
}

func (m *DownstreamTlsValidationContext) Reset()      { *m = DownstreamTlsValidationContext{} }
func (*DownstreamTlsValidationContext) ProtoMessage() {}
func (*DownstreamTlsValidationContext) Descriptor() ([]byte, []int) {
	return fileDescriptorTypes, []int{0}
}

func (m *DownstreamTlsValidationContext) GetTrustedCaUrl() string {
	if m != nil {
		return m.TrustedCaUrl
	}
	return ""
}

// DownstreamTlsParamsType
//
// x-displayName: "HTTP Loadbalancer TLS Parameters"
// TLS parameters for HTTP loadbalancer.
type DownstreamTlsParamsType struct {
	// TLS Config
	//
	// x-displayName: "TLS Config"
	// Configuration for TLS parameters such as min/max TLS version and ciphers
	TlsConfig *ves_io_schema_views.TlsConfig `protobuf:"bytes,1,opt,name=tls_config,json=tlsConfig" json:"tls_config,omitempty"`
	// tls_certificates
	//
	// x-displayName: "TLS Certificates"
	// x-required
	// Set of TLS certificates
	TlsCertificates []*ves_io_schema4.TlsCertificateType `protobuf:"bytes,2,rep,name=tls_certificates,json=tlsCertificates" json:"tls_certificates,omitempty"`
	// MTLS choice
	//
	// x-displayName: "Enable MTLS with Clients"
	// x-required
	// Enable MTLS between clients amd HTTP loadbalancer
	//
	// Types that are valid to be assigned to MtlsChoice:
	//	*DownstreamTlsParamsType_NoMtls
	//	*DownstreamTlsParamsType_UseMtls
	MtlsChoice isDownstreamTlsParamsType_MtlsChoice `protobuf_oneof:"mtls_choice"`
}

func (m *DownstreamTlsParamsType) Reset()                    { *m = DownstreamTlsParamsType{} }
func (*DownstreamTlsParamsType) ProtoMessage()               {}
func (*DownstreamTlsParamsType) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{1} }

type isDownstreamTlsParamsType_MtlsChoice interface {
	isDownstreamTlsParamsType_MtlsChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type DownstreamTlsParamsType_NoMtls struct {
	NoMtls *ves_io_schema4.Empty `protobuf:"bytes,3,opt,name=no_mtls,json=noMtls,oneof"`
}
type DownstreamTlsParamsType_UseMtls struct {
	UseMtls *DownstreamTlsValidationContext `protobuf:"bytes,4,opt,name=use_mtls,json=useMtls,oneof"`
}

func (*DownstreamTlsParamsType_NoMtls) isDownstreamTlsParamsType_MtlsChoice()  {}
func (*DownstreamTlsParamsType_UseMtls) isDownstreamTlsParamsType_MtlsChoice() {}

func (m *DownstreamTlsParamsType) GetMtlsChoice() isDownstreamTlsParamsType_MtlsChoice {
	if m != nil {
		return m.MtlsChoice
	}
	return nil
}

func (m *DownstreamTlsParamsType) GetTlsConfig() *ves_io_schema_views.TlsConfig {
	if m != nil {
		return m.TlsConfig
	}
	return nil
}

func (m *DownstreamTlsParamsType) GetTlsCertificates() []*ves_io_schema4.TlsCertificateType {
	if m != nil {
		return m.TlsCertificates
	}
	return nil
}

func (m *DownstreamTlsParamsType) GetNoMtls() *ves_io_schema4.Empty {
	if x, ok := m.GetMtlsChoice().(*DownstreamTlsParamsType_NoMtls); ok {
		return x.NoMtls
	}
	return nil
}

func (m *DownstreamTlsParamsType) GetUseMtls() *DownstreamTlsValidationContext {
	if x, ok := m.GetMtlsChoice().(*DownstreamTlsParamsType_UseMtls); ok {
		return x.UseMtls
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*DownstreamTlsParamsType) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _DownstreamTlsParamsType_OneofMarshaler, _DownstreamTlsParamsType_OneofUnmarshaler, _DownstreamTlsParamsType_OneofSizer, []interface{}{
		(*DownstreamTlsParamsType_NoMtls)(nil),
		(*DownstreamTlsParamsType_UseMtls)(nil),
	}
}

func _DownstreamTlsParamsType_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*DownstreamTlsParamsType)
	// mtls_choice
	switch x := m.MtlsChoice.(type) {
	case *DownstreamTlsParamsType_NoMtls:
		_ = b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.NoMtls); err != nil {
			return err
		}
	case *DownstreamTlsParamsType_UseMtls:
		_ = b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.UseMtls); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("DownstreamTlsParamsType.MtlsChoice has unexpected type %T", x)
	}
	return nil
}

func _DownstreamTlsParamsType_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*DownstreamTlsParamsType)
	switch tag {
	case 3: // mtls_choice.no_mtls
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.MtlsChoice = &DownstreamTlsParamsType_NoMtls{msg}
		return true, err
	case 4: // mtls_choice.use_mtls
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(DownstreamTlsValidationContext)
		err := b.DecodeMessage(msg)
		m.MtlsChoice = &DownstreamTlsParamsType_UseMtls{msg}
		return true, err
	default:
		return false, nil
	}
}

func _DownstreamTlsParamsType_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*DownstreamTlsParamsType)
	// mtls_choice
	switch x := m.MtlsChoice.(type) {
	case *DownstreamTlsParamsType_NoMtls:
		s := proto.Size(x.NoMtls)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *DownstreamTlsParamsType_UseMtls:
		s := proto.Size(x.UseMtls)
		n += proto.SizeVarint(4<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// BYOC HTTPS Choice
//
// x-displayName: "BYOC HTTPS Choice"
// Choice for selecting HTTP proxy with bring your own certificates
type ProxyTypeHttps struct {
	// HTTP Redirect
	//
	// x-displayName: "HTTP Redirect to HTTPS"
	// Redirect HTTP traffic to corresponding HTTPS
	HttpRedirect bool `protobuf:"varint,1,opt,name=http_redirect,json=httpRedirect,proto3" json:"http_redirect,omitempty"`
	// Add HSTS
	//
	// x-displayName: "Add HSTS Header"
	// Add HTTP Strict-Transport-Security response header
	AddHsts bool `protobuf:"varint,2,opt,name=add_hsts,json=addHsts,proto3" json:"add_hsts,omitempty"`
	// TLS parameters.
	//
	// x-displayName: "HTTP Loadbalancer TLS Parameters"
	// TLS parameters for downstream connections.
	TlsParameters *DownstreamTlsParamsType `protobuf:"bytes,3,opt,name=tls_parameters,json=tlsParameters" json:"tls_parameters,omitempty"`
}

func (m *ProxyTypeHttps) Reset()                    { *m = ProxyTypeHttps{} }
func (*ProxyTypeHttps) ProtoMessage()               {}
func (*ProxyTypeHttps) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{2} }

func (m *ProxyTypeHttps) GetHttpRedirect() bool {
	if m != nil {
		return m.HttpRedirect
	}
	return false
}

func (m *ProxyTypeHttps) GetAddHsts() bool {
	if m != nil {
		return m.AddHsts
	}
	return false
}

func (m *ProxyTypeHttps) GetTlsParameters() *DownstreamTlsParamsType {
	if m != nil {
		return m.TlsParameters
	}
	return nil
}

// HTTPS with Auto Certs Choice
//
// x-displayName: "HTTPS with Auto Certs Choice"
// Choice for selecting HTTP proxy with bring your own certificates
type ProxyTypeHttpsAutoCerts struct {
	// HTTP Redirect
	//
	// x-displayName: "HTTP Redirect to HTTPS"
	// Redirect HTTP traffic to corresponding HTTPS
	HttpRedirect bool `protobuf:"varint,1,opt,name=http_redirect,json=httpRedirect,proto3" json:"http_redirect,omitempty"`
	// Add HSTS
	//
	// x-displayName: "Add HSTS Header"
	// Add HTTP Strict-Transport-Security response header
	AddHsts bool `protobuf:"varint,2,opt,name=add_hsts,json=addHsts,proto3" json:"add_hsts,omitempty"`
}

func (m *ProxyTypeHttpsAutoCerts) Reset()                    { *m = ProxyTypeHttpsAutoCerts{} }
func (*ProxyTypeHttpsAutoCerts) ProtoMessage()               {}
func (*ProxyTypeHttpsAutoCerts) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{3} }

func (m *ProxyTypeHttpsAutoCerts) GetHttpRedirect() bool {
	if m != nil {
		return m.HttpRedirect
	}
	return false
}

func (m *ProxyTypeHttpsAutoCerts) GetAddHsts() bool {
	if m != nil {
		return m.AddHsts
	}
	return false
}

// RouteTypeSimpleWithDefaultOriginPool
//
// x-displayName: "Simple Route"
// A simple route matches on path and/or HTTP method and forwards the matching traffic to the default origin pool specified outside
type RouteTypeSimpleWithDefaultOriginPool struct {
	// http_method
	//
	// x-displayName: "HTTP Method"
	// The name of the HTTP Method (GET, PUT, POST, etc)
	HttpMethod ves_io_schema4.HttpMethod `protobuf:"varint,1,opt,name=http_method,json=httpMethod,proto3,enum=ves.io.schema.HttpMethod" json:"http_method,omitempty"`
	// path
	//
	// x-displayName: "Path"
	// URI path of route
	Path *ves_io_schema4.PathMatcherType `protobuf:"bytes,2,opt,name=path" json:"path,omitempty"`
	// HostRewriteParams
	//
	// x-displayName: "Select Host Rewrite Method"
	// x-required
	// Specifies how the host header can be modified during forwarding
	//
	// Types that are valid to be assigned to HostRewriteParams:
	//	*RouteTypeSimpleWithDefaultOriginPool_AutoHostRewrite
	//	*RouteTypeSimpleWithDefaultOriginPool_HostRewrite
	//	*RouteTypeSimpleWithDefaultOriginPool_DisableHostRewrite
	HostRewriteParams isRouteTypeSimpleWithDefaultOriginPool_HostRewriteParams `protobuf_oneof:"HostRewriteParams"`
}

func (m *RouteTypeSimpleWithDefaultOriginPool) Reset()      { *m = RouteTypeSimpleWithDefaultOriginPool{} }
func (*RouteTypeSimpleWithDefaultOriginPool) ProtoMessage() {}
func (*RouteTypeSimpleWithDefaultOriginPool) Descriptor() ([]byte, []int) {
	return fileDescriptorTypes, []int{4}
}

type isRouteTypeSimpleWithDefaultOriginPool_HostRewriteParams interface {
	isRouteTypeSimpleWithDefaultOriginPool_HostRewriteParams()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type RouteTypeSimpleWithDefaultOriginPool_AutoHostRewrite struct {
	AutoHostRewrite *ves_io_schema4.Empty `protobuf:"bytes,4,opt,name=auto_host_rewrite,json=autoHostRewrite,oneof"`
}
type RouteTypeSimpleWithDefaultOriginPool_HostRewrite struct {
	HostRewrite string `protobuf:"bytes,5,opt,name=host_rewrite,json=hostRewrite,proto3,oneof"`
}
type RouteTypeSimpleWithDefaultOriginPool_DisableHostRewrite struct {
	DisableHostRewrite *ves_io_schema4.Empty `protobuf:"bytes,6,opt,name=disable_host_rewrite,json=disableHostRewrite,oneof"`
}

func (*RouteTypeSimpleWithDefaultOriginPool_AutoHostRewrite) isRouteTypeSimpleWithDefaultOriginPool_HostRewriteParams() {
}
func (*RouteTypeSimpleWithDefaultOriginPool_HostRewrite) isRouteTypeSimpleWithDefaultOriginPool_HostRewriteParams() {
}
func (*RouteTypeSimpleWithDefaultOriginPool_DisableHostRewrite) isRouteTypeSimpleWithDefaultOriginPool_HostRewriteParams() {
}

func (m *RouteTypeSimpleWithDefaultOriginPool) GetHostRewriteParams() isRouteTypeSimpleWithDefaultOriginPool_HostRewriteParams {
	if m != nil {
		return m.HostRewriteParams
	}
	return nil
}

func (m *RouteTypeSimpleWithDefaultOriginPool) GetHttpMethod() ves_io_schema4.HttpMethod {
	if m != nil {
		return m.HttpMethod
	}
	return ves_io_schema4.ANY
}

func (m *RouteTypeSimpleWithDefaultOriginPool) GetPath() *ves_io_schema4.PathMatcherType {
	if m != nil {
		return m.Path
	}
	return nil
}

func (m *RouteTypeSimpleWithDefaultOriginPool) GetAutoHostRewrite() *ves_io_schema4.Empty {
	if x, ok := m.GetHostRewriteParams().(*RouteTypeSimpleWithDefaultOriginPool_AutoHostRewrite); ok {
		return x.AutoHostRewrite
	}
	return nil
}

func (m *RouteTypeSimpleWithDefaultOriginPool) GetHostRewrite() string {
	if x, ok := m.GetHostRewriteParams().(*RouteTypeSimpleWithDefaultOriginPool_HostRewrite); ok {
		return x.HostRewrite
	}
	return ""
}

func (m *RouteTypeSimpleWithDefaultOriginPool) GetDisableHostRewrite() *ves_io_schema4.Empty {
	if x, ok := m.GetHostRewriteParams().(*RouteTypeSimpleWithDefaultOriginPool_DisableHostRewrite); ok {
		return x.DisableHostRewrite
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*RouteTypeSimpleWithDefaultOriginPool) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _RouteTypeSimpleWithDefaultOriginPool_OneofMarshaler, _RouteTypeSimpleWithDefaultOriginPool_OneofUnmarshaler, _RouteTypeSimpleWithDefaultOriginPool_OneofSizer, []interface{}{
		(*RouteTypeSimpleWithDefaultOriginPool_AutoHostRewrite)(nil),
		(*RouteTypeSimpleWithDefaultOriginPool_HostRewrite)(nil),
		(*RouteTypeSimpleWithDefaultOriginPool_DisableHostRewrite)(nil),
	}
}

func _RouteTypeSimpleWithDefaultOriginPool_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*RouteTypeSimpleWithDefaultOriginPool)
	// HostRewriteParams
	switch x := m.HostRewriteParams.(type) {
	case *RouteTypeSimpleWithDefaultOriginPool_AutoHostRewrite:
		_ = b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.AutoHostRewrite); err != nil {
			return err
		}
	case *RouteTypeSimpleWithDefaultOriginPool_HostRewrite:
		_ = b.EncodeVarint(5<<3 | proto.WireBytes)
		_ = b.EncodeStringBytes(x.HostRewrite)
	case *RouteTypeSimpleWithDefaultOriginPool_DisableHostRewrite:
		_ = b.EncodeVarint(6<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.DisableHostRewrite); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("RouteTypeSimpleWithDefaultOriginPool.HostRewriteParams has unexpected type %T", x)
	}
	return nil
}

func _RouteTypeSimpleWithDefaultOriginPool_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*RouteTypeSimpleWithDefaultOriginPool)
	switch tag {
	case 4: // HostRewriteParams.auto_host_rewrite
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.HostRewriteParams = &RouteTypeSimpleWithDefaultOriginPool_AutoHostRewrite{msg}
		return true, err
	case 5: // HostRewriteParams.host_rewrite
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.HostRewriteParams = &RouteTypeSimpleWithDefaultOriginPool_HostRewrite{x}
		return true, err
	case 6: // HostRewriteParams.disable_host_rewrite
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.HostRewriteParams = &RouteTypeSimpleWithDefaultOriginPool_DisableHostRewrite{msg}
		return true, err
	default:
		return false, nil
	}
}

func _RouteTypeSimpleWithDefaultOriginPool_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*RouteTypeSimpleWithDefaultOriginPool)
	// HostRewriteParams
	switch x := m.HostRewriteParams.(type) {
	case *RouteTypeSimpleWithDefaultOriginPool_AutoHostRewrite:
		s := proto.Size(x.AutoHostRewrite)
		n += proto.SizeVarint(4<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *RouteTypeSimpleWithDefaultOriginPool_HostRewrite:
		n += proto.SizeVarint(5<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.HostRewrite)))
		n += len(x.HostRewrite)
	case *RouteTypeSimpleWithDefaultOriginPool_DisableHostRewrite:
		s := proto.Size(x.DisableHostRewrite)
		n += proto.SizeVarint(6<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// RouteTypeSimple
//
// x-displayName: "Simple Route"
// A simple route matches on path and/or HTTP method and forwards the matching traffic to the associated pools
type RouteTypeSimple struct {
	// path
	//
	// x-displayName: "Path"
	// URI path of route
	Path *ves_io_schema4.PathMatcherType `protobuf:"bytes,1,opt,name=path" json:"path,omitempty"`
	// http_method
	//
	// x-displayName: "HTTP Method"
	// The name of the HTTP Method (GET, PUT, POST, etc)
	HttpMethod ves_io_schema4.HttpMethod `protobuf:"varint,2,opt,name=http_method,json=httpMethod,proto3,enum=ves.io.schema.HttpMethod" json:"http_method,omitempty"`
	// Origin Pools
	//
	// x-displayName: "Origin Pools"
	// Origin Pools for this route
	OriginPools []*ves_io_schema_views.OriginPoolWithWeight `protobuf:"bytes,3,rep,name=origin_pools,json=originPools" json:"origin_pools,omitempty"`
	// HostRewriteParams
	//
	// x-displayName: "Select Host Rewrite Method"
	// x-required
	// Specifies how the host header can be modified during forwarding
	//
	// Types that are valid to be assigned to HostRewriteParams:
	//	*RouteTypeSimple_AutoHostRewrite
	//	*RouteTypeSimple_HostRewrite
	//	*RouteTypeSimple_DisableHostRewrite
	HostRewriteParams isRouteTypeSimple_HostRewriteParams `protobuf_oneof:"HostRewriteParams"`
}

func (m *RouteTypeSimple) Reset()                    { *m = RouteTypeSimple{} }
func (*RouteTypeSimple) ProtoMessage()               {}
func (*RouteTypeSimple) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{5} }

type isRouteTypeSimple_HostRewriteParams interface {
	isRouteTypeSimple_HostRewriteParams()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type RouteTypeSimple_AutoHostRewrite struct {
	AutoHostRewrite *ves_io_schema4.Empty `protobuf:"bytes,5,opt,name=auto_host_rewrite,json=autoHostRewrite,oneof"`
}
type RouteTypeSimple_HostRewrite struct {
	HostRewrite string `protobuf:"bytes,6,opt,name=host_rewrite,json=hostRewrite,proto3,oneof"`
}
type RouteTypeSimple_DisableHostRewrite struct {
	DisableHostRewrite *ves_io_schema4.Empty `protobuf:"bytes,7,opt,name=disable_host_rewrite,json=disableHostRewrite,oneof"`
}

func (*RouteTypeSimple_AutoHostRewrite) isRouteTypeSimple_HostRewriteParams()    {}
func (*RouteTypeSimple_HostRewrite) isRouteTypeSimple_HostRewriteParams()        {}
func (*RouteTypeSimple_DisableHostRewrite) isRouteTypeSimple_HostRewriteParams() {}

func (m *RouteTypeSimple) GetHostRewriteParams() isRouteTypeSimple_HostRewriteParams {
	if m != nil {
		return m.HostRewriteParams
	}
	return nil
}

func (m *RouteTypeSimple) GetPath() *ves_io_schema4.PathMatcherType {
	if m != nil {
		return m.Path
	}
	return nil
}

func (m *RouteTypeSimple) GetHttpMethod() ves_io_schema4.HttpMethod {
	if m != nil {
		return m.HttpMethod
	}
	return ves_io_schema4.ANY
}

func (m *RouteTypeSimple) GetOriginPools() []*ves_io_schema_views.OriginPoolWithWeight {
	if m != nil {
		return m.OriginPools
	}
	return nil
}

func (m *RouteTypeSimple) GetAutoHostRewrite() *ves_io_schema4.Empty {
	if x, ok := m.GetHostRewriteParams().(*RouteTypeSimple_AutoHostRewrite); ok {
		return x.AutoHostRewrite
	}
	return nil
}

func (m *RouteTypeSimple) GetHostRewrite() string {
	if x, ok := m.GetHostRewriteParams().(*RouteTypeSimple_HostRewrite); ok {
		return x.HostRewrite
	}
	return ""
}

func (m *RouteTypeSimple) GetDisableHostRewrite() *ves_io_schema4.Empty {
	if x, ok := m.GetHostRewriteParams().(*RouteTypeSimple_DisableHostRewrite); ok {
		return x.DisableHostRewrite
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*RouteTypeSimple) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _RouteTypeSimple_OneofMarshaler, _RouteTypeSimple_OneofUnmarshaler, _RouteTypeSimple_OneofSizer, []interface{}{
		(*RouteTypeSimple_AutoHostRewrite)(nil),
		(*RouteTypeSimple_HostRewrite)(nil),
		(*RouteTypeSimple_DisableHostRewrite)(nil),
	}
}

func _RouteTypeSimple_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*RouteTypeSimple)
	// HostRewriteParams
	switch x := m.HostRewriteParams.(type) {
	case *RouteTypeSimple_AutoHostRewrite:
		_ = b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.AutoHostRewrite); err != nil {
			return err
		}
	case *RouteTypeSimple_HostRewrite:
		_ = b.EncodeVarint(6<<3 | proto.WireBytes)
		_ = b.EncodeStringBytes(x.HostRewrite)
	case *RouteTypeSimple_DisableHostRewrite:
		_ = b.EncodeVarint(7<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.DisableHostRewrite); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("RouteTypeSimple.HostRewriteParams has unexpected type %T", x)
	}
	return nil
}

func _RouteTypeSimple_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*RouteTypeSimple)
	switch tag {
	case 5: // HostRewriteParams.auto_host_rewrite
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.HostRewriteParams = &RouteTypeSimple_AutoHostRewrite{msg}
		return true, err
	case 6: // HostRewriteParams.host_rewrite
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.HostRewriteParams = &RouteTypeSimple_HostRewrite{x}
		return true, err
	case 7: // HostRewriteParams.disable_host_rewrite
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.HostRewriteParams = &RouteTypeSimple_DisableHostRewrite{msg}
		return true, err
	default:
		return false, nil
	}
}

func _RouteTypeSimple_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*RouteTypeSimple)
	// HostRewriteParams
	switch x := m.HostRewriteParams.(type) {
	case *RouteTypeSimple_AutoHostRewrite:
		s := proto.Size(x.AutoHostRewrite)
		n += proto.SizeVarint(5<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *RouteTypeSimple_HostRewrite:
		n += proto.SizeVarint(6<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.HostRewrite)))
		n += len(x.HostRewrite)
	case *RouteTypeSimple_DisableHostRewrite:
		s := proto.Size(x.DisableHostRewrite)
		n += proto.SizeVarint(7<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// RouteTypeRedirect
//
//  x-displayName: "Redirect Route"
// A redirect route matches on patch and/or HTTP method and redirects the matching traffic to a different URL
type RouteTypeRedirect struct {
	// path
	//
	// x-displayName: "Path"
	// URI path of route
	Path *ves_io_schema4.PathMatcherType `protobuf:"bytes,1,opt,name=path" json:"path,omitempty"`
	// http_method
	//
	// x-displayName: "HTTP Method"
	// The name of the HTTP Method (GET, PUT, POST, etc)
	HttpMethod ves_io_schema4.HttpMethod `protobuf:"varint,2,opt,name=http_method,json=httpMethod,proto3,enum=ves.io.schema.HttpMethod" json:"http_method,omitempty"`
	// route_redirect
	//
	// x-displayName: "Redirect Parameters"
	// Send redirect response
	RouteRedirect *ves_io_schema_route.RouteRedirect `protobuf:"bytes,3,opt,name=route_redirect,json=routeRedirect" json:"route_redirect,omitempty"`
}

func (m *RouteTypeRedirect) Reset()                    { *m = RouteTypeRedirect{} }
func (*RouteTypeRedirect) ProtoMessage()               {}
func (*RouteTypeRedirect) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{6} }

func (m *RouteTypeRedirect) GetPath() *ves_io_schema4.PathMatcherType {
	if m != nil {
		return m.Path
	}
	return nil
}

func (m *RouteTypeRedirect) GetHttpMethod() ves_io_schema4.HttpMethod {
	if m != nil {
		return m.HttpMethod
	}
	return ves_io_schema4.ANY
}

func (m *RouteTypeRedirect) GetRouteRedirect() *ves_io_schema_route.RouteRedirect {
	if m != nil {
		return m.RouteRedirect
	}
	return nil
}

// RouteTypeDirectResponse
//
//  x-displayName: "Direct Response Route"
// A direct response route matches on patch and/or HTTP method and responds directly to the matching traffic
type RouteTypeDirectResponse struct {
	// path
	//
	// x-displayName: "Path"
	// URI path of route
	Path *ves_io_schema4.PathMatcherType `protobuf:"bytes,1,opt,name=path" json:"path,omitempty"`
	// http_method
	//
	// x-displayName: "HTTP Method"
	// The name of the HTTP Method (GET, PUT, POST, etc)
	HttpMethod ves_io_schema4.HttpMethod `protobuf:"varint,2,opt,name=http_method,json=httpMethod,proto3,enum=ves.io.schema.HttpMethod" json:"http_method,omitempty"`
	// route_direct_response
	//
	// x-displayName: "Direct Response"
	// Send direct response
	RouteDirectResponse *ves_io_schema_route.RouteDirectResponse `protobuf:"bytes,3,opt,name=route_direct_response,json=routeDirectResponse" json:"route_direct_response,omitempty"`
}

func (m *RouteTypeDirectResponse) Reset()                    { *m = RouteTypeDirectResponse{} }
func (*RouteTypeDirectResponse) ProtoMessage()               {}
func (*RouteTypeDirectResponse) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{7} }

func (m *RouteTypeDirectResponse) GetPath() *ves_io_schema4.PathMatcherType {
	if m != nil {
		return m.Path
	}
	return nil
}

func (m *RouteTypeDirectResponse) GetHttpMethod() ves_io_schema4.HttpMethod {
	if m != nil {
		return m.HttpMethod
	}
	return ves_io_schema4.ANY
}

func (m *RouteTypeDirectResponse) GetRouteDirectResponse() *ves_io_schema_route.RouteDirectResponse {
	if m != nil {
		return m.RouteDirectResponse
	}
	return nil
}

// RouteTypeCustomRoute
//
//  x-displayName: "Custom Route Object"
// A custom route uses a route object created outside of this view.
type RouteTypeCustomRoute struct {
	// route_refs
	//
	// x-displayName: "Reference to Custom Route"
	// Reference to a custom route object
	RouteRef *ves_io_schema_views.ObjectRefType `protobuf:"bytes,1,opt,name=route_ref,json=routeRef" json:"route_ref,omitempty"`
}

func (m *RouteTypeCustomRoute) Reset()                    { *m = RouteTypeCustomRoute{} }
func (*RouteTypeCustomRoute) ProtoMessage()               {}
func (*RouteTypeCustomRoute) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{8} }

func (m *RouteTypeCustomRoute) GetRouteRef() *ves_io_schema_views.ObjectRefType {
	if m != nil {
		return m.RouteRef
	}
	return nil
}

// RouteType
//
// x-displayName: "Route Type"
// This defines various options to define a route
type RouteType struct {
	// route choice
	//
	// x-displayName: "Select Type of Route"
	// x-required
	// Selection of different types of routes
	//
	// Types that are valid to be assigned to Choice:
	//	*RouteType_SimpleRoute
	//	*RouteType_RedirectRoute
	//	*RouteType_DirectResponseRoute
	//	*RouteType_CustomRouteObject
	Choice isRouteType_Choice `protobuf_oneof:"choice"`
}

func (m *RouteType) Reset()                    { *m = RouteType{} }
func (*RouteType) ProtoMessage()               {}
func (*RouteType) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{9} }

type isRouteType_Choice interface {
	isRouteType_Choice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type RouteType_SimpleRoute struct {
	SimpleRoute *RouteTypeSimple `protobuf:"bytes,1,opt,name=simple_route,json=simpleRoute,oneof"`
}
type RouteType_RedirectRoute struct {
	RedirectRoute *RouteTypeRedirect `protobuf:"bytes,2,opt,name=redirect_route,json=redirectRoute,oneof"`
}
type RouteType_DirectResponseRoute struct {
	DirectResponseRoute *RouteTypeDirectResponse `protobuf:"bytes,3,opt,name=direct_response_route,json=directResponseRoute,oneof"`
}
type RouteType_CustomRouteObject struct {
	CustomRouteObject *RouteTypeCustomRoute `protobuf:"bytes,4,opt,name=custom_route_object,json=customRouteObject,oneof"`
}

func (*RouteType_SimpleRoute) isRouteType_Choice()         {}
func (*RouteType_RedirectRoute) isRouteType_Choice()       {}
func (*RouteType_DirectResponseRoute) isRouteType_Choice() {}
func (*RouteType_CustomRouteObject) isRouteType_Choice()   {}

func (m *RouteType) GetChoice() isRouteType_Choice {
	if m != nil {
		return m.Choice
	}
	return nil
}

func (m *RouteType) GetSimpleRoute() *RouteTypeSimple {
	if x, ok := m.GetChoice().(*RouteType_SimpleRoute); ok {
		return x.SimpleRoute
	}
	return nil
}

func (m *RouteType) GetRedirectRoute() *RouteTypeRedirect {
	if x, ok := m.GetChoice().(*RouteType_RedirectRoute); ok {
		return x.RedirectRoute
	}
	return nil
}

func (m *RouteType) GetDirectResponseRoute() *RouteTypeDirectResponse {
	if x, ok := m.GetChoice().(*RouteType_DirectResponseRoute); ok {
		return x.DirectResponseRoute
	}
	return nil
}

func (m *RouteType) GetCustomRouteObject() *RouteTypeCustomRoute {
	if x, ok := m.GetChoice().(*RouteType_CustomRouteObject); ok {
		return x.CustomRouteObject
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*RouteType) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _RouteType_OneofMarshaler, _RouteType_OneofUnmarshaler, _RouteType_OneofSizer, []interface{}{
		(*RouteType_SimpleRoute)(nil),
		(*RouteType_RedirectRoute)(nil),
		(*RouteType_DirectResponseRoute)(nil),
		(*RouteType_CustomRouteObject)(nil),
	}
}

func _RouteType_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*RouteType)
	// choice
	switch x := m.Choice.(type) {
	case *RouteType_SimpleRoute:
		_ = b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.SimpleRoute); err != nil {
			return err
		}
	case *RouteType_RedirectRoute:
		_ = b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.RedirectRoute); err != nil {
			return err
		}
	case *RouteType_DirectResponseRoute:
		_ = b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.DirectResponseRoute); err != nil {
			return err
		}
	case *RouteType_CustomRouteObject:
		_ = b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.CustomRouteObject); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("RouteType.Choice has unexpected type %T", x)
	}
	return nil
}

func _RouteType_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*RouteType)
	switch tag {
	case 1: // choice.simple_route
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(RouteTypeSimple)
		err := b.DecodeMessage(msg)
		m.Choice = &RouteType_SimpleRoute{msg}
		return true, err
	case 2: // choice.redirect_route
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(RouteTypeRedirect)
		err := b.DecodeMessage(msg)
		m.Choice = &RouteType_RedirectRoute{msg}
		return true, err
	case 3: // choice.direct_response_route
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(RouteTypeDirectResponse)
		err := b.DecodeMessage(msg)
		m.Choice = &RouteType_DirectResponseRoute{msg}
		return true, err
	case 4: // choice.custom_route_object
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(RouteTypeCustomRoute)
		err := b.DecodeMessage(msg)
		m.Choice = &RouteType_CustomRouteObject{msg}
		return true, err
	default:
		return false, nil
	}
}

func _RouteType_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*RouteType)
	// choice
	switch x := m.Choice.(type) {
	case *RouteType_SimpleRoute:
		s := proto.Size(x.SimpleRoute)
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *RouteType_RedirectRoute:
		s := proto.Size(x.RedirectRoute)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *RouteType_DirectResponseRoute:
		s := proto.Size(x.DirectResponseRoute)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *RouteType_CustomRouteObject:
		s := proto.Size(x.CustomRouteObject)
		n += proto.SizeVarint(4<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// Advanced options
//
// x-displayName: "Advanced Options"
// This defines various options to define a route
type AdvancedOptionsType struct {
	// Headers to add in request
	//
	// x-displayName: "Add Request Headers"
	// Headers are key-value pairs to be added to HTTP request being routed towards upstream.
	// Headers specified at this level are applied after headers from matched Route are applied
	RequestHeadersToAdd []*ves_io_schema4.HeaderManipulationOptionType `protobuf:"bytes,1,rep,name=request_headers_to_add,json=requestHeadersToAdd" json:"request_headers_to_add,omitempty"`
	// Header to be removed from request
	//
	// x-displayName: "Remove Request Headers"
	// x-example: "host"
	// List of keys of Headers to be removed from the HTTP request being sent towards upstream.
	RequestHeadersToRemove []string `protobuf:"bytes,2,rep,name=request_headers_to_remove,json=requestHeadersToRemove" json:"request_headers_to_remove,omitempty"`
	// Headers to add in response
	//
	// x-displayName: "Add Response Headers"
	// Headers are key-value pairs to be added to HTTP response being sent towards downstream.
	// Headers specified at this level are applied after headers from matched Route are applied
	ResponseHeadersToAdd []*ves_io_schema4.HeaderManipulationOptionType `protobuf:"bytes,3,rep,name=response_headers_to_add,json=responseHeadersToAdd" json:"response_headers_to_add,omitempty"`
	// Header to be removed from response
	//
	// x-displayName: "Remove Response Headers"
	// x-example: "host"
	// List of keys of Headers to be removed from the HTTP response being sent towards downstream.
	ResponseHeadersToRemove []string `protobuf:"bytes,4,rep,name=response_headers_to_remove,json=responseHeadersToRemove" json:"response_headers_to_remove,omitempty"`
	// Maximum request header size
	//
	// x-displayName: "Maximum Request Header Size"
	//
	// The maximum request header size in KiB for incoming connections.
	//
	// If un-configured, the default max request headers allowed is 60 KiB.
	//
	// Requests that exceed this limit will receive a 431 response.
	//
	// The max configurable limit is 96 KiB, based on current implementation constraints.
	//
	// Note:
	//
	//  *  When multiple HTTP_PROXY virtual hosts share the same advertise policy, the effective
	//     "maximum request header size" for such virtual hosts is the highest value configured
	//     on any of the virtual hosts
	MaxRequestHeaderSize uint32 `protobuf:"varint,5,opt,name=max_request_header_size,json=maxRequestHeaderSize,proto3" json:"max_request_header_size,omitempty"`
	// Buffer configuration for requests
	//
	// x-displayName: "Buffer Policy"
	// Some upstream applications are not capable of handling streamed data and high network latency.
	// This config enables buffering the entire request before sending to upstream application. We can
	// specify the maximum buffer size and buffer interval with this config.
	BufferPolicy *ves_io_schema4.BufferConfigType `protobuf:"bytes,6,opt,name=buffer_policy,json=bufferPolicy" json:"buffer_policy,omitempty"`
	// Compression configuration
	//
	// x-displayName: "Compression Parameters"
	// Enables loadbalancer to compress dispatched data from an upstream service upon client request.
	// Only GZIP compression is supported
	CompressionParams *ves_io_schema_virtual_host.CompressionType `protobuf:"bytes,7,opt,name=compression_params,json=compressionParams" json:"compression_params,omitempty"`
	// Custom Errors
	//
	// x-displayName: "Custom Error Responses"
	//
	// Map of integer error codes as keys and string values that can be used to provide custom
	// http pages for each error code.
	// Key of the map can be either response code class or HTTP Error code. Response code classes
	// for key is configured as follows
	// 3 -- for 3xx response code class
	// 4 -- for 4xx response code class
	// 5 -- for 5xx response code class
	// Value of the map is string which represents custom HTTP responses.
	// Specific response code takes preference when both response code and response code class
	// matches for a request.
	CustomErrors map[uint32]string `protobuf:"bytes,8,rep,name=custom_errors,json=customErrors" json:"custom_errors,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// javascript_info
	//
	// x-displayName: "Javascript Info"
	// Custom JavaScript Configuration. Custom JavaScript code can be executed at various stages of request processing.
	JavascriptInfo *ves_io_schema_virtual_host.JavaScriptConfigType `protobuf:"bytes,9,opt,name=javascript_info,json=javascriptInfo" json:"javascript_info,omitempty"`
	// JSON Web Token authentication (JWT) configuration for requests
	//
	// x-displayName: "JWT Config"
	// This HTTP filter specifies how to verify JSON Web Token (JWT). It will verify its signature,
	// audiences and issuer
	Jwt []*ves_io_schema_views.ObjectRefType `protobuf:"bytes,10,rep,name=jwt" json:"jwt,omitempty"`
	// Idle timeout
	//
	// x-displayName: "Idle timeout (in milliseconds)"
	// x-example: "2000"
	// Idle timeout is the amount of time that the loadbalancer will allow a stream to exist with
	// no upstream or downstream activity.
	//
	// Idle timeout and Proxy Type:
	//
	// HTTP_PROXY, HTTPS_PROXY:
	// Idle timer is started when the first byte is received on the connection.
	// Each time an encode/decode event for headers or data is processed for the stream,
	// the timer will be reset.
	// If the timeout fires, the stream is terminated with a 408 (Request Timeout) error code if
	// no upstream response header has been received, otherwise a stream reset occurs.
	// The default idle timeout is 30 seconds
	//
	// TCP PROXY, TCP_PROXY_WITH_SNI, SMA_PROXY:
	// The idle timeout is defined as the period in which there are no bytes sent or received on
	// either the upstream or downstream connection.
	// The default idle timeout is 1 hour.
	//
	// UDP PROXY:
	// The idle timeout for sessions. Idle timeout is defined as the period in which there are no
	// datagrams sent or received on the session.
	// The default if not specified is 1 minute.
	IdleTimeout uint32 `protobuf:"varint,11,opt,name=idle_timeout,json=idleTimeout,proto3" json:"idle_timeout,omitempty"`
}

func (m *AdvancedOptionsType) Reset()                    { *m = AdvancedOptionsType{} }
func (*AdvancedOptionsType) ProtoMessage()               {}
func (*AdvancedOptionsType) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{10} }

func (m *AdvancedOptionsType) GetRequestHeadersToAdd() []*ves_io_schema4.HeaderManipulationOptionType {
	if m != nil {
		return m.RequestHeadersToAdd
	}
	return nil
}

func (m *AdvancedOptionsType) GetRequestHeadersToRemove() []string {
	if m != nil {
		return m.RequestHeadersToRemove
	}
	return nil
}

func (m *AdvancedOptionsType) GetResponseHeadersToAdd() []*ves_io_schema4.HeaderManipulationOptionType {
	if m != nil {
		return m.ResponseHeadersToAdd
	}
	return nil
}

func (m *AdvancedOptionsType) GetResponseHeadersToRemove() []string {
	if m != nil {
		return m.ResponseHeadersToRemove
	}
	return nil
}

func (m *AdvancedOptionsType) GetMaxRequestHeaderSize() uint32 {
	if m != nil {
		return m.MaxRequestHeaderSize
	}
	return 0
}

func (m *AdvancedOptionsType) GetBufferPolicy() *ves_io_schema4.BufferConfigType {
	if m != nil {
		return m.BufferPolicy
	}
	return nil
}

func (m *AdvancedOptionsType) GetCompressionParams() *ves_io_schema_virtual_host.CompressionType {
	if m != nil {
		return m.CompressionParams
	}
	return nil
}

func (m *AdvancedOptionsType) GetCustomErrors() map[uint32]string {
	if m != nil {
		return m.CustomErrors
	}
	return nil
}

func (m *AdvancedOptionsType) GetJavascriptInfo() *ves_io_schema_virtual_host.JavaScriptConfigType {
	if m != nil {
		return m.JavascriptInfo
	}
	return nil
}

func (m *AdvancedOptionsType) GetJwt() []*ves_io_schema_views.ObjectRefType {
	if m != nil {
		return m.Jwt
	}
	return nil
}

func (m *AdvancedOptionsType) GetIdleTimeout() uint32 {
	if m != nil {
		return m.IdleTimeout
	}
	return 0
}

// Custom IP Allowed List
//
// x-displayName: "Custom IP Allowed List"
// IP Allowed list using existing ip_prefix_set objects
type CustomIpAllowedList struct {
	// rate_limiter_allowed_prefixes
	//
	// x-displayName: "List of IP Prefix Sets"
	// x-required
	// References to ip_prefix_set objects.
	// Requests from source IP addresses that are covered by one of the allowed IP Prefixes are not subjected to rate limiting.
	RateLimiterAllowedPrefixes []*ves_io_schema_views.ObjectRefType `protobuf:"bytes,22,rep,name=rate_limiter_allowed_prefixes,json=rateLimiterAllowedPrefixes" json:"rate_limiter_allowed_prefixes,omitempty"`
}

func (m *CustomIpAllowedList) Reset()                    { *m = CustomIpAllowedList{} }
func (*CustomIpAllowedList) ProtoMessage()               {}
func (*CustomIpAllowedList) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{11} }

func (m *CustomIpAllowedList) GetRateLimiterAllowedPrefixes() []*ves_io_schema_views.ObjectRefType {
	if m != nil {
		return m.RateLimiterAllowedPrefixes
	}
	return nil
}

type RateLimitConfigType struct {
	// rate_limiter
	//
	// x-displayName: "Request Rate Limiter"
	// Requests to the virtual_host are rate limited based on the parameters specified in the rate_limiter.
	RateLimiter *ves_io_schema_rate_limiter.RateLimitValue `protobuf:"bytes,1,opt,name=rate_limiter,json=rateLimiter" json:"rate_limiter,omitempty"`
	// IP Allowed List
	//
	// x-displayName: "IP(s) Allowed without Rate Limiting"
	// x-required
	// Allowed List of ip for which rate limiting will not be done
	//
	// Types that are valid to be assigned to IpAllowedListChoice:
	//	*RateLimitConfigType_NoIpAllowedList
	//	*RateLimitConfigType_IpAllowedList
	//	*RateLimitConfigType_CustomIpAllowedList
	IpAllowedListChoice isRateLimitConfigType_IpAllowedListChoice `protobuf_oneof:"ip_allowed_list_choice"`
}

func (m *RateLimitConfigType) Reset()                    { *m = RateLimitConfigType{} }
func (*RateLimitConfigType) ProtoMessage()               {}
func (*RateLimitConfigType) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{12} }

type isRateLimitConfigType_IpAllowedListChoice interface {
	isRateLimitConfigType_IpAllowedListChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type RateLimitConfigType_NoIpAllowedList struct {
	NoIpAllowedList *ves_io_schema4.Empty `protobuf:"bytes,3,opt,name=no_ip_allowed_list,json=noIpAllowedList,oneof"`
}
type RateLimitConfigType_IpAllowedList struct {
	IpAllowedList *ves_io_schema_views.PrefixStringListType `protobuf:"bytes,4,opt,name=ip_allowed_list,json=ipAllowedList,oneof"`
}
type RateLimitConfigType_CustomIpAllowedList struct {
	CustomIpAllowedList *CustomIpAllowedList `protobuf:"bytes,5,opt,name=custom_ip_allowed_list,json=customIpAllowedList,oneof"`
}

func (*RateLimitConfigType_NoIpAllowedList) isRateLimitConfigType_IpAllowedListChoice()     {}
func (*RateLimitConfigType_IpAllowedList) isRateLimitConfigType_IpAllowedListChoice()       {}
func (*RateLimitConfigType_CustomIpAllowedList) isRateLimitConfigType_IpAllowedListChoice() {}

func (m *RateLimitConfigType) GetIpAllowedListChoice() isRateLimitConfigType_IpAllowedListChoice {
	if m != nil {
		return m.IpAllowedListChoice
	}
	return nil
}

func (m *RateLimitConfigType) GetRateLimiter() *ves_io_schema_rate_limiter.RateLimitValue {
	if m != nil {
		return m.RateLimiter
	}
	return nil
}

func (m *RateLimitConfigType) GetNoIpAllowedList() *ves_io_schema4.Empty {
	if x, ok := m.GetIpAllowedListChoice().(*RateLimitConfigType_NoIpAllowedList); ok {
		return x.NoIpAllowedList
	}
	return nil
}

func (m *RateLimitConfigType) GetIpAllowedList() *ves_io_schema_views.PrefixStringListType {
	if x, ok := m.GetIpAllowedListChoice().(*RateLimitConfigType_IpAllowedList); ok {
		return x.IpAllowedList
	}
	return nil
}

func (m *RateLimitConfigType) GetCustomIpAllowedList() *CustomIpAllowedList {
	if x, ok := m.GetIpAllowedListChoice().(*RateLimitConfigType_CustomIpAllowedList); ok {
		return x.CustomIpAllowedList
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*RateLimitConfigType) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _RateLimitConfigType_OneofMarshaler, _RateLimitConfigType_OneofUnmarshaler, _RateLimitConfigType_OneofSizer, []interface{}{
		(*RateLimitConfigType_NoIpAllowedList)(nil),
		(*RateLimitConfigType_IpAllowedList)(nil),
		(*RateLimitConfigType_CustomIpAllowedList)(nil),
	}
}

func _RateLimitConfigType_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*RateLimitConfigType)
	// ip_allowed_list_choice
	switch x := m.IpAllowedListChoice.(type) {
	case *RateLimitConfigType_NoIpAllowedList:
		_ = b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.NoIpAllowedList); err != nil {
			return err
		}
	case *RateLimitConfigType_IpAllowedList:
		_ = b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.IpAllowedList); err != nil {
			return err
		}
	case *RateLimitConfigType_CustomIpAllowedList:
		_ = b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.CustomIpAllowedList); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("RateLimitConfigType.IpAllowedListChoice has unexpected type %T", x)
	}
	return nil
}

func _RateLimitConfigType_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*RateLimitConfigType)
	switch tag {
	case 3: // ip_allowed_list_choice.no_ip_allowed_list
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.IpAllowedListChoice = &RateLimitConfigType_NoIpAllowedList{msg}
		return true, err
	case 4: // ip_allowed_list_choice.ip_allowed_list
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema_views.PrefixStringListType)
		err := b.DecodeMessage(msg)
		m.IpAllowedListChoice = &RateLimitConfigType_IpAllowedList{msg}
		return true, err
	case 5: // ip_allowed_list_choice.custom_ip_allowed_list
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(CustomIpAllowedList)
		err := b.DecodeMessage(msg)
		m.IpAllowedListChoice = &RateLimitConfigType_CustomIpAllowedList{msg}
		return true, err
	default:
		return false, nil
	}
}

func _RateLimitConfigType_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*RateLimitConfigType)
	// ip_allowed_list_choice
	switch x := m.IpAllowedListChoice.(type) {
	case *RateLimitConfigType_NoIpAllowedList:
		s := proto.Size(x.NoIpAllowedList)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *RateLimitConfigType_IpAllowedList:
		s := proto.Size(x.IpAllowedList)
		n += proto.SizeVarint(4<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *RateLimitConfigType_CustomIpAllowedList:
		s := proto.Size(x.CustomIpAllowedList)
		n += proto.SizeVarint(5<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// GlobalSpecType
//
// x-displayName: "Global Specification"
// Shape of the HTTP loadbalancer specification
type GlobalSpecType struct {
	// Domains
	//
	// x-displayName: "Domains"
	// x-example: "www.foo.com"
	// x-required
	// A list of domains (host/authority header) that will be matched to loadbalancer.
	// Wildcard hosts are supported in the suffix or prefix form
	//
	// Domain search order:
	//  1. Exact domain names: www.foo.com.
	//  2. Prefix domain wildcards: *.foo.com or *-bar.foo.com.
	//  3. Special wildcard * matching any domain.
	//
	// Wildcard will not match empty string.
	// e.g. *-bar.foo.com will match baz-bar.foo.com but not -bar.foo.com.
	// The longest wildcards match first.
	// Only a single virtual host in the entire route configuration can match on *.
	// Also a domain must be unique across all virtual hosts within an advertise policy.
	//
	// Domains are also used for SNI matching if the loadbalancer type is HTTPS
	// Domains also indicate the list of names for which DNS resolution will be done by VER
	Domains []string `protobuf:"bytes,1,rep,name=domains" json:"domains,omitempty"`
	// Proxy choice
	//
	// x-displayName: "Select Type of Load Balancer"
	// x-required
	// Type of Load Balancer can be "http" or "https"
	//
	// Types that are valid to be assigned to LoadbalancerType:
	//	*GlobalSpecType_Http
	//	*GlobalSpecType_HttpsAutoCert
	//	*GlobalSpecType_Https
	LoadbalancerType isGlobalSpecType_LoadbalancerType `protobuf_oneof:"loadbalancer_type"`
	// Advertise choice
	//
	// x-displayName: "Where to Advertise the VIP"
	// x-required
	// This is a choice to select method to advertise VIP.
	//
	// Types that are valid to be assigned to AdvertiseChoice:
	//	*GlobalSpecType_DoNotAdvertise
	//	*GlobalSpecType_AdvertiseOnPublicDefaultVip
	//	*GlobalSpecType_AdvertiseOnPublic
	//	*GlobalSpecType_AdvertiseCustom
	AdvertiseChoice isGlobalSpecType_AdvertiseChoice `protobuf_oneof:"advertise_choice"`
	// Default Route Origin Pools
	//
	// x-displayName: "Origin Pools"
	// Origin Pools used when no route is specified (default route)
	DefaultRoutePools []*ves_io_schema_views.OriginPoolWithWeight `protobuf:"bytes,6,rep,name=default_route_pools,json=defaultRoutePools" json:"default_route_pools,omitempty"`
	// HostRewriteParams
	//
	// x-displayName: "Select Host Rewrite for Default Origin Servers"
	// Select how the host header can be modified during forwarding to the default origin servers(default route)
	//
	// Types that are valid to be assigned to HostRewriteParams:
	//	*GlobalSpecType_AutoHostRewrite
	//	*GlobalSpecType_HostRewrite
	//	*GlobalSpecType_DisableHostRewrite
	HostRewriteParams isGlobalSpecType_HostRewriteParams `protobuf_oneof:"HostRewriteParams"`
	// Routes
	//
	// x-displayName: "Routes"
	// Routes for this loadbalancer
	Routes []*RouteType `protobuf:"bytes,7,rep,name=routes" json:"routes,omitempty"`
	// Cross-Origin Resource Sharing (CORS) configuration for requests
	//
	// x-displayName: "CORS Policy"
	// CORS is a mechanism that uses additional HTTP headers to tell a browser to let
	// a web application running at one origin (domain) have permission to access selected
	// resources from a server at a different origin
	CorsPolicy *ves_io_schema4.CorsPolicy `protobuf:"bytes,8,opt,name=cors_policy,json=corsPolicy" json:"cors_policy,omitempty"`
	// Enable the WAF (Web Application Firewall) functionality for VirtualHost
	//
	// x-displayName: "Select Web Application Firewall (WAF) Config"
	// x-required
	//
	// WAF can be used to analyze inbound and outbound http/https traffic.
	// WAF can be configured either in BLOCKing Mode or ALERTing Mode.
	// In BLOCKing mode if WAF detects suspicious inbound/outbound traffic it blocks the request or response.
	// In ALERTing mode if suspicious traffic is detected, WAF generates ALERTs with details on the
	// suspicious traffic (instead of blocking traffic).
	//
	// waf_type can be either WAF or WAFRules.
	// WAF Object allows to
	//     Configure mode of the WAF (BLOCK/ALERT)
	//     Configure language used by the application which is being protected by the WAF
	//     Disable different high level security tags if required (e.g. SQLI_DETECTION, XSS_DETECTION etc)
	// WAFRules allows to
	//     Configure mode of the WAF (BLOCK/ALERT)
	//     Enable/Disable individual WAF security rules
	//
	// Types that are valid to be assigned to WafChoice:
	//	*GlobalSpecType_DisableWaf
	//	*GlobalSpecType_Waf
	//	*GlobalSpecType_WafRule
	WafChoice isGlobalSpecType_WafChoice `protobuf_oneof:"waf_choice"`
	// Add Site information
	//
	// x-displayName: "Add Location"
	// x-example: "true"
	// x-example: true
	// Appends header x-volterra-location = <re-site-name> in responses. This configuration
	// is ignored on CE sites.
	AddLocation bool `protobuf:"varint,17,opt,name=add_location,json=addLocation,proto3" json:"add_location,omitempty"`
	// Challenge choice
	//
	// x-displayName: "Select Type of Challenge"
	// x-required
	// Selection of different types of challenge at Virtual Host
	//
	// Types that are valid to be assigned to ChallengeType:
	//	*GlobalSpecType_NoChallenge
	//	*GlobalSpecType_JsChallenge
	//	*GlobalSpecType_CaptchaChallenge
	ChallengeType isGlobalSpecType_ChallengeType `protobuf_oneof:"challenge_type"`
	// More Options
	//
	// x-displayName: "More Options"
	// More options like header manipulation, compression etc.
	MoreOption *AdvancedOptionsType `protobuf:"bytes,19,opt,name=more_option,json=moreOption" json:"more_option,omitempty"`
	// user_identification
	//
	// x-displayName: "User Identification Policy"
	// A reference to user_identification object.
	// The rules in the user_identification object are evaluated to determine the user identifier to be rate limited.
	UserIdentification *ves_io_schema_views.ObjectRefType `protobuf:"bytes,20,opt,name=user_identification,json=userIdentification" json:"user_identification,omitempty"`
	// Enable Rate Limiting
	//
	// x-displayName: "Rate Limiting"
	// x-required
	// x-example: ""
	// Enable rate limiting per user(client) for this load balancer
	//
	// Types that are valid to be assigned to RateLimitChoice:
	//	*GlobalSpecType_DisableRateLimit
	//	*GlobalSpecType_RateLimit
	RateLimitChoice isGlobalSpecType_RateLimitChoice `protobuf_oneof:"rate_limit_choice"`
	// Malicious User Mitigation
	//
	// x-displayName: "Malicious User Mitigation"
	// Settings that specify the actions to be taken when malicious users are determined to be at different threat levels.
	// User's activity is monitored and continuously analyzed for malicious behavior. From this analysis, a threat level is assigned to each user.
	// The settings defined in malicious user mitigation specify what mitigation actions to take for users determined to be at different threat levels.
	MaliciousUserMitigation *ves_io_schema_views.ObjectRefType `protobuf:"bytes,32,opt,name=malicious_user_mitigation,json=maliciousUserMitigation" json:"malicious_user_mitigation,omitempty"`
	// WAF Exclusion Rules
	//
	// x-displayName: "WAF Exclusion Rules"
	// Rules that specify the match conditions and the corresponding WAF_RULE_IDs which should be excluded from WAF evaluation
	WafExclusionRules []*ves_io_schema_policy.SimpleWafExclusionRule `protobuf:"bytes,33,rep,name=waf_exclusion_rules,json=wafExclusionRules" json:"waf_exclusion_rules,omitempty"`
	// view_internal
	//
	// x-displayName: "View Internal"
	// Reference to view internal object
	ViewInternal *ves_io_schema_views.ObjectRefType `protobuf:"bytes,1000,opt,name=view_internal,json=viewInternal" json:"view_internal,omitempty"`
	// host name
	//
	// x-displayName: "Host Name"
	// x-example: "ves-io-cf8684b9-a18f-4843-a24f-1f9ee8ea2776.ac.vh.ves.io"
	// Internally generated host name to be used for the virtual host
	HostName string `protobuf:"bytes,1001,opt,name=host_name,json=hostName,proto3" json:"host_name,omitempty"`
	// DNS information
	//
	// x-displayName: "DNS Information"
	// DNS information for this virtual host
	DnsInfo []*ves_io_schema_virtual_host_dns_info.DnsInfo `protobuf:"bytes,1002,rep,name=dns_info,json=dnsInfo" json:"dns_info,omitempty"`
	// Virtual Host state
	//
	// x-displayName: "Virtual Host State"
	// State of the virtual host
	State ves_io_schema_virtual_host.VirtualHostState `protobuf:"varint,1003,opt,name=state,proto3,enum=ves.io.schema.virtual_host.VirtualHostState" json:"state,omitempty"`
	// Auto Cert State
	//
	// x-displayName: "Auto Cert State"
	// State of auto certificate generation.
	AutoCertState ves_io_schema_virtual_host.CertificationState `protobuf:"varint,1004,opt,name=auto_cert_state,json=autoCertState,proto3,enum=ves.io.schema.virtual_host.CertificationState" json:"auto_cert_state,omitempty"`
	// Auto Cert Information
	//
	// x-displayName: "Auto Cert Information"
	// Auto certificate related information
	AutoCertInfo *ves_io_schema_virtual_host.AutoCertInfoType `protobuf:"bytes,1010,opt,name=auto_cert_info,json=autoCertInfo" json:"auto_cert_info,omitempty"`
}

func (m *GlobalSpecType) Reset()                    { *m = GlobalSpecType{} }
func (*GlobalSpecType) ProtoMessage()               {}
func (*GlobalSpecType) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{13} }

type isGlobalSpecType_LoadbalancerType interface {
	isGlobalSpecType_LoadbalancerType()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isGlobalSpecType_AdvertiseChoice interface {
	isGlobalSpecType_AdvertiseChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isGlobalSpecType_HostRewriteParams interface {
	isGlobalSpecType_HostRewriteParams()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isGlobalSpecType_WafChoice interface {
	isGlobalSpecType_WafChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isGlobalSpecType_ChallengeType interface {
	isGlobalSpecType_ChallengeType()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isGlobalSpecType_RateLimitChoice interface {
	isGlobalSpecType_RateLimitChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type GlobalSpecType_Http struct {
	Http *ves_io_schema4.Empty `protobuf:"bytes,2,opt,name=http,oneof"`
}
type GlobalSpecType_HttpsAutoCert struct {
	HttpsAutoCert *ProxyTypeHttpsAutoCerts `protobuf:"bytes,27,opt,name=https_auto_cert,json=httpsAutoCert,oneof"`
}
type GlobalSpecType_Https struct {
	Https *ProxyTypeHttps `protobuf:"bytes,3,opt,name=https,oneof"`
}
type GlobalSpecType_DoNotAdvertise struct {
	DoNotAdvertise *ves_io_schema4.Empty `protobuf:"bytes,12,opt,name=do_not_advertise,json=doNotAdvertise,oneof"`
}
type GlobalSpecType_AdvertiseOnPublicDefaultVip struct {
	AdvertiseOnPublicDefaultVip *ves_io_schema4.Empty `protobuf:"bytes,13,opt,name=advertise_on_public_default_vip,json=advertiseOnPublicDefaultVip,oneof"`
}
type GlobalSpecType_AdvertiseOnPublic struct {
	AdvertiseOnPublic *ves_io_schema_views.AdvertisePublic `protobuf:"bytes,4,opt,name=advertise_on_public,json=advertiseOnPublic,oneof"`
}
type GlobalSpecType_AdvertiseCustom struct {
	AdvertiseCustom *ves_io_schema_views.AdvertiseCustom `protobuf:"bytes,5,opt,name=advertise_custom,json=advertiseCustom,oneof"`
}
type GlobalSpecType_AutoHostRewrite struct {
	AutoHostRewrite *ves_io_schema4.Empty `protobuf:"bytes,28,opt,name=auto_host_rewrite,json=autoHostRewrite,oneof"`
}
type GlobalSpecType_HostRewrite struct {
	HostRewrite string `protobuf:"bytes,29,opt,name=host_rewrite,json=hostRewrite,proto3,oneof"`
}
type GlobalSpecType_DisableHostRewrite struct {
	DisableHostRewrite *ves_io_schema4.Empty `protobuf:"bytes,30,opt,name=disable_host_rewrite,json=disableHostRewrite,oneof"`
}
type GlobalSpecType_DisableWaf struct {
	DisableWaf *ves_io_schema4.Empty `protobuf:"bytes,11,opt,name=disable_waf,json=disableWaf,oneof"`
}
type GlobalSpecType_Waf struct {
	Waf *ves_io_schema_views.ObjectRefType `protobuf:"bytes,9,opt,name=waf,oneof"`
}
type GlobalSpecType_WafRule struct {
	WafRule *ves_io_schema_views.ObjectRefType `protobuf:"bytes,10,opt,name=waf_rule,json=wafRule,oneof"`
}
type GlobalSpecType_NoChallenge struct {
	NoChallenge *ves_io_schema4.Empty `protobuf:"bytes,26,opt,name=no_challenge,json=noChallenge,oneof"`
}
type GlobalSpecType_JsChallenge struct {
	JsChallenge *ves_io_schema_virtual_host.JavascriptChallengeType `protobuf:"bytes,18,opt,name=js_challenge,json=jsChallenge,oneof"`
}
type GlobalSpecType_CaptchaChallenge struct {
	CaptchaChallenge *ves_io_schema_virtual_host.CaptchaChallengeType `protobuf:"bytes,24,opt,name=captcha_challenge,json=captchaChallenge,oneof"`
}
type GlobalSpecType_DisableRateLimit struct {
	DisableRateLimit *ves_io_schema4.Empty `protobuf:"bytes,22,opt,name=disable_rate_limit,json=disableRateLimit,oneof"`
}
type GlobalSpecType_RateLimit struct {
	RateLimit *RateLimitConfigType `protobuf:"bytes,23,opt,name=rate_limit,json=rateLimit,oneof"`
}

func (*GlobalSpecType_Http) isGlobalSpecType_LoadbalancerType()                       {}
func (*GlobalSpecType_HttpsAutoCert) isGlobalSpecType_LoadbalancerType()              {}
func (*GlobalSpecType_Https) isGlobalSpecType_LoadbalancerType()                      {}
func (*GlobalSpecType_DoNotAdvertise) isGlobalSpecType_AdvertiseChoice()              {}
func (*GlobalSpecType_AdvertiseOnPublicDefaultVip) isGlobalSpecType_AdvertiseChoice() {}
func (*GlobalSpecType_AdvertiseOnPublic) isGlobalSpecType_AdvertiseChoice()           {}
func (*GlobalSpecType_AdvertiseCustom) isGlobalSpecType_AdvertiseChoice()             {}
func (*GlobalSpecType_AutoHostRewrite) isGlobalSpecType_HostRewriteParams()           {}
func (*GlobalSpecType_HostRewrite) isGlobalSpecType_HostRewriteParams()               {}
func (*GlobalSpecType_DisableHostRewrite) isGlobalSpecType_HostRewriteParams()        {}
func (*GlobalSpecType_DisableWaf) isGlobalSpecType_WafChoice()                        {}
func (*GlobalSpecType_Waf) isGlobalSpecType_WafChoice()                               {}
func (*GlobalSpecType_WafRule) isGlobalSpecType_WafChoice()                           {}
func (*GlobalSpecType_NoChallenge) isGlobalSpecType_ChallengeType()                   {}
func (*GlobalSpecType_JsChallenge) isGlobalSpecType_ChallengeType()                   {}
func (*GlobalSpecType_CaptchaChallenge) isGlobalSpecType_ChallengeType()              {}
func (*GlobalSpecType_DisableRateLimit) isGlobalSpecType_RateLimitChoice()            {}
func (*GlobalSpecType_RateLimit) isGlobalSpecType_RateLimitChoice()                   {}

func (m *GlobalSpecType) GetLoadbalancerType() isGlobalSpecType_LoadbalancerType {
	if m != nil {
		return m.LoadbalancerType
	}
	return nil
}
func (m *GlobalSpecType) GetAdvertiseChoice() isGlobalSpecType_AdvertiseChoice {
	if m != nil {
		return m.AdvertiseChoice
	}
	return nil
}
func (m *GlobalSpecType) GetHostRewriteParams() isGlobalSpecType_HostRewriteParams {
	if m != nil {
		return m.HostRewriteParams
	}
	return nil
}
func (m *GlobalSpecType) GetWafChoice() isGlobalSpecType_WafChoice {
	if m != nil {
		return m.WafChoice
	}
	return nil
}
func (m *GlobalSpecType) GetChallengeType() isGlobalSpecType_ChallengeType {
	if m != nil {
		return m.ChallengeType
	}
	return nil
}
func (m *GlobalSpecType) GetRateLimitChoice() isGlobalSpecType_RateLimitChoice {
	if m != nil {
		return m.RateLimitChoice
	}
	return nil
}

func (m *GlobalSpecType) GetDomains() []string {
	if m != nil {
		return m.Domains
	}
	return nil
}

func (m *GlobalSpecType) GetHttp() *ves_io_schema4.Empty {
	if x, ok := m.GetLoadbalancerType().(*GlobalSpecType_Http); ok {
		return x.Http
	}
	return nil
}

func (m *GlobalSpecType) GetHttpsAutoCert() *ProxyTypeHttpsAutoCerts {
	if x, ok := m.GetLoadbalancerType().(*GlobalSpecType_HttpsAutoCert); ok {
		return x.HttpsAutoCert
	}
	return nil
}

func (m *GlobalSpecType) GetHttps() *ProxyTypeHttps {
	if x, ok := m.GetLoadbalancerType().(*GlobalSpecType_Https); ok {
		return x.Https
	}
	return nil
}

func (m *GlobalSpecType) GetDoNotAdvertise() *ves_io_schema4.Empty {
	if x, ok := m.GetAdvertiseChoice().(*GlobalSpecType_DoNotAdvertise); ok {
		return x.DoNotAdvertise
	}
	return nil
}

func (m *GlobalSpecType) GetAdvertiseOnPublicDefaultVip() *ves_io_schema4.Empty {
	if x, ok := m.GetAdvertiseChoice().(*GlobalSpecType_AdvertiseOnPublicDefaultVip); ok {
		return x.AdvertiseOnPublicDefaultVip
	}
	return nil
}

func (m *GlobalSpecType) GetAdvertiseOnPublic() *ves_io_schema_views.AdvertisePublic {
	if x, ok := m.GetAdvertiseChoice().(*GlobalSpecType_AdvertiseOnPublic); ok {
		return x.AdvertiseOnPublic
	}
	return nil
}

func (m *GlobalSpecType) GetAdvertiseCustom() *ves_io_schema_views.AdvertiseCustom {
	if x, ok := m.GetAdvertiseChoice().(*GlobalSpecType_AdvertiseCustom); ok {
		return x.AdvertiseCustom
	}
	return nil
}

func (m *GlobalSpecType) GetDefaultRoutePools() []*ves_io_schema_views.OriginPoolWithWeight {
	if m != nil {
		return m.DefaultRoutePools
	}
	return nil
}

func (m *GlobalSpecType) GetAutoHostRewrite() *ves_io_schema4.Empty {
	if x, ok := m.GetHostRewriteParams().(*GlobalSpecType_AutoHostRewrite); ok {
		return x.AutoHostRewrite
	}
	return nil
}

func (m *GlobalSpecType) GetHostRewrite() string {
	if x, ok := m.GetHostRewriteParams().(*GlobalSpecType_HostRewrite); ok {
		return x.HostRewrite
	}
	return ""
}

func (m *GlobalSpecType) GetDisableHostRewrite() *ves_io_schema4.Empty {
	if x, ok := m.GetHostRewriteParams().(*GlobalSpecType_DisableHostRewrite); ok {
		return x.DisableHostRewrite
	}
	return nil
}

func (m *GlobalSpecType) GetRoutes() []*RouteType {
	if m != nil {
		return m.Routes
	}
	return nil
}

func (m *GlobalSpecType) GetCorsPolicy() *ves_io_schema4.CorsPolicy {
	if m != nil {
		return m.CorsPolicy
	}
	return nil
}

func (m *GlobalSpecType) GetDisableWaf() *ves_io_schema4.Empty {
	if x, ok := m.GetWafChoice().(*GlobalSpecType_DisableWaf); ok {
		return x.DisableWaf
	}
	return nil
}

func (m *GlobalSpecType) GetWaf() *ves_io_schema_views.ObjectRefType {
	if x, ok := m.GetWafChoice().(*GlobalSpecType_Waf); ok {
		return x.Waf
	}
	return nil
}

func (m *GlobalSpecType) GetWafRule() *ves_io_schema_views.ObjectRefType {
	if x, ok := m.GetWafChoice().(*GlobalSpecType_WafRule); ok {
		return x.WafRule
	}
	return nil
}

func (m *GlobalSpecType) GetAddLocation() bool {
	if m != nil {
		return m.AddLocation
	}
	return false
}

func (m *GlobalSpecType) GetNoChallenge() *ves_io_schema4.Empty {
	if x, ok := m.GetChallengeType().(*GlobalSpecType_NoChallenge); ok {
		return x.NoChallenge
	}
	return nil
}

func (m *GlobalSpecType) GetJsChallenge() *ves_io_schema_virtual_host.JavascriptChallengeType {
	if x, ok := m.GetChallengeType().(*GlobalSpecType_JsChallenge); ok {
		return x.JsChallenge
	}
	return nil
}

func (m *GlobalSpecType) GetCaptchaChallenge() *ves_io_schema_virtual_host.CaptchaChallengeType {
	if x, ok := m.GetChallengeType().(*GlobalSpecType_CaptchaChallenge); ok {
		return x.CaptchaChallenge
	}
	return nil
}

func (m *GlobalSpecType) GetMoreOption() *AdvancedOptionsType {
	if m != nil {
		return m.MoreOption
	}
	return nil
}

func (m *GlobalSpecType) GetUserIdentification() *ves_io_schema_views.ObjectRefType {
	if m != nil {
		return m.UserIdentification
	}
	return nil
}

func (m *GlobalSpecType) GetDisableRateLimit() *ves_io_schema4.Empty {
	if x, ok := m.GetRateLimitChoice().(*GlobalSpecType_DisableRateLimit); ok {
		return x.DisableRateLimit
	}
	return nil
}

func (m *GlobalSpecType) GetRateLimit() *RateLimitConfigType {
	if x, ok := m.GetRateLimitChoice().(*GlobalSpecType_RateLimit); ok {
		return x.RateLimit
	}
	return nil
}

func (m *GlobalSpecType) GetMaliciousUserMitigation() *ves_io_schema_views.ObjectRefType {
	if m != nil {
		return m.MaliciousUserMitigation
	}
	return nil
}

func (m *GlobalSpecType) GetWafExclusionRules() []*ves_io_schema_policy.SimpleWafExclusionRule {
	if m != nil {
		return m.WafExclusionRules
	}
	return nil
}

func (m *GlobalSpecType) GetViewInternal() *ves_io_schema_views.ObjectRefType {
	if m != nil {
		return m.ViewInternal
	}
	return nil
}

func (m *GlobalSpecType) GetHostName() string {
	if m != nil {
		return m.HostName
	}
	return ""
}

func (m *GlobalSpecType) GetDnsInfo() []*ves_io_schema_virtual_host_dns_info.DnsInfo {
	if m != nil {
		return m.DnsInfo
	}
	return nil
}

func (m *GlobalSpecType) GetState() ves_io_schema_virtual_host.VirtualHostState {
	if m != nil {
		return m.State
	}
	return ves_io_schema_virtual_host.VIRTUAL_HOST_READY
}

func (m *GlobalSpecType) GetAutoCertState() ves_io_schema_virtual_host.CertificationState {
	if m != nil {
		return m.AutoCertState
	}
	return ves_io_schema_virtual_host.AutoCertDisabled
}

func (m *GlobalSpecType) GetAutoCertInfo() *ves_io_schema_virtual_host.AutoCertInfoType {
	if m != nil {
		return m.AutoCertInfo
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*GlobalSpecType) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _GlobalSpecType_OneofMarshaler, _GlobalSpecType_OneofUnmarshaler, _GlobalSpecType_OneofSizer, []interface{}{
		(*GlobalSpecType_Http)(nil),
		(*GlobalSpecType_HttpsAutoCert)(nil),
		(*GlobalSpecType_Https)(nil),
		(*GlobalSpecType_DoNotAdvertise)(nil),
		(*GlobalSpecType_AdvertiseOnPublicDefaultVip)(nil),
		(*GlobalSpecType_AdvertiseOnPublic)(nil),
		(*GlobalSpecType_AdvertiseCustom)(nil),
		(*GlobalSpecType_AutoHostRewrite)(nil),
		(*GlobalSpecType_HostRewrite)(nil),
		(*GlobalSpecType_DisableHostRewrite)(nil),
		(*GlobalSpecType_DisableWaf)(nil),
		(*GlobalSpecType_Waf)(nil),
		(*GlobalSpecType_WafRule)(nil),
		(*GlobalSpecType_NoChallenge)(nil),
		(*GlobalSpecType_JsChallenge)(nil),
		(*GlobalSpecType_CaptchaChallenge)(nil),
		(*GlobalSpecType_DisableRateLimit)(nil),
		(*GlobalSpecType_RateLimit)(nil),
	}
}

func _GlobalSpecType_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*GlobalSpecType)
	// loadbalancer_type
	switch x := m.LoadbalancerType.(type) {
	case *GlobalSpecType_Http:
		_ = b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Http); err != nil {
			return err
		}
	case *GlobalSpecType_HttpsAutoCert:
		_ = b.EncodeVarint(27<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.HttpsAutoCert); err != nil {
			return err
		}
	case *GlobalSpecType_Https:
		_ = b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Https); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("GlobalSpecType.LoadbalancerType has unexpected type %T", x)
	}
	// advertise_choice
	switch x := m.AdvertiseChoice.(type) {
	case *GlobalSpecType_DoNotAdvertise:
		_ = b.EncodeVarint(12<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.DoNotAdvertise); err != nil {
			return err
		}
	case *GlobalSpecType_AdvertiseOnPublicDefaultVip:
		_ = b.EncodeVarint(13<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.AdvertiseOnPublicDefaultVip); err != nil {
			return err
		}
	case *GlobalSpecType_AdvertiseOnPublic:
		_ = b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.AdvertiseOnPublic); err != nil {
			return err
		}
	case *GlobalSpecType_AdvertiseCustom:
		_ = b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.AdvertiseCustom); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("GlobalSpecType.AdvertiseChoice has unexpected type %T", x)
	}
	// HostRewriteParams
	switch x := m.HostRewriteParams.(type) {
	case *GlobalSpecType_AutoHostRewrite:
		_ = b.EncodeVarint(28<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.AutoHostRewrite); err != nil {
			return err
		}
	case *GlobalSpecType_HostRewrite:
		_ = b.EncodeVarint(29<<3 | proto.WireBytes)
		_ = b.EncodeStringBytes(x.HostRewrite)
	case *GlobalSpecType_DisableHostRewrite:
		_ = b.EncodeVarint(30<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.DisableHostRewrite); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("GlobalSpecType.HostRewriteParams has unexpected type %T", x)
	}
	// waf_choice
	switch x := m.WafChoice.(type) {
	case *GlobalSpecType_DisableWaf:
		_ = b.EncodeVarint(11<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.DisableWaf); err != nil {
			return err
		}
	case *GlobalSpecType_Waf:
		_ = b.EncodeVarint(9<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Waf); err != nil {
			return err
		}
	case *GlobalSpecType_WafRule:
		_ = b.EncodeVarint(10<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.WafRule); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("GlobalSpecType.WafChoice has unexpected type %T", x)
	}
	// challenge_type
	switch x := m.ChallengeType.(type) {
	case *GlobalSpecType_NoChallenge:
		_ = b.EncodeVarint(26<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.NoChallenge); err != nil {
			return err
		}
	case *GlobalSpecType_JsChallenge:
		_ = b.EncodeVarint(18<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.JsChallenge); err != nil {
			return err
		}
	case *GlobalSpecType_CaptchaChallenge:
		_ = b.EncodeVarint(24<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.CaptchaChallenge); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("GlobalSpecType.ChallengeType has unexpected type %T", x)
	}
	// rate_limit_choice
	switch x := m.RateLimitChoice.(type) {
	case *GlobalSpecType_DisableRateLimit:
		_ = b.EncodeVarint(22<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.DisableRateLimit); err != nil {
			return err
		}
	case *GlobalSpecType_RateLimit:
		_ = b.EncodeVarint(23<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.RateLimit); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("GlobalSpecType.RateLimitChoice has unexpected type %T", x)
	}
	return nil
}

func _GlobalSpecType_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*GlobalSpecType)
	switch tag {
	case 2: // loadbalancer_type.http
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.LoadbalancerType = &GlobalSpecType_Http{msg}
		return true, err
	case 27: // loadbalancer_type.https_auto_cert
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ProxyTypeHttpsAutoCerts)
		err := b.DecodeMessage(msg)
		m.LoadbalancerType = &GlobalSpecType_HttpsAutoCert{msg}
		return true, err
	case 3: // loadbalancer_type.https
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ProxyTypeHttps)
		err := b.DecodeMessage(msg)
		m.LoadbalancerType = &GlobalSpecType_Https{msg}
		return true, err
	case 12: // advertise_choice.do_not_advertise
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.AdvertiseChoice = &GlobalSpecType_DoNotAdvertise{msg}
		return true, err
	case 13: // advertise_choice.advertise_on_public_default_vip
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.AdvertiseChoice = &GlobalSpecType_AdvertiseOnPublicDefaultVip{msg}
		return true, err
	case 4: // advertise_choice.advertise_on_public
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema_views.AdvertisePublic)
		err := b.DecodeMessage(msg)
		m.AdvertiseChoice = &GlobalSpecType_AdvertiseOnPublic{msg}
		return true, err
	case 5: // advertise_choice.advertise_custom
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema_views.AdvertiseCustom)
		err := b.DecodeMessage(msg)
		m.AdvertiseChoice = &GlobalSpecType_AdvertiseCustom{msg}
		return true, err
	case 28: // HostRewriteParams.auto_host_rewrite
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.HostRewriteParams = &GlobalSpecType_AutoHostRewrite{msg}
		return true, err
	case 29: // HostRewriteParams.host_rewrite
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.HostRewriteParams = &GlobalSpecType_HostRewrite{x}
		return true, err
	case 30: // HostRewriteParams.disable_host_rewrite
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.HostRewriteParams = &GlobalSpecType_DisableHostRewrite{msg}
		return true, err
	case 11: // waf_choice.disable_waf
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.WafChoice = &GlobalSpecType_DisableWaf{msg}
		return true, err
	case 9: // waf_choice.waf
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema_views.ObjectRefType)
		err := b.DecodeMessage(msg)
		m.WafChoice = &GlobalSpecType_Waf{msg}
		return true, err
	case 10: // waf_choice.waf_rule
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema_views.ObjectRefType)
		err := b.DecodeMessage(msg)
		m.WafChoice = &GlobalSpecType_WafRule{msg}
		return true, err
	case 26: // challenge_type.no_challenge
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.ChallengeType = &GlobalSpecType_NoChallenge{msg}
		return true, err
	case 18: // challenge_type.js_challenge
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema_virtual_host.JavascriptChallengeType)
		err := b.DecodeMessage(msg)
		m.ChallengeType = &GlobalSpecType_JsChallenge{msg}
		return true, err
	case 24: // challenge_type.captcha_challenge
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema_virtual_host.CaptchaChallengeType)
		err := b.DecodeMessage(msg)
		m.ChallengeType = &GlobalSpecType_CaptchaChallenge{msg}
		return true, err
	case 22: // rate_limit_choice.disable_rate_limit
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.RateLimitChoice = &GlobalSpecType_DisableRateLimit{msg}
		return true, err
	case 23: // rate_limit_choice.rate_limit
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(RateLimitConfigType)
		err := b.DecodeMessage(msg)
		m.RateLimitChoice = &GlobalSpecType_RateLimit{msg}
		return true, err
	default:
		return false, nil
	}
}

func _GlobalSpecType_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*GlobalSpecType)
	// loadbalancer_type
	switch x := m.LoadbalancerType.(type) {
	case *GlobalSpecType_Http:
		s := proto.Size(x.Http)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *GlobalSpecType_HttpsAutoCert:
		s := proto.Size(x.HttpsAutoCert)
		n += proto.SizeVarint(27<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *GlobalSpecType_Https:
		s := proto.Size(x.Https)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	// advertise_choice
	switch x := m.AdvertiseChoice.(type) {
	case *GlobalSpecType_DoNotAdvertise:
		s := proto.Size(x.DoNotAdvertise)
		n += proto.SizeVarint(12<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *GlobalSpecType_AdvertiseOnPublicDefaultVip:
		s := proto.Size(x.AdvertiseOnPublicDefaultVip)
		n += proto.SizeVarint(13<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *GlobalSpecType_AdvertiseOnPublic:
		s := proto.Size(x.AdvertiseOnPublic)
		n += proto.SizeVarint(4<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *GlobalSpecType_AdvertiseCustom:
		s := proto.Size(x.AdvertiseCustom)
		n += proto.SizeVarint(5<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	// HostRewriteParams
	switch x := m.HostRewriteParams.(type) {
	case *GlobalSpecType_AutoHostRewrite:
		s := proto.Size(x.AutoHostRewrite)
		n += proto.SizeVarint(28<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *GlobalSpecType_HostRewrite:
		n += proto.SizeVarint(29<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.HostRewrite)))
		n += len(x.HostRewrite)
	case *GlobalSpecType_DisableHostRewrite:
		s := proto.Size(x.DisableHostRewrite)
		n += proto.SizeVarint(30<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	// waf_choice
	switch x := m.WafChoice.(type) {
	case *GlobalSpecType_DisableWaf:
		s := proto.Size(x.DisableWaf)
		n += proto.SizeVarint(11<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *GlobalSpecType_Waf:
		s := proto.Size(x.Waf)
		n += proto.SizeVarint(9<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *GlobalSpecType_WafRule:
		s := proto.Size(x.WafRule)
		n += proto.SizeVarint(10<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	// challenge_type
	switch x := m.ChallengeType.(type) {
	case *GlobalSpecType_NoChallenge:
		s := proto.Size(x.NoChallenge)
		n += proto.SizeVarint(26<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *GlobalSpecType_JsChallenge:
		s := proto.Size(x.JsChallenge)
		n += proto.SizeVarint(18<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *GlobalSpecType_CaptchaChallenge:
		s := proto.Size(x.CaptchaChallenge)
		n += proto.SizeVarint(24<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	// rate_limit_choice
	switch x := m.RateLimitChoice.(type) {
	case *GlobalSpecType_DisableRateLimit:
		s := proto.Size(x.DisableRateLimit)
		n += proto.SizeVarint(22<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *GlobalSpecType_RateLimit:
		s := proto.Size(x.RateLimit)
		n += proto.SizeVarint(23<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// CreateSpecType
//
// x-displayName: "Create Specification"
// Shape of the HTTP loadbalancer specification
type CreateSpecType struct {
	Domains []string `protobuf:"bytes,1,rep,name=domains" json:"domains,omitempty"`
	// Types that are valid to be assigned to LoadbalancerType:
	//	*CreateSpecType_Http
	//	*CreateSpecType_HttpsAutoCert
	//	*CreateSpecType_Https
	LoadbalancerType isCreateSpecType_LoadbalancerType `protobuf_oneof:"loadbalancer_type"`
	// Types that are valid to be assigned to AdvertiseChoice:
	//	*CreateSpecType_DoNotAdvertise
	//	*CreateSpecType_AdvertiseOnPublicDefaultVip
	//	*CreateSpecType_AdvertiseOnPublic
	//	*CreateSpecType_AdvertiseCustom
	AdvertiseChoice   isCreateSpecType_AdvertiseChoice            `protobuf_oneof:"advertise_choice"`
	DefaultRoutePools []*ves_io_schema_views.OriginPoolWithWeight `protobuf:"bytes,6,rep,name=default_route_pools,json=defaultRoutePools" json:"default_route_pools,omitempty"`
	Routes            []*RouteType                                `protobuf:"bytes,7,rep,name=routes" json:"routes,omitempty"`
	CorsPolicy        *ves_io_schema4.CorsPolicy                  `protobuf:"bytes,8,opt,name=cors_policy,json=corsPolicy" json:"cors_policy,omitempty"`
	// Types that are valid to be assigned to WafChoice:
	//	*CreateSpecType_DisableWaf
	//	*CreateSpecType_Waf
	//	*CreateSpecType_WafRule
	WafChoice   isCreateSpecType_WafChoice `protobuf_oneof:"waf_choice"`
	AddLocation bool                       `protobuf:"varint,17,opt,name=add_location,json=addLocation,proto3" json:"add_location,omitempty"`
	// Types that are valid to be assigned to ChallengeType:
	//	*CreateSpecType_NoChallenge
	//	*CreateSpecType_JsChallenge
	//	*CreateSpecType_CaptchaChallenge
	ChallengeType      isCreateSpecType_ChallengeType     `protobuf_oneof:"challenge_type"`
	MoreOption         *AdvancedOptionsType               `protobuf:"bytes,19,opt,name=more_option,json=moreOption" json:"more_option,omitempty"`
	UserIdentification *ves_io_schema_views.ObjectRefType `protobuf:"bytes,20,opt,name=user_identification,json=userIdentification" json:"user_identification,omitempty"`
	// Types that are valid to be assigned to RateLimitChoice:
	//	*CreateSpecType_DisableRateLimit
	//	*CreateSpecType_RateLimit
	RateLimitChoice         isCreateSpecType_RateLimitChoice               `protobuf_oneof:"rate_limit_choice"`
	MaliciousUserMitigation *ves_io_schema_views.ObjectRefType             `protobuf:"bytes,32,opt,name=malicious_user_mitigation,json=maliciousUserMitigation" json:"malicious_user_mitigation,omitempty"`
	WafExclusionRules       []*ves_io_schema_policy.SimpleWafExclusionRule `protobuf:"bytes,33,rep,name=waf_exclusion_rules,json=wafExclusionRules" json:"waf_exclusion_rules,omitempty"`
}

func (m *CreateSpecType) Reset()                    { *m = CreateSpecType{} }
func (*CreateSpecType) ProtoMessage()               {}
func (*CreateSpecType) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{14} }

type isCreateSpecType_LoadbalancerType interface {
	isCreateSpecType_LoadbalancerType()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isCreateSpecType_AdvertiseChoice interface {
	isCreateSpecType_AdvertiseChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isCreateSpecType_WafChoice interface {
	isCreateSpecType_WafChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isCreateSpecType_ChallengeType interface {
	isCreateSpecType_ChallengeType()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isCreateSpecType_RateLimitChoice interface {
	isCreateSpecType_RateLimitChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type CreateSpecType_Http struct {
	Http *ves_io_schema4.Empty `protobuf:"bytes,2,opt,name=http,oneof"`
}
type CreateSpecType_HttpsAutoCert struct {
	HttpsAutoCert *ProxyTypeHttpsAutoCerts `protobuf:"bytes,27,opt,name=https_auto_cert,json=httpsAutoCert,oneof"`
}
type CreateSpecType_Https struct {
	Https *ProxyTypeHttps `protobuf:"bytes,3,opt,name=https,oneof"`
}
type CreateSpecType_DoNotAdvertise struct {
	DoNotAdvertise *ves_io_schema4.Empty `protobuf:"bytes,12,opt,name=do_not_advertise,json=doNotAdvertise,oneof"`
}
type CreateSpecType_AdvertiseOnPublicDefaultVip struct {
	AdvertiseOnPublicDefaultVip *ves_io_schema4.Empty `protobuf:"bytes,13,opt,name=advertise_on_public_default_vip,json=advertiseOnPublicDefaultVip,oneof"`
}
type CreateSpecType_AdvertiseOnPublic struct {
	AdvertiseOnPublic *ves_io_schema_views.AdvertisePublic `protobuf:"bytes,4,opt,name=advertise_on_public,json=advertiseOnPublic,oneof"`
}
type CreateSpecType_AdvertiseCustom struct {
	AdvertiseCustom *ves_io_schema_views.AdvertiseCustom `protobuf:"bytes,5,opt,name=advertise_custom,json=advertiseCustom,oneof"`
}
type CreateSpecType_DisableWaf struct {
	DisableWaf *ves_io_schema4.Empty `protobuf:"bytes,11,opt,name=disable_waf,json=disableWaf,oneof"`
}
type CreateSpecType_Waf struct {
	Waf *ves_io_schema_views.ObjectRefType `protobuf:"bytes,9,opt,name=waf,oneof"`
}
type CreateSpecType_WafRule struct {
	WafRule *ves_io_schema_views.ObjectRefType `protobuf:"bytes,10,opt,name=waf_rule,json=wafRule,oneof"`
}
type CreateSpecType_NoChallenge struct {
	NoChallenge *ves_io_schema4.Empty `protobuf:"bytes,26,opt,name=no_challenge,json=noChallenge,oneof"`
}
type CreateSpecType_JsChallenge struct {
	JsChallenge *ves_io_schema_virtual_host.JavascriptChallengeType `protobuf:"bytes,18,opt,name=js_challenge,json=jsChallenge,oneof"`
}
type CreateSpecType_CaptchaChallenge struct {
	CaptchaChallenge *ves_io_schema_virtual_host.CaptchaChallengeType `protobuf:"bytes,24,opt,name=captcha_challenge,json=captchaChallenge,oneof"`
}
type CreateSpecType_DisableRateLimit struct {
	DisableRateLimit *ves_io_schema4.Empty `protobuf:"bytes,22,opt,name=disable_rate_limit,json=disableRateLimit,oneof"`
}
type CreateSpecType_RateLimit struct {
	RateLimit *RateLimitConfigType `protobuf:"bytes,23,opt,name=rate_limit,json=rateLimit,oneof"`
}

func (*CreateSpecType_Http) isCreateSpecType_LoadbalancerType()                       {}
func (*CreateSpecType_HttpsAutoCert) isCreateSpecType_LoadbalancerType()              {}
func (*CreateSpecType_Https) isCreateSpecType_LoadbalancerType()                      {}
func (*CreateSpecType_DoNotAdvertise) isCreateSpecType_AdvertiseChoice()              {}
func (*CreateSpecType_AdvertiseOnPublicDefaultVip) isCreateSpecType_AdvertiseChoice() {}
func (*CreateSpecType_AdvertiseOnPublic) isCreateSpecType_AdvertiseChoice()           {}
func (*CreateSpecType_AdvertiseCustom) isCreateSpecType_AdvertiseChoice()             {}
func (*CreateSpecType_DisableWaf) isCreateSpecType_WafChoice()                        {}
func (*CreateSpecType_Waf) isCreateSpecType_WafChoice()                               {}
func (*CreateSpecType_WafRule) isCreateSpecType_WafChoice()                           {}
func (*CreateSpecType_NoChallenge) isCreateSpecType_ChallengeType()                   {}
func (*CreateSpecType_JsChallenge) isCreateSpecType_ChallengeType()                   {}
func (*CreateSpecType_CaptchaChallenge) isCreateSpecType_ChallengeType()              {}
func (*CreateSpecType_DisableRateLimit) isCreateSpecType_RateLimitChoice()            {}
func (*CreateSpecType_RateLimit) isCreateSpecType_RateLimitChoice()                   {}

func (m *CreateSpecType) GetLoadbalancerType() isCreateSpecType_LoadbalancerType {
	if m != nil {
		return m.LoadbalancerType
	}
	return nil
}
func (m *CreateSpecType) GetAdvertiseChoice() isCreateSpecType_AdvertiseChoice {
	if m != nil {
		return m.AdvertiseChoice
	}
	return nil
}
func (m *CreateSpecType) GetWafChoice() isCreateSpecType_WafChoice {
	if m != nil {
		return m.WafChoice
	}
	return nil
}
func (m *CreateSpecType) GetChallengeType() isCreateSpecType_ChallengeType {
	if m != nil {
		return m.ChallengeType
	}
	return nil
}
func (m *CreateSpecType) GetRateLimitChoice() isCreateSpecType_RateLimitChoice {
	if m != nil {
		return m.RateLimitChoice
	}
	return nil
}

func (m *CreateSpecType) GetDomains() []string {
	if m != nil {
		return m.Domains
	}
	return nil
}

func (m *CreateSpecType) GetHttp() *ves_io_schema4.Empty {
	if x, ok := m.GetLoadbalancerType().(*CreateSpecType_Http); ok {
		return x.Http
	}
	return nil
}

func (m *CreateSpecType) GetHttpsAutoCert() *ProxyTypeHttpsAutoCerts {
	if x, ok := m.GetLoadbalancerType().(*CreateSpecType_HttpsAutoCert); ok {
		return x.HttpsAutoCert
	}
	return nil
}

func (m *CreateSpecType) GetHttps() *ProxyTypeHttps {
	if x, ok := m.GetLoadbalancerType().(*CreateSpecType_Https); ok {
		return x.Https
	}
	return nil
}

func (m *CreateSpecType) GetDoNotAdvertise() *ves_io_schema4.Empty {
	if x, ok := m.GetAdvertiseChoice().(*CreateSpecType_DoNotAdvertise); ok {
		return x.DoNotAdvertise
	}
	return nil
}

func (m *CreateSpecType) GetAdvertiseOnPublicDefaultVip() *ves_io_schema4.Empty {
	if x, ok := m.GetAdvertiseChoice().(*CreateSpecType_AdvertiseOnPublicDefaultVip); ok {
		return x.AdvertiseOnPublicDefaultVip
	}
	return nil
}

func (m *CreateSpecType) GetAdvertiseOnPublic() *ves_io_schema_views.AdvertisePublic {
	if x, ok := m.GetAdvertiseChoice().(*CreateSpecType_AdvertiseOnPublic); ok {
		return x.AdvertiseOnPublic
	}
	return nil
}

func (m *CreateSpecType) GetAdvertiseCustom() *ves_io_schema_views.AdvertiseCustom {
	if x, ok := m.GetAdvertiseChoice().(*CreateSpecType_AdvertiseCustom); ok {
		return x.AdvertiseCustom
	}
	return nil
}

func (m *CreateSpecType) GetDefaultRoutePools() []*ves_io_schema_views.OriginPoolWithWeight {
	if m != nil {
		return m.DefaultRoutePools
	}
	return nil
}

func (m *CreateSpecType) GetRoutes() []*RouteType {
	if m != nil {
		return m.Routes
	}
	return nil
}

func (m *CreateSpecType) GetCorsPolicy() *ves_io_schema4.CorsPolicy {
	if m != nil {
		return m.CorsPolicy
	}
	return nil
}

func (m *CreateSpecType) GetDisableWaf() *ves_io_schema4.Empty {
	if x, ok := m.GetWafChoice().(*CreateSpecType_DisableWaf); ok {
		return x.DisableWaf
	}
	return nil
}

func (m *CreateSpecType) GetWaf() *ves_io_schema_views.ObjectRefType {
	if x, ok := m.GetWafChoice().(*CreateSpecType_Waf); ok {
		return x.Waf
	}
	return nil
}

func (m *CreateSpecType) GetWafRule() *ves_io_schema_views.ObjectRefType {
	if x, ok := m.GetWafChoice().(*CreateSpecType_WafRule); ok {
		return x.WafRule
	}
	return nil
}

func (m *CreateSpecType) GetAddLocation() bool {
	if m != nil {
		return m.AddLocation
	}
	return false
}

func (m *CreateSpecType) GetNoChallenge() *ves_io_schema4.Empty {
	if x, ok := m.GetChallengeType().(*CreateSpecType_NoChallenge); ok {
		return x.NoChallenge
	}
	return nil
}

func (m *CreateSpecType) GetJsChallenge() *ves_io_schema_virtual_host.JavascriptChallengeType {
	if x, ok := m.GetChallengeType().(*CreateSpecType_JsChallenge); ok {
		return x.JsChallenge
	}
	return nil
}

func (m *CreateSpecType) GetCaptchaChallenge() *ves_io_schema_virtual_host.CaptchaChallengeType {
	if x, ok := m.GetChallengeType().(*CreateSpecType_CaptchaChallenge); ok {
		return x.CaptchaChallenge
	}
	return nil
}

func (m *CreateSpecType) GetMoreOption() *AdvancedOptionsType {
	if m != nil {
		return m.MoreOption
	}
	return nil
}

func (m *CreateSpecType) GetUserIdentification() *ves_io_schema_views.ObjectRefType {
	if m != nil {
		return m.UserIdentification
	}
	return nil
}

func (m *CreateSpecType) GetDisableRateLimit() *ves_io_schema4.Empty {
	if x, ok := m.GetRateLimitChoice().(*CreateSpecType_DisableRateLimit); ok {
		return x.DisableRateLimit
	}
	return nil
}

func (m *CreateSpecType) GetRateLimit() *RateLimitConfigType {
	if x, ok := m.GetRateLimitChoice().(*CreateSpecType_RateLimit); ok {
		return x.RateLimit
	}
	return nil
}

func (m *CreateSpecType) GetMaliciousUserMitigation() *ves_io_schema_views.ObjectRefType {
	if m != nil {
		return m.MaliciousUserMitigation
	}
	return nil
}

func (m *CreateSpecType) GetWafExclusionRules() []*ves_io_schema_policy.SimpleWafExclusionRule {
	if m != nil {
		return m.WafExclusionRules
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*CreateSpecType) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _CreateSpecType_OneofMarshaler, _CreateSpecType_OneofUnmarshaler, _CreateSpecType_OneofSizer, []interface{}{
		(*CreateSpecType_Http)(nil),
		(*CreateSpecType_HttpsAutoCert)(nil),
		(*CreateSpecType_Https)(nil),
		(*CreateSpecType_DoNotAdvertise)(nil),
		(*CreateSpecType_AdvertiseOnPublicDefaultVip)(nil),
		(*CreateSpecType_AdvertiseOnPublic)(nil),
		(*CreateSpecType_AdvertiseCustom)(nil),
		(*CreateSpecType_DisableWaf)(nil),
		(*CreateSpecType_Waf)(nil),
		(*CreateSpecType_WafRule)(nil),
		(*CreateSpecType_NoChallenge)(nil),
		(*CreateSpecType_JsChallenge)(nil),
		(*CreateSpecType_CaptchaChallenge)(nil),
		(*CreateSpecType_DisableRateLimit)(nil),
		(*CreateSpecType_RateLimit)(nil),
	}
}

func _CreateSpecType_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*CreateSpecType)
	// loadbalancer_type
	switch x := m.LoadbalancerType.(type) {
	case *CreateSpecType_Http:
		_ = b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Http); err != nil {
			return err
		}
	case *CreateSpecType_HttpsAutoCert:
		_ = b.EncodeVarint(27<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.HttpsAutoCert); err != nil {
			return err
		}
	case *CreateSpecType_Https:
		_ = b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Https); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("CreateSpecType.LoadbalancerType has unexpected type %T", x)
	}
	// advertise_choice
	switch x := m.AdvertiseChoice.(type) {
	case *CreateSpecType_DoNotAdvertise:
		_ = b.EncodeVarint(12<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.DoNotAdvertise); err != nil {
			return err
		}
	case *CreateSpecType_AdvertiseOnPublicDefaultVip:
		_ = b.EncodeVarint(13<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.AdvertiseOnPublicDefaultVip); err != nil {
			return err
		}
	case *CreateSpecType_AdvertiseOnPublic:
		_ = b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.AdvertiseOnPublic); err != nil {
			return err
		}
	case *CreateSpecType_AdvertiseCustom:
		_ = b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.AdvertiseCustom); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("CreateSpecType.AdvertiseChoice has unexpected type %T", x)
	}
	// waf_choice
	switch x := m.WafChoice.(type) {
	case *CreateSpecType_DisableWaf:
		_ = b.EncodeVarint(11<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.DisableWaf); err != nil {
			return err
		}
	case *CreateSpecType_Waf:
		_ = b.EncodeVarint(9<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Waf); err != nil {
			return err
		}
	case *CreateSpecType_WafRule:
		_ = b.EncodeVarint(10<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.WafRule); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("CreateSpecType.WafChoice has unexpected type %T", x)
	}
	// challenge_type
	switch x := m.ChallengeType.(type) {
	case *CreateSpecType_NoChallenge:
		_ = b.EncodeVarint(26<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.NoChallenge); err != nil {
			return err
		}
	case *CreateSpecType_JsChallenge:
		_ = b.EncodeVarint(18<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.JsChallenge); err != nil {
			return err
		}
	case *CreateSpecType_CaptchaChallenge:
		_ = b.EncodeVarint(24<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.CaptchaChallenge); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("CreateSpecType.ChallengeType has unexpected type %T", x)
	}
	// rate_limit_choice
	switch x := m.RateLimitChoice.(type) {
	case *CreateSpecType_DisableRateLimit:
		_ = b.EncodeVarint(22<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.DisableRateLimit); err != nil {
			return err
		}
	case *CreateSpecType_RateLimit:
		_ = b.EncodeVarint(23<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.RateLimit); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("CreateSpecType.RateLimitChoice has unexpected type %T", x)
	}
	return nil
}

func _CreateSpecType_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*CreateSpecType)
	switch tag {
	case 2: // loadbalancer_type.http
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.LoadbalancerType = &CreateSpecType_Http{msg}
		return true, err
	case 27: // loadbalancer_type.https_auto_cert
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ProxyTypeHttpsAutoCerts)
		err := b.DecodeMessage(msg)
		m.LoadbalancerType = &CreateSpecType_HttpsAutoCert{msg}
		return true, err
	case 3: // loadbalancer_type.https
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ProxyTypeHttps)
		err := b.DecodeMessage(msg)
		m.LoadbalancerType = &CreateSpecType_Https{msg}
		return true, err
	case 12: // advertise_choice.do_not_advertise
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.AdvertiseChoice = &CreateSpecType_DoNotAdvertise{msg}
		return true, err
	case 13: // advertise_choice.advertise_on_public_default_vip
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.AdvertiseChoice = &CreateSpecType_AdvertiseOnPublicDefaultVip{msg}
		return true, err
	case 4: // advertise_choice.advertise_on_public
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema_views.AdvertisePublic)
		err := b.DecodeMessage(msg)
		m.AdvertiseChoice = &CreateSpecType_AdvertiseOnPublic{msg}
		return true, err
	case 5: // advertise_choice.advertise_custom
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema_views.AdvertiseCustom)
		err := b.DecodeMessage(msg)
		m.AdvertiseChoice = &CreateSpecType_AdvertiseCustom{msg}
		return true, err
	case 11: // waf_choice.disable_waf
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.WafChoice = &CreateSpecType_DisableWaf{msg}
		return true, err
	case 9: // waf_choice.waf
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema_views.ObjectRefType)
		err := b.DecodeMessage(msg)
		m.WafChoice = &CreateSpecType_Waf{msg}
		return true, err
	case 10: // waf_choice.waf_rule
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema_views.ObjectRefType)
		err := b.DecodeMessage(msg)
		m.WafChoice = &CreateSpecType_WafRule{msg}
		return true, err
	case 26: // challenge_type.no_challenge
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.ChallengeType = &CreateSpecType_NoChallenge{msg}
		return true, err
	case 18: // challenge_type.js_challenge
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema_virtual_host.JavascriptChallengeType)
		err := b.DecodeMessage(msg)
		m.ChallengeType = &CreateSpecType_JsChallenge{msg}
		return true, err
	case 24: // challenge_type.captcha_challenge
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema_virtual_host.CaptchaChallengeType)
		err := b.DecodeMessage(msg)
		m.ChallengeType = &CreateSpecType_CaptchaChallenge{msg}
		return true, err
	case 22: // rate_limit_choice.disable_rate_limit
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.RateLimitChoice = &CreateSpecType_DisableRateLimit{msg}
		return true, err
	case 23: // rate_limit_choice.rate_limit
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(RateLimitConfigType)
		err := b.DecodeMessage(msg)
		m.RateLimitChoice = &CreateSpecType_RateLimit{msg}
		return true, err
	default:
		return false, nil
	}
}

func _CreateSpecType_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*CreateSpecType)
	// loadbalancer_type
	switch x := m.LoadbalancerType.(type) {
	case *CreateSpecType_Http:
		s := proto.Size(x.Http)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *CreateSpecType_HttpsAutoCert:
		s := proto.Size(x.HttpsAutoCert)
		n += proto.SizeVarint(27<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *CreateSpecType_Https:
		s := proto.Size(x.Https)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	// advertise_choice
	switch x := m.AdvertiseChoice.(type) {
	case *CreateSpecType_DoNotAdvertise:
		s := proto.Size(x.DoNotAdvertise)
		n += proto.SizeVarint(12<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *CreateSpecType_AdvertiseOnPublicDefaultVip:
		s := proto.Size(x.AdvertiseOnPublicDefaultVip)
		n += proto.SizeVarint(13<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *CreateSpecType_AdvertiseOnPublic:
		s := proto.Size(x.AdvertiseOnPublic)
		n += proto.SizeVarint(4<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *CreateSpecType_AdvertiseCustom:
		s := proto.Size(x.AdvertiseCustom)
		n += proto.SizeVarint(5<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	// waf_choice
	switch x := m.WafChoice.(type) {
	case *CreateSpecType_DisableWaf:
		s := proto.Size(x.DisableWaf)
		n += proto.SizeVarint(11<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *CreateSpecType_Waf:
		s := proto.Size(x.Waf)
		n += proto.SizeVarint(9<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *CreateSpecType_WafRule:
		s := proto.Size(x.WafRule)
		n += proto.SizeVarint(10<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	// challenge_type
	switch x := m.ChallengeType.(type) {
	case *CreateSpecType_NoChallenge:
		s := proto.Size(x.NoChallenge)
		n += proto.SizeVarint(26<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *CreateSpecType_JsChallenge:
		s := proto.Size(x.JsChallenge)
		n += proto.SizeVarint(18<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *CreateSpecType_CaptchaChallenge:
		s := proto.Size(x.CaptchaChallenge)
		n += proto.SizeVarint(24<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	// rate_limit_choice
	switch x := m.RateLimitChoice.(type) {
	case *CreateSpecType_DisableRateLimit:
		s := proto.Size(x.DisableRateLimit)
		n += proto.SizeVarint(22<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *CreateSpecType_RateLimit:
		s := proto.Size(x.RateLimit)
		n += proto.SizeVarint(23<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// ReplaceSpecType
//
// x-displayName: "Replace Specification"
// Shape of the HTTP loadbalancer specification
type ReplaceSpecType struct {
	Domains []string `protobuf:"bytes,1,rep,name=domains" json:"domains,omitempty"`
	// Types that are valid to be assigned to LoadbalancerType:
	//	*ReplaceSpecType_Http
	//	*ReplaceSpecType_HttpsAutoCert
	//	*ReplaceSpecType_Https
	LoadbalancerType isReplaceSpecType_LoadbalancerType `protobuf_oneof:"loadbalancer_type"`
	// Types that are valid to be assigned to AdvertiseChoice:
	//	*ReplaceSpecType_DoNotAdvertise
	//	*ReplaceSpecType_AdvertiseOnPublicDefaultVip
	//	*ReplaceSpecType_AdvertiseOnPublic
	//	*ReplaceSpecType_AdvertiseCustom
	AdvertiseChoice   isReplaceSpecType_AdvertiseChoice           `protobuf_oneof:"advertise_choice"`
	DefaultRoutePools []*ves_io_schema_views.OriginPoolWithWeight `protobuf:"bytes,6,rep,name=default_route_pools,json=defaultRoutePools" json:"default_route_pools,omitempty"`
	Routes            []*RouteType                                `protobuf:"bytes,7,rep,name=routes" json:"routes,omitempty"`
	CorsPolicy        *ves_io_schema4.CorsPolicy                  `protobuf:"bytes,8,opt,name=cors_policy,json=corsPolicy" json:"cors_policy,omitempty"`
	// Types that are valid to be assigned to WafChoice:
	//	*ReplaceSpecType_DisableWaf
	//	*ReplaceSpecType_Waf
	//	*ReplaceSpecType_WafRule
	WafChoice   isReplaceSpecType_WafChoice `protobuf_oneof:"waf_choice"`
	AddLocation bool                        `protobuf:"varint,17,opt,name=add_location,json=addLocation,proto3" json:"add_location,omitempty"`
	// Types that are valid to be assigned to ChallengeType:
	//	*ReplaceSpecType_NoChallenge
	//	*ReplaceSpecType_JsChallenge
	//	*ReplaceSpecType_CaptchaChallenge
	ChallengeType      isReplaceSpecType_ChallengeType    `protobuf_oneof:"challenge_type"`
	MoreOption         *AdvancedOptionsType               `protobuf:"bytes,19,opt,name=more_option,json=moreOption" json:"more_option,omitempty"`
	UserIdentification *ves_io_schema_views.ObjectRefType `protobuf:"bytes,20,opt,name=user_identification,json=userIdentification" json:"user_identification,omitempty"`
	// Types that are valid to be assigned to RateLimitChoice:
	//	*ReplaceSpecType_DisableRateLimit
	//	*ReplaceSpecType_RateLimit
	RateLimitChoice         isReplaceSpecType_RateLimitChoice              `protobuf_oneof:"rate_limit_choice"`
	MaliciousUserMitigation *ves_io_schema_views.ObjectRefType             `protobuf:"bytes,32,opt,name=malicious_user_mitigation,json=maliciousUserMitigation" json:"malicious_user_mitigation,omitempty"`
	WafExclusionRules       []*ves_io_schema_policy.SimpleWafExclusionRule `protobuf:"bytes,33,rep,name=waf_exclusion_rules,json=wafExclusionRules" json:"waf_exclusion_rules,omitempty"`
}

func (m *ReplaceSpecType) Reset()                    { *m = ReplaceSpecType{} }
func (*ReplaceSpecType) ProtoMessage()               {}
func (*ReplaceSpecType) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{15} }

type isReplaceSpecType_LoadbalancerType interface {
	isReplaceSpecType_LoadbalancerType()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isReplaceSpecType_AdvertiseChoice interface {
	isReplaceSpecType_AdvertiseChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isReplaceSpecType_WafChoice interface {
	isReplaceSpecType_WafChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isReplaceSpecType_ChallengeType interface {
	isReplaceSpecType_ChallengeType()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isReplaceSpecType_RateLimitChoice interface {
	isReplaceSpecType_RateLimitChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type ReplaceSpecType_Http struct {
	Http *ves_io_schema4.Empty `protobuf:"bytes,2,opt,name=http,oneof"`
}
type ReplaceSpecType_HttpsAutoCert struct {
	HttpsAutoCert *ProxyTypeHttpsAutoCerts `protobuf:"bytes,27,opt,name=https_auto_cert,json=httpsAutoCert,oneof"`
}
type ReplaceSpecType_Https struct {
	Https *ProxyTypeHttps `protobuf:"bytes,3,opt,name=https,oneof"`
}
type ReplaceSpecType_DoNotAdvertise struct {
	DoNotAdvertise *ves_io_schema4.Empty `protobuf:"bytes,12,opt,name=do_not_advertise,json=doNotAdvertise,oneof"`
}
type ReplaceSpecType_AdvertiseOnPublicDefaultVip struct {
	AdvertiseOnPublicDefaultVip *ves_io_schema4.Empty `protobuf:"bytes,13,opt,name=advertise_on_public_default_vip,json=advertiseOnPublicDefaultVip,oneof"`
}
type ReplaceSpecType_AdvertiseOnPublic struct {
	AdvertiseOnPublic *ves_io_schema_views.AdvertisePublic `protobuf:"bytes,4,opt,name=advertise_on_public,json=advertiseOnPublic,oneof"`
}
type ReplaceSpecType_AdvertiseCustom struct {
	AdvertiseCustom *ves_io_schema_views.AdvertiseCustom `protobuf:"bytes,5,opt,name=advertise_custom,json=advertiseCustom,oneof"`
}
type ReplaceSpecType_DisableWaf struct {
	DisableWaf *ves_io_schema4.Empty `protobuf:"bytes,11,opt,name=disable_waf,json=disableWaf,oneof"`
}
type ReplaceSpecType_Waf struct {
	Waf *ves_io_schema_views.ObjectRefType `protobuf:"bytes,9,opt,name=waf,oneof"`
}
type ReplaceSpecType_WafRule struct {
	WafRule *ves_io_schema_views.ObjectRefType `protobuf:"bytes,10,opt,name=waf_rule,json=wafRule,oneof"`
}
type ReplaceSpecType_NoChallenge struct {
	NoChallenge *ves_io_schema4.Empty `protobuf:"bytes,26,opt,name=no_challenge,json=noChallenge,oneof"`
}
type ReplaceSpecType_JsChallenge struct {
	JsChallenge *ves_io_schema_virtual_host.JavascriptChallengeType `protobuf:"bytes,18,opt,name=js_challenge,json=jsChallenge,oneof"`
}
type ReplaceSpecType_CaptchaChallenge struct {
	CaptchaChallenge *ves_io_schema_virtual_host.CaptchaChallengeType `protobuf:"bytes,24,opt,name=captcha_challenge,json=captchaChallenge,oneof"`
}
type ReplaceSpecType_DisableRateLimit struct {
	DisableRateLimit *ves_io_schema4.Empty `protobuf:"bytes,22,opt,name=disable_rate_limit,json=disableRateLimit,oneof"`
}
type ReplaceSpecType_RateLimit struct {
	RateLimit *RateLimitConfigType `protobuf:"bytes,23,opt,name=rate_limit,json=rateLimit,oneof"`
}

func (*ReplaceSpecType_Http) isReplaceSpecType_LoadbalancerType()                       {}
func (*ReplaceSpecType_HttpsAutoCert) isReplaceSpecType_LoadbalancerType()              {}
func (*ReplaceSpecType_Https) isReplaceSpecType_LoadbalancerType()                      {}
func (*ReplaceSpecType_DoNotAdvertise) isReplaceSpecType_AdvertiseChoice()              {}
func (*ReplaceSpecType_AdvertiseOnPublicDefaultVip) isReplaceSpecType_AdvertiseChoice() {}
func (*ReplaceSpecType_AdvertiseOnPublic) isReplaceSpecType_AdvertiseChoice()           {}
func (*ReplaceSpecType_AdvertiseCustom) isReplaceSpecType_AdvertiseChoice()             {}
func (*ReplaceSpecType_DisableWaf) isReplaceSpecType_WafChoice()                        {}
func (*ReplaceSpecType_Waf) isReplaceSpecType_WafChoice()                               {}
func (*ReplaceSpecType_WafRule) isReplaceSpecType_WafChoice()                           {}
func (*ReplaceSpecType_NoChallenge) isReplaceSpecType_ChallengeType()                   {}
func (*ReplaceSpecType_JsChallenge) isReplaceSpecType_ChallengeType()                   {}
func (*ReplaceSpecType_CaptchaChallenge) isReplaceSpecType_ChallengeType()              {}
func (*ReplaceSpecType_DisableRateLimit) isReplaceSpecType_RateLimitChoice()            {}
func (*ReplaceSpecType_RateLimit) isReplaceSpecType_RateLimitChoice()                   {}

func (m *ReplaceSpecType) GetLoadbalancerType() isReplaceSpecType_LoadbalancerType {
	if m != nil {
		return m.LoadbalancerType
	}
	return nil
}
func (m *ReplaceSpecType) GetAdvertiseChoice() isReplaceSpecType_AdvertiseChoice {
	if m != nil {
		return m.AdvertiseChoice
	}
	return nil
}
func (m *ReplaceSpecType) GetWafChoice() isReplaceSpecType_WafChoice {
	if m != nil {
		return m.WafChoice
	}
	return nil
}
func (m *ReplaceSpecType) GetChallengeType() isReplaceSpecType_ChallengeType {
	if m != nil {
		return m.ChallengeType
	}
	return nil
}
func (m *ReplaceSpecType) GetRateLimitChoice() isReplaceSpecType_RateLimitChoice {
	if m != nil {
		return m.RateLimitChoice
	}
	return nil
}

func (m *ReplaceSpecType) GetDomains() []string {
	if m != nil {
		return m.Domains
	}
	return nil
}

func (m *ReplaceSpecType) GetHttp() *ves_io_schema4.Empty {
	if x, ok := m.GetLoadbalancerType().(*ReplaceSpecType_Http); ok {
		return x.Http
	}
	return nil
}

func (m *ReplaceSpecType) GetHttpsAutoCert() *ProxyTypeHttpsAutoCerts {
	if x, ok := m.GetLoadbalancerType().(*ReplaceSpecType_HttpsAutoCert); ok {
		return x.HttpsAutoCert
	}
	return nil
}

func (m *ReplaceSpecType) GetHttps() *ProxyTypeHttps {
	if x, ok := m.GetLoadbalancerType().(*ReplaceSpecType_Https); ok {
		return x.Https
	}
	return nil
}

func (m *ReplaceSpecType) GetDoNotAdvertise() *ves_io_schema4.Empty {
	if x, ok := m.GetAdvertiseChoice().(*ReplaceSpecType_DoNotAdvertise); ok {
		return x.DoNotAdvertise
	}
	return nil
}

func (m *ReplaceSpecType) GetAdvertiseOnPublicDefaultVip() *ves_io_schema4.Empty {
	if x, ok := m.GetAdvertiseChoice().(*ReplaceSpecType_AdvertiseOnPublicDefaultVip); ok {
		return x.AdvertiseOnPublicDefaultVip
	}
	return nil
}

func (m *ReplaceSpecType) GetAdvertiseOnPublic() *ves_io_schema_views.AdvertisePublic {
	if x, ok := m.GetAdvertiseChoice().(*ReplaceSpecType_AdvertiseOnPublic); ok {
		return x.AdvertiseOnPublic
	}
	return nil
}

func (m *ReplaceSpecType) GetAdvertiseCustom() *ves_io_schema_views.AdvertiseCustom {
	if x, ok := m.GetAdvertiseChoice().(*ReplaceSpecType_AdvertiseCustom); ok {
		return x.AdvertiseCustom
	}
	return nil
}

func (m *ReplaceSpecType) GetDefaultRoutePools() []*ves_io_schema_views.OriginPoolWithWeight {
	if m != nil {
		return m.DefaultRoutePools
	}
	return nil
}

func (m *ReplaceSpecType) GetRoutes() []*RouteType {
	if m != nil {
		return m.Routes
	}
	return nil
}

func (m *ReplaceSpecType) GetCorsPolicy() *ves_io_schema4.CorsPolicy {
	if m != nil {
		return m.CorsPolicy
	}
	return nil
}

func (m *ReplaceSpecType) GetDisableWaf() *ves_io_schema4.Empty {
	if x, ok := m.GetWafChoice().(*ReplaceSpecType_DisableWaf); ok {
		return x.DisableWaf
	}
	return nil
}

func (m *ReplaceSpecType) GetWaf() *ves_io_schema_views.ObjectRefType {
	if x, ok := m.GetWafChoice().(*ReplaceSpecType_Waf); ok {
		return x.Waf
	}
	return nil
}

func (m *ReplaceSpecType) GetWafRule() *ves_io_schema_views.ObjectRefType {
	if x, ok := m.GetWafChoice().(*ReplaceSpecType_WafRule); ok {
		return x.WafRule
	}
	return nil
}

func (m *ReplaceSpecType) GetAddLocation() bool {
	if m != nil {
		return m.AddLocation
	}
	return false
}

func (m *ReplaceSpecType) GetNoChallenge() *ves_io_schema4.Empty {
	if x, ok := m.GetChallengeType().(*ReplaceSpecType_NoChallenge); ok {
		return x.NoChallenge
	}
	return nil
}

func (m *ReplaceSpecType) GetJsChallenge() *ves_io_schema_virtual_host.JavascriptChallengeType {
	if x, ok := m.GetChallengeType().(*ReplaceSpecType_JsChallenge); ok {
		return x.JsChallenge
	}
	return nil
}

func (m *ReplaceSpecType) GetCaptchaChallenge() *ves_io_schema_virtual_host.CaptchaChallengeType {
	if x, ok := m.GetChallengeType().(*ReplaceSpecType_CaptchaChallenge); ok {
		return x.CaptchaChallenge
	}
	return nil
}

func (m *ReplaceSpecType) GetMoreOption() *AdvancedOptionsType {
	if m != nil {
		return m.MoreOption
	}
	return nil
}

func (m *ReplaceSpecType) GetUserIdentification() *ves_io_schema_views.ObjectRefType {
	if m != nil {
		return m.UserIdentification
	}
	return nil
}

func (m *ReplaceSpecType) GetDisableRateLimit() *ves_io_schema4.Empty {
	if x, ok := m.GetRateLimitChoice().(*ReplaceSpecType_DisableRateLimit); ok {
		return x.DisableRateLimit
	}
	return nil
}

func (m *ReplaceSpecType) GetRateLimit() *RateLimitConfigType {
	if x, ok := m.GetRateLimitChoice().(*ReplaceSpecType_RateLimit); ok {
		return x.RateLimit
	}
	return nil
}

func (m *ReplaceSpecType) GetMaliciousUserMitigation() *ves_io_schema_views.ObjectRefType {
	if m != nil {
		return m.MaliciousUserMitigation
	}
	return nil
}

func (m *ReplaceSpecType) GetWafExclusionRules() []*ves_io_schema_policy.SimpleWafExclusionRule {
	if m != nil {
		return m.WafExclusionRules
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*ReplaceSpecType) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _ReplaceSpecType_OneofMarshaler, _ReplaceSpecType_OneofUnmarshaler, _ReplaceSpecType_OneofSizer, []interface{}{
		(*ReplaceSpecType_Http)(nil),
		(*ReplaceSpecType_HttpsAutoCert)(nil),
		(*ReplaceSpecType_Https)(nil),
		(*ReplaceSpecType_DoNotAdvertise)(nil),
		(*ReplaceSpecType_AdvertiseOnPublicDefaultVip)(nil),
		(*ReplaceSpecType_AdvertiseOnPublic)(nil),
		(*ReplaceSpecType_AdvertiseCustom)(nil),
		(*ReplaceSpecType_DisableWaf)(nil),
		(*ReplaceSpecType_Waf)(nil),
		(*ReplaceSpecType_WafRule)(nil),
		(*ReplaceSpecType_NoChallenge)(nil),
		(*ReplaceSpecType_JsChallenge)(nil),
		(*ReplaceSpecType_CaptchaChallenge)(nil),
		(*ReplaceSpecType_DisableRateLimit)(nil),
		(*ReplaceSpecType_RateLimit)(nil),
	}
}

func _ReplaceSpecType_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*ReplaceSpecType)
	// loadbalancer_type
	switch x := m.LoadbalancerType.(type) {
	case *ReplaceSpecType_Http:
		_ = b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Http); err != nil {
			return err
		}
	case *ReplaceSpecType_HttpsAutoCert:
		_ = b.EncodeVarint(27<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.HttpsAutoCert); err != nil {
			return err
		}
	case *ReplaceSpecType_Https:
		_ = b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Https); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("ReplaceSpecType.LoadbalancerType has unexpected type %T", x)
	}
	// advertise_choice
	switch x := m.AdvertiseChoice.(type) {
	case *ReplaceSpecType_DoNotAdvertise:
		_ = b.EncodeVarint(12<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.DoNotAdvertise); err != nil {
			return err
		}
	case *ReplaceSpecType_AdvertiseOnPublicDefaultVip:
		_ = b.EncodeVarint(13<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.AdvertiseOnPublicDefaultVip); err != nil {
			return err
		}
	case *ReplaceSpecType_AdvertiseOnPublic:
		_ = b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.AdvertiseOnPublic); err != nil {
			return err
		}
	case *ReplaceSpecType_AdvertiseCustom:
		_ = b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.AdvertiseCustom); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("ReplaceSpecType.AdvertiseChoice has unexpected type %T", x)
	}
	// waf_choice
	switch x := m.WafChoice.(type) {
	case *ReplaceSpecType_DisableWaf:
		_ = b.EncodeVarint(11<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.DisableWaf); err != nil {
			return err
		}
	case *ReplaceSpecType_Waf:
		_ = b.EncodeVarint(9<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Waf); err != nil {
			return err
		}
	case *ReplaceSpecType_WafRule:
		_ = b.EncodeVarint(10<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.WafRule); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("ReplaceSpecType.WafChoice has unexpected type %T", x)
	}
	// challenge_type
	switch x := m.ChallengeType.(type) {
	case *ReplaceSpecType_NoChallenge:
		_ = b.EncodeVarint(26<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.NoChallenge); err != nil {
			return err
		}
	case *ReplaceSpecType_JsChallenge:
		_ = b.EncodeVarint(18<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.JsChallenge); err != nil {
			return err
		}
	case *ReplaceSpecType_CaptchaChallenge:
		_ = b.EncodeVarint(24<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.CaptchaChallenge); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("ReplaceSpecType.ChallengeType has unexpected type %T", x)
	}
	// rate_limit_choice
	switch x := m.RateLimitChoice.(type) {
	case *ReplaceSpecType_DisableRateLimit:
		_ = b.EncodeVarint(22<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.DisableRateLimit); err != nil {
			return err
		}
	case *ReplaceSpecType_RateLimit:
		_ = b.EncodeVarint(23<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.RateLimit); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("ReplaceSpecType.RateLimitChoice has unexpected type %T", x)
	}
	return nil
}

func _ReplaceSpecType_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*ReplaceSpecType)
	switch tag {
	case 2: // loadbalancer_type.http
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.LoadbalancerType = &ReplaceSpecType_Http{msg}
		return true, err
	case 27: // loadbalancer_type.https_auto_cert
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ProxyTypeHttpsAutoCerts)
		err := b.DecodeMessage(msg)
		m.LoadbalancerType = &ReplaceSpecType_HttpsAutoCert{msg}
		return true, err
	case 3: // loadbalancer_type.https
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ProxyTypeHttps)
		err := b.DecodeMessage(msg)
		m.LoadbalancerType = &ReplaceSpecType_Https{msg}
		return true, err
	case 12: // advertise_choice.do_not_advertise
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.AdvertiseChoice = &ReplaceSpecType_DoNotAdvertise{msg}
		return true, err
	case 13: // advertise_choice.advertise_on_public_default_vip
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.AdvertiseChoice = &ReplaceSpecType_AdvertiseOnPublicDefaultVip{msg}
		return true, err
	case 4: // advertise_choice.advertise_on_public
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema_views.AdvertisePublic)
		err := b.DecodeMessage(msg)
		m.AdvertiseChoice = &ReplaceSpecType_AdvertiseOnPublic{msg}
		return true, err
	case 5: // advertise_choice.advertise_custom
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema_views.AdvertiseCustom)
		err := b.DecodeMessage(msg)
		m.AdvertiseChoice = &ReplaceSpecType_AdvertiseCustom{msg}
		return true, err
	case 11: // waf_choice.disable_waf
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.WafChoice = &ReplaceSpecType_DisableWaf{msg}
		return true, err
	case 9: // waf_choice.waf
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema_views.ObjectRefType)
		err := b.DecodeMessage(msg)
		m.WafChoice = &ReplaceSpecType_Waf{msg}
		return true, err
	case 10: // waf_choice.waf_rule
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema_views.ObjectRefType)
		err := b.DecodeMessage(msg)
		m.WafChoice = &ReplaceSpecType_WafRule{msg}
		return true, err
	case 26: // challenge_type.no_challenge
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.ChallengeType = &ReplaceSpecType_NoChallenge{msg}
		return true, err
	case 18: // challenge_type.js_challenge
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema_virtual_host.JavascriptChallengeType)
		err := b.DecodeMessage(msg)
		m.ChallengeType = &ReplaceSpecType_JsChallenge{msg}
		return true, err
	case 24: // challenge_type.captcha_challenge
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema_virtual_host.CaptchaChallengeType)
		err := b.DecodeMessage(msg)
		m.ChallengeType = &ReplaceSpecType_CaptchaChallenge{msg}
		return true, err
	case 22: // rate_limit_choice.disable_rate_limit
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.RateLimitChoice = &ReplaceSpecType_DisableRateLimit{msg}
		return true, err
	case 23: // rate_limit_choice.rate_limit
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(RateLimitConfigType)
		err := b.DecodeMessage(msg)
		m.RateLimitChoice = &ReplaceSpecType_RateLimit{msg}
		return true, err
	default:
		return false, nil
	}
}

func _ReplaceSpecType_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*ReplaceSpecType)
	// loadbalancer_type
	switch x := m.LoadbalancerType.(type) {
	case *ReplaceSpecType_Http:
		s := proto.Size(x.Http)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ReplaceSpecType_HttpsAutoCert:
		s := proto.Size(x.HttpsAutoCert)
		n += proto.SizeVarint(27<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ReplaceSpecType_Https:
		s := proto.Size(x.Https)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	// advertise_choice
	switch x := m.AdvertiseChoice.(type) {
	case *ReplaceSpecType_DoNotAdvertise:
		s := proto.Size(x.DoNotAdvertise)
		n += proto.SizeVarint(12<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ReplaceSpecType_AdvertiseOnPublicDefaultVip:
		s := proto.Size(x.AdvertiseOnPublicDefaultVip)
		n += proto.SizeVarint(13<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ReplaceSpecType_AdvertiseOnPublic:
		s := proto.Size(x.AdvertiseOnPublic)
		n += proto.SizeVarint(4<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ReplaceSpecType_AdvertiseCustom:
		s := proto.Size(x.AdvertiseCustom)
		n += proto.SizeVarint(5<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	// waf_choice
	switch x := m.WafChoice.(type) {
	case *ReplaceSpecType_DisableWaf:
		s := proto.Size(x.DisableWaf)
		n += proto.SizeVarint(11<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ReplaceSpecType_Waf:
		s := proto.Size(x.Waf)
		n += proto.SizeVarint(9<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ReplaceSpecType_WafRule:
		s := proto.Size(x.WafRule)
		n += proto.SizeVarint(10<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	// challenge_type
	switch x := m.ChallengeType.(type) {
	case *ReplaceSpecType_NoChallenge:
		s := proto.Size(x.NoChallenge)
		n += proto.SizeVarint(26<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ReplaceSpecType_JsChallenge:
		s := proto.Size(x.JsChallenge)
		n += proto.SizeVarint(18<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ReplaceSpecType_CaptchaChallenge:
		s := proto.Size(x.CaptchaChallenge)
		n += proto.SizeVarint(24<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	// rate_limit_choice
	switch x := m.RateLimitChoice.(type) {
	case *ReplaceSpecType_DisableRateLimit:
		s := proto.Size(x.DisableRateLimit)
		n += proto.SizeVarint(22<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ReplaceSpecType_RateLimit:
		s := proto.Size(x.RateLimit)
		n += proto.SizeVarint(23<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// GetSpecType
//
// x-displayName: "Specification"
// Shape of the HTTP loadbalancer specification
type GetSpecType struct {
	Domains []string `protobuf:"bytes,1,rep,name=domains" json:"domains,omitempty"`
	// Types that are valid to be assigned to LoadbalancerType:
	//	*GetSpecType_Http
	//	*GetSpecType_HttpsAutoCert
	//	*GetSpecType_Https
	LoadbalancerType isGetSpecType_LoadbalancerType `protobuf_oneof:"loadbalancer_type"`
	// Types that are valid to be assigned to AdvertiseChoice:
	//	*GetSpecType_DoNotAdvertise
	//	*GetSpecType_AdvertiseOnPublicDefaultVip
	//	*GetSpecType_AdvertiseOnPublic
	//	*GetSpecType_AdvertiseCustom
	AdvertiseChoice   isGetSpecType_AdvertiseChoice               `protobuf_oneof:"advertise_choice"`
	DefaultRoutePools []*ves_io_schema_views.OriginPoolWithWeight `protobuf:"bytes,6,rep,name=default_route_pools,json=defaultRoutePools" json:"default_route_pools,omitempty"`
	Routes            []*RouteType                                `protobuf:"bytes,7,rep,name=routes" json:"routes,omitempty"`
	CorsPolicy        *ves_io_schema4.CorsPolicy                  `protobuf:"bytes,8,opt,name=cors_policy,json=corsPolicy" json:"cors_policy,omitempty"`
	// Types that are valid to be assigned to WafChoice:
	//	*GetSpecType_DisableWaf
	//	*GetSpecType_Waf
	//	*GetSpecType_WafRule
	WafChoice   isGetSpecType_WafChoice `protobuf_oneof:"waf_choice"`
	AddLocation bool                    `protobuf:"varint,17,opt,name=add_location,json=addLocation,proto3" json:"add_location,omitempty"`
	// Types that are valid to be assigned to ChallengeType:
	//	*GetSpecType_NoChallenge
	//	*GetSpecType_JsChallenge
	//	*GetSpecType_CaptchaChallenge
	ChallengeType      isGetSpecType_ChallengeType        `protobuf_oneof:"challenge_type"`
	MoreOption         *AdvancedOptionsType               `protobuf:"bytes,19,opt,name=more_option,json=moreOption" json:"more_option,omitempty"`
	UserIdentification *ves_io_schema_views.ObjectRefType `protobuf:"bytes,20,opt,name=user_identification,json=userIdentification" json:"user_identification,omitempty"`
	// Types that are valid to be assigned to RateLimitChoice:
	//	*GetSpecType_DisableRateLimit
	//	*GetSpecType_RateLimit
	RateLimitChoice         isGetSpecType_RateLimitChoice                  `protobuf_oneof:"rate_limit_choice"`
	MaliciousUserMitigation *ves_io_schema_views.ObjectRefType             `protobuf:"bytes,32,opt,name=malicious_user_mitigation,json=maliciousUserMitigation" json:"malicious_user_mitigation,omitempty"`
	WafExclusionRules       []*ves_io_schema_policy.SimpleWafExclusionRule `protobuf:"bytes,33,rep,name=waf_exclusion_rules,json=wafExclusionRules" json:"waf_exclusion_rules,omitempty"`
	HostName                string                                         `protobuf:"bytes,1001,opt,name=host_name,json=hostName,proto3" json:"host_name,omitempty"`
	DnsInfo                 []*ves_io_schema_virtual_host_dns_info.DnsInfo `protobuf:"bytes,1002,rep,name=dns_info,json=dnsInfo" json:"dns_info,omitempty"`
	State                   ves_io_schema_virtual_host.VirtualHostState    `protobuf:"varint,1003,opt,name=state,proto3,enum=ves.io.schema.virtual_host.VirtualHostState" json:"state,omitempty"`
	AutoCertState           ves_io_schema_virtual_host.CertificationState  `protobuf:"varint,1004,opt,name=auto_cert_state,json=autoCertState,proto3,enum=ves.io.schema.virtual_host.CertificationState" json:"auto_cert_state,omitempty"`
	AutoCertInfo            *ves_io_schema_virtual_host.AutoCertInfoType   `protobuf:"bytes,1010,opt,name=auto_cert_info,json=autoCertInfo" json:"auto_cert_info,omitempty"`
}

func (m *GetSpecType) Reset()                    { *m = GetSpecType{} }
func (*GetSpecType) ProtoMessage()               {}
func (*GetSpecType) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{16} }

type isGetSpecType_LoadbalancerType interface {
	isGetSpecType_LoadbalancerType()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isGetSpecType_AdvertiseChoice interface {
	isGetSpecType_AdvertiseChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isGetSpecType_WafChoice interface {
	isGetSpecType_WafChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isGetSpecType_ChallengeType interface {
	isGetSpecType_ChallengeType()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isGetSpecType_RateLimitChoice interface {
	isGetSpecType_RateLimitChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type GetSpecType_Http struct {
	Http *ves_io_schema4.Empty `protobuf:"bytes,2,opt,name=http,oneof"`
}
type GetSpecType_HttpsAutoCert struct {
	HttpsAutoCert *ProxyTypeHttpsAutoCerts `protobuf:"bytes,27,opt,name=https_auto_cert,json=httpsAutoCert,oneof"`
}
type GetSpecType_Https struct {
	Https *ProxyTypeHttps `protobuf:"bytes,3,opt,name=https,oneof"`
}
type GetSpecType_DoNotAdvertise struct {
	DoNotAdvertise *ves_io_schema4.Empty `protobuf:"bytes,12,opt,name=do_not_advertise,json=doNotAdvertise,oneof"`
}
type GetSpecType_AdvertiseOnPublicDefaultVip struct {
	AdvertiseOnPublicDefaultVip *ves_io_schema4.Empty `protobuf:"bytes,13,opt,name=advertise_on_public_default_vip,json=advertiseOnPublicDefaultVip,oneof"`
}
type GetSpecType_AdvertiseOnPublic struct {
	AdvertiseOnPublic *ves_io_schema_views.AdvertisePublic `protobuf:"bytes,4,opt,name=advertise_on_public,json=advertiseOnPublic,oneof"`
}
type GetSpecType_AdvertiseCustom struct {
	AdvertiseCustom *ves_io_schema_views.AdvertiseCustom `protobuf:"bytes,5,opt,name=advertise_custom,json=advertiseCustom,oneof"`
}
type GetSpecType_DisableWaf struct {
	DisableWaf *ves_io_schema4.Empty `protobuf:"bytes,11,opt,name=disable_waf,json=disableWaf,oneof"`
}
type GetSpecType_Waf struct {
	Waf *ves_io_schema_views.ObjectRefType `protobuf:"bytes,9,opt,name=waf,oneof"`
}
type GetSpecType_WafRule struct {
	WafRule *ves_io_schema_views.ObjectRefType `protobuf:"bytes,10,opt,name=waf_rule,json=wafRule,oneof"`
}
type GetSpecType_NoChallenge struct {
	NoChallenge *ves_io_schema4.Empty `protobuf:"bytes,26,opt,name=no_challenge,json=noChallenge,oneof"`
}
type GetSpecType_JsChallenge struct {
	JsChallenge *ves_io_schema_virtual_host.JavascriptChallengeType `protobuf:"bytes,18,opt,name=js_challenge,json=jsChallenge,oneof"`
}
type GetSpecType_CaptchaChallenge struct {
	CaptchaChallenge *ves_io_schema_virtual_host.CaptchaChallengeType `protobuf:"bytes,24,opt,name=captcha_challenge,json=captchaChallenge,oneof"`
}
type GetSpecType_DisableRateLimit struct {
	DisableRateLimit *ves_io_schema4.Empty `protobuf:"bytes,22,opt,name=disable_rate_limit,json=disableRateLimit,oneof"`
}
type GetSpecType_RateLimit struct {
	RateLimit *RateLimitConfigType `protobuf:"bytes,23,opt,name=rate_limit,json=rateLimit,oneof"`
}

func (*GetSpecType_Http) isGetSpecType_LoadbalancerType()                       {}
func (*GetSpecType_HttpsAutoCert) isGetSpecType_LoadbalancerType()              {}
func (*GetSpecType_Https) isGetSpecType_LoadbalancerType()                      {}
func (*GetSpecType_DoNotAdvertise) isGetSpecType_AdvertiseChoice()              {}
func (*GetSpecType_AdvertiseOnPublicDefaultVip) isGetSpecType_AdvertiseChoice() {}
func (*GetSpecType_AdvertiseOnPublic) isGetSpecType_AdvertiseChoice()           {}
func (*GetSpecType_AdvertiseCustom) isGetSpecType_AdvertiseChoice()             {}
func (*GetSpecType_DisableWaf) isGetSpecType_WafChoice()                        {}
func (*GetSpecType_Waf) isGetSpecType_WafChoice()                               {}
func (*GetSpecType_WafRule) isGetSpecType_WafChoice()                           {}
func (*GetSpecType_NoChallenge) isGetSpecType_ChallengeType()                   {}
func (*GetSpecType_JsChallenge) isGetSpecType_ChallengeType()                   {}
func (*GetSpecType_CaptchaChallenge) isGetSpecType_ChallengeType()              {}
func (*GetSpecType_DisableRateLimit) isGetSpecType_RateLimitChoice()            {}
func (*GetSpecType_RateLimit) isGetSpecType_RateLimitChoice()                   {}

func (m *GetSpecType) GetLoadbalancerType() isGetSpecType_LoadbalancerType {
	if m != nil {
		return m.LoadbalancerType
	}
	return nil
}
func (m *GetSpecType) GetAdvertiseChoice() isGetSpecType_AdvertiseChoice {
	if m != nil {
		return m.AdvertiseChoice
	}
	return nil
}
func (m *GetSpecType) GetWafChoice() isGetSpecType_WafChoice {
	if m != nil {
		return m.WafChoice
	}
	return nil
}
func (m *GetSpecType) GetChallengeType() isGetSpecType_ChallengeType {
	if m != nil {
		return m.ChallengeType
	}
	return nil
}
func (m *GetSpecType) GetRateLimitChoice() isGetSpecType_RateLimitChoice {
	if m != nil {
		return m.RateLimitChoice
	}
	return nil
}

func (m *GetSpecType) GetDomains() []string {
	if m != nil {
		return m.Domains
	}
	return nil
}

func (m *GetSpecType) GetHttp() *ves_io_schema4.Empty {
	if x, ok := m.GetLoadbalancerType().(*GetSpecType_Http); ok {
		return x.Http
	}
	return nil
}

func (m *GetSpecType) GetHttpsAutoCert() *ProxyTypeHttpsAutoCerts {
	if x, ok := m.GetLoadbalancerType().(*GetSpecType_HttpsAutoCert); ok {
		return x.HttpsAutoCert
	}
	return nil
}

func (m *GetSpecType) GetHttps() *ProxyTypeHttps {
	if x, ok := m.GetLoadbalancerType().(*GetSpecType_Https); ok {
		return x.Https
	}
	return nil
}

func (m *GetSpecType) GetDoNotAdvertise() *ves_io_schema4.Empty {
	if x, ok := m.GetAdvertiseChoice().(*GetSpecType_DoNotAdvertise); ok {
		return x.DoNotAdvertise
	}
	return nil
}

func (m *GetSpecType) GetAdvertiseOnPublicDefaultVip() *ves_io_schema4.Empty {
	if x, ok := m.GetAdvertiseChoice().(*GetSpecType_AdvertiseOnPublicDefaultVip); ok {
		return x.AdvertiseOnPublicDefaultVip
	}
	return nil
}

func (m *GetSpecType) GetAdvertiseOnPublic() *ves_io_schema_views.AdvertisePublic {
	if x, ok := m.GetAdvertiseChoice().(*GetSpecType_AdvertiseOnPublic); ok {
		return x.AdvertiseOnPublic
	}
	return nil
}

func (m *GetSpecType) GetAdvertiseCustom() *ves_io_schema_views.AdvertiseCustom {
	if x, ok := m.GetAdvertiseChoice().(*GetSpecType_AdvertiseCustom); ok {
		return x.AdvertiseCustom
	}
	return nil
}

func (m *GetSpecType) GetDefaultRoutePools() []*ves_io_schema_views.OriginPoolWithWeight {
	if m != nil {
		return m.DefaultRoutePools
	}
	return nil
}

func (m *GetSpecType) GetRoutes() []*RouteType {
	if m != nil {
		return m.Routes
	}
	return nil
}

func (m *GetSpecType) GetCorsPolicy() *ves_io_schema4.CorsPolicy {
	if m != nil {
		return m.CorsPolicy
	}
	return nil
}

func (m *GetSpecType) GetDisableWaf() *ves_io_schema4.Empty {
	if x, ok := m.GetWafChoice().(*GetSpecType_DisableWaf); ok {
		return x.DisableWaf
	}
	return nil
}

func (m *GetSpecType) GetWaf() *ves_io_schema_views.ObjectRefType {
	if x, ok := m.GetWafChoice().(*GetSpecType_Waf); ok {
		return x.Waf
	}
	return nil
}

func (m *GetSpecType) GetWafRule() *ves_io_schema_views.ObjectRefType {
	if x, ok := m.GetWafChoice().(*GetSpecType_WafRule); ok {
		return x.WafRule
	}
	return nil
}

func (m *GetSpecType) GetAddLocation() bool {
	if m != nil {
		return m.AddLocation
	}
	return false
}

func (m *GetSpecType) GetNoChallenge() *ves_io_schema4.Empty {
	if x, ok := m.GetChallengeType().(*GetSpecType_NoChallenge); ok {
		return x.NoChallenge
	}
	return nil
}

func (m *GetSpecType) GetJsChallenge() *ves_io_schema_virtual_host.JavascriptChallengeType {
	if x, ok := m.GetChallengeType().(*GetSpecType_JsChallenge); ok {
		return x.JsChallenge
	}
	return nil
}

func (m *GetSpecType) GetCaptchaChallenge() *ves_io_schema_virtual_host.CaptchaChallengeType {
	if x, ok := m.GetChallengeType().(*GetSpecType_CaptchaChallenge); ok {
		return x.CaptchaChallenge
	}
	return nil
}

func (m *GetSpecType) GetMoreOption() *AdvancedOptionsType {
	if m != nil {
		return m.MoreOption
	}
	return nil
}

func (m *GetSpecType) GetUserIdentification() *ves_io_schema_views.ObjectRefType {
	if m != nil {
		return m.UserIdentification
	}
	return nil
}

func (m *GetSpecType) GetDisableRateLimit() *ves_io_schema4.Empty {
	if x, ok := m.GetRateLimitChoice().(*GetSpecType_DisableRateLimit); ok {
		return x.DisableRateLimit
	}
	return nil
}

func (m *GetSpecType) GetRateLimit() *RateLimitConfigType {
	if x, ok := m.GetRateLimitChoice().(*GetSpecType_RateLimit); ok {
		return x.RateLimit
	}
	return nil
}

func (m *GetSpecType) GetMaliciousUserMitigation() *ves_io_schema_views.ObjectRefType {
	if m != nil {
		return m.MaliciousUserMitigation
	}
	return nil
}

func (m *GetSpecType) GetWafExclusionRules() []*ves_io_schema_policy.SimpleWafExclusionRule {
	if m != nil {
		return m.WafExclusionRules
	}
	return nil
}

func (m *GetSpecType) GetHostName() string {
	if m != nil {
		return m.HostName
	}
	return ""
}

func (m *GetSpecType) GetDnsInfo() []*ves_io_schema_virtual_host_dns_info.DnsInfo {
	if m != nil {
		return m.DnsInfo
	}
	return nil
}

func (m *GetSpecType) GetState() ves_io_schema_virtual_host.VirtualHostState {
	if m != nil {
		return m.State
	}
	return ves_io_schema_virtual_host.VIRTUAL_HOST_READY
}

func (m *GetSpecType) GetAutoCertState() ves_io_schema_virtual_host.CertificationState {
	if m != nil {
		return m.AutoCertState
	}
	return ves_io_schema_virtual_host.AutoCertDisabled
}

func (m *GetSpecType) GetAutoCertInfo() *ves_io_schema_virtual_host.AutoCertInfoType {
	if m != nil {
		return m.AutoCertInfo
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*GetSpecType) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _GetSpecType_OneofMarshaler, _GetSpecType_OneofUnmarshaler, _GetSpecType_OneofSizer, []interface{}{
		(*GetSpecType_Http)(nil),
		(*GetSpecType_HttpsAutoCert)(nil),
		(*GetSpecType_Https)(nil),
		(*GetSpecType_DoNotAdvertise)(nil),
		(*GetSpecType_AdvertiseOnPublicDefaultVip)(nil),
		(*GetSpecType_AdvertiseOnPublic)(nil),
		(*GetSpecType_AdvertiseCustom)(nil),
		(*GetSpecType_DisableWaf)(nil),
		(*GetSpecType_Waf)(nil),
		(*GetSpecType_WafRule)(nil),
		(*GetSpecType_NoChallenge)(nil),
		(*GetSpecType_JsChallenge)(nil),
		(*GetSpecType_CaptchaChallenge)(nil),
		(*GetSpecType_DisableRateLimit)(nil),
		(*GetSpecType_RateLimit)(nil),
	}
}

func _GetSpecType_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*GetSpecType)
	// loadbalancer_type
	switch x := m.LoadbalancerType.(type) {
	case *GetSpecType_Http:
		_ = b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Http); err != nil {
			return err
		}
	case *GetSpecType_HttpsAutoCert:
		_ = b.EncodeVarint(27<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.HttpsAutoCert); err != nil {
			return err
		}
	case *GetSpecType_Https:
		_ = b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Https); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("GetSpecType.LoadbalancerType has unexpected type %T", x)
	}
	// advertise_choice
	switch x := m.AdvertiseChoice.(type) {
	case *GetSpecType_DoNotAdvertise:
		_ = b.EncodeVarint(12<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.DoNotAdvertise); err != nil {
			return err
		}
	case *GetSpecType_AdvertiseOnPublicDefaultVip:
		_ = b.EncodeVarint(13<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.AdvertiseOnPublicDefaultVip); err != nil {
			return err
		}
	case *GetSpecType_AdvertiseOnPublic:
		_ = b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.AdvertiseOnPublic); err != nil {
			return err
		}
	case *GetSpecType_AdvertiseCustom:
		_ = b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.AdvertiseCustom); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("GetSpecType.AdvertiseChoice has unexpected type %T", x)
	}
	// waf_choice
	switch x := m.WafChoice.(type) {
	case *GetSpecType_DisableWaf:
		_ = b.EncodeVarint(11<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.DisableWaf); err != nil {
			return err
		}
	case *GetSpecType_Waf:
		_ = b.EncodeVarint(9<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Waf); err != nil {
			return err
		}
	case *GetSpecType_WafRule:
		_ = b.EncodeVarint(10<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.WafRule); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("GetSpecType.WafChoice has unexpected type %T", x)
	}
	// challenge_type
	switch x := m.ChallengeType.(type) {
	case *GetSpecType_NoChallenge:
		_ = b.EncodeVarint(26<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.NoChallenge); err != nil {
			return err
		}
	case *GetSpecType_JsChallenge:
		_ = b.EncodeVarint(18<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.JsChallenge); err != nil {
			return err
		}
	case *GetSpecType_CaptchaChallenge:
		_ = b.EncodeVarint(24<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.CaptchaChallenge); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("GetSpecType.ChallengeType has unexpected type %T", x)
	}
	// rate_limit_choice
	switch x := m.RateLimitChoice.(type) {
	case *GetSpecType_DisableRateLimit:
		_ = b.EncodeVarint(22<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.DisableRateLimit); err != nil {
			return err
		}
	case *GetSpecType_RateLimit:
		_ = b.EncodeVarint(23<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.RateLimit); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("GetSpecType.RateLimitChoice has unexpected type %T", x)
	}
	return nil
}

func _GetSpecType_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*GetSpecType)
	switch tag {
	case 2: // loadbalancer_type.http
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.LoadbalancerType = &GetSpecType_Http{msg}
		return true, err
	case 27: // loadbalancer_type.https_auto_cert
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ProxyTypeHttpsAutoCerts)
		err := b.DecodeMessage(msg)
		m.LoadbalancerType = &GetSpecType_HttpsAutoCert{msg}
		return true, err
	case 3: // loadbalancer_type.https
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ProxyTypeHttps)
		err := b.DecodeMessage(msg)
		m.LoadbalancerType = &GetSpecType_Https{msg}
		return true, err
	case 12: // advertise_choice.do_not_advertise
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.AdvertiseChoice = &GetSpecType_DoNotAdvertise{msg}
		return true, err
	case 13: // advertise_choice.advertise_on_public_default_vip
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.AdvertiseChoice = &GetSpecType_AdvertiseOnPublicDefaultVip{msg}
		return true, err
	case 4: // advertise_choice.advertise_on_public
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema_views.AdvertisePublic)
		err := b.DecodeMessage(msg)
		m.AdvertiseChoice = &GetSpecType_AdvertiseOnPublic{msg}
		return true, err
	case 5: // advertise_choice.advertise_custom
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema_views.AdvertiseCustom)
		err := b.DecodeMessage(msg)
		m.AdvertiseChoice = &GetSpecType_AdvertiseCustom{msg}
		return true, err
	case 11: // waf_choice.disable_waf
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.WafChoice = &GetSpecType_DisableWaf{msg}
		return true, err
	case 9: // waf_choice.waf
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema_views.ObjectRefType)
		err := b.DecodeMessage(msg)
		m.WafChoice = &GetSpecType_Waf{msg}
		return true, err
	case 10: // waf_choice.waf_rule
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema_views.ObjectRefType)
		err := b.DecodeMessage(msg)
		m.WafChoice = &GetSpecType_WafRule{msg}
		return true, err
	case 26: // challenge_type.no_challenge
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.ChallengeType = &GetSpecType_NoChallenge{msg}
		return true, err
	case 18: // challenge_type.js_challenge
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema_virtual_host.JavascriptChallengeType)
		err := b.DecodeMessage(msg)
		m.ChallengeType = &GetSpecType_JsChallenge{msg}
		return true, err
	case 24: // challenge_type.captcha_challenge
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema_virtual_host.CaptchaChallengeType)
		err := b.DecodeMessage(msg)
		m.ChallengeType = &GetSpecType_CaptchaChallenge{msg}
		return true, err
	case 22: // rate_limit_choice.disable_rate_limit
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.RateLimitChoice = &GetSpecType_DisableRateLimit{msg}
		return true, err
	case 23: // rate_limit_choice.rate_limit
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(RateLimitConfigType)
		err := b.DecodeMessage(msg)
		m.RateLimitChoice = &GetSpecType_RateLimit{msg}
		return true, err
	default:
		return false, nil
	}
}

func _GetSpecType_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*GetSpecType)
	// loadbalancer_type
	switch x := m.LoadbalancerType.(type) {
	case *GetSpecType_Http:
		s := proto.Size(x.Http)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *GetSpecType_HttpsAutoCert:
		s := proto.Size(x.HttpsAutoCert)
		n += proto.SizeVarint(27<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *GetSpecType_Https:
		s := proto.Size(x.Https)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	// advertise_choice
	switch x := m.AdvertiseChoice.(type) {
	case *GetSpecType_DoNotAdvertise:
		s := proto.Size(x.DoNotAdvertise)
		n += proto.SizeVarint(12<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *GetSpecType_AdvertiseOnPublicDefaultVip:
		s := proto.Size(x.AdvertiseOnPublicDefaultVip)
		n += proto.SizeVarint(13<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *GetSpecType_AdvertiseOnPublic:
		s := proto.Size(x.AdvertiseOnPublic)
		n += proto.SizeVarint(4<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *GetSpecType_AdvertiseCustom:
		s := proto.Size(x.AdvertiseCustom)
		n += proto.SizeVarint(5<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	// waf_choice
	switch x := m.WafChoice.(type) {
	case *GetSpecType_DisableWaf:
		s := proto.Size(x.DisableWaf)
		n += proto.SizeVarint(11<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *GetSpecType_Waf:
		s := proto.Size(x.Waf)
		n += proto.SizeVarint(9<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *GetSpecType_WafRule:
		s := proto.Size(x.WafRule)
		n += proto.SizeVarint(10<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	// challenge_type
	switch x := m.ChallengeType.(type) {
	case *GetSpecType_NoChallenge:
		s := proto.Size(x.NoChallenge)
		n += proto.SizeVarint(26<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *GetSpecType_JsChallenge:
		s := proto.Size(x.JsChallenge)
		n += proto.SizeVarint(18<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *GetSpecType_CaptchaChallenge:
		s := proto.Size(x.CaptchaChallenge)
		n += proto.SizeVarint(24<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	// rate_limit_choice
	switch x := m.RateLimitChoice.(type) {
	case *GetSpecType_DisableRateLimit:
		s := proto.Size(x.DisableRateLimit)
		n += proto.SizeVarint(22<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *GetSpecType_RateLimit:
		s := proto.Size(x.RateLimit)
		n += proto.SizeVarint(23<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

func init() {
	proto.RegisterType((*DownstreamTlsValidationContext)(nil), "ves.io.schema.views.http_loadbalancer.DownstreamTlsValidationContext")
	golang_proto.RegisterType((*DownstreamTlsValidationContext)(nil), "ves.io.schema.views.http_loadbalancer.DownstreamTlsValidationContext")
	proto.RegisterType((*DownstreamTlsParamsType)(nil), "ves.io.schema.views.http_loadbalancer.DownstreamTlsParamsType")
	golang_proto.RegisterType((*DownstreamTlsParamsType)(nil), "ves.io.schema.views.http_loadbalancer.DownstreamTlsParamsType")
	proto.RegisterType((*ProxyTypeHttps)(nil), "ves.io.schema.views.http_loadbalancer.ProxyTypeHttps")
	golang_proto.RegisterType((*ProxyTypeHttps)(nil), "ves.io.schema.views.http_loadbalancer.ProxyTypeHttps")
	proto.RegisterType((*ProxyTypeHttpsAutoCerts)(nil), "ves.io.schema.views.http_loadbalancer.ProxyTypeHttpsAutoCerts")
	golang_proto.RegisterType((*ProxyTypeHttpsAutoCerts)(nil), "ves.io.schema.views.http_loadbalancer.ProxyTypeHttpsAutoCerts")
	proto.RegisterType((*RouteTypeSimpleWithDefaultOriginPool)(nil), "ves.io.schema.views.http_loadbalancer.RouteTypeSimpleWithDefaultOriginPool")
	golang_proto.RegisterType((*RouteTypeSimpleWithDefaultOriginPool)(nil), "ves.io.schema.views.http_loadbalancer.RouteTypeSimpleWithDefaultOriginPool")
	proto.RegisterType((*RouteTypeSimple)(nil), "ves.io.schema.views.http_loadbalancer.RouteTypeSimple")
	golang_proto.RegisterType((*RouteTypeSimple)(nil), "ves.io.schema.views.http_loadbalancer.RouteTypeSimple")
	proto.RegisterType((*RouteTypeRedirect)(nil), "ves.io.schema.views.http_loadbalancer.RouteTypeRedirect")
	golang_proto.RegisterType((*RouteTypeRedirect)(nil), "ves.io.schema.views.http_loadbalancer.RouteTypeRedirect")
	proto.RegisterType((*RouteTypeDirectResponse)(nil), "ves.io.schema.views.http_loadbalancer.RouteTypeDirectResponse")
	golang_proto.RegisterType((*RouteTypeDirectResponse)(nil), "ves.io.schema.views.http_loadbalancer.RouteTypeDirectResponse")
	proto.RegisterType((*RouteTypeCustomRoute)(nil), "ves.io.schema.views.http_loadbalancer.RouteTypeCustomRoute")
	golang_proto.RegisterType((*RouteTypeCustomRoute)(nil), "ves.io.schema.views.http_loadbalancer.RouteTypeCustomRoute")
	proto.RegisterType((*RouteType)(nil), "ves.io.schema.views.http_loadbalancer.RouteType")
	golang_proto.RegisterType((*RouteType)(nil), "ves.io.schema.views.http_loadbalancer.RouteType")
	proto.RegisterType((*AdvancedOptionsType)(nil), "ves.io.schema.views.http_loadbalancer.AdvancedOptionsType")
	golang_proto.RegisterType((*AdvancedOptionsType)(nil), "ves.io.schema.views.http_loadbalancer.AdvancedOptionsType")
	proto.RegisterType((*CustomIpAllowedList)(nil), "ves.io.schema.views.http_loadbalancer.CustomIpAllowedList")
	golang_proto.RegisterType((*CustomIpAllowedList)(nil), "ves.io.schema.views.http_loadbalancer.CustomIpAllowedList")
	proto.RegisterType((*RateLimitConfigType)(nil), "ves.io.schema.views.http_loadbalancer.RateLimitConfigType")
	golang_proto.RegisterType((*RateLimitConfigType)(nil), "ves.io.schema.views.http_loadbalancer.RateLimitConfigType")
	proto.RegisterType((*GlobalSpecType)(nil), "ves.io.schema.views.http_loadbalancer.GlobalSpecType")
	golang_proto.RegisterType((*GlobalSpecType)(nil), "ves.io.schema.views.http_loadbalancer.GlobalSpecType")
	proto.RegisterType((*CreateSpecType)(nil), "ves.io.schema.views.http_loadbalancer.CreateSpecType")
	golang_proto.RegisterType((*CreateSpecType)(nil), "ves.io.schema.views.http_loadbalancer.CreateSpecType")
	proto.RegisterType((*ReplaceSpecType)(nil), "ves.io.schema.views.http_loadbalancer.ReplaceSpecType")
	golang_proto.RegisterType((*ReplaceSpecType)(nil), "ves.io.schema.views.http_loadbalancer.ReplaceSpecType")
	proto.RegisterType((*GetSpecType)(nil), "ves.io.schema.views.http_loadbalancer.GetSpecType")
	golang_proto.RegisterType((*GetSpecType)(nil), "ves.io.schema.views.http_loadbalancer.GetSpecType")
}
func (this *DownstreamTlsValidationContext) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DownstreamTlsValidationContext)
	if !ok {
		that2, ok := that.(DownstreamTlsValidationContext)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.TrustedCaUrl != that1.TrustedCaUrl {
		return false
	}
	return true
}
func (this *DownstreamTlsParamsType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DownstreamTlsParamsType)
	if !ok {
		that2, ok := that.(DownstreamTlsParamsType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.TlsConfig.Equal(that1.TlsConfig) {
		return false
	}
	if len(this.TlsCertificates) != len(that1.TlsCertificates) {
		return false
	}
	for i := range this.TlsCertificates {
		if !this.TlsCertificates[i].Equal(that1.TlsCertificates[i]) {
			return false
		}
	}
	if that1.MtlsChoice == nil {
		if this.MtlsChoice != nil {
			return false
		}
	} else if this.MtlsChoice == nil {
		return false
	} else if !this.MtlsChoice.Equal(that1.MtlsChoice) {
		return false
	}
	return true
}
func (this *DownstreamTlsParamsType_NoMtls) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DownstreamTlsParamsType_NoMtls)
	if !ok {
		that2, ok := that.(DownstreamTlsParamsType_NoMtls)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NoMtls.Equal(that1.NoMtls) {
		return false
	}
	return true
}
func (this *DownstreamTlsParamsType_UseMtls) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DownstreamTlsParamsType_UseMtls)
	if !ok {
		that2, ok := that.(DownstreamTlsParamsType_UseMtls)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.UseMtls.Equal(that1.UseMtls) {
		return false
	}
	return true
}
func (this *ProxyTypeHttps) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ProxyTypeHttps)
	if !ok {
		that2, ok := that.(ProxyTypeHttps)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.HttpRedirect != that1.HttpRedirect {
		return false
	}
	if this.AddHsts != that1.AddHsts {
		return false
	}
	if !this.TlsParameters.Equal(that1.TlsParameters) {
		return false
	}
	return true
}
func (this *ProxyTypeHttpsAutoCerts) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ProxyTypeHttpsAutoCerts)
	if !ok {
		that2, ok := that.(ProxyTypeHttpsAutoCerts)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.HttpRedirect != that1.HttpRedirect {
		return false
	}
	if this.AddHsts != that1.AddHsts {
		return false
	}
	return true
}
func (this *RouteTypeSimpleWithDefaultOriginPool) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RouteTypeSimpleWithDefaultOriginPool)
	if !ok {
		that2, ok := that.(RouteTypeSimpleWithDefaultOriginPool)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.HttpMethod != that1.HttpMethod {
		return false
	}
	if !this.Path.Equal(that1.Path) {
		return false
	}
	if that1.HostRewriteParams == nil {
		if this.HostRewriteParams != nil {
			return false
		}
	} else if this.HostRewriteParams == nil {
		return false
	} else if !this.HostRewriteParams.Equal(that1.HostRewriteParams) {
		return false
	}
	return true
}
func (this *RouteTypeSimpleWithDefaultOriginPool_AutoHostRewrite) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RouteTypeSimpleWithDefaultOriginPool_AutoHostRewrite)
	if !ok {
		that2, ok := that.(RouteTypeSimpleWithDefaultOriginPool_AutoHostRewrite)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AutoHostRewrite.Equal(that1.AutoHostRewrite) {
		return false
	}
	return true
}
func (this *RouteTypeSimpleWithDefaultOriginPool_HostRewrite) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RouteTypeSimpleWithDefaultOriginPool_HostRewrite)
	if !ok {
		that2, ok := that.(RouteTypeSimpleWithDefaultOriginPool_HostRewrite)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.HostRewrite != that1.HostRewrite {
		return false
	}
	return true
}
func (this *RouteTypeSimpleWithDefaultOriginPool_DisableHostRewrite) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RouteTypeSimpleWithDefaultOriginPool_DisableHostRewrite)
	if !ok {
		that2, ok := that.(RouteTypeSimpleWithDefaultOriginPool_DisableHostRewrite)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DisableHostRewrite.Equal(that1.DisableHostRewrite) {
		return false
	}
	return true
}
func (this *RouteTypeSimple) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RouteTypeSimple)
	if !ok {
		that2, ok := that.(RouteTypeSimple)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Path.Equal(that1.Path) {
		return false
	}
	if this.HttpMethod != that1.HttpMethod {
		return false
	}
	if len(this.OriginPools) != len(that1.OriginPools) {
		return false
	}
	for i := range this.OriginPools {
		if !this.OriginPools[i].Equal(that1.OriginPools[i]) {
			return false
		}
	}
	if that1.HostRewriteParams == nil {
		if this.HostRewriteParams != nil {
			return false
		}
	} else if this.HostRewriteParams == nil {
		return false
	} else if !this.HostRewriteParams.Equal(that1.HostRewriteParams) {
		return false
	}
	return true
}
func (this *RouteTypeSimple_AutoHostRewrite) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RouteTypeSimple_AutoHostRewrite)
	if !ok {
		that2, ok := that.(RouteTypeSimple_AutoHostRewrite)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AutoHostRewrite.Equal(that1.AutoHostRewrite) {
		return false
	}
	return true
}
func (this *RouteTypeSimple_HostRewrite) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RouteTypeSimple_HostRewrite)
	if !ok {
		that2, ok := that.(RouteTypeSimple_HostRewrite)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.HostRewrite != that1.HostRewrite {
		return false
	}
	return true
}
func (this *RouteTypeSimple_DisableHostRewrite) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RouteTypeSimple_DisableHostRewrite)
	if !ok {
		that2, ok := that.(RouteTypeSimple_DisableHostRewrite)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DisableHostRewrite.Equal(that1.DisableHostRewrite) {
		return false
	}
	return true
}
func (this *RouteTypeRedirect) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RouteTypeRedirect)
	if !ok {
		that2, ok := that.(RouteTypeRedirect)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Path.Equal(that1.Path) {
		return false
	}
	if this.HttpMethod != that1.HttpMethod {
		return false
	}
	if !this.RouteRedirect.Equal(that1.RouteRedirect) {
		return false
	}
	return true
}
func (this *RouteTypeDirectResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RouteTypeDirectResponse)
	if !ok {
		that2, ok := that.(RouteTypeDirectResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Path.Equal(that1.Path) {
		return false
	}
	if this.HttpMethod != that1.HttpMethod {
		return false
	}
	if !this.RouteDirectResponse.Equal(that1.RouteDirectResponse) {
		return false
	}
	return true
}
func (this *RouteTypeCustomRoute) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RouteTypeCustomRoute)
	if !ok {
		that2, ok := that.(RouteTypeCustomRoute)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.RouteRef.Equal(that1.RouteRef) {
		return false
	}
	return true
}
func (this *RouteType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RouteType)
	if !ok {
		that2, ok := that.(RouteType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.Choice == nil {
		if this.Choice != nil {
			return false
		}
	} else if this.Choice == nil {
		return false
	} else if !this.Choice.Equal(that1.Choice) {
		return false
	}
	return true
}
func (this *RouteType_SimpleRoute) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RouteType_SimpleRoute)
	if !ok {
		that2, ok := that.(RouteType_SimpleRoute)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.SimpleRoute.Equal(that1.SimpleRoute) {
		return false
	}
	return true
}
func (this *RouteType_RedirectRoute) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RouteType_RedirectRoute)
	if !ok {
		that2, ok := that.(RouteType_RedirectRoute)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.RedirectRoute.Equal(that1.RedirectRoute) {
		return false
	}
	return true
}
func (this *RouteType_DirectResponseRoute) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RouteType_DirectResponseRoute)
	if !ok {
		that2, ok := that.(RouteType_DirectResponseRoute)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DirectResponseRoute.Equal(that1.DirectResponseRoute) {
		return false
	}
	return true
}
func (this *RouteType_CustomRouteObject) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RouteType_CustomRouteObject)
	if !ok {
		that2, ok := that.(RouteType_CustomRouteObject)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.CustomRouteObject.Equal(that1.CustomRouteObject) {
		return false
	}
	return true
}
func (this *AdvancedOptionsType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AdvancedOptionsType)
	if !ok {
		that2, ok := that.(AdvancedOptionsType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.RequestHeadersToAdd) != len(that1.RequestHeadersToAdd) {
		return false
	}
	for i := range this.RequestHeadersToAdd {
		if !this.RequestHeadersToAdd[i].Equal(that1.RequestHeadersToAdd[i]) {
			return false
		}
	}
	if len(this.RequestHeadersToRemove) != len(that1.RequestHeadersToRemove) {
		return false
	}
	for i := range this.RequestHeadersToRemove {
		if this.RequestHeadersToRemove[i] != that1.RequestHeadersToRemove[i] {
			return false
		}
	}
	if len(this.ResponseHeadersToAdd) != len(that1.ResponseHeadersToAdd) {
		return false
	}
	for i := range this.ResponseHeadersToAdd {
		if !this.ResponseHeadersToAdd[i].Equal(that1.ResponseHeadersToAdd[i]) {
			return false
		}
	}
	if len(this.ResponseHeadersToRemove) != len(that1.ResponseHeadersToRemove) {
		return false
	}
	for i := range this.ResponseHeadersToRemove {
		if this.ResponseHeadersToRemove[i] != that1.ResponseHeadersToRemove[i] {
			return false
		}
	}
	if this.MaxRequestHeaderSize != that1.MaxRequestHeaderSize {
		return false
	}
	if !this.BufferPolicy.Equal(that1.BufferPolicy) {
		return false
	}
	if !this.CompressionParams.Equal(that1.CompressionParams) {
		return false
	}
	if len(this.CustomErrors) != len(that1.CustomErrors) {
		return false
	}
	for i := range this.CustomErrors {
		if this.CustomErrors[i] != that1.CustomErrors[i] {
			return false
		}
	}
	if !this.JavascriptInfo.Equal(that1.JavascriptInfo) {
		return false
	}
	if len(this.Jwt) != len(that1.Jwt) {
		return false
	}
	for i := range this.Jwt {
		if !this.Jwt[i].Equal(that1.Jwt[i]) {
			return false
		}
	}
	if this.IdleTimeout != that1.IdleTimeout {
		return false
	}
	return true
}
func (this *CustomIpAllowedList) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CustomIpAllowedList)
	if !ok {
		that2, ok := that.(CustomIpAllowedList)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.RateLimiterAllowedPrefixes) != len(that1.RateLimiterAllowedPrefixes) {
		return false
	}
	for i := range this.RateLimiterAllowedPrefixes {
		if !this.RateLimiterAllowedPrefixes[i].Equal(that1.RateLimiterAllowedPrefixes[i]) {
			return false
		}
	}
	return true
}
func (this *RateLimitConfigType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RateLimitConfigType)
	if !ok {
		that2, ok := that.(RateLimitConfigType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.RateLimiter.Equal(that1.RateLimiter) {
		return false
	}
	if that1.IpAllowedListChoice == nil {
		if this.IpAllowedListChoice != nil {
			return false
		}
	} else if this.IpAllowedListChoice == nil {
		return false
	} else if !this.IpAllowedListChoice.Equal(that1.IpAllowedListChoice) {
		return false
	}
	return true
}
func (this *RateLimitConfigType_NoIpAllowedList) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RateLimitConfigType_NoIpAllowedList)
	if !ok {
		that2, ok := that.(RateLimitConfigType_NoIpAllowedList)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NoIpAllowedList.Equal(that1.NoIpAllowedList) {
		return false
	}
	return true
}
func (this *RateLimitConfigType_IpAllowedList) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RateLimitConfigType_IpAllowedList)
	if !ok {
		that2, ok := that.(RateLimitConfigType_IpAllowedList)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.IpAllowedList.Equal(that1.IpAllowedList) {
		return false
	}
	return true
}
func (this *RateLimitConfigType_CustomIpAllowedList) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RateLimitConfigType_CustomIpAllowedList)
	if !ok {
		that2, ok := that.(RateLimitConfigType_CustomIpAllowedList)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.CustomIpAllowedList.Equal(that1.CustomIpAllowedList) {
		return false
	}
	return true
}
func (this *GlobalSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType)
	if !ok {
		that2, ok := that.(GlobalSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Domains) != len(that1.Domains) {
		return false
	}
	for i := range this.Domains {
		if this.Domains[i] != that1.Domains[i] {
			return false
		}
	}
	if that1.LoadbalancerType == nil {
		if this.LoadbalancerType != nil {
			return false
		}
	} else if this.LoadbalancerType == nil {
		return false
	} else if !this.LoadbalancerType.Equal(that1.LoadbalancerType) {
		return false
	}
	if that1.AdvertiseChoice == nil {
		if this.AdvertiseChoice != nil {
			return false
		}
	} else if this.AdvertiseChoice == nil {
		return false
	} else if !this.AdvertiseChoice.Equal(that1.AdvertiseChoice) {
		return false
	}
	if len(this.DefaultRoutePools) != len(that1.DefaultRoutePools) {
		return false
	}
	for i := range this.DefaultRoutePools {
		if !this.DefaultRoutePools[i].Equal(that1.DefaultRoutePools[i]) {
			return false
		}
	}
	if that1.HostRewriteParams == nil {
		if this.HostRewriteParams != nil {
			return false
		}
	} else if this.HostRewriteParams == nil {
		return false
	} else if !this.HostRewriteParams.Equal(that1.HostRewriteParams) {
		return false
	}
	if len(this.Routes) != len(that1.Routes) {
		return false
	}
	for i := range this.Routes {
		if !this.Routes[i].Equal(that1.Routes[i]) {
			return false
		}
	}
	if !this.CorsPolicy.Equal(that1.CorsPolicy) {
		return false
	}
	if that1.WafChoice == nil {
		if this.WafChoice != nil {
			return false
		}
	} else if this.WafChoice == nil {
		return false
	} else if !this.WafChoice.Equal(that1.WafChoice) {
		return false
	}
	if this.AddLocation != that1.AddLocation {
		return false
	}
	if that1.ChallengeType == nil {
		if this.ChallengeType != nil {
			return false
		}
	} else if this.ChallengeType == nil {
		return false
	} else if !this.ChallengeType.Equal(that1.ChallengeType) {
		return false
	}
	if !this.MoreOption.Equal(that1.MoreOption) {
		return false
	}
	if !this.UserIdentification.Equal(that1.UserIdentification) {
		return false
	}
	if that1.RateLimitChoice == nil {
		if this.RateLimitChoice != nil {
			return false
		}
	} else if this.RateLimitChoice == nil {
		return false
	} else if !this.RateLimitChoice.Equal(that1.RateLimitChoice) {
		return false
	}
	if !this.MaliciousUserMitigation.Equal(that1.MaliciousUserMitigation) {
		return false
	}
	if len(this.WafExclusionRules) != len(that1.WafExclusionRules) {
		return false
	}
	for i := range this.WafExclusionRules {
		if !this.WafExclusionRules[i].Equal(that1.WafExclusionRules[i]) {
			return false
		}
	}
	if !this.ViewInternal.Equal(that1.ViewInternal) {
		return false
	}
	if this.HostName != that1.HostName {
		return false
	}
	if len(this.DnsInfo) != len(that1.DnsInfo) {
		return false
	}
	for i := range this.DnsInfo {
		if !this.DnsInfo[i].Equal(that1.DnsInfo[i]) {
			return false
		}
	}
	if this.State != that1.State {
		return false
	}
	if this.AutoCertState != that1.AutoCertState {
		return false
	}
	if !this.AutoCertInfo.Equal(that1.AutoCertInfo) {
		return false
	}
	return true
}
func (this *GlobalSpecType_Http) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_Http)
	if !ok {
		that2, ok := that.(GlobalSpecType_Http)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Http.Equal(that1.Http) {
		return false
	}
	return true
}
func (this *GlobalSpecType_HttpsAutoCert) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_HttpsAutoCert)
	if !ok {
		that2, ok := that.(GlobalSpecType_HttpsAutoCert)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.HttpsAutoCert.Equal(that1.HttpsAutoCert) {
		return false
	}
	return true
}
func (this *GlobalSpecType_Https) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_Https)
	if !ok {
		that2, ok := that.(GlobalSpecType_Https)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Https.Equal(that1.Https) {
		return false
	}
	return true
}
func (this *GlobalSpecType_DoNotAdvertise) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_DoNotAdvertise)
	if !ok {
		that2, ok := that.(GlobalSpecType_DoNotAdvertise)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DoNotAdvertise.Equal(that1.DoNotAdvertise) {
		return false
	}
	return true
}
func (this *GlobalSpecType_AdvertiseOnPublicDefaultVip) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_AdvertiseOnPublicDefaultVip)
	if !ok {
		that2, ok := that.(GlobalSpecType_AdvertiseOnPublicDefaultVip)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AdvertiseOnPublicDefaultVip.Equal(that1.AdvertiseOnPublicDefaultVip) {
		return false
	}
	return true
}
func (this *GlobalSpecType_AdvertiseOnPublic) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_AdvertiseOnPublic)
	if !ok {
		that2, ok := that.(GlobalSpecType_AdvertiseOnPublic)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AdvertiseOnPublic.Equal(that1.AdvertiseOnPublic) {
		return false
	}
	return true
}
func (this *GlobalSpecType_AdvertiseCustom) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_AdvertiseCustom)
	if !ok {
		that2, ok := that.(GlobalSpecType_AdvertiseCustom)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AdvertiseCustom.Equal(that1.AdvertiseCustom) {
		return false
	}
	return true
}
func (this *GlobalSpecType_AutoHostRewrite) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_AutoHostRewrite)
	if !ok {
		that2, ok := that.(GlobalSpecType_AutoHostRewrite)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AutoHostRewrite.Equal(that1.AutoHostRewrite) {
		return false
	}
	return true
}
func (this *GlobalSpecType_HostRewrite) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_HostRewrite)
	if !ok {
		that2, ok := that.(GlobalSpecType_HostRewrite)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.HostRewrite != that1.HostRewrite {
		return false
	}
	return true
}
func (this *GlobalSpecType_DisableHostRewrite) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_DisableHostRewrite)
	if !ok {
		that2, ok := that.(GlobalSpecType_DisableHostRewrite)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DisableHostRewrite.Equal(that1.DisableHostRewrite) {
		return false
	}
	return true
}
func (this *GlobalSpecType_DisableWaf) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_DisableWaf)
	if !ok {
		that2, ok := that.(GlobalSpecType_DisableWaf)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DisableWaf.Equal(that1.DisableWaf) {
		return false
	}
	return true
}
func (this *GlobalSpecType_Waf) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_Waf)
	if !ok {
		that2, ok := that.(GlobalSpecType_Waf)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Waf.Equal(that1.Waf) {
		return false
	}
	return true
}
func (this *GlobalSpecType_WafRule) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_WafRule)
	if !ok {
		that2, ok := that.(GlobalSpecType_WafRule)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.WafRule.Equal(that1.WafRule) {
		return false
	}
	return true
}
func (this *GlobalSpecType_NoChallenge) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_NoChallenge)
	if !ok {
		that2, ok := that.(GlobalSpecType_NoChallenge)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NoChallenge.Equal(that1.NoChallenge) {
		return false
	}
	return true
}
func (this *GlobalSpecType_JsChallenge) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_JsChallenge)
	if !ok {
		that2, ok := that.(GlobalSpecType_JsChallenge)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.JsChallenge.Equal(that1.JsChallenge) {
		return false
	}
	return true
}
func (this *GlobalSpecType_CaptchaChallenge) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_CaptchaChallenge)
	if !ok {
		that2, ok := that.(GlobalSpecType_CaptchaChallenge)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.CaptchaChallenge.Equal(that1.CaptchaChallenge) {
		return false
	}
	return true
}
func (this *GlobalSpecType_DisableRateLimit) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_DisableRateLimit)
	if !ok {
		that2, ok := that.(GlobalSpecType_DisableRateLimit)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DisableRateLimit.Equal(that1.DisableRateLimit) {
		return false
	}
	return true
}
func (this *GlobalSpecType_RateLimit) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_RateLimit)
	if !ok {
		that2, ok := that.(GlobalSpecType_RateLimit)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.RateLimit.Equal(that1.RateLimit) {
		return false
	}
	return true
}
func (this *CreateSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType)
	if !ok {
		that2, ok := that.(CreateSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Domains) != len(that1.Domains) {
		return false
	}
	for i := range this.Domains {
		if this.Domains[i] != that1.Domains[i] {
			return false
		}
	}
	if that1.LoadbalancerType == nil {
		if this.LoadbalancerType != nil {
			return false
		}
	} else if this.LoadbalancerType == nil {
		return false
	} else if !this.LoadbalancerType.Equal(that1.LoadbalancerType) {
		return false
	}
	if that1.AdvertiseChoice == nil {
		if this.AdvertiseChoice != nil {
			return false
		}
	} else if this.AdvertiseChoice == nil {
		return false
	} else if !this.AdvertiseChoice.Equal(that1.AdvertiseChoice) {
		return false
	}
	if len(this.DefaultRoutePools) != len(that1.DefaultRoutePools) {
		return false
	}
	for i := range this.DefaultRoutePools {
		if !this.DefaultRoutePools[i].Equal(that1.DefaultRoutePools[i]) {
			return false
		}
	}
	if len(this.Routes) != len(that1.Routes) {
		return false
	}
	for i := range this.Routes {
		if !this.Routes[i].Equal(that1.Routes[i]) {
			return false
		}
	}
	if !this.CorsPolicy.Equal(that1.CorsPolicy) {
		return false
	}
	if that1.WafChoice == nil {
		if this.WafChoice != nil {
			return false
		}
	} else if this.WafChoice == nil {
		return false
	} else if !this.WafChoice.Equal(that1.WafChoice) {
		return false
	}
	if this.AddLocation != that1.AddLocation {
		return false
	}
	if that1.ChallengeType == nil {
		if this.ChallengeType != nil {
			return false
		}
	} else if this.ChallengeType == nil {
		return false
	} else if !this.ChallengeType.Equal(that1.ChallengeType) {
		return false
	}
	if !this.MoreOption.Equal(that1.MoreOption) {
		return false
	}
	if !this.UserIdentification.Equal(that1.UserIdentification) {
		return false
	}
	if that1.RateLimitChoice == nil {
		if this.RateLimitChoice != nil {
			return false
		}
	} else if this.RateLimitChoice == nil {
		return false
	} else if !this.RateLimitChoice.Equal(that1.RateLimitChoice) {
		return false
	}
	if !this.MaliciousUserMitigation.Equal(that1.MaliciousUserMitigation) {
		return false
	}
	if len(this.WafExclusionRules) != len(that1.WafExclusionRules) {
		return false
	}
	for i := range this.WafExclusionRules {
		if !this.WafExclusionRules[i].Equal(that1.WafExclusionRules[i]) {
			return false
		}
	}
	return true
}
func (this *CreateSpecType_Http) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_Http)
	if !ok {
		that2, ok := that.(CreateSpecType_Http)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Http.Equal(that1.Http) {
		return false
	}
	return true
}
func (this *CreateSpecType_HttpsAutoCert) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_HttpsAutoCert)
	if !ok {
		that2, ok := that.(CreateSpecType_HttpsAutoCert)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.HttpsAutoCert.Equal(that1.HttpsAutoCert) {
		return false
	}
	return true
}
func (this *CreateSpecType_Https) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_Https)
	if !ok {
		that2, ok := that.(CreateSpecType_Https)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Https.Equal(that1.Https) {
		return false
	}
	return true
}
func (this *CreateSpecType_DoNotAdvertise) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_DoNotAdvertise)
	if !ok {
		that2, ok := that.(CreateSpecType_DoNotAdvertise)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DoNotAdvertise.Equal(that1.DoNotAdvertise) {
		return false
	}
	return true
}
func (this *CreateSpecType_AdvertiseOnPublicDefaultVip) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_AdvertiseOnPublicDefaultVip)
	if !ok {
		that2, ok := that.(CreateSpecType_AdvertiseOnPublicDefaultVip)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AdvertiseOnPublicDefaultVip.Equal(that1.AdvertiseOnPublicDefaultVip) {
		return false
	}
	return true
}
func (this *CreateSpecType_AdvertiseOnPublic) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_AdvertiseOnPublic)
	if !ok {
		that2, ok := that.(CreateSpecType_AdvertiseOnPublic)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AdvertiseOnPublic.Equal(that1.AdvertiseOnPublic) {
		return false
	}
	return true
}
func (this *CreateSpecType_AdvertiseCustom) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_AdvertiseCustom)
	if !ok {
		that2, ok := that.(CreateSpecType_AdvertiseCustom)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AdvertiseCustom.Equal(that1.AdvertiseCustom) {
		return false
	}
	return true
}
func (this *CreateSpecType_DisableWaf) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_DisableWaf)
	if !ok {
		that2, ok := that.(CreateSpecType_DisableWaf)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DisableWaf.Equal(that1.DisableWaf) {
		return false
	}
	return true
}
func (this *CreateSpecType_Waf) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_Waf)
	if !ok {
		that2, ok := that.(CreateSpecType_Waf)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Waf.Equal(that1.Waf) {
		return false
	}
	return true
}
func (this *CreateSpecType_WafRule) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_WafRule)
	if !ok {
		that2, ok := that.(CreateSpecType_WafRule)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.WafRule.Equal(that1.WafRule) {
		return false
	}
	return true
}
func (this *CreateSpecType_NoChallenge) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_NoChallenge)
	if !ok {
		that2, ok := that.(CreateSpecType_NoChallenge)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NoChallenge.Equal(that1.NoChallenge) {
		return false
	}
	return true
}
func (this *CreateSpecType_JsChallenge) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_JsChallenge)
	if !ok {
		that2, ok := that.(CreateSpecType_JsChallenge)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.JsChallenge.Equal(that1.JsChallenge) {
		return false
	}
	return true
}
func (this *CreateSpecType_CaptchaChallenge) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_CaptchaChallenge)
	if !ok {
		that2, ok := that.(CreateSpecType_CaptchaChallenge)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.CaptchaChallenge.Equal(that1.CaptchaChallenge) {
		return false
	}
	return true
}
func (this *CreateSpecType_DisableRateLimit) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_DisableRateLimit)
	if !ok {
		that2, ok := that.(CreateSpecType_DisableRateLimit)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DisableRateLimit.Equal(that1.DisableRateLimit) {
		return false
	}
	return true
}
func (this *CreateSpecType_RateLimit) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_RateLimit)
	if !ok {
		that2, ok := that.(CreateSpecType_RateLimit)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.RateLimit.Equal(that1.RateLimit) {
		return false
	}
	return true
}
func (this *ReplaceSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType)
	if !ok {
		that2, ok := that.(ReplaceSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Domains) != len(that1.Domains) {
		return false
	}
	for i := range this.Domains {
		if this.Domains[i] != that1.Domains[i] {
			return false
		}
	}
	if that1.LoadbalancerType == nil {
		if this.LoadbalancerType != nil {
			return false
		}
	} else if this.LoadbalancerType == nil {
		return false
	} else if !this.LoadbalancerType.Equal(that1.LoadbalancerType) {
		return false
	}
	if that1.AdvertiseChoice == nil {
		if this.AdvertiseChoice != nil {
			return false
		}
	} else if this.AdvertiseChoice == nil {
		return false
	} else if !this.AdvertiseChoice.Equal(that1.AdvertiseChoice) {
		return false
	}
	if len(this.DefaultRoutePools) != len(that1.DefaultRoutePools) {
		return false
	}
	for i := range this.DefaultRoutePools {
		if !this.DefaultRoutePools[i].Equal(that1.DefaultRoutePools[i]) {
			return false
		}
	}
	if len(this.Routes) != len(that1.Routes) {
		return false
	}
	for i := range this.Routes {
		if !this.Routes[i].Equal(that1.Routes[i]) {
			return false
		}
	}
	if !this.CorsPolicy.Equal(that1.CorsPolicy) {
		return false
	}
	if that1.WafChoice == nil {
		if this.WafChoice != nil {
			return false
		}
	} else if this.WafChoice == nil {
		return false
	} else if !this.WafChoice.Equal(that1.WafChoice) {
		return false
	}
	if this.AddLocation != that1.AddLocation {
		return false
	}
	if that1.ChallengeType == nil {
		if this.ChallengeType != nil {
			return false
		}
	} else if this.ChallengeType == nil {
		return false
	} else if !this.ChallengeType.Equal(that1.ChallengeType) {
		return false
	}
	if !this.MoreOption.Equal(that1.MoreOption) {
		return false
	}
	if !this.UserIdentification.Equal(that1.UserIdentification) {
		return false
	}
	if that1.RateLimitChoice == nil {
		if this.RateLimitChoice != nil {
			return false
		}
	} else if this.RateLimitChoice == nil {
		return false
	} else if !this.RateLimitChoice.Equal(that1.RateLimitChoice) {
		return false
	}
	if !this.MaliciousUserMitigation.Equal(that1.MaliciousUserMitigation) {
		return false
	}
	if len(this.WafExclusionRules) != len(that1.WafExclusionRules) {
		return false
	}
	for i := range this.WafExclusionRules {
		if !this.WafExclusionRules[i].Equal(that1.WafExclusionRules[i]) {
			return false
		}
	}
	return true
}
func (this *ReplaceSpecType_Http) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_Http)
	if !ok {
		that2, ok := that.(ReplaceSpecType_Http)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Http.Equal(that1.Http) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_HttpsAutoCert) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_HttpsAutoCert)
	if !ok {
		that2, ok := that.(ReplaceSpecType_HttpsAutoCert)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.HttpsAutoCert.Equal(that1.HttpsAutoCert) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_Https) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_Https)
	if !ok {
		that2, ok := that.(ReplaceSpecType_Https)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Https.Equal(that1.Https) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_DoNotAdvertise) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_DoNotAdvertise)
	if !ok {
		that2, ok := that.(ReplaceSpecType_DoNotAdvertise)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DoNotAdvertise.Equal(that1.DoNotAdvertise) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_AdvertiseOnPublicDefaultVip) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_AdvertiseOnPublicDefaultVip)
	if !ok {
		that2, ok := that.(ReplaceSpecType_AdvertiseOnPublicDefaultVip)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AdvertiseOnPublicDefaultVip.Equal(that1.AdvertiseOnPublicDefaultVip) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_AdvertiseOnPublic) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_AdvertiseOnPublic)
	if !ok {
		that2, ok := that.(ReplaceSpecType_AdvertiseOnPublic)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AdvertiseOnPublic.Equal(that1.AdvertiseOnPublic) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_AdvertiseCustom) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_AdvertiseCustom)
	if !ok {
		that2, ok := that.(ReplaceSpecType_AdvertiseCustom)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AdvertiseCustom.Equal(that1.AdvertiseCustom) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_DisableWaf) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_DisableWaf)
	if !ok {
		that2, ok := that.(ReplaceSpecType_DisableWaf)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DisableWaf.Equal(that1.DisableWaf) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_Waf) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_Waf)
	if !ok {
		that2, ok := that.(ReplaceSpecType_Waf)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Waf.Equal(that1.Waf) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_WafRule) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_WafRule)
	if !ok {
		that2, ok := that.(ReplaceSpecType_WafRule)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.WafRule.Equal(that1.WafRule) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_NoChallenge) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_NoChallenge)
	if !ok {
		that2, ok := that.(ReplaceSpecType_NoChallenge)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NoChallenge.Equal(that1.NoChallenge) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_JsChallenge) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_JsChallenge)
	if !ok {
		that2, ok := that.(ReplaceSpecType_JsChallenge)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.JsChallenge.Equal(that1.JsChallenge) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_CaptchaChallenge) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_CaptchaChallenge)
	if !ok {
		that2, ok := that.(ReplaceSpecType_CaptchaChallenge)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.CaptchaChallenge.Equal(that1.CaptchaChallenge) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_DisableRateLimit) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_DisableRateLimit)
	if !ok {
		that2, ok := that.(ReplaceSpecType_DisableRateLimit)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DisableRateLimit.Equal(that1.DisableRateLimit) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_RateLimit) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_RateLimit)
	if !ok {
		that2, ok := that.(ReplaceSpecType_RateLimit)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.RateLimit.Equal(that1.RateLimit) {
		return false
	}
	return true
}
func (this *GetSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType)
	if !ok {
		that2, ok := that.(GetSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Domains) != len(that1.Domains) {
		return false
	}
	for i := range this.Domains {
		if this.Domains[i] != that1.Domains[i] {
			return false
		}
	}
	if that1.LoadbalancerType == nil {
		if this.LoadbalancerType != nil {
			return false
		}
	} else if this.LoadbalancerType == nil {
		return false
	} else if !this.LoadbalancerType.Equal(that1.LoadbalancerType) {
		return false
	}
	if that1.AdvertiseChoice == nil {
		if this.AdvertiseChoice != nil {
			return false
		}
	} else if this.AdvertiseChoice == nil {
		return false
	} else if !this.AdvertiseChoice.Equal(that1.AdvertiseChoice) {
		return false
	}
	if len(this.DefaultRoutePools) != len(that1.DefaultRoutePools) {
		return false
	}
	for i := range this.DefaultRoutePools {
		if !this.DefaultRoutePools[i].Equal(that1.DefaultRoutePools[i]) {
			return false
		}
	}
	if len(this.Routes) != len(that1.Routes) {
		return false
	}
	for i := range this.Routes {
		if !this.Routes[i].Equal(that1.Routes[i]) {
			return false
		}
	}
	if !this.CorsPolicy.Equal(that1.CorsPolicy) {
		return false
	}
	if that1.WafChoice == nil {
		if this.WafChoice != nil {
			return false
		}
	} else if this.WafChoice == nil {
		return false
	} else if !this.WafChoice.Equal(that1.WafChoice) {
		return false
	}
	if this.AddLocation != that1.AddLocation {
		return false
	}
	if that1.ChallengeType == nil {
		if this.ChallengeType != nil {
			return false
		}
	} else if this.ChallengeType == nil {
		return false
	} else if !this.ChallengeType.Equal(that1.ChallengeType) {
		return false
	}
	if !this.MoreOption.Equal(that1.MoreOption) {
		return false
	}
	if !this.UserIdentification.Equal(that1.UserIdentification) {
		return false
	}
	if that1.RateLimitChoice == nil {
		if this.RateLimitChoice != nil {
			return false
		}
	} else if this.RateLimitChoice == nil {
		return false
	} else if !this.RateLimitChoice.Equal(that1.RateLimitChoice) {
		return false
	}
	if !this.MaliciousUserMitigation.Equal(that1.MaliciousUserMitigation) {
		return false
	}
	if len(this.WafExclusionRules) != len(that1.WafExclusionRules) {
		return false
	}
	for i := range this.WafExclusionRules {
		if !this.WafExclusionRules[i].Equal(that1.WafExclusionRules[i]) {
			return false
		}
	}
	if this.HostName != that1.HostName {
		return false
	}
	if len(this.DnsInfo) != len(that1.DnsInfo) {
		return false
	}
	for i := range this.DnsInfo {
		if !this.DnsInfo[i].Equal(that1.DnsInfo[i]) {
			return false
		}
	}
	if this.State != that1.State {
		return false
	}
	if this.AutoCertState != that1.AutoCertState {
		return false
	}
	if !this.AutoCertInfo.Equal(that1.AutoCertInfo) {
		return false
	}
	return true
}
func (this *GetSpecType_Http) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_Http)
	if !ok {
		that2, ok := that.(GetSpecType_Http)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Http.Equal(that1.Http) {
		return false
	}
	return true
}
func (this *GetSpecType_HttpsAutoCert) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_HttpsAutoCert)
	if !ok {
		that2, ok := that.(GetSpecType_HttpsAutoCert)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.HttpsAutoCert.Equal(that1.HttpsAutoCert) {
		return false
	}
	return true
}
func (this *GetSpecType_Https) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_Https)
	if !ok {
		that2, ok := that.(GetSpecType_Https)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Https.Equal(that1.Https) {
		return false
	}
	return true
}
func (this *GetSpecType_DoNotAdvertise) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_DoNotAdvertise)
	if !ok {
		that2, ok := that.(GetSpecType_DoNotAdvertise)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DoNotAdvertise.Equal(that1.DoNotAdvertise) {
		return false
	}
	return true
}
func (this *GetSpecType_AdvertiseOnPublicDefaultVip) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_AdvertiseOnPublicDefaultVip)
	if !ok {
		that2, ok := that.(GetSpecType_AdvertiseOnPublicDefaultVip)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AdvertiseOnPublicDefaultVip.Equal(that1.AdvertiseOnPublicDefaultVip) {
		return false
	}
	return true
}
func (this *GetSpecType_AdvertiseOnPublic) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_AdvertiseOnPublic)
	if !ok {
		that2, ok := that.(GetSpecType_AdvertiseOnPublic)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AdvertiseOnPublic.Equal(that1.AdvertiseOnPublic) {
		return false
	}
	return true
}
func (this *GetSpecType_AdvertiseCustom) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_AdvertiseCustom)
	if !ok {
		that2, ok := that.(GetSpecType_AdvertiseCustom)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AdvertiseCustom.Equal(that1.AdvertiseCustom) {
		return false
	}
	return true
}
func (this *GetSpecType_DisableWaf) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_DisableWaf)
	if !ok {
		that2, ok := that.(GetSpecType_DisableWaf)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DisableWaf.Equal(that1.DisableWaf) {
		return false
	}
	return true
}
func (this *GetSpecType_Waf) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_Waf)
	if !ok {
		that2, ok := that.(GetSpecType_Waf)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Waf.Equal(that1.Waf) {
		return false
	}
	return true
}
func (this *GetSpecType_WafRule) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_WafRule)
	if !ok {
		that2, ok := that.(GetSpecType_WafRule)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.WafRule.Equal(that1.WafRule) {
		return false
	}
	return true
}
func (this *GetSpecType_NoChallenge) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_NoChallenge)
	if !ok {
		that2, ok := that.(GetSpecType_NoChallenge)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NoChallenge.Equal(that1.NoChallenge) {
		return false
	}
	return true
}
func (this *GetSpecType_JsChallenge) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_JsChallenge)
	if !ok {
		that2, ok := that.(GetSpecType_JsChallenge)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.JsChallenge.Equal(that1.JsChallenge) {
		return false
	}
	return true
}
func (this *GetSpecType_CaptchaChallenge) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_CaptchaChallenge)
	if !ok {
		that2, ok := that.(GetSpecType_CaptchaChallenge)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.CaptchaChallenge.Equal(that1.CaptchaChallenge) {
		return false
	}
	return true
}
func (this *GetSpecType_DisableRateLimit) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_DisableRateLimit)
	if !ok {
		that2, ok := that.(GetSpecType_DisableRateLimit)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DisableRateLimit.Equal(that1.DisableRateLimit) {
		return false
	}
	return true
}
func (this *GetSpecType_RateLimit) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_RateLimit)
	if !ok {
		that2, ok := that.(GetSpecType_RateLimit)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.RateLimit.Equal(that1.RateLimit) {
		return false
	}
	return true
}
func (this *DownstreamTlsValidationContext) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&http_loadbalancer.DownstreamTlsValidationContext{")
	s = append(s, "TrustedCaUrl: "+fmt.Sprintf("%#v", this.TrustedCaUrl)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DownstreamTlsParamsType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&http_loadbalancer.DownstreamTlsParamsType{")
	if this.TlsConfig != nil {
		s = append(s, "TlsConfig: "+fmt.Sprintf("%#v", this.TlsConfig)+",\n")
	}
	if this.TlsCertificates != nil {
		s = append(s, "TlsCertificates: "+fmt.Sprintf("%#v", this.TlsCertificates)+",\n")
	}
	if this.MtlsChoice != nil {
		s = append(s, "MtlsChoice: "+fmt.Sprintf("%#v", this.MtlsChoice)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DownstreamTlsParamsType_NoMtls) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.DownstreamTlsParamsType_NoMtls{` +
		`NoMtls:` + fmt.Sprintf("%#v", this.NoMtls) + `}`}, ", ")
	return s
}
func (this *DownstreamTlsParamsType_UseMtls) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.DownstreamTlsParamsType_UseMtls{` +
		`UseMtls:` + fmt.Sprintf("%#v", this.UseMtls) + `}`}, ", ")
	return s
}
func (this *ProxyTypeHttps) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&http_loadbalancer.ProxyTypeHttps{")
	s = append(s, "HttpRedirect: "+fmt.Sprintf("%#v", this.HttpRedirect)+",\n")
	s = append(s, "AddHsts: "+fmt.Sprintf("%#v", this.AddHsts)+",\n")
	if this.TlsParameters != nil {
		s = append(s, "TlsParameters: "+fmt.Sprintf("%#v", this.TlsParameters)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ProxyTypeHttpsAutoCerts) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&http_loadbalancer.ProxyTypeHttpsAutoCerts{")
	s = append(s, "HttpRedirect: "+fmt.Sprintf("%#v", this.HttpRedirect)+",\n")
	s = append(s, "AddHsts: "+fmt.Sprintf("%#v", this.AddHsts)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RouteTypeSimpleWithDefaultOriginPool) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&http_loadbalancer.RouteTypeSimpleWithDefaultOriginPool{")
	s = append(s, "HttpMethod: "+fmt.Sprintf("%#v", this.HttpMethod)+",\n")
	if this.Path != nil {
		s = append(s, "Path: "+fmt.Sprintf("%#v", this.Path)+",\n")
	}
	if this.HostRewriteParams != nil {
		s = append(s, "HostRewriteParams: "+fmt.Sprintf("%#v", this.HostRewriteParams)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RouteTypeSimpleWithDefaultOriginPool_AutoHostRewrite) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.RouteTypeSimpleWithDefaultOriginPool_AutoHostRewrite{` +
		`AutoHostRewrite:` + fmt.Sprintf("%#v", this.AutoHostRewrite) + `}`}, ", ")
	return s
}
func (this *RouteTypeSimpleWithDefaultOriginPool_HostRewrite) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.RouteTypeSimpleWithDefaultOriginPool_HostRewrite{` +
		`HostRewrite:` + fmt.Sprintf("%#v", this.HostRewrite) + `}`}, ", ")
	return s
}
func (this *RouteTypeSimpleWithDefaultOriginPool_DisableHostRewrite) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.RouteTypeSimpleWithDefaultOriginPool_DisableHostRewrite{` +
		`DisableHostRewrite:` + fmt.Sprintf("%#v", this.DisableHostRewrite) + `}`}, ", ")
	return s
}
func (this *RouteTypeSimple) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&http_loadbalancer.RouteTypeSimple{")
	if this.Path != nil {
		s = append(s, "Path: "+fmt.Sprintf("%#v", this.Path)+",\n")
	}
	s = append(s, "HttpMethod: "+fmt.Sprintf("%#v", this.HttpMethod)+",\n")
	if this.OriginPools != nil {
		s = append(s, "OriginPools: "+fmt.Sprintf("%#v", this.OriginPools)+",\n")
	}
	if this.HostRewriteParams != nil {
		s = append(s, "HostRewriteParams: "+fmt.Sprintf("%#v", this.HostRewriteParams)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RouteTypeSimple_AutoHostRewrite) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.RouteTypeSimple_AutoHostRewrite{` +
		`AutoHostRewrite:` + fmt.Sprintf("%#v", this.AutoHostRewrite) + `}`}, ", ")
	return s
}
func (this *RouteTypeSimple_HostRewrite) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.RouteTypeSimple_HostRewrite{` +
		`HostRewrite:` + fmt.Sprintf("%#v", this.HostRewrite) + `}`}, ", ")
	return s
}
func (this *RouteTypeSimple_DisableHostRewrite) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.RouteTypeSimple_DisableHostRewrite{` +
		`DisableHostRewrite:` + fmt.Sprintf("%#v", this.DisableHostRewrite) + `}`}, ", ")
	return s
}
func (this *RouteTypeRedirect) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&http_loadbalancer.RouteTypeRedirect{")
	if this.Path != nil {
		s = append(s, "Path: "+fmt.Sprintf("%#v", this.Path)+",\n")
	}
	s = append(s, "HttpMethod: "+fmt.Sprintf("%#v", this.HttpMethod)+",\n")
	if this.RouteRedirect != nil {
		s = append(s, "RouteRedirect: "+fmt.Sprintf("%#v", this.RouteRedirect)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RouteTypeDirectResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&http_loadbalancer.RouteTypeDirectResponse{")
	if this.Path != nil {
		s = append(s, "Path: "+fmt.Sprintf("%#v", this.Path)+",\n")
	}
	s = append(s, "HttpMethod: "+fmt.Sprintf("%#v", this.HttpMethod)+",\n")
	if this.RouteDirectResponse != nil {
		s = append(s, "RouteDirectResponse: "+fmt.Sprintf("%#v", this.RouteDirectResponse)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RouteTypeCustomRoute) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&http_loadbalancer.RouteTypeCustomRoute{")
	if this.RouteRef != nil {
		s = append(s, "RouteRef: "+fmt.Sprintf("%#v", this.RouteRef)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RouteType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&http_loadbalancer.RouteType{")
	if this.Choice != nil {
		s = append(s, "Choice: "+fmt.Sprintf("%#v", this.Choice)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RouteType_SimpleRoute) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.RouteType_SimpleRoute{` +
		`SimpleRoute:` + fmt.Sprintf("%#v", this.SimpleRoute) + `}`}, ", ")
	return s
}
func (this *RouteType_RedirectRoute) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.RouteType_RedirectRoute{` +
		`RedirectRoute:` + fmt.Sprintf("%#v", this.RedirectRoute) + `}`}, ", ")
	return s
}
func (this *RouteType_DirectResponseRoute) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.RouteType_DirectResponseRoute{` +
		`DirectResponseRoute:` + fmt.Sprintf("%#v", this.DirectResponseRoute) + `}`}, ", ")
	return s
}
func (this *RouteType_CustomRouteObject) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.RouteType_CustomRouteObject{` +
		`CustomRouteObject:` + fmt.Sprintf("%#v", this.CustomRouteObject) + `}`}, ", ")
	return s
}
func (this *AdvancedOptionsType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 15)
	s = append(s, "&http_loadbalancer.AdvancedOptionsType{")
	if this.RequestHeadersToAdd != nil {
		s = append(s, "RequestHeadersToAdd: "+fmt.Sprintf("%#v", this.RequestHeadersToAdd)+",\n")
	}
	s = append(s, "RequestHeadersToRemove: "+fmt.Sprintf("%#v", this.RequestHeadersToRemove)+",\n")
	if this.ResponseHeadersToAdd != nil {
		s = append(s, "ResponseHeadersToAdd: "+fmt.Sprintf("%#v", this.ResponseHeadersToAdd)+",\n")
	}
	s = append(s, "ResponseHeadersToRemove: "+fmt.Sprintf("%#v", this.ResponseHeadersToRemove)+",\n")
	s = append(s, "MaxRequestHeaderSize: "+fmt.Sprintf("%#v", this.MaxRequestHeaderSize)+",\n")
	if this.BufferPolicy != nil {
		s = append(s, "BufferPolicy: "+fmt.Sprintf("%#v", this.BufferPolicy)+",\n")
	}
	if this.CompressionParams != nil {
		s = append(s, "CompressionParams: "+fmt.Sprintf("%#v", this.CompressionParams)+",\n")
	}
	keysForCustomErrors := make([]uint32, 0, len(this.CustomErrors))
	for k, _ := range this.CustomErrors {
		keysForCustomErrors = append(keysForCustomErrors, k)
	}
	sortkeys.Uint32s(keysForCustomErrors)
	mapStringForCustomErrors := "map[uint32]string{"
	for _, k := range keysForCustomErrors {
		mapStringForCustomErrors += fmt.Sprintf("%#v: %#v,", k, this.CustomErrors[k])
	}
	mapStringForCustomErrors += "}"
	if this.CustomErrors != nil {
		s = append(s, "CustomErrors: "+mapStringForCustomErrors+",\n")
	}
	if this.JavascriptInfo != nil {
		s = append(s, "JavascriptInfo: "+fmt.Sprintf("%#v", this.JavascriptInfo)+",\n")
	}
	if this.Jwt != nil {
		s = append(s, "Jwt: "+fmt.Sprintf("%#v", this.Jwt)+",\n")
	}
	s = append(s, "IdleTimeout: "+fmt.Sprintf("%#v", this.IdleTimeout)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CustomIpAllowedList) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&http_loadbalancer.CustomIpAllowedList{")
	if this.RateLimiterAllowedPrefixes != nil {
		s = append(s, "RateLimiterAllowedPrefixes: "+fmt.Sprintf("%#v", this.RateLimiterAllowedPrefixes)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RateLimitConfigType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&http_loadbalancer.RateLimitConfigType{")
	if this.RateLimiter != nil {
		s = append(s, "RateLimiter: "+fmt.Sprintf("%#v", this.RateLimiter)+",\n")
	}
	if this.IpAllowedListChoice != nil {
		s = append(s, "IpAllowedListChoice: "+fmt.Sprintf("%#v", this.IpAllowedListChoice)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RateLimitConfigType_NoIpAllowedList) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.RateLimitConfigType_NoIpAllowedList{` +
		`NoIpAllowedList:` + fmt.Sprintf("%#v", this.NoIpAllowedList) + `}`}, ", ")
	return s
}
func (this *RateLimitConfigType_IpAllowedList) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.RateLimitConfigType_IpAllowedList{` +
		`IpAllowedList:` + fmt.Sprintf("%#v", this.IpAllowedList) + `}`}, ", ")
	return s
}
func (this *RateLimitConfigType_CustomIpAllowedList) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.RateLimitConfigType_CustomIpAllowedList{` +
		`CustomIpAllowedList:` + fmt.Sprintf("%#v", this.CustomIpAllowedList) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 37)
	s = append(s, "&http_loadbalancer.GlobalSpecType{")
	s = append(s, "Domains: "+fmt.Sprintf("%#v", this.Domains)+",\n")
	if this.LoadbalancerType != nil {
		s = append(s, "LoadbalancerType: "+fmt.Sprintf("%#v", this.LoadbalancerType)+",\n")
	}
	if this.AdvertiseChoice != nil {
		s = append(s, "AdvertiseChoice: "+fmt.Sprintf("%#v", this.AdvertiseChoice)+",\n")
	}
	if this.DefaultRoutePools != nil {
		s = append(s, "DefaultRoutePools: "+fmt.Sprintf("%#v", this.DefaultRoutePools)+",\n")
	}
	if this.HostRewriteParams != nil {
		s = append(s, "HostRewriteParams: "+fmt.Sprintf("%#v", this.HostRewriteParams)+",\n")
	}
	if this.Routes != nil {
		s = append(s, "Routes: "+fmt.Sprintf("%#v", this.Routes)+",\n")
	}
	if this.CorsPolicy != nil {
		s = append(s, "CorsPolicy: "+fmt.Sprintf("%#v", this.CorsPolicy)+",\n")
	}
	if this.WafChoice != nil {
		s = append(s, "WafChoice: "+fmt.Sprintf("%#v", this.WafChoice)+",\n")
	}
	s = append(s, "AddLocation: "+fmt.Sprintf("%#v", this.AddLocation)+",\n")
	if this.ChallengeType != nil {
		s = append(s, "ChallengeType: "+fmt.Sprintf("%#v", this.ChallengeType)+",\n")
	}
	if this.MoreOption != nil {
		s = append(s, "MoreOption: "+fmt.Sprintf("%#v", this.MoreOption)+",\n")
	}
	if this.UserIdentification != nil {
		s = append(s, "UserIdentification: "+fmt.Sprintf("%#v", this.UserIdentification)+",\n")
	}
	if this.RateLimitChoice != nil {
		s = append(s, "RateLimitChoice: "+fmt.Sprintf("%#v", this.RateLimitChoice)+",\n")
	}
	if this.MaliciousUserMitigation != nil {
		s = append(s, "MaliciousUserMitigation: "+fmt.Sprintf("%#v", this.MaliciousUserMitigation)+",\n")
	}
	if this.WafExclusionRules != nil {
		s = append(s, "WafExclusionRules: "+fmt.Sprintf("%#v", this.WafExclusionRules)+",\n")
	}
	if this.ViewInternal != nil {
		s = append(s, "ViewInternal: "+fmt.Sprintf("%#v", this.ViewInternal)+",\n")
	}
	s = append(s, "HostName: "+fmt.Sprintf("%#v", this.HostName)+",\n")
	if this.DnsInfo != nil {
		s = append(s, "DnsInfo: "+fmt.Sprintf("%#v", this.DnsInfo)+",\n")
	}
	s = append(s, "State: "+fmt.Sprintf("%#v", this.State)+",\n")
	s = append(s, "AutoCertState: "+fmt.Sprintf("%#v", this.AutoCertState)+",\n")
	if this.AutoCertInfo != nil {
		s = append(s, "AutoCertInfo: "+fmt.Sprintf("%#v", this.AutoCertInfo)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GlobalSpecType_Http) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.GlobalSpecType_Http{` +
		`Http:` + fmt.Sprintf("%#v", this.Http) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_HttpsAutoCert) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.GlobalSpecType_HttpsAutoCert{` +
		`HttpsAutoCert:` + fmt.Sprintf("%#v", this.HttpsAutoCert) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_Https) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.GlobalSpecType_Https{` +
		`Https:` + fmt.Sprintf("%#v", this.Https) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_DoNotAdvertise) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.GlobalSpecType_DoNotAdvertise{` +
		`DoNotAdvertise:` + fmt.Sprintf("%#v", this.DoNotAdvertise) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_AdvertiseOnPublicDefaultVip) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.GlobalSpecType_AdvertiseOnPublicDefaultVip{` +
		`AdvertiseOnPublicDefaultVip:` + fmt.Sprintf("%#v", this.AdvertiseOnPublicDefaultVip) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_AdvertiseOnPublic) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.GlobalSpecType_AdvertiseOnPublic{` +
		`AdvertiseOnPublic:` + fmt.Sprintf("%#v", this.AdvertiseOnPublic) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_AdvertiseCustom) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.GlobalSpecType_AdvertiseCustom{` +
		`AdvertiseCustom:` + fmt.Sprintf("%#v", this.AdvertiseCustom) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_AutoHostRewrite) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.GlobalSpecType_AutoHostRewrite{` +
		`AutoHostRewrite:` + fmt.Sprintf("%#v", this.AutoHostRewrite) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_HostRewrite) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.GlobalSpecType_HostRewrite{` +
		`HostRewrite:` + fmt.Sprintf("%#v", this.HostRewrite) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_DisableHostRewrite) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.GlobalSpecType_DisableHostRewrite{` +
		`DisableHostRewrite:` + fmt.Sprintf("%#v", this.DisableHostRewrite) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_DisableWaf) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.GlobalSpecType_DisableWaf{` +
		`DisableWaf:` + fmt.Sprintf("%#v", this.DisableWaf) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_Waf) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.GlobalSpecType_Waf{` +
		`Waf:` + fmt.Sprintf("%#v", this.Waf) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_WafRule) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.GlobalSpecType_WafRule{` +
		`WafRule:` + fmt.Sprintf("%#v", this.WafRule) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_NoChallenge) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.GlobalSpecType_NoChallenge{` +
		`NoChallenge:` + fmt.Sprintf("%#v", this.NoChallenge) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_JsChallenge) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.GlobalSpecType_JsChallenge{` +
		`JsChallenge:` + fmt.Sprintf("%#v", this.JsChallenge) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_CaptchaChallenge) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.GlobalSpecType_CaptchaChallenge{` +
		`CaptchaChallenge:` + fmt.Sprintf("%#v", this.CaptchaChallenge) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_DisableRateLimit) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.GlobalSpecType_DisableRateLimit{` +
		`DisableRateLimit:` + fmt.Sprintf("%#v", this.DisableRateLimit) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_RateLimit) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.GlobalSpecType_RateLimit{` +
		`RateLimit:` + fmt.Sprintf("%#v", this.RateLimit) + `}`}, ", ")
	return s
}
func (this *CreateSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 28)
	s = append(s, "&http_loadbalancer.CreateSpecType{")
	s = append(s, "Domains: "+fmt.Sprintf("%#v", this.Domains)+",\n")
	if this.LoadbalancerType != nil {
		s = append(s, "LoadbalancerType: "+fmt.Sprintf("%#v", this.LoadbalancerType)+",\n")
	}
	if this.AdvertiseChoice != nil {
		s = append(s, "AdvertiseChoice: "+fmt.Sprintf("%#v", this.AdvertiseChoice)+",\n")
	}
	if this.DefaultRoutePools != nil {
		s = append(s, "DefaultRoutePools: "+fmt.Sprintf("%#v", this.DefaultRoutePools)+",\n")
	}
	if this.Routes != nil {
		s = append(s, "Routes: "+fmt.Sprintf("%#v", this.Routes)+",\n")
	}
	if this.CorsPolicy != nil {
		s = append(s, "CorsPolicy: "+fmt.Sprintf("%#v", this.CorsPolicy)+",\n")
	}
	if this.WafChoice != nil {
		s = append(s, "WafChoice: "+fmt.Sprintf("%#v", this.WafChoice)+",\n")
	}
	s = append(s, "AddLocation: "+fmt.Sprintf("%#v", this.AddLocation)+",\n")
	if this.ChallengeType != nil {
		s = append(s, "ChallengeType: "+fmt.Sprintf("%#v", this.ChallengeType)+",\n")
	}
	if this.MoreOption != nil {
		s = append(s, "MoreOption: "+fmt.Sprintf("%#v", this.MoreOption)+",\n")
	}
	if this.UserIdentification != nil {
		s = append(s, "UserIdentification: "+fmt.Sprintf("%#v", this.UserIdentification)+",\n")
	}
	if this.RateLimitChoice != nil {
		s = append(s, "RateLimitChoice: "+fmt.Sprintf("%#v", this.RateLimitChoice)+",\n")
	}
	if this.MaliciousUserMitigation != nil {
		s = append(s, "MaliciousUserMitigation: "+fmt.Sprintf("%#v", this.MaliciousUserMitigation)+",\n")
	}
	if this.WafExclusionRules != nil {
		s = append(s, "WafExclusionRules: "+fmt.Sprintf("%#v", this.WafExclusionRules)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CreateSpecType_Http) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.CreateSpecType_Http{` +
		`Http:` + fmt.Sprintf("%#v", this.Http) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_HttpsAutoCert) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.CreateSpecType_HttpsAutoCert{` +
		`HttpsAutoCert:` + fmt.Sprintf("%#v", this.HttpsAutoCert) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_Https) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.CreateSpecType_Https{` +
		`Https:` + fmt.Sprintf("%#v", this.Https) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_DoNotAdvertise) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.CreateSpecType_DoNotAdvertise{` +
		`DoNotAdvertise:` + fmt.Sprintf("%#v", this.DoNotAdvertise) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_AdvertiseOnPublicDefaultVip) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.CreateSpecType_AdvertiseOnPublicDefaultVip{` +
		`AdvertiseOnPublicDefaultVip:` + fmt.Sprintf("%#v", this.AdvertiseOnPublicDefaultVip) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_AdvertiseOnPublic) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.CreateSpecType_AdvertiseOnPublic{` +
		`AdvertiseOnPublic:` + fmt.Sprintf("%#v", this.AdvertiseOnPublic) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_AdvertiseCustom) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.CreateSpecType_AdvertiseCustom{` +
		`AdvertiseCustom:` + fmt.Sprintf("%#v", this.AdvertiseCustom) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_DisableWaf) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.CreateSpecType_DisableWaf{` +
		`DisableWaf:` + fmt.Sprintf("%#v", this.DisableWaf) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_Waf) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.CreateSpecType_Waf{` +
		`Waf:` + fmt.Sprintf("%#v", this.Waf) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_WafRule) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.CreateSpecType_WafRule{` +
		`WafRule:` + fmt.Sprintf("%#v", this.WafRule) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_NoChallenge) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.CreateSpecType_NoChallenge{` +
		`NoChallenge:` + fmt.Sprintf("%#v", this.NoChallenge) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_JsChallenge) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.CreateSpecType_JsChallenge{` +
		`JsChallenge:` + fmt.Sprintf("%#v", this.JsChallenge) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_CaptchaChallenge) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.CreateSpecType_CaptchaChallenge{` +
		`CaptchaChallenge:` + fmt.Sprintf("%#v", this.CaptchaChallenge) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_DisableRateLimit) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.CreateSpecType_DisableRateLimit{` +
		`DisableRateLimit:` + fmt.Sprintf("%#v", this.DisableRateLimit) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_RateLimit) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.CreateSpecType_RateLimit{` +
		`RateLimit:` + fmt.Sprintf("%#v", this.RateLimit) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 28)
	s = append(s, "&http_loadbalancer.ReplaceSpecType{")
	s = append(s, "Domains: "+fmt.Sprintf("%#v", this.Domains)+",\n")
	if this.LoadbalancerType != nil {
		s = append(s, "LoadbalancerType: "+fmt.Sprintf("%#v", this.LoadbalancerType)+",\n")
	}
	if this.AdvertiseChoice != nil {
		s = append(s, "AdvertiseChoice: "+fmt.Sprintf("%#v", this.AdvertiseChoice)+",\n")
	}
	if this.DefaultRoutePools != nil {
		s = append(s, "DefaultRoutePools: "+fmt.Sprintf("%#v", this.DefaultRoutePools)+",\n")
	}
	if this.Routes != nil {
		s = append(s, "Routes: "+fmt.Sprintf("%#v", this.Routes)+",\n")
	}
	if this.CorsPolicy != nil {
		s = append(s, "CorsPolicy: "+fmt.Sprintf("%#v", this.CorsPolicy)+",\n")
	}
	if this.WafChoice != nil {
		s = append(s, "WafChoice: "+fmt.Sprintf("%#v", this.WafChoice)+",\n")
	}
	s = append(s, "AddLocation: "+fmt.Sprintf("%#v", this.AddLocation)+",\n")
	if this.ChallengeType != nil {
		s = append(s, "ChallengeType: "+fmt.Sprintf("%#v", this.ChallengeType)+",\n")
	}
	if this.MoreOption != nil {
		s = append(s, "MoreOption: "+fmt.Sprintf("%#v", this.MoreOption)+",\n")
	}
	if this.UserIdentification != nil {
		s = append(s, "UserIdentification: "+fmt.Sprintf("%#v", this.UserIdentification)+",\n")
	}
	if this.RateLimitChoice != nil {
		s = append(s, "RateLimitChoice: "+fmt.Sprintf("%#v", this.RateLimitChoice)+",\n")
	}
	if this.MaliciousUserMitigation != nil {
		s = append(s, "MaliciousUserMitigation: "+fmt.Sprintf("%#v", this.MaliciousUserMitigation)+",\n")
	}
	if this.WafExclusionRules != nil {
		s = append(s, "WafExclusionRules: "+fmt.Sprintf("%#v", this.WafExclusionRules)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ReplaceSpecType_Http) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.ReplaceSpecType_Http{` +
		`Http:` + fmt.Sprintf("%#v", this.Http) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_HttpsAutoCert) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.ReplaceSpecType_HttpsAutoCert{` +
		`HttpsAutoCert:` + fmt.Sprintf("%#v", this.HttpsAutoCert) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_Https) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.ReplaceSpecType_Https{` +
		`Https:` + fmt.Sprintf("%#v", this.Https) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_DoNotAdvertise) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.ReplaceSpecType_DoNotAdvertise{` +
		`DoNotAdvertise:` + fmt.Sprintf("%#v", this.DoNotAdvertise) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_AdvertiseOnPublicDefaultVip) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.ReplaceSpecType_AdvertiseOnPublicDefaultVip{` +
		`AdvertiseOnPublicDefaultVip:` + fmt.Sprintf("%#v", this.AdvertiseOnPublicDefaultVip) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_AdvertiseOnPublic) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.ReplaceSpecType_AdvertiseOnPublic{` +
		`AdvertiseOnPublic:` + fmt.Sprintf("%#v", this.AdvertiseOnPublic) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_AdvertiseCustom) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.ReplaceSpecType_AdvertiseCustom{` +
		`AdvertiseCustom:` + fmt.Sprintf("%#v", this.AdvertiseCustom) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_DisableWaf) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.ReplaceSpecType_DisableWaf{` +
		`DisableWaf:` + fmt.Sprintf("%#v", this.DisableWaf) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_Waf) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.ReplaceSpecType_Waf{` +
		`Waf:` + fmt.Sprintf("%#v", this.Waf) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_WafRule) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.ReplaceSpecType_WafRule{` +
		`WafRule:` + fmt.Sprintf("%#v", this.WafRule) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_NoChallenge) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.ReplaceSpecType_NoChallenge{` +
		`NoChallenge:` + fmt.Sprintf("%#v", this.NoChallenge) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_JsChallenge) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.ReplaceSpecType_JsChallenge{` +
		`JsChallenge:` + fmt.Sprintf("%#v", this.JsChallenge) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_CaptchaChallenge) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.ReplaceSpecType_CaptchaChallenge{` +
		`CaptchaChallenge:` + fmt.Sprintf("%#v", this.CaptchaChallenge) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_DisableRateLimit) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.ReplaceSpecType_DisableRateLimit{` +
		`DisableRateLimit:` + fmt.Sprintf("%#v", this.DisableRateLimit) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_RateLimit) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.ReplaceSpecType_RateLimit{` +
		`RateLimit:` + fmt.Sprintf("%#v", this.RateLimit) + `}`}, ", ")
	return s
}
func (this *GetSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 33)
	s = append(s, "&http_loadbalancer.GetSpecType{")
	s = append(s, "Domains: "+fmt.Sprintf("%#v", this.Domains)+",\n")
	if this.LoadbalancerType != nil {
		s = append(s, "LoadbalancerType: "+fmt.Sprintf("%#v", this.LoadbalancerType)+",\n")
	}
	if this.AdvertiseChoice != nil {
		s = append(s, "AdvertiseChoice: "+fmt.Sprintf("%#v", this.AdvertiseChoice)+",\n")
	}
	if this.DefaultRoutePools != nil {
		s = append(s, "DefaultRoutePools: "+fmt.Sprintf("%#v", this.DefaultRoutePools)+",\n")
	}
	if this.Routes != nil {
		s = append(s, "Routes: "+fmt.Sprintf("%#v", this.Routes)+",\n")
	}
	if this.CorsPolicy != nil {
		s = append(s, "CorsPolicy: "+fmt.Sprintf("%#v", this.CorsPolicy)+",\n")
	}
	if this.WafChoice != nil {
		s = append(s, "WafChoice: "+fmt.Sprintf("%#v", this.WafChoice)+",\n")
	}
	s = append(s, "AddLocation: "+fmt.Sprintf("%#v", this.AddLocation)+",\n")
	if this.ChallengeType != nil {
		s = append(s, "ChallengeType: "+fmt.Sprintf("%#v", this.ChallengeType)+",\n")
	}
	if this.MoreOption != nil {
		s = append(s, "MoreOption: "+fmt.Sprintf("%#v", this.MoreOption)+",\n")
	}
	if this.UserIdentification != nil {
		s = append(s, "UserIdentification: "+fmt.Sprintf("%#v", this.UserIdentification)+",\n")
	}
	if this.RateLimitChoice != nil {
		s = append(s, "RateLimitChoice: "+fmt.Sprintf("%#v", this.RateLimitChoice)+",\n")
	}
	if this.MaliciousUserMitigation != nil {
		s = append(s, "MaliciousUserMitigation: "+fmt.Sprintf("%#v", this.MaliciousUserMitigation)+",\n")
	}
	if this.WafExclusionRules != nil {
		s = append(s, "WafExclusionRules: "+fmt.Sprintf("%#v", this.WafExclusionRules)+",\n")
	}
	s = append(s, "HostName: "+fmt.Sprintf("%#v", this.HostName)+",\n")
	if this.DnsInfo != nil {
		s = append(s, "DnsInfo: "+fmt.Sprintf("%#v", this.DnsInfo)+",\n")
	}
	s = append(s, "State: "+fmt.Sprintf("%#v", this.State)+",\n")
	s = append(s, "AutoCertState: "+fmt.Sprintf("%#v", this.AutoCertState)+",\n")
	if this.AutoCertInfo != nil {
		s = append(s, "AutoCertInfo: "+fmt.Sprintf("%#v", this.AutoCertInfo)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetSpecType_Http) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.GetSpecType_Http{` +
		`Http:` + fmt.Sprintf("%#v", this.Http) + `}`}, ", ")
	return s
}
func (this *GetSpecType_HttpsAutoCert) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.GetSpecType_HttpsAutoCert{` +
		`HttpsAutoCert:` + fmt.Sprintf("%#v", this.HttpsAutoCert) + `}`}, ", ")
	return s
}
func (this *GetSpecType_Https) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.GetSpecType_Https{` +
		`Https:` + fmt.Sprintf("%#v", this.Https) + `}`}, ", ")
	return s
}
func (this *GetSpecType_DoNotAdvertise) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.GetSpecType_DoNotAdvertise{` +
		`DoNotAdvertise:` + fmt.Sprintf("%#v", this.DoNotAdvertise) + `}`}, ", ")
	return s
}
func (this *GetSpecType_AdvertiseOnPublicDefaultVip) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.GetSpecType_AdvertiseOnPublicDefaultVip{` +
		`AdvertiseOnPublicDefaultVip:` + fmt.Sprintf("%#v", this.AdvertiseOnPublicDefaultVip) + `}`}, ", ")
	return s
}
func (this *GetSpecType_AdvertiseOnPublic) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.GetSpecType_AdvertiseOnPublic{` +
		`AdvertiseOnPublic:` + fmt.Sprintf("%#v", this.AdvertiseOnPublic) + `}`}, ", ")
	return s
}
func (this *GetSpecType_AdvertiseCustom) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.GetSpecType_AdvertiseCustom{` +
		`AdvertiseCustom:` + fmt.Sprintf("%#v", this.AdvertiseCustom) + `}`}, ", ")
	return s
}
func (this *GetSpecType_DisableWaf) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.GetSpecType_DisableWaf{` +
		`DisableWaf:` + fmt.Sprintf("%#v", this.DisableWaf) + `}`}, ", ")
	return s
}
func (this *GetSpecType_Waf) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.GetSpecType_Waf{` +
		`Waf:` + fmt.Sprintf("%#v", this.Waf) + `}`}, ", ")
	return s
}
func (this *GetSpecType_WafRule) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.GetSpecType_WafRule{` +
		`WafRule:` + fmt.Sprintf("%#v", this.WafRule) + `}`}, ", ")
	return s
}
func (this *GetSpecType_NoChallenge) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.GetSpecType_NoChallenge{` +
		`NoChallenge:` + fmt.Sprintf("%#v", this.NoChallenge) + `}`}, ", ")
	return s
}
func (this *GetSpecType_JsChallenge) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.GetSpecType_JsChallenge{` +
		`JsChallenge:` + fmt.Sprintf("%#v", this.JsChallenge) + `}`}, ", ")
	return s
}
func (this *GetSpecType_CaptchaChallenge) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.GetSpecType_CaptchaChallenge{` +
		`CaptchaChallenge:` + fmt.Sprintf("%#v", this.CaptchaChallenge) + `}`}, ", ")
	return s
}
func (this *GetSpecType_DisableRateLimit) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.GetSpecType_DisableRateLimit{` +
		`DisableRateLimit:` + fmt.Sprintf("%#v", this.DisableRateLimit) + `}`}, ", ")
	return s
}
func (this *GetSpecType_RateLimit) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.GetSpecType_RateLimit{` +
		`RateLimit:` + fmt.Sprintf("%#v", this.RateLimit) + `}`}, ", ")
	return s
}
func valueToGoStringTypes(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *DownstreamTlsValidationContext) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DownstreamTlsValidationContext) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.TrustedCaUrl) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTypes(dAtA, i, uint64(len(m.TrustedCaUrl)))
		i += copy(dAtA[i:], m.TrustedCaUrl)
	}
	return i, nil
}

func (m *DownstreamTlsParamsType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DownstreamTlsParamsType) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.TlsConfig != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.TlsConfig.Size()))
		n1, err := m.TlsConfig.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if len(m.TlsCertificates) > 0 {
		for _, msg := range m.TlsCertificates {
			dAtA[i] = 0x12
			i++
			i = encodeVarintTypes(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.MtlsChoice != nil {
		nn2, err := m.MtlsChoice.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn2
	}
	return i, nil
}

func (m *DownstreamTlsParamsType_NoMtls) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.NoMtls != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.NoMtls.Size()))
		n3, err := m.NoMtls.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	return i, nil
}
func (m *DownstreamTlsParamsType_UseMtls) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.UseMtls != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.UseMtls.Size()))
		n4, err := m.UseMtls.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	return i, nil
}
func (m *ProxyTypeHttps) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProxyTypeHttps) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.HttpRedirect {
		dAtA[i] = 0x8
		i++
		if m.HttpRedirect {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.AddHsts {
		dAtA[i] = 0x10
		i++
		if m.AddHsts {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.TlsParameters != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.TlsParameters.Size()))
		n5, err := m.TlsParameters.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	return i, nil
}

func (m *ProxyTypeHttpsAutoCerts) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProxyTypeHttpsAutoCerts) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.HttpRedirect {
		dAtA[i] = 0x8
		i++
		if m.HttpRedirect {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.AddHsts {
		dAtA[i] = 0x10
		i++
		if m.AddHsts {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *RouteTypeSimpleWithDefaultOriginPool) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RouteTypeSimpleWithDefaultOriginPool) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.HttpMethod != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.HttpMethod))
	}
	if m.Path != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.Path.Size()))
		n6, err := m.Path.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	if m.HostRewriteParams != nil {
		nn7, err := m.HostRewriteParams.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn7
	}
	return i, nil
}

func (m *RouteTypeSimpleWithDefaultOriginPool_AutoHostRewrite) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.AutoHostRewrite != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.AutoHostRewrite.Size()))
		n8, err := m.AutoHostRewrite.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n8
	}
	return i, nil
}
func (m *RouteTypeSimpleWithDefaultOriginPool_HostRewrite) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x2a
	i++
	i = encodeVarintTypes(dAtA, i, uint64(len(m.HostRewrite)))
	i += copy(dAtA[i:], m.HostRewrite)
	return i, nil
}
func (m *RouteTypeSimpleWithDefaultOriginPool_DisableHostRewrite) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.DisableHostRewrite != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.DisableHostRewrite.Size()))
		n9, err := m.DisableHostRewrite.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n9
	}
	return i, nil
}
func (m *RouteTypeSimple) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RouteTypeSimple) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Path != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.Path.Size()))
		n10, err := m.Path.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n10
	}
	if m.HttpMethod != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.HttpMethod))
	}
	if len(m.OriginPools) > 0 {
		for _, msg := range m.OriginPools {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintTypes(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.HostRewriteParams != nil {
		nn11, err := m.HostRewriteParams.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn11
	}
	return i, nil
}

func (m *RouteTypeSimple_AutoHostRewrite) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.AutoHostRewrite != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.AutoHostRewrite.Size()))
		n12, err := m.AutoHostRewrite.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n12
	}
	return i, nil
}
func (m *RouteTypeSimple_HostRewrite) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x32
	i++
	i = encodeVarintTypes(dAtA, i, uint64(len(m.HostRewrite)))
	i += copy(dAtA[i:], m.HostRewrite)
	return i, nil
}
func (m *RouteTypeSimple_DisableHostRewrite) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.DisableHostRewrite != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.DisableHostRewrite.Size()))
		n13, err := m.DisableHostRewrite.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n13
	}
	return i, nil
}
func (m *RouteTypeRedirect) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RouteTypeRedirect) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Path != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.Path.Size()))
		n14, err := m.Path.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n14
	}
	if m.HttpMethod != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.HttpMethod))
	}
	if m.RouteRedirect != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.RouteRedirect.Size()))
		n15, err := m.RouteRedirect.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n15
	}
	return i, nil
}

func (m *RouteTypeDirectResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RouteTypeDirectResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Path != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.Path.Size()))
		n16, err := m.Path.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n16
	}
	if m.HttpMethod != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.HttpMethod))
	}
	if m.RouteDirectResponse != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.RouteDirectResponse.Size()))
		n17, err := m.RouteDirectResponse.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n17
	}
	return i, nil
}

func (m *RouteTypeCustomRoute) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RouteTypeCustomRoute) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.RouteRef != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.RouteRef.Size()))
		n18, err := m.RouteRef.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n18
	}
	return i, nil
}

func (m *RouteType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RouteType) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Choice != nil {
		nn19, err := m.Choice.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn19
	}
	return i, nil
}

func (m *RouteType_SimpleRoute) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.SimpleRoute != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.SimpleRoute.Size()))
		n20, err := m.SimpleRoute.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n20
	}
	return i, nil
}
func (m *RouteType_RedirectRoute) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.RedirectRoute != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.RedirectRoute.Size()))
		n21, err := m.RedirectRoute.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n21
	}
	return i, nil
}
func (m *RouteType_DirectResponseRoute) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.DirectResponseRoute != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.DirectResponseRoute.Size()))
		n22, err := m.DirectResponseRoute.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n22
	}
	return i, nil
}
func (m *RouteType_CustomRouteObject) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.CustomRouteObject != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.CustomRouteObject.Size()))
		n23, err := m.CustomRouteObject.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n23
	}
	return i, nil
}
func (m *AdvancedOptionsType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AdvancedOptionsType) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.RequestHeadersToAdd) > 0 {
		for _, msg := range m.RequestHeadersToAdd {
			dAtA[i] = 0xa
			i++
			i = encodeVarintTypes(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.RequestHeadersToRemove) > 0 {
		for _, s := range m.RequestHeadersToRemove {
			dAtA[i] = 0x12
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.ResponseHeadersToAdd) > 0 {
		for _, msg := range m.ResponseHeadersToAdd {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintTypes(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.ResponseHeadersToRemove) > 0 {
		for _, s := range m.ResponseHeadersToRemove {
			dAtA[i] = 0x22
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if m.MaxRequestHeaderSize != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.MaxRequestHeaderSize))
	}
	if m.BufferPolicy != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.BufferPolicy.Size()))
		n24, err := m.BufferPolicy.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n24
	}
	if m.CompressionParams != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.CompressionParams.Size()))
		n25, err := m.CompressionParams.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n25
	}
	if len(m.CustomErrors) > 0 {
		keysForCustomErrors := make([]uint32, 0, len(m.CustomErrors))
		for k, _ := range m.CustomErrors {
			keysForCustomErrors = append(keysForCustomErrors, uint32(k))
		}
		sortkeys.Uint32s(keysForCustomErrors)
		for _, k := range keysForCustomErrors {
			dAtA[i] = 0x42
			i++
			v := m.CustomErrors[uint32(k)]
			mapSize := 1 + sovTypes(uint64(k)) + 1 + len(v) + sovTypes(uint64(len(v)))
			i = encodeVarintTypes(dAtA, i, uint64(mapSize))
			dAtA[i] = 0x8
			i++
			i = encodeVarintTypes(dAtA, i, uint64(k))
			dAtA[i] = 0x12
			i++
			i = encodeVarintTypes(dAtA, i, uint64(len(v)))
			i += copy(dAtA[i:], v)
		}
	}
	if m.JavascriptInfo != nil {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.JavascriptInfo.Size()))
		n26, err := m.JavascriptInfo.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n26
	}
	if len(m.Jwt) > 0 {
		for _, msg := range m.Jwt {
			dAtA[i] = 0x52
			i++
			i = encodeVarintTypes(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.IdleTimeout != 0 {
		dAtA[i] = 0x58
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.IdleTimeout))
	}
	return i, nil
}

func (m *CustomIpAllowedList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CustomIpAllowedList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.RateLimiterAllowedPrefixes) > 0 {
		for _, msg := range m.RateLimiterAllowedPrefixes {
			dAtA[i] = 0xb2
			i++
			dAtA[i] = 0x1
			i++
			i = encodeVarintTypes(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *RateLimitConfigType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RateLimitConfigType) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.RateLimiter != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.RateLimiter.Size()))
		n27, err := m.RateLimiter.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n27
	}
	if m.IpAllowedListChoice != nil {
		nn28, err := m.IpAllowedListChoice.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn28
	}
	return i, nil
}

func (m *RateLimitConfigType_NoIpAllowedList) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.NoIpAllowedList != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.NoIpAllowedList.Size()))
		n29, err := m.NoIpAllowedList.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n29
	}
	return i, nil
}
func (m *RateLimitConfigType_IpAllowedList) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.IpAllowedList != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.IpAllowedList.Size()))
		n30, err := m.IpAllowedList.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n30
	}
	return i, nil
}
func (m *RateLimitConfigType_CustomIpAllowedList) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.CustomIpAllowedList != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.CustomIpAllowedList.Size()))
		n31, err := m.CustomIpAllowedList.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n31
	}
	return i, nil
}
func (m *GlobalSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GlobalSpecType) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Domains) > 0 {
		for _, s := range m.Domains {
			dAtA[i] = 0xa
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if m.LoadbalancerType != nil {
		nn32, err := m.LoadbalancerType.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn32
	}
	if m.AdvertiseChoice != nil {
		nn33, err := m.AdvertiseChoice.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn33
	}
	if len(m.DefaultRoutePools) > 0 {
		for _, msg := range m.DefaultRoutePools {
			dAtA[i] = 0x32
			i++
			i = encodeVarintTypes(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Routes) > 0 {
		for _, msg := range m.Routes {
			dAtA[i] = 0x3a
			i++
			i = encodeVarintTypes(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.CorsPolicy != nil {
		dAtA[i] = 0x42
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.CorsPolicy.Size()))
		n34, err := m.CorsPolicy.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n34
	}
	if m.WafChoice != nil {
		nn35, err := m.WafChoice.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn35
	}
	if m.AddLocation {
		dAtA[i] = 0x88
		i++
		dAtA[i] = 0x1
		i++
		if m.AddLocation {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.ChallengeType != nil {
		nn36, err := m.ChallengeType.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn36
	}
	if m.MoreOption != nil {
		dAtA[i] = 0x9a
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.MoreOption.Size()))
		n37, err := m.MoreOption.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n37
	}
	if m.UserIdentification != nil {
		dAtA[i] = 0xa2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.UserIdentification.Size()))
		n38, err := m.UserIdentification.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n38
	}
	if m.RateLimitChoice != nil {
		nn39, err := m.RateLimitChoice.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn39
	}
	if m.HostRewriteParams != nil {
		nn40, err := m.HostRewriteParams.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn40
	}
	if m.MaliciousUserMitigation != nil {
		dAtA[i] = 0x82
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.MaliciousUserMitigation.Size()))
		n41, err := m.MaliciousUserMitigation.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n41
	}
	if len(m.WafExclusionRules) > 0 {
		for _, msg := range m.WafExclusionRules {
			dAtA[i] = 0x8a
			i++
			dAtA[i] = 0x2
			i++
			i = encodeVarintTypes(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.ViewInternal != nil {
		dAtA[i] = 0xc2
		i++
		dAtA[i] = 0x3e
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.ViewInternal.Size()))
		n42, err := m.ViewInternal.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n42
	}
	if len(m.HostName) > 0 {
		dAtA[i] = 0xca
		i++
		dAtA[i] = 0x3e
		i++
		i = encodeVarintTypes(dAtA, i, uint64(len(m.HostName)))
		i += copy(dAtA[i:], m.HostName)
	}
	if len(m.DnsInfo) > 0 {
		for _, msg := range m.DnsInfo {
			dAtA[i] = 0xd2
			i++
			dAtA[i] = 0x3e
			i++
			i = encodeVarintTypes(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.State != 0 {
		dAtA[i] = 0xd8
		i++
		dAtA[i] = 0x3e
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.State))
	}
	if m.AutoCertState != 0 {
		dAtA[i] = 0xe0
		i++
		dAtA[i] = 0x3e
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.AutoCertState))
	}
	if m.AutoCertInfo != nil {
		dAtA[i] = 0x92
		i++
		dAtA[i] = 0x3f
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.AutoCertInfo.Size()))
		n43, err := m.AutoCertInfo.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n43
	}
	return i, nil
}

func (m *GlobalSpecType_Http) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Http != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.Http.Size()))
		n44, err := m.Http.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n44
	}
	return i, nil
}
func (m *GlobalSpecType_Https) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Https != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.Https.Size()))
		n45, err := m.Https.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n45
	}
	return i, nil
}
func (m *GlobalSpecType_AdvertiseOnPublic) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.AdvertiseOnPublic != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.AdvertiseOnPublic.Size()))
		n46, err := m.AdvertiseOnPublic.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n46
	}
	return i, nil
}
func (m *GlobalSpecType_AdvertiseCustom) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.AdvertiseCustom != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.AdvertiseCustom.Size()))
		n47, err := m.AdvertiseCustom.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n47
	}
	return i, nil
}
func (m *GlobalSpecType_Waf) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Waf != nil {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.Waf.Size()))
		n48, err := m.Waf.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n48
	}
	return i, nil
}
func (m *GlobalSpecType_WafRule) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.WafRule != nil {
		dAtA[i] = 0x52
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.WafRule.Size()))
		n49, err := m.WafRule.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n49
	}
	return i, nil
}
func (m *GlobalSpecType_DisableWaf) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.DisableWaf != nil {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.DisableWaf.Size()))
		n50, err := m.DisableWaf.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n50
	}
	return i, nil
}
func (m *GlobalSpecType_DoNotAdvertise) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.DoNotAdvertise != nil {
		dAtA[i] = 0x62
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.DoNotAdvertise.Size()))
		n51, err := m.DoNotAdvertise.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n51
	}
	return i, nil
}
func (m *GlobalSpecType_AdvertiseOnPublicDefaultVip) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.AdvertiseOnPublicDefaultVip != nil {
		dAtA[i] = 0x6a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.AdvertiseOnPublicDefaultVip.Size()))
		n52, err := m.AdvertiseOnPublicDefaultVip.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n52
	}
	return i, nil
}
func (m *GlobalSpecType_JsChallenge) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.JsChallenge != nil {
		dAtA[i] = 0x92
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.JsChallenge.Size()))
		n53, err := m.JsChallenge.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n53
	}
	return i, nil
}
func (m *GlobalSpecType_DisableRateLimit) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.DisableRateLimit != nil {
		dAtA[i] = 0xb2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.DisableRateLimit.Size()))
		n54, err := m.DisableRateLimit.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n54
	}
	return i, nil
}
func (m *GlobalSpecType_RateLimit) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.RateLimit != nil {
		dAtA[i] = 0xba
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.RateLimit.Size()))
		n55, err := m.RateLimit.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n55
	}
	return i, nil
}
func (m *GlobalSpecType_CaptchaChallenge) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.CaptchaChallenge != nil {
		dAtA[i] = 0xc2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.CaptchaChallenge.Size()))
		n56, err := m.CaptchaChallenge.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n56
	}
	return i, nil
}
func (m *GlobalSpecType_NoChallenge) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.NoChallenge != nil {
		dAtA[i] = 0xd2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.NoChallenge.Size()))
		n57, err := m.NoChallenge.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n57
	}
	return i, nil
}
func (m *GlobalSpecType_HttpsAutoCert) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.HttpsAutoCert != nil {
		dAtA[i] = 0xda
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.HttpsAutoCert.Size()))
		n58, err := m.HttpsAutoCert.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n58
	}
	return i, nil
}
func (m *GlobalSpecType_AutoHostRewrite) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.AutoHostRewrite != nil {
		dAtA[i] = 0xe2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.AutoHostRewrite.Size()))
		n59, err := m.AutoHostRewrite.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n59
	}
	return i, nil
}
func (m *GlobalSpecType_HostRewrite) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0xea
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintTypes(dAtA, i, uint64(len(m.HostRewrite)))
	i += copy(dAtA[i:], m.HostRewrite)
	return i, nil
}
func (m *GlobalSpecType_DisableHostRewrite) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.DisableHostRewrite != nil {
		dAtA[i] = 0xf2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.DisableHostRewrite.Size()))
		n60, err := m.DisableHostRewrite.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n60
	}
	return i, nil
}
func (m *CreateSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateSpecType) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Domains) > 0 {
		for _, s := range m.Domains {
			dAtA[i] = 0xa
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if m.LoadbalancerType != nil {
		nn61, err := m.LoadbalancerType.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn61
	}
	if m.AdvertiseChoice != nil {
		nn62, err := m.AdvertiseChoice.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn62
	}
	if len(m.DefaultRoutePools) > 0 {
		for _, msg := range m.DefaultRoutePools {
			dAtA[i] = 0x32
			i++
			i = encodeVarintTypes(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Routes) > 0 {
		for _, msg := range m.Routes {
			dAtA[i] = 0x3a
			i++
			i = encodeVarintTypes(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.CorsPolicy != nil {
		dAtA[i] = 0x42
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.CorsPolicy.Size()))
		n63, err := m.CorsPolicy.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n63
	}
	if m.WafChoice != nil {
		nn64, err := m.WafChoice.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn64
	}
	if m.AddLocation {
		dAtA[i] = 0x88
		i++
		dAtA[i] = 0x1
		i++
		if m.AddLocation {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.ChallengeType != nil {
		nn65, err := m.ChallengeType.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn65
	}
	if m.MoreOption != nil {
		dAtA[i] = 0x9a
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.MoreOption.Size()))
		n66, err := m.MoreOption.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n66
	}
	if m.UserIdentification != nil {
		dAtA[i] = 0xa2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.UserIdentification.Size()))
		n67, err := m.UserIdentification.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n67
	}
	if m.RateLimitChoice != nil {
		nn68, err := m.RateLimitChoice.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn68
	}
	if m.MaliciousUserMitigation != nil {
		dAtA[i] = 0x82
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.MaliciousUserMitigation.Size()))
		n69, err := m.MaliciousUserMitigation.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n69
	}
	if len(m.WafExclusionRules) > 0 {
		for _, msg := range m.WafExclusionRules {
			dAtA[i] = 0x8a
			i++
			dAtA[i] = 0x2
			i++
			i = encodeVarintTypes(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *CreateSpecType_Http) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Http != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.Http.Size()))
		n70, err := m.Http.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n70
	}
	return i, nil
}
func (m *CreateSpecType_Https) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Https != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.Https.Size()))
		n71, err := m.Https.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n71
	}
	return i, nil
}
func (m *CreateSpecType_AdvertiseOnPublic) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.AdvertiseOnPublic != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.AdvertiseOnPublic.Size()))
		n72, err := m.AdvertiseOnPublic.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n72
	}
	return i, nil
}
func (m *CreateSpecType_AdvertiseCustom) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.AdvertiseCustom != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.AdvertiseCustom.Size()))
		n73, err := m.AdvertiseCustom.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n73
	}
	return i, nil
}
func (m *CreateSpecType_Waf) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Waf != nil {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.Waf.Size()))
		n74, err := m.Waf.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n74
	}
	return i, nil
}
func (m *CreateSpecType_WafRule) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.WafRule != nil {
		dAtA[i] = 0x52
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.WafRule.Size()))
		n75, err := m.WafRule.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n75
	}
	return i, nil
}
func (m *CreateSpecType_DisableWaf) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.DisableWaf != nil {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.DisableWaf.Size()))
		n76, err := m.DisableWaf.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n76
	}
	return i, nil
}
func (m *CreateSpecType_DoNotAdvertise) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.DoNotAdvertise != nil {
		dAtA[i] = 0x62
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.DoNotAdvertise.Size()))
		n77, err := m.DoNotAdvertise.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n77
	}
	return i, nil
}
func (m *CreateSpecType_AdvertiseOnPublicDefaultVip) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.AdvertiseOnPublicDefaultVip != nil {
		dAtA[i] = 0x6a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.AdvertiseOnPublicDefaultVip.Size()))
		n78, err := m.AdvertiseOnPublicDefaultVip.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n78
	}
	return i, nil
}
func (m *CreateSpecType_JsChallenge) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.JsChallenge != nil {
		dAtA[i] = 0x92
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.JsChallenge.Size()))
		n79, err := m.JsChallenge.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n79
	}
	return i, nil
}
func (m *CreateSpecType_DisableRateLimit) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.DisableRateLimit != nil {
		dAtA[i] = 0xb2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.DisableRateLimit.Size()))
		n80, err := m.DisableRateLimit.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n80
	}
	return i, nil
}
func (m *CreateSpecType_RateLimit) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.RateLimit != nil {
		dAtA[i] = 0xba
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.RateLimit.Size()))
		n81, err := m.RateLimit.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n81
	}
	return i, nil
}
func (m *CreateSpecType_CaptchaChallenge) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.CaptchaChallenge != nil {
		dAtA[i] = 0xc2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.CaptchaChallenge.Size()))
		n82, err := m.CaptchaChallenge.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n82
	}
	return i, nil
}
func (m *CreateSpecType_NoChallenge) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.NoChallenge != nil {
		dAtA[i] = 0xd2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.NoChallenge.Size()))
		n83, err := m.NoChallenge.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n83
	}
	return i, nil
}
func (m *CreateSpecType_HttpsAutoCert) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.HttpsAutoCert != nil {
		dAtA[i] = 0xda
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.HttpsAutoCert.Size()))
		n84, err := m.HttpsAutoCert.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n84
	}
	return i, nil
}
func (m *ReplaceSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplaceSpecType) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Domains) > 0 {
		for _, s := range m.Domains {
			dAtA[i] = 0xa
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if m.LoadbalancerType != nil {
		nn85, err := m.LoadbalancerType.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn85
	}
	if m.AdvertiseChoice != nil {
		nn86, err := m.AdvertiseChoice.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn86
	}
	if len(m.DefaultRoutePools) > 0 {
		for _, msg := range m.DefaultRoutePools {
			dAtA[i] = 0x32
			i++
			i = encodeVarintTypes(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Routes) > 0 {
		for _, msg := range m.Routes {
			dAtA[i] = 0x3a
			i++
			i = encodeVarintTypes(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.CorsPolicy != nil {
		dAtA[i] = 0x42
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.CorsPolicy.Size()))
		n87, err := m.CorsPolicy.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n87
	}
	if m.WafChoice != nil {
		nn88, err := m.WafChoice.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn88
	}
	if m.AddLocation {
		dAtA[i] = 0x88
		i++
		dAtA[i] = 0x1
		i++
		if m.AddLocation {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.ChallengeType != nil {
		nn89, err := m.ChallengeType.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn89
	}
	if m.MoreOption != nil {
		dAtA[i] = 0x9a
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.MoreOption.Size()))
		n90, err := m.MoreOption.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n90
	}
	if m.UserIdentification != nil {
		dAtA[i] = 0xa2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.UserIdentification.Size()))
		n91, err := m.UserIdentification.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n91
	}
	if m.RateLimitChoice != nil {
		nn92, err := m.RateLimitChoice.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn92
	}
	if m.MaliciousUserMitigation != nil {
		dAtA[i] = 0x82
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.MaliciousUserMitigation.Size()))
		n93, err := m.MaliciousUserMitigation.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n93
	}
	if len(m.WafExclusionRules) > 0 {
		for _, msg := range m.WafExclusionRules {
			dAtA[i] = 0x8a
			i++
			dAtA[i] = 0x2
			i++
			i = encodeVarintTypes(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *ReplaceSpecType_Http) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Http != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.Http.Size()))
		n94, err := m.Http.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n94
	}
	return i, nil
}
func (m *ReplaceSpecType_Https) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Https != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.Https.Size()))
		n95, err := m.Https.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n95
	}
	return i, nil
}
func (m *ReplaceSpecType_AdvertiseOnPublic) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.AdvertiseOnPublic != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.AdvertiseOnPublic.Size()))
		n96, err := m.AdvertiseOnPublic.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n96
	}
	return i, nil
}
func (m *ReplaceSpecType_AdvertiseCustom) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.AdvertiseCustom != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.AdvertiseCustom.Size()))
		n97, err := m.AdvertiseCustom.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n97
	}
	return i, nil
}
func (m *ReplaceSpecType_Waf) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Waf != nil {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.Waf.Size()))
		n98, err := m.Waf.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n98
	}
	return i, nil
}
func (m *ReplaceSpecType_WafRule) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.WafRule != nil {
		dAtA[i] = 0x52
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.WafRule.Size()))
		n99, err := m.WafRule.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n99
	}
	return i, nil
}
func (m *ReplaceSpecType_DisableWaf) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.DisableWaf != nil {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.DisableWaf.Size()))
		n100, err := m.DisableWaf.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n100
	}
	return i, nil
}
func (m *ReplaceSpecType_DoNotAdvertise) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.DoNotAdvertise != nil {
		dAtA[i] = 0x62
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.DoNotAdvertise.Size()))
		n101, err := m.DoNotAdvertise.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n101
	}
	return i, nil
}
func (m *ReplaceSpecType_AdvertiseOnPublicDefaultVip) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.AdvertiseOnPublicDefaultVip != nil {
		dAtA[i] = 0x6a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.AdvertiseOnPublicDefaultVip.Size()))
		n102, err := m.AdvertiseOnPublicDefaultVip.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n102
	}
	return i, nil
}
func (m *ReplaceSpecType_JsChallenge) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.JsChallenge != nil {
		dAtA[i] = 0x92
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.JsChallenge.Size()))
		n103, err := m.JsChallenge.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n103
	}
	return i, nil
}
func (m *ReplaceSpecType_DisableRateLimit) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.DisableRateLimit != nil {
		dAtA[i] = 0xb2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.DisableRateLimit.Size()))
		n104, err := m.DisableRateLimit.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n104
	}
	return i, nil
}
func (m *ReplaceSpecType_RateLimit) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.RateLimit != nil {
		dAtA[i] = 0xba
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.RateLimit.Size()))
		n105, err := m.RateLimit.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n105
	}
	return i, nil
}
func (m *ReplaceSpecType_CaptchaChallenge) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.CaptchaChallenge != nil {
		dAtA[i] = 0xc2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.CaptchaChallenge.Size()))
		n106, err := m.CaptchaChallenge.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n106
	}
	return i, nil
}
func (m *ReplaceSpecType_NoChallenge) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.NoChallenge != nil {
		dAtA[i] = 0xd2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.NoChallenge.Size()))
		n107, err := m.NoChallenge.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n107
	}
	return i, nil
}
func (m *ReplaceSpecType_HttpsAutoCert) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.HttpsAutoCert != nil {
		dAtA[i] = 0xda
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.HttpsAutoCert.Size()))
		n108, err := m.HttpsAutoCert.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n108
	}
	return i, nil
}
func (m *GetSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetSpecType) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Domains) > 0 {
		for _, s := range m.Domains {
			dAtA[i] = 0xa
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if m.LoadbalancerType != nil {
		nn109, err := m.LoadbalancerType.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn109
	}
	if m.AdvertiseChoice != nil {
		nn110, err := m.AdvertiseChoice.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn110
	}
	if len(m.DefaultRoutePools) > 0 {
		for _, msg := range m.DefaultRoutePools {
			dAtA[i] = 0x32
			i++
			i = encodeVarintTypes(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Routes) > 0 {
		for _, msg := range m.Routes {
			dAtA[i] = 0x3a
			i++
			i = encodeVarintTypes(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.CorsPolicy != nil {
		dAtA[i] = 0x42
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.CorsPolicy.Size()))
		n111, err := m.CorsPolicy.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n111
	}
	if m.WafChoice != nil {
		nn112, err := m.WafChoice.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn112
	}
	if m.AddLocation {
		dAtA[i] = 0x88
		i++
		dAtA[i] = 0x1
		i++
		if m.AddLocation {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.ChallengeType != nil {
		nn113, err := m.ChallengeType.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn113
	}
	if m.MoreOption != nil {
		dAtA[i] = 0x9a
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.MoreOption.Size()))
		n114, err := m.MoreOption.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n114
	}
	if m.UserIdentification != nil {
		dAtA[i] = 0xa2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.UserIdentification.Size()))
		n115, err := m.UserIdentification.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n115
	}
	if m.RateLimitChoice != nil {
		nn116, err := m.RateLimitChoice.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn116
	}
	if m.MaliciousUserMitigation != nil {
		dAtA[i] = 0x82
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.MaliciousUserMitigation.Size()))
		n117, err := m.MaliciousUserMitigation.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n117
	}
	if len(m.WafExclusionRules) > 0 {
		for _, msg := range m.WafExclusionRules {
			dAtA[i] = 0x8a
			i++
			dAtA[i] = 0x2
			i++
			i = encodeVarintTypes(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.HostName) > 0 {
		dAtA[i] = 0xca
		i++
		dAtA[i] = 0x3e
		i++
		i = encodeVarintTypes(dAtA, i, uint64(len(m.HostName)))
		i += copy(dAtA[i:], m.HostName)
	}
	if len(m.DnsInfo) > 0 {
		for _, msg := range m.DnsInfo {
			dAtA[i] = 0xd2
			i++
			dAtA[i] = 0x3e
			i++
			i = encodeVarintTypes(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.State != 0 {
		dAtA[i] = 0xd8
		i++
		dAtA[i] = 0x3e
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.State))
	}
	if m.AutoCertState != 0 {
		dAtA[i] = 0xe0
		i++
		dAtA[i] = 0x3e
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.AutoCertState))
	}
	if m.AutoCertInfo != nil {
		dAtA[i] = 0x92
		i++
		dAtA[i] = 0x3f
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.AutoCertInfo.Size()))
		n118, err := m.AutoCertInfo.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n118
	}
	return i, nil
}

func (m *GetSpecType_Http) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Http != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.Http.Size()))
		n119, err := m.Http.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n119
	}
	return i, nil
}
func (m *GetSpecType_Https) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Https != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.Https.Size()))
		n120, err := m.Https.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n120
	}
	return i, nil
}
func (m *GetSpecType_AdvertiseOnPublic) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.AdvertiseOnPublic != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.AdvertiseOnPublic.Size()))
		n121, err := m.AdvertiseOnPublic.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n121
	}
	return i, nil
}
func (m *GetSpecType_AdvertiseCustom) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.AdvertiseCustom != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.AdvertiseCustom.Size()))
		n122, err := m.AdvertiseCustom.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n122
	}
	return i, nil
}
func (m *GetSpecType_Waf) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Waf != nil {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.Waf.Size()))
		n123, err := m.Waf.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n123
	}
	return i, nil
}
func (m *GetSpecType_WafRule) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.WafRule != nil {
		dAtA[i] = 0x52
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.WafRule.Size()))
		n124, err := m.WafRule.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n124
	}
	return i, nil
}
func (m *GetSpecType_DisableWaf) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.DisableWaf != nil {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.DisableWaf.Size()))
		n125, err := m.DisableWaf.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n125
	}
	return i, nil
}
func (m *GetSpecType_DoNotAdvertise) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.DoNotAdvertise != nil {
		dAtA[i] = 0x62
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.DoNotAdvertise.Size()))
		n126, err := m.DoNotAdvertise.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n126
	}
	return i, nil
}
func (m *GetSpecType_AdvertiseOnPublicDefaultVip) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.AdvertiseOnPublicDefaultVip != nil {
		dAtA[i] = 0x6a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.AdvertiseOnPublicDefaultVip.Size()))
		n127, err := m.AdvertiseOnPublicDefaultVip.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n127
	}
	return i, nil
}
func (m *GetSpecType_JsChallenge) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.JsChallenge != nil {
		dAtA[i] = 0x92
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.JsChallenge.Size()))
		n128, err := m.JsChallenge.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n128
	}
	return i, nil
}
func (m *GetSpecType_DisableRateLimit) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.DisableRateLimit != nil {
		dAtA[i] = 0xb2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.DisableRateLimit.Size()))
		n129, err := m.DisableRateLimit.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n129
	}
	return i, nil
}
func (m *GetSpecType_RateLimit) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.RateLimit != nil {
		dAtA[i] = 0xba
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.RateLimit.Size()))
		n130, err := m.RateLimit.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n130
	}
	return i, nil
}
func (m *GetSpecType_CaptchaChallenge) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.CaptchaChallenge != nil {
		dAtA[i] = 0xc2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.CaptchaChallenge.Size()))
		n131, err := m.CaptchaChallenge.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n131
	}
	return i, nil
}
func (m *GetSpecType_NoChallenge) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.NoChallenge != nil {
		dAtA[i] = 0xd2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.NoChallenge.Size()))
		n132, err := m.NoChallenge.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n132
	}
	return i, nil
}
func (m *GetSpecType_HttpsAutoCert) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.HttpsAutoCert != nil {
		dAtA[i] = 0xda
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.HttpsAutoCert.Size()))
		n133, err := m.HttpsAutoCert.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n133
	}
	return i, nil
}
func encodeVarintTypes(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func NewPopulatedDownstreamTlsValidationContext(r randyTypes, easy bool) *DownstreamTlsValidationContext {
	this := &DownstreamTlsValidationContext{}
	this.TrustedCaUrl = string(randStringTypes(r))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedDownstreamTlsParamsType(r randyTypes, easy bool) *DownstreamTlsParamsType {
	this := &DownstreamTlsParamsType{}
	if r.Intn(10) != 0 {
		this.TlsConfig = ves_io_schema_views.NewPopulatedTlsConfig(r, easy)
	}
	if r.Intn(10) != 0 {
		v1 := r.Intn(5)
		this.TlsCertificates = make([]*ves_io_schema4.TlsCertificateType, v1)
		for i := 0; i < v1; i++ {
			this.TlsCertificates[i] = ves_io_schema4.NewPopulatedTlsCertificateType(r, easy)
		}
	}
	oneofNumber_MtlsChoice := []int32{3, 4}[r.Intn(2)]
	switch oneofNumber_MtlsChoice {
	case 3:
		this.MtlsChoice = NewPopulatedDownstreamTlsParamsType_NoMtls(r, easy)
	case 4:
		this.MtlsChoice = NewPopulatedDownstreamTlsParamsType_UseMtls(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedDownstreamTlsParamsType_NoMtls(r randyTypes, easy bool) *DownstreamTlsParamsType_NoMtls {
	this := &DownstreamTlsParamsType_NoMtls{}
	this.NoMtls = ves_io_schema4.NewPopulatedEmpty(r, easy)
	return this
}
func NewPopulatedDownstreamTlsParamsType_UseMtls(r randyTypes, easy bool) *DownstreamTlsParamsType_UseMtls {
	this := &DownstreamTlsParamsType_UseMtls{}
	this.UseMtls = NewPopulatedDownstreamTlsValidationContext(r, easy)
	return this
}
func NewPopulatedProxyTypeHttps(r randyTypes, easy bool) *ProxyTypeHttps {
	this := &ProxyTypeHttps{}
	this.HttpRedirect = bool(bool(r.Intn(2) == 0))
	this.AddHsts = bool(bool(r.Intn(2) == 0))
	if r.Intn(10) != 0 {
		this.TlsParameters = NewPopulatedDownstreamTlsParamsType(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedProxyTypeHttpsAutoCerts(r randyTypes, easy bool) *ProxyTypeHttpsAutoCerts {
	this := &ProxyTypeHttpsAutoCerts{}
	this.HttpRedirect = bool(bool(r.Intn(2) == 0))
	this.AddHsts = bool(bool(r.Intn(2) == 0))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedRouteTypeSimpleWithDefaultOriginPool(r randyTypes, easy bool) *RouteTypeSimpleWithDefaultOriginPool {
	this := &RouteTypeSimpleWithDefaultOriginPool{}
	this.HttpMethod = ves_io_schema4.HttpMethod([]int32{0, 1, 2, 3, 4, 5, 6, 7, 8, 9}[r.Intn(10)])
	if r.Intn(10) != 0 {
		this.Path = ves_io_schema4.NewPopulatedPathMatcherType(r, easy)
	}
	oneofNumber_HostRewriteParams := []int32{4, 5, 6}[r.Intn(3)]
	switch oneofNumber_HostRewriteParams {
	case 4:
		this.HostRewriteParams = NewPopulatedRouteTypeSimpleWithDefaultOriginPool_AutoHostRewrite(r, easy)
	case 5:
		this.HostRewriteParams = NewPopulatedRouteTypeSimpleWithDefaultOriginPool_HostRewrite(r, easy)
	case 6:
		this.HostRewriteParams = NewPopulatedRouteTypeSimpleWithDefaultOriginPool_DisableHostRewrite(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedRouteTypeSimpleWithDefaultOriginPool_AutoHostRewrite(r randyTypes, easy bool) *RouteTypeSimpleWithDefaultOriginPool_AutoHostRewrite {
	this := &RouteTypeSimpleWithDefaultOriginPool_AutoHostRewrite{}
	this.AutoHostRewrite = ves_io_schema4.NewPopulatedEmpty(r, easy)
	return this
}
func NewPopulatedRouteTypeSimpleWithDefaultOriginPool_HostRewrite(r randyTypes, easy bool) *RouteTypeSimpleWithDefaultOriginPool_HostRewrite {
	this := &RouteTypeSimpleWithDefaultOriginPool_HostRewrite{}
	this.HostRewrite = string(randStringTypes(r))
	return this
}
func NewPopulatedRouteTypeSimpleWithDefaultOriginPool_DisableHostRewrite(r randyTypes, easy bool) *RouteTypeSimpleWithDefaultOriginPool_DisableHostRewrite {
	this := &RouteTypeSimpleWithDefaultOriginPool_DisableHostRewrite{}
	this.DisableHostRewrite = ves_io_schema4.NewPopulatedEmpty(r, easy)
	return this
}
func NewPopulatedRouteTypeSimple(r randyTypes, easy bool) *RouteTypeSimple {
	this := &RouteTypeSimple{}
	if r.Intn(10) != 0 {
		this.Path = ves_io_schema4.NewPopulatedPathMatcherType(r, easy)
	}
	this.HttpMethod = ves_io_schema4.HttpMethod([]int32{0, 1, 2, 3, 4, 5, 6, 7, 8, 9}[r.Intn(10)])
	if r.Intn(10) != 0 {
		v2 := r.Intn(5)
		this.OriginPools = make([]*ves_io_schema_views.OriginPoolWithWeight, v2)
		for i := 0; i < v2; i++ {
			this.OriginPools[i] = ves_io_schema_views.NewPopulatedOriginPoolWithWeight(r, easy)
		}
	}
	oneofNumber_HostRewriteParams := []int32{5, 6, 7}[r.Intn(3)]
	switch oneofNumber_HostRewriteParams {
	case 5:
		this.HostRewriteParams = NewPopulatedRouteTypeSimple_AutoHostRewrite(r, easy)
	case 6:
		this.HostRewriteParams = NewPopulatedRouteTypeSimple_HostRewrite(r, easy)
	case 7:
		this.HostRewriteParams = NewPopulatedRouteTypeSimple_DisableHostRewrite(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedRouteTypeSimple_AutoHostRewrite(r randyTypes, easy bool) *RouteTypeSimple_AutoHostRewrite {
	this := &RouteTypeSimple_AutoHostRewrite{}
	this.AutoHostRewrite = ves_io_schema4.NewPopulatedEmpty(r, easy)
	return this
}
func NewPopulatedRouteTypeSimple_HostRewrite(r randyTypes, easy bool) *RouteTypeSimple_HostRewrite {
	this := &RouteTypeSimple_HostRewrite{}
	this.HostRewrite = string(randStringTypes(r))
	return this
}
func NewPopulatedRouteTypeSimple_DisableHostRewrite(r randyTypes, easy bool) *RouteTypeSimple_DisableHostRewrite {
	this := &RouteTypeSimple_DisableHostRewrite{}
	this.DisableHostRewrite = ves_io_schema4.NewPopulatedEmpty(r, easy)
	return this
}
func NewPopulatedRouteTypeRedirect(r randyTypes, easy bool) *RouteTypeRedirect {
	this := &RouteTypeRedirect{}
	if r.Intn(10) != 0 {
		this.Path = ves_io_schema4.NewPopulatedPathMatcherType(r, easy)
	}
	this.HttpMethod = ves_io_schema4.HttpMethod([]int32{0, 1, 2, 3, 4, 5, 6, 7, 8, 9}[r.Intn(10)])
	if r.Intn(10) != 0 {
		this.RouteRedirect = ves_io_schema_route.NewPopulatedRouteRedirect(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedRouteTypeDirectResponse(r randyTypes, easy bool) *RouteTypeDirectResponse {
	this := &RouteTypeDirectResponse{}
	if r.Intn(10) != 0 {
		this.Path = ves_io_schema4.NewPopulatedPathMatcherType(r, easy)
	}
	this.HttpMethod = ves_io_schema4.HttpMethod([]int32{0, 1, 2, 3, 4, 5, 6, 7, 8, 9}[r.Intn(10)])
	if r.Intn(10) != 0 {
		this.RouteDirectResponse = ves_io_schema_route.NewPopulatedRouteDirectResponse(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedRouteTypeCustomRoute(r randyTypes, easy bool) *RouteTypeCustomRoute {
	this := &RouteTypeCustomRoute{}
	if r.Intn(10) != 0 {
		this.RouteRef = ves_io_schema_views.NewPopulatedObjectRefType(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedRouteType(r randyTypes, easy bool) *RouteType {
	this := &RouteType{}
	oneofNumber_Choice := []int32{1, 2, 3, 4}[r.Intn(4)]
	switch oneofNumber_Choice {
	case 1:
		this.Choice = NewPopulatedRouteType_SimpleRoute(r, easy)
	case 2:
		this.Choice = NewPopulatedRouteType_RedirectRoute(r, easy)
	case 3:
		this.Choice = NewPopulatedRouteType_DirectResponseRoute(r, easy)
	case 4:
		this.Choice = NewPopulatedRouteType_CustomRouteObject(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedRouteType_SimpleRoute(r randyTypes, easy bool) *RouteType_SimpleRoute {
	this := &RouteType_SimpleRoute{}
	this.SimpleRoute = NewPopulatedRouteTypeSimple(r, easy)
	return this
}
func NewPopulatedRouteType_RedirectRoute(r randyTypes, easy bool) *RouteType_RedirectRoute {
	this := &RouteType_RedirectRoute{}
	this.RedirectRoute = NewPopulatedRouteTypeRedirect(r, easy)
	return this
}
func NewPopulatedRouteType_DirectResponseRoute(r randyTypes, easy bool) *RouteType_DirectResponseRoute {
	this := &RouteType_DirectResponseRoute{}
	this.DirectResponseRoute = NewPopulatedRouteTypeDirectResponse(r, easy)
	return this
}
func NewPopulatedRouteType_CustomRouteObject(r randyTypes, easy bool) *RouteType_CustomRouteObject {
	this := &RouteType_CustomRouteObject{}
	this.CustomRouteObject = NewPopulatedRouteTypeCustomRoute(r, easy)
	return this
}
func NewPopulatedAdvancedOptionsType(r randyTypes, easy bool) *AdvancedOptionsType {
	this := &AdvancedOptionsType{}
	if r.Intn(10) != 0 {
		v3 := r.Intn(5)
		this.RequestHeadersToAdd = make([]*ves_io_schema4.HeaderManipulationOptionType, v3)
		for i := 0; i < v3; i++ {
			this.RequestHeadersToAdd[i] = ves_io_schema4.NewPopulatedHeaderManipulationOptionType(r, easy)
		}
	}
	v4 := r.Intn(10)
	this.RequestHeadersToRemove = make([]string, v4)
	for i := 0; i < v4; i++ {
		this.RequestHeadersToRemove[i] = string(randStringTypes(r))
	}
	if r.Intn(10) != 0 {
		v5 := r.Intn(5)
		this.ResponseHeadersToAdd = make([]*ves_io_schema4.HeaderManipulationOptionType, v5)
		for i := 0; i < v5; i++ {
			this.ResponseHeadersToAdd[i] = ves_io_schema4.NewPopulatedHeaderManipulationOptionType(r, easy)
		}
	}
	v6 := r.Intn(10)
	this.ResponseHeadersToRemove = make([]string, v6)
	for i := 0; i < v6; i++ {
		this.ResponseHeadersToRemove[i] = string(randStringTypes(r))
	}
	this.MaxRequestHeaderSize = uint32(r.Uint32())
	if r.Intn(10) != 0 {
		this.BufferPolicy = ves_io_schema4.NewPopulatedBufferConfigType(r, easy)
	}
	if r.Intn(10) != 0 {
		this.CompressionParams = ves_io_schema_virtual_host.NewPopulatedCompressionType(r, easy)
	}
	if r.Intn(10) != 0 {
		v7 := r.Intn(10)
		this.CustomErrors = make(map[uint32]string)
		for i := 0; i < v7; i++ {
			this.CustomErrors[uint32(r.Uint32())] = randStringTypes(r)
		}
	}
	if r.Intn(10) != 0 {
		this.JavascriptInfo = ves_io_schema_virtual_host.NewPopulatedJavaScriptConfigType(r, easy)
	}
	if r.Intn(10) != 0 {
		v8 := r.Intn(5)
		this.Jwt = make([]*ves_io_schema_views.ObjectRefType, v8)
		for i := 0; i < v8; i++ {
			this.Jwt[i] = ves_io_schema_views.NewPopulatedObjectRefType(r, easy)
		}
	}
	this.IdleTimeout = uint32(r.Uint32())
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedCustomIpAllowedList(r randyTypes, easy bool) *CustomIpAllowedList {
	this := &CustomIpAllowedList{}
	if r.Intn(10) != 0 {
		v9 := r.Intn(5)
		this.RateLimiterAllowedPrefixes = make([]*ves_io_schema_views.ObjectRefType, v9)
		for i := 0; i < v9; i++ {
			this.RateLimiterAllowedPrefixes[i] = ves_io_schema_views.NewPopulatedObjectRefType(r, easy)
		}
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedRateLimitConfigType(r randyTypes, easy bool) *RateLimitConfigType {
	this := &RateLimitConfigType{}
	if r.Intn(10) != 0 {
		this.RateLimiter = ves_io_schema_rate_limiter.NewPopulatedRateLimitValue(r, easy)
	}
	oneofNumber_IpAllowedListChoice := []int32{3, 4, 5}[r.Intn(3)]
	switch oneofNumber_IpAllowedListChoice {
	case 3:
		this.IpAllowedListChoice = NewPopulatedRateLimitConfigType_NoIpAllowedList(r, easy)
	case 4:
		this.IpAllowedListChoice = NewPopulatedRateLimitConfigType_IpAllowedList(r, easy)
	case 5:
		this.IpAllowedListChoice = NewPopulatedRateLimitConfigType_CustomIpAllowedList(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedRateLimitConfigType_NoIpAllowedList(r randyTypes, easy bool) *RateLimitConfigType_NoIpAllowedList {
	this := &RateLimitConfigType_NoIpAllowedList{}
	this.NoIpAllowedList = ves_io_schema4.NewPopulatedEmpty(r, easy)
	return this
}
func NewPopulatedRateLimitConfigType_IpAllowedList(r randyTypes, easy bool) *RateLimitConfigType_IpAllowedList {
	this := &RateLimitConfigType_IpAllowedList{}
	this.IpAllowedList = ves_io_schema_views.NewPopulatedPrefixStringListType(r, easy)
	return this
}
func NewPopulatedRateLimitConfigType_CustomIpAllowedList(r randyTypes, easy bool) *RateLimitConfigType_CustomIpAllowedList {
	this := &RateLimitConfigType_CustomIpAllowedList{}
	this.CustomIpAllowedList = NewPopulatedCustomIpAllowedList(r, easy)
	return this
}
func NewPopulatedGlobalSpecType(r randyTypes, easy bool) *GlobalSpecType {
	this := &GlobalSpecType{}
	v10 := r.Intn(10)
	this.Domains = make([]string, v10)
	for i := 0; i < v10; i++ {
		this.Domains[i] = string(randStringTypes(r))
	}
	oneofNumber_LoadbalancerType := []int32{2, 3, 27}[r.Intn(3)]
	switch oneofNumber_LoadbalancerType {
	case 2:
		this.LoadbalancerType = NewPopulatedGlobalSpecType_Http(r, easy)
	case 3:
		this.LoadbalancerType = NewPopulatedGlobalSpecType_Https(r, easy)
	case 27:
		this.LoadbalancerType = NewPopulatedGlobalSpecType_HttpsAutoCert(r, easy)
	}
	oneofNumber_AdvertiseChoice := []int32{4, 5, 12, 13}[r.Intn(4)]
	switch oneofNumber_AdvertiseChoice {
	case 4:
		this.AdvertiseChoice = NewPopulatedGlobalSpecType_AdvertiseOnPublic(r, easy)
	case 5:
		this.AdvertiseChoice = NewPopulatedGlobalSpecType_AdvertiseCustom(r, easy)
	case 12:
		this.AdvertiseChoice = NewPopulatedGlobalSpecType_DoNotAdvertise(r, easy)
	case 13:
		this.AdvertiseChoice = NewPopulatedGlobalSpecType_AdvertiseOnPublicDefaultVip(r, easy)
	}
	if r.Intn(10) != 0 {
		v11 := r.Intn(5)
		this.DefaultRoutePools = make([]*ves_io_schema_views.OriginPoolWithWeight, v11)
		for i := 0; i < v11; i++ {
			this.DefaultRoutePools[i] = ves_io_schema_views.NewPopulatedOriginPoolWithWeight(r, easy)
		}
	}
	if r.Intn(10) != 0 {
		v12 := r.Intn(5)
		this.Routes = make([]*RouteType, v12)
		for i := 0; i < v12; i++ {
			this.Routes[i] = NewPopulatedRouteType(r, easy)
		}
	}
	if r.Intn(10) != 0 {
		this.CorsPolicy = ves_io_schema4.NewPopulatedCorsPolicy(r, easy)
	}
	oneofNumber_WafChoice := []int32{9, 10, 11}[r.Intn(3)]
	switch oneofNumber_WafChoice {
	case 9:
		this.WafChoice = NewPopulatedGlobalSpecType_Waf(r, easy)
	case 10:
		this.WafChoice = NewPopulatedGlobalSpecType_WafRule(r, easy)
	case 11:
		this.WafChoice = NewPopulatedGlobalSpecType_DisableWaf(r, easy)
	}
	this.AddLocation = bool(bool(r.Intn(2) == 0))
	oneofNumber_ChallengeType := []int32{18, 24, 26}[r.Intn(3)]
	switch oneofNumber_ChallengeType {
	case 18:
		this.ChallengeType = NewPopulatedGlobalSpecType_JsChallenge(r, easy)
	case 24:
		this.ChallengeType = NewPopulatedGlobalSpecType_CaptchaChallenge(r, easy)
	case 26:
		this.ChallengeType = NewPopulatedGlobalSpecType_NoChallenge(r, easy)
	}
	if r.Intn(10) != 0 {
		this.MoreOption = NewPopulatedAdvancedOptionsType(r, easy)
	}
	if r.Intn(10) != 0 {
		this.UserIdentification = ves_io_schema_views.NewPopulatedObjectRefType(r, easy)
	}
	oneofNumber_RateLimitChoice := []int32{22, 23}[r.Intn(2)]
	switch oneofNumber_RateLimitChoice {
	case 22:
		this.RateLimitChoice = NewPopulatedGlobalSpecType_DisableRateLimit(r, easy)
	case 23:
		this.RateLimitChoice = NewPopulatedGlobalSpecType_RateLimit(r, easy)
	}
	oneofNumber_HostRewriteParams := []int32{28, 29, 30}[r.Intn(3)]
	switch oneofNumber_HostRewriteParams {
	case 28:
		this.HostRewriteParams = NewPopulatedGlobalSpecType_AutoHostRewrite(r, easy)
	case 29:
		this.HostRewriteParams = NewPopulatedGlobalSpecType_HostRewrite(r, easy)
	case 30:
		this.HostRewriteParams = NewPopulatedGlobalSpecType_DisableHostRewrite(r, easy)
	}
	if r.Intn(10) != 0 {
		this.MaliciousUserMitigation = ves_io_schema_views.NewPopulatedObjectRefType(r, easy)
	}
	if r.Intn(10) != 0 {
		v13 := r.Intn(5)
		this.WafExclusionRules = make([]*ves_io_schema_policy.SimpleWafExclusionRule, v13)
		for i := 0; i < v13; i++ {
			this.WafExclusionRules[i] = ves_io_schema_policy.NewPopulatedSimpleWafExclusionRule(r, easy)
		}
	}
	if r.Intn(10) != 0 {
		this.ViewInternal = ves_io_schema_views.NewPopulatedObjectRefType(r, easy)
	}
	this.HostName = string(randStringTypes(r))
	if r.Intn(10) != 0 {
		v14 := r.Intn(5)
		this.DnsInfo = make([]*ves_io_schema_virtual_host_dns_info.DnsInfo, v14)
		for i := 0; i < v14; i++ {
			this.DnsInfo[i] = ves_io_schema_virtual_host_dns_info.NewPopulatedDnsInfo(r, easy)
		}
	}
	this.State = ves_io_schema_virtual_host.VirtualHostState([]int32{0, 1, 2, 3, 4, 5}[r.Intn(6)])
	this.AutoCertState = ves_io_schema_virtual_host.CertificationState([]int32{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}[r.Intn(12)])
	if r.Intn(10) != 0 {
		this.AutoCertInfo = ves_io_schema_virtual_host.NewPopulatedAutoCertInfoType(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedGlobalSpecType_Http(r randyTypes, easy bool) *GlobalSpecType_Http {
	this := &GlobalSpecType_Http{}
	this.Http = ves_io_schema4.NewPopulatedEmpty(r, easy)
	return this
}
func NewPopulatedGlobalSpecType_Https(r randyTypes, easy bool) *GlobalSpecType_Https {
	this := &GlobalSpecType_Https{}
	this.Https = NewPopulatedProxyTypeHttps(r, easy)
	return this
}
func NewPopulatedGlobalSpecType_AdvertiseOnPublic(r randyTypes, easy bool) *GlobalSpecType_AdvertiseOnPublic {
	this := &GlobalSpecType_AdvertiseOnPublic{}
	this.AdvertiseOnPublic = ves_io_schema_views.NewPopulatedAdvertisePublic(r, easy)
	return this
}
func NewPopulatedGlobalSpecType_AdvertiseCustom(r randyTypes, easy bool) *GlobalSpecType_AdvertiseCustom {
	this := &GlobalSpecType_AdvertiseCustom{}
	this.AdvertiseCustom = ves_io_schema_views.NewPopulatedAdvertiseCustom(r, easy)
	return this
}
func NewPopulatedGlobalSpecType_Waf(r randyTypes, easy bool) *GlobalSpecType_Waf {
	this := &GlobalSpecType_Waf{}
	this.Waf = ves_io_schema_views.NewPopulatedObjectRefType(r, easy)
	return this
}
func NewPopulatedGlobalSpecType_WafRule(r randyTypes, easy bool) *GlobalSpecType_WafRule {
	this := &GlobalSpecType_WafRule{}
	this.WafRule = ves_io_schema_views.NewPopulatedObjectRefType(r, easy)
	return this
}
func NewPopulatedGlobalSpecType_DisableWaf(r randyTypes, easy bool) *GlobalSpecType_DisableWaf {
	this := &GlobalSpecType_DisableWaf{}
	this.DisableWaf = ves_io_schema4.NewPopulatedEmpty(r, easy)
	return this
}
func NewPopulatedGlobalSpecType_DoNotAdvertise(r randyTypes, easy bool) *GlobalSpecType_DoNotAdvertise {
	this := &GlobalSpecType_DoNotAdvertise{}
	this.DoNotAdvertise = ves_io_schema4.NewPopulatedEmpty(r, easy)
	return this
}
func NewPopulatedGlobalSpecType_AdvertiseOnPublicDefaultVip(r randyTypes, easy bool) *GlobalSpecType_AdvertiseOnPublicDefaultVip {
	this := &GlobalSpecType_AdvertiseOnPublicDefaultVip{}
	this.AdvertiseOnPublicDefaultVip = ves_io_schema4.NewPopulatedEmpty(r, easy)
	return this
}
func NewPopulatedGlobalSpecType_JsChallenge(r randyTypes, easy bool) *GlobalSpecType_JsChallenge {
	this := &GlobalSpecType_JsChallenge{}
	this.JsChallenge = ves_io_schema_virtual_host.NewPopulatedJavascriptChallengeType(r, easy)
	return this
}
func NewPopulatedGlobalSpecType_DisableRateLimit(r randyTypes, easy bool) *GlobalSpecType_DisableRateLimit {
	this := &GlobalSpecType_DisableRateLimit{}
	this.DisableRateLimit = ves_io_schema4.NewPopulatedEmpty(r, easy)
	return this
}
func NewPopulatedGlobalSpecType_RateLimit(r randyTypes, easy bool) *GlobalSpecType_RateLimit {
	this := &GlobalSpecType_RateLimit{}
	this.RateLimit = NewPopulatedRateLimitConfigType(r, easy)
	return this
}
func NewPopulatedGlobalSpecType_CaptchaChallenge(r randyTypes, easy bool) *GlobalSpecType_CaptchaChallenge {
	this := &GlobalSpecType_CaptchaChallenge{}
	this.CaptchaChallenge = ves_io_schema_virtual_host.NewPopulatedCaptchaChallengeType(r, easy)
	return this
}
func NewPopulatedGlobalSpecType_NoChallenge(r randyTypes, easy bool) *GlobalSpecType_NoChallenge {
	this := &GlobalSpecType_NoChallenge{}
	this.NoChallenge = ves_io_schema4.NewPopulatedEmpty(r, easy)
	return this
}
func NewPopulatedGlobalSpecType_HttpsAutoCert(r randyTypes, easy bool) *GlobalSpecType_HttpsAutoCert {
	this := &GlobalSpecType_HttpsAutoCert{}
	this.HttpsAutoCert = NewPopulatedProxyTypeHttpsAutoCerts(r, easy)
	return this
}
func NewPopulatedGlobalSpecType_AutoHostRewrite(r randyTypes, easy bool) *GlobalSpecType_AutoHostRewrite {
	this := &GlobalSpecType_AutoHostRewrite{}
	this.AutoHostRewrite = ves_io_schema4.NewPopulatedEmpty(r, easy)
	return this
}
func NewPopulatedGlobalSpecType_HostRewrite(r randyTypes, easy bool) *GlobalSpecType_HostRewrite {
	this := &GlobalSpecType_HostRewrite{}
	this.HostRewrite = string(randStringTypes(r))
	return this
}
func NewPopulatedGlobalSpecType_DisableHostRewrite(r randyTypes, easy bool) *GlobalSpecType_DisableHostRewrite {
	this := &GlobalSpecType_DisableHostRewrite{}
	this.DisableHostRewrite = ves_io_schema4.NewPopulatedEmpty(r, easy)
	return this
}
func NewPopulatedCreateSpecType(r randyTypes, easy bool) *CreateSpecType {
	this := &CreateSpecType{}
	v15 := r.Intn(10)
	this.Domains = make([]string, v15)
	for i := 0; i < v15; i++ {
		this.Domains[i] = string(randStringTypes(r))
	}
	oneofNumber_LoadbalancerType := []int32{2, 3, 27}[r.Intn(3)]
	switch oneofNumber_LoadbalancerType {
	case 2:
		this.LoadbalancerType = NewPopulatedCreateSpecType_Http(r, easy)
	case 3:
		this.LoadbalancerType = NewPopulatedCreateSpecType_Https(r, easy)
	case 27:
		this.LoadbalancerType = NewPopulatedCreateSpecType_HttpsAutoCert(r, easy)
	}
	oneofNumber_AdvertiseChoice := []int32{4, 5, 12, 13}[r.Intn(4)]
	switch oneofNumber_AdvertiseChoice {
	case 4:
		this.AdvertiseChoice = NewPopulatedCreateSpecType_AdvertiseOnPublic(r, easy)
	case 5:
		this.AdvertiseChoice = NewPopulatedCreateSpecType_AdvertiseCustom(r, easy)
	case 12:
		this.AdvertiseChoice = NewPopulatedCreateSpecType_DoNotAdvertise(r, easy)
	case 13:
		this.AdvertiseChoice = NewPopulatedCreateSpecType_AdvertiseOnPublicDefaultVip(r, easy)
	}
	if r.Intn(10) != 0 {
		v16 := r.Intn(5)
		this.DefaultRoutePools = make([]*ves_io_schema_views.OriginPoolWithWeight, v16)
		for i := 0; i < v16; i++ {
			this.DefaultRoutePools[i] = ves_io_schema_views.NewPopulatedOriginPoolWithWeight(r, easy)
		}
	}
	if r.Intn(10) != 0 {
		v17 := r.Intn(5)
		this.Routes = make([]*RouteType, v17)
		for i := 0; i < v17; i++ {
			this.Routes[i] = NewPopulatedRouteType(r, easy)
		}
	}
	if r.Intn(10) != 0 {
		this.CorsPolicy = ves_io_schema4.NewPopulatedCorsPolicy(r, easy)
	}
	oneofNumber_WafChoice := []int32{9, 10, 11}[r.Intn(3)]
	switch oneofNumber_WafChoice {
	case 9:
		this.WafChoice = NewPopulatedCreateSpecType_Waf(r, easy)
	case 10:
		this.WafChoice = NewPopulatedCreateSpecType_WafRule(r, easy)
	case 11:
		this.WafChoice = NewPopulatedCreateSpecType_DisableWaf(r, easy)
	}
	this.AddLocation = bool(bool(r.Intn(2) == 0))
	oneofNumber_ChallengeType := []int32{18, 24, 26}[r.Intn(3)]
	switch oneofNumber_ChallengeType {
	case 18:
		this.ChallengeType = NewPopulatedCreateSpecType_JsChallenge(r, easy)
	case 24:
		this.ChallengeType = NewPopulatedCreateSpecType_CaptchaChallenge(r, easy)
	case 26:
		this.ChallengeType = NewPopulatedCreateSpecType_NoChallenge(r, easy)
	}
	if r.Intn(10) != 0 {
		this.MoreOption = NewPopulatedAdvancedOptionsType(r, easy)
	}
	if r.Intn(10) != 0 {
		this.UserIdentification = ves_io_schema_views.NewPopulatedObjectRefType(r, easy)
	}
	oneofNumber_RateLimitChoice := []int32{22, 23}[r.Intn(2)]
	switch oneofNumber_RateLimitChoice {
	case 22:
		this.RateLimitChoice = NewPopulatedCreateSpecType_DisableRateLimit(r, easy)
	case 23:
		this.RateLimitChoice = NewPopulatedCreateSpecType_RateLimit(r, easy)
	}
	if r.Intn(10) != 0 {
		this.MaliciousUserMitigation = ves_io_schema_views.NewPopulatedObjectRefType(r, easy)
	}
	if r.Intn(10) != 0 {
		v18 := r.Intn(5)
		this.WafExclusionRules = make([]*ves_io_schema_policy.SimpleWafExclusionRule, v18)
		for i := 0; i < v18; i++ {
			this.WafExclusionRules[i] = ves_io_schema_policy.NewPopulatedSimpleWafExclusionRule(r, easy)
		}
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedCreateSpecType_Http(r randyTypes, easy bool) *CreateSpecType_Http {
	this := &CreateSpecType_Http{}
	this.Http = ves_io_schema4.NewPopulatedEmpty(r, easy)
	return this
}
func NewPopulatedCreateSpecType_Https(r randyTypes, easy bool) *CreateSpecType_Https {
	this := &CreateSpecType_Https{}
	this.Https = NewPopulatedProxyTypeHttps(r, easy)
	return this
}
func NewPopulatedCreateSpecType_AdvertiseOnPublic(r randyTypes, easy bool) *CreateSpecType_AdvertiseOnPublic {
	this := &CreateSpecType_AdvertiseOnPublic{}
	this.AdvertiseOnPublic = ves_io_schema_views.NewPopulatedAdvertisePublic(r, easy)
	return this
}
func NewPopulatedCreateSpecType_AdvertiseCustom(r randyTypes, easy bool) *CreateSpecType_AdvertiseCustom {
	this := &CreateSpecType_AdvertiseCustom{}
	this.AdvertiseCustom = ves_io_schema_views.NewPopulatedAdvertiseCustom(r, easy)
	return this
}
func NewPopulatedCreateSpecType_Waf(r randyTypes, easy bool) *CreateSpecType_Waf {
	this := &CreateSpecType_Waf{}
	this.Waf = ves_io_schema_views.NewPopulatedObjectRefType(r, easy)
	return this
}
func NewPopulatedCreateSpecType_WafRule(r randyTypes, easy bool) *CreateSpecType_WafRule {
	this := &CreateSpecType_WafRule{}
	this.WafRule = ves_io_schema_views.NewPopulatedObjectRefType(r, easy)
	return this
}
func NewPopulatedCreateSpecType_DisableWaf(r randyTypes, easy bool) *CreateSpecType_DisableWaf {
	this := &CreateSpecType_DisableWaf{}
	this.DisableWaf = ves_io_schema4.NewPopulatedEmpty(r, easy)
	return this
}
func NewPopulatedCreateSpecType_DoNotAdvertise(r randyTypes, easy bool) *CreateSpecType_DoNotAdvertise {
	this := &CreateSpecType_DoNotAdvertise{}
	this.DoNotAdvertise = ves_io_schema4.NewPopulatedEmpty(r, easy)
	return this
}
func NewPopulatedCreateSpecType_AdvertiseOnPublicDefaultVip(r randyTypes, easy bool) *CreateSpecType_AdvertiseOnPublicDefaultVip {
	this := &CreateSpecType_AdvertiseOnPublicDefaultVip{}
	this.AdvertiseOnPublicDefaultVip = ves_io_schema4.NewPopulatedEmpty(r, easy)
	return this
}
func NewPopulatedCreateSpecType_JsChallenge(r randyTypes, easy bool) *CreateSpecType_JsChallenge {
	this := &CreateSpecType_JsChallenge{}
	this.JsChallenge = ves_io_schema_virtual_host.NewPopulatedJavascriptChallengeType(r, easy)
	return this
}
func NewPopulatedCreateSpecType_DisableRateLimit(r randyTypes, easy bool) *CreateSpecType_DisableRateLimit {
	this := &CreateSpecType_DisableRateLimit{}
	this.DisableRateLimit = ves_io_schema4.NewPopulatedEmpty(r, easy)
	return this
}
func NewPopulatedCreateSpecType_RateLimit(r randyTypes, easy bool) *CreateSpecType_RateLimit {
	this := &CreateSpecType_RateLimit{}
	this.RateLimit = NewPopulatedRateLimitConfigType(r, easy)
	return this
}
func NewPopulatedCreateSpecType_CaptchaChallenge(r randyTypes, easy bool) *CreateSpecType_CaptchaChallenge {
	this := &CreateSpecType_CaptchaChallenge{}
	this.CaptchaChallenge = ves_io_schema_virtual_host.NewPopulatedCaptchaChallengeType(r, easy)
	return this
}
func NewPopulatedCreateSpecType_NoChallenge(r randyTypes, easy bool) *CreateSpecType_NoChallenge {
	this := &CreateSpecType_NoChallenge{}
	this.NoChallenge = ves_io_schema4.NewPopulatedEmpty(r, easy)
	return this
}
func NewPopulatedCreateSpecType_HttpsAutoCert(r randyTypes, easy bool) *CreateSpecType_HttpsAutoCert {
	this := &CreateSpecType_HttpsAutoCert{}
	this.HttpsAutoCert = NewPopulatedProxyTypeHttpsAutoCerts(r, easy)
	return this
}
func NewPopulatedReplaceSpecType(r randyTypes, easy bool) *ReplaceSpecType {
	this := &ReplaceSpecType{}
	v19 := r.Intn(10)
	this.Domains = make([]string, v19)
	for i := 0; i < v19; i++ {
		this.Domains[i] = string(randStringTypes(r))
	}
	oneofNumber_LoadbalancerType := []int32{2, 3, 27}[r.Intn(3)]
	switch oneofNumber_LoadbalancerType {
	case 2:
		this.LoadbalancerType = NewPopulatedReplaceSpecType_Http(r, easy)
	case 3:
		this.LoadbalancerType = NewPopulatedReplaceSpecType_Https(r, easy)
	case 27:
		this.LoadbalancerType = NewPopulatedReplaceSpecType_HttpsAutoCert(r, easy)
	}
	oneofNumber_AdvertiseChoice := []int32{4, 5, 12, 13}[r.Intn(4)]
	switch oneofNumber_AdvertiseChoice {
	case 4:
		this.AdvertiseChoice = NewPopulatedReplaceSpecType_AdvertiseOnPublic(r, easy)
	case 5:
		this.AdvertiseChoice = NewPopulatedReplaceSpecType_AdvertiseCustom(r, easy)
	case 12:
		this.AdvertiseChoice = NewPopulatedReplaceSpecType_DoNotAdvertise(r, easy)
	case 13:
		this.AdvertiseChoice = NewPopulatedReplaceSpecType_AdvertiseOnPublicDefaultVip(r, easy)
	}
	if r.Intn(10) != 0 {
		v20 := r.Intn(5)
		this.DefaultRoutePools = make([]*ves_io_schema_views.OriginPoolWithWeight, v20)
		for i := 0; i < v20; i++ {
			this.DefaultRoutePools[i] = ves_io_schema_views.NewPopulatedOriginPoolWithWeight(r, easy)
		}
	}
	if r.Intn(10) != 0 {
		v21 := r.Intn(5)
		this.Routes = make([]*RouteType, v21)
		for i := 0; i < v21; i++ {
			this.Routes[i] = NewPopulatedRouteType(r, easy)
		}
	}
	if r.Intn(10) != 0 {
		this.CorsPolicy = ves_io_schema4.NewPopulatedCorsPolicy(r, easy)
	}
	oneofNumber_WafChoice := []int32{9, 10, 11}[r.Intn(3)]
	switch oneofNumber_WafChoice {
	case 9:
		this.WafChoice = NewPopulatedReplaceSpecType_Waf(r, easy)
	case 10:
		this.WafChoice = NewPopulatedReplaceSpecType_WafRule(r, easy)
	case 11:
		this.WafChoice = NewPopulatedReplaceSpecType_DisableWaf(r, easy)
	}
	this.AddLocation = bool(bool(r.Intn(2) == 0))
	oneofNumber_ChallengeType := []int32{18, 24, 26}[r.Intn(3)]
	switch oneofNumber_ChallengeType {
	case 18:
		this.ChallengeType = NewPopulatedReplaceSpecType_JsChallenge(r, easy)
	case 24:
		this.ChallengeType = NewPopulatedReplaceSpecType_CaptchaChallenge(r, easy)
	case 26:
		this.ChallengeType = NewPopulatedReplaceSpecType_NoChallenge(r, easy)
	}
	if r.Intn(10) != 0 {
		this.MoreOption = NewPopulatedAdvancedOptionsType(r, easy)
	}
	if r.Intn(10) != 0 {
		this.UserIdentification = ves_io_schema_views.NewPopulatedObjectRefType(r, easy)
	}
	oneofNumber_RateLimitChoice := []int32{22, 23}[r.Intn(2)]
	switch oneofNumber_RateLimitChoice {
	case 22:
		this.RateLimitChoice = NewPopulatedReplaceSpecType_DisableRateLimit(r, easy)
	case 23:
		this.RateLimitChoice = NewPopulatedReplaceSpecType_RateLimit(r, easy)
	}
	if r.Intn(10) != 0 {
		this.MaliciousUserMitigation = ves_io_schema_views.NewPopulatedObjectRefType(r, easy)
	}
	if r.Intn(10) != 0 {
		v22 := r.Intn(5)
		this.WafExclusionRules = make([]*ves_io_schema_policy.SimpleWafExclusionRule, v22)
		for i := 0; i < v22; i++ {
			this.WafExclusionRules[i] = ves_io_schema_policy.NewPopulatedSimpleWafExclusionRule(r, easy)
		}
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedReplaceSpecType_Http(r randyTypes, easy bool) *ReplaceSpecType_Http {
	this := &ReplaceSpecType_Http{}
	this.Http = ves_io_schema4.NewPopulatedEmpty(r, easy)
	return this
}
func NewPopulatedReplaceSpecType_Https(r randyTypes, easy bool) *ReplaceSpecType_Https {
	this := &ReplaceSpecType_Https{}
	this.Https = NewPopulatedProxyTypeHttps(r, easy)
	return this
}
func NewPopulatedReplaceSpecType_AdvertiseOnPublic(r randyTypes, easy bool) *ReplaceSpecType_AdvertiseOnPublic {
	this := &ReplaceSpecType_AdvertiseOnPublic{}
	this.AdvertiseOnPublic = ves_io_schema_views.NewPopulatedAdvertisePublic(r, easy)
	return this
}
func NewPopulatedReplaceSpecType_AdvertiseCustom(r randyTypes, easy bool) *ReplaceSpecType_AdvertiseCustom {
	this := &ReplaceSpecType_AdvertiseCustom{}
	this.AdvertiseCustom = ves_io_schema_views.NewPopulatedAdvertiseCustom(r, easy)
	return this
}
func NewPopulatedReplaceSpecType_Waf(r randyTypes, easy bool) *ReplaceSpecType_Waf {
	this := &ReplaceSpecType_Waf{}
	this.Waf = ves_io_schema_views.NewPopulatedObjectRefType(r, easy)
	return this
}
func NewPopulatedReplaceSpecType_WafRule(r randyTypes, easy bool) *ReplaceSpecType_WafRule {
	this := &ReplaceSpecType_WafRule{}
	this.WafRule = ves_io_schema_views.NewPopulatedObjectRefType(r, easy)
	return this
}
func NewPopulatedReplaceSpecType_DisableWaf(r randyTypes, easy bool) *ReplaceSpecType_DisableWaf {
	this := &ReplaceSpecType_DisableWaf{}
	this.DisableWaf = ves_io_schema4.NewPopulatedEmpty(r, easy)
	return this
}
func NewPopulatedReplaceSpecType_DoNotAdvertise(r randyTypes, easy bool) *ReplaceSpecType_DoNotAdvertise {
	this := &ReplaceSpecType_DoNotAdvertise{}
	this.DoNotAdvertise = ves_io_schema4.NewPopulatedEmpty(r, easy)
	return this
}
func NewPopulatedReplaceSpecType_AdvertiseOnPublicDefaultVip(r randyTypes, easy bool) *ReplaceSpecType_AdvertiseOnPublicDefaultVip {
	this := &ReplaceSpecType_AdvertiseOnPublicDefaultVip{}
	this.AdvertiseOnPublicDefaultVip = ves_io_schema4.NewPopulatedEmpty(r, easy)
	return this
}
func NewPopulatedReplaceSpecType_JsChallenge(r randyTypes, easy bool) *ReplaceSpecType_JsChallenge {
	this := &ReplaceSpecType_JsChallenge{}
	this.JsChallenge = ves_io_schema_virtual_host.NewPopulatedJavascriptChallengeType(r, easy)
	return this
}
func NewPopulatedReplaceSpecType_DisableRateLimit(r randyTypes, easy bool) *ReplaceSpecType_DisableRateLimit {
	this := &ReplaceSpecType_DisableRateLimit{}
	this.DisableRateLimit = ves_io_schema4.NewPopulatedEmpty(r, easy)
	return this
}
func NewPopulatedReplaceSpecType_RateLimit(r randyTypes, easy bool) *ReplaceSpecType_RateLimit {
	this := &ReplaceSpecType_RateLimit{}
	this.RateLimit = NewPopulatedRateLimitConfigType(r, easy)
	return this
}
func NewPopulatedReplaceSpecType_CaptchaChallenge(r randyTypes, easy bool) *ReplaceSpecType_CaptchaChallenge {
	this := &ReplaceSpecType_CaptchaChallenge{}
	this.CaptchaChallenge = ves_io_schema_virtual_host.NewPopulatedCaptchaChallengeType(r, easy)
	return this
}
func NewPopulatedReplaceSpecType_NoChallenge(r randyTypes, easy bool) *ReplaceSpecType_NoChallenge {
	this := &ReplaceSpecType_NoChallenge{}
	this.NoChallenge = ves_io_schema4.NewPopulatedEmpty(r, easy)
	return this
}
func NewPopulatedReplaceSpecType_HttpsAutoCert(r randyTypes, easy bool) *ReplaceSpecType_HttpsAutoCert {
	this := &ReplaceSpecType_HttpsAutoCert{}
	this.HttpsAutoCert = NewPopulatedProxyTypeHttpsAutoCerts(r, easy)
	return this
}
func NewPopulatedGetSpecType(r randyTypes, easy bool) *GetSpecType {
	this := &GetSpecType{}
	v23 := r.Intn(10)
	this.Domains = make([]string, v23)
	for i := 0; i < v23; i++ {
		this.Domains[i] = string(randStringTypes(r))
	}
	oneofNumber_LoadbalancerType := []int32{2, 3, 27}[r.Intn(3)]
	switch oneofNumber_LoadbalancerType {
	case 2:
		this.LoadbalancerType = NewPopulatedGetSpecType_Http(r, easy)
	case 3:
		this.LoadbalancerType = NewPopulatedGetSpecType_Https(r, easy)
	case 27:
		this.LoadbalancerType = NewPopulatedGetSpecType_HttpsAutoCert(r, easy)
	}
	oneofNumber_AdvertiseChoice := []int32{4, 5, 12, 13}[r.Intn(4)]
	switch oneofNumber_AdvertiseChoice {
	case 4:
		this.AdvertiseChoice = NewPopulatedGetSpecType_AdvertiseOnPublic(r, easy)
	case 5:
		this.AdvertiseChoice = NewPopulatedGetSpecType_AdvertiseCustom(r, easy)
	case 12:
		this.AdvertiseChoice = NewPopulatedGetSpecType_DoNotAdvertise(r, easy)
	case 13:
		this.AdvertiseChoice = NewPopulatedGetSpecType_AdvertiseOnPublicDefaultVip(r, easy)
	}
	if r.Intn(10) != 0 {
		v24 := r.Intn(5)
		this.DefaultRoutePools = make([]*ves_io_schema_views.OriginPoolWithWeight, v24)
		for i := 0; i < v24; i++ {
			this.DefaultRoutePools[i] = ves_io_schema_views.NewPopulatedOriginPoolWithWeight(r, easy)
		}
	}
	if r.Intn(10) != 0 {
		v25 := r.Intn(5)
		this.Routes = make([]*RouteType, v25)
		for i := 0; i < v25; i++ {
			this.Routes[i] = NewPopulatedRouteType(r, easy)
		}
	}
	if r.Intn(10) != 0 {
		this.CorsPolicy = ves_io_schema4.NewPopulatedCorsPolicy(r, easy)
	}
	oneofNumber_WafChoice := []int32{9, 10, 11}[r.Intn(3)]
	switch oneofNumber_WafChoice {
	case 9:
		this.WafChoice = NewPopulatedGetSpecType_Waf(r, easy)
	case 10:
		this.WafChoice = NewPopulatedGetSpecType_WafRule(r, easy)
	case 11:
		this.WafChoice = NewPopulatedGetSpecType_DisableWaf(r, easy)
	}
	this.AddLocation = bool(bool(r.Intn(2) == 0))
	oneofNumber_ChallengeType := []int32{18, 24, 26}[r.Intn(3)]
	switch oneofNumber_ChallengeType {
	case 18:
		this.ChallengeType = NewPopulatedGetSpecType_JsChallenge(r, easy)
	case 24:
		this.ChallengeType = NewPopulatedGetSpecType_CaptchaChallenge(r, easy)
	case 26:
		this.ChallengeType = NewPopulatedGetSpecType_NoChallenge(r, easy)
	}
	if r.Intn(10) != 0 {
		this.MoreOption = NewPopulatedAdvancedOptionsType(r, easy)
	}
	if r.Intn(10) != 0 {
		this.UserIdentification = ves_io_schema_views.NewPopulatedObjectRefType(r, easy)
	}
	oneofNumber_RateLimitChoice := []int32{22, 23}[r.Intn(2)]
	switch oneofNumber_RateLimitChoice {
	case 22:
		this.RateLimitChoice = NewPopulatedGetSpecType_DisableRateLimit(r, easy)
	case 23:
		this.RateLimitChoice = NewPopulatedGetSpecType_RateLimit(r, easy)
	}
	if r.Intn(10) != 0 {
		this.MaliciousUserMitigation = ves_io_schema_views.NewPopulatedObjectRefType(r, easy)
	}
	if r.Intn(10) != 0 {
		v26 := r.Intn(5)
		this.WafExclusionRules = make([]*ves_io_schema_policy.SimpleWafExclusionRule, v26)
		for i := 0; i < v26; i++ {
			this.WafExclusionRules[i] = ves_io_schema_policy.NewPopulatedSimpleWafExclusionRule(r, easy)
		}
	}
	this.HostName = string(randStringTypes(r))
	if r.Intn(10) != 0 {
		v27 := r.Intn(5)
		this.DnsInfo = make([]*ves_io_schema_virtual_host_dns_info.DnsInfo, v27)
		for i := 0; i < v27; i++ {
			this.DnsInfo[i] = ves_io_schema_virtual_host_dns_info.NewPopulatedDnsInfo(r, easy)
		}
	}
	this.State = ves_io_schema_virtual_host.VirtualHostState([]int32{0, 1, 2, 3, 4, 5}[r.Intn(6)])
	this.AutoCertState = ves_io_schema_virtual_host.CertificationState([]int32{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}[r.Intn(12)])
	if r.Intn(10) != 0 {
		this.AutoCertInfo = ves_io_schema_virtual_host.NewPopulatedAutoCertInfoType(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedGetSpecType_Http(r randyTypes, easy bool) *GetSpecType_Http {
	this := &GetSpecType_Http{}
	this.Http = ves_io_schema4.NewPopulatedEmpty(r, easy)
	return this
}
func NewPopulatedGetSpecType_Https(r randyTypes, easy bool) *GetSpecType_Https {
	this := &GetSpecType_Https{}
	this.Https = NewPopulatedProxyTypeHttps(r, easy)
	return this
}
func NewPopulatedGetSpecType_AdvertiseOnPublic(r randyTypes, easy bool) *GetSpecType_AdvertiseOnPublic {
	this := &GetSpecType_AdvertiseOnPublic{}
	this.AdvertiseOnPublic = ves_io_schema_views.NewPopulatedAdvertisePublic(r, easy)
	return this
}
func NewPopulatedGetSpecType_AdvertiseCustom(r randyTypes, easy bool) *GetSpecType_AdvertiseCustom {
	this := &GetSpecType_AdvertiseCustom{}
	this.AdvertiseCustom = ves_io_schema_views.NewPopulatedAdvertiseCustom(r, easy)
	return this
}
func NewPopulatedGetSpecType_Waf(r randyTypes, easy bool) *GetSpecType_Waf {
	this := &GetSpecType_Waf{}
	this.Waf = ves_io_schema_views.NewPopulatedObjectRefType(r, easy)
	return this
}
func NewPopulatedGetSpecType_WafRule(r randyTypes, easy bool) *GetSpecType_WafRule {
	this := &GetSpecType_WafRule{}
	this.WafRule = ves_io_schema_views.NewPopulatedObjectRefType(r, easy)
	return this
}
func NewPopulatedGetSpecType_DisableWaf(r randyTypes, easy bool) *GetSpecType_DisableWaf {
	this := &GetSpecType_DisableWaf{}
	this.DisableWaf = ves_io_schema4.NewPopulatedEmpty(r, easy)
	return this
}
func NewPopulatedGetSpecType_DoNotAdvertise(r randyTypes, easy bool) *GetSpecType_DoNotAdvertise {
	this := &GetSpecType_DoNotAdvertise{}
	this.DoNotAdvertise = ves_io_schema4.NewPopulatedEmpty(r, easy)
	return this
}
func NewPopulatedGetSpecType_AdvertiseOnPublicDefaultVip(r randyTypes, easy bool) *GetSpecType_AdvertiseOnPublicDefaultVip {
	this := &GetSpecType_AdvertiseOnPublicDefaultVip{}
	this.AdvertiseOnPublicDefaultVip = ves_io_schema4.NewPopulatedEmpty(r, easy)
	return this
}
func NewPopulatedGetSpecType_JsChallenge(r randyTypes, easy bool) *GetSpecType_JsChallenge {
	this := &GetSpecType_JsChallenge{}
	this.JsChallenge = ves_io_schema_virtual_host.NewPopulatedJavascriptChallengeType(r, easy)
	return this
}
func NewPopulatedGetSpecType_DisableRateLimit(r randyTypes, easy bool) *GetSpecType_DisableRateLimit {
	this := &GetSpecType_DisableRateLimit{}
	this.DisableRateLimit = ves_io_schema4.NewPopulatedEmpty(r, easy)
	return this
}
func NewPopulatedGetSpecType_RateLimit(r randyTypes, easy bool) *GetSpecType_RateLimit {
	this := &GetSpecType_RateLimit{}
	this.RateLimit = NewPopulatedRateLimitConfigType(r, easy)
	return this
}
func NewPopulatedGetSpecType_CaptchaChallenge(r randyTypes, easy bool) *GetSpecType_CaptchaChallenge {
	this := &GetSpecType_CaptchaChallenge{}
	this.CaptchaChallenge = ves_io_schema_virtual_host.NewPopulatedCaptchaChallengeType(r, easy)
	return this
}
func NewPopulatedGetSpecType_NoChallenge(r randyTypes, easy bool) *GetSpecType_NoChallenge {
	this := &GetSpecType_NoChallenge{}
	this.NoChallenge = ves_io_schema4.NewPopulatedEmpty(r, easy)
	return this
}
func NewPopulatedGetSpecType_HttpsAutoCert(r randyTypes, easy bool) *GetSpecType_HttpsAutoCert {
	this := &GetSpecType_HttpsAutoCert{}
	this.HttpsAutoCert = NewPopulatedProxyTypeHttpsAutoCerts(r, easy)
	return this
}

type randyTypes interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneTypes(r randyTypes) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringTypes(r randyTypes) string {
	v28 := r.Intn(100)
	tmps := make([]rune, v28)
	for i := 0; i < v28; i++ {
		tmps[i] = randUTF8RuneTypes(r)
	}
	return string(tmps)
}
func randUnrecognizedTypes(r randyTypes, maxFieldNumber int) (dAtA []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		dAtA = randFieldTypes(dAtA, r, fieldNumber, wire)
	}
	return dAtA
}
func randFieldTypes(dAtA []byte, r randyTypes, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		dAtA = encodeVarintPopulateTypes(dAtA, uint64(key))
		v29 := r.Int63()
		if r.Intn(2) == 0 {
			v29 *= -1
		}
		dAtA = encodeVarintPopulateTypes(dAtA, uint64(v29))
	case 1:
		dAtA = encodeVarintPopulateTypes(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		dAtA = encodeVarintPopulateTypes(dAtA, uint64(key))
		ll := r.Intn(100)
		dAtA = encodeVarintPopulateTypes(dAtA, uint64(ll))
		for j := 0; j < ll; j++ {
			dAtA = append(dAtA, byte(r.Intn(256)))
		}
	default:
		dAtA = encodeVarintPopulateTypes(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return dAtA
}
func encodeVarintPopulateTypes(dAtA []byte, v uint64) []byte {
	for v >= 1<<7 {
		dAtA = append(dAtA, uint8(uint64(v)&0x7f|0x80))
		v >>= 7
	}
	dAtA = append(dAtA, uint8(v))
	return dAtA
}
func (m *DownstreamTlsValidationContext) Size() (n int) {
	var l int
	_ = l
	l = len(m.TrustedCaUrl)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *DownstreamTlsParamsType) Size() (n int) {
	var l int
	_ = l
	if m.TlsConfig != nil {
		l = m.TlsConfig.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if len(m.TlsCertificates) > 0 {
		for _, e := range m.TlsCertificates {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if m.MtlsChoice != nil {
		n += m.MtlsChoice.Size()
	}
	return n
}

func (m *DownstreamTlsParamsType_NoMtls) Size() (n int) {
	var l int
	_ = l
	if m.NoMtls != nil {
		l = m.NoMtls.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *DownstreamTlsParamsType_UseMtls) Size() (n int) {
	var l int
	_ = l
	if m.UseMtls != nil {
		l = m.UseMtls.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ProxyTypeHttps) Size() (n int) {
	var l int
	_ = l
	if m.HttpRedirect {
		n += 2
	}
	if m.AddHsts {
		n += 2
	}
	if m.TlsParameters != nil {
		l = m.TlsParameters.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *ProxyTypeHttpsAutoCerts) Size() (n int) {
	var l int
	_ = l
	if m.HttpRedirect {
		n += 2
	}
	if m.AddHsts {
		n += 2
	}
	return n
}

func (m *RouteTypeSimpleWithDefaultOriginPool) Size() (n int) {
	var l int
	_ = l
	if m.HttpMethod != 0 {
		n += 1 + sovTypes(uint64(m.HttpMethod))
	}
	if m.Path != nil {
		l = m.Path.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.HostRewriteParams != nil {
		n += m.HostRewriteParams.Size()
	}
	return n
}

func (m *RouteTypeSimpleWithDefaultOriginPool_AutoHostRewrite) Size() (n int) {
	var l int
	_ = l
	if m.AutoHostRewrite != nil {
		l = m.AutoHostRewrite.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *RouteTypeSimpleWithDefaultOriginPool_HostRewrite) Size() (n int) {
	var l int
	_ = l
	l = len(m.HostRewrite)
	n += 1 + l + sovTypes(uint64(l))
	return n
}
func (m *RouteTypeSimpleWithDefaultOriginPool_DisableHostRewrite) Size() (n int) {
	var l int
	_ = l
	if m.DisableHostRewrite != nil {
		l = m.DisableHostRewrite.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *RouteTypeSimple) Size() (n int) {
	var l int
	_ = l
	if m.Path != nil {
		l = m.Path.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.HttpMethod != 0 {
		n += 1 + sovTypes(uint64(m.HttpMethod))
	}
	if len(m.OriginPools) > 0 {
		for _, e := range m.OriginPools {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if m.HostRewriteParams != nil {
		n += m.HostRewriteParams.Size()
	}
	return n
}

func (m *RouteTypeSimple_AutoHostRewrite) Size() (n int) {
	var l int
	_ = l
	if m.AutoHostRewrite != nil {
		l = m.AutoHostRewrite.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *RouteTypeSimple_HostRewrite) Size() (n int) {
	var l int
	_ = l
	l = len(m.HostRewrite)
	n += 1 + l + sovTypes(uint64(l))
	return n
}
func (m *RouteTypeSimple_DisableHostRewrite) Size() (n int) {
	var l int
	_ = l
	if m.DisableHostRewrite != nil {
		l = m.DisableHostRewrite.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *RouteTypeRedirect) Size() (n int) {
	var l int
	_ = l
	if m.Path != nil {
		l = m.Path.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.HttpMethod != 0 {
		n += 1 + sovTypes(uint64(m.HttpMethod))
	}
	if m.RouteRedirect != nil {
		l = m.RouteRedirect.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *RouteTypeDirectResponse) Size() (n int) {
	var l int
	_ = l
	if m.Path != nil {
		l = m.Path.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.HttpMethod != 0 {
		n += 1 + sovTypes(uint64(m.HttpMethod))
	}
	if m.RouteDirectResponse != nil {
		l = m.RouteDirectResponse.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *RouteTypeCustomRoute) Size() (n int) {
	var l int
	_ = l
	if m.RouteRef != nil {
		l = m.RouteRef.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *RouteType) Size() (n int) {
	var l int
	_ = l
	if m.Choice != nil {
		n += m.Choice.Size()
	}
	return n
}

func (m *RouteType_SimpleRoute) Size() (n int) {
	var l int
	_ = l
	if m.SimpleRoute != nil {
		l = m.SimpleRoute.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *RouteType_RedirectRoute) Size() (n int) {
	var l int
	_ = l
	if m.RedirectRoute != nil {
		l = m.RedirectRoute.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *RouteType_DirectResponseRoute) Size() (n int) {
	var l int
	_ = l
	if m.DirectResponseRoute != nil {
		l = m.DirectResponseRoute.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *RouteType_CustomRouteObject) Size() (n int) {
	var l int
	_ = l
	if m.CustomRouteObject != nil {
		l = m.CustomRouteObject.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *AdvancedOptionsType) Size() (n int) {
	var l int
	_ = l
	if len(m.RequestHeadersToAdd) > 0 {
		for _, e := range m.RequestHeadersToAdd {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if len(m.RequestHeadersToRemove) > 0 {
		for _, s := range m.RequestHeadersToRemove {
			l = len(s)
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if len(m.ResponseHeadersToAdd) > 0 {
		for _, e := range m.ResponseHeadersToAdd {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if len(m.ResponseHeadersToRemove) > 0 {
		for _, s := range m.ResponseHeadersToRemove {
			l = len(s)
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if m.MaxRequestHeaderSize != 0 {
		n += 1 + sovTypes(uint64(m.MaxRequestHeaderSize))
	}
	if m.BufferPolicy != nil {
		l = m.BufferPolicy.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.CompressionParams != nil {
		l = m.CompressionParams.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if len(m.CustomErrors) > 0 {
		for k, v := range m.CustomErrors {
			_ = k
			_ = v
			mapEntrySize := 1 + sovTypes(uint64(k)) + 1 + len(v) + sovTypes(uint64(len(v)))
			n += mapEntrySize + 1 + sovTypes(uint64(mapEntrySize))
		}
	}
	if m.JavascriptInfo != nil {
		l = m.JavascriptInfo.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if len(m.Jwt) > 0 {
		for _, e := range m.Jwt {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if m.IdleTimeout != 0 {
		n += 1 + sovTypes(uint64(m.IdleTimeout))
	}
	return n
}

func (m *CustomIpAllowedList) Size() (n int) {
	var l int
	_ = l
	if len(m.RateLimiterAllowedPrefixes) > 0 {
		for _, e := range m.RateLimiterAllowedPrefixes {
			l = e.Size()
			n += 2 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *RateLimitConfigType) Size() (n int) {
	var l int
	_ = l
	if m.RateLimiter != nil {
		l = m.RateLimiter.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.IpAllowedListChoice != nil {
		n += m.IpAllowedListChoice.Size()
	}
	return n
}

func (m *RateLimitConfigType_NoIpAllowedList) Size() (n int) {
	var l int
	_ = l
	if m.NoIpAllowedList != nil {
		l = m.NoIpAllowedList.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *RateLimitConfigType_IpAllowedList) Size() (n int) {
	var l int
	_ = l
	if m.IpAllowedList != nil {
		l = m.IpAllowedList.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *RateLimitConfigType_CustomIpAllowedList) Size() (n int) {
	var l int
	_ = l
	if m.CustomIpAllowedList != nil {
		l = m.CustomIpAllowedList.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType) Size() (n int) {
	var l int
	_ = l
	if len(m.Domains) > 0 {
		for _, s := range m.Domains {
			l = len(s)
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if m.LoadbalancerType != nil {
		n += m.LoadbalancerType.Size()
	}
	if m.AdvertiseChoice != nil {
		n += m.AdvertiseChoice.Size()
	}
	if len(m.DefaultRoutePools) > 0 {
		for _, e := range m.DefaultRoutePools {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if len(m.Routes) > 0 {
		for _, e := range m.Routes {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if m.CorsPolicy != nil {
		l = m.CorsPolicy.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.WafChoice != nil {
		n += m.WafChoice.Size()
	}
	if m.AddLocation {
		n += 3
	}
	if m.ChallengeType != nil {
		n += m.ChallengeType.Size()
	}
	if m.MoreOption != nil {
		l = m.MoreOption.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	if m.UserIdentification != nil {
		l = m.UserIdentification.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	if m.RateLimitChoice != nil {
		n += m.RateLimitChoice.Size()
	}
	if m.HostRewriteParams != nil {
		n += m.HostRewriteParams.Size()
	}
	if m.MaliciousUserMitigation != nil {
		l = m.MaliciousUserMitigation.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	if len(m.WafExclusionRules) > 0 {
		for _, e := range m.WafExclusionRules {
			l = e.Size()
			n += 2 + l + sovTypes(uint64(l))
		}
	}
	if m.ViewInternal != nil {
		l = m.ViewInternal.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	l = len(m.HostName)
	if l > 0 {
		n += 2 + l + sovTypes(uint64(l))
	}
	if len(m.DnsInfo) > 0 {
		for _, e := range m.DnsInfo {
			l = e.Size()
			n += 2 + l + sovTypes(uint64(l))
		}
	}
	if m.State != 0 {
		n += 2 + sovTypes(uint64(m.State))
	}
	if m.AutoCertState != 0 {
		n += 2 + sovTypes(uint64(m.AutoCertState))
	}
	if m.AutoCertInfo != nil {
		l = m.AutoCertInfo.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *GlobalSpecType_Http) Size() (n int) {
	var l int
	_ = l
	if m.Http != nil {
		l = m.Http.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_Https) Size() (n int) {
	var l int
	_ = l
	if m.Https != nil {
		l = m.Https.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_AdvertiseOnPublic) Size() (n int) {
	var l int
	_ = l
	if m.AdvertiseOnPublic != nil {
		l = m.AdvertiseOnPublic.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_AdvertiseCustom) Size() (n int) {
	var l int
	_ = l
	if m.AdvertiseCustom != nil {
		l = m.AdvertiseCustom.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_Waf) Size() (n int) {
	var l int
	_ = l
	if m.Waf != nil {
		l = m.Waf.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_WafRule) Size() (n int) {
	var l int
	_ = l
	if m.WafRule != nil {
		l = m.WafRule.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_DisableWaf) Size() (n int) {
	var l int
	_ = l
	if m.DisableWaf != nil {
		l = m.DisableWaf.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_DoNotAdvertise) Size() (n int) {
	var l int
	_ = l
	if m.DoNotAdvertise != nil {
		l = m.DoNotAdvertise.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_AdvertiseOnPublicDefaultVip) Size() (n int) {
	var l int
	_ = l
	if m.AdvertiseOnPublicDefaultVip != nil {
		l = m.AdvertiseOnPublicDefaultVip.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_JsChallenge) Size() (n int) {
	var l int
	_ = l
	if m.JsChallenge != nil {
		l = m.JsChallenge.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_DisableRateLimit) Size() (n int) {
	var l int
	_ = l
	if m.DisableRateLimit != nil {
		l = m.DisableRateLimit.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_RateLimit) Size() (n int) {
	var l int
	_ = l
	if m.RateLimit != nil {
		l = m.RateLimit.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_CaptchaChallenge) Size() (n int) {
	var l int
	_ = l
	if m.CaptchaChallenge != nil {
		l = m.CaptchaChallenge.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_NoChallenge) Size() (n int) {
	var l int
	_ = l
	if m.NoChallenge != nil {
		l = m.NoChallenge.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_HttpsAutoCert) Size() (n int) {
	var l int
	_ = l
	if m.HttpsAutoCert != nil {
		l = m.HttpsAutoCert.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_AutoHostRewrite) Size() (n int) {
	var l int
	_ = l
	if m.AutoHostRewrite != nil {
		l = m.AutoHostRewrite.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_HostRewrite) Size() (n int) {
	var l int
	_ = l
	l = len(m.HostRewrite)
	n += 2 + l + sovTypes(uint64(l))
	return n
}
func (m *GlobalSpecType_DisableHostRewrite) Size() (n int) {
	var l int
	_ = l
	if m.DisableHostRewrite != nil {
		l = m.DisableHostRewrite.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType) Size() (n int) {
	var l int
	_ = l
	if len(m.Domains) > 0 {
		for _, s := range m.Domains {
			l = len(s)
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if m.LoadbalancerType != nil {
		n += m.LoadbalancerType.Size()
	}
	if m.AdvertiseChoice != nil {
		n += m.AdvertiseChoice.Size()
	}
	if len(m.DefaultRoutePools) > 0 {
		for _, e := range m.DefaultRoutePools {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if len(m.Routes) > 0 {
		for _, e := range m.Routes {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if m.CorsPolicy != nil {
		l = m.CorsPolicy.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.WafChoice != nil {
		n += m.WafChoice.Size()
	}
	if m.AddLocation {
		n += 3
	}
	if m.ChallengeType != nil {
		n += m.ChallengeType.Size()
	}
	if m.MoreOption != nil {
		l = m.MoreOption.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	if m.UserIdentification != nil {
		l = m.UserIdentification.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	if m.RateLimitChoice != nil {
		n += m.RateLimitChoice.Size()
	}
	if m.MaliciousUserMitigation != nil {
		l = m.MaliciousUserMitigation.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	if len(m.WafExclusionRules) > 0 {
		for _, e := range m.WafExclusionRules {
			l = e.Size()
			n += 2 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *CreateSpecType_Http) Size() (n int) {
	var l int
	_ = l
	if m.Http != nil {
		l = m.Http.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_Https) Size() (n int) {
	var l int
	_ = l
	if m.Https != nil {
		l = m.Https.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_AdvertiseOnPublic) Size() (n int) {
	var l int
	_ = l
	if m.AdvertiseOnPublic != nil {
		l = m.AdvertiseOnPublic.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_AdvertiseCustom) Size() (n int) {
	var l int
	_ = l
	if m.AdvertiseCustom != nil {
		l = m.AdvertiseCustom.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_Waf) Size() (n int) {
	var l int
	_ = l
	if m.Waf != nil {
		l = m.Waf.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_WafRule) Size() (n int) {
	var l int
	_ = l
	if m.WafRule != nil {
		l = m.WafRule.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_DisableWaf) Size() (n int) {
	var l int
	_ = l
	if m.DisableWaf != nil {
		l = m.DisableWaf.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_DoNotAdvertise) Size() (n int) {
	var l int
	_ = l
	if m.DoNotAdvertise != nil {
		l = m.DoNotAdvertise.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_AdvertiseOnPublicDefaultVip) Size() (n int) {
	var l int
	_ = l
	if m.AdvertiseOnPublicDefaultVip != nil {
		l = m.AdvertiseOnPublicDefaultVip.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_JsChallenge) Size() (n int) {
	var l int
	_ = l
	if m.JsChallenge != nil {
		l = m.JsChallenge.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_DisableRateLimit) Size() (n int) {
	var l int
	_ = l
	if m.DisableRateLimit != nil {
		l = m.DisableRateLimit.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_RateLimit) Size() (n int) {
	var l int
	_ = l
	if m.RateLimit != nil {
		l = m.RateLimit.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_CaptchaChallenge) Size() (n int) {
	var l int
	_ = l
	if m.CaptchaChallenge != nil {
		l = m.CaptchaChallenge.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_NoChallenge) Size() (n int) {
	var l int
	_ = l
	if m.NoChallenge != nil {
		l = m.NoChallenge.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_HttpsAutoCert) Size() (n int) {
	var l int
	_ = l
	if m.HttpsAutoCert != nil {
		l = m.HttpsAutoCert.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType) Size() (n int) {
	var l int
	_ = l
	if len(m.Domains) > 0 {
		for _, s := range m.Domains {
			l = len(s)
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if m.LoadbalancerType != nil {
		n += m.LoadbalancerType.Size()
	}
	if m.AdvertiseChoice != nil {
		n += m.AdvertiseChoice.Size()
	}
	if len(m.DefaultRoutePools) > 0 {
		for _, e := range m.DefaultRoutePools {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if len(m.Routes) > 0 {
		for _, e := range m.Routes {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if m.CorsPolicy != nil {
		l = m.CorsPolicy.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.WafChoice != nil {
		n += m.WafChoice.Size()
	}
	if m.AddLocation {
		n += 3
	}
	if m.ChallengeType != nil {
		n += m.ChallengeType.Size()
	}
	if m.MoreOption != nil {
		l = m.MoreOption.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	if m.UserIdentification != nil {
		l = m.UserIdentification.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	if m.RateLimitChoice != nil {
		n += m.RateLimitChoice.Size()
	}
	if m.MaliciousUserMitigation != nil {
		l = m.MaliciousUserMitigation.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	if len(m.WafExclusionRules) > 0 {
		for _, e := range m.WafExclusionRules {
			l = e.Size()
			n += 2 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *ReplaceSpecType_Http) Size() (n int) {
	var l int
	_ = l
	if m.Http != nil {
		l = m.Http.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_Https) Size() (n int) {
	var l int
	_ = l
	if m.Https != nil {
		l = m.Https.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_AdvertiseOnPublic) Size() (n int) {
	var l int
	_ = l
	if m.AdvertiseOnPublic != nil {
		l = m.AdvertiseOnPublic.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_AdvertiseCustom) Size() (n int) {
	var l int
	_ = l
	if m.AdvertiseCustom != nil {
		l = m.AdvertiseCustom.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_Waf) Size() (n int) {
	var l int
	_ = l
	if m.Waf != nil {
		l = m.Waf.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_WafRule) Size() (n int) {
	var l int
	_ = l
	if m.WafRule != nil {
		l = m.WafRule.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_DisableWaf) Size() (n int) {
	var l int
	_ = l
	if m.DisableWaf != nil {
		l = m.DisableWaf.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_DoNotAdvertise) Size() (n int) {
	var l int
	_ = l
	if m.DoNotAdvertise != nil {
		l = m.DoNotAdvertise.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_AdvertiseOnPublicDefaultVip) Size() (n int) {
	var l int
	_ = l
	if m.AdvertiseOnPublicDefaultVip != nil {
		l = m.AdvertiseOnPublicDefaultVip.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_JsChallenge) Size() (n int) {
	var l int
	_ = l
	if m.JsChallenge != nil {
		l = m.JsChallenge.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_DisableRateLimit) Size() (n int) {
	var l int
	_ = l
	if m.DisableRateLimit != nil {
		l = m.DisableRateLimit.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_RateLimit) Size() (n int) {
	var l int
	_ = l
	if m.RateLimit != nil {
		l = m.RateLimit.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_CaptchaChallenge) Size() (n int) {
	var l int
	_ = l
	if m.CaptchaChallenge != nil {
		l = m.CaptchaChallenge.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_NoChallenge) Size() (n int) {
	var l int
	_ = l
	if m.NoChallenge != nil {
		l = m.NoChallenge.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_HttpsAutoCert) Size() (n int) {
	var l int
	_ = l
	if m.HttpsAutoCert != nil {
		l = m.HttpsAutoCert.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType) Size() (n int) {
	var l int
	_ = l
	if len(m.Domains) > 0 {
		for _, s := range m.Domains {
			l = len(s)
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if m.LoadbalancerType != nil {
		n += m.LoadbalancerType.Size()
	}
	if m.AdvertiseChoice != nil {
		n += m.AdvertiseChoice.Size()
	}
	if len(m.DefaultRoutePools) > 0 {
		for _, e := range m.DefaultRoutePools {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if len(m.Routes) > 0 {
		for _, e := range m.Routes {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if m.CorsPolicy != nil {
		l = m.CorsPolicy.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.WafChoice != nil {
		n += m.WafChoice.Size()
	}
	if m.AddLocation {
		n += 3
	}
	if m.ChallengeType != nil {
		n += m.ChallengeType.Size()
	}
	if m.MoreOption != nil {
		l = m.MoreOption.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	if m.UserIdentification != nil {
		l = m.UserIdentification.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	if m.RateLimitChoice != nil {
		n += m.RateLimitChoice.Size()
	}
	if m.MaliciousUserMitigation != nil {
		l = m.MaliciousUserMitigation.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	if len(m.WafExclusionRules) > 0 {
		for _, e := range m.WafExclusionRules {
			l = e.Size()
			n += 2 + l + sovTypes(uint64(l))
		}
	}
	l = len(m.HostName)
	if l > 0 {
		n += 2 + l + sovTypes(uint64(l))
	}
	if len(m.DnsInfo) > 0 {
		for _, e := range m.DnsInfo {
			l = e.Size()
			n += 2 + l + sovTypes(uint64(l))
		}
	}
	if m.State != 0 {
		n += 2 + sovTypes(uint64(m.State))
	}
	if m.AutoCertState != 0 {
		n += 2 + sovTypes(uint64(m.AutoCertState))
	}
	if m.AutoCertInfo != nil {
		l = m.AutoCertInfo.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *GetSpecType_Http) Size() (n int) {
	var l int
	_ = l
	if m.Http != nil {
		l = m.Http.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_Https) Size() (n int) {
	var l int
	_ = l
	if m.Https != nil {
		l = m.Https.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_AdvertiseOnPublic) Size() (n int) {
	var l int
	_ = l
	if m.AdvertiseOnPublic != nil {
		l = m.AdvertiseOnPublic.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_AdvertiseCustom) Size() (n int) {
	var l int
	_ = l
	if m.AdvertiseCustom != nil {
		l = m.AdvertiseCustom.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_Waf) Size() (n int) {
	var l int
	_ = l
	if m.Waf != nil {
		l = m.Waf.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_WafRule) Size() (n int) {
	var l int
	_ = l
	if m.WafRule != nil {
		l = m.WafRule.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_DisableWaf) Size() (n int) {
	var l int
	_ = l
	if m.DisableWaf != nil {
		l = m.DisableWaf.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_DoNotAdvertise) Size() (n int) {
	var l int
	_ = l
	if m.DoNotAdvertise != nil {
		l = m.DoNotAdvertise.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_AdvertiseOnPublicDefaultVip) Size() (n int) {
	var l int
	_ = l
	if m.AdvertiseOnPublicDefaultVip != nil {
		l = m.AdvertiseOnPublicDefaultVip.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_JsChallenge) Size() (n int) {
	var l int
	_ = l
	if m.JsChallenge != nil {
		l = m.JsChallenge.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_DisableRateLimit) Size() (n int) {
	var l int
	_ = l
	if m.DisableRateLimit != nil {
		l = m.DisableRateLimit.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_RateLimit) Size() (n int) {
	var l int
	_ = l
	if m.RateLimit != nil {
		l = m.RateLimit.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_CaptchaChallenge) Size() (n int) {
	var l int
	_ = l
	if m.CaptchaChallenge != nil {
		l = m.CaptchaChallenge.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_NoChallenge) Size() (n int) {
	var l int
	_ = l
	if m.NoChallenge != nil {
		l = m.NoChallenge.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_HttpsAutoCert) Size() (n int) {
	var l int
	_ = l
	if m.HttpsAutoCert != nil {
		l = m.HttpsAutoCert.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}

func sovTypes(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozTypes(x uint64) (n int) {
	return sovTypes(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *DownstreamTlsValidationContext) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DownstreamTlsValidationContext{`,
		`TrustedCaUrl:` + fmt.Sprintf("%v", this.TrustedCaUrl) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DownstreamTlsParamsType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DownstreamTlsParamsType{`,
		`TlsConfig:` + strings.Replace(fmt.Sprintf("%v", this.TlsConfig), "TlsConfig", "ves_io_schema_views.TlsConfig", 1) + `,`,
		`TlsCertificates:` + strings.Replace(fmt.Sprintf("%v", this.TlsCertificates), "TlsCertificateType", "ves_io_schema4.TlsCertificateType", 1) + `,`,
		`MtlsChoice:` + fmt.Sprintf("%v", this.MtlsChoice) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DownstreamTlsParamsType_NoMtls) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DownstreamTlsParamsType_NoMtls{`,
		`NoMtls:` + strings.Replace(fmt.Sprintf("%v", this.NoMtls), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DownstreamTlsParamsType_UseMtls) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DownstreamTlsParamsType_UseMtls{`,
		`UseMtls:` + strings.Replace(fmt.Sprintf("%v", this.UseMtls), "DownstreamTlsValidationContext", "DownstreamTlsValidationContext", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ProxyTypeHttps) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ProxyTypeHttps{`,
		`HttpRedirect:` + fmt.Sprintf("%v", this.HttpRedirect) + `,`,
		`AddHsts:` + fmt.Sprintf("%v", this.AddHsts) + `,`,
		`TlsParameters:` + strings.Replace(fmt.Sprintf("%v", this.TlsParameters), "DownstreamTlsParamsType", "DownstreamTlsParamsType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ProxyTypeHttpsAutoCerts) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ProxyTypeHttpsAutoCerts{`,
		`HttpRedirect:` + fmt.Sprintf("%v", this.HttpRedirect) + `,`,
		`AddHsts:` + fmt.Sprintf("%v", this.AddHsts) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RouteTypeSimpleWithDefaultOriginPool) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RouteTypeSimpleWithDefaultOriginPool{`,
		`HttpMethod:` + fmt.Sprintf("%v", this.HttpMethod) + `,`,
		`Path:` + strings.Replace(fmt.Sprintf("%v", this.Path), "PathMatcherType", "ves_io_schema4.PathMatcherType", 1) + `,`,
		`HostRewriteParams:` + fmt.Sprintf("%v", this.HostRewriteParams) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RouteTypeSimpleWithDefaultOriginPool_AutoHostRewrite) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RouteTypeSimpleWithDefaultOriginPool_AutoHostRewrite{`,
		`AutoHostRewrite:` + strings.Replace(fmt.Sprintf("%v", this.AutoHostRewrite), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RouteTypeSimpleWithDefaultOriginPool_HostRewrite) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RouteTypeSimpleWithDefaultOriginPool_HostRewrite{`,
		`HostRewrite:` + fmt.Sprintf("%v", this.HostRewrite) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RouteTypeSimpleWithDefaultOriginPool_DisableHostRewrite) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RouteTypeSimpleWithDefaultOriginPool_DisableHostRewrite{`,
		`DisableHostRewrite:` + strings.Replace(fmt.Sprintf("%v", this.DisableHostRewrite), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RouteTypeSimple) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RouteTypeSimple{`,
		`Path:` + strings.Replace(fmt.Sprintf("%v", this.Path), "PathMatcherType", "ves_io_schema4.PathMatcherType", 1) + `,`,
		`HttpMethod:` + fmt.Sprintf("%v", this.HttpMethod) + `,`,
		`OriginPools:` + strings.Replace(fmt.Sprintf("%v", this.OriginPools), "OriginPoolWithWeight", "ves_io_schema_views.OriginPoolWithWeight", 1) + `,`,
		`HostRewriteParams:` + fmt.Sprintf("%v", this.HostRewriteParams) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RouteTypeSimple_AutoHostRewrite) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RouteTypeSimple_AutoHostRewrite{`,
		`AutoHostRewrite:` + strings.Replace(fmt.Sprintf("%v", this.AutoHostRewrite), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RouteTypeSimple_HostRewrite) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RouteTypeSimple_HostRewrite{`,
		`HostRewrite:` + fmt.Sprintf("%v", this.HostRewrite) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RouteTypeSimple_DisableHostRewrite) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RouteTypeSimple_DisableHostRewrite{`,
		`DisableHostRewrite:` + strings.Replace(fmt.Sprintf("%v", this.DisableHostRewrite), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RouteTypeRedirect) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RouteTypeRedirect{`,
		`Path:` + strings.Replace(fmt.Sprintf("%v", this.Path), "PathMatcherType", "ves_io_schema4.PathMatcherType", 1) + `,`,
		`HttpMethod:` + fmt.Sprintf("%v", this.HttpMethod) + `,`,
		`RouteRedirect:` + strings.Replace(fmt.Sprintf("%v", this.RouteRedirect), "RouteRedirect", "ves_io_schema_route.RouteRedirect", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RouteTypeDirectResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RouteTypeDirectResponse{`,
		`Path:` + strings.Replace(fmt.Sprintf("%v", this.Path), "PathMatcherType", "ves_io_schema4.PathMatcherType", 1) + `,`,
		`HttpMethod:` + fmt.Sprintf("%v", this.HttpMethod) + `,`,
		`RouteDirectResponse:` + strings.Replace(fmt.Sprintf("%v", this.RouteDirectResponse), "RouteDirectResponse", "ves_io_schema_route.RouteDirectResponse", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RouteTypeCustomRoute) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RouteTypeCustomRoute{`,
		`RouteRef:` + strings.Replace(fmt.Sprintf("%v", this.RouteRef), "ObjectRefType", "ves_io_schema_views.ObjectRefType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RouteType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RouteType{`,
		`Choice:` + fmt.Sprintf("%v", this.Choice) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RouteType_SimpleRoute) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RouteType_SimpleRoute{`,
		`SimpleRoute:` + strings.Replace(fmt.Sprintf("%v", this.SimpleRoute), "RouteTypeSimple", "RouteTypeSimple", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RouteType_RedirectRoute) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RouteType_RedirectRoute{`,
		`RedirectRoute:` + strings.Replace(fmt.Sprintf("%v", this.RedirectRoute), "RouteTypeRedirect", "RouteTypeRedirect", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RouteType_DirectResponseRoute) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RouteType_DirectResponseRoute{`,
		`DirectResponseRoute:` + strings.Replace(fmt.Sprintf("%v", this.DirectResponseRoute), "RouteTypeDirectResponse", "RouteTypeDirectResponse", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RouteType_CustomRouteObject) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RouteType_CustomRouteObject{`,
		`CustomRouteObject:` + strings.Replace(fmt.Sprintf("%v", this.CustomRouteObject), "RouteTypeCustomRoute", "RouteTypeCustomRoute", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AdvancedOptionsType) String() string {
	if this == nil {
		return "nil"
	}
	keysForCustomErrors := make([]uint32, 0, len(this.CustomErrors))
	for k, _ := range this.CustomErrors {
		keysForCustomErrors = append(keysForCustomErrors, k)
	}
	sortkeys.Uint32s(keysForCustomErrors)
	mapStringForCustomErrors := "map[uint32]string{"
	for _, k := range keysForCustomErrors {
		mapStringForCustomErrors += fmt.Sprintf("%v: %v,", k, this.CustomErrors[k])
	}
	mapStringForCustomErrors += "}"
	s := strings.Join([]string{`&AdvancedOptionsType{`,
		`RequestHeadersToAdd:` + strings.Replace(fmt.Sprintf("%v", this.RequestHeadersToAdd), "HeaderManipulationOptionType", "ves_io_schema4.HeaderManipulationOptionType", 1) + `,`,
		`RequestHeadersToRemove:` + fmt.Sprintf("%v", this.RequestHeadersToRemove) + `,`,
		`ResponseHeadersToAdd:` + strings.Replace(fmt.Sprintf("%v", this.ResponseHeadersToAdd), "HeaderManipulationOptionType", "ves_io_schema4.HeaderManipulationOptionType", 1) + `,`,
		`ResponseHeadersToRemove:` + fmt.Sprintf("%v", this.ResponseHeadersToRemove) + `,`,
		`MaxRequestHeaderSize:` + fmt.Sprintf("%v", this.MaxRequestHeaderSize) + `,`,
		`BufferPolicy:` + strings.Replace(fmt.Sprintf("%v", this.BufferPolicy), "BufferConfigType", "ves_io_schema4.BufferConfigType", 1) + `,`,
		`CompressionParams:` + strings.Replace(fmt.Sprintf("%v", this.CompressionParams), "CompressionType", "ves_io_schema_virtual_host.CompressionType", 1) + `,`,
		`CustomErrors:` + mapStringForCustomErrors + `,`,
		`JavascriptInfo:` + strings.Replace(fmt.Sprintf("%v", this.JavascriptInfo), "JavaScriptConfigType", "ves_io_schema_virtual_host.JavaScriptConfigType", 1) + `,`,
		`Jwt:` + strings.Replace(fmt.Sprintf("%v", this.Jwt), "ObjectRefType", "ves_io_schema_views.ObjectRefType", 1) + `,`,
		`IdleTimeout:` + fmt.Sprintf("%v", this.IdleTimeout) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CustomIpAllowedList) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CustomIpAllowedList{`,
		`RateLimiterAllowedPrefixes:` + strings.Replace(fmt.Sprintf("%v", this.RateLimiterAllowedPrefixes), "ObjectRefType", "ves_io_schema_views.ObjectRefType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RateLimitConfigType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RateLimitConfigType{`,
		`RateLimiter:` + strings.Replace(fmt.Sprintf("%v", this.RateLimiter), "RateLimitValue", "ves_io_schema_rate_limiter.RateLimitValue", 1) + `,`,
		`IpAllowedListChoice:` + fmt.Sprintf("%v", this.IpAllowedListChoice) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RateLimitConfigType_NoIpAllowedList) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RateLimitConfigType_NoIpAllowedList{`,
		`NoIpAllowedList:` + strings.Replace(fmt.Sprintf("%v", this.NoIpAllowedList), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RateLimitConfigType_IpAllowedList) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RateLimitConfigType_IpAllowedList{`,
		`IpAllowedList:` + strings.Replace(fmt.Sprintf("%v", this.IpAllowedList), "PrefixStringListType", "ves_io_schema_views.PrefixStringListType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RateLimitConfigType_CustomIpAllowedList) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RateLimitConfigType_CustomIpAllowedList{`,
		`CustomIpAllowedList:` + strings.Replace(fmt.Sprintf("%v", this.CustomIpAllowedList), "CustomIpAllowedList", "CustomIpAllowedList", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType{`,
		`Domains:` + fmt.Sprintf("%v", this.Domains) + `,`,
		`LoadbalancerType:` + fmt.Sprintf("%v", this.LoadbalancerType) + `,`,
		`AdvertiseChoice:` + fmt.Sprintf("%v", this.AdvertiseChoice) + `,`,
		`DefaultRoutePools:` + strings.Replace(fmt.Sprintf("%v", this.DefaultRoutePools), "OriginPoolWithWeight", "ves_io_schema_views.OriginPoolWithWeight", 1) + `,`,
		`Routes:` + strings.Replace(fmt.Sprintf("%v", this.Routes), "RouteType", "RouteType", 1) + `,`,
		`CorsPolicy:` + strings.Replace(fmt.Sprintf("%v", this.CorsPolicy), "CorsPolicy", "ves_io_schema4.CorsPolicy", 1) + `,`,
		`WafChoice:` + fmt.Sprintf("%v", this.WafChoice) + `,`,
		`AddLocation:` + fmt.Sprintf("%v", this.AddLocation) + `,`,
		`ChallengeType:` + fmt.Sprintf("%v", this.ChallengeType) + `,`,
		`MoreOption:` + strings.Replace(fmt.Sprintf("%v", this.MoreOption), "AdvancedOptionsType", "AdvancedOptionsType", 1) + `,`,
		`UserIdentification:` + strings.Replace(fmt.Sprintf("%v", this.UserIdentification), "ObjectRefType", "ves_io_schema_views.ObjectRefType", 1) + `,`,
		`RateLimitChoice:` + fmt.Sprintf("%v", this.RateLimitChoice) + `,`,
		`HostRewriteParams:` + fmt.Sprintf("%v", this.HostRewriteParams) + `,`,
		`MaliciousUserMitigation:` + strings.Replace(fmt.Sprintf("%v", this.MaliciousUserMitigation), "ObjectRefType", "ves_io_schema_views.ObjectRefType", 1) + `,`,
		`WafExclusionRules:` + strings.Replace(fmt.Sprintf("%v", this.WafExclusionRules), "SimpleWafExclusionRule", "ves_io_schema_policy.SimpleWafExclusionRule", 1) + `,`,
		`ViewInternal:` + strings.Replace(fmt.Sprintf("%v", this.ViewInternal), "ObjectRefType", "ves_io_schema_views.ObjectRefType", 1) + `,`,
		`HostName:` + fmt.Sprintf("%v", this.HostName) + `,`,
		`DnsInfo:` + strings.Replace(fmt.Sprintf("%v", this.DnsInfo), "DnsInfo", "ves_io_schema_virtual_host_dns_info.DnsInfo", 1) + `,`,
		`State:` + fmt.Sprintf("%v", this.State) + `,`,
		`AutoCertState:` + fmt.Sprintf("%v", this.AutoCertState) + `,`,
		`AutoCertInfo:` + strings.Replace(fmt.Sprintf("%v", this.AutoCertInfo), "AutoCertInfoType", "ves_io_schema_virtual_host.AutoCertInfoType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_Http) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_Http{`,
		`Http:` + strings.Replace(fmt.Sprintf("%v", this.Http), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_Https) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_Https{`,
		`Https:` + strings.Replace(fmt.Sprintf("%v", this.Https), "ProxyTypeHttps", "ProxyTypeHttps", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_AdvertiseOnPublic) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_AdvertiseOnPublic{`,
		`AdvertiseOnPublic:` + strings.Replace(fmt.Sprintf("%v", this.AdvertiseOnPublic), "AdvertisePublic", "ves_io_schema_views.AdvertisePublic", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_AdvertiseCustom) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_AdvertiseCustom{`,
		`AdvertiseCustom:` + strings.Replace(fmt.Sprintf("%v", this.AdvertiseCustom), "AdvertiseCustom", "ves_io_schema_views.AdvertiseCustom", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_Waf) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_Waf{`,
		`Waf:` + strings.Replace(fmt.Sprintf("%v", this.Waf), "ObjectRefType", "ves_io_schema_views.ObjectRefType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_WafRule) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_WafRule{`,
		`WafRule:` + strings.Replace(fmt.Sprintf("%v", this.WafRule), "ObjectRefType", "ves_io_schema_views.ObjectRefType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_DisableWaf) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_DisableWaf{`,
		`DisableWaf:` + strings.Replace(fmt.Sprintf("%v", this.DisableWaf), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_DoNotAdvertise) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_DoNotAdvertise{`,
		`DoNotAdvertise:` + strings.Replace(fmt.Sprintf("%v", this.DoNotAdvertise), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_AdvertiseOnPublicDefaultVip) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_AdvertiseOnPublicDefaultVip{`,
		`AdvertiseOnPublicDefaultVip:` + strings.Replace(fmt.Sprintf("%v", this.AdvertiseOnPublicDefaultVip), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_JsChallenge) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_JsChallenge{`,
		`JsChallenge:` + strings.Replace(fmt.Sprintf("%v", this.JsChallenge), "JavascriptChallengeType", "ves_io_schema_virtual_host.JavascriptChallengeType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_DisableRateLimit) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_DisableRateLimit{`,
		`DisableRateLimit:` + strings.Replace(fmt.Sprintf("%v", this.DisableRateLimit), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_RateLimit) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_RateLimit{`,
		`RateLimit:` + strings.Replace(fmt.Sprintf("%v", this.RateLimit), "RateLimitConfigType", "RateLimitConfigType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_CaptchaChallenge) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_CaptchaChallenge{`,
		`CaptchaChallenge:` + strings.Replace(fmt.Sprintf("%v", this.CaptchaChallenge), "CaptchaChallengeType", "ves_io_schema_virtual_host.CaptchaChallengeType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_NoChallenge) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_NoChallenge{`,
		`NoChallenge:` + strings.Replace(fmt.Sprintf("%v", this.NoChallenge), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_HttpsAutoCert) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_HttpsAutoCert{`,
		`HttpsAutoCert:` + strings.Replace(fmt.Sprintf("%v", this.HttpsAutoCert), "ProxyTypeHttpsAutoCerts", "ProxyTypeHttpsAutoCerts", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_AutoHostRewrite) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_AutoHostRewrite{`,
		`AutoHostRewrite:` + strings.Replace(fmt.Sprintf("%v", this.AutoHostRewrite), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_HostRewrite) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_HostRewrite{`,
		`HostRewrite:` + fmt.Sprintf("%v", this.HostRewrite) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_DisableHostRewrite) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_DisableHostRewrite{`,
		`DisableHostRewrite:` + strings.Replace(fmt.Sprintf("%v", this.DisableHostRewrite), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType{`,
		`Domains:` + fmt.Sprintf("%v", this.Domains) + `,`,
		`LoadbalancerType:` + fmt.Sprintf("%v", this.LoadbalancerType) + `,`,
		`AdvertiseChoice:` + fmt.Sprintf("%v", this.AdvertiseChoice) + `,`,
		`DefaultRoutePools:` + strings.Replace(fmt.Sprintf("%v", this.DefaultRoutePools), "OriginPoolWithWeight", "ves_io_schema_views.OriginPoolWithWeight", 1) + `,`,
		`Routes:` + strings.Replace(fmt.Sprintf("%v", this.Routes), "RouteType", "RouteType", 1) + `,`,
		`CorsPolicy:` + strings.Replace(fmt.Sprintf("%v", this.CorsPolicy), "CorsPolicy", "ves_io_schema4.CorsPolicy", 1) + `,`,
		`WafChoice:` + fmt.Sprintf("%v", this.WafChoice) + `,`,
		`AddLocation:` + fmt.Sprintf("%v", this.AddLocation) + `,`,
		`ChallengeType:` + fmt.Sprintf("%v", this.ChallengeType) + `,`,
		`MoreOption:` + strings.Replace(fmt.Sprintf("%v", this.MoreOption), "AdvancedOptionsType", "AdvancedOptionsType", 1) + `,`,
		`UserIdentification:` + strings.Replace(fmt.Sprintf("%v", this.UserIdentification), "ObjectRefType", "ves_io_schema_views.ObjectRefType", 1) + `,`,
		`RateLimitChoice:` + fmt.Sprintf("%v", this.RateLimitChoice) + `,`,
		`MaliciousUserMitigation:` + strings.Replace(fmt.Sprintf("%v", this.MaliciousUserMitigation), "ObjectRefType", "ves_io_schema_views.ObjectRefType", 1) + `,`,
		`WafExclusionRules:` + strings.Replace(fmt.Sprintf("%v", this.WafExclusionRules), "SimpleWafExclusionRule", "ves_io_schema_policy.SimpleWafExclusionRule", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_Http) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_Http{`,
		`Http:` + strings.Replace(fmt.Sprintf("%v", this.Http), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_Https) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_Https{`,
		`Https:` + strings.Replace(fmt.Sprintf("%v", this.Https), "ProxyTypeHttps", "ProxyTypeHttps", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_AdvertiseOnPublic) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_AdvertiseOnPublic{`,
		`AdvertiseOnPublic:` + strings.Replace(fmt.Sprintf("%v", this.AdvertiseOnPublic), "AdvertisePublic", "ves_io_schema_views.AdvertisePublic", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_AdvertiseCustom) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_AdvertiseCustom{`,
		`AdvertiseCustom:` + strings.Replace(fmt.Sprintf("%v", this.AdvertiseCustom), "AdvertiseCustom", "ves_io_schema_views.AdvertiseCustom", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_Waf) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_Waf{`,
		`Waf:` + strings.Replace(fmt.Sprintf("%v", this.Waf), "ObjectRefType", "ves_io_schema_views.ObjectRefType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_WafRule) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_WafRule{`,
		`WafRule:` + strings.Replace(fmt.Sprintf("%v", this.WafRule), "ObjectRefType", "ves_io_schema_views.ObjectRefType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_DisableWaf) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_DisableWaf{`,
		`DisableWaf:` + strings.Replace(fmt.Sprintf("%v", this.DisableWaf), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_DoNotAdvertise) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_DoNotAdvertise{`,
		`DoNotAdvertise:` + strings.Replace(fmt.Sprintf("%v", this.DoNotAdvertise), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_AdvertiseOnPublicDefaultVip) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_AdvertiseOnPublicDefaultVip{`,
		`AdvertiseOnPublicDefaultVip:` + strings.Replace(fmt.Sprintf("%v", this.AdvertiseOnPublicDefaultVip), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_JsChallenge) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_JsChallenge{`,
		`JsChallenge:` + strings.Replace(fmt.Sprintf("%v", this.JsChallenge), "JavascriptChallengeType", "ves_io_schema_virtual_host.JavascriptChallengeType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_DisableRateLimit) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_DisableRateLimit{`,
		`DisableRateLimit:` + strings.Replace(fmt.Sprintf("%v", this.DisableRateLimit), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_RateLimit) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_RateLimit{`,
		`RateLimit:` + strings.Replace(fmt.Sprintf("%v", this.RateLimit), "RateLimitConfigType", "RateLimitConfigType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_CaptchaChallenge) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_CaptchaChallenge{`,
		`CaptchaChallenge:` + strings.Replace(fmt.Sprintf("%v", this.CaptchaChallenge), "CaptchaChallengeType", "ves_io_schema_virtual_host.CaptchaChallengeType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_NoChallenge) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_NoChallenge{`,
		`NoChallenge:` + strings.Replace(fmt.Sprintf("%v", this.NoChallenge), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_HttpsAutoCert) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_HttpsAutoCert{`,
		`HttpsAutoCert:` + strings.Replace(fmt.Sprintf("%v", this.HttpsAutoCert), "ProxyTypeHttpsAutoCerts", "ProxyTypeHttpsAutoCerts", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType{`,
		`Domains:` + fmt.Sprintf("%v", this.Domains) + `,`,
		`LoadbalancerType:` + fmt.Sprintf("%v", this.LoadbalancerType) + `,`,
		`AdvertiseChoice:` + fmt.Sprintf("%v", this.AdvertiseChoice) + `,`,
		`DefaultRoutePools:` + strings.Replace(fmt.Sprintf("%v", this.DefaultRoutePools), "OriginPoolWithWeight", "ves_io_schema_views.OriginPoolWithWeight", 1) + `,`,
		`Routes:` + strings.Replace(fmt.Sprintf("%v", this.Routes), "RouteType", "RouteType", 1) + `,`,
		`CorsPolicy:` + strings.Replace(fmt.Sprintf("%v", this.CorsPolicy), "CorsPolicy", "ves_io_schema4.CorsPolicy", 1) + `,`,
		`WafChoice:` + fmt.Sprintf("%v", this.WafChoice) + `,`,
		`AddLocation:` + fmt.Sprintf("%v", this.AddLocation) + `,`,
		`ChallengeType:` + fmt.Sprintf("%v", this.ChallengeType) + `,`,
		`MoreOption:` + strings.Replace(fmt.Sprintf("%v", this.MoreOption), "AdvancedOptionsType", "AdvancedOptionsType", 1) + `,`,
		`UserIdentification:` + strings.Replace(fmt.Sprintf("%v", this.UserIdentification), "ObjectRefType", "ves_io_schema_views.ObjectRefType", 1) + `,`,
		`RateLimitChoice:` + fmt.Sprintf("%v", this.RateLimitChoice) + `,`,
		`MaliciousUserMitigation:` + strings.Replace(fmt.Sprintf("%v", this.MaliciousUserMitigation), "ObjectRefType", "ves_io_schema_views.ObjectRefType", 1) + `,`,
		`WafExclusionRules:` + strings.Replace(fmt.Sprintf("%v", this.WafExclusionRules), "SimpleWafExclusionRule", "ves_io_schema_policy.SimpleWafExclusionRule", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_Http) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_Http{`,
		`Http:` + strings.Replace(fmt.Sprintf("%v", this.Http), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_Https) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_Https{`,
		`Https:` + strings.Replace(fmt.Sprintf("%v", this.Https), "ProxyTypeHttps", "ProxyTypeHttps", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_AdvertiseOnPublic) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_AdvertiseOnPublic{`,
		`AdvertiseOnPublic:` + strings.Replace(fmt.Sprintf("%v", this.AdvertiseOnPublic), "AdvertisePublic", "ves_io_schema_views.AdvertisePublic", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_AdvertiseCustom) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_AdvertiseCustom{`,
		`AdvertiseCustom:` + strings.Replace(fmt.Sprintf("%v", this.AdvertiseCustom), "AdvertiseCustom", "ves_io_schema_views.AdvertiseCustom", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_Waf) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_Waf{`,
		`Waf:` + strings.Replace(fmt.Sprintf("%v", this.Waf), "ObjectRefType", "ves_io_schema_views.ObjectRefType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_WafRule) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_WafRule{`,
		`WafRule:` + strings.Replace(fmt.Sprintf("%v", this.WafRule), "ObjectRefType", "ves_io_schema_views.ObjectRefType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_DisableWaf) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_DisableWaf{`,
		`DisableWaf:` + strings.Replace(fmt.Sprintf("%v", this.DisableWaf), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_DoNotAdvertise) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_DoNotAdvertise{`,
		`DoNotAdvertise:` + strings.Replace(fmt.Sprintf("%v", this.DoNotAdvertise), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_AdvertiseOnPublicDefaultVip) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_AdvertiseOnPublicDefaultVip{`,
		`AdvertiseOnPublicDefaultVip:` + strings.Replace(fmt.Sprintf("%v", this.AdvertiseOnPublicDefaultVip), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_JsChallenge) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_JsChallenge{`,
		`JsChallenge:` + strings.Replace(fmt.Sprintf("%v", this.JsChallenge), "JavascriptChallengeType", "ves_io_schema_virtual_host.JavascriptChallengeType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_DisableRateLimit) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_DisableRateLimit{`,
		`DisableRateLimit:` + strings.Replace(fmt.Sprintf("%v", this.DisableRateLimit), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_RateLimit) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_RateLimit{`,
		`RateLimit:` + strings.Replace(fmt.Sprintf("%v", this.RateLimit), "RateLimitConfigType", "RateLimitConfigType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_CaptchaChallenge) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_CaptchaChallenge{`,
		`CaptchaChallenge:` + strings.Replace(fmt.Sprintf("%v", this.CaptchaChallenge), "CaptchaChallengeType", "ves_io_schema_virtual_host.CaptchaChallengeType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_NoChallenge) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_NoChallenge{`,
		`NoChallenge:` + strings.Replace(fmt.Sprintf("%v", this.NoChallenge), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_HttpsAutoCert) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_HttpsAutoCert{`,
		`HttpsAutoCert:` + strings.Replace(fmt.Sprintf("%v", this.HttpsAutoCert), "ProxyTypeHttpsAutoCerts", "ProxyTypeHttpsAutoCerts", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType{`,
		`Domains:` + fmt.Sprintf("%v", this.Domains) + `,`,
		`LoadbalancerType:` + fmt.Sprintf("%v", this.LoadbalancerType) + `,`,
		`AdvertiseChoice:` + fmt.Sprintf("%v", this.AdvertiseChoice) + `,`,
		`DefaultRoutePools:` + strings.Replace(fmt.Sprintf("%v", this.DefaultRoutePools), "OriginPoolWithWeight", "ves_io_schema_views.OriginPoolWithWeight", 1) + `,`,
		`Routes:` + strings.Replace(fmt.Sprintf("%v", this.Routes), "RouteType", "RouteType", 1) + `,`,
		`CorsPolicy:` + strings.Replace(fmt.Sprintf("%v", this.CorsPolicy), "CorsPolicy", "ves_io_schema4.CorsPolicy", 1) + `,`,
		`WafChoice:` + fmt.Sprintf("%v", this.WafChoice) + `,`,
		`AddLocation:` + fmt.Sprintf("%v", this.AddLocation) + `,`,
		`ChallengeType:` + fmt.Sprintf("%v", this.ChallengeType) + `,`,
		`MoreOption:` + strings.Replace(fmt.Sprintf("%v", this.MoreOption), "AdvancedOptionsType", "AdvancedOptionsType", 1) + `,`,
		`UserIdentification:` + strings.Replace(fmt.Sprintf("%v", this.UserIdentification), "ObjectRefType", "ves_io_schema_views.ObjectRefType", 1) + `,`,
		`RateLimitChoice:` + fmt.Sprintf("%v", this.RateLimitChoice) + `,`,
		`MaliciousUserMitigation:` + strings.Replace(fmt.Sprintf("%v", this.MaliciousUserMitigation), "ObjectRefType", "ves_io_schema_views.ObjectRefType", 1) + `,`,
		`WafExclusionRules:` + strings.Replace(fmt.Sprintf("%v", this.WafExclusionRules), "SimpleWafExclusionRule", "ves_io_schema_policy.SimpleWafExclusionRule", 1) + `,`,
		`HostName:` + fmt.Sprintf("%v", this.HostName) + `,`,
		`DnsInfo:` + strings.Replace(fmt.Sprintf("%v", this.DnsInfo), "DnsInfo", "ves_io_schema_virtual_host_dns_info.DnsInfo", 1) + `,`,
		`State:` + fmt.Sprintf("%v", this.State) + `,`,
		`AutoCertState:` + fmt.Sprintf("%v", this.AutoCertState) + `,`,
		`AutoCertInfo:` + strings.Replace(fmt.Sprintf("%v", this.AutoCertInfo), "AutoCertInfoType", "ves_io_schema_virtual_host.AutoCertInfoType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_Http) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_Http{`,
		`Http:` + strings.Replace(fmt.Sprintf("%v", this.Http), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_Https) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_Https{`,
		`Https:` + strings.Replace(fmt.Sprintf("%v", this.Https), "ProxyTypeHttps", "ProxyTypeHttps", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_AdvertiseOnPublic) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_AdvertiseOnPublic{`,
		`AdvertiseOnPublic:` + strings.Replace(fmt.Sprintf("%v", this.AdvertiseOnPublic), "AdvertisePublic", "ves_io_schema_views.AdvertisePublic", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_AdvertiseCustom) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_AdvertiseCustom{`,
		`AdvertiseCustom:` + strings.Replace(fmt.Sprintf("%v", this.AdvertiseCustom), "AdvertiseCustom", "ves_io_schema_views.AdvertiseCustom", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_Waf) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_Waf{`,
		`Waf:` + strings.Replace(fmt.Sprintf("%v", this.Waf), "ObjectRefType", "ves_io_schema_views.ObjectRefType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_WafRule) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_WafRule{`,
		`WafRule:` + strings.Replace(fmt.Sprintf("%v", this.WafRule), "ObjectRefType", "ves_io_schema_views.ObjectRefType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_DisableWaf) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_DisableWaf{`,
		`DisableWaf:` + strings.Replace(fmt.Sprintf("%v", this.DisableWaf), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_DoNotAdvertise) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_DoNotAdvertise{`,
		`DoNotAdvertise:` + strings.Replace(fmt.Sprintf("%v", this.DoNotAdvertise), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_AdvertiseOnPublicDefaultVip) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_AdvertiseOnPublicDefaultVip{`,
		`AdvertiseOnPublicDefaultVip:` + strings.Replace(fmt.Sprintf("%v", this.AdvertiseOnPublicDefaultVip), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_JsChallenge) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_JsChallenge{`,
		`JsChallenge:` + strings.Replace(fmt.Sprintf("%v", this.JsChallenge), "JavascriptChallengeType", "ves_io_schema_virtual_host.JavascriptChallengeType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_DisableRateLimit) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_DisableRateLimit{`,
		`DisableRateLimit:` + strings.Replace(fmt.Sprintf("%v", this.DisableRateLimit), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_RateLimit) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_RateLimit{`,
		`RateLimit:` + strings.Replace(fmt.Sprintf("%v", this.RateLimit), "RateLimitConfigType", "RateLimitConfigType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_CaptchaChallenge) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_CaptchaChallenge{`,
		`CaptchaChallenge:` + strings.Replace(fmt.Sprintf("%v", this.CaptchaChallenge), "CaptchaChallengeType", "ves_io_schema_virtual_host.CaptchaChallengeType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_NoChallenge) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_NoChallenge{`,
		`NoChallenge:` + strings.Replace(fmt.Sprintf("%v", this.NoChallenge), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_HttpsAutoCert) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_HttpsAutoCert{`,
		`HttpsAutoCert:` + strings.Replace(fmt.Sprintf("%v", this.HttpsAutoCert), "ProxyTypeHttpsAutoCerts", "ProxyTypeHttpsAutoCerts", 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringTypes(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *DownstreamTlsValidationContext) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DownstreamTlsValidationContext: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DownstreamTlsValidationContext: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TrustedCaUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TrustedCaUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DownstreamTlsParamsType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DownstreamTlsParamsType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DownstreamTlsParamsType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TlsConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TlsConfig == nil {
				m.TlsConfig = &ves_io_schema_views.TlsConfig{}
			}
			if err := m.TlsConfig.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TlsCertificates", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TlsCertificates = append(m.TlsCertificates, &ves_io_schema4.TlsCertificateType{})
			if err := m.TlsCertificates[len(m.TlsCertificates)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoMtls", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.MtlsChoice = &DownstreamTlsParamsType_NoMtls{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UseMtls", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &DownstreamTlsValidationContext{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.MtlsChoice = &DownstreamTlsParamsType_UseMtls{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProxyTypeHttps) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProxyTypeHttps: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProxyTypeHttps: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HttpRedirect", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.HttpRedirect = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddHsts", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AddHsts = bool(v != 0)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TlsParameters", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TlsParameters == nil {
				m.TlsParameters = &DownstreamTlsParamsType{}
			}
			if err := m.TlsParameters.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProxyTypeHttpsAutoCerts) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProxyTypeHttpsAutoCerts: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProxyTypeHttpsAutoCerts: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HttpRedirect", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.HttpRedirect = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddHsts", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AddHsts = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RouteTypeSimpleWithDefaultOriginPool) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RouteTypeSimpleWithDefaultOriginPool: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RouteTypeSimpleWithDefaultOriginPool: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HttpMethod", wireType)
			}
			m.HttpMethod = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HttpMethod |= (ves_io_schema4.HttpMethod(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Path", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Path == nil {
				m.Path = &ves_io_schema4.PathMatcherType{}
			}
			if err := m.Path.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AutoHostRewrite", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.HostRewriteParams = &RouteTypeSimpleWithDefaultOriginPool_AutoHostRewrite{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HostRewrite", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HostRewriteParams = &RouteTypeSimpleWithDefaultOriginPool_HostRewrite{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisableHostRewrite", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.HostRewriteParams = &RouteTypeSimpleWithDefaultOriginPool_DisableHostRewrite{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RouteTypeSimple) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RouteTypeSimple: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RouteTypeSimple: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Path", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Path == nil {
				m.Path = &ves_io_schema4.PathMatcherType{}
			}
			if err := m.Path.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HttpMethod", wireType)
			}
			m.HttpMethod = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HttpMethod |= (ves_io_schema4.HttpMethod(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OriginPools", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OriginPools = append(m.OriginPools, &ves_io_schema_views.OriginPoolWithWeight{})
			if err := m.OriginPools[len(m.OriginPools)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AutoHostRewrite", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.HostRewriteParams = &RouteTypeSimple_AutoHostRewrite{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HostRewrite", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HostRewriteParams = &RouteTypeSimple_HostRewrite{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisableHostRewrite", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.HostRewriteParams = &RouteTypeSimple_DisableHostRewrite{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RouteTypeRedirect) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RouteTypeRedirect: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RouteTypeRedirect: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Path", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Path == nil {
				m.Path = &ves_io_schema4.PathMatcherType{}
			}
			if err := m.Path.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HttpMethod", wireType)
			}
			m.HttpMethod = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HttpMethod |= (ves_io_schema4.HttpMethod(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RouteRedirect", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RouteRedirect == nil {
				m.RouteRedirect = &ves_io_schema_route.RouteRedirect{}
			}
			if err := m.RouteRedirect.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RouteTypeDirectResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RouteTypeDirectResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RouteTypeDirectResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Path", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Path == nil {
				m.Path = &ves_io_schema4.PathMatcherType{}
			}
			if err := m.Path.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HttpMethod", wireType)
			}
			m.HttpMethod = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HttpMethod |= (ves_io_schema4.HttpMethod(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RouteDirectResponse", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RouteDirectResponse == nil {
				m.RouteDirectResponse = &ves_io_schema_route.RouteDirectResponse{}
			}
			if err := m.RouteDirectResponse.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RouteTypeCustomRoute) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RouteTypeCustomRoute: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RouteTypeCustomRoute: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RouteRef", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RouteRef == nil {
				m.RouteRef = &ves_io_schema_views.ObjectRefType{}
			}
			if err := m.RouteRef.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RouteType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RouteType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RouteType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SimpleRoute", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &RouteTypeSimple{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Choice = &RouteType_SimpleRoute{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RedirectRoute", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &RouteTypeRedirect{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Choice = &RouteType_RedirectRoute{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DirectResponseRoute", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &RouteTypeDirectResponse{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Choice = &RouteType_DirectResponseRoute{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CustomRouteObject", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &RouteTypeCustomRoute{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Choice = &RouteType_CustomRouteObject{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AdvancedOptionsType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AdvancedOptionsType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AdvancedOptionsType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestHeadersToAdd", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RequestHeadersToAdd = append(m.RequestHeadersToAdd, &ves_io_schema4.HeaderManipulationOptionType{})
			if err := m.RequestHeadersToAdd[len(m.RequestHeadersToAdd)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestHeadersToRemove", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RequestHeadersToRemove = append(m.RequestHeadersToRemove, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResponseHeadersToAdd", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ResponseHeadersToAdd = append(m.ResponseHeadersToAdd, &ves_io_schema4.HeaderManipulationOptionType{})
			if err := m.ResponseHeadersToAdd[len(m.ResponseHeadersToAdd)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResponseHeadersToRemove", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ResponseHeadersToRemove = append(m.ResponseHeadersToRemove, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxRequestHeaderSize", wireType)
			}
			m.MaxRequestHeaderSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxRequestHeaderSize |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BufferPolicy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BufferPolicy == nil {
				m.BufferPolicy = &ves_io_schema4.BufferConfigType{}
			}
			if err := m.BufferPolicy.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompressionParams", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CompressionParams == nil {
				m.CompressionParams = &ves_io_schema_virtual_host.CompressionType{}
			}
			if err := m.CompressionParams.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CustomErrors", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CustomErrors == nil {
				m.CustomErrors = make(map[uint32]string)
			}
			var mapkey uint32
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTypes
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= (uint32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTypes
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthTypes
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipTypes(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthTypes
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.CustomErrors[mapkey] = mapvalue
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JavascriptInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.JavascriptInfo == nil {
				m.JavascriptInfo = &ves_io_schema_virtual_host.JavaScriptConfigType{}
			}
			if err := m.JavascriptInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Jwt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Jwt = append(m.Jwt, &ves_io_schema_views.ObjectRefType{})
			if err := m.Jwt[len(m.Jwt)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IdleTimeout", wireType)
			}
			m.IdleTimeout = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IdleTimeout |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CustomIpAllowedList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CustomIpAllowedList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CustomIpAllowedList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 22:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RateLimiterAllowedPrefixes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RateLimiterAllowedPrefixes = append(m.RateLimiterAllowedPrefixes, &ves_io_schema_views.ObjectRefType{})
			if err := m.RateLimiterAllowedPrefixes[len(m.RateLimiterAllowedPrefixes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RateLimitConfigType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RateLimitConfigType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RateLimitConfigType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RateLimiter", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RateLimiter == nil {
				m.RateLimiter = &ves_io_schema_rate_limiter.RateLimitValue{}
			}
			if err := m.RateLimiter.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoIpAllowedList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.IpAllowedListChoice = &RateLimitConfigType_NoIpAllowedList{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IpAllowedList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema_views.PrefixStringListType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.IpAllowedListChoice = &RateLimitConfigType_IpAllowedList{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CustomIpAllowedList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &CustomIpAllowedList{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.IpAllowedListChoice = &RateLimitConfigType_CustomIpAllowedList{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GlobalSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GlobalSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GlobalSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Domains", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Domains = append(m.Domains, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Http", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.LoadbalancerType = &GlobalSpecType_Http{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Https", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ProxyTypeHttps{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.LoadbalancerType = &GlobalSpecType_Https{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdvertiseOnPublic", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema_views.AdvertisePublic{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.AdvertiseChoice = &GlobalSpecType_AdvertiseOnPublic{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdvertiseCustom", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema_views.AdvertiseCustom{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.AdvertiseChoice = &GlobalSpecType_AdvertiseCustom{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultRoutePools", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DefaultRoutePools = append(m.DefaultRoutePools, &ves_io_schema_views.OriginPoolWithWeight{})
			if err := m.DefaultRoutePools[len(m.DefaultRoutePools)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Routes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Routes = append(m.Routes, &RouteType{})
			if err := m.Routes[len(m.Routes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CorsPolicy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CorsPolicy == nil {
				m.CorsPolicy = &ves_io_schema4.CorsPolicy{}
			}
			if err := m.CorsPolicy.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Waf", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema_views.ObjectRefType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.WafChoice = &GlobalSpecType_Waf{v}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WafRule", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema_views.ObjectRefType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.WafChoice = &GlobalSpecType_WafRule{v}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisableWaf", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.WafChoice = &GlobalSpecType_DisableWaf{v}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DoNotAdvertise", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.AdvertiseChoice = &GlobalSpecType_DoNotAdvertise{v}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdvertiseOnPublicDefaultVip", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.AdvertiseChoice = &GlobalSpecType_AdvertiseOnPublicDefaultVip{v}
			iNdEx = postIndex
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddLocation", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AddLocation = bool(v != 0)
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JsChallenge", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema_virtual_host.JavascriptChallengeType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ChallengeType = &GlobalSpecType_JsChallenge{v}
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MoreOption", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MoreOption == nil {
				m.MoreOption = &AdvancedOptionsType{}
			}
			if err := m.MoreOption.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserIdentification", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UserIdentification == nil {
				m.UserIdentification = &ves_io_schema_views.ObjectRefType{}
			}
			if err := m.UserIdentification.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 22:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisableRateLimit", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.RateLimitChoice = &GlobalSpecType_DisableRateLimit{v}
			iNdEx = postIndex
		case 23:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RateLimit", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &RateLimitConfigType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.RateLimitChoice = &GlobalSpecType_RateLimit{v}
			iNdEx = postIndex
		case 24:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CaptchaChallenge", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema_virtual_host.CaptchaChallengeType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ChallengeType = &GlobalSpecType_CaptchaChallenge{v}
			iNdEx = postIndex
		case 26:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoChallenge", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ChallengeType = &GlobalSpecType_NoChallenge{v}
			iNdEx = postIndex
		case 27:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HttpsAutoCert", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ProxyTypeHttpsAutoCerts{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.LoadbalancerType = &GlobalSpecType_HttpsAutoCert{v}
			iNdEx = postIndex
		case 28:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AutoHostRewrite", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.HostRewriteParams = &GlobalSpecType_AutoHostRewrite{v}
			iNdEx = postIndex
		case 29:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HostRewrite", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HostRewriteParams = &GlobalSpecType_HostRewrite{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 30:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisableHostRewrite", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.HostRewriteParams = &GlobalSpecType_DisableHostRewrite{v}
			iNdEx = postIndex
		case 32:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaliciousUserMitigation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MaliciousUserMitigation == nil {
				m.MaliciousUserMitigation = &ves_io_schema_views.ObjectRefType{}
			}
			if err := m.MaliciousUserMitigation.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 33:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WafExclusionRules", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WafExclusionRules = append(m.WafExclusionRules, &ves_io_schema_policy.SimpleWafExclusionRule{})
			if err := m.WafExclusionRules[len(m.WafExclusionRules)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 1000:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ViewInternal", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ViewInternal == nil {
				m.ViewInternal = &ves_io_schema_views.ObjectRefType{}
			}
			if err := m.ViewInternal.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 1001:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HostName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HostName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 1002:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DnsInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DnsInfo = append(m.DnsInfo, &ves_io_schema_virtual_host_dns_info.DnsInfo{})
			if err := m.DnsInfo[len(m.DnsInfo)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 1003:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= (ves_io_schema_virtual_host.VirtualHostState(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 1004:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AutoCertState", wireType)
			}
			m.AutoCertState = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AutoCertState |= (ves_io_schema_virtual_host.CertificationState(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 1010:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AutoCertInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AutoCertInfo == nil {
				m.AutoCertInfo = &ves_io_schema_virtual_host.AutoCertInfoType{}
			}
			if err := m.AutoCertInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Domains", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Domains = append(m.Domains, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Http", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.LoadbalancerType = &CreateSpecType_Http{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Https", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ProxyTypeHttps{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.LoadbalancerType = &CreateSpecType_Https{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdvertiseOnPublic", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema_views.AdvertisePublic{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.AdvertiseChoice = &CreateSpecType_AdvertiseOnPublic{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdvertiseCustom", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema_views.AdvertiseCustom{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.AdvertiseChoice = &CreateSpecType_AdvertiseCustom{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultRoutePools", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DefaultRoutePools = append(m.DefaultRoutePools, &ves_io_schema_views.OriginPoolWithWeight{})
			if err := m.DefaultRoutePools[len(m.DefaultRoutePools)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Routes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Routes = append(m.Routes, &RouteType{})
			if err := m.Routes[len(m.Routes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CorsPolicy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CorsPolicy == nil {
				m.CorsPolicy = &ves_io_schema4.CorsPolicy{}
			}
			if err := m.CorsPolicy.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Waf", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema_views.ObjectRefType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.WafChoice = &CreateSpecType_Waf{v}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WafRule", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema_views.ObjectRefType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.WafChoice = &CreateSpecType_WafRule{v}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisableWaf", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.WafChoice = &CreateSpecType_DisableWaf{v}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DoNotAdvertise", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.AdvertiseChoice = &CreateSpecType_DoNotAdvertise{v}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdvertiseOnPublicDefaultVip", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.AdvertiseChoice = &CreateSpecType_AdvertiseOnPublicDefaultVip{v}
			iNdEx = postIndex
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddLocation", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AddLocation = bool(v != 0)
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JsChallenge", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema_virtual_host.JavascriptChallengeType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ChallengeType = &CreateSpecType_JsChallenge{v}
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MoreOption", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MoreOption == nil {
				m.MoreOption = &AdvancedOptionsType{}
			}
			if err := m.MoreOption.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserIdentification", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UserIdentification == nil {
				m.UserIdentification = &ves_io_schema_views.ObjectRefType{}
			}
			if err := m.UserIdentification.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 22:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisableRateLimit", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.RateLimitChoice = &CreateSpecType_DisableRateLimit{v}
			iNdEx = postIndex
		case 23:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RateLimit", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &RateLimitConfigType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.RateLimitChoice = &CreateSpecType_RateLimit{v}
			iNdEx = postIndex
		case 24:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CaptchaChallenge", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema_virtual_host.CaptchaChallengeType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ChallengeType = &CreateSpecType_CaptchaChallenge{v}
			iNdEx = postIndex
		case 26:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoChallenge", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ChallengeType = &CreateSpecType_NoChallenge{v}
			iNdEx = postIndex
		case 27:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HttpsAutoCert", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ProxyTypeHttpsAutoCerts{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.LoadbalancerType = &CreateSpecType_HttpsAutoCert{v}
			iNdEx = postIndex
		case 32:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaliciousUserMitigation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MaliciousUserMitigation == nil {
				m.MaliciousUserMitigation = &ves_io_schema_views.ObjectRefType{}
			}
			if err := m.MaliciousUserMitigation.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 33:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WafExclusionRules", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WafExclusionRules = append(m.WafExclusionRules, &ves_io_schema_policy.SimpleWafExclusionRule{})
			if err := m.WafExclusionRules[len(m.WafExclusionRules)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplaceSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplaceSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplaceSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Domains", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Domains = append(m.Domains, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Http", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.LoadbalancerType = &ReplaceSpecType_Http{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Https", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ProxyTypeHttps{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.LoadbalancerType = &ReplaceSpecType_Https{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdvertiseOnPublic", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema_views.AdvertisePublic{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.AdvertiseChoice = &ReplaceSpecType_AdvertiseOnPublic{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdvertiseCustom", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema_views.AdvertiseCustom{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.AdvertiseChoice = &ReplaceSpecType_AdvertiseCustom{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultRoutePools", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DefaultRoutePools = append(m.DefaultRoutePools, &ves_io_schema_views.OriginPoolWithWeight{})
			if err := m.DefaultRoutePools[len(m.DefaultRoutePools)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Routes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Routes = append(m.Routes, &RouteType{})
			if err := m.Routes[len(m.Routes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CorsPolicy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CorsPolicy == nil {
				m.CorsPolicy = &ves_io_schema4.CorsPolicy{}
			}
			if err := m.CorsPolicy.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Waf", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema_views.ObjectRefType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.WafChoice = &ReplaceSpecType_Waf{v}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WafRule", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema_views.ObjectRefType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.WafChoice = &ReplaceSpecType_WafRule{v}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisableWaf", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.WafChoice = &ReplaceSpecType_DisableWaf{v}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DoNotAdvertise", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.AdvertiseChoice = &ReplaceSpecType_DoNotAdvertise{v}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdvertiseOnPublicDefaultVip", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.AdvertiseChoice = &ReplaceSpecType_AdvertiseOnPublicDefaultVip{v}
			iNdEx = postIndex
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddLocation", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AddLocation = bool(v != 0)
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JsChallenge", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema_virtual_host.JavascriptChallengeType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ChallengeType = &ReplaceSpecType_JsChallenge{v}
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MoreOption", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MoreOption == nil {
				m.MoreOption = &AdvancedOptionsType{}
			}
			if err := m.MoreOption.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserIdentification", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UserIdentification == nil {
				m.UserIdentification = &ves_io_schema_views.ObjectRefType{}
			}
			if err := m.UserIdentification.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 22:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisableRateLimit", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.RateLimitChoice = &ReplaceSpecType_DisableRateLimit{v}
			iNdEx = postIndex
		case 23:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RateLimit", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &RateLimitConfigType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.RateLimitChoice = &ReplaceSpecType_RateLimit{v}
			iNdEx = postIndex
		case 24:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CaptchaChallenge", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema_virtual_host.CaptchaChallengeType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ChallengeType = &ReplaceSpecType_CaptchaChallenge{v}
			iNdEx = postIndex
		case 26:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoChallenge", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ChallengeType = &ReplaceSpecType_NoChallenge{v}
			iNdEx = postIndex
		case 27:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HttpsAutoCert", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ProxyTypeHttpsAutoCerts{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.LoadbalancerType = &ReplaceSpecType_HttpsAutoCert{v}
			iNdEx = postIndex
		case 32:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaliciousUserMitigation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MaliciousUserMitigation == nil {
				m.MaliciousUserMitigation = &ves_io_schema_views.ObjectRefType{}
			}
			if err := m.MaliciousUserMitigation.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 33:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WafExclusionRules", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WafExclusionRules = append(m.WafExclusionRules, &ves_io_schema_policy.SimpleWafExclusionRule{})
			if err := m.WafExclusionRules[len(m.WafExclusionRules)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Domains", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Domains = append(m.Domains, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Http", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.LoadbalancerType = &GetSpecType_Http{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Https", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ProxyTypeHttps{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.LoadbalancerType = &GetSpecType_Https{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdvertiseOnPublic", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema_views.AdvertisePublic{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.AdvertiseChoice = &GetSpecType_AdvertiseOnPublic{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdvertiseCustom", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema_views.AdvertiseCustom{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.AdvertiseChoice = &GetSpecType_AdvertiseCustom{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultRoutePools", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DefaultRoutePools = append(m.DefaultRoutePools, &ves_io_schema_views.OriginPoolWithWeight{})
			if err := m.DefaultRoutePools[len(m.DefaultRoutePools)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Routes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Routes = append(m.Routes, &RouteType{})
			if err := m.Routes[len(m.Routes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CorsPolicy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CorsPolicy == nil {
				m.CorsPolicy = &ves_io_schema4.CorsPolicy{}
			}
			if err := m.CorsPolicy.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Waf", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema_views.ObjectRefType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.WafChoice = &GetSpecType_Waf{v}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WafRule", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema_views.ObjectRefType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.WafChoice = &GetSpecType_WafRule{v}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisableWaf", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.WafChoice = &GetSpecType_DisableWaf{v}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DoNotAdvertise", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.AdvertiseChoice = &GetSpecType_DoNotAdvertise{v}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdvertiseOnPublicDefaultVip", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.AdvertiseChoice = &GetSpecType_AdvertiseOnPublicDefaultVip{v}
			iNdEx = postIndex
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddLocation", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AddLocation = bool(v != 0)
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JsChallenge", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema_virtual_host.JavascriptChallengeType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ChallengeType = &GetSpecType_JsChallenge{v}
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MoreOption", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MoreOption == nil {
				m.MoreOption = &AdvancedOptionsType{}
			}
			if err := m.MoreOption.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserIdentification", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UserIdentification == nil {
				m.UserIdentification = &ves_io_schema_views.ObjectRefType{}
			}
			if err := m.UserIdentification.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 22:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisableRateLimit", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.RateLimitChoice = &GetSpecType_DisableRateLimit{v}
			iNdEx = postIndex
		case 23:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RateLimit", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &RateLimitConfigType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.RateLimitChoice = &GetSpecType_RateLimit{v}
			iNdEx = postIndex
		case 24:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CaptchaChallenge", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema_virtual_host.CaptchaChallengeType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ChallengeType = &GetSpecType_CaptchaChallenge{v}
			iNdEx = postIndex
		case 26:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoChallenge", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ChallengeType = &GetSpecType_NoChallenge{v}
			iNdEx = postIndex
		case 27:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HttpsAutoCert", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ProxyTypeHttpsAutoCerts{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.LoadbalancerType = &GetSpecType_HttpsAutoCert{v}
			iNdEx = postIndex
		case 32:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaliciousUserMitigation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MaliciousUserMitigation == nil {
				m.MaliciousUserMitigation = &ves_io_schema_views.ObjectRefType{}
			}
			if err := m.MaliciousUserMitigation.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 33:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WafExclusionRules", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WafExclusionRules = append(m.WafExclusionRules, &ves_io_schema_policy.SimpleWafExclusionRule{})
			if err := m.WafExclusionRules[len(m.WafExclusionRules)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 1001:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HostName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HostName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 1002:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DnsInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DnsInfo = append(m.DnsInfo, &ves_io_schema_virtual_host_dns_info.DnsInfo{})
			if err := m.DnsInfo[len(m.DnsInfo)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 1003:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= (ves_io_schema_virtual_host.VirtualHostState(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 1004:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AutoCertState", wireType)
			}
			m.AutoCertState = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AutoCertState |= (ves_io_schema_virtual_host.CertificationState(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 1010:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AutoCertInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AutoCertInfo == nil {
				m.AutoCertInfo = &ves_io_schema_virtual_host.AutoCertInfoType{}
			}
			if err := m.AutoCertInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTypes(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthTypes
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipTypes(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthTypes = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTypes   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("ves.io/schema/views/http_loadbalancer/types.proto", fileDescriptorTypes)
}
func init() {
	golang_proto.RegisterFile("ves.io/schema/views/http_loadbalancer/types.proto", fileDescriptorTypes)
}

var fileDescriptorTypes = []byte{
	// 3768 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x5b, 0x5d, 0x6c, 0x1b, 0x57,
	0x76, 0xd6, 0x25, 0x87, 0x12, 0x75, 0xf9, 0x23, 0xf2, 0x4a, 0x96, 0x28, 0xd9, 0xa1, 0x26, 0x6c,
	0x92, 0x75, 0x9c, 0x31, 0x25, 0x52, 0x92, 0x7f, 0xb4, 0xc8, 0x8f, 0x29, 0xbb, 0x2b, 0x0b, 0x76,
	0xa2, 0x1d, 0x79, 0x9d, 0xee, 0x7a, 0xd1, 0xe9, 0x68, 0xe6, 0x52, 0x1c, 0x67, 0x38, 0x97, 0x3b,
	0x73, 0xa9, 0x9f, 0x20, 0x06, 0x8c, 0xf4, 0xa5, 0xf0, 0x4b, 0x03, 0xf7, 0x2d, 0x68, 0xdf, 0x5b,
	0xf7, 0xa5, 0x2f, 0x45, 0x83, 0xd2, 0x05, 0x54, 0x03, 0x5b, 0x04, 0xed, 0x8b, 0x8b, 0x3e, 0x34,
	0x4f, 0xc5, 0x86, 0xfb, 0x92, 0x4d, 0xfb, 0x10, 0xa4, 0x28, 0x10, 0x04, 0x28, 0x50, 0xdc, 0x7b,
	0x87, 0xc3, 0x1f, 0x51, 0xb2, 0x14, 0x0b, 0x9b, 0x16, 0xd5, 0x93, 0x38, 0x73, 0xcf, 0xdf, 0x3d,
	0xe7, 0xdc, 0x7b, 0xbe, 0x73, 0x06, 0x82, 0x85, 0x4d, 0xec, 0xe5, 0x2d, 0x32, 0xe3, 0x19, 0x15,
	0x5c, 0xd5, 0x67, 0x36, 0x2d, 0xbc, 0xe5, 0xcd, 0x54, 0x28, 0xad, 0x69, 0x36, 0xd1, 0xcd, 0x75,
	0xdd, 0xd6, 0x1d, 0x03, 0xbb, 0x33, 0x74, 0xa7, 0x86, 0xbd, 0x7c, 0xcd, 0x25, 0x94, 0xa0, 0x97,
	0x05, 0x4b, 0x5e, 0xb0, 0xe4, 0x39, 0x4b, 0x7e, 0x0f, 0xcb, 0xd4, 0xf9, 0x0d, 0x8b, 0x56, 0xea,
	0xeb, 0x79, 0x83, 0x54, 0x67, 0x36, 0xc8, 0x06, 0x99, 0xe1, 0xdc, 0xeb, 0xf5, 0x32, 0x7f, 0xe2,
	0x0f, 0xfc, 0x97, 0x90, 0x3a, 0x75, 0xba, 0xdb, 0x10, 0x52, 0xa3, 0x16, 0x71, 0x7c, 0x95, 0x53,
	0x72, 0xf7, 0x62, 0x8d, 0xd8, 0x96, 0xb1, 0xd3, 0x69, 0xd4, 0xd4, 0x2b, 0xdd, 0x14, 0xae, 0x4e,
	0xb1, 0x66, 0x5b, 0x55, 0x8b, 0x76, 0x1b, 0x3f, 0x35, 0xdd, 0x43, 0x47, 0xea, 0x14, 0x77, 0x11,
	0x4c, 0x76, 0x13, 0x74, 0x2e, 0x9d, 0xe9, 0xf1, 0x95, 0x6e, 0x5b, 0xa6, 0x4e, 0x71, 0x7f, 0x1b,
	0x99, 0x5b, 0xb4, 0xee, 0x5d, 0x4c, 0xf7, 0xf3, 0xf5, 0x01, 0x9b, 0xd8, 0xb4, 0x5c, 0x5a, 0xd7,
	0x6d, 0xad, 0x42, 0x3c, 0xda, 0x45, 0x37, 0xbb, 0x3f, 0x9d, 0x66, 0x3a, 0x9e, 0x66, 0x39, 0x65,
	0x32, 0x43, 0xd6, 0xef, 0x62, 0x83, 0x0a, 0x8e, 0x9c, 0x01, 0xb3, 0x57, 0xc9, 0x96, 0xe3, 0x51,
	0x17, 0xeb, 0xd5, 0x5b, 0xb6, 0x77, 0x5b, 0xd8, 0x6e, 0x11, 0x67, 0x89, 0x38, 0x14, 0x6f, 0x53,
	0x74, 0x05, 0x26, 0xa9, 0x5b, 0xf7, 0x28, 0x36, 0x35, 0x43, 0xd7, 0xea, 0xae, 0x9d, 0x09, 0xc9,
	0xe0, 0xec, 0x70, 0xe9, 0xf4, 0x37, 0x0d, 0x20, 0xfd, 0xed, 0x6f, 0x76, 0xc3, 0x51, 0x77, 0x50,
	0x06, 0x67, 0xef, 0xdf, 0x8f, 0xb2, 0x87, 0x88, 0x1b, 0xfe, 0x08, 0x00, 0x35, 0xee, 0xb3, 0x2c,
	0xe9, 0x3f, 0x71, 0xed, 0xdc, 0x5f, 0x85, 0xe1, 0x44, 0x97, 0x96, 0x55, 0xdd, 0xd5, 0xab, 0xde,
	0xad, 0x9d, 0x1a, 0x46, 0x4b, 0x10, 0x52, 0xdb, 0xd3, 0x0c, 0xe2, 0x94, 0xad, 0x8d, 0x0c, 0x90,
	0xc1, 0xd9, 0x58, 0x31, 0x9b, 0xef, 0x97, 0x49, 0xb7, 0x6c, 0x6f, 0x89, 0x53, 0x95, 0xa4, 0xaf,
	0x1a, 0x00, 0xa8, 0xc3, 0xb4, 0xf5, 0x02, 0x95, 0x61, 0x8a, 0x0b, 0xc1, 0x2e, 0xb5, 0xca, 0x96,
	0xa1, 0x53, 0xec, 0x65, 0x42, 0x72, 0xf8, 0x6c, 0xac, 0xf8, 0x62, 0x8f, 0x28, 0x26, 0xa4, 0x4d,
	0xc5, 0x2c, 0x28, 0x65, 0x9e, 0x36, 0x00, 0xe0, 0xb6, 0x3f, 0x04, 0xa1, 0x54, 0xaa, 0xf5, 0x2b,
	0x0a, 0xd4, 0x11, 0xda, 0x45, 0xed, 0xa1, 0x05, 0x38, 0xe4, 0x10, 0xad, 0x4a, 0x6d, 0x2f, 0x13,
	0xe6, 0x96, 0x8e, 0xf5, 0x88, 0xbf, 0x56, 0xad, 0xd1, 0x9d, 0x92, 0xb4, 0xdb, 0x00, 0x60, 0x79,
	0x40, 0x1d, 0x74, 0xc8, 0x4d, 0x6a, 0x7b, 0xa8, 0x02, 0xa3, 0x75, 0x0f, 0x0b, 0x3e, 0x89, 0xf3,
	0x5d, 0xcb, 0x1f, 0xea, 0xac, 0xe4, 0x0f, 0x8e, 0x4d, 0xa0, 0x68, 0xa8, 0xee, 0x61, 0xa6, 0x69,
	0xf1, 0x85, 0x27, 0x0d, 0x30, 0x09, 0x27, 0x60, 0xf2, 0xd6, 0x8d, 0x35, 0x99, 0x7b, 0x19, 0x53,
	0xec, 0x7a, 0x28, 0x52, 0x50, 0x8a, 0xca, 0x42, 0x29, 0x07, 0x63, 0x55, 0xee, 0xa8, 0x0a, 0xb1,
	0x0c, 0x8c, 0x46, 0x77, 0x1b, 0x20, 0xfc, 0x69, 0x03, 0x80, 0xa7, 0x0d, 0x10, 0x69, 0x36, 0x40,
	0x78, 0x4e, 0x99, 0x5f, 0x91, 0xa2, 0x91, 0xd4, 0x60, 0xee, 0x5f, 0x00, 0x4c, 0xae, 0xba, 0x64,
	0x7b, 0x87, 0xb9, 0x68, 0x99, 0xd2, 0x9a, 0x87, 0x5e, 0x85, 0x09, 0x6e, 0xa0, 0x8b, 0x4d, 0xcb,
	0xc5, 0x06, 0xe5, 0xc1, 0x8a, 0x96, 0xa4, 0x6f, 0x1a, 0x60, 0x40, 0x8d, 0xb3, 0x25, 0xd5, 0x5f,
	0x41, 0xd3, 0x30, 0xaa, 0x9b, 0xa6, 0x56, 0xf1, 0xa8, 0xc7, 0xb3, 0xa5, 0x45, 0x35, 0xa4, 0x9b,
	0xe6, 0xb2, 0x47, 0x3d, 0xf4, 0x1e, 0x4c, 0x32, 0x3b, 0x6a, 0x81, 0x85, 0xbe, 0x3f, 0xdf, 0xf8,
	0x2e, 0x7e, 0x69, 0x67, 0x53, 0x49, 0x62, 0xb1, 0x54, 0x13, 0xd4, 0x7f, 0xc9, 0x45, 0x2f, 0x46,
	0xbf, 0x7e, 0x83, 0xef, 0x7f, 0x2e, 0x57, 0x85, 0x13, 0xdd, 0x9b, 0xba, 0x52, 0xa7, 0x84, 0x45,
	0xf8, 0x58, 0x77, 0xb7, 0x38, 0xf8, 0xf5, 0x1b, 0xe1, 0x82, 0x52, 0xcc, 0xfd, 0x69, 0x18, 0xbe,
	0xa4, 0xb2, 0x8b, 0x84, 0xe9, 0x5b, 0xb3, 0xaa, 0x35, 0x1b, 0xbf, 0x6b, 0xd1, 0xca, 0x55, 0x5c,
	0xd6, 0xeb, 0x36, 0x7d, 0xc7, 0xb5, 0x36, 0x2c, 0x67, 0x95, 0x10, 0x1b, 0x2d, 0xc2, 0x18, 0x57,
	0x5e, 0xc5, 0xb4, 0x42, 0x4c, 0xae, 0x3a, 0x59, 0x9c, 0xec, 0xf1, 0x05, 0x33, 0xf8, 0x26, 0x27,
	0x50, 0x61, 0x25, 0xf8, 0x8d, 0x8a, 0x50, 0xaa, 0xe9, 0xb4, 0xc2, 0x2d, 0xd9, 0x7b, 0x74, 0x56,
	0x75, 0x5a, 0xb9, 0xa9, 0x53, 0xa3, 0x82, 0x5d, 0x66, 0x84, 0xca, 0x69, 0xd1, 0x8f, 0x61, 0x5a,
	0xaf, 0x53, 0x22, 0x2e, 0x06, 0x17, 0x6f, 0xb9, 0x16, 0xc5, 0x7e, 0x66, 0xf6, 0xcf, 0xe8, 0x04,
	0xdb, 0x20, 0x3b, 0x19, 0x92, 0x1b, 0xaa, 0xb0, 0x8c, 0x1b, 0x61, 0xfc, 0xcb, 0xc4, 0xa3, 0xaa,
	0xe0, 0x46, 0xaf, 0xc2, 0x78, 0x97, 0xb4, 0x08, 0xbf, 0x24, 0xb8, 0x63, 0x96, 0x07, 0xd4, 0x58,
	0xa5, 0x83, 0xf4, 0x6d, 0x38, 0x66, 0x5a, 0x9e, 0xbe, 0x6e, 0xe3, 0x6e, 0x03, 0x06, 0x0f, 0x3a,
	0x52, 0xbe, 0x20, 0xe4, 0x73, 0x76, 0xa8, 0x6e, 0xc7, 0xb7, 0xf4, 0x0a, 0x4c, 0x77, 0x2c, 0x88,
	0xbc, 0x40, 0xe9, 0xdd, 0x06, 0x60, 0x79, 0x11, 0x6e, 0x36, 0x40, 0x64, 0x5e, 0x59, 0x50, 0x2e,
	0xac, 0x48, 0xd1, 0x70, 0x4a, 0xca, 0xfd, 0x57, 0x18, 0x8e, 0xf4, 0x84, 0x07, 0x5d, 0xf2, 0xbd,
	0x09, 0x0e, 0xe3, 0x4d, 0xff, 0x22, 0x12, 0x3e, 0xed, 0x89, 0x61, 0xe8, 0x28, 0x31, 0x2c, 0xc3,
	0x38, 0xe1, 0xd9, 0xa0, 0xd5, 0x08, 0xe1, 0x97, 0x0b, 0xbb, 0xbb, 0x5e, 0xed, 0x7b, 0x18, 0xda,
	0x69, 0xc3, 0x72, 0xe9, 0x5d, 0x6c, 0x6d, 0x54, 0xe8, 0x7e, 0x77, 0x58, 0x06, 0xa8, 0x31, 0x12,
	0xd0, 0x7b, 0xfd, 0xe3, 0x1e, 0x39, 0xd6, 0xb8, 0x0f, 0x1e, 0x3d, 0xee, 0x43, 0xcf, 0x11, 0xf7,
	0xa2, 0x52, 0x38, 0x28, 0xee, 0x91, 0xa7, 0x0d, 0x20, 0xb1, 0xb8, 0x2f, 0x28, 0x17, 0x94, 0x8b,
	0x2b, 0x52, 0x54, 0x4a, 0x45, 0x72, 0xff, 0x06, 0x60, 0x3a, 0x88, 0x7b, 0x70, 0xaa, 0xbf, 0x9f,
	0xc8, 0x5f, 0x87, 0x49, 0x0e, 0x35, 0xda, 0xf7, 0x8e, 0xb8, 0x08, 0x73, 0x3d, 0xec, 0x9c, 0x28,
	0xcf, 0xad, 0x6e, 0x59, 0xac, 0x26, 0xdc, 0xce, 0xc7, 0xb6, 0x3b, 0x72, 0xff, 0x0d, 0xe0, 0x44,
	0xb0, 0xc1, 0xab, 0x82, 0x18, 0x7b, 0x35, 0xe2, 0x78, 0xdf, 0x57, 0x82, 0xaf, 0xc3, 0x53, 0x62,
	0x9b, 0xc2, 0x56, 0xcd, 0xf5, 0xcd, 0xf1, 0x77, 0x7b, 0x76, 0xff, 0xdd, 0x76, 0x9b, 0xef, 0x5f,
	0xf0, 0xa3, 0xee, 0xde, 0xa5, 0x8e, 0xfd, 0x63, 0x38, 0x16, 0x6c, 0x7f, 0xa9, 0xee, 0x51, 0x52,
	0xe5, 0x8f, 0xe8, 0x26, 0x1c, 0x6e, 0x39, 0xbb, 0xec, 0x3b, 0x20, 0xd7, 0xff, 0x8c, 0x71, 0x88,
	0xa4, 0xe2, 0x32, 0x77, 0x42, 0xfc, 0xd1, 0xbd, 0x08, 0xe7, 0xbb, 0xff, 0x18, 0x00, 0x35, 0xea,
	0x7b, 0xbd, 0x9c, 0xfb, 0x2a, 0x0c, 0x87, 0x03, 0x3d, 0xe8, 0x0e, 0x8c, 0x7b, 0xfc, 0x0e, 0xd1,
	0x38, 0x81, 0x2f, 0xff, 0xc2, 0x21, 0x0b, 0x5a, 0xcf, 0x3d, 0xc4, 0x8e, 0x8e, 0x90, 0x26, 0x2c,
	0xd7, 0x61, 0xb2, 0x95, 0x20, 0xbe, 0x78, 0x71, 0xdd, 0x5f, 0x3a, 0xaa, 0xf8, 0x56, 0xb6, 0x2c,
	0x0f, 0xa8, 0x89, 0x96, 0x44, 0xa1, 0x82, 0xc2, 0x53, 0x3d, 0xc1, 0xf1, 0x35, 0x1d, 0xad, 0x32,
	0xef, 0x93, 0x77, 0xcb, 0x03, 0xea, 0xa8, 0xd9, 0xf5, 0x46, 0x68, 0xf5, 0xe0, 0xa8, 0xc1, 0x23,
	0x24, 0x94, 0x69, 0x02, 0x9c, 0xfa, 0xb5, 0xe8, 0x87, 0x47, 0xd5, 0xd9, 0x11, 0xec, 0x00, 0x1b,
	0xa5, 0x8d, 0xf6, 0x4b, 0x11, 0xd7, 0xc5, 0xf4, 0x93, 0x06, 0x48, 0xc0, 0x18, 0x1c, 0xe4, 0x2f,
	0x3d, 0x04, 0x16, 0x4a, 0xd3, 0x70, 0xd0, 0x07, 0x45, 0xa7, 0x76, 0xdb, 0x80, 0x68, 0x98, 0x97,
	0x15, 0x65, 0x9e, 0x97, 0x0c, 0x06, 0x8b, 0xfe, 0x39, 0x0e, 0x47, 0xaf, 0x98, 0x9b, 0x4c, 0xad,
	0xf9, 0x8e, 0xc0, 0xf0, 0x3c, 0xf8, 0xef, 0xc3, 0x71, 0x17, 0xff, 0xa2, 0x8e, 0x3d, 0xaa, 0x55,
	0xb0, 0x6e, 0x62, 0xd7, 0xd3, 0x28, 0xd1, 0x74, 0x93, 0xd5, 0x72, 0x76, 0x95, 0xbf, 0xd6, 0x7b,
	0x4c, 0x38, 0xd1, 0x4d, 0xdd, 0xb1, 0x6a, 0x75, 0x9b, 0x43, 0x3a, 0x21, 0xad, 0x0f, 0x20, 0x95,
	0x3b, 0x2e, 0xf3, 0x51, 0x5f, 0x89, 0x60, 0xf7, 0x6e, 0x91, 0x2b, 0xa6, 0x89, 0x2a, 0x70, 0xb2,
	0x8f, 0x6e, 0x17, 0x57, 0xc9, 0x26, 0xe6, 0x28, 0x78, 0xb8, 0x74, 0x9e, 0x49, 0xfc, 0xc6, 0x97,
	0x1a, 0x7f, 0x08, 0x86, 0x73, 0x43, 0x2e, 0xbb, 0xf6, 0xef, 0x87, 0xfa, 0xaa, 0x19, 0xef, 0x55,
	0xa3, 0x72, 0x61, 0xe8, 0x03, 0x38, 0x11, 0xe4, 0x46, 0xcf, 0x36, 0xc3, 0xc7, 0xb9, 0xcd, 0xb1,
	0x96, 0x96, 0xae, 0x7d, 0xde, 0x85, 0x53, 0xfd, 0xb4, 0xfb, 0x1b, 0x95, 0xbe, 0xcb, 0x46, 0x27,
	0xf6, 0x28, 0xf2, 0x77, 0x7a, 0x15, 0x4e, 0x54, 0xf5, 0x6d, 0xad, 0xdb, 0xaf, 0x9a, 0x67, 0xbd,
	0x2f, 0xca, 0x65, 0xa2, 0xa3, 0x30, 0x9e, 0x0b, 0x65, 0xfe, 0x40, 0x1d, 0xab, 0xea, 0xdb, 0x6a,
	0xa7, 0xd3, 0xd6, 0xac, 0xf7, 0x99, 0x94, 0xc4, 0x7a, 0xbd, 0x5c, 0xc6, 0xae, 0x26, 0x1a, 0x53,
	0x1f, 0xe1, 0x4c, 0xf7, 0x78, 0xa9, 0xc4, 0x69, 0x44, 0x2b, 0xc3, 0xcf, 0x68, 0x5c, 0x70, 0xad,
	0x72, 0x26, 0xf4, 0x33, 0x88, 0x0c, 0x52, 0xad, 0xb9, 0xd8, 0xf3, 0x2c, 0xe2, 0x08, 0xcc, 0xec,
	0xf9, 0x45, 0xf3, 0xb5, 0x3d, 0x27, 0xa4, 0xdd, 0xf1, 0xe5, 0x97, 0xda, 0x5c, 0x5c, 0x6c, 0xba,
	0x43, 0x8c, 0x5f, 0x23, 0xff, 0x42, 0x82, 0x09, 0xff, 0xfc, 0x61, 0xd7, 0x25, 0xae, 0x97, 0x89,
	0xf2, 0x40, 0xde, 0x38, 0xe4, 0xc9, 0xeb, 0x73, 0x16, 0xf2, 0xe2, 0x10, 0x5e, 0xe3, 0xe2, 0xae,
	0x39, 0xd4, 0xdd, 0x29, 0xfd, 0x75, 0xb8, 0x15, 0xea, 0xf8, 0xc7, 0x2c, 0x24, 0xe7, 0x22, 0x99,
	0x7f, 0x95, 0xce, 0x86, 0x79, 0x20, 0x3e, 0x6e, 0xe1, 0x95, 0xc4, 0xc7, 0x00, 0x9e, 0x8b, 0xba,
	0x83, 0x99, 0xfb, 0x6f, 0x7d, 0x04, 0x40, 0xf3, 0x57, 0xbf, 0x0c, 0xff, 0x12, 0x3c, 0x78, 0x0c,
	0x76, 0x01, 0xfa, 0x3b, 0xf0, 0x65, 0x03, 0x7c, 0x02, 0x96, 0x6f, 0xdd, 0x5a, 0x95, 0xb9, 0x58,
	0xd9, 0x20, 0x26, 0x96, 0x37, 0x75, 0xbb, 0x8e, 0x65, 0x76, 0x3a, 0x17, 0x64, 0xe2, 0xca, 0xeb,
	0x98, 0x6e, 0x61, 0xec, 0xc8, 0x73, 0xb3, 0xb3, 0xb2, 0xee, 0x98, 0xf2, 0xc2, 0xe5, 0xcb, 0x79,
	0xf9, 0xda, 0x46, 0x5e, 0xbe, 0xcd, 0xe9, 0xe6, 0xe5, 0xd7, 0xe5, 0xf9, 0xed, 0x6d, 0x46, 0xa9,
	0xdb, 0xb6, 0x3c, 0x3f, 0x3b, 0x7b, 0x7e, 0xfe, 0xf2, 0x65, 0x19, 0x07, 0xf2, 0x3c, 0x45, 0x5e,
	0x90, 0x5f, 0x97, 0x17, 0xda, 0x34, 0x0b, 0xb3, 0xb3, 0xe7, 0x17, 0xba, 0x69, 0xf2, 0xf2, 0x4f,
	0x49, 0x5d, 0x36, 0x74, 0x47, 0xd6, 0x6d, 0x8f, 0xc8, 0x5e, 0x0d, 0x1b, 0x56, 0x79, 0x47, 0xd6,
	0x1d, 0x19, 0x6f, 0xeb, 0x06, 0xed, 0x20, 0x95, 0x6d, 0xeb, 0x3d, 0x2c, 0xcf, 0xcf, 0xce, 0xe7,
	0xd9, 0x56, 0xc6, 0x1e, 0x3c, 0x06, 0x29, 0x94, 0x6c, 0x36, 0x00, 0x14, 0x3b, 0x58, 0x22, 0x26,
	0x66, 0x0b, 0xf0, 0xc1, 0x63, 0x30, 0x88, 0xa4, 0x4f, 0x1b, 0x60, 0x80, 0x3d, 0x0e, 0x3e, 0x78,
	0xcc, 0x3a, 0x4f, 0xf6, 0xf3, 0xca, 0x83, 0xc7, 0xe0, 0xf5, 0xa9, 0x1f, 0x7e, 0xd9, 0x00, 0x17,
	0xd7, 0xa8, 0x6b, 0x39, 0x1b, 0xb2, 0x8b, 0x59, 0xf4, 0xb0, 0x43, 0xd9, 0x83, 0xd0, 0xd4, 0xca,
	0x5f, 0x45, 0xae, 0x7b, 0x75, 0xdd, 0xb6, 0x77, 0x64, 0x5d, 0xae, 0xd0, 0xaa, 0xcd, 0x4d, 0x60,
	0x52, 0x5e, 0x78, 0xf0, 0x18, 0x4c, 0x4e, 0x4d, 0x34, 0x1b, 0x60, 0x54, 0x28, 0x6e, 0x5d, 0xbf,
	0x72, 0x89, 0x98, 0x3b, 0x81, 0x05, 0x53, 0xcc, 0x02, 0xa9, 0xe3, 0x91, 0x5d, 0x82, 0x6a, 0xdc,
	0xe8, 0x08, 0x25, 0xd2, 0xe0, 0xc8, 0x5d, 0x7d, 0x53, 0xf7, 0x0c, 0xd7, 0xaa, 0x51, 0x3e, 0x4a,
	0xc8, 0x0c, 0xf3, 0x24, 0x9c, 0x3d, 0x28, 0x09, 0x57, 0xf4, 0x4d, 0x7d, 0x8d, 0xb3, 0xb4, 0x13,
	0xbc, 0x24, 0x7d, 0xc1, 0xc4, 0x27, 0xdb, 0xe2, 0xae, 0x3b, 0x65, 0x82, 0xde, 0x82, 0xe1, 0xbb,
	0x5b, 0x34, 0x03, 0x79, 0x06, 0x1e, 0xa6, 0x30, 0xc3, 0x47, 0xf7, 0x18, 0x07, 0x17, 0xc6, 0x7e,
	0xa0, 0x1f, 0xc0, 0xb8, 0x65, 0xda, 0x58, 0xa3, 0x56, 0x15, 0x93, 0x3a, 0xcd, 0xc4, 0xf8, 0x59,
	0x15, 0xdd, 0x59, 0x8c, 0xad, 0xdc, 0x12, 0x0b, 0x53, 0x6f, 0xc2, 0xf4, 0x9e, 0x34, 0x45, 0x29,
	0x18, 0x7e, 0x0f, 0xef, 0xf0, 0xc2, 0x9d, 0x50, 0xd9, 0x4f, 0x34, 0x06, 0x23, 0x3c, 0xcb, 0xc4,
	0xc8, 0x43, 0x15, 0x0f, 0x8b, 0xa1, 0x4b, 0x60, 0xf1, 0xfa, 0x93, 0x06, 0xb8, 0x06, 0x4f, 0xc3,
	0xa4, 0x38, 0xee, 0xb2, 0x7f, 0x00, 0x50, 0x50, 0x31, 0x16, 0xe0, 0x2b, 0xf0, 0xd4, 0x4d, 0xcb,
	0x33, 0xb0, 0x6d, 0xeb, 0x0e, 0x26, 0x75, 0x2f, 0xa0, 0x49, 0x5c, 0x50, 0x2e, 0x2a, 0x97, 0x94,
	0xcb, 0x4a, 0x61, 0x56, 0x29, 0x14, 0x72, 0x7f, 0x09, 0xe0, 0xa8, 0x30, 0xe6, 0x7a, 0xed, 0x8a,
	0x6d, 0x93, 0x2d, 0x6c, 0xde, 0xb0, 0x3c, 0x8a, 0xfe, 0x04, 0xc0, 0x17, 0x3a, 0xc7, 0x55, 0x9a,
	0x2e, 0x16, 0xb5, 0x9a, 0x8b, 0xcb, 0xd6, 0x36, 0xf6, 0x32, 0xe3, 0x87, 0xf6, 0x94, 0xf2, 0xe8,
	0x5e, 0xc2, 0xaa, 0xf9, 0x9c, 0x9a, 0x87, 0x29, 0x73, 0x09, 0x83, 0x33, 0xc1, 0xb5, 0x28, 0x75,
	0xcc, 0x3d, 0xa6, 0x98, 0xda, 0x1b, 0x42, 0xab, 0x6f, 0xd1, 0xaa, 0xaf, 0x33, 0xf7, 0x4f, 0x61,
	0x38, 0xaa, 0xb6, 0x96, 0xdb, 0x21, 0x45, 0x37, 0x61, 0xbc, 0xd3, 0x58, 0x1f, 0xfe, 0x9c, 0xeb,
	0x05, 0x76, 0x1d, 0x24, 0xf9, 0x40, 0x0c, 0x3f, 0xa1, 0x6a, 0xac, 0x43, 0x2b, 0x5a, 0x82, 0xc8,
	0x21, 0x9a, 0x55, 0x0b, 0x36, 0x6d, 0x5b, 0x1e, 0x3d, 0x68, 0xe8, 0xc2, 0x7a, 0x13, 0x87, 0x74,
	0x7b, 0x70, 0x0d, 0x8e, 0xf4, 0x4a, 0x10, 0xc0, 0xa2, 0x7f, 0x67, 0x25, 0xf6, 0x28, 0x0e, 0x1b,
	0xe3, 0xe7, 0x53, 0x82, 0x01, 0x35, 0x61, 0x75, 0x09, 0xfd, 0x05, 0x1c, 0xf7, 0x6f, 0xcc, 0x5e,
	0xd9, 0xa2, 0x91, 0x5a, 0x3c, 0xe4, 0xd5, 0xd9, 0x27, 0xe4, 0x0c, 0x24, 0x19, 0x7b, 0x5f, 0x2f,
	0xbe, 0xfc, 0xa4, 0x01, 0x5e, 0x84, 0xd3, 0x30, 0xc3, 0x3c, 0x26, 0x73, 0x17, 0xc9, 0xc2, 0xf5,
	0x75, 0x97, 0x57, 0x55, 0x14, 0x2e, 0x28, 0xc5, 0xd2, 0x6b, 0x70, 0xbc, 0xc7, 0xa4, 0xd6, 0xa0,
	0x87, 0xb5, 0x42, 0xec, 0x0e, 0x0e, 0xb1, 0x56, 0x88, 0x67, 0xe7, 0x8a, 0x14, 0x0d, 0xa5, 0xc2,
	0xb9, 0xff, 0x9c, 0x84, 0xc9, 0x1f, 0xd9, 0x64, 0x5d, 0xb7, 0xd7, 0x6a, 0xd8, 0xe0, 0x81, 0x34,
	0xe1, 0x90, 0x49, 0xaa, 0xba, 0xe5, 0x78, 0x1c, 0xbb, 0x0c, 0x97, 0x56, 0x58, 0x66, 0xc0, 0x87,
	0x60, 0x28, 0x17, 0x71, 0xc3, 0x19, 0x51, 0x49, 0x87, 0x1f, 0x82, 0xc1, 0x9c, 0xe4, 0x86, 0x52,
	0xa0, 0x73, 0xf1, 0x8f, 0x42, 0x7d, 0xe7, 0x68, 0x1d, 0x05, 0xb7, 0x25, 0x1a, 0x9d, 0x83, 0x12,
	0x73, 0x89, 0x0f, 0x63, 0xf7, 0x8b, 0x28, 0xa7, 0x41, 0x37, 0x61, 0x84, 0xfd, 0x6d, 0xcd, 0x88,
	0x16, 0x0e, 0xe9, 0xe0, 0xee, 0x49, 0xcf, 0xf2, 0x80, 0x2a, 0xa4, 0xa0, 0x9f, 0xc3, 0x51, 0xdd,
	0xdc, 0xc4, 0x2e, 0xb5, 0x3c, 0xac, 0xb1, 0x82, 0x5a, 0x5f, 0xb7, 0x2d, 0xc3, 0xcf, 0x8c, 0x97,
	0xfa, 0x0a, 0xbf, 0xd2, 0xa2, 0x5f, 0xe5, 0xb4, 0x3e, 0xb6, 0x04, 0x6a, 0x3a, 0x10, 0xf4, 0x8e,
	0x23, 0x96, 0xd0, 0x1d, 0x98, 0x6a, 0x4b, 0x17, 0xc1, 0xf4, 0x13, 0xe3, 0x19, 0xa2, 0x45, 0x3e,
	0x94, 0xa2, 0x3e, 0xfc, 0x64, 0xe2, 0x47, 0xf4, 0xee, 0x45, 0xa4, 0xc1, 0x51, 0x53, 0x0c, 0x8f,
	0x7c, 0xb8, 0x2c, 0xc6, 0x05, 0x83, 0x47, 0x1d, 0x17, 0x88, 0x2e, 0x2a, 0xed, 0xcb, 0xe2, 0x28,
	0x58, 0x0c, 0x08, 0x3e, 0x80, 0x83, 0x5c, 0x30, 0xc3, 0x17, 0xe1, 0xbe, 0x57, 0xfb, 0x33, 0x10,
	0x78, 0xa9, 0xd8, 0xb2, 0x3f, 0xc8, 0x84, 0xb7, 0xda, 0xf1, 0xe7, 0x25, 0xee, 0xe1, 0x63, 0x10,
	0x4a, 0xb5, 0x7f, 0x46, 0x81, 0xea, 0xeb, 0x44, 0x57, 0x61, 0xcc, 0x20, 0xae, 0xd7, 0x42, 0x4b,
	0x51, 0xee, 0xb6, 0xde, 0x0e, 0x73, 0x89, 0xb8, 0x9e, 0x40, 0x46, 0x6d, 0x5f, 0xa9, 0xd0, 0x08,
	0xde, 0xa2, 0x12, 0x0c, 0x6f, 0xe9, 0x65, 0xbf, 0x36, 0x1d, 0xb6, 0x8c, 0x6c, 0xe9, 0x65, 0x1e,
	0xd3, 0xb0, 0xca, 0x7e, 0xa2, 0x55, 0x18, 0xdd, 0xd2, 0xcb, 0x9a, 0x5b, 0xb7, 0x71, 0x06, 0x1e,
	0x5a, 0xd0, 0xc8, 0xa3, 0x7b, 0x01, 0x9b, 0x2f, 0x6d, 0x68, 0x4b, 0x2f, 0xab, 0x75, 0x1b, 0xa3,
	0xd7, 0x61, 0xac, 0x35, 0xfc, 0x60, 0xd6, 0xc5, 0x9e, 0x39, 0x3e, 0x0e, 0xab, 0xd0, 0x67, 0x78,
	0x57, 0x2f, 0xa3, 0xdf, 0x85, 0x29, 0x93, 0x68, 0x0e, 0xa1, 0x5a, 0x90, 0x13, 0x99, 0xf8, 0x33,
	0x65, 0x00, 0x35, 0x69, 0x92, 0xb7, 0x09, 0x0d, 0x92, 0x0c, 0xfd, 0x1c, 0x4e, 0xf7, 0x49, 0x7e,
	0xad, 0x95, 0x55, 0x9b, 0x56, 0x2d, 0x93, 0x38, 0xe0, 0x48, 0x02, 0xf5, 0xf4, 0x9e, 0x94, 0xf7,
	0xc7, 0x99, 0xb7, 0xad, 0x1a, 0x7a, 0x0d, 0xc6, 0x75, 0xd3, 0xd4, 0x6c, 0x62, 0xf0, 0x6b, 0x29,
	0x93, 0xe6, 0xd3, 0x51, 0x1e, 0x26, 0x51, 0x83, 0x75, 0xd3, 0xbc, 0xe1, 0x2f, 0xa2, 0x75, 0x18,
	0xbf, 0xeb, 0x69, 0x46, 0x45, 0xb7, 0x6d, 0xec, 0x6c, 0xe0, 0x0c, 0xe2, 0x7a, 0xe7, 0x9e, 0x05,
	0x26, 0x04, 0x60, 0x58, 0x6a, 0xb1, 0x71, 0xc7, 0xb7, 0x0f, 0x8d, 0xa4, 0xc6, 0xee, 0x7a, 0xc1,
	0x22, 0xc2, 0x30, 0x56, 0x25, 0x2e, 0xf6, 0xbf, 0xb7, 0x64, 0x46, 0x8f, 0x74, 0x43, 0xf7, 0x01,
	0xb7, 0x9d, 0x29, 0xc7, 0x04, 0x8b, 0x25, 0xd6, 0xc5, 0xd6, 0x3d, 0xec, 0x6a, 0x96, 0xc9, 0xd0,
	0x19, 0xff, 0x5a, 0xc0, 0xd4, 0x8d, 0x1d, 0x3a, 0x73, 0xb2, 0x8f, 0xee, 0xf5, 0x93, 0x10, 0x38,
	0x0e, 0xb1, 0xc5, 0xeb, 0x5d, 0x6b, 0x68, 0x05, 0xb6, 0x86, 0x62, 0x5a, 0xbb, 0xac, 0x66, 0xc6,
	0x9f, 0x99, 0x14, 0x11, 0x35, 0xe5, 0xf3, 0x05, 0x05, 0x18, 0x61, 0x08, 0x3b, 0x64, 0x4c, 0x1c,
	0xc9, 0x4d, 0x7d, 0xd0, 0x40, 0x47, 0x40, 0x22, 0xea, 0x70, 0x50, 0xd7, 0x91, 0x05, 0xd3, 0x86,
	0x5e, 0xa3, 0x46, 0x45, 0xef, 0x88, 0x7b, 0xe6, 0xd9, 0x20, 0x72, 0x49, 0x30, 0xed, 0x1f, 0xf4,
	0x94, 0xd1, 0x43, 0x81, 0xde, 0x84, 0x71, 0x87, 0x74, 0x68, 0x99, 0x7a, 0xa6, 0x5f, 0x24, 0x35,
	0xe6, 0x90, 0xb6, 0x80, 0x0a, 0x1c, 0xe1, 0xf5, 0x42, 0xe3, 0x13, 0x53, 0x03, 0xbb, 0x34, 0x73,
	0xfa, 0x48, 0x93, 0x90, 0x7d, 0xbe, 0x34, 0x30, 0x44, 0x51, 0xe9, 0x7c, 0x83, 0x4a, 0xfd, 0xa6,
	0xb2, 0x67, 0x0e, 0x38, 0x85, 0xa1, 0xbd, 0x63, 0xd8, 0x62, 0xcf, 0x18, 0xf6, 0x05, 0x3e, 0x86,
	0xed, 0x19, 0xdf, 0x86, 0xba, 0xe7, 0xb1, 0xcb, 0xfb, 0xcc, 0x63, 0xb3, 0x07, 0xaa, 0xee, 0x33,
	0x89, 0x45, 0x7f, 0x08, 0xe0, 0x64, 0x55, 0xb7, 0x2d, 0xc3, 0x22, 0x75, 0x4f, 0xe3, 0x89, 0x5c,
	0xb5, 0xa8, 0xb5, 0x21, 0x8e, 0x81, 0x7c, 0xe8, 0x63, 0xf0, 0x3b, 0x8f, 0xee, 0xed, 0x2f, 0xe7,
	0xb3, 0x7b, 0x80, 0x23, 0xfd, 0x89, 0x80, 0xe2, 0x27, 0x1e, 0x76, 0x6f, 0x06, 0xeb, 0x68, 0x07,
	0x8e, 0xb2, 0xdb, 0x17, 0x6f, 0x1b, 0x76, 0x9d, 0xb7, 0xca, 0xec, 0x1e, 0xf6, 0x32, 0x2f, 0xf2,
	0x4a, 0xa6, 0xf4, 0xa8, 0x17, 0x35, 0x26, 0xef, 0x7f, 0x95, 0xd1, 0xcb, 0xd7, 0x5a, 0x5c, 0xec,
	0xb6, 0x2e, 0x9d, 0xf6, 0x95, 0xf5, 0x2b, 0x62, 0x6a, 0x7a, 0xab, 0x87, 0xdc, 0x43, 0xbf, 0x0f,
	0x13, 0xfc, 0xbb, 0xae, 0xe5, 0x50, 0xec, 0x3a, 0xba, 0x9d, 0xf9, 0x62, 0xe8, 0xd0, 0x9b, 0x1e,
	0x7b, 0x74, 0xaf, 0x9b, 0x99, 0xef, 0x32, 0xce, 0x5e, 0x5d, 0xf7, 0xdf, 0xa0, 0x33, 0x70, 0x98,
	0x87, 0xc8, 0xd1, 0xab, 0x38, 0xf3, 0x9b, 0x21, 0xde, 0x8d, 0x44, 0xd9, 0x9b, 0xb7, 0xf5, 0x2a,
	0x0b, 0x64, 0xb4, 0xf5, 0x75, 0x37, 0xf3, 0xe5, 0x50, 0xdf, 0xed, 0xf6, 0xfd, 0x14, 0x9c, 0xbf,
	0xea, 0x78, 0xac, 0xf3, 0x52, 0x87, 0x4c, 0xf1, 0x03, 0x2d, 0xc1, 0x88, 0x47, 0x75, 0x8a, 0x33,
	0xff, 0x3e, 0xc4, 0xc7, 0xbb, 0x07, 0x89, 0xc9, 0xdf, 0x16, 0x0f, 0x2c, 0x11, 0xd6, 0x18, 0x93,
	0x2a, 0x78, 0xd1, 0x1d, 0x38, 0x12, 0x9c, 0x19, 0x4d, 0x88, 0xfb, 0x0f, 0x21, 0x2e, 0x7f, 0xe0,
	0x21, 0x0f, 0xbe, 0xb4, 0x5a, 0xc4, 0xe1, 0x02, 0x4b, 0xcc, 0xdb, 0x09, 0xdd, 0x3f, 0x27, 0xfc,
	0x15, 0x5a, 0x83, 0xc9, 0xb6, 0x70, 0xbe, 0xe3, 0xaf, 0x85, 0xab, 0x0f, 0x34, 0xb5, 0x75, 0xd6,
	0xd8, 0x26, 0xc5, 0x88, 0x45, 0xef, 0x78, 0xb3, 0xf8, 0x0f, 0xe0, 0x49, 0x03, 0xfc, 0x3d, 0x80,
	0xa7, 0xe1, 0x68, 0x49, 0xf7, 0x2c, 0xa3, 0x07, 0x5d, 0x4b, 0x05, 0xa5, 0x30, 0x0f, 0xb3, 0x70,
	0xdc, 0x2f, 0x75, 0xb2, 0x00, 0x55, 0xf2, 0x1a, 0x76, 0x37, 0xb1, 0xeb, 0x21, 0xe9, 0x82, 0x32,
	0x57, 0x80, 0x93, 0xfe, 0xd4, 0xd9, 0xeb, 0xe1, 0x06, 0x17, 0xe1, 0x04, 0x4c, 0xdf, 0xbe, 0xbe,
	0xda, 0xf3, 0x3e, 0x54, 0x58, 0x80, 0xe7, 0xe1, 0xf8, 0x1a, 0x36, 0xea, 0xae, 0x45, 0x77, 0x7a,
	0x56, 0x47, 0x2f, 0x29, 0x85, 0x0b, 0xca, 0xdc, 0x9c, 0x52, 0x5c, 0x50, 0x8a, 0xb3, 0x4a, 0xb1,
	0xa0, 0xcc, 0x15, 0xe1, 0x34, 0x1c, 0x6f, 0x15, 0xa5, 0x1e, 0xf2, 0x48, 0xe1, 0xa2, 0x52, 0xb8,
	0x5c, 0xfa, 0x01, 0x4c, 0x77, 0xde, 0x41, 0x1a, 0x65, 0x88, 0x1e, 0xed, 0x36, 0x40, 0xe8, 0x69,
	0x03, 0x24, 0x9b, 0x0d, 0x30, 0x58, 0x54, 0x8a, 0x17, 0x95, 0xb9, 0xd2, 0xab, 0x5d, 0x30, 0xb5,
	0x3d, 0xf9, 0x4c, 0x3c, 0x6d, 0x80, 0x11, 0x3e, 0xf9, 0xe4, 0x6d, 0x82, 0x52, 0x28, 0x96, 0xce,
	0xf7, 0xfb, 0xb8, 0x92, 0xd9, 0x6d, 0x80, 0x33, 0xfe, 0xa7, 0xe3, 0xe9, 0x66, 0x03, 0x44, 0x8b,
	0x97, 0x94, 0xe2, 0x65, 0x65, 0x6e, 0xb6, 0xf4, 0x32, 0x84, 0xec, 0x14, 0xfa, 0x32, 0x27, 0x76,
	0x1b, 0x20, 0xe6, 0xd3, 0xa5, 0x9a, 0x0d, 0x30, 0x54, 0x28, 0xf0, 0xc6, 0xb7, 0x74, 0x0e, 0x26,
	0x83, 0xcb, 0x59, 0x98, 0xc9, 0x44, 0x4e, 0xf9, 0xa4, 0x93, 0x5c, 0xe4, 0x05, 0xa5, 0x70, 0x49,
	0x29, 0xce, 0x97, 0xce, 0xc1, 0x74, 0xbb, 0x3a, 0x75, 0x5a, 0x3b, 0xee, 0x93, 0x9f, 0x62, 0x7d,
	0x4d, 0xb1, 0xa8, 0x14, 0xe7, 0x56, 0xa4, 0x68, 0x32, 0x35, 0xb2, 0x22, 0x45, 0x47, 0x52, 0xa9,
	0x15, 0x29, 0x3a, 0x9d, 0x92, 0x57, 0xa4, 0x68, 0x2a, 0x95, 0x5e, 0x91, 0xa2, 0x93, 0xa9, 0xa9,
	0x15, 0x29, 0x7a, 0x2a, 0x35, 0x9e, 0xfb, 0x9b, 0x14, 0x4c, 0x2e, 0xb9, 0x58, 0xa7, 0x38, 0xe8,
	0x7a, 0x32, 0x3d, 0x5d, 0xcf, 0xff, 0x8a, 0x4e, 0xe5, 0xf6, 0x73, 0x77, 0x2a, 0xfd, 0x7b, 0x94,
	0x1f, 0x3f, 0x5f, 0x8f, 0xd2, 0xaf, 0x33, 0xf9, 0xe9, 0xf1, 0x74, 0x26, 0xfd, 0x7a, 0x92, 0xe5,
	0xe7, 0xed, 0x49, 0x82, 0xfe, 0x62, 0xf1, 0x68, 0xfd, 0x45, 0x57, 0x57, 0x71, 0xe1, 0x88, 0x5d,
	0xc5, 0x72, 0x48, 0x74, 0x12, 0x6f, 0x7e, 0x97, 0x4e, 0x62, 0x39, 0xd4, 0x6e, 0x1c, 0x2e, 0x1e,
	0xba, 0x71, 0x58, 0x0e, 0x75, 0xb5, 0x0c, 0x6f, 0x1d, 0xad, 0x65, 0xf8, 0xad, 0x37, 0x0b, 0x2f,
	0xf6, 0x6b, 0x16, 0xba, 0x5b, 0x84, 0xdf, 0x3b, 0xb6, 0x16, 0x61, 0x39, 0xdc, 0xdd, 0x18, 0xdc,
	0x39, 0xe6, 0xc6, 0xa0, 0xab, 0x1d, 0x58, 0x7b, 0xce, 0x76, 0xa0, 0x2f, 0xdc, 0xbf, 0x7a, 0x54,
	0xb8, 0xcf, 0x60, 0xf1, 0x1e, 0xa0, 0x7f, 0xe7, 0x78, 0x81, 0xfe, 0xb2, 0xd4, 0x09, 0xef, 0xb5,
	0x63, 0x84, 0xf7, 0xcb, 0xe1, 0x3e, 0xa0, 0xfe, 0xf2, 0xe1, 0x41, 0x3d, 0x0b, 0xf8, 0xf7, 0x03,
	0xe7, 0x3f, 0x38, 0x1e, 0x2c, 0x7c, 0xe6, 0x20, 0x2c, 0xbc, 0x3f, 0x08, 0xc6, 0xc7, 0x07, 0x82,
	0x87, 0x5a, 0x88, 0x7b, 0x2f, 0xe0, 0x5d, 0x4c, 0xff, 0xe3, 0x1b, 0x3d, 0x83, 0x43, 0x56, 0xa5,
	0xf7, 0x62, 0x8f, 0x53, 0x1f, 0x7e, 0x0b, 0xf6, 0xbe, 0x2e, 0x9d, 0xed, 0x03, 0x3f, 0xc6, 0x3e,
	0xfc, 0x16, 0xec, 0x79, 0x5b, 0x3a, 0xd3, 0x05, 0x27, 0x92, 0x1f, 0x7e, 0x0b, 0x3a, 0x9e, 0x4b,
	0x2f, 0xed, 0x41, 0x11, 0xe8, 0xc3, 0x6f, 0x41, 0xcf, 0xbb, 0x7d, 0xf0, 0x03, 0xb3, 0x6c, 0xcf,
	0xeb, 0x1e, 0xfc, 0xd0, 0x8b, 0x1c, 0x3e, 0x49, 0xc1, 0x11, 0x15, 0xd7, 0x6c, 0xdd, 0x38, 0x81,
	0x0e, 0x27, 0xd0, 0xe1, 0x04, 0x3a, 0x9c, 0x40, 0x87, 0x13, 0xe8, 0x70, 0x02, 0x1d, 0x4e, 0xa0,
	0xc3, 0x09, 0x74, 0x78, 0x26, 0x74, 0xf8, 0xe3, 0x51, 0x18, 0xfb, 0x11, 0xa6, 0x27, 0xb0, 0xe1,
	0x04, 0x36, 0x9c, 0xc0, 0x86, 0x13, 0xd8, 0x70, 0x02, 0x1b, 0x4e, 0x60, 0xc3, 0x09, 0x6c, 0x38,
	0x3c, 0x6c, 0xf8, 0xbf, 0xf5, 0x09, 0xec, 0xdd, 0xe3, 0xfa, 0x04, 0xf6, 0x5b, 0xf9, 0xfc, 0xf5,
	0xff, 0x13, 0x91, 0x95, 0xfe, 0x0c, 0x3c, 0xfd, 0x3c, 0x3b, 0xf0, 0xd9, 0xe7, 0xd9, 0x81, 0xaf,
	0x3e, 0xcf, 0x82, 0x6f, 0x3e, 0xcf, 0x82, 0xfb, 0xcd, 0x2c, 0xf8, 0xf3, 0x66, 0x16, 0x7c, 0xd2,
	0xcc, 0x82, 0xdd, 0x66, 0x16, 0x7c, 0xda, 0xcc, 0x82, 0xa7, 0xcd, 0x2c, 0xf8, 0xac, 0x99, 0x05,
	0xbf, 0x6a, 0x66, 0xc1, 0x17, 0xcd, 0xec, 0xc0, 0x57, 0xcd, 0x2c, 0xf8, 0xe8, 0xd7, 0xd9, 0x81,
	0xdd, 0x5f, 0x67, 0xc1, 0xcf, 0xee, 0x6c, 0x90, 0xda, 0x7b, 0x1b, 0xf9, 0x4d, 0x62, 0x53, 0xec,
	0xba, 0x7a, 0xbe, 0xee, 0xcd, 0xf0, 0x1f, 0x65, 0xe2, 0x56, 0xcf, 0xd7, 0x5c, 0xb2, 0x69, 0x99,
	0xd8, 0x3d, 0xdf, 0x5a, 0x9e, 0xa9, 0xad, 0x6f, 0x90, 0x19, 0xbc, 0x4d, 0xfd, 0xff, 0xcf, 0x3d,
	0xf8, 0x7f, 0xab, 0xd7, 0x07, 0xf9, 0xbf, 0xe8, 0xce, 0xfd, 0x4f, 0x00, 0x00, 0x00, 0xff, 0xff,
	0x86, 0x99, 0x8d, 0x80, 0x8b, 0x3d, 0x00, 0x00,
}
