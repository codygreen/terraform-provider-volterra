// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ves.io/schema/views/http_loadbalancer/types.proto

package http_loadbalancer

import proto "github.com/gogo/protobuf/proto"
import golang_proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"
import google_protobuf1 "github.com/gogo/protobuf/types"
import _ "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
import ves_io_schema_policy "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/policy"
import ves_io_schema_rate_limiter "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/rate_limiter"
import ves_io_schema_route "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/route"
import _ "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/service_policy"
import ves_io_schema_service_policy_rule "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/service_policy_rule"
import ves_io_schema4 "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
import _ "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
import _ "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
import ves_io_schema_views_rate_limiter_policy "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/views/rate_limiter_policy"
import ves_io_schema_views "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/views"
import ves_io_schema_virtual_host "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/virtual_host"
import ves_io_schema_virtual_host_dns_info "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/virtual_host_dns_info"

import strings "strings"
import reflect "reflect"
import sortkeys "github.com/gogo/protobuf/sortkeys"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// DownstreamTlsValidationContext
//
// x-displayName: "Clients TLS validation context"
// Validation context for downstream client TLS connections
type DownstreamTlsValidationContext struct {
	// trusted_ca_url
	//
	// x-displayName: "Trusted CA"
	// x-required
	// The URL for a trust store
	TrustedCaUrl string `protobuf:"bytes,2,opt,name=trusted_ca_url,json=trustedCaUrl,proto3" json:"trusted_ca_url,omitempty"`
}

func (m *DownstreamTlsValidationContext) Reset()      { *m = DownstreamTlsValidationContext{} }
func (*DownstreamTlsValidationContext) ProtoMessage() {}
func (*DownstreamTlsValidationContext) Descriptor() ([]byte, []int) {
	return fileDescriptorTypes, []int{0}
}

func (m *DownstreamTlsValidationContext) GetTrustedCaUrl() string {
	if m != nil {
		return m.TrustedCaUrl
	}
	return ""
}

// DownstreamTlsParamsType
//
// x-displayName: "HTTP Loadbalancer TLS Parameters"
// TLS parameters for HTTP loadbalancer.
type DownstreamTlsParamsType struct {
	// TLS Config
	//
	// x-displayName: "TLS Config"
	// Configuration for TLS parameters such as min/max TLS version and ciphers
	TlsConfig *ves_io_schema_views.TlsConfig `protobuf:"bytes,1,opt,name=tls_config,json=tlsConfig" json:"tls_config,omitempty"`
	// tls_certificates
	//
	// x-displayName: "TLS Certificates"
	// x-required
	// Set of TLS certificates
	TlsCertificates []*ves_io_schema4.TlsCertificateType `protobuf:"bytes,2,rep,name=tls_certificates,json=tlsCertificates" json:"tls_certificates,omitempty"`
	// mTLS choice
	//
	// x-displayName: "mTLS choice with clients"
	// x-required
	// mTLS choice between clients amd HTTP loadbalancer
	//
	// Types that are valid to be assigned to MtlsChoice:
	//	*DownstreamTlsParamsType_NoMtls
	//	*DownstreamTlsParamsType_UseMtls
	MtlsChoice isDownstreamTlsParamsType_MtlsChoice `protobuf_oneof:"mtls_choice"`
}

func (m *DownstreamTlsParamsType) Reset()                    { *m = DownstreamTlsParamsType{} }
func (*DownstreamTlsParamsType) ProtoMessage()               {}
func (*DownstreamTlsParamsType) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{1} }

type isDownstreamTlsParamsType_MtlsChoice interface {
	isDownstreamTlsParamsType_MtlsChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type DownstreamTlsParamsType_NoMtls struct {
	NoMtls *ves_io_schema4.Empty `protobuf:"bytes,3,opt,name=no_mtls,json=noMtls,oneof"`
}
type DownstreamTlsParamsType_UseMtls struct {
	UseMtls *DownstreamTlsValidationContext `protobuf:"bytes,4,opt,name=use_mtls,json=useMtls,oneof"`
}

func (*DownstreamTlsParamsType_NoMtls) isDownstreamTlsParamsType_MtlsChoice()  {}
func (*DownstreamTlsParamsType_UseMtls) isDownstreamTlsParamsType_MtlsChoice() {}

func (m *DownstreamTlsParamsType) GetMtlsChoice() isDownstreamTlsParamsType_MtlsChoice {
	if m != nil {
		return m.MtlsChoice
	}
	return nil
}

func (m *DownstreamTlsParamsType) GetTlsConfig() *ves_io_schema_views.TlsConfig {
	if m != nil {
		return m.TlsConfig
	}
	return nil
}

func (m *DownstreamTlsParamsType) GetTlsCertificates() []*ves_io_schema4.TlsCertificateType {
	if m != nil {
		return m.TlsCertificates
	}
	return nil
}

func (m *DownstreamTlsParamsType) GetNoMtls() *ves_io_schema4.Empty {
	if x, ok := m.GetMtlsChoice().(*DownstreamTlsParamsType_NoMtls); ok {
		return x.NoMtls
	}
	return nil
}

func (m *DownstreamTlsParamsType) GetUseMtls() *DownstreamTlsValidationContext {
	if x, ok := m.GetMtlsChoice().(*DownstreamTlsParamsType_UseMtls); ok {
		return x.UseMtls
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*DownstreamTlsParamsType) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _DownstreamTlsParamsType_OneofMarshaler, _DownstreamTlsParamsType_OneofUnmarshaler, _DownstreamTlsParamsType_OneofSizer, []interface{}{
		(*DownstreamTlsParamsType_NoMtls)(nil),
		(*DownstreamTlsParamsType_UseMtls)(nil),
	}
}

func _DownstreamTlsParamsType_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*DownstreamTlsParamsType)
	// mtls_choice
	switch x := m.MtlsChoice.(type) {
	case *DownstreamTlsParamsType_NoMtls:
		_ = b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.NoMtls); err != nil {
			return err
		}
	case *DownstreamTlsParamsType_UseMtls:
		_ = b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.UseMtls); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("DownstreamTlsParamsType.MtlsChoice has unexpected type %T", x)
	}
	return nil
}

func _DownstreamTlsParamsType_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*DownstreamTlsParamsType)
	switch tag {
	case 3: // mtls_choice.no_mtls
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.MtlsChoice = &DownstreamTlsParamsType_NoMtls{msg}
		return true, err
	case 4: // mtls_choice.use_mtls
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(DownstreamTlsValidationContext)
		err := b.DecodeMessage(msg)
		m.MtlsChoice = &DownstreamTlsParamsType_UseMtls{msg}
		return true, err
	default:
		return false, nil
	}
}

func _DownstreamTlsParamsType_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*DownstreamTlsParamsType)
	// mtls_choice
	switch x := m.MtlsChoice.(type) {
	case *DownstreamTlsParamsType_NoMtls:
		s := proto.Size(x.NoMtls)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *DownstreamTlsParamsType_UseMtls:
		s := proto.Size(x.UseMtls)
		n += proto.SizeVarint(4<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// BYOC HTTPS Choice
//
// x-displayName: "BYOC HTTPS Choice"
// Choice for selecting HTTP proxy with bring your own certificates
type ProxyTypeHttps struct {
	// HTTP Redirect
	//
	// x-displayName: "HTTP Redirect to HTTPS"
	// Redirect HTTP traffic to corresponding HTTPS
	HttpRedirect bool `protobuf:"varint,1,opt,name=http_redirect,json=httpRedirect,proto3" json:"http_redirect,omitempty"`
	// Add HSTS
	//
	// x-displayName: "Add HSTS Header"
	// Add HTTP Strict-Transport-Security response header
	AddHsts bool `protobuf:"varint,2,opt,name=add_hsts,json=addHsts,proto3" json:"add_hsts,omitempty"`
	// TLS parameters.
	//
	// x-displayName: "HTTP Loadbalancer TLS Parameters"
	// TLS parameters for downstream connections.
	TlsParameters *DownstreamTlsParamsType `protobuf:"bytes,3,opt,name=tls_parameters,json=tlsParameters" json:"tls_parameters,omitempty"`
	// Server Header configuration
	//
	// x-displayName: "Server Header value to be used in response"
	// Specify Server Header value to be used in responses
	//
	// Types that are valid to be assigned to ServerHeaderChoice:
	//	*ProxyTypeHttps_DefaultHeader
	//	*ProxyTypeHttps_ServerName
	//	*ProxyTypeHttps_AppendServerName
	//	*ProxyTypeHttps_PassThrough
	ServerHeaderChoice isProxyTypeHttps_ServerHeaderChoice `protobuf_oneof:"server_header_choice"`
}

func (m *ProxyTypeHttps) Reset()                    { *m = ProxyTypeHttps{} }
func (*ProxyTypeHttps) ProtoMessage()               {}
func (*ProxyTypeHttps) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{2} }

type isProxyTypeHttps_ServerHeaderChoice interface {
	isProxyTypeHttps_ServerHeaderChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type ProxyTypeHttps_DefaultHeader struct {
	DefaultHeader *ves_io_schema4.Empty `protobuf:"bytes,5,opt,name=default_header,json=defaultHeader,oneof"`
}
type ProxyTypeHttps_ServerName struct {
	ServerName string `protobuf:"bytes,6,opt,name=server_name,json=serverName,proto3,oneof"`
}
type ProxyTypeHttps_AppendServerName struct {
	AppendServerName string `protobuf:"bytes,7,opt,name=append_server_name,json=appendServerName,proto3,oneof"`
}
type ProxyTypeHttps_PassThrough struct {
	PassThrough *ves_io_schema4.Empty `protobuf:"bytes,8,opt,name=pass_through,json=passThrough,oneof"`
}

func (*ProxyTypeHttps_DefaultHeader) isProxyTypeHttps_ServerHeaderChoice()    {}
func (*ProxyTypeHttps_ServerName) isProxyTypeHttps_ServerHeaderChoice()       {}
func (*ProxyTypeHttps_AppendServerName) isProxyTypeHttps_ServerHeaderChoice() {}
func (*ProxyTypeHttps_PassThrough) isProxyTypeHttps_ServerHeaderChoice()      {}

func (m *ProxyTypeHttps) GetServerHeaderChoice() isProxyTypeHttps_ServerHeaderChoice {
	if m != nil {
		return m.ServerHeaderChoice
	}
	return nil
}

func (m *ProxyTypeHttps) GetHttpRedirect() bool {
	if m != nil {
		return m.HttpRedirect
	}
	return false
}

func (m *ProxyTypeHttps) GetAddHsts() bool {
	if m != nil {
		return m.AddHsts
	}
	return false
}

func (m *ProxyTypeHttps) GetTlsParameters() *DownstreamTlsParamsType {
	if m != nil {
		return m.TlsParameters
	}
	return nil
}

func (m *ProxyTypeHttps) GetDefaultHeader() *ves_io_schema4.Empty {
	if x, ok := m.GetServerHeaderChoice().(*ProxyTypeHttps_DefaultHeader); ok {
		return x.DefaultHeader
	}
	return nil
}

func (m *ProxyTypeHttps) GetServerName() string {
	if x, ok := m.GetServerHeaderChoice().(*ProxyTypeHttps_ServerName); ok {
		return x.ServerName
	}
	return ""
}

func (m *ProxyTypeHttps) GetAppendServerName() string {
	if x, ok := m.GetServerHeaderChoice().(*ProxyTypeHttps_AppendServerName); ok {
		return x.AppendServerName
	}
	return ""
}

func (m *ProxyTypeHttps) GetPassThrough() *ves_io_schema4.Empty {
	if x, ok := m.GetServerHeaderChoice().(*ProxyTypeHttps_PassThrough); ok {
		return x.PassThrough
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*ProxyTypeHttps) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _ProxyTypeHttps_OneofMarshaler, _ProxyTypeHttps_OneofUnmarshaler, _ProxyTypeHttps_OneofSizer, []interface{}{
		(*ProxyTypeHttps_DefaultHeader)(nil),
		(*ProxyTypeHttps_ServerName)(nil),
		(*ProxyTypeHttps_AppendServerName)(nil),
		(*ProxyTypeHttps_PassThrough)(nil),
	}
}

func _ProxyTypeHttps_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*ProxyTypeHttps)
	// server_header_choice
	switch x := m.ServerHeaderChoice.(type) {
	case *ProxyTypeHttps_DefaultHeader:
		_ = b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.DefaultHeader); err != nil {
			return err
		}
	case *ProxyTypeHttps_ServerName:
		_ = b.EncodeVarint(6<<3 | proto.WireBytes)
		_ = b.EncodeStringBytes(x.ServerName)
	case *ProxyTypeHttps_AppendServerName:
		_ = b.EncodeVarint(7<<3 | proto.WireBytes)
		_ = b.EncodeStringBytes(x.AppendServerName)
	case *ProxyTypeHttps_PassThrough:
		_ = b.EncodeVarint(8<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.PassThrough); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("ProxyTypeHttps.ServerHeaderChoice has unexpected type %T", x)
	}
	return nil
}

func _ProxyTypeHttps_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*ProxyTypeHttps)
	switch tag {
	case 5: // server_header_choice.default_header
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.ServerHeaderChoice = &ProxyTypeHttps_DefaultHeader{msg}
		return true, err
	case 6: // server_header_choice.server_name
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.ServerHeaderChoice = &ProxyTypeHttps_ServerName{x}
		return true, err
	case 7: // server_header_choice.append_server_name
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.ServerHeaderChoice = &ProxyTypeHttps_AppendServerName{x}
		return true, err
	case 8: // server_header_choice.pass_through
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.ServerHeaderChoice = &ProxyTypeHttps_PassThrough{msg}
		return true, err
	default:
		return false, nil
	}
}

func _ProxyTypeHttps_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*ProxyTypeHttps)
	// server_header_choice
	switch x := m.ServerHeaderChoice.(type) {
	case *ProxyTypeHttps_DefaultHeader:
		s := proto.Size(x.DefaultHeader)
		n += proto.SizeVarint(5<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ProxyTypeHttps_ServerName:
		n += proto.SizeVarint(6<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.ServerName)))
		n += len(x.ServerName)
	case *ProxyTypeHttps_AppendServerName:
		n += proto.SizeVarint(7<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.AppendServerName)))
		n += len(x.AppendServerName)
	case *ProxyTypeHttps_PassThrough:
		s := proto.Size(x.PassThrough)
		n += proto.SizeVarint(8<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// HTTP Choice
//
// x-displayName: "HTTP Choice"
// Choice for selecting HTTP proxy
type ProxyTypeHttp struct {
	// Manage DNS Domain
	//
	// x-displayName: "Automatically Manage DNS Records"
	// DNS records for domains will be managed automatically by Volterra.
	// This requires the domain to be delegated to Volterra using the Delegated Domain feature.
	DnsVolterraManaged bool `protobuf:"varint,1,opt,name=dns_volterra_managed,json=dnsVolterraManaged,proto3" json:"dns_volterra_managed,omitempty"`
}

func (m *ProxyTypeHttp) Reset()                    { *m = ProxyTypeHttp{} }
func (*ProxyTypeHttp) ProtoMessage()               {}
func (*ProxyTypeHttp) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{3} }

func (m *ProxyTypeHttp) GetDnsVolterraManaged() bool {
	if m != nil {
		return m.DnsVolterraManaged
	}
	return false
}

// HTTPS with Auto Certs Choice
//
// x-displayName: "HTTPS with Auto Certs Choice"
// Choice for selecting HTTP proxy with bring your own certificates
type ProxyTypeHttpsAutoCerts struct {
	// HTTP Redirect
	//
	// x-displayName: "HTTP Redirect to HTTPS"
	// Redirect HTTP traffic to corresponding HTTPS
	HttpRedirect bool `protobuf:"varint,1,opt,name=http_redirect,json=httpRedirect,proto3" json:"http_redirect,omitempty"`
	// Add HSTS
	//
	// x-displayName: "Add HSTS Header"
	// Add HTTP Strict-Transport-Security response header
	AddHsts bool `protobuf:"varint,2,opt,name=add_hsts,json=addHsts,proto3" json:"add_hsts,omitempty"`
	// TLS Config
	//
	// x-displayName: "TLS Config"
	// Configuration for TLS parameters such as min/max TLS version and ciphers
	TlsConfig *ves_io_schema_views.TlsConfig `protobuf:"bytes,3,opt,name=tls_config,json=tlsConfig" json:"tls_config,omitempty"`
	// mTLS choice
	//
	// x-displayName: "mTLS choice with clients"
	// x-required
	// mTLS choice between clients amd HTTP loadbalancer
	//
	// Types that are valid to be assigned to MtlsChoice:
	//	*ProxyTypeHttpsAutoCerts_NoMtls
	//	*ProxyTypeHttpsAutoCerts_UseMtls
	MtlsChoice isProxyTypeHttpsAutoCerts_MtlsChoice `protobuf_oneof:"mtls_choice"`
	// Server Header configuration
	//
	// x-displayName: "Server Header value to be used in response"
	// Specify Server Header value to be used in responses
	//
	// Types that are valid to be assigned to ServerHeaderChoice:
	//	*ProxyTypeHttpsAutoCerts_DefaultHeader
	//	*ProxyTypeHttpsAutoCerts_ServerName
	//	*ProxyTypeHttpsAutoCerts_AppendServerName
	//	*ProxyTypeHttpsAutoCerts_PassThrough
	ServerHeaderChoice isProxyTypeHttpsAutoCerts_ServerHeaderChoice `protobuf_oneof:"server_header_choice"`
}

func (m *ProxyTypeHttpsAutoCerts) Reset()                    { *m = ProxyTypeHttpsAutoCerts{} }
func (*ProxyTypeHttpsAutoCerts) ProtoMessage()               {}
func (*ProxyTypeHttpsAutoCerts) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{4} }

type isProxyTypeHttpsAutoCerts_MtlsChoice interface {
	isProxyTypeHttpsAutoCerts_MtlsChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isProxyTypeHttpsAutoCerts_ServerHeaderChoice interface {
	isProxyTypeHttpsAutoCerts_ServerHeaderChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type ProxyTypeHttpsAutoCerts_NoMtls struct {
	NoMtls *ves_io_schema4.Empty `protobuf:"bytes,5,opt,name=no_mtls,json=noMtls,oneof"`
}
type ProxyTypeHttpsAutoCerts_UseMtls struct {
	UseMtls *DownstreamTlsValidationContext `protobuf:"bytes,6,opt,name=use_mtls,json=useMtls,oneof"`
}
type ProxyTypeHttpsAutoCerts_DefaultHeader struct {
	DefaultHeader *ves_io_schema4.Empty `protobuf:"bytes,8,opt,name=default_header,json=defaultHeader,oneof"`
}
type ProxyTypeHttpsAutoCerts_ServerName struct {
	ServerName string `protobuf:"bytes,9,opt,name=server_name,json=serverName,proto3,oneof"`
}
type ProxyTypeHttpsAutoCerts_AppendServerName struct {
	AppendServerName string `protobuf:"bytes,10,opt,name=append_server_name,json=appendServerName,proto3,oneof"`
}
type ProxyTypeHttpsAutoCerts_PassThrough struct {
	PassThrough *ves_io_schema4.Empty `protobuf:"bytes,11,opt,name=pass_through,json=passThrough,oneof"`
}

func (*ProxyTypeHttpsAutoCerts_NoMtls) isProxyTypeHttpsAutoCerts_MtlsChoice()                   {}
func (*ProxyTypeHttpsAutoCerts_UseMtls) isProxyTypeHttpsAutoCerts_MtlsChoice()                  {}
func (*ProxyTypeHttpsAutoCerts_DefaultHeader) isProxyTypeHttpsAutoCerts_ServerHeaderChoice()    {}
func (*ProxyTypeHttpsAutoCerts_ServerName) isProxyTypeHttpsAutoCerts_ServerHeaderChoice()       {}
func (*ProxyTypeHttpsAutoCerts_AppendServerName) isProxyTypeHttpsAutoCerts_ServerHeaderChoice() {}
func (*ProxyTypeHttpsAutoCerts_PassThrough) isProxyTypeHttpsAutoCerts_ServerHeaderChoice()      {}

func (m *ProxyTypeHttpsAutoCerts) GetMtlsChoice() isProxyTypeHttpsAutoCerts_MtlsChoice {
	if m != nil {
		return m.MtlsChoice
	}
	return nil
}
func (m *ProxyTypeHttpsAutoCerts) GetServerHeaderChoice() isProxyTypeHttpsAutoCerts_ServerHeaderChoice {
	if m != nil {
		return m.ServerHeaderChoice
	}
	return nil
}

func (m *ProxyTypeHttpsAutoCerts) GetHttpRedirect() bool {
	if m != nil {
		return m.HttpRedirect
	}
	return false
}

func (m *ProxyTypeHttpsAutoCerts) GetAddHsts() bool {
	if m != nil {
		return m.AddHsts
	}
	return false
}

func (m *ProxyTypeHttpsAutoCerts) GetTlsConfig() *ves_io_schema_views.TlsConfig {
	if m != nil {
		return m.TlsConfig
	}
	return nil
}

func (m *ProxyTypeHttpsAutoCerts) GetNoMtls() *ves_io_schema4.Empty {
	if x, ok := m.GetMtlsChoice().(*ProxyTypeHttpsAutoCerts_NoMtls); ok {
		return x.NoMtls
	}
	return nil
}

func (m *ProxyTypeHttpsAutoCerts) GetUseMtls() *DownstreamTlsValidationContext {
	if x, ok := m.GetMtlsChoice().(*ProxyTypeHttpsAutoCerts_UseMtls); ok {
		return x.UseMtls
	}
	return nil
}

func (m *ProxyTypeHttpsAutoCerts) GetDefaultHeader() *ves_io_schema4.Empty {
	if x, ok := m.GetServerHeaderChoice().(*ProxyTypeHttpsAutoCerts_DefaultHeader); ok {
		return x.DefaultHeader
	}
	return nil
}

func (m *ProxyTypeHttpsAutoCerts) GetServerName() string {
	if x, ok := m.GetServerHeaderChoice().(*ProxyTypeHttpsAutoCerts_ServerName); ok {
		return x.ServerName
	}
	return ""
}

func (m *ProxyTypeHttpsAutoCerts) GetAppendServerName() string {
	if x, ok := m.GetServerHeaderChoice().(*ProxyTypeHttpsAutoCerts_AppendServerName); ok {
		return x.AppendServerName
	}
	return ""
}

func (m *ProxyTypeHttpsAutoCerts) GetPassThrough() *ves_io_schema4.Empty {
	if x, ok := m.GetServerHeaderChoice().(*ProxyTypeHttpsAutoCerts_PassThrough); ok {
		return x.PassThrough
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*ProxyTypeHttpsAutoCerts) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _ProxyTypeHttpsAutoCerts_OneofMarshaler, _ProxyTypeHttpsAutoCerts_OneofUnmarshaler, _ProxyTypeHttpsAutoCerts_OneofSizer, []interface{}{
		(*ProxyTypeHttpsAutoCerts_NoMtls)(nil),
		(*ProxyTypeHttpsAutoCerts_UseMtls)(nil),
		(*ProxyTypeHttpsAutoCerts_DefaultHeader)(nil),
		(*ProxyTypeHttpsAutoCerts_ServerName)(nil),
		(*ProxyTypeHttpsAutoCerts_AppendServerName)(nil),
		(*ProxyTypeHttpsAutoCerts_PassThrough)(nil),
	}
}

func _ProxyTypeHttpsAutoCerts_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*ProxyTypeHttpsAutoCerts)
	// mtls_choice
	switch x := m.MtlsChoice.(type) {
	case *ProxyTypeHttpsAutoCerts_NoMtls:
		_ = b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.NoMtls); err != nil {
			return err
		}
	case *ProxyTypeHttpsAutoCerts_UseMtls:
		_ = b.EncodeVarint(6<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.UseMtls); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("ProxyTypeHttpsAutoCerts.MtlsChoice has unexpected type %T", x)
	}
	// server_header_choice
	switch x := m.ServerHeaderChoice.(type) {
	case *ProxyTypeHttpsAutoCerts_DefaultHeader:
		_ = b.EncodeVarint(8<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.DefaultHeader); err != nil {
			return err
		}
	case *ProxyTypeHttpsAutoCerts_ServerName:
		_ = b.EncodeVarint(9<<3 | proto.WireBytes)
		_ = b.EncodeStringBytes(x.ServerName)
	case *ProxyTypeHttpsAutoCerts_AppendServerName:
		_ = b.EncodeVarint(10<<3 | proto.WireBytes)
		_ = b.EncodeStringBytes(x.AppendServerName)
	case *ProxyTypeHttpsAutoCerts_PassThrough:
		_ = b.EncodeVarint(11<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.PassThrough); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("ProxyTypeHttpsAutoCerts.ServerHeaderChoice has unexpected type %T", x)
	}
	return nil
}

func _ProxyTypeHttpsAutoCerts_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*ProxyTypeHttpsAutoCerts)
	switch tag {
	case 5: // mtls_choice.no_mtls
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.MtlsChoice = &ProxyTypeHttpsAutoCerts_NoMtls{msg}
		return true, err
	case 6: // mtls_choice.use_mtls
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(DownstreamTlsValidationContext)
		err := b.DecodeMessage(msg)
		m.MtlsChoice = &ProxyTypeHttpsAutoCerts_UseMtls{msg}
		return true, err
	case 8: // server_header_choice.default_header
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.ServerHeaderChoice = &ProxyTypeHttpsAutoCerts_DefaultHeader{msg}
		return true, err
	case 9: // server_header_choice.server_name
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.ServerHeaderChoice = &ProxyTypeHttpsAutoCerts_ServerName{x}
		return true, err
	case 10: // server_header_choice.append_server_name
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.ServerHeaderChoice = &ProxyTypeHttpsAutoCerts_AppendServerName{x}
		return true, err
	case 11: // server_header_choice.pass_through
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.ServerHeaderChoice = &ProxyTypeHttpsAutoCerts_PassThrough{msg}
		return true, err
	default:
		return false, nil
	}
}

func _ProxyTypeHttpsAutoCerts_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*ProxyTypeHttpsAutoCerts)
	// mtls_choice
	switch x := m.MtlsChoice.(type) {
	case *ProxyTypeHttpsAutoCerts_NoMtls:
		s := proto.Size(x.NoMtls)
		n += proto.SizeVarint(5<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ProxyTypeHttpsAutoCerts_UseMtls:
		s := proto.Size(x.UseMtls)
		n += proto.SizeVarint(6<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	// server_header_choice
	switch x := m.ServerHeaderChoice.(type) {
	case *ProxyTypeHttpsAutoCerts_DefaultHeader:
		s := proto.Size(x.DefaultHeader)
		n += proto.SizeVarint(8<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ProxyTypeHttpsAutoCerts_ServerName:
		n += proto.SizeVarint(9<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.ServerName)))
		n += len(x.ServerName)
	case *ProxyTypeHttpsAutoCerts_AppendServerName:
		n += proto.SizeVarint(10<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.AppendServerName)))
		n += len(x.AppendServerName)
	case *ProxyTypeHttpsAutoCerts_PassThrough:
		s := proto.Size(x.PassThrough)
		n += proto.SizeVarint(11<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// Hash Policy List
//
// x-displayName: "Hash Policy List"
// List of hash policy rules
type HashPolicyListType struct {
	// hash_policy
	//
	// x-displayName: "Hash Policy"
	// x-required
	// Specifies a list of hash policies to use for ring hash load balancing. Each
	// hash policy is evaluated individually and the combined result is used to
	// route the request
	HashPolicy []*ves_io_schema_route.HashPolicyType `protobuf:"bytes,16,rep,name=hash_policy,json=hashPolicy" json:"hash_policy,omitempty"`
}

func (m *HashPolicyListType) Reset()                    { *m = HashPolicyListType{} }
func (*HashPolicyListType) ProtoMessage()               {}
func (*HashPolicyListType) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{5} }

func (m *HashPolicyListType) GetHashPolicy() []*ves_io_schema_route.HashPolicyType {
	if m != nil {
		return m.HashPolicy
	}
	return nil
}

// MirrorPolicyType
//
// x-displayName: "Mirror Policy"
// MirrorPolicy is used for shadowing traffic from one origin pool to another. The approach used
// is "fire and forget", meaning it will not wait for the shadow origin pool to
// respond before returning the response from the primary origin pool. All normal statistics are
// collected for the shadow origin pool making this feature useful for testing and troubleshooting.
type MirrorPolicyType struct {
	// cluster
	//
	// x-displayName: "Mirror Destination Cluster"
	// x-required
	// Specifies the cluster to which the requests will be mirrored. The cluster object
	// referred here must be present.
	OriginPool *ves_io_schema_views.ObjectRefType `protobuf:"bytes,1,opt,name=origin_pool,json=originPool" json:"origin_pool,omitempty"`
	// percent
	//
	// x-displayName: "Mirror Percentage"
	// x-required
	// Percentage of requests to be mirrored
	Percent *ves_io_schema4.FractionalPercent `protobuf:"bytes,2,opt,name=percent" json:"percent,omitempty"`
}

func (m *MirrorPolicyType) Reset()                    { *m = MirrorPolicyType{} }
func (*MirrorPolicyType) ProtoMessage()               {}
func (*MirrorPolicyType) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{6} }

func (m *MirrorPolicyType) GetOriginPool() *ves_io_schema_views.ObjectRefType {
	if m != nil {
		return m.OriginPool
	}
	return nil
}

func (m *MirrorPolicyType) GetPercent() *ves_io_schema4.FractionalPercent {
	if m != nil {
		return m.Percent
	}
	return nil
}

// Advanced Route Options
//
// x-displayName: "Advanced Route Options"
// Configure advanced options for route like path rewrite, hash policy, etc.
type RouteSimpleAdvancedOptions struct {
	// Hash Policy Choice
	//
	// x-displayName: "Hash Policy Choice"
	// x-required
	// Enable route specific hash policy for this route
	//
	// Types that are valid to be assigned to HashPolicyChoice:
	//	*RouteSimpleAdvancedOptions_CommonHashPolicy
	//	*RouteSimpleAdvancedOptions_SpecificHashPolicy
	HashPolicyChoice isRouteSimpleAdvancedOptions_HashPolicyChoice `protobuf_oneof:"hash_policy_choice"`
	// priority
	//
	// x-displayName: "Priority"
	// Priority routing for each route. Different connection pools are used based on the priority of the route.
	// Also, circuit-breaker configuration at destination cluster is chosen based on the route priority.
	Priority ves_io_schema4.RoutingPriority `protobuf:"varint,4,opt,name=priority,proto3,enum=ves.io.schema.RoutingPriority" json:"priority,omitempty"`
	// Origin Servers Subset
	//
	// x-displayName: "Origin Servers Subsets"
	// Upstream origin pool may be configured to divide its origin servers into subsets based on metadata
	// attached to the origin servers. Routes may then specify the metadata that a endpoint must match in
	// order to be selected by the load balancer
	//
	// For origin servers which are discovered in K8S or Consul cluster, the label of the service is merged with
	// endpoint's labels. In case of Consul, the label is derived from the "Tag" field.
	// For labels that are common between configured endpoint and discovered service, labels from discovered service
	// takes precedence.
	//
	// List of key-value pairs that will be used as matching metadata. Only those origin servers of
	// upstream origin pool which match this metadata will be selected for load balancing
	EndpointSubsets map[string]string `protobuf:"bytes,5,rep,name=endpoint_subsets,json=endpointSubsets" json:"endpoint_subsets,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Enable Prefix Rewrite
	//
	// x-displayName: "Enable Prefix Rewrite"
	// x-required
	// Select to enable or disable prefix rewrite
	//
	// Types that are valid to be assigned to RewriteChoice:
	//	*RouteSimpleAdvancedOptions_DisablePrefixRewrite
	//	*RouteSimpleAdvancedOptions_PrefixRewrite
	RewriteChoice isRouteSimpleAdvancedOptions_RewriteChoice `protobuf_oneof:"rewrite_choice"`
	// Headers to add in request
	//
	// x-displayName: "Add Request Headers"
	// Headers are key-value pairs to be added to HTTP request being routed towards upstream.
	RequestHeadersToAdd []*ves_io_schema4.HeaderManipulationOptionType `protobuf:"bytes,9,rep,name=request_headers_to_add,json=requestHeadersToAdd" json:"request_headers_to_add,omitempty"`
	// Header to be removed from request
	//
	// x-displayName: "Remove Request Headers"
	// x-example: "host"
	// List of keys of Headers to be removed from the HTTP request being sent towards upstream.
	RequestHeadersToRemove []string `protobuf:"bytes,10,rep,name=request_headers_to_remove,json=requestHeadersToRemove" json:"request_headers_to_remove,omitempty"`
	// Headers to add in response
	//
	// x-displayName: "Add Response Headers"
	// Headers are key-value pairs to be added to HTTP response being sent towards downstream.
	ResponseHeadersToAdd []*ves_io_schema4.HeaderManipulationOptionType `protobuf:"bytes,11,rep,name=response_headers_to_add,json=responseHeadersToAdd" json:"response_headers_to_add,omitempty"`
	// Header to be removed from response
	//
	// x-displayName: "Remove Response Headers"
	// x-example: "host"
	// List of keys of Headers to be removed from the HTTP response being sent towards downstream.
	ResponseHeadersToRemove []string `protobuf:"bytes,12,rep,name=response_headers_to_remove,json=responseHeadersToRemove" json:"response_headers_to_remove,omitempty"`
	// disable_location_add
	//
	// x-displayName: "Disable Location Addition"
	// x-example: true
	// disables append of x-volterra-location = <re-site-name> at route level, if it is configured at
	// virtual-host level. This configuration is ignored on CE sites.
	DisableLocationAdd bool `protobuf:"varint,13,opt,name=disable_location_add,json=disableLocationAdd,proto3" json:"disable_location_add,omitempty"`
	// Enable the WAF (Web Application Firewall) functionality for VirtualHost
	//
	// x-displayName: "Select Web Application Firewall (WAF) Config"
	// x-required
	//
	// WAF can be used to analyze inbound and outbound http/https traffic.
	// WAF can be configured either in BLOCKing Mode or ALERTing Mode.
	// In BLOCKing mode if WAF detects suspicious inbound/outbound traffic it blocks the request or response.
	// In ALERTing mode if suspicious traffic is detected, WAF generates ALERTs with details on the
	// suspicious traffic (instead of blocking traffic).
	//
	// waf_type can be either WAF or WAFRules.
	// WAF Object allows to
	//     Configure mode of the WAF (BLOCK/ALERT)
	//     Configure language used by the application which is being protected by the WAF
	//     Disable different high level security tags if required (e.g. SQLI_DETECTION, XSS_DETECTION etc)
	// WAFRules allows to
	//     Configure mode of the WAF (BLOCK/ALERT)
	//     Enable/Disable individual WAF security rules
	//
	// Types that are valid to be assigned to WafChoice:
	//	*RouteSimpleAdvancedOptions_DisableWaf
	//	*RouteSimpleAdvancedOptions_Waf
	//	*RouteSimpleAdvancedOptions_WafRule
	WafChoice isRouteSimpleAdvancedOptions_WafChoice `protobuf_oneof:"waf_choice"`
	// cors_policy
	//
	// x-displayName: "CORS Policy"
	// Cross-Origin Resource Sharing requests configuration
	//
	// CORS is a mechanism that uses additional HTTP headers to tell a browser to let
	// a web application running at one origin (domain) have permission to access selected
	// resources from a server at a different origin
	CorsPolicy *ves_io_schema4.CorsPolicy `protobuf:"bytes,18,opt,name=cors_policy,json=corsPolicy" json:"cors_policy,omitempty"`
	// SPDY Choice
	//
	// x-displayName: "Enable/Disable SPDY Upgrade"
	// x-required
	// Select to enable or disable spdy upgrade
	//
	// Types that are valid to be assigned to SpdyChoice:
	//	*RouteSimpleAdvancedOptions_DisableSpdy
	//	*RouteSimpleAdvancedOptions_EnableSpdy
	SpdyChoice isRouteSimpleAdvancedOptions_SpdyChoice `protobuf_oneof:"spdy_choice"`
	// Websocket Choice
	//
	// x-displayName: "Enable/Disable Websocket Upgrade"
	// x-required
	// Select to enable or disable websocket upgrade
	//
	// Types that are valid to be assigned to WebsocketChoice:
	//	*RouteSimpleAdvancedOptions_DisableWebSocketConfig
	//	*RouteSimpleAdvancedOptions_WebSocketConfig
	WebsocketChoice isRouteSimpleAdvancedOptions_WebsocketChoice `protobuf_oneof:"websocket_choice"`
	//  Retry Policy Choice
	//
	// x-displayName: "Select Retry Policy"
	// x-required
	// Select default retry policy or configure custom
	//
	// Types that are valid to be assigned to RetryPolicyChoice:
	//	*RouteSimpleAdvancedOptions_DefaultRetryPolicy
	//	*RouteSimpleAdvancedOptions_RetryPolicy
	RetryPolicyChoice isRouteSimpleAdvancedOptions_RetryPolicyChoice `protobuf_oneof:"retry_policy_choice"`
	// timeout
	//
	// x-displayName: "Timeout"
	// x-example: 2000
	// The timeout for the route including all retries, in milliseconds.
	// Should be set to a high value or 0 (infinite timeout) for server-side streaming.
	Timeout uint32 `protobuf:"varint,28,opt,name=timeout,proto3" json:"timeout,omitempty"`
	// Enable Route Specific Buffering
	//
	// x-displayName: "Enable Route Specific Buffering"
	// x-required
	// Enable or disable route specific buffering
	//
	// Types that are valid to be assigned to BufferChoice:
	//	*RouteSimpleAdvancedOptions_CommonBuffering
	//	*RouteSimpleAdvancedOptions_BufferPolicy
	BufferChoice isRouteSimpleAdvancedOptions_BufferChoice `protobuf_oneof:"buffer_choice"`
	// Mirroring
	//
	// x-displayName: "Mirroring"
	// x-required
	// Enable/disable Mirroring
	//
	// Types that are valid to be assigned to MirroringChoice:
	//	*RouteSimpleAdvancedOptions_DisableMirroring
	//	*RouteSimpleAdvancedOptions_MirrorPolicy
	MirroringChoice isRouteSimpleAdvancedOptions_MirroringChoice `protobuf_oneof:"mirroring_choice"`
	// Oneof for Cluster retraction
	//
	// x-displayName: "Select Cluster retract option"
	// x-required
	// Specifies whether retraction of cluster has to be enabled or
	// disabled
	//
	// Types that are valid to be assigned to ClusterRetractChoice:
	//	*RouteSimpleAdvancedOptions_RetractCluster
	//	*RouteSimpleAdvancedOptions_DoNotRetractCluster
	ClusterRetractChoice isRouteSimpleAdvancedOptions_ClusterRetractChoice `protobuf_oneof:"cluster_retract_choice"`
}

func (m *RouteSimpleAdvancedOptions) Reset()                    { *m = RouteSimpleAdvancedOptions{} }
func (*RouteSimpleAdvancedOptions) ProtoMessage()               {}
func (*RouteSimpleAdvancedOptions) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{7} }

type isRouteSimpleAdvancedOptions_HashPolicyChoice interface {
	isRouteSimpleAdvancedOptions_HashPolicyChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isRouteSimpleAdvancedOptions_RewriteChoice interface {
	isRouteSimpleAdvancedOptions_RewriteChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isRouteSimpleAdvancedOptions_WafChoice interface {
	isRouteSimpleAdvancedOptions_WafChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isRouteSimpleAdvancedOptions_SpdyChoice interface {
	isRouteSimpleAdvancedOptions_SpdyChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isRouteSimpleAdvancedOptions_WebsocketChoice interface {
	isRouteSimpleAdvancedOptions_WebsocketChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isRouteSimpleAdvancedOptions_RetryPolicyChoice interface {
	isRouteSimpleAdvancedOptions_RetryPolicyChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isRouteSimpleAdvancedOptions_BufferChoice interface {
	isRouteSimpleAdvancedOptions_BufferChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isRouteSimpleAdvancedOptions_MirroringChoice interface {
	isRouteSimpleAdvancedOptions_MirroringChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isRouteSimpleAdvancedOptions_ClusterRetractChoice interface {
	isRouteSimpleAdvancedOptions_ClusterRetractChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type RouteSimpleAdvancedOptions_CommonHashPolicy struct {
	CommonHashPolicy *ves_io_schema4.Empty `protobuf:"bytes,2,opt,name=common_hash_policy,json=commonHashPolicy,oneof"`
}
type RouteSimpleAdvancedOptions_SpecificHashPolicy struct {
	SpecificHashPolicy *HashPolicyListType `protobuf:"bytes,3,opt,name=specific_hash_policy,json=specificHashPolicy,oneof"`
}
type RouteSimpleAdvancedOptions_DisablePrefixRewrite struct {
	DisablePrefixRewrite *ves_io_schema4.Empty `protobuf:"bytes,7,opt,name=disable_prefix_rewrite,json=disablePrefixRewrite,oneof"`
}
type RouteSimpleAdvancedOptions_PrefixRewrite struct {
	PrefixRewrite string `protobuf:"bytes,8,opt,name=prefix_rewrite,json=prefixRewrite,proto3,oneof"`
}
type RouteSimpleAdvancedOptions_DisableWaf struct {
	DisableWaf *ves_io_schema4.Empty `protobuf:"bytes,15,opt,name=disable_waf,json=disableWaf,oneof"`
}
type RouteSimpleAdvancedOptions_Waf struct {
	Waf *ves_io_schema_views.ObjectRefType `protobuf:"bytes,16,opt,name=waf,oneof"`
}
type RouteSimpleAdvancedOptions_WafRule struct {
	WafRule *ves_io_schema_views.ObjectRefType `protobuf:"bytes,17,opt,name=waf_rule,json=wafRule,oneof"`
}
type RouteSimpleAdvancedOptions_DisableSpdy struct {
	DisableSpdy *ves_io_schema4.Empty `protobuf:"bytes,20,opt,name=disable_spdy,json=disableSpdy,oneof"`
}
type RouteSimpleAdvancedOptions_EnableSpdy struct {
	EnableSpdy *ves_io_schema4.Empty `protobuf:"bytes,21,opt,name=enable_spdy,json=enableSpdy,oneof"`
}
type RouteSimpleAdvancedOptions_DisableWebSocketConfig struct {
	DisableWebSocketConfig *ves_io_schema4.Empty `protobuf:"bytes,23,opt,name=disable_web_socket_config,json=disableWebSocketConfig,oneof"`
}
type RouteSimpleAdvancedOptions_WebSocketConfig struct {
	WebSocketConfig *ves_io_schema_route.WebsocketConfigType `protobuf:"bytes,24,opt,name=web_socket_config,json=webSocketConfig,oneof"`
}
type RouteSimpleAdvancedOptions_DefaultRetryPolicy struct {
	DefaultRetryPolicy *ves_io_schema4.Empty `protobuf:"bytes,26,opt,name=default_retry_policy,json=defaultRetryPolicy,oneof"`
}
type RouteSimpleAdvancedOptions_RetryPolicy struct {
	RetryPolicy *ves_io_schema4.RetryPolicyType `protobuf:"bytes,27,opt,name=retry_policy,json=retryPolicy,oneof"`
}
type RouteSimpleAdvancedOptions_CommonBuffering struct {
	CommonBuffering *ves_io_schema4.Empty `protobuf:"bytes,30,opt,name=common_buffering,json=commonBuffering,oneof"`
}
type RouteSimpleAdvancedOptions_BufferPolicy struct {
	BufferPolicy *ves_io_schema4.BufferConfigType `protobuf:"bytes,31,opt,name=buffer_policy,json=bufferPolicy,oneof"`
}
type RouteSimpleAdvancedOptions_DisableMirroring struct {
	DisableMirroring *ves_io_schema4.Empty `protobuf:"bytes,33,opt,name=disable_mirroring,json=disableMirroring,oneof"`
}
type RouteSimpleAdvancedOptions_MirrorPolicy struct {
	MirrorPolicy *MirrorPolicyType `protobuf:"bytes,34,opt,name=mirror_policy,json=mirrorPolicy,oneof"`
}
type RouteSimpleAdvancedOptions_RetractCluster struct {
	RetractCluster *ves_io_schema4.Empty `protobuf:"bytes,36,opt,name=retract_cluster,json=retractCluster,oneof"`
}
type RouteSimpleAdvancedOptions_DoNotRetractCluster struct {
	DoNotRetractCluster *ves_io_schema4.Empty `protobuf:"bytes,37,opt,name=do_not_retract_cluster,json=doNotRetractCluster,oneof"`
}

func (*RouteSimpleAdvancedOptions_CommonHashPolicy) isRouteSimpleAdvancedOptions_HashPolicyChoice() {}
func (*RouteSimpleAdvancedOptions_SpecificHashPolicy) isRouteSimpleAdvancedOptions_HashPolicyChoice() {
}
func (*RouteSimpleAdvancedOptions_DisablePrefixRewrite) isRouteSimpleAdvancedOptions_RewriteChoice() {
}
func (*RouteSimpleAdvancedOptions_PrefixRewrite) isRouteSimpleAdvancedOptions_RewriteChoice() {}
func (*RouteSimpleAdvancedOptions_DisableWaf) isRouteSimpleAdvancedOptions_WafChoice()        {}
func (*RouteSimpleAdvancedOptions_Waf) isRouteSimpleAdvancedOptions_WafChoice()               {}
func (*RouteSimpleAdvancedOptions_WafRule) isRouteSimpleAdvancedOptions_WafChoice()           {}
func (*RouteSimpleAdvancedOptions_DisableSpdy) isRouteSimpleAdvancedOptions_SpdyChoice()      {}
func (*RouteSimpleAdvancedOptions_EnableSpdy) isRouteSimpleAdvancedOptions_SpdyChoice()       {}
func (*RouteSimpleAdvancedOptions_DisableWebSocketConfig) isRouteSimpleAdvancedOptions_WebsocketChoice() {
}
func (*RouteSimpleAdvancedOptions_WebSocketConfig) isRouteSimpleAdvancedOptions_WebsocketChoice() {}
func (*RouteSimpleAdvancedOptions_DefaultRetryPolicy) isRouteSimpleAdvancedOptions_RetryPolicyChoice() {
}
func (*RouteSimpleAdvancedOptions_RetryPolicy) isRouteSimpleAdvancedOptions_RetryPolicyChoice()    {}
func (*RouteSimpleAdvancedOptions_CommonBuffering) isRouteSimpleAdvancedOptions_BufferChoice()     {}
func (*RouteSimpleAdvancedOptions_BufferPolicy) isRouteSimpleAdvancedOptions_BufferChoice()        {}
func (*RouteSimpleAdvancedOptions_DisableMirroring) isRouteSimpleAdvancedOptions_MirroringChoice() {}
func (*RouteSimpleAdvancedOptions_MirrorPolicy) isRouteSimpleAdvancedOptions_MirroringChoice()     {}
func (*RouteSimpleAdvancedOptions_RetractCluster) isRouteSimpleAdvancedOptions_ClusterRetractChoice() {
}
func (*RouteSimpleAdvancedOptions_DoNotRetractCluster) isRouteSimpleAdvancedOptions_ClusterRetractChoice() {
}

func (m *RouteSimpleAdvancedOptions) GetHashPolicyChoice() isRouteSimpleAdvancedOptions_HashPolicyChoice {
	if m != nil {
		return m.HashPolicyChoice
	}
	return nil
}
func (m *RouteSimpleAdvancedOptions) GetRewriteChoice() isRouteSimpleAdvancedOptions_RewriteChoice {
	if m != nil {
		return m.RewriteChoice
	}
	return nil
}
func (m *RouteSimpleAdvancedOptions) GetWafChoice() isRouteSimpleAdvancedOptions_WafChoice {
	if m != nil {
		return m.WafChoice
	}
	return nil
}
func (m *RouteSimpleAdvancedOptions) GetSpdyChoice() isRouteSimpleAdvancedOptions_SpdyChoice {
	if m != nil {
		return m.SpdyChoice
	}
	return nil
}
func (m *RouteSimpleAdvancedOptions) GetWebsocketChoice() isRouteSimpleAdvancedOptions_WebsocketChoice {
	if m != nil {
		return m.WebsocketChoice
	}
	return nil
}
func (m *RouteSimpleAdvancedOptions) GetRetryPolicyChoice() isRouteSimpleAdvancedOptions_RetryPolicyChoice {
	if m != nil {
		return m.RetryPolicyChoice
	}
	return nil
}
func (m *RouteSimpleAdvancedOptions) GetBufferChoice() isRouteSimpleAdvancedOptions_BufferChoice {
	if m != nil {
		return m.BufferChoice
	}
	return nil
}
func (m *RouteSimpleAdvancedOptions) GetMirroringChoice() isRouteSimpleAdvancedOptions_MirroringChoice {
	if m != nil {
		return m.MirroringChoice
	}
	return nil
}
func (m *RouteSimpleAdvancedOptions) GetClusterRetractChoice() isRouteSimpleAdvancedOptions_ClusterRetractChoice {
	if m != nil {
		return m.ClusterRetractChoice
	}
	return nil
}

func (m *RouteSimpleAdvancedOptions) GetCommonHashPolicy() *ves_io_schema4.Empty {
	if x, ok := m.GetHashPolicyChoice().(*RouteSimpleAdvancedOptions_CommonHashPolicy); ok {
		return x.CommonHashPolicy
	}
	return nil
}

func (m *RouteSimpleAdvancedOptions) GetSpecificHashPolicy() *HashPolicyListType {
	if x, ok := m.GetHashPolicyChoice().(*RouteSimpleAdvancedOptions_SpecificHashPolicy); ok {
		return x.SpecificHashPolicy
	}
	return nil
}

func (m *RouteSimpleAdvancedOptions) GetPriority() ves_io_schema4.RoutingPriority {
	if m != nil {
		return m.Priority
	}
	return ves_io_schema4.DEFAULT
}

func (m *RouteSimpleAdvancedOptions) GetEndpointSubsets() map[string]string {
	if m != nil {
		return m.EndpointSubsets
	}
	return nil
}

func (m *RouteSimpleAdvancedOptions) GetDisablePrefixRewrite() *ves_io_schema4.Empty {
	if x, ok := m.GetRewriteChoice().(*RouteSimpleAdvancedOptions_DisablePrefixRewrite); ok {
		return x.DisablePrefixRewrite
	}
	return nil
}

func (m *RouteSimpleAdvancedOptions) GetPrefixRewrite() string {
	if x, ok := m.GetRewriteChoice().(*RouteSimpleAdvancedOptions_PrefixRewrite); ok {
		return x.PrefixRewrite
	}
	return ""
}

func (m *RouteSimpleAdvancedOptions) GetRequestHeadersToAdd() []*ves_io_schema4.HeaderManipulationOptionType {
	if m != nil {
		return m.RequestHeadersToAdd
	}
	return nil
}

func (m *RouteSimpleAdvancedOptions) GetRequestHeadersToRemove() []string {
	if m != nil {
		return m.RequestHeadersToRemove
	}
	return nil
}

func (m *RouteSimpleAdvancedOptions) GetResponseHeadersToAdd() []*ves_io_schema4.HeaderManipulationOptionType {
	if m != nil {
		return m.ResponseHeadersToAdd
	}
	return nil
}

func (m *RouteSimpleAdvancedOptions) GetResponseHeadersToRemove() []string {
	if m != nil {
		return m.ResponseHeadersToRemove
	}
	return nil
}

func (m *RouteSimpleAdvancedOptions) GetDisableLocationAdd() bool {
	if m != nil {
		return m.DisableLocationAdd
	}
	return false
}

func (m *RouteSimpleAdvancedOptions) GetDisableWaf() *ves_io_schema4.Empty {
	if x, ok := m.GetWafChoice().(*RouteSimpleAdvancedOptions_DisableWaf); ok {
		return x.DisableWaf
	}
	return nil
}

func (m *RouteSimpleAdvancedOptions) GetWaf() *ves_io_schema_views.ObjectRefType {
	if x, ok := m.GetWafChoice().(*RouteSimpleAdvancedOptions_Waf); ok {
		return x.Waf
	}
	return nil
}

func (m *RouteSimpleAdvancedOptions) GetWafRule() *ves_io_schema_views.ObjectRefType {
	if x, ok := m.GetWafChoice().(*RouteSimpleAdvancedOptions_WafRule); ok {
		return x.WafRule
	}
	return nil
}

func (m *RouteSimpleAdvancedOptions) GetCorsPolicy() *ves_io_schema4.CorsPolicy {
	if m != nil {
		return m.CorsPolicy
	}
	return nil
}

func (m *RouteSimpleAdvancedOptions) GetDisableSpdy() *ves_io_schema4.Empty {
	if x, ok := m.GetSpdyChoice().(*RouteSimpleAdvancedOptions_DisableSpdy); ok {
		return x.DisableSpdy
	}
	return nil
}

func (m *RouteSimpleAdvancedOptions) GetEnableSpdy() *ves_io_schema4.Empty {
	if x, ok := m.GetSpdyChoice().(*RouteSimpleAdvancedOptions_EnableSpdy); ok {
		return x.EnableSpdy
	}
	return nil
}

func (m *RouteSimpleAdvancedOptions) GetDisableWebSocketConfig() *ves_io_schema4.Empty {
	if x, ok := m.GetWebsocketChoice().(*RouteSimpleAdvancedOptions_DisableWebSocketConfig); ok {
		return x.DisableWebSocketConfig
	}
	return nil
}

func (m *RouteSimpleAdvancedOptions) GetWebSocketConfig() *ves_io_schema_route.WebsocketConfigType {
	if x, ok := m.GetWebsocketChoice().(*RouteSimpleAdvancedOptions_WebSocketConfig); ok {
		return x.WebSocketConfig
	}
	return nil
}

func (m *RouteSimpleAdvancedOptions) GetDefaultRetryPolicy() *ves_io_schema4.Empty {
	if x, ok := m.GetRetryPolicyChoice().(*RouteSimpleAdvancedOptions_DefaultRetryPolicy); ok {
		return x.DefaultRetryPolicy
	}
	return nil
}

func (m *RouteSimpleAdvancedOptions) GetRetryPolicy() *ves_io_schema4.RetryPolicyType {
	if x, ok := m.GetRetryPolicyChoice().(*RouteSimpleAdvancedOptions_RetryPolicy); ok {
		return x.RetryPolicy
	}
	return nil
}

func (m *RouteSimpleAdvancedOptions) GetTimeout() uint32 {
	if m != nil {
		return m.Timeout
	}
	return 0
}

func (m *RouteSimpleAdvancedOptions) GetCommonBuffering() *ves_io_schema4.Empty {
	if x, ok := m.GetBufferChoice().(*RouteSimpleAdvancedOptions_CommonBuffering); ok {
		return x.CommonBuffering
	}
	return nil
}

func (m *RouteSimpleAdvancedOptions) GetBufferPolicy() *ves_io_schema4.BufferConfigType {
	if x, ok := m.GetBufferChoice().(*RouteSimpleAdvancedOptions_BufferPolicy); ok {
		return x.BufferPolicy
	}
	return nil
}

func (m *RouteSimpleAdvancedOptions) GetDisableMirroring() *ves_io_schema4.Empty {
	if x, ok := m.GetMirroringChoice().(*RouteSimpleAdvancedOptions_DisableMirroring); ok {
		return x.DisableMirroring
	}
	return nil
}

func (m *RouteSimpleAdvancedOptions) GetMirrorPolicy() *MirrorPolicyType {
	if x, ok := m.GetMirroringChoice().(*RouteSimpleAdvancedOptions_MirrorPolicy); ok {
		return x.MirrorPolicy
	}
	return nil
}

func (m *RouteSimpleAdvancedOptions) GetRetractCluster() *ves_io_schema4.Empty {
	if x, ok := m.GetClusterRetractChoice().(*RouteSimpleAdvancedOptions_RetractCluster); ok {
		return x.RetractCluster
	}
	return nil
}

func (m *RouteSimpleAdvancedOptions) GetDoNotRetractCluster() *ves_io_schema4.Empty {
	if x, ok := m.GetClusterRetractChoice().(*RouteSimpleAdvancedOptions_DoNotRetractCluster); ok {
		return x.DoNotRetractCluster
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*RouteSimpleAdvancedOptions) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _RouteSimpleAdvancedOptions_OneofMarshaler, _RouteSimpleAdvancedOptions_OneofUnmarshaler, _RouteSimpleAdvancedOptions_OneofSizer, []interface{}{
		(*RouteSimpleAdvancedOptions_CommonHashPolicy)(nil),
		(*RouteSimpleAdvancedOptions_SpecificHashPolicy)(nil),
		(*RouteSimpleAdvancedOptions_DisablePrefixRewrite)(nil),
		(*RouteSimpleAdvancedOptions_PrefixRewrite)(nil),
		(*RouteSimpleAdvancedOptions_DisableWaf)(nil),
		(*RouteSimpleAdvancedOptions_Waf)(nil),
		(*RouteSimpleAdvancedOptions_WafRule)(nil),
		(*RouteSimpleAdvancedOptions_DisableSpdy)(nil),
		(*RouteSimpleAdvancedOptions_EnableSpdy)(nil),
		(*RouteSimpleAdvancedOptions_DisableWebSocketConfig)(nil),
		(*RouteSimpleAdvancedOptions_WebSocketConfig)(nil),
		(*RouteSimpleAdvancedOptions_DefaultRetryPolicy)(nil),
		(*RouteSimpleAdvancedOptions_RetryPolicy)(nil),
		(*RouteSimpleAdvancedOptions_CommonBuffering)(nil),
		(*RouteSimpleAdvancedOptions_BufferPolicy)(nil),
		(*RouteSimpleAdvancedOptions_DisableMirroring)(nil),
		(*RouteSimpleAdvancedOptions_MirrorPolicy)(nil),
		(*RouteSimpleAdvancedOptions_RetractCluster)(nil),
		(*RouteSimpleAdvancedOptions_DoNotRetractCluster)(nil),
	}
}

func _RouteSimpleAdvancedOptions_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*RouteSimpleAdvancedOptions)
	// hash_policy_choice
	switch x := m.HashPolicyChoice.(type) {
	case *RouteSimpleAdvancedOptions_CommonHashPolicy:
		_ = b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.CommonHashPolicy); err != nil {
			return err
		}
	case *RouteSimpleAdvancedOptions_SpecificHashPolicy:
		_ = b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.SpecificHashPolicy); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("RouteSimpleAdvancedOptions.HashPolicyChoice has unexpected type %T", x)
	}
	// rewrite_choice
	switch x := m.RewriteChoice.(type) {
	case *RouteSimpleAdvancedOptions_DisablePrefixRewrite:
		_ = b.EncodeVarint(7<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.DisablePrefixRewrite); err != nil {
			return err
		}
	case *RouteSimpleAdvancedOptions_PrefixRewrite:
		_ = b.EncodeVarint(8<<3 | proto.WireBytes)
		_ = b.EncodeStringBytes(x.PrefixRewrite)
	case nil:
	default:
		return fmt.Errorf("RouteSimpleAdvancedOptions.RewriteChoice has unexpected type %T", x)
	}
	// waf_choice
	switch x := m.WafChoice.(type) {
	case *RouteSimpleAdvancedOptions_DisableWaf:
		_ = b.EncodeVarint(15<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.DisableWaf); err != nil {
			return err
		}
	case *RouteSimpleAdvancedOptions_Waf:
		_ = b.EncodeVarint(16<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Waf); err != nil {
			return err
		}
	case *RouteSimpleAdvancedOptions_WafRule:
		_ = b.EncodeVarint(17<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.WafRule); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("RouteSimpleAdvancedOptions.WafChoice has unexpected type %T", x)
	}
	// spdy_choice
	switch x := m.SpdyChoice.(type) {
	case *RouteSimpleAdvancedOptions_DisableSpdy:
		_ = b.EncodeVarint(20<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.DisableSpdy); err != nil {
			return err
		}
	case *RouteSimpleAdvancedOptions_EnableSpdy:
		_ = b.EncodeVarint(21<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.EnableSpdy); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("RouteSimpleAdvancedOptions.SpdyChoice has unexpected type %T", x)
	}
	// websocket_choice
	switch x := m.WebsocketChoice.(type) {
	case *RouteSimpleAdvancedOptions_DisableWebSocketConfig:
		_ = b.EncodeVarint(23<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.DisableWebSocketConfig); err != nil {
			return err
		}
	case *RouteSimpleAdvancedOptions_WebSocketConfig:
		_ = b.EncodeVarint(24<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.WebSocketConfig); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("RouteSimpleAdvancedOptions.WebsocketChoice has unexpected type %T", x)
	}
	// retry_policy_choice
	switch x := m.RetryPolicyChoice.(type) {
	case *RouteSimpleAdvancedOptions_DefaultRetryPolicy:
		_ = b.EncodeVarint(26<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.DefaultRetryPolicy); err != nil {
			return err
		}
	case *RouteSimpleAdvancedOptions_RetryPolicy:
		_ = b.EncodeVarint(27<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.RetryPolicy); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("RouteSimpleAdvancedOptions.RetryPolicyChoice has unexpected type %T", x)
	}
	// buffer_choice
	switch x := m.BufferChoice.(type) {
	case *RouteSimpleAdvancedOptions_CommonBuffering:
		_ = b.EncodeVarint(30<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.CommonBuffering); err != nil {
			return err
		}
	case *RouteSimpleAdvancedOptions_BufferPolicy:
		_ = b.EncodeVarint(31<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.BufferPolicy); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("RouteSimpleAdvancedOptions.BufferChoice has unexpected type %T", x)
	}
	// mirroring_choice
	switch x := m.MirroringChoice.(type) {
	case *RouteSimpleAdvancedOptions_DisableMirroring:
		_ = b.EncodeVarint(33<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.DisableMirroring); err != nil {
			return err
		}
	case *RouteSimpleAdvancedOptions_MirrorPolicy:
		_ = b.EncodeVarint(34<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.MirrorPolicy); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("RouteSimpleAdvancedOptions.MirroringChoice has unexpected type %T", x)
	}
	// cluster_retract_choice
	switch x := m.ClusterRetractChoice.(type) {
	case *RouteSimpleAdvancedOptions_RetractCluster:
		_ = b.EncodeVarint(36<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.RetractCluster); err != nil {
			return err
		}
	case *RouteSimpleAdvancedOptions_DoNotRetractCluster:
		_ = b.EncodeVarint(37<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.DoNotRetractCluster); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("RouteSimpleAdvancedOptions.ClusterRetractChoice has unexpected type %T", x)
	}
	return nil
}

func _RouteSimpleAdvancedOptions_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*RouteSimpleAdvancedOptions)
	switch tag {
	case 2: // hash_policy_choice.common_hash_policy
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.HashPolicyChoice = &RouteSimpleAdvancedOptions_CommonHashPolicy{msg}
		return true, err
	case 3: // hash_policy_choice.specific_hash_policy
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(HashPolicyListType)
		err := b.DecodeMessage(msg)
		m.HashPolicyChoice = &RouteSimpleAdvancedOptions_SpecificHashPolicy{msg}
		return true, err
	case 7: // rewrite_choice.disable_prefix_rewrite
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.RewriteChoice = &RouteSimpleAdvancedOptions_DisablePrefixRewrite{msg}
		return true, err
	case 8: // rewrite_choice.prefix_rewrite
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.RewriteChoice = &RouteSimpleAdvancedOptions_PrefixRewrite{x}
		return true, err
	case 15: // waf_choice.disable_waf
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.WafChoice = &RouteSimpleAdvancedOptions_DisableWaf{msg}
		return true, err
	case 16: // waf_choice.waf
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema_views.ObjectRefType)
		err := b.DecodeMessage(msg)
		m.WafChoice = &RouteSimpleAdvancedOptions_Waf{msg}
		return true, err
	case 17: // waf_choice.waf_rule
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema_views.ObjectRefType)
		err := b.DecodeMessage(msg)
		m.WafChoice = &RouteSimpleAdvancedOptions_WafRule{msg}
		return true, err
	case 20: // spdy_choice.disable_spdy
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.SpdyChoice = &RouteSimpleAdvancedOptions_DisableSpdy{msg}
		return true, err
	case 21: // spdy_choice.enable_spdy
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.SpdyChoice = &RouteSimpleAdvancedOptions_EnableSpdy{msg}
		return true, err
	case 23: // websocket_choice.disable_web_socket_config
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.WebsocketChoice = &RouteSimpleAdvancedOptions_DisableWebSocketConfig{msg}
		return true, err
	case 24: // websocket_choice.web_socket_config
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema_route.WebsocketConfigType)
		err := b.DecodeMessage(msg)
		m.WebsocketChoice = &RouteSimpleAdvancedOptions_WebSocketConfig{msg}
		return true, err
	case 26: // retry_policy_choice.default_retry_policy
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.RetryPolicyChoice = &RouteSimpleAdvancedOptions_DefaultRetryPolicy{msg}
		return true, err
	case 27: // retry_policy_choice.retry_policy
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.RetryPolicyType)
		err := b.DecodeMessage(msg)
		m.RetryPolicyChoice = &RouteSimpleAdvancedOptions_RetryPolicy{msg}
		return true, err
	case 30: // buffer_choice.common_buffering
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.BufferChoice = &RouteSimpleAdvancedOptions_CommonBuffering{msg}
		return true, err
	case 31: // buffer_choice.buffer_policy
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.BufferConfigType)
		err := b.DecodeMessage(msg)
		m.BufferChoice = &RouteSimpleAdvancedOptions_BufferPolicy{msg}
		return true, err
	case 33: // mirroring_choice.disable_mirroring
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.MirroringChoice = &RouteSimpleAdvancedOptions_DisableMirroring{msg}
		return true, err
	case 34: // mirroring_choice.mirror_policy
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(MirrorPolicyType)
		err := b.DecodeMessage(msg)
		m.MirroringChoice = &RouteSimpleAdvancedOptions_MirrorPolicy{msg}
		return true, err
	case 36: // cluster_retract_choice.retract_cluster
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.ClusterRetractChoice = &RouteSimpleAdvancedOptions_RetractCluster{msg}
		return true, err
	case 37: // cluster_retract_choice.do_not_retract_cluster
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.ClusterRetractChoice = &RouteSimpleAdvancedOptions_DoNotRetractCluster{msg}
		return true, err
	default:
		return false, nil
	}
}

func _RouteSimpleAdvancedOptions_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*RouteSimpleAdvancedOptions)
	// hash_policy_choice
	switch x := m.HashPolicyChoice.(type) {
	case *RouteSimpleAdvancedOptions_CommonHashPolicy:
		s := proto.Size(x.CommonHashPolicy)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *RouteSimpleAdvancedOptions_SpecificHashPolicy:
		s := proto.Size(x.SpecificHashPolicy)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	// rewrite_choice
	switch x := m.RewriteChoice.(type) {
	case *RouteSimpleAdvancedOptions_DisablePrefixRewrite:
		s := proto.Size(x.DisablePrefixRewrite)
		n += proto.SizeVarint(7<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *RouteSimpleAdvancedOptions_PrefixRewrite:
		n += proto.SizeVarint(8<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.PrefixRewrite)))
		n += len(x.PrefixRewrite)
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	// waf_choice
	switch x := m.WafChoice.(type) {
	case *RouteSimpleAdvancedOptions_DisableWaf:
		s := proto.Size(x.DisableWaf)
		n += proto.SizeVarint(15<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *RouteSimpleAdvancedOptions_Waf:
		s := proto.Size(x.Waf)
		n += proto.SizeVarint(16<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *RouteSimpleAdvancedOptions_WafRule:
		s := proto.Size(x.WafRule)
		n += proto.SizeVarint(17<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	// spdy_choice
	switch x := m.SpdyChoice.(type) {
	case *RouteSimpleAdvancedOptions_DisableSpdy:
		s := proto.Size(x.DisableSpdy)
		n += proto.SizeVarint(20<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *RouteSimpleAdvancedOptions_EnableSpdy:
		s := proto.Size(x.EnableSpdy)
		n += proto.SizeVarint(21<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	// websocket_choice
	switch x := m.WebsocketChoice.(type) {
	case *RouteSimpleAdvancedOptions_DisableWebSocketConfig:
		s := proto.Size(x.DisableWebSocketConfig)
		n += proto.SizeVarint(23<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *RouteSimpleAdvancedOptions_WebSocketConfig:
		s := proto.Size(x.WebSocketConfig)
		n += proto.SizeVarint(24<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	// retry_policy_choice
	switch x := m.RetryPolicyChoice.(type) {
	case *RouteSimpleAdvancedOptions_DefaultRetryPolicy:
		s := proto.Size(x.DefaultRetryPolicy)
		n += proto.SizeVarint(26<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *RouteSimpleAdvancedOptions_RetryPolicy:
		s := proto.Size(x.RetryPolicy)
		n += proto.SizeVarint(27<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	// buffer_choice
	switch x := m.BufferChoice.(type) {
	case *RouteSimpleAdvancedOptions_CommonBuffering:
		s := proto.Size(x.CommonBuffering)
		n += proto.SizeVarint(30<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *RouteSimpleAdvancedOptions_BufferPolicy:
		s := proto.Size(x.BufferPolicy)
		n += proto.SizeVarint(31<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	// mirroring_choice
	switch x := m.MirroringChoice.(type) {
	case *RouteSimpleAdvancedOptions_DisableMirroring:
		s := proto.Size(x.DisableMirroring)
		n += proto.SizeVarint(33<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *RouteSimpleAdvancedOptions_MirrorPolicy:
		s := proto.Size(x.MirrorPolicy)
		n += proto.SizeVarint(34<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	// cluster_retract_choice
	switch x := m.ClusterRetractChoice.(type) {
	case *RouteSimpleAdvancedOptions_RetractCluster:
		s := proto.Size(x.RetractCluster)
		n += proto.SizeVarint(36<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *RouteSimpleAdvancedOptions_DoNotRetractCluster:
		s := proto.Size(x.DoNotRetractCluster)
		n += proto.SizeVarint(37<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// RouteTypeSimpleWithDefaultOriginPool
//
// x-displayName: "Simple Route"
// A simple route matches on path and/or HTTP method and forwards the matching traffic to the default origin pool specified outside
type RouteTypeSimpleWithDefaultOriginPool struct {
	// http_method
	//
	// x-displayName: "HTTP Method"
	// The name of the HTTP Method (GET, PUT, POST, etc)
	HttpMethod ves_io_schema4.HttpMethod `protobuf:"varint,1,opt,name=http_method,json=httpMethod,proto3,enum=ves.io.schema.HttpMethod" json:"http_method,omitempty"`
	// path
	//
	// x-displayName: "Path"
	// URI path of route
	Path *ves_io_schema4.PathMatcherType `protobuf:"bytes,2,opt,name=path" json:"path,omitempty"`
	// HostRewriteParams
	//
	// x-displayName: "Select Host Rewrite Method"
	// x-required
	// Specifies how the host header can be modified during forwarding
	//
	// Types that are valid to be assigned to HostRewriteParams:
	//	*RouteTypeSimpleWithDefaultOriginPool_AutoHostRewrite
	//	*RouteTypeSimpleWithDefaultOriginPool_HostRewrite
	//	*RouteTypeSimpleWithDefaultOriginPool_DisableHostRewrite
	HostRewriteParams isRouteTypeSimpleWithDefaultOriginPool_HostRewriteParams `protobuf_oneof:"host_rewrite_params"`
}

func (m *RouteTypeSimpleWithDefaultOriginPool) Reset()      { *m = RouteTypeSimpleWithDefaultOriginPool{} }
func (*RouteTypeSimpleWithDefaultOriginPool) ProtoMessage() {}
func (*RouteTypeSimpleWithDefaultOriginPool) Descriptor() ([]byte, []int) {
	return fileDescriptorTypes, []int{8}
}

type isRouteTypeSimpleWithDefaultOriginPool_HostRewriteParams interface {
	isRouteTypeSimpleWithDefaultOriginPool_HostRewriteParams()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type RouteTypeSimpleWithDefaultOriginPool_AutoHostRewrite struct {
	AutoHostRewrite *ves_io_schema4.Empty `protobuf:"bytes,4,opt,name=auto_host_rewrite,json=autoHostRewrite,oneof"`
}
type RouteTypeSimpleWithDefaultOriginPool_HostRewrite struct {
	HostRewrite string `protobuf:"bytes,5,opt,name=host_rewrite,json=hostRewrite,proto3,oneof"`
}
type RouteTypeSimpleWithDefaultOriginPool_DisableHostRewrite struct {
	DisableHostRewrite *ves_io_schema4.Empty `protobuf:"bytes,6,opt,name=disable_host_rewrite,json=disableHostRewrite,oneof"`
}

func (*RouteTypeSimpleWithDefaultOriginPool_AutoHostRewrite) isRouteTypeSimpleWithDefaultOriginPool_HostRewriteParams() {
}
func (*RouteTypeSimpleWithDefaultOriginPool_HostRewrite) isRouteTypeSimpleWithDefaultOriginPool_HostRewriteParams() {
}
func (*RouteTypeSimpleWithDefaultOriginPool_DisableHostRewrite) isRouteTypeSimpleWithDefaultOriginPool_HostRewriteParams() {
}

func (m *RouteTypeSimpleWithDefaultOriginPool) GetHostRewriteParams() isRouteTypeSimpleWithDefaultOriginPool_HostRewriteParams {
	if m != nil {
		return m.HostRewriteParams
	}
	return nil
}

func (m *RouteTypeSimpleWithDefaultOriginPool) GetHttpMethod() ves_io_schema4.HttpMethod {
	if m != nil {
		return m.HttpMethod
	}
	return ves_io_schema4.ANY
}

func (m *RouteTypeSimpleWithDefaultOriginPool) GetPath() *ves_io_schema4.PathMatcherType {
	if m != nil {
		return m.Path
	}
	return nil
}

func (m *RouteTypeSimpleWithDefaultOriginPool) GetAutoHostRewrite() *ves_io_schema4.Empty {
	if x, ok := m.GetHostRewriteParams().(*RouteTypeSimpleWithDefaultOriginPool_AutoHostRewrite); ok {
		return x.AutoHostRewrite
	}
	return nil
}

func (m *RouteTypeSimpleWithDefaultOriginPool) GetHostRewrite() string {
	if x, ok := m.GetHostRewriteParams().(*RouteTypeSimpleWithDefaultOriginPool_HostRewrite); ok {
		return x.HostRewrite
	}
	return ""
}

func (m *RouteTypeSimpleWithDefaultOriginPool) GetDisableHostRewrite() *ves_io_schema4.Empty {
	if x, ok := m.GetHostRewriteParams().(*RouteTypeSimpleWithDefaultOriginPool_DisableHostRewrite); ok {
		return x.DisableHostRewrite
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*RouteTypeSimpleWithDefaultOriginPool) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _RouteTypeSimpleWithDefaultOriginPool_OneofMarshaler, _RouteTypeSimpleWithDefaultOriginPool_OneofUnmarshaler, _RouteTypeSimpleWithDefaultOriginPool_OneofSizer, []interface{}{
		(*RouteTypeSimpleWithDefaultOriginPool_AutoHostRewrite)(nil),
		(*RouteTypeSimpleWithDefaultOriginPool_HostRewrite)(nil),
		(*RouteTypeSimpleWithDefaultOriginPool_DisableHostRewrite)(nil),
	}
}

func _RouteTypeSimpleWithDefaultOriginPool_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*RouteTypeSimpleWithDefaultOriginPool)
	// host_rewrite_params
	switch x := m.HostRewriteParams.(type) {
	case *RouteTypeSimpleWithDefaultOriginPool_AutoHostRewrite:
		_ = b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.AutoHostRewrite); err != nil {
			return err
		}
	case *RouteTypeSimpleWithDefaultOriginPool_HostRewrite:
		_ = b.EncodeVarint(5<<3 | proto.WireBytes)
		_ = b.EncodeStringBytes(x.HostRewrite)
	case *RouteTypeSimpleWithDefaultOriginPool_DisableHostRewrite:
		_ = b.EncodeVarint(6<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.DisableHostRewrite); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("RouteTypeSimpleWithDefaultOriginPool.HostRewriteParams has unexpected type %T", x)
	}
	return nil
}

func _RouteTypeSimpleWithDefaultOriginPool_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*RouteTypeSimpleWithDefaultOriginPool)
	switch tag {
	case 4: // host_rewrite_params.auto_host_rewrite
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.HostRewriteParams = &RouteTypeSimpleWithDefaultOriginPool_AutoHostRewrite{msg}
		return true, err
	case 5: // host_rewrite_params.host_rewrite
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.HostRewriteParams = &RouteTypeSimpleWithDefaultOriginPool_HostRewrite{x}
		return true, err
	case 6: // host_rewrite_params.disable_host_rewrite
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.HostRewriteParams = &RouteTypeSimpleWithDefaultOriginPool_DisableHostRewrite{msg}
		return true, err
	default:
		return false, nil
	}
}

func _RouteTypeSimpleWithDefaultOriginPool_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*RouteTypeSimpleWithDefaultOriginPool)
	// host_rewrite_params
	switch x := m.HostRewriteParams.(type) {
	case *RouteTypeSimpleWithDefaultOriginPool_AutoHostRewrite:
		s := proto.Size(x.AutoHostRewrite)
		n += proto.SizeVarint(4<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *RouteTypeSimpleWithDefaultOriginPool_HostRewrite:
		n += proto.SizeVarint(5<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.HostRewrite)))
		n += len(x.HostRewrite)
	case *RouteTypeSimpleWithDefaultOriginPool_DisableHostRewrite:
		s := proto.Size(x.DisableHostRewrite)
		n += proto.SizeVarint(6<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// RouteTypeSimple
//
// x-displayName: "Simple Route"
// A simple route matches on path and/or HTTP method and forwards the matching traffic to the associated pools
type RouteTypeSimple struct {
	// path
	//
	// x-displayName: "Path"
	// URI path of route
	Path *ves_io_schema4.PathMatcherType `protobuf:"bytes,1,opt,name=path" json:"path,omitempty"`
	// http_method
	//
	// x-displayName: "HTTP Method"
	// The name of the HTTP Method (GET, PUT, POST, etc)
	HttpMethod ves_io_schema4.HttpMethod `protobuf:"varint,2,opt,name=http_method,json=httpMethod,proto3,enum=ves.io.schema.HttpMethod" json:"http_method,omitempty"`
	// Origin Pools
	//
	// x-displayName: "Origin Pools"
	// Origin Pools for this route
	OriginPools []*ves_io_schema_views.OriginPoolWithWeight `protobuf:"bytes,3,rep,name=origin_pools,json=originPools" json:"origin_pools,omitempty"`
	// HostRewriteParams
	//
	// x-displayName: "Select Host Rewrite Method"
	// x-required
	// Specifies how the host header can be modified during forwarding
	//
	// Types that are valid to be assigned to HostRewriteParams:
	//	*RouteTypeSimple_AutoHostRewrite
	//	*RouteTypeSimple_HostRewrite
	//	*RouteTypeSimple_DisableHostRewrite
	HostRewriteParams isRouteTypeSimple_HostRewriteParams `protobuf_oneof:"host_rewrite_params"`
	// Advanced Options
	//
	// x-displayName: "Advanced Options"
	// Configure Advanced per route options
	AdvancedOptions *RouteSimpleAdvancedOptions `protobuf:"bytes,8,opt,name=advanced_options,json=advancedOptions" json:"advanced_options,omitempty"`
}

func (m *RouteTypeSimple) Reset()                    { *m = RouteTypeSimple{} }
func (*RouteTypeSimple) ProtoMessage()               {}
func (*RouteTypeSimple) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{9} }

type isRouteTypeSimple_HostRewriteParams interface {
	isRouteTypeSimple_HostRewriteParams()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type RouteTypeSimple_AutoHostRewrite struct {
	AutoHostRewrite *ves_io_schema4.Empty `protobuf:"bytes,5,opt,name=auto_host_rewrite,json=autoHostRewrite,oneof"`
}
type RouteTypeSimple_HostRewrite struct {
	HostRewrite string `protobuf:"bytes,6,opt,name=host_rewrite,json=hostRewrite,proto3,oneof"`
}
type RouteTypeSimple_DisableHostRewrite struct {
	DisableHostRewrite *ves_io_schema4.Empty `protobuf:"bytes,7,opt,name=disable_host_rewrite,json=disableHostRewrite,oneof"`
}

func (*RouteTypeSimple_AutoHostRewrite) isRouteTypeSimple_HostRewriteParams()    {}
func (*RouteTypeSimple_HostRewrite) isRouteTypeSimple_HostRewriteParams()        {}
func (*RouteTypeSimple_DisableHostRewrite) isRouteTypeSimple_HostRewriteParams() {}

func (m *RouteTypeSimple) GetHostRewriteParams() isRouteTypeSimple_HostRewriteParams {
	if m != nil {
		return m.HostRewriteParams
	}
	return nil
}

func (m *RouteTypeSimple) GetPath() *ves_io_schema4.PathMatcherType {
	if m != nil {
		return m.Path
	}
	return nil
}

func (m *RouteTypeSimple) GetHttpMethod() ves_io_schema4.HttpMethod {
	if m != nil {
		return m.HttpMethod
	}
	return ves_io_schema4.ANY
}

func (m *RouteTypeSimple) GetOriginPools() []*ves_io_schema_views.OriginPoolWithWeight {
	if m != nil {
		return m.OriginPools
	}
	return nil
}

func (m *RouteTypeSimple) GetAutoHostRewrite() *ves_io_schema4.Empty {
	if x, ok := m.GetHostRewriteParams().(*RouteTypeSimple_AutoHostRewrite); ok {
		return x.AutoHostRewrite
	}
	return nil
}

func (m *RouteTypeSimple) GetHostRewrite() string {
	if x, ok := m.GetHostRewriteParams().(*RouteTypeSimple_HostRewrite); ok {
		return x.HostRewrite
	}
	return ""
}

func (m *RouteTypeSimple) GetDisableHostRewrite() *ves_io_schema4.Empty {
	if x, ok := m.GetHostRewriteParams().(*RouteTypeSimple_DisableHostRewrite); ok {
		return x.DisableHostRewrite
	}
	return nil
}

func (m *RouteTypeSimple) GetAdvancedOptions() *RouteSimpleAdvancedOptions {
	if m != nil {
		return m.AdvancedOptions
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*RouteTypeSimple) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _RouteTypeSimple_OneofMarshaler, _RouteTypeSimple_OneofUnmarshaler, _RouteTypeSimple_OneofSizer, []interface{}{
		(*RouteTypeSimple_AutoHostRewrite)(nil),
		(*RouteTypeSimple_HostRewrite)(nil),
		(*RouteTypeSimple_DisableHostRewrite)(nil),
	}
}

func _RouteTypeSimple_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*RouteTypeSimple)
	// host_rewrite_params
	switch x := m.HostRewriteParams.(type) {
	case *RouteTypeSimple_AutoHostRewrite:
		_ = b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.AutoHostRewrite); err != nil {
			return err
		}
	case *RouteTypeSimple_HostRewrite:
		_ = b.EncodeVarint(6<<3 | proto.WireBytes)
		_ = b.EncodeStringBytes(x.HostRewrite)
	case *RouteTypeSimple_DisableHostRewrite:
		_ = b.EncodeVarint(7<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.DisableHostRewrite); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("RouteTypeSimple.HostRewriteParams has unexpected type %T", x)
	}
	return nil
}

func _RouteTypeSimple_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*RouteTypeSimple)
	switch tag {
	case 5: // host_rewrite_params.auto_host_rewrite
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.HostRewriteParams = &RouteTypeSimple_AutoHostRewrite{msg}
		return true, err
	case 6: // host_rewrite_params.host_rewrite
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.HostRewriteParams = &RouteTypeSimple_HostRewrite{x}
		return true, err
	case 7: // host_rewrite_params.disable_host_rewrite
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.HostRewriteParams = &RouteTypeSimple_DisableHostRewrite{msg}
		return true, err
	default:
		return false, nil
	}
}

func _RouteTypeSimple_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*RouteTypeSimple)
	// host_rewrite_params
	switch x := m.HostRewriteParams.(type) {
	case *RouteTypeSimple_AutoHostRewrite:
		s := proto.Size(x.AutoHostRewrite)
		n += proto.SizeVarint(5<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *RouteTypeSimple_HostRewrite:
		n += proto.SizeVarint(6<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.HostRewrite)))
		n += len(x.HostRewrite)
	case *RouteTypeSimple_DisableHostRewrite:
		s := proto.Size(x.DisableHostRewrite)
		n += proto.SizeVarint(7<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// RouteTypeRedirect
//
//  x-displayName: "Redirect Route"
// A redirect route matches on patch and/or HTTP method and redirects the matching traffic to a different URL
type RouteTypeRedirect struct {
	// path
	//
	// x-displayName: "Path"
	// URI path of route
	Path *ves_io_schema4.PathMatcherType `protobuf:"bytes,1,opt,name=path" json:"path,omitempty"`
	// http_method
	//
	// x-displayName: "HTTP Method"
	// The name of the HTTP Method (GET, PUT, POST, etc)
	HttpMethod ves_io_schema4.HttpMethod `protobuf:"varint,2,opt,name=http_method,json=httpMethod,proto3,enum=ves.io.schema.HttpMethod" json:"http_method,omitempty"`
	// route_redirect
	//
	// x-displayName: "Redirect Parameters"
	// Send redirect response
	RouteRedirect *ves_io_schema_route.RouteRedirect `protobuf:"bytes,3,opt,name=route_redirect,json=routeRedirect" json:"route_redirect,omitempty"`
}

func (m *RouteTypeRedirect) Reset()                    { *m = RouteTypeRedirect{} }
func (*RouteTypeRedirect) ProtoMessage()               {}
func (*RouteTypeRedirect) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{10} }

func (m *RouteTypeRedirect) GetPath() *ves_io_schema4.PathMatcherType {
	if m != nil {
		return m.Path
	}
	return nil
}

func (m *RouteTypeRedirect) GetHttpMethod() ves_io_schema4.HttpMethod {
	if m != nil {
		return m.HttpMethod
	}
	return ves_io_schema4.ANY
}

func (m *RouteTypeRedirect) GetRouteRedirect() *ves_io_schema_route.RouteRedirect {
	if m != nil {
		return m.RouteRedirect
	}
	return nil
}

// RouteTypeDirectResponse
//
//  x-displayName: "Direct Response Route"
// A direct response route matches on patch and/or HTTP method and responds directly to the matching traffic
type RouteTypeDirectResponse struct {
	// path
	//
	// x-displayName: "Path"
	// URI path of route
	Path *ves_io_schema4.PathMatcherType `protobuf:"bytes,1,opt,name=path" json:"path,omitempty"`
	// http_method
	//
	// x-displayName: "HTTP Method"
	// The name of the HTTP Method (GET, PUT, POST, etc)
	HttpMethod ves_io_schema4.HttpMethod `protobuf:"varint,2,opt,name=http_method,json=httpMethod,proto3,enum=ves.io.schema.HttpMethod" json:"http_method,omitempty"`
	// route_direct_response
	//
	// x-displayName: "Direct Response"
	// Send direct response
	RouteDirectResponse *ves_io_schema_route.RouteDirectResponse `protobuf:"bytes,3,opt,name=route_direct_response,json=routeDirectResponse" json:"route_direct_response,omitempty"`
}

func (m *RouteTypeDirectResponse) Reset()                    { *m = RouteTypeDirectResponse{} }
func (*RouteTypeDirectResponse) ProtoMessage()               {}
func (*RouteTypeDirectResponse) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{11} }

func (m *RouteTypeDirectResponse) GetPath() *ves_io_schema4.PathMatcherType {
	if m != nil {
		return m.Path
	}
	return nil
}

func (m *RouteTypeDirectResponse) GetHttpMethod() ves_io_schema4.HttpMethod {
	if m != nil {
		return m.HttpMethod
	}
	return ves_io_schema4.ANY
}

func (m *RouteTypeDirectResponse) GetRouteDirectResponse() *ves_io_schema_route.RouteDirectResponse {
	if m != nil {
		return m.RouteDirectResponse
	}
	return nil
}

// RouteTypeCustomRoute
//
//  x-displayName: "Custom Route Object"
// A custom route uses a route object created outside of this view.
type RouteTypeCustomRoute struct {
	// route_refs
	//
	// x-displayName: "Reference to Custom Route"
	// Reference to a custom route object
	RouteRef *ves_io_schema_views.ObjectRefType `protobuf:"bytes,1,opt,name=route_ref,json=routeRef" json:"route_ref,omitempty"`
}

func (m *RouteTypeCustomRoute) Reset()                    { *m = RouteTypeCustomRoute{} }
func (*RouteTypeCustomRoute) ProtoMessage()               {}
func (*RouteTypeCustomRoute) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{12} }

func (m *RouteTypeCustomRoute) GetRouteRef() *ves_io_schema_views.ObjectRefType {
	if m != nil {
		return m.RouteRef
	}
	return nil
}

// RouteType
//
// x-displayName: "Route Type"
// This defines various options to define a route
type RouteType struct {
	// route choice
	//
	// x-displayName: "Select Type of Route"
	// x-required
	// Selection of different types of routes
	//
	// Types that are valid to be assigned to Choice:
	//	*RouteType_SimpleRoute
	//	*RouteType_RedirectRoute
	//	*RouteType_DirectResponseRoute
	//	*RouteType_CustomRouteObject
	Choice isRouteType_Choice `protobuf_oneof:"choice"`
}

func (m *RouteType) Reset()                    { *m = RouteType{} }
func (*RouteType) ProtoMessage()               {}
func (*RouteType) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{13} }

type isRouteType_Choice interface {
	isRouteType_Choice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type RouteType_SimpleRoute struct {
	SimpleRoute *RouteTypeSimple `protobuf:"bytes,1,opt,name=simple_route,json=simpleRoute,oneof"`
}
type RouteType_RedirectRoute struct {
	RedirectRoute *RouteTypeRedirect `protobuf:"bytes,2,opt,name=redirect_route,json=redirectRoute,oneof"`
}
type RouteType_DirectResponseRoute struct {
	DirectResponseRoute *RouteTypeDirectResponse `protobuf:"bytes,3,opt,name=direct_response_route,json=directResponseRoute,oneof"`
}
type RouteType_CustomRouteObject struct {
	CustomRouteObject *RouteTypeCustomRoute `protobuf:"bytes,4,opt,name=custom_route_object,json=customRouteObject,oneof"`
}

func (*RouteType_SimpleRoute) isRouteType_Choice()         {}
func (*RouteType_RedirectRoute) isRouteType_Choice()       {}
func (*RouteType_DirectResponseRoute) isRouteType_Choice() {}
func (*RouteType_CustomRouteObject) isRouteType_Choice()   {}

func (m *RouteType) GetChoice() isRouteType_Choice {
	if m != nil {
		return m.Choice
	}
	return nil
}

func (m *RouteType) GetSimpleRoute() *RouteTypeSimple {
	if x, ok := m.GetChoice().(*RouteType_SimpleRoute); ok {
		return x.SimpleRoute
	}
	return nil
}

func (m *RouteType) GetRedirectRoute() *RouteTypeRedirect {
	if x, ok := m.GetChoice().(*RouteType_RedirectRoute); ok {
		return x.RedirectRoute
	}
	return nil
}

func (m *RouteType) GetDirectResponseRoute() *RouteTypeDirectResponse {
	if x, ok := m.GetChoice().(*RouteType_DirectResponseRoute); ok {
		return x.DirectResponseRoute
	}
	return nil
}

func (m *RouteType) GetCustomRouteObject() *RouteTypeCustomRoute {
	if x, ok := m.GetChoice().(*RouteType_CustomRouteObject); ok {
		return x.CustomRouteObject
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*RouteType) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _RouteType_OneofMarshaler, _RouteType_OneofUnmarshaler, _RouteType_OneofSizer, []interface{}{
		(*RouteType_SimpleRoute)(nil),
		(*RouteType_RedirectRoute)(nil),
		(*RouteType_DirectResponseRoute)(nil),
		(*RouteType_CustomRouteObject)(nil),
	}
}

func _RouteType_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*RouteType)
	// choice
	switch x := m.Choice.(type) {
	case *RouteType_SimpleRoute:
		_ = b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.SimpleRoute); err != nil {
			return err
		}
	case *RouteType_RedirectRoute:
		_ = b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.RedirectRoute); err != nil {
			return err
		}
	case *RouteType_DirectResponseRoute:
		_ = b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.DirectResponseRoute); err != nil {
			return err
		}
	case *RouteType_CustomRouteObject:
		_ = b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.CustomRouteObject); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("RouteType.Choice has unexpected type %T", x)
	}
	return nil
}

func _RouteType_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*RouteType)
	switch tag {
	case 1: // choice.simple_route
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(RouteTypeSimple)
		err := b.DecodeMessage(msg)
		m.Choice = &RouteType_SimpleRoute{msg}
		return true, err
	case 2: // choice.redirect_route
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(RouteTypeRedirect)
		err := b.DecodeMessage(msg)
		m.Choice = &RouteType_RedirectRoute{msg}
		return true, err
	case 3: // choice.direct_response_route
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(RouteTypeDirectResponse)
		err := b.DecodeMessage(msg)
		m.Choice = &RouteType_DirectResponseRoute{msg}
		return true, err
	case 4: // choice.custom_route_object
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(RouteTypeCustomRoute)
		err := b.DecodeMessage(msg)
		m.Choice = &RouteType_CustomRouteObject{msg}
		return true, err
	default:
		return false, nil
	}
}

func _RouteType_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*RouteType)
	// choice
	switch x := m.Choice.(type) {
	case *RouteType_SimpleRoute:
		s := proto.Size(x.SimpleRoute)
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *RouteType_RedirectRoute:
		s := proto.Size(x.RedirectRoute)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *RouteType_DirectResponseRoute:
		s := proto.Size(x.DirectResponseRoute)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *RouteType_CustomRouteObject:
		s := proto.Size(x.CustomRouteObject)
		n += proto.SizeVarint(4<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// Advanced options
//
// x-displayName: "Advanced Options"
// This defines various options to define a route
type AdvancedOptionsType struct {
	// Headers to add in request
	//
	// x-displayName: "Add Request Headers"
	// Headers are key-value pairs to be added to HTTP request being routed towards upstream.
	// Headers specified at this level are applied after headers from matched Route are applied
	RequestHeadersToAdd []*ves_io_schema4.HeaderManipulationOptionType `protobuf:"bytes,1,rep,name=request_headers_to_add,json=requestHeadersToAdd" json:"request_headers_to_add,omitempty"`
	// Header to be removed from request
	//
	// x-displayName: "Remove Request Headers"
	// x-example: "host"
	// List of keys of Headers to be removed from the HTTP request being sent towards upstream.
	RequestHeadersToRemove []string `protobuf:"bytes,2,rep,name=request_headers_to_remove,json=requestHeadersToRemove" json:"request_headers_to_remove,omitempty"`
	// Headers to add in response
	//
	// x-displayName: "Add Response Headers"
	// Headers are key-value pairs to be added to HTTP response being sent towards downstream.
	// Headers specified at this level are applied after headers from matched Route are applied
	ResponseHeadersToAdd []*ves_io_schema4.HeaderManipulationOptionType `protobuf:"bytes,3,rep,name=response_headers_to_add,json=responseHeadersToAdd" json:"response_headers_to_add,omitempty"`
	// Header to be removed from response
	//
	// x-displayName: "Remove Response Headers"
	// x-example: "host"
	// List of keys of Headers to be removed from the HTTP response being sent towards downstream.
	ResponseHeadersToRemove []string `protobuf:"bytes,4,rep,name=response_headers_to_remove,json=responseHeadersToRemove" json:"response_headers_to_remove,omitempty"`
	// Maximum request header size
	//
	// x-displayName: "Maximum Request Header Size"
	// The maximum request header size for downstream connections, in KiB.
	// A HTTP 431 (Request Header Fields Too Large) error code is sent for requests that exceed this size.
	//
	// If multiple loadbalancers share the same advertise_policy, the highest value configured across all
	// such loadbalancers is used for all the loadbalancers in question.
	MaxRequestHeaderSize uint32 `protobuf:"varint,5,opt,name=max_request_header_size,json=maxRequestHeaderSize,proto3" json:"max_request_header_size,omitempty"`
	// Buffer configuration for requests
	//
	// x-displayName: "Buffer Policy"
	// Some upstream applications are not capable of handling streamed data and high network latency.
	// This config enables buffering the entire request before sending to upstream application. We can
	// specify the maximum buffer size and buffer interval with this config.
	BufferPolicy *ves_io_schema4.BufferConfigType `protobuf:"bytes,6,opt,name=buffer_policy,json=bufferPolicy" json:"buffer_policy,omitempty"`
	// Compression configuration
	//
	// x-displayName: "Compression Parameters"
	// Enables loadbalancer to compress dispatched data from an upstream service upon client request.
	// Only GZIP compression is supported
	CompressionParams *ves_io_schema_virtual_host.CompressionType `protobuf:"bytes,7,opt,name=compression_params,json=compressionParams" json:"compression_params,omitempty"`
	// Custom Errors
	//
	// x-displayName: "Custom Error Responses"
	//
	// Map of integer error codes as keys and string values that can be used to provide custom
	// http pages for each error code.
	// Key of the map can be either response code class or HTTP Error code. Response code classes
	// for key is configured as follows
	// 3 -- for 3xx response code class
	// 4 -- for 4xx response code class
	// 5 -- for 5xx response code class
	// Value of the map is string which represents custom HTTP responses.
	// Specific response code takes preference when both response code and response code class
	// matches for a request.
	CustomErrors map[uint32]string `protobuf:"bytes,8,rep,name=custom_errors,json=customErrors" json:"custom_errors,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// javascript_info
	//
	// x-displayName: "Javascript Info"
	// Custom JavaScript Configuration. Custom JavaScript code can be executed at various stages of request processing.
	JavascriptInfo *ves_io_schema_virtual_host.JavaScriptConfigType `protobuf:"bytes,9,opt,name=javascript_info,json=javascriptInfo" json:"javascript_info,omitempty"`
	// JSON Web Token authentication (JWT) configuration for requests
	//
	// x-displayName: "JWT Config"
	// This HTTP filter specifies how to verify JSON Web Token (JWT). It will verify its signature,
	// audiences and issuer
	Jwt []*ves_io_schema_views.ObjectRefType `protobuf:"bytes,10,rep,name=jwt" json:"jwt,omitempty"`
	// Idle timeout
	//
	// x-displayName: "Idle Timeout"
	// x-example: "2000"
	// The amount of time that a stream can exist without upstream or downstream activity, in milliseconds.
	// The stream is terminated with a HTTP 408 (Request Timeout) error code if no upstream response header has been
	// received, otherwise the stream is reset.
	IdleTimeout uint32 `protobuf:"varint,11,opt,name=idle_timeout,json=idleTimeout,proto3" json:"idle_timeout,omitempty"`
	// Disable the use of default Volterra error pages
	//
	// x-displayName: "Disable Default Error Pages"
	// Disable the use of default Volterra error pages.
	DisableDefaultErrorPages bool `protobuf:"varint,13,opt,name=disable_default_error_pages,json=disableDefaultErrorPages,proto3" json:"disable_default_error_pages,omitempty"`
}

func (m *AdvancedOptionsType) Reset()                    { *m = AdvancedOptionsType{} }
func (*AdvancedOptionsType) ProtoMessage()               {}
func (*AdvancedOptionsType) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{14} }

func (m *AdvancedOptionsType) GetRequestHeadersToAdd() []*ves_io_schema4.HeaderManipulationOptionType {
	if m != nil {
		return m.RequestHeadersToAdd
	}
	return nil
}

func (m *AdvancedOptionsType) GetRequestHeadersToRemove() []string {
	if m != nil {
		return m.RequestHeadersToRemove
	}
	return nil
}

func (m *AdvancedOptionsType) GetResponseHeadersToAdd() []*ves_io_schema4.HeaderManipulationOptionType {
	if m != nil {
		return m.ResponseHeadersToAdd
	}
	return nil
}

func (m *AdvancedOptionsType) GetResponseHeadersToRemove() []string {
	if m != nil {
		return m.ResponseHeadersToRemove
	}
	return nil
}

func (m *AdvancedOptionsType) GetMaxRequestHeaderSize() uint32 {
	if m != nil {
		return m.MaxRequestHeaderSize
	}
	return 0
}

func (m *AdvancedOptionsType) GetBufferPolicy() *ves_io_schema4.BufferConfigType {
	if m != nil {
		return m.BufferPolicy
	}
	return nil
}

func (m *AdvancedOptionsType) GetCompressionParams() *ves_io_schema_virtual_host.CompressionType {
	if m != nil {
		return m.CompressionParams
	}
	return nil
}

func (m *AdvancedOptionsType) GetCustomErrors() map[uint32]string {
	if m != nil {
		return m.CustomErrors
	}
	return nil
}

func (m *AdvancedOptionsType) GetJavascriptInfo() *ves_io_schema_virtual_host.JavaScriptConfigType {
	if m != nil {
		return m.JavascriptInfo
	}
	return nil
}

func (m *AdvancedOptionsType) GetJwt() []*ves_io_schema_views.ObjectRefType {
	if m != nil {
		return m.Jwt
	}
	return nil
}

func (m *AdvancedOptionsType) GetIdleTimeout() uint32 {
	if m != nil {
		return m.IdleTimeout
	}
	return 0
}

func (m *AdvancedOptionsType) GetDisableDefaultErrorPages() bool {
	if m != nil {
		return m.DisableDefaultErrorPages
	}
	return false
}

// policy based challenge
//
// x-displayName: "Policy Based Challenge"
// Specifies the settings for policy rule based challenge
type PolicyBasedChallenge struct {
	// Javascript challenge parameters choice
	//
	// x-displayName: "Javascript Challenge Parameters"
	// Select Default or Custom Parameters
	//
	// Types that are valid to be assigned to JsChallengeParametersChoice:
	//	*PolicyBasedChallenge_DefaultJsChallengeParameters
	//	*PolicyBasedChallenge_JsChallengeParameters
	JsChallengeParametersChoice isPolicyBasedChallenge_JsChallengeParametersChoice `protobuf_oneof:"js_challenge_parameters_choice"`
	// Captcha challenge parameters choice
	//
	// x-displayName: "Captcha Challenge Parameters"
	// Select Default or Custom Parameters
	//
	// Types that are valid to be assigned to CaptchaChallengeParametersChoice:
	//	*PolicyBasedChallenge_DefaultCaptchaChallengeParameters
	//	*PolicyBasedChallenge_CaptchaChallengeParameters
	CaptchaChallengeParametersChoice isPolicyBasedChallenge_CaptchaChallengeParametersChoice `protobuf_oneof:"captcha_challenge_parameters_choice"`
	// Temporary blocking parameters choice
	//
	// x-displayName: "Temporary Blocking Parameters"
	// Select Default or Custom Parameters
	//
	// Types that are valid to be assigned to TemporaryBlockingParametersChoice:
	//	*PolicyBasedChallenge_DefaultTemporaryBlockingParameters
	//	*PolicyBasedChallenge_TemporaryUserBlocking
	TemporaryBlockingParametersChoice isPolicyBasedChallenge_TemporaryBlockingParametersChoice `protobuf_oneof:"temporary_blocking_parameters_choice"`
	// Malicious user mitigation choice
	//
	// x-displayName: "Malicious User Mitigation Settings"
	// Select default mitigation or custom mitigation settings
	//
	// Types that are valid to be assigned to MaliciousUserMitigationChoice:
	//	*PolicyBasedChallenge_DefaultMitigationSettings
	//	*PolicyBasedChallenge_MaliciousUserMitigation
	MaliciousUserMitigationChoice isPolicyBasedChallenge_MaliciousUserMitigationChoice `protobuf_oneof:"malicious_user_mitigation_choice"`
	// challenge choice
	//
	// x-displayName: "Select Type of Challenge"
	// x-required
	// Select the default challenge type for all requests. This can be overriden using the challenge rule list.
	//
	// Types that are valid to be assigned to ChallengeChoice:
	//	*PolicyBasedChallenge_NoChallenge
	//	*PolicyBasedChallenge_AlwaysEnableJsChallenge
	//	*PolicyBasedChallenge_AlwaysEnableCaptchaChallenge
	ChallengeChoice isPolicyBasedChallenge_ChallengeChoice `protobuf_oneof:"challenge_choice"`
	// Challenge rule list
	//
	// x-displayName: "Challenge rule list"
	// list challenge rules to be used in policy based challenge
	RuleList *ChallengeRuleList `protobuf:"bytes,18,opt,name=rule_list,json=ruleList" json:"rule_list,omitempty"`
}

func (m *PolicyBasedChallenge) Reset()                    { *m = PolicyBasedChallenge{} }
func (*PolicyBasedChallenge) ProtoMessage()               {}
func (*PolicyBasedChallenge) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{15} }

type isPolicyBasedChallenge_JsChallengeParametersChoice interface {
	isPolicyBasedChallenge_JsChallengeParametersChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isPolicyBasedChallenge_CaptchaChallengeParametersChoice interface {
	isPolicyBasedChallenge_CaptchaChallengeParametersChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isPolicyBasedChallenge_TemporaryBlockingParametersChoice interface {
	isPolicyBasedChallenge_TemporaryBlockingParametersChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isPolicyBasedChallenge_MaliciousUserMitigationChoice interface {
	isPolicyBasedChallenge_MaliciousUserMitigationChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isPolicyBasedChallenge_ChallengeChoice interface {
	isPolicyBasedChallenge_ChallengeChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type PolicyBasedChallenge_DefaultJsChallengeParameters struct {
	DefaultJsChallengeParameters *ves_io_schema4.Empty `protobuf:"bytes,2,opt,name=default_js_challenge_parameters,json=defaultJsChallengeParameters,oneof"`
}
type PolicyBasedChallenge_JsChallengeParameters struct {
	JsChallengeParameters *ves_io_schema_virtual_host.JavascriptChallengeType `protobuf:"bytes,3,opt,name=js_challenge_parameters,json=jsChallengeParameters,oneof"`
}
type PolicyBasedChallenge_DefaultCaptchaChallengeParameters struct {
	DefaultCaptchaChallengeParameters *ves_io_schema4.Empty `protobuf:"bytes,5,opt,name=default_captcha_challenge_parameters,json=defaultCaptchaChallengeParameters,oneof"`
}
type PolicyBasedChallenge_CaptchaChallengeParameters struct {
	CaptchaChallengeParameters *ves_io_schema_virtual_host.CaptchaChallengeType `protobuf:"bytes,6,opt,name=captcha_challenge_parameters,json=captchaChallengeParameters,oneof"`
}
type PolicyBasedChallenge_DefaultTemporaryBlockingParameters struct {
	DefaultTemporaryBlockingParameters *ves_io_schema4.Empty `protobuf:"bytes,8,opt,name=default_temporary_blocking_parameters,json=defaultTemporaryBlockingParameters,oneof"`
}
type PolicyBasedChallenge_TemporaryUserBlocking struct {
	TemporaryUserBlocking *ves_io_schema_virtual_host.TemporaryUserBlockingType `protobuf:"bytes,9,opt,name=temporary_user_blocking,json=temporaryUserBlocking,oneof"`
}
type PolicyBasedChallenge_DefaultMitigationSettings struct {
	DefaultMitigationSettings *ves_io_schema4.Empty `protobuf:"bytes,11,opt,name=default_mitigation_settings,json=defaultMitigationSettings,oneof"`
}
type PolicyBasedChallenge_MaliciousUserMitigation struct {
	MaliciousUserMitigation *ves_io_schema_views.ObjectRefType `protobuf:"bytes,12,opt,name=malicious_user_mitigation,json=maliciousUserMitigation,oneof"`
}
type PolicyBasedChallenge_NoChallenge struct {
	NoChallenge *ves_io_schema4.Empty `protobuf:"bytes,14,opt,name=no_challenge,json=noChallenge,oneof"`
}
type PolicyBasedChallenge_AlwaysEnableJsChallenge struct {
	AlwaysEnableJsChallenge *ves_io_schema4.Empty `protobuf:"bytes,15,opt,name=always_enable_js_challenge,json=alwaysEnableJsChallenge,oneof"`
}
type PolicyBasedChallenge_AlwaysEnableCaptchaChallenge struct {
	AlwaysEnableCaptchaChallenge *ves_io_schema4.Empty `protobuf:"bytes,16,opt,name=always_enable_captcha_challenge,json=alwaysEnableCaptchaChallenge,oneof"`
}

func (*PolicyBasedChallenge_DefaultJsChallengeParameters) isPolicyBasedChallenge_JsChallengeParametersChoice() {
}
func (*PolicyBasedChallenge_JsChallengeParameters) isPolicyBasedChallenge_JsChallengeParametersChoice() {
}
func (*PolicyBasedChallenge_DefaultCaptchaChallengeParameters) isPolicyBasedChallenge_CaptchaChallengeParametersChoice() {
}
func (*PolicyBasedChallenge_CaptchaChallengeParameters) isPolicyBasedChallenge_CaptchaChallengeParametersChoice() {
}
func (*PolicyBasedChallenge_DefaultTemporaryBlockingParameters) isPolicyBasedChallenge_TemporaryBlockingParametersChoice() {
}
func (*PolicyBasedChallenge_TemporaryUserBlocking) isPolicyBasedChallenge_TemporaryBlockingParametersChoice() {
}
func (*PolicyBasedChallenge_DefaultMitigationSettings) isPolicyBasedChallenge_MaliciousUserMitigationChoice() {
}
func (*PolicyBasedChallenge_MaliciousUserMitigation) isPolicyBasedChallenge_MaliciousUserMitigationChoice() {
}
func (*PolicyBasedChallenge_NoChallenge) isPolicyBasedChallenge_ChallengeChoice()                  {}
func (*PolicyBasedChallenge_AlwaysEnableJsChallenge) isPolicyBasedChallenge_ChallengeChoice()      {}
func (*PolicyBasedChallenge_AlwaysEnableCaptchaChallenge) isPolicyBasedChallenge_ChallengeChoice() {}

func (m *PolicyBasedChallenge) GetJsChallengeParametersChoice() isPolicyBasedChallenge_JsChallengeParametersChoice {
	if m != nil {
		return m.JsChallengeParametersChoice
	}
	return nil
}
func (m *PolicyBasedChallenge) GetCaptchaChallengeParametersChoice() isPolicyBasedChallenge_CaptchaChallengeParametersChoice {
	if m != nil {
		return m.CaptchaChallengeParametersChoice
	}
	return nil
}
func (m *PolicyBasedChallenge) GetTemporaryBlockingParametersChoice() isPolicyBasedChallenge_TemporaryBlockingParametersChoice {
	if m != nil {
		return m.TemporaryBlockingParametersChoice
	}
	return nil
}
func (m *PolicyBasedChallenge) GetMaliciousUserMitigationChoice() isPolicyBasedChallenge_MaliciousUserMitigationChoice {
	if m != nil {
		return m.MaliciousUserMitigationChoice
	}
	return nil
}
func (m *PolicyBasedChallenge) GetChallengeChoice() isPolicyBasedChallenge_ChallengeChoice {
	if m != nil {
		return m.ChallengeChoice
	}
	return nil
}

func (m *PolicyBasedChallenge) GetDefaultJsChallengeParameters() *ves_io_schema4.Empty {
	if x, ok := m.GetJsChallengeParametersChoice().(*PolicyBasedChallenge_DefaultJsChallengeParameters); ok {
		return x.DefaultJsChallengeParameters
	}
	return nil
}

func (m *PolicyBasedChallenge) GetJsChallengeParameters() *ves_io_schema_virtual_host.JavascriptChallengeType {
	if x, ok := m.GetJsChallengeParametersChoice().(*PolicyBasedChallenge_JsChallengeParameters); ok {
		return x.JsChallengeParameters
	}
	return nil
}

func (m *PolicyBasedChallenge) GetDefaultCaptchaChallengeParameters() *ves_io_schema4.Empty {
	if x, ok := m.GetCaptchaChallengeParametersChoice().(*PolicyBasedChallenge_DefaultCaptchaChallengeParameters); ok {
		return x.DefaultCaptchaChallengeParameters
	}
	return nil
}

func (m *PolicyBasedChallenge) GetCaptchaChallengeParameters() *ves_io_schema_virtual_host.CaptchaChallengeType {
	if x, ok := m.GetCaptchaChallengeParametersChoice().(*PolicyBasedChallenge_CaptchaChallengeParameters); ok {
		return x.CaptchaChallengeParameters
	}
	return nil
}

func (m *PolicyBasedChallenge) GetDefaultTemporaryBlockingParameters() *ves_io_schema4.Empty {
	if x, ok := m.GetTemporaryBlockingParametersChoice().(*PolicyBasedChallenge_DefaultTemporaryBlockingParameters); ok {
		return x.DefaultTemporaryBlockingParameters
	}
	return nil
}

func (m *PolicyBasedChallenge) GetTemporaryUserBlocking() *ves_io_schema_virtual_host.TemporaryUserBlockingType {
	if x, ok := m.GetTemporaryBlockingParametersChoice().(*PolicyBasedChallenge_TemporaryUserBlocking); ok {
		return x.TemporaryUserBlocking
	}
	return nil
}

func (m *PolicyBasedChallenge) GetDefaultMitigationSettings() *ves_io_schema4.Empty {
	if x, ok := m.GetMaliciousUserMitigationChoice().(*PolicyBasedChallenge_DefaultMitigationSettings); ok {
		return x.DefaultMitigationSettings
	}
	return nil
}

func (m *PolicyBasedChallenge) GetMaliciousUserMitigation() *ves_io_schema_views.ObjectRefType {
	if x, ok := m.GetMaliciousUserMitigationChoice().(*PolicyBasedChallenge_MaliciousUserMitigation); ok {
		return x.MaliciousUserMitigation
	}
	return nil
}

func (m *PolicyBasedChallenge) GetNoChallenge() *ves_io_schema4.Empty {
	if x, ok := m.GetChallengeChoice().(*PolicyBasedChallenge_NoChallenge); ok {
		return x.NoChallenge
	}
	return nil
}

func (m *PolicyBasedChallenge) GetAlwaysEnableJsChallenge() *ves_io_schema4.Empty {
	if x, ok := m.GetChallengeChoice().(*PolicyBasedChallenge_AlwaysEnableJsChallenge); ok {
		return x.AlwaysEnableJsChallenge
	}
	return nil
}

func (m *PolicyBasedChallenge) GetAlwaysEnableCaptchaChallenge() *ves_io_schema4.Empty {
	if x, ok := m.GetChallengeChoice().(*PolicyBasedChallenge_AlwaysEnableCaptchaChallenge); ok {
		return x.AlwaysEnableCaptchaChallenge
	}
	return nil
}

func (m *PolicyBasedChallenge) GetRuleList() *ChallengeRuleList {
	if m != nil {
		return m.RuleList
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*PolicyBasedChallenge) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _PolicyBasedChallenge_OneofMarshaler, _PolicyBasedChallenge_OneofUnmarshaler, _PolicyBasedChallenge_OneofSizer, []interface{}{
		(*PolicyBasedChallenge_DefaultJsChallengeParameters)(nil),
		(*PolicyBasedChallenge_JsChallengeParameters)(nil),
		(*PolicyBasedChallenge_DefaultCaptchaChallengeParameters)(nil),
		(*PolicyBasedChallenge_CaptchaChallengeParameters)(nil),
		(*PolicyBasedChallenge_DefaultTemporaryBlockingParameters)(nil),
		(*PolicyBasedChallenge_TemporaryUserBlocking)(nil),
		(*PolicyBasedChallenge_DefaultMitigationSettings)(nil),
		(*PolicyBasedChallenge_MaliciousUserMitigation)(nil),
		(*PolicyBasedChallenge_NoChallenge)(nil),
		(*PolicyBasedChallenge_AlwaysEnableJsChallenge)(nil),
		(*PolicyBasedChallenge_AlwaysEnableCaptchaChallenge)(nil),
	}
}

func _PolicyBasedChallenge_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*PolicyBasedChallenge)
	// js_challenge_parameters_choice
	switch x := m.JsChallengeParametersChoice.(type) {
	case *PolicyBasedChallenge_DefaultJsChallengeParameters:
		_ = b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.DefaultJsChallengeParameters); err != nil {
			return err
		}
	case *PolicyBasedChallenge_JsChallengeParameters:
		_ = b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.JsChallengeParameters); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("PolicyBasedChallenge.JsChallengeParametersChoice has unexpected type %T", x)
	}
	// captcha_challenge_parameters_choice
	switch x := m.CaptchaChallengeParametersChoice.(type) {
	case *PolicyBasedChallenge_DefaultCaptchaChallengeParameters:
		_ = b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.DefaultCaptchaChallengeParameters); err != nil {
			return err
		}
	case *PolicyBasedChallenge_CaptchaChallengeParameters:
		_ = b.EncodeVarint(6<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.CaptchaChallengeParameters); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("PolicyBasedChallenge.CaptchaChallengeParametersChoice has unexpected type %T", x)
	}
	// temporary_blocking_parameters_choice
	switch x := m.TemporaryBlockingParametersChoice.(type) {
	case *PolicyBasedChallenge_DefaultTemporaryBlockingParameters:
		_ = b.EncodeVarint(8<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.DefaultTemporaryBlockingParameters); err != nil {
			return err
		}
	case *PolicyBasedChallenge_TemporaryUserBlocking:
		_ = b.EncodeVarint(9<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.TemporaryUserBlocking); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("PolicyBasedChallenge.TemporaryBlockingParametersChoice has unexpected type %T", x)
	}
	// malicious_user_mitigation_choice
	switch x := m.MaliciousUserMitigationChoice.(type) {
	case *PolicyBasedChallenge_DefaultMitigationSettings:
		_ = b.EncodeVarint(11<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.DefaultMitigationSettings); err != nil {
			return err
		}
	case *PolicyBasedChallenge_MaliciousUserMitigation:
		_ = b.EncodeVarint(12<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.MaliciousUserMitigation); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("PolicyBasedChallenge.MaliciousUserMitigationChoice has unexpected type %T", x)
	}
	// challenge_choice
	switch x := m.ChallengeChoice.(type) {
	case *PolicyBasedChallenge_NoChallenge:
		_ = b.EncodeVarint(14<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.NoChallenge); err != nil {
			return err
		}
	case *PolicyBasedChallenge_AlwaysEnableJsChallenge:
		_ = b.EncodeVarint(15<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.AlwaysEnableJsChallenge); err != nil {
			return err
		}
	case *PolicyBasedChallenge_AlwaysEnableCaptchaChallenge:
		_ = b.EncodeVarint(16<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.AlwaysEnableCaptchaChallenge); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("PolicyBasedChallenge.ChallengeChoice has unexpected type %T", x)
	}
	return nil
}

func _PolicyBasedChallenge_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*PolicyBasedChallenge)
	switch tag {
	case 2: // js_challenge_parameters_choice.default_js_challenge_parameters
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.JsChallengeParametersChoice = &PolicyBasedChallenge_DefaultJsChallengeParameters{msg}
		return true, err
	case 3: // js_challenge_parameters_choice.js_challenge_parameters
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema_virtual_host.JavascriptChallengeType)
		err := b.DecodeMessage(msg)
		m.JsChallengeParametersChoice = &PolicyBasedChallenge_JsChallengeParameters{msg}
		return true, err
	case 5: // captcha_challenge_parameters_choice.default_captcha_challenge_parameters
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.CaptchaChallengeParametersChoice = &PolicyBasedChallenge_DefaultCaptchaChallengeParameters{msg}
		return true, err
	case 6: // captcha_challenge_parameters_choice.captcha_challenge_parameters
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema_virtual_host.CaptchaChallengeType)
		err := b.DecodeMessage(msg)
		m.CaptchaChallengeParametersChoice = &PolicyBasedChallenge_CaptchaChallengeParameters{msg}
		return true, err
	case 8: // temporary_blocking_parameters_choice.default_temporary_blocking_parameters
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.TemporaryBlockingParametersChoice = &PolicyBasedChallenge_DefaultTemporaryBlockingParameters{msg}
		return true, err
	case 9: // temporary_blocking_parameters_choice.temporary_user_blocking
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema_virtual_host.TemporaryUserBlockingType)
		err := b.DecodeMessage(msg)
		m.TemporaryBlockingParametersChoice = &PolicyBasedChallenge_TemporaryUserBlocking{msg}
		return true, err
	case 11: // malicious_user_mitigation_choice.default_mitigation_settings
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.MaliciousUserMitigationChoice = &PolicyBasedChallenge_DefaultMitigationSettings{msg}
		return true, err
	case 12: // malicious_user_mitigation_choice.malicious_user_mitigation
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema_views.ObjectRefType)
		err := b.DecodeMessage(msg)
		m.MaliciousUserMitigationChoice = &PolicyBasedChallenge_MaliciousUserMitigation{msg}
		return true, err
	case 14: // challenge_choice.no_challenge
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.ChallengeChoice = &PolicyBasedChallenge_NoChallenge{msg}
		return true, err
	case 15: // challenge_choice.always_enable_js_challenge
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.ChallengeChoice = &PolicyBasedChallenge_AlwaysEnableJsChallenge{msg}
		return true, err
	case 16: // challenge_choice.always_enable_captcha_challenge
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.ChallengeChoice = &PolicyBasedChallenge_AlwaysEnableCaptchaChallenge{msg}
		return true, err
	default:
		return false, nil
	}
}

func _PolicyBasedChallenge_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*PolicyBasedChallenge)
	// js_challenge_parameters_choice
	switch x := m.JsChallengeParametersChoice.(type) {
	case *PolicyBasedChallenge_DefaultJsChallengeParameters:
		s := proto.Size(x.DefaultJsChallengeParameters)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *PolicyBasedChallenge_JsChallengeParameters:
		s := proto.Size(x.JsChallengeParameters)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	// captcha_challenge_parameters_choice
	switch x := m.CaptchaChallengeParametersChoice.(type) {
	case *PolicyBasedChallenge_DefaultCaptchaChallengeParameters:
		s := proto.Size(x.DefaultCaptchaChallengeParameters)
		n += proto.SizeVarint(5<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *PolicyBasedChallenge_CaptchaChallengeParameters:
		s := proto.Size(x.CaptchaChallengeParameters)
		n += proto.SizeVarint(6<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	// temporary_blocking_parameters_choice
	switch x := m.TemporaryBlockingParametersChoice.(type) {
	case *PolicyBasedChallenge_DefaultTemporaryBlockingParameters:
		s := proto.Size(x.DefaultTemporaryBlockingParameters)
		n += proto.SizeVarint(8<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *PolicyBasedChallenge_TemporaryUserBlocking:
		s := proto.Size(x.TemporaryUserBlocking)
		n += proto.SizeVarint(9<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	// malicious_user_mitigation_choice
	switch x := m.MaliciousUserMitigationChoice.(type) {
	case *PolicyBasedChallenge_DefaultMitigationSettings:
		s := proto.Size(x.DefaultMitigationSettings)
		n += proto.SizeVarint(11<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *PolicyBasedChallenge_MaliciousUserMitigation:
		s := proto.Size(x.MaliciousUserMitigation)
		n += proto.SizeVarint(12<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	// challenge_choice
	switch x := m.ChallengeChoice.(type) {
	case *PolicyBasedChallenge_NoChallenge:
		s := proto.Size(x.NoChallenge)
		n += proto.SizeVarint(14<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *PolicyBasedChallenge_AlwaysEnableJsChallenge:
		s := proto.Size(x.AlwaysEnableJsChallenge)
		n += proto.SizeVarint(15<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *PolicyBasedChallenge_AlwaysEnableCaptchaChallenge:
		s := proto.Size(x.AlwaysEnableCaptchaChallenge)
		n += proto.SizeVarint(16<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// Challenge Rule
//
// x-displayName: "Challenge Rule"
// Challenge rule
type ChallengeRule struct {
	// metadata
	//
	// x-displayName: "Metadata"
	// x-required
	// Common attributes for the rule including name and description.
	Metadata *ves_io_schema4.MessageMetaType `protobuf:"bytes,1,opt,name=metadata" json:"metadata,omitempty"`
	// spec
	//
	// x-displayName: "Challenge Rule Specification"
	// x-required
	// Specification for the rule including match predicates and actions.
	Spec *ves_io_schema_service_policy_rule.ChallengeRuleSpec `protobuf:"bytes,2,opt,name=spec" json:"spec,omitempty"`
}

func (m *ChallengeRule) Reset()                    { *m = ChallengeRule{} }
func (*ChallengeRule) ProtoMessage()               {}
func (*ChallengeRule) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{16} }

func (m *ChallengeRule) GetMetadata() *ves_io_schema4.MessageMetaType {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *ChallengeRule) GetSpec() *ves_io_schema_service_policy_rule.ChallengeRuleSpec {
	if m != nil {
		return m.Spec
	}
	return nil
}

// Challenge Rule List
//
// x-displayName: "Challenge Rule List"
// List of challenge rules to be used in policy based challenge
type ChallengeRuleList struct {
	// Rules
	//
	// x-displayName: "Rules"
	// Rules that specify the match conditions and challenge type to be launched.
	// When a challenge type is selected to be always enabled,
	// these rules can be used to disable challenge or launch a different challenge for requests that match the specified conditions
	Rules []*ChallengeRule `protobuf:"bytes,2,rep,name=rules" json:"rules,omitempty"`
}

func (m *ChallengeRuleList) Reset()                    { *m = ChallengeRuleList{} }
func (*ChallengeRuleList) ProtoMessage()               {}
func (*ChallengeRuleList) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{17} }

func (m *ChallengeRuleList) GetRules() []*ChallengeRule {
	if m != nil {
		return m.Rules
	}
	return nil
}

// SimpleClientSrcRule
//
// x-displayName: "Simple Client Src Rule"
// Simple client source rule specifies the sources to be blocked or trusted (skip WAF)
type SimpleClientSrcRule struct {
	// Client Source Choice
	//
	// x-displayName: "Client Source Choice"
	// x-required
	// Client source to be matched
	//
	// Types that are valid to be assigned to ClientSourceChoice:
	//	*SimpleClientSrcRule_IpPrefix
	//	*SimpleClientSrcRule_AsNumber
	ClientSourceChoice isSimpleClientSrcRule_ClientSourceChoice `protobuf_oneof:"client_source_choice"`
	// expiration timestamp
	//
	// x-displayName: "Expiration Timestamp"
	// x-example: "2019-12-31:44:34.171543432Z"
	// The expiration_timestamp is the RFC 3339 format timestamp at which the containing rule is considered to be logically expired. The rule continues to exist in
	// the configuration but is not applied anymore.
	ExpirationTimestamp *google_protobuf1.Timestamp `protobuf:"bytes,9,opt,name=expiration_timestamp,json=expirationTimestamp" json:"expiration_timestamp,omitempty"`
	// metadata
	//
	// x-displayName: "Metadata"
	// x-required
	// Common attributes for the rule including name and description.
	Metadata *ves_io_schema4.MessageMetaType `protobuf:"bytes,10,opt,name=metadata" json:"metadata,omitempty"`
}

func (m *SimpleClientSrcRule) Reset()                    { *m = SimpleClientSrcRule{} }
func (*SimpleClientSrcRule) ProtoMessage()               {}
func (*SimpleClientSrcRule) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{18} }

type isSimpleClientSrcRule_ClientSourceChoice interface {
	isSimpleClientSrcRule_ClientSourceChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type SimpleClientSrcRule_IpPrefix struct {
	IpPrefix string `protobuf:"bytes,4,opt,name=ip_prefix,json=ipPrefix,proto3,oneof"`
}
type SimpleClientSrcRule_AsNumber struct {
	AsNumber uint32 `protobuf:"varint,5,opt,name=as_number,json=asNumber,proto3,oneof"`
}

func (*SimpleClientSrcRule_IpPrefix) isSimpleClientSrcRule_ClientSourceChoice() {}
func (*SimpleClientSrcRule_AsNumber) isSimpleClientSrcRule_ClientSourceChoice() {}

func (m *SimpleClientSrcRule) GetClientSourceChoice() isSimpleClientSrcRule_ClientSourceChoice {
	if m != nil {
		return m.ClientSourceChoice
	}
	return nil
}

func (m *SimpleClientSrcRule) GetIpPrefix() string {
	if x, ok := m.GetClientSourceChoice().(*SimpleClientSrcRule_IpPrefix); ok {
		return x.IpPrefix
	}
	return ""
}

func (m *SimpleClientSrcRule) GetAsNumber() uint32 {
	if x, ok := m.GetClientSourceChoice().(*SimpleClientSrcRule_AsNumber); ok {
		return x.AsNumber
	}
	return 0
}

func (m *SimpleClientSrcRule) GetExpirationTimestamp() *google_protobuf1.Timestamp {
	if m != nil {
		return m.ExpirationTimestamp
	}
	return nil
}

func (m *SimpleClientSrcRule) GetMetadata() *ves_io_schema4.MessageMetaType {
	if m != nil {
		return m.Metadata
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*SimpleClientSrcRule) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _SimpleClientSrcRule_OneofMarshaler, _SimpleClientSrcRule_OneofUnmarshaler, _SimpleClientSrcRule_OneofSizer, []interface{}{
		(*SimpleClientSrcRule_IpPrefix)(nil),
		(*SimpleClientSrcRule_AsNumber)(nil),
	}
}

func _SimpleClientSrcRule_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*SimpleClientSrcRule)
	// client_source_choice
	switch x := m.ClientSourceChoice.(type) {
	case *SimpleClientSrcRule_IpPrefix:
		_ = b.EncodeVarint(4<<3 | proto.WireBytes)
		_ = b.EncodeStringBytes(x.IpPrefix)
	case *SimpleClientSrcRule_AsNumber:
		_ = b.EncodeVarint(5<<3 | proto.WireVarint)
		_ = b.EncodeVarint(uint64(x.AsNumber))
	case nil:
	default:
		return fmt.Errorf("SimpleClientSrcRule.ClientSourceChoice has unexpected type %T", x)
	}
	return nil
}

func _SimpleClientSrcRule_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*SimpleClientSrcRule)
	switch tag {
	case 4: // client_source_choice.ip_prefix
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.ClientSourceChoice = &SimpleClientSrcRule_IpPrefix{x}
		return true, err
	case 5: // client_source_choice.as_number
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.ClientSourceChoice = &SimpleClientSrcRule_AsNumber{uint32(x)}
		return true, err
	default:
		return false, nil
	}
}

func _SimpleClientSrcRule_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*SimpleClientSrcRule)
	// client_source_choice
	switch x := m.ClientSourceChoice.(type) {
	case *SimpleClientSrcRule_IpPrefix:
		n += proto.SizeVarint(4<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.IpPrefix)))
		n += len(x.IpPrefix)
	case *SimpleClientSrcRule_AsNumber:
		n += proto.SizeVarint(5<<3 | proto.WireVarint)
		n += proto.SizeVarint(uint64(x.AsNumber))
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// Custom IP Allowed List
//
// x-displayName: "Custom IP Allowed List"
// IP Allowed list using existing ip_prefix_set objects
type CustomIpAllowedList struct {
	// rate_limiter_allowed_prefixes
	//
	// x-displayName: "List of IP Prefix Sets"
	// x-required
	// References to ip_prefix_set objects.
	// Requests from source IP addresses that are covered by one of the allowed IP Prefixes are not subjected to rate limiting.
	RateLimiterAllowedPrefixes []*ves_io_schema_views.ObjectRefType `protobuf:"bytes,22,rep,name=rate_limiter_allowed_prefixes,json=rateLimiterAllowedPrefixes" json:"rate_limiter_allowed_prefixes,omitempty"`
}

func (m *CustomIpAllowedList) Reset()                    { *m = CustomIpAllowedList{} }
func (*CustomIpAllowedList) ProtoMessage()               {}
func (*CustomIpAllowedList) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{19} }

func (m *CustomIpAllowedList) GetRateLimiterAllowedPrefixes() []*ves_io_schema_views.ObjectRefType {
	if m != nil {
		return m.RateLimiterAllowedPrefixes
	}
	return nil
}

type RateLimitConfigType struct {
	// rate_limiter
	//
	// x-displayName: "Request Rate Limiter"
	// Requests to the virtual_host are rate limited based on the parameters specified in the rate_limiter.
	RateLimiter *ves_io_schema_rate_limiter.RateLimitValue `protobuf:"bytes,1,opt,name=rate_limiter,json=rateLimiter" json:"rate_limiter,omitempty"`
	// IP Allowed List
	//
	// x-displayName: "IP(s) Allowed without Rate Limiting"
	// x-required
	// Allowed List of IPs for which rate limiting will be disabled.
	//
	// Types that are valid to be assigned to IpAllowedListChoice:
	//	*RateLimitConfigType_NoIpAllowedList
	//	*RateLimitConfigType_IpAllowedList
	//	*RateLimitConfigType_CustomIpAllowedList
	IpAllowedListChoice isRateLimitConfigType_IpAllowedListChoice `protobuf_oneof:"ip_allowed_list_choice"`
	// policy choice
	//
	// x-displayName: "Rate Limiter Policies"
	// x-required
	// Manage rate limiter policies. Note that an implicit policy based on the IP Allowed List is always applied as the first policy.
	//
	// Types that are valid to be assigned to PolicyChoice:
	//	*RateLimitConfigType_NoPolicies
	//	*RateLimitConfigType_Policies
	PolicyChoice isRateLimitConfigType_PolicyChoice `protobuf_oneof:"policy_choice"`
}

func (m *RateLimitConfigType) Reset()                    { *m = RateLimitConfigType{} }
func (*RateLimitConfigType) ProtoMessage()               {}
func (*RateLimitConfigType) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{20} }

type isRateLimitConfigType_IpAllowedListChoice interface {
	isRateLimitConfigType_IpAllowedListChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isRateLimitConfigType_PolicyChoice interface {
	isRateLimitConfigType_PolicyChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type RateLimitConfigType_NoIpAllowedList struct {
	NoIpAllowedList *ves_io_schema4.Empty `protobuf:"bytes,3,opt,name=no_ip_allowed_list,json=noIpAllowedList,oneof"`
}
type RateLimitConfigType_IpAllowedList struct {
	IpAllowedList *ves_io_schema_views.PrefixStringListType `protobuf:"bytes,4,opt,name=ip_allowed_list,json=ipAllowedList,oneof"`
}
type RateLimitConfigType_CustomIpAllowedList struct {
	CustomIpAllowedList *CustomIpAllowedList `protobuf:"bytes,5,opt,name=custom_ip_allowed_list,json=customIpAllowedList,oneof"`
}
type RateLimitConfigType_NoPolicies struct {
	NoPolicies *ves_io_schema4.Empty `protobuf:"bytes,12,opt,name=no_policies,json=noPolicies,oneof"`
}
type RateLimitConfigType_Policies struct {
	Policies *ves_io_schema_views_rate_limiter_policy.PolicyList `protobuf:"bytes,13,opt,name=policies,oneof"`
}

func (*RateLimitConfigType_NoIpAllowedList) isRateLimitConfigType_IpAllowedListChoice()     {}
func (*RateLimitConfigType_IpAllowedList) isRateLimitConfigType_IpAllowedListChoice()       {}
func (*RateLimitConfigType_CustomIpAllowedList) isRateLimitConfigType_IpAllowedListChoice() {}
func (*RateLimitConfigType_NoPolicies) isRateLimitConfigType_PolicyChoice()                 {}
func (*RateLimitConfigType_Policies) isRateLimitConfigType_PolicyChoice()                   {}

func (m *RateLimitConfigType) GetIpAllowedListChoice() isRateLimitConfigType_IpAllowedListChoice {
	if m != nil {
		return m.IpAllowedListChoice
	}
	return nil
}
func (m *RateLimitConfigType) GetPolicyChoice() isRateLimitConfigType_PolicyChoice {
	if m != nil {
		return m.PolicyChoice
	}
	return nil
}

func (m *RateLimitConfigType) GetRateLimiter() *ves_io_schema_rate_limiter.RateLimitValue {
	if m != nil {
		return m.RateLimiter
	}
	return nil
}

func (m *RateLimitConfigType) GetNoIpAllowedList() *ves_io_schema4.Empty {
	if x, ok := m.GetIpAllowedListChoice().(*RateLimitConfigType_NoIpAllowedList); ok {
		return x.NoIpAllowedList
	}
	return nil
}

func (m *RateLimitConfigType) GetIpAllowedList() *ves_io_schema_views.PrefixStringListType {
	if x, ok := m.GetIpAllowedListChoice().(*RateLimitConfigType_IpAllowedList); ok {
		return x.IpAllowedList
	}
	return nil
}

func (m *RateLimitConfigType) GetCustomIpAllowedList() *CustomIpAllowedList {
	if x, ok := m.GetIpAllowedListChoice().(*RateLimitConfigType_CustomIpAllowedList); ok {
		return x.CustomIpAllowedList
	}
	return nil
}

func (m *RateLimitConfigType) GetNoPolicies() *ves_io_schema4.Empty {
	if x, ok := m.GetPolicyChoice().(*RateLimitConfigType_NoPolicies); ok {
		return x.NoPolicies
	}
	return nil
}

func (m *RateLimitConfigType) GetPolicies() *ves_io_schema_views_rate_limiter_policy.PolicyList {
	if x, ok := m.GetPolicyChoice().(*RateLimitConfigType_Policies); ok {
		return x.Policies
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*RateLimitConfigType) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _RateLimitConfigType_OneofMarshaler, _RateLimitConfigType_OneofUnmarshaler, _RateLimitConfigType_OneofSizer, []interface{}{
		(*RateLimitConfigType_NoIpAllowedList)(nil),
		(*RateLimitConfigType_IpAllowedList)(nil),
		(*RateLimitConfigType_CustomIpAllowedList)(nil),
		(*RateLimitConfigType_NoPolicies)(nil),
		(*RateLimitConfigType_Policies)(nil),
	}
}

func _RateLimitConfigType_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*RateLimitConfigType)
	// ip_allowed_list_choice
	switch x := m.IpAllowedListChoice.(type) {
	case *RateLimitConfigType_NoIpAllowedList:
		_ = b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.NoIpAllowedList); err != nil {
			return err
		}
	case *RateLimitConfigType_IpAllowedList:
		_ = b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.IpAllowedList); err != nil {
			return err
		}
	case *RateLimitConfigType_CustomIpAllowedList:
		_ = b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.CustomIpAllowedList); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("RateLimitConfigType.IpAllowedListChoice has unexpected type %T", x)
	}
	// policy_choice
	switch x := m.PolicyChoice.(type) {
	case *RateLimitConfigType_NoPolicies:
		_ = b.EncodeVarint(12<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.NoPolicies); err != nil {
			return err
		}
	case *RateLimitConfigType_Policies:
		_ = b.EncodeVarint(13<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Policies); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("RateLimitConfigType.PolicyChoice has unexpected type %T", x)
	}
	return nil
}

func _RateLimitConfigType_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*RateLimitConfigType)
	switch tag {
	case 3: // ip_allowed_list_choice.no_ip_allowed_list
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.IpAllowedListChoice = &RateLimitConfigType_NoIpAllowedList{msg}
		return true, err
	case 4: // ip_allowed_list_choice.ip_allowed_list
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema_views.PrefixStringListType)
		err := b.DecodeMessage(msg)
		m.IpAllowedListChoice = &RateLimitConfigType_IpAllowedList{msg}
		return true, err
	case 5: // ip_allowed_list_choice.custom_ip_allowed_list
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(CustomIpAllowedList)
		err := b.DecodeMessage(msg)
		m.IpAllowedListChoice = &RateLimitConfigType_CustomIpAllowedList{msg}
		return true, err
	case 12: // policy_choice.no_policies
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.PolicyChoice = &RateLimitConfigType_NoPolicies{msg}
		return true, err
	case 13: // policy_choice.policies
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema_views_rate_limiter_policy.PolicyList)
		err := b.DecodeMessage(msg)
		m.PolicyChoice = &RateLimitConfigType_Policies{msg}
		return true, err
	default:
		return false, nil
	}
}

func _RateLimitConfigType_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*RateLimitConfigType)
	// ip_allowed_list_choice
	switch x := m.IpAllowedListChoice.(type) {
	case *RateLimitConfigType_NoIpAllowedList:
		s := proto.Size(x.NoIpAllowedList)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *RateLimitConfigType_IpAllowedList:
		s := proto.Size(x.IpAllowedList)
		n += proto.SizeVarint(4<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *RateLimitConfigType_CustomIpAllowedList:
		s := proto.Size(x.CustomIpAllowedList)
		n += proto.SizeVarint(5<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	// policy_choice
	switch x := m.PolicyChoice.(type) {
	case *RateLimitConfigType_NoPolicies:
		s := proto.Size(x.NoPolicies)
		n += proto.SizeVarint(12<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *RateLimitConfigType_Policies:
		s := proto.Size(x.Policies)
		n += proto.SizeVarint(13<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// service policy list
//
// x-displayName: "Service Policy List"
// List of service policies.
type ServicePolicyList struct {
	// policies
	//
	// x-displayName: "Policies"
	// x-required
	// An ordered list of references to service_policy objects.
	Policies []*ves_io_schema_views.ObjectRefType `protobuf:"bytes,1,rep,name=policies" json:"policies,omitempty"`
}

func (m *ServicePolicyList) Reset()                    { *m = ServicePolicyList{} }
func (*ServicePolicyList) ProtoMessage()               {}
func (*ServicePolicyList) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{21} }

func (m *ServicePolicyList) GetPolicies() []*ves_io_schema_views.ObjectRefType {
	if m != nil {
		return m.Policies
	}
	return nil
}

// GlobalSpecType
//
// x-displayName: "Global Specification"
// Shape of the HTTP loadbalancer specification
type GlobalSpecType struct {
	// Domains
	//
	// x-displayName: "Domains"
	// x-example: "www.foo.com"
	// x-required
	// A list of domains (host/authority header) that will be matched to loadbalancer.
	// Wildcard hosts are supported in the suffix or prefix form
	//
	// Domain search order:
	//  1. Exact domain names: www.foo.com.
	//  2. Prefix domain wildcards: *.foo.com or *-bar.foo.com.
	//  3. Special wildcard * matching any domain.
	//
	// Wildcard will not match empty string.
	// e.g. *-bar.foo.com will match baz-bar.foo.com but not -bar.foo.com.
	// The longest wildcards match first.
	// Only a single virtual host in the entire route configuration can match on *.
	// Also a domain must be unique across all virtual hosts within an advertise policy.
	//
	// Domains are also used for SNI matching if the loadbalancer type is HTTPS
	// Domains also indicate the list of names for which DNS resolution will be done by VER
	Domains []string `protobuf:"bytes,1,rep,name=domains" json:"domains,omitempty"`
	// Proxy choice
	//
	// x-displayName: "Select Type of Load Balancer"
	// x-required
	// Type of Load Balancer can be "http" or "https"
	//
	// Types that are valid to be assigned to LoadbalancerType:
	//	*GlobalSpecType_Http
	//	*GlobalSpecType_HttpsAutoCert
	//	*GlobalSpecType_Https
	LoadbalancerType isGlobalSpecType_LoadbalancerType `protobuf_oneof:"loadbalancer_type"`
	// Advertise choice
	//
	// x-displayName: "Where to Advertise the VIP"
	// x-required
	// This is a choice to select method to advertise VIP.
	//
	// Types that are valid to be assigned to AdvertiseChoice:
	//	*GlobalSpecType_DoNotAdvertise
	//	*GlobalSpecType_AdvertiseOnPublicDefaultVip
	//	*GlobalSpecType_AdvertiseOnPublic
	//	*GlobalSpecType_AdvertiseCustom
	AdvertiseChoice isGlobalSpecType_AdvertiseChoice `protobuf_oneof:"advertise_choice"`
	// Default Route Origin Pools
	//
	// x-displayName: "Origin Pools"
	// Origin Pools used when no route is specified (default route)
	DefaultRoutePools []*ves_io_schema_views.OriginPoolWithWeight `protobuf:"bytes,6,rep,name=default_route_pools,json=defaultRoutePools" json:"default_route_pools,omitempty"`
	// HostRewriteParams
	//
	// x-displayName: "Select Host Rewrite for Default Origin Servers"
	// Select how the host header can be modified during forwarding to the default origin servers(default route)
	//
	// Types that are valid to be assigned to HostRewriteParams:
	//	*GlobalSpecType_AutoHostRewrite
	//	*GlobalSpecType_HostRewrite
	//	*GlobalSpecType_DisableHostRewrite
	HostRewriteParams isGlobalSpecType_HostRewriteParams `protobuf_oneof:"host_rewrite_params"`
	// Routes
	//
	// x-displayName: "Routes"
	// Routes for this loadbalancer
	Routes []*RouteType `protobuf:"bytes,7,rep,name=routes" json:"routes,omitempty"`
	// Cross-Origin Resource Sharing (CORS) configuration for requests
	//
	// x-displayName: "CORS Policy"
	// CORS is a mechanism that uses additional HTTP headers to tell a browser to let
	// a web application running at one origin (domain) have permission to access selected
	// resources from a server at a different origin
	CorsPolicy *ves_io_schema4.CorsPolicy `protobuf:"bytes,8,opt,name=cors_policy,json=corsPolicy" json:"cors_policy,omitempty"`
	// Enable the WAF (Web Application Firewall) functionality for VirtualHost
	//
	// x-displayName: "Select Web Application Firewall (WAF) Config"
	// x-required
	//
	// WAF can be used to analyze inbound and outbound http/https traffic.
	// WAF can be configured either in BLOCKing Mode or ALERTing Mode.
	// In BLOCKing mode if WAF detects suspicious inbound/outbound traffic it blocks the request or response.
	// In ALERTing mode if suspicious traffic is detected, WAF generates ALERTs with details on the
	// suspicious traffic (instead of blocking traffic).
	//
	// waf_type can be either WAF or WAFRules.
	// WAF Object allows to
	//     Configure mode of the WAF (BLOCK/ALERT)
	//     Configure language used by the application which is being protected by the WAF
	//     Disable different high level security tags if required (e.g. SQLI_DETECTION, XSS_DETECTION etc)
	// WAFRules allows to
	//     Configure mode of the WAF (BLOCK/ALERT)
	//     Enable/Disable individual WAF security rules
	//
	// Types that are valid to be assigned to WafChoice:
	//	*GlobalSpecType_DisableWaf
	//	*GlobalSpecType_Waf
	//	*GlobalSpecType_WafRule
	WafChoice isGlobalSpecType_WafChoice `protobuf_oneof:"waf_choice"`
	// Add Site information
	//
	// x-displayName: "Add Location"
	// x-example: "true"
	// x-example: true
	// Appends header x-volterra-location = <re-site-name> in responses. This configuration
	// is ignored on CE sites.
	AddLocation bool `protobuf:"varint,17,opt,name=add_location,json=addLocation,proto3" json:"add_location,omitempty"`
	// Challenge choice
	//
	// x-displayName: "Select Type of Challenge"
	// x-required
	// Selection of different types of challenge.
	// Selecting javascript or captcha challenge will enable it for all traffic served by this load balancer
	// Policy based challenge can be used to define policy rules to enable or bypass challenge
	//
	// Types that are valid to be assigned to ChallengeType:
	//	*GlobalSpecType_NoChallenge
	//	*GlobalSpecType_JsChallenge
	//	*GlobalSpecType_CaptchaChallenge
	//	*GlobalSpecType_PolicyBasedChallenge
	ChallengeType isGlobalSpecType_ChallengeType `protobuf_oneof:"challenge_type"`
	// More Options
	//
	// x-displayName: "More Options"
	// More options like header manipulation, compression etc.
	MoreOption *AdvancedOptionsType `protobuf:"bytes,19,opt,name=more_option,json=moreOption" json:"more_option,omitempty"`
	// user_identification
	//
	// x-displayName: "User Identification Policy"
	// A reference to user_identification object.
	// The rules in the user_identification object are evaluated to determine the user identifier to be rate limited.
	UserIdentification *ves_io_schema_views.ObjectRefType `protobuf:"bytes,20,opt,name=user_identification,json=userIdentification" json:"user_identification,omitempty"`
	// Enable Rate Limiting
	//
	// x-displayName: "Rate Limiting"
	// x-required
	// x-example: ""
	// Enable rate limiting per user(client) for this load balancer
	//
	// Types that are valid to be assigned to RateLimitChoice:
	//	*GlobalSpecType_DisableRateLimit
	//	*GlobalSpecType_RateLimit
	RateLimitChoice isGlobalSpecType_RateLimitChoice `protobuf_oneof:"rate_limit_choice"`
	// Malicious User Mitigation
	//
	// x-displayName: "Malicious User Mitigation"
	// Settings that specify the actions to be taken when malicious users are determined to be at different threat levels.
	// User's activity is monitored and continuously analyzed for malicious behavior. From this analysis, a threat level is assigned to each user.
	// The settings defined in malicious user mitigation specify what mitigation actions to take for users determined to be at different threat levels.
	MaliciousUserMitigation *ves_io_schema_views.ObjectRefType `protobuf:"bytes,32,opt,name=malicious_user_mitigation,json=maliciousUserMitigation" json:"malicious_user_mitigation,omitempty"`
	// WAF Exclusion Rules
	//
	// x-displayName: "WAF Exclusion Rules"
	// Rules that specify the match conditions and the corresponding WAF_RULE_IDs which should be excluded from WAF evaluation
	WafExclusionRules []*ves_io_schema_policy.SimpleWafExclusionRule `protobuf:"bytes,33,rep,name=waf_exclusion_rules,json=wafExclusionRules" json:"waf_exclusion_rules,omitempty"`
	// Client Blocking Rules
	//
	// x-displayName: "Client Blocking Rules"
	// Rules that specify the clients to be blocked
	BlockedClients []*SimpleClientSrcRule `protobuf:"bytes,34,rep,name=blocked_clients,json=blockedClients" json:"blocked_clients,omitempty"`
	// Trusted Client Rules
	//
	// x-displayName: "Trusted Client Rules"
	// Rules that specify the clients to be trusted.
	// WAF processing is skipped for trusted clients
	TrustedClients []*SimpleClientSrcRule `protobuf:"bytes,35,rep,name=trusted_clients,json=trustedClients" json:"trusted_clients,omitempty"`
	// Service Policies
	//
	// x-displayName: "Service Policies"
	// x-required
	// Select service policies to be applied.
	//
	// Types that are valid to be assigned to ServicePolicyChoice:
	//	*GlobalSpecType_ServicePoliciesFromNamespace
	//	*GlobalSpecType_NoServicePolicies
	//	*GlobalSpecType_ActiveServicePolicies
	ServicePolicyChoice isGlobalSpecType_ServicePolicyChoice `protobuf_oneof:"service_policy_choice"`
	// Load Balancing Control
	//
	// x-displayName: "Load Balancing Control"
	// x-required
	// Select how the request are Load balanced
	//
	// Types that are valid to be assigned to HashPolicyChoice:
	//	*GlobalSpecType_RoundRobin
	//	*GlobalSpecType_LeastActive
	//	*GlobalSpecType_Random
	//	*GlobalSpecType_SourceIpStickiness
	//	*GlobalSpecType_CookieStickiness
	//	*GlobalSpecType_RingHash
	HashPolicyChoice isGlobalSpecType_HashPolicyChoice `protobuf_oneof:"hash_policy_choice"`
	// view_internal
	//
	// x-displayName: "View Internal"
	// Reference to view internal object
	ViewInternal *ves_io_schema_views.ObjectRefType `protobuf:"bytes,1000,opt,name=view_internal,json=viewInternal" json:"view_internal,omitempty"`
	// host name
	//
	// x-displayName: "Host Name"
	// x-example: "ves-io-cf8684b9-a18f-4843-a24f-1f9ee8ea2776.ac.vh.ves.io"
	// Internally generated host name to be used for the virtual host
	HostName string `protobuf:"bytes,1001,opt,name=host_name,json=hostName,proto3" json:"host_name,omitempty"`
	// DNS information
	//
	// x-displayName: "DNS Information"
	// DNS information for this virtual host
	DnsInfo []*ves_io_schema_virtual_host_dns_info.DnsInfo `protobuf:"bytes,1002,rep,name=dns_info,json=dnsInfo" json:"dns_info,omitempty"`
	// Virtual Host state
	//
	// x-displayName: "Virtual Host State"
	// State of the virtual host
	State ves_io_schema_virtual_host.VirtualHostState `protobuf:"varint,1003,opt,name=state,proto3,enum=ves.io.schema.virtual_host.VirtualHostState" json:"state,omitempty"`
	// Auto Cert State
	//
	// x-displayName: "Auto Cert State"
	// State of auto certificate generation.
	AutoCertState ves_io_schema_virtual_host.CertificationState `protobuf:"varint,1004,opt,name=auto_cert_state,json=autoCertState,proto3,enum=ves.io.schema.virtual_host.CertificationState" json:"auto_cert_state,omitempty"`
	// Auto Cert Information
	//
	// x-displayName: "Auto Cert Information"
	// Auto certificate related information
	AutoCertInfo *ves_io_schema_virtual_host.AutoCertInfoType `protobuf:"bytes,1010,opt,name=auto_cert_info,json=autoCertInfo" json:"auto_cert_info,omitempty"`
}

func (m *GlobalSpecType) Reset()                    { *m = GlobalSpecType{} }
func (*GlobalSpecType) ProtoMessage()               {}
func (*GlobalSpecType) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{22} }

type isGlobalSpecType_LoadbalancerType interface {
	isGlobalSpecType_LoadbalancerType()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isGlobalSpecType_AdvertiseChoice interface {
	isGlobalSpecType_AdvertiseChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isGlobalSpecType_HostRewriteParams interface {
	isGlobalSpecType_HostRewriteParams()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isGlobalSpecType_WafChoice interface {
	isGlobalSpecType_WafChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isGlobalSpecType_ChallengeType interface {
	isGlobalSpecType_ChallengeType()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isGlobalSpecType_RateLimitChoice interface {
	isGlobalSpecType_RateLimitChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isGlobalSpecType_ServicePolicyChoice interface {
	isGlobalSpecType_ServicePolicyChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isGlobalSpecType_HashPolicyChoice interface {
	isGlobalSpecType_HashPolicyChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type GlobalSpecType_Http struct {
	Http *ProxyTypeHttp `protobuf:"bytes,2,opt,name=http,oneof"`
}
type GlobalSpecType_HttpsAutoCert struct {
	HttpsAutoCert *ProxyTypeHttpsAutoCerts `protobuf:"bytes,27,opt,name=https_auto_cert,json=httpsAutoCert,oneof"`
}
type GlobalSpecType_Https struct {
	Https *ProxyTypeHttps `protobuf:"bytes,3,opt,name=https,oneof"`
}
type GlobalSpecType_DoNotAdvertise struct {
	DoNotAdvertise *ves_io_schema4.Empty `protobuf:"bytes,12,opt,name=do_not_advertise,json=doNotAdvertise,oneof"`
}
type GlobalSpecType_AdvertiseOnPublicDefaultVip struct {
	AdvertiseOnPublicDefaultVip *ves_io_schema4.Empty `protobuf:"bytes,13,opt,name=advertise_on_public_default_vip,json=advertiseOnPublicDefaultVip,oneof"`
}
type GlobalSpecType_AdvertiseOnPublic struct {
	AdvertiseOnPublic *ves_io_schema_views.AdvertisePublic `protobuf:"bytes,4,opt,name=advertise_on_public,json=advertiseOnPublic,oneof"`
}
type GlobalSpecType_AdvertiseCustom struct {
	AdvertiseCustom *ves_io_schema_views.AdvertiseCustom `protobuf:"bytes,5,opt,name=advertise_custom,json=advertiseCustom,oneof"`
}
type GlobalSpecType_AutoHostRewrite struct {
	AutoHostRewrite *ves_io_schema4.Empty `protobuf:"bytes,28,opt,name=auto_host_rewrite,json=autoHostRewrite,oneof"`
}
type GlobalSpecType_HostRewrite struct {
	HostRewrite string `protobuf:"bytes,29,opt,name=host_rewrite,json=hostRewrite,proto3,oneof"`
}
type GlobalSpecType_DisableHostRewrite struct {
	DisableHostRewrite *ves_io_schema4.Empty `protobuf:"bytes,30,opt,name=disable_host_rewrite,json=disableHostRewrite,oneof"`
}
type GlobalSpecType_DisableWaf struct {
	DisableWaf *ves_io_schema4.Empty `protobuf:"bytes,11,opt,name=disable_waf,json=disableWaf,oneof"`
}
type GlobalSpecType_Waf struct {
	Waf *ves_io_schema_views.ObjectRefType `protobuf:"bytes,9,opt,name=waf,oneof"`
}
type GlobalSpecType_WafRule struct {
	WafRule *ves_io_schema_views.ObjectRefType `protobuf:"bytes,10,opt,name=waf_rule,json=wafRule,oneof"`
}
type GlobalSpecType_NoChallenge struct {
	NoChallenge *ves_io_schema4.Empty `protobuf:"bytes,26,opt,name=no_challenge,json=noChallenge,oneof"`
}
type GlobalSpecType_JsChallenge struct {
	JsChallenge *ves_io_schema_virtual_host.JavascriptChallengeType `protobuf:"bytes,18,opt,name=js_challenge,json=jsChallenge,oneof"`
}
type GlobalSpecType_CaptchaChallenge struct {
	CaptchaChallenge *ves_io_schema_virtual_host.CaptchaChallengeType `protobuf:"bytes,24,opt,name=captcha_challenge,json=captchaChallenge,oneof"`
}
type GlobalSpecType_PolicyBasedChallenge struct {
	PolicyBasedChallenge *PolicyBasedChallenge `protobuf:"bytes,51,opt,name=policy_based_challenge,json=policyBasedChallenge,oneof"`
}
type GlobalSpecType_DisableRateLimit struct {
	DisableRateLimit *ves_io_schema4.Empty `protobuf:"bytes,22,opt,name=disable_rate_limit,json=disableRateLimit,oneof"`
}
type GlobalSpecType_RateLimit struct {
	RateLimit *RateLimitConfigType `protobuf:"bytes,23,opt,name=rate_limit,json=rateLimit,oneof"`
}
type GlobalSpecType_ServicePoliciesFromNamespace struct {
	ServicePoliciesFromNamespace *ves_io_schema4.Empty `protobuf:"bytes,41,opt,name=service_policies_from_namespace,json=servicePoliciesFromNamespace,oneof"`
}
type GlobalSpecType_NoServicePolicies struct {
	NoServicePolicies *ves_io_schema4.Empty `protobuf:"bytes,42,opt,name=no_service_policies,json=noServicePolicies,oneof"`
}
type GlobalSpecType_ActiveServicePolicies struct {
	ActiveServicePolicies *ServicePolicyList `protobuf:"bytes,43,opt,name=active_service_policies,json=activeServicePolicies,oneof"`
}
type GlobalSpecType_RoundRobin struct {
	RoundRobin *ves_io_schema4.Empty `protobuf:"bytes,45,opt,name=round_robin,json=roundRobin,oneof"`
}
type GlobalSpecType_LeastActive struct {
	LeastActive *ves_io_schema4.Empty `protobuf:"bytes,46,opt,name=least_active,json=leastActive,oneof"`
}
type GlobalSpecType_Random struct {
	Random *ves_io_schema4.Empty `protobuf:"bytes,47,opt,name=random,oneof"`
}
type GlobalSpecType_SourceIpStickiness struct {
	SourceIpStickiness *ves_io_schema4.Empty `protobuf:"bytes,48,opt,name=source_ip_stickiness,json=sourceIpStickiness,oneof"`
}
type GlobalSpecType_CookieStickiness struct {
	CookieStickiness *ves_io_schema_route.CookieForHashing `protobuf:"bytes,49,opt,name=cookie_stickiness,json=cookieStickiness,oneof"`
}
type GlobalSpecType_RingHash struct {
	RingHash *HashPolicyListType `protobuf:"bytes,50,opt,name=ring_hash,json=ringHash,oneof"`
}

func (*GlobalSpecType_Http) isGlobalSpecType_LoadbalancerType()                            {}
func (*GlobalSpecType_HttpsAutoCert) isGlobalSpecType_LoadbalancerType()                   {}
func (*GlobalSpecType_Https) isGlobalSpecType_LoadbalancerType()                           {}
func (*GlobalSpecType_DoNotAdvertise) isGlobalSpecType_AdvertiseChoice()                   {}
func (*GlobalSpecType_AdvertiseOnPublicDefaultVip) isGlobalSpecType_AdvertiseChoice()      {}
func (*GlobalSpecType_AdvertiseOnPublic) isGlobalSpecType_AdvertiseChoice()                {}
func (*GlobalSpecType_AdvertiseCustom) isGlobalSpecType_AdvertiseChoice()                  {}
func (*GlobalSpecType_AutoHostRewrite) isGlobalSpecType_HostRewriteParams()                {}
func (*GlobalSpecType_HostRewrite) isGlobalSpecType_HostRewriteParams()                    {}
func (*GlobalSpecType_DisableHostRewrite) isGlobalSpecType_HostRewriteParams()             {}
func (*GlobalSpecType_DisableWaf) isGlobalSpecType_WafChoice()                             {}
func (*GlobalSpecType_Waf) isGlobalSpecType_WafChoice()                                    {}
func (*GlobalSpecType_WafRule) isGlobalSpecType_WafChoice()                                {}
func (*GlobalSpecType_NoChallenge) isGlobalSpecType_ChallengeType()                        {}
func (*GlobalSpecType_JsChallenge) isGlobalSpecType_ChallengeType()                        {}
func (*GlobalSpecType_CaptchaChallenge) isGlobalSpecType_ChallengeType()                   {}
func (*GlobalSpecType_PolicyBasedChallenge) isGlobalSpecType_ChallengeType()               {}
func (*GlobalSpecType_DisableRateLimit) isGlobalSpecType_RateLimitChoice()                 {}
func (*GlobalSpecType_RateLimit) isGlobalSpecType_RateLimitChoice()                        {}
func (*GlobalSpecType_ServicePoliciesFromNamespace) isGlobalSpecType_ServicePolicyChoice() {}
func (*GlobalSpecType_NoServicePolicies) isGlobalSpecType_ServicePolicyChoice()            {}
func (*GlobalSpecType_ActiveServicePolicies) isGlobalSpecType_ServicePolicyChoice()        {}
func (*GlobalSpecType_RoundRobin) isGlobalSpecType_HashPolicyChoice()                      {}
func (*GlobalSpecType_LeastActive) isGlobalSpecType_HashPolicyChoice()                     {}
func (*GlobalSpecType_Random) isGlobalSpecType_HashPolicyChoice()                          {}
func (*GlobalSpecType_SourceIpStickiness) isGlobalSpecType_HashPolicyChoice()              {}
func (*GlobalSpecType_CookieStickiness) isGlobalSpecType_HashPolicyChoice()                {}
func (*GlobalSpecType_RingHash) isGlobalSpecType_HashPolicyChoice()                        {}

func (m *GlobalSpecType) GetLoadbalancerType() isGlobalSpecType_LoadbalancerType {
	if m != nil {
		return m.LoadbalancerType
	}
	return nil
}
func (m *GlobalSpecType) GetAdvertiseChoice() isGlobalSpecType_AdvertiseChoice {
	if m != nil {
		return m.AdvertiseChoice
	}
	return nil
}
func (m *GlobalSpecType) GetHostRewriteParams() isGlobalSpecType_HostRewriteParams {
	if m != nil {
		return m.HostRewriteParams
	}
	return nil
}
func (m *GlobalSpecType) GetWafChoice() isGlobalSpecType_WafChoice {
	if m != nil {
		return m.WafChoice
	}
	return nil
}
func (m *GlobalSpecType) GetChallengeType() isGlobalSpecType_ChallengeType {
	if m != nil {
		return m.ChallengeType
	}
	return nil
}
func (m *GlobalSpecType) GetRateLimitChoice() isGlobalSpecType_RateLimitChoice {
	if m != nil {
		return m.RateLimitChoice
	}
	return nil
}
func (m *GlobalSpecType) GetServicePolicyChoice() isGlobalSpecType_ServicePolicyChoice {
	if m != nil {
		return m.ServicePolicyChoice
	}
	return nil
}
func (m *GlobalSpecType) GetHashPolicyChoice() isGlobalSpecType_HashPolicyChoice {
	if m != nil {
		return m.HashPolicyChoice
	}
	return nil
}

func (m *GlobalSpecType) GetDomains() []string {
	if m != nil {
		return m.Domains
	}
	return nil
}

func (m *GlobalSpecType) GetHttp() *ProxyTypeHttp {
	if x, ok := m.GetLoadbalancerType().(*GlobalSpecType_Http); ok {
		return x.Http
	}
	return nil
}

func (m *GlobalSpecType) GetHttpsAutoCert() *ProxyTypeHttpsAutoCerts {
	if x, ok := m.GetLoadbalancerType().(*GlobalSpecType_HttpsAutoCert); ok {
		return x.HttpsAutoCert
	}
	return nil
}

func (m *GlobalSpecType) GetHttps() *ProxyTypeHttps {
	if x, ok := m.GetLoadbalancerType().(*GlobalSpecType_Https); ok {
		return x.Https
	}
	return nil
}

func (m *GlobalSpecType) GetDoNotAdvertise() *ves_io_schema4.Empty {
	if x, ok := m.GetAdvertiseChoice().(*GlobalSpecType_DoNotAdvertise); ok {
		return x.DoNotAdvertise
	}
	return nil
}

func (m *GlobalSpecType) GetAdvertiseOnPublicDefaultVip() *ves_io_schema4.Empty {
	if x, ok := m.GetAdvertiseChoice().(*GlobalSpecType_AdvertiseOnPublicDefaultVip); ok {
		return x.AdvertiseOnPublicDefaultVip
	}
	return nil
}

func (m *GlobalSpecType) GetAdvertiseOnPublic() *ves_io_schema_views.AdvertisePublic {
	if x, ok := m.GetAdvertiseChoice().(*GlobalSpecType_AdvertiseOnPublic); ok {
		return x.AdvertiseOnPublic
	}
	return nil
}

func (m *GlobalSpecType) GetAdvertiseCustom() *ves_io_schema_views.AdvertiseCustom {
	if x, ok := m.GetAdvertiseChoice().(*GlobalSpecType_AdvertiseCustom); ok {
		return x.AdvertiseCustom
	}
	return nil
}

func (m *GlobalSpecType) GetDefaultRoutePools() []*ves_io_schema_views.OriginPoolWithWeight {
	if m != nil {
		return m.DefaultRoutePools
	}
	return nil
}

func (m *GlobalSpecType) GetAutoHostRewrite() *ves_io_schema4.Empty {
	if x, ok := m.GetHostRewriteParams().(*GlobalSpecType_AutoHostRewrite); ok {
		return x.AutoHostRewrite
	}
	return nil
}

func (m *GlobalSpecType) GetHostRewrite() string {
	if x, ok := m.GetHostRewriteParams().(*GlobalSpecType_HostRewrite); ok {
		return x.HostRewrite
	}
	return ""
}

func (m *GlobalSpecType) GetDisableHostRewrite() *ves_io_schema4.Empty {
	if x, ok := m.GetHostRewriteParams().(*GlobalSpecType_DisableHostRewrite); ok {
		return x.DisableHostRewrite
	}
	return nil
}

func (m *GlobalSpecType) GetRoutes() []*RouteType {
	if m != nil {
		return m.Routes
	}
	return nil
}

func (m *GlobalSpecType) GetCorsPolicy() *ves_io_schema4.CorsPolicy {
	if m != nil {
		return m.CorsPolicy
	}
	return nil
}

func (m *GlobalSpecType) GetDisableWaf() *ves_io_schema4.Empty {
	if x, ok := m.GetWafChoice().(*GlobalSpecType_DisableWaf); ok {
		return x.DisableWaf
	}
	return nil
}

func (m *GlobalSpecType) GetWaf() *ves_io_schema_views.ObjectRefType {
	if x, ok := m.GetWafChoice().(*GlobalSpecType_Waf); ok {
		return x.Waf
	}
	return nil
}

func (m *GlobalSpecType) GetWafRule() *ves_io_schema_views.ObjectRefType {
	if x, ok := m.GetWafChoice().(*GlobalSpecType_WafRule); ok {
		return x.WafRule
	}
	return nil
}

func (m *GlobalSpecType) GetAddLocation() bool {
	if m != nil {
		return m.AddLocation
	}
	return false
}

func (m *GlobalSpecType) GetNoChallenge() *ves_io_schema4.Empty {
	if x, ok := m.GetChallengeType().(*GlobalSpecType_NoChallenge); ok {
		return x.NoChallenge
	}
	return nil
}

func (m *GlobalSpecType) GetJsChallenge() *ves_io_schema_virtual_host.JavascriptChallengeType {
	if x, ok := m.GetChallengeType().(*GlobalSpecType_JsChallenge); ok {
		return x.JsChallenge
	}
	return nil
}

func (m *GlobalSpecType) GetCaptchaChallenge() *ves_io_schema_virtual_host.CaptchaChallengeType {
	if x, ok := m.GetChallengeType().(*GlobalSpecType_CaptchaChallenge); ok {
		return x.CaptchaChallenge
	}
	return nil
}

func (m *GlobalSpecType) GetPolicyBasedChallenge() *PolicyBasedChallenge {
	if x, ok := m.GetChallengeType().(*GlobalSpecType_PolicyBasedChallenge); ok {
		return x.PolicyBasedChallenge
	}
	return nil
}

func (m *GlobalSpecType) GetMoreOption() *AdvancedOptionsType {
	if m != nil {
		return m.MoreOption
	}
	return nil
}

func (m *GlobalSpecType) GetUserIdentification() *ves_io_schema_views.ObjectRefType {
	if m != nil {
		return m.UserIdentification
	}
	return nil
}

func (m *GlobalSpecType) GetDisableRateLimit() *ves_io_schema4.Empty {
	if x, ok := m.GetRateLimitChoice().(*GlobalSpecType_DisableRateLimit); ok {
		return x.DisableRateLimit
	}
	return nil
}

func (m *GlobalSpecType) GetRateLimit() *RateLimitConfigType {
	if x, ok := m.GetRateLimitChoice().(*GlobalSpecType_RateLimit); ok {
		return x.RateLimit
	}
	return nil
}

func (m *GlobalSpecType) GetMaliciousUserMitigation() *ves_io_schema_views.ObjectRefType {
	if m != nil {
		return m.MaliciousUserMitigation
	}
	return nil
}

func (m *GlobalSpecType) GetWafExclusionRules() []*ves_io_schema_policy.SimpleWafExclusionRule {
	if m != nil {
		return m.WafExclusionRules
	}
	return nil
}

func (m *GlobalSpecType) GetBlockedClients() []*SimpleClientSrcRule {
	if m != nil {
		return m.BlockedClients
	}
	return nil
}

func (m *GlobalSpecType) GetTrustedClients() []*SimpleClientSrcRule {
	if m != nil {
		return m.TrustedClients
	}
	return nil
}

func (m *GlobalSpecType) GetServicePoliciesFromNamespace() *ves_io_schema4.Empty {
	if x, ok := m.GetServicePolicyChoice().(*GlobalSpecType_ServicePoliciesFromNamespace); ok {
		return x.ServicePoliciesFromNamespace
	}
	return nil
}

func (m *GlobalSpecType) GetNoServicePolicies() *ves_io_schema4.Empty {
	if x, ok := m.GetServicePolicyChoice().(*GlobalSpecType_NoServicePolicies); ok {
		return x.NoServicePolicies
	}
	return nil
}

func (m *GlobalSpecType) GetActiveServicePolicies() *ServicePolicyList {
	if x, ok := m.GetServicePolicyChoice().(*GlobalSpecType_ActiveServicePolicies); ok {
		return x.ActiveServicePolicies
	}
	return nil
}

func (m *GlobalSpecType) GetRoundRobin() *ves_io_schema4.Empty {
	if x, ok := m.GetHashPolicyChoice().(*GlobalSpecType_RoundRobin); ok {
		return x.RoundRobin
	}
	return nil
}

func (m *GlobalSpecType) GetLeastActive() *ves_io_schema4.Empty {
	if x, ok := m.GetHashPolicyChoice().(*GlobalSpecType_LeastActive); ok {
		return x.LeastActive
	}
	return nil
}

func (m *GlobalSpecType) GetRandom() *ves_io_schema4.Empty {
	if x, ok := m.GetHashPolicyChoice().(*GlobalSpecType_Random); ok {
		return x.Random
	}
	return nil
}

func (m *GlobalSpecType) GetSourceIpStickiness() *ves_io_schema4.Empty {
	if x, ok := m.GetHashPolicyChoice().(*GlobalSpecType_SourceIpStickiness); ok {
		return x.SourceIpStickiness
	}
	return nil
}

func (m *GlobalSpecType) GetCookieStickiness() *ves_io_schema_route.CookieForHashing {
	if x, ok := m.GetHashPolicyChoice().(*GlobalSpecType_CookieStickiness); ok {
		return x.CookieStickiness
	}
	return nil
}

func (m *GlobalSpecType) GetRingHash() *HashPolicyListType {
	if x, ok := m.GetHashPolicyChoice().(*GlobalSpecType_RingHash); ok {
		return x.RingHash
	}
	return nil
}

func (m *GlobalSpecType) GetViewInternal() *ves_io_schema_views.ObjectRefType {
	if m != nil {
		return m.ViewInternal
	}
	return nil
}

func (m *GlobalSpecType) GetHostName() string {
	if m != nil {
		return m.HostName
	}
	return ""
}

func (m *GlobalSpecType) GetDnsInfo() []*ves_io_schema_virtual_host_dns_info.DnsInfo {
	if m != nil {
		return m.DnsInfo
	}
	return nil
}

func (m *GlobalSpecType) GetState() ves_io_schema_virtual_host.VirtualHostState {
	if m != nil {
		return m.State
	}
	return ves_io_schema_virtual_host.VIRTUAL_HOST_READY
}

func (m *GlobalSpecType) GetAutoCertState() ves_io_schema_virtual_host.CertificationState {
	if m != nil {
		return m.AutoCertState
	}
	return ves_io_schema_virtual_host.AutoCertDisabled
}

func (m *GlobalSpecType) GetAutoCertInfo() *ves_io_schema_virtual_host.AutoCertInfoType {
	if m != nil {
		return m.AutoCertInfo
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*GlobalSpecType) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _GlobalSpecType_OneofMarshaler, _GlobalSpecType_OneofUnmarshaler, _GlobalSpecType_OneofSizer, []interface{}{
		(*GlobalSpecType_Http)(nil),
		(*GlobalSpecType_HttpsAutoCert)(nil),
		(*GlobalSpecType_Https)(nil),
		(*GlobalSpecType_DoNotAdvertise)(nil),
		(*GlobalSpecType_AdvertiseOnPublicDefaultVip)(nil),
		(*GlobalSpecType_AdvertiseOnPublic)(nil),
		(*GlobalSpecType_AdvertiseCustom)(nil),
		(*GlobalSpecType_AutoHostRewrite)(nil),
		(*GlobalSpecType_HostRewrite)(nil),
		(*GlobalSpecType_DisableHostRewrite)(nil),
		(*GlobalSpecType_DisableWaf)(nil),
		(*GlobalSpecType_Waf)(nil),
		(*GlobalSpecType_WafRule)(nil),
		(*GlobalSpecType_NoChallenge)(nil),
		(*GlobalSpecType_JsChallenge)(nil),
		(*GlobalSpecType_CaptchaChallenge)(nil),
		(*GlobalSpecType_PolicyBasedChallenge)(nil),
		(*GlobalSpecType_DisableRateLimit)(nil),
		(*GlobalSpecType_RateLimit)(nil),
		(*GlobalSpecType_ServicePoliciesFromNamespace)(nil),
		(*GlobalSpecType_NoServicePolicies)(nil),
		(*GlobalSpecType_ActiveServicePolicies)(nil),
		(*GlobalSpecType_RoundRobin)(nil),
		(*GlobalSpecType_LeastActive)(nil),
		(*GlobalSpecType_Random)(nil),
		(*GlobalSpecType_SourceIpStickiness)(nil),
		(*GlobalSpecType_CookieStickiness)(nil),
		(*GlobalSpecType_RingHash)(nil),
	}
}

func _GlobalSpecType_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*GlobalSpecType)
	// loadbalancer_type
	switch x := m.LoadbalancerType.(type) {
	case *GlobalSpecType_Http:
		_ = b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Http); err != nil {
			return err
		}
	case *GlobalSpecType_HttpsAutoCert:
		_ = b.EncodeVarint(27<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.HttpsAutoCert); err != nil {
			return err
		}
	case *GlobalSpecType_Https:
		_ = b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Https); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("GlobalSpecType.LoadbalancerType has unexpected type %T", x)
	}
	// advertise_choice
	switch x := m.AdvertiseChoice.(type) {
	case *GlobalSpecType_DoNotAdvertise:
		_ = b.EncodeVarint(12<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.DoNotAdvertise); err != nil {
			return err
		}
	case *GlobalSpecType_AdvertiseOnPublicDefaultVip:
		_ = b.EncodeVarint(13<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.AdvertiseOnPublicDefaultVip); err != nil {
			return err
		}
	case *GlobalSpecType_AdvertiseOnPublic:
		_ = b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.AdvertiseOnPublic); err != nil {
			return err
		}
	case *GlobalSpecType_AdvertiseCustom:
		_ = b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.AdvertiseCustom); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("GlobalSpecType.AdvertiseChoice has unexpected type %T", x)
	}
	// host_rewrite_params
	switch x := m.HostRewriteParams.(type) {
	case *GlobalSpecType_AutoHostRewrite:
		_ = b.EncodeVarint(28<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.AutoHostRewrite); err != nil {
			return err
		}
	case *GlobalSpecType_HostRewrite:
		_ = b.EncodeVarint(29<<3 | proto.WireBytes)
		_ = b.EncodeStringBytes(x.HostRewrite)
	case *GlobalSpecType_DisableHostRewrite:
		_ = b.EncodeVarint(30<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.DisableHostRewrite); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("GlobalSpecType.HostRewriteParams has unexpected type %T", x)
	}
	// waf_choice
	switch x := m.WafChoice.(type) {
	case *GlobalSpecType_DisableWaf:
		_ = b.EncodeVarint(11<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.DisableWaf); err != nil {
			return err
		}
	case *GlobalSpecType_Waf:
		_ = b.EncodeVarint(9<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Waf); err != nil {
			return err
		}
	case *GlobalSpecType_WafRule:
		_ = b.EncodeVarint(10<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.WafRule); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("GlobalSpecType.WafChoice has unexpected type %T", x)
	}
	// challenge_type
	switch x := m.ChallengeType.(type) {
	case *GlobalSpecType_NoChallenge:
		_ = b.EncodeVarint(26<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.NoChallenge); err != nil {
			return err
		}
	case *GlobalSpecType_JsChallenge:
		_ = b.EncodeVarint(18<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.JsChallenge); err != nil {
			return err
		}
	case *GlobalSpecType_CaptchaChallenge:
		_ = b.EncodeVarint(24<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.CaptchaChallenge); err != nil {
			return err
		}
	case *GlobalSpecType_PolicyBasedChallenge:
		_ = b.EncodeVarint(51<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.PolicyBasedChallenge); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("GlobalSpecType.ChallengeType has unexpected type %T", x)
	}
	// rate_limit_choice
	switch x := m.RateLimitChoice.(type) {
	case *GlobalSpecType_DisableRateLimit:
		_ = b.EncodeVarint(22<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.DisableRateLimit); err != nil {
			return err
		}
	case *GlobalSpecType_RateLimit:
		_ = b.EncodeVarint(23<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.RateLimit); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("GlobalSpecType.RateLimitChoice has unexpected type %T", x)
	}
	// service_policy_choice
	switch x := m.ServicePolicyChoice.(type) {
	case *GlobalSpecType_ServicePoliciesFromNamespace:
		_ = b.EncodeVarint(41<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ServicePoliciesFromNamespace); err != nil {
			return err
		}
	case *GlobalSpecType_NoServicePolicies:
		_ = b.EncodeVarint(42<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.NoServicePolicies); err != nil {
			return err
		}
	case *GlobalSpecType_ActiveServicePolicies:
		_ = b.EncodeVarint(43<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ActiveServicePolicies); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("GlobalSpecType.ServicePolicyChoice has unexpected type %T", x)
	}
	// hash_policy_choice
	switch x := m.HashPolicyChoice.(type) {
	case *GlobalSpecType_RoundRobin:
		_ = b.EncodeVarint(45<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.RoundRobin); err != nil {
			return err
		}
	case *GlobalSpecType_LeastActive:
		_ = b.EncodeVarint(46<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.LeastActive); err != nil {
			return err
		}
	case *GlobalSpecType_Random:
		_ = b.EncodeVarint(47<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Random); err != nil {
			return err
		}
	case *GlobalSpecType_SourceIpStickiness:
		_ = b.EncodeVarint(48<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.SourceIpStickiness); err != nil {
			return err
		}
	case *GlobalSpecType_CookieStickiness:
		_ = b.EncodeVarint(49<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.CookieStickiness); err != nil {
			return err
		}
	case *GlobalSpecType_RingHash:
		_ = b.EncodeVarint(50<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.RingHash); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("GlobalSpecType.HashPolicyChoice has unexpected type %T", x)
	}
	return nil
}

func _GlobalSpecType_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*GlobalSpecType)
	switch tag {
	case 2: // loadbalancer_type.http
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ProxyTypeHttp)
		err := b.DecodeMessage(msg)
		m.LoadbalancerType = &GlobalSpecType_Http{msg}
		return true, err
	case 27: // loadbalancer_type.https_auto_cert
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ProxyTypeHttpsAutoCerts)
		err := b.DecodeMessage(msg)
		m.LoadbalancerType = &GlobalSpecType_HttpsAutoCert{msg}
		return true, err
	case 3: // loadbalancer_type.https
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ProxyTypeHttps)
		err := b.DecodeMessage(msg)
		m.LoadbalancerType = &GlobalSpecType_Https{msg}
		return true, err
	case 12: // advertise_choice.do_not_advertise
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.AdvertiseChoice = &GlobalSpecType_DoNotAdvertise{msg}
		return true, err
	case 13: // advertise_choice.advertise_on_public_default_vip
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.AdvertiseChoice = &GlobalSpecType_AdvertiseOnPublicDefaultVip{msg}
		return true, err
	case 4: // advertise_choice.advertise_on_public
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema_views.AdvertisePublic)
		err := b.DecodeMessage(msg)
		m.AdvertiseChoice = &GlobalSpecType_AdvertiseOnPublic{msg}
		return true, err
	case 5: // advertise_choice.advertise_custom
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema_views.AdvertiseCustom)
		err := b.DecodeMessage(msg)
		m.AdvertiseChoice = &GlobalSpecType_AdvertiseCustom{msg}
		return true, err
	case 28: // host_rewrite_params.auto_host_rewrite
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.HostRewriteParams = &GlobalSpecType_AutoHostRewrite{msg}
		return true, err
	case 29: // host_rewrite_params.host_rewrite
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.HostRewriteParams = &GlobalSpecType_HostRewrite{x}
		return true, err
	case 30: // host_rewrite_params.disable_host_rewrite
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.HostRewriteParams = &GlobalSpecType_DisableHostRewrite{msg}
		return true, err
	case 11: // waf_choice.disable_waf
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.WafChoice = &GlobalSpecType_DisableWaf{msg}
		return true, err
	case 9: // waf_choice.waf
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema_views.ObjectRefType)
		err := b.DecodeMessage(msg)
		m.WafChoice = &GlobalSpecType_Waf{msg}
		return true, err
	case 10: // waf_choice.waf_rule
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema_views.ObjectRefType)
		err := b.DecodeMessage(msg)
		m.WafChoice = &GlobalSpecType_WafRule{msg}
		return true, err
	case 26: // challenge_type.no_challenge
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.ChallengeType = &GlobalSpecType_NoChallenge{msg}
		return true, err
	case 18: // challenge_type.js_challenge
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema_virtual_host.JavascriptChallengeType)
		err := b.DecodeMessage(msg)
		m.ChallengeType = &GlobalSpecType_JsChallenge{msg}
		return true, err
	case 24: // challenge_type.captcha_challenge
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema_virtual_host.CaptchaChallengeType)
		err := b.DecodeMessage(msg)
		m.ChallengeType = &GlobalSpecType_CaptchaChallenge{msg}
		return true, err
	case 51: // challenge_type.policy_based_challenge
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(PolicyBasedChallenge)
		err := b.DecodeMessage(msg)
		m.ChallengeType = &GlobalSpecType_PolicyBasedChallenge{msg}
		return true, err
	case 22: // rate_limit_choice.disable_rate_limit
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.RateLimitChoice = &GlobalSpecType_DisableRateLimit{msg}
		return true, err
	case 23: // rate_limit_choice.rate_limit
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(RateLimitConfigType)
		err := b.DecodeMessage(msg)
		m.RateLimitChoice = &GlobalSpecType_RateLimit{msg}
		return true, err
	case 41: // service_policy_choice.service_policies_from_namespace
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.ServicePolicyChoice = &GlobalSpecType_ServicePoliciesFromNamespace{msg}
		return true, err
	case 42: // service_policy_choice.no_service_policies
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.ServicePolicyChoice = &GlobalSpecType_NoServicePolicies{msg}
		return true, err
	case 43: // service_policy_choice.active_service_policies
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ServicePolicyList)
		err := b.DecodeMessage(msg)
		m.ServicePolicyChoice = &GlobalSpecType_ActiveServicePolicies{msg}
		return true, err
	case 45: // hash_policy_choice.round_robin
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.HashPolicyChoice = &GlobalSpecType_RoundRobin{msg}
		return true, err
	case 46: // hash_policy_choice.least_active
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.HashPolicyChoice = &GlobalSpecType_LeastActive{msg}
		return true, err
	case 47: // hash_policy_choice.random
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.HashPolicyChoice = &GlobalSpecType_Random{msg}
		return true, err
	case 48: // hash_policy_choice.source_ip_stickiness
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.HashPolicyChoice = &GlobalSpecType_SourceIpStickiness{msg}
		return true, err
	case 49: // hash_policy_choice.cookie_stickiness
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema_route.CookieForHashing)
		err := b.DecodeMessage(msg)
		m.HashPolicyChoice = &GlobalSpecType_CookieStickiness{msg}
		return true, err
	case 50: // hash_policy_choice.ring_hash
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(HashPolicyListType)
		err := b.DecodeMessage(msg)
		m.HashPolicyChoice = &GlobalSpecType_RingHash{msg}
		return true, err
	default:
		return false, nil
	}
}

func _GlobalSpecType_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*GlobalSpecType)
	// loadbalancer_type
	switch x := m.LoadbalancerType.(type) {
	case *GlobalSpecType_Http:
		s := proto.Size(x.Http)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *GlobalSpecType_HttpsAutoCert:
		s := proto.Size(x.HttpsAutoCert)
		n += proto.SizeVarint(27<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *GlobalSpecType_Https:
		s := proto.Size(x.Https)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	// advertise_choice
	switch x := m.AdvertiseChoice.(type) {
	case *GlobalSpecType_DoNotAdvertise:
		s := proto.Size(x.DoNotAdvertise)
		n += proto.SizeVarint(12<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *GlobalSpecType_AdvertiseOnPublicDefaultVip:
		s := proto.Size(x.AdvertiseOnPublicDefaultVip)
		n += proto.SizeVarint(13<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *GlobalSpecType_AdvertiseOnPublic:
		s := proto.Size(x.AdvertiseOnPublic)
		n += proto.SizeVarint(4<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *GlobalSpecType_AdvertiseCustom:
		s := proto.Size(x.AdvertiseCustom)
		n += proto.SizeVarint(5<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	// host_rewrite_params
	switch x := m.HostRewriteParams.(type) {
	case *GlobalSpecType_AutoHostRewrite:
		s := proto.Size(x.AutoHostRewrite)
		n += proto.SizeVarint(28<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *GlobalSpecType_HostRewrite:
		n += proto.SizeVarint(29<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.HostRewrite)))
		n += len(x.HostRewrite)
	case *GlobalSpecType_DisableHostRewrite:
		s := proto.Size(x.DisableHostRewrite)
		n += proto.SizeVarint(30<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	// waf_choice
	switch x := m.WafChoice.(type) {
	case *GlobalSpecType_DisableWaf:
		s := proto.Size(x.DisableWaf)
		n += proto.SizeVarint(11<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *GlobalSpecType_Waf:
		s := proto.Size(x.Waf)
		n += proto.SizeVarint(9<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *GlobalSpecType_WafRule:
		s := proto.Size(x.WafRule)
		n += proto.SizeVarint(10<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	// challenge_type
	switch x := m.ChallengeType.(type) {
	case *GlobalSpecType_NoChallenge:
		s := proto.Size(x.NoChallenge)
		n += proto.SizeVarint(26<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *GlobalSpecType_JsChallenge:
		s := proto.Size(x.JsChallenge)
		n += proto.SizeVarint(18<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *GlobalSpecType_CaptchaChallenge:
		s := proto.Size(x.CaptchaChallenge)
		n += proto.SizeVarint(24<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *GlobalSpecType_PolicyBasedChallenge:
		s := proto.Size(x.PolicyBasedChallenge)
		n += proto.SizeVarint(51<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	// rate_limit_choice
	switch x := m.RateLimitChoice.(type) {
	case *GlobalSpecType_DisableRateLimit:
		s := proto.Size(x.DisableRateLimit)
		n += proto.SizeVarint(22<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *GlobalSpecType_RateLimit:
		s := proto.Size(x.RateLimit)
		n += proto.SizeVarint(23<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	// service_policy_choice
	switch x := m.ServicePolicyChoice.(type) {
	case *GlobalSpecType_ServicePoliciesFromNamespace:
		s := proto.Size(x.ServicePoliciesFromNamespace)
		n += proto.SizeVarint(41<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *GlobalSpecType_NoServicePolicies:
		s := proto.Size(x.NoServicePolicies)
		n += proto.SizeVarint(42<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *GlobalSpecType_ActiveServicePolicies:
		s := proto.Size(x.ActiveServicePolicies)
		n += proto.SizeVarint(43<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	// hash_policy_choice
	switch x := m.HashPolicyChoice.(type) {
	case *GlobalSpecType_RoundRobin:
		s := proto.Size(x.RoundRobin)
		n += proto.SizeVarint(45<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *GlobalSpecType_LeastActive:
		s := proto.Size(x.LeastActive)
		n += proto.SizeVarint(46<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *GlobalSpecType_Random:
		s := proto.Size(x.Random)
		n += proto.SizeVarint(47<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *GlobalSpecType_SourceIpStickiness:
		s := proto.Size(x.SourceIpStickiness)
		n += proto.SizeVarint(48<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *GlobalSpecType_CookieStickiness:
		s := proto.Size(x.CookieStickiness)
		n += proto.SizeVarint(49<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *GlobalSpecType_RingHash:
		s := proto.Size(x.RingHash)
		n += proto.SizeVarint(50<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// CreateSpecType
//
// x-displayName: "Create HTTP Loadbalancer"
// Shape of the HTTP loadbalancer specification
type CreateSpecType struct {
	Domains []string `protobuf:"bytes,1,rep,name=domains" json:"domains,omitempty"`
	// Types that are valid to be assigned to LoadbalancerType:
	//	*CreateSpecType_Http
	//	*CreateSpecType_HttpsAutoCert
	//	*CreateSpecType_Https
	LoadbalancerType isCreateSpecType_LoadbalancerType `protobuf_oneof:"loadbalancer_type"`
	// Types that are valid to be assigned to AdvertiseChoice:
	//	*CreateSpecType_DoNotAdvertise
	//	*CreateSpecType_AdvertiseOnPublicDefaultVip
	//	*CreateSpecType_AdvertiseOnPublic
	//	*CreateSpecType_AdvertiseCustom
	AdvertiseChoice   isCreateSpecType_AdvertiseChoice            `protobuf_oneof:"advertise_choice"`
	DefaultRoutePools []*ves_io_schema_views.OriginPoolWithWeight `protobuf:"bytes,6,rep,name=default_route_pools,json=defaultRoutePools" json:"default_route_pools,omitempty"`
	Routes            []*RouteType                                `protobuf:"bytes,7,rep,name=routes" json:"routes,omitempty"`
	CorsPolicy        *ves_io_schema4.CorsPolicy                  `protobuf:"bytes,8,opt,name=cors_policy,json=corsPolicy" json:"cors_policy,omitempty"`
	// Types that are valid to be assigned to WafChoice:
	//	*CreateSpecType_DisableWaf
	//	*CreateSpecType_Waf
	//	*CreateSpecType_WafRule
	WafChoice   isCreateSpecType_WafChoice `protobuf_oneof:"waf_choice"`
	AddLocation bool                       `protobuf:"varint,17,opt,name=add_location,json=addLocation,proto3" json:"add_location,omitempty"`
	// Types that are valid to be assigned to ChallengeType:
	//	*CreateSpecType_NoChallenge
	//	*CreateSpecType_JsChallenge
	//	*CreateSpecType_CaptchaChallenge
	//	*CreateSpecType_PolicyBasedChallenge
	ChallengeType      isCreateSpecType_ChallengeType     `protobuf_oneof:"challenge_type"`
	MoreOption         *AdvancedOptionsType               `protobuf:"bytes,19,opt,name=more_option,json=moreOption" json:"more_option,omitempty"`
	UserIdentification *ves_io_schema_views.ObjectRefType `protobuf:"bytes,20,opt,name=user_identification,json=userIdentification" json:"user_identification,omitempty"`
	// Types that are valid to be assigned to RateLimitChoice:
	//	*CreateSpecType_DisableRateLimit
	//	*CreateSpecType_RateLimit
	RateLimitChoice         isCreateSpecType_RateLimitChoice               `protobuf_oneof:"rate_limit_choice"`
	MaliciousUserMitigation *ves_io_schema_views.ObjectRefType             `protobuf:"bytes,32,opt,name=malicious_user_mitigation,json=maliciousUserMitigation" json:"malicious_user_mitigation,omitempty"`
	WafExclusionRules       []*ves_io_schema_policy.SimpleWafExclusionRule `protobuf:"bytes,33,rep,name=waf_exclusion_rules,json=wafExclusionRules" json:"waf_exclusion_rules,omitempty"`
	BlockedClients          []*SimpleClientSrcRule                         `protobuf:"bytes,34,rep,name=blocked_clients,json=blockedClients" json:"blocked_clients,omitempty"`
	TrustedClients          []*SimpleClientSrcRule                         `protobuf:"bytes,35,rep,name=trusted_clients,json=trustedClients" json:"trusted_clients,omitempty"`
	// Types that are valid to be assigned to ServicePolicyChoice:
	//	*CreateSpecType_ServicePoliciesFromNamespace
	//	*CreateSpecType_NoServicePolicies
	//	*CreateSpecType_ActiveServicePolicies
	ServicePolicyChoice isCreateSpecType_ServicePolicyChoice `protobuf_oneof:"service_policy_choice"`
	// Types that are valid to be assigned to HashPolicyChoice:
	//	*CreateSpecType_RoundRobin
	//	*CreateSpecType_LeastActive
	//	*CreateSpecType_Random
	//	*CreateSpecType_SourceIpStickiness
	//	*CreateSpecType_CookieStickiness
	//	*CreateSpecType_RingHash
	HashPolicyChoice isCreateSpecType_HashPolicyChoice `protobuf_oneof:"hash_policy_choice"`
}

func (m *CreateSpecType) Reset()                    { *m = CreateSpecType{} }
func (*CreateSpecType) ProtoMessage()               {}
func (*CreateSpecType) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{23} }

type isCreateSpecType_LoadbalancerType interface {
	isCreateSpecType_LoadbalancerType()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isCreateSpecType_AdvertiseChoice interface {
	isCreateSpecType_AdvertiseChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isCreateSpecType_WafChoice interface {
	isCreateSpecType_WafChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isCreateSpecType_ChallengeType interface {
	isCreateSpecType_ChallengeType()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isCreateSpecType_RateLimitChoice interface {
	isCreateSpecType_RateLimitChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isCreateSpecType_ServicePolicyChoice interface {
	isCreateSpecType_ServicePolicyChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isCreateSpecType_HashPolicyChoice interface {
	isCreateSpecType_HashPolicyChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type CreateSpecType_Http struct {
	Http *ProxyTypeHttp `protobuf:"bytes,2,opt,name=http,oneof"`
}
type CreateSpecType_HttpsAutoCert struct {
	HttpsAutoCert *ProxyTypeHttpsAutoCerts `protobuf:"bytes,27,opt,name=https_auto_cert,json=httpsAutoCert,oneof"`
}
type CreateSpecType_Https struct {
	Https *ProxyTypeHttps `protobuf:"bytes,3,opt,name=https,oneof"`
}
type CreateSpecType_DoNotAdvertise struct {
	DoNotAdvertise *ves_io_schema4.Empty `protobuf:"bytes,12,opt,name=do_not_advertise,json=doNotAdvertise,oneof"`
}
type CreateSpecType_AdvertiseOnPublicDefaultVip struct {
	AdvertiseOnPublicDefaultVip *ves_io_schema4.Empty `protobuf:"bytes,13,opt,name=advertise_on_public_default_vip,json=advertiseOnPublicDefaultVip,oneof"`
}
type CreateSpecType_AdvertiseOnPublic struct {
	AdvertiseOnPublic *ves_io_schema_views.AdvertisePublic `protobuf:"bytes,4,opt,name=advertise_on_public,json=advertiseOnPublic,oneof"`
}
type CreateSpecType_AdvertiseCustom struct {
	AdvertiseCustom *ves_io_schema_views.AdvertiseCustom `protobuf:"bytes,5,opt,name=advertise_custom,json=advertiseCustom,oneof"`
}
type CreateSpecType_DisableWaf struct {
	DisableWaf *ves_io_schema4.Empty `protobuf:"bytes,11,opt,name=disable_waf,json=disableWaf,oneof"`
}
type CreateSpecType_Waf struct {
	Waf *ves_io_schema_views.ObjectRefType `protobuf:"bytes,9,opt,name=waf,oneof"`
}
type CreateSpecType_WafRule struct {
	WafRule *ves_io_schema_views.ObjectRefType `protobuf:"bytes,10,opt,name=waf_rule,json=wafRule,oneof"`
}
type CreateSpecType_NoChallenge struct {
	NoChallenge *ves_io_schema4.Empty `protobuf:"bytes,26,opt,name=no_challenge,json=noChallenge,oneof"`
}
type CreateSpecType_JsChallenge struct {
	JsChallenge *ves_io_schema_virtual_host.JavascriptChallengeType `protobuf:"bytes,18,opt,name=js_challenge,json=jsChallenge,oneof"`
}
type CreateSpecType_CaptchaChallenge struct {
	CaptchaChallenge *ves_io_schema_virtual_host.CaptchaChallengeType `protobuf:"bytes,24,opt,name=captcha_challenge,json=captchaChallenge,oneof"`
}
type CreateSpecType_PolicyBasedChallenge struct {
	PolicyBasedChallenge *PolicyBasedChallenge `protobuf:"bytes,51,opt,name=policy_based_challenge,json=policyBasedChallenge,oneof"`
}
type CreateSpecType_DisableRateLimit struct {
	DisableRateLimit *ves_io_schema4.Empty `protobuf:"bytes,22,opt,name=disable_rate_limit,json=disableRateLimit,oneof"`
}
type CreateSpecType_RateLimit struct {
	RateLimit *RateLimitConfigType `protobuf:"bytes,23,opt,name=rate_limit,json=rateLimit,oneof"`
}
type CreateSpecType_ServicePoliciesFromNamespace struct {
	ServicePoliciesFromNamespace *ves_io_schema4.Empty `protobuf:"bytes,41,opt,name=service_policies_from_namespace,json=servicePoliciesFromNamespace,oneof"`
}
type CreateSpecType_NoServicePolicies struct {
	NoServicePolicies *ves_io_schema4.Empty `protobuf:"bytes,42,opt,name=no_service_policies,json=noServicePolicies,oneof"`
}
type CreateSpecType_ActiveServicePolicies struct {
	ActiveServicePolicies *ServicePolicyList `protobuf:"bytes,43,opt,name=active_service_policies,json=activeServicePolicies,oneof"`
}
type CreateSpecType_RoundRobin struct {
	RoundRobin *ves_io_schema4.Empty `protobuf:"bytes,45,opt,name=round_robin,json=roundRobin,oneof"`
}
type CreateSpecType_LeastActive struct {
	LeastActive *ves_io_schema4.Empty `protobuf:"bytes,46,opt,name=least_active,json=leastActive,oneof"`
}
type CreateSpecType_Random struct {
	Random *ves_io_schema4.Empty `protobuf:"bytes,47,opt,name=random,oneof"`
}
type CreateSpecType_SourceIpStickiness struct {
	SourceIpStickiness *ves_io_schema4.Empty `protobuf:"bytes,48,opt,name=source_ip_stickiness,json=sourceIpStickiness,oneof"`
}
type CreateSpecType_CookieStickiness struct {
	CookieStickiness *ves_io_schema_route.CookieForHashing `protobuf:"bytes,49,opt,name=cookie_stickiness,json=cookieStickiness,oneof"`
}
type CreateSpecType_RingHash struct {
	RingHash *HashPolicyListType `protobuf:"bytes,50,opt,name=ring_hash,json=ringHash,oneof"`
}

func (*CreateSpecType_Http) isCreateSpecType_LoadbalancerType()                            {}
func (*CreateSpecType_HttpsAutoCert) isCreateSpecType_LoadbalancerType()                   {}
func (*CreateSpecType_Https) isCreateSpecType_LoadbalancerType()                           {}
func (*CreateSpecType_DoNotAdvertise) isCreateSpecType_AdvertiseChoice()                   {}
func (*CreateSpecType_AdvertiseOnPublicDefaultVip) isCreateSpecType_AdvertiseChoice()      {}
func (*CreateSpecType_AdvertiseOnPublic) isCreateSpecType_AdvertiseChoice()                {}
func (*CreateSpecType_AdvertiseCustom) isCreateSpecType_AdvertiseChoice()                  {}
func (*CreateSpecType_DisableWaf) isCreateSpecType_WafChoice()                             {}
func (*CreateSpecType_Waf) isCreateSpecType_WafChoice()                                    {}
func (*CreateSpecType_WafRule) isCreateSpecType_WafChoice()                                {}
func (*CreateSpecType_NoChallenge) isCreateSpecType_ChallengeType()                        {}
func (*CreateSpecType_JsChallenge) isCreateSpecType_ChallengeType()                        {}
func (*CreateSpecType_CaptchaChallenge) isCreateSpecType_ChallengeType()                   {}
func (*CreateSpecType_PolicyBasedChallenge) isCreateSpecType_ChallengeType()               {}
func (*CreateSpecType_DisableRateLimit) isCreateSpecType_RateLimitChoice()                 {}
func (*CreateSpecType_RateLimit) isCreateSpecType_RateLimitChoice()                        {}
func (*CreateSpecType_ServicePoliciesFromNamespace) isCreateSpecType_ServicePolicyChoice() {}
func (*CreateSpecType_NoServicePolicies) isCreateSpecType_ServicePolicyChoice()            {}
func (*CreateSpecType_ActiveServicePolicies) isCreateSpecType_ServicePolicyChoice()        {}
func (*CreateSpecType_RoundRobin) isCreateSpecType_HashPolicyChoice()                      {}
func (*CreateSpecType_LeastActive) isCreateSpecType_HashPolicyChoice()                     {}
func (*CreateSpecType_Random) isCreateSpecType_HashPolicyChoice()                          {}
func (*CreateSpecType_SourceIpStickiness) isCreateSpecType_HashPolicyChoice()              {}
func (*CreateSpecType_CookieStickiness) isCreateSpecType_HashPolicyChoice()                {}
func (*CreateSpecType_RingHash) isCreateSpecType_HashPolicyChoice()                        {}

func (m *CreateSpecType) GetLoadbalancerType() isCreateSpecType_LoadbalancerType {
	if m != nil {
		return m.LoadbalancerType
	}
	return nil
}
func (m *CreateSpecType) GetAdvertiseChoice() isCreateSpecType_AdvertiseChoice {
	if m != nil {
		return m.AdvertiseChoice
	}
	return nil
}
func (m *CreateSpecType) GetWafChoice() isCreateSpecType_WafChoice {
	if m != nil {
		return m.WafChoice
	}
	return nil
}
func (m *CreateSpecType) GetChallengeType() isCreateSpecType_ChallengeType {
	if m != nil {
		return m.ChallengeType
	}
	return nil
}
func (m *CreateSpecType) GetRateLimitChoice() isCreateSpecType_RateLimitChoice {
	if m != nil {
		return m.RateLimitChoice
	}
	return nil
}
func (m *CreateSpecType) GetServicePolicyChoice() isCreateSpecType_ServicePolicyChoice {
	if m != nil {
		return m.ServicePolicyChoice
	}
	return nil
}
func (m *CreateSpecType) GetHashPolicyChoice() isCreateSpecType_HashPolicyChoice {
	if m != nil {
		return m.HashPolicyChoice
	}
	return nil
}

func (m *CreateSpecType) GetDomains() []string {
	if m != nil {
		return m.Domains
	}
	return nil
}

func (m *CreateSpecType) GetHttp() *ProxyTypeHttp {
	if x, ok := m.GetLoadbalancerType().(*CreateSpecType_Http); ok {
		return x.Http
	}
	return nil
}

func (m *CreateSpecType) GetHttpsAutoCert() *ProxyTypeHttpsAutoCerts {
	if x, ok := m.GetLoadbalancerType().(*CreateSpecType_HttpsAutoCert); ok {
		return x.HttpsAutoCert
	}
	return nil
}

func (m *CreateSpecType) GetHttps() *ProxyTypeHttps {
	if x, ok := m.GetLoadbalancerType().(*CreateSpecType_Https); ok {
		return x.Https
	}
	return nil
}

func (m *CreateSpecType) GetDoNotAdvertise() *ves_io_schema4.Empty {
	if x, ok := m.GetAdvertiseChoice().(*CreateSpecType_DoNotAdvertise); ok {
		return x.DoNotAdvertise
	}
	return nil
}

func (m *CreateSpecType) GetAdvertiseOnPublicDefaultVip() *ves_io_schema4.Empty {
	if x, ok := m.GetAdvertiseChoice().(*CreateSpecType_AdvertiseOnPublicDefaultVip); ok {
		return x.AdvertiseOnPublicDefaultVip
	}
	return nil
}

func (m *CreateSpecType) GetAdvertiseOnPublic() *ves_io_schema_views.AdvertisePublic {
	if x, ok := m.GetAdvertiseChoice().(*CreateSpecType_AdvertiseOnPublic); ok {
		return x.AdvertiseOnPublic
	}
	return nil
}

func (m *CreateSpecType) GetAdvertiseCustom() *ves_io_schema_views.AdvertiseCustom {
	if x, ok := m.GetAdvertiseChoice().(*CreateSpecType_AdvertiseCustom); ok {
		return x.AdvertiseCustom
	}
	return nil
}

func (m *CreateSpecType) GetDefaultRoutePools() []*ves_io_schema_views.OriginPoolWithWeight {
	if m != nil {
		return m.DefaultRoutePools
	}
	return nil
}

func (m *CreateSpecType) GetRoutes() []*RouteType {
	if m != nil {
		return m.Routes
	}
	return nil
}

func (m *CreateSpecType) GetCorsPolicy() *ves_io_schema4.CorsPolicy {
	if m != nil {
		return m.CorsPolicy
	}
	return nil
}

func (m *CreateSpecType) GetDisableWaf() *ves_io_schema4.Empty {
	if x, ok := m.GetWafChoice().(*CreateSpecType_DisableWaf); ok {
		return x.DisableWaf
	}
	return nil
}

func (m *CreateSpecType) GetWaf() *ves_io_schema_views.ObjectRefType {
	if x, ok := m.GetWafChoice().(*CreateSpecType_Waf); ok {
		return x.Waf
	}
	return nil
}

func (m *CreateSpecType) GetWafRule() *ves_io_schema_views.ObjectRefType {
	if x, ok := m.GetWafChoice().(*CreateSpecType_WafRule); ok {
		return x.WafRule
	}
	return nil
}

func (m *CreateSpecType) GetAddLocation() bool {
	if m != nil {
		return m.AddLocation
	}
	return false
}

func (m *CreateSpecType) GetNoChallenge() *ves_io_schema4.Empty {
	if x, ok := m.GetChallengeType().(*CreateSpecType_NoChallenge); ok {
		return x.NoChallenge
	}
	return nil
}

func (m *CreateSpecType) GetJsChallenge() *ves_io_schema_virtual_host.JavascriptChallengeType {
	if x, ok := m.GetChallengeType().(*CreateSpecType_JsChallenge); ok {
		return x.JsChallenge
	}
	return nil
}

func (m *CreateSpecType) GetCaptchaChallenge() *ves_io_schema_virtual_host.CaptchaChallengeType {
	if x, ok := m.GetChallengeType().(*CreateSpecType_CaptchaChallenge); ok {
		return x.CaptchaChallenge
	}
	return nil
}

func (m *CreateSpecType) GetPolicyBasedChallenge() *PolicyBasedChallenge {
	if x, ok := m.GetChallengeType().(*CreateSpecType_PolicyBasedChallenge); ok {
		return x.PolicyBasedChallenge
	}
	return nil
}

func (m *CreateSpecType) GetMoreOption() *AdvancedOptionsType {
	if m != nil {
		return m.MoreOption
	}
	return nil
}

func (m *CreateSpecType) GetUserIdentification() *ves_io_schema_views.ObjectRefType {
	if m != nil {
		return m.UserIdentification
	}
	return nil
}

func (m *CreateSpecType) GetDisableRateLimit() *ves_io_schema4.Empty {
	if x, ok := m.GetRateLimitChoice().(*CreateSpecType_DisableRateLimit); ok {
		return x.DisableRateLimit
	}
	return nil
}

func (m *CreateSpecType) GetRateLimit() *RateLimitConfigType {
	if x, ok := m.GetRateLimitChoice().(*CreateSpecType_RateLimit); ok {
		return x.RateLimit
	}
	return nil
}

func (m *CreateSpecType) GetMaliciousUserMitigation() *ves_io_schema_views.ObjectRefType {
	if m != nil {
		return m.MaliciousUserMitigation
	}
	return nil
}

func (m *CreateSpecType) GetWafExclusionRules() []*ves_io_schema_policy.SimpleWafExclusionRule {
	if m != nil {
		return m.WafExclusionRules
	}
	return nil
}

func (m *CreateSpecType) GetBlockedClients() []*SimpleClientSrcRule {
	if m != nil {
		return m.BlockedClients
	}
	return nil
}

func (m *CreateSpecType) GetTrustedClients() []*SimpleClientSrcRule {
	if m != nil {
		return m.TrustedClients
	}
	return nil
}

func (m *CreateSpecType) GetServicePoliciesFromNamespace() *ves_io_schema4.Empty {
	if x, ok := m.GetServicePolicyChoice().(*CreateSpecType_ServicePoliciesFromNamespace); ok {
		return x.ServicePoliciesFromNamespace
	}
	return nil
}

func (m *CreateSpecType) GetNoServicePolicies() *ves_io_schema4.Empty {
	if x, ok := m.GetServicePolicyChoice().(*CreateSpecType_NoServicePolicies); ok {
		return x.NoServicePolicies
	}
	return nil
}

func (m *CreateSpecType) GetActiveServicePolicies() *ServicePolicyList {
	if x, ok := m.GetServicePolicyChoice().(*CreateSpecType_ActiveServicePolicies); ok {
		return x.ActiveServicePolicies
	}
	return nil
}

func (m *CreateSpecType) GetRoundRobin() *ves_io_schema4.Empty {
	if x, ok := m.GetHashPolicyChoice().(*CreateSpecType_RoundRobin); ok {
		return x.RoundRobin
	}
	return nil
}

func (m *CreateSpecType) GetLeastActive() *ves_io_schema4.Empty {
	if x, ok := m.GetHashPolicyChoice().(*CreateSpecType_LeastActive); ok {
		return x.LeastActive
	}
	return nil
}

func (m *CreateSpecType) GetRandom() *ves_io_schema4.Empty {
	if x, ok := m.GetHashPolicyChoice().(*CreateSpecType_Random); ok {
		return x.Random
	}
	return nil
}

func (m *CreateSpecType) GetSourceIpStickiness() *ves_io_schema4.Empty {
	if x, ok := m.GetHashPolicyChoice().(*CreateSpecType_SourceIpStickiness); ok {
		return x.SourceIpStickiness
	}
	return nil
}

func (m *CreateSpecType) GetCookieStickiness() *ves_io_schema_route.CookieForHashing {
	if x, ok := m.GetHashPolicyChoice().(*CreateSpecType_CookieStickiness); ok {
		return x.CookieStickiness
	}
	return nil
}

func (m *CreateSpecType) GetRingHash() *HashPolicyListType {
	if x, ok := m.GetHashPolicyChoice().(*CreateSpecType_RingHash); ok {
		return x.RingHash
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*CreateSpecType) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _CreateSpecType_OneofMarshaler, _CreateSpecType_OneofUnmarshaler, _CreateSpecType_OneofSizer, []interface{}{
		(*CreateSpecType_Http)(nil),
		(*CreateSpecType_HttpsAutoCert)(nil),
		(*CreateSpecType_Https)(nil),
		(*CreateSpecType_DoNotAdvertise)(nil),
		(*CreateSpecType_AdvertiseOnPublicDefaultVip)(nil),
		(*CreateSpecType_AdvertiseOnPublic)(nil),
		(*CreateSpecType_AdvertiseCustom)(nil),
		(*CreateSpecType_DisableWaf)(nil),
		(*CreateSpecType_Waf)(nil),
		(*CreateSpecType_WafRule)(nil),
		(*CreateSpecType_NoChallenge)(nil),
		(*CreateSpecType_JsChallenge)(nil),
		(*CreateSpecType_CaptchaChallenge)(nil),
		(*CreateSpecType_PolicyBasedChallenge)(nil),
		(*CreateSpecType_DisableRateLimit)(nil),
		(*CreateSpecType_RateLimit)(nil),
		(*CreateSpecType_ServicePoliciesFromNamespace)(nil),
		(*CreateSpecType_NoServicePolicies)(nil),
		(*CreateSpecType_ActiveServicePolicies)(nil),
		(*CreateSpecType_RoundRobin)(nil),
		(*CreateSpecType_LeastActive)(nil),
		(*CreateSpecType_Random)(nil),
		(*CreateSpecType_SourceIpStickiness)(nil),
		(*CreateSpecType_CookieStickiness)(nil),
		(*CreateSpecType_RingHash)(nil),
	}
}

func _CreateSpecType_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*CreateSpecType)
	// loadbalancer_type
	switch x := m.LoadbalancerType.(type) {
	case *CreateSpecType_Http:
		_ = b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Http); err != nil {
			return err
		}
	case *CreateSpecType_HttpsAutoCert:
		_ = b.EncodeVarint(27<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.HttpsAutoCert); err != nil {
			return err
		}
	case *CreateSpecType_Https:
		_ = b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Https); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("CreateSpecType.LoadbalancerType has unexpected type %T", x)
	}
	// advertise_choice
	switch x := m.AdvertiseChoice.(type) {
	case *CreateSpecType_DoNotAdvertise:
		_ = b.EncodeVarint(12<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.DoNotAdvertise); err != nil {
			return err
		}
	case *CreateSpecType_AdvertiseOnPublicDefaultVip:
		_ = b.EncodeVarint(13<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.AdvertiseOnPublicDefaultVip); err != nil {
			return err
		}
	case *CreateSpecType_AdvertiseOnPublic:
		_ = b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.AdvertiseOnPublic); err != nil {
			return err
		}
	case *CreateSpecType_AdvertiseCustom:
		_ = b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.AdvertiseCustom); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("CreateSpecType.AdvertiseChoice has unexpected type %T", x)
	}
	// waf_choice
	switch x := m.WafChoice.(type) {
	case *CreateSpecType_DisableWaf:
		_ = b.EncodeVarint(11<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.DisableWaf); err != nil {
			return err
		}
	case *CreateSpecType_Waf:
		_ = b.EncodeVarint(9<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Waf); err != nil {
			return err
		}
	case *CreateSpecType_WafRule:
		_ = b.EncodeVarint(10<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.WafRule); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("CreateSpecType.WafChoice has unexpected type %T", x)
	}
	// challenge_type
	switch x := m.ChallengeType.(type) {
	case *CreateSpecType_NoChallenge:
		_ = b.EncodeVarint(26<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.NoChallenge); err != nil {
			return err
		}
	case *CreateSpecType_JsChallenge:
		_ = b.EncodeVarint(18<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.JsChallenge); err != nil {
			return err
		}
	case *CreateSpecType_CaptchaChallenge:
		_ = b.EncodeVarint(24<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.CaptchaChallenge); err != nil {
			return err
		}
	case *CreateSpecType_PolicyBasedChallenge:
		_ = b.EncodeVarint(51<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.PolicyBasedChallenge); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("CreateSpecType.ChallengeType has unexpected type %T", x)
	}
	// rate_limit_choice
	switch x := m.RateLimitChoice.(type) {
	case *CreateSpecType_DisableRateLimit:
		_ = b.EncodeVarint(22<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.DisableRateLimit); err != nil {
			return err
		}
	case *CreateSpecType_RateLimit:
		_ = b.EncodeVarint(23<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.RateLimit); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("CreateSpecType.RateLimitChoice has unexpected type %T", x)
	}
	// service_policy_choice
	switch x := m.ServicePolicyChoice.(type) {
	case *CreateSpecType_ServicePoliciesFromNamespace:
		_ = b.EncodeVarint(41<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ServicePoliciesFromNamespace); err != nil {
			return err
		}
	case *CreateSpecType_NoServicePolicies:
		_ = b.EncodeVarint(42<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.NoServicePolicies); err != nil {
			return err
		}
	case *CreateSpecType_ActiveServicePolicies:
		_ = b.EncodeVarint(43<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ActiveServicePolicies); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("CreateSpecType.ServicePolicyChoice has unexpected type %T", x)
	}
	// hash_policy_choice
	switch x := m.HashPolicyChoice.(type) {
	case *CreateSpecType_RoundRobin:
		_ = b.EncodeVarint(45<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.RoundRobin); err != nil {
			return err
		}
	case *CreateSpecType_LeastActive:
		_ = b.EncodeVarint(46<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.LeastActive); err != nil {
			return err
		}
	case *CreateSpecType_Random:
		_ = b.EncodeVarint(47<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Random); err != nil {
			return err
		}
	case *CreateSpecType_SourceIpStickiness:
		_ = b.EncodeVarint(48<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.SourceIpStickiness); err != nil {
			return err
		}
	case *CreateSpecType_CookieStickiness:
		_ = b.EncodeVarint(49<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.CookieStickiness); err != nil {
			return err
		}
	case *CreateSpecType_RingHash:
		_ = b.EncodeVarint(50<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.RingHash); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("CreateSpecType.HashPolicyChoice has unexpected type %T", x)
	}
	return nil
}

func _CreateSpecType_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*CreateSpecType)
	switch tag {
	case 2: // loadbalancer_type.http
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ProxyTypeHttp)
		err := b.DecodeMessage(msg)
		m.LoadbalancerType = &CreateSpecType_Http{msg}
		return true, err
	case 27: // loadbalancer_type.https_auto_cert
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ProxyTypeHttpsAutoCerts)
		err := b.DecodeMessage(msg)
		m.LoadbalancerType = &CreateSpecType_HttpsAutoCert{msg}
		return true, err
	case 3: // loadbalancer_type.https
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ProxyTypeHttps)
		err := b.DecodeMessage(msg)
		m.LoadbalancerType = &CreateSpecType_Https{msg}
		return true, err
	case 12: // advertise_choice.do_not_advertise
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.AdvertiseChoice = &CreateSpecType_DoNotAdvertise{msg}
		return true, err
	case 13: // advertise_choice.advertise_on_public_default_vip
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.AdvertiseChoice = &CreateSpecType_AdvertiseOnPublicDefaultVip{msg}
		return true, err
	case 4: // advertise_choice.advertise_on_public
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema_views.AdvertisePublic)
		err := b.DecodeMessage(msg)
		m.AdvertiseChoice = &CreateSpecType_AdvertiseOnPublic{msg}
		return true, err
	case 5: // advertise_choice.advertise_custom
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema_views.AdvertiseCustom)
		err := b.DecodeMessage(msg)
		m.AdvertiseChoice = &CreateSpecType_AdvertiseCustom{msg}
		return true, err
	case 11: // waf_choice.disable_waf
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.WafChoice = &CreateSpecType_DisableWaf{msg}
		return true, err
	case 9: // waf_choice.waf
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema_views.ObjectRefType)
		err := b.DecodeMessage(msg)
		m.WafChoice = &CreateSpecType_Waf{msg}
		return true, err
	case 10: // waf_choice.waf_rule
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema_views.ObjectRefType)
		err := b.DecodeMessage(msg)
		m.WafChoice = &CreateSpecType_WafRule{msg}
		return true, err
	case 26: // challenge_type.no_challenge
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.ChallengeType = &CreateSpecType_NoChallenge{msg}
		return true, err
	case 18: // challenge_type.js_challenge
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema_virtual_host.JavascriptChallengeType)
		err := b.DecodeMessage(msg)
		m.ChallengeType = &CreateSpecType_JsChallenge{msg}
		return true, err
	case 24: // challenge_type.captcha_challenge
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema_virtual_host.CaptchaChallengeType)
		err := b.DecodeMessage(msg)
		m.ChallengeType = &CreateSpecType_CaptchaChallenge{msg}
		return true, err
	case 51: // challenge_type.policy_based_challenge
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(PolicyBasedChallenge)
		err := b.DecodeMessage(msg)
		m.ChallengeType = &CreateSpecType_PolicyBasedChallenge{msg}
		return true, err
	case 22: // rate_limit_choice.disable_rate_limit
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.RateLimitChoice = &CreateSpecType_DisableRateLimit{msg}
		return true, err
	case 23: // rate_limit_choice.rate_limit
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(RateLimitConfigType)
		err := b.DecodeMessage(msg)
		m.RateLimitChoice = &CreateSpecType_RateLimit{msg}
		return true, err
	case 41: // service_policy_choice.service_policies_from_namespace
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.ServicePolicyChoice = &CreateSpecType_ServicePoliciesFromNamespace{msg}
		return true, err
	case 42: // service_policy_choice.no_service_policies
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.ServicePolicyChoice = &CreateSpecType_NoServicePolicies{msg}
		return true, err
	case 43: // service_policy_choice.active_service_policies
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ServicePolicyList)
		err := b.DecodeMessage(msg)
		m.ServicePolicyChoice = &CreateSpecType_ActiveServicePolicies{msg}
		return true, err
	case 45: // hash_policy_choice.round_robin
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.HashPolicyChoice = &CreateSpecType_RoundRobin{msg}
		return true, err
	case 46: // hash_policy_choice.least_active
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.HashPolicyChoice = &CreateSpecType_LeastActive{msg}
		return true, err
	case 47: // hash_policy_choice.random
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.HashPolicyChoice = &CreateSpecType_Random{msg}
		return true, err
	case 48: // hash_policy_choice.source_ip_stickiness
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.HashPolicyChoice = &CreateSpecType_SourceIpStickiness{msg}
		return true, err
	case 49: // hash_policy_choice.cookie_stickiness
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema_route.CookieForHashing)
		err := b.DecodeMessage(msg)
		m.HashPolicyChoice = &CreateSpecType_CookieStickiness{msg}
		return true, err
	case 50: // hash_policy_choice.ring_hash
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(HashPolicyListType)
		err := b.DecodeMessage(msg)
		m.HashPolicyChoice = &CreateSpecType_RingHash{msg}
		return true, err
	default:
		return false, nil
	}
}

func _CreateSpecType_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*CreateSpecType)
	// loadbalancer_type
	switch x := m.LoadbalancerType.(type) {
	case *CreateSpecType_Http:
		s := proto.Size(x.Http)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *CreateSpecType_HttpsAutoCert:
		s := proto.Size(x.HttpsAutoCert)
		n += proto.SizeVarint(27<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *CreateSpecType_Https:
		s := proto.Size(x.Https)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	// advertise_choice
	switch x := m.AdvertiseChoice.(type) {
	case *CreateSpecType_DoNotAdvertise:
		s := proto.Size(x.DoNotAdvertise)
		n += proto.SizeVarint(12<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *CreateSpecType_AdvertiseOnPublicDefaultVip:
		s := proto.Size(x.AdvertiseOnPublicDefaultVip)
		n += proto.SizeVarint(13<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *CreateSpecType_AdvertiseOnPublic:
		s := proto.Size(x.AdvertiseOnPublic)
		n += proto.SizeVarint(4<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *CreateSpecType_AdvertiseCustom:
		s := proto.Size(x.AdvertiseCustom)
		n += proto.SizeVarint(5<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	// waf_choice
	switch x := m.WafChoice.(type) {
	case *CreateSpecType_DisableWaf:
		s := proto.Size(x.DisableWaf)
		n += proto.SizeVarint(11<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *CreateSpecType_Waf:
		s := proto.Size(x.Waf)
		n += proto.SizeVarint(9<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *CreateSpecType_WafRule:
		s := proto.Size(x.WafRule)
		n += proto.SizeVarint(10<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	// challenge_type
	switch x := m.ChallengeType.(type) {
	case *CreateSpecType_NoChallenge:
		s := proto.Size(x.NoChallenge)
		n += proto.SizeVarint(26<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *CreateSpecType_JsChallenge:
		s := proto.Size(x.JsChallenge)
		n += proto.SizeVarint(18<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *CreateSpecType_CaptchaChallenge:
		s := proto.Size(x.CaptchaChallenge)
		n += proto.SizeVarint(24<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *CreateSpecType_PolicyBasedChallenge:
		s := proto.Size(x.PolicyBasedChallenge)
		n += proto.SizeVarint(51<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	// rate_limit_choice
	switch x := m.RateLimitChoice.(type) {
	case *CreateSpecType_DisableRateLimit:
		s := proto.Size(x.DisableRateLimit)
		n += proto.SizeVarint(22<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *CreateSpecType_RateLimit:
		s := proto.Size(x.RateLimit)
		n += proto.SizeVarint(23<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	// service_policy_choice
	switch x := m.ServicePolicyChoice.(type) {
	case *CreateSpecType_ServicePoliciesFromNamespace:
		s := proto.Size(x.ServicePoliciesFromNamespace)
		n += proto.SizeVarint(41<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *CreateSpecType_NoServicePolicies:
		s := proto.Size(x.NoServicePolicies)
		n += proto.SizeVarint(42<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *CreateSpecType_ActiveServicePolicies:
		s := proto.Size(x.ActiveServicePolicies)
		n += proto.SizeVarint(43<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	// hash_policy_choice
	switch x := m.HashPolicyChoice.(type) {
	case *CreateSpecType_RoundRobin:
		s := proto.Size(x.RoundRobin)
		n += proto.SizeVarint(45<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *CreateSpecType_LeastActive:
		s := proto.Size(x.LeastActive)
		n += proto.SizeVarint(46<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *CreateSpecType_Random:
		s := proto.Size(x.Random)
		n += proto.SizeVarint(47<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *CreateSpecType_SourceIpStickiness:
		s := proto.Size(x.SourceIpStickiness)
		n += proto.SizeVarint(48<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *CreateSpecType_CookieStickiness:
		s := proto.Size(x.CookieStickiness)
		n += proto.SizeVarint(49<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *CreateSpecType_RingHash:
		s := proto.Size(x.RingHash)
		n += proto.SizeVarint(50<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// ReplaceSpecType
//
// x-displayName: "Replace HTTP Loadbalancer"
// Shape of the HTTP loadbalancer specification
type ReplaceSpecType struct {
	Domains []string `protobuf:"bytes,1,rep,name=domains" json:"domains,omitempty"`
	// Types that are valid to be assigned to LoadbalancerType:
	//	*ReplaceSpecType_Http
	//	*ReplaceSpecType_HttpsAutoCert
	//	*ReplaceSpecType_Https
	LoadbalancerType isReplaceSpecType_LoadbalancerType `protobuf_oneof:"loadbalancer_type"`
	// Types that are valid to be assigned to AdvertiseChoice:
	//	*ReplaceSpecType_DoNotAdvertise
	//	*ReplaceSpecType_AdvertiseOnPublicDefaultVip
	//	*ReplaceSpecType_AdvertiseOnPublic
	//	*ReplaceSpecType_AdvertiseCustom
	AdvertiseChoice   isReplaceSpecType_AdvertiseChoice           `protobuf_oneof:"advertise_choice"`
	DefaultRoutePools []*ves_io_schema_views.OriginPoolWithWeight `protobuf:"bytes,6,rep,name=default_route_pools,json=defaultRoutePools" json:"default_route_pools,omitempty"`
	Routes            []*RouteType                                `protobuf:"bytes,7,rep,name=routes" json:"routes,omitempty"`
	CorsPolicy        *ves_io_schema4.CorsPolicy                  `protobuf:"bytes,8,opt,name=cors_policy,json=corsPolicy" json:"cors_policy,omitempty"`
	// Types that are valid to be assigned to WafChoice:
	//	*ReplaceSpecType_DisableWaf
	//	*ReplaceSpecType_Waf
	//	*ReplaceSpecType_WafRule
	WafChoice   isReplaceSpecType_WafChoice `protobuf_oneof:"waf_choice"`
	AddLocation bool                        `protobuf:"varint,17,opt,name=add_location,json=addLocation,proto3" json:"add_location,omitempty"`
	// Types that are valid to be assigned to ChallengeType:
	//	*ReplaceSpecType_NoChallenge
	//	*ReplaceSpecType_JsChallenge
	//	*ReplaceSpecType_CaptchaChallenge
	//	*ReplaceSpecType_PolicyBasedChallenge
	ChallengeType      isReplaceSpecType_ChallengeType    `protobuf_oneof:"challenge_type"`
	MoreOption         *AdvancedOptionsType               `protobuf:"bytes,19,opt,name=more_option,json=moreOption" json:"more_option,omitempty"`
	UserIdentification *ves_io_schema_views.ObjectRefType `protobuf:"bytes,20,opt,name=user_identification,json=userIdentification" json:"user_identification,omitempty"`
	// Types that are valid to be assigned to RateLimitChoice:
	//	*ReplaceSpecType_DisableRateLimit
	//	*ReplaceSpecType_RateLimit
	RateLimitChoice         isReplaceSpecType_RateLimitChoice              `protobuf_oneof:"rate_limit_choice"`
	MaliciousUserMitigation *ves_io_schema_views.ObjectRefType             `protobuf:"bytes,32,opt,name=malicious_user_mitigation,json=maliciousUserMitigation" json:"malicious_user_mitigation,omitempty"`
	WafExclusionRules       []*ves_io_schema_policy.SimpleWafExclusionRule `protobuf:"bytes,33,rep,name=waf_exclusion_rules,json=wafExclusionRules" json:"waf_exclusion_rules,omitempty"`
	BlockedClients          []*SimpleClientSrcRule                         `protobuf:"bytes,34,rep,name=blocked_clients,json=blockedClients" json:"blocked_clients,omitempty"`
	TrustedClients          []*SimpleClientSrcRule                         `protobuf:"bytes,35,rep,name=trusted_clients,json=trustedClients" json:"trusted_clients,omitempty"`
	// Types that are valid to be assigned to ServicePolicyChoice:
	//	*ReplaceSpecType_ServicePoliciesFromNamespace
	//	*ReplaceSpecType_NoServicePolicies
	//	*ReplaceSpecType_ActiveServicePolicies
	ServicePolicyChoice isReplaceSpecType_ServicePolicyChoice `protobuf_oneof:"service_policy_choice"`
	// Types that are valid to be assigned to HashPolicyChoice:
	//	*ReplaceSpecType_RoundRobin
	//	*ReplaceSpecType_LeastActive
	//	*ReplaceSpecType_Random
	//	*ReplaceSpecType_SourceIpStickiness
	//	*ReplaceSpecType_CookieStickiness
	//	*ReplaceSpecType_RingHash
	HashPolicyChoice isReplaceSpecType_HashPolicyChoice `protobuf_oneof:"hash_policy_choice"`
}

func (m *ReplaceSpecType) Reset()                    { *m = ReplaceSpecType{} }
func (*ReplaceSpecType) ProtoMessage()               {}
func (*ReplaceSpecType) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{24} }

type isReplaceSpecType_LoadbalancerType interface {
	isReplaceSpecType_LoadbalancerType()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isReplaceSpecType_AdvertiseChoice interface {
	isReplaceSpecType_AdvertiseChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isReplaceSpecType_WafChoice interface {
	isReplaceSpecType_WafChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isReplaceSpecType_ChallengeType interface {
	isReplaceSpecType_ChallengeType()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isReplaceSpecType_RateLimitChoice interface {
	isReplaceSpecType_RateLimitChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isReplaceSpecType_ServicePolicyChoice interface {
	isReplaceSpecType_ServicePolicyChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isReplaceSpecType_HashPolicyChoice interface {
	isReplaceSpecType_HashPolicyChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type ReplaceSpecType_Http struct {
	Http *ProxyTypeHttp `protobuf:"bytes,2,opt,name=http,oneof"`
}
type ReplaceSpecType_HttpsAutoCert struct {
	HttpsAutoCert *ProxyTypeHttpsAutoCerts `protobuf:"bytes,27,opt,name=https_auto_cert,json=httpsAutoCert,oneof"`
}
type ReplaceSpecType_Https struct {
	Https *ProxyTypeHttps `protobuf:"bytes,3,opt,name=https,oneof"`
}
type ReplaceSpecType_DoNotAdvertise struct {
	DoNotAdvertise *ves_io_schema4.Empty `protobuf:"bytes,12,opt,name=do_not_advertise,json=doNotAdvertise,oneof"`
}
type ReplaceSpecType_AdvertiseOnPublicDefaultVip struct {
	AdvertiseOnPublicDefaultVip *ves_io_schema4.Empty `protobuf:"bytes,13,opt,name=advertise_on_public_default_vip,json=advertiseOnPublicDefaultVip,oneof"`
}
type ReplaceSpecType_AdvertiseOnPublic struct {
	AdvertiseOnPublic *ves_io_schema_views.AdvertisePublic `protobuf:"bytes,4,opt,name=advertise_on_public,json=advertiseOnPublic,oneof"`
}
type ReplaceSpecType_AdvertiseCustom struct {
	AdvertiseCustom *ves_io_schema_views.AdvertiseCustom `protobuf:"bytes,5,opt,name=advertise_custom,json=advertiseCustom,oneof"`
}
type ReplaceSpecType_DisableWaf struct {
	DisableWaf *ves_io_schema4.Empty `protobuf:"bytes,11,opt,name=disable_waf,json=disableWaf,oneof"`
}
type ReplaceSpecType_Waf struct {
	Waf *ves_io_schema_views.ObjectRefType `protobuf:"bytes,9,opt,name=waf,oneof"`
}
type ReplaceSpecType_WafRule struct {
	WafRule *ves_io_schema_views.ObjectRefType `protobuf:"bytes,10,opt,name=waf_rule,json=wafRule,oneof"`
}
type ReplaceSpecType_NoChallenge struct {
	NoChallenge *ves_io_schema4.Empty `protobuf:"bytes,26,opt,name=no_challenge,json=noChallenge,oneof"`
}
type ReplaceSpecType_JsChallenge struct {
	JsChallenge *ves_io_schema_virtual_host.JavascriptChallengeType `protobuf:"bytes,18,opt,name=js_challenge,json=jsChallenge,oneof"`
}
type ReplaceSpecType_CaptchaChallenge struct {
	CaptchaChallenge *ves_io_schema_virtual_host.CaptchaChallengeType `protobuf:"bytes,24,opt,name=captcha_challenge,json=captchaChallenge,oneof"`
}
type ReplaceSpecType_PolicyBasedChallenge struct {
	PolicyBasedChallenge *PolicyBasedChallenge `protobuf:"bytes,51,opt,name=policy_based_challenge,json=policyBasedChallenge,oneof"`
}
type ReplaceSpecType_DisableRateLimit struct {
	DisableRateLimit *ves_io_schema4.Empty `protobuf:"bytes,22,opt,name=disable_rate_limit,json=disableRateLimit,oneof"`
}
type ReplaceSpecType_RateLimit struct {
	RateLimit *RateLimitConfigType `protobuf:"bytes,23,opt,name=rate_limit,json=rateLimit,oneof"`
}
type ReplaceSpecType_ServicePoliciesFromNamespace struct {
	ServicePoliciesFromNamespace *ves_io_schema4.Empty `protobuf:"bytes,41,opt,name=service_policies_from_namespace,json=servicePoliciesFromNamespace,oneof"`
}
type ReplaceSpecType_NoServicePolicies struct {
	NoServicePolicies *ves_io_schema4.Empty `protobuf:"bytes,42,opt,name=no_service_policies,json=noServicePolicies,oneof"`
}
type ReplaceSpecType_ActiveServicePolicies struct {
	ActiveServicePolicies *ServicePolicyList `protobuf:"bytes,43,opt,name=active_service_policies,json=activeServicePolicies,oneof"`
}
type ReplaceSpecType_RoundRobin struct {
	RoundRobin *ves_io_schema4.Empty `protobuf:"bytes,45,opt,name=round_robin,json=roundRobin,oneof"`
}
type ReplaceSpecType_LeastActive struct {
	LeastActive *ves_io_schema4.Empty `protobuf:"bytes,46,opt,name=least_active,json=leastActive,oneof"`
}
type ReplaceSpecType_Random struct {
	Random *ves_io_schema4.Empty `protobuf:"bytes,47,opt,name=random,oneof"`
}
type ReplaceSpecType_SourceIpStickiness struct {
	SourceIpStickiness *ves_io_schema4.Empty `protobuf:"bytes,48,opt,name=source_ip_stickiness,json=sourceIpStickiness,oneof"`
}
type ReplaceSpecType_CookieStickiness struct {
	CookieStickiness *ves_io_schema_route.CookieForHashing `protobuf:"bytes,49,opt,name=cookie_stickiness,json=cookieStickiness,oneof"`
}
type ReplaceSpecType_RingHash struct {
	RingHash *HashPolicyListType `protobuf:"bytes,50,opt,name=ring_hash,json=ringHash,oneof"`
}

func (*ReplaceSpecType_Http) isReplaceSpecType_LoadbalancerType()                            {}
func (*ReplaceSpecType_HttpsAutoCert) isReplaceSpecType_LoadbalancerType()                   {}
func (*ReplaceSpecType_Https) isReplaceSpecType_LoadbalancerType()                           {}
func (*ReplaceSpecType_DoNotAdvertise) isReplaceSpecType_AdvertiseChoice()                   {}
func (*ReplaceSpecType_AdvertiseOnPublicDefaultVip) isReplaceSpecType_AdvertiseChoice()      {}
func (*ReplaceSpecType_AdvertiseOnPublic) isReplaceSpecType_AdvertiseChoice()                {}
func (*ReplaceSpecType_AdvertiseCustom) isReplaceSpecType_AdvertiseChoice()                  {}
func (*ReplaceSpecType_DisableWaf) isReplaceSpecType_WafChoice()                             {}
func (*ReplaceSpecType_Waf) isReplaceSpecType_WafChoice()                                    {}
func (*ReplaceSpecType_WafRule) isReplaceSpecType_WafChoice()                                {}
func (*ReplaceSpecType_NoChallenge) isReplaceSpecType_ChallengeType()                        {}
func (*ReplaceSpecType_JsChallenge) isReplaceSpecType_ChallengeType()                        {}
func (*ReplaceSpecType_CaptchaChallenge) isReplaceSpecType_ChallengeType()                   {}
func (*ReplaceSpecType_PolicyBasedChallenge) isReplaceSpecType_ChallengeType()               {}
func (*ReplaceSpecType_DisableRateLimit) isReplaceSpecType_RateLimitChoice()                 {}
func (*ReplaceSpecType_RateLimit) isReplaceSpecType_RateLimitChoice()                        {}
func (*ReplaceSpecType_ServicePoliciesFromNamespace) isReplaceSpecType_ServicePolicyChoice() {}
func (*ReplaceSpecType_NoServicePolicies) isReplaceSpecType_ServicePolicyChoice()            {}
func (*ReplaceSpecType_ActiveServicePolicies) isReplaceSpecType_ServicePolicyChoice()        {}
func (*ReplaceSpecType_RoundRobin) isReplaceSpecType_HashPolicyChoice()                      {}
func (*ReplaceSpecType_LeastActive) isReplaceSpecType_HashPolicyChoice()                     {}
func (*ReplaceSpecType_Random) isReplaceSpecType_HashPolicyChoice()                          {}
func (*ReplaceSpecType_SourceIpStickiness) isReplaceSpecType_HashPolicyChoice()              {}
func (*ReplaceSpecType_CookieStickiness) isReplaceSpecType_HashPolicyChoice()                {}
func (*ReplaceSpecType_RingHash) isReplaceSpecType_HashPolicyChoice()                        {}

func (m *ReplaceSpecType) GetLoadbalancerType() isReplaceSpecType_LoadbalancerType {
	if m != nil {
		return m.LoadbalancerType
	}
	return nil
}
func (m *ReplaceSpecType) GetAdvertiseChoice() isReplaceSpecType_AdvertiseChoice {
	if m != nil {
		return m.AdvertiseChoice
	}
	return nil
}
func (m *ReplaceSpecType) GetWafChoice() isReplaceSpecType_WafChoice {
	if m != nil {
		return m.WafChoice
	}
	return nil
}
func (m *ReplaceSpecType) GetChallengeType() isReplaceSpecType_ChallengeType {
	if m != nil {
		return m.ChallengeType
	}
	return nil
}
func (m *ReplaceSpecType) GetRateLimitChoice() isReplaceSpecType_RateLimitChoice {
	if m != nil {
		return m.RateLimitChoice
	}
	return nil
}
func (m *ReplaceSpecType) GetServicePolicyChoice() isReplaceSpecType_ServicePolicyChoice {
	if m != nil {
		return m.ServicePolicyChoice
	}
	return nil
}
func (m *ReplaceSpecType) GetHashPolicyChoice() isReplaceSpecType_HashPolicyChoice {
	if m != nil {
		return m.HashPolicyChoice
	}
	return nil
}

func (m *ReplaceSpecType) GetDomains() []string {
	if m != nil {
		return m.Domains
	}
	return nil
}

func (m *ReplaceSpecType) GetHttp() *ProxyTypeHttp {
	if x, ok := m.GetLoadbalancerType().(*ReplaceSpecType_Http); ok {
		return x.Http
	}
	return nil
}

func (m *ReplaceSpecType) GetHttpsAutoCert() *ProxyTypeHttpsAutoCerts {
	if x, ok := m.GetLoadbalancerType().(*ReplaceSpecType_HttpsAutoCert); ok {
		return x.HttpsAutoCert
	}
	return nil
}

func (m *ReplaceSpecType) GetHttps() *ProxyTypeHttps {
	if x, ok := m.GetLoadbalancerType().(*ReplaceSpecType_Https); ok {
		return x.Https
	}
	return nil
}

func (m *ReplaceSpecType) GetDoNotAdvertise() *ves_io_schema4.Empty {
	if x, ok := m.GetAdvertiseChoice().(*ReplaceSpecType_DoNotAdvertise); ok {
		return x.DoNotAdvertise
	}
	return nil
}

func (m *ReplaceSpecType) GetAdvertiseOnPublicDefaultVip() *ves_io_schema4.Empty {
	if x, ok := m.GetAdvertiseChoice().(*ReplaceSpecType_AdvertiseOnPublicDefaultVip); ok {
		return x.AdvertiseOnPublicDefaultVip
	}
	return nil
}

func (m *ReplaceSpecType) GetAdvertiseOnPublic() *ves_io_schema_views.AdvertisePublic {
	if x, ok := m.GetAdvertiseChoice().(*ReplaceSpecType_AdvertiseOnPublic); ok {
		return x.AdvertiseOnPublic
	}
	return nil
}

func (m *ReplaceSpecType) GetAdvertiseCustom() *ves_io_schema_views.AdvertiseCustom {
	if x, ok := m.GetAdvertiseChoice().(*ReplaceSpecType_AdvertiseCustom); ok {
		return x.AdvertiseCustom
	}
	return nil
}

func (m *ReplaceSpecType) GetDefaultRoutePools() []*ves_io_schema_views.OriginPoolWithWeight {
	if m != nil {
		return m.DefaultRoutePools
	}
	return nil
}

func (m *ReplaceSpecType) GetRoutes() []*RouteType {
	if m != nil {
		return m.Routes
	}
	return nil
}

func (m *ReplaceSpecType) GetCorsPolicy() *ves_io_schema4.CorsPolicy {
	if m != nil {
		return m.CorsPolicy
	}
	return nil
}

func (m *ReplaceSpecType) GetDisableWaf() *ves_io_schema4.Empty {
	if x, ok := m.GetWafChoice().(*ReplaceSpecType_DisableWaf); ok {
		return x.DisableWaf
	}
	return nil
}

func (m *ReplaceSpecType) GetWaf() *ves_io_schema_views.ObjectRefType {
	if x, ok := m.GetWafChoice().(*ReplaceSpecType_Waf); ok {
		return x.Waf
	}
	return nil
}

func (m *ReplaceSpecType) GetWafRule() *ves_io_schema_views.ObjectRefType {
	if x, ok := m.GetWafChoice().(*ReplaceSpecType_WafRule); ok {
		return x.WafRule
	}
	return nil
}

func (m *ReplaceSpecType) GetAddLocation() bool {
	if m != nil {
		return m.AddLocation
	}
	return false
}

func (m *ReplaceSpecType) GetNoChallenge() *ves_io_schema4.Empty {
	if x, ok := m.GetChallengeType().(*ReplaceSpecType_NoChallenge); ok {
		return x.NoChallenge
	}
	return nil
}

func (m *ReplaceSpecType) GetJsChallenge() *ves_io_schema_virtual_host.JavascriptChallengeType {
	if x, ok := m.GetChallengeType().(*ReplaceSpecType_JsChallenge); ok {
		return x.JsChallenge
	}
	return nil
}

func (m *ReplaceSpecType) GetCaptchaChallenge() *ves_io_schema_virtual_host.CaptchaChallengeType {
	if x, ok := m.GetChallengeType().(*ReplaceSpecType_CaptchaChallenge); ok {
		return x.CaptchaChallenge
	}
	return nil
}

func (m *ReplaceSpecType) GetPolicyBasedChallenge() *PolicyBasedChallenge {
	if x, ok := m.GetChallengeType().(*ReplaceSpecType_PolicyBasedChallenge); ok {
		return x.PolicyBasedChallenge
	}
	return nil
}

func (m *ReplaceSpecType) GetMoreOption() *AdvancedOptionsType {
	if m != nil {
		return m.MoreOption
	}
	return nil
}

func (m *ReplaceSpecType) GetUserIdentification() *ves_io_schema_views.ObjectRefType {
	if m != nil {
		return m.UserIdentification
	}
	return nil
}

func (m *ReplaceSpecType) GetDisableRateLimit() *ves_io_schema4.Empty {
	if x, ok := m.GetRateLimitChoice().(*ReplaceSpecType_DisableRateLimit); ok {
		return x.DisableRateLimit
	}
	return nil
}

func (m *ReplaceSpecType) GetRateLimit() *RateLimitConfigType {
	if x, ok := m.GetRateLimitChoice().(*ReplaceSpecType_RateLimit); ok {
		return x.RateLimit
	}
	return nil
}

func (m *ReplaceSpecType) GetMaliciousUserMitigation() *ves_io_schema_views.ObjectRefType {
	if m != nil {
		return m.MaliciousUserMitigation
	}
	return nil
}

func (m *ReplaceSpecType) GetWafExclusionRules() []*ves_io_schema_policy.SimpleWafExclusionRule {
	if m != nil {
		return m.WafExclusionRules
	}
	return nil
}

func (m *ReplaceSpecType) GetBlockedClients() []*SimpleClientSrcRule {
	if m != nil {
		return m.BlockedClients
	}
	return nil
}

func (m *ReplaceSpecType) GetTrustedClients() []*SimpleClientSrcRule {
	if m != nil {
		return m.TrustedClients
	}
	return nil
}

func (m *ReplaceSpecType) GetServicePoliciesFromNamespace() *ves_io_schema4.Empty {
	if x, ok := m.GetServicePolicyChoice().(*ReplaceSpecType_ServicePoliciesFromNamespace); ok {
		return x.ServicePoliciesFromNamespace
	}
	return nil
}

func (m *ReplaceSpecType) GetNoServicePolicies() *ves_io_schema4.Empty {
	if x, ok := m.GetServicePolicyChoice().(*ReplaceSpecType_NoServicePolicies); ok {
		return x.NoServicePolicies
	}
	return nil
}

func (m *ReplaceSpecType) GetActiveServicePolicies() *ServicePolicyList {
	if x, ok := m.GetServicePolicyChoice().(*ReplaceSpecType_ActiveServicePolicies); ok {
		return x.ActiveServicePolicies
	}
	return nil
}

func (m *ReplaceSpecType) GetRoundRobin() *ves_io_schema4.Empty {
	if x, ok := m.GetHashPolicyChoice().(*ReplaceSpecType_RoundRobin); ok {
		return x.RoundRobin
	}
	return nil
}

func (m *ReplaceSpecType) GetLeastActive() *ves_io_schema4.Empty {
	if x, ok := m.GetHashPolicyChoice().(*ReplaceSpecType_LeastActive); ok {
		return x.LeastActive
	}
	return nil
}

func (m *ReplaceSpecType) GetRandom() *ves_io_schema4.Empty {
	if x, ok := m.GetHashPolicyChoice().(*ReplaceSpecType_Random); ok {
		return x.Random
	}
	return nil
}

func (m *ReplaceSpecType) GetSourceIpStickiness() *ves_io_schema4.Empty {
	if x, ok := m.GetHashPolicyChoice().(*ReplaceSpecType_SourceIpStickiness); ok {
		return x.SourceIpStickiness
	}
	return nil
}

func (m *ReplaceSpecType) GetCookieStickiness() *ves_io_schema_route.CookieForHashing {
	if x, ok := m.GetHashPolicyChoice().(*ReplaceSpecType_CookieStickiness); ok {
		return x.CookieStickiness
	}
	return nil
}

func (m *ReplaceSpecType) GetRingHash() *HashPolicyListType {
	if x, ok := m.GetHashPolicyChoice().(*ReplaceSpecType_RingHash); ok {
		return x.RingHash
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*ReplaceSpecType) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _ReplaceSpecType_OneofMarshaler, _ReplaceSpecType_OneofUnmarshaler, _ReplaceSpecType_OneofSizer, []interface{}{
		(*ReplaceSpecType_Http)(nil),
		(*ReplaceSpecType_HttpsAutoCert)(nil),
		(*ReplaceSpecType_Https)(nil),
		(*ReplaceSpecType_DoNotAdvertise)(nil),
		(*ReplaceSpecType_AdvertiseOnPublicDefaultVip)(nil),
		(*ReplaceSpecType_AdvertiseOnPublic)(nil),
		(*ReplaceSpecType_AdvertiseCustom)(nil),
		(*ReplaceSpecType_DisableWaf)(nil),
		(*ReplaceSpecType_Waf)(nil),
		(*ReplaceSpecType_WafRule)(nil),
		(*ReplaceSpecType_NoChallenge)(nil),
		(*ReplaceSpecType_JsChallenge)(nil),
		(*ReplaceSpecType_CaptchaChallenge)(nil),
		(*ReplaceSpecType_PolicyBasedChallenge)(nil),
		(*ReplaceSpecType_DisableRateLimit)(nil),
		(*ReplaceSpecType_RateLimit)(nil),
		(*ReplaceSpecType_ServicePoliciesFromNamespace)(nil),
		(*ReplaceSpecType_NoServicePolicies)(nil),
		(*ReplaceSpecType_ActiveServicePolicies)(nil),
		(*ReplaceSpecType_RoundRobin)(nil),
		(*ReplaceSpecType_LeastActive)(nil),
		(*ReplaceSpecType_Random)(nil),
		(*ReplaceSpecType_SourceIpStickiness)(nil),
		(*ReplaceSpecType_CookieStickiness)(nil),
		(*ReplaceSpecType_RingHash)(nil),
	}
}

func _ReplaceSpecType_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*ReplaceSpecType)
	// loadbalancer_type
	switch x := m.LoadbalancerType.(type) {
	case *ReplaceSpecType_Http:
		_ = b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Http); err != nil {
			return err
		}
	case *ReplaceSpecType_HttpsAutoCert:
		_ = b.EncodeVarint(27<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.HttpsAutoCert); err != nil {
			return err
		}
	case *ReplaceSpecType_Https:
		_ = b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Https); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("ReplaceSpecType.LoadbalancerType has unexpected type %T", x)
	}
	// advertise_choice
	switch x := m.AdvertiseChoice.(type) {
	case *ReplaceSpecType_DoNotAdvertise:
		_ = b.EncodeVarint(12<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.DoNotAdvertise); err != nil {
			return err
		}
	case *ReplaceSpecType_AdvertiseOnPublicDefaultVip:
		_ = b.EncodeVarint(13<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.AdvertiseOnPublicDefaultVip); err != nil {
			return err
		}
	case *ReplaceSpecType_AdvertiseOnPublic:
		_ = b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.AdvertiseOnPublic); err != nil {
			return err
		}
	case *ReplaceSpecType_AdvertiseCustom:
		_ = b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.AdvertiseCustom); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("ReplaceSpecType.AdvertiseChoice has unexpected type %T", x)
	}
	// waf_choice
	switch x := m.WafChoice.(type) {
	case *ReplaceSpecType_DisableWaf:
		_ = b.EncodeVarint(11<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.DisableWaf); err != nil {
			return err
		}
	case *ReplaceSpecType_Waf:
		_ = b.EncodeVarint(9<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Waf); err != nil {
			return err
		}
	case *ReplaceSpecType_WafRule:
		_ = b.EncodeVarint(10<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.WafRule); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("ReplaceSpecType.WafChoice has unexpected type %T", x)
	}
	// challenge_type
	switch x := m.ChallengeType.(type) {
	case *ReplaceSpecType_NoChallenge:
		_ = b.EncodeVarint(26<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.NoChallenge); err != nil {
			return err
		}
	case *ReplaceSpecType_JsChallenge:
		_ = b.EncodeVarint(18<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.JsChallenge); err != nil {
			return err
		}
	case *ReplaceSpecType_CaptchaChallenge:
		_ = b.EncodeVarint(24<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.CaptchaChallenge); err != nil {
			return err
		}
	case *ReplaceSpecType_PolicyBasedChallenge:
		_ = b.EncodeVarint(51<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.PolicyBasedChallenge); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("ReplaceSpecType.ChallengeType has unexpected type %T", x)
	}
	// rate_limit_choice
	switch x := m.RateLimitChoice.(type) {
	case *ReplaceSpecType_DisableRateLimit:
		_ = b.EncodeVarint(22<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.DisableRateLimit); err != nil {
			return err
		}
	case *ReplaceSpecType_RateLimit:
		_ = b.EncodeVarint(23<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.RateLimit); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("ReplaceSpecType.RateLimitChoice has unexpected type %T", x)
	}
	// service_policy_choice
	switch x := m.ServicePolicyChoice.(type) {
	case *ReplaceSpecType_ServicePoliciesFromNamespace:
		_ = b.EncodeVarint(41<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ServicePoliciesFromNamespace); err != nil {
			return err
		}
	case *ReplaceSpecType_NoServicePolicies:
		_ = b.EncodeVarint(42<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.NoServicePolicies); err != nil {
			return err
		}
	case *ReplaceSpecType_ActiveServicePolicies:
		_ = b.EncodeVarint(43<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ActiveServicePolicies); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("ReplaceSpecType.ServicePolicyChoice has unexpected type %T", x)
	}
	// hash_policy_choice
	switch x := m.HashPolicyChoice.(type) {
	case *ReplaceSpecType_RoundRobin:
		_ = b.EncodeVarint(45<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.RoundRobin); err != nil {
			return err
		}
	case *ReplaceSpecType_LeastActive:
		_ = b.EncodeVarint(46<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.LeastActive); err != nil {
			return err
		}
	case *ReplaceSpecType_Random:
		_ = b.EncodeVarint(47<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Random); err != nil {
			return err
		}
	case *ReplaceSpecType_SourceIpStickiness:
		_ = b.EncodeVarint(48<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.SourceIpStickiness); err != nil {
			return err
		}
	case *ReplaceSpecType_CookieStickiness:
		_ = b.EncodeVarint(49<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.CookieStickiness); err != nil {
			return err
		}
	case *ReplaceSpecType_RingHash:
		_ = b.EncodeVarint(50<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.RingHash); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("ReplaceSpecType.HashPolicyChoice has unexpected type %T", x)
	}
	return nil
}

func _ReplaceSpecType_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*ReplaceSpecType)
	switch tag {
	case 2: // loadbalancer_type.http
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ProxyTypeHttp)
		err := b.DecodeMessage(msg)
		m.LoadbalancerType = &ReplaceSpecType_Http{msg}
		return true, err
	case 27: // loadbalancer_type.https_auto_cert
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ProxyTypeHttpsAutoCerts)
		err := b.DecodeMessage(msg)
		m.LoadbalancerType = &ReplaceSpecType_HttpsAutoCert{msg}
		return true, err
	case 3: // loadbalancer_type.https
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ProxyTypeHttps)
		err := b.DecodeMessage(msg)
		m.LoadbalancerType = &ReplaceSpecType_Https{msg}
		return true, err
	case 12: // advertise_choice.do_not_advertise
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.AdvertiseChoice = &ReplaceSpecType_DoNotAdvertise{msg}
		return true, err
	case 13: // advertise_choice.advertise_on_public_default_vip
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.AdvertiseChoice = &ReplaceSpecType_AdvertiseOnPublicDefaultVip{msg}
		return true, err
	case 4: // advertise_choice.advertise_on_public
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema_views.AdvertisePublic)
		err := b.DecodeMessage(msg)
		m.AdvertiseChoice = &ReplaceSpecType_AdvertiseOnPublic{msg}
		return true, err
	case 5: // advertise_choice.advertise_custom
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema_views.AdvertiseCustom)
		err := b.DecodeMessage(msg)
		m.AdvertiseChoice = &ReplaceSpecType_AdvertiseCustom{msg}
		return true, err
	case 11: // waf_choice.disable_waf
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.WafChoice = &ReplaceSpecType_DisableWaf{msg}
		return true, err
	case 9: // waf_choice.waf
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema_views.ObjectRefType)
		err := b.DecodeMessage(msg)
		m.WafChoice = &ReplaceSpecType_Waf{msg}
		return true, err
	case 10: // waf_choice.waf_rule
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema_views.ObjectRefType)
		err := b.DecodeMessage(msg)
		m.WafChoice = &ReplaceSpecType_WafRule{msg}
		return true, err
	case 26: // challenge_type.no_challenge
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.ChallengeType = &ReplaceSpecType_NoChallenge{msg}
		return true, err
	case 18: // challenge_type.js_challenge
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema_virtual_host.JavascriptChallengeType)
		err := b.DecodeMessage(msg)
		m.ChallengeType = &ReplaceSpecType_JsChallenge{msg}
		return true, err
	case 24: // challenge_type.captcha_challenge
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema_virtual_host.CaptchaChallengeType)
		err := b.DecodeMessage(msg)
		m.ChallengeType = &ReplaceSpecType_CaptchaChallenge{msg}
		return true, err
	case 51: // challenge_type.policy_based_challenge
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(PolicyBasedChallenge)
		err := b.DecodeMessage(msg)
		m.ChallengeType = &ReplaceSpecType_PolicyBasedChallenge{msg}
		return true, err
	case 22: // rate_limit_choice.disable_rate_limit
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.RateLimitChoice = &ReplaceSpecType_DisableRateLimit{msg}
		return true, err
	case 23: // rate_limit_choice.rate_limit
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(RateLimitConfigType)
		err := b.DecodeMessage(msg)
		m.RateLimitChoice = &ReplaceSpecType_RateLimit{msg}
		return true, err
	case 41: // service_policy_choice.service_policies_from_namespace
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.ServicePolicyChoice = &ReplaceSpecType_ServicePoliciesFromNamespace{msg}
		return true, err
	case 42: // service_policy_choice.no_service_policies
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.ServicePolicyChoice = &ReplaceSpecType_NoServicePolicies{msg}
		return true, err
	case 43: // service_policy_choice.active_service_policies
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ServicePolicyList)
		err := b.DecodeMessage(msg)
		m.ServicePolicyChoice = &ReplaceSpecType_ActiveServicePolicies{msg}
		return true, err
	case 45: // hash_policy_choice.round_robin
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.HashPolicyChoice = &ReplaceSpecType_RoundRobin{msg}
		return true, err
	case 46: // hash_policy_choice.least_active
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.HashPolicyChoice = &ReplaceSpecType_LeastActive{msg}
		return true, err
	case 47: // hash_policy_choice.random
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.HashPolicyChoice = &ReplaceSpecType_Random{msg}
		return true, err
	case 48: // hash_policy_choice.source_ip_stickiness
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.HashPolicyChoice = &ReplaceSpecType_SourceIpStickiness{msg}
		return true, err
	case 49: // hash_policy_choice.cookie_stickiness
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema_route.CookieForHashing)
		err := b.DecodeMessage(msg)
		m.HashPolicyChoice = &ReplaceSpecType_CookieStickiness{msg}
		return true, err
	case 50: // hash_policy_choice.ring_hash
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(HashPolicyListType)
		err := b.DecodeMessage(msg)
		m.HashPolicyChoice = &ReplaceSpecType_RingHash{msg}
		return true, err
	default:
		return false, nil
	}
}

func _ReplaceSpecType_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*ReplaceSpecType)
	// loadbalancer_type
	switch x := m.LoadbalancerType.(type) {
	case *ReplaceSpecType_Http:
		s := proto.Size(x.Http)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ReplaceSpecType_HttpsAutoCert:
		s := proto.Size(x.HttpsAutoCert)
		n += proto.SizeVarint(27<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ReplaceSpecType_Https:
		s := proto.Size(x.Https)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	// advertise_choice
	switch x := m.AdvertiseChoice.(type) {
	case *ReplaceSpecType_DoNotAdvertise:
		s := proto.Size(x.DoNotAdvertise)
		n += proto.SizeVarint(12<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ReplaceSpecType_AdvertiseOnPublicDefaultVip:
		s := proto.Size(x.AdvertiseOnPublicDefaultVip)
		n += proto.SizeVarint(13<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ReplaceSpecType_AdvertiseOnPublic:
		s := proto.Size(x.AdvertiseOnPublic)
		n += proto.SizeVarint(4<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ReplaceSpecType_AdvertiseCustom:
		s := proto.Size(x.AdvertiseCustom)
		n += proto.SizeVarint(5<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	// waf_choice
	switch x := m.WafChoice.(type) {
	case *ReplaceSpecType_DisableWaf:
		s := proto.Size(x.DisableWaf)
		n += proto.SizeVarint(11<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ReplaceSpecType_Waf:
		s := proto.Size(x.Waf)
		n += proto.SizeVarint(9<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ReplaceSpecType_WafRule:
		s := proto.Size(x.WafRule)
		n += proto.SizeVarint(10<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	// challenge_type
	switch x := m.ChallengeType.(type) {
	case *ReplaceSpecType_NoChallenge:
		s := proto.Size(x.NoChallenge)
		n += proto.SizeVarint(26<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ReplaceSpecType_JsChallenge:
		s := proto.Size(x.JsChallenge)
		n += proto.SizeVarint(18<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ReplaceSpecType_CaptchaChallenge:
		s := proto.Size(x.CaptchaChallenge)
		n += proto.SizeVarint(24<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ReplaceSpecType_PolicyBasedChallenge:
		s := proto.Size(x.PolicyBasedChallenge)
		n += proto.SizeVarint(51<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	// rate_limit_choice
	switch x := m.RateLimitChoice.(type) {
	case *ReplaceSpecType_DisableRateLimit:
		s := proto.Size(x.DisableRateLimit)
		n += proto.SizeVarint(22<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ReplaceSpecType_RateLimit:
		s := proto.Size(x.RateLimit)
		n += proto.SizeVarint(23<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	// service_policy_choice
	switch x := m.ServicePolicyChoice.(type) {
	case *ReplaceSpecType_ServicePoliciesFromNamespace:
		s := proto.Size(x.ServicePoliciesFromNamespace)
		n += proto.SizeVarint(41<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ReplaceSpecType_NoServicePolicies:
		s := proto.Size(x.NoServicePolicies)
		n += proto.SizeVarint(42<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ReplaceSpecType_ActiveServicePolicies:
		s := proto.Size(x.ActiveServicePolicies)
		n += proto.SizeVarint(43<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	// hash_policy_choice
	switch x := m.HashPolicyChoice.(type) {
	case *ReplaceSpecType_RoundRobin:
		s := proto.Size(x.RoundRobin)
		n += proto.SizeVarint(45<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ReplaceSpecType_LeastActive:
		s := proto.Size(x.LeastActive)
		n += proto.SizeVarint(46<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ReplaceSpecType_Random:
		s := proto.Size(x.Random)
		n += proto.SizeVarint(47<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ReplaceSpecType_SourceIpStickiness:
		s := proto.Size(x.SourceIpStickiness)
		n += proto.SizeVarint(48<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ReplaceSpecType_CookieStickiness:
		s := proto.Size(x.CookieStickiness)
		n += proto.SizeVarint(49<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ReplaceSpecType_RingHash:
		s := proto.Size(x.RingHash)
		n += proto.SizeVarint(50<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// GetSpecType
//
// x-displayName: "Get HTTP Loadbalancer"
// Shape of the HTTP loadbalancer specification
type GetSpecType struct {
	Domains []string `protobuf:"bytes,1,rep,name=domains" json:"domains,omitempty"`
	// Types that are valid to be assigned to LoadbalancerType:
	//	*GetSpecType_Http
	//	*GetSpecType_HttpsAutoCert
	//	*GetSpecType_Https
	LoadbalancerType isGetSpecType_LoadbalancerType `protobuf_oneof:"loadbalancer_type"`
	// Types that are valid to be assigned to AdvertiseChoice:
	//	*GetSpecType_DoNotAdvertise
	//	*GetSpecType_AdvertiseOnPublicDefaultVip
	//	*GetSpecType_AdvertiseOnPublic
	//	*GetSpecType_AdvertiseCustom
	AdvertiseChoice   isGetSpecType_AdvertiseChoice               `protobuf_oneof:"advertise_choice"`
	DefaultRoutePools []*ves_io_schema_views.OriginPoolWithWeight `protobuf:"bytes,6,rep,name=default_route_pools,json=defaultRoutePools" json:"default_route_pools,omitempty"`
	Routes            []*RouteType                                `protobuf:"bytes,7,rep,name=routes" json:"routes,omitempty"`
	CorsPolicy        *ves_io_schema4.CorsPolicy                  `protobuf:"bytes,8,opt,name=cors_policy,json=corsPolicy" json:"cors_policy,omitempty"`
	// Types that are valid to be assigned to WafChoice:
	//	*GetSpecType_DisableWaf
	//	*GetSpecType_Waf
	//	*GetSpecType_WafRule
	WafChoice   isGetSpecType_WafChoice `protobuf_oneof:"waf_choice"`
	AddLocation bool                    `protobuf:"varint,17,opt,name=add_location,json=addLocation,proto3" json:"add_location,omitempty"`
	// Types that are valid to be assigned to ChallengeType:
	//	*GetSpecType_NoChallenge
	//	*GetSpecType_JsChallenge
	//	*GetSpecType_CaptchaChallenge
	//	*GetSpecType_PolicyBasedChallenge
	ChallengeType      isGetSpecType_ChallengeType        `protobuf_oneof:"challenge_type"`
	MoreOption         *AdvancedOptionsType               `protobuf:"bytes,19,opt,name=more_option,json=moreOption" json:"more_option,omitempty"`
	UserIdentification *ves_io_schema_views.ObjectRefType `protobuf:"bytes,20,opt,name=user_identification,json=userIdentification" json:"user_identification,omitempty"`
	// Types that are valid to be assigned to RateLimitChoice:
	//	*GetSpecType_DisableRateLimit
	//	*GetSpecType_RateLimit
	RateLimitChoice         isGetSpecType_RateLimitChoice                  `protobuf_oneof:"rate_limit_choice"`
	MaliciousUserMitigation *ves_io_schema_views.ObjectRefType             `protobuf:"bytes,32,opt,name=malicious_user_mitigation,json=maliciousUserMitigation" json:"malicious_user_mitigation,omitempty"`
	WafExclusionRules       []*ves_io_schema_policy.SimpleWafExclusionRule `protobuf:"bytes,33,rep,name=waf_exclusion_rules,json=wafExclusionRules" json:"waf_exclusion_rules,omitempty"`
	BlockedClients          []*SimpleClientSrcRule                         `protobuf:"bytes,34,rep,name=blocked_clients,json=blockedClients" json:"blocked_clients,omitempty"`
	TrustedClients          []*SimpleClientSrcRule                         `protobuf:"bytes,35,rep,name=trusted_clients,json=trustedClients" json:"trusted_clients,omitempty"`
	// Types that are valid to be assigned to ServicePolicyChoice:
	//	*GetSpecType_ServicePoliciesFromNamespace
	//	*GetSpecType_NoServicePolicies
	//	*GetSpecType_ActiveServicePolicies
	ServicePolicyChoice isGetSpecType_ServicePolicyChoice `protobuf_oneof:"service_policy_choice"`
	// Types that are valid to be assigned to HashPolicyChoice:
	//	*GetSpecType_RoundRobin
	//	*GetSpecType_LeastActive
	//	*GetSpecType_Random
	//	*GetSpecType_SourceIpStickiness
	//	*GetSpecType_CookieStickiness
	//	*GetSpecType_RingHash
	HashPolicyChoice isGetSpecType_HashPolicyChoice                 `protobuf_oneof:"hash_policy_choice"`
	HostName         string                                         `protobuf:"bytes,1001,opt,name=host_name,json=hostName,proto3" json:"host_name,omitempty"`
	DnsInfo          []*ves_io_schema_virtual_host_dns_info.DnsInfo `protobuf:"bytes,1002,rep,name=dns_info,json=dnsInfo" json:"dns_info,omitempty"`
	State            ves_io_schema_virtual_host.VirtualHostState    `protobuf:"varint,1003,opt,name=state,proto3,enum=ves.io.schema.virtual_host.VirtualHostState" json:"state,omitempty"`
	AutoCertState    ves_io_schema_virtual_host.CertificationState  `protobuf:"varint,1004,opt,name=auto_cert_state,json=autoCertState,proto3,enum=ves.io.schema.virtual_host.CertificationState" json:"auto_cert_state,omitempty"`
	AutoCertInfo     *ves_io_schema_virtual_host.AutoCertInfoType   `protobuf:"bytes,1010,opt,name=auto_cert_info,json=autoCertInfo" json:"auto_cert_info,omitempty"`
}

func (m *GetSpecType) Reset()                    { *m = GetSpecType{} }
func (*GetSpecType) ProtoMessage()               {}
func (*GetSpecType) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{25} }

type isGetSpecType_LoadbalancerType interface {
	isGetSpecType_LoadbalancerType()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isGetSpecType_AdvertiseChoice interface {
	isGetSpecType_AdvertiseChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isGetSpecType_WafChoice interface {
	isGetSpecType_WafChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isGetSpecType_ChallengeType interface {
	isGetSpecType_ChallengeType()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isGetSpecType_RateLimitChoice interface {
	isGetSpecType_RateLimitChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isGetSpecType_ServicePolicyChoice interface {
	isGetSpecType_ServicePolicyChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isGetSpecType_HashPolicyChoice interface {
	isGetSpecType_HashPolicyChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type GetSpecType_Http struct {
	Http *ProxyTypeHttp `protobuf:"bytes,2,opt,name=http,oneof"`
}
type GetSpecType_HttpsAutoCert struct {
	HttpsAutoCert *ProxyTypeHttpsAutoCerts `protobuf:"bytes,27,opt,name=https_auto_cert,json=httpsAutoCert,oneof"`
}
type GetSpecType_Https struct {
	Https *ProxyTypeHttps `protobuf:"bytes,3,opt,name=https,oneof"`
}
type GetSpecType_DoNotAdvertise struct {
	DoNotAdvertise *ves_io_schema4.Empty `protobuf:"bytes,12,opt,name=do_not_advertise,json=doNotAdvertise,oneof"`
}
type GetSpecType_AdvertiseOnPublicDefaultVip struct {
	AdvertiseOnPublicDefaultVip *ves_io_schema4.Empty `protobuf:"bytes,13,opt,name=advertise_on_public_default_vip,json=advertiseOnPublicDefaultVip,oneof"`
}
type GetSpecType_AdvertiseOnPublic struct {
	AdvertiseOnPublic *ves_io_schema_views.AdvertisePublic `protobuf:"bytes,4,opt,name=advertise_on_public,json=advertiseOnPublic,oneof"`
}
type GetSpecType_AdvertiseCustom struct {
	AdvertiseCustom *ves_io_schema_views.AdvertiseCustom `protobuf:"bytes,5,opt,name=advertise_custom,json=advertiseCustom,oneof"`
}
type GetSpecType_DisableWaf struct {
	DisableWaf *ves_io_schema4.Empty `protobuf:"bytes,11,opt,name=disable_waf,json=disableWaf,oneof"`
}
type GetSpecType_Waf struct {
	Waf *ves_io_schema_views.ObjectRefType `protobuf:"bytes,9,opt,name=waf,oneof"`
}
type GetSpecType_WafRule struct {
	WafRule *ves_io_schema_views.ObjectRefType `protobuf:"bytes,10,opt,name=waf_rule,json=wafRule,oneof"`
}
type GetSpecType_NoChallenge struct {
	NoChallenge *ves_io_schema4.Empty `protobuf:"bytes,26,opt,name=no_challenge,json=noChallenge,oneof"`
}
type GetSpecType_JsChallenge struct {
	JsChallenge *ves_io_schema_virtual_host.JavascriptChallengeType `protobuf:"bytes,18,opt,name=js_challenge,json=jsChallenge,oneof"`
}
type GetSpecType_CaptchaChallenge struct {
	CaptchaChallenge *ves_io_schema_virtual_host.CaptchaChallengeType `protobuf:"bytes,24,opt,name=captcha_challenge,json=captchaChallenge,oneof"`
}
type GetSpecType_PolicyBasedChallenge struct {
	PolicyBasedChallenge *PolicyBasedChallenge `protobuf:"bytes,51,opt,name=policy_based_challenge,json=policyBasedChallenge,oneof"`
}
type GetSpecType_DisableRateLimit struct {
	DisableRateLimit *ves_io_schema4.Empty `protobuf:"bytes,22,opt,name=disable_rate_limit,json=disableRateLimit,oneof"`
}
type GetSpecType_RateLimit struct {
	RateLimit *RateLimitConfigType `protobuf:"bytes,23,opt,name=rate_limit,json=rateLimit,oneof"`
}
type GetSpecType_ServicePoliciesFromNamespace struct {
	ServicePoliciesFromNamespace *ves_io_schema4.Empty `protobuf:"bytes,41,opt,name=service_policies_from_namespace,json=servicePoliciesFromNamespace,oneof"`
}
type GetSpecType_NoServicePolicies struct {
	NoServicePolicies *ves_io_schema4.Empty `protobuf:"bytes,42,opt,name=no_service_policies,json=noServicePolicies,oneof"`
}
type GetSpecType_ActiveServicePolicies struct {
	ActiveServicePolicies *ServicePolicyList `protobuf:"bytes,43,opt,name=active_service_policies,json=activeServicePolicies,oneof"`
}
type GetSpecType_RoundRobin struct {
	RoundRobin *ves_io_schema4.Empty `protobuf:"bytes,45,opt,name=round_robin,json=roundRobin,oneof"`
}
type GetSpecType_LeastActive struct {
	LeastActive *ves_io_schema4.Empty `protobuf:"bytes,46,opt,name=least_active,json=leastActive,oneof"`
}
type GetSpecType_Random struct {
	Random *ves_io_schema4.Empty `protobuf:"bytes,47,opt,name=random,oneof"`
}
type GetSpecType_SourceIpStickiness struct {
	SourceIpStickiness *ves_io_schema4.Empty `protobuf:"bytes,48,opt,name=source_ip_stickiness,json=sourceIpStickiness,oneof"`
}
type GetSpecType_CookieStickiness struct {
	CookieStickiness *ves_io_schema_route.CookieForHashing `protobuf:"bytes,49,opt,name=cookie_stickiness,json=cookieStickiness,oneof"`
}
type GetSpecType_RingHash struct {
	RingHash *HashPolicyListType `protobuf:"bytes,50,opt,name=ring_hash,json=ringHash,oneof"`
}

func (*GetSpecType_Http) isGetSpecType_LoadbalancerType()                            {}
func (*GetSpecType_HttpsAutoCert) isGetSpecType_LoadbalancerType()                   {}
func (*GetSpecType_Https) isGetSpecType_LoadbalancerType()                           {}
func (*GetSpecType_DoNotAdvertise) isGetSpecType_AdvertiseChoice()                   {}
func (*GetSpecType_AdvertiseOnPublicDefaultVip) isGetSpecType_AdvertiseChoice()      {}
func (*GetSpecType_AdvertiseOnPublic) isGetSpecType_AdvertiseChoice()                {}
func (*GetSpecType_AdvertiseCustom) isGetSpecType_AdvertiseChoice()                  {}
func (*GetSpecType_DisableWaf) isGetSpecType_WafChoice()                             {}
func (*GetSpecType_Waf) isGetSpecType_WafChoice()                                    {}
func (*GetSpecType_WafRule) isGetSpecType_WafChoice()                                {}
func (*GetSpecType_NoChallenge) isGetSpecType_ChallengeType()                        {}
func (*GetSpecType_JsChallenge) isGetSpecType_ChallengeType()                        {}
func (*GetSpecType_CaptchaChallenge) isGetSpecType_ChallengeType()                   {}
func (*GetSpecType_PolicyBasedChallenge) isGetSpecType_ChallengeType()               {}
func (*GetSpecType_DisableRateLimit) isGetSpecType_RateLimitChoice()                 {}
func (*GetSpecType_RateLimit) isGetSpecType_RateLimitChoice()                        {}
func (*GetSpecType_ServicePoliciesFromNamespace) isGetSpecType_ServicePolicyChoice() {}
func (*GetSpecType_NoServicePolicies) isGetSpecType_ServicePolicyChoice()            {}
func (*GetSpecType_ActiveServicePolicies) isGetSpecType_ServicePolicyChoice()        {}
func (*GetSpecType_RoundRobin) isGetSpecType_HashPolicyChoice()                      {}
func (*GetSpecType_LeastActive) isGetSpecType_HashPolicyChoice()                     {}
func (*GetSpecType_Random) isGetSpecType_HashPolicyChoice()                          {}
func (*GetSpecType_SourceIpStickiness) isGetSpecType_HashPolicyChoice()              {}
func (*GetSpecType_CookieStickiness) isGetSpecType_HashPolicyChoice()                {}
func (*GetSpecType_RingHash) isGetSpecType_HashPolicyChoice()                        {}

func (m *GetSpecType) GetLoadbalancerType() isGetSpecType_LoadbalancerType {
	if m != nil {
		return m.LoadbalancerType
	}
	return nil
}
func (m *GetSpecType) GetAdvertiseChoice() isGetSpecType_AdvertiseChoice {
	if m != nil {
		return m.AdvertiseChoice
	}
	return nil
}
func (m *GetSpecType) GetWafChoice() isGetSpecType_WafChoice {
	if m != nil {
		return m.WafChoice
	}
	return nil
}
func (m *GetSpecType) GetChallengeType() isGetSpecType_ChallengeType {
	if m != nil {
		return m.ChallengeType
	}
	return nil
}
func (m *GetSpecType) GetRateLimitChoice() isGetSpecType_RateLimitChoice {
	if m != nil {
		return m.RateLimitChoice
	}
	return nil
}
func (m *GetSpecType) GetServicePolicyChoice() isGetSpecType_ServicePolicyChoice {
	if m != nil {
		return m.ServicePolicyChoice
	}
	return nil
}
func (m *GetSpecType) GetHashPolicyChoice() isGetSpecType_HashPolicyChoice {
	if m != nil {
		return m.HashPolicyChoice
	}
	return nil
}

func (m *GetSpecType) GetDomains() []string {
	if m != nil {
		return m.Domains
	}
	return nil
}

func (m *GetSpecType) GetHttp() *ProxyTypeHttp {
	if x, ok := m.GetLoadbalancerType().(*GetSpecType_Http); ok {
		return x.Http
	}
	return nil
}

func (m *GetSpecType) GetHttpsAutoCert() *ProxyTypeHttpsAutoCerts {
	if x, ok := m.GetLoadbalancerType().(*GetSpecType_HttpsAutoCert); ok {
		return x.HttpsAutoCert
	}
	return nil
}

func (m *GetSpecType) GetHttps() *ProxyTypeHttps {
	if x, ok := m.GetLoadbalancerType().(*GetSpecType_Https); ok {
		return x.Https
	}
	return nil
}

func (m *GetSpecType) GetDoNotAdvertise() *ves_io_schema4.Empty {
	if x, ok := m.GetAdvertiseChoice().(*GetSpecType_DoNotAdvertise); ok {
		return x.DoNotAdvertise
	}
	return nil
}

func (m *GetSpecType) GetAdvertiseOnPublicDefaultVip() *ves_io_schema4.Empty {
	if x, ok := m.GetAdvertiseChoice().(*GetSpecType_AdvertiseOnPublicDefaultVip); ok {
		return x.AdvertiseOnPublicDefaultVip
	}
	return nil
}

func (m *GetSpecType) GetAdvertiseOnPublic() *ves_io_schema_views.AdvertisePublic {
	if x, ok := m.GetAdvertiseChoice().(*GetSpecType_AdvertiseOnPublic); ok {
		return x.AdvertiseOnPublic
	}
	return nil
}

func (m *GetSpecType) GetAdvertiseCustom() *ves_io_schema_views.AdvertiseCustom {
	if x, ok := m.GetAdvertiseChoice().(*GetSpecType_AdvertiseCustom); ok {
		return x.AdvertiseCustom
	}
	return nil
}

func (m *GetSpecType) GetDefaultRoutePools() []*ves_io_schema_views.OriginPoolWithWeight {
	if m != nil {
		return m.DefaultRoutePools
	}
	return nil
}

func (m *GetSpecType) GetRoutes() []*RouteType {
	if m != nil {
		return m.Routes
	}
	return nil
}

func (m *GetSpecType) GetCorsPolicy() *ves_io_schema4.CorsPolicy {
	if m != nil {
		return m.CorsPolicy
	}
	return nil
}

func (m *GetSpecType) GetDisableWaf() *ves_io_schema4.Empty {
	if x, ok := m.GetWafChoice().(*GetSpecType_DisableWaf); ok {
		return x.DisableWaf
	}
	return nil
}

func (m *GetSpecType) GetWaf() *ves_io_schema_views.ObjectRefType {
	if x, ok := m.GetWafChoice().(*GetSpecType_Waf); ok {
		return x.Waf
	}
	return nil
}

func (m *GetSpecType) GetWafRule() *ves_io_schema_views.ObjectRefType {
	if x, ok := m.GetWafChoice().(*GetSpecType_WafRule); ok {
		return x.WafRule
	}
	return nil
}

func (m *GetSpecType) GetAddLocation() bool {
	if m != nil {
		return m.AddLocation
	}
	return false
}

func (m *GetSpecType) GetNoChallenge() *ves_io_schema4.Empty {
	if x, ok := m.GetChallengeType().(*GetSpecType_NoChallenge); ok {
		return x.NoChallenge
	}
	return nil
}

func (m *GetSpecType) GetJsChallenge() *ves_io_schema_virtual_host.JavascriptChallengeType {
	if x, ok := m.GetChallengeType().(*GetSpecType_JsChallenge); ok {
		return x.JsChallenge
	}
	return nil
}

func (m *GetSpecType) GetCaptchaChallenge() *ves_io_schema_virtual_host.CaptchaChallengeType {
	if x, ok := m.GetChallengeType().(*GetSpecType_CaptchaChallenge); ok {
		return x.CaptchaChallenge
	}
	return nil
}

func (m *GetSpecType) GetPolicyBasedChallenge() *PolicyBasedChallenge {
	if x, ok := m.GetChallengeType().(*GetSpecType_PolicyBasedChallenge); ok {
		return x.PolicyBasedChallenge
	}
	return nil
}

func (m *GetSpecType) GetMoreOption() *AdvancedOptionsType {
	if m != nil {
		return m.MoreOption
	}
	return nil
}

func (m *GetSpecType) GetUserIdentification() *ves_io_schema_views.ObjectRefType {
	if m != nil {
		return m.UserIdentification
	}
	return nil
}

func (m *GetSpecType) GetDisableRateLimit() *ves_io_schema4.Empty {
	if x, ok := m.GetRateLimitChoice().(*GetSpecType_DisableRateLimit); ok {
		return x.DisableRateLimit
	}
	return nil
}

func (m *GetSpecType) GetRateLimit() *RateLimitConfigType {
	if x, ok := m.GetRateLimitChoice().(*GetSpecType_RateLimit); ok {
		return x.RateLimit
	}
	return nil
}

func (m *GetSpecType) GetMaliciousUserMitigation() *ves_io_schema_views.ObjectRefType {
	if m != nil {
		return m.MaliciousUserMitigation
	}
	return nil
}

func (m *GetSpecType) GetWafExclusionRules() []*ves_io_schema_policy.SimpleWafExclusionRule {
	if m != nil {
		return m.WafExclusionRules
	}
	return nil
}

func (m *GetSpecType) GetBlockedClients() []*SimpleClientSrcRule {
	if m != nil {
		return m.BlockedClients
	}
	return nil
}

func (m *GetSpecType) GetTrustedClients() []*SimpleClientSrcRule {
	if m != nil {
		return m.TrustedClients
	}
	return nil
}

func (m *GetSpecType) GetServicePoliciesFromNamespace() *ves_io_schema4.Empty {
	if x, ok := m.GetServicePolicyChoice().(*GetSpecType_ServicePoliciesFromNamespace); ok {
		return x.ServicePoliciesFromNamespace
	}
	return nil
}

func (m *GetSpecType) GetNoServicePolicies() *ves_io_schema4.Empty {
	if x, ok := m.GetServicePolicyChoice().(*GetSpecType_NoServicePolicies); ok {
		return x.NoServicePolicies
	}
	return nil
}

func (m *GetSpecType) GetActiveServicePolicies() *ServicePolicyList {
	if x, ok := m.GetServicePolicyChoice().(*GetSpecType_ActiveServicePolicies); ok {
		return x.ActiveServicePolicies
	}
	return nil
}

func (m *GetSpecType) GetRoundRobin() *ves_io_schema4.Empty {
	if x, ok := m.GetHashPolicyChoice().(*GetSpecType_RoundRobin); ok {
		return x.RoundRobin
	}
	return nil
}

func (m *GetSpecType) GetLeastActive() *ves_io_schema4.Empty {
	if x, ok := m.GetHashPolicyChoice().(*GetSpecType_LeastActive); ok {
		return x.LeastActive
	}
	return nil
}

func (m *GetSpecType) GetRandom() *ves_io_schema4.Empty {
	if x, ok := m.GetHashPolicyChoice().(*GetSpecType_Random); ok {
		return x.Random
	}
	return nil
}

func (m *GetSpecType) GetSourceIpStickiness() *ves_io_schema4.Empty {
	if x, ok := m.GetHashPolicyChoice().(*GetSpecType_SourceIpStickiness); ok {
		return x.SourceIpStickiness
	}
	return nil
}

func (m *GetSpecType) GetCookieStickiness() *ves_io_schema_route.CookieForHashing {
	if x, ok := m.GetHashPolicyChoice().(*GetSpecType_CookieStickiness); ok {
		return x.CookieStickiness
	}
	return nil
}

func (m *GetSpecType) GetRingHash() *HashPolicyListType {
	if x, ok := m.GetHashPolicyChoice().(*GetSpecType_RingHash); ok {
		return x.RingHash
	}
	return nil
}

func (m *GetSpecType) GetHostName() string {
	if m != nil {
		return m.HostName
	}
	return ""
}

func (m *GetSpecType) GetDnsInfo() []*ves_io_schema_virtual_host_dns_info.DnsInfo {
	if m != nil {
		return m.DnsInfo
	}
	return nil
}

func (m *GetSpecType) GetState() ves_io_schema_virtual_host.VirtualHostState {
	if m != nil {
		return m.State
	}
	return ves_io_schema_virtual_host.VIRTUAL_HOST_READY
}

func (m *GetSpecType) GetAutoCertState() ves_io_schema_virtual_host.CertificationState {
	if m != nil {
		return m.AutoCertState
	}
	return ves_io_schema_virtual_host.AutoCertDisabled
}

func (m *GetSpecType) GetAutoCertInfo() *ves_io_schema_virtual_host.AutoCertInfoType {
	if m != nil {
		return m.AutoCertInfo
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*GetSpecType) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _GetSpecType_OneofMarshaler, _GetSpecType_OneofUnmarshaler, _GetSpecType_OneofSizer, []interface{}{
		(*GetSpecType_Http)(nil),
		(*GetSpecType_HttpsAutoCert)(nil),
		(*GetSpecType_Https)(nil),
		(*GetSpecType_DoNotAdvertise)(nil),
		(*GetSpecType_AdvertiseOnPublicDefaultVip)(nil),
		(*GetSpecType_AdvertiseOnPublic)(nil),
		(*GetSpecType_AdvertiseCustom)(nil),
		(*GetSpecType_DisableWaf)(nil),
		(*GetSpecType_Waf)(nil),
		(*GetSpecType_WafRule)(nil),
		(*GetSpecType_NoChallenge)(nil),
		(*GetSpecType_JsChallenge)(nil),
		(*GetSpecType_CaptchaChallenge)(nil),
		(*GetSpecType_PolicyBasedChallenge)(nil),
		(*GetSpecType_DisableRateLimit)(nil),
		(*GetSpecType_RateLimit)(nil),
		(*GetSpecType_ServicePoliciesFromNamespace)(nil),
		(*GetSpecType_NoServicePolicies)(nil),
		(*GetSpecType_ActiveServicePolicies)(nil),
		(*GetSpecType_RoundRobin)(nil),
		(*GetSpecType_LeastActive)(nil),
		(*GetSpecType_Random)(nil),
		(*GetSpecType_SourceIpStickiness)(nil),
		(*GetSpecType_CookieStickiness)(nil),
		(*GetSpecType_RingHash)(nil),
	}
}

func _GetSpecType_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*GetSpecType)
	// loadbalancer_type
	switch x := m.LoadbalancerType.(type) {
	case *GetSpecType_Http:
		_ = b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Http); err != nil {
			return err
		}
	case *GetSpecType_HttpsAutoCert:
		_ = b.EncodeVarint(27<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.HttpsAutoCert); err != nil {
			return err
		}
	case *GetSpecType_Https:
		_ = b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Https); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("GetSpecType.LoadbalancerType has unexpected type %T", x)
	}
	// advertise_choice
	switch x := m.AdvertiseChoice.(type) {
	case *GetSpecType_DoNotAdvertise:
		_ = b.EncodeVarint(12<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.DoNotAdvertise); err != nil {
			return err
		}
	case *GetSpecType_AdvertiseOnPublicDefaultVip:
		_ = b.EncodeVarint(13<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.AdvertiseOnPublicDefaultVip); err != nil {
			return err
		}
	case *GetSpecType_AdvertiseOnPublic:
		_ = b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.AdvertiseOnPublic); err != nil {
			return err
		}
	case *GetSpecType_AdvertiseCustom:
		_ = b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.AdvertiseCustom); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("GetSpecType.AdvertiseChoice has unexpected type %T", x)
	}
	// waf_choice
	switch x := m.WafChoice.(type) {
	case *GetSpecType_DisableWaf:
		_ = b.EncodeVarint(11<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.DisableWaf); err != nil {
			return err
		}
	case *GetSpecType_Waf:
		_ = b.EncodeVarint(9<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Waf); err != nil {
			return err
		}
	case *GetSpecType_WafRule:
		_ = b.EncodeVarint(10<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.WafRule); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("GetSpecType.WafChoice has unexpected type %T", x)
	}
	// challenge_type
	switch x := m.ChallengeType.(type) {
	case *GetSpecType_NoChallenge:
		_ = b.EncodeVarint(26<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.NoChallenge); err != nil {
			return err
		}
	case *GetSpecType_JsChallenge:
		_ = b.EncodeVarint(18<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.JsChallenge); err != nil {
			return err
		}
	case *GetSpecType_CaptchaChallenge:
		_ = b.EncodeVarint(24<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.CaptchaChallenge); err != nil {
			return err
		}
	case *GetSpecType_PolicyBasedChallenge:
		_ = b.EncodeVarint(51<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.PolicyBasedChallenge); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("GetSpecType.ChallengeType has unexpected type %T", x)
	}
	// rate_limit_choice
	switch x := m.RateLimitChoice.(type) {
	case *GetSpecType_DisableRateLimit:
		_ = b.EncodeVarint(22<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.DisableRateLimit); err != nil {
			return err
		}
	case *GetSpecType_RateLimit:
		_ = b.EncodeVarint(23<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.RateLimit); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("GetSpecType.RateLimitChoice has unexpected type %T", x)
	}
	// service_policy_choice
	switch x := m.ServicePolicyChoice.(type) {
	case *GetSpecType_ServicePoliciesFromNamespace:
		_ = b.EncodeVarint(41<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ServicePoliciesFromNamespace); err != nil {
			return err
		}
	case *GetSpecType_NoServicePolicies:
		_ = b.EncodeVarint(42<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.NoServicePolicies); err != nil {
			return err
		}
	case *GetSpecType_ActiveServicePolicies:
		_ = b.EncodeVarint(43<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ActiveServicePolicies); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("GetSpecType.ServicePolicyChoice has unexpected type %T", x)
	}
	// hash_policy_choice
	switch x := m.HashPolicyChoice.(type) {
	case *GetSpecType_RoundRobin:
		_ = b.EncodeVarint(45<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.RoundRobin); err != nil {
			return err
		}
	case *GetSpecType_LeastActive:
		_ = b.EncodeVarint(46<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.LeastActive); err != nil {
			return err
		}
	case *GetSpecType_Random:
		_ = b.EncodeVarint(47<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Random); err != nil {
			return err
		}
	case *GetSpecType_SourceIpStickiness:
		_ = b.EncodeVarint(48<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.SourceIpStickiness); err != nil {
			return err
		}
	case *GetSpecType_CookieStickiness:
		_ = b.EncodeVarint(49<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.CookieStickiness); err != nil {
			return err
		}
	case *GetSpecType_RingHash:
		_ = b.EncodeVarint(50<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.RingHash); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("GetSpecType.HashPolicyChoice has unexpected type %T", x)
	}
	return nil
}

func _GetSpecType_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*GetSpecType)
	switch tag {
	case 2: // loadbalancer_type.http
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ProxyTypeHttp)
		err := b.DecodeMessage(msg)
		m.LoadbalancerType = &GetSpecType_Http{msg}
		return true, err
	case 27: // loadbalancer_type.https_auto_cert
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ProxyTypeHttpsAutoCerts)
		err := b.DecodeMessage(msg)
		m.LoadbalancerType = &GetSpecType_HttpsAutoCert{msg}
		return true, err
	case 3: // loadbalancer_type.https
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ProxyTypeHttps)
		err := b.DecodeMessage(msg)
		m.LoadbalancerType = &GetSpecType_Https{msg}
		return true, err
	case 12: // advertise_choice.do_not_advertise
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.AdvertiseChoice = &GetSpecType_DoNotAdvertise{msg}
		return true, err
	case 13: // advertise_choice.advertise_on_public_default_vip
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.AdvertiseChoice = &GetSpecType_AdvertiseOnPublicDefaultVip{msg}
		return true, err
	case 4: // advertise_choice.advertise_on_public
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema_views.AdvertisePublic)
		err := b.DecodeMessage(msg)
		m.AdvertiseChoice = &GetSpecType_AdvertiseOnPublic{msg}
		return true, err
	case 5: // advertise_choice.advertise_custom
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema_views.AdvertiseCustom)
		err := b.DecodeMessage(msg)
		m.AdvertiseChoice = &GetSpecType_AdvertiseCustom{msg}
		return true, err
	case 11: // waf_choice.disable_waf
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.WafChoice = &GetSpecType_DisableWaf{msg}
		return true, err
	case 9: // waf_choice.waf
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema_views.ObjectRefType)
		err := b.DecodeMessage(msg)
		m.WafChoice = &GetSpecType_Waf{msg}
		return true, err
	case 10: // waf_choice.waf_rule
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema_views.ObjectRefType)
		err := b.DecodeMessage(msg)
		m.WafChoice = &GetSpecType_WafRule{msg}
		return true, err
	case 26: // challenge_type.no_challenge
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.ChallengeType = &GetSpecType_NoChallenge{msg}
		return true, err
	case 18: // challenge_type.js_challenge
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema_virtual_host.JavascriptChallengeType)
		err := b.DecodeMessage(msg)
		m.ChallengeType = &GetSpecType_JsChallenge{msg}
		return true, err
	case 24: // challenge_type.captcha_challenge
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema_virtual_host.CaptchaChallengeType)
		err := b.DecodeMessage(msg)
		m.ChallengeType = &GetSpecType_CaptchaChallenge{msg}
		return true, err
	case 51: // challenge_type.policy_based_challenge
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(PolicyBasedChallenge)
		err := b.DecodeMessage(msg)
		m.ChallengeType = &GetSpecType_PolicyBasedChallenge{msg}
		return true, err
	case 22: // rate_limit_choice.disable_rate_limit
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.RateLimitChoice = &GetSpecType_DisableRateLimit{msg}
		return true, err
	case 23: // rate_limit_choice.rate_limit
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(RateLimitConfigType)
		err := b.DecodeMessage(msg)
		m.RateLimitChoice = &GetSpecType_RateLimit{msg}
		return true, err
	case 41: // service_policy_choice.service_policies_from_namespace
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.ServicePolicyChoice = &GetSpecType_ServicePoliciesFromNamespace{msg}
		return true, err
	case 42: // service_policy_choice.no_service_policies
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.ServicePolicyChoice = &GetSpecType_NoServicePolicies{msg}
		return true, err
	case 43: // service_policy_choice.active_service_policies
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ServicePolicyList)
		err := b.DecodeMessage(msg)
		m.ServicePolicyChoice = &GetSpecType_ActiveServicePolicies{msg}
		return true, err
	case 45: // hash_policy_choice.round_robin
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.HashPolicyChoice = &GetSpecType_RoundRobin{msg}
		return true, err
	case 46: // hash_policy_choice.least_active
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.HashPolicyChoice = &GetSpecType_LeastActive{msg}
		return true, err
	case 47: // hash_policy_choice.random
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.HashPolicyChoice = &GetSpecType_Random{msg}
		return true, err
	case 48: // hash_policy_choice.source_ip_stickiness
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.HashPolicyChoice = &GetSpecType_SourceIpStickiness{msg}
		return true, err
	case 49: // hash_policy_choice.cookie_stickiness
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema_route.CookieForHashing)
		err := b.DecodeMessage(msg)
		m.HashPolicyChoice = &GetSpecType_CookieStickiness{msg}
		return true, err
	case 50: // hash_policy_choice.ring_hash
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(HashPolicyListType)
		err := b.DecodeMessage(msg)
		m.HashPolicyChoice = &GetSpecType_RingHash{msg}
		return true, err
	default:
		return false, nil
	}
}

func _GetSpecType_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*GetSpecType)
	// loadbalancer_type
	switch x := m.LoadbalancerType.(type) {
	case *GetSpecType_Http:
		s := proto.Size(x.Http)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *GetSpecType_HttpsAutoCert:
		s := proto.Size(x.HttpsAutoCert)
		n += proto.SizeVarint(27<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *GetSpecType_Https:
		s := proto.Size(x.Https)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	// advertise_choice
	switch x := m.AdvertiseChoice.(type) {
	case *GetSpecType_DoNotAdvertise:
		s := proto.Size(x.DoNotAdvertise)
		n += proto.SizeVarint(12<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *GetSpecType_AdvertiseOnPublicDefaultVip:
		s := proto.Size(x.AdvertiseOnPublicDefaultVip)
		n += proto.SizeVarint(13<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *GetSpecType_AdvertiseOnPublic:
		s := proto.Size(x.AdvertiseOnPublic)
		n += proto.SizeVarint(4<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *GetSpecType_AdvertiseCustom:
		s := proto.Size(x.AdvertiseCustom)
		n += proto.SizeVarint(5<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	// waf_choice
	switch x := m.WafChoice.(type) {
	case *GetSpecType_DisableWaf:
		s := proto.Size(x.DisableWaf)
		n += proto.SizeVarint(11<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *GetSpecType_Waf:
		s := proto.Size(x.Waf)
		n += proto.SizeVarint(9<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *GetSpecType_WafRule:
		s := proto.Size(x.WafRule)
		n += proto.SizeVarint(10<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	// challenge_type
	switch x := m.ChallengeType.(type) {
	case *GetSpecType_NoChallenge:
		s := proto.Size(x.NoChallenge)
		n += proto.SizeVarint(26<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *GetSpecType_JsChallenge:
		s := proto.Size(x.JsChallenge)
		n += proto.SizeVarint(18<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *GetSpecType_CaptchaChallenge:
		s := proto.Size(x.CaptchaChallenge)
		n += proto.SizeVarint(24<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *GetSpecType_PolicyBasedChallenge:
		s := proto.Size(x.PolicyBasedChallenge)
		n += proto.SizeVarint(51<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	// rate_limit_choice
	switch x := m.RateLimitChoice.(type) {
	case *GetSpecType_DisableRateLimit:
		s := proto.Size(x.DisableRateLimit)
		n += proto.SizeVarint(22<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *GetSpecType_RateLimit:
		s := proto.Size(x.RateLimit)
		n += proto.SizeVarint(23<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	// service_policy_choice
	switch x := m.ServicePolicyChoice.(type) {
	case *GetSpecType_ServicePoliciesFromNamespace:
		s := proto.Size(x.ServicePoliciesFromNamespace)
		n += proto.SizeVarint(41<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *GetSpecType_NoServicePolicies:
		s := proto.Size(x.NoServicePolicies)
		n += proto.SizeVarint(42<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *GetSpecType_ActiveServicePolicies:
		s := proto.Size(x.ActiveServicePolicies)
		n += proto.SizeVarint(43<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	// hash_policy_choice
	switch x := m.HashPolicyChoice.(type) {
	case *GetSpecType_RoundRobin:
		s := proto.Size(x.RoundRobin)
		n += proto.SizeVarint(45<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *GetSpecType_LeastActive:
		s := proto.Size(x.LeastActive)
		n += proto.SizeVarint(46<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *GetSpecType_Random:
		s := proto.Size(x.Random)
		n += proto.SizeVarint(47<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *GetSpecType_SourceIpStickiness:
		s := proto.Size(x.SourceIpStickiness)
		n += proto.SizeVarint(48<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *GetSpecType_CookieStickiness:
		s := proto.Size(x.CookieStickiness)
		n += proto.SizeVarint(49<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *GetSpecType_RingHash:
		s := proto.Size(x.RingHash)
		n += proto.SizeVarint(50<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

func init() {
	proto.RegisterType((*DownstreamTlsValidationContext)(nil), "ves.io.schema.views.http_loadbalancer.DownstreamTlsValidationContext")
	golang_proto.RegisterType((*DownstreamTlsValidationContext)(nil), "ves.io.schema.views.http_loadbalancer.DownstreamTlsValidationContext")
	proto.RegisterType((*DownstreamTlsParamsType)(nil), "ves.io.schema.views.http_loadbalancer.DownstreamTlsParamsType")
	golang_proto.RegisterType((*DownstreamTlsParamsType)(nil), "ves.io.schema.views.http_loadbalancer.DownstreamTlsParamsType")
	proto.RegisterType((*ProxyTypeHttps)(nil), "ves.io.schema.views.http_loadbalancer.ProxyTypeHttps")
	golang_proto.RegisterType((*ProxyTypeHttps)(nil), "ves.io.schema.views.http_loadbalancer.ProxyTypeHttps")
	proto.RegisterType((*ProxyTypeHttp)(nil), "ves.io.schema.views.http_loadbalancer.ProxyTypeHttp")
	golang_proto.RegisterType((*ProxyTypeHttp)(nil), "ves.io.schema.views.http_loadbalancer.ProxyTypeHttp")
	proto.RegisterType((*ProxyTypeHttpsAutoCerts)(nil), "ves.io.schema.views.http_loadbalancer.ProxyTypeHttpsAutoCerts")
	golang_proto.RegisterType((*ProxyTypeHttpsAutoCerts)(nil), "ves.io.schema.views.http_loadbalancer.ProxyTypeHttpsAutoCerts")
	proto.RegisterType((*HashPolicyListType)(nil), "ves.io.schema.views.http_loadbalancer.HashPolicyListType")
	golang_proto.RegisterType((*HashPolicyListType)(nil), "ves.io.schema.views.http_loadbalancer.HashPolicyListType")
	proto.RegisterType((*MirrorPolicyType)(nil), "ves.io.schema.views.http_loadbalancer.MirrorPolicyType")
	golang_proto.RegisterType((*MirrorPolicyType)(nil), "ves.io.schema.views.http_loadbalancer.MirrorPolicyType")
	proto.RegisterType((*RouteSimpleAdvancedOptions)(nil), "ves.io.schema.views.http_loadbalancer.RouteSimpleAdvancedOptions")
	golang_proto.RegisterType((*RouteSimpleAdvancedOptions)(nil), "ves.io.schema.views.http_loadbalancer.RouteSimpleAdvancedOptions")
	proto.RegisterType((*RouteTypeSimpleWithDefaultOriginPool)(nil), "ves.io.schema.views.http_loadbalancer.RouteTypeSimpleWithDefaultOriginPool")
	golang_proto.RegisterType((*RouteTypeSimpleWithDefaultOriginPool)(nil), "ves.io.schema.views.http_loadbalancer.RouteTypeSimpleWithDefaultOriginPool")
	proto.RegisterType((*RouteTypeSimple)(nil), "ves.io.schema.views.http_loadbalancer.RouteTypeSimple")
	golang_proto.RegisterType((*RouteTypeSimple)(nil), "ves.io.schema.views.http_loadbalancer.RouteTypeSimple")
	proto.RegisterType((*RouteTypeRedirect)(nil), "ves.io.schema.views.http_loadbalancer.RouteTypeRedirect")
	golang_proto.RegisterType((*RouteTypeRedirect)(nil), "ves.io.schema.views.http_loadbalancer.RouteTypeRedirect")
	proto.RegisterType((*RouteTypeDirectResponse)(nil), "ves.io.schema.views.http_loadbalancer.RouteTypeDirectResponse")
	golang_proto.RegisterType((*RouteTypeDirectResponse)(nil), "ves.io.schema.views.http_loadbalancer.RouteTypeDirectResponse")
	proto.RegisterType((*RouteTypeCustomRoute)(nil), "ves.io.schema.views.http_loadbalancer.RouteTypeCustomRoute")
	golang_proto.RegisterType((*RouteTypeCustomRoute)(nil), "ves.io.schema.views.http_loadbalancer.RouteTypeCustomRoute")
	proto.RegisterType((*RouteType)(nil), "ves.io.schema.views.http_loadbalancer.RouteType")
	golang_proto.RegisterType((*RouteType)(nil), "ves.io.schema.views.http_loadbalancer.RouteType")
	proto.RegisterType((*AdvancedOptionsType)(nil), "ves.io.schema.views.http_loadbalancer.AdvancedOptionsType")
	golang_proto.RegisterType((*AdvancedOptionsType)(nil), "ves.io.schema.views.http_loadbalancer.AdvancedOptionsType")
	proto.RegisterType((*PolicyBasedChallenge)(nil), "ves.io.schema.views.http_loadbalancer.PolicyBasedChallenge")
	golang_proto.RegisterType((*PolicyBasedChallenge)(nil), "ves.io.schema.views.http_loadbalancer.PolicyBasedChallenge")
	proto.RegisterType((*ChallengeRule)(nil), "ves.io.schema.views.http_loadbalancer.ChallengeRule")
	golang_proto.RegisterType((*ChallengeRule)(nil), "ves.io.schema.views.http_loadbalancer.ChallengeRule")
	proto.RegisterType((*ChallengeRuleList)(nil), "ves.io.schema.views.http_loadbalancer.ChallengeRuleList")
	golang_proto.RegisterType((*ChallengeRuleList)(nil), "ves.io.schema.views.http_loadbalancer.ChallengeRuleList")
	proto.RegisterType((*SimpleClientSrcRule)(nil), "ves.io.schema.views.http_loadbalancer.SimpleClientSrcRule")
	golang_proto.RegisterType((*SimpleClientSrcRule)(nil), "ves.io.schema.views.http_loadbalancer.SimpleClientSrcRule")
	proto.RegisterType((*CustomIpAllowedList)(nil), "ves.io.schema.views.http_loadbalancer.CustomIpAllowedList")
	golang_proto.RegisterType((*CustomIpAllowedList)(nil), "ves.io.schema.views.http_loadbalancer.CustomIpAllowedList")
	proto.RegisterType((*RateLimitConfigType)(nil), "ves.io.schema.views.http_loadbalancer.RateLimitConfigType")
	golang_proto.RegisterType((*RateLimitConfigType)(nil), "ves.io.schema.views.http_loadbalancer.RateLimitConfigType")
	proto.RegisterType((*ServicePolicyList)(nil), "ves.io.schema.views.http_loadbalancer.ServicePolicyList")
	golang_proto.RegisterType((*ServicePolicyList)(nil), "ves.io.schema.views.http_loadbalancer.ServicePolicyList")
	proto.RegisterType((*GlobalSpecType)(nil), "ves.io.schema.views.http_loadbalancer.GlobalSpecType")
	golang_proto.RegisterType((*GlobalSpecType)(nil), "ves.io.schema.views.http_loadbalancer.GlobalSpecType")
	proto.RegisterType((*CreateSpecType)(nil), "ves.io.schema.views.http_loadbalancer.CreateSpecType")
	golang_proto.RegisterType((*CreateSpecType)(nil), "ves.io.schema.views.http_loadbalancer.CreateSpecType")
	proto.RegisterType((*ReplaceSpecType)(nil), "ves.io.schema.views.http_loadbalancer.ReplaceSpecType")
	golang_proto.RegisterType((*ReplaceSpecType)(nil), "ves.io.schema.views.http_loadbalancer.ReplaceSpecType")
	proto.RegisterType((*GetSpecType)(nil), "ves.io.schema.views.http_loadbalancer.GetSpecType")
	golang_proto.RegisterType((*GetSpecType)(nil), "ves.io.schema.views.http_loadbalancer.GetSpecType")
}
func (this *DownstreamTlsValidationContext) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DownstreamTlsValidationContext)
	if !ok {
		that2, ok := that.(DownstreamTlsValidationContext)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.TrustedCaUrl != that1.TrustedCaUrl {
		return false
	}
	return true
}
func (this *DownstreamTlsParamsType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DownstreamTlsParamsType)
	if !ok {
		that2, ok := that.(DownstreamTlsParamsType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.TlsConfig.Equal(that1.TlsConfig) {
		return false
	}
	if len(this.TlsCertificates) != len(that1.TlsCertificates) {
		return false
	}
	for i := range this.TlsCertificates {
		if !this.TlsCertificates[i].Equal(that1.TlsCertificates[i]) {
			return false
		}
	}
	if that1.MtlsChoice == nil {
		if this.MtlsChoice != nil {
			return false
		}
	} else if this.MtlsChoice == nil {
		return false
	} else if !this.MtlsChoice.Equal(that1.MtlsChoice) {
		return false
	}
	return true
}
func (this *DownstreamTlsParamsType_NoMtls) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DownstreamTlsParamsType_NoMtls)
	if !ok {
		that2, ok := that.(DownstreamTlsParamsType_NoMtls)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NoMtls.Equal(that1.NoMtls) {
		return false
	}
	return true
}
func (this *DownstreamTlsParamsType_UseMtls) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DownstreamTlsParamsType_UseMtls)
	if !ok {
		that2, ok := that.(DownstreamTlsParamsType_UseMtls)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.UseMtls.Equal(that1.UseMtls) {
		return false
	}
	return true
}
func (this *ProxyTypeHttps) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ProxyTypeHttps)
	if !ok {
		that2, ok := that.(ProxyTypeHttps)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.HttpRedirect != that1.HttpRedirect {
		return false
	}
	if this.AddHsts != that1.AddHsts {
		return false
	}
	if !this.TlsParameters.Equal(that1.TlsParameters) {
		return false
	}
	if that1.ServerHeaderChoice == nil {
		if this.ServerHeaderChoice != nil {
			return false
		}
	} else if this.ServerHeaderChoice == nil {
		return false
	} else if !this.ServerHeaderChoice.Equal(that1.ServerHeaderChoice) {
		return false
	}
	return true
}
func (this *ProxyTypeHttps_DefaultHeader) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ProxyTypeHttps_DefaultHeader)
	if !ok {
		that2, ok := that.(ProxyTypeHttps_DefaultHeader)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DefaultHeader.Equal(that1.DefaultHeader) {
		return false
	}
	return true
}
func (this *ProxyTypeHttps_ServerName) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ProxyTypeHttps_ServerName)
	if !ok {
		that2, ok := that.(ProxyTypeHttps_ServerName)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ServerName != that1.ServerName {
		return false
	}
	return true
}
func (this *ProxyTypeHttps_AppendServerName) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ProxyTypeHttps_AppendServerName)
	if !ok {
		that2, ok := that.(ProxyTypeHttps_AppendServerName)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.AppendServerName != that1.AppendServerName {
		return false
	}
	return true
}
func (this *ProxyTypeHttps_PassThrough) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ProxyTypeHttps_PassThrough)
	if !ok {
		that2, ok := that.(ProxyTypeHttps_PassThrough)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.PassThrough.Equal(that1.PassThrough) {
		return false
	}
	return true
}
func (this *ProxyTypeHttp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ProxyTypeHttp)
	if !ok {
		that2, ok := that.(ProxyTypeHttp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.DnsVolterraManaged != that1.DnsVolterraManaged {
		return false
	}
	return true
}
func (this *ProxyTypeHttpsAutoCerts) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ProxyTypeHttpsAutoCerts)
	if !ok {
		that2, ok := that.(ProxyTypeHttpsAutoCerts)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.HttpRedirect != that1.HttpRedirect {
		return false
	}
	if this.AddHsts != that1.AddHsts {
		return false
	}
	if !this.TlsConfig.Equal(that1.TlsConfig) {
		return false
	}
	if that1.MtlsChoice == nil {
		if this.MtlsChoice != nil {
			return false
		}
	} else if this.MtlsChoice == nil {
		return false
	} else if !this.MtlsChoice.Equal(that1.MtlsChoice) {
		return false
	}
	if that1.ServerHeaderChoice == nil {
		if this.ServerHeaderChoice != nil {
			return false
		}
	} else if this.ServerHeaderChoice == nil {
		return false
	} else if !this.ServerHeaderChoice.Equal(that1.ServerHeaderChoice) {
		return false
	}
	return true
}
func (this *ProxyTypeHttpsAutoCerts_NoMtls) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ProxyTypeHttpsAutoCerts_NoMtls)
	if !ok {
		that2, ok := that.(ProxyTypeHttpsAutoCerts_NoMtls)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NoMtls.Equal(that1.NoMtls) {
		return false
	}
	return true
}
func (this *ProxyTypeHttpsAutoCerts_UseMtls) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ProxyTypeHttpsAutoCerts_UseMtls)
	if !ok {
		that2, ok := that.(ProxyTypeHttpsAutoCerts_UseMtls)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.UseMtls.Equal(that1.UseMtls) {
		return false
	}
	return true
}
func (this *ProxyTypeHttpsAutoCerts_DefaultHeader) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ProxyTypeHttpsAutoCerts_DefaultHeader)
	if !ok {
		that2, ok := that.(ProxyTypeHttpsAutoCerts_DefaultHeader)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DefaultHeader.Equal(that1.DefaultHeader) {
		return false
	}
	return true
}
func (this *ProxyTypeHttpsAutoCerts_ServerName) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ProxyTypeHttpsAutoCerts_ServerName)
	if !ok {
		that2, ok := that.(ProxyTypeHttpsAutoCerts_ServerName)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ServerName != that1.ServerName {
		return false
	}
	return true
}
func (this *ProxyTypeHttpsAutoCerts_AppendServerName) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ProxyTypeHttpsAutoCerts_AppendServerName)
	if !ok {
		that2, ok := that.(ProxyTypeHttpsAutoCerts_AppendServerName)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.AppendServerName != that1.AppendServerName {
		return false
	}
	return true
}
func (this *ProxyTypeHttpsAutoCerts_PassThrough) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ProxyTypeHttpsAutoCerts_PassThrough)
	if !ok {
		that2, ok := that.(ProxyTypeHttpsAutoCerts_PassThrough)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.PassThrough.Equal(that1.PassThrough) {
		return false
	}
	return true
}
func (this *HashPolicyListType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*HashPolicyListType)
	if !ok {
		that2, ok := that.(HashPolicyListType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.HashPolicy) != len(that1.HashPolicy) {
		return false
	}
	for i := range this.HashPolicy {
		if !this.HashPolicy[i].Equal(that1.HashPolicy[i]) {
			return false
		}
	}
	return true
}
func (this *MirrorPolicyType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MirrorPolicyType)
	if !ok {
		that2, ok := that.(MirrorPolicyType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.OriginPool.Equal(that1.OriginPool) {
		return false
	}
	if !this.Percent.Equal(that1.Percent) {
		return false
	}
	return true
}
func (this *RouteSimpleAdvancedOptions) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RouteSimpleAdvancedOptions)
	if !ok {
		that2, ok := that.(RouteSimpleAdvancedOptions)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.HashPolicyChoice == nil {
		if this.HashPolicyChoice != nil {
			return false
		}
	} else if this.HashPolicyChoice == nil {
		return false
	} else if !this.HashPolicyChoice.Equal(that1.HashPolicyChoice) {
		return false
	}
	if this.Priority != that1.Priority {
		return false
	}
	if len(this.EndpointSubsets) != len(that1.EndpointSubsets) {
		return false
	}
	for i := range this.EndpointSubsets {
		if this.EndpointSubsets[i] != that1.EndpointSubsets[i] {
			return false
		}
	}
	if that1.RewriteChoice == nil {
		if this.RewriteChoice != nil {
			return false
		}
	} else if this.RewriteChoice == nil {
		return false
	} else if !this.RewriteChoice.Equal(that1.RewriteChoice) {
		return false
	}
	if len(this.RequestHeadersToAdd) != len(that1.RequestHeadersToAdd) {
		return false
	}
	for i := range this.RequestHeadersToAdd {
		if !this.RequestHeadersToAdd[i].Equal(that1.RequestHeadersToAdd[i]) {
			return false
		}
	}
	if len(this.RequestHeadersToRemove) != len(that1.RequestHeadersToRemove) {
		return false
	}
	for i := range this.RequestHeadersToRemove {
		if this.RequestHeadersToRemove[i] != that1.RequestHeadersToRemove[i] {
			return false
		}
	}
	if len(this.ResponseHeadersToAdd) != len(that1.ResponseHeadersToAdd) {
		return false
	}
	for i := range this.ResponseHeadersToAdd {
		if !this.ResponseHeadersToAdd[i].Equal(that1.ResponseHeadersToAdd[i]) {
			return false
		}
	}
	if len(this.ResponseHeadersToRemove) != len(that1.ResponseHeadersToRemove) {
		return false
	}
	for i := range this.ResponseHeadersToRemove {
		if this.ResponseHeadersToRemove[i] != that1.ResponseHeadersToRemove[i] {
			return false
		}
	}
	if this.DisableLocationAdd != that1.DisableLocationAdd {
		return false
	}
	if that1.WafChoice == nil {
		if this.WafChoice != nil {
			return false
		}
	} else if this.WafChoice == nil {
		return false
	} else if !this.WafChoice.Equal(that1.WafChoice) {
		return false
	}
	if !this.CorsPolicy.Equal(that1.CorsPolicy) {
		return false
	}
	if that1.SpdyChoice == nil {
		if this.SpdyChoice != nil {
			return false
		}
	} else if this.SpdyChoice == nil {
		return false
	} else if !this.SpdyChoice.Equal(that1.SpdyChoice) {
		return false
	}
	if that1.WebsocketChoice == nil {
		if this.WebsocketChoice != nil {
			return false
		}
	} else if this.WebsocketChoice == nil {
		return false
	} else if !this.WebsocketChoice.Equal(that1.WebsocketChoice) {
		return false
	}
	if that1.RetryPolicyChoice == nil {
		if this.RetryPolicyChoice != nil {
			return false
		}
	} else if this.RetryPolicyChoice == nil {
		return false
	} else if !this.RetryPolicyChoice.Equal(that1.RetryPolicyChoice) {
		return false
	}
	if this.Timeout != that1.Timeout {
		return false
	}
	if that1.BufferChoice == nil {
		if this.BufferChoice != nil {
			return false
		}
	} else if this.BufferChoice == nil {
		return false
	} else if !this.BufferChoice.Equal(that1.BufferChoice) {
		return false
	}
	if that1.MirroringChoice == nil {
		if this.MirroringChoice != nil {
			return false
		}
	} else if this.MirroringChoice == nil {
		return false
	} else if !this.MirroringChoice.Equal(that1.MirroringChoice) {
		return false
	}
	if that1.ClusterRetractChoice == nil {
		if this.ClusterRetractChoice != nil {
			return false
		}
	} else if this.ClusterRetractChoice == nil {
		return false
	} else if !this.ClusterRetractChoice.Equal(that1.ClusterRetractChoice) {
		return false
	}
	return true
}
func (this *RouteSimpleAdvancedOptions_CommonHashPolicy) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RouteSimpleAdvancedOptions_CommonHashPolicy)
	if !ok {
		that2, ok := that.(RouteSimpleAdvancedOptions_CommonHashPolicy)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.CommonHashPolicy.Equal(that1.CommonHashPolicy) {
		return false
	}
	return true
}
func (this *RouteSimpleAdvancedOptions_SpecificHashPolicy) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RouteSimpleAdvancedOptions_SpecificHashPolicy)
	if !ok {
		that2, ok := that.(RouteSimpleAdvancedOptions_SpecificHashPolicy)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.SpecificHashPolicy.Equal(that1.SpecificHashPolicy) {
		return false
	}
	return true
}
func (this *RouteSimpleAdvancedOptions_DisablePrefixRewrite) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RouteSimpleAdvancedOptions_DisablePrefixRewrite)
	if !ok {
		that2, ok := that.(RouteSimpleAdvancedOptions_DisablePrefixRewrite)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DisablePrefixRewrite.Equal(that1.DisablePrefixRewrite) {
		return false
	}
	return true
}
func (this *RouteSimpleAdvancedOptions_PrefixRewrite) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RouteSimpleAdvancedOptions_PrefixRewrite)
	if !ok {
		that2, ok := that.(RouteSimpleAdvancedOptions_PrefixRewrite)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.PrefixRewrite != that1.PrefixRewrite {
		return false
	}
	return true
}
func (this *RouteSimpleAdvancedOptions_DisableWaf) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RouteSimpleAdvancedOptions_DisableWaf)
	if !ok {
		that2, ok := that.(RouteSimpleAdvancedOptions_DisableWaf)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DisableWaf.Equal(that1.DisableWaf) {
		return false
	}
	return true
}
func (this *RouteSimpleAdvancedOptions_Waf) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RouteSimpleAdvancedOptions_Waf)
	if !ok {
		that2, ok := that.(RouteSimpleAdvancedOptions_Waf)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Waf.Equal(that1.Waf) {
		return false
	}
	return true
}
func (this *RouteSimpleAdvancedOptions_WafRule) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RouteSimpleAdvancedOptions_WafRule)
	if !ok {
		that2, ok := that.(RouteSimpleAdvancedOptions_WafRule)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.WafRule.Equal(that1.WafRule) {
		return false
	}
	return true
}
func (this *RouteSimpleAdvancedOptions_DisableSpdy) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RouteSimpleAdvancedOptions_DisableSpdy)
	if !ok {
		that2, ok := that.(RouteSimpleAdvancedOptions_DisableSpdy)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DisableSpdy.Equal(that1.DisableSpdy) {
		return false
	}
	return true
}
func (this *RouteSimpleAdvancedOptions_EnableSpdy) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RouteSimpleAdvancedOptions_EnableSpdy)
	if !ok {
		that2, ok := that.(RouteSimpleAdvancedOptions_EnableSpdy)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.EnableSpdy.Equal(that1.EnableSpdy) {
		return false
	}
	return true
}
func (this *RouteSimpleAdvancedOptions_DisableWebSocketConfig) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RouteSimpleAdvancedOptions_DisableWebSocketConfig)
	if !ok {
		that2, ok := that.(RouteSimpleAdvancedOptions_DisableWebSocketConfig)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DisableWebSocketConfig.Equal(that1.DisableWebSocketConfig) {
		return false
	}
	return true
}
func (this *RouteSimpleAdvancedOptions_WebSocketConfig) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RouteSimpleAdvancedOptions_WebSocketConfig)
	if !ok {
		that2, ok := that.(RouteSimpleAdvancedOptions_WebSocketConfig)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.WebSocketConfig.Equal(that1.WebSocketConfig) {
		return false
	}
	return true
}
func (this *RouteSimpleAdvancedOptions_DefaultRetryPolicy) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RouteSimpleAdvancedOptions_DefaultRetryPolicy)
	if !ok {
		that2, ok := that.(RouteSimpleAdvancedOptions_DefaultRetryPolicy)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DefaultRetryPolicy.Equal(that1.DefaultRetryPolicy) {
		return false
	}
	return true
}
func (this *RouteSimpleAdvancedOptions_RetryPolicy) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RouteSimpleAdvancedOptions_RetryPolicy)
	if !ok {
		that2, ok := that.(RouteSimpleAdvancedOptions_RetryPolicy)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.RetryPolicy.Equal(that1.RetryPolicy) {
		return false
	}
	return true
}
func (this *RouteSimpleAdvancedOptions_CommonBuffering) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RouteSimpleAdvancedOptions_CommonBuffering)
	if !ok {
		that2, ok := that.(RouteSimpleAdvancedOptions_CommonBuffering)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.CommonBuffering.Equal(that1.CommonBuffering) {
		return false
	}
	return true
}
func (this *RouteSimpleAdvancedOptions_BufferPolicy) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RouteSimpleAdvancedOptions_BufferPolicy)
	if !ok {
		that2, ok := that.(RouteSimpleAdvancedOptions_BufferPolicy)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.BufferPolicy.Equal(that1.BufferPolicy) {
		return false
	}
	return true
}
func (this *RouteSimpleAdvancedOptions_DisableMirroring) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RouteSimpleAdvancedOptions_DisableMirroring)
	if !ok {
		that2, ok := that.(RouteSimpleAdvancedOptions_DisableMirroring)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DisableMirroring.Equal(that1.DisableMirroring) {
		return false
	}
	return true
}
func (this *RouteSimpleAdvancedOptions_MirrorPolicy) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RouteSimpleAdvancedOptions_MirrorPolicy)
	if !ok {
		that2, ok := that.(RouteSimpleAdvancedOptions_MirrorPolicy)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.MirrorPolicy.Equal(that1.MirrorPolicy) {
		return false
	}
	return true
}
func (this *RouteSimpleAdvancedOptions_RetractCluster) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RouteSimpleAdvancedOptions_RetractCluster)
	if !ok {
		that2, ok := that.(RouteSimpleAdvancedOptions_RetractCluster)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.RetractCluster.Equal(that1.RetractCluster) {
		return false
	}
	return true
}
func (this *RouteSimpleAdvancedOptions_DoNotRetractCluster) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RouteSimpleAdvancedOptions_DoNotRetractCluster)
	if !ok {
		that2, ok := that.(RouteSimpleAdvancedOptions_DoNotRetractCluster)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DoNotRetractCluster.Equal(that1.DoNotRetractCluster) {
		return false
	}
	return true
}
func (this *RouteTypeSimpleWithDefaultOriginPool) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RouteTypeSimpleWithDefaultOriginPool)
	if !ok {
		that2, ok := that.(RouteTypeSimpleWithDefaultOriginPool)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.HttpMethod != that1.HttpMethod {
		return false
	}
	if !this.Path.Equal(that1.Path) {
		return false
	}
	if that1.HostRewriteParams == nil {
		if this.HostRewriteParams != nil {
			return false
		}
	} else if this.HostRewriteParams == nil {
		return false
	} else if !this.HostRewriteParams.Equal(that1.HostRewriteParams) {
		return false
	}
	return true
}
func (this *RouteTypeSimpleWithDefaultOriginPool_AutoHostRewrite) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RouteTypeSimpleWithDefaultOriginPool_AutoHostRewrite)
	if !ok {
		that2, ok := that.(RouteTypeSimpleWithDefaultOriginPool_AutoHostRewrite)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AutoHostRewrite.Equal(that1.AutoHostRewrite) {
		return false
	}
	return true
}
func (this *RouteTypeSimpleWithDefaultOriginPool_HostRewrite) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RouteTypeSimpleWithDefaultOriginPool_HostRewrite)
	if !ok {
		that2, ok := that.(RouteTypeSimpleWithDefaultOriginPool_HostRewrite)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.HostRewrite != that1.HostRewrite {
		return false
	}
	return true
}
func (this *RouteTypeSimpleWithDefaultOriginPool_DisableHostRewrite) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RouteTypeSimpleWithDefaultOriginPool_DisableHostRewrite)
	if !ok {
		that2, ok := that.(RouteTypeSimpleWithDefaultOriginPool_DisableHostRewrite)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DisableHostRewrite.Equal(that1.DisableHostRewrite) {
		return false
	}
	return true
}
func (this *RouteTypeSimple) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RouteTypeSimple)
	if !ok {
		that2, ok := that.(RouteTypeSimple)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Path.Equal(that1.Path) {
		return false
	}
	if this.HttpMethod != that1.HttpMethod {
		return false
	}
	if len(this.OriginPools) != len(that1.OriginPools) {
		return false
	}
	for i := range this.OriginPools {
		if !this.OriginPools[i].Equal(that1.OriginPools[i]) {
			return false
		}
	}
	if that1.HostRewriteParams == nil {
		if this.HostRewriteParams != nil {
			return false
		}
	} else if this.HostRewriteParams == nil {
		return false
	} else if !this.HostRewriteParams.Equal(that1.HostRewriteParams) {
		return false
	}
	if !this.AdvancedOptions.Equal(that1.AdvancedOptions) {
		return false
	}
	return true
}
func (this *RouteTypeSimple_AutoHostRewrite) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RouteTypeSimple_AutoHostRewrite)
	if !ok {
		that2, ok := that.(RouteTypeSimple_AutoHostRewrite)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AutoHostRewrite.Equal(that1.AutoHostRewrite) {
		return false
	}
	return true
}
func (this *RouteTypeSimple_HostRewrite) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RouteTypeSimple_HostRewrite)
	if !ok {
		that2, ok := that.(RouteTypeSimple_HostRewrite)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.HostRewrite != that1.HostRewrite {
		return false
	}
	return true
}
func (this *RouteTypeSimple_DisableHostRewrite) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RouteTypeSimple_DisableHostRewrite)
	if !ok {
		that2, ok := that.(RouteTypeSimple_DisableHostRewrite)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DisableHostRewrite.Equal(that1.DisableHostRewrite) {
		return false
	}
	return true
}
func (this *RouteTypeRedirect) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RouteTypeRedirect)
	if !ok {
		that2, ok := that.(RouteTypeRedirect)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Path.Equal(that1.Path) {
		return false
	}
	if this.HttpMethod != that1.HttpMethod {
		return false
	}
	if !this.RouteRedirect.Equal(that1.RouteRedirect) {
		return false
	}
	return true
}
func (this *RouteTypeDirectResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RouteTypeDirectResponse)
	if !ok {
		that2, ok := that.(RouteTypeDirectResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Path.Equal(that1.Path) {
		return false
	}
	if this.HttpMethod != that1.HttpMethod {
		return false
	}
	if !this.RouteDirectResponse.Equal(that1.RouteDirectResponse) {
		return false
	}
	return true
}
func (this *RouteTypeCustomRoute) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RouteTypeCustomRoute)
	if !ok {
		that2, ok := that.(RouteTypeCustomRoute)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.RouteRef.Equal(that1.RouteRef) {
		return false
	}
	return true
}
func (this *RouteType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RouteType)
	if !ok {
		that2, ok := that.(RouteType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.Choice == nil {
		if this.Choice != nil {
			return false
		}
	} else if this.Choice == nil {
		return false
	} else if !this.Choice.Equal(that1.Choice) {
		return false
	}
	return true
}
func (this *RouteType_SimpleRoute) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RouteType_SimpleRoute)
	if !ok {
		that2, ok := that.(RouteType_SimpleRoute)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.SimpleRoute.Equal(that1.SimpleRoute) {
		return false
	}
	return true
}
func (this *RouteType_RedirectRoute) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RouteType_RedirectRoute)
	if !ok {
		that2, ok := that.(RouteType_RedirectRoute)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.RedirectRoute.Equal(that1.RedirectRoute) {
		return false
	}
	return true
}
func (this *RouteType_DirectResponseRoute) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RouteType_DirectResponseRoute)
	if !ok {
		that2, ok := that.(RouteType_DirectResponseRoute)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DirectResponseRoute.Equal(that1.DirectResponseRoute) {
		return false
	}
	return true
}
func (this *RouteType_CustomRouteObject) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RouteType_CustomRouteObject)
	if !ok {
		that2, ok := that.(RouteType_CustomRouteObject)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.CustomRouteObject.Equal(that1.CustomRouteObject) {
		return false
	}
	return true
}
func (this *AdvancedOptionsType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AdvancedOptionsType)
	if !ok {
		that2, ok := that.(AdvancedOptionsType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.RequestHeadersToAdd) != len(that1.RequestHeadersToAdd) {
		return false
	}
	for i := range this.RequestHeadersToAdd {
		if !this.RequestHeadersToAdd[i].Equal(that1.RequestHeadersToAdd[i]) {
			return false
		}
	}
	if len(this.RequestHeadersToRemove) != len(that1.RequestHeadersToRemove) {
		return false
	}
	for i := range this.RequestHeadersToRemove {
		if this.RequestHeadersToRemove[i] != that1.RequestHeadersToRemove[i] {
			return false
		}
	}
	if len(this.ResponseHeadersToAdd) != len(that1.ResponseHeadersToAdd) {
		return false
	}
	for i := range this.ResponseHeadersToAdd {
		if !this.ResponseHeadersToAdd[i].Equal(that1.ResponseHeadersToAdd[i]) {
			return false
		}
	}
	if len(this.ResponseHeadersToRemove) != len(that1.ResponseHeadersToRemove) {
		return false
	}
	for i := range this.ResponseHeadersToRemove {
		if this.ResponseHeadersToRemove[i] != that1.ResponseHeadersToRemove[i] {
			return false
		}
	}
	if this.MaxRequestHeaderSize != that1.MaxRequestHeaderSize {
		return false
	}
	if !this.BufferPolicy.Equal(that1.BufferPolicy) {
		return false
	}
	if !this.CompressionParams.Equal(that1.CompressionParams) {
		return false
	}
	if len(this.CustomErrors) != len(that1.CustomErrors) {
		return false
	}
	for i := range this.CustomErrors {
		if this.CustomErrors[i] != that1.CustomErrors[i] {
			return false
		}
	}
	if !this.JavascriptInfo.Equal(that1.JavascriptInfo) {
		return false
	}
	if len(this.Jwt) != len(that1.Jwt) {
		return false
	}
	for i := range this.Jwt {
		if !this.Jwt[i].Equal(that1.Jwt[i]) {
			return false
		}
	}
	if this.IdleTimeout != that1.IdleTimeout {
		return false
	}
	if this.DisableDefaultErrorPages != that1.DisableDefaultErrorPages {
		return false
	}
	return true
}
func (this *PolicyBasedChallenge) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PolicyBasedChallenge)
	if !ok {
		that2, ok := that.(PolicyBasedChallenge)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.JsChallengeParametersChoice == nil {
		if this.JsChallengeParametersChoice != nil {
			return false
		}
	} else if this.JsChallengeParametersChoice == nil {
		return false
	} else if !this.JsChallengeParametersChoice.Equal(that1.JsChallengeParametersChoice) {
		return false
	}
	if that1.CaptchaChallengeParametersChoice == nil {
		if this.CaptchaChallengeParametersChoice != nil {
			return false
		}
	} else if this.CaptchaChallengeParametersChoice == nil {
		return false
	} else if !this.CaptchaChallengeParametersChoice.Equal(that1.CaptchaChallengeParametersChoice) {
		return false
	}
	if that1.TemporaryBlockingParametersChoice == nil {
		if this.TemporaryBlockingParametersChoice != nil {
			return false
		}
	} else if this.TemporaryBlockingParametersChoice == nil {
		return false
	} else if !this.TemporaryBlockingParametersChoice.Equal(that1.TemporaryBlockingParametersChoice) {
		return false
	}
	if that1.MaliciousUserMitigationChoice == nil {
		if this.MaliciousUserMitigationChoice != nil {
			return false
		}
	} else if this.MaliciousUserMitigationChoice == nil {
		return false
	} else if !this.MaliciousUserMitigationChoice.Equal(that1.MaliciousUserMitigationChoice) {
		return false
	}
	if that1.ChallengeChoice == nil {
		if this.ChallengeChoice != nil {
			return false
		}
	} else if this.ChallengeChoice == nil {
		return false
	} else if !this.ChallengeChoice.Equal(that1.ChallengeChoice) {
		return false
	}
	if !this.RuleList.Equal(that1.RuleList) {
		return false
	}
	return true
}
func (this *PolicyBasedChallenge_DefaultJsChallengeParameters) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PolicyBasedChallenge_DefaultJsChallengeParameters)
	if !ok {
		that2, ok := that.(PolicyBasedChallenge_DefaultJsChallengeParameters)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DefaultJsChallengeParameters.Equal(that1.DefaultJsChallengeParameters) {
		return false
	}
	return true
}
func (this *PolicyBasedChallenge_JsChallengeParameters) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PolicyBasedChallenge_JsChallengeParameters)
	if !ok {
		that2, ok := that.(PolicyBasedChallenge_JsChallengeParameters)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.JsChallengeParameters.Equal(that1.JsChallengeParameters) {
		return false
	}
	return true
}
func (this *PolicyBasedChallenge_DefaultCaptchaChallengeParameters) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PolicyBasedChallenge_DefaultCaptchaChallengeParameters)
	if !ok {
		that2, ok := that.(PolicyBasedChallenge_DefaultCaptchaChallengeParameters)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DefaultCaptchaChallengeParameters.Equal(that1.DefaultCaptchaChallengeParameters) {
		return false
	}
	return true
}
func (this *PolicyBasedChallenge_CaptchaChallengeParameters) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PolicyBasedChallenge_CaptchaChallengeParameters)
	if !ok {
		that2, ok := that.(PolicyBasedChallenge_CaptchaChallengeParameters)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.CaptchaChallengeParameters.Equal(that1.CaptchaChallengeParameters) {
		return false
	}
	return true
}
func (this *PolicyBasedChallenge_DefaultTemporaryBlockingParameters) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PolicyBasedChallenge_DefaultTemporaryBlockingParameters)
	if !ok {
		that2, ok := that.(PolicyBasedChallenge_DefaultTemporaryBlockingParameters)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DefaultTemporaryBlockingParameters.Equal(that1.DefaultTemporaryBlockingParameters) {
		return false
	}
	return true
}
func (this *PolicyBasedChallenge_TemporaryUserBlocking) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PolicyBasedChallenge_TemporaryUserBlocking)
	if !ok {
		that2, ok := that.(PolicyBasedChallenge_TemporaryUserBlocking)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.TemporaryUserBlocking.Equal(that1.TemporaryUserBlocking) {
		return false
	}
	return true
}
func (this *PolicyBasedChallenge_DefaultMitigationSettings) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PolicyBasedChallenge_DefaultMitigationSettings)
	if !ok {
		that2, ok := that.(PolicyBasedChallenge_DefaultMitigationSettings)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DefaultMitigationSettings.Equal(that1.DefaultMitigationSettings) {
		return false
	}
	return true
}
func (this *PolicyBasedChallenge_MaliciousUserMitigation) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PolicyBasedChallenge_MaliciousUserMitigation)
	if !ok {
		that2, ok := that.(PolicyBasedChallenge_MaliciousUserMitigation)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.MaliciousUserMitigation.Equal(that1.MaliciousUserMitigation) {
		return false
	}
	return true
}
func (this *PolicyBasedChallenge_NoChallenge) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PolicyBasedChallenge_NoChallenge)
	if !ok {
		that2, ok := that.(PolicyBasedChallenge_NoChallenge)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NoChallenge.Equal(that1.NoChallenge) {
		return false
	}
	return true
}
func (this *PolicyBasedChallenge_AlwaysEnableJsChallenge) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PolicyBasedChallenge_AlwaysEnableJsChallenge)
	if !ok {
		that2, ok := that.(PolicyBasedChallenge_AlwaysEnableJsChallenge)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AlwaysEnableJsChallenge.Equal(that1.AlwaysEnableJsChallenge) {
		return false
	}
	return true
}
func (this *PolicyBasedChallenge_AlwaysEnableCaptchaChallenge) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PolicyBasedChallenge_AlwaysEnableCaptchaChallenge)
	if !ok {
		that2, ok := that.(PolicyBasedChallenge_AlwaysEnableCaptchaChallenge)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AlwaysEnableCaptchaChallenge.Equal(that1.AlwaysEnableCaptchaChallenge) {
		return false
	}
	return true
}
func (this *ChallengeRule) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ChallengeRule)
	if !ok {
		that2, ok := that.(ChallengeRule)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Metadata.Equal(that1.Metadata) {
		return false
	}
	if !this.Spec.Equal(that1.Spec) {
		return false
	}
	return true
}
func (this *ChallengeRuleList) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ChallengeRuleList)
	if !ok {
		that2, ok := that.(ChallengeRuleList)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Rules) != len(that1.Rules) {
		return false
	}
	for i := range this.Rules {
		if !this.Rules[i].Equal(that1.Rules[i]) {
			return false
		}
	}
	return true
}
func (this *SimpleClientSrcRule) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SimpleClientSrcRule)
	if !ok {
		that2, ok := that.(SimpleClientSrcRule)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.ClientSourceChoice == nil {
		if this.ClientSourceChoice != nil {
			return false
		}
	} else if this.ClientSourceChoice == nil {
		return false
	} else if !this.ClientSourceChoice.Equal(that1.ClientSourceChoice) {
		return false
	}
	if !this.ExpirationTimestamp.Equal(that1.ExpirationTimestamp) {
		return false
	}
	if !this.Metadata.Equal(that1.Metadata) {
		return false
	}
	return true
}
func (this *SimpleClientSrcRule_IpPrefix) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SimpleClientSrcRule_IpPrefix)
	if !ok {
		that2, ok := that.(SimpleClientSrcRule_IpPrefix)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.IpPrefix != that1.IpPrefix {
		return false
	}
	return true
}
func (this *SimpleClientSrcRule_AsNumber) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SimpleClientSrcRule_AsNumber)
	if !ok {
		that2, ok := that.(SimpleClientSrcRule_AsNumber)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.AsNumber != that1.AsNumber {
		return false
	}
	return true
}
func (this *CustomIpAllowedList) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CustomIpAllowedList)
	if !ok {
		that2, ok := that.(CustomIpAllowedList)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.RateLimiterAllowedPrefixes) != len(that1.RateLimiterAllowedPrefixes) {
		return false
	}
	for i := range this.RateLimiterAllowedPrefixes {
		if !this.RateLimiterAllowedPrefixes[i].Equal(that1.RateLimiterAllowedPrefixes[i]) {
			return false
		}
	}
	return true
}
func (this *RateLimitConfigType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RateLimitConfigType)
	if !ok {
		that2, ok := that.(RateLimitConfigType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.RateLimiter.Equal(that1.RateLimiter) {
		return false
	}
	if that1.IpAllowedListChoice == nil {
		if this.IpAllowedListChoice != nil {
			return false
		}
	} else if this.IpAllowedListChoice == nil {
		return false
	} else if !this.IpAllowedListChoice.Equal(that1.IpAllowedListChoice) {
		return false
	}
	if that1.PolicyChoice == nil {
		if this.PolicyChoice != nil {
			return false
		}
	} else if this.PolicyChoice == nil {
		return false
	} else if !this.PolicyChoice.Equal(that1.PolicyChoice) {
		return false
	}
	return true
}
func (this *RateLimitConfigType_NoIpAllowedList) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RateLimitConfigType_NoIpAllowedList)
	if !ok {
		that2, ok := that.(RateLimitConfigType_NoIpAllowedList)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NoIpAllowedList.Equal(that1.NoIpAllowedList) {
		return false
	}
	return true
}
func (this *RateLimitConfigType_IpAllowedList) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RateLimitConfigType_IpAllowedList)
	if !ok {
		that2, ok := that.(RateLimitConfigType_IpAllowedList)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.IpAllowedList.Equal(that1.IpAllowedList) {
		return false
	}
	return true
}
func (this *RateLimitConfigType_CustomIpAllowedList) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RateLimitConfigType_CustomIpAllowedList)
	if !ok {
		that2, ok := that.(RateLimitConfigType_CustomIpAllowedList)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.CustomIpAllowedList.Equal(that1.CustomIpAllowedList) {
		return false
	}
	return true
}
func (this *RateLimitConfigType_NoPolicies) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RateLimitConfigType_NoPolicies)
	if !ok {
		that2, ok := that.(RateLimitConfigType_NoPolicies)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NoPolicies.Equal(that1.NoPolicies) {
		return false
	}
	return true
}
func (this *RateLimitConfigType_Policies) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RateLimitConfigType_Policies)
	if !ok {
		that2, ok := that.(RateLimitConfigType_Policies)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Policies.Equal(that1.Policies) {
		return false
	}
	return true
}
func (this *ServicePolicyList) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ServicePolicyList)
	if !ok {
		that2, ok := that.(ServicePolicyList)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Policies) != len(that1.Policies) {
		return false
	}
	for i := range this.Policies {
		if !this.Policies[i].Equal(that1.Policies[i]) {
			return false
		}
	}
	return true
}
func (this *GlobalSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType)
	if !ok {
		that2, ok := that.(GlobalSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Domains) != len(that1.Domains) {
		return false
	}
	for i := range this.Domains {
		if this.Domains[i] != that1.Domains[i] {
			return false
		}
	}
	if that1.LoadbalancerType == nil {
		if this.LoadbalancerType != nil {
			return false
		}
	} else if this.LoadbalancerType == nil {
		return false
	} else if !this.LoadbalancerType.Equal(that1.LoadbalancerType) {
		return false
	}
	if that1.AdvertiseChoice == nil {
		if this.AdvertiseChoice != nil {
			return false
		}
	} else if this.AdvertiseChoice == nil {
		return false
	} else if !this.AdvertiseChoice.Equal(that1.AdvertiseChoice) {
		return false
	}
	if len(this.DefaultRoutePools) != len(that1.DefaultRoutePools) {
		return false
	}
	for i := range this.DefaultRoutePools {
		if !this.DefaultRoutePools[i].Equal(that1.DefaultRoutePools[i]) {
			return false
		}
	}
	if that1.HostRewriteParams == nil {
		if this.HostRewriteParams != nil {
			return false
		}
	} else if this.HostRewriteParams == nil {
		return false
	} else if !this.HostRewriteParams.Equal(that1.HostRewriteParams) {
		return false
	}
	if len(this.Routes) != len(that1.Routes) {
		return false
	}
	for i := range this.Routes {
		if !this.Routes[i].Equal(that1.Routes[i]) {
			return false
		}
	}
	if !this.CorsPolicy.Equal(that1.CorsPolicy) {
		return false
	}
	if that1.WafChoice == nil {
		if this.WafChoice != nil {
			return false
		}
	} else if this.WafChoice == nil {
		return false
	} else if !this.WafChoice.Equal(that1.WafChoice) {
		return false
	}
	if this.AddLocation != that1.AddLocation {
		return false
	}
	if that1.ChallengeType == nil {
		if this.ChallengeType != nil {
			return false
		}
	} else if this.ChallengeType == nil {
		return false
	} else if !this.ChallengeType.Equal(that1.ChallengeType) {
		return false
	}
	if !this.MoreOption.Equal(that1.MoreOption) {
		return false
	}
	if !this.UserIdentification.Equal(that1.UserIdentification) {
		return false
	}
	if that1.RateLimitChoice == nil {
		if this.RateLimitChoice != nil {
			return false
		}
	} else if this.RateLimitChoice == nil {
		return false
	} else if !this.RateLimitChoice.Equal(that1.RateLimitChoice) {
		return false
	}
	if !this.MaliciousUserMitigation.Equal(that1.MaliciousUserMitigation) {
		return false
	}
	if len(this.WafExclusionRules) != len(that1.WafExclusionRules) {
		return false
	}
	for i := range this.WafExclusionRules {
		if !this.WafExclusionRules[i].Equal(that1.WafExclusionRules[i]) {
			return false
		}
	}
	if len(this.BlockedClients) != len(that1.BlockedClients) {
		return false
	}
	for i := range this.BlockedClients {
		if !this.BlockedClients[i].Equal(that1.BlockedClients[i]) {
			return false
		}
	}
	if len(this.TrustedClients) != len(that1.TrustedClients) {
		return false
	}
	for i := range this.TrustedClients {
		if !this.TrustedClients[i].Equal(that1.TrustedClients[i]) {
			return false
		}
	}
	if that1.ServicePolicyChoice == nil {
		if this.ServicePolicyChoice != nil {
			return false
		}
	} else if this.ServicePolicyChoice == nil {
		return false
	} else if !this.ServicePolicyChoice.Equal(that1.ServicePolicyChoice) {
		return false
	}
	if that1.HashPolicyChoice == nil {
		if this.HashPolicyChoice != nil {
			return false
		}
	} else if this.HashPolicyChoice == nil {
		return false
	} else if !this.HashPolicyChoice.Equal(that1.HashPolicyChoice) {
		return false
	}
	if !this.ViewInternal.Equal(that1.ViewInternal) {
		return false
	}
	if this.HostName != that1.HostName {
		return false
	}
	if len(this.DnsInfo) != len(that1.DnsInfo) {
		return false
	}
	for i := range this.DnsInfo {
		if !this.DnsInfo[i].Equal(that1.DnsInfo[i]) {
			return false
		}
	}
	if this.State != that1.State {
		return false
	}
	if this.AutoCertState != that1.AutoCertState {
		return false
	}
	if !this.AutoCertInfo.Equal(that1.AutoCertInfo) {
		return false
	}
	return true
}
func (this *GlobalSpecType_Http) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_Http)
	if !ok {
		that2, ok := that.(GlobalSpecType_Http)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Http.Equal(that1.Http) {
		return false
	}
	return true
}
func (this *GlobalSpecType_HttpsAutoCert) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_HttpsAutoCert)
	if !ok {
		that2, ok := that.(GlobalSpecType_HttpsAutoCert)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.HttpsAutoCert.Equal(that1.HttpsAutoCert) {
		return false
	}
	return true
}
func (this *GlobalSpecType_Https) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_Https)
	if !ok {
		that2, ok := that.(GlobalSpecType_Https)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Https.Equal(that1.Https) {
		return false
	}
	return true
}
func (this *GlobalSpecType_DoNotAdvertise) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_DoNotAdvertise)
	if !ok {
		that2, ok := that.(GlobalSpecType_DoNotAdvertise)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DoNotAdvertise.Equal(that1.DoNotAdvertise) {
		return false
	}
	return true
}
func (this *GlobalSpecType_AdvertiseOnPublicDefaultVip) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_AdvertiseOnPublicDefaultVip)
	if !ok {
		that2, ok := that.(GlobalSpecType_AdvertiseOnPublicDefaultVip)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AdvertiseOnPublicDefaultVip.Equal(that1.AdvertiseOnPublicDefaultVip) {
		return false
	}
	return true
}
func (this *GlobalSpecType_AdvertiseOnPublic) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_AdvertiseOnPublic)
	if !ok {
		that2, ok := that.(GlobalSpecType_AdvertiseOnPublic)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AdvertiseOnPublic.Equal(that1.AdvertiseOnPublic) {
		return false
	}
	return true
}
func (this *GlobalSpecType_AdvertiseCustom) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_AdvertiseCustom)
	if !ok {
		that2, ok := that.(GlobalSpecType_AdvertiseCustom)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AdvertiseCustom.Equal(that1.AdvertiseCustom) {
		return false
	}
	return true
}
func (this *GlobalSpecType_AutoHostRewrite) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_AutoHostRewrite)
	if !ok {
		that2, ok := that.(GlobalSpecType_AutoHostRewrite)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AutoHostRewrite.Equal(that1.AutoHostRewrite) {
		return false
	}
	return true
}
func (this *GlobalSpecType_HostRewrite) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_HostRewrite)
	if !ok {
		that2, ok := that.(GlobalSpecType_HostRewrite)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.HostRewrite != that1.HostRewrite {
		return false
	}
	return true
}
func (this *GlobalSpecType_DisableHostRewrite) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_DisableHostRewrite)
	if !ok {
		that2, ok := that.(GlobalSpecType_DisableHostRewrite)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DisableHostRewrite.Equal(that1.DisableHostRewrite) {
		return false
	}
	return true
}
func (this *GlobalSpecType_DisableWaf) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_DisableWaf)
	if !ok {
		that2, ok := that.(GlobalSpecType_DisableWaf)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DisableWaf.Equal(that1.DisableWaf) {
		return false
	}
	return true
}
func (this *GlobalSpecType_Waf) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_Waf)
	if !ok {
		that2, ok := that.(GlobalSpecType_Waf)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Waf.Equal(that1.Waf) {
		return false
	}
	return true
}
func (this *GlobalSpecType_WafRule) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_WafRule)
	if !ok {
		that2, ok := that.(GlobalSpecType_WafRule)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.WafRule.Equal(that1.WafRule) {
		return false
	}
	return true
}
func (this *GlobalSpecType_NoChallenge) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_NoChallenge)
	if !ok {
		that2, ok := that.(GlobalSpecType_NoChallenge)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NoChallenge.Equal(that1.NoChallenge) {
		return false
	}
	return true
}
func (this *GlobalSpecType_JsChallenge) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_JsChallenge)
	if !ok {
		that2, ok := that.(GlobalSpecType_JsChallenge)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.JsChallenge.Equal(that1.JsChallenge) {
		return false
	}
	return true
}
func (this *GlobalSpecType_CaptchaChallenge) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_CaptchaChallenge)
	if !ok {
		that2, ok := that.(GlobalSpecType_CaptchaChallenge)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.CaptchaChallenge.Equal(that1.CaptchaChallenge) {
		return false
	}
	return true
}
func (this *GlobalSpecType_PolicyBasedChallenge) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_PolicyBasedChallenge)
	if !ok {
		that2, ok := that.(GlobalSpecType_PolicyBasedChallenge)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.PolicyBasedChallenge.Equal(that1.PolicyBasedChallenge) {
		return false
	}
	return true
}
func (this *GlobalSpecType_DisableRateLimit) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_DisableRateLimit)
	if !ok {
		that2, ok := that.(GlobalSpecType_DisableRateLimit)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DisableRateLimit.Equal(that1.DisableRateLimit) {
		return false
	}
	return true
}
func (this *GlobalSpecType_RateLimit) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_RateLimit)
	if !ok {
		that2, ok := that.(GlobalSpecType_RateLimit)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.RateLimit.Equal(that1.RateLimit) {
		return false
	}
	return true
}
func (this *GlobalSpecType_ServicePoliciesFromNamespace) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_ServicePoliciesFromNamespace)
	if !ok {
		that2, ok := that.(GlobalSpecType_ServicePoliciesFromNamespace)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ServicePoliciesFromNamespace.Equal(that1.ServicePoliciesFromNamespace) {
		return false
	}
	return true
}
func (this *GlobalSpecType_NoServicePolicies) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_NoServicePolicies)
	if !ok {
		that2, ok := that.(GlobalSpecType_NoServicePolicies)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NoServicePolicies.Equal(that1.NoServicePolicies) {
		return false
	}
	return true
}
func (this *GlobalSpecType_ActiveServicePolicies) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_ActiveServicePolicies)
	if !ok {
		that2, ok := that.(GlobalSpecType_ActiveServicePolicies)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ActiveServicePolicies.Equal(that1.ActiveServicePolicies) {
		return false
	}
	return true
}
func (this *GlobalSpecType_RoundRobin) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_RoundRobin)
	if !ok {
		that2, ok := that.(GlobalSpecType_RoundRobin)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.RoundRobin.Equal(that1.RoundRobin) {
		return false
	}
	return true
}
func (this *GlobalSpecType_LeastActive) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_LeastActive)
	if !ok {
		that2, ok := that.(GlobalSpecType_LeastActive)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.LeastActive.Equal(that1.LeastActive) {
		return false
	}
	return true
}
func (this *GlobalSpecType_Random) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_Random)
	if !ok {
		that2, ok := that.(GlobalSpecType_Random)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Random.Equal(that1.Random) {
		return false
	}
	return true
}
func (this *GlobalSpecType_SourceIpStickiness) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_SourceIpStickiness)
	if !ok {
		that2, ok := that.(GlobalSpecType_SourceIpStickiness)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.SourceIpStickiness.Equal(that1.SourceIpStickiness) {
		return false
	}
	return true
}
func (this *GlobalSpecType_CookieStickiness) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_CookieStickiness)
	if !ok {
		that2, ok := that.(GlobalSpecType_CookieStickiness)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.CookieStickiness.Equal(that1.CookieStickiness) {
		return false
	}
	return true
}
func (this *GlobalSpecType_RingHash) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_RingHash)
	if !ok {
		that2, ok := that.(GlobalSpecType_RingHash)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.RingHash.Equal(that1.RingHash) {
		return false
	}
	return true
}
func (this *CreateSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType)
	if !ok {
		that2, ok := that.(CreateSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Domains) != len(that1.Domains) {
		return false
	}
	for i := range this.Domains {
		if this.Domains[i] != that1.Domains[i] {
			return false
		}
	}
	if that1.LoadbalancerType == nil {
		if this.LoadbalancerType != nil {
			return false
		}
	} else if this.LoadbalancerType == nil {
		return false
	} else if !this.LoadbalancerType.Equal(that1.LoadbalancerType) {
		return false
	}
	if that1.AdvertiseChoice == nil {
		if this.AdvertiseChoice != nil {
			return false
		}
	} else if this.AdvertiseChoice == nil {
		return false
	} else if !this.AdvertiseChoice.Equal(that1.AdvertiseChoice) {
		return false
	}
	if len(this.DefaultRoutePools) != len(that1.DefaultRoutePools) {
		return false
	}
	for i := range this.DefaultRoutePools {
		if !this.DefaultRoutePools[i].Equal(that1.DefaultRoutePools[i]) {
			return false
		}
	}
	if len(this.Routes) != len(that1.Routes) {
		return false
	}
	for i := range this.Routes {
		if !this.Routes[i].Equal(that1.Routes[i]) {
			return false
		}
	}
	if !this.CorsPolicy.Equal(that1.CorsPolicy) {
		return false
	}
	if that1.WafChoice == nil {
		if this.WafChoice != nil {
			return false
		}
	} else if this.WafChoice == nil {
		return false
	} else if !this.WafChoice.Equal(that1.WafChoice) {
		return false
	}
	if this.AddLocation != that1.AddLocation {
		return false
	}
	if that1.ChallengeType == nil {
		if this.ChallengeType != nil {
			return false
		}
	} else if this.ChallengeType == nil {
		return false
	} else if !this.ChallengeType.Equal(that1.ChallengeType) {
		return false
	}
	if !this.MoreOption.Equal(that1.MoreOption) {
		return false
	}
	if !this.UserIdentification.Equal(that1.UserIdentification) {
		return false
	}
	if that1.RateLimitChoice == nil {
		if this.RateLimitChoice != nil {
			return false
		}
	} else if this.RateLimitChoice == nil {
		return false
	} else if !this.RateLimitChoice.Equal(that1.RateLimitChoice) {
		return false
	}
	if !this.MaliciousUserMitigation.Equal(that1.MaliciousUserMitigation) {
		return false
	}
	if len(this.WafExclusionRules) != len(that1.WafExclusionRules) {
		return false
	}
	for i := range this.WafExclusionRules {
		if !this.WafExclusionRules[i].Equal(that1.WafExclusionRules[i]) {
			return false
		}
	}
	if len(this.BlockedClients) != len(that1.BlockedClients) {
		return false
	}
	for i := range this.BlockedClients {
		if !this.BlockedClients[i].Equal(that1.BlockedClients[i]) {
			return false
		}
	}
	if len(this.TrustedClients) != len(that1.TrustedClients) {
		return false
	}
	for i := range this.TrustedClients {
		if !this.TrustedClients[i].Equal(that1.TrustedClients[i]) {
			return false
		}
	}
	if that1.ServicePolicyChoice == nil {
		if this.ServicePolicyChoice != nil {
			return false
		}
	} else if this.ServicePolicyChoice == nil {
		return false
	} else if !this.ServicePolicyChoice.Equal(that1.ServicePolicyChoice) {
		return false
	}
	if that1.HashPolicyChoice == nil {
		if this.HashPolicyChoice != nil {
			return false
		}
	} else if this.HashPolicyChoice == nil {
		return false
	} else if !this.HashPolicyChoice.Equal(that1.HashPolicyChoice) {
		return false
	}
	return true
}
func (this *CreateSpecType_Http) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_Http)
	if !ok {
		that2, ok := that.(CreateSpecType_Http)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Http.Equal(that1.Http) {
		return false
	}
	return true
}
func (this *CreateSpecType_HttpsAutoCert) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_HttpsAutoCert)
	if !ok {
		that2, ok := that.(CreateSpecType_HttpsAutoCert)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.HttpsAutoCert.Equal(that1.HttpsAutoCert) {
		return false
	}
	return true
}
func (this *CreateSpecType_Https) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_Https)
	if !ok {
		that2, ok := that.(CreateSpecType_Https)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Https.Equal(that1.Https) {
		return false
	}
	return true
}
func (this *CreateSpecType_DoNotAdvertise) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_DoNotAdvertise)
	if !ok {
		that2, ok := that.(CreateSpecType_DoNotAdvertise)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DoNotAdvertise.Equal(that1.DoNotAdvertise) {
		return false
	}
	return true
}
func (this *CreateSpecType_AdvertiseOnPublicDefaultVip) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_AdvertiseOnPublicDefaultVip)
	if !ok {
		that2, ok := that.(CreateSpecType_AdvertiseOnPublicDefaultVip)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AdvertiseOnPublicDefaultVip.Equal(that1.AdvertiseOnPublicDefaultVip) {
		return false
	}
	return true
}
func (this *CreateSpecType_AdvertiseOnPublic) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_AdvertiseOnPublic)
	if !ok {
		that2, ok := that.(CreateSpecType_AdvertiseOnPublic)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AdvertiseOnPublic.Equal(that1.AdvertiseOnPublic) {
		return false
	}
	return true
}
func (this *CreateSpecType_AdvertiseCustom) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_AdvertiseCustom)
	if !ok {
		that2, ok := that.(CreateSpecType_AdvertiseCustom)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AdvertiseCustom.Equal(that1.AdvertiseCustom) {
		return false
	}
	return true
}
func (this *CreateSpecType_DisableWaf) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_DisableWaf)
	if !ok {
		that2, ok := that.(CreateSpecType_DisableWaf)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DisableWaf.Equal(that1.DisableWaf) {
		return false
	}
	return true
}
func (this *CreateSpecType_Waf) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_Waf)
	if !ok {
		that2, ok := that.(CreateSpecType_Waf)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Waf.Equal(that1.Waf) {
		return false
	}
	return true
}
func (this *CreateSpecType_WafRule) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_WafRule)
	if !ok {
		that2, ok := that.(CreateSpecType_WafRule)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.WafRule.Equal(that1.WafRule) {
		return false
	}
	return true
}
func (this *CreateSpecType_NoChallenge) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_NoChallenge)
	if !ok {
		that2, ok := that.(CreateSpecType_NoChallenge)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NoChallenge.Equal(that1.NoChallenge) {
		return false
	}
	return true
}
func (this *CreateSpecType_JsChallenge) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_JsChallenge)
	if !ok {
		that2, ok := that.(CreateSpecType_JsChallenge)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.JsChallenge.Equal(that1.JsChallenge) {
		return false
	}
	return true
}
func (this *CreateSpecType_CaptchaChallenge) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_CaptchaChallenge)
	if !ok {
		that2, ok := that.(CreateSpecType_CaptchaChallenge)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.CaptchaChallenge.Equal(that1.CaptchaChallenge) {
		return false
	}
	return true
}
func (this *CreateSpecType_PolicyBasedChallenge) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_PolicyBasedChallenge)
	if !ok {
		that2, ok := that.(CreateSpecType_PolicyBasedChallenge)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.PolicyBasedChallenge.Equal(that1.PolicyBasedChallenge) {
		return false
	}
	return true
}
func (this *CreateSpecType_DisableRateLimit) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_DisableRateLimit)
	if !ok {
		that2, ok := that.(CreateSpecType_DisableRateLimit)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DisableRateLimit.Equal(that1.DisableRateLimit) {
		return false
	}
	return true
}
func (this *CreateSpecType_RateLimit) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_RateLimit)
	if !ok {
		that2, ok := that.(CreateSpecType_RateLimit)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.RateLimit.Equal(that1.RateLimit) {
		return false
	}
	return true
}
func (this *CreateSpecType_ServicePoliciesFromNamespace) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_ServicePoliciesFromNamespace)
	if !ok {
		that2, ok := that.(CreateSpecType_ServicePoliciesFromNamespace)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ServicePoliciesFromNamespace.Equal(that1.ServicePoliciesFromNamespace) {
		return false
	}
	return true
}
func (this *CreateSpecType_NoServicePolicies) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_NoServicePolicies)
	if !ok {
		that2, ok := that.(CreateSpecType_NoServicePolicies)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NoServicePolicies.Equal(that1.NoServicePolicies) {
		return false
	}
	return true
}
func (this *CreateSpecType_ActiveServicePolicies) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_ActiveServicePolicies)
	if !ok {
		that2, ok := that.(CreateSpecType_ActiveServicePolicies)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ActiveServicePolicies.Equal(that1.ActiveServicePolicies) {
		return false
	}
	return true
}
func (this *CreateSpecType_RoundRobin) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_RoundRobin)
	if !ok {
		that2, ok := that.(CreateSpecType_RoundRobin)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.RoundRobin.Equal(that1.RoundRobin) {
		return false
	}
	return true
}
func (this *CreateSpecType_LeastActive) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_LeastActive)
	if !ok {
		that2, ok := that.(CreateSpecType_LeastActive)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.LeastActive.Equal(that1.LeastActive) {
		return false
	}
	return true
}
func (this *CreateSpecType_Random) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_Random)
	if !ok {
		that2, ok := that.(CreateSpecType_Random)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Random.Equal(that1.Random) {
		return false
	}
	return true
}
func (this *CreateSpecType_SourceIpStickiness) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_SourceIpStickiness)
	if !ok {
		that2, ok := that.(CreateSpecType_SourceIpStickiness)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.SourceIpStickiness.Equal(that1.SourceIpStickiness) {
		return false
	}
	return true
}
func (this *CreateSpecType_CookieStickiness) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_CookieStickiness)
	if !ok {
		that2, ok := that.(CreateSpecType_CookieStickiness)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.CookieStickiness.Equal(that1.CookieStickiness) {
		return false
	}
	return true
}
func (this *CreateSpecType_RingHash) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_RingHash)
	if !ok {
		that2, ok := that.(CreateSpecType_RingHash)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.RingHash.Equal(that1.RingHash) {
		return false
	}
	return true
}
func (this *ReplaceSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType)
	if !ok {
		that2, ok := that.(ReplaceSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Domains) != len(that1.Domains) {
		return false
	}
	for i := range this.Domains {
		if this.Domains[i] != that1.Domains[i] {
			return false
		}
	}
	if that1.LoadbalancerType == nil {
		if this.LoadbalancerType != nil {
			return false
		}
	} else if this.LoadbalancerType == nil {
		return false
	} else if !this.LoadbalancerType.Equal(that1.LoadbalancerType) {
		return false
	}
	if that1.AdvertiseChoice == nil {
		if this.AdvertiseChoice != nil {
			return false
		}
	} else if this.AdvertiseChoice == nil {
		return false
	} else if !this.AdvertiseChoice.Equal(that1.AdvertiseChoice) {
		return false
	}
	if len(this.DefaultRoutePools) != len(that1.DefaultRoutePools) {
		return false
	}
	for i := range this.DefaultRoutePools {
		if !this.DefaultRoutePools[i].Equal(that1.DefaultRoutePools[i]) {
			return false
		}
	}
	if len(this.Routes) != len(that1.Routes) {
		return false
	}
	for i := range this.Routes {
		if !this.Routes[i].Equal(that1.Routes[i]) {
			return false
		}
	}
	if !this.CorsPolicy.Equal(that1.CorsPolicy) {
		return false
	}
	if that1.WafChoice == nil {
		if this.WafChoice != nil {
			return false
		}
	} else if this.WafChoice == nil {
		return false
	} else if !this.WafChoice.Equal(that1.WafChoice) {
		return false
	}
	if this.AddLocation != that1.AddLocation {
		return false
	}
	if that1.ChallengeType == nil {
		if this.ChallengeType != nil {
			return false
		}
	} else if this.ChallengeType == nil {
		return false
	} else if !this.ChallengeType.Equal(that1.ChallengeType) {
		return false
	}
	if !this.MoreOption.Equal(that1.MoreOption) {
		return false
	}
	if !this.UserIdentification.Equal(that1.UserIdentification) {
		return false
	}
	if that1.RateLimitChoice == nil {
		if this.RateLimitChoice != nil {
			return false
		}
	} else if this.RateLimitChoice == nil {
		return false
	} else if !this.RateLimitChoice.Equal(that1.RateLimitChoice) {
		return false
	}
	if !this.MaliciousUserMitigation.Equal(that1.MaliciousUserMitigation) {
		return false
	}
	if len(this.WafExclusionRules) != len(that1.WafExclusionRules) {
		return false
	}
	for i := range this.WafExclusionRules {
		if !this.WafExclusionRules[i].Equal(that1.WafExclusionRules[i]) {
			return false
		}
	}
	if len(this.BlockedClients) != len(that1.BlockedClients) {
		return false
	}
	for i := range this.BlockedClients {
		if !this.BlockedClients[i].Equal(that1.BlockedClients[i]) {
			return false
		}
	}
	if len(this.TrustedClients) != len(that1.TrustedClients) {
		return false
	}
	for i := range this.TrustedClients {
		if !this.TrustedClients[i].Equal(that1.TrustedClients[i]) {
			return false
		}
	}
	if that1.ServicePolicyChoice == nil {
		if this.ServicePolicyChoice != nil {
			return false
		}
	} else if this.ServicePolicyChoice == nil {
		return false
	} else if !this.ServicePolicyChoice.Equal(that1.ServicePolicyChoice) {
		return false
	}
	if that1.HashPolicyChoice == nil {
		if this.HashPolicyChoice != nil {
			return false
		}
	} else if this.HashPolicyChoice == nil {
		return false
	} else if !this.HashPolicyChoice.Equal(that1.HashPolicyChoice) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_Http) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_Http)
	if !ok {
		that2, ok := that.(ReplaceSpecType_Http)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Http.Equal(that1.Http) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_HttpsAutoCert) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_HttpsAutoCert)
	if !ok {
		that2, ok := that.(ReplaceSpecType_HttpsAutoCert)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.HttpsAutoCert.Equal(that1.HttpsAutoCert) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_Https) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_Https)
	if !ok {
		that2, ok := that.(ReplaceSpecType_Https)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Https.Equal(that1.Https) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_DoNotAdvertise) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_DoNotAdvertise)
	if !ok {
		that2, ok := that.(ReplaceSpecType_DoNotAdvertise)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DoNotAdvertise.Equal(that1.DoNotAdvertise) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_AdvertiseOnPublicDefaultVip) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_AdvertiseOnPublicDefaultVip)
	if !ok {
		that2, ok := that.(ReplaceSpecType_AdvertiseOnPublicDefaultVip)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AdvertiseOnPublicDefaultVip.Equal(that1.AdvertiseOnPublicDefaultVip) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_AdvertiseOnPublic) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_AdvertiseOnPublic)
	if !ok {
		that2, ok := that.(ReplaceSpecType_AdvertiseOnPublic)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AdvertiseOnPublic.Equal(that1.AdvertiseOnPublic) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_AdvertiseCustom) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_AdvertiseCustom)
	if !ok {
		that2, ok := that.(ReplaceSpecType_AdvertiseCustom)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AdvertiseCustom.Equal(that1.AdvertiseCustom) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_DisableWaf) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_DisableWaf)
	if !ok {
		that2, ok := that.(ReplaceSpecType_DisableWaf)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DisableWaf.Equal(that1.DisableWaf) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_Waf) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_Waf)
	if !ok {
		that2, ok := that.(ReplaceSpecType_Waf)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Waf.Equal(that1.Waf) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_WafRule) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_WafRule)
	if !ok {
		that2, ok := that.(ReplaceSpecType_WafRule)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.WafRule.Equal(that1.WafRule) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_NoChallenge) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_NoChallenge)
	if !ok {
		that2, ok := that.(ReplaceSpecType_NoChallenge)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NoChallenge.Equal(that1.NoChallenge) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_JsChallenge) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_JsChallenge)
	if !ok {
		that2, ok := that.(ReplaceSpecType_JsChallenge)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.JsChallenge.Equal(that1.JsChallenge) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_CaptchaChallenge) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_CaptchaChallenge)
	if !ok {
		that2, ok := that.(ReplaceSpecType_CaptchaChallenge)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.CaptchaChallenge.Equal(that1.CaptchaChallenge) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_PolicyBasedChallenge) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_PolicyBasedChallenge)
	if !ok {
		that2, ok := that.(ReplaceSpecType_PolicyBasedChallenge)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.PolicyBasedChallenge.Equal(that1.PolicyBasedChallenge) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_DisableRateLimit) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_DisableRateLimit)
	if !ok {
		that2, ok := that.(ReplaceSpecType_DisableRateLimit)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DisableRateLimit.Equal(that1.DisableRateLimit) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_RateLimit) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_RateLimit)
	if !ok {
		that2, ok := that.(ReplaceSpecType_RateLimit)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.RateLimit.Equal(that1.RateLimit) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_ServicePoliciesFromNamespace) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_ServicePoliciesFromNamespace)
	if !ok {
		that2, ok := that.(ReplaceSpecType_ServicePoliciesFromNamespace)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ServicePoliciesFromNamespace.Equal(that1.ServicePoliciesFromNamespace) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_NoServicePolicies) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_NoServicePolicies)
	if !ok {
		that2, ok := that.(ReplaceSpecType_NoServicePolicies)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NoServicePolicies.Equal(that1.NoServicePolicies) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_ActiveServicePolicies) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_ActiveServicePolicies)
	if !ok {
		that2, ok := that.(ReplaceSpecType_ActiveServicePolicies)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ActiveServicePolicies.Equal(that1.ActiveServicePolicies) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_RoundRobin) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_RoundRobin)
	if !ok {
		that2, ok := that.(ReplaceSpecType_RoundRobin)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.RoundRobin.Equal(that1.RoundRobin) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_LeastActive) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_LeastActive)
	if !ok {
		that2, ok := that.(ReplaceSpecType_LeastActive)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.LeastActive.Equal(that1.LeastActive) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_Random) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_Random)
	if !ok {
		that2, ok := that.(ReplaceSpecType_Random)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Random.Equal(that1.Random) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_SourceIpStickiness) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_SourceIpStickiness)
	if !ok {
		that2, ok := that.(ReplaceSpecType_SourceIpStickiness)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.SourceIpStickiness.Equal(that1.SourceIpStickiness) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_CookieStickiness) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_CookieStickiness)
	if !ok {
		that2, ok := that.(ReplaceSpecType_CookieStickiness)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.CookieStickiness.Equal(that1.CookieStickiness) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_RingHash) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_RingHash)
	if !ok {
		that2, ok := that.(ReplaceSpecType_RingHash)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.RingHash.Equal(that1.RingHash) {
		return false
	}
	return true
}
func (this *GetSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType)
	if !ok {
		that2, ok := that.(GetSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Domains) != len(that1.Domains) {
		return false
	}
	for i := range this.Domains {
		if this.Domains[i] != that1.Domains[i] {
			return false
		}
	}
	if that1.LoadbalancerType == nil {
		if this.LoadbalancerType != nil {
			return false
		}
	} else if this.LoadbalancerType == nil {
		return false
	} else if !this.LoadbalancerType.Equal(that1.LoadbalancerType) {
		return false
	}
	if that1.AdvertiseChoice == nil {
		if this.AdvertiseChoice != nil {
			return false
		}
	} else if this.AdvertiseChoice == nil {
		return false
	} else if !this.AdvertiseChoice.Equal(that1.AdvertiseChoice) {
		return false
	}
	if len(this.DefaultRoutePools) != len(that1.DefaultRoutePools) {
		return false
	}
	for i := range this.DefaultRoutePools {
		if !this.DefaultRoutePools[i].Equal(that1.DefaultRoutePools[i]) {
			return false
		}
	}
	if len(this.Routes) != len(that1.Routes) {
		return false
	}
	for i := range this.Routes {
		if !this.Routes[i].Equal(that1.Routes[i]) {
			return false
		}
	}
	if !this.CorsPolicy.Equal(that1.CorsPolicy) {
		return false
	}
	if that1.WafChoice == nil {
		if this.WafChoice != nil {
			return false
		}
	} else if this.WafChoice == nil {
		return false
	} else if !this.WafChoice.Equal(that1.WafChoice) {
		return false
	}
	if this.AddLocation != that1.AddLocation {
		return false
	}
	if that1.ChallengeType == nil {
		if this.ChallengeType != nil {
			return false
		}
	} else if this.ChallengeType == nil {
		return false
	} else if !this.ChallengeType.Equal(that1.ChallengeType) {
		return false
	}
	if !this.MoreOption.Equal(that1.MoreOption) {
		return false
	}
	if !this.UserIdentification.Equal(that1.UserIdentification) {
		return false
	}
	if that1.RateLimitChoice == nil {
		if this.RateLimitChoice != nil {
			return false
		}
	} else if this.RateLimitChoice == nil {
		return false
	} else if !this.RateLimitChoice.Equal(that1.RateLimitChoice) {
		return false
	}
	if !this.MaliciousUserMitigation.Equal(that1.MaliciousUserMitigation) {
		return false
	}
	if len(this.WafExclusionRules) != len(that1.WafExclusionRules) {
		return false
	}
	for i := range this.WafExclusionRules {
		if !this.WafExclusionRules[i].Equal(that1.WafExclusionRules[i]) {
			return false
		}
	}
	if len(this.BlockedClients) != len(that1.BlockedClients) {
		return false
	}
	for i := range this.BlockedClients {
		if !this.BlockedClients[i].Equal(that1.BlockedClients[i]) {
			return false
		}
	}
	if len(this.TrustedClients) != len(that1.TrustedClients) {
		return false
	}
	for i := range this.TrustedClients {
		if !this.TrustedClients[i].Equal(that1.TrustedClients[i]) {
			return false
		}
	}
	if that1.ServicePolicyChoice == nil {
		if this.ServicePolicyChoice != nil {
			return false
		}
	} else if this.ServicePolicyChoice == nil {
		return false
	} else if !this.ServicePolicyChoice.Equal(that1.ServicePolicyChoice) {
		return false
	}
	if that1.HashPolicyChoice == nil {
		if this.HashPolicyChoice != nil {
			return false
		}
	} else if this.HashPolicyChoice == nil {
		return false
	} else if !this.HashPolicyChoice.Equal(that1.HashPolicyChoice) {
		return false
	}
	if this.HostName != that1.HostName {
		return false
	}
	if len(this.DnsInfo) != len(that1.DnsInfo) {
		return false
	}
	for i := range this.DnsInfo {
		if !this.DnsInfo[i].Equal(that1.DnsInfo[i]) {
			return false
		}
	}
	if this.State != that1.State {
		return false
	}
	if this.AutoCertState != that1.AutoCertState {
		return false
	}
	if !this.AutoCertInfo.Equal(that1.AutoCertInfo) {
		return false
	}
	return true
}
func (this *GetSpecType_Http) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_Http)
	if !ok {
		that2, ok := that.(GetSpecType_Http)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Http.Equal(that1.Http) {
		return false
	}
	return true
}
func (this *GetSpecType_HttpsAutoCert) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_HttpsAutoCert)
	if !ok {
		that2, ok := that.(GetSpecType_HttpsAutoCert)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.HttpsAutoCert.Equal(that1.HttpsAutoCert) {
		return false
	}
	return true
}
func (this *GetSpecType_Https) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_Https)
	if !ok {
		that2, ok := that.(GetSpecType_Https)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Https.Equal(that1.Https) {
		return false
	}
	return true
}
func (this *GetSpecType_DoNotAdvertise) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_DoNotAdvertise)
	if !ok {
		that2, ok := that.(GetSpecType_DoNotAdvertise)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DoNotAdvertise.Equal(that1.DoNotAdvertise) {
		return false
	}
	return true
}
func (this *GetSpecType_AdvertiseOnPublicDefaultVip) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_AdvertiseOnPublicDefaultVip)
	if !ok {
		that2, ok := that.(GetSpecType_AdvertiseOnPublicDefaultVip)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AdvertiseOnPublicDefaultVip.Equal(that1.AdvertiseOnPublicDefaultVip) {
		return false
	}
	return true
}
func (this *GetSpecType_AdvertiseOnPublic) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_AdvertiseOnPublic)
	if !ok {
		that2, ok := that.(GetSpecType_AdvertiseOnPublic)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AdvertiseOnPublic.Equal(that1.AdvertiseOnPublic) {
		return false
	}
	return true
}
func (this *GetSpecType_AdvertiseCustom) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_AdvertiseCustom)
	if !ok {
		that2, ok := that.(GetSpecType_AdvertiseCustom)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AdvertiseCustom.Equal(that1.AdvertiseCustom) {
		return false
	}
	return true
}
func (this *GetSpecType_DisableWaf) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_DisableWaf)
	if !ok {
		that2, ok := that.(GetSpecType_DisableWaf)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DisableWaf.Equal(that1.DisableWaf) {
		return false
	}
	return true
}
func (this *GetSpecType_Waf) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_Waf)
	if !ok {
		that2, ok := that.(GetSpecType_Waf)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Waf.Equal(that1.Waf) {
		return false
	}
	return true
}
func (this *GetSpecType_WafRule) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_WafRule)
	if !ok {
		that2, ok := that.(GetSpecType_WafRule)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.WafRule.Equal(that1.WafRule) {
		return false
	}
	return true
}
func (this *GetSpecType_NoChallenge) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_NoChallenge)
	if !ok {
		that2, ok := that.(GetSpecType_NoChallenge)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NoChallenge.Equal(that1.NoChallenge) {
		return false
	}
	return true
}
func (this *GetSpecType_JsChallenge) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_JsChallenge)
	if !ok {
		that2, ok := that.(GetSpecType_JsChallenge)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.JsChallenge.Equal(that1.JsChallenge) {
		return false
	}
	return true
}
func (this *GetSpecType_CaptchaChallenge) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_CaptchaChallenge)
	if !ok {
		that2, ok := that.(GetSpecType_CaptchaChallenge)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.CaptchaChallenge.Equal(that1.CaptchaChallenge) {
		return false
	}
	return true
}
func (this *GetSpecType_PolicyBasedChallenge) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_PolicyBasedChallenge)
	if !ok {
		that2, ok := that.(GetSpecType_PolicyBasedChallenge)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.PolicyBasedChallenge.Equal(that1.PolicyBasedChallenge) {
		return false
	}
	return true
}
func (this *GetSpecType_DisableRateLimit) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_DisableRateLimit)
	if !ok {
		that2, ok := that.(GetSpecType_DisableRateLimit)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DisableRateLimit.Equal(that1.DisableRateLimit) {
		return false
	}
	return true
}
func (this *GetSpecType_RateLimit) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_RateLimit)
	if !ok {
		that2, ok := that.(GetSpecType_RateLimit)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.RateLimit.Equal(that1.RateLimit) {
		return false
	}
	return true
}
func (this *GetSpecType_ServicePoliciesFromNamespace) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_ServicePoliciesFromNamespace)
	if !ok {
		that2, ok := that.(GetSpecType_ServicePoliciesFromNamespace)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ServicePoliciesFromNamespace.Equal(that1.ServicePoliciesFromNamespace) {
		return false
	}
	return true
}
func (this *GetSpecType_NoServicePolicies) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_NoServicePolicies)
	if !ok {
		that2, ok := that.(GetSpecType_NoServicePolicies)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NoServicePolicies.Equal(that1.NoServicePolicies) {
		return false
	}
	return true
}
func (this *GetSpecType_ActiveServicePolicies) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_ActiveServicePolicies)
	if !ok {
		that2, ok := that.(GetSpecType_ActiveServicePolicies)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ActiveServicePolicies.Equal(that1.ActiveServicePolicies) {
		return false
	}
	return true
}
func (this *GetSpecType_RoundRobin) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_RoundRobin)
	if !ok {
		that2, ok := that.(GetSpecType_RoundRobin)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.RoundRobin.Equal(that1.RoundRobin) {
		return false
	}
	return true
}
func (this *GetSpecType_LeastActive) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_LeastActive)
	if !ok {
		that2, ok := that.(GetSpecType_LeastActive)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.LeastActive.Equal(that1.LeastActive) {
		return false
	}
	return true
}
func (this *GetSpecType_Random) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_Random)
	if !ok {
		that2, ok := that.(GetSpecType_Random)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Random.Equal(that1.Random) {
		return false
	}
	return true
}
func (this *GetSpecType_SourceIpStickiness) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_SourceIpStickiness)
	if !ok {
		that2, ok := that.(GetSpecType_SourceIpStickiness)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.SourceIpStickiness.Equal(that1.SourceIpStickiness) {
		return false
	}
	return true
}
func (this *GetSpecType_CookieStickiness) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_CookieStickiness)
	if !ok {
		that2, ok := that.(GetSpecType_CookieStickiness)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.CookieStickiness.Equal(that1.CookieStickiness) {
		return false
	}
	return true
}
func (this *GetSpecType_RingHash) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_RingHash)
	if !ok {
		that2, ok := that.(GetSpecType_RingHash)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.RingHash.Equal(that1.RingHash) {
		return false
	}
	return true
}
func (this *DownstreamTlsValidationContext) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&http_loadbalancer.DownstreamTlsValidationContext{")
	s = append(s, "TrustedCaUrl: "+fmt.Sprintf("%#v", this.TrustedCaUrl)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DownstreamTlsParamsType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&http_loadbalancer.DownstreamTlsParamsType{")
	if this.TlsConfig != nil {
		s = append(s, "TlsConfig: "+fmt.Sprintf("%#v", this.TlsConfig)+",\n")
	}
	if this.TlsCertificates != nil {
		s = append(s, "TlsCertificates: "+fmt.Sprintf("%#v", this.TlsCertificates)+",\n")
	}
	if this.MtlsChoice != nil {
		s = append(s, "MtlsChoice: "+fmt.Sprintf("%#v", this.MtlsChoice)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DownstreamTlsParamsType_NoMtls) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.DownstreamTlsParamsType_NoMtls{` +
		`NoMtls:` + fmt.Sprintf("%#v", this.NoMtls) + `}`}, ", ")
	return s
}
func (this *DownstreamTlsParamsType_UseMtls) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.DownstreamTlsParamsType_UseMtls{` +
		`UseMtls:` + fmt.Sprintf("%#v", this.UseMtls) + `}`}, ", ")
	return s
}
func (this *ProxyTypeHttps) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 11)
	s = append(s, "&http_loadbalancer.ProxyTypeHttps{")
	s = append(s, "HttpRedirect: "+fmt.Sprintf("%#v", this.HttpRedirect)+",\n")
	s = append(s, "AddHsts: "+fmt.Sprintf("%#v", this.AddHsts)+",\n")
	if this.TlsParameters != nil {
		s = append(s, "TlsParameters: "+fmt.Sprintf("%#v", this.TlsParameters)+",\n")
	}
	if this.ServerHeaderChoice != nil {
		s = append(s, "ServerHeaderChoice: "+fmt.Sprintf("%#v", this.ServerHeaderChoice)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ProxyTypeHttps_DefaultHeader) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.ProxyTypeHttps_DefaultHeader{` +
		`DefaultHeader:` + fmt.Sprintf("%#v", this.DefaultHeader) + `}`}, ", ")
	return s
}
func (this *ProxyTypeHttps_ServerName) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.ProxyTypeHttps_ServerName{` +
		`ServerName:` + fmt.Sprintf("%#v", this.ServerName) + `}`}, ", ")
	return s
}
func (this *ProxyTypeHttps_AppendServerName) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.ProxyTypeHttps_AppendServerName{` +
		`AppendServerName:` + fmt.Sprintf("%#v", this.AppendServerName) + `}`}, ", ")
	return s
}
func (this *ProxyTypeHttps_PassThrough) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.ProxyTypeHttps_PassThrough{` +
		`PassThrough:` + fmt.Sprintf("%#v", this.PassThrough) + `}`}, ", ")
	return s
}
func (this *ProxyTypeHttp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&http_loadbalancer.ProxyTypeHttp{")
	s = append(s, "DnsVolterraManaged: "+fmt.Sprintf("%#v", this.DnsVolterraManaged)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ProxyTypeHttpsAutoCerts) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 13)
	s = append(s, "&http_loadbalancer.ProxyTypeHttpsAutoCerts{")
	s = append(s, "HttpRedirect: "+fmt.Sprintf("%#v", this.HttpRedirect)+",\n")
	s = append(s, "AddHsts: "+fmt.Sprintf("%#v", this.AddHsts)+",\n")
	if this.TlsConfig != nil {
		s = append(s, "TlsConfig: "+fmt.Sprintf("%#v", this.TlsConfig)+",\n")
	}
	if this.MtlsChoice != nil {
		s = append(s, "MtlsChoice: "+fmt.Sprintf("%#v", this.MtlsChoice)+",\n")
	}
	if this.ServerHeaderChoice != nil {
		s = append(s, "ServerHeaderChoice: "+fmt.Sprintf("%#v", this.ServerHeaderChoice)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ProxyTypeHttpsAutoCerts_NoMtls) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.ProxyTypeHttpsAutoCerts_NoMtls{` +
		`NoMtls:` + fmt.Sprintf("%#v", this.NoMtls) + `}`}, ", ")
	return s
}
func (this *ProxyTypeHttpsAutoCerts_UseMtls) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.ProxyTypeHttpsAutoCerts_UseMtls{` +
		`UseMtls:` + fmt.Sprintf("%#v", this.UseMtls) + `}`}, ", ")
	return s
}
func (this *ProxyTypeHttpsAutoCerts_DefaultHeader) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.ProxyTypeHttpsAutoCerts_DefaultHeader{` +
		`DefaultHeader:` + fmt.Sprintf("%#v", this.DefaultHeader) + `}`}, ", ")
	return s
}
func (this *ProxyTypeHttpsAutoCerts_ServerName) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.ProxyTypeHttpsAutoCerts_ServerName{` +
		`ServerName:` + fmt.Sprintf("%#v", this.ServerName) + `}`}, ", ")
	return s
}
func (this *ProxyTypeHttpsAutoCerts_AppendServerName) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.ProxyTypeHttpsAutoCerts_AppendServerName{` +
		`AppendServerName:` + fmt.Sprintf("%#v", this.AppendServerName) + `}`}, ", ")
	return s
}
func (this *ProxyTypeHttpsAutoCerts_PassThrough) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.ProxyTypeHttpsAutoCerts_PassThrough{` +
		`PassThrough:` + fmt.Sprintf("%#v", this.PassThrough) + `}`}, ", ")
	return s
}
func (this *HashPolicyListType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&http_loadbalancer.HashPolicyListType{")
	if this.HashPolicy != nil {
		s = append(s, "HashPolicy: "+fmt.Sprintf("%#v", this.HashPolicy)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *MirrorPolicyType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&http_loadbalancer.MirrorPolicyType{")
	if this.OriginPool != nil {
		s = append(s, "OriginPool: "+fmt.Sprintf("%#v", this.OriginPool)+",\n")
	}
	if this.Percent != nil {
		s = append(s, "Percent: "+fmt.Sprintf("%#v", this.Percent)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RouteSimpleAdvancedOptions) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 32)
	s = append(s, "&http_loadbalancer.RouteSimpleAdvancedOptions{")
	if this.HashPolicyChoice != nil {
		s = append(s, "HashPolicyChoice: "+fmt.Sprintf("%#v", this.HashPolicyChoice)+",\n")
	}
	s = append(s, "Priority: "+fmt.Sprintf("%#v", this.Priority)+",\n")
	keysForEndpointSubsets := make([]string, 0, len(this.EndpointSubsets))
	for k, _ := range this.EndpointSubsets {
		keysForEndpointSubsets = append(keysForEndpointSubsets, k)
	}
	sortkeys.Strings(keysForEndpointSubsets)
	mapStringForEndpointSubsets := "map[string]string{"
	for _, k := range keysForEndpointSubsets {
		mapStringForEndpointSubsets += fmt.Sprintf("%#v: %#v,", k, this.EndpointSubsets[k])
	}
	mapStringForEndpointSubsets += "}"
	if this.EndpointSubsets != nil {
		s = append(s, "EndpointSubsets: "+mapStringForEndpointSubsets+",\n")
	}
	if this.RewriteChoice != nil {
		s = append(s, "RewriteChoice: "+fmt.Sprintf("%#v", this.RewriteChoice)+",\n")
	}
	if this.RequestHeadersToAdd != nil {
		s = append(s, "RequestHeadersToAdd: "+fmt.Sprintf("%#v", this.RequestHeadersToAdd)+",\n")
	}
	s = append(s, "RequestHeadersToRemove: "+fmt.Sprintf("%#v", this.RequestHeadersToRemove)+",\n")
	if this.ResponseHeadersToAdd != nil {
		s = append(s, "ResponseHeadersToAdd: "+fmt.Sprintf("%#v", this.ResponseHeadersToAdd)+",\n")
	}
	s = append(s, "ResponseHeadersToRemove: "+fmt.Sprintf("%#v", this.ResponseHeadersToRemove)+",\n")
	s = append(s, "DisableLocationAdd: "+fmt.Sprintf("%#v", this.DisableLocationAdd)+",\n")
	if this.WafChoice != nil {
		s = append(s, "WafChoice: "+fmt.Sprintf("%#v", this.WafChoice)+",\n")
	}
	if this.CorsPolicy != nil {
		s = append(s, "CorsPolicy: "+fmt.Sprintf("%#v", this.CorsPolicy)+",\n")
	}
	if this.SpdyChoice != nil {
		s = append(s, "SpdyChoice: "+fmt.Sprintf("%#v", this.SpdyChoice)+",\n")
	}
	if this.WebsocketChoice != nil {
		s = append(s, "WebsocketChoice: "+fmt.Sprintf("%#v", this.WebsocketChoice)+",\n")
	}
	if this.RetryPolicyChoice != nil {
		s = append(s, "RetryPolicyChoice: "+fmt.Sprintf("%#v", this.RetryPolicyChoice)+",\n")
	}
	s = append(s, "Timeout: "+fmt.Sprintf("%#v", this.Timeout)+",\n")
	if this.BufferChoice != nil {
		s = append(s, "BufferChoice: "+fmt.Sprintf("%#v", this.BufferChoice)+",\n")
	}
	if this.MirroringChoice != nil {
		s = append(s, "MirroringChoice: "+fmt.Sprintf("%#v", this.MirroringChoice)+",\n")
	}
	if this.ClusterRetractChoice != nil {
		s = append(s, "ClusterRetractChoice: "+fmt.Sprintf("%#v", this.ClusterRetractChoice)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RouteSimpleAdvancedOptions_CommonHashPolicy) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.RouteSimpleAdvancedOptions_CommonHashPolicy{` +
		`CommonHashPolicy:` + fmt.Sprintf("%#v", this.CommonHashPolicy) + `}`}, ", ")
	return s
}
func (this *RouteSimpleAdvancedOptions_SpecificHashPolicy) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.RouteSimpleAdvancedOptions_SpecificHashPolicy{` +
		`SpecificHashPolicy:` + fmt.Sprintf("%#v", this.SpecificHashPolicy) + `}`}, ", ")
	return s
}
func (this *RouteSimpleAdvancedOptions_DisablePrefixRewrite) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.RouteSimpleAdvancedOptions_DisablePrefixRewrite{` +
		`DisablePrefixRewrite:` + fmt.Sprintf("%#v", this.DisablePrefixRewrite) + `}`}, ", ")
	return s
}
func (this *RouteSimpleAdvancedOptions_PrefixRewrite) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.RouteSimpleAdvancedOptions_PrefixRewrite{` +
		`PrefixRewrite:` + fmt.Sprintf("%#v", this.PrefixRewrite) + `}`}, ", ")
	return s
}
func (this *RouteSimpleAdvancedOptions_DisableWaf) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.RouteSimpleAdvancedOptions_DisableWaf{` +
		`DisableWaf:` + fmt.Sprintf("%#v", this.DisableWaf) + `}`}, ", ")
	return s
}
func (this *RouteSimpleAdvancedOptions_Waf) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.RouteSimpleAdvancedOptions_Waf{` +
		`Waf:` + fmt.Sprintf("%#v", this.Waf) + `}`}, ", ")
	return s
}
func (this *RouteSimpleAdvancedOptions_WafRule) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.RouteSimpleAdvancedOptions_WafRule{` +
		`WafRule:` + fmt.Sprintf("%#v", this.WafRule) + `}`}, ", ")
	return s
}
func (this *RouteSimpleAdvancedOptions_DisableSpdy) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.RouteSimpleAdvancedOptions_DisableSpdy{` +
		`DisableSpdy:` + fmt.Sprintf("%#v", this.DisableSpdy) + `}`}, ", ")
	return s
}
func (this *RouteSimpleAdvancedOptions_EnableSpdy) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.RouteSimpleAdvancedOptions_EnableSpdy{` +
		`EnableSpdy:` + fmt.Sprintf("%#v", this.EnableSpdy) + `}`}, ", ")
	return s
}
func (this *RouteSimpleAdvancedOptions_DisableWebSocketConfig) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.RouteSimpleAdvancedOptions_DisableWebSocketConfig{` +
		`DisableWebSocketConfig:` + fmt.Sprintf("%#v", this.DisableWebSocketConfig) + `}`}, ", ")
	return s
}
func (this *RouteSimpleAdvancedOptions_WebSocketConfig) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.RouteSimpleAdvancedOptions_WebSocketConfig{` +
		`WebSocketConfig:` + fmt.Sprintf("%#v", this.WebSocketConfig) + `}`}, ", ")
	return s
}
func (this *RouteSimpleAdvancedOptions_DefaultRetryPolicy) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.RouteSimpleAdvancedOptions_DefaultRetryPolicy{` +
		`DefaultRetryPolicy:` + fmt.Sprintf("%#v", this.DefaultRetryPolicy) + `}`}, ", ")
	return s
}
func (this *RouteSimpleAdvancedOptions_RetryPolicy) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.RouteSimpleAdvancedOptions_RetryPolicy{` +
		`RetryPolicy:` + fmt.Sprintf("%#v", this.RetryPolicy) + `}`}, ", ")
	return s
}
func (this *RouteSimpleAdvancedOptions_CommonBuffering) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.RouteSimpleAdvancedOptions_CommonBuffering{` +
		`CommonBuffering:` + fmt.Sprintf("%#v", this.CommonBuffering) + `}`}, ", ")
	return s
}
func (this *RouteSimpleAdvancedOptions_BufferPolicy) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.RouteSimpleAdvancedOptions_BufferPolicy{` +
		`BufferPolicy:` + fmt.Sprintf("%#v", this.BufferPolicy) + `}`}, ", ")
	return s
}
func (this *RouteSimpleAdvancedOptions_DisableMirroring) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.RouteSimpleAdvancedOptions_DisableMirroring{` +
		`DisableMirroring:` + fmt.Sprintf("%#v", this.DisableMirroring) + `}`}, ", ")
	return s
}
func (this *RouteSimpleAdvancedOptions_MirrorPolicy) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.RouteSimpleAdvancedOptions_MirrorPolicy{` +
		`MirrorPolicy:` + fmt.Sprintf("%#v", this.MirrorPolicy) + `}`}, ", ")
	return s
}
func (this *RouteSimpleAdvancedOptions_RetractCluster) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.RouteSimpleAdvancedOptions_RetractCluster{` +
		`RetractCluster:` + fmt.Sprintf("%#v", this.RetractCluster) + `}`}, ", ")
	return s
}
func (this *RouteSimpleAdvancedOptions_DoNotRetractCluster) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.RouteSimpleAdvancedOptions_DoNotRetractCluster{` +
		`DoNotRetractCluster:` + fmt.Sprintf("%#v", this.DoNotRetractCluster) + `}`}, ", ")
	return s
}
func (this *RouteTypeSimpleWithDefaultOriginPool) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&http_loadbalancer.RouteTypeSimpleWithDefaultOriginPool{")
	s = append(s, "HttpMethod: "+fmt.Sprintf("%#v", this.HttpMethod)+",\n")
	if this.Path != nil {
		s = append(s, "Path: "+fmt.Sprintf("%#v", this.Path)+",\n")
	}
	if this.HostRewriteParams != nil {
		s = append(s, "HostRewriteParams: "+fmt.Sprintf("%#v", this.HostRewriteParams)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RouteTypeSimpleWithDefaultOriginPool_AutoHostRewrite) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.RouteTypeSimpleWithDefaultOriginPool_AutoHostRewrite{` +
		`AutoHostRewrite:` + fmt.Sprintf("%#v", this.AutoHostRewrite) + `}`}, ", ")
	return s
}
func (this *RouteTypeSimpleWithDefaultOriginPool_HostRewrite) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.RouteTypeSimpleWithDefaultOriginPool_HostRewrite{` +
		`HostRewrite:` + fmt.Sprintf("%#v", this.HostRewrite) + `}`}, ", ")
	return s
}
func (this *RouteTypeSimpleWithDefaultOriginPool_DisableHostRewrite) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.RouteTypeSimpleWithDefaultOriginPool_DisableHostRewrite{` +
		`DisableHostRewrite:` + fmt.Sprintf("%#v", this.DisableHostRewrite) + `}`}, ", ")
	return s
}
func (this *RouteTypeSimple) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 11)
	s = append(s, "&http_loadbalancer.RouteTypeSimple{")
	if this.Path != nil {
		s = append(s, "Path: "+fmt.Sprintf("%#v", this.Path)+",\n")
	}
	s = append(s, "HttpMethod: "+fmt.Sprintf("%#v", this.HttpMethod)+",\n")
	if this.OriginPools != nil {
		s = append(s, "OriginPools: "+fmt.Sprintf("%#v", this.OriginPools)+",\n")
	}
	if this.HostRewriteParams != nil {
		s = append(s, "HostRewriteParams: "+fmt.Sprintf("%#v", this.HostRewriteParams)+",\n")
	}
	if this.AdvancedOptions != nil {
		s = append(s, "AdvancedOptions: "+fmt.Sprintf("%#v", this.AdvancedOptions)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RouteTypeSimple_AutoHostRewrite) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.RouteTypeSimple_AutoHostRewrite{` +
		`AutoHostRewrite:` + fmt.Sprintf("%#v", this.AutoHostRewrite) + `}`}, ", ")
	return s
}
func (this *RouteTypeSimple_HostRewrite) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.RouteTypeSimple_HostRewrite{` +
		`HostRewrite:` + fmt.Sprintf("%#v", this.HostRewrite) + `}`}, ", ")
	return s
}
func (this *RouteTypeSimple_DisableHostRewrite) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.RouteTypeSimple_DisableHostRewrite{` +
		`DisableHostRewrite:` + fmt.Sprintf("%#v", this.DisableHostRewrite) + `}`}, ", ")
	return s
}
func (this *RouteTypeRedirect) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&http_loadbalancer.RouteTypeRedirect{")
	if this.Path != nil {
		s = append(s, "Path: "+fmt.Sprintf("%#v", this.Path)+",\n")
	}
	s = append(s, "HttpMethod: "+fmt.Sprintf("%#v", this.HttpMethod)+",\n")
	if this.RouteRedirect != nil {
		s = append(s, "RouteRedirect: "+fmt.Sprintf("%#v", this.RouteRedirect)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RouteTypeDirectResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&http_loadbalancer.RouteTypeDirectResponse{")
	if this.Path != nil {
		s = append(s, "Path: "+fmt.Sprintf("%#v", this.Path)+",\n")
	}
	s = append(s, "HttpMethod: "+fmt.Sprintf("%#v", this.HttpMethod)+",\n")
	if this.RouteDirectResponse != nil {
		s = append(s, "RouteDirectResponse: "+fmt.Sprintf("%#v", this.RouteDirectResponse)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RouteTypeCustomRoute) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&http_loadbalancer.RouteTypeCustomRoute{")
	if this.RouteRef != nil {
		s = append(s, "RouteRef: "+fmt.Sprintf("%#v", this.RouteRef)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RouteType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&http_loadbalancer.RouteType{")
	if this.Choice != nil {
		s = append(s, "Choice: "+fmt.Sprintf("%#v", this.Choice)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RouteType_SimpleRoute) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.RouteType_SimpleRoute{` +
		`SimpleRoute:` + fmt.Sprintf("%#v", this.SimpleRoute) + `}`}, ", ")
	return s
}
func (this *RouteType_RedirectRoute) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.RouteType_RedirectRoute{` +
		`RedirectRoute:` + fmt.Sprintf("%#v", this.RedirectRoute) + `}`}, ", ")
	return s
}
func (this *RouteType_DirectResponseRoute) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.RouteType_DirectResponseRoute{` +
		`DirectResponseRoute:` + fmt.Sprintf("%#v", this.DirectResponseRoute) + `}`}, ", ")
	return s
}
func (this *RouteType_CustomRouteObject) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.RouteType_CustomRouteObject{` +
		`CustomRouteObject:` + fmt.Sprintf("%#v", this.CustomRouteObject) + `}`}, ", ")
	return s
}
func (this *AdvancedOptionsType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 16)
	s = append(s, "&http_loadbalancer.AdvancedOptionsType{")
	if this.RequestHeadersToAdd != nil {
		s = append(s, "RequestHeadersToAdd: "+fmt.Sprintf("%#v", this.RequestHeadersToAdd)+",\n")
	}
	s = append(s, "RequestHeadersToRemove: "+fmt.Sprintf("%#v", this.RequestHeadersToRemove)+",\n")
	if this.ResponseHeadersToAdd != nil {
		s = append(s, "ResponseHeadersToAdd: "+fmt.Sprintf("%#v", this.ResponseHeadersToAdd)+",\n")
	}
	s = append(s, "ResponseHeadersToRemove: "+fmt.Sprintf("%#v", this.ResponseHeadersToRemove)+",\n")
	s = append(s, "MaxRequestHeaderSize: "+fmt.Sprintf("%#v", this.MaxRequestHeaderSize)+",\n")
	if this.BufferPolicy != nil {
		s = append(s, "BufferPolicy: "+fmt.Sprintf("%#v", this.BufferPolicy)+",\n")
	}
	if this.CompressionParams != nil {
		s = append(s, "CompressionParams: "+fmt.Sprintf("%#v", this.CompressionParams)+",\n")
	}
	keysForCustomErrors := make([]uint32, 0, len(this.CustomErrors))
	for k, _ := range this.CustomErrors {
		keysForCustomErrors = append(keysForCustomErrors, k)
	}
	sortkeys.Uint32s(keysForCustomErrors)
	mapStringForCustomErrors := "map[uint32]string{"
	for _, k := range keysForCustomErrors {
		mapStringForCustomErrors += fmt.Sprintf("%#v: %#v,", k, this.CustomErrors[k])
	}
	mapStringForCustomErrors += "}"
	if this.CustomErrors != nil {
		s = append(s, "CustomErrors: "+mapStringForCustomErrors+",\n")
	}
	if this.JavascriptInfo != nil {
		s = append(s, "JavascriptInfo: "+fmt.Sprintf("%#v", this.JavascriptInfo)+",\n")
	}
	if this.Jwt != nil {
		s = append(s, "Jwt: "+fmt.Sprintf("%#v", this.Jwt)+",\n")
	}
	s = append(s, "IdleTimeout: "+fmt.Sprintf("%#v", this.IdleTimeout)+",\n")
	s = append(s, "DisableDefaultErrorPages: "+fmt.Sprintf("%#v", this.DisableDefaultErrorPages)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *PolicyBasedChallenge) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 16)
	s = append(s, "&http_loadbalancer.PolicyBasedChallenge{")
	if this.JsChallengeParametersChoice != nil {
		s = append(s, "JsChallengeParametersChoice: "+fmt.Sprintf("%#v", this.JsChallengeParametersChoice)+",\n")
	}
	if this.CaptchaChallengeParametersChoice != nil {
		s = append(s, "CaptchaChallengeParametersChoice: "+fmt.Sprintf("%#v", this.CaptchaChallengeParametersChoice)+",\n")
	}
	if this.TemporaryBlockingParametersChoice != nil {
		s = append(s, "TemporaryBlockingParametersChoice: "+fmt.Sprintf("%#v", this.TemporaryBlockingParametersChoice)+",\n")
	}
	if this.MaliciousUserMitigationChoice != nil {
		s = append(s, "MaliciousUserMitigationChoice: "+fmt.Sprintf("%#v", this.MaliciousUserMitigationChoice)+",\n")
	}
	if this.ChallengeChoice != nil {
		s = append(s, "ChallengeChoice: "+fmt.Sprintf("%#v", this.ChallengeChoice)+",\n")
	}
	if this.RuleList != nil {
		s = append(s, "RuleList: "+fmt.Sprintf("%#v", this.RuleList)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *PolicyBasedChallenge_DefaultJsChallengeParameters) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.PolicyBasedChallenge_DefaultJsChallengeParameters{` +
		`DefaultJsChallengeParameters:` + fmt.Sprintf("%#v", this.DefaultJsChallengeParameters) + `}`}, ", ")
	return s
}
func (this *PolicyBasedChallenge_JsChallengeParameters) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.PolicyBasedChallenge_JsChallengeParameters{` +
		`JsChallengeParameters:` + fmt.Sprintf("%#v", this.JsChallengeParameters) + `}`}, ", ")
	return s
}
func (this *PolicyBasedChallenge_DefaultCaptchaChallengeParameters) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.PolicyBasedChallenge_DefaultCaptchaChallengeParameters{` +
		`DefaultCaptchaChallengeParameters:` + fmt.Sprintf("%#v", this.DefaultCaptchaChallengeParameters) + `}`}, ", ")
	return s
}
func (this *PolicyBasedChallenge_CaptchaChallengeParameters) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.PolicyBasedChallenge_CaptchaChallengeParameters{` +
		`CaptchaChallengeParameters:` + fmt.Sprintf("%#v", this.CaptchaChallengeParameters) + `}`}, ", ")
	return s
}
func (this *PolicyBasedChallenge_DefaultTemporaryBlockingParameters) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.PolicyBasedChallenge_DefaultTemporaryBlockingParameters{` +
		`DefaultTemporaryBlockingParameters:` + fmt.Sprintf("%#v", this.DefaultTemporaryBlockingParameters) + `}`}, ", ")
	return s
}
func (this *PolicyBasedChallenge_TemporaryUserBlocking) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.PolicyBasedChallenge_TemporaryUserBlocking{` +
		`TemporaryUserBlocking:` + fmt.Sprintf("%#v", this.TemporaryUserBlocking) + `}`}, ", ")
	return s
}
func (this *PolicyBasedChallenge_DefaultMitigationSettings) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.PolicyBasedChallenge_DefaultMitigationSettings{` +
		`DefaultMitigationSettings:` + fmt.Sprintf("%#v", this.DefaultMitigationSettings) + `}`}, ", ")
	return s
}
func (this *PolicyBasedChallenge_MaliciousUserMitigation) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.PolicyBasedChallenge_MaliciousUserMitigation{` +
		`MaliciousUserMitigation:` + fmt.Sprintf("%#v", this.MaliciousUserMitigation) + `}`}, ", ")
	return s
}
func (this *PolicyBasedChallenge_NoChallenge) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.PolicyBasedChallenge_NoChallenge{` +
		`NoChallenge:` + fmt.Sprintf("%#v", this.NoChallenge) + `}`}, ", ")
	return s
}
func (this *PolicyBasedChallenge_AlwaysEnableJsChallenge) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.PolicyBasedChallenge_AlwaysEnableJsChallenge{` +
		`AlwaysEnableJsChallenge:` + fmt.Sprintf("%#v", this.AlwaysEnableJsChallenge) + `}`}, ", ")
	return s
}
func (this *PolicyBasedChallenge_AlwaysEnableCaptchaChallenge) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.PolicyBasedChallenge_AlwaysEnableCaptchaChallenge{` +
		`AlwaysEnableCaptchaChallenge:` + fmt.Sprintf("%#v", this.AlwaysEnableCaptchaChallenge) + `}`}, ", ")
	return s
}
func (this *ChallengeRule) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&http_loadbalancer.ChallengeRule{")
	if this.Metadata != nil {
		s = append(s, "Metadata: "+fmt.Sprintf("%#v", this.Metadata)+",\n")
	}
	if this.Spec != nil {
		s = append(s, "Spec: "+fmt.Sprintf("%#v", this.Spec)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ChallengeRuleList) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&http_loadbalancer.ChallengeRuleList{")
	if this.Rules != nil {
		s = append(s, "Rules: "+fmt.Sprintf("%#v", this.Rules)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SimpleClientSrcRule) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&http_loadbalancer.SimpleClientSrcRule{")
	if this.ClientSourceChoice != nil {
		s = append(s, "ClientSourceChoice: "+fmt.Sprintf("%#v", this.ClientSourceChoice)+",\n")
	}
	if this.ExpirationTimestamp != nil {
		s = append(s, "ExpirationTimestamp: "+fmt.Sprintf("%#v", this.ExpirationTimestamp)+",\n")
	}
	if this.Metadata != nil {
		s = append(s, "Metadata: "+fmt.Sprintf("%#v", this.Metadata)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SimpleClientSrcRule_IpPrefix) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.SimpleClientSrcRule_IpPrefix{` +
		`IpPrefix:` + fmt.Sprintf("%#v", this.IpPrefix) + `}`}, ", ")
	return s
}
func (this *SimpleClientSrcRule_AsNumber) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.SimpleClientSrcRule_AsNumber{` +
		`AsNumber:` + fmt.Sprintf("%#v", this.AsNumber) + `}`}, ", ")
	return s
}
func (this *CustomIpAllowedList) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&http_loadbalancer.CustomIpAllowedList{")
	if this.RateLimiterAllowedPrefixes != nil {
		s = append(s, "RateLimiterAllowedPrefixes: "+fmt.Sprintf("%#v", this.RateLimiterAllowedPrefixes)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RateLimitConfigType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&http_loadbalancer.RateLimitConfigType{")
	if this.RateLimiter != nil {
		s = append(s, "RateLimiter: "+fmt.Sprintf("%#v", this.RateLimiter)+",\n")
	}
	if this.IpAllowedListChoice != nil {
		s = append(s, "IpAllowedListChoice: "+fmt.Sprintf("%#v", this.IpAllowedListChoice)+",\n")
	}
	if this.PolicyChoice != nil {
		s = append(s, "PolicyChoice: "+fmt.Sprintf("%#v", this.PolicyChoice)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RateLimitConfigType_NoIpAllowedList) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.RateLimitConfigType_NoIpAllowedList{` +
		`NoIpAllowedList:` + fmt.Sprintf("%#v", this.NoIpAllowedList) + `}`}, ", ")
	return s
}
func (this *RateLimitConfigType_IpAllowedList) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.RateLimitConfigType_IpAllowedList{` +
		`IpAllowedList:` + fmt.Sprintf("%#v", this.IpAllowedList) + `}`}, ", ")
	return s
}
func (this *RateLimitConfigType_CustomIpAllowedList) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.RateLimitConfigType_CustomIpAllowedList{` +
		`CustomIpAllowedList:` + fmt.Sprintf("%#v", this.CustomIpAllowedList) + `}`}, ", ")
	return s
}
func (this *RateLimitConfigType_NoPolicies) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.RateLimitConfigType_NoPolicies{` +
		`NoPolicies:` + fmt.Sprintf("%#v", this.NoPolicies) + `}`}, ", ")
	return s
}
func (this *RateLimitConfigType_Policies) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.RateLimitConfigType_Policies{` +
		`Policies:` + fmt.Sprintf("%#v", this.Policies) + `}`}, ", ")
	return s
}
func (this *ServicePolicyList) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&http_loadbalancer.ServicePolicyList{")
	if this.Policies != nil {
		s = append(s, "Policies: "+fmt.Sprintf("%#v", this.Policies)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GlobalSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 49)
	s = append(s, "&http_loadbalancer.GlobalSpecType{")
	s = append(s, "Domains: "+fmt.Sprintf("%#v", this.Domains)+",\n")
	if this.LoadbalancerType != nil {
		s = append(s, "LoadbalancerType: "+fmt.Sprintf("%#v", this.LoadbalancerType)+",\n")
	}
	if this.AdvertiseChoice != nil {
		s = append(s, "AdvertiseChoice: "+fmt.Sprintf("%#v", this.AdvertiseChoice)+",\n")
	}
	if this.DefaultRoutePools != nil {
		s = append(s, "DefaultRoutePools: "+fmt.Sprintf("%#v", this.DefaultRoutePools)+",\n")
	}
	if this.HostRewriteParams != nil {
		s = append(s, "HostRewriteParams: "+fmt.Sprintf("%#v", this.HostRewriteParams)+",\n")
	}
	if this.Routes != nil {
		s = append(s, "Routes: "+fmt.Sprintf("%#v", this.Routes)+",\n")
	}
	if this.CorsPolicy != nil {
		s = append(s, "CorsPolicy: "+fmt.Sprintf("%#v", this.CorsPolicy)+",\n")
	}
	if this.WafChoice != nil {
		s = append(s, "WafChoice: "+fmt.Sprintf("%#v", this.WafChoice)+",\n")
	}
	s = append(s, "AddLocation: "+fmt.Sprintf("%#v", this.AddLocation)+",\n")
	if this.ChallengeType != nil {
		s = append(s, "ChallengeType: "+fmt.Sprintf("%#v", this.ChallengeType)+",\n")
	}
	if this.MoreOption != nil {
		s = append(s, "MoreOption: "+fmt.Sprintf("%#v", this.MoreOption)+",\n")
	}
	if this.UserIdentification != nil {
		s = append(s, "UserIdentification: "+fmt.Sprintf("%#v", this.UserIdentification)+",\n")
	}
	if this.RateLimitChoice != nil {
		s = append(s, "RateLimitChoice: "+fmt.Sprintf("%#v", this.RateLimitChoice)+",\n")
	}
	if this.MaliciousUserMitigation != nil {
		s = append(s, "MaliciousUserMitigation: "+fmt.Sprintf("%#v", this.MaliciousUserMitigation)+",\n")
	}
	if this.WafExclusionRules != nil {
		s = append(s, "WafExclusionRules: "+fmt.Sprintf("%#v", this.WafExclusionRules)+",\n")
	}
	if this.BlockedClients != nil {
		s = append(s, "BlockedClients: "+fmt.Sprintf("%#v", this.BlockedClients)+",\n")
	}
	if this.TrustedClients != nil {
		s = append(s, "TrustedClients: "+fmt.Sprintf("%#v", this.TrustedClients)+",\n")
	}
	if this.ServicePolicyChoice != nil {
		s = append(s, "ServicePolicyChoice: "+fmt.Sprintf("%#v", this.ServicePolicyChoice)+",\n")
	}
	if this.HashPolicyChoice != nil {
		s = append(s, "HashPolicyChoice: "+fmt.Sprintf("%#v", this.HashPolicyChoice)+",\n")
	}
	if this.ViewInternal != nil {
		s = append(s, "ViewInternal: "+fmt.Sprintf("%#v", this.ViewInternal)+",\n")
	}
	s = append(s, "HostName: "+fmt.Sprintf("%#v", this.HostName)+",\n")
	if this.DnsInfo != nil {
		s = append(s, "DnsInfo: "+fmt.Sprintf("%#v", this.DnsInfo)+",\n")
	}
	s = append(s, "State: "+fmt.Sprintf("%#v", this.State)+",\n")
	s = append(s, "AutoCertState: "+fmt.Sprintf("%#v", this.AutoCertState)+",\n")
	if this.AutoCertInfo != nil {
		s = append(s, "AutoCertInfo: "+fmt.Sprintf("%#v", this.AutoCertInfo)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GlobalSpecType_Http) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.GlobalSpecType_Http{` +
		`Http:` + fmt.Sprintf("%#v", this.Http) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_HttpsAutoCert) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.GlobalSpecType_HttpsAutoCert{` +
		`HttpsAutoCert:` + fmt.Sprintf("%#v", this.HttpsAutoCert) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_Https) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.GlobalSpecType_Https{` +
		`Https:` + fmt.Sprintf("%#v", this.Https) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_DoNotAdvertise) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.GlobalSpecType_DoNotAdvertise{` +
		`DoNotAdvertise:` + fmt.Sprintf("%#v", this.DoNotAdvertise) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_AdvertiseOnPublicDefaultVip) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.GlobalSpecType_AdvertiseOnPublicDefaultVip{` +
		`AdvertiseOnPublicDefaultVip:` + fmt.Sprintf("%#v", this.AdvertiseOnPublicDefaultVip) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_AdvertiseOnPublic) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.GlobalSpecType_AdvertiseOnPublic{` +
		`AdvertiseOnPublic:` + fmt.Sprintf("%#v", this.AdvertiseOnPublic) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_AdvertiseCustom) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.GlobalSpecType_AdvertiseCustom{` +
		`AdvertiseCustom:` + fmt.Sprintf("%#v", this.AdvertiseCustom) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_AutoHostRewrite) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.GlobalSpecType_AutoHostRewrite{` +
		`AutoHostRewrite:` + fmt.Sprintf("%#v", this.AutoHostRewrite) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_HostRewrite) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.GlobalSpecType_HostRewrite{` +
		`HostRewrite:` + fmt.Sprintf("%#v", this.HostRewrite) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_DisableHostRewrite) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.GlobalSpecType_DisableHostRewrite{` +
		`DisableHostRewrite:` + fmt.Sprintf("%#v", this.DisableHostRewrite) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_DisableWaf) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.GlobalSpecType_DisableWaf{` +
		`DisableWaf:` + fmt.Sprintf("%#v", this.DisableWaf) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_Waf) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.GlobalSpecType_Waf{` +
		`Waf:` + fmt.Sprintf("%#v", this.Waf) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_WafRule) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.GlobalSpecType_WafRule{` +
		`WafRule:` + fmt.Sprintf("%#v", this.WafRule) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_NoChallenge) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.GlobalSpecType_NoChallenge{` +
		`NoChallenge:` + fmt.Sprintf("%#v", this.NoChallenge) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_JsChallenge) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.GlobalSpecType_JsChallenge{` +
		`JsChallenge:` + fmt.Sprintf("%#v", this.JsChallenge) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_CaptchaChallenge) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.GlobalSpecType_CaptchaChallenge{` +
		`CaptchaChallenge:` + fmt.Sprintf("%#v", this.CaptchaChallenge) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_PolicyBasedChallenge) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.GlobalSpecType_PolicyBasedChallenge{` +
		`PolicyBasedChallenge:` + fmt.Sprintf("%#v", this.PolicyBasedChallenge) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_DisableRateLimit) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.GlobalSpecType_DisableRateLimit{` +
		`DisableRateLimit:` + fmt.Sprintf("%#v", this.DisableRateLimit) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_RateLimit) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.GlobalSpecType_RateLimit{` +
		`RateLimit:` + fmt.Sprintf("%#v", this.RateLimit) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_ServicePoliciesFromNamespace) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.GlobalSpecType_ServicePoliciesFromNamespace{` +
		`ServicePoliciesFromNamespace:` + fmt.Sprintf("%#v", this.ServicePoliciesFromNamespace) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_NoServicePolicies) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.GlobalSpecType_NoServicePolicies{` +
		`NoServicePolicies:` + fmt.Sprintf("%#v", this.NoServicePolicies) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_ActiveServicePolicies) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.GlobalSpecType_ActiveServicePolicies{` +
		`ActiveServicePolicies:` + fmt.Sprintf("%#v", this.ActiveServicePolicies) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_RoundRobin) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.GlobalSpecType_RoundRobin{` +
		`RoundRobin:` + fmt.Sprintf("%#v", this.RoundRobin) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_LeastActive) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.GlobalSpecType_LeastActive{` +
		`LeastActive:` + fmt.Sprintf("%#v", this.LeastActive) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_Random) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.GlobalSpecType_Random{` +
		`Random:` + fmt.Sprintf("%#v", this.Random) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_SourceIpStickiness) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.GlobalSpecType_SourceIpStickiness{` +
		`SourceIpStickiness:` + fmt.Sprintf("%#v", this.SourceIpStickiness) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_CookieStickiness) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.GlobalSpecType_CookieStickiness{` +
		`CookieStickiness:` + fmt.Sprintf("%#v", this.CookieStickiness) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_RingHash) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.GlobalSpecType_RingHash{` +
		`RingHash:` + fmt.Sprintf("%#v", this.RingHash) + `}`}, ", ")
	return s
}
func (this *CreateSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 40)
	s = append(s, "&http_loadbalancer.CreateSpecType{")
	s = append(s, "Domains: "+fmt.Sprintf("%#v", this.Domains)+",\n")
	if this.LoadbalancerType != nil {
		s = append(s, "LoadbalancerType: "+fmt.Sprintf("%#v", this.LoadbalancerType)+",\n")
	}
	if this.AdvertiseChoice != nil {
		s = append(s, "AdvertiseChoice: "+fmt.Sprintf("%#v", this.AdvertiseChoice)+",\n")
	}
	if this.DefaultRoutePools != nil {
		s = append(s, "DefaultRoutePools: "+fmt.Sprintf("%#v", this.DefaultRoutePools)+",\n")
	}
	if this.Routes != nil {
		s = append(s, "Routes: "+fmt.Sprintf("%#v", this.Routes)+",\n")
	}
	if this.CorsPolicy != nil {
		s = append(s, "CorsPolicy: "+fmt.Sprintf("%#v", this.CorsPolicy)+",\n")
	}
	if this.WafChoice != nil {
		s = append(s, "WafChoice: "+fmt.Sprintf("%#v", this.WafChoice)+",\n")
	}
	s = append(s, "AddLocation: "+fmt.Sprintf("%#v", this.AddLocation)+",\n")
	if this.ChallengeType != nil {
		s = append(s, "ChallengeType: "+fmt.Sprintf("%#v", this.ChallengeType)+",\n")
	}
	if this.MoreOption != nil {
		s = append(s, "MoreOption: "+fmt.Sprintf("%#v", this.MoreOption)+",\n")
	}
	if this.UserIdentification != nil {
		s = append(s, "UserIdentification: "+fmt.Sprintf("%#v", this.UserIdentification)+",\n")
	}
	if this.RateLimitChoice != nil {
		s = append(s, "RateLimitChoice: "+fmt.Sprintf("%#v", this.RateLimitChoice)+",\n")
	}
	if this.MaliciousUserMitigation != nil {
		s = append(s, "MaliciousUserMitigation: "+fmt.Sprintf("%#v", this.MaliciousUserMitigation)+",\n")
	}
	if this.WafExclusionRules != nil {
		s = append(s, "WafExclusionRules: "+fmt.Sprintf("%#v", this.WafExclusionRules)+",\n")
	}
	if this.BlockedClients != nil {
		s = append(s, "BlockedClients: "+fmt.Sprintf("%#v", this.BlockedClients)+",\n")
	}
	if this.TrustedClients != nil {
		s = append(s, "TrustedClients: "+fmt.Sprintf("%#v", this.TrustedClients)+",\n")
	}
	if this.ServicePolicyChoice != nil {
		s = append(s, "ServicePolicyChoice: "+fmt.Sprintf("%#v", this.ServicePolicyChoice)+",\n")
	}
	if this.HashPolicyChoice != nil {
		s = append(s, "HashPolicyChoice: "+fmt.Sprintf("%#v", this.HashPolicyChoice)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CreateSpecType_Http) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.CreateSpecType_Http{` +
		`Http:` + fmt.Sprintf("%#v", this.Http) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_HttpsAutoCert) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.CreateSpecType_HttpsAutoCert{` +
		`HttpsAutoCert:` + fmt.Sprintf("%#v", this.HttpsAutoCert) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_Https) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.CreateSpecType_Https{` +
		`Https:` + fmt.Sprintf("%#v", this.Https) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_DoNotAdvertise) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.CreateSpecType_DoNotAdvertise{` +
		`DoNotAdvertise:` + fmt.Sprintf("%#v", this.DoNotAdvertise) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_AdvertiseOnPublicDefaultVip) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.CreateSpecType_AdvertiseOnPublicDefaultVip{` +
		`AdvertiseOnPublicDefaultVip:` + fmt.Sprintf("%#v", this.AdvertiseOnPublicDefaultVip) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_AdvertiseOnPublic) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.CreateSpecType_AdvertiseOnPublic{` +
		`AdvertiseOnPublic:` + fmt.Sprintf("%#v", this.AdvertiseOnPublic) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_AdvertiseCustom) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.CreateSpecType_AdvertiseCustom{` +
		`AdvertiseCustom:` + fmt.Sprintf("%#v", this.AdvertiseCustom) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_DisableWaf) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.CreateSpecType_DisableWaf{` +
		`DisableWaf:` + fmt.Sprintf("%#v", this.DisableWaf) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_Waf) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.CreateSpecType_Waf{` +
		`Waf:` + fmt.Sprintf("%#v", this.Waf) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_WafRule) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.CreateSpecType_WafRule{` +
		`WafRule:` + fmt.Sprintf("%#v", this.WafRule) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_NoChallenge) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.CreateSpecType_NoChallenge{` +
		`NoChallenge:` + fmt.Sprintf("%#v", this.NoChallenge) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_JsChallenge) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.CreateSpecType_JsChallenge{` +
		`JsChallenge:` + fmt.Sprintf("%#v", this.JsChallenge) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_CaptchaChallenge) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.CreateSpecType_CaptchaChallenge{` +
		`CaptchaChallenge:` + fmt.Sprintf("%#v", this.CaptchaChallenge) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_PolicyBasedChallenge) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.CreateSpecType_PolicyBasedChallenge{` +
		`PolicyBasedChallenge:` + fmt.Sprintf("%#v", this.PolicyBasedChallenge) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_DisableRateLimit) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.CreateSpecType_DisableRateLimit{` +
		`DisableRateLimit:` + fmt.Sprintf("%#v", this.DisableRateLimit) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_RateLimit) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.CreateSpecType_RateLimit{` +
		`RateLimit:` + fmt.Sprintf("%#v", this.RateLimit) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_ServicePoliciesFromNamespace) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.CreateSpecType_ServicePoliciesFromNamespace{` +
		`ServicePoliciesFromNamespace:` + fmt.Sprintf("%#v", this.ServicePoliciesFromNamespace) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_NoServicePolicies) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.CreateSpecType_NoServicePolicies{` +
		`NoServicePolicies:` + fmt.Sprintf("%#v", this.NoServicePolicies) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_ActiveServicePolicies) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.CreateSpecType_ActiveServicePolicies{` +
		`ActiveServicePolicies:` + fmt.Sprintf("%#v", this.ActiveServicePolicies) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_RoundRobin) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.CreateSpecType_RoundRobin{` +
		`RoundRobin:` + fmt.Sprintf("%#v", this.RoundRobin) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_LeastActive) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.CreateSpecType_LeastActive{` +
		`LeastActive:` + fmt.Sprintf("%#v", this.LeastActive) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_Random) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.CreateSpecType_Random{` +
		`Random:` + fmt.Sprintf("%#v", this.Random) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_SourceIpStickiness) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.CreateSpecType_SourceIpStickiness{` +
		`SourceIpStickiness:` + fmt.Sprintf("%#v", this.SourceIpStickiness) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_CookieStickiness) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.CreateSpecType_CookieStickiness{` +
		`CookieStickiness:` + fmt.Sprintf("%#v", this.CookieStickiness) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_RingHash) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.CreateSpecType_RingHash{` +
		`RingHash:` + fmt.Sprintf("%#v", this.RingHash) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 40)
	s = append(s, "&http_loadbalancer.ReplaceSpecType{")
	s = append(s, "Domains: "+fmt.Sprintf("%#v", this.Domains)+",\n")
	if this.LoadbalancerType != nil {
		s = append(s, "LoadbalancerType: "+fmt.Sprintf("%#v", this.LoadbalancerType)+",\n")
	}
	if this.AdvertiseChoice != nil {
		s = append(s, "AdvertiseChoice: "+fmt.Sprintf("%#v", this.AdvertiseChoice)+",\n")
	}
	if this.DefaultRoutePools != nil {
		s = append(s, "DefaultRoutePools: "+fmt.Sprintf("%#v", this.DefaultRoutePools)+",\n")
	}
	if this.Routes != nil {
		s = append(s, "Routes: "+fmt.Sprintf("%#v", this.Routes)+",\n")
	}
	if this.CorsPolicy != nil {
		s = append(s, "CorsPolicy: "+fmt.Sprintf("%#v", this.CorsPolicy)+",\n")
	}
	if this.WafChoice != nil {
		s = append(s, "WafChoice: "+fmt.Sprintf("%#v", this.WafChoice)+",\n")
	}
	s = append(s, "AddLocation: "+fmt.Sprintf("%#v", this.AddLocation)+",\n")
	if this.ChallengeType != nil {
		s = append(s, "ChallengeType: "+fmt.Sprintf("%#v", this.ChallengeType)+",\n")
	}
	if this.MoreOption != nil {
		s = append(s, "MoreOption: "+fmt.Sprintf("%#v", this.MoreOption)+",\n")
	}
	if this.UserIdentification != nil {
		s = append(s, "UserIdentification: "+fmt.Sprintf("%#v", this.UserIdentification)+",\n")
	}
	if this.RateLimitChoice != nil {
		s = append(s, "RateLimitChoice: "+fmt.Sprintf("%#v", this.RateLimitChoice)+",\n")
	}
	if this.MaliciousUserMitigation != nil {
		s = append(s, "MaliciousUserMitigation: "+fmt.Sprintf("%#v", this.MaliciousUserMitigation)+",\n")
	}
	if this.WafExclusionRules != nil {
		s = append(s, "WafExclusionRules: "+fmt.Sprintf("%#v", this.WafExclusionRules)+",\n")
	}
	if this.BlockedClients != nil {
		s = append(s, "BlockedClients: "+fmt.Sprintf("%#v", this.BlockedClients)+",\n")
	}
	if this.TrustedClients != nil {
		s = append(s, "TrustedClients: "+fmt.Sprintf("%#v", this.TrustedClients)+",\n")
	}
	if this.ServicePolicyChoice != nil {
		s = append(s, "ServicePolicyChoice: "+fmt.Sprintf("%#v", this.ServicePolicyChoice)+",\n")
	}
	if this.HashPolicyChoice != nil {
		s = append(s, "HashPolicyChoice: "+fmt.Sprintf("%#v", this.HashPolicyChoice)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ReplaceSpecType_Http) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.ReplaceSpecType_Http{` +
		`Http:` + fmt.Sprintf("%#v", this.Http) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_HttpsAutoCert) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.ReplaceSpecType_HttpsAutoCert{` +
		`HttpsAutoCert:` + fmt.Sprintf("%#v", this.HttpsAutoCert) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_Https) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.ReplaceSpecType_Https{` +
		`Https:` + fmt.Sprintf("%#v", this.Https) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_DoNotAdvertise) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.ReplaceSpecType_DoNotAdvertise{` +
		`DoNotAdvertise:` + fmt.Sprintf("%#v", this.DoNotAdvertise) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_AdvertiseOnPublicDefaultVip) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.ReplaceSpecType_AdvertiseOnPublicDefaultVip{` +
		`AdvertiseOnPublicDefaultVip:` + fmt.Sprintf("%#v", this.AdvertiseOnPublicDefaultVip) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_AdvertiseOnPublic) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.ReplaceSpecType_AdvertiseOnPublic{` +
		`AdvertiseOnPublic:` + fmt.Sprintf("%#v", this.AdvertiseOnPublic) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_AdvertiseCustom) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.ReplaceSpecType_AdvertiseCustom{` +
		`AdvertiseCustom:` + fmt.Sprintf("%#v", this.AdvertiseCustom) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_DisableWaf) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.ReplaceSpecType_DisableWaf{` +
		`DisableWaf:` + fmt.Sprintf("%#v", this.DisableWaf) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_Waf) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.ReplaceSpecType_Waf{` +
		`Waf:` + fmt.Sprintf("%#v", this.Waf) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_WafRule) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.ReplaceSpecType_WafRule{` +
		`WafRule:` + fmt.Sprintf("%#v", this.WafRule) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_NoChallenge) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.ReplaceSpecType_NoChallenge{` +
		`NoChallenge:` + fmt.Sprintf("%#v", this.NoChallenge) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_JsChallenge) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.ReplaceSpecType_JsChallenge{` +
		`JsChallenge:` + fmt.Sprintf("%#v", this.JsChallenge) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_CaptchaChallenge) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.ReplaceSpecType_CaptchaChallenge{` +
		`CaptchaChallenge:` + fmt.Sprintf("%#v", this.CaptchaChallenge) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_PolicyBasedChallenge) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.ReplaceSpecType_PolicyBasedChallenge{` +
		`PolicyBasedChallenge:` + fmt.Sprintf("%#v", this.PolicyBasedChallenge) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_DisableRateLimit) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.ReplaceSpecType_DisableRateLimit{` +
		`DisableRateLimit:` + fmt.Sprintf("%#v", this.DisableRateLimit) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_RateLimit) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.ReplaceSpecType_RateLimit{` +
		`RateLimit:` + fmt.Sprintf("%#v", this.RateLimit) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_ServicePoliciesFromNamespace) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.ReplaceSpecType_ServicePoliciesFromNamespace{` +
		`ServicePoliciesFromNamespace:` + fmt.Sprintf("%#v", this.ServicePoliciesFromNamespace) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_NoServicePolicies) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.ReplaceSpecType_NoServicePolicies{` +
		`NoServicePolicies:` + fmt.Sprintf("%#v", this.NoServicePolicies) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_ActiveServicePolicies) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.ReplaceSpecType_ActiveServicePolicies{` +
		`ActiveServicePolicies:` + fmt.Sprintf("%#v", this.ActiveServicePolicies) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_RoundRobin) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.ReplaceSpecType_RoundRobin{` +
		`RoundRobin:` + fmt.Sprintf("%#v", this.RoundRobin) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_LeastActive) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.ReplaceSpecType_LeastActive{` +
		`LeastActive:` + fmt.Sprintf("%#v", this.LeastActive) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_Random) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.ReplaceSpecType_Random{` +
		`Random:` + fmt.Sprintf("%#v", this.Random) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_SourceIpStickiness) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.ReplaceSpecType_SourceIpStickiness{` +
		`SourceIpStickiness:` + fmt.Sprintf("%#v", this.SourceIpStickiness) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_CookieStickiness) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.ReplaceSpecType_CookieStickiness{` +
		`CookieStickiness:` + fmt.Sprintf("%#v", this.CookieStickiness) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_RingHash) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.ReplaceSpecType_RingHash{` +
		`RingHash:` + fmt.Sprintf("%#v", this.RingHash) + `}`}, ", ")
	return s
}
func (this *GetSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 45)
	s = append(s, "&http_loadbalancer.GetSpecType{")
	s = append(s, "Domains: "+fmt.Sprintf("%#v", this.Domains)+",\n")
	if this.LoadbalancerType != nil {
		s = append(s, "LoadbalancerType: "+fmt.Sprintf("%#v", this.LoadbalancerType)+",\n")
	}
	if this.AdvertiseChoice != nil {
		s = append(s, "AdvertiseChoice: "+fmt.Sprintf("%#v", this.AdvertiseChoice)+",\n")
	}
	if this.DefaultRoutePools != nil {
		s = append(s, "DefaultRoutePools: "+fmt.Sprintf("%#v", this.DefaultRoutePools)+",\n")
	}
	if this.Routes != nil {
		s = append(s, "Routes: "+fmt.Sprintf("%#v", this.Routes)+",\n")
	}
	if this.CorsPolicy != nil {
		s = append(s, "CorsPolicy: "+fmt.Sprintf("%#v", this.CorsPolicy)+",\n")
	}
	if this.WafChoice != nil {
		s = append(s, "WafChoice: "+fmt.Sprintf("%#v", this.WafChoice)+",\n")
	}
	s = append(s, "AddLocation: "+fmt.Sprintf("%#v", this.AddLocation)+",\n")
	if this.ChallengeType != nil {
		s = append(s, "ChallengeType: "+fmt.Sprintf("%#v", this.ChallengeType)+",\n")
	}
	if this.MoreOption != nil {
		s = append(s, "MoreOption: "+fmt.Sprintf("%#v", this.MoreOption)+",\n")
	}
	if this.UserIdentification != nil {
		s = append(s, "UserIdentification: "+fmt.Sprintf("%#v", this.UserIdentification)+",\n")
	}
	if this.RateLimitChoice != nil {
		s = append(s, "RateLimitChoice: "+fmt.Sprintf("%#v", this.RateLimitChoice)+",\n")
	}
	if this.MaliciousUserMitigation != nil {
		s = append(s, "MaliciousUserMitigation: "+fmt.Sprintf("%#v", this.MaliciousUserMitigation)+",\n")
	}
	if this.WafExclusionRules != nil {
		s = append(s, "WafExclusionRules: "+fmt.Sprintf("%#v", this.WafExclusionRules)+",\n")
	}
	if this.BlockedClients != nil {
		s = append(s, "BlockedClients: "+fmt.Sprintf("%#v", this.BlockedClients)+",\n")
	}
	if this.TrustedClients != nil {
		s = append(s, "TrustedClients: "+fmt.Sprintf("%#v", this.TrustedClients)+",\n")
	}
	if this.ServicePolicyChoice != nil {
		s = append(s, "ServicePolicyChoice: "+fmt.Sprintf("%#v", this.ServicePolicyChoice)+",\n")
	}
	if this.HashPolicyChoice != nil {
		s = append(s, "HashPolicyChoice: "+fmt.Sprintf("%#v", this.HashPolicyChoice)+",\n")
	}
	s = append(s, "HostName: "+fmt.Sprintf("%#v", this.HostName)+",\n")
	if this.DnsInfo != nil {
		s = append(s, "DnsInfo: "+fmt.Sprintf("%#v", this.DnsInfo)+",\n")
	}
	s = append(s, "State: "+fmt.Sprintf("%#v", this.State)+",\n")
	s = append(s, "AutoCertState: "+fmt.Sprintf("%#v", this.AutoCertState)+",\n")
	if this.AutoCertInfo != nil {
		s = append(s, "AutoCertInfo: "+fmt.Sprintf("%#v", this.AutoCertInfo)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetSpecType_Http) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.GetSpecType_Http{` +
		`Http:` + fmt.Sprintf("%#v", this.Http) + `}`}, ", ")
	return s
}
func (this *GetSpecType_HttpsAutoCert) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.GetSpecType_HttpsAutoCert{` +
		`HttpsAutoCert:` + fmt.Sprintf("%#v", this.HttpsAutoCert) + `}`}, ", ")
	return s
}
func (this *GetSpecType_Https) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.GetSpecType_Https{` +
		`Https:` + fmt.Sprintf("%#v", this.Https) + `}`}, ", ")
	return s
}
func (this *GetSpecType_DoNotAdvertise) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.GetSpecType_DoNotAdvertise{` +
		`DoNotAdvertise:` + fmt.Sprintf("%#v", this.DoNotAdvertise) + `}`}, ", ")
	return s
}
func (this *GetSpecType_AdvertiseOnPublicDefaultVip) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.GetSpecType_AdvertiseOnPublicDefaultVip{` +
		`AdvertiseOnPublicDefaultVip:` + fmt.Sprintf("%#v", this.AdvertiseOnPublicDefaultVip) + `}`}, ", ")
	return s
}
func (this *GetSpecType_AdvertiseOnPublic) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.GetSpecType_AdvertiseOnPublic{` +
		`AdvertiseOnPublic:` + fmt.Sprintf("%#v", this.AdvertiseOnPublic) + `}`}, ", ")
	return s
}
func (this *GetSpecType_AdvertiseCustom) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.GetSpecType_AdvertiseCustom{` +
		`AdvertiseCustom:` + fmt.Sprintf("%#v", this.AdvertiseCustom) + `}`}, ", ")
	return s
}
func (this *GetSpecType_DisableWaf) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.GetSpecType_DisableWaf{` +
		`DisableWaf:` + fmt.Sprintf("%#v", this.DisableWaf) + `}`}, ", ")
	return s
}
func (this *GetSpecType_Waf) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.GetSpecType_Waf{` +
		`Waf:` + fmt.Sprintf("%#v", this.Waf) + `}`}, ", ")
	return s
}
func (this *GetSpecType_WafRule) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.GetSpecType_WafRule{` +
		`WafRule:` + fmt.Sprintf("%#v", this.WafRule) + `}`}, ", ")
	return s
}
func (this *GetSpecType_NoChallenge) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.GetSpecType_NoChallenge{` +
		`NoChallenge:` + fmt.Sprintf("%#v", this.NoChallenge) + `}`}, ", ")
	return s
}
func (this *GetSpecType_JsChallenge) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.GetSpecType_JsChallenge{` +
		`JsChallenge:` + fmt.Sprintf("%#v", this.JsChallenge) + `}`}, ", ")
	return s
}
func (this *GetSpecType_CaptchaChallenge) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.GetSpecType_CaptchaChallenge{` +
		`CaptchaChallenge:` + fmt.Sprintf("%#v", this.CaptchaChallenge) + `}`}, ", ")
	return s
}
func (this *GetSpecType_PolicyBasedChallenge) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.GetSpecType_PolicyBasedChallenge{` +
		`PolicyBasedChallenge:` + fmt.Sprintf("%#v", this.PolicyBasedChallenge) + `}`}, ", ")
	return s
}
func (this *GetSpecType_DisableRateLimit) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.GetSpecType_DisableRateLimit{` +
		`DisableRateLimit:` + fmt.Sprintf("%#v", this.DisableRateLimit) + `}`}, ", ")
	return s
}
func (this *GetSpecType_RateLimit) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.GetSpecType_RateLimit{` +
		`RateLimit:` + fmt.Sprintf("%#v", this.RateLimit) + `}`}, ", ")
	return s
}
func (this *GetSpecType_ServicePoliciesFromNamespace) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.GetSpecType_ServicePoliciesFromNamespace{` +
		`ServicePoliciesFromNamespace:` + fmt.Sprintf("%#v", this.ServicePoliciesFromNamespace) + `}`}, ", ")
	return s
}
func (this *GetSpecType_NoServicePolicies) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.GetSpecType_NoServicePolicies{` +
		`NoServicePolicies:` + fmt.Sprintf("%#v", this.NoServicePolicies) + `}`}, ", ")
	return s
}
func (this *GetSpecType_ActiveServicePolicies) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.GetSpecType_ActiveServicePolicies{` +
		`ActiveServicePolicies:` + fmt.Sprintf("%#v", this.ActiveServicePolicies) + `}`}, ", ")
	return s
}
func (this *GetSpecType_RoundRobin) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.GetSpecType_RoundRobin{` +
		`RoundRobin:` + fmt.Sprintf("%#v", this.RoundRobin) + `}`}, ", ")
	return s
}
func (this *GetSpecType_LeastActive) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.GetSpecType_LeastActive{` +
		`LeastActive:` + fmt.Sprintf("%#v", this.LeastActive) + `}`}, ", ")
	return s
}
func (this *GetSpecType_Random) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.GetSpecType_Random{` +
		`Random:` + fmt.Sprintf("%#v", this.Random) + `}`}, ", ")
	return s
}
func (this *GetSpecType_SourceIpStickiness) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.GetSpecType_SourceIpStickiness{` +
		`SourceIpStickiness:` + fmt.Sprintf("%#v", this.SourceIpStickiness) + `}`}, ", ")
	return s
}
func (this *GetSpecType_CookieStickiness) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.GetSpecType_CookieStickiness{` +
		`CookieStickiness:` + fmt.Sprintf("%#v", this.CookieStickiness) + `}`}, ", ")
	return s
}
func (this *GetSpecType_RingHash) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.GetSpecType_RingHash{` +
		`RingHash:` + fmt.Sprintf("%#v", this.RingHash) + `}`}, ", ")
	return s
}
func valueToGoStringTypes(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *DownstreamTlsValidationContext) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DownstreamTlsValidationContext) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.TrustedCaUrl) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTypes(dAtA, i, uint64(len(m.TrustedCaUrl)))
		i += copy(dAtA[i:], m.TrustedCaUrl)
	}
	return i, nil
}

func (m *DownstreamTlsParamsType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DownstreamTlsParamsType) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.TlsConfig != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.TlsConfig.Size()))
		n1, err := m.TlsConfig.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if len(m.TlsCertificates) > 0 {
		for _, msg := range m.TlsCertificates {
			dAtA[i] = 0x12
			i++
			i = encodeVarintTypes(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.MtlsChoice != nil {
		nn2, err := m.MtlsChoice.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn2
	}
	return i, nil
}

func (m *DownstreamTlsParamsType_NoMtls) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.NoMtls != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.NoMtls.Size()))
		n3, err := m.NoMtls.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	return i, nil
}
func (m *DownstreamTlsParamsType_UseMtls) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.UseMtls != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.UseMtls.Size()))
		n4, err := m.UseMtls.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	return i, nil
}
func (m *ProxyTypeHttps) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProxyTypeHttps) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.HttpRedirect {
		dAtA[i] = 0x8
		i++
		if m.HttpRedirect {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.AddHsts {
		dAtA[i] = 0x10
		i++
		if m.AddHsts {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.TlsParameters != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.TlsParameters.Size()))
		n5, err := m.TlsParameters.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	if m.ServerHeaderChoice != nil {
		nn6, err := m.ServerHeaderChoice.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn6
	}
	return i, nil
}

func (m *ProxyTypeHttps_DefaultHeader) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.DefaultHeader != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.DefaultHeader.Size()))
		n7, err := m.DefaultHeader.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	return i, nil
}
func (m *ProxyTypeHttps_ServerName) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x32
	i++
	i = encodeVarintTypes(dAtA, i, uint64(len(m.ServerName)))
	i += copy(dAtA[i:], m.ServerName)
	return i, nil
}
func (m *ProxyTypeHttps_AppendServerName) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x3a
	i++
	i = encodeVarintTypes(dAtA, i, uint64(len(m.AppendServerName)))
	i += copy(dAtA[i:], m.AppendServerName)
	return i, nil
}
func (m *ProxyTypeHttps_PassThrough) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.PassThrough != nil {
		dAtA[i] = 0x42
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.PassThrough.Size()))
		n8, err := m.PassThrough.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n8
	}
	return i, nil
}
func (m *ProxyTypeHttp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProxyTypeHttp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.DnsVolterraManaged {
		dAtA[i] = 0x8
		i++
		if m.DnsVolterraManaged {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *ProxyTypeHttpsAutoCerts) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProxyTypeHttpsAutoCerts) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.HttpRedirect {
		dAtA[i] = 0x8
		i++
		if m.HttpRedirect {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.AddHsts {
		dAtA[i] = 0x10
		i++
		if m.AddHsts {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.TlsConfig != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.TlsConfig.Size()))
		n9, err := m.TlsConfig.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n9
	}
	if m.MtlsChoice != nil {
		nn10, err := m.MtlsChoice.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn10
	}
	if m.ServerHeaderChoice != nil {
		nn11, err := m.ServerHeaderChoice.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn11
	}
	return i, nil
}

func (m *ProxyTypeHttpsAutoCerts_NoMtls) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.NoMtls != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.NoMtls.Size()))
		n12, err := m.NoMtls.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n12
	}
	return i, nil
}
func (m *ProxyTypeHttpsAutoCerts_UseMtls) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.UseMtls != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.UseMtls.Size()))
		n13, err := m.UseMtls.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n13
	}
	return i, nil
}
func (m *ProxyTypeHttpsAutoCerts_DefaultHeader) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.DefaultHeader != nil {
		dAtA[i] = 0x42
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.DefaultHeader.Size()))
		n14, err := m.DefaultHeader.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n14
	}
	return i, nil
}
func (m *ProxyTypeHttpsAutoCerts_ServerName) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x4a
	i++
	i = encodeVarintTypes(dAtA, i, uint64(len(m.ServerName)))
	i += copy(dAtA[i:], m.ServerName)
	return i, nil
}
func (m *ProxyTypeHttpsAutoCerts_AppendServerName) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x52
	i++
	i = encodeVarintTypes(dAtA, i, uint64(len(m.AppendServerName)))
	i += copy(dAtA[i:], m.AppendServerName)
	return i, nil
}
func (m *ProxyTypeHttpsAutoCerts_PassThrough) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.PassThrough != nil {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.PassThrough.Size()))
		n15, err := m.PassThrough.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n15
	}
	return i, nil
}
func (m *HashPolicyListType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HashPolicyListType) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.HashPolicy) > 0 {
		for _, msg := range m.HashPolicy {
			dAtA[i] = 0x82
			i++
			dAtA[i] = 0x1
			i++
			i = encodeVarintTypes(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *MirrorPolicyType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MirrorPolicyType) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.OriginPool != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.OriginPool.Size()))
		n16, err := m.OriginPool.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n16
	}
	if m.Percent != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.Percent.Size()))
		n17, err := m.Percent.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n17
	}
	return i, nil
}

func (m *RouteSimpleAdvancedOptions) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RouteSimpleAdvancedOptions) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.HashPolicyChoice != nil {
		nn18, err := m.HashPolicyChoice.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn18
	}
	if m.Priority != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.Priority))
	}
	if len(m.EndpointSubsets) > 0 {
		keysForEndpointSubsets := make([]string, 0, len(m.EndpointSubsets))
		for k, _ := range m.EndpointSubsets {
			keysForEndpointSubsets = append(keysForEndpointSubsets, string(k))
		}
		sortkeys.Strings(keysForEndpointSubsets)
		for _, k := range keysForEndpointSubsets {
			dAtA[i] = 0x2a
			i++
			v := m.EndpointSubsets[string(k)]
			mapSize := 1 + len(k) + sovTypes(uint64(len(k))) + 1 + len(v) + sovTypes(uint64(len(v)))
			i = encodeVarintTypes(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintTypes(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			dAtA[i] = 0x12
			i++
			i = encodeVarintTypes(dAtA, i, uint64(len(v)))
			i += copy(dAtA[i:], v)
		}
	}
	if m.RewriteChoice != nil {
		nn19, err := m.RewriteChoice.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn19
	}
	if len(m.RequestHeadersToAdd) > 0 {
		for _, msg := range m.RequestHeadersToAdd {
			dAtA[i] = 0x4a
			i++
			i = encodeVarintTypes(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.RequestHeadersToRemove) > 0 {
		for _, s := range m.RequestHeadersToRemove {
			dAtA[i] = 0x52
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.ResponseHeadersToAdd) > 0 {
		for _, msg := range m.ResponseHeadersToAdd {
			dAtA[i] = 0x5a
			i++
			i = encodeVarintTypes(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.ResponseHeadersToRemove) > 0 {
		for _, s := range m.ResponseHeadersToRemove {
			dAtA[i] = 0x62
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if m.DisableLocationAdd {
		dAtA[i] = 0x68
		i++
		if m.DisableLocationAdd {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.WafChoice != nil {
		nn20, err := m.WafChoice.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn20
	}
	if m.CorsPolicy != nil {
		dAtA[i] = 0x92
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.CorsPolicy.Size()))
		n21, err := m.CorsPolicy.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n21
	}
	if m.SpdyChoice != nil {
		nn22, err := m.SpdyChoice.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn22
	}
	if m.WebsocketChoice != nil {
		nn23, err := m.WebsocketChoice.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn23
	}
	if m.RetryPolicyChoice != nil {
		nn24, err := m.RetryPolicyChoice.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn24
	}
	if m.Timeout != 0 {
		dAtA[i] = 0xe0
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.Timeout))
	}
	if m.BufferChoice != nil {
		nn25, err := m.BufferChoice.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn25
	}
	if m.MirroringChoice != nil {
		nn26, err := m.MirroringChoice.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn26
	}
	if m.ClusterRetractChoice != nil {
		nn27, err := m.ClusterRetractChoice.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn27
	}
	return i, nil
}

func (m *RouteSimpleAdvancedOptions_CommonHashPolicy) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.CommonHashPolicy != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.CommonHashPolicy.Size()))
		n28, err := m.CommonHashPolicy.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n28
	}
	return i, nil
}
func (m *RouteSimpleAdvancedOptions_SpecificHashPolicy) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.SpecificHashPolicy != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.SpecificHashPolicy.Size()))
		n29, err := m.SpecificHashPolicy.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n29
	}
	return i, nil
}
func (m *RouteSimpleAdvancedOptions_DisablePrefixRewrite) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.DisablePrefixRewrite != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.DisablePrefixRewrite.Size()))
		n30, err := m.DisablePrefixRewrite.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n30
	}
	return i, nil
}
func (m *RouteSimpleAdvancedOptions_PrefixRewrite) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x42
	i++
	i = encodeVarintTypes(dAtA, i, uint64(len(m.PrefixRewrite)))
	i += copy(dAtA[i:], m.PrefixRewrite)
	return i, nil
}
func (m *RouteSimpleAdvancedOptions_DisableWaf) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.DisableWaf != nil {
		dAtA[i] = 0x7a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.DisableWaf.Size()))
		n31, err := m.DisableWaf.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n31
	}
	return i, nil
}
func (m *RouteSimpleAdvancedOptions_Waf) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Waf != nil {
		dAtA[i] = 0x82
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.Waf.Size()))
		n32, err := m.Waf.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n32
	}
	return i, nil
}
func (m *RouteSimpleAdvancedOptions_WafRule) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.WafRule != nil {
		dAtA[i] = 0x8a
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.WafRule.Size()))
		n33, err := m.WafRule.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n33
	}
	return i, nil
}
func (m *RouteSimpleAdvancedOptions_DisableSpdy) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.DisableSpdy != nil {
		dAtA[i] = 0xa2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.DisableSpdy.Size()))
		n34, err := m.DisableSpdy.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n34
	}
	return i, nil
}
func (m *RouteSimpleAdvancedOptions_EnableSpdy) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.EnableSpdy != nil {
		dAtA[i] = 0xaa
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.EnableSpdy.Size()))
		n35, err := m.EnableSpdy.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n35
	}
	return i, nil
}
func (m *RouteSimpleAdvancedOptions_DisableWebSocketConfig) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.DisableWebSocketConfig != nil {
		dAtA[i] = 0xba
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.DisableWebSocketConfig.Size()))
		n36, err := m.DisableWebSocketConfig.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n36
	}
	return i, nil
}
func (m *RouteSimpleAdvancedOptions_WebSocketConfig) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.WebSocketConfig != nil {
		dAtA[i] = 0xc2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.WebSocketConfig.Size()))
		n37, err := m.WebSocketConfig.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n37
	}
	return i, nil
}
func (m *RouteSimpleAdvancedOptions_DefaultRetryPolicy) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.DefaultRetryPolicy != nil {
		dAtA[i] = 0xd2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.DefaultRetryPolicy.Size()))
		n38, err := m.DefaultRetryPolicy.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n38
	}
	return i, nil
}
func (m *RouteSimpleAdvancedOptions_RetryPolicy) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.RetryPolicy != nil {
		dAtA[i] = 0xda
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.RetryPolicy.Size()))
		n39, err := m.RetryPolicy.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n39
	}
	return i, nil
}
func (m *RouteSimpleAdvancedOptions_CommonBuffering) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.CommonBuffering != nil {
		dAtA[i] = 0xf2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.CommonBuffering.Size()))
		n40, err := m.CommonBuffering.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n40
	}
	return i, nil
}
func (m *RouteSimpleAdvancedOptions_BufferPolicy) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.BufferPolicy != nil {
		dAtA[i] = 0xfa
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.BufferPolicy.Size()))
		n41, err := m.BufferPolicy.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n41
	}
	return i, nil
}
func (m *RouteSimpleAdvancedOptions_DisableMirroring) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.DisableMirroring != nil {
		dAtA[i] = 0x8a
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.DisableMirroring.Size()))
		n42, err := m.DisableMirroring.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n42
	}
	return i, nil
}
func (m *RouteSimpleAdvancedOptions_MirrorPolicy) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.MirrorPolicy != nil {
		dAtA[i] = 0x92
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.MirrorPolicy.Size()))
		n43, err := m.MirrorPolicy.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n43
	}
	return i, nil
}
func (m *RouteSimpleAdvancedOptions_RetractCluster) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.RetractCluster != nil {
		dAtA[i] = 0xa2
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.RetractCluster.Size()))
		n44, err := m.RetractCluster.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n44
	}
	return i, nil
}
func (m *RouteSimpleAdvancedOptions_DoNotRetractCluster) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.DoNotRetractCluster != nil {
		dAtA[i] = 0xaa
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.DoNotRetractCluster.Size()))
		n45, err := m.DoNotRetractCluster.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n45
	}
	return i, nil
}
func (m *RouteTypeSimpleWithDefaultOriginPool) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RouteTypeSimpleWithDefaultOriginPool) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.HttpMethod != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.HttpMethod))
	}
	if m.Path != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.Path.Size()))
		n46, err := m.Path.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n46
	}
	if m.HostRewriteParams != nil {
		nn47, err := m.HostRewriteParams.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn47
	}
	return i, nil
}

func (m *RouteTypeSimpleWithDefaultOriginPool_AutoHostRewrite) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.AutoHostRewrite != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.AutoHostRewrite.Size()))
		n48, err := m.AutoHostRewrite.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n48
	}
	return i, nil
}
func (m *RouteTypeSimpleWithDefaultOriginPool_HostRewrite) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x2a
	i++
	i = encodeVarintTypes(dAtA, i, uint64(len(m.HostRewrite)))
	i += copy(dAtA[i:], m.HostRewrite)
	return i, nil
}
func (m *RouteTypeSimpleWithDefaultOriginPool_DisableHostRewrite) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.DisableHostRewrite != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.DisableHostRewrite.Size()))
		n49, err := m.DisableHostRewrite.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n49
	}
	return i, nil
}
func (m *RouteTypeSimple) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RouteTypeSimple) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Path != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.Path.Size()))
		n50, err := m.Path.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n50
	}
	if m.HttpMethod != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.HttpMethod))
	}
	if len(m.OriginPools) > 0 {
		for _, msg := range m.OriginPools {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintTypes(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.HostRewriteParams != nil {
		nn51, err := m.HostRewriteParams.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn51
	}
	if m.AdvancedOptions != nil {
		dAtA[i] = 0x42
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.AdvancedOptions.Size()))
		n52, err := m.AdvancedOptions.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n52
	}
	return i, nil
}

func (m *RouteTypeSimple_AutoHostRewrite) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.AutoHostRewrite != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.AutoHostRewrite.Size()))
		n53, err := m.AutoHostRewrite.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n53
	}
	return i, nil
}
func (m *RouteTypeSimple_HostRewrite) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x32
	i++
	i = encodeVarintTypes(dAtA, i, uint64(len(m.HostRewrite)))
	i += copy(dAtA[i:], m.HostRewrite)
	return i, nil
}
func (m *RouteTypeSimple_DisableHostRewrite) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.DisableHostRewrite != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.DisableHostRewrite.Size()))
		n54, err := m.DisableHostRewrite.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n54
	}
	return i, nil
}
func (m *RouteTypeRedirect) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RouteTypeRedirect) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Path != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.Path.Size()))
		n55, err := m.Path.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n55
	}
	if m.HttpMethod != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.HttpMethod))
	}
	if m.RouteRedirect != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.RouteRedirect.Size()))
		n56, err := m.RouteRedirect.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n56
	}
	return i, nil
}

func (m *RouteTypeDirectResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RouteTypeDirectResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Path != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.Path.Size()))
		n57, err := m.Path.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n57
	}
	if m.HttpMethod != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.HttpMethod))
	}
	if m.RouteDirectResponse != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.RouteDirectResponse.Size()))
		n58, err := m.RouteDirectResponse.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n58
	}
	return i, nil
}

func (m *RouteTypeCustomRoute) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RouteTypeCustomRoute) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.RouteRef != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.RouteRef.Size()))
		n59, err := m.RouteRef.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n59
	}
	return i, nil
}

func (m *RouteType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RouteType) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Choice != nil {
		nn60, err := m.Choice.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn60
	}
	return i, nil
}

func (m *RouteType_SimpleRoute) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.SimpleRoute != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.SimpleRoute.Size()))
		n61, err := m.SimpleRoute.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n61
	}
	return i, nil
}
func (m *RouteType_RedirectRoute) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.RedirectRoute != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.RedirectRoute.Size()))
		n62, err := m.RedirectRoute.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n62
	}
	return i, nil
}
func (m *RouteType_DirectResponseRoute) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.DirectResponseRoute != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.DirectResponseRoute.Size()))
		n63, err := m.DirectResponseRoute.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n63
	}
	return i, nil
}
func (m *RouteType_CustomRouteObject) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.CustomRouteObject != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.CustomRouteObject.Size()))
		n64, err := m.CustomRouteObject.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n64
	}
	return i, nil
}
func (m *AdvancedOptionsType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AdvancedOptionsType) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.RequestHeadersToAdd) > 0 {
		for _, msg := range m.RequestHeadersToAdd {
			dAtA[i] = 0xa
			i++
			i = encodeVarintTypes(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.RequestHeadersToRemove) > 0 {
		for _, s := range m.RequestHeadersToRemove {
			dAtA[i] = 0x12
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.ResponseHeadersToAdd) > 0 {
		for _, msg := range m.ResponseHeadersToAdd {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintTypes(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.ResponseHeadersToRemove) > 0 {
		for _, s := range m.ResponseHeadersToRemove {
			dAtA[i] = 0x22
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if m.MaxRequestHeaderSize != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.MaxRequestHeaderSize))
	}
	if m.BufferPolicy != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.BufferPolicy.Size()))
		n65, err := m.BufferPolicy.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n65
	}
	if m.CompressionParams != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.CompressionParams.Size()))
		n66, err := m.CompressionParams.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n66
	}
	if len(m.CustomErrors) > 0 {
		keysForCustomErrors := make([]uint32, 0, len(m.CustomErrors))
		for k, _ := range m.CustomErrors {
			keysForCustomErrors = append(keysForCustomErrors, uint32(k))
		}
		sortkeys.Uint32s(keysForCustomErrors)
		for _, k := range keysForCustomErrors {
			dAtA[i] = 0x42
			i++
			v := m.CustomErrors[uint32(k)]
			mapSize := 1 + sovTypes(uint64(k)) + 1 + len(v) + sovTypes(uint64(len(v)))
			i = encodeVarintTypes(dAtA, i, uint64(mapSize))
			dAtA[i] = 0x8
			i++
			i = encodeVarintTypes(dAtA, i, uint64(k))
			dAtA[i] = 0x12
			i++
			i = encodeVarintTypes(dAtA, i, uint64(len(v)))
			i += copy(dAtA[i:], v)
		}
	}
	if m.JavascriptInfo != nil {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.JavascriptInfo.Size()))
		n67, err := m.JavascriptInfo.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n67
	}
	if len(m.Jwt) > 0 {
		for _, msg := range m.Jwt {
			dAtA[i] = 0x52
			i++
			i = encodeVarintTypes(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.IdleTimeout != 0 {
		dAtA[i] = 0x58
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.IdleTimeout))
	}
	if m.DisableDefaultErrorPages {
		dAtA[i] = 0x68
		i++
		if m.DisableDefaultErrorPages {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *PolicyBasedChallenge) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PolicyBasedChallenge) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.JsChallengeParametersChoice != nil {
		nn68, err := m.JsChallengeParametersChoice.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn68
	}
	if m.CaptchaChallengeParametersChoice != nil {
		nn69, err := m.CaptchaChallengeParametersChoice.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn69
	}
	if m.TemporaryBlockingParametersChoice != nil {
		nn70, err := m.TemporaryBlockingParametersChoice.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn70
	}
	if m.MaliciousUserMitigationChoice != nil {
		nn71, err := m.MaliciousUserMitigationChoice.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn71
	}
	if m.ChallengeChoice != nil {
		nn72, err := m.ChallengeChoice.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn72
	}
	if m.RuleList != nil {
		dAtA[i] = 0x92
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.RuleList.Size()))
		n73, err := m.RuleList.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n73
	}
	return i, nil
}

func (m *PolicyBasedChallenge_DefaultJsChallengeParameters) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.DefaultJsChallengeParameters != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.DefaultJsChallengeParameters.Size()))
		n74, err := m.DefaultJsChallengeParameters.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n74
	}
	return i, nil
}
func (m *PolicyBasedChallenge_JsChallengeParameters) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.JsChallengeParameters != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.JsChallengeParameters.Size()))
		n75, err := m.JsChallengeParameters.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n75
	}
	return i, nil
}
func (m *PolicyBasedChallenge_DefaultCaptchaChallengeParameters) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.DefaultCaptchaChallengeParameters != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.DefaultCaptchaChallengeParameters.Size()))
		n76, err := m.DefaultCaptchaChallengeParameters.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n76
	}
	return i, nil
}
func (m *PolicyBasedChallenge_CaptchaChallengeParameters) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.CaptchaChallengeParameters != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.CaptchaChallengeParameters.Size()))
		n77, err := m.CaptchaChallengeParameters.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n77
	}
	return i, nil
}
func (m *PolicyBasedChallenge_DefaultTemporaryBlockingParameters) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.DefaultTemporaryBlockingParameters != nil {
		dAtA[i] = 0x42
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.DefaultTemporaryBlockingParameters.Size()))
		n78, err := m.DefaultTemporaryBlockingParameters.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n78
	}
	return i, nil
}
func (m *PolicyBasedChallenge_TemporaryUserBlocking) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.TemporaryUserBlocking != nil {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.TemporaryUserBlocking.Size()))
		n79, err := m.TemporaryUserBlocking.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n79
	}
	return i, nil
}
func (m *PolicyBasedChallenge_DefaultMitigationSettings) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.DefaultMitigationSettings != nil {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.DefaultMitigationSettings.Size()))
		n80, err := m.DefaultMitigationSettings.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n80
	}
	return i, nil
}
func (m *PolicyBasedChallenge_MaliciousUserMitigation) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.MaliciousUserMitigation != nil {
		dAtA[i] = 0x62
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.MaliciousUserMitigation.Size()))
		n81, err := m.MaliciousUserMitigation.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n81
	}
	return i, nil
}
func (m *PolicyBasedChallenge_NoChallenge) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.NoChallenge != nil {
		dAtA[i] = 0x72
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.NoChallenge.Size()))
		n82, err := m.NoChallenge.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n82
	}
	return i, nil
}
func (m *PolicyBasedChallenge_AlwaysEnableJsChallenge) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.AlwaysEnableJsChallenge != nil {
		dAtA[i] = 0x7a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.AlwaysEnableJsChallenge.Size()))
		n83, err := m.AlwaysEnableJsChallenge.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n83
	}
	return i, nil
}
func (m *PolicyBasedChallenge_AlwaysEnableCaptchaChallenge) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.AlwaysEnableCaptchaChallenge != nil {
		dAtA[i] = 0x82
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.AlwaysEnableCaptchaChallenge.Size()))
		n84, err := m.AlwaysEnableCaptchaChallenge.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n84
	}
	return i, nil
}
func (m *ChallengeRule) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChallengeRule) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Metadata != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.Metadata.Size()))
		n85, err := m.Metadata.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n85
	}
	if m.Spec != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.Spec.Size()))
		n86, err := m.Spec.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n86
	}
	return i, nil
}

func (m *ChallengeRuleList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChallengeRuleList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Rules) > 0 {
		for _, msg := range m.Rules {
			dAtA[i] = 0x12
			i++
			i = encodeVarintTypes(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *SimpleClientSrcRule) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SimpleClientSrcRule) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ClientSourceChoice != nil {
		nn87, err := m.ClientSourceChoice.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn87
	}
	if m.ExpirationTimestamp != nil {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.ExpirationTimestamp.Size()))
		n88, err := m.ExpirationTimestamp.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n88
	}
	if m.Metadata != nil {
		dAtA[i] = 0x52
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.Metadata.Size()))
		n89, err := m.Metadata.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n89
	}
	return i, nil
}

func (m *SimpleClientSrcRule_IpPrefix) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x22
	i++
	i = encodeVarintTypes(dAtA, i, uint64(len(m.IpPrefix)))
	i += copy(dAtA[i:], m.IpPrefix)
	return i, nil
}
func (m *SimpleClientSrcRule_AsNumber) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x28
	i++
	i = encodeVarintTypes(dAtA, i, uint64(m.AsNumber))
	return i, nil
}
func (m *CustomIpAllowedList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CustomIpAllowedList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.RateLimiterAllowedPrefixes) > 0 {
		for _, msg := range m.RateLimiterAllowedPrefixes {
			dAtA[i] = 0xb2
			i++
			dAtA[i] = 0x1
			i++
			i = encodeVarintTypes(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *RateLimitConfigType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RateLimitConfigType) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.RateLimiter != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.RateLimiter.Size()))
		n90, err := m.RateLimiter.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n90
	}
	if m.IpAllowedListChoice != nil {
		nn91, err := m.IpAllowedListChoice.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn91
	}
	if m.PolicyChoice != nil {
		nn92, err := m.PolicyChoice.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn92
	}
	return i, nil
}

func (m *RateLimitConfigType_NoIpAllowedList) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.NoIpAllowedList != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.NoIpAllowedList.Size()))
		n93, err := m.NoIpAllowedList.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n93
	}
	return i, nil
}
func (m *RateLimitConfigType_IpAllowedList) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.IpAllowedList != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.IpAllowedList.Size()))
		n94, err := m.IpAllowedList.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n94
	}
	return i, nil
}
func (m *RateLimitConfigType_CustomIpAllowedList) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.CustomIpAllowedList != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.CustomIpAllowedList.Size()))
		n95, err := m.CustomIpAllowedList.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n95
	}
	return i, nil
}
func (m *RateLimitConfigType_NoPolicies) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.NoPolicies != nil {
		dAtA[i] = 0x62
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.NoPolicies.Size()))
		n96, err := m.NoPolicies.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n96
	}
	return i, nil
}
func (m *RateLimitConfigType_Policies) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Policies != nil {
		dAtA[i] = 0x6a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.Policies.Size()))
		n97, err := m.Policies.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n97
	}
	return i, nil
}
func (m *ServicePolicyList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ServicePolicyList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Policies) > 0 {
		for _, msg := range m.Policies {
			dAtA[i] = 0xa
			i++
			i = encodeVarintTypes(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *GlobalSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GlobalSpecType) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Domains) > 0 {
		for _, s := range m.Domains {
			dAtA[i] = 0xa
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if m.LoadbalancerType != nil {
		nn98, err := m.LoadbalancerType.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn98
	}
	if m.AdvertiseChoice != nil {
		nn99, err := m.AdvertiseChoice.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn99
	}
	if len(m.DefaultRoutePools) > 0 {
		for _, msg := range m.DefaultRoutePools {
			dAtA[i] = 0x32
			i++
			i = encodeVarintTypes(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Routes) > 0 {
		for _, msg := range m.Routes {
			dAtA[i] = 0x3a
			i++
			i = encodeVarintTypes(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.CorsPolicy != nil {
		dAtA[i] = 0x42
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.CorsPolicy.Size()))
		n100, err := m.CorsPolicy.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n100
	}
	if m.WafChoice != nil {
		nn101, err := m.WafChoice.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn101
	}
	if m.AddLocation {
		dAtA[i] = 0x88
		i++
		dAtA[i] = 0x1
		i++
		if m.AddLocation {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.ChallengeType != nil {
		nn102, err := m.ChallengeType.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn102
	}
	if m.MoreOption != nil {
		dAtA[i] = 0x9a
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.MoreOption.Size()))
		n103, err := m.MoreOption.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n103
	}
	if m.UserIdentification != nil {
		dAtA[i] = 0xa2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.UserIdentification.Size()))
		n104, err := m.UserIdentification.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n104
	}
	if m.RateLimitChoice != nil {
		nn105, err := m.RateLimitChoice.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn105
	}
	if m.HostRewriteParams != nil {
		nn106, err := m.HostRewriteParams.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn106
	}
	if m.MaliciousUserMitigation != nil {
		dAtA[i] = 0x82
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.MaliciousUserMitigation.Size()))
		n107, err := m.MaliciousUserMitigation.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n107
	}
	if len(m.WafExclusionRules) > 0 {
		for _, msg := range m.WafExclusionRules {
			dAtA[i] = 0x8a
			i++
			dAtA[i] = 0x2
			i++
			i = encodeVarintTypes(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.BlockedClients) > 0 {
		for _, msg := range m.BlockedClients {
			dAtA[i] = 0x92
			i++
			dAtA[i] = 0x2
			i++
			i = encodeVarintTypes(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.TrustedClients) > 0 {
		for _, msg := range m.TrustedClients {
			dAtA[i] = 0x9a
			i++
			dAtA[i] = 0x2
			i++
			i = encodeVarintTypes(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.ServicePolicyChoice != nil {
		nn108, err := m.ServicePolicyChoice.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn108
	}
	if m.HashPolicyChoice != nil {
		nn109, err := m.HashPolicyChoice.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn109
	}
	if m.ViewInternal != nil {
		dAtA[i] = 0xc2
		i++
		dAtA[i] = 0x3e
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.ViewInternal.Size()))
		n110, err := m.ViewInternal.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n110
	}
	if len(m.HostName) > 0 {
		dAtA[i] = 0xca
		i++
		dAtA[i] = 0x3e
		i++
		i = encodeVarintTypes(dAtA, i, uint64(len(m.HostName)))
		i += copy(dAtA[i:], m.HostName)
	}
	if len(m.DnsInfo) > 0 {
		for _, msg := range m.DnsInfo {
			dAtA[i] = 0xd2
			i++
			dAtA[i] = 0x3e
			i++
			i = encodeVarintTypes(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.State != 0 {
		dAtA[i] = 0xd8
		i++
		dAtA[i] = 0x3e
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.State))
	}
	if m.AutoCertState != 0 {
		dAtA[i] = 0xe0
		i++
		dAtA[i] = 0x3e
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.AutoCertState))
	}
	if m.AutoCertInfo != nil {
		dAtA[i] = 0x92
		i++
		dAtA[i] = 0x3f
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.AutoCertInfo.Size()))
		n111, err := m.AutoCertInfo.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n111
	}
	return i, nil
}

func (m *GlobalSpecType_Http) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Http != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.Http.Size()))
		n112, err := m.Http.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n112
	}
	return i, nil
}
func (m *GlobalSpecType_Https) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Https != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.Https.Size()))
		n113, err := m.Https.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n113
	}
	return i, nil
}
func (m *GlobalSpecType_AdvertiseOnPublic) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.AdvertiseOnPublic != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.AdvertiseOnPublic.Size()))
		n114, err := m.AdvertiseOnPublic.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n114
	}
	return i, nil
}
func (m *GlobalSpecType_AdvertiseCustom) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.AdvertiseCustom != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.AdvertiseCustom.Size()))
		n115, err := m.AdvertiseCustom.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n115
	}
	return i, nil
}
func (m *GlobalSpecType_Waf) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Waf != nil {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.Waf.Size()))
		n116, err := m.Waf.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n116
	}
	return i, nil
}
func (m *GlobalSpecType_WafRule) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.WafRule != nil {
		dAtA[i] = 0x52
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.WafRule.Size()))
		n117, err := m.WafRule.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n117
	}
	return i, nil
}
func (m *GlobalSpecType_DisableWaf) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.DisableWaf != nil {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.DisableWaf.Size()))
		n118, err := m.DisableWaf.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n118
	}
	return i, nil
}
func (m *GlobalSpecType_DoNotAdvertise) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.DoNotAdvertise != nil {
		dAtA[i] = 0x62
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.DoNotAdvertise.Size()))
		n119, err := m.DoNotAdvertise.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n119
	}
	return i, nil
}
func (m *GlobalSpecType_AdvertiseOnPublicDefaultVip) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.AdvertiseOnPublicDefaultVip != nil {
		dAtA[i] = 0x6a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.AdvertiseOnPublicDefaultVip.Size()))
		n120, err := m.AdvertiseOnPublicDefaultVip.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n120
	}
	return i, nil
}
func (m *GlobalSpecType_JsChallenge) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.JsChallenge != nil {
		dAtA[i] = 0x92
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.JsChallenge.Size()))
		n121, err := m.JsChallenge.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n121
	}
	return i, nil
}
func (m *GlobalSpecType_DisableRateLimit) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.DisableRateLimit != nil {
		dAtA[i] = 0xb2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.DisableRateLimit.Size()))
		n122, err := m.DisableRateLimit.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n122
	}
	return i, nil
}
func (m *GlobalSpecType_RateLimit) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.RateLimit != nil {
		dAtA[i] = 0xba
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.RateLimit.Size()))
		n123, err := m.RateLimit.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n123
	}
	return i, nil
}
func (m *GlobalSpecType_CaptchaChallenge) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.CaptchaChallenge != nil {
		dAtA[i] = 0xc2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.CaptchaChallenge.Size()))
		n124, err := m.CaptchaChallenge.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n124
	}
	return i, nil
}
func (m *GlobalSpecType_NoChallenge) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.NoChallenge != nil {
		dAtA[i] = 0xd2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.NoChallenge.Size()))
		n125, err := m.NoChallenge.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n125
	}
	return i, nil
}
func (m *GlobalSpecType_HttpsAutoCert) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.HttpsAutoCert != nil {
		dAtA[i] = 0xda
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.HttpsAutoCert.Size()))
		n126, err := m.HttpsAutoCert.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n126
	}
	return i, nil
}
func (m *GlobalSpecType_AutoHostRewrite) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.AutoHostRewrite != nil {
		dAtA[i] = 0xe2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.AutoHostRewrite.Size()))
		n127, err := m.AutoHostRewrite.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n127
	}
	return i, nil
}
func (m *GlobalSpecType_HostRewrite) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0xea
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintTypes(dAtA, i, uint64(len(m.HostRewrite)))
	i += copy(dAtA[i:], m.HostRewrite)
	return i, nil
}
func (m *GlobalSpecType_DisableHostRewrite) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.DisableHostRewrite != nil {
		dAtA[i] = 0xf2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.DisableHostRewrite.Size()))
		n128, err := m.DisableHostRewrite.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n128
	}
	return i, nil
}
func (m *GlobalSpecType_ServicePoliciesFromNamespace) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.ServicePoliciesFromNamespace != nil {
		dAtA[i] = 0xca
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.ServicePoliciesFromNamespace.Size()))
		n129, err := m.ServicePoliciesFromNamespace.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n129
	}
	return i, nil
}
func (m *GlobalSpecType_NoServicePolicies) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.NoServicePolicies != nil {
		dAtA[i] = 0xd2
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.NoServicePolicies.Size()))
		n130, err := m.NoServicePolicies.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n130
	}
	return i, nil
}
func (m *GlobalSpecType_ActiveServicePolicies) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.ActiveServicePolicies != nil {
		dAtA[i] = 0xda
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.ActiveServicePolicies.Size()))
		n131, err := m.ActiveServicePolicies.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n131
	}
	return i, nil
}
func (m *GlobalSpecType_RoundRobin) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.RoundRobin != nil {
		dAtA[i] = 0xea
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.RoundRobin.Size()))
		n132, err := m.RoundRobin.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n132
	}
	return i, nil
}
func (m *GlobalSpecType_LeastActive) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.LeastActive != nil {
		dAtA[i] = 0xf2
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.LeastActive.Size()))
		n133, err := m.LeastActive.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n133
	}
	return i, nil
}
func (m *GlobalSpecType_Random) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Random != nil {
		dAtA[i] = 0xfa
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.Random.Size()))
		n134, err := m.Random.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n134
	}
	return i, nil
}
func (m *GlobalSpecType_SourceIpStickiness) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.SourceIpStickiness != nil {
		dAtA[i] = 0x82
		i++
		dAtA[i] = 0x3
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.SourceIpStickiness.Size()))
		n135, err := m.SourceIpStickiness.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n135
	}
	return i, nil
}
func (m *GlobalSpecType_CookieStickiness) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.CookieStickiness != nil {
		dAtA[i] = 0x8a
		i++
		dAtA[i] = 0x3
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.CookieStickiness.Size()))
		n136, err := m.CookieStickiness.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n136
	}
	return i, nil
}
func (m *GlobalSpecType_RingHash) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.RingHash != nil {
		dAtA[i] = 0x92
		i++
		dAtA[i] = 0x3
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.RingHash.Size()))
		n137, err := m.RingHash.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n137
	}
	return i, nil
}
func (m *GlobalSpecType_PolicyBasedChallenge) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.PolicyBasedChallenge != nil {
		dAtA[i] = 0x9a
		i++
		dAtA[i] = 0x3
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.PolicyBasedChallenge.Size()))
		n138, err := m.PolicyBasedChallenge.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n138
	}
	return i, nil
}
func (m *CreateSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateSpecType) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Domains) > 0 {
		for _, s := range m.Domains {
			dAtA[i] = 0xa
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if m.LoadbalancerType != nil {
		nn139, err := m.LoadbalancerType.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn139
	}
	if m.AdvertiseChoice != nil {
		nn140, err := m.AdvertiseChoice.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn140
	}
	if len(m.DefaultRoutePools) > 0 {
		for _, msg := range m.DefaultRoutePools {
			dAtA[i] = 0x32
			i++
			i = encodeVarintTypes(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Routes) > 0 {
		for _, msg := range m.Routes {
			dAtA[i] = 0x3a
			i++
			i = encodeVarintTypes(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.CorsPolicy != nil {
		dAtA[i] = 0x42
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.CorsPolicy.Size()))
		n141, err := m.CorsPolicy.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n141
	}
	if m.WafChoice != nil {
		nn142, err := m.WafChoice.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn142
	}
	if m.AddLocation {
		dAtA[i] = 0x88
		i++
		dAtA[i] = 0x1
		i++
		if m.AddLocation {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.ChallengeType != nil {
		nn143, err := m.ChallengeType.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn143
	}
	if m.MoreOption != nil {
		dAtA[i] = 0x9a
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.MoreOption.Size()))
		n144, err := m.MoreOption.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n144
	}
	if m.UserIdentification != nil {
		dAtA[i] = 0xa2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.UserIdentification.Size()))
		n145, err := m.UserIdentification.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n145
	}
	if m.RateLimitChoice != nil {
		nn146, err := m.RateLimitChoice.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn146
	}
	if m.MaliciousUserMitigation != nil {
		dAtA[i] = 0x82
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.MaliciousUserMitigation.Size()))
		n147, err := m.MaliciousUserMitigation.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n147
	}
	if len(m.WafExclusionRules) > 0 {
		for _, msg := range m.WafExclusionRules {
			dAtA[i] = 0x8a
			i++
			dAtA[i] = 0x2
			i++
			i = encodeVarintTypes(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.BlockedClients) > 0 {
		for _, msg := range m.BlockedClients {
			dAtA[i] = 0x92
			i++
			dAtA[i] = 0x2
			i++
			i = encodeVarintTypes(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.TrustedClients) > 0 {
		for _, msg := range m.TrustedClients {
			dAtA[i] = 0x9a
			i++
			dAtA[i] = 0x2
			i++
			i = encodeVarintTypes(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.ServicePolicyChoice != nil {
		nn148, err := m.ServicePolicyChoice.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn148
	}
	if m.HashPolicyChoice != nil {
		nn149, err := m.HashPolicyChoice.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn149
	}
	return i, nil
}

func (m *CreateSpecType_Http) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Http != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.Http.Size()))
		n150, err := m.Http.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n150
	}
	return i, nil
}
func (m *CreateSpecType_Https) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Https != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.Https.Size()))
		n151, err := m.Https.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n151
	}
	return i, nil
}
func (m *CreateSpecType_AdvertiseOnPublic) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.AdvertiseOnPublic != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.AdvertiseOnPublic.Size()))
		n152, err := m.AdvertiseOnPublic.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n152
	}
	return i, nil
}
func (m *CreateSpecType_AdvertiseCustom) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.AdvertiseCustom != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.AdvertiseCustom.Size()))
		n153, err := m.AdvertiseCustom.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n153
	}
	return i, nil
}
func (m *CreateSpecType_Waf) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Waf != nil {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.Waf.Size()))
		n154, err := m.Waf.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n154
	}
	return i, nil
}
func (m *CreateSpecType_WafRule) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.WafRule != nil {
		dAtA[i] = 0x52
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.WafRule.Size()))
		n155, err := m.WafRule.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n155
	}
	return i, nil
}
func (m *CreateSpecType_DisableWaf) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.DisableWaf != nil {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.DisableWaf.Size()))
		n156, err := m.DisableWaf.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n156
	}
	return i, nil
}
func (m *CreateSpecType_DoNotAdvertise) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.DoNotAdvertise != nil {
		dAtA[i] = 0x62
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.DoNotAdvertise.Size()))
		n157, err := m.DoNotAdvertise.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n157
	}
	return i, nil
}
func (m *CreateSpecType_AdvertiseOnPublicDefaultVip) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.AdvertiseOnPublicDefaultVip != nil {
		dAtA[i] = 0x6a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.AdvertiseOnPublicDefaultVip.Size()))
		n158, err := m.AdvertiseOnPublicDefaultVip.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n158
	}
	return i, nil
}
func (m *CreateSpecType_JsChallenge) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.JsChallenge != nil {
		dAtA[i] = 0x92
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.JsChallenge.Size()))
		n159, err := m.JsChallenge.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n159
	}
	return i, nil
}
func (m *CreateSpecType_DisableRateLimit) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.DisableRateLimit != nil {
		dAtA[i] = 0xb2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.DisableRateLimit.Size()))
		n160, err := m.DisableRateLimit.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n160
	}
	return i, nil
}
func (m *CreateSpecType_RateLimit) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.RateLimit != nil {
		dAtA[i] = 0xba
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.RateLimit.Size()))
		n161, err := m.RateLimit.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n161
	}
	return i, nil
}
func (m *CreateSpecType_CaptchaChallenge) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.CaptchaChallenge != nil {
		dAtA[i] = 0xc2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.CaptchaChallenge.Size()))
		n162, err := m.CaptchaChallenge.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n162
	}
	return i, nil
}
func (m *CreateSpecType_NoChallenge) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.NoChallenge != nil {
		dAtA[i] = 0xd2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.NoChallenge.Size()))
		n163, err := m.NoChallenge.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n163
	}
	return i, nil
}
func (m *CreateSpecType_HttpsAutoCert) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.HttpsAutoCert != nil {
		dAtA[i] = 0xda
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.HttpsAutoCert.Size()))
		n164, err := m.HttpsAutoCert.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n164
	}
	return i, nil
}
func (m *CreateSpecType_ServicePoliciesFromNamespace) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.ServicePoliciesFromNamespace != nil {
		dAtA[i] = 0xca
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.ServicePoliciesFromNamespace.Size()))
		n165, err := m.ServicePoliciesFromNamespace.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n165
	}
	return i, nil
}
func (m *CreateSpecType_NoServicePolicies) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.NoServicePolicies != nil {
		dAtA[i] = 0xd2
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.NoServicePolicies.Size()))
		n166, err := m.NoServicePolicies.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n166
	}
	return i, nil
}
func (m *CreateSpecType_ActiveServicePolicies) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.ActiveServicePolicies != nil {
		dAtA[i] = 0xda
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.ActiveServicePolicies.Size()))
		n167, err := m.ActiveServicePolicies.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n167
	}
	return i, nil
}
func (m *CreateSpecType_RoundRobin) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.RoundRobin != nil {
		dAtA[i] = 0xea
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.RoundRobin.Size()))
		n168, err := m.RoundRobin.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n168
	}
	return i, nil
}
func (m *CreateSpecType_LeastActive) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.LeastActive != nil {
		dAtA[i] = 0xf2
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.LeastActive.Size()))
		n169, err := m.LeastActive.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n169
	}
	return i, nil
}
func (m *CreateSpecType_Random) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Random != nil {
		dAtA[i] = 0xfa
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.Random.Size()))
		n170, err := m.Random.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n170
	}
	return i, nil
}
func (m *CreateSpecType_SourceIpStickiness) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.SourceIpStickiness != nil {
		dAtA[i] = 0x82
		i++
		dAtA[i] = 0x3
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.SourceIpStickiness.Size()))
		n171, err := m.SourceIpStickiness.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n171
	}
	return i, nil
}
func (m *CreateSpecType_CookieStickiness) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.CookieStickiness != nil {
		dAtA[i] = 0x8a
		i++
		dAtA[i] = 0x3
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.CookieStickiness.Size()))
		n172, err := m.CookieStickiness.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n172
	}
	return i, nil
}
func (m *CreateSpecType_RingHash) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.RingHash != nil {
		dAtA[i] = 0x92
		i++
		dAtA[i] = 0x3
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.RingHash.Size()))
		n173, err := m.RingHash.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n173
	}
	return i, nil
}
func (m *CreateSpecType_PolicyBasedChallenge) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.PolicyBasedChallenge != nil {
		dAtA[i] = 0x9a
		i++
		dAtA[i] = 0x3
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.PolicyBasedChallenge.Size()))
		n174, err := m.PolicyBasedChallenge.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n174
	}
	return i, nil
}
func (m *ReplaceSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplaceSpecType) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Domains) > 0 {
		for _, s := range m.Domains {
			dAtA[i] = 0xa
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if m.LoadbalancerType != nil {
		nn175, err := m.LoadbalancerType.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn175
	}
	if m.AdvertiseChoice != nil {
		nn176, err := m.AdvertiseChoice.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn176
	}
	if len(m.DefaultRoutePools) > 0 {
		for _, msg := range m.DefaultRoutePools {
			dAtA[i] = 0x32
			i++
			i = encodeVarintTypes(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Routes) > 0 {
		for _, msg := range m.Routes {
			dAtA[i] = 0x3a
			i++
			i = encodeVarintTypes(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.CorsPolicy != nil {
		dAtA[i] = 0x42
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.CorsPolicy.Size()))
		n177, err := m.CorsPolicy.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n177
	}
	if m.WafChoice != nil {
		nn178, err := m.WafChoice.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn178
	}
	if m.AddLocation {
		dAtA[i] = 0x88
		i++
		dAtA[i] = 0x1
		i++
		if m.AddLocation {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.ChallengeType != nil {
		nn179, err := m.ChallengeType.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn179
	}
	if m.MoreOption != nil {
		dAtA[i] = 0x9a
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.MoreOption.Size()))
		n180, err := m.MoreOption.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n180
	}
	if m.UserIdentification != nil {
		dAtA[i] = 0xa2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.UserIdentification.Size()))
		n181, err := m.UserIdentification.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n181
	}
	if m.RateLimitChoice != nil {
		nn182, err := m.RateLimitChoice.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn182
	}
	if m.MaliciousUserMitigation != nil {
		dAtA[i] = 0x82
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.MaliciousUserMitigation.Size()))
		n183, err := m.MaliciousUserMitigation.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n183
	}
	if len(m.WafExclusionRules) > 0 {
		for _, msg := range m.WafExclusionRules {
			dAtA[i] = 0x8a
			i++
			dAtA[i] = 0x2
			i++
			i = encodeVarintTypes(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.BlockedClients) > 0 {
		for _, msg := range m.BlockedClients {
			dAtA[i] = 0x92
			i++
			dAtA[i] = 0x2
			i++
			i = encodeVarintTypes(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.TrustedClients) > 0 {
		for _, msg := range m.TrustedClients {
			dAtA[i] = 0x9a
			i++
			dAtA[i] = 0x2
			i++
			i = encodeVarintTypes(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.ServicePolicyChoice != nil {
		nn184, err := m.ServicePolicyChoice.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn184
	}
	if m.HashPolicyChoice != nil {
		nn185, err := m.HashPolicyChoice.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn185
	}
	return i, nil
}

func (m *ReplaceSpecType_Http) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Http != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.Http.Size()))
		n186, err := m.Http.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n186
	}
	return i, nil
}
func (m *ReplaceSpecType_Https) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Https != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.Https.Size()))
		n187, err := m.Https.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n187
	}
	return i, nil
}
func (m *ReplaceSpecType_AdvertiseOnPublic) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.AdvertiseOnPublic != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.AdvertiseOnPublic.Size()))
		n188, err := m.AdvertiseOnPublic.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n188
	}
	return i, nil
}
func (m *ReplaceSpecType_AdvertiseCustom) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.AdvertiseCustom != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.AdvertiseCustom.Size()))
		n189, err := m.AdvertiseCustom.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n189
	}
	return i, nil
}
func (m *ReplaceSpecType_Waf) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Waf != nil {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.Waf.Size()))
		n190, err := m.Waf.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n190
	}
	return i, nil
}
func (m *ReplaceSpecType_WafRule) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.WafRule != nil {
		dAtA[i] = 0x52
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.WafRule.Size()))
		n191, err := m.WafRule.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n191
	}
	return i, nil
}
func (m *ReplaceSpecType_DisableWaf) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.DisableWaf != nil {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.DisableWaf.Size()))
		n192, err := m.DisableWaf.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n192
	}
	return i, nil
}
func (m *ReplaceSpecType_DoNotAdvertise) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.DoNotAdvertise != nil {
		dAtA[i] = 0x62
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.DoNotAdvertise.Size()))
		n193, err := m.DoNotAdvertise.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n193
	}
	return i, nil
}
func (m *ReplaceSpecType_AdvertiseOnPublicDefaultVip) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.AdvertiseOnPublicDefaultVip != nil {
		dAtA[i] = 0x6a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.AdvertiseOnPublicDefaultVip.Size()))
		n194, err := m.AdvertiseOnPublicDefaultVip.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n194
	}
	return i, nil
}
func (m *ReplaceSpecType_JsChallenge) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.JsChallenge != nil {
		dAtA[i] = 0x92
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.JsChallenge.Size()))
		n195, err := m.JsChallenge.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n195
	}
	return i, nil
}
func (m *ReplaceSpecType_DisableRateLimit) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.DisableRateLimit != nil {
		dAtA[i] = 0xb2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.DisableRateLimit.Size()))
		n196, err := m.DisableRateLimit.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n196
	}
	return i, nil
}
func (m *ReplaceSpecType_RateLimit) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.RateLimit != nil {
		dAtA[i] = 0xba
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.RateLimit.Size()))
		n197, err := m.RateLimit.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n197
	}
	return i, nil
}
func (m *ReplaceSpecType_CaptchaChallenge) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.CaptchaChallenge != nil {
		dAtA[i] = 0xc2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.CaptchaChallenge.Size()))
		n198, err := m.CaptchaChallenge.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n198
	}
	return i, nil
}
func (m *ReplaceSpecType_NoChallenge) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.NoChallenge != nil {
		dAtA[i] = 0xd2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.NoChallenge.Size()))
		n199, err := m.NoChallenge.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n199
	}
	return i, nil
}
func (m *ReplaceSpecType_HttpsAutoCert) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.HttpsAutoCert != nil {
		dAtA[i] = 0xda
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.HttpsAutoCert.Size()))
		n200, err := m.HttpsAutoCert.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n200
	}
	return i, nil
}
func (m *ReplaceSpecType_ServicePoliciesFromNamespace) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.ServicePoliciesFromNamespace != nil {
		dAtA[i] = 0xca
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.ServicePoliciesFromNamespace.Size()))
		n201, err := m.ServicePoliciesFromNamespace.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n201
	}
	return i, nil
}
func (m *ReplaceSpecType_NoServicePolicies) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.NoServicePolicies != nil {
		dAtA[i] = 0xd2
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.NoServicePolicies.Size()))
		n202, err := m.NoServicePolicies.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n202
	}
	return i, nil
}
func (m *ReplaceSpecType_ActiveServicePolicies) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.ActiveServicePolicies != nil {
		dAtA[i] = 0xda
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.ActiveServicePolicies.Size()))
		n203, err := m.ActiveServicePolicies.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n203
	}
	return i, nil
}
func (m *ReplaceSpecType_RoundRobin) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.RoundRobin != nil {
		dAtA[i] = 0xea
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.RoundRobin.Size()))
		n204, err := m.RoundRobin.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n204
	}
	return i, nil
}
func (m *ReplaceSpecType_LeastActive) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.LeastActive != nil {
		dAtA[i] = 0xf2
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.LeastActive.Size()))
		n205, err := m.LeastActive.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n205
	}
	return i, nil
}
func (m *ReplaceSpecType_Random) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Random != nil {
		dAtA[i] = 0xfa
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.Random.Size()))
		n206, err := m.Random.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n206
	}
	return i, nil
}
func (m *ReplaceSpecType_SourceIpStickiness) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.SourceIpStickiness != nil {
		dAtA[i] = 0x82
		i++
		dAtA[i] = 0x3
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.SourceIpStickiness.Size()))
		n207, err := m.SourceIpStickiness.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n207
	}
	return i, nil
}
func (m *ReplaceSpecType_CookieStickiness) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.CookieStickiness != nil {
		dAtA[i] = 0x8a
		i++
		dAtA[i] = 0x3
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.CookieStickiness.Size()))
		n208, err := m.CookieStickiness.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n208
	}
	return i, nil
}
func (m *ReplaceSpecType_RingHash) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.RingHash != nil {
		dAtA[i] = 0x92
		i++
		dAtA[i] = 0x3
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.RingHash.Size()))
		n209, err := m.RingHash.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n209
	}
	return i, nil
}
func (m *ReplaceSpecType_PolicyBasedChallenge) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.PolicyBasedChallenge != nil {
		dAtA[i] = 0x9a
		i++
		dAtA[i] = 0x3
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.PolicyBasedChallenge.Size()))
		n210, err := m.PolicyBasedChallenge.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n210
	}
	return i, nil
}
func (m *GetSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetSpecType) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Domains) > 0 {
		for _, s := range m.Domains {
			dAtA[i] = 0xa
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if m.LoadbalancerType != nil {
		nn211, err := m.LoadbalancerType.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn211
	}
	if m.AdvertiseChoice != nil {
		nn212, err := m.AdvertiseChoice.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn212
	}
	if len(m.DefaultRoutePools) > 0 {
		for _, msg := range m.DefaultRoutePools {
			dAtA[i] = 0x32
			i++
			i = encodeVarintTypes(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Routes) > 0 {
		for _, msg := range m.Routes {
			dAtA[i] = 0x3a
			i++
			i = encodeVarintTypes(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.CorsPolicy != nil {
		dAtA[i] = 0x42
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.CorsPolicy.Size()))
		n213, err := m.CorsPolicy.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n213
	}
	if m.WafChoice != nil {
		nn214, err := m.WafChoice.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn214
	}
	if m.AddLocation {
		dAtA[i] = 0x88
		i++
		dAtA[i] = 0x1
		i++
		if m.AddLocation {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.ChallengeType != nil {
		nn215, err := m.ChallengeType.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn215
	}
	if m.MoreOption != nil {
		dAtA[i] = 0x9a
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.MoreOption.Size()))
		n216, err := m.MoreOption.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n216
	}
	if m.UserIdentification != nil {
		dAtA[i] = 0xa2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.UserIdentification.Size()))
		n217, err := m.UserIdentification.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n217
	}
	if m.RateLimitChoice != nil {
		nn218, err := m.RateLimitChoice.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn218
	}
	if m.MaliciousUserMitigation != nil {
		dAtA[i] = 0x82
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.MaliciousUserMitigation.Size()))
		n219, err := m.MaliciousUserMitigation.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n219
	}
	if len(m.WafExclusionRules) > 0 {
		for _, msg := range m.WafExclusionRules {
			dAtA[i] = 0x8a
			i++
			dAtA[i] = 0x2
			i++
			i = encodeVarintTypes(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.BlockedClients) > 0 {
		for _, msg := range m.BlockedClients {
			dAtA[i] = 0x92
			i++
			dAtA[i] = 0x2
			i++
			i = encodeVarintTypes(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.TrustedClients) > 0 {
		for _, msg := range m.TrustedClients {
			dAtA[i] = 0x9a
			i++
			dAtA[i] = 0x2
			i++
			i = encodeVarintTypes(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.ServicePolicyChoice != nil {
		nn220, err := m.ServicePolicyChoice.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn220
	}
	if m.HashPolicyChoice != nil {
		nn221, err := m.HashPolicyChoice.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn221
	}
	if len(m.HostName) > 0 {
		dAtA[i] = 0xca
		i++
		dAtA[i] = 0x3e
		i++
		i = encodeVarintTypes(dAtA, i, uint64(len(m.HostName)))
		i += copy(dAtA[i:], m.HostName)
	}
	if len(m.DnsInfo) > 0 {
		for _, msg := range m.DnsInfo {
			dAtA[i] = 0xd2
			i++
			dAtA[i] = 0x3e
			i++
			i = encodeVarintTypes(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.State != 0 {
		dAtA[i] = 0xd8
		i++
		dAtA[i] = 0x3e
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.State))
	}
	if m.AutoCertState != 0 {
		dAtA[i] = 0xe0
		i++
		dAtA[i] = 0x3e
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.AutoCertState))
	}
	if m.AutoCertInfo != nil {
		dAtA[i] = 0x92
		i++
		dAtA[i] = 0x3f
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.AutoCertInfo.Size()))
		n222, err := m.AutoCertInfo.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n222
	}
	return i, nil
}

func (m *GetSpecType_Http) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Http != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.Http.Size()))
		n223, err := m.Http.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n223
	}
	return i, nil
}
func (m *GetSpecType_Https) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Https != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.Https.Size()))
		n224, err := m.Https.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n224
	}
	return i, nil
}
func (m *GetSpecType_AdvertiseOnPublic) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.AdvertiseOnPublic != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.AdvertiseOnPublic.Size()))
		n225, err := m.AdvertiseOnPublic.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n225
	}
	return i, nil
}
func (m *GetSpecType_AdvertiseCustom) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.AdvertiseCustom != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.AdvertiseCustom.Size()))
		n226, err := m.AdvertiseCustom.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n226
	}
	return i, nil
}
func (m *GetSpecType_Waf) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Waf != nil {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.Waf.Size()))
		n227, err := m.Waf.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n227
	}
	return i, nil
}
func (m *GetSpecType_WafRule) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.WafRule != nil {
		dAtA[i] = 0x52
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.WafRule.Size()))
		n228, err := m.WafRule.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n228
	}
	return i, nil
}
func (m *GetSpecType_DisableWaf) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.DisableWaf != nil {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.DisableWaf.Size()))
		n229, err := m.DisableWaf.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n229
	}
	return i, nil
}
func (m *GetSpecType_DoNotAdvertise) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.DoNotAdvertise != nil {
		dAtA[i] = 0x62
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.DoNotAdvertise.Size()))
		n230, err := m.DoNotAdvertise.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n230
	}
	return i, nil
}
func (m *GetSpecType_AdvertiseOnPublicDefaultVip) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.AdvertiseOnPublicDefaultVip != nil {
		dAtA[i] = 0x6a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.AdvertiseOnPublicDefaultVip.Size()))
		n231, err := m.AdvertiseOnPublicDefaultVip.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n231
	}
	return i, nil
}
func (m *GetSpecType_JsChallenge) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.JsChallenge != nil {
		dAtA[i] = 0x92
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.JsChallenge.Size()))
		n232, err := m.JsChallenge.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n232
	}
	return i, nil
}
func (m *GetSpecType_DisableRateLimit) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.DisableRateLimit != nil {
		dAtA[i] = 0xb2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.DisableRateLimit.Size()))
		n233, err := m.DisableRateLimit.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n233
	}
	return i, nil
}
func (m *GetSpecType_RateLimit) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.RateLimit != nil {
		dAtA[i] = 0xba
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.RateLimit.Size()))
		n234, err := m.RateLimit.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n234
	}
	return i, nil
}
func (m *GetSpecType_CaptchaChallenge) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.CaptchaChallenge != nil {
		dAtA[i] = 0xc2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.CaptchaChallenge.Size()))
		n235, err := m.CaptchaChallenge.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n235
	}
	return i, nil
}
func (m *GetSpecType_NoChallenge) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.NoChallenge != nil {
		dAtA[i] = 0xd2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.NoChallenge.Size()))
		n236, err := m.NoChallenge.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n236
	}
	return i, nil
}
func (m *GetSpecType_HttpsAutoCert) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.HttpsAutoCert != nil {
		dAtA[i] = 0xda
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.HttpsAutoCert.Size()))
		n237, err := m.HttpsAutoCert.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n237
	}
	return i, nil
}
func (m *GetSpecType_ServicePoliciesFromNamespace) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.ServicePoliciesFromNamespace != nil {
		dAtA[i] = 0xca
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.ServicePoliciesFromNamespace.Size()))
		n238, err := m.ServicePoliciesFromNamespace.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n238
	}
	return i, nil
}
func (m *GetSpecType_NoServicePolicies) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.NoServicePolicies != nil {
		dAtA[i] = 0xd2
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.NoServicePolicies.Size()))
		n239, err := m.NoServicePolicies.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n239
	}
	return i, nil
}
func (m *GetSpecType_ActiveServicePolicies) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.ActiveServicePolicies != nil {
		dAtA[i] = 0xda
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.ActiveServicePolicies.Size()))
		n240, err := m.ActiveServicePolicies.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n240
	}
	return i, nil
}
func (m *GetSpecType_RoundRobin) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.RoundRobin != nil {
		dAtA[i] = 0xea
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.RoundRobin.Size()))
		n241, err := m.RoundRobin.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n241
	}
	return i, nil
}
func (m *GetSpecType_LeastActive) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.LeastActive != nil {
		dAtA[i] = 0xf2
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.LeastActive.Size()))
		n242, err := m.LeastActive.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n242
	}
	return i, nil
}
func (m *GetSpecType_Random) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Random != nil {
		dAtA[i] = 0xfa
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.Random.Size()))
		n243, err := m.Random.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n243
	}
	return i, nil
}
func (m *GetSpecType_SourceIpStickiness) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.SourceIpStickiness != nil {
		dAtA[i] = 0x82
		i++
		dAtA[i] = 0x3
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.SourceIpStickiness.Size()))
		n244, err := m.SourceIpStickiness.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n244
	}
	return i, nil
}
func (m *GetSpecType_CookieStickiness) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.CookieStickiness != nil {
		dAtA[i] = 0x8a
		i++
		dAtA[i] = 0x3
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.CookieStickiness.Size()))
		n245, err := m.CookieStickiness.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n245
	}
	return i, nil
}
func (m *GetSpecType_RingHash) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.RingHash != nil {
		dAtA[i] = 0x92
		i++
		dAtA[i] = 0x3
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.RingHash.Size()))
		n246, err := m.RingHash.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n246
	}
	return i, nil
}
func (m *GetSpecType_PolicyBasedChallenge) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.PolicyBasedChallenge != nil {
		dAtA[i] = 0x9a
		i++
		dAtA[i] = 0x3
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.PolicyBasedChallenge.Size()))
		n247, err := m.PolicyBasedChallenge.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n247
	}
	return i, nil
}
func encodeVarintTypes(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *DownstreamTlsValidationContext) Size() (n int) {
	var l int
	_ = l
	l = len(m.TrustedCaUrl)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *DownstreamTlsParamsType) Size() (n int) {
	var l int
	_ = l
	if m.TlsConfig != nil {
		l = m.TlsConfig.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if len(m.TlsCertificates) > 0 {
		for _, e := range m.TlsCertificates {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if m.MtlsChoice != nil {
		n += m.MtlsChoice.Size()
	}
	return n
}

func (m *DownstreamTlsParamsType_NoMtls) Size() (n int) {
	var l int
	_ = l
	if m.NoMtls != nil {
		l = m.NoMtls.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *DownstreamTlsParamsType_UseMtls) Size() (n int) {
	var l int
	_ = l
	if m.UseMtls != nil {
		l = m.UseMtls.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ProxyTypeHttps) Size() (n int) {
	var l int
	_ = l
	if m.HttpRedirect {
		n += 2
	}
	if m.AddHsts {
		n += 2
	}
	if m.TlsParameters != nil {
		l = m.TlsParameters.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.ServerHeaderChoice != nil {
		n += m.ServerHeaderChoice.Size()
	}
	return n
}

func (m *ProxyTypeHttps_DefaultHeader) Size() (n int) {
	var l int
	_ = l
	if m.DefaultHeader != nil {
		l = m.DefaultHeader.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ProxyTypeHttps_ServerName) Size() (n int) {
	var l int
	_ = l
	l = len(m.ServerName)
	n += 1 + l + sovTypes(uint64(l))
	return n
}
func (m *ProxyTypeHttps_AppendServerName) Size() (n int) {
	var l int
	_ = l
	l = len(m.AppendServerName)
	n += 1 + l + sovTypes(uint64(l))
	return n
}
func (m *ProxyTypeHttps_PassThrough) Size() (n int) {
	var l int
	_ = l
	if m.PassThrough != nil {
		l = m.PassThrough.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ProxyTypeHttp) Size() (n int) {
	var l int
	_ = l
	if m.DnsVolterraManaged {
		n += 2
	}
	return n
}

func (m *ProxyTypeHttpsAutoCerts) Size() (n int) {
	var l int
	_ = l
	if m.HttpRedirect {
		n += 2
	}
	if m.AddHsts {
		n += 2
	}
	if m.TlsConfig != nil {
		l = m.TlsConfig.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.MtlsChoice != nil {
		n += m.MtlsChoice.Size()
	}
	if m.ServerHeaderChoice != nil {
		n += m.ServerHeaderChoice.Size()
	}
	return n
}

func (m *ProxyTypeHttpsAutoCerts_NoMtls) Size() (n int) {
	var l int
	_ = l
	if m.NoMtls != nil {
		l = m.NoMtls.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ProxyTypeHttpsAutoCerts_UseMtls) Size() (n int) {
	var l int
	_ = l
	if m.UseMtls != nil {
		l = m.UseMtls.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ProxyTypeHttpsAutoCerts_DefaultHeader) Size() (n int) {
	var l int
	_ = l
	if m.DefaultHeader != nil {
		l = m.DefaultHeader.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ProxyTypeHttpsAutoCerts_ServerName) Size() (n int) {
	var l int
	_ = l
	l = len(m.ServerName)
	n += 1 + l + sovTypes(uint64(l))
	return n
}
func (m *ProxyTypeHttpsAutoCerts_AppendServerName) Size() (n int) {
	var l int
	_ = l
	l = len(m.AppendServerName)
	n += 1 + l + sovTypes(uint64(l))
	return n
}
func (m *ProxyTypeHttpsAutoCerts_PassThrough) Size() (n int) {
	var l int
	_ = l
	if m.PassThrough != nil {
		l = m.PassThrough.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *HashPolicyListType) Size() (n int) {
	var l int
	_ = l
	if len(m.HashPolicy) > 0 {
		for _, e := range m.HashPolicy {
			l = e.Size()
			n += 2 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *MirrorPolicyType) Size() (n int) {
	var l int
	_ = l
	if m.OriginPool != nil {
		l = m.OriginPool.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.Percent != nil {
		l = m.Percent.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *RouteSimpleAdvancedOptions) Size() (n int) {
	var l int
	_ = l
	if m.HashPolicyChoice != nil {
		n += m.HashPolicyChoice.Size()
	}
	if m.Priority != 0 {
		n += 1 + sovTypes(uint64(m.Priority))
	}
	if len(m.EndpointSubsets) > 0 {
		for k, v := range m.EndpointSubsets {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovTypes(uint64(len(k))) + 1 + len(v) + sovTypes(uint64(len(v)))
			n += mapEntrySize + 1 + sovTypes(uint64(mapEntrySize))
		}
	}
	if m.RewriteChoice != nil {
		n += m.RewriteChoice.Size()
	}
	if len(m.RequestHeadersToAdd) > 0 {
		for _, e := range m.RequestHeadersToAdd {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if len(m.RequestHeadersToRemove) > 0 {
		for _, s := range m.RequestHeadersToRemove {
			l = len(s)
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if len(m.ResponseHeadersToAdd) > 0 {
		for _, e := range m.ResponseHeadersToAdd {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if len(m.ResponseHeadersToRemove) > 0 {
		for _, s := range m.ResponseHeadersToRemove {
			l = len(s)
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if m.DisableLocationAdd {
		n += 2
	}
	if m.WafChoice != nil {
		n += m.WafChoice.Size()
	}
	if m.CorsPolicy != nil {
		l = m.CorsPolicy.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	if m.SpdyChoice != nil {
		n += m.SpdyChoice.Size()
	}
	if m.WebsocketChoice != nil {
		n += m.WebsocketChoice.Size()
	}
	if m.RetryPolicyChoice != nil {
		n += m.RetryPolicyChoice.Size()
	}
	if m.Timeout != 0 {
		n += 2 + sovTypes(uint64(m.Timeout))
	}
	if m.BufferChoice != nil {
		n += m.BufferChoice.Size()
	}
	if m.MirroringChoice != nil {
		n += m.MirroringChoice.Size()
	}
	if m.ClusterRetractChoice != nil {
		n += m.ClusterRetractChoice.Size()
	}
	return n
}

func (m *RouteSimpleAdvancedOptions_CommonHashPolicy) Size() (n int) {
	var l int
	_ = l
	if m.CommonHashPolicy != nil {
		l = m.CommonHashPolicy.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *RouteSimpleAdvancedOptions_SpecificHashPolicy) Size() (n int) {
	var l int
	_ = l
	if m.SpecificHashPolicy != nil {
		l = m.SpecificHashPolicy.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *RouteSimpleAdvancedOptions_DisablePrefixRewrite) Size() (n int) {
	var l int
	_ = l
	if m.DisablePrefixRewrite != nil {
		l = m.DisablePrefixRewrite.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *RouteSimpleAdvancedOptions_PrefixRewrite) Size() (n int) {
	var l int
	_ = l
	l = len(m.PrefixRewrite)
	n += 1 + l + sovTypes(uint64(l))
	return n
}
func (m *RouteSimpleAdvancedOptions_DisableWaf) Size() (n int) {
	var l int
	_ = l
	if m.DisableWaf != nil {
		l = m.DisableWaf.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *RouteSimpleAdvancedOptions_Waf) Size() (n int) {
	var l int
	_ = l
	if m.Waf != nil {
		l = m.Waf.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *RouteSimpleAdvancedOptions_WafRule) Size() (n int) {
	var l int
	_ = l
	if m.WafRule != nil {
		l = m.WafRule.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *RouteSimpleAdvancedOptions_DisableSpdy) Size() (n int) {
	var l int
	_ = l
	if m.DisableSpdy != nil {
		l = m.DisableSpdy.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *RouteSimpleAdvancedOptions_EnableSpdy) Size() (n int) {
	var l int
	_ = l
	if m.EnableSpdy != nil {
		l = m.EnableSpdy.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *RouteSimpleAdvancedOptions_DisableWebSocketConfig) Size() (n int) {
	var l int
	_ = l
	if m.DisableWebSocketConfig != nil {
		l = m.DisableWebSocketConfig.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *RouteSimpleAdvancedOptions_WebSocketConfig) Size() (n int) {
	var l int
	_ = l
	if m.WebSocketConfig != nil {
		l = m.WebSocketConfig.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *RouteSimpleAdvancedOptions_DefaultRetryPolicy) Size() (n int) {
	var l int
	_ = l
	if m.DefaultRetryPolicy != nil {
		l = m.DefaultRetryPolicy.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *RouteSimpleAdvancedOptions_RetryPolicy) Size() (n int) {
	var l int
	_ = l
	if m.RetryPolicy != nil {
		l = m.RetryPolicy.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *RouteSimpleAdvancedOptions_CommonBuffering) Size() (n int) {
	var l int
	_ = l
	if m.CommonBuffering != nil {
		l = m.CommonBuffering.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *RouteSimpleAdvancedOptions_BufferPolicy) Size() (n int) {
	var l int
	_ = l
	if m.BufferPolicy != nil {
		l = m.BufferPolicy.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *RouteSimpleAdvancedOptions_DisableMirroring) Size() (n int) {
	var l int
	_ = l
	if m.DisableMirroring != nil {
		l = m.DisableMirroring.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *RouteSimpleAdvancedOptions_MirrorPolicy) Size() (n int) {
	var l int
	_ = l
	if m.MirrorPolicy != nil {
		l = m.MirrorPolicy.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *RouteSimpleAdvancedOptions_RetractCluster) Size() (n int) {
	var l int
	_ = l
	if m.RetractCluster != nil {
		l = m.RetractCluster.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *RouteSimpleAdvancedOptions_DoNotRetractCluster) Size() (n int) {
	var l int
	_ = l
	if m.DoNotRetractCluster != nil {
		l = m.DoNotRetractCluster.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *RouteTypeSimpleWithDefaultOriginPool) Size() (n int) {
	var l int
	_ = l
	if m.HttpMethod != 0 {
		n += 1 + sovTypes(uint64(m.HttpMethod))
	}
	if m.Path != nil {
		l = m.Path.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.HostRewriteParams != nil {
		n += m.HostRewriteParams.Size()
	}
	return n
}

func (m *RouteTypeSimpleWithDefaultOriginPool_AutoHostRewrite) Size() (n int) {
	var l int
	_ = l
	if m.AutoHostRewrite != nil {
		l = m.AutoHostRewrite.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *RouteTypeSimpleWithDefaultOriginPool_HostRewrite) Size() (n int) {
	var l int
	_ = l
	l = len(m.HostRewrite)
	n += 1 + l + sovTypes(uint64(l))
	return n
}
func (m *RouteTypeSimpleWithDefaultOriginPool_DisableHostRewrite) Size() (n int) {
	var l int
	_ = l
	if m.DisableHostRewrite != nil {
		l = m.DisableHostRewrite.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *RouteTypeSimple) Size() (n int) {
	var l int
	_ = l
	if m.Path != nil {
		l = m.Path.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.HttpMethod != 0 {
		n += 1 + sovTypes(uint64(m.HttpMethod))
	}
	if len(m.OriginPools) > 0 {
		for _, e := range m.OriginPools {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if m.HostRewriteParams != nil {
		n += m.HostRewriteParams.Size()
	}
	if m.AdvancedOptions != nil {
		l = m.AdvancedOptions.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *RouteTypeSimple_AutoHostRewrite) Size() (n int) {
	var l int
	_ = l
	if m.AutoHostRewrite != nil {
		l = m.AutoHostRewrite.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *RouteTypeSimple_HostRewrite) Size() (n int) {
	var l int
	_ = l
	l = len(m.HostRewrite)
	n += 1 + l + sovTypes(uint64(l))
	return n
}
func (m *RouteTypeSimple_DisableHostRewrite) Size() (n int) {
	var l int
	_ = l
	if m.DisableHostRewrite != nil {
		l = m.DisableHostRewrite.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *RouteTypeRedirect) Size() (n int) {
	var l int
	_ = l
	if m.Path != nil {
		l = m.Path.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.HttpMethod != 0 {
		n += 1 + sovTypes(uint64(m.HttpMethod))
	}
	if m.RouteRedirect != nil {
		l = m.RouteRedirect.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *RouteTypeDirectResponse) Size() (n int) {
	var l int
	_ = l
	if m.Path != nil {
		l = m.Path.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.HttpMethod != 0 {
		n += 1 + sovTypes(uint64(m.HttpMethod))
	}
	if m.RouteDirectResponse != nil {
		l = m.RouteDirectResponse.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *RouteTypeCustomRoute) Size() (n int) {
	var l int
	_ = l
	if m.RouteRef != nil {
		l = m.RouteRef.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *RouteType) Size() (n int) {
	var l int
	_ = l
	if m.Choice != nil {
		n += m.Choice.Size()
	}
	return n
}

func (m *RouteType_SimpleRoute) Size() (n int) {
	var l int
	_ = l
	if m.SimpleRoute != nil {
		l = m.SimpleRoute.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *RouteType_RedirectRoute) Size() (n int) {
	var l int
	_ = l
	if m.RedirectRoute != nil {
		l = m.RedirectRoute.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *RouteType_DirectResponseRoute) Size() (n int) {
	var l int
	_ = l
	if m.DirectResponseRoute != nil {
		l = m.DirectResponseRoute.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *RouteType_CustomRouteObject) Size() (n int) {
	var l int
	_ = l
	if m.CustomRouteObject != nil {
		l = m.CustomRouteObject.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *AdvancedOptionsType) Size() (n int) {
	var l int
	_ = l
	if len(m.RequestHeadersToAdd) > 0 {
		for _, e := range m.RequestHeadersToAdd {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if len(m.RequestHeadersToRemove) > 0 {
		for _, s := range m.RequestHeadersToRemove {
			l = len(s)
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if len(m.ResponseHeadersToAdd) > 0 {
		for _, e := range m.ResponseHeadersToAdd {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if len(m.ResponseHeadersToRemove) > 0 {
		for _, s := range m.ResponseHeadersToRemove {
			l = len(s)
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if m.MaxRequestHeaderSize != 0 {
		n += 1 + sovTypes(uint64(m.MaxRequestHeaderSize))
	}
	if m.BufferPolicy != nil {
		l = m.BufferPolicy.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.CompressionParams != nil {
		l = m.CompressionParams.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if len(m.CustomErrors) > 0 {
		for k, v := range m.CustomErrors {
			_ = k
			_ = v
			mapEntrySize := 1 + sovTypes(uint64(k)) + 1 + len(v) + sovTypes(uint64(len(v)))
			n += mapEntrySize + 1 + sovTypes(uint64(mapEntrySize))
		}
	}
	if m.JavascriptInfo != nil {
		l = m.JavascriptInfo.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if len(m.Jwt) > 0 {
		for _, e := range m.Jwt {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if m.IdleTimeout != 0 {
		n += 1 + sovTypes(uint64(m.IdleTimeout))
	}
	if m.DisableDefaultErrorPages {
		n += 2
	}
	return n
}

func (m *PolicyBasedChallenge) Size() (n int) {
	var l int
	_ = l
	if m.JsChallengeParametersChoice != nil {
		n += m.JsChallengeParametersChoice.Size()
	}
	if m.CaptchaChallengeParametersChoice != nil {
		n += m.CaptchaChallengeParametersChoice.Size()
	}
	if m.TemporaryBlockingParametersChoice != nil {
		n += m.TemporaryBlockingParametersChoice.Size()
	}
	if m.MaliciousUserMitigationChoice != nil {
		n += m.MaliciousUserMitigationChoice.Size()
	}
	if m.ChallengeChoice != nil {
		n += m.ChallengeChoice.Size()
	}
	if m.RuleList != nil {
		l = m.RuleList.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *PolicyBasedChallenge_DefaultJsChallengeParameters) Size() (n int) {
	var l int
	_ = l
	if m.DefaultJsChallengeParameters != nil {
		l = m.DefaultJsChallengeParameters.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *PolicyBasedChallenge_JsChallengeParameters) Size() (n int) {
	var l int
	_ = l
	if m.JsChallengeParameters != nil {
		l = m.JsChallengeParameters.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *PolicyBasedChallenge_DefaultCaptchaChallengeParameters) Size() (n int) {
	var l int
	_ = l
	if m.DefaultCaptchaChallengeParameters != nil {
		l = m.DefaultCaptchaChallengeParameters.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *PolicyBasedChallenge_CaptchaChallengeParameters) Size() (n int) {
	var l int
	_ = l
	if m.CaptchaChallengeParameters != nil {
		l = m.CaptchaChallengeParameters.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *PolicyBasedChallenge_DefaultTemporaryBlockingParameters) Size() (n int) {
	var l int
	_ = l
	if m.DefaultTemporaryBlockingParameters != nil {
		l = m.DefaultTemporaryBlockingParameters.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *PolicyBasedChallenge_TemporaryUserBlocking) Size() (n int) {
	var l int
	_ = l
	if m.TemporaryUserBlocking != nil {
		l = m.TemporaryUserBlocking.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *PolicyBasedChallenge_DefaultMitigationSettings) Size() (n int) {
	var l int
	_ = l
	if m.DefaultMitigationSettings != nil {
		l = m.DefaultMitigationSettings.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *PolicyBasedChallenge_MaliciousUserMitigation) Size() (n int) {
	var l int
	_ = l
	if m.MaliciousUserMitigation != nil {
		l = m.MaliciousUserMitigation.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *PolicyBasedChallenge_NoChallenge) Size() (n int) {
	var l int
	_ = l
	if m.NoChallenge != nil {
		l = m.NoChallenge.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *PolicyBasedChallenge_AlwaysEnableJsChallenge) Size() (n int) {
	var l int
	_ = l
	if m.AlwaysEnableJsChallenge != nil {
		l = m.AlwaysEnableJsChallenge.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *PolicyBasedChallenge_AlwaysEnableCaptchaChallenge) Size() (n int) {
	var l int
	_ = l
	if m.AlwaysEnableCaptchaChallenge != nil {
		l = m.AlwaysEnableCaptchaChallenge.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ChallengeRule) Size() (n int) {
	var l int
	_ = l
	if m.Metadata != nil {
		l = m.Metadata.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.Spec != nil {
		l = m.Spec.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *ChallengeRuleList) Size() (n int) {
	var l int
	_ = l
	if len(m.Rules) > 0 {
		for _, e := range m.Rules {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *SimpleClientSrcRule) Size() (n int) {
	var l int
	_ = l
	if m.ClientSourceChoice != nil {
		n += m.ClientSourceChoice.Size()
	}
	if m.ExpirationTimestamp != nil {
		l = m.ExpirationTimestamp.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.Metadata != nil {
		l = m.Metadata.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *SimpleClientSrcRule_IpPrefix) Size() (n int) {
	var l int
	_ = l
	l = len(m.IpPrefix)
	n += 1 + l + sovTypes(uint64(l))
	return n
}
func (m *SimpleClientSrcRule_AsNumber) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovTypes(uint64(m.AsNumber))
	return n
}
func (m *CustomIpAllowedList) Size() (n int) {
	var l int
	_ = l
	if len(m.RateLimiterAllowedPrefixes) > 0 {
		for _, e := range m.RateLimiterAllowedPrefixes {
			l = e.Size()
			n += 2 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *RateLimitConfigType) Size() (n int) {
	var l int
	_ = l
	if m.RateLimiter != nil {
		l = m.RateLimiter.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.IpAllowedListChoice != nil {
		n += m.IpAllowedListChoice.Size()
	}
	if m.PolicyChoice != nil {
		n += m.PolicyChoice.Size()
	}
	return n
}

func (m *RateLimitConfigType_NoIpAllowedList) Size() (n int) {
	var l int
	_ = l
	if m.NoIpAllowedList != nil {
		l = m.NoIpAllowedList.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *RateLimitConfigType_IpAllowedList) Size() (n int) {
	var l int
	_ = l
	if m.IpAllowedList != nil {
		l = m.IpAllowedList.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *RateLimitConfigType_CustomIpAllowedList) Size() (n int) {
	var l int
	_ = l
	if m.CustomIpAllowedList != nil {
		l = m.CustomIpAllowedList.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *RateLimitConfigType_NoPolicies) Size() (n int) {
	var l int
	_ = l
	if m.NoPolicies != nil {
		l = m.NoPolicies.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *RateLimitConfigType_Policies) Size() (n int) {
	var l int
	_ = l
	if m.Policies != nil {
		l = m.Policies.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ServicePolicyList) Size() (n int) {
	var l int
	_ = l
	if len(m.Policies) > 0 {
		for _, e := range m.Policies {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *GlobalSpecType) Size() (n int) {
	var l int
	_ = l
	if len(m.Domains) > 0 {
		for _, s := range m.Domains {
			l = len(s)
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if m.LoadbalancerType != nil {
		n += m.LoadbalancerType.Size()
	}
	if m.AdvertiseChoice != nil {
		n += m.AdvertiseChoice.Size()
	}
	if len(m.DefaultRoutePools) > 0 {
		for _, e := range m.DefaultRoutePools {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if len(m.Routes) > 0 {
		for _, e := range m.Routes {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if m.CorsPolicy != nil {
		l = m.CorsPolicy.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.WafChoice != nil {
		n += m.WafChoice.Size()
	}
	if m.AddLocation {
		n += 3
	}
	if m.ChallengeType != nil {
		n += m.ChallengeType.Size()
	}
	if m.MoreOption != nil {
		l = m.MoreOption.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	if m.UserIdentification != nil {
		l = m.UserIdentification.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	if m.RateLimitChoice != nil {
		n += m.RateLimitChoice.Size()
	}
	if m.HostRewriteParams != nil {
		n += m.HostRewriteParams.Size()
	}
	if m.MaliciousUserMitigation != nil {
		l = m.MaliciousUserMitigation.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	if len(m.WafExclusionRules) > 0 {
		for _, e := range m.WafExclusionRules {
			l = e.Size()
			n += 2 + l + sovTypes(uint64(l))
		}
	}
	if len(m.BlockedClients) > 0 {
		for _, e := range m.BlockedClients {
			l = e.Size()
			n += 2 + l + sovTypes(uint64(l))
		}
	}
	if len(m.TrustedClients) > 0 {
		for _, e := range m.TrustedClients {
			l = e.Size()
			n += 2 + l + sovTypes(uint64(l))
		}
	}
	if m.ServicePolicyChoice != nil {
		n += m.ServicePolicyChoice.Size()
	}
	if m.HashPolicyChoice != nil {
		n += m.HashPolicyChoice.Size()
	}
	if m.ViewInternal != nil {
		l = m.ViewInternal.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	l = len(m.HostName)
	if l > 0 {
		n += 2 + l + sovTypes(uint64(l))
	}
	if len(m.DnsInfo) > 0 {
		for _, e := range m.DnsInfo {
			l = e.Size()
			n += 2 + l + sovTypes(uint64(l))
		}
	}
	if m.State != 0 {
		n += 2 + sovTypes(uint64(m.State))
	}
	if m.AutoCertState != 0 {
		n += 2 + sovTypes(uint64(m.AutoCertState))
	}
	if m.AutoCertInfo != nil {
		l = m.AutoCertInfo.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *GlobalSpecType_Http) Size() (n int) {
	var l int
	_ = l
	if m.Http != nil {
		l = m.Http.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_Https) Size() (n int) {
	var l int
	_ = l
	if m.Https != nil {
		l = m.Https.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_AdvertiseOnPublic) Size() (n int) {
	var l int
	_ = l
	if m.AdvertiseOnPublic != nil {
		l = m.AdvertiseOnPublic.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_AdvertiseCustom) Size() (n int) {
	var l int
	_ = l
	if m.AdvertiseCustom != nil {
		l = m.AdvertiseCustom.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_Waf) Size() (n int) {
	var l int
	_ = l
	if m.Waf != nil {
		l = m.Waf.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_WafRule) Size() (n int) {
	var l int
	_ = l
	if m.WafRule != nil {
		l = m.WafRule.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_DisableWaf) Size() (n int) {
	var l int
	_ = l
	if m.DisableWaf != nil {
		l = m.DisableWaf.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_DoNotAdvertise) Size() (n int) {
	var l int
	_ = l
	if m.DoNotAdvertise != nil {
		l = m.DoNotAdvertise.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_AdvertiseOnPublicDefaultVip) Size() (n int) {
	var l int
	_ = l
	if m.AdvertiseOnPublicDefaultVip != nil {
		l = m.AdvertiseOnPublicDefaultVip.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_JsChallenge) Size() (n int) {
	var l int
	_ = l
	if m.JsChallenge != nil {
		l = m.JsChallenge.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_DisableRateLimit) Size() (n int) {
	var l int
	_ = l
	if m.DisableRateLimit != nil {
		l = m.DisableRateLimit.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_RateLimit) Size() (n int) {
	var l int
	_ = l
	if m.RateLimit != nil {
		l = m.RateLimit.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_CaptchaChallenge) Size() (n int) {
	var l int
	_ = l
	if m.CaptchaChallenge != nil {
		l = m.CaptchaChallenge.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_NoChallenge) Size() (n int) {
	var l int
	_ = l
	if m.NoChallenge != nil {
		l = m.NoChallenge.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_HttpsAutoCert) Size() (n int) {
	var l int
	_ = l
	if m.HttpsAutoCert != nil {
		l = m.HttpsAutoCert.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_AutoHostRewrite) Size() (n int) {
	var l int
	_ = l
	if m.AutoHostRewrite != nil {
		l = m.AutoHostRewrite.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_HostRewrite) Size() (n int) {
	var l int
	_ = l
	l = len(m.HostRewrite)
	n += 2 + l + sovTypes(uint64(l))
	return n
}
func (m *GlobalSpecType_DisableHostRewrite) Size() (n int) {
	var l int
	_ = l
	if m.DisableHostRewrite != nil {
		l = m.DisableHostRewrite.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_ServicePoliciesFromNamespace) Size() (n int) {
	var l int
	_ = l
	if m.ServicePoliciesFromNamespace != nil {
		l = m.ServicePoliciesFromNamespace.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_NoServicePolicies) Size() (n int) {
	var l int
	_ = l
	if m.NoServicePolicies != nil {
		l = m.NoServicePolicies.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_ActiveServicePolicies) Size() (n int) {
	var l int
	_ = l
	if m.ActiveServicePolicies != nil {
		l = m.ActiveServicePolicies.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_RoundRobin) Size() (n int) {
	var l int
	_ = l
	if m.RoundRobin != nil {
		l = m.RoundRobin.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_LeastActive) Size() (n int) {
	var l int
	_ = l
	if m.LeastActive != nil {
		l = m.LeastActive.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_Random) Size() (n int) {
	var l int
	_ = l
	if m.Random != nil {
		l = m.Random.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_SourceIpStickiness) Size() (n int) {
	var l int
	_ = l
	if m.SourceIpStickiness != nil {
		l = m.SourceIpStickiness.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_CookieStickiness) Size() (n int) {
	var l int
	_ = l
	if m.CookieStickiness != nil {
		l = m.CookieStickiness.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_RingHash) Size() (n int) {
	var l int
	_ = l
	if m.RingHash != nil {
		l = m.RingHash.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_PolicyBasedChallenge) Size() (n int) {
	var l int
	_ = l
	if m.PolicyBasedChallenge != nil {
		l = m.PolicyBasedChallenge.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType) Size() (n int) {
	var l int
	_ = l
	if len(m.Domains) > 0 {
		for _, s := range m.Domains {
			l = len(s)
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if m.LoadbalancerType != nil {
		n += m.LoadbalancerType.Size()
	}
	if m.AdvertiseChoice != nil {
		n += m.AdvertiseChoice.Size()
	}
	if len(m.DefaultRoutePools) > 0 {
		for _, e := range m.DefaultRoutePools {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if len(m.Routes) > 0 {
		for _, e := range m.Routes {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if m.CorsPolicy != nil {
		l = m.CorsPolicy.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.WafChoice != nil {
		n += m.WafChoice.Size()
	}
	if m.AddLocation {
		n += 3
	}
	if m.ChallengeType != nil {
		n += m.ChallengeType.Size()
	}
	if m.MoreOption != nil {
		l = m.MoreOption.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	if m.UserIdentification != nil {
		l = m.UserIdentification.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	if m.RateLimitChoice != nil {
		n += m.RateLimitChoice.Size()
	}
	if m.MaliciousUserMitigation != nil {
		l = m.MaliciousUserMitigation.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	if len(m.WafExclusionRules) > 0 {
		for _, e := range m.WafExclusionRules {
			l = e.Size()
			n += 2 + l + sovTypes(uint64(l))
		}
	}
	if len(m.BlockedClients) > 0 {
		for _, e := range m.BlockedClients {
			l = e.Size()
			n += 2 + l + sovTypes(uint64(l))
		}
	}
	if len(m.TrustedClients) > 0 {
		for _, e := range m.TrustedClients {
			l = e.Size()
			n += 2 + l + sovTypes(uint64(l))
		}
	}
	if m.ServicePolicyChoice != nil {
		n += m.ServicePolicyChoice.Size()
	}
	if m.HashPolicyChoice != nil {
		n += m.HashPolicyChoice.Size()
	}
	return n
}

func (m *CreateSpecType_Http) Size() (n int) {
	var l int
	_ = l
	if m.Http != nil {
		l = m.Http.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_Https) Size() (n int) {
	var l int
	_ = l
	if m.Https != nil {
		l = m.Https.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_AdvertiseOnPublic) Size() (n int) {
	var l int
	_ = l
	if m.AdvertiseOnPublic != nil {
		l = m.AdvertiseOnPublic.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_AdvertiseCustom) Size() (n int) {
	var l int
	_ = l
	if m.AdvertiseCustom != nil {
		l = m.AdvertiseCustom.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_Waf) Size() (n int) {
	var l int
	_ = l
	if m.Waf != nil {
		l = m.Waf.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_WafRule) Size() (n int) {
	var l int
	_ = l
	if m.WafRule != nil {
		l = m.WafRule.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_DisableWaf) Size() (n int) {
	var l int
	_ = l
	if m.DisableWaf != nil {
		l = m.DisableWaf.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_DoNotAdvertise) Size() (n int) {
	var l int
	_ = l
	if m.DoNotAdvertise != nil {
		l = m.DoNotAdvertise.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_AdvertiseOnPublicDefaultVip) Size() (n int) {
	var l int
	_ = l
	if m.AdvertiseOnPublicDefaultVip != nil {
		l = m.AdvertiseOnPublicDefaultVip.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_JsChallenge) Size() (n int) {
	var l int
	_ = l
	if m.JsChallenge != nil {
		l = m.JsChallenge.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_DisableRateLimit) Size() (n int) {
	var l int
	_ = l
	if m.DisableRateLimit != nil {
		l = m.DisableRateLimit.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_RateLimit) Size() (n int) {
	var l int
	_ = l
	if m.RateLimit != nil {
		l = m.RateLimit.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_CaptchaChallenge) Size() (n int) {
	var l int
	_ = l
	if m.CaptchaChallenge != nil {
		l = m.CaptchaChallenge.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_NoChallenge) Size() (n int) {
	var l int
	_ = l
	if m.NoChallenge != nil {
		l = m.NoChallenge.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_HttpsAutoCert) Size() (n int) {
	var l int
	_ = l
	if m.HttpsAutoCert != nil {
		l = m.HttpsAutoCert.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_ServicePoliciesFromNamespace) Size() (n int) {
	var l int
	_ = l
	if m.ServicePoliciesFromNamespace != nil {
		l = m.ServicePoliciesFromNamespace.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_NoServicePolicies) Size() (n int) {
	var l int
	_ = l
	if m.NoServicePolicies != nil {
		l = m.NoServicePolicies.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_ActiveServicePolicies) Size() (n int) {
	var l int
	_ = l
	if m.ActiveServicePolicies != nil {
		l = m.ActiveServicePolicies.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_RoundRobin) Size() (n int) {
	var l int
	_ = l
	if m.RoundRobin != nil {
		l = m.RoundRobin.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_LeastActive) Size() (n int) {
	var l int
	_ = l
	if m.LeastActive != nil {
		l = m.LeastActive.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_Random) Size() (n int) {
	var l int
	_ = l
	if m.Random != nil {
		l = m.Random.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_SourceIpStickiness) Size() (n int) {
	var l int
	_ = l
	if m.SourceIpStickiness != nil {
		l = m.SourceIpStickiness.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_CookieStickiness) Size() (n int) {
	var l int
	_ = l
	if m.CookieStickiness != nil {
		l = m.CookieStickiness.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_RingHash) Size() (n int) {
	var l int
	_ = l
	if m.RingHash != nil {
		l = m.RingHash.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_PolicyBasedChallenge) Size() (n int) {
	var l int
	_ = l
	if m.PolicyBasedChallenge != nil {
		l = m.PolicyBasedChallenge.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType) Size() (n int) {
	var l int
	_ = l
	if len(m.Domains) > 0 {
		for _, s := range m.Domains {
			l = len(s)
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if m.LoadbalancerType != nil {
		n += m.LoadbalancerType.Size()
	}
	if m.AdvertiseChoice != nil {
		n += m.AdvertiseChoice.Size()
	}
	if len(m.DefaultRoutePools) > 0 {
		for _, e := range m.DefaultRoutePools {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if len(m.Routes) > 0 {
		for _, e := range m.Routes {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if m.CorsPolicy != nil {
		l = m.CorsPolicy.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.WafChoice != nil {
		n += m.WafChoice.Size()
	}
	if m.AddLocation {
		n += 3
	}
	if m.ChallengeType != nil {
		n += m.ChallengeType.Size()
	}
	if m.MoreOption != nil {
		l = m.MoreOption.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	if m.UserIdentification != nil {
		l = m.UserIdentification.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	if m.RateLimitChoice != nil {
		n += m.RateLimitChoice.Size()
	}
	if m.MaliciousUserMitigation != nil {
		l = m.MaliciousUserMitigation.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	if len(m.WafExclusionRules) > 0 {
		for _, e := range m.WafExclusionRules {
			l = e.Size()
			n += 2 + l + sovTypes(uint64(l))
		}
	}
	if len(m.BlockedClients) > 0 {
		for _, e := range m.BlockedClients {
			l = e.Size()
			n += 2 + l + sovTypes(uint64(l))
		}
	}
	if len(m.TrustedClients) > 0 {
		for _, e := range m.TrustedClients {
			l = e.Size()
			n += 2 + l + sovTypes(uint64(l))
		}
	}
	if m.ServicePolicyChoice != nil {
		n += m.ServicePolicyChoice.Size()
	}
	if m.HashPolicyChoice != nil {
		n += m.HashPolicyChoice.Size()
	}
	return n
}

func (m *ReplaceSpecType_Http) Size() (n int) {
	var l int
	_ = l
	if m.Http != nil {
		l = m.Http.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_Https) Size() (n int) {
	var l int
	_ = l
	if m.Https != nil {
		l = m.Https.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_AdvertiseOnPublic) Size() (n int) {
	var l int
	_ = l
	if m.AdvertiseOnPublic != nil {
		l = m.AdvertiseOnPublic.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_AdvertiseCustom) Size() (n int) {
	var l int
	_ = l
	if m.AdvertiseCustom != nil {
		l = m.AdvertiseCustom.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_Waf) Size() (n int) {
	var l int
	_ = l
	if m.Waf != nil {
		l = m.Waf.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_WafRule) Size() (n int) {
	var l int
	_ = l
	if m.WafRule != nil {
		l = m.WafRule.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_DisableWaf) Size() (n int) {
	var l int
	_ = l
	if m.DisableWaf != nil {
		l = m.DisableWaf.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_DoNotAdvertise) Size() (n int) {
	var l int
	_ = l
	if m.DoNotAdvertise != nil {
		l = m.DoNotAdvertise.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_AdvertiseOnPublicDefaultVip) Size() (n int) {
	var l int
	_ = l
	if m.AdvertiseOnPublicDefaultVip != nil {
		l = m.AdvertiseOnPublicDefaultVip.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_JsChallenge) Size() (n int) {
	var l int
	_ = l
	if m.JsChallenge != nil {
		l = m.JsChallenge.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_DisableRateLimit) Size() (n int) {
	var l int
	_ = l
	if m.DisableRateLimit != nil {
		l = m.DisableRateLimit.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_RateLimit) Size() (n int) {
	var l int
	_ = l
	if m.RateLimit != nil {
		l = m.RateLimit.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_CaptchaChallenge) Size() (n int) {
	var l int
	_ = l
	if m.CaptchaChallenge != nil {
		l = m.CaptchaChallenge.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_NoChallenge) Size() (n int) {
	var l int
	_ = l
	if m.NoChallenge != nil {
		l = m.NoChallenge.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_HttpsAutoCert) Size() (n int) {
	var l int
	_ = l
	if m.HttpsAutoCert != nil {
		l = m.HttpsAutoCert.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_ServicePoliciesFromNamespace) Size() (n int) {
	var l int
	_ = l
	if m.ServicePoliciesFromNamespace != nil {
		l = m.ServicePoliciesFromNamespace.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_NoServicePolicies) Size() (n int) {
	var l int
	_ = l
	if m.NoServicePolicies != nil {
		l = m.NoServicePolicies.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_ActiveServicePolicies) Size() (n int) {
	var l int
	_ = l
	if m.ActiveServicePolicies != nil {
		l = m.ActiveServicePolicies.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_RoundRobin) Size() (n int) {
	var l int
	_ = l
	if m.RoundRobin != nil {
		l = m.RoundRobin.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_LeastActive) Size() (n int) {
	var l int
	_ = l
	if m.LeastActive != nil {
		l = m.LeastActive.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_Random) Size() (n int) {
	var l int
	_ = l
	if m.Random != nil {
		l = m.Random.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_SourceIpStickiness) Size() (n int) {
	var l int
	_ = l
	if m.SourceIpStickiness != nil {
		l = m.SourceIpStickiness.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_CookieStickiness) Size() (n int) {
	var l int
	_ = l
	if m.CookieStickiness != nil {
		l = m.CookieStickiness.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_RingHash) Size() (n int) {
	var l int
	_ = l
	if m.RingHash != nil {
		l = m.RingHash.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_PolicyBasedChallenge) Size() (n int) {
	var l int
	_ = l
	if m.PolicyBasedChallenge != nil {
		l = m.PolicyBasedChallenge.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType) Size() (n int) {
	var l int
	_ = l
	if len(m.Domains) > 0 {
		for _, s := range m.Domains {
			l = len(s)
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if m.LoadbalancerType != nil {
		n += m.LoadbalancerType.Size()
	}
	if m.AdvertiseChoice != nil {
		n += m.AdvertiseChoice.Size()
	}
	if len(m.DefaultRoutePools) > 0 {
		for _, e := range m.DefaultRoutePools {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if len(m.Routes) > 0 {
		for _, e := range m.Routes {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if m.CorsPolicy != nil {
		l = m.CorsPolicy.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.WafChoice != nil {
		n += m.WafChoice.Size()
	}
	if m.AddLocation {
		n += 3
	}
	if m.ChallengeType != nil {
		n += m.ChallengeType.Size()
	}
	if m.MoreOption != nil {
		l = m.MoreOption.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	if m.UserIdentification != nil {
		l = m.UserIdentification.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	if m.RateLimitChoice != nil {
		n += m.RateLimitChoice.Size()
	}
	if m.MaliciousUserMitigation != nil {
		l = m.MaliciousUserMitigation.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	if len(m.WafExclusionRules) > 0 {
		for _, e := range m.WafExclusionRules {
			l = e.Size()
			n += 2 + l + sovTypes(uint64(l))
		}
	}
	if len(m.BlockedClients) > 0 {
		for _, e := range m.BlockedClients {
			l = e.Size()
			n += 2 + l + sovTypes(uint64(l))
		}
	}
	if len(m.TrustedClients) > 0 {
		for _, e := range m.TrustedClients {
			l = e.Size()
			n += 2 + l + sovTypes(uint64(l))
		}
	}
	if m.ServicePolicyChoice != nil {
		n += m.ServicePolicyChoice.Size()
	}
	if m.HashPolicyChoice != nil {
		n += m.HashPolicyChoice.Size()
	}
	l = len(m.HostName)
	if l > 0 {
		n += 2 + l + sovTypes(uint64(l))
	}
	if len(m.DnsInfo) > 0 {
		for _, e := range m.DnsInfo {
			l = e.Size()
			n += 2 + l + sovTypes(uint64(l))
		}
	}
	if m.State != 0 {
		n += 2 + sovTypes(uint64(m.State))
	}
	if m.AutoCertState != 0 {
		n += 2 + sovTypes(uint64(m.AutoCertState))
	}
	if m.AutoCertInfo != nil {
		l = m.AutoCertInfo.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *GetSpecType_Http) Size() (n int) {
	var l int
	_ = l
	if m.Http != nil {
		l = m.Http.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_Https) Size() (n int) {
	var l int
	_ = l
	if m.Https != nil {
		l = m.Https.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_AdvertiseOnPublic) Size() (n int) {
	var l int
	_ = l
	if m.AdvertiseOnPublic != nil {
		l = m.AdvertiseOnPublic.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_AdvertiseCustom) Size() (n int) {
	var l int
	_ = l
	if m.AdvertiseCustom != nil {
		l = m.AdvertiseCustom.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_Waf) Size() (n int) {
	var l int
	_ = l
	if m.Waf != nil {
		l = m.Waf.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_WafRule) Size() (n int) {
	var l int
	_ = l
	if m.WafRule != nil {
		l = m.WafRule.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_DisableWaf) Size() (n int) {
	var l int
	_ = l
	if m.DisableWaf != nil {
		l = m.DisableWaf.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_DoNotAdvertise) Size() (n int) {
	var l int
	_ = l
	if m.DoNotAdvertise != nil {
		l = m.DoNotAdvertise.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_AdvertiseOnPublicDefaultVip) Size() (n int) {
	var l int
	_ = l
	if m.AdvertiseOnPublicDefaultVip != nil {
		l = m.AdvertiseOnPublicDefaultVip.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_JsChallenge) Size() (n int) {
	var l int
	_ = l
	if m.JsChallenge != nil {
		l = m.JsChallenge.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_DisableRateLimit) Size() (n int) {
	var l int
	_ = l
	if m.DisableRateLimit != nil {
		l = m.DisableRateLimit.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_RateLimit) Size() (n int) {
	var l int
	_ = l
	if m.RateLimit != nil {
		l = m.RateLimit.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_CaptchaChallenge) Size() (n int) {
	var l int
	_ = l
	if m.CaptchaChallenge != nil {
		l = m.CaptchaChallenge.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_NoChallenge) Size() (n int) {
	var l int
	_ = l
	if m.NoChallenge != nil {
		l = m.NoChallenge.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_HttpsAutoCert) Size() (n int) {
	var l int
	_ = l
	if m.HttpsAutoCert != nil {
		l = m.HttpsAutoCert.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_ServicePoliciesFromNamespace) Size() (n int) {
	var l int
	_ = l
	if m.ServicePoliciesFromNamespace != nil {
		l = m.ServicePoliciesFromNamespace.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_NoServicePolicies) Size() (n int) {
	var l int
	_ = l
	if m.NoServicePolicies != nil {
		l = m.NoServicePolicies.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_ActiveServicePolicies) Size() (n int) {
	var l int
	_ = l
	if m.ActiveServicePolicies != nil {
		l = m.ActiveServicePolicies.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_RoundRobin) Size() (n int) {
	var l int
	_ = l
	if m.RoundRobin != nil {
		l = m.RoundRobin.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_LeastActive) Size() (n int) {
	var l int
	_ = l
	if m.LeastActive != nil {
		l = m.LeastActive.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_Random) Size() (n int) {
	var l int
	_ = l
	if m.Random != nil {
		l = m.Random.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_SourceIpStickiness) Size() (n int) {
	var l int
	_ = l
	if m.SourceIpStickiness != nil {
		l = m.SourceIpStickiness.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_CookieStickiness) Size() (n int) {
	var l int
	_ = l
	if m.CookieStickiness != nil {
		l = m.CookieStickiness.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_RingHash) Size() (n int) {
	var l int
	_ = l
	if m.RingHash != nil {
		l = m.RingHash.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_PolicyBasedChallenge) Size() (n int) {
	var l int
	_ = l
	if m.PolicyBasedChallenge != nil {
		l = m.PolicyBasedChallenge.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}

func sovTypes(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozTypes(x uint64) (n int) {
	return sovTypes(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *DownstreamTlsValidationContext) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DownstreamTlsValidationContext{`,
		`TrustedCaUrl:` + fmt.Sprintf("%v", this.TrustedCaUrl) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DownstreamTlsParamsType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DownstreamTlsParamsType{`,
		`TlsConfig:` + strings.Replace(fmt.Sprintf("%v", this.TlsConfig), "TlsConfig", "ves_io_schema_views.TlsConfig", 1) + `,`,
		`TlsCertificates:` + strings.Replace(fmt.Sprintf("%v", this.TlsCertificates), "TlsCertificateType", "ves_io_schema4.TlsCertificateType", 1) + `,`,
		`MtlsChoice:` + fmt.Sprintf("%v", this.MtlsChoice) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DownstreamTlsParamsType_NoMtls) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DownstreamTlsParamsType_NoMtls{`,
		`NoMtls:` + strings.Replace(fmt.Sprintf("%v", this.NoMtls), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DownstreamTlsParamsType_UseMtls) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DownstreamTlsParamsType_UseMtls{`,
		`UseMtls:` + strings.Replace(fmt.Sprintf("%v", this.UseMtls), "DownstreamTlsValidationContext", "DownstreamTlsValidationContext", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ProxyTypeHttps) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ProxyTypeHttps{`,
		`HttpRedirect:` + fmt.Sprintf("%v", this.HttpRedirect) + `,`,
		`AddHsts:` + fmt.Sprintf("%v", this.AddHsts) + `,`,
		`TlsParameters:` + strings.Replace(fmt.Sprintf("%v", this.TlsParameters), "DownstreamTlsParamsType", "DownstreamTlsParamsType", 1) + `,`,
		`ServerHeaderChoice:` + fmt.Sprintf("%v", this.ServerHeaderChoice) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ProxyTypeHttps_DefaultHeader) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ProxyTypeHttps_DefaultHeader{`,
		`DefaultHeader:` + strings.Replace(fmt.Sprintf("%v", this.DefaultHeader), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ProxyTypeHttps_ServerName) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ProxyTypeHttps_ServerName{`,
		`ServerName:` + fmt.Sprintf("%v", this.ServerName) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ProxyTypeHttps_AppendServerName) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ProxyTypeHttps_AppendServerName{`,
		`AppendServerName:` + fmt.Sprintf("%v", this.AppendServerName) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ProxyTypeHttps_PassThrough) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ProxyTypeHttps_PassThrough{`,
		`PassThrough:` + strings.Replace(fmt.Sprintf("%v", this.PassThrough), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ProxyTypeHttp) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ProxyTypeHttp{`,
		`DnsVolterraManaged:` + fmt.Sprintf("%v", this.DnsVolterraManaged) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ProxyTypeHttpsAutoCerts) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ProxyTypeHttpsAutoCerts{`,
		`HttpRedirect:` + fmt.Sprintf("%v", this.HttpRedirect) + `,`,
		`AddHsts:` + fmt.Sprintf("%v", this.AddHsts) + `,`,
		`TlsConfig:` + strings.Replace(fmt.Sprintf("%v", this.TlsConfig), "TlsConfig", "ves_io_schema_views.TlsConfig", 1) + `,`,
		`MtlsChoice:` + fmt.Sprintf("%v", this.MtlsChoice) + `,`,
		`ServerHeaderChoice:` + fmt.Sprintf("%v", this.ServerHeaderChoice) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ProxyTypeHttpsAutoCerts_NoMtls) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ProxyTypeHttpsAutoCerts_NoMtls{`,
		`NoMtls:` + strings.Replace(fmt.Sprintf("%v", this.NoMtls), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ProxyTypeHttpsAutoCerts_UseMtls) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ProxyTypeHttpsAutoCerts_UseMtls{`,
		`UseMtls:` + strings.Replace(fmt.Sprintf("%v", this.UseMtls), "DownstreamTlsValidationContext", "DownstreamTlsValidationContext", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ProxyTypeHttpsAutoCerts_DefaultHeader) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ProxyTypeHttpsAutoCerts_DefaultHeader{`,
		`DefaultHeader:` + strings.Replace(fmt.Sprintf("%v", this.DefaultHeader), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ProxyTypeHttpsAutoCerts_ServerName) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ProxyTypeHttpsAutoCerts_ServerName{`,
		`ServerName:` + fmt.Sprintf("%v", this.ServerName) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ProxyTypeHttpsAutoCerts_AppendServerName) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ProxyTypeHttpsAutoCerts_AppendServerName{`,
		`AppendServerName:` + fmt.Sprintf("%v", this.AppendServerName) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ProxyTypeHttpsAutoCerts_PassThrough) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ProxyTypeHttpsAutoCerts_PassThrough{`,
		`PassThrough:` + strings.Replace(fmt.Sprintf("%v", this.PassThrough), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *HashPolicyListType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&HashPolicyListType{`,
		`HashPolicy:` + strings.Replace(fmt.Sprintf("%v", this.HashPolicy), "HashPolicyType", "ves_io_schema_route.HashPolicyType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *MirrorPolicyType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MirrorPolicyType{`,
		`OriginPool:` + strings.Replace(fmt.Sprintf("%v", this.OriginPool), "ObjectRefType", "ves_io_schema_views.ObjectRefType", 1) + `,`,
		`Percent:` + strings.Replace(fmt.Sprintf("%v", this.Percent), "FractionalPercent", "ves_io_schema4.FractionalPercent", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RouteSimpleAdvancedOptions) String() string {
	if this == nil {
		return "nil"
	}
	keysForEndpointSubsets := make([]string, 0, len(this.EndpointSubsets))
	for k, _ := range this.EndpointSubsets {
		keysForEndpointSubsets = append(keysForEndpointSubsets, k)
	}
	sortkeys.Strings(keysForEndpointSubsets)
	mapStringForEndpointSubsets := "map[string]string{"
	for _, k := range keysForEndpointSubsets {
		mapStringForEndpointSubsets += fmt.Sprintf("%v: %v,", k, this.EndpointSubsets[k])
	}
	mapStringForEndpointSubsets += "}"
	s := strings.Join([]string{`&RouteSimpleAdvancedOptions{`,
		`HashPolicyChoice:` + fmt.Sprintf("%v", this.HashPolicyChoice) + `,`,
		`Priority:` + fmt.Sprintf("%v", this.Priority) + `,`,
		`EndpointSubsets:` + mapStringForEndpointSubsets + `,`,
		`RewriteChoice:` + fmt.Sprintf("%v", this.RewriteChoice) + `,`,
		`RequestHeadersToAdd:` + strings.Replace(fmt.Sprintf("%v", this.RequestHeadersToAdd), "HeaderManipulationOptionType", "ves_io_schema4.HeaderManipulationOptionType", 1) + `,`,
		`RequestHeadersToRemove:` + fmt.Sprintf("%v", this.RequestHeadersToRemove) + `,`,
		`ResponseHeadersToAdd:` + strings.Replace(fmt.Sprintf("%v", this.ResponseHeadersToAdd), "HeaderManipulationOptionType", "ves_io_schema4.HeaderManipulationOptionType", 1) + `,`,
		`ResponseHeadersToRemove:` + fmt.Sprintf("%v", this.ResponseHeadersToRemove) + `,`,
		`DisableLocationAdd:` + fmt.Sprintf("%v", this.DisableLocationAdd) + `,`,
		`WafChoice:` + fmt.Sprintf("%v", this.WafChoice) + `,`,
		`CorsPolicy:` + strings.Replace(fmt.Sprintf("%v", this.CorsPolicy), "CorsPolicy", "ves_io_schema4.CorsPolicy", 1) + `,`,
		`SpdyChoice:` + fmt.Sprintf("%v", this.SpdyChoice) + `,`,
		`WebsocketChoice:` + fmt.Sprintf("%v", this.WebsocketChoice) + `,`,
		`RetryPolicyChoice:` + fmt.Sprintf("%v", this.RetryPolicyChoice) + `,`,
		`Timeout:` + fmt.Sprintf("%v", this.Timeout) + `,`,
		`BufferChoice:` + fmt.Sprintf("%v", this.BufferChoice) + `,`,
		`MirroringChoice:` + fmt.Sprintf("%v", this.MirroringChoice) + `,`,
		`ClusterRetractChoice:` + fmt.Sprintf("%v", this.ClusterRetractChoice) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RouteSimpleAdvancedOptions_CommonHashPolicy) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RouteSimpleAdvancedOptions_CommonHashPolicy{`,
		`CommonHashPolicy:` + strings.Replace(fmt.Sprintf("%v", this.CommonHashPolicy), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RouteSimpleAdvancedOptions_SpecificHashPolicy) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RouteSimpleAdvancedOptions_SpecificHashPolicy{`,
		`SpecificHashPolicy:` + strings.Replace(fmt.Sprintf("%v", this.SpecificHashPolicy), "HashPolicyListType", "HashPolicyListType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RouteSimpleAdvancedOptions_DisablePrefixRewrite) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RouteSimpleAdvancedOptions_DisablePrefixRewrite{`,
		`DisablePrefixRewrite:` + strings.Replace(fmt.Sprintf("%v", this.DisablePrefixRewrite), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RouteSimpleAdvancedOptions_PrefixRewrite) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RouteSimpleAdvancedOptions_PrefixRewrite{`,
		`PrefixRewrite:` + fmt.Sprintf("%v", this.PrefixRewrite) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RouteSimpleAdvancedOptions_DisableWaf) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RouteSimpleAdvancedOptions_DisableWaf{`,
		`DisableWaf:` + strings.Replace(fmt.Sprintf("%v", this.DisableWaf), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RouteSimpleAdvancedOptions_Waf) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RouteSimpleAdvancedOptions_Waf{`,
		`Waf:` + strings.Replace(fmt.Sprintf("%v", this.Waf), "ObjectRefType", "ves_io_schema_views.ObjectRefType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RouteSimpleAdvancedOptions_WafRule) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RouteSimpleAdvancedOptions_WafRule{`,
		`WafRule:` + strings.Replace(fmt.Sprintf("%v", this.WafRule), "ObjectRefType", "ves_io_schema_views.ObjectRefType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RouteSimpleAdvancedOptions_DisableSpdy) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RouteSimpleAdvancedOptions_DisableSpdy{`,
		`DisableSpdy:` + strings.Replace(fmt.Sprintf("%v", this.DisableSpdy), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RouteSimpleAdvancedOptions_EnableSpdy) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RouteSimpleAdvancedOptions_EnableSpdy{`,
		`EnableSpdy:` + strings.Replace(fmt.Sprintf("%v", this.EnableSpdy), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RouteSimpleAdvancedOptions_DisableWebSocketConfig) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RouteSimpleAdvancedOptions_DisableWebSocketConfig{`,
		`DisableWebSocketConfig:` + strings.Replace(fmt.Sprintf("%v", this.DisableWebSocketConfig), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RouteSimpleAdvancedOptions_WebSocketConfig) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RouteSimpleAdvancedOptions_WebSocketConfig{`,
		`WebSocketConfig:` + strings.Replace(fmt.Sprintf("%v", this.WebSocketConfig), "WebsocketConfigType", "ves_io_schema_route.WebsocketConfigType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RouteSimpleAdvancedOptions_DefaultRetryPolicy) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RouteSimpleAdvancedOptions_DefaultRetryPolicy{`,
		`DefaultRetryPolicy:` + strings.Replace(fmt.Sprintf("%v", this.DefaultRetryPolicy), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RouteSimpleAdvancedOptions_RetryPolicy) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RouteSimpleAdvancedOptions_RetryPolicy{`,
		`RetryPolicy:` + strings.Replace(fmt.Sprintf("%v", this.RetryPolicy), "RetryPolicyType", "ves_io_schema4.RetryPolicyType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RouteSimpleAdvancedOptions_CommonBuffering) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RouteSimpleAdvancedOptions_CommonBuffering{`,
		`CommonBuffering:` + strings.Replace(fmt.Sprintf("%v", this.CommonBuffering), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RouteSimpleAdvancedOptions_BufferPolicy) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RouteSimpleAdvancedOptions_BufferPolicy{`,
		`BufferPolicy:` + strings.Replace(fmt.Sprintf("%v", this.BufferPolicy), "BufferConfigType", "ves_io_schema4.BufferConfigType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RouteSimpleAdvancedOptions_DisableMirroring) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RouteSimpleAdvancedOptions_DisableMirroring{`,
		`DisableMirroring:` + strings.Replace(fmt.Sprintf("%v", this.DisableMirroring), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RouteSimpleAdvancedOptions_MirrorPolicy) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RouteSimpleAdvancedOptions_MirrorPolicy{`,
		`MirrorPolicy:` + strings.Replace(fmt.Sprintf("%v", this.MirrorPolicy), "MirrorPolicyType", "MirrorPolicyType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RouteSimpleAdvancedOptions_RetractCluster) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RouteSimpleAdvancedOptions_RetractCluster{`,
		`RetractCluster:` + strings.Replace(fmt.Sprintf("%v", this.RetractCluster), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RouteSimpleAdvancedOptions_DoNotRetractCluster) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RouteSimpleAdvancedOptions_DoNotRetractCluster{`,
		`DoNotRetractCluster:` + strings.Replace(fmt.Sprintf("%v", this.DoNotRetractCluster), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RouteTypeSimpleWithDefaultOriginPool) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RouteTypeSimpleWithDefaultOriginPool{`,
		`HttpMethod:` + fmt.Sprintf("%v", this.HttpMethod) + `,`,
		`Path:` + strings.Replace(fmt.Sprintf("%v", this.Path), "PathMatcherType", "ves_io_schema4.PathMatcherType", 1) + `,`,
		`HostRewriteParams:` + fmt.Sprintf("%v", this.HostRewriteParams) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RouteTypeSimpleWithDefaultOriginPool_AutoHostRewrite) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RouteTypeSimpleWithDefaultOriginPool_AutoHostRewrite{`,
		`AutoHostRewrite:` + strings.Replace(fmt.Sprintf("%v", this.AutoHostRewrite), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RouteTypeSimpleWithDefaultOriginPool_HostRewrite) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RouteTypeSimpleWithDefaultOriginPool_HostRewrite{`,
		`HostRewrite:` + fmt.Sprintf("%v", this.HostRewrite) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RouteTypeSimpleWithDefaultOriginPool_DisableHostRewrite) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RouteTypeSimpleWithDefaultOriginPool_DisableHostRewrite{`,
		`DisableHostRewrite:` + strings.Replace(fmt.Sprintf("%v", this.DisableHostRewrite), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RouteTypeSimple) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RouteTypeSimple{`,
		`Path:` + strings.Replace(fmt.Sprintf("%v", this.Path), "PathMatcherType", "ves_io_schema4.PathMatcherType", 1) + `,`,
		`HttpMethod:` + fmt.Sprintf("%v", this.HttpMethod) + `,`,
		`OriginPools:` + strings.Replace(fmt.Sprintf("%v", this.OriginPools), "OriginPoolWithWeight", "ves_io_schema_views.OriginPoolWithWeight", 1) + `,`,
		`HostRewriteParams:` + fmt.Sprintf("%v", this.HostRewriteParams) + `,`,
		`AdvancedOptions:` + strings.Replace(fmt.Sprintf("%v", this.AdvancedOptions), "RouteSimpleAdvancedOptions", "RouteSimpleAdvancedOptions", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RouteTypeSimple_AutoHostRewrite) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RouteTypeSimple_AutoHostRewrite{`,
		`AutoHostRewrite:` + strings.Replace(fmt.Sprintf("%v", this.AutoHostRewrite), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RouteTypeSimple_HostRewrite) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RouteTypeSimple_HostRewrite{`,
		`HostRewrite:` + fmt.Sprintf("%v", this.HostRewrite) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RouteTypeSimple_DisableHostRewrite) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RouteTypeSimple_DisableHostRewrite{`,
		`DisableHostRewrite:` + strings.Replace(fmt.Sprintf("%v", this.DisableHostRewrite), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RouteTypeRedirect) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RouteTypeRedirect{`,
		`Path:` + strings.Replace(fmt.Sprintf("%v", this.Path), "PathMatcherType", "ves_io_schema4.PathMatcherType", 1) + `,`,
		`HttpMethod:` + fmt.Sprintf("%v", this.HttpMethod) + `,`,
		`RouteRedirect:` + strings.Replace(fmt.Sprintf("%v", this.RouteRedirect), "RouteRedirect", "ves_io_schema_route.RouteRedirect", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RouteTypeDirectResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RouteTypeDirectResponse{`,
		`Path:` + strings.Replace(fmt.Sprintf("%v", this.Path), "PathMatcherType", "ves_io_schema4.PathMatcherType", 1) + `,`,
		`HttpMethod:` + fmt.Sprintf("%v", this.HttpMethod) + `,`,
		`RouteDirectResponse:` + strings.Replace(fmt.Sprintf("%v", this.RouteDirectResponse), "RouteDirectResponse", "ves_io_schema_route.RouteDirectResponse", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RouteTypeCustomRoute) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RouteTypeCustomRoute{`,
		`RouteRef:` + strings.Replace(fmt.Sprintf("%v", this.RouteRef), "ObjectRefType", "ves_io_schema_views.ObjectRefType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RouteType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RouteType{`,
		`Choice:` + fmt.Sprintf("%v", this.Choice) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RouteType_SimpleRoute) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RouteType_SimpleRoute{`,
		`SimpleRoute:` + strings.Replace(fmt.Sprintf("%v", this.SimpleRoute), "RouteTypeSimple", "RouteTypeSimple", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RouteType_RedirectRoute) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RouteType_RedirectRoute{`,
		`RedirectRoute:` + strings.Replace(fmt.Sprintf("%v", this.RedirectRoute), "RouteTypeRedirect", "RouteTypeRedirect", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RouteType_DirectResponseRoute) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RouteType_DirectResponseRoute{`,
		`DirectResponseRoute:` + strings.Replace(fmt.Sprintf("%v", this.DirectResponseRoute), "RouteTypeDirectResponse", "RouteTypeDirectResponse", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RouteType_CustomRouteObject) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RouteType_CustomRouteObject{`,
		`CustomRouteObject:` + strings.Replace(fmt.Sprintf("%v", this.CustomRouteObject), "RouteTypeCustomRoute", "RouteTypeCustomRoute", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AdvancedOptionsType) String() string {
	if this == nil {
		return "nil"
	}
	keysForCustomErrors := make([]uint32, 0, len(this.CustomErrors))
	for k, _ := range this.CustomErrors {
		keysForCustomErrors = append(keysForCustomErrors, k)
	}
	sortkeys.Uint32s(keysForCustomErrors)
	mapStringForCustomErrors := "map[uint32]string{"
	for _, k := range keysForCustomErrors {
		mapStringForCustomErrors += fmt.Sprintf("%v: %v,", k, this.CustomErrors[k])
	}
	mapStringForCustomErrors += "}"
	s := strings.Join([]string{`&AdvancedOptionsType{`,
		`RequestHeadersToAdd:` + strings.Replace(fmt.Sprintf("%v", this.RequestHeadersToAdd), "HeaderManipulationOptionType", "ves_io_schema4.HeaderManipulationOptionType", 1) + `,`,
		`RequestHeadersToRemove:` + fmt.Sprintf("%v", this.RequestHeadersToRemove) + `,`,
		`ResponseHeadersToAdd:` + strings.Replace(fmt.Sprintf("%v", this.ResponseHeadersToAdd), "HeaderManipulationOptionType", "ves_io_schema4.HeaderManipulationOptionType", 1) + `,`,
		`ResponseHeadersToRemove:` + fmt.Sprintf("%v", this.ResponseHeadersToRemove) + `,`,
		`MaxRequestHeaderSize:` + fmt.Sprintf("%v", this.MaxRequestHeaderSize) + `,`,
		`BufferPolicy:` + strings.Replace(fmt.Sprintf("%v", this.BufferPolicy), "BufferConfigType", "ves_io_schema4.BufferConfigType", 1) + `,`,
		`CompressionParams:` + strings.Replace(fmt.Sprintf("%v", this.CompressionParams), "CompressionType", "ves_io_schema_virtual_host.CompressionType", 1) + `,`,
		`CustomErrors:` + mapStringForCustomErrors + `,`,
		`JavascriptInfo:` + strings.Replace(fmt.Sprintf("%v", this.JavascriptInfo), "JavaScriptConfigType", "ves_io_schema_virtual_host.JavaScriptConfigType", 1) + `,`,
		`Jwt:` + strings.Replace(fmt.Sprintf("%v", this.Jwt), "ObjectRefType", "ves_io_schema_views.ObjectRefType", 1) + `,`,
		`IdleTimeout:` + fmt.Sprintf("%v", this.IdleTimeout) + `,`,
		`DisableDefaultErrorPages:` + fmt.Sprintf("%v", this.DisableDefaultErrorPages) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PolicyBasedChallenge) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PolicyBasedChallenge{`,
		`JsChallengeParametersChoice:` + fmt.Sprintf("%v", this.JsChallengeParametersChoice) + `,`,
		`CaptchaChallengeParametersChoice:` + fmt.Sprintf("%v", this.CaptchaChallengeParametersChoice) + `,`,
		`TemporaryBlockingParametersChoice:` + fmt.Sprintf("%v", this.TemporaryBlockingParametersChoice) + `,`,
		`MaliciousUserMitigationChoice:` + fmt.Sprintf("%v", this.MaliciousUserMitigationChoice) + `,`,
		`ChallengeChoice:` + fmt.Sprintf("%v", this.ChallengeChoice) + `,`,
		`RuleList:` + strings.Replace(fmt.Sprintf("%v", this.RuleList), "ChallengeRuleList", "ChallengeRuleList", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PolicyBasedChallenge_DefaultJsChallengeParameters) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PolicyBasedChallenge_DefaultJsChallengeParameters{`,
		`DefaultJsChallengeParameters:` + strings.Replace(fmt.Sprintf("%v", this.DefaultJsChallengeParameters), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PolicyBasedChallenge_JsChallengeParameters) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PolicyBasedChallenge_JsChallengeParameters{`,
		`JsChallengeParameters:` + strings.Replace(fmt.Sprintf("%v", this.JsChallengeParameters), "JavascriptChallengeType", "ves_io_schema_virtual_host.JavascriptChallengeType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PolicyBasedChallenge_DefaultCaptchaChallengeParameters) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PolicyBasedChallenge_DefaultCaptchaChallengeParameters{`,
		`DefaultCaptchaChallengeParameters:` + strings.Replace(fmt.Sprintf("%v", this.DefaultCaptchaChallengeParameters), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PolicyBasedChallenge_CaptchaChallengeParameters) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PolicyBasedChallenge_CaptchaChallengeParameters{`,
		`CaptchaChallengeParameters:` + strings.Replace(fmt.Sprintf("%v", this.CaptchaChallengeParameters), "CaptchaChallengeType", "ves_io_schema_virtual_host.CaptchaChallengeType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PolicyBasedChallenge_DefaultTemporaryBlockingParameters) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PolicyBasedChallenge_DefaultTemporaryBlockingParameters{`,
		`DefaultTemporaryBlockingParameters:` + strings.Replace(fmt.Sprintf("%v", this.DefaultTemporaryBlockingParameters), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PolicyBasedChallenge_TemporaryUserBlocking) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PolicyBasedChallenge_TemporaryUserBlocking{`,
		`TemporaryUserBlocking:` + strings.Replace(fmt.Sprintf("%v", this.TemporaryUserBlocking), "TemporaryUserBlockingType", "ves_io_schema_virtual_host.TemporaryUserBlockingType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PolicyBasedChallenge_DefaultMitigationSettings) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PolicyBasedChallenge_DefaultMitigationSettings{`,
		`DefaultMitigationSettings:` + strings.Replace(fmt.Sprintf("%v", this.DefaultMitigationSettings), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PolicyBasedChallenge_MaliciousUserMitigation) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PolicyBasedChallenge_MaliciousUserMitigation{`,
		`MaliciousUserMitigation:` + strings.Replace(fmt.Sprintf("%v", this.MaliciousUserMitigation), "ObjectRefType", "ves_io_schema_views.ObjectRefType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PolicyBasedChallenge_NoChallenge) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PolicyBasedChallenge_NoChallenge{`,
		`NoChallenge:` + strings.Replace(fmt.Sprintf("%v", this.NoChallenge), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PolicyBasedChallenge_AlwaysEnableJsChallenge) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PolicyBasedChallenge_AlwaysEnableJsChallenge{`,
		`AlwaysEnableJsChallenge:` + strings.Replace(fmt.Sprintf("%v", this.AlwaysEnableJsChallenge), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PolicyBasedChallenge_AlwaysEnableCaptchaChallenge) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PolicyBasedChallenge_AlwaysEnableCaptchaChallenge{`,
		`AlwaysEnableCaptchaChallenge:` + strings.Replace(fmt.Sprintf("%v", this.AlwaysEnableCaptchaChallenge), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ChallengeRule) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ChallengeRule{`,
		`Metadata:` + strings.Replace(fmt.Sprintf("%v", this.Metadata), "MessageMetaType", "ves_io_schema4.MessageMetaType", 1) + `,`,
		`Spec:` + strings.Replace(fmt.Sprintf("%v", this.Spec), "ChallengeRuleSpec", "ves_io_schema_service_policy_rule.ChallengeRuleSpec", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ChallengeRuleList) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ChallengeRuleList{`,
		`Rules:` + strings.Replace(fmt.Sprintf("%v", this.Rules), "ChallengeRule", "ChallengeRule", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SimpleClientSrcRule) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SimpleClientSrcRule{`,
		`ClientSourceChoice:` + fmt.Sprintf("%v", this.ClientSourceChoice) + `,`,
		`ExpirationTimestamp:` + strings.Replace(fmt.Sprintf("%v", this.ExpirationTimestamp), "Timestamp", "google_protobuf1.Timestamp", 1) + `,`,
		`Metadata:` + strings.Replace(fmt.Sprintf("%v", this.Metadata), "MessageMetaType", "ves_io_schema4.MessageMetaType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SimpleClientSrcRule_IpPrefix) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SimpleClientSrcRule_IpPrefix{`,
		`IpPrefix:` + fmt.Sprintf("%v", this.IpPrefix) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SimpleClientSrcRule_AsNumber) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SimpleClientSrcRule_AsNumber{`,
		`AsNumber:` + fmt.Sprintf("%v", this.AsNumber) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CustomIpAllowedList) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CustomIpAllowedList{`,
		`RateLimiterAllowedPrefixes:` + strings.Replace(fmt.Sprintf("%v", this.RateLimiterAllowedPrefixes), "ObjectRefType", "ves_io_schema_views.ObjectRefType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RateLimitConfigType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RateLimitConfigType{`,
		`RateLimiter:` + strings.Replace(fmt.Sprintf("%v", this.RateLimiter), "RateLimitValue", "ves_io_schema_rate_limiter.RateLimitValue", 1) + `,`,
		`IpAllowedListChoice:` + fmt.Sprintf("%v", this.IpAllowedListChoice) + `,`,
		`PolicyChoice:` + fmt.Sprintf("%v", this.PolicyChoice) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RateLimitConfigType_NoIpAllowedList) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RateLimitConfigType_NoIpAllowedList{`,
		`NoIpAllowedList:` + strings.Replace(fmt.Sprintf("%v", this.NoIpAllowedList), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RateLimitConfigType_IpAllowedList) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RateLimitConfigType_IpAllowedList{`,
		`IpAllowedList:` + strings.Replace(fmt.Sprintf("%v", this.IpAllowedList), "PrefixStringListType", "ves_io_schema_views.PrefixStringListType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RateLimitConfigType_CustomIpAllowedList) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RateLimitConfigType_CustomIpAllowedList{`,
		`CustomIpAllowedList:` + strings.Replace(fmt.Sprintf("%v", this.CustomIpAllowedList), "CustomIpAllowedList", "CustomIpAllowedList", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RateLimitConfigType_NoPolicies) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RateLimitConfigType_NoPolicies{`,
		`NoPolicies:` + strings.Replace(fmt.Sprintf("%v", this.NoPolicies), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RateLimitConfigType_Policies) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RateLimitConfigType_Policies{`,
		`Policies:` + strings.Replace(fmt.Sprintf("%v", this.Policies), "PolicyList", "ves_io_schema_views_rate_limiter_policy.PolicyList", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ServicePolicyList) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ServicePolicyList{`,
		`Policies:` + strings.Replace(fmt.Sprintf("%v", this.Policies), "ObjectRefType", "ves_io_schema_views.ObjectRefType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType{`,
		`Domains:` + fmt.Sprintf("%v", this.Domains) + `,`,
		`LoadbalancerType:` + fmt.Sprintf("%v", this.LoadbalancerType) + `,`,
		`AdvertiseChoice:` + fmt.Sprintf("%v", this.AdvertiseChoice) + `,`,
		`DefaultRoutePools:` + strings.Replace(fmt.Sprintf("%v", this.DefaultRoutePools), "OriginPoolWithWeight", "ves_io_schema_views.OriginPoolWithWeight", 1) + `,`,
		`Routes:` + strings.Replace(fmt.Sprintf("%v", this.Routes), "RouteType", "RouteType", 1) + `,`,
		`CorsPolicy:` + strings.Replace(fmt.Sprintf("%v", this.CorsPolicy), "CorsPolicy", "ves_io_schema4.CorsPolicy", 1) + `,`,
		`WafChoice:` + fmt.Sprintf("%v", this.WafChoice) + `,`,
		`AddLocation:` + fmt.Sprintf("%v", this.AddLocation) + `,`,
		`ChallengeType:` + fmt.Sprintf("%v", this.ChallengeType) + `,`,
		`MoreOption:` + strings.Replace(fmt.Sprintf("%v", this.MoreOption), "AdvancedOptionsType", "AdvancedOptionsType", 1) + `,`,
		`UserIdentification:` + strings.Replace(fmt.Sprintf("%v", this.UserIdentification), "ObjectRefType", "ves_io_schema_views.ObjectRefType", 1) + `,`,
		`RateLimitChoice:` + fmt.Sprintf("%v", this.RateLimitChoice) + `,`,
		`HostRewriteParams:` + fmt.Sprintf("%v", this.HostRewriteParams) + `,`,
		`MaliciousUserMitigation:` + strings.Replace(fmt.Sprintf("%v", this.MaliciousUserMitigation), "ObjectRefType", "ves_io_schema_views.ObjectRefType", 1) + `,`,
		`WafExclusionRules:` + strings.Replace(fmt.Sprintf("%v", this.WafExclusionRules), "SimpleWafExclusionRule", "ves_io_schema_policy.SimpleWafExclusionRule", 1) + `,`,
		`BlockedClients:` + strings.Replace(fmt.Sprintf("%v", this.BlockedClients), "SimpleClientSrcRule", "SimpleClientSrcRule", 1) + `,`,
		`TrustedClients:` + strings.Replace(fmt.Sprintf("%v", this.TrustedClients), "SimpleClientSrcRule", "SimpleClientSrcRule", 1) + `,`,
		`ServicePolicyChoice:` + fmt.Sprintf("%v", this.ServicePolicyChoice) + `,`,
		`HashPolicyChoice:` + fmt.Sprintf("%v", this.HashPolicyChoice) + `,`,
		`ViewInternal:` + strings.Replace(fmt.Sprintf("%v", this.ViewInternal), "ObjectRefType", "ves_io_schema_views.ObjectRefType", 1) + `,`,
		`HostName:` + fmt.Sprintf("%v", this.HostName) + `,`,
		`DnsInfo:` + strings.Replace(fmt.Sprintf("%v", this.DnsInfo), "DnsInfo", "ves_io_schema_virtual_host_dns_info.DnsInfo", 1) + `,`,
		`State:` + fmt.Sprintf("%v", this.State) + `,`,
		`AutoCertState:` + fmt.Sprintf("%v", this.AutoCertState) + `,`,
		`AutoCertInfo:` + strings.Replace(fmt.Sprintf("%v", this.AutoCertInfo), "AutoCertInfoType", "ves_io_schema_virtual_host.AutoCertInfoType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_Http) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_Http{`,
		`Http:` + strings.Replace(fmt.Sprintf("%v", this.Http), "ProxyTypeHttp", "ProxyTypeHttp", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_Https) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_Https{`,
		`Https:` + strings.Replace(fmt.Sprintf("%v", this.Https), "ProxyTypeHttps", "ProxyTypeHttps", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_AdvertiseOnPublic) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_AdvertiseOnPublic{`,
		`AdvertiseOnPublic:` + strings.Replace(fmt.Sprintf("%v", this.AdvertiseOnPublic), "AdvertisePublic", "ves_io_schema_views.AdvertisePublic", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_AdvertiseCustom) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_AdvertiseCustom{`,
		`AdvertiseCustom:` + strings.Replace(fmt.Sprintf("%v", this.AdvertiseCustom), "AdvertiseCustom", "ves_io_schema_views.AdvertiseCustom", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_Waf) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_Waf{`,
		`Waf:` + strings.Replace(fmt.Sprintf("%v", this.Waf), "ObjectRefType", "ves_io_schema_views.ObjectRefType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_WafRule) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_WafRule{`,
		`WafRule:` + strings.Replace(fmt.Sprintf("%v", this.WafRule), "ObjectRefType", "ves_io_schema_views.ObjectRefType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_DisableWaf) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_DisableWaf{`,
		`DisableWaf:` + strings.Replace(fmt.Sprintf("%v", this.DisableWaf), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_DoNotAdvertise) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_DoNotAdvertise{`,
		`DoNotAdvertise:` + strings.Replace(fmt.Sprintf("%v", this.DoNotAdvertise), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_AdvertiseOnPublicDefaultVip) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_AdvertiseOnPublicDefaultVip{`,
		`AdvertiseOnPublicDefaultVip:` + strings.Replace(fmt.Sprintf("%v", this.AdvertiseOnPublicDefaultVip), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_JsChallenge) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_JsChallenge{`,
		`JsChallenge:` + strings.Replace(fmt.Sprintf("%v", this.JsChallenge), "JavascriptChallengeType", "ves_io_schema_virtual_host.JavascriptChallengeType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_DisableRateLimit) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_DisableRateLimit{`,
		`DisableRateLimit:` + strings.Replace(fmt.Sprintf("%v", this.DisableRateLimit), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_RateLimit) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_RateLimit{`,
		`RateLimit:` + strings.Replace(fmt.Sprintf("%v", this.RateLimit), "RateLimitConfigType", "RateLimitConfigType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_CaptchaChallenge) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_CaptchaChallenge{`,
		`CaptchaChallenge:` + strings.Replace(fmt.Sprintf("%v", this.CaptchaChallenge), "CaptchaChallengeType", "ves_io_schema_virtual_host.CaptchaChallengeType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_NoChallenge) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_NoChallenge{`,
		`NoChallenge:` + strings.Replace(fmt.Sprintf("%v", this.NoChallenge), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_HttpsAutoCert) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_HttpsAutoCert{`,
		`HttpsAutoCert:` + strings.Replace(fmt.Sprintf("%v", this.HttpsAutoCert), "ProxyTypeHttpsAutoCerts", "ProxyTypeHttpsAutoCerts", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_AutoHostRewrite) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_AutoHostRewrite{`,
		`AutoHostRewrite:` + strings.Replace(fmt.Sprintf("%v", this.AutoHostRewrite), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_HostRewrite) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_HostRewrite{`,
		`HostRewrite:` + fmt.Sprintf("%v", this.HostRewrite) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_DisableHostRewrite) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_DisableHostRewrite{`,
		`DisableHostRewrite:` + strings.Replace(fmt.Sprintf("%v", this.DisableHostRewrite), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_ServicePoliciesFromNamespace) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_ServicePoliciesFromNamespace{`,
		`ServicePoliciesFromNamespace:` + strings.Replace(fmt.Sprintf("%v", this.ServicePoliciesFromNamespace), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_NoServicePolicies) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_NoServicePolicies{`,
		`NoServicePolicies:` + strings.Replace(fmt.Sprintf("%v", this.NoServicePolicies), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_ActiveServicePolicies) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_ActiveServicePolicies{`,
		`ActiveServicePolicies:` + strings.Replace(fmt.Sprintf("%v", this.ActiveServicePolicies), "ServicePolicyList", "ServicePolicyList", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_RoundRobin) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_RoundRobin{`,
		`RoundRobin:` + strings.Replace(fmt.Sprintf("%v", this.RoundRobin), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_LeastActive) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_LeastActive{`,
		`LeastActive:` + strings.Replace(fmt.Sprintf("%v", this.LeastActive), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_Random) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_Random{`,
		`Random:` + strings.Replace(fmt.Sprintf("%v", this.Random), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_SourceIpStickiness) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_SourceIpStickiness{`,
		`SourceIpStickiness:` + strings.Replace(fmt.Sprintf("%v", this.SourceIpStickiness), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_CookieStickiness) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_CookieStickiness{`,
		`CookieStickiness:` + strings.Replace(fmt.Sprintf("%v", this.CookieStickiness), "CookieForHashing", "ves_io_schema_route.CookieForHashing", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_RingHash) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_RingHash{`,
		`RingHash:` + strings.Replace(fmt.Sprintf("%v", this.RingHash), "HashPolicyListType", "HashPolicyListType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_PolicyBasedChallenge) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_PolicyBasedChallenge{`,
		`PolicyBasedChallenge:` + strings.Replace(fmt.Sprintf("%v", this.PolicyBasedChallenge), "PolicyBasedChallenge", "PolicyBasedChallenge", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType{`,
		`Domains:` + fmt.Sprintf("%v", this.Domains) + `,`,
		`LoadbalancerType:` + fmt.Sprintf("%v", this.LoadbalancerType) + `,`,
		`AdvertiseChoice:` + fmt.Sprintf("%v", this.AdvertiseChoice) + `,`,
		`DefaultRoutePools:` + strings.Replace(fmt.Sprintf("%v", this.DefaultRoutePools), "OriginPoolWithWeight", "ves_io_schema_views.OriginPoolWithWeight", 1) + `,`,
		`Routes:` + strings.Replace(fmt.Sprintf("%v", this.Routes), "RouteType", "RouteType", 1) + `,`,
		`CorsPolicy:` + strings.Replace(fmt.Sprintf("%v", this.CorsPolicy), "CorsPolicy", "ves_io_schema4.CorsPolicy", 1) + `,`,
		`WafChoice:` + fmt.Sprintf("%v", this.WafChoice) + `,`,
		`AddLocation:` + fmt.Sprintf("%v", this.AddLocation) + `,`,
		`ChallengeType:` + fmt.Sprintf("%v", this.ChallengeType) + `,`,
		`MoreOption:` + strings.Replace(fmt.Sprintf("%v", this.MoreOption), "AdvancedOptionsType", "AdvancedOptionsType", 1) + `,`,
		`UserIdentification:` + strings.Replace(fmt.Sprintf("%v", this.UserIdentification), "ObjectRefType", "ves_io_schema_views.ObjectRefType", 1) + `,`,
		`RateLimitChoice:` + fmt.Sprintf("%v", this.RateLimitChoice) + `,`,
		`MaliciousUserMitigation:` + strings.Replace(fmt.Sprintf("%v", this.MaliciousUserMitigation), "ObjectRefType", "ves_io_schema_views.ObjectRefType", 1) + `,`,
		`WafExclusionRules:` + strings.Replace(fmt.Sprintf("%v", this.WafExclusionRules), "SimpleWafExclusionRule", "ves_io_schema_policy.SimpleWafExclusionRule", 1) + `,`,
		`BlockedClients:` + strings.Replace(fmt.Sprintf("%v", this.BlockedClients), "SimpleClientSrcRule", "SimpleClientSrcRule", 1) + `,`,
		`TrustedClients:` + strings.Replace(fmt.Sprintf("%v", this.TrustedClients), "SimpleClientSrcRule", "SimpleClientSrcRule", 1) + `,`,
		`ServicePolicyChoice:` + fmt.Sprintf("%v", this.ServicePolicyChoice) + `,`,
		`HashPolicyChoice:` + fmt.Sprintf("%v", this.HashPolicyChoice) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_Http) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_Http{`,
		`Http:` + strings.Replace(fmt.Sprintf("%v", this.Http), "ProxyTypeHttp", "ProxyTypeHttp", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_Https) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_Https{`,
		`Https:` + strings.Replace(fmt.Sprintf("%v", this.Https), "ProxyTypeHttps", "ProxyTypeHttps", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_AdvertiseOnPublic) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_AdvertiseOnPublic{`,
		`AdvertiseOnPublic:` + strings.Replace(fmt.Sprintf("%v", this.AdvertiseOnPublic), "AdvertisePublic", "ves_io_schema_views.AdvertisePublic", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_AdvertiseCustom) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_AdvertiseCustom{`,
		`AdvertiseCustom:` + strings.Replace(fmt.Sprintf("%v", this.AdvertiseCustom), "AdvertiseCustom", "ves_io_schema_views.AdvertiseCustom", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_Waf) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_Waf{`,
		`Waf:` + strings.Replace(fmt.Sprintf("%v", this.Waf), "ObjectRefType", "ves_io_schema_views.ObjectRefType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_WafRule) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_WafRule{`,
		`WafRule:` + strings.Replace(fmt.Sprintf("%v", this.WafRule), "ObjectRefType", "ves_io_schema_views.ObjectRefType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_DisableWaf) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_DisableWaf{`,
		`DisableWaf:` + strings.Replace(fmt.Sprintf("%v", this.DisableWaf), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_DoNotAdvertise) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_DoNotAdvertise{`,
		`DoNotAdvertise:` + strings.Replace(fmt.Sprintf("%v", this.DoNotAdvertise), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_AdvertiseOnPublicDefaultVip) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_AdvertiseOnPublicDefaultVip{`,
		`AdvertiseOnPublicDefaultVip:` + strings.Replace(fmt.Sprintf("%v", this.AdvertiseOnPublicDefaultVip), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_JsChallenge) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_JsChallenge{`,
		`JsChallenge:` + strings.Replace(fmt.Sprintf("%v", this.JsChallenge), "JavascriptChallengeType", "ves_io_schema_virtual_host.JavascriptChallengeType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_DisableRateLimit) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_DisableRateLimit{`,
		`DisableRateLimit:` + strings.Replace(fmt.Sprintf("%v", this.DisableRateLimit), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_RateLimit) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_RateLimit{`,
		`RateLimit:` + strings.Replace(fmt.Sprintf("%v", this.RateLimit), "RateLimitConfigType", "RateLimitConfigType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_CaptchaChallenge) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_CaptchaChallenge{`,
		`CaptchaChallenge:` + strings.Replace(fmt.Sprintf("%v", this.CaptchaChallenge), "CaptchaChallengeType", "ves_io_schema_virtual_host.CaptchaChallengeType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_NoChallenge) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_NoChallenge{`,
		`NoChallenge:` + strings.Replace(fmt.Sprintf("%v", this.NoChallenge), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_HttpsAutoCert) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_HttpsAutoCert{`,
		`HttpsAutoCert:` + strings.Replace(fmt.Sprintf("%v", this.HttpsAutoCert), "ProxyTypeHttpsAutoCerts", "ProxyTypeHttpsAutoCerts", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_ServicePoliciesFromNamespace) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_ServicePoliciesFromNamespace{`,
		`ServicePoliciesFromNamespace:` + strings.Replace(fmt.Sprintf("%v", this.ServicePoliciesFromNamespace), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_NoServicePolicies) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_NoServicePolicies{`,
		`NoServicePolicies:` + strings.Replace(fmt.Sprintf("%v", this.NoServicePolicies), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_ActiveServicePolicies) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_ActiveServicePolicies{`,
		`ActiveServicePolicies:` + strings.Replace(fmt.Sprintf("%v", this.ActiveServicePolicies), "ServicePolicyList", "ServicePolicyList", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_RoundRobin) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_RoundRobin{`,
		`RoundRobin:` + strings.Replace(fmt.Sprintf("%v", this.RoundRobin), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_LeastActive) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_LeastActive{`,
		`LeastActive:` + strings.Replace(fmt.Sprintf("%v", this.LeastActive), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_Random) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_Random{`,
		`Random:` + strings.Replace(fmt.Sprintf("%v", this.Random), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_SourceIpStickiness) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_SourceIpStickiness{`,
		`SourceIpStickiness:` + strings.Replace(fmt.Sprintf("%v", this.SourceIpStickiness), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_CookieStickiness) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_CookieStickiness{`,
		`CookieStickiness:` + strings.Replace(fmt.Sprintf("%v", this.CookieStickiness), "CookieForHashing", "ves_io_schema_route.CookieForHashing", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_RingHash) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_RingHash{`,
		`RingHash:` + strings.Replace(fmt.Sprintf("%v", this.RingHash), "HashPolicyListType", "HashPolicyListType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_PolicyBasedChallenge) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_PolicyBasedChallenge{`,
		`PolicyBasedChallenge:` + strings.Replace(fmt.Sprintf("%v", this.PolicyBasedChallenge), "PolicyBasedChallenge", "PolicyBasedChallenge", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType{`,
		`Domains:` + fmt.Sprintf("%v", this.Domains) + `,`,
		`LoadbalancerType:` + fmt.Sprintf("%v", this.LoadbalancerType) + `,`,
		`AdvertiseChoice:` + fmt.Sprintf("%v", this.AdvertiseChoice) + `,`,
		`DefaultRoutePools:` + strings.Replace(fmt.Sprintf("%v", this.DefaultRoutePools), "OriginPoolWithWeight", "ves_io_schema_views.OriginPoolWithWeight", 1) + `,`,
		`Routes:` + strings.Replace(fmt.Sprintf("%v", this.Routes), "RouteType", "RouteType", 1) + `,`,
		`CorsPolicy:` + strings.Replace(fmt.Sprintf("%v", this.CorsPolicy), "CorsPolicy", "ves_io_schema4.CorsPolicy", 1) + `,`,
		`WafChoice:` + fmt.Sprintf("%v", this.WafChoice) + `,`,
		`AddLocation:` + fmt.Sprintf("%v", this.AddLocation) + `,`,
		`ChallengeType:` + fmt.Sprintf("%v", this.ChallengeType) + `,`,
		`MoreOption:` + strings.Replace(fmt.Sprintf("%v", this.MoreOption), "AdvancedOptionsType", "AdvancedOptionsType", 1) + `,`,
		`UserIdentification:` + strings.Replace(fmt.Sprintf("%v", this.UserIdentification), "ObjectRefType", "ves_io_schema_views.ObjectRefType", 1) + `,`,
		`RateLimitChoice:` + fmt.Sprintf("%v", this.RateLimitChoice) + `,`,
		`MaliciousUserMitigation:` + strings.Replace(fmt.Sprintf("%v", this.MaliciousUserMitigation), "ObjectRefType", "ves_io_schema_views.ObjectRefType", 1) + `,`,
		`WafExclusionRules:` + strings.Replace(fmt.Sprintf("%v", this.WafExclusionRules), "SimpleWafExclusionRule", "ves_io_schema_policy.SimpleWafExclusionRule", 1) + `,`,
		`BlockedClients:` + strings.Replace(fmt.Sprintf("%v", this.BlockedClients), "SimpleClientSrcRule", "SimpleClientSrcRule", 1) + `,`,
		`TrustedClients:` + strings.Replace(fmt.Sprintf("%v", this.TrustedClients), "SimpleClientSrcRule", "SimpleClientSrcRule", 1) + `,`,
		`ServicePolicyChoice:` + fmt.Sprintf("%v", this.ServicePolicyChoice) + `,`,
		`HashPolicyChoice:` + fmt.Sprintf("%v", this.HashPolicyChoice) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_Http) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_Http{`,
		`Http:` + strings.Replace(fmt.Sprintf("%v", this.Http), "ProxyTypeHttp", "ProxyTypeHttp", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_Https) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_Https{`,
		`Https:` + strings.Replace(fmt.Sprintf("%v", this.Https), "ProxyTypeHttps", "ProxyTypeHttps", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_AdvertiseOnPublic) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_AdvertiseOnPublic{`,
		`AdvertiseOnPublic:` + strings.Replace(fmt.Sprintf("%v", this.AdvertiseOnPublic), "AdvertisePublic", "ves_io_schema_views.AdvertisePublic", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_AdvertiseCustom) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_AdvertiseCustom{`,
		`AdvertiseCustom:` + strings.Replace(fmt.Sprintf("%v", this.AdvertiseCustom), "AdvertiseCustom", "ves_io_schema_views.AdvertiseCustom", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_Waf) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_Waf{`,
		`Waf:` + strings.Replace(fmt.Sprintf("%v", this.Waf), "ObjectRefType", "ves_io_schema_views.ObjectRefType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_WafRule) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_WafRule{`,
		`WafRule:` + strings.Replace(fmt.Sprintf("%v", this.WafRule), "ObjectRefType", "ves_io_schema_views.ObjectRefType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_DisableWaf) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_DisableWaf{`,
		`DisableWaf:` + strings.Replace(fmt.Sprintf("%v", this.DisableWaf), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_DoNotAdvertise) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_DoNotAdvertise{`,
		`DoNotAdvertise:` + strings.Replace(fmt.Sprintf("%v", this.DoNotAdvertise), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_AdvertiseOnPublicDefaultVip) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_AdvertiseOnPublicDefaultVip{`,
		`AdvertiseOnPublicDefaultVip:` + strings.Replace(fmt.Sprintf("%v", this.AdvertiseOnPublicDefaultVip), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_JsChallenge) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_JsChallenge{`,
		`JsChallenge:` + strings.Replace(fmt.Sprintf("%v", this.JsChallenge), "JavascriptChallengeType", "ves_io_schema_virtual_host.JavascriptChallengeType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_DisableRateLimit) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_DisableRateLimit{`,
		`DisableRateLimit:` + strings.Replace(fmt.Sprintf("%v", this.DisableRateLimit), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_RateLimit) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_RateLimit{`,
		`RateLimit:` + strings.Replace(fmt.Sprintf("%v", this.RateLimit), "RateLimitConfigType", "RateLimitConfigType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_CaptchaChallenge) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_CaptchaChallenge{`,
		`CaptchaChallenge:` + strings.Replace(fmt.Sprintf("%v", this.CaptchaChallenge), "CaptchaChallengeType", "ves_io_schema_virtual_host.CaptchaChallengeType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_NoChallenge) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_NoChallenge{`,
		`NoChallenge:` + strings.Replace(fmt.Sprintf("%v", this.NoChallenge), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_HttpsAutoCert) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_HttpsAutoCert{`,
		`HttpsAutoCert:` + strings.Replace(fmt.Sprintf("%v", this.HttpsAutoCert), "ProxyTypeHttpsAutoCerts", "ProxyTypeHttpsAutoCerts", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_ServicePoliciesFromNamespace) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_ServicePoliciesFromNamespace{`,
		`ServicePoliciesFromNamespace:` + strings.Replace(fmt.Sprintf("%v", this.ServicePoliciesFromNamespace), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_NoServicePolicies) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_NoServicePolicies{`,
		`NoServicePolicies:` + strings.Replace(fmt.Sprintf("%v", this.NoServicePolicies), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_ActiveServicePolicies) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_ActiveServicePolicies{`,
		`ActiveServicePolicies:` + strings.Replace(fmt.Sprintf("%v", this.ActiveServicePolicies), "ServicePolicyList", "ServicePolicyList", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_RoundRobin) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_RoundRobin{`,
		`RoundRobin:` + strings.Replace(fmt.Sprintf("%v", this.RoundRobin), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_LeastActive) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_LeastActive{`,
		`LeastActive:` + strings.Replace(fmt.Sprintf("%v", this.LeastActive), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_Random) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_Random{`,
		`Random:` + strings.Replace(fmt.Sprintf("%v", this.Random), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_SourceIpStickiness) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_SourceIpStickiness{`,
		`SourceIpStickiness:` + strings.Replace(fmt.Sprintf("%v", this.SourceIpStickiness), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_CookieStickiness) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_CookieStickiness{`,
		`CookieStickiness:` + strings.Replace(fmt.Sprintf("%v", this.CookieStickiness), "CookieForHashing", "ves_io_schema_route.CookieForHashing", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_RingHash) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_RingHash{`,
		`RingHash:` + strings.Replace(fmt.Sprintf("%v", this.RingHash), "HashPolicyListType", "HashPolicyListType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_PolicyBasedChallenge) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_PolicyBasedChallenge{`,
		`PolicyBasedChallenge:` + strings.Replace(fmt.Sprintf("%v", this.PolicyBasedChallenge), "PolicyBasedChallenge", "PolicyBasedChallenge", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType{`,
		`Domains:` + fmt.Sprintf("%v", this.Domains) + `,`,
		`LoadbalancerType:` + fmt.Sprintf("%v", this.LoadbalancerType) + `,`,
		`AdvertiseChoice:` + fmt.Sprintf("%v", this.AdvertiseChoice) + `,`,
		`DefaultRoutePools:` + strings.Replace(fmt.Sprintf("%v", this.DefaultRoutePools), "OriginPoolWithWeight", "ves_io_schema_views.OriginPoolWithWeight", 1) + `,`,
		`Routes:` + strings.Replace(fmt.Sprintf("%v", this.Routes), "RouteType", "RouteType", 1) + `,`,
		`CorsPolicy:` + strings.Replace(fmt.Sprintf("%v", this.CorsPolicy), "CorsPolicy", "ves_io_schema4.CorsPolicy", 1) + `,`,
		`WafChoice:` + fmt.Sprintf("%v", this.WafChoice) + `,`,
		`AddLocation:` + fmt.Sprintf("%v", this.AddLocation) + `,`,
		`ChallengeType:` + fmt.Sprintf("%v", this.ChallengeType) + `,`,
		`MoreOption:` + strings.Replace(fmt.Sprintf("%v", this.MoreOption), "AdvancedOptionsType", "AdvancedOptionsType", 1) + `,`,
		`UserIdentification:` + strings.Replace(fmt.Sprintf("%v", this.UserIdentification), "ObjectRefType", "ves_io_schema_views.ObjectRefType", 1) + `,`,
		`RateLimitChoice:` + fmt.Sprintf("%v", this.RateLimitChoice) + `,`,
		`MaliciousUserMitigation:` + strings.Replace(fmt.Sprintf("%v", this.MaliciousUserMitigation), "ObjectRefType", "ves_io_schema_views.ObjectRefType", 1) + `,`,
		`WafExclusionRules:` + strings.Replace(fmt.Sprintf("%v", this.WafExclusionRules), "SimpleWafExclusionRule", "ves_io_schema_policy.SimpleWafExclusionRule", 1) + `,`,
		`BlockedClients:` + strings.Replace(fmt.Sprintf("%v", this.BlockedClients), "SimpleClientSrcRule", "SimpleClientSrcRule", 1) + `,`,
		`TrustedClients:` + strings.Replace(fmt.Sprintf("%v", this.TrustedClients), "SimpleClientSrcRule", "SimpleClientSrcRule", 1) + `,`,
		`ServicePolicyChoice:` + fmt.Sprintf("%v", this.ServicePolicyChoice) + `,`,
		`HashPolicyChoice:` + fmt.Sprintf("%v", this.HashPolicyChoice) + `,`,
		`HostName:` + fmt.Sprintf("%v", this.HostName) + `,`,
		`DnsInfo:` + strings.Replace(fmt.Sprintf("%v", this.DnsInfo), "DnsInfo", "ves_io_schema_virtual_host_dns_info.DnsInfo", 1) + `,`,
		`State:` + fmt.Sprintf("%v", this.State) + `,`,
		`AutoCertState:` + fmt.Sprintf("%v", this.AutoCertState) + `,`,
		`AutoCertInfo:` + strings.Replace(fmt.Sprintf("%v", this.AutoCertInfo), "AutoCertInfoType", "ves_io_schema_virtual_host.AutoCertInfoType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_Http) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_Http{`,
		`Http:` + strings.Replace(fmt.Sprintf("%v", this.Http), "ProxyTypeHttp", "ProxyTypeHttp", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_Https) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_Https{`,
		`Https:` + strings.Replace(fmt.Sprintf("%v", this.Https), "ProxyTypeHttps", "ProxyTypeHttps", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_AdvertiseOnPublic) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_AdvertiseOnPublic{`,
		`AdvertiseOnPublic:` + strings.Replace(fmt.Sprintf("%v", this.AdvertiseOnPublic), "AdvertisePublic", "ves_io_schema_views.AdvertisePublic", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_AdvertiseCustom) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_AdvertiseCustom{`,
		`AdvertiseCustom:` + strings.Replace(fmt.Sprintf("%v", this.AdvertiseCustom), "AdvertiseCustom", "ves_io_schema_views.AdvertiseCustom", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_Waf) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_Waf{`,
		`Waf:` + strings.Replace(fmt.Sprintf("%v", this.Waf), "ObjectRefType", "ves_io_schema_views.ObjectRefType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_WafRule) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_WafRule{`,
		`WafRule:` + strings.Replace(fmt.Sprintf("%v", this.WafRule), "ObjectRefType", "ves_io_schema_views.ObjectRefType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_DisableWaf) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_DisableWaf{`,
		`DisableWaf:` + strings.Replace(fmt.Sprintf("%v", this.DisableWaf), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_DoNotAdvertise) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_DoNotAdvertise{`,
		`DoNotAdvertise:` + strings.Replace(fmt.Sprintf("%v", this.DoNotAdvertise), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_AdvertiseOnPublicDefaultVip) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_AdvertiseOnPublicDefaultVip{`,
		`AdvertiseOnPublicDefaultVip:` + strings.Replace(fmt.Sprintf("%v", this.AdvertiseOnPublicDefaultVip), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_JsChallenge) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_JsChallenge{`,
		`JsChallenge:` + strings.Replace(fmt.Sprintf("%v", this.JsChallenge), "JavascriptChallengeType", "ves_io_schema_virtual_host.JavascriptChallengeType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_DisableRateLimit) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_DisableRateLimit{`,
		`DisableRateLimit:` + strings.Replace(fmt.Sprintf("%v", this.DisableRateLimit), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_RateLimit) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_RateLimit{`,
		`RateLimit:` + strings.Replace(fmt.Sprintf("%v", this.RateLimit), "RateLimitConfigType", "RateLimitConfigType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_CaptchaChallenge) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_CaptchaChallenge{`,
		`CaptchaChallenge:` + strings.Replace(fmt.Sprintf("%v", this.CaptchaChallenge), "CaptchaChallengeType", "ves_io_schema_virtual_host.CaptchaChallengeType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_NoChallenge) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_NoChallenge{`,
		`NoChallenge:` + strings.Replace(fmt.Sprintf("%v", this.NoChallenge), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_HttpsAutoCert) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_HttpsAutoCert{`,
		`HttpsAutoCert:` + strings.Replace(fmt.Sprintf("%v", this.HttpsAutoCert), "ProxyTypeHttpsAutoCerts", "ProxyTypeHttpsAutoCerts", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_ServicePoliciesFromNamespace) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_ServicePoliciesFromNamespace{`,
		`ServicePoliciesFromNamespace:` + strings.Replace(fmt.Sprintf("%v", this.ServicePoliciesFromNamespace), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_NoServicePolicies) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_NoServicePolicies{`,
		`NoServicePolicies:` + strings.Replace(fmt.Sprintf("%v", this.NoServicePolicies), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_ActiveServicePolicies) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_ActiveServicePolicies{`,
		`ActiveServicePolicies:` + strings.Replace(fmt.Sprintf("%v", this.ActiveServicePolicies), "ServicePolicyList", "ServicePolicyList", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_RoundRobin) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_RoundRobin{`,
		`RoundRobin:` + strings.Replace(fmt.Sprintf("%v", this.RoundRobin), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_LeastActive) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_LeastActive{`,
		`LeastActive:` + strings.Replace(fmt.Sprintf("%v", this.LeastActive), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_Random) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_Random{`,
		`Random:` + strings.Replace(fmt.Sprintf("%v", this.Random), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_SourceIpStickiness) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_SourceIpStickiness{`,
		`SourceIpStickiness:` + strings.Replace(fmt.Sprintf("%v", this.SourceIpStickiness), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_CookieStickiness) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_CookieStickiness{`,
		`CookieStickiness:` + strings.Replace(fmt.Sprintf("%v", this.CookieStickiness), "CookieForHashing", "ves_io_schema_route.CookieForHashing", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_RingHash) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_RingHash{`,
		`RingHash:` + strings.Replace(fmt.Sprintf("%v", this.RingHash), "HashPolicyListType", "HashPolicyListType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_PolicyBasedChallenge) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_PolicyBasedChallenge{`,
		`PolicyBasedChallenge:` + strings.Replace(fmt.Sprintf("%v", this.PolicyBasedChallenge), "PolicyBasedChallenge", "PolicyBasedChallenge", 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringTypes(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *DownstreamTlsValidationContext) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DownstreamTlsValidationContext: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DownstreamTlsValidationContext: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TrustedCaUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TrustedCaUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DownstreamTlsParamsType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DownstreamTlsParamsType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DownstreamTlsParamsType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TlsConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TlsConfig == nil {
				m.TlsConfig = &ves_io_schema_views.TlsConfig{}
			}
			if err := m.TlsConfig.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TlsCertificates", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TlsCertificates = append(m.TlsCertificates, &ves_io_schema4.TlsCertificateType{})
			if err := m.TlsCertificates[len(m.TlsCertificates)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoMtls", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.MtlsChoice = &DownstreamTlsParamsType_NoMtls{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UseMtls", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &DownstreamTlsValidationContext{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.MtlsChoice = &DownstreamTlsParamsType_UseMtls{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProxyTypeHttps) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProxyTypeHttps: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProxyTypeHttps: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HttpRedirect", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.HttpRedirect = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddHsts", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AddHsts = bool(v != 0)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TlsParameters", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TlsParameters == nil {
				m.TlsParameters = &DownstreamTlsParamsType{}
			}
			if err := m.TlsParameters.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultHeader", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ServerHeaderChoice = &ProxyTypeHttps_DefaultHeader{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServerHeaderChoice = &ProxyTypeHttps_ServerName{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppendServerName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServerHeaderChoice = &ProxyTypeHttps_AppendServerName{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PassThrough", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ServerHeaderChoice = &ProxyTypeHttps_PassThrough{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProxyTypeHttp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProxyTypeHttp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProxyTypeHttp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DnsVolterraManaged", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DnsVolterraManaged = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProxyTypeHttpsAutoCerts) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProxyTypeHttpsAutoCerts: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProxyTypeHttpsAutoCerts: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HttpRedirect", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.HttpRedirect = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddHsts", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AddHsts = bool(v != 0)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TlsConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TlsConfig == nil {
				m.TlsConfig = &ves_io_schema_views.TlsConfig{}
			}
			if err := m.TlsConfig.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoMtls", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.MtlsChoice = &ProxyTypeHttpsAutoCerts_NoMtls{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UseMtls", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &DownstreamTlsValidationContext{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.MtlsChoice = &ProxyTypeHttpsAutoCerts_UseMtls{v}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultHeader", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ServerHeaderChoice = &ProxyTypeHttpsAutoCerts_DefaultHeader{v}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServerHeaderChoice = &ProxyTypeHttpsAutoCerts_ServerName{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppendServerName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServerHeaderChoice = &ProxyTypeHttpsAutoCerts_AppendServerName{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PassThrough", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ServerHeaderChoice = &ProxyTypeHttpsAutoCerts_PassThrough{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HashPolicyListType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HashPolicyListType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HashPolicyListType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HashPolicy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HashPolicy = append(m.HashPolicy, &ves_io_schema_route.HashPolicyType{})
			if err := m.HashPolicy[len(m.HashPolicy)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MirrorPolicyType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MirrorPolicyType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MirrorPolicyType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OriginPool", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.OriginPool == nil {
				m.OriginPool = &ves_io_schema_views.ObjectRefType{}
			}
			if err := m.OriginPool.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Percent", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Percent == nil {
				m.Percent = &ves_io_schema4.FractionalPercent{}
			}
			if err := m.Percent.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RouteSimpleAdvancedOptions) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RouteSimpleAdvancedOptions: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RouteSimpleAdvancedOptions: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommonHashPolicy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.HashPolicyChoice = &RouteSimpleAdvancedOptions_CommonHashPolicy{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpecificHashPolicy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &HashPolicyListType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.HashPolicyChoice = &RouteSimpleAdvancedOptions_SpecificHashPolicy{v}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Priority", wireType)
			}
			m.Priority = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Priority |= (ves_io_schema4.RoutingPriority(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndpointSubsets", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.EndpointSubsets == nil {
				m.EndpointSubsets = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTypes
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthTypes
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTypes
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthTypes
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipTypes(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthTypes
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.EndpointSubsets[mapkey] = mapvalue
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisablePrefixRewrite", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.RewriteChoice = &RouteSimpleAdvancedOptions_DisablePrefixRewrite{v}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrefixRewrite", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RewriteChoice = &RouteSimpleAdvancedOptions_PrefixRewrite{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestHeadersToAdd", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RequestHeadersToAdd = append(m.RequestHeadersToAdd, &ves_io_schema4.HeaderManipulationOptionType{})
			if err := m.RequestHeadersToAdd[len(m.RequestHeadersToAdd)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestHeadersToRemove", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RequestHeadersToRemove = append(m.RequestHeadersToRemove, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResponseHeadersToAdd", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ResponseHeadersToAdd = append(m.ResponseHeadersToAdd, &ves_io_schema4.HeaderManipulationOptionType{})
			if err := m.ResponseHeadersToAdd[len(m.ResponseHeadersToAdd)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResponseHeadersToRemove", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ResponseHeadersToRemove = append(m.ResponseHeadersToRemove, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisableLocationAdd", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DisableLocationAdd = bool(v != 0)
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisableWaf", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.WafChoice = &RouteSimpleAdvancedOptions_DisableWaf{v}
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Waf", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema_views.ObjectRefType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.WafChoice = &RouteSimpleAdvancedOptions_Waf{v}
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WafRule", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema_views.ObjectRefType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.WafChoice = &RouteSimpleAdvancedOptions_WafRule{v}
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CorsPolicy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CorsPolicy == nil {
				m.CorsPolicy = &ves_io_schema4.CorsPolicy{}
			}
			if err := m.CorsPolicy.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisableSpdy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.SpdyChoice = &RouteSimpleAdvancedOptions_DisableSpdy{v}
			iNdEx = postIndex
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnableSpdy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.SpdyChoice = &RouteSimpleAdvancedOptions_EnableSpdy{v}
			iNdEx = postIndex
		case 23:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisableWebSocketConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.WebsocketChoice = &RouteSimpleAdvancedOptions_DisableWebSocketConfig{v}
			iNdEx = postIndex
		case 24:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WebSocketConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema_route.WebsocketConfigType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.WebsocketChoice = &RouteSimpleAdvancedOptions_WebSocketConfig{v}
			iNdEx = postIndex
		case 26:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultRetryPolicy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.RetryPolicyChoice = &RouteSimpleAdvancedOptions_DefaultRetryPolicy{v}
			iNdEx = postIndex
		case 27:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetryPolicy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.RetryPolicyType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.RetryPolicyChoice = &RouteSimpleAdvancedOptions_RetryPolicy{v}
			iNdEx = postIndex
		case 28:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timeout", wireType)
			}
			m.Timeout = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timeout |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 30:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommonBuffering", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.BufferChoice = &RouteSimpleAdvancedOptions_CommonBuffering{v}
			iNdEx = postIndex
		case 31:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BufferPolicy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.BufferConfigType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.BufferChoice = &RouteSimpleAdvancedOptions_BufferPolicy{v}
			iNdEx = postIndex
		case 33:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisableMirroring", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.MirroringChoice = &RouteSimpleAdvancedOptions_DisableMirroring{v}
			iNdEx = postIndex
		case 34:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MirrorPolicy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &MirrorPolicyType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.MirroringChoice = &RouteSimpleAdvancedOptions_MirrorPolicy{v}
			iNdEx = postIndex
		case 36:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetractCluster", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ClusterRetractChoice = &RouteSimpleAdvancedOptions_RetractCluster{v}
			iNdEx = postIndex
		case 37:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DoNotRetractCluster", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ClusterRetractChoice = &RouteSimpleAdvancedOptions_DoNotRetractCluster{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RouteTypeSimpleWithDefaultOriginPool) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RouteTypeSimpleWithDefaultOriginPool: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RouteTypeSimpleWithDefaultOriginPool: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HttpMethod", wireType)
			}
			m.HttpMethod = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HttpMethod |= (ves_io_schema4.HttpMethod(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Path", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Path == nil {
				m.Path = &ves_io_schema4.PathMatcherType{}
			}
			if err := m.Path.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AutoHostRewrite", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.HostRewriteParams = &RouteTypeSimpleWithDefaultOriginPool_AutoHostRewrite{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HostRewrite", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HostRewriteParams = &RouteTypeSimpleWithDefaultOriginPool_HostRewrite{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisableHostRewrite", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.HostRewriteParams = &RouteTypeSimpleWithDefaultOriginPool_DisableHostRewrite{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RouteTypeSimple) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RouteTypeSimple: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RouteTypeSimple: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Path", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Path == nil {
				m.Path = &ves_io_schema4.PathMatcherType{}
			}
			if err := m.Path.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HttpMethod", wireType)
			}
			m.HttpMethod = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HttpMethod |= (ves_io_schema4.HttpMethod(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OriginPools", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OriginPools = append(m.OriginPools, &ves_io_schema_views.OriginPoolWithWeight{})
			if err := m.OriginPools[len(m.OriginPools)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AutoHostRewrite", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.HostRewriteParams = &RouteTypeSimple_AutoHostRewrite{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HostRewrite", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HostRewriteParams = &RouteTypeSimple_HostRewrite{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisableHostRewrite", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.HostRewriteParams = &RouteTypeSimple_DisableHostRewrite{v}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdvancedOptions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AdvancedOptions == nil {
				m.AdvancedOptions = &RouteSimpleAdvancedOptions{}
			}
			if err := m.AdvancedOptions.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RouteTypeRedirect) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RouteTypeRedirect: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RouteTypeRedirect: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Path", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Path == nil {
				m.Path = &ves_io_schema4.PathMatcherType{}
			}
			if err := m.Path.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HttpMethod", wireType)
			}
			m.HttpMethod = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HttpMethod |= (ves_io_schema4.HttpMethod(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RouteRedirect", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RouteRedirect == nil {
				m.RouteRedirect = &ves_io_schema_route.RouteRedirect{}
			}
			if err := m.RouteRedirect.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RouteTypeDirectResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RouteTypeDirectResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RouteTypeDirectResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Path", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Path == nil {
				m.Path = &ves_io_schema4.PathMatcherType{}
			}
			if err := m.Path.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HttpMethod", wireType)
			}
			m.HttpMethod = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HttpMethod |= (ves_io_schema4.HttpMethod(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RouteDirectResponse", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RouteDirectResponse == nil {
				m.RouteDirectResponse = &ves_io_schema_route.RouteDirectResponse{}
			}
			if err := m.RouteDirectResponse.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RouteTypeCustomRoute) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RouteTypeCustomRoute: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RouteTypeCustomRoute: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RouteRef", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RouteRef == nil {
				m.RouteRef = &ves_io_schema_views.ObjectRefType{}
			}
			if err := m.RouteRef.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RouteType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RouteType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RouteType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SimpleRoute", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &RouteTypeSimple{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Choice = &RouteType_SimpleRoute{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RedirectRoute", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &RouteTypeRedirect{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Choice = &RouteType_RedirectRoute{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DirectResponseRoute", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &RouteTypeDirectResponse{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Choice = &RouteType_DirectResponseRoute{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CustomRouteObject", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &RouteTypeCustomRoute{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Choice = &RouteType_CustomRouteObject{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AdvancedOptionsType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AdvancedOptionsType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AdvancedOptionsType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestHeadersToAdd", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RequestHeadersToAdd = append(m.RequestHeadersToAdd, &ves_io_schema4.HeaderManipulationOptionType{})
			if err := m.RequestHeadersToAdd[len(m.RequestHeadersToAdd)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestHeadersToRemove", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RequestHeadersToRemove = append(m.RequestHeadersToRemove, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResponseHeadersToAdd", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ResponseHeadersToAdd = append(m.ResponseHeadersToAdd, &ves_io_schema4.HeaderManipulationOptionType{})
			if err := m.ResponseHeadersToAdd[len(m.ResponseHeadersToAdd)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResponseHeadersToRemove", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ResponseHeadersToRemove = append(m.ResponseHeadersToRemove, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxRequestHeaderSize", wireType)
			}
			m.MaxRequestHeaderSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxRequestHeaderSize |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BufferPolicy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BufferPolicy == nil {
				m.BufferPolicy = &ves_io_schema4.BufferConfigType{}
			}
			if err := m.BufferPolicy.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompressionParams", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CompressionParams == nil {
				m.CompressionParams = &ves_io_schema_virtual_host.CompressionType{}
			}
			if err := m.CompressionParams.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CustomErrors", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CustomErrors == nil {
				m.CustomErrors = make(map[uint32]string)
			}
			var mapkey uint32
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTypes
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= (uint32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTypes
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthTypes
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipTypes(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthTypes
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.CustomErrors[mapkey] = mapvalue
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JavascriptInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.JavascriptInfo == nil {
				m.JavascriptInfo = &ves_io_schema_virtual_host.JavaScriptConfigType{}
			}
			if err := m.JavascriptInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Jwt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Jwt = append(m.Jwt, &ves_io_schema_views.ObjectRefType{})
			if err := m.Jwt[len(m.Jwt)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IdleTimeout", wireType)
			}
			m.IdleTimeout = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IdleTimeout |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisableDefaultErrorPages", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DisableDefaultErrorPages = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PolicyBasedChallenge) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PolicyBasedChallenge: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PolicyBasedChallenge: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultJsChallengeParameters", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.JsChallengeParametersChoice = &PolicyBasedChallenge_DefaultJsChallengeParameters{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JsChallengeParameters", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema_virtual_host.JavascriptChallengeType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.JsChallengeParametersChoice = &PolicyBasedChallenge_JsChallengeParameters{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultCaptchaChallengeParameters", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.CaptchaChallengeParametersChoice = &PolicyBasedChallenge_DefaultCaptchaChallengeParameters{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CaptchaChallengeParameters", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema_virtual_host.CaptchaChallengeType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.CaptchaChallengeParametersChoice = &PolicyBasedChallenge_CaptchaChallengeParameters{v}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultTemporaryBlockingParameters", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.TemporaryBlockingParametersChoice = &PolicyBasedChallenge_DefaultTemporaryBlockingParameters{v}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TemporaryUserBlocking", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema_virtual_host.TemporaryUserBlockingType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.TemporaryBlockingParametersChoice = &PolicyBasedChallenge_TemporaryUserBlocking{v}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultMitigationSettings", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.MaliciousUserMitigationChoice = &PolicyBasedChallenge_DefaultMitigationSettings{v}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaliciousUserMitigation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema_views.ObjectRefType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.MaliciousUserMitigationChoice = &PolicyBasedChallenge_MaliciousUserMitigation{v}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoChallenge", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ChallengeChoice = &PolicyBasedChallenge_NoChallenge{v}
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AlwaysEnableJsChallenge", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ChallengeChoice = &PolicyBasedChallenge_AlwaysEnableJsChallenge{v}
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AlwaysEnableCaptchaChallenge", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ChallengeChoice = &PolicyBasedChallenge_AlwaysEnableCaptchaChallenge{v}
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RuleList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RuleList == nil {
				m.RuleList = &ChallengeRuleList{}
			}
			if err := m.RuleList.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChallengeRule) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChallengeRule: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChallengeRule: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Metadata == nil {
				m.Metadata = &ves_io_schema4.MessageMetaType{}
			}
			if err := m.Metadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Spec == nil {
				m.Spec = &ves_io_schema_service_policy_rule.ChallengeRuleSpec{}
			}
			if err := m.Spec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChallengeRuleList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChallengeRuleList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChallengeRuleList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rules", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Rules = append(m.Rules, &ChallengeRule{})
			if err := m.Rules[len(m.Rules)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SimpleClientSrcRule) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SimpleClientSrcRule: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SimpleClientSrcRule: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IpPrefix", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClientSourceChoice = &SimpleClientSrcRule_IpPrefix{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AsNumber", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ClientSourceChoice = &SimpleClientSrcRule_AsNumber{v}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpirationTimestamp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ExpirationTimestamp == nil {
				m.ExpirationTimestamp = &google_protobuf1.Timestamp{}
			}
			if err := m.ExpirationTimestamp.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Metadata == nil {
				m.Metadata = &ves_io_schema4.MessageMetaType{}
			}
			if err := m.Metadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CustomIpAllowedList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CustomIpAllowedList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CustomIpAllowedList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 22:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RateLimiterAllowedPrefixes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RateLimiterAllowedPrefixes = append(m.RateLimiterAllowedPrefixes, &ves_io_schema_views.ObjectRefType{})
			if err := m.RateLimiterAllowedPrefixes[len(m.RateLimiterAllowedPrefixes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RateLimitConfigType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RateLimitConfigType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RateLimitConfigType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RateLimiter", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RateLimiter == nil {
				m.RateLimiter = &ves_io_schema_rate_limiter.RateLimitValue{}
			}
			if err := m.RateLimiter.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoIpAllowedList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.IpAllowedListChoice = &RateLimitConfigType_NoIpAllowedList{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IpAllowedList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema_views.PrefixStringListType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.IpAllowedListChoice = &RateLimitConfigType_IpAllowedList{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CustomIpAllowedList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &CustomIpAllowedList{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.IpAllowedListChoice = &RateLimitConfigType_CustomIpAllowedList{v}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoPolicies", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.PolicyChoice = &RateLimitConfigType_NoPolicies{v}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Policies", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema_views_rate_limiter_policy.PolicyList{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.PolicyChoice = &RateLimitConfigType_Policies{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ServicePolicyList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ServicePolicyList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ServicePolicyList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Policies", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Policies = append(m.Policies, &ves_io_schema_views.ObjectRefType{})
			if err := m.Policies[len(m.Policies)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GlobalSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GlobalSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GlobalSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Domains", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Domains = append(m.Domains, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Http", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ProxyTypeHttp{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.LoadbalancerType = &GlobalSpecType_Http{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Https", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ProxyTypeHttps{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.LoadbalancerType = &GlobalSpecType_Https{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdvertiseOnPublic", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema_views.AdvertisePublic{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.AdvertiseChoice = &GlobalSpecType_AdvertiseOnPublic{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdvertiseCustom", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema_views.AdvertiseCustom{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.AdvertiseChoice = &GlobalSpecType_AdvertiseCustom{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultRoutePools", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DefaultRoutePools = append(m.DefaultRoutePools, &ves_io_schema_views.OriginPoolWithWeight{})
			if err := m.DefaultRoutePools[len(m.DefaultRoutePools)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Routes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Routes = append(m.Routes, &RouteType{})
			if err := m.Routes[len(m.Routes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CorsPolicy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CorsPolicy == nil {
				m.CorsPolicy = &ves_io_schema4.CorsPolicy{}
			}
			if err := m.CorsPolicy.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Waf", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema_views.ObjectRefType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.WafChoice = &GlobalSpecType_Waf{v}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WafRule", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema_views.ObjectRefType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.WafChoice = &GlobalSpecType_WafRule{v}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisableWaf", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.WafChoice = &GlobalSpecType_DisableWaf{v}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DoNotAdvertise", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.AdvertiseChoice = &GlobalSpecType_DoNotAdvertise{v}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdvertiseOnPublicDefaultVip", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.AdvertiseChoice = &GlobalSpecType_AdvertiseOnPublicDefaultVip{v}
			iNdEx = postIndex
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddLocation", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AddLocation = bool(v != 0)
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JsChallenge", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema_virtual_host.JavascriptChallengeType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ChallengeType = &GlobalSpecType_JsChallenge{v}
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MoreOption", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MoreOption == nil {
				m.MoreOption = &AdvancedOptionsType{}
			}
			if err := m.MoreOption.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserIdentification", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UserIdentification == nil {
				m.UserIdentification = &ves_io_schema_views.ObjectRefType{}
			}
			if err := m.UserIdentification.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 22:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisableRateLimit", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.RateLimitChoice = &GlobalSpecType_DisableRateLimit{v}
			iNdEx = postIndex
		case 23:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RateLimit", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &RateLimitConfigType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.RateLimitChoice = &GlobalSpecType_RateLimit{v}
			iNdEx = postIndex
		case 24:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CaptchaChallenge", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema_virtual_host.CaptchaChallengeType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ChallengeType = &GlobalSpecType_CaptchaChallenge{v}
			iNdEx = postIndex
		case 26:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoChallenge", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ChallengeType = &GlobalSpecType_NoChallenge{v}
			iNdEx = postIndex
		case 27:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HttpsAutoCert", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ProxyTypeHttpsAutoCerts{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.LoadbalancerType = &GlobalSpecType_HttpsAutoCert{v}
			iNdEx = postIndex
		case 28:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AutoHostRewrite", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.HostRewriteParams = &GlobalSpecType_AutoHostRewrite{v}
			iNdEx = postIndex
		case 29:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HostRewrite", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HostRewriteParams = &GlobalSpecType_HostRewrite{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 30:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisableHostRewrite", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.HostRewriteParams = &GlobalSpecType_DisableHostRewrite{v}
			iNdEx = postIndex
		case 32:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaliciousUserMitigation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MaliciousUserMitigation == nil {
				m.MaliciousUserMitigation = &ves_io_schema_views.ObjectRefType{}
			}
			if err := m.MaliciousUserMitigation.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 33:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WafExclusionRules", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WafExclusionRules = append(m.WafExclusionRules, &ves_io_schema_policy.SimpleWafExclusionRule{})
			if err := m.WafExclusionRules[len(m.WafExclusionRules)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 34:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockedClients", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BlockedClients = append(m.BlockedClients, &SimpleClientSrcRule{})
			if err := m.BlockedClients[len(m.BlockedClients)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 35:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TrustedClients", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TrustedClients = append(m.TrustedClients, &SimpleClientSrcRule{})
			if err := m.TrustedClients[len(m.TrustedClients)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 41:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServicePoliciesFromNamespace", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ServicePolicyChoice = &GlobalSpecType_ServicePoliciesFromNamespace{v}
			iNdEx = postIndex
		case 42:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoServicePolicies", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ServicePolicyChoice = &GlobalSpecType_NoServicePolicies{v}
			iNdEx = postIndex
		case 43:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActiveServicePolicies", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ServicePolicyList{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ServicePolicyChoice = &GlobalSpecType_ActiveServicePolicies{v}
			iNdEx = postIndex
		case 45:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoundRobin", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.HashPolicyChoice = &GlobalSpecType_RoundRobin{v}
			iNdEx = postIndex
		case 46:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LeastActive", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.HashPolicyChoice = &GlobalSpecType_LeastActive{v}
			iNdEx = postIndex
		case 47:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Random", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.HashPolicyChoice = &GlobalSpecType_Random{v}
			iNdEx = postIndex
		case 48:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceIpStickiness", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.HashPolicyChoice = &GlobalSpecType_SourceIpStickiness{v}
			iNdEx = postIndex
		case 49:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CookieStickiness", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema_route.CookieForHashing{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.HashPolicyChoice = &GlobalSpecType_CookieStickiness{v}
			iNdEx = postIndex
		case 50:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RingHash", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &HashPolicyListType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.HashPolicyChoice = &GlobalSpecType_RingHash{v}
			iNdEx = postIndex
		case 51:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PolicyBasedChallenge", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &PolicyBasedChallenge{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ChallengeType = &GlobalSpecType_PolicyBasedChallenge{v}
			iNdEx = postIndex
		case 1000:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ViewInternal", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ViewInternal == nil {
				m.ViewInternal = &ves_io_schema_views.ObjectRefType{}
			}
			if err := m.ViewInternal.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 1001:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HostName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HostName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 1002:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DnsInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DnsInfo = append(m.DnsInfo, &ves_io_schema_virtual_host_dns_info.DnsInfo{})
			if err := m.DnsInfo[len(m.DnsInfo)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 1003:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= (ves_io_schema_virtual_host.VirtualHostState(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 1004:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AutoCertState", wireType)
			}
			m.AutoCertState = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AutoCertState |= (ves_io_schema_virtual_host.CertificationState(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 1010:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AutoCertInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AutoCertInfo == nil {
				m.AutoCertInfo = &ves_io_schema_virtual_host.AutoCertInfoType{}
			}
			if err := m.AutoCertInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Domains", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Domains = append(m.Domains, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Http", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ProxyTypeHttp{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.LoadbalancerType = &CreateSpecType_Http{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Https", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ProxyTypeHttps{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.LoadbalancerType = &CreateSpecType_Https{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdvertiseOnPublic", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema_views.AdvertisePublic{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.AdvertiseChoice = &CreateSpecType_AdvertiseOnPublic{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdvertiseCustom", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema_views.AdvertiseCustom{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.AdvertiseChoice = &CreateSpecType_AdvertiseCustom{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultRoutePools", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DefaultRoutePools = append(m.DefaultRoutePools, &ves_io_schema_views.OriginPoolWithWeight{})
			if err := m.DefaultRoutePools[len(m.DefaultRoutePools)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Routes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Routes = append(m.Routes, &RouteType{})
			if err := m.Routes[len(m.Routes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CorsPolicy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CorsPolicy == nil {
				m.CorsPolicy = &ves_io_schema4.CorsPolicy{}
			}
			if err := m.CorsPolicy.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Waf", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema_views.ObjectRefType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.WafChoice = &CreateSpecType_Waf{v}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WafRule", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema_views.ObjectRefType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.WafChoice = &CreateSpecType_WafRule{v}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisableWaf", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.WafChoice = &CreateSpecType_DisableWaf{v}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DoNotAdvertise", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.AdvertiseChoice = &CreateSpecType_DoNotAdvertise{v}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdvertiseOnPublicDefaultVip", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.AdvertiseChoice = &CreateSpecType_AdvertiseOnPublicDefaultVip{v}
			iNdEx = postIndex
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddLocation", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AddLocation = bool(v != 0)
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JsChallenge", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema_virtual_host.JavascriptChallengeType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ChallengeType = &CreateSpecType_JsChallenge{v}
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MoreOption", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MoreOption == nil {
				m.MoreOption = &AdvancedOptionsType{}
			}
			if err := m.MoreOption.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserIdentification", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UserIdentification == nil {
				m.UserIdentification = &ves_io_schema_views.ObjectRefType{}
			}
			if err := m.UserIdentification.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 22:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisableRateLimit", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.RateLimitChoice = &CreateSpecType_DisableRateLimit{v}
			iNdEx = postIndex
		case 23:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RateLimit", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &RateLimitConfigType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.RateLimitChoice = &CreateSpecType_RateLimit{v}
			iNdEx = postIndex
		case 24:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CaptchaChallenge", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema_virtual_host.CaptchaChallengeType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ChallengeType = &CreateSpecType_CaptchaChallenge{v}
			iNdEx = postIndex
		case 26:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoChallenge", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ChallengeType = &CreateSpecType_NoChallenge{v}
			iNdEx = postIndex
		case 27:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HttpsAutoCert", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ProxyTypeHttpsAutoCerts{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.LoadbalancerType = &CreateSpecType_HttpsAutoCert{v}
			iNdEx = postIndex
		case 32:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaliciousUserMitigation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MaliciousUserMitigation == nil {
				m.MaliciousUserMitigation = &ves_io_schema_views.ObjectRefType{}
			}
			if err := m.MaliciousUserMitigation.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 33:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WafExclusionRules", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WafExclusionRules = append(m.WafExclusionRules, &ves_io_schema_policy.SimpleWafExclusionRule{})
			if err := m.WafExclusionRules[len(m.WafExclusionRules)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 34:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockedClients", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BlockedClients = append(m.BlockedClients, &SimpleClientSrcRule{})
			if err := m.BlockedClients[len(m.BlockedClients)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 35:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TrustedClients", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TrustedClients = append(m.TrustedClients, &SimpleClientSrcRule{})
			if err := m.TrustedClients[len(m.TrustedClients)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 41:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServicePoliciesFromNamespace", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ServicePolicyChoice = &CreateSpecType_ServicePoliciesFromNamespace{v}
			iNdEx = postIndex
		case 42:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoServicePolicies", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ServicePolicyChoice = &CreateSpecType_NoServicePolicies{v}
			iNdEx = postIndex
		case 43:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActiveServicePolicies", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ServicePolicyList{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ServicePolicyChoice = &CreateSpecType_ActiveServicePolicies{v}
			iNdEx = postIndex
		case 45:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoundRobin", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.HashPolicyChoice = &CreateSpecType_RoundRobin{v}
			iNdEx = postIndex
		case 46:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LeastActive", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.HashPolicyChoice = &CreateSpecType_LeastActive{v}
			iNdEx = postIndex
		case 47:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Random", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.HashPolicyChoice = &CreateSpecType_Random{v}
			iNdEx = postIndex
		case 48:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceIpStickiness", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.HashPolicyChoice = &CreateSpecType_SourceIpStickiness{v}
			iNdEx = postIndex
		case 49:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CookieStickiness", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema_route.CookieForHashing{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.HashPolicyChoice = &CreateSpecType_CookieStickiness{v}
			iNdEx = postIndex
		case 50:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RingHash", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &HashPolicyListType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.HashPolicyChoice = &CreateSpecType_RingHash{v}
			iNdEx = postIndex
		case 51:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PolicyBasedChallenge", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &PolicyBasedChallenge{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ChallengeType = &CreateSpecType_PolicyBasedChallenge{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplaceSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplaceSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplaceSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Domains", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Domains = append(m.Domains, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Http", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ProxyTypeHttp{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.LoadbalancerType = &ReplaceSpecType_Http{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Https", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ProxyTypeHttps{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.LoadbalancerType = &ReplaceSpecType_Https{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdvertiseOnPublic", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema_views.AdvertisePublic{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.AdvertiseChoice = &ReplaceSpecType_AdvertiseOnPublic{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdvertiseCustom", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema_views.AdvertiseCustom{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.AdvertiseChoice = &ReplaceSpecType_AdvertiseCustom{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultRoutePools", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DefaultRoutePools = append(m.DefaultRoutePools, &ves_io_schema_views.OriginPoolWithWeight{})
			if err := m.DefaultRoutePools[len(m.DefaultRoutePools)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Routes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Routes = append(m.Routes, &RouteType{})
			if err := m.Routes[len(m.Routes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CorsPolicy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CorsPolicy == nil {
				m.CorsPolicy = &ves_io_schema4.CorsPolicy{}
			}
			if err := m.CorsPolicy.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Waf", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema_views.ObjectRefType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.WafChoice = &ReplaceSpecType_Waf{v}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WafRule", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema_views.ObjectRefType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.WafChoice = &ReplaceSpecType_WafRule{v}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisableWaf", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.WafChoice = &ReplaceSpecType_DisableWaf{v}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DoNotAdvertise", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.AdvertiseChoice = &ReplaceSpecType_DoNotAdvertise{v}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdvertiseOnPublicDefaultVip", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.AdvertiseChoice = &ReplaceSpecType_AdvertiseOnPublicDefaultVip{v}
			iNdEx = postIndex
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddLocation", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AddLocation = bool(v != 0)
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JsChallenge", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema_virtual_host.JavascriptChallengeType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ChallengeType = &ReplaceSpecType_JsChallenge{v}
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MoreOption", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MoreOption == nil {
				m.MoreOption = &AdvancedOptionsType{}
			}
			if err := m.MoreOption.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserIdentification", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UserIdentification == nil {
				m.UserIdentification = &ves_io_schema_views.ObjectRefType{}
			}
			if err := m.UserIdentification.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 22:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisableRateLimit", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.RateLimitChoice = &ReplaceSpecType_DisableRateLimit{v}
			iNdEx = postIndex
		case 23:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RateLimit", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &RateLimitConfigType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.RateLimitChoice = &ReplaceSpecType_RateLimit{v}
			iNdEx = postIndex
		case 24:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CaptchaChallenge", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema_virtual_host.CaptchaChallengeType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ChallengeType = &ReplaceSpecType_CaptchaChallenge{v}
			iNdEx = postIndex
		case 26:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoChallenge", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ChallengeType = &ReplaceSpecType_NoChallenge{v}
			iNdEx = postIndex
		case 27:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HttpsAutoCert", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ProxyTypeHttpsAutoCerts{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.LoadbalancerType = &ReplaceSpecType_HttpsAutoCert{v}
			iNdEx = postIndex
		case 32:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaliciousUserMitigation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MaliciousUserMitigation == nil {
				m.MaliciousUserMitigation = &ves_io_schema_views.ObjectRefType{}
			}
			if err := m.MaliciousUserMitigation.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 33:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WafExclusionRules", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WafExclusionRules = append(m.WafExclusionRules, &ves_io_schema_policy.SimpleWafExclusionRule{})
			if err := m.WafExclusionRules[len(m.WafExclusionRules)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 34:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockedClients", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BlockedClients = append(m.BlockedClients, &SimpleClientSrcRule{})
			if err := m.BlockedClients[len(m.BlockedClients)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 35:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TrustedClients", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TrustedClients = append(m.TrustedClients, &SimpleClientSrcRule{})
			if err := m.TrustedClients[len(m.TrustedClients)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 41:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServicePoliciesFromNamespace", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ServicePolicyChoice = &ReplaceSpecType_ServicePoliciesFromNamespace{v}
			iNdEx = postIndex
		case 42:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoServicePolicies", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ServicePolicyChoice = &ReplaceSpecType_NoServicePolicies{v}
			iNdEx = postIndex
		case 43:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActiveServicePolicies", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ServicePolicyList{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ServicePolicyChoice = &ReplaceSpecType_ActiveServicePolicies{v}
			iNdEx = postIndex
		case 45:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoundRobin", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.HashPolicyChoice = &ReplaceSpecType_RoundRobin{v}
			iNdEx = postIndex
		case 46:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LeastActive", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.HashPolicyChoice = &ReplaceSpecType_LeastActive{v}
			iNdEx = postIndex
		case 47:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Random", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.HashPolicyChoice = &ReplaceSpecType_Random{v}
			iNdEx = postIndex
		case 48:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceIpStickiness", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.HashPolicyChoice = &ReplaceSpecType_SourceIpStickiness{v}
			iNdEx = postIndex
		case 49:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CookieStickiness", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema_route.CookieForHashing{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.HashPolicyChoice = &ReplaceSpecType_CookieStickiness{v}
			iNdEx = postIndex
		case 50:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RingHash", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &HashPolicyListType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.HashPolicyChoice = &ReplaceSpecType_RingHash{v}
			iNdEx = postIndex
		case 51:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PolicyBasedChallenge", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &PolicyBasedChallenge{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ChallengeType = &ReplaceSpecType_PolicyBasedChallenge{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Domains", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Domains = append(m.Domains, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Http", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ProxyTypeHttp{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.LoadbalancerType = &GetSpecType_Http{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Https", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ProxyTypeHttps{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.LoadbalancerType = &GetSpecType_Https{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdvertiseOnPublic", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema_views.AdvertisePublic{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.AdvertiseChoice = &GetSpecType_AdvertiseOnPublic{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdvertiseCustom", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema_views.AdvertiseCustom{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.AdvertiseChoice = &GetSpecType_AdvertiseCustom{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultRoutePools", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DefaultRoutePools = append(m.DefaultRoutePools, &ves_io_schema_views.OriginPoolWithWeight{})
			if err := m.DefaultRoutePools[len(m.DefaultRoutePools)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Routes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Routes = append(m.Routes, &RouteType{})
			if err := m.Routes[len(m.Routes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CorsPolicy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CorsPolicy == nil {
				m.CorsPolicy = &ves_io_schema4.CorsPolicy{}
			}
			if err := m.CorsPolicy.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Waf", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema_views.ObjectRefType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.WafChoice = &GetSpecType_Waf{v}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WafRule", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema_views.ObjectRefType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.WafChoice = &GetSpecType_WafRule{v}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisableWaf", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.WafChoice = &GetSpecType_DisableWaf{v}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DoNotAdvertise", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.AdvertiseChoice = &GetSpecType_DoNotAdvertise{v}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdvertiseOnPublicDefaultVip", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.AdvertiseChoice = &GetSpecType_AdvertiseOnPublicDefaultVip{v}
			iNdEx = postIndex
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddLocation", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AddLocation = bool(v != 0)
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JsChallenge", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema_virtual_host.JavascriptChallengeType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ChallengeType = &GetSpecType_JsChallenge{v}
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MoreOption", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MoreOption == nil {
				m.MoreOption = &AdvancedOptionsType{}
			}
			if err := m.MoreOption.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserIdentification", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UserIdentification == nil {
				m.UserIdentification = &ves_io_schema_views.ObjectRefType{}
			}
			if err := m.UserIdentification.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 22:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisableRateLimit", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.RateLimitChoice = &GetSpecType_DisableRateLimit{v}
			iNdEx = postIndex
		case 23:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RateLimit", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &RateLimitConfigType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.RateLimitChoice = &GetSpecType_RateLimit{v}
			iNdEx = postIndex
		case 24:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CaptchaChallenge", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema_virtual_host.CaptchaChallengeType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ChallengeType = &GetSpecType_CaptchaChallenge{v}
			iNdEx = postIndex
		case 26:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoChallenge", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ChallengeType = &GetSpecType_NoChallenge{v}
			iNdEx = postIndex
		case 27:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HttpsAutoCert", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ProxyTypeHttpsAutoCerts{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.LoadbalancerType = &GetSpecType_HttpsAutoCert{v}
			iNdEx = postIndex
		case 32:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaliciousUserMitigation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MaliciousUserMitigation == nil {
				m.MaliciousUserMitigation = &ves_io_schema_views.ObjectRefType{}
			}
			if err := m.MaliciousUserMitigation.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 33:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WafExclusionRules", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WafExclusionRules = append(m.WafExclusionRules, &ves_io_schema_policy.SimpleWafExclusionRule{})
			if err := m.WafExclusionRules[len(m.WafExclusionRules)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 34:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockedClients", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BlockedClients = append(m.BlockedClients, &SimpleClientSrcRule{})
			if err := m.BlockedClients[len(m.BlockedClients)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 35:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TrustedClients", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TrustedClients = append(m.TrustedClients, &SimpleClientSrcRule{})
			if err := m.TrustedClients[len(m.TrustedClients)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 41:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServicePoliciesFromNamespace", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ServicePolicyChoice = &GetSpecType_ServicePoliciesFromNamespace{v}
			iNdEx = postIndex
		case 42:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoServicePolicies", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ServicePolicyChoice = &GetSpecType_NoServicePolicies{v}
			iNdEx = postIndex
		case 43:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActiveServicePolicies", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ServicePolicyList{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ServicePolicyChoice = &GetSpecType_ActiveServicePolicies{v}
			iNdEx = postIndex
		case 45:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoundRobin", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.HashPolicyChoice = &GetSpecType_RoundRobin{v}
			iNdEx = postIndex
		case 46:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LeastActive", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.HashPolicyChoice = &GetSpecType_LeastActive{v}
			iNdEx = postIndex
		case 47:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Random", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.HashPolicyChoice = &GetSpecType_Random{v}
			iNdEx = postIndex
		case 48:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceIpStickiness", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.HashPolicyChoice = &GetSpecType_SourceIpStickiness{v}
			iNdEx = postIndex
		case 49:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CookieStickiness", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema_route.CookieForHashing{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.HashPolicyChoice = &GetSpecType_CookieStickiness{v}
			iNdEx = postIndex
		case 50:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RingHash", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &HashPolicyListType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.HashPolicyChoice = &GetSpecType_RingHash{v}
			iNdEx = postIndex
		case 51:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PolicyBasedChallenge", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &PolicyBasedChallenge{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ChallengeType = &GetSpecType_PolicyBasedChallenge{v}
			iNdEx = postIndex
		case 1001:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HostName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HostName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 1002:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DnsInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DnsInfo = append(m.DnsInfo, &ves_io_schema_virtual_host_dns_info.DnsInfo{})
			if err := m.DnsInfo[len(m.DnsInfo)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 1003:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= (ves_io_schema_virtual_host.VirtualHostState(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 1004:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AutoCertState", wireType)
			}
			m.AutoCertState = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AutoCertState |= (ves_io_schema_virtual_host.CertificationState(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 1010:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AutoCertInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AutoCertInfo == nil {
				m.AutoCertInfo = &ves_io_schema_virtual_host.AutoCertInfoType{}
			}
			if err := m.AutoCertInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTypes(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthTypes
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipTypes(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthTypes = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTypes   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("ves.io/schema/views/http_loadbalancer/types.proto", fileDescriptorTypes)
}
func init() {
	golang_proto.RegisterFile("ves.io/schema/views/http_loadbalancer/types.proto", fileDescriptorTypes)
}

var fileDescriptorTypes = []byte{
	// 6348 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x5d, 0x5d, 0x6c, 0x1b, 0xd9,
	0x75, 0xd6, 0x15, 0x7f, 0x44, 0x5d, 0x8a, 0x14, 0x39, 0x92, 0x25, 0x4a, 0x96, 0xe5, 0x31, 0xd7,
	0x4e, 0x64, 0xef, 0x98, 0x12, 0x7f, 0x24, 0x59, 0x0a, 0xd6, 0xbb, 0x1e, 0xd9, 0x1b, 0x5a, 0xb5,
	0x76, 0xb5, 0x23, 0xaf, 0x37, 0xc9, 0x26, 0x61, 0x46, 0xe4, 0x95, 0x38, 0xeb, 0xe1, 0x0c, 0x33,
	0x33, 0xb4, 0xad, 0x6d, 0x5c, 0x18, 0x46, 0x52, 0x04, 0xfb, 0xd2, 0x74, 0xfb, 0xb6, 0x2d, 0x8a,
	0xa2, 0x45, 0xd1, 0xc0, 0x45, 0x9b, 0x3e, 0x16, 0x1d, 0x17, 0x11, 0x16, 0x08, 0x10, 0xf4, 0xa5,
	0x7a, 0x0c, 0x82, 0xa2, 0xd8, 0x28, 0x2f, 0x9b, 0xf4, 0x2f, 0xd8, 0xa7, 0xc5, 0x02, 0x05, 0x8a,
	0xfb, 0x33, 0xc3, 0x21, 0x39, 0xa4, 0x25, 0x5b, 0xce, 0x36, 0x80, 0x9e, 0x4c, 0xcd, 0x9c, 0x73,
	0xee, 0xdf, 0x39, 0xf7, 0x9e, 0xef, 0xbb, 0x67, 0x60, 0x98, 0xbd, 0x83, 0xcc, 0x8c, 0xa2, 0xcf,
	0x9a, 0xe5, 0x2a, 0xaa, 0xc9, 0xb3, 0x77, 0x14, 0x74, 0xd7, 0x9c, 0xad, 0x5a, 0x56, 0xbd, 0xa4,
	0xea, 0x72, 0x65, 0x53, 0x56, 0x65, 0xad, 0x8c, 0x8c, 0x59, 0x6b, 0xa7, 0x8e, 0xcc, 0x4c, 0xdd,
	0xd0, 0x2d, 0x9d, 0x3b, 0x47, 0x55, 0x32, 0x54, 0x25, 0x43, 0x54, 0x32, 0x1d, 0x2a, 0x93, 0x17,
	0xb7, 0x15, 0xab, 0xda, 0xd8, 0xcc, 0x94, 0xf5, 0xda, 0xec, 0xb6, 0xbe, 0xad, 0xcf, 0x12, 0xed,
	0xcd, 0xc6, 0x16, 0xf9, 0x8b, 0xfc, 0x41, 0x7e, 0x51, 0xab, 0x93, 0xa7, 0xb7, 0x75, 0x7d, 0x5b,
	0x45, 0x4d, 0x29, 0x4b, 0xa9, 0x21, 0xd3, 0x92, 0x6b, 0x75, 0x26, 0x70, 0xb2, 0xb5, 0xa7, 0x7a,
	0xdd, 0x52, 0x74, 0x8d, 0xf5, 0x69, 0x92, 0x6f, 0x7d, 0x59, 0xd7, 0x55, 0xa5, 0xbc, 0xe3, 0xed,
	0xf5, 0xe4, 0x17, 0x5a, 0x25, 0x0c, 0xd9, 0x42, 0x25, 0x55, 0xa9, 0x29, 0x56, 0xeb, 0xe8, 0x26,
	0x4f, 0xb7, 0xc9, 0xe9, 0x0d, 0x0b, 0xb5, 0x08, 0xcc, 0xb4, 0x0a, 0x98, 0xc8, 0xb8, 0xa3, 0x94,
	0x51, 0xc9, 0xa7, 0xc9, 0x8b, 0xbd, 0x24, 0x4b, 0x46, 0x43, 0x6d, 0x35, 0x3c, 0xd1, 0x2a, 0xee,
	0x7d, 0x35, 0xd5, 0xb6, 0x4a, 0xb2, 0xaa, 0x54, 0x64, 0x0b, 0xf9, 0x0f, 0x1e, 0x2f, 0x48, 0xa9,
	0x75, 0x7a, 0xf2, 0x7e, 0xab, 0xec, 0x9d, 0x02, 0xbf, 0xee, 0x9f, 0xf6, 0x53, 0xea, 0x31, 0xa5,
	0x77, 0x14, 0xc3, 0x6a, 0xc8, 0x6a, 0xa9, 0xaa, 0x9b, 0x56, 0x8b, 0xdc, 0x5c, 0x77, 0xb9, 0x52,
	0x45, 0x33, 0x4b, 0x8a, 0xb6, 0xa5, 0xcf, 0xea, 0x9b, 0xef, 0xa0, 0xb2, 0x45, 0x35, 0xd2, 0x16,
	0x9c, 0xbe, 0xaa, 0xdf, 0xd5, 0x4c, 0xcb, 0x40, 0x72, 0xed, 0xa6, 0x6a, 0xde, 0xa2, 0x03, 0x56,
	0x74, 0x6d, 0x45, 0xd7, 0x2c, 0x74, 0xcf, 0xe2, 0x24, 0x18, 0xb7, 0x8c, 0x86, 0x69, 0xa1, 0x4a,
	0xa9, 0x2c, 0x97, 0x1a, 0x86, 0x9a, 0xea, 0xe7, 0xc1, 0xcc, 0xa0, 0x28, 0x7c, 0x6a, 0x83, 0xe0,
	0x5f, 0x3e, 0x06, 0x31, 0xd9, 0x2c, 0x2b, 0x8a, 0xc0, 0x6f, 0xca, 0x26, 0x5a, 0x28, 0xfc, 0xd3,
	0xaf, 0x76, 0x03, 0x11, 0x23, 0xcc, 0x83, 0x99, 0x07, 0x0f, 0x22, 0xf8, 0x8f, 0x90, 0x11, 0xf8,
	0x01, 0x00, 0xd2, 0x10, 0xb3, 0xb1, 0x22, 0xbf, 0x69, 0xa8, 0xe9, 0x7f, 0x08, 0xc0, 0xf1, 0x96,
	0x66, 0xd7, 0x65, 0x43, 0xae, 0x99, 0x37, 0x77, 0xea, 0x88, 0x5b, 0x81, 0xd0, 0x52, 0xcd, 0x52,
	0x59, 0xd7, 0xb6, 0x94, 0xed, 0x14, 0xe0, 0xc1, 0x4c, 0x34, 0x37, 0x9d, 0xf1, 0x8b, 0x84, 0x9b,
	0xaa, 0xb9, 0x42, 0xa4, 0xc4, 0xe0, 0x6f, 0x6c, 0x00, 0xa4, 0x41, 0xcb, 0x79, 0xc0, 0x6d, 0xc1,
	0x04, 0x31, 0x82, 0x0c, 0x4b, 0xd9, 0x52, 0xca, 0xb2, 0x85, 0xcc, 0x54, 0x3f, 0x1f, 0x98, 0x89,
	0xe6, 0xce, 0xb4, 0x99, 0xc2, 0x46, 0x9a, 0x52, 0xb8, 0x07, 0x62, 0x6a, 0xcf, 0x06, 0x80, 0xf4,
	0xfd, 0x7d, 0xd0, 0x9f, 0x48, 0x38, 0xbf, 0x22, 0x40, 0x1a, 0xb6, 0x5a, 0xa4, 0x4d, 0x6e, 0x1e,
	0x0e, 0x68, 0x7a, 0xa9, 0x66, 0xa9, 0x66, 0x2a, 0x40, 0x7a, 0x3a, 0xda, 0x66, 0xfe, 0x5a, 0xad,
	0x6e, 0xed, 0x88, 0xc1, 0x5d, 0x1b, 0x80, 0x62, 0x9f, 0x14, 0xd6, 0xf4, 0x35, 0x4b, 0x35, 0xb9,
	0x2a, 0x8c, 0x34, 0x4c, 0x44, 0xf5, 0x82, 0x44, 0xef, 0x5a, 0xe6, 0x40, 0xb1, 0x9e, 0xe9, 0xbd,
	0x58, 0x6e, 0x43, 0x03, 0x0d, 0x13, 0xe1, 0x96, 0x96, 0x4f, 0x7d, 0x68, 0x83, 0x09, 0x38, 0x0e,
	0xe3, 0x37, 0x6f, 0x6c, 0xf0, 0x64, 0x96, 0x91, 0x85, 0x0c, 0x93, 0x0b, 0x65, 0x85, 0x9c, 0x30,
	0x2f, 0xa6, 0x61, 0xb4, 0x46, 0x26, 0xaa, 0xaa, 0x2b, 0x65, 0xc4, 0x8d, 0xec, 0xda, 0x20, 0xf0,
	0x53, 0x1b, 0x80, 0x3d, 0x1b, 0x84, 0xf6, 0x6d, 0x10, 0xc8, 0x0b, 0x85, 0xd5, 0x60, 0x24, 0x94,
	0x08, 0xa7, 0xbf, 0x17, 0x84, 0xf1, 0x75, 0x43, 0xbf, 0xb7, 0x83, 0xa7, 0xa8, 0x68, 0x59, 0x75,
	0x93, 0x3b, 0x0f, 0x63, 0xa4, 0x83, 0x06, 0xaa, 0x28, 0x06, 0x2a, 0x5b, 0x64, 0xb1, 0x22, 0x62,
	0xf0, 0x53, 0x1b, 0xf4, 0x49, 0x43, 0xf8, 0x95, 0xc4, 0xde, 0x70, 0xa7, 0x61, 0x44, 0xae, 0x54,
	0x4a, 0x55, 0xd3, 0x32, 0x89, 0xfb, 0x38, 0x52, 0x03, 0x72, 0xa5, 0x52, 0x34, 0x2d, 0x93, 0xbb,
	0x0d, 0xe3, 0xb8, 0x1f, 0x75, 0xb7, 0x87, 0x6c, 0x3e, 0x2f, 0x3f, 0xcd, 0xbc, 0x34, 0xbd, 0x49,
	0x0c, 0xe2, 0xb5, 0x94, 0x62, 0x16, 0x7b, 0x48, 0x07, 0xbf, 0x02, 0xe3, 0x15, 0xb4, 0x25, 0x37,
	0x54, 0xab, 0x54, 0x45, 0x72, 0x05, 0x19, 0xa9, 0xd0, 0x01, 0x16, 0x2f, 0xc6, 0x74, 0x8a, 0x44,
	0x85, 0xcb, 0xc2, 0x28, 0xde, 0x67, 0x90, 0x51, 0xd2, 0xe4, 0x1a, 0x4a, 0x85, 0x49, 0x50, 0xc4,
	0x77, 0x1d, 0xd7, 0x31, 0x02, 0xa9, 0xbf, 0x78, 0xb9, 0xd8, 0x27, 0x41, 0x2a, 0xf4, 0x9a, 0x5c,
	0x43, 0xdc, 0x65, 0xc8, 0xc9, 0xf5, 0x3a, 0xd2, 0x2a, 0x25, 0xaf, 0xe6, 0x40, 0x17, 0xcd, 0x04,
	0x95, 0xdd, 0x68, 0xea, 0xbf, 0x0c, 0x87, 0xea, 0xb2, 0x69, 0x96, 0xac, 0xaa, 0xa1, 0x37, 0xb6,
	0xab, 0xa9, 0xc8, 0x01, 0x7a, 0x1d, 0xc5, 0x1a, 0x37, 0xa9, 0xc2, 0x32, 0xfc, 0xe4, 0xf2, 0x00,
	0x5e, 0xf8, 0xbc, 0x50, 0x10, 0x67, 0xe1, 0x28, 0xeb, 0x05, 0x9d, 0x03, 0xc7, 0x07, 0xc6, 0x77,
	0x6d, 0x10, 0x62, 0x3e, 0x10, 0xdc, 0xb7, 0xc1, 0xc0, 0xbc, 0xb0, 0x20, 0x2c, 0x0a, 0x97, 0x56,
	0x83, 0x91, 0x60, 0x22, 0x94, 0x5e, 0x83, 0xb1, 0x16, 0x37, 0xe0, 0x16, 0xe0, 0x28, 0xde, 0x5a,
	0xee, 0xe8, 0xaa, 0x85, 0x0c, 0x43, 0x2e, 0xd5, 0x64, 0x4d, 0xde, 0x46, 0x95, 0x16, 0x67, 0xe0,
	0x2a, 0x9a, 0x79, 0x8b, 0x09, 0xac, 0xd1, 0xf7, 0xcb, 0xc1, 0x4f, 0x2e, 0x83, 0x6c, 0xfa, 0x47,
	0x21, 0x38, 0xde, 0xea, 0x56, 0x57, 0x1a, 0x96, 0x8e, 0x63, 0xec, 0x68, 0xfd, 0xeb, 0xa5, 0x96,
	0x5d, 0x25, 0x70, 0x90, 0x5d, 0xc5, 0xbb, 0x9f, 0x78, 0xe2, 0x3c, 0xf4, 0x94, 0x71, 0x1e, 0x7e,
	0x9e, 0x71, 0xee, 0xe3, 0xd2, 0x4f, 0x76, 0x0e, 0xf0, 0x04, 0x97, 0x1e, 0xf4, 0x75, 0x4c, 0x70,
	0x00, 0x97, 0x86, 0x5d, 0x34, 0x9f, 0xec, 0xd2, 0xd1, 0x03, 0xf4, 0xba, 0xc5, 0xa5, 0x87, 0x3e,
	0xb9, 0x3c, 0x88, 0x5d, 0xba, 0x20, 0xe4, 0x85, 0x45, 0xbf, 0xfd, 0xcc, 0xeb, 0xcb, 0x81, 0x79,
	0x61, 0x41, 0xcc, 0x76, 0x71, 0xfc, 0x89, 0x5d, 0x1b, 0x44, 0x98, 0xf0, 0xc0, 0xbe, 0x0d, 0x06,
	0x2f, 0x09, 0x4b, 0x42, 0x76, 0x4e, 0xc8, 0x66, 0xa9, 0xeb, 0xaf, 0x06, 0x23, 0x03, 0x89, 0x48,
	0xda, 0x82, 0x5c, 0x51, 0x36, 0xab, 0xeb, 0xe4, 0x18, 0xbf, 0xa1, 0x98, 0x16, 0x39, 0xb5, 0xbe,
	0x09, 0xa3, 0x55, 0xd9, 0xac, 0xb2, 0xd3, 0x3d, 0x95, 0x20, 0x67, 0xcd, 0x0b, 0x6d, 0xc3, 0x20,
	0x29, 0x4e, 0xa6, 0xa9, 0xed, 0x73, 0xda, 0x44, 0x9c, 0x5f, 0x29, 0x20, 0xc1, 0xaa, 0x2b, 0x99,
	0xfe, 0x2b, 0x00, 0x13, 0x6b, 0x8a, 0x61, 0xe8, 0x46, 0x53, 0x95, 0xdb, 0x80, 0x51, 0xdd, 0x50,
	0xb6, 0x15, 0xad, 0x54, 0xd7, 0x75, 0x95, 0x9d, 0x95, 0x69, 0x5f, 0x0f, 0x7b, 0x9d, 0x1c, 0xfa,
	0x12, 0xda, 0x22, 0x6d, 0xc6, 0x1f, 0xdd, 0xf7, 0x6a, 0x4a, 0x90, 0xfe, 0xb1, 0xae, 0xeb, 0x2a,
	0xb7, 0x0c, 0x07, 0xea, 0xc8, 0x28, 0x23, 0xcd, 0x22, 0x91, 0x14, 0xcd, 0xf1, 0x6d, 0x06, 0x5f,
	0x35, 0xe4, 0x32, 0xf6, 0x45, 0x59, 0x5d, 0xa7, 0x72, 0x92, 0xa3, 0x90, 0xfe, 0xeb, 0x71, 0x38,
	0x29, 0xe1, 0x41, 0x6e, 0x28, 0xb5, 0xba, 0x8a, 0xae, 0x54, 0xee, 0x60, 0x6f, 0xae, 0xbc, 0x4e,
	0x53, 0x24, 0xee, 0x2a, 0xe4, 0xca, 0x7a, 0xad, 0xa6, 0x6b, 0x25, 0xef, 0x5c, 0xf5, 0x77, 0x5f,
	0x72, 0xbc, 0x0b, 0x52, 0x8d, 0xe6, 0xa4, 0x71, 0x35, 0x38, 0x6a, 0xd6, 0x51, 0x19, 0x9f, 0xc1,
	0x2d, 0x76, 0x68, 0x50, 0x2f, 0x1d, 0x30, 0xc0, 0x3a, 0xd7, 0xb0, 0xd8, 0x27, 0x71, 0x8e, 0x61,
	0x4f, 0x73, 0xaf, 0xc0, 0x48, 0xdd, 0x50, 0x74, 0x43, 0xb1, 0x76, 0xc8, 0x59, 0x1d, 0xef, 0xd8,
	0x37, 0xf0, 0x88, 0x15, 0x6d, 0x7b, 0x9d, 0x49, 0x51, 0x3f, 0x95, 0x5c, 0x2d, 0xee, 0x87, 0x00,
	0x26, 0x90, 0x56, 0xa9, 0xeb, 0x8a, 0x66, 0x95, 0xcc, 0xc6, 0xa6, 0x89, 0x2c, 0xbc, 0x8d, 0x60,
	0x0f, 0xb9, 0x75, 0xc0, 0xde, 0x76, 0x9f, 0xd4, 0xcc, 0x35, 0x66, 0x79, 0x83, 0x1a, 0xbe, 0xa6,
	0x59, 0xc6, 0x8e, 0x78, 0x6e, 0x97, 0xfa, 0x31, 0xf8, 0xe0, 0x31, 0x08, 0xc2, 0xfe, 0x3e, 0xea,
	0x60, 0x1f, 0xe0, 0x74, 0x66, 0xff, 0xa3, 0x9f, 0x04, 0xc2, 0xef, 0x3d, 0x06, 0xfd, 0x91, 0x3e,
	0x69, 0x18, 0xb5, 0x2a, 0x73, 0x37, 0xe0, 0x58, 0x45, 0x31, 0xe5, 0x4d, 0x15, 0x95, 0xea, 0x06,
	0xda, 0x52, 0xee, 0x95, 0x0c, 0x74, 0xd7, 0x50, 0x2c, 0x7a, 0x4a, 0x75, 0x5b, 0x25, 0x20, 0x8d,
	0x32, 0xad, 0x75, 0xa2, 0x24, 0x51, 0x1d, 0x6e, 0x11, 0xc6, 0xdb, 0xac, 0x44, 0xe8, 0xc6, 0x80,
	0xf7, 0x66, 0x67, 0x63, 0x78, 0xd0, 0x8f, 0x37, 0xa2, 0x7a, 0x8b, 0xe2, 0xbb, 0x70, 0xcc, 0x40,
	0xdf, 0x6e, 0x20, 0xd3, 0xd9, 0xcd, 0xcc, 0x92, 0xa5, 0x97, 0xe4, 0x4a, 0x25, 0x35, 0x48, 0xa6,
	0xed, 0xc5, 0xb6, 0x6e, 0xd0, 0xfd, 0x6b, 0x4d, 0xd6, 0x94, 0x7a, 0x43, 0x25, 0x1b, 0x25, 0x9d,
	0x1d, 0x9f, 0x00, 0xe3, 0x3d, 0x01, 0x36, 0xc2, 0x1a, 0xa1, 0xea, 0xe6, 0x4d, 0xfd, 0x4a, 0xa5,
	0xc2, 0x55, 0xe1, 0x84, 0x4f, 0xdb, 0x06, 0xaa, 0xe9, 0x77, 0xf0, 0xc6, 0x16, 0x98, 0x19, 0x14,
	0x2f, 0x62, 0x8b, 0x9f, 0x32, 0xab, 0x43, 0xef, 0x83, 0xc1, 0xf4, 0x80, 0x81, 0x8f, 0x85, 0x07,
	0xfd, 0xbe, 0xcd, 0x8c, 0xb5, 0x37, 0x23, 0x11, 0x63, 0xdc, 0x77, 0xe0, 0xb8, 0x81, 0xcc, 0xba,
	0xae, 0x99, 0xa8, 0x7d, 0x98, 0xd1, 0xa3, 0x1c, 0xe6, 0xa8, 0xd3, 0x4a, 0xcb, 0x38, 0xdf, 0x81,
	0x93, 0x7e, 0xad, 0xb3, 0x81, 0x0e, 0x3d, 0xcd, 0x40, 0xc7, 0x3b, 0x1a, 0x62, 0x23, 0xc5, 0x39,
	0x02, 0x73, 0x2b, 0x55, 0x2f, 0x93, 0x9e, 0x93, 0x61, 0xc6, 0x5a, 0x72, 0x04, 0x2a, 0x71, 0x83,
	0x09, 0xe0, 0x3e, 0xbe, 0x04, 0xa3, 0x8e, 0xde, 0x5d, 0x79, 0x2b, 0x35, 0xfc, 0xc4, 0xc3, 0xa1,
	0x5f, 0x82, 0x4c, 0xe1, 0x2d, 0x79, 0x8b, 0x13, 0x61, 0x00, 0xab, 0x25, 0x0e, 0xbc, 0x2f, 0xc2,
	0x47, 0xf7, 0xb1, 0x06, 0x33, 0x85, 0x7f, 0x72, 0x6f, 0xc0, 0xc8, 0x5d, 0x79, 0x8b, 0x60, 0xc8,
	0x54, 0xf2, 0xc0, 0x86, 0x12, 0x8f, 0xee, 0x0f, 0x3a, 0x6a, 0x26, 0x33, 0x37, 0x70, 0x57, 0xde,
	0x92, 0x1a, 0x2a, 0xe2, 0xae, 0xc2, 0x68, 0x59, 0x37, 0x4c, 0x67, 0xdf, 0xe2, 0x88, 0xd5, 0x89,
	0x36, 0xab, 0x2b, 0xba, 0x61, 0xd2, 0x1d, 0x48, 0x8c, 0x38, 0xc1, 0x2c, 0xc1, 0xb2, 0xfb, 0x94,
	0x5b, 0x82, 0x43, 0xce, 0xdc, 0x98, 0xf5, 0xca, 0x4e, 0x6a, 0xb4, 0x47, 0x80, 0x06, 0x24, 0x67,
	0x1e, 0x37, 0xea, 0x95, 0x1d, 0x6e, 0x11, 0x46, 0x91, 0xd6, 0xd4, 0x3c, 0xd1, 0x53, 0x13, 0x52,
	0x51, 0xa2, 0xf8, 0x06, 0x9c, 0x70, 0xd7, 0x03, 0x6d, 0x96, 0x4c, 0xbd, 0x7c, 0x1b, 0x59, 0x4e,
	0x52, 0x35, 0xde, 0xc3, 0x4c, 0x50, 0x72, 0xf6, 0x95, 0xb7, 0xd0, 0xe6, 0x06, 0x51, 0x63, 0x99,
	0xd5, 0x2d, 0x98, 0xec, 0x34, 0x95, 0x22, 0xa6, 0x66, 0x7c, 0x8f, 0xcf, 0xb7, 0xd0, 0xa6, 0xe9,
	0x31, 0x40, 0x76, 0xee, 0xa0, 0x34, 0x7c, 0xb7, 0xcd, 0x6e, 0x11, 0x8e, 0x3a, 0x09, 0x91, 0x81,
	0x2c, 0x63, 0xc7, 0x99, 0xed, 0xc9, 0x1e, 0xbd, 0x0c, 0x49, 0x1c, 0xd3, 0x91, 0xb0, 0x0a, 0x9b,
	0xe8, 0xeb, 0x70, 0xa8, 0xc5, 0xc2, 0x49, 0xdf, 0xe4, 0xd1, 0xa3, 0xd1, 0x04, 0x1e, 0xc5, 0x90,
	0x14, 0x35, 0x3c, 0xa6, 0x16, 0xe0, 0x80, 0xa5, 0xd4, 0x90, 0xde, 0xb0, 0x52, 0x53, 0x3c, 0x98,
	0x89, 0x89, 0x53, 0x3f, 0xb7, 0x41, 0x28, 0x3f, 0x37, 0x37, 0x37, 0x87, 0x63, 0xe0, 0xfb, 0x8f,
	0xe9, 0xb6, 0x18, 0xbe, 0x10, 0x4c, 0xed, 0xfe, 0xeb, 0x59, 0xc9, 0x11, 0xe6, 0xae, 0x40, 0x76,
	0x0c, 0x96, 0x36, 0x1b, 0x5b, 0x5b, 0xc8, 0x50, 0xb4, 0xed, 0xd4, 0x74, 0x8f, 0x81, 0x84, 0xa5,
	0x61, 0x2a, 0x2f, 0x3a, 0xe2, 0xdc, 0x0d, 0x18, 0xa3, 0xba, 0xce, 0x30, 0x4e, 0x13, 0xfd, 0xd3,
	0x6d, 0xfa, 0x54, 0xa1, 0x39, 0xb5, 0x2c, 0xae, 0xc2, 0xd2, 0x10, 0xd5, 0x66, 0x03, 0x59, 0x81,
	0x49, 0xc7, 0x11, 0x6a, 0x24, 0x2b, 0xc1, 0x3d, 0x3a, 0xd3, 0xa3, 0x47, 0x03, 0x52, 0x82, 0x29,
	0xac, 0x39, 0xf2, 0xdc, 0x37, 0x61, 0x8c, 0x2a, 0x3b, 0x5d, 0x4a, 0x13, 0x03, 0x8b, 0x07, 0x3c,
	0x13, 0xdb, 0xd3, 0xa1, 0xe2, 0x80, 0x34, 0x54, 0xf3, 0x3c, 0xe3, 0x5e, 0x86, 0xc3, 0x78, 0xf2,
	0xe5, 0xb2, 0x55, 0x2a, 0xab, 0x0d, 0xd3, 0x42, 0x46, 0xea, 0x6c, 0x8f, 0x2e, 0x46, 0xa4, 0x38,
	0x13, 0x5f, 0xa1, 0xd2, 0xdc, 0xef, 0xc1, 0xb1, 0x8a, 0x5e, 0xd2, 0x74, 0xea, 0x42, 0x5e, 0x3b,
	0xe7, 0x7a, 0xda, 0x19, 0xa9, 0xe8, 0xaf, 0xe9, 0xc4, 0x87, 0x9a, 0xc6, 0x26, 0x45, 0x38, 0xea,
	0x77, 0x54, 0x73, 0x09, 0x18, 0xb8, 0x8d, 0x76, 0x48, 0xf2, 0x36, 0x28, 0xe1, 0x9f, 0xdc, 0x28,
	0x0c, 0xdd, 0x91, 0xd5, 0x06, 0xa2, 0x44, 0x8b, 0x44, 0xff, 0x58, 0xee, 0xbf, 0x04, 0x96, 0xff,
	0x0e, 0x7c, 0x68, 0x83, 0x1f, 0x02, 0x78, 0x1a, 0x8e, 0xdd, 0xd0, 0xe5, 0x0a, 0x2f, 0x92, 0xb9,
	0x50, 0xb4, 0x6d, 0x1e, 0x03, 0x03, 0x43, 0x57, 0x31, 0xae, 0x2f, 0x08, 0xf3, 0x70, 0x0e, 0x9e,
	0x92, 0xe8, 0xa1, 0x33, 0x2b, 0xb1, 0x3d, 0x99, 0xf7, 0x9e, 0x1b, 0xdc, 0xf0, 0x82, 0x93, 0xdc,
	0x0a, 0xd9, 0x9c, 0x90, 0xcd, 0xc3, 0x24, 0x8c, 0x6c, 0xa0, 0x72, 0x83, 0x24, 0x2c, 0xa1, 0x6c,
	0x41, 0xc8, 0x5e, 0x82, 0x93, 0x30, 0xb9, 0x6e, 0xe8, 0x96, 0x5e, 0xd6, 0x55, 0xfe, 0xcd, 0xfa,
	0xb6, 0x21, 0x57, 0x90, 0xc9, 0x85, 0xb2, 0x4b, 0x42, 0x2e, 0x07, 0xcf, 0xc2, 0x13, 0x6b, 0x8a,
	0x59, 0x46, 0xaa, 0x2a, 0x6b, 0x48, 0x6f, 0x98, 0xbc, 0x93, 0xe3, 0x45, 0x73, 0xf3, 0x42, 0xee,
	0x92, 0x90, 0x5b, 0x12, 0xf2, 0x39, 0xf1, 0x1c, 0xe4, 0x3c, 0x19, 0x9a, 0x93, 0x68, 0x0f, 0xef,
	0xda, 0xa0, 0x1f, 0x87, 0x07, 0xce, 0xc8, 0x73, 0x42, 0x5e, 0x3c, 0x03, 0xe3, 0x2c, 0x41, 0xf0,
	0x8a, 0x0c, 0xec, 0xd9, 0x20, 0x8c, 0x45, 0x16, 0x85, 0x4b, 0xe2, 0x17, 0x20, 0xc4, 0xfb, 0x29,
	0x7b, 0x9d, 0xda, 0xb5, 0xc1, 0x30, 0x4b, 0xd5, 0xe3, 0xfb, 0x36, 0x88, 0x64, 0xe7, 0x85, 0xec,
	0x82, 0x90, 0x5d, 0x14, 0x79, 0x18, 0xc5, 0x7b, 0x9a, 0x23, 0x98, 0xdc, 0xb5, 0xc1, 0xe8, 0x9e,
	0x0d, 0x46, 0xf6, 0x6d, 0x10, 0xca, 0xcd, 0x09, 0xb9, 0xac, 0x78, 0x0e, 0x26, 0xee, 0x3a, 0x5b,
	0x88, 0x57, 0x6c, 0x7c, 0xcf, 0x06, 0x63, 0x44, 0x2c, 0x2f, 0xe4, 0x0a, 0xe2, 0x0c, 0x1c, 0xf1,
	0x46, 0xbd, 0x57, 0x72, 0x72, 0xcf, 0x06, 0x13, 0x44, 0x72, 0x41, 0xc8, 0x61, 0xcc, 0xe1, 0x44,
	0x96, 0x47, 0x66, 0x7a, 0xcf, 0x06, 0xa7, 0xf6, 0x49, 0x70, 0x0b, 0x79, 0xd2, 0xa8, 0x1b, 0x27,
	0x5e, 0xb1, 0x33, 0x7b, 0x36, 0xe0, 0x89, 0x58, 0x5e, 0xc8, 0x17, 0xc4, 0x39, 0x38, 0xc6, 0x3c,
	0xac, 0xe9, 0x71, 0x54, 0x78, 0x6c, 0xd7, 0x06, 0x67, 0xd9, 0x88, 0x5f, 0xd8, 0xb7, 0x41, 0x38,
	0xbf, 0x20, 0xf0, 0xf9, 0xc5, 0xd5, 0x60, 0x04, 0x24, 0xfa, 0x57, 0x83, 0x91, 0x70, 0x62, 0x60,
	0x35, 0x18, 0x89, 0x27, 0x86, 0x57, 0x83, 0x91, 0x91, 0xc4, 0xe8, 0x6a, 0x30, 0x32, 0x96, 0x18,
	0x5f, 0x0d, 0x46, 0x26, 0x12, 0x93, 0xab, 0xc1, 0xc8, 0xa9, 0xc4, 0xf4, 0x6a, 0x30, 0xc2, 0x27,
	0xce, 0xac, 0x06, 0x23, 0x2f, 0x24, 0xce, 0xa6, 0xff, 0x3c, 0x00, 0xcf, 0x92, 0x94, 0x12, 0xc7,
	0x0d, 0x4d, 0x2b, 0xdf, 0x52, 0xac, 0xea, 0x55, 0xba, 0xf9, 0xbd, 0xee, 0x05, 0x03, 0x51, 0x12,
	0x78, 0x35, 0x64, 0x55, 0x75, 0x8a, 0xe9, 0xe3, 0x1d, 0x47, 0x15, 0x86, 0xed, 0x6b, 0x44, 0x40,
	0x82, 0x55, 0xf7, 0x37, 0x97, 0x83, 0xc1, 0xba, 0x6c, 0x55, 0x59, 0x7e, 0xdf, 0xbe, 0x5f, 0xae,
	0xcb, 0x56, 0x75, 0x4d, 0xb6, 0xca, 0x55, 0x64, 0xe0, 0x4e, 0x48, 0x44, 0x96, 0x7b, 0x03, 0x26,
	0xe5, 0x86, 0xa5, 0x53, 0xc6, 0xd2, 0x49, 0x1a, 0x83, 0x3d, 0x8e, 0xfd, 0x98, 0x93, 0x4a, 0x06,
	0x8d, 0xfe, 0x2a, 0x46, 0xc4, 0xc3, 0x58, 0xbf, 0xa8, 0x9b, 0x96, 0x93, 0x4b, 0x9e, 0x87, 0x43,
	0x2d, 0xd6, 0x42, 0x24, 0x05, 0x25, 0x39, 0x47, 0xb1, 0x4f, 0x8a, 0x56, 0x3d, 0xa2, 0xaf, 0x35,
	0xd3, 0x94, 0x16, 0x95, 0x70, 0xaf, 0xbc, 0x83, 0x19, 0x72, 0xd2, 0x17, 0x4f, 0xd3, 0xcb, 0x91,
	0x4f, 0x2e, 0x13, 0x9e, 0x2d, 0x8f, 0xbd, 0xc9, 0x6b, 0x91, 0xf2, 0x5c, 0x26, 0x71, 0x01, 0x7c,
	0x50, 0x04, 0xb0, 0x0b, 0x14, 0x84, 0x79, 0x61, 0x61, 0x35, 0x18, 0x09, 0x24, 0x82, 0xe9, 0xff,
	0x09, 0xc2, 0xe1, 0xb6, 0x05, 0xe2, 0x2e, 0xb1, 0xf9, 0x04, 0x07, 0x99, 0x4f, 0x46, 0x89, 0xd2,
	0x59, 0x6d, 0x5b, 0xc5, 0xfe, 0xc3, 0xac, 0xe2, 0x16, 0x1c, 0xf2, 0x20, 0x45, 0x33, 0x15, 0x20,
	0x99, 0xe9, 0x79, 0xff, 0x1c, 0xc8, 0x75, 0x1c, 0xec, 0x4d, 0x6f, 0x21, 0x65, 0xbb, 0x6a, 0x75,
	0x63, 0x53, 0x53, 0x40, 0x8a, 0x36, 0x51, 0xa7, 0xe9, 0xbf, 0xf2, 0xa1, 0x23, 0x5d, 0xf9, 0xf0,
	0xe1, 0x57, 0x7e, 0xe0, 0xe9, 0x56, 0x9e, 0x33, 0x60, 0x42, 0x66, 0x38, 0xcd, 0xb9, 0x20, 0x60,
	0x84, 0xcc, 0x95, 0x67, 0x46, 0x7c, 0x8c, 0xd3, 0x1c, 0x96, 0x5b, 0x1f, 0x13, 0x26, 0x24, 0x27,
	0x64, 0x85, 0xbc, 0x50, 0x10, 0x2e, 0xf5, 0xf2, 0xb8, 0x10, 0x63, 0x43, 0x42, 0x84, 0xd9, 0x63,
	0xbc, 0xde, 0xbf, 0x03, 0x98, 0x74, 0x3d, 0xce, 0xe5, 0xd5, 0x3e, 0x1f, 0x9f, 0xbb, 0x0e, 0xe3,
	0x24, 0xd7, 0x6b, 0x32, 0x7f, 0x01, 0xdf, 0xcc, 0x9b, 0x26, 0x84, 0xa4, 0xd7, 0x4e, 0x8f, 0xa5,
	0x98, 0xe1, 0xfd, 0x93, 0x84, 0x20, 0x99, 0x94, 0xf4, 0xff, 0x02, 0x38, 0xee, 0x0e, 0xf0, 0x2a,
	0x15, 0x66, 0x47, 0xe3, 0xe7, 0x34, 0xcc, 0x4d, 0x78, 0x82, 0x0e, 0x93, 0xf6, 0xb5, 0xe4, 0xa0,
	0x27, 0x36, 0xda, 0x99, 0xee, 0xa3, 0x6d, 0xed, 0x3e, 0x73, 0x88, 0x11, 0xa3, 0xf3, 0x95, 0x67,
	0xfc, 0x08, 0x8e, 0xba, 0xc3, 0x5f, 0x69, 0x98, 0x96, 0x5e, 0x23, 0x7f, 0x72, 0x6b, 0x70, 0xd0,
	0x99, 0xec, 0xad, 0x43, 0x50, 0x48, 0x43, 0x8f, 0xee, 0x87, 0x88, 0xde, 0x83, 0xc7, 0x00, 0x48,
	0x11, 0x36, 0xeb, 0x5b, 0xe9, 0xff, 0x0e, 0xc0, 0x41, 0xb7, 0x1d, 0xee, 0x6d, 0x38, 0x64, 0x12,
	0x1f, 0x2e, 0x11, 0x01, 0x66, 0x7f, 0xe1, 0x30, 0x31, 0xd0, 0xdc, 0x01, 0x71, 0xd0, 0x52, 0x6b,
	0xb4, 0xe7, 0x32, 0x4e, 0x1b, 0x9c, 0xb9, 0x23, 0xe6, 0xe9, 0x51, 0x73, 0xe9, 0xb0, 0xe6, 0x1d,
	0x6f, 0x29, 0xf6, 0x49, 0x31, 0xc7, 0x22, 0x6d, 0xc2, 0x82, 0x27, 0xda, 0x16, 0x87, 0xb5, 0x74,
	0xb8, 0xdb, 0x89, 0x2e, 0x7e, 0x57, 0xec, 0x93, 0x46, 0x2a, 0x2d, 0x4f, 0x68, 0xab, 0x26, 0x1c,
	0x29, 0x93, 0x15, 0xa2, 0x8d, 0x95, 0xe8, 0x8d, 0x1d, 0x3b, 0x07, 0xbf, 0x74, 0xd8, 0x36, 0x3d,
	0x8b, 0xed, 0xf2, 0xc6, 0xc9, 0x72, 0xf3, 0x21, 0x5d, 0xd7, 0xe5, 0xe4, 0x87, 0x36, 0x88, 0xc1,
	0x28, 0x0c, 0x93, 0x87, 0x26, 0x07, 0xe6, 0xc5, 0x53, 0x30, 0xec, 0x21, 0x52, 0x9d, 0x4b, 0x21,
	0xe7, 0x06, 0x81, 0x5d, 0x0c, 0x3d, 0x8c, 0xc3, 0x91, 0xb6, 0x1d, 0x8a, 0x2c, 0x7d, 0x77, 0x0e,
	0x07, 0x7c, 0xbe, 0x1c, 0x4e, 0xff, 0x6f, 0x89, 0xc3, 0x09, 0x7c, 0xde, 0x1c, 0x4e, 0xf0, 0x48,
	0x39, 0x9c, 0xd7, 0xe0, 0x78, 0x4d, 0xbe, 0x57, 0x6a, 0x9d, 0xd7, 0x92, 0xa9, 0xbc, 0x4b, 0x8f,
	0xe9, 0x98, 0x38, 0xfe, 0x73, 0x1b, 0xf4, 0x2f, 0x38, 0x40, 0x36, 0x4a, 0x8e, 0xe6, 0x0b, 0xfd,
	0xa9, 0x6f, 0x49, 0xa3, 0x35, 0xf9, 0x9e, 0xe4, 0x9d, 0xbe, 0x0d, 0xe5, 0x5d, 0xc4, 0x5d, 0x6d,
	0x07, 0xa4, 0xe1, 0x03, 0x01, 0xd2, 0x36, 0x20, 0xfa, 0x35, 0x42, 0x29, 0xd7, 0x0d, 0x64, 0x9a,
	0x8a, 0xae, 0xb1, 0x53, 0x8e, 0x1d, 0xdb, 0x2f, 0x76, 0x44, 0x4a, 0xf3, 0x3a, 0x3c, 0xb3, 0xd2,
	0xd4, 0x22, 0x66, 0x93, 0x1e, 0x33, 0xf4, 0xfe, 0x90, 0xdb, 0x0b, 0xc2, 0x18, 0x8b, 0x43, 0x84,
	0x73, 0x77, 0x7c, 0x84, 0xe3, 0x25, 0xbd, 0x71, 0xc0, 0x08, 0xf4, 0x89, 0x8a, 0x0c, 0x0d, 0xc6,
	0x6b, 0xc4, 0x1c, 0xa5, 0x6a, 0xff, 0x2d, 0xe0, 0x2c, 0xfa, 0xd8, 0x07, 0x60, 0x24, 0x9d, 0xbc,
	0x30, 0x2c, 0xc6, 0xf0, 0x11, 0x3e, 0x2f, 0xe4, 0xe7, 0xe6, 0x2e, 0xce, 0x2f, 0x2d, 0x35, 0xa9,
	0x5b, 0xfc, 0x2b, 0xfe, 0x01, 0x88, 0x5e, 0x18, 0x34, 0x06, 0x52, 0x0f, 0x1e, 0x80, 0x1f, 0x00,
	0xb0, 0xff, 0xd1, 0x4f, 0x02, 0x3f, 0x01, 0xef, 0x3d, 0x06, 0xbb, 0x80, 0xfb, 0x67, 0xf0, 0x6b,
	0x1b, 0xfc, 0x23, 0x28, 0xde, 0xbc, 0xb9, 0xce, 0x93, 0x16, 0xf8, 0xb2, 0x5e, 0x41, 0x3c, 0x81,
	0x8f, 0x3c, 0x31, 0xc9, 0xeb, 0x06, 0xbf, 0x89, 0xac, 0xbb, 0x08, 0x69, 0x7c, 0x7e, 0x6e, 0x8e,
	0x97, 0xb5, 0x0a, 0x3f, 0xbf, 0xb4, 0x94, 0xe1, 0xaf, 0x6d, 0x67, 0xf8, 0x5b, 0x44, 0xae, 0xc0,
	0xbf, 0xc4, 0x17, 0xee, 0xdd, 0xc3, 0x92, 0xb2, 0xaa, 0xf2, 0x85, 0xb9, 0xb9, 0x8b, 0x85, 0xa5,
	0x25, 0x1e, 0xb9, 0xf6, 0x4c, 0x81, 0x9f, 0xe7, 0x5f, 0xe2, 0xe7, 0x9b, 0x32, 0xf3, 0xb4, 0x9f,
	0x5e, 0x99, 0x0c, 0xff, 0x55, 0xbd, 0xc1, 0x97, 0x65, 0x8d, 0x97, 0x55, 0x53, 0xe7, 0x29, 0xad,
	0xbe, 0xc3, 0xcb, 0x1a, 0x8f, 0xee, 0xc9, 0x65, 0xcb, 0x23, 0xca, 0xab, 0xca, 0x6d, 0xc4, 0x17,
	0xe6, 0x0a, 0x19, 0x3c, 0x94, 0xd1, 0xf7, 0x1e, 0x83, 0x04, 0x87, 0x21, 0x1d, 0xa4, 0x23, 0x58,
	0xd1, 0x2b, 0x08, 0xbf, 0x80, 0xef, 0x3d, 0x06, 0x61, 0x2e, 0xf8, 0x53, 0x1b, 0xf4, 0x35, 0x09,
	0x6c, 0x32, 0xfa, 0x2b, 0xef, 0x3d, 0x06, 0x2f, 0x4d, 0x7e, 0xe9, 0xd7, 0x36, 0x58, 0xdc, 0xb0,
	0x30, 0xbe, 0xe2, 0x0d, 0x84, 0x17, 0x12, 0x69, 0x16, 0xfe, 0x83, 0xb6, 0xe4, 0x38, 0xb5, 0xc0,
	0x37, 0xcc, 0x86, 0xac, 0xaa, 0x3b, 0xbc, 0xcc, 0x57, 0xad, 0x9a, 0x4a, 0xba, 0x80, 0xad, 0x9c,
	0x7a, 0xef, 0x31, 0x98, 0x98, 0x1c, 0xdf, 0xb7, 0xc1, 0x08, 0x6d, 0xd8, 0x85, 0xcd, 0xa2, 0x5e,
	0xd9, 0xc1, 0x12, 0xe3, 0xef, 0x3d, 0x06, 0x23, 0x93, 0xc9, 0x8e, 0x8a, 0x07, 0xb7, 0x77, 0x93,
	0xb8, 0x77, 0x41, 0xcf, 0x9f, 0xe4, 0x1a, 0x60, 0xa8, 0xec, 0x59, 0x71, 0xae, 0x04, 0x87, 0xdf,
	0x91, 0xef, 0xc8, 0x66, 0xd9, 0x50, 0xea, 0x16, 0x29, 0xc7, 0x20, 0xb7, 0x6c, 0xd1, 0xdc, 0x5c,
	0x2f, 0x5f, 0x5d, 0x95, 0xef, 0xc8, 0x1b, 0x44, 0xc5, 0x4b, 0xcc, 0x7c, 0x8c, 0xcd, 0xc7, 0x9b,
	0xe6, 0xae, 0x6b, 0x5b, 0x3a, 0xf7, 0x0a, 0x0c, 0xbc, 0x73, 0xd7, 0x22, 0x3c, 0xf5, 0xc1, 0x29,
	0xcf, 0x77, 0xee, 0x5a, 0xc4, 0x18, 0xfe, 0xc1, 0xbd, 0x0c, 0x87, 0x94, 0x8a, 0x8a, 0x4a, 0x0e,
	0x51, 0x15, 0x7d, 0x02, 0x51, 0xf5, 0xd1, 0xdf, 0x70, 0x52, 0x14, 0x6b, 0xdc, 0x64, 0x64, 0xd5,
	0x4b, 0xf0, 0xa4, 0x93, 0x4b, 0x3b, 0x0c, 0x1c, 0xa2, 0x2c, 0x8f, 0xbc, 0x8d, 0x4c, 0xca, 0xf9,
	0x4a, 0x29, 0x26, 0xc2, 0x20, 0x27, 0x99, 0x9e, 0x75, 0xfc, 0x7e, 0xf2, 0x65, 0x98, 0xec, 0x08,
	0x12, 0x2f, 0x49, 0x12, 0x7b, 0x12, 0x49, 0x62, 0x7c, 0x68, 0x03, 0x0d, 0x9e, 0x84, 0x71, 0xba,
	0xd9, 0xb8, 0xcc, 0xc4, 0x20, 0x3b, 0xb7, 0x84, 0x79, 0x78, 0x1e, 0xf2, 0x74, 0x26, 0x1b, 0x06,
	0xe2, 0xdb, 0xd6, 0xdb, 0x11, 0x0f, 0x5d, 0x12, 0xf8, 0x6c, 0xbe, 0x07, 0xd1, 0xb1, 0x20, 0x2c,
	0x3a, 0x1c, 0x4a, 0xfa, 0xc1, 0x10, 0x1c, 0x65, 0x6c, 0xad, 0x6c, 0xa2, 0xca, 0x4a, 0x55, 0x56,
	0x55, 0xa4, 0x6d, 0x23, 0xee, 0x1b, 0xf0, 0xb4, 0x33, 0x09, 0xef, 0x98, 0xa5, 0xb2, 0xf3, 0xdc,
	0x5b, 0xe8, 0xd0, 0xfb, 0xfe, 0x6b, 0x8a, 0xa9, 0xaf, 0x9a, 0xae, 0x51, 0x4f, 0x25, 0x83, 0x09,
	0xc7, 0xbb, 0x99, 0xa5, 0x19, 0x4a, 0xfe, 0x49, 0x7e, 0x45, 0x7d, 0xc7, 0xb5, 0xed, 0xe1, 0x2e,
	0xfb, 0xa4, 0x13, 0xef, 0xf8, 0x36, 0xba, 0x0d, 0xcf, 0x3a, 0x63, 0x2a, 0xcb, 0x75, 0xab, 0x5c,
	0x95, 0xfd, 0x7b, 0x10, 0xea, 0x79, 0x65, 0x74, 0x86, 0xd9, 0x58, 0xa1, 0x26, 0xfc, 0x1a, 0x7a,
	0x17, 0x4e, 0xf5, 0x6c, 0x20, 0xfc, 0xe4, 0xd0, 0x69, 0xb7, 0xee, 0x19, 0x1f, 0x90, 0x26, 0xcb,
	0xdd, 0xdb, 0x56, 0xe0, 0x39, 0x67, 0x90, 0x16, 0xaa, 0xd5, 0x75, 0x43, 0x36, 0x76, 0x4a, 0x9b,
	0xaa, 0x5e, 0xbe, 0xad, 0x68, 0xdb, 0xde, 0x4e, 0xf4, 0xb8, 0x67, 0x2f, 0xf6, 0x4b, 0x69, 0x66,
	0xe4, 0xa6, 0x63, 0x43, 0x64, 0x26, 0x3c, 0x4d, 0x35, 0xe0, 0x78, 0xb3, 0x89, 0x86, 0x89, 0x0c,
	0xb7, 0x1d, 0xb6, 0x39, 0xcc, 0xf7, 0x1a, 0xa1, 0x6b, 0xf9, 0x4d, 0x13, 0x19, 0x8e, 0x75, 0xcf,
	0x30, 0xfb, 0xa5, 0x13, 0x96, 0x9f, 0x08, 0x77, 0x0b, 0x9e, 0x74, 0x46, 0x58, 0x53, 0x2c, 0x65,
	0x9b, 0x5e, 0xcb, 0x98, 0xc8, 0xc2, 0xfb, 0xa6, 0xd9, 0xeb, 0x26, 0xbe, 0x18, 0x90, 0x26, 0x98,
	0xea, 0x9a, 0xab, 0xb9, 0xc1, 0x14, 0xb9, 0x3f, 0x80, 0x13, 0x35, 0x59, 0x55, 0xca, 0x8a, 0xde,
	0x30, 0xe9, 0x70, 0x9a, 0xe6, 0x53, 0x43, 0x07, 0x06, 0x18, 0x53, 0x8f, 0xee, 0x77, 0xb7, 0x53,
	0x0c, 0x48, 0xe3, 0xee, 0x4b, 0x3c, 0xaa, 0x66, 0x3f, 0xb8, 0x25, 0x38, 0xa4, 0xe9, 0x4d, 0x87,
	0x49, 0xc5, 0x7b, 0xde, 0x4b, 0x44, 0x35, 0xbd, 0x19, 0xad, 0x1b, 0x70, 0x52, 0x56, 0xef, 0xca,
	0x3b, 0x66, 0x89, 0xdd, 0x8f, 0x78, 0x83, 0xab, 0xd7, 0xf5, 0x53, 0x31, 0x28, 0x8d, 0x53, 0xcd,
	0x6b, 0x44, 0xd1, 0x13, 0xad, 0x78, 0x0b, 0x68, 0x35, 0xda, 0xe1, 0xd3, 0xec, 0x86, 0xaa, 0x9b,
	0xe5, 0x29, 0xaf, 0xe5, 0x76, 0x87, 0xe6, 0xde, 0x84, 0x83, 0x46, 0x43, 0x45, 0x25, 0x55, 0x31,
	0x2d, 0x76, 0x97, 0x74, 0x50, 0x00, 0xe4, 0x1a, 0x91, 0x1a, 0x2a, 0xba, 0xa1, 0x98, 0x96, 0x14,
	0x31, 0xd8, 0x2f, 0x31, 0x0b, 0xa7, 0xbb, 0xec, 0x2c, 0x5d, 0x69, 0xdc, 0x05, 0xf8, 0x42, 0xaf,
	0x70, 0xf5, 0xea, 0x85, 0xbc, 0x05, 0x19, 0x5f, 0x82, 0x67, 0x7b, 0x86, 0x98, 0xb7, 0x9a, 0x23,
	0xc2, 0x8a, 0x33, 0x02, 0x97, 0x84, 0x25, 0x0c, 0xc3, 0xc5, 0x25, 0xc8, 0x77, 0xf5, 0x12, 0x47,
	0xf1, 0xc4, 0xae, 0x0d, 0xa2, 0x7b, 0x36, 0x80, 0xfb, 0x36, 0x08, 0x11, 0xc6, 0x9b, 0xa8, 0xce,
	0xc0, 0x44, 0xb3, 0x9f, 0x4c, 0x74, 0x74, 0xd7, 0x06, 0xf1, 0x3d, 0x1b, 0xc4, 0x08, 0xab, 0x5c,
	0x10, 0x08, 0xb1, 0xec, 0xb2, 0xac, 0x6e, 0x15, 0xc8, 0x6a, 0x30, 0x02, 0x13, 0xd1, 0xd5, 0x60,
	0x24, 0x96, 0x88, 0xaf, 0x06, 0x23, 0xc9, 0x04, 0x97, 0xfe, 0x53, 0x00, 0x63, 0x2d, 0x13, 0xca,
	0x2d, 0xc3, 0x48, 0x0d, 0x59, 0x72, 0x45, 0xb6, 0xe4, 0x2e, 0xcc, 0xc2, 0x1a, 0x32, 0x4d, 0x79,
	0x1b, 0xad, 0x21, 0x4b, 0x26, 0x49, 0xa8, 0x2b, 0xcf, 0xbd, 0x06, 0x83, 0x38, 0x69, 0x62, 0x87,
	0x43, 0xa1, 0x4d, 0xcf, 0xa7, 0xc0, 0xb5, 0x75, 0x31, 0x37, 0xea, 0xa8, 0xcc, 0x68, 0x01, 0x62,
	0x27, 0xfd, 0xfb, 0x30, 0xd9, 0xb1, 0xda, 0xdc, 0xb7, 0x60, 0x88, 0x5c, 0x50, 0xb2, 0xd2, 0xc8,
	0xc2, 0xd3, 0xb8, 0x8d, 0x38, 0xea, 0xc2, 0x88, 0x57, 0x9c, 0x5f, 0x73, 0x40, 0xa2, 0x86, 0xe9,
	0xc4, 0xa5, 0x7f, 0xdc, 0x0f, 0x47, 0x28, 0x84, 0x5f, 0x51, 0x15, 0xa4, 0x59, 0x1b, 0x46, 0x99,
	0x4c, 0xd0, 0x79, 0x38, 0xa8, 0xd4, 0x59, 0xa1, 0x01, 0x41, 0xb7, 0x83, 0x22, 0x64, 0x65, 0x01,
	0x9f, 0x92, 0x03, 0x28, 0xa2, 0xd4, 0x69, 0x45, 0x01, 0x27, 0xc0, 0x41, 0xd9, 0x2c, 0x69, 0x8d,
	0xda, 0x26, 0xab, 0xd6, 0x8b, 0x89, 0x31, 0x52, 0x6b, 0x7a, 0x21, 0x9c, 0xfa, 0xb3, 0x1f, 0xa7,
	0x66, 0x88, 0xb4, 0x6c, 0xbe, 0x46, 0x04, 0xb8, 0x35, 0x38, 0x8a, 0xee, 0xd5, 0x15, 0x83, 0x7a,
	0x81, 0x5b, 0xdf, 0xcc, 0xb6, 0xd3, 0xc9, 0x0c, 0xad, 0x80, 0xce, 0x38, 0x15, 0xd0, 0x99, 0x9b,
	0x8e, 0x84, 0x34, 0xd2, 0xd4, 0x73, 0x1f, 0xb6, 0x2c, 0x24, 0x3c, 0xdc, 0x42, 0x2e, 0x0f, 0x7e,
	0x72, 0x39, 0x9c, 0x9d, 0x13, 0xf2, 0xc2, 0x92, 0xf8, 0x45, 0x38, 0x5a, 0x26, 0xe3, 0x2f, 0x99,
	0x7a, 0xc3, 0x28, 0xb7, 0x5c, 0x76, 0x38, 0x2c, 0x70, 0xa0, 0x20, 0xcc, 0xbb, 0xee, 0xd6, 0x9f,
	0x08, 0x30, 0x3e, 0xf8, 0x6f, 0x01, 0x1c, 0xa1, 0x59, 0xd1, 0xf5, 0xfa, 0x15, 0x55, 0xd5, 0xef,
	0xa2, 0x0a, 0x59, 0xc1, 0x3f, 0x01, 0xf0, 0x54, 0x4b, 0x75, 0xb1, 0x4c, 0x5f, 0xb2, 0x49, 0x45,
	0x66, 0x6a, 0xec, 0xc0, 0x99, 0xa0, 0xf0, 0xe8, 0x7e, 0xcc, 0x5d, 0x0e, 0x7c, 0x0e, 0xe0, 0x4c,
	0xef, 0xc1, 0x63, 0x0f, 0x20, 0x0d, 0x7a, 0x4a, 0x61, 0x27, 0x71, 0xb3, 0x37, 0x68, 0xab, 0xac,
	0x47, 0xeb, 0xac, 0xcd, 0xf4, 0x77, 0x43, 0x70, 0x44, 0x72, 0x5e, 0x37, 0x53, 0x56, 0x6e, 0x0d,
	0x0e, 0x79, 0x3b, 0xcb, 0x82, 0xe2, 0x42, 0x3b, 0xcf, 0xe5, 0x11, 0xc9, 0xb8, 0x66, 0x08, 0x3a,
	0x91, 0xa2, 0x9e, 0x56, 0xb9, 0x15, 0xc8, 0x69, 0x7a, 0x49, 0xa9, 0xbb, 0x83, 0x26, 0x5b, 0x60,
	0xa0, 0x67, 0x3a, 0x35, 0xac, 0xe9, 0xad, 0x33, 0xb8, 0x01, 0x87, 0xdb, 0x2d, 0x50, 0x9e, 0xc5,
	0x9f, 0xe2, 0xa6, 0x63, 0xa4, 0x40, 0xc3, 0x53, 0x38, 0x14, 0x53, 0x5a, 0x8c, 0x7e, 0x1b, 0x8e,
	0x31, 0xe0, 0xd8, 0x6e, 0x9b, 0xe6, 0x44, 0xcb, 0x07, 0x8d, 0xb4, 0xce, 0x25, 0x2f, 0xf6, 0x49,
	0x8c, 0x1c, 0x6a, 0x1d, 0xc7, 0x22, 0x8c, 0x6a, 0x3a, 0xdd, 0x10, 0x14, 0x64, 0xb2, 0x73, 0xb6,
	0x5b, 0xee, 0x05, 0x35, 0x7d, 0x9d, 0x49, 0x72, 0x6f, 0xc0, 0x88, 0xab, 0x15, 0xeb, 0x92, 0x33,
	0xe2, 0xde, 0xf9, 0x14, 0xb1, 0x67, 0x9a, 0x05, 0x54, 0x45, 0x20, 0xb9, 0x66, 0x96, 0x67, 0x3e,
	0xb4, 0xc1, 0x59, 0x98, 0x86, 0x29, 0xbc, 0x7a, 0x3c, 0x59, 0x2e, 0x37, 0xdf, 0xa6, 0x67, 0x74,
	0x18, 0xe7, 0xe2, 0xd9, 0xac, 0xf8, 0x22, 0x1c, 0x6b, 0x9b, 0x21, 0xef, 0xed, 0x18, 0x46, 0xc6,
	0xfd, 0xe4, 0x76, 0x0c, 0x67, 0xed, 0x62, 0x1a, 0xc6, 0x3a, 0x2f, 0xe3, 0x86, 0xf6, 0x6c, 0x10,
	0x25, 0xfb, 0x7a, 0x4e, 0xc8, 0xe6, 0xdd, 0xa0, 0x89, 0x26, 0x86, 0xd2, 0xdf, 0x05, 0x30, 0xb9,
	0x41, 0x77, 0xca, 0x66, 0x47, 0x39, 0xdd, 0x33, 0x5e, 0x70, 0xe0, 0xe0, 0x98, 0x7d, 0x74, 0x3f,
	0xde, 0xba, 0xeb, 0xfa, 0x15, 0x88, 0x7b, 0x78, 0x14, 0xb7, 0x91, 0xf4, 0x1f, 0x9d, 0x85, 0xf1,
	0x2f, 0xab, 0xfa, 0xa6, 0xac, 0xe2, 0x5d, 0x99, 0x04, 0x42, 0x05, 0x0e, 0x54, 0xf4, 0x9a, 0xac,
	0x68, 0xb4, 0x0b, 0x83, 0xe2, 0x2a, 0xd6, 0x84, 0xef, 0x83, 0x81, 0x34, 0x2d, 0x89, 0xc2, 0x7f,
	0x0e, 0xbe, 0x0f, 0xc2, 0xe9, 0xa0, 0xd1, 0x9f, 0x00, 0xde, 0x97, 0xdf, 0xef, 0x07, 0x4f, 0x68,
	0xd9, 0x31, 0xcd, 0xad, 0xc2, 0x20, 0x76, 0xa9, 0x2e, 0x67, 0x48, 0x37, 0x9f, 0x6b, 0xa9, 0xc6,
	0x2d, 0xf6, 0x49, 0xc4, 0x06, 0xb7, 0x06, 0x43, 0xf8, 0x5f, 0x07, 0x56, 0xcc, 0x3f, 0x8d, 0x31,
	0xb3, 0xd8, 0x27, 0x51, 0x2b, 0xdc, 0xd7, 0xe1, 0x88, 0x5c, 0xb9, 0x83, 0x0c, 0x4b, 0x31, 0x51,
	0x49, 0xd7, 0x4a, 0xf5, 0xc6, 0xa6, 0xaa, 0x94, 0x59, 0xe4, 0x9d, 0xf5, 0x35, 0x7e, 0xc5, 0x91,
	0x5f, 0x27, 0xb2, 0x6e, 0x35, 0x68, 0xd2, 0x35, 0xf4, 0xba, 0x46, 0x5f, 0x71, 0x6f, 0x93, 0xdb,
	0x17, 0x66, 0x9d, 0x06, 0x0b, 0x0b, 0xbc, 0x27, 0x98, 0xa6, 0xf1, 0xd6, 0x2c, 0xb8, 0x29, 0xd2,
	0x6b, 0x16, 0xef, 0x4b, 0xce, 0x84, 0x23, 0x6e, 0x61, 0x09, 0x61, 0x67, 0xe9, 0xbd, 0x58, 0xf8,
	0xd9, 0xee, 0xc5, 0xbc, 0x75, 0x9f, 0x49, 0xa7, 0x08, 0x05, 0x9b, 0xa7, 0xb7, 0x63, 0xdf, 0x81,
	0x61, 0xd2, 0x98, 0x99, 0x1a, 0x20, 0xed, 0xcc, 0x1d, 0x96, 0x04, 0x16, 0x73, 0xce, 0x98, 0x3a,
	0x8f, 0xeb, 0x14, 0xe1, 0x51, 0xc2, 0xef, 0x3f, 0x06, 0xfd, 0x89, 0xe6, 0xcf, 0x08, 0x90, 0x58,
	0x9b, 0xed, 0x05, 0x4b, 0x91, 0xa7, 0x2b, 0x58, 0x62, 0xd5, 0x58, 0x83, 0x4f, 0x55, 0x8d, 0x15,
	0xe8, 0xac, 0xc6, 0x82, 0xcf, 0x50, 0x8d, 0x15, 0x68, 0x56, 0x63, 0xb5, 0xd5, 0x98, 0x3d, 0xb9,
	0x00, 0x39, 0xd0, 0x52, 0x63, 0xf6, 0x2a, 0x4c, 0xb0, 0x1a, 0x11, 0xd7, 0x51, 0x7a, 0x6d, 0xbe,
	0xae, 0xdb, 0xc6, 0x49, 0x8d, 0x88, 0xeb, 0x79, 0xdc, 0xd7, 0xe1, 0x69, 0x9f, 0x88, 0x70, 0x19,
	0x94, 0x3b, 0x4a, 0x9d, 0xed, 0xce, 0xdd, 0xf6, 0xf4, 0x93, 0x1d, 0x71, 0xc0, 0xb8, 0x95, 0x5b,
	0x4a, 0x9d, 0x7b, 0x11, 0x0e, 0xc9, 0x95, 0x8a, 0x5b, 0x7c, 0x47, 0x2a, 0xd9, 0x22, 0x74, 0x9d,
	0x48, 0xf1, 0x5d, 0x54, 0xae, 0x54, 0x9c, 0xc2, 0x3b, 0x6e, 0x13, 0x0e, 0xb5, 0xe0, 0x1e, 0xee,
	0xe9, 0x99, 0x84, 0x66, 0x24, 0x05, 0xa5, 0xa8, 0x87, 0x4d, 0xe0, 0x10, 0x8c, 0xd6, 0x74, 0x03,
	0xb1, 0xcb, 0xd1, 0xd4, 0xc8, 0xa1, 0x8e, 0x45, 0x1f, 0x62, 0xd5, 0xeb, 0x73, 0xd8, 0x30, 0x7d,
	0x85, 0x83, 0x95, 0x60, 0x02, 0xa5, 0x82, 0x34, 0xf6, 0xd5, 0x0e, 0x6e, 0x6e, 0xf4, 0xc0, 0xae,
	0x33, 0xfd, 0xe8, 0xbe, 0x9f, 0x05, 0x77, 0xe2, 0x38, 0xfc, 0xf2, 0x7a, 0xcb, 0x3b, 0x6e, 0x15,
	0x3a, 0x57, 0xc2, 0xa5, 0xe6, 0xa1, 0x99, 0x1a, 0x7b, 0xa2, 0x53, 0x84, 0xdc, 0x1a, 0x29, 0x37,
	0xeb, 0xe1, 0x10, 0x84, 0x1e, 0x1b, 0xe3, 0x87, 0x9a, 0x26, 0x9f, 0x14, 0xcc, 0xb3, 0x20, 0x21,
	0x69, 0xd0, 0x4d, 0xa6, 0x38, 0x05, 0x26, 0x3b, 0x51, 0x69, 0xea, 0x29, 0xe9, 0x15, 0xef, 0xa2,
	0x27, 0xda, 0x29, 0x16, 0xee, 0xe5, 0x36, 0x78, 0x3e, 0xf9, 0xc4, 0x79, 0x69, 0x03, 0xe9, 0x55,
	0x38, 0x4c, 0x0e, 0x91, 0x12, 0xa9, 0x17, 0x28, 0x23, 0xc3, 0x62, 0x25, 0x79, 0x97, 0x9f, 0xea,
	0x50, 0x72, 0xbf, 0x37, 0xc1, 0x69, 0x5c, 0xd5, 0xfb, 0x84, 0x13, 0xfd, 0x6a, 0x12, 0xa6, 0x7a,
	0xf2, 0x3d, 0x1d, 0x45, 0x08, 0xb9, 0xb6, 0x22, 0x84, 0x53, 0x04, 0xe6, 0xb4, 0x15, 0x2f, 0xf4,
	0xb7, 0x56, 0x23, 0x14, 0xbb, 0x54, 0x23, 0x4c, 0xf7, 0x6c, 0xda, 0xaf, 0x0e, 0xe1, 0x7b, 0xa0,
	0x17, 0x19, 0xc3, 0x1f, 0x38, 0x0c, 0xce, 0xf5, 0x22, 0x63, 0x7e, 0x76, 0x1f, 0x7c, 0x6c, 0x03,
	0x90, 0x02, 0xdd, 0x39, 0x99, 0x77, 0xe1, 0x08, 0xde, 0x80, 0xd1, 0xbd, 0xb2, 0xda, 0x20, 0x17,
	0x35, 0x14, 0x77, 0x9e, 0x21, 0x87, 0x99, 0xd0, 0xd6, 0x01, 0x96, 0x5c, 0xb2, 0xba, 0x24, 0x79,
	0xeb, 0x9a, 0xa3, 0x45, 0xf0, 0xe6, 0x54, 0xf7, 0x83, 0x6c, 0x0e, 0x48, 0xc9, 0xbb, 0x6d, 0xf2,
	0x26, 0xf7, 0x10, 0xc0, 0x61, 0xc2, 0x2a, 0xa0, 0x4a, 0x89, 0xe2, 0x2f, 0x33, 0x95, 0x26, 0x0d,
	0x1f, 0x34, 0x90, 0x7c, 0xb0, 0xab, 0x78, 0xca, 0xdb, 0x8d, 0xf0, 0xfb, 0x20, 0x90, 0x68, 0x5e,
	0xa8, 0xcd, 0x01, 0x29, 0xce, 0x5a, 0xa4, 0x4a, 0xb4, 0x13, 0xee, 0x67, 0x94, 0xac, 0x13, 0x2f,
	0x3c, 0xf7, 0x4e, 0x38, 0x1f, 0x5d, 0xb2, 0x4e, 0x7c, 0x03, 0x9e, 0x6e, 0xc9, 0x61, 0x15, 0x64,
	0x96, 0xb6, 0x0c, 0xbd, 0x46, 0x3e, 0xda, 0x31, 0xeb, 0x72, 0x19, 0xa5, 0xce, 0xf7, 0xac, 0x2a,
	0x9d, 0x32, 0x3d, 0xe9, 0xb4, 0x82, 0xcc, 0x57, 0x0d, 0xbd, 0xf6, 0x9a, 0xa3, 0xcb, 0xbd, 0x0a,
	0x47, 0x34, 0xbd, 0xd4, 0xde, 0x42, 0xea, 0x42, 0x4f, 0x93, 0x49, 0x4d, 0xdf, 0x68, 0x35, 0xca,
	0xdd, 0x83, 0xe3, 0x72, 0xd9, 0x52, 0xee, 0xa0, 0x4e, 0x5b, 0x2f, 0x1e, 0x8a, 0xdf, 0xea, 0x48,
	0xfe, 0x19, 0x25, 0x1a, 0x96, 0x4e, 0xd0, 0x06, 0xda, 0x5b, 0x5e, 0x84, 0x51, 0x43, 0x6f, 0x68,
	0x95, 0x92, 0xa1, 0x6f, 0x2a, 0x5a, 0xea, 0x62, 0xcf, 0x82, 0x56, 0x48, 0x44, 0x25, 0x2c, 0xc9,
	0x2d, 0xc1, 0x21, 0x15, 0xc9, 0xa6, 0x55, 0xa2, 0x76, 0x53, 0x99, 0x9e, 0x9a, 0x51, 0x22, 0x7b,
	0x85, 0x88, 0x72, 0x19, 0x18, 0x36, 0x64, 0xad, 0xa2, 0xd7, 0x52, 0xb3, 0x3d, 0x95, 0x98, 0x14,
	0xde, 0x1c, 0x18, 0x7d, 0xa0, 0xd4, 0x4b, 0xa6, 0xa5, 0x94, 0x6f, 0x2b, 0x1a, 0x32, 0xcd, 0xd4,
	0x5c, 0x4f, 0x6d, 0x8e, 0xea, 0x5c, 0xaf, 0x6f, 0xb8, 0x1a, 0xdc, 0x4d, 0x98, 0x2c, 0xeb, 0xfa,
	0x6d, 0x05, 0x79, 0xcd, 0x64, 0x89, 0x99, 0x73, 0xbe, 0xb5, 0x27, 0x2b, 0x44, 0xfa, 0x55, 0xdd,
	0x28, 0xca, 0x66, 0x55, 0xd1, 0xb6, 0x8b, 0x03, 0x52, 0x82, 0x5a, 0xf0, 0x58, 0xfd, 0x0a, 0x1c,
	0x24, 0x55, 0x8e, 0x55, 0xd9, 0xac, 0xa6, 0x72, 0xcf, 0xfa, 0x4d, 0xce, 0x80, 0x14, 0xc1, 0xd6,
	0xf0, 0x1b, 0xee, 0x3e, 0x1c, 0x63, 0xf8, 0x6f, 0x53, 0x36, 0x71, 0x1c, 0xb9, 0x67, 0x48, 0xfe,
	0x50, 0x95, 0x11, 0x7e, 0x17, 0x35, 0x2d, 0x87, 0xd6, 0x68, 0xdd, 0xef, 0x2a, 0xe7, 0x9b, 0x30,
	0x46, 0x3e, 0xf8, 0x56, 0x34, 0x0b, 0x19, 0x9a, 0xac, 0xa6, 0x3e, 0x1e, 0x38, 0xf0, 0xfe, 0x39,
	0xfa, 0xe8, 0x7e, 0xab, 0x32, 0xb9, 0x6f, 0x1b, 0xc2, 0x8f, 0xae, 0xb3, 0x27, 0xdc, 0x14, 0x1c,
	0x24, 0xbb, 0x3d, 0xf9, 0x82, 0xee, 0x57, 0xe4, 0xab, 0x50, 0x29, 0x82, 0x9f, 0x90, 0x0f, 0xe5,
	0x8a, 0x30, 0xe2, 0x7c, 0xc1, 0x9d, 0xfa, 0xf5, 0x80, 0xef, 0xbe, 0xe9, 0xfb, 0xb9, 0x77, 0xe6,
	0xaa, 0x66, 0x5e, 0xd7, 0xb6, 0x74, 0x69, 0xa0, 0x42, 0x7f, 0x70, 0x2b, 0x30, 0x64, 0x5a, 0xb2,
	0x85, 0x52, 0xff, 0x31, 0x40, 0xaa, 0x95, 0x7a, 0x99, 0xc9, 0xdc, 0xa2, 0x7f, 0xe0, 0x33, 0x65,
	0x03, 0x2b, 0x49, 0x54, 0x97, 0x7b, 0x1b, 0x0e, 0xbb, 0xc7, 0x6f, 0x89, 0x9a, 0xfb, 0x4f, 0x6a,
	0x2e, 0xd3, 0x33, 0x5f, 0x70, 0x3f, 0x9e, 0x56, 0x74, 0x8d, 0x18, 0x14, 0x31, 0xe2, 0x89, 0xc9,
	0xec, 0xc8, 0x25, 0x8f, 0xb8, 0x0d, 0x18, 0x6f, 0x1a, 0x27, 0x23, 0xfe, 0x84, 0x4e, 0x75, 0xcf,
	0xae, 0x3a, 0xc7, 0x36, 0x1e, 0x24, 0xad, 0x14, 0x90, 0x3d, 0x4f, 0x96, 0xff, 0x0b, 0x7c, 0x68,
	0x83, 0x8f, 0x01, 0x3c, 0x09, 0x47, 0x44, 0xd9, 0x54, 0xca, 0x6d, 0x8c, 0x44, 0x30, 0x2b, 0x64,
	0x0b, 0x70, 0x1a, 0x8e, 0xb1, 0xac, 0x99, 0xa7, 0xa0, 0x8d, 0xa7, 0xdf, 0x2a, 0x9a, 0x5c, 0x70,
	0x41, 0xc8, 0x67, 0xe1, 0x04, 0x2b, 0xa2, 0x32, 0xdb, 0xb4, 0xc1, 0x22, 0x1c, 0x87, 0xc9, 0x5b,
	0xd7, 0xd7, 0xdb, 0x9e, 0xf7, 0x67, 0xe7, 0xe1, 0x02, 0x1c, 0x73, 0x2a, 0xab, 0xdb, 0xde, 0x4e,
	0x15, 0xe6, 0x84, 0x4b, 0x42, 0x76, 0x41, 0xc8, 0xe7, 0x85, 0xdc, 0xbc, 0x40, 0xea, 0x93, 0x85,
	0x7c, 0x4e, 0xc8, 0x17, 0x84, 0xfc, 0x3c, 0x9c, 0xea, 0x5a, 0xe4, 0xdd, 0x5f, 0x28, 0xc0, 0xd3,
	0x70, 0xcc, 0x49, 0x83, 0xdb, 0xac, 0x86, 0xb2, 0x8b, 0x42, 0x76, 0x49, 0xfc, 0x22, 0x4c, 0x7a,
	0xbd, 0xbe, 0x64, 0xed, 0xd4, 0x11, 0xc7, 0x31, 0xce, 0x3e, 0xbe, 0x6f, 0x83, 0x70, 0x4e, 0xc8,
	0x2d, 0x0a, 0x79, 0xf1, 0x7c, 0x0b, 0x5a, 0x6e, 0x32, 0xe6, 0xb1, 0x3d, 0x1b, 0x0c, 0xef, 0xdb,
	0x60, 0x30, 0x4b, 0xcb, 0x11, 0xb2, 0x39, 0x71, 0xd6, 0xbf, 0xa8, 0x30, 0xb5, 0x6b, 0x83, 0x29,
	0x56, 0x9c, 0x7c, 0x7a, 0xdf, 0x06, 0x11, 0x56, 0x00, 0x3e, 0x27, 0x9e, 0x6b, 0x29, 0xdb, 0x1e,
	0xdf, 0xb5, 0x41, 0x94, 0xc9, 0x25, 0x48, 0x25, 0x51, 0x96, 0xdc, 0xa0, 0x8a, 0x17, 0x61, 0xbc,
	0xc9, 0xc4, 0x93, 0x8e, 0x9e, 0xdc, 0xb5, 0xc1, 0x24, 0x13, 0x9d, 0xd8, 0xb7, 0x41, 0x34, 0xb7,
	0x20, 0x64, 0x2f, 0x09, 0xb9, 0x82, 0x30, 0x9f, 0x15, 0x2f, 0xc0, 0x64, 0x33, 0x29, 0xf6, 0x76,
	0x79, 0x8c, 0x69, 0x9c, 0x20, 0xd5, 0xd9, 0x39, 0x21, 0x97, 0x17, 0x2f, 0xc2, 0x13, 0x6d, 0x6c,
	0xb9, 0x87, 0xe9, 0x3f, 0xbf, 0x67, 0x83, 0x19, 0xdc, 0xe1, 0x42, 0x56, 0x28, 0xe4, 0x84, 0x42,
	0x5e, 0xcc, 0xfb, 0x56, 0xac, 0xe3, 0x73, 0xf6, 0xe2, 0x9e, 0x0d, 0x84, 0x7d, 0x1b, 0x24, 0x0b,
	0xf3, 0x42, 0x61, 0x41, 0x28, 0x2c, 0x0a, 0x85, 0x4b, 0x42, 0x61, 0x49, 0x98, 0x9f, 0x73, 0x0b,
	0xaf, 0x87, 0x13, 0x89, 0xd5, 0x60, 0xe4, 0x74, 0x82, 0x5f, 0x0d, 0x46, 0x12, 0x89, 0xa4, 0x5b,
	0x7e, 0x7d, 0x22, 0x31, 0xb6, 0x1a, 0x8c, 0xcc, 0x24, 0xce, 0xaf, 0x06, 0x23, 0x42, 0xe2, 0x62,
	0xfa, 0xef, 0x27, 0x60, 0x7c, 0xc5, 0x40, 0xb2, 0x85, 0x5c, 0x46, 0x28, 0xd5, 0xc6, 0x08, 0xfd,
	0x4e, 0xb0, 0x38, 0xb7, 0x9e, 0x99, 0xc5, 0xf1, 0xe7, 0x6f, 0xde, 0x78, 0x36, 0xfe, 0xc6, 0x8f,
	0xb5, 0xf9, 0xea, 0xd1, 0xb0, 0x36, 0x7e, 0xdc, 0x4c, 0xf1, 0x59, 0xb9, 0x19, 0x97, 0x67, 0x59,
	0x3e, 0x1c, 0xcf, 0xd2, 0xc2, 0xae, 0x2c, 0x1c, 0x92, 0x5d, 0x71, 0xbe, 0x6f, 0x7b, 0xf9, 0x69,
	0x18, 0x15, 0xef, 0xd7, 0x6c, 0x8b, 0x07, 0xe6, 0x4f, 0xda, 0xbe, 0xce, 0x7b, 0xe5, 0x70, 0xcc,
	0xc9, 0x6f, 0x9d, 0x33, 0x39, 0xe3, 0xc7, 0x99, 0xb4, 0x32, 0x25, 0x5f, 0x39, 0x32, 0xa6, 0xa4,
	0x18, 0x68, 0xe5, 0x47, 0xde, 0x3e, 0x62, 0x7e, 0xa4, 0x85, 0x15, 0xd9, 0x78, 0x46, 0x56, 0xc4,
	0x97, 0xf5, 0xb8, 0x7a, 0x58, 0xd6, 0xa3, 0x18, 0xf4, 0xe1, 0x3b, 0xde, 0x3e, 0x5a, 0xbe, 0xa3,
	0x18, 0xf4, 0xb2, 0x1c, 0xa5, 0x23, 0x64, 0x39, 0x8a, 0x01, 0x1f, 0x6e, 0x63, 0xe9, 0xe0, 0xdc,
	0x06, 0x5e, 0xf0, 0xcf, 0x87, 0xd5, 0xf8, 0xce, 0xd1, 0x50, 0x02, 0x3d, 0xeb, 0x33, 0xba, 0x33,
	0x01, 0x5f, 0x3f, 0x32, 0x26, 0xc0, 0x0f, 0xeb, 0x97, 0x9f, 0x03, 0xd4, 0xef, 0xc0, 0xf2, 0xe5,
	0xe7, 0x00, 0xe5, 0x8f, 0x1a, 0xab, 0x87, 0x8e, 0x1e, 0xab, 0x87, 0xfc, 0xb0, 0xba, 0xf1, 0xdc,
	0xb0, 0x7a, 0x31, 0x74, 0x04, 0x28, 0x3d, 0xfc, 0xd4, 0x28, 0x3d, 0xfc, 0x34, 0x28, 0x3d, 0xfc,
	0x4c, 0x28, 0x3d, 0xfc, 0x9c, 0x50, 0x7a, 0xf8, 0xb9, 0xa3, 0xf4, 0xb0, 0x07, 0xa5, 0x9b, 0xcf,
	0x11, 0xa5, 0x17, 0x03, 0xfe, 0xd8, 0x7c, 0x39, 0xf9, 0x2f, 0x97, 0xdb, 0xee, 0x58, 0x31, 0x48,
	0xe8, 0xc4, 0x3f, 0x27, 0x1e, 0x7e, 0x06, 0x3a, 0x1f, 0x8b, 0x33, 0x3e, 0x10, 0x68, 0xf4, 0xe1,
	0x67, 0xa0, 0xe3, 0xa9, 0x38, 0xd5, 0x02, 0x68, 0xe2, 0x0f, 0x3f, 0x03, 0x9e, 0xbf, 0xc5, 0xb3,
	0x1d, 0x38, 0x86, 0x7b, 0xf8, 0x19, 0x68, 0x7b, 0xd6, 0x05, 0xbe, 0xe0, 0x9e, 0x75, 0x3c, 0x16,
	0x73, 0xdd, 0xe0, 0xcb, 0xc4, 0xc3, 0xcf, 0x80, 0xff, 0x2b, 0x51, 0xf0, 0xc5, 0x30, 0x63, 0x0f,
	0x3f, 0x03, 0x3e, 0xcf, 0xdb, 0xc0, 0x4b, 0x27, 0x6c, 0xc1, 0x80, 0xe5, 0x47, 0x13, 0x70, 0x58,
	0x42, 0x75, 0x55, 0x2e, 0x1f, 0x23, 0x96, 0x63, 0xc4, 0x72, 0x8c, 0x58, 0x8e, 0x11, 0xcb, 0x31,
	0x62, 0x39, 0x46, 0x2c, 0xc7, 0x88, 0xe5, 0x18, 0xb1, 0x1c, 0x23, 0x96, 0x63, 0xc4, 0x72, 0x8c,
	0x58, 0x8e, 0x11, 0xcb, 0xff, 0x37, 0xc4, 0xf2, 0x87, 0x53, 0x30, 0xfa, 0x65, 0x64, 0x1d, 0xa3,
	0x95, 0x63, 0xb4, 0x72, 0x8c, 0x56, 0x8e, 0xd1, 0xca, 0x31, 0x5a, 0x39, 0x46, 0x2b, 0xc7, 0x68,
	0xe5, 0x18, 0xad, 0x1c, 0xa3, 0x95, 0x63, 0xb4, 0x72, 0x8c, 0x56, 0x0e, 0x8d, 0x56, 0x7e, 0xb7,
	0x6a, 0x13, 0xdf, 0x3a, 0xaa, 0xda, 0xc4, 0xdf, 0x4a, 0x5d, 0xe2, 0x31, 0x10, 0x7c, 0x9e, 0x40,
	0x50, 0xfc, 0x63, 0xb0, 0xf7, 0x8b, 0xe9, 0xbe, 0x9f, 0xfd, 0x62, 0xba, 0xef, 0x37, 0xbf, 0x98,
	0x06, 0x0f, 0xf6, 0xa7, 0xc1, 0x0f, 0xf7, 0xa7, 0xc1, 0x4f, 0xf7, 0xa7, 0xc1, 0xde, 0xfe, 0x34,
	0xf8, 0xd9, 0xfe, 0x34, 0xf8, 0x68, 0x7f, 0x1a, 0x7c, 0xbc, 0x3f, 0xdd, 0xf7, 0x9b, 0xfd, 0x69,
	0xf0, 0x83, 0x5f, 0x4e, 0xf7, 0xed, 0xfe, 0x72, 0x1a, 0x7c, 0xed, 0xed, 0x6d, 0xbd, 0x7e, 0x7b,
	0x3b, 0xe3, 0xfc, 0xaf, 0x26, 0x99, 0x86, 0x39, 0x4b, 0x7e, 0x6c, 0xe9, 0x46, 0xed, 0x62, 0xdd,
	0xd0, 0xef, 0x28, 0x15, 0x64, 0x5c, 0x74, 0x5e, 0xcf, 0xd6, 0x37, 0xb7, 0xf5, 0x59, 0x74, 0xcf,
	0x72, 0xfe, 0x03, 0xaa, 0x9e, 0xff, 0xc7, 0xd7, 0x66, 0x98, 0x7c, 0x78, 0x9e, 0xff, 0xbf, 0x00,
	0x00, 0x00, 0xff, 0xff, 0xc8, 0x88, 0x4f, 0xcc, 0x13, 0x6c, 0x00, 0x00,
}
