// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ves.io/schema/views/terraform_parameters/aws_types.proto

/*
	Package terraform_parameters is a generated protocol buffer package.

	It is generated from these files:
		ves.io/schema/views/terraform_parameters/aws_types.proto
		ves.io/schema/views/terraform_parameters/azure_types.proto
		ves.io/schema/views/terraform_parameters/gcp_types.proto
		ves.io/schema/views/terraform_parameters/object.proto
		ves.io/schema/views/terraform_parameters/public_customapi.proto
		ves.io/schema/views/terraform_parameters/types.proto

	It has these top-level messages:
		AWSInstanceType
		CloudSubnetType
		SubnetType
		AWSVPCInfoType
		AWSTGWInfoType
		AWSVPCType
		AWSTGWTunnelInfoType
		AWSTGWType
		AzureInstanceType
		AzureSubnetParamType
		AzureSubnetChoice
		AzureSubnetType
		AzureVnetParamsType
		AzureVnetInfoType
		AzureVnetSiteType
		GCPInstanceType
		GCPSubnetParamType
		GCPVPCNetworkChoice
		GCPSubnetChoice
		GCPVpcSiteType
		Object
		SpecType
		StatusObject
		GetRequest
		GetResponse
		GetStatusResponse
		RunRequest
		RunResponse
		ForceDeleteRequest
		ForceDeleteResponse
		GlobalSpecType
		PlanStatus
		ApplyStatus
*/
package terraform_parameters

import proto "github.com/gogo/protobuf/proto"
import golang_proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"
import _ "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
import ves_io_schema4 "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
import _ "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
import ves_io_schema_views1 "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/views"

import strings "strings"
import reflect "reflect"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// AWS Terraform Instance Parameters
//
// x-displayName: "AWS Terraform Instance Parameters"
// Shape of the view terraform parameters specification
type AWSInstanceType struct {
	// Volterra Node Id
	//
	// x-displayName: "Volterra Node ID"
	// Volterra Node ID will be used to refer to this node in other TF parameters
	VoltNodeId string `protobuf:"bytes,1,opt,name=volt_node_id,json=voltNodeId,proto3" json:"volt_node_id,omitempty"`
	// Volterra VPC id
	//
	// x-displayName: "Volterra VPC id"
	// VPC in which Cloud Instance is launched
	VoltVpcId string `protobuf:"bytes,3,opt,name=volt_vpc_id,json=voltVpcId,proto3" json:"volt_vpc_id,omitempty"`
	// Public Subnet
	//
	// x-displayName: "Public Subnet"
	// Public subnet will be used as site local network
	PublicSubnetId string `protobuf:"bytes,4,opt,name=public_subnet_id,json=publicSubnetId,proto3" json:"public_subnet_id,omitempty"`
	// Private Subnet
	//
	// x-displayName: "Private Subnet"
	// Private subnet will be used as site inside network, when node type has two interfaces.
	PrivateSubnetId string `protobuf:"bytes,5,opt,name=private_subnet_id,json=privateSubnetId,proto3" json:"private_subnet_id,omitempty"`
	// Cloud Instance Type
	//
	// x-displayName: "Cloud Instance Type"
	// Cloud instance type like small, medium, large etc
	InstanceType string `protobuf:"bytes,6,opt,name=instance_type,json=instanceType,proto3" json:"instance_type,omitempty"`
	// Cloud Disk size
	//
	// x-displayName: "Cloud Disk Size"
	// Disk size to be used for this instance
	DiskSize string `protobuf:"bytes,7,opt,name=disk_size,json=diskSize,proto3" json:"disk_size,omitempty"`
	// AMI ID
	//
	// x-displayName: "AMI ID"
	// Amazon Machine Image ID
	AmiId string `protobuf:"bytes,8,opt,name=ami_id,json=amiId,proto3" json:"ami_id,omitempty"`
	// Volterra Node count
	//
	// x-displayName: "Volterra Node count"
	// Desired number of node count used for worker node scaling
	NodeCount int32 `protobuf:"varint,9,opt,name=node_count,json=nodeCount,proto3" json:"node_count,omitempty"`
	// EBS Volume size
	//
	// x-displayName: "EBS Volume size"
	// Desired size of extra EBS Volume if needed. Set 0 if EBS volume is not needed.
	EbsVolumeSize uint32 `protobuf:"varint,10,opt,name=ebs_volume_size,json=ebsVolumeSize,proto3" json:"ebs_volume_size,omitempty"`
	// EBS Volume AZ
	//
	// x-displayName: "EBS Volume AZ"
	// The AZ where the EBS volume will exist.
	EbsVolumeAz string `protobuf:"bytes,11,opt,name=ebs_volume_az,json=ebsVolumeAz,proto3" json:"ebs_volume_az,omitempty"`
}

func (m *AWSInstanceType) Reset()                    { *m = AWSInstanceType{} }
func (*AWSInstanceType) ProtoMessage()               {}
func (*AWSInstanceType) Descriptor() ([]byte, []int) { return fileDescriptorAwsTypes, []int{0} }

func (m *AWSInstanceType) GetVoltNodeId() string {
	if m != nil {
		return m.VoltNodeId
	}
	return ""
}

func (m *AWSInstanceType) GetVoltVpcId() string {
	if m != nil {
		return m.VoltVpcId
	}
	return ""
}

func (m *AWSInstanceType) GetPublicSubnetId() string {
	if m != nil {
		return m.PublicSubnetId
	}
	return ""
}

func (m *AWSInstanceType) GetPrivateSubnetId() string {
	if m != nil {
		return m.PrivateSubnetId
	}
	return ""
}

func (m *AWSInstanceType) GetInstanceType() string {
	if m != nil {
		return m.InstanceType
	}
	return ""
}

func (m *AWSInstanceType) GetDiskSize() string {
	if m != nil {
		return m.DiskSize
	}
	return ""
}

func (m *AWSInstanceType) GetAmiId() string {
	if m != nil {
		return m.AmiId
	}
	return ""
}

func (m *AWSInstanceType) GetNodeCount() int32 {
	if m != nil {
		return m.NodeCount
	}
	return 0
}

func (m *AWSInstanceType) GetEbsVolumeSize() uint32 {
	if m != nil {
		return m.EbsVolumeSize
	}
	return 0
}

func (m *AWSInstanceType) GetEbsVolumeAz() string {
	if m != nil {
		return m.EbsVolumeAz
	}
	return ""
}

// Cloud Subnet
//
// x-displayName: "AWS Subnet"
// Parameters for AWS subnet
type CloudSubnetType struct {
	// New Subnet
	//
	// x-displayName: "New Subnet"
	// Parameters for creating new subnet
	SubnetParam *ves_io_schema_views1.CloudSubnetParamType `protobuf:"bytes,1,opt,name=subnet_param,json=subnetParam" json:"subnet_param,omitempty"`
	// Existing Subnet
	//
	// x-displayName: "Existing Subnet"
	// Information about existing subnet
	ExistingSubnetId string `protobuf:"bytes,2,opt,name=existing_subnet_id,json=existingSubnetId,proto3" json:"existing_subnet_id,omitempty"`
}

func (m *CloudSubnetType) Reset()                    { *m = CloudSubnetType{} }
func (*CloudSubnetType) ProtoMessage()               {}
func (*CloudSubnetType) Descriptor() ([]byte, []int) { return fileDescriptorAwsTypes, []int{1} }

func (m *CloudSubnetType) GetSubnetParam() *ves_io_schema_views1.CloudSubnetParamType {
	if m != nil {
		return m.SubnetParam
	}
	return nil
}

func (m *CloudSubnetType) GetExistingSubnetId() string {
	if m != nil {
		return m.ExistingSubnetId
	}
	return ""
}

// Terraform subnets Parameters
//
// x-displayName: "Terraform Subnet Parameters"
// Specifies subnet to be used or created in the cloud
type SubnetType struct {
	// Volterra Subnet Id
	//
	// x-displayName: "Volterra Subnet ID"
	// Volterra subnet ID will be used to refer to this subnet in other TF parameters
	VoltSubnetId string `protobuf:"bytes,1,opt,name=volt_subnet_id,json=voltSubnetId,proto3" json:"volt_subnet_id,omitempty"`
	// Volterra VPC id
	//
	// x-displayName: "Volterra VPC id"
	// VPC in which Cloud Instance is launched
	VoltVpcId string `protobuf:"bytes,2,opt,name=volt_vpc_id,json=voltVpcId,proto3" json:"volt_vpc_id,omitempty"`
	// Cloud AZ
	//
	// x-displayName: "Cloud Az"
	// Cloud AZ in which to create this subnet
	Az string `protobuf:"bytes,3,opt,name=az,proto3" json:"az,omitempty"`
	// Subnet Parameters
	//
	// x-displayName: "Subnet Parameters"
	// Subnet parameters for existing subnet or new subnet
	Subnet *CloudSubnetType `protobuf:"bytes,4,opt,name=subnet" json:"subnet,omitempty"`
	// Interface Type
	//
	// x-displayName: "Interface Type"
	// Interface Type
	InterfaceType InterfaceType `protobuf:"varint,5,opt,name=interface_type,json=interfaceType,proto3,enum=ves.io.schema.views.terraform_parameters.InterfaceType" json:"interface_type,omitempty"`
}

func (m *SubnetType) Reset()                    { *m = SubnetType{} }
func (*SubnetType) ProtoMessage()               {}
func (*SubnetType) Descriptor() ([]byte, []int) { return fileDescriptorAwsTypes, []int{2} }

func (m *SubnetType) GetVoltSubnetId() string {
	if m != nil {
		return m.VoltSubnetId
	}
	return ""
}

func (m *SubnetType) GetVoltVpcId() string {
	if m != nil {
		return m.VoltVpcId
	}
	return ""
}

func (m *SubnetType) GetAz() string {
	if m != nil {
		return m.Az
	}
	return ""
}

func (m *SubnetType) GetSubnet() *CloudSubnetType {
	if m != nil {
		return m.Subnet
	}
	return nil
}

func (m *SubnetType) GetInterfaceType() InterfaceType {
	if m != nil {
		return m.InterfaceType
	}
	return INTERFACE_INSIDE
}

// AWS VPC Information
//
// x-displayName: "AWS VPC Information"
// This defines AWS VPC for a view
type AWSVPCInfoType struct {
	// New VPC
	//
	// x-displayName: "New VPC Parameters"
	// Parameters for creating new VPC
	NewVpc *ves_io_schema_views1.AWSVPCParamsType `protobuf:"bytes,1,opt,name=new_vpc,json=newVpc" json:"new_vpc,omitempty"`
	// Existing VPC
	//
	// x-displayName: "Existing VPC"
	// Information about existing VPC
	VpcId string `protobuf:"bytes,2,opt,name=vpc_id,json=vpcId,proto3" json:"vpc_id,omitempty"`
}

func (m *AWSVPCInfoType) Reset()                    { *m = AWSVPCInfoType{} }
func (*AWSVPCInfoType) ProtoMessage()               {}
func (*AWSVPCInfoType) Descriptor() ([]byte, []int) { return fileDescriptorAwsTypes, []int{3} }

func (m *AWSVPCInfoType) GetNewVpc() *ves_io_schema_views1.AWSVPCParamsType {
	if m != nil {
		return m.NewVpc
	}
	return nil
}

func (m *AWSVPCInfoType) GetVpcId() string {
	if m != nil {
		return m.VpcId
	}
	return ""
}

// AWS TGW Information
//
// x-displayName: "AWS TGW Information"
// This defines AWS TGW for a view
type AWSTGWInfoType struct {
	// New TGW
	//
	// x-displayName: "New TGW"
	// Create new TGW
	NewTgw bool `protobuf:"varint,1,opt,name=new_tgw,json=newTgw,proto3" json:"new_tgw,omitempty"`
	// Existing TGW
	//
	// x-displayName: "Existing TGW"
	// Information about existing TGW
	TgwId string `protobuf:"bytes,2,opt,name=tgw_id,json=tgwId,proto3" json:"tgw_id,omitempty"`
	// TGW ASN
	//
	// x-displayName: "TGW ASN"
	// x-example: "64500"
	// TGW ASN.
	TgwAsn uint32 `protobuf:"varint,3,opt,name=tgw_asn,json=tgwAsn,proto3" json:"tgw_asn,omitempty"`
	// Volterra Site ASN
	//
	// x-displayName: "Volterra Site ASN"
	// x-example: "64500"
	// Volterra Site ASN.
	VolterraSiteAsn uint32 `protobuf:"varint,4,opt,name=volterra_site_asn,json=volterraSiteAsn,proto3" json:"volterra_site_asn,omitempty"`
}

func (m *AWSTGWInfoType) Reset()                    { *m = AWSTGWInfoType{} }
func (*AWSTGWInfoType) ProtoMessage()               {}
func (*AWSTGWInfoType) Descriptor() ([]byte, []int) { return fileDescriptorAwsTypes, []int{4} }

func (m *AWSTGWInfoType) GetNewTgw() bool {
	if m != nil {
		return m.NewTgw
	}
	return false
}

func (m *AWSTGWInfoType) GetTgwId() string {
	if m != nil {
		return m.TgwId
	}
	return ""
}

func (m *AWSTGWInfoType) GetTgwAsn() uint32 {
	if m != nil {
		return m.TgwAsn
	}
	return 0
}

func (m *AWSTGWInfoType) GetVolterraSiteAsn() uint32 {
	if m != nil {
		return m.VolterraSiteAsn
	}
	return 0
}

// Terraform AWS VPC Site Parameters
//
// x-displayName: "Terraform Object Parameters"
// Terraform parameters to create site in AWS.
type AWSVPCType struct {
	// Site Name
	//
	// x-displayName: "Site Name"
	// Name of the site object to be created
	SiteName string `protobuf:"bytes,10,opt,name=site_name,json=siteName,proto3" json:"site_name,omitempty"`
	// AWS Unique Name
	//
	// x-displayName: "AWS Unique Name"
	// AWS unique name which will be used to create the cloud resource objects on aws"
	AwsName string `protobuf:"bytes,15,opt,name=aws_name,json=awsName,proto3" json:"aws_name,omitempty"`
	// Volterra VPC Id
	//
	// x-displayName: "Volterra VPC ID"
	// Volterra vpc ID will be used to refer to this vpc in other TF parameters
	VoltVpcId string `protobuf:"bytes,1,opt,name=volt_vpc_id,json=voltVpcId,proto3" json:"volt_vpc_id,omitempty"`
	// Fleet Label
	//
	// x-displayName: "Fleet Label"
	// Fleet Label to identify Fleet for this site. Fleet Label is assigned to site at registration approval
	FleetLabel string `protobuf:"bytes,2,opt,name=fleet_label,json=fleetLabel,proto3" json:"fleet_label,omitempty"`
	// Certified Hardware
	//
	// x-displayName: "Certified Hardware"
	// Certified Hardware to be used to create this site.
	CertifiedHw string `protobuf:"bytes,3,opt,name=certified_hw,json=certifiedHw,proto3" json:"certified_hw,omitempty"`
	// VPC
	//
	// x-displayName: "VPC"
	// VPC parameters to instantiate this site
	Vpc *AWSVPCInfoType `protobuf:"bytes,4,opt,name=vpc" json:"vpc,omitempty"`
	// List of Subnets
	//
	// x-displayName: "List of Subnets"
	// List of Subnets that TF script needs
	Subnets []*SubnetType `protobuf:"bytes,5,rep,name=subnets" json:"subnets,omitempty"`
	// List of Master Nodes
	//
	// x-displayName: "List of Master Nodes"
	// List of Master Nodes in this Site that TF script needs to instantiate
	MasterNodes []*AWSInstanceType `protobuf:"bytes,6,rep,name=master_nodes,json=masterNodes" json:"master_nodes,omitempty"`
	// Worker Node Scaling
	//
	// x-displayName: "Worker Node Scaling"
	// Number of Maximum Worker Nodes for Auto Scale Configuration
	WorkerNodes uint32 `protobuf:"varint,14,opt,name=worker_nodes,json=workerNodes,proto3" json:"worker_nodes,omitempty"`
	// Gateway Type
	//
	// x-displayName: "Gateway Type"
	// Gateway Type
	GatewayType CloudGatewayType `protobuf:"varint,11,opt,name=gateway_type,json=gatewayType,proto3,enum=ves.io.schema.views.terraform_parameters.CloudGatewayType" json:"gateway_type,omitempty"`
	// AWS Region
	//
	// x-displayName: "AWS Region"
	// AWS region
	AwsRegion string `protobuf:"bytes,9,opt,name=aws_region,json=awsRegion,proto3" json:"aws_region,omitempty"`
	// Public SSH key
	//
	// x-displayName: "Public SSH key"
	// Public SSH key for accessing the site.
	SshKey string `protobuf:"bytes,13,opt,name=ssh_key,json=sshKey,proto3" json:"ssh_key,omitempty"`
}

func (m *AWSVPCType) Reset()                    { *m = AWSVPCType{} }
func (*AWSVPCType) ProtoMessage()               {}
func (*AWSVPCType) Descriptor() ([]byte, []int) { return fileDescriptorAwsTypes, []int{5} }

func (m *AWSVPCType) GetSiteName() string {
	if m != nil {
		return m.SiteName
	}
	return ""
}

func (m *AWSVPCType) GetAwsName() string {
	if m != nil {
		return m.AwsName
	}
	return ""
}

func (m *AWSVPCType) GetVoltVpcId() string {
	if m != nil {
		return m.VoltVpcId
	}
	return ""
}

func (m *AWSVPCType) GetFleetLabel() string {
	if m != nil {
		return m.FleetLabel
	}
	return ""
}

func (m *AWSVPCType) GetCertifiedHw() string {
	if m != nil {
		return m.CertifiedHw
	}
	return ""
}

func (m *AWSVPCType) GetVpc() *AWSVPCInfoType {
	if m != nil {
		return m.Vpc
	}
	return nil
}

func (m *AWSVPCType) GetSubnets() []*SubnetType {
	if m != nil {
		return m.Subnets
	}
	return nil
}

func (m *AWSVPCType) GetMasterNodes() []*AWSInstanceType {
	if m != nil {
		return m.MasterNodes
	}
	return nil
}

func (m *AWSVPCType) GetWorkerNodes() uint32 {
	if m != nil {
		return m.WorkerNodes
	}
	return 0
}

func (m *AWSVPCType) GetGatewayType() CloudGatewayType {
	if m != nil {
		return m.GatewayType
	}
	return INGRESS_GATEWAY
}

func (m *AWSVPCType) GetAwsRegion() string {
	if m != nil {
		return m.AwsRegion
	}
	return ""
}

func (m *AWSVPCType) GetSshKey() string {
	if m != nil {
		return m.SshKey
	}
	return ""
}

// AWSTGWTunnelInfoType
//
// x-displayName: "AWSTGWTunnelInfoType"
// AWS TGW tunnel infromation
type AWSTGWTunnelInfoType struct {
	// Node Name
	//
	// x-displayName: "Node Name"
	// x-example: "master-0"
	// Node Name
	NodeName string `protobuf:"bytes,1,opt,name=node_name,json=nodeName,proto3" json:"node_name,omitempty"`
	// Tunnel 1 Inside Prefix
	//
	// x-displayName: "Tunnel 1 inside prefix"
	// x-example: "169.192.128.0/24"
	// Tunnel 1 Inside Prefix
	Tunnel1InsidePrefix string `protobuf:"bytes,2,opt,name=tunnel1_inside_prefix,json=tunnel1InsidePrefix,proto3" json:"tunnel1_inside_prefix,omitempty"`
	// Tunnel 2 Inside Prefix
	//
	// x-displayName: "Tunnel 2 inside prefix"
	// x-example: "169.192.129.0/24"
	// Tunnel 2 Inside Prefix
	Tunnel2InsidePrefix string `protobuf:"bytes,3,opt,name=tunnel2_inside_prefix,json=tunnel2InsidePrefix,proto3" json:"tunnel2_inside_prefix,omitempty"`
	// Tunnel 1 Pre Shared Key
	//
	// x-displayName: "Tunnel1 Pre Shared Key"
	// Tunnel 1 Pre Shared Key
	Tunnel1Psk *ves_io_schema4.SecretType `protobuf:"bytes,4,opt,name=tunnel1_psk,json=tunnel1Psk" json:"tunnel1_psk,omitempty"`
	// Tunnel 2 Pre Shared Key
	//
	// x-displayName: "Tunnel 2 Pre Shared Key"
	// Tunnel 2 Pre Shared Key
	Tunnel2Psk *ves_io_schema4.SecretType `protobuf:"bytes,5,opt,name=tunnel2_psk,json=tunnel2Psk" json:"tunnel2_psk,omitempty"`
}

func (m *AWSTGWTunnelInfoType) Reset()                    { *m = AWSTGWTunnelInfoType{} }
func (*AWSTGWTunnelInfoType) ProtoMessage()               {}
func (*AWSTGWTunnelInfoType) Descriptor() ([]byte, []int) { return fileDescriptorAwsTypes, []int{6} }

func (m *AWSTGWTunnelInfoType) GetNodeName() string {
	if m != nil {
		return m.NodeName
	}
	return ""
}

func (m *AWSTGWTunnelInfoType) GetTunnel1InsidePrefix() string {
	if m != nil {
		return m.Tunnel1InsidePrefix
	}
	return ""
}

func (m *AWSTGWTunnelInfoType) GetTunnel2InsidePrefix() string {
	if m != nil {
		return m.Tunnel2InsidePrefix
	}
	return ""
}

func (m *AWSTGWTunnelInfoType) GetTunnel1Psk() *ves_io_schema4.SecretType {
	if m != nil {
		return m.Tunnel1Psk
	}
	return nil
}

func (m *AWSTGWTunnelInfoType) GetTunnel2Psk() *ves_io_schema4.SecretType {
	if m != nil {
		return m.Tunnel2Psk
	}
	return nil
}

// Terraform AWS TGW Site Parameters
//
// x-displayName: "Terraform Object Parameters for AWS TGW"
// Terraform parameters to create transit gateway in AWS.
type AWSTGWType struct {
	// Site Name
	//
	// x-displayName: "Site Name"
	// Name of the site object to be created
	SiteName string `protobuf:"bytes,1,opt,name=site_name,json=siteName,proto3" json:"site_name,omitempty"`
	// AWS Unique Name
	//
	// x-displayName: "AWS Unique Name"
	// AWS unique name which will be used to create the cloud resource objects on aws"
	AwsName string `protobuf:"bytes,15,opt,name=aws_name,json=awsName,proto3" json:"aws_name,omitempty"`
	// Volterra VPC Id
	//
	// x-displayName: "Volterra VPC ID"
	// Volterra vpc ID will be used to refer to this vpc in other TF parameters
	VoltVpcId string `protobuf:"bytes,2,opt,name=volt_vpc_id,json=voltVpcId,proto3" json:"volt_vpc_id,omitempty"`
	// Fleet Label
	//
	// x-displayName: "Fleet Label"
	// Fleet Label to identify Fleet for this site. Fleet Label is assigned to site at registration approval
	FleetLabel string `protobuf:"bytes,3,opt,name=fleet_label,json=fleetLabel,proto3" json:"fleet_label,omitempty"`
	// Certified Hardware
	//
	// x-displayName: "Certified Hardware"
	// Certified Hardware to be used to create this site.
	CertifiedHw string `protobuf:"bytes,4,opt,name=certified_hw,json=certifiedHw,proto3" json:"certified_hw,omitempty"`
	// TGW
	//
	// x-displayName: "TGW"
	// TGW parameters to instantiate this site
	Tgw *AWSTGWInfoType `protobuf:"bytes,5,opt,name=tgw" json:"tgw,omitempty"`
	// VPC
	//
	// x-displayName: "VPC"
	// VPC parameters to instantiate this site
	Vpc *AWSVPCInfoType `protobuf:"bytes,6,opt,name=vpc" json:"vpc,omitempty"`
	// List of Subnets
	//
	// x-displayName: "List of Subnets"
	// List of Subnets that TF script needs
	Subnets []*SubnetType `protobuf:"bytes,7,rep,name=subnets" json:"subnets,omitempty"`
	// List of Master Nodes
	//
	// x-displayName: "List of Master Nodes"
	// List of Master Nodes in this Site that TF script needs to instantiate
	MasterNodes []*AWSInstanceType `protobuf:"bytes,8,rep,name=master_nodes,json=masterNodes" json:"master_nodes,omitempty"`
	// Worker Node Scaling
	//
	// x-displayName: "Worker Node Scaling"
	// Number of Maximum Worker Nodes for Auto Scale Configuration
	WorkerNodes uint32 `protobuf:"varint,9,opt,name=worker_nodes,json=workerNodes,proto3" json:"worker_nodes,omitempty"`
	// AWS Region
	//
	// x-displayName: "AWS Region"
	// AWS region
	AwsRegion string `protobuf:"bytes,10,opt,name=aws_region,json=awsRegion,proto3" json:"aws_region,omitempty"`
	// Public SSH key
	//
	// x-displayName: "Public SSH key"
	// Public SSH key for accessing the site.
	SshKey string `protobuf:"bytes,11,opt,name=ssh_key,json=sshKey,proto3" json:"ssh_key,omitempty"`
	// VPC Attachments
	//
	// x-displayName: "VPC Attachments"
	// VPC Attachemnts
	VpcIds []string `protobuf:"bytes,12,rep,name=vpc_ids,json=vpcIds" json:"vpc_ids,omitempty"`
	// Tunnel information
	// x-displayName: "Tunnel Information"
	// Tunnel information
	TunnelInformation []*AWSTGWTunnelInfoType `protobuf:"bytes,13,rep,name=tunnel_information,json=tunnelInformation" json:"tunnel_information,omitempty"`
}

func (m *AWSTGWType) Reset()                    { *m = AWSTGWType{} }
func (*AWSTGWType) ProtoMessage()               {}
func (*AWSTGWType) Descriptor() ([]byte, []int) { return fileDescriptorAwsTypes, []int{7} }

func (m *AWSTGWType) GetSiteName() string {
	if m != nil {
		return m.SiteName
	}
	return ""
}

func (m *AWSTGWType) GetAwsName() string {
	if m != nil {
		return m.AwsName
	}
	return ""
}

func (m *AWSTGWType) GetVoltVpcId() string {
	if m != nil {
		return m.VoltVpcId
	}
	return ""
}

func (m *AWSTGWType) GetFleetLabel() string {
	if m != nil {
		return m.FleetLabel
	}
	return ""
}

func (m *AWSTGWType) GetCertifiedHw() string {
	if m != nil {
		return m.CertifiedHw
	}
	return ""
}

func (m *AWSTGWType) GetTgw() *AWSTGWInfoType {
	if m != nil {
		return m.Tgw
	}
	return nil
}

func (m *AWSTGWType) GetVpc() *AWSVPCInfoType {
	if m != nil {
		return m.Vpc
	}
	return nil
}

func (m *AWSTGWType) GetSubnets() []*SubnetType {
	if m != nil {
		return m.Subnets
	}
	return nil
}

func (m *AWSTGWType) GetMasterNodes() []*AWSInstanceType {
	if m != nil {
		return m.MasterNodes
	}
	return nil
}

func (m *AWSTGWType) GetWorkerNodes() uint32 {
	if m != nil {
		return m.WorkerNodes
	}
	return 0
}

func (m *AWSTGWType) GetAwsRegion() string {
	if m != nil {
		return m.AwsRegion
	}
	return ""
}

func (m *AWSTGWType) GetSshKey() string {
	if m != nil {
		return m.SshKey
	}
	return ""
}

func (m *AWSTGWType) GetVpcIds() []string {
	if m != nil {
		return m.VpcIds
	}
	return nil
}

func (m *AWSTGWType) GetTunnelInformation() []*AWSTGWTunnelInfoType {
	if m != nil {
		return m.TunnelInformation
	}
	return nil
}

func init() {
	proto.RegisterType((*AWSInstanceType)(nil), "ves.io.schema.views.terraform_parameters.AWSInstanceType")
	golang_proto.RegisterType((*AWSInstanceType)(nil), "ves.io.schema.views.terraform_parameters.AWSInstanceType")
	proto.RegisterType((*CloudSubnetType)(nil), "ves.io.schema.views.terraform_parameters.CloudSubnetType")
	golang_proto.RegisterType((*CloudSubnetType)(nil), "ves.io.schema.views.terraform_parameters.CloudSubnetType")
	proto.RegisterType((*SubnetType)(nil), "ves.io.schema.views.terraform_parameters.SubnetType")
	golang_proto.RegisterType((*SubnetType)(nil), "ves.io.schema.views.terraform_parameters.SubnetType")
	proto.RegisterType((*AWSVPCInfoType)(nil), "ves.io.schema.views.terraform_parameters.AWSVPCInfoType")
	golang_proto.RegisterType((*AWSVPCInfoType)(nil), "ves.io.schema.views.terraform_parameters.AWSVPCInfoType")
	proto.RegisterType((*AWSTGWInfoType)(nil), "ves.io.schema.views.terraform_parameters.AWSTGWInfoType")
	golang_proto.RegisterType((*AWSTGWInfoType)(nil), "ves.io.schema.views.terraform_parameters.AWSTGWInfoType")
	proto.RegisterType((*AWSVPCType)(nil), "ves.io.schema.views.terraform_parameters.AWSVPCType")
	golang_proto.RegisterType((*AWSVPCType)(nil), "ves.io.schema.views.terraform_parameters.AWSVPCType")
	proto.RegisterType((*AWSTGWTunnelInfoType)(nil), "ves.io.schema.views.terraform_parameters.AWSTGWTunnelInfoType")
	golang_proto.RegisterType((*AWSTGWTunnelInfoType)(nil), "ves.io.schema.views.terraform_parameters.AWSTGWTunnelInfoType")
	proto.RegisterType((*AWSTGWType)(nil), "ves.io.schema.views.terraform_parameters.AWSTGWType")
	golang_proto.RegisterType((*AWSTGWType)(nil), "ves.io.schema.views.terraform_parameters.AWSTGWType")
}
func (this *AWSInstanceType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AWSInstanceType)
	if !ok {
		that2, ok := that.(AWSInstanceType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.VoltNodeId != that1.VoltNodeId {
		return false
	}
	if this.VoltVpcId != that1.VoltVpcId {
		return false
	}
	if this.PublicSubnetId != that1.PublicSubnetId {
		return false
	}
	if this.PrivateSubnetId != that1.PrivateSubnetId {
		return false
	}
	if this.InstanceType != that1.InstanceType {
		return false
	}
	if this.DiskSize != that1.DiskSize {
		return false
	}
	if this.AmiId != that1.AmiId {
		return false
	}
	if this.NodeCount != that1.NodeCount {
		return false
	}
	if this.EbsVolumeSize != that1.EbsVolumeSize {
		return false
	}
	if this.EbsVolumeAz != that1.EbsVolumeAz {
		return false
	}
	return true
}
func (this *CloudSubnetType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CloudSubnetType)
	if !ok {
		that2, ok := that.(CloudSubnetType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.SubnetParam.Equal(that1.SubnetParam) {
		return false
	}
	if this.ExistingSubnetId != that1.ExistingSubnetId {
		return false
	}
	return true
}
func (this *SubnetType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SubnetType)
	if !ok {
		that2, ok := that.(SubnetType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.VoltSubnetId != that1.VoltSubnetId {
		return false
	}
	if this.VoltVpcId != that1.VoltVpcId {
		return false
	}
	if this.Az != that1.Az {
		return false
	}
	if !this.Subnet.Equal(that1.Subnet) {
		return false
	}
	if this.InterfaceType != that1.InterfaceType {
		return false
	}
	return true
}
func (this *AWSVPCInfoType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AWSVPCInfoType)
	if !ok {
		that2, ok := that.(AWSVPCInfoType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NewVpc.Equal(that1.NewVpc) {
		return false
	}
	if this.VpcId != that1.VpcId {
		return false
	}
	return true
}
func (this *AWSTGWInfoType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AWSTGWInfoType)
	if !ok {
		that2, ok := that.(AWSTGWInfoType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.NewTgw != that1.NewTgw {
		return false
	}
	if this.TgwId != that1.TgwId {
		return false
	}
	if this.TgwAsn != that1.TgwAsn {
		return false
	}
	if this.VolterraSiteAsn != that1.VolterraSiteAsn {
		return false
	}
	return true
}
func (this *AWSVPCType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AWSVPCType)
	if !ok {
		that2, ok := that.(AWSVPCType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.SiteName != that1.SiteName {
		return false
	}
	if this.AwsName != that1.AwsName {
		return false
	}
	if this.VoltVpcId != that1.VoltVpcId {
		return false
	}
	if this.FleetLabel != that1.FleetLabel {
		return false
	}
	if this.CertifiedHw != that1.CertifiedHw {
		return false
	}
	if !this.Vpc.Equal(that1.Vpc) {
		return false
	}
	if len(this.Subnets) != len(that1.Subnets) {
		return false
	}
	for i := range this.Subnets {
		if !this.Subnets[i].Equal(that1.Subnets[i]) {
			return false
		}
	}
	if len(this.MasterNodes) != len(that1.MasterNodes) {
		return false
	}
	for i := range this.MasterNodes {
		if !this.MasterNodes[i].Equal(that1.MasterNodes[i]) {
			return false
		}
	}
	if this.WorkerNodes != that1.WorkerNodes {
		return false
	}
	if this.GatewayType != that1.GatewayType {
		return false
	}
	if this.AwsRegion != that1.AwsRegion {
		return false
	}
	if this.SshKey != that1.SshKey {
		return false
	}
	return true
}
func (this *AWSTGWTunnelInfoType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AWSTGWTunnelInfoType)
	if !ok {
		that2, ok := that.(AWSTGWTunnelInfoType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.NodeName != that1.NodeName {
		return false
	}
	if this.Tunnel1InsidePrefix != that1.Tunnel1InsidePrefix {
		return false
	}
	if this.Tunnel2InsidePrefix != that1.Tunnel2InsidePrefix {
		return false
	}
	if !this.Tunnel1Psk.Equal(that1.Tunnel1Psk) {
		return false
	}
	if !this.Tunnel2Psk.Equal(that1.Tunnel2Psk) {
		return false
	}
	return true
}
func (this *AWSTGWType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AWSTGWType)
	if !ok {
		that2, ok := that.(AWSTGWType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.SiteName != that1.SiteName {
		return false
	}
	if this.AwsName != that1.AwsName {
		return false
	}
	if this.VoltVpcId != that1.VoltVpcId {
		return false
	}
	if this.FleetLabel != that1.FleetLabel {
		return false
	}
	if this.CertifiedHw != that1.CertifiedHw {
		return false
	}
	if !this.Tgw.Equal(that1.Tgw) {
		return false
	}
	if !this.Vpc.Equal(that1.Vpc) {
		return false
	}
	if len(this.Subnets) != len(that1.Subnets) {
		return false
	}
	for i := range this.Subnets {
		if !this.Subnets[i].Equal(that1.Subnets[i]) {
			return false
		}
	}
	if len(this.MasterNodes) != len(that1.MasterNodes) {
		return false
	}
	for i := range this.MasterNodes {
		if !this.MasterNodes[i].Equal(that1.MasterNodes[i]) {
			return false
		}
	}
	if this.WorkerNodes != that1.WorkerNodes {
		return false
	}
	if this.AwsRegion != that1.AwsRegion {
		return false
	}
	if this.SshKey != that1.SshKey {
		return false
	}
	if len(this.VpcIds) != len(that1.VpcIds) {
		return false
	}
	for i := range this.VpcIds {
		if this.VpcIds[i] != that1.VpcIds[i] {
			return false
		}
	}
	if len(this.TunnelInformation) != len(that1.TunnelInformation) {
		return false
	}
	for i := range this.TunnelInformation {
		if !this.TunnelInformation[i].Equal(that1.TunnelInformation[i]) {
			return false
		}
	}
	return true
}
func (this *AWSInstanceType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 14)
	s = append(s, "&terraform_parameters.AWSInstanceType{")
	s = append(s, "VoltNodeId: "+fmt.Sprintf("%#v", this.VoltNodeId)+",\n")
	s = append(s, "VoltVpcId: "+fmt.Sprintf("%#v", this.VoltVpcId)+",\n")
	s = append(s, "PublicSubnetId: "+fmt.Sprintf("%#v", this.PublicSubnetId)+",\n")
	s = append(s, "PrivateSubnetId: "+fmt.Sprintf("%#v", this.PrivateSubnetId)+",\n")
	s = append(s, "InstanceType: "+fmt.Sprintf("%#v", this.InstanceType)+",\n")
	s = append(s, "DiskSize: "+fmt.Sprintf("%#v", this.DiskSize)+",\n")
	s = append(s, "AmiId: "+fmt.Sprintf("%#v", this.AmiId)+",\n")
	s = append(s, "NodeCount: "+fmt.Sprintf("%#v", this.NodeCount)+",\n")
	s = append(s, "EbsVolumeSize: "+fmt.Sprintf("%#v", this.EbsVolumeSize)+",\n")
	s = append(s, "EbsVolumeAz: "+fmt.Sprintf("%#v", this.EbsVolumeAz)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CloudSubnetType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&terraform_parameters.CloudSubnetType{")
	if this.SubnetParam != nil {
		s = append(s, "SubnetParam: "+fmt.Sprintf("%#v", this.SubnetParam)+",\n")
	}
	s = append(s, "ExistingSubnetId: "+fmt.Sprintf("%#v", this.ExistingSubnetId)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SubnetType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&terraform_parameters.SubnetType{")
	s = append(s, "VoltSubnetId: "+fmt.Sprintf("%#v", this.VoltSubnetId)+",\n")
	s = append(s, "VoltVpcId: "+fmt.Sprintf("%#v", this.VoltVpcId)+",\n")
	s = append(s, "Az: "+fmt.Sprintf("%#v", this.Az)+",\n")
	if this.Subnet != nil {
		s = append(s, "Subnet: "+fmt.Sprintf("%#v", this.Subnet)+",\n")
	}
	s = append(s, "InterfaceType: "+fmt.Sprintf("%#v", this.InterfaceType)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AWSVPCInfoType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&terraform_parameters.AWSVPCInfoType{")
	if this.NewVpc != nil {
		s = append(s, "NewVpc: "+fmt.Sprintf("%#v", this.NewVpc)+",\n")
	}
	s = append(s, "VpcId: "+fmt.Sprintf("%#v", this.VpcId)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AWSTGWInfoType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&terraform_parameters.AWSTGWInfoType{")
	s = append(s, "NewTgw: "+fmt.Sprintf("%#v", this.NewTgw)+",\n")
	s = append(s, "TgwId: "+fmt.Sprintf("%#v", this.TgwId)+",\n")
	s = append(s, "TgwAsn: "+fmt.Sprintf("%#v", this.TgwAsn)+",\n")
	s = append(s, "VolterraSiteAsn: "+fmt.Sprintf("%#v", this.VolterraSiteAsn)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AWSVPCType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 16)
	s = append(s, "&terraform_parameters.AWSVPCType{")
	s = append(s, "SiteName: "+fmt.Sprintf("%#v", this.SiteName)+",\n")
	s = append(s, "AwsName: "+fmt.Sprintf("%#v", this.AwsName)+",\n")
	s = append(s, "VoltVpcId: "+fmt.Sprintf("%#v", this.VoltVpcId)+",\n")
	s = append(s, "FleetLabel: "+fmt.Sprintf("%#v", this.FleetLabel)+",\n")
	s = append(s, "CertifiedHw: "+fmt.Sprintf("%#v", this.CertifiedHw)+",\n")
	if this.Vpc != nil {
		s = append(s, "Vpc: "+fmt.Sprintf("%#v", this.Vpc)+",\n")
	}
	if this.Subnets != nil {
		s = append(s, "Subnets: "+fmt.Sprintf("%#v", this.Subnets)+",\n")
	}
	if this.MasterNodes != nil {
		s = append(s, "MasterNodes: "+fmt.Sprintf("%#v", this.MasterNodes)+",\n")
	}
	s = append(s, "WorkerNodes: "+fmt.Sprintf("%#v", this.WorkerNodes)+",\n")
	s = append(s, "GatewayType: "+fmt.Sprintf("%#v", this.GatewayType)+",\n")
	s = append(s, "AwsRegion: "+fmt.Sprintf("%#v", this.AwsRegion)+",\n")
	s = append(s, "SshKey: "+fmt.Sprintf("%#v", this.SshKey)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AWSTGWTunnelInfoType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&terraform_parameters.AWSTGWTunnelInfoType{")
	s = append(s, "NodeName: "+fmt.Sprintf("%#v", this.NodeName)+",\n")
	s = append(s, "Tunnel1InsidePrefix: "+fmt.Sprintf("%#v", this.Tunnel1InsidePrefix)+",\n")
	s = append(s, "Tunnel2InsidePrefix: "+fmt.Sprintf("%#v", this.Tunnel2InsidePrefix)+",\n")
	if this.Tunnel1Psk != nil {
		s = append(s, "Tunnel1Psk: "+fmt.Sprintf("%#v", this.Tunnel1Psk)+",\n")
	}
	if this.Tunnel2Psk != nil {
		s = append(s, "Tunnel2Psk: "+fmt.Sprintf("%#v", this.Tunnel2Psk)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AWSTGWType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 18)
	s = append(s, "&terraform_parameters.AWSTGWType{")
	s = append(s, "SiteName: "+fmt.Sprintf("%#v", this.SiteName)+",\n")
	s = append(s, "AwsName: "+fmt.Sprintf("%#v", this.AwsName)+",\n")
	s = append(s, "VoltVpcId: "+fmt.Sprintf("%#v", this.VoltVpcId)+",\n")
	s = append(s, "FleetLabel: "+fmt.Sprintf("%#v", this.FleetLabel)+",\n")
	s = append(s, "CertifiedHw: "+fmt.Sprintf("%#v", this.CertifiedHw)+",\n")
	if this.Tgw != nil {
		s = append(s, "Tgw: "+fmt.Sprintf("%#v", this.Tgw)+",\n")
	}
	if this.Vpc != nil {
		s = append(s, "Vpc: "+fmt.Sprintf("%#v", this.Vpc)+",\n")
	}
	if this.Subnets != nil {
		s = append(s, "Subnets: "+fmt.Sprintf("%#v", this.Subnets)+",\n")
	}
	if this.MasterNodes != nil {
		s = append(s, "MasterNodes: "+fmt.Sprintf("%#v", this.MasterNodes)+",\n")
	}
	s = append(s, "WorkerNodes: "+fmt.Sprintf("%#v", this.WorkerNodes)+",\n")
	s = append(s, "AwsRegion: "+fmt.Sprintf("%#v", this.AwsRegion)+",\n")
	s = append(s, "SshKey: "+fmt.Sprintf("%#v", this.SshKey)+",\n")
	s = append(s, "VpcIds: "+fmt.Sprintf("%#v", this.VpcIds)+",\n")
	if this.TunnelInformation != nil {
		s = append(s, "TunnelInformation: "+fmt.Sprintf("%#v", this.TunnelInformation)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringAwsTypes(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *AWSInstanceType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AWSInstanceType) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.VoltNodeId) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAwsTypes(dAtA, i, uint64(len(m.VoltNodeId)))
		i += copy(dAtA[i:], m.VoltNodeId)
	}
	if len(m.VoltVpcId) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintAwsTypes(dAtA, i, uint64(len(m.VoltVpcId)))
		i += copy(dAtA[i:], m.VoltVpcId)
	}
	if len(m.PublicSubnetId) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintAwsTypes(dAtA, i, uint64(len(m.PublicSubnetId)))
		i += copy(dAtA[i:], m.PublicSubnetId)
	}
	if len(m.PrivateSubnetId) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintAwsTypes(dAtA, i, uint64(len(m.PrivateSubnetId)))
		i += copy(dAtA[i:], m.PrivateSubnetId)
	}
	if len(m.InstanceType) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintAwsTypes(dAtA, i, uint64(len(m.InstanceType)))
		i += copy(dAtA[i:], m.InstanceType)
	}
	if len(m.DiskSize) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintAwsTypes(dAtA, i, uint64(len(m.DiskSize)))
		i += copy(dAtA[i:], m.DiskSize)
	}
	if len(m.AmiId) > 0 {
		dAtA[i] = 0x42
		i++
		i = encodeVarintAwsTypes(dAtA, i, uint64(len(m.AmiId)))
		i += copy(dAtA[i:], m.AmiId)
	}
	if m.NodeCount != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintAwsTypes(dAtA, i, uint64(m.NodeCount))
	}
	if m.EbsVolumeSize != 0 {
		dAtA[i] = 0x50
		i++
		i = encodeVarintAwsTypes(dAtA, i, uint64(m.EbsVolumeSize))
	}
	if len(m.EbsVolumeAz) > 0 {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintAwsTypes(dAtA, i, uint64(len(m.EbsVolumeAz)))
		i += copy(dAtA[i:], m.EbsVolumeAz)
	}
	return i, nil
}

func (m *CloudSubnetType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CloudSubnetType) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.SubnetParam != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAwsTypes(dAtA, i, uint64(m.SubnetParam.Size()))
		n1, err := m.SubnetParam.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if len(m.ExistingSubnetId) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintAwsTypes(dAtA, i, uint64(len(m.ExistingSubnetId)))
		i += copy(dAtA[i:], m.ExistingSubnetId)
	}
	return i, nil
}

func (m *SubnetType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SubnetType) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.VoltSubnetId) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAwsTypes(dAtA, i, uint64(len(m.VoltSubnetId)))
		i += copy(dAtA[i:], m.VoltSubnetId)
	}
	if len(m.VoltVpcId) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintAwsTypes(dAtA, i, uint64(len(m.VoltVpcId)))
		i += copy(dAtA[i:], m.VoltVpcId)
	}
	if len(m.Az) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintAwsTypes(dAtA, i, uint64(len(m.Az)))
		i += copy(dAtA[i:], m.Az)
	}
	if m.Subnet != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintAwsTypes(dAtA, i, uint64(m.Subnet.Size()))
		n2, err := m.Subnet.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if m.InterfaceType != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintAwsTypes(dAtA, i, uint64(m.InterfaceType))
	}
	return i, nil
}

func (m *AWSVPCInfoType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AWSVPCInfoType) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.NewVpc != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAwsTypes(dAtA, i, uint64(m.NewVpc.Size()))
		n3, err := m.NewVpc.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	if len(m.VpcId) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintAwsTypes(dAtA, i, uint64(len(m.VpcId)))
		i += copy(dAtA[i:], m.VpcId)
	}
	return i, nil
}

func (m *AWSTGWInfoType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AWSTGWInfoType) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.NewTgw {
		dAtA[i] = 0x8
		i++
		if m.NewTgw {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.TgwId) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintAwsTypes(dAtA, i, uint64(len(m.TgwId)))
		i += copy(dAtA[i:], m.TgwId)
	}
	if m.TgwAsn != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintAwsTypes(dAtA, i, uint64(m.TgwAsn))
	}
	if m.VolterraSiteAsn != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintAwsTypes(dAtA, i, uint64(m.VolterraSiteAsn))
	}
	return i, nil
}

func (m *AWSVPCType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AWSVPCType) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.VoltVpcId) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAwsTypes(dAtA, i, uint64(len(m.VoltVpcId)))
		i += copy(dAtA[i:], m.VoltVpcId)
	}
	if len(m.FleetLabel) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintAwsTypes(dAtA, i, uint64(len(m.FleetLabel)))
		i += copy(dAtA[i:], m.FleetLabel)
	}
	if len(m.CertifiedHw) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintAwsTypes(dAtA, i, uint64(len(m.CertifiedHw)))
		i += copy(dAtA[i:], m.CertifiedHw)
	}
	if m.Vpc != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintAwsTypes(dAtA, i, uint64(m.Vpc.Size()))
		n4, err := m.Vpc.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	if len(m.Subnets) > 0 {
		for _, msg := range m.Subnets {
			dAtA[i] = 0x2a
			i++
			i = encodeVarintAwsTypes(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.MasterNodes) > 0 {
		for _, msg := range m.MasterNodes {
			dAtA[i] = 0x32
			i++
			i = encodeVarintAwsTypes(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.AwsRegion) > 0 {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintAwsTypes(dAtA, i, uint64(len(m.AwsRegion)))
		i += copy(dAtA[i:], m.AwsRegion)
	}
	if len(m.SiteName) > 0 {
		dAtA[i] = 0x52
		i++
		i = encodeVarintAwsTypes(dAtA, i, uint64(len(m.SiteName)))
		i += copy(dAtA[i:], m.SiteName)
	}
	if m.GatewayType != 0 {
		dAtA[i] = 0x58
		i++
		i = encodeVarintAwsTypes(dAtA, i, uint64(m.GatewayType))
	}
	if len(m.SshKey) > 0 {
		dAtA[i] = 0x6a
		i++
		i = encodeVarintAwsTypes(dAtA, i, uint64(len(m.SshKey)))
		i += copy(dAtA[i:], m.SshKey)
	}
	if m.WorkerNodes != 0 {
		dAtA[i] = 0x70
		i++
		i = encodeVarintAwsTypes(dAtA, i, uint64(m.WorkerNodes))
	}
	if len(m.AwsName) > 0 {
		dAtA[i] = 0x7a
		i++
		i = encodeVarintAwsTypes(dAtA, i, uint64(len(m.AwsName)))
		i += copy(dAtA[i:], m.AwsName)
	}
	return i, nil
}

func (m *AWSTGWTunnelInfoType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AWSTGWTunnelInfoType) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.NodeName) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAwsTypes(dAtA, i, uint64(len(m.NodeName)))
		i += copy(dAtA[i:], m.NodeName)
	}
	if len(m.Tunnel1InsidePrefix) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintAwsTypes(dAtA, i, uint64(len(m.Tunnel1InsidePrefix)))
		i += copy(dAtA[i:], m.Tunnel1InsidePrefix)
	}
	if len(m.Tunnel2InsidePrefix) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintAwsTypes(dAtA, i, uint64(len(m.Tunnel2InsidePrefix)))
		i += copy(dAtA[i:], m.Tunnel2InsidePrefix)
	}
	if m.Tunnel1Psk != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintAwsTypes(dAtA, i, uint64(m.Tunnel1Psk.Size()))
		n5, err := m.Tunnel1Psk.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	if m.Tunnel2Psk != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintAwsTypes(dAtA, i, uint64(m.Tunnel2Psk.Size()))
		n6, err := m.Tunnel2Psk.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	return i, nil
}

func (m *AWSTGWType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AWSTGWType) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.SiteName) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAwsTypes(dAtA, i, uint64(len(m.SiteName)))
		i += copy(dAtA[i:], m.SiteName)
	}
	if len(m.VoltVpcId) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintAwsTypes(dAtA, i, uint64(len(m.VoltVpcId)))
		i += copy(dAtA[i:], m.VoltVpcId)
	}
	if len(m.FleetLabel) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintAwsTypes(dAtA, i, uint64(len(m.FleetLabel)))
		i += copy(dAtA[i:], m.FleetLabel)
	}
	if len(m.CertifiedHw) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintAwsTypes(dAtA, i, uint64(len(m.CertifiedHw)))
		i += copy(dAtA[i:], m.CertifiedHw)
	}
	if m.Tgw != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintAwsTypes(dAtA, i, uint64(m.Tgw.Size()))
		n7, err := m.Tgw.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	if m.Vpc != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintAwsTypes(dAtA, i, uint64(m.Vpc.Size()))
		n8, err := m.Vpc.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n8
	}
	if len(m.Subnets) > 0 {
		for _, msg := range m.Subnets {
			dAtA[i] = 0x3a
			i++
			i = encodeVarintAwsTypes(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.MasterNodes) > 0 {
		for _, msg := range m.MasterNodes {
			dAtA[i] = 0x42
			i++
			i = encodeVarintAwsTypes(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.WorkerNodes != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintAwsTypes(dAtA, i, uint64(m.WorkerNodes))
	}
	if len(m.AwsRegion) > 0 {
		dAtA[i] = 0x52
		i++
		i = encodeVarintAwsTypes(dAtA, i, uint64(len(m.AwsRegion)))
		i += copy(dAtA[i:], m.AwsRegion)
	}
	if len(m.SshKey) > 0 {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintAwsTypes(dAtA, i, uint64(len(m.SshKey)))
		i += copy(dAtA[i:], m.SshKey)
	}
	if len(m.VpcIds) > 0 {
		for _, s := range m.VpcIds {
			dAtA[i] = 0x62
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.TunnelInformation) > 0 {
		for _, msg := range m.TunnelInformation {
			dAtA[i] = 0x6a
			i++
			i = encodeVarintAwsTypes(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.AwsName) > 0 {
		dAtA[i] = 0x7a
		i++
		i = encodeVarintAwsTypes(dAtA, i, uint64(len(m.AwsName)))
		i += copy(dAtA[i:], m.AwsName)
	}
	return i, nil
}

func encodeVarintAwsTypes(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func NewPopulatedAWSInstanceType(r randyAwsTypes, easy bool) *AWSInstanceType {
	this := &AWSInstanceType{}
	this.VoltNodeId = string(randStringAwsTypes(r))
	this.VoltVpcId = string(randStringAwsTypes(r))
	this.PublicSubnetId = string(randStringAwsTypes(r))
	this.PrivateSubnetId = string(randStringAwsTypes(r))
	this.InstanceType = string(randStringAwsTypes(r))
	this.DiskSize = string(randStringAwsTypes(r))
	this.AmiId = string(randStringAwsTypes(r))
	this.NodeCount = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.NodeCount *= -1
	}
	this.EbsVolumeSize = uint32(r.Uint32())
	this.EbsVolumeAz = string(randStringAwsTypes(r))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedCloudSubnetType(r randyAwsTypes, easy bool) *CloudSubnetType {
	this := &CloudSubnetType{}
	if r.Intn(10) != 0 {
		this.SubnetParam = ves_io_schema_views1.NewPopulatedCloudSubnetParamType(r, easy)
	}
	this.ExistingSubnetId = string(randStringAwsTypes(r))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedSubnetType(r randyAwsTypes, easy bool) *SubnetType {
	this := &SubnetType{}
	this.VoltSubnetId = string(randStringAwsTypes(r))
	this.VoltVpcId = string(randStringAwsTypes(r))
	this.Az = string(randStringAwsTypes(r))
	if r.Intn(10) != 0 {
		this.Subnet = NewPopulatedCloudSubnetType(r, easy)
	}
	this.InterfaceType = InterfaceType([]int32{0, 1, 2}[r.Intn(3)])
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedAWSVPCInfoType(r randyAwsTypes, easy bool) *AWSVPCInfoType {
	this := &AWSVPCInfoType{}
	if r.Intn(10) != 0 {
		this.NewVpc = ves_io_schema_views1.NewPopulatedAWSVPCParamsType(r, easy)
	}
	this.VpcId = string(randStringAwsTypes(r))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedAWSTGWInfoType(r randyAwsTypes, easy bool) *AWSTGWInfoType {
	this := &AWSTGWInfoType{}
	this.NewTgw = bool(bool(r.Intn(2) == 0))
	this.TgwId = string(randStringAwsTypes(r))
	this.TgwAsn = uint32(r.Uint32())
	this.VolterraSiteAsn = uint32(r.Uint32())
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedAWSVPCType(r randyAwsTypes, easy bool) *AWSVPCType {
	this := &AWSVPCType{}
	this.VoltVpcId = string(randStringAwsTypes(r))
	this.FleetLabel = string(randStringAwsTypes(r))
	this.CertifiedHw = string(randStringAwsTypes(r))
	if r.Intn(10) != 0 {
		this.Vpc = NewPopulatedAWSVPCInfoType(r, easy)
	}
	if r.Intn(10) != 0 {
		v1 := r.Intn(5)
		this.Subnets = make([]*SubnetType, v1)
		for i := 0; i < v1; i++ {
			this.Subnets[i] = NewPopulatedSubnetType(r, easy)
		}
	}
	if r.Intn(10) != 0 {
		v2 := r.Intn(5)
		this.MasterNodes = make([]*AWSInstanceType, v2)
		for i := 0; i < v2; i++ {
			this.MasterNodes[i] = NewPopulatedAWSInstanceType(r, easy)
		}
	}
	this.AwsRegion = string(randStringAwsTypes(r))
	this.SiteName = string(randStringAwsTypes(r))
	this.GatewayType = CloudGatewayType([]int32{0, 1}[r.Intn(2)])
	this.SshKey = string(randStringAwsTypes(r))
	this.WorkerNodes = uint32(r.Uint32())
	this.AwsName = string(randStringAwsTypes(r))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedAWSTGWTunnelInfoType(r randyAwsTypes, easy bool) *AWSTGWTunnelInfoType {
	this := &AWSTGWTunnelInfoType{}
	this.NodeName = string(randStringAwsTypes(r))
	this.Tunnel1InsidePrefix = string(randStringAwsTypes(r))
	this.Tunnel2InsidePrefix = string(randStringAwsTypes(r))
	if r.Intn(10) != 0 {
		this.Tunnel1Psk = ves_io_schema4.NewPopulatedSecretType(r, easy)
	}
	if r.Intn(10) != 0 {
		this.Tunnel2Psk = ves_io_schema4.NewPopulatedSecretType(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedAWSTGWType(r randyAwsTypes, easy bool) *AWSTGWType {
	this := &AWSTGWType{}
	this.SiteName = string(randStringAwsTypes(r))
	this.VoltVpcId = string(randStringAwsTypes(r))
	this.FleetLabel = string(randStringAwsTypes(r))
	this.CertifiedHw = string(randStringAwsTypes(r))
	if r.Intn(10) != 0 {
		this.Tgw = NewPopulatedAWSTGWInfoType(r, easy)
	}
	if r.Intn(10) != 0 {
		this.Vpc = NewPopulatedAWSVPCInfoType(r, easy)
	}
	if r.Intn(10) != 0 {
		v3 := r.Intn(5)
		this.Subnets = make([]*SubnetType, v3)
		for i := 0; i < v3; i++ {
			this.Subnets[i] = NewPopulatedSubnetType(r, easy)
		}
	}
	if r.Intn(10) != 0 {
		v4 := r.Intn(5)
		this.MasterNodes = make([]*AWSInstanceType, v4)
		for i := 0; i < v4; i++ {
			this.MasterNodes[i] = NewPopulatedAWSInstanceType(r, easy)
		}
	}
	this.WorkerNodes = uint32(r.Uint32())
	this.AwsRegion = string(randStringAwsTypes(r))
	this.SshKey = string(randStringAwsTypes(r))
	v5 := r.Intn(10)
	this.VpcIds = make([]string, v5)
	for i := 0; i < v5; i++ {
		this.VpcIds[i] = string(randStringAwsTypes(r))
	}
	if r.Intn(10) != 0 {
		v6 := r.Intn(5)
		this.TunnelInformation = make([]*AWSTGWTunnelInfoType, v6)
		for i := 0; i < v6; i++ {
			this.TunnelInformation[i] = NewPopulatedAWSTGWTunnelInfoType(r, easy)
		}
	}
	this.AwsName = string(randStringAwsTypes(r))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

type randyAwsTypes interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneAwsTypes(r randyAwsTypes) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringAwsTypes(r randyAwsTypes) string {
	v7 := r.Intn(100)
	tmps := make([]rune, v7)
	for i := 0; i < v7; i++ {
		tmps[i] = randUTF8RuneAwsTypes(r)
	}
	return string(tmps)
}
func randUnrecognizedAwsTypes(r randyAwsTypes, maxFieldNumber int) (dAtA []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		dAtA = randFieldAwsTypes(dAtA, r, fieldNumber, wire)
	}
	return dAtA
}
func randFieldAwsTypes(dAtA []byte, r randyAwsTypes, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		dAtA = encodeVarintPopulateAwsTypes(dAtA, uint64(key))
		v8 := r.Int63()
		if r.Intn(2) == 0 {
			v8 *= -1
		}
		dAtA = encodeVarintPopulateAwsTypes(dAtA, uint64(v8))
	case 1:
		dAtA = encodeVarintPopulateAwsTypes(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		dAtA = encodeVarintPopulateAwsTypes(dAtA, uint64(key))
		ll := r.Intn(100)
		dAtA = encodeVarintPopulateAwsTypes(dAtA, uint64(ll))
		for j := 0; j < ll; j++ {
			dAtA = append(dAtA, byte(r.Intn(256)))
		}
	default:
		dAtA = encodeVarintPopulateAwsTypes(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return dAtA
}
func encodeVarintPopulateAwsTypes(dAtA []byte, v uint64) []byte {
	for v >= 1<<7 {
		dAtA = append(dAtA, uint8(uint64(v)&0x7f|0x80))
		v >>= 7
	}
	dAtA = append(dAtA, uint8(v))
	return dAtA
}
func (m *AWSInstanceType) Size() (n int) {
	var l int
	_ = l
	l = len(m.VoltNodeId)
	if l > 0 {
		n += 1 + l + sovAwsTypes(uint64(l))
	}
	l = len(m.VoltVpcId)
	if l > 0 {
		n += 1 + l + sovAwsTypes(uint64(l))
	}
	l = len(m.PublicSubnetId)
	if l > 0 {
		n += 1 + l + sovAwsTypes(uint64(l))
	}
	l = len(m.PrivateSubnetId)
	if l > 0 {
		n += 1 + l + sovAwsTypes(uint64(l))
	}
	l = len(m.InstanceType)
	if l > 0 {
		n += 1 + l + sovAwsTypes(uint64(l))
	}
	l = len(m.DiskSize)
	if l > 0 {
		n += 1 + l + sovAwsTypes(uint64(l))
	}
	l = len(m.AmiId)
	if l > 0 {
		n += 1 + l + sovAwsTypes(uint64(l))
	}
	if m.NodeCount != 0 {
		n += 1 + sovAwsTypes(uint64(m.NodeCount))
	}
	if m.EbsVolumeSize != 0 {
		n += 1 + sovAwsTypes(uint64(m.EbsVolumeSize))
	}
	l = len(m.EbsVolumeAz)
	if l > 0 {
		n += 1 + l + sovAwsTypes(uint64(l))
	}
	return n
}

func (m *CloudSubnetType) Size() (n int) {
	var l int
	_ = l
	if m.SubnetParam != nil {
		l = m.SubnetParam.Size()
		n += 1 + l + sovAwsTypes(uint64(l))
	}
	l = len(m.ExistingSubnetId)
	if l > 0 {
		n += 1 + l + sovAwsTypes(uint64(l))
	}
	return n
}

func (m *SubnetType) Size() (n int) {
	var l int
	_ = l
	l = len(m.VoltSubnetId)
	if l > 0 {
		n += 1 + l + sovAwsTypes(uint64(l))
	}
	l = len(m.VoltVpcId)
	if l > 0 {
		n += 1 + l + sovAwsTypes(uint64(l))
	}
	l = len(m.Az)
	if l > 0 {
		n += 1 + l + sovAwsTypes(uint64(l))
	}
	if m.Subnet != nil {
		l = m.Subnet.Size()
		n += 1 + l + sovAwsTypes(uint64(l))
	}
	if m.InterfaceType != 0 {
		n += 1 + sovAwsTypes(uint64(m.InterfaceType))
	}
	return n
}

func (m *AWSVPCInfoType) Size() (n int) {
	var l int
	_ = l
	if m.NewVpc != nil {
		l = m.NewVpc.Size()
		n += 1 + l + sovAwsTypes(uint64(l))
	}
	l = len(m.VpcId)
	if l > 0 {
		n += 1 + l + sovAwsTypes(uint64(l))
	}
	return n
}

func (m *AWSTGWInfoType) Size() (n int) {
	var l int
	_ = l
	if m.NewTgw {
		n += 2
	}
	l = len(m.TgwId)
	if l > 0 {
		n += 1 + l + sovAwsTypes(uint64(l))
	}
	if m.TgwAsn != 0 {
		n += 1 + sovAwsTypes(uint64(m.TgwAsn))
	}
	if m.VolterraSiteAsn != 0 {
		n += 1 + sovAwsTypes(uint64(m.VolterraSiteAsn))
	}
	return n
}

func (m *AWSVPCType) Size() (n int) {
	var l int
	_ = l
	l = len(m.VoltVpcId)
	if l > 0 {
		n += 1 + l + sovAwsTypes(uint64(l))
	}
	l = len(m.FleetLabel)
	if l > 0 {
		n += 1 + l + sovAwsTypes(uint64(l))
	}
	l = len(m.CertifiedHw)
	if l > 0 {
		n += 1 + l + sovAwsTypes(uint64(l))
	}
	if m.Vpc != nil {
		l = m.Vpc.Size()
		n += 1 + l + sovAwsTypes(uint64(l))
	}
	if len(m.Subnets) > 0 {
		for _, e := range m.Subnets {
			l = e.Size()
			n += 1 + l + sovAwsTypes(uint64(l))
		}
	}
	if len(m.MasterNodes) > 0 {
		for _, e := range m.MasterNodes {
			l = e.Size()
			n += 1 + l + sovAwsTypes(uint64(l))
		}
	}
	l = len(m.AwsRegion)
	if l > 0 {
		n += 1 + l + sovAwsTypes(uint64(l))
	}
	l = len(m.SiteName)
	if l > 0 {
		n += 1 + l + sovAwsTypes(uint64(l))
	}
	if m.GatewayType != 0 {
		n += 1 + sovAwsTypes(uint64(m.GatewayType))
	}
	l = len(m.SshKey)
	if l > 0 {
		n += 1 + l + sovAwsTypes(uint64(l))
	}
	if m.WorkerNodes != 0 {
		n += 1 + sovAwsTypes(uint64(m.WorkerNodes))
	}
	l = len(m.AwsName)
	if l > 0 {
		n += 1 + l + sovAwsTypes(uint64(l))
	}
	return n
}

func (m *AWSTGWTunnelInfoType) Size() (n int) {
	var l int
	_ = l
	l = len(m.NodeName)
	if l > 0 {
		n += 1 + l + sovAwsTypes(uint64(l))
	}
	l = len(m.Tunnel1InsidePrefix)
	if l > 0 {
		n += 1 + l + sovAwsTypes(uint64(l))
	}
	l = len(m.Tunnel2InsidePrefix)
	if l > 0 {
		n += 1 + l + sovAwsTypes(uint64(l))
	}
	if m.Tunnel1Psk != nil {
		l = m.Tunnel1Psk.Size()
		n += 1 + l + sovAwsTypes(uint64(l))
	}
	if m.Tunnel2Psk != nil {
		l = m.Tunnel2Psk.Size()
		n += 1 + l + sovAwsTypes(uint64(l))
	}
	return n
}

func (m *AWSTGWType) Size() (n int) {
	var l int
	_ = l
	l = len(m.SiteName)
	if l > 0 {
		n += 1 + l + sovAwsTypes(uint64(l))
	}
	l = len(m.VoltVpcId)
	if l > 0 {
		n += 1 + l + sovAwsTypes(uint64(l))
	}
	l = len(m.FleetLabel)
	if l > 0 {
		n += 1 + l + sovAwsTypes(uint64(l))
	}
	l = len(m.CertifiedHw)
	if l > 0 {
		n += 1 + l + sovAwsTypes(uint64(l))
	}
	if m.Tgw != nil {
		l = m.Tgw.Size()
		n += 1 + l + sovAwsTypes(uint64(l))
	}
	if m.Vpc != nil {
		l = m.Vpc.Size()
		n += 1 + l + sovAwsTypes(uint64(l))
	}
	if len(m.Subnets) > 0 {
		for _, e := range m.Subnets {
			l = e.Size()
			n += 1 + l + sovAwsTypes(uint64(l))
		}
	}
	if len(m.MasterNodes) > 0 {
		for _, e := range m.MasterNodes {
			l = e.Size()
			n += 1 + l + sovAwsTypes(uint64(l))
		}
	}
	if m.WorkerNodes != 0 {
		n += 1 + sovAwsTypes(uint64(m.WorkerNodes))
	}
	l = len(m.AwsRegion)
	if l > 0 {
		n += 1 + l + sovAwsTypes(uint64(l))
	}
	l = len(m.SshKey)
	if l > 0 {
		n += 1 + l + sovAwsTypes(uint64(l))
	}
	if len(m.VpcIds) > 0 {
		for _, s := range m.VpcIds {
			l = len(s)
			n += 1 + l + sovAwsTypes(uint64(l))
		}
	}
	if len(m.TunnelInformation) > 0 {
		for _, e := range m.TunnelInformation {
			l = e.Size()
			n += 1 + l + sovAwsTypes(uint64(l))
		}
	}
	l = len(m.AwsName)
	if l > 0 {
		n += 1 + l + sovAwsTypes(uint64(l))
	}
	return n
}

func sovAwsTypes(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozAwsTypes(x uint64) (n int) {
	return sovAwsTypes(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *AWSInstanceType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AWSInstanceType{`,
		`VoltNodeId:` + fmt.Sprintf("%v", this.VoltNodeId) + `,`,
		`VoltVpcId:` + fmt.Sprintf("%v", this.VoltVpcId) + `,`,
		`PublicSubnetId:` + fmt.Sprintf("%v", this.PublicSubnetId) + `,`,
		`PrivateSubnetId:` + fmt.Sprintf("%v", this.PrivateSubnetId) + `,`,
		`InstanceType:` + fmt.Sprintf("%v", this.InstanceType) + `,`,
		`DiskSize:` + fmt.Sprintf("%v", this.DiskSize) + `,`,
		`AmiId:` + fmt.Sprintf("%v", this.AmiId) + `,`,
		`NodeCount:` + fmt.Sprintf("%v", this.NodeCount) + `,`,
		`EbsVolumeSize:` + fmt.Sprintf("%v", this.EbsVolumeSize) + `,`,
		`EbsVolumeAz:` + fmt.Sprintf("%v", this.EbsVolumeAz) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CloudSubnetType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CloudSubnetType{`,
		`SubnetParam:` + strings.Replace(fmt.Sprintf("%v", this.SubnetParam), "CloudSubnetParamType", "ves_io_schema_views1.CloudSubnetParamType", 1) + `,`,
		`ExistingSubnetId:` + fmt.Sprintf("%v", this.ExistingSubnetId) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SubnetType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SubnetType{`,
		`VoltSubnetId:` + fmt.Sprintf("%v", this.VoltSubnetId) + `,`,
		`VoltVpcId:` + fmt.Sprintf("%v", this.VoltVpcId) + `,`,
		`Az:` + fmt.Sprintf("%v", this.Az) + `,`,
		`Subnet:` + strings.Replace(fmt.Sprintf("%v", this.Subnet), "CloudSubnetType", "CloudSubnetType", 1) + `,`,
		`InterfaceType:` + fmt.Sprintf("%v", this.InterfaceType) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AWSVPCInfoType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AWSVPCInfoType{`,
		`NewVpc:` + strings.Replace(fmt.Sprintf("%v", this.NewVpc), "AWSVPCParamsType", "ves_io_schema_views1.AWSVPCParamsType", 1) + `,`,
		`VpcId:` + fmt.Sprintf("%v", this.VpcId) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AWSTGWInfoType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AWSTGWInfoType{`,
		`NewTgw:` + fmt.Sprintf("%v", this.NewTgw) + `,`,
		`TgwId:` + fmt.Sprintf("%v", this.TgwId) + `,`,
		`TgwAsn:` + fmt.Sprintf("%v", this.TgwAsn) + `,`,
		`VolterraSiteAsn:` + fmt.Sprintf("%v", this.VolterraSiteAsn) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AWSVPCType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AWSVPCType{`,
		`VoltVpcId:` + fmt.Sprintf("%v", this.VoltVpcId) + `,`,
		`FleetLabel:` + fmt.Sprintf("%v", this.FleetLabel) + `,`,
		`CertifiedHw:` + fmt.Sprintf("%v", this.CertifiedHw) + `,`,
		`Vpc:` + strings.Replace(fmt.Sprintf("%v", this.Vpc), "AWSVPCInfoType", "AWSVPCInfoType", 1) + `,`,
		`Subnets:` + strings.Replace(fmt.Sprintf("%v", this.Subnets), "SubnetType", "SubnetType", 1) + `,`,
		`MasterNodes:` + strings.Replace(fmt.Sprintf("%v", this.MasterNodes), "AWSInstanceType", "AWSInstanceType", 1) + `,`,
		`AwsRegion:` + fmt.Sprintf("%v", this.AwsRegion) + `,`,
		`SiteName:` + fmt.Sprintf("%v", this.SiteName) + `,`,
		`GatewayType:` + fmt.Sprintf("%v", this.GatewayType) + `,`,
		`SshKey:` + fmt.Sprintf("%v", this.SshKey) + `,`,
		`WorkerNodes:` + fmt.Sprintf("%v", this.WorkerNodes) + `,`,
		`AwsName:` + fmt.Sprintf("%v", this.AwsName) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AWSTGWTunnelInfoType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AWSTGWTunnelInfoType{`,
		`NodeName:` + fmt.Sprintf("%v", this.NodeName) + `,`,
		`Tunnel1InsidePrefix:` + fmt.Sprintf("%v", this.Tunnel1InsidePrefix) + `,`,
		`Tunnel2InsidePrefix:` + fmt.Sprintf("%v", this.Tunnel2InsidePrefix) + `,`,
		`Tunnel1Psk:` + strings.Replace(fmt.Sprintf("%v", this.Tunnel1Psk), "SecretType", "ves_io_schema4.SecretType", 1) + `,`,
		`Tunnel2Psk:` + strings.Replace(fmt.Sprintf("%v", this.Tunnel2Psk), "SecretType", "ves_io_schema4.SecretType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AWSTGWType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AWSTGWType{`,
		`SiteName:` + fmt.Sprintf("%v", this.SiteName) + `,`,
		`VoltVpcId:` + fmt.Sprintf("%v", this.VoltVpcId) + `,`,
		`FleetLabel:` + fmt.Sprintf("%v", this.FleetLabel) + `,`,
		`CertifiedHw:` + fmt.Sprintf("%v", this.CertifiedHw) + `,`,
		`Tgw:` + strings.Replace(fmt.Sprintf("%v", this.Tgw), "AWSTGWInfoType", "AWSTGWInfoType", 1) + `,`,
		`Vpc:` + strings.Replace(fmt.Sprintf("%v", this.Vpc), "AWSVPCInfoType", "AWSVPCInfoType", 1) + `,`,
		`Subnets:` + strings.Replace(fmt.Sprintf("%v", this.Subnets), "SubnetType", "SubnetType", 1) + `,`,
		`MasterNodes:` + strings.Replace(fmt.Sprintf("%v", this.MasterNodes), "AWSInstanceType", "AWSInstanceType", 1) + `,`,
		`WorkerNodes:` + fmt.Sprintf("%v", this.WorkerNodes) + `,`,
		`AwsRegion:` + fmt.Sprintf("%v", this.AwsRegion) + `,`,
		`SshKey:` + fmt.Sprintf("%v", this.SshKey) + `,`,
		`VpcIds:` + fmt.Sprintf("%v", this.VpcIds) + `,`,
		`TunnelInformation:` + strings.Replace(fmt.Sprintf("%v", this.TunnelInformation), "AWSTGWTunnelInfoType", "AWSTGWTunnelInfoType", 1) + `,`,
		`AwsName:` + fmt.Sprintf("%v", this.AwsName) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringAwsTypes(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *AWSInstanceType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAwsTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AWSInstanceType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AWSInstanceType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VoltNodeId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAwsTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAwsTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VoltNodeId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VoltVpcId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAwsTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAwsTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VoltVpcId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PublicSubnetId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAwsTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAwsTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PublicSubnetId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrivateSubnetId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAwsTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAwsTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PrivateSubnetId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InstanceType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAwsTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAwsTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InstanceType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DiskSize", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAwsTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAwsTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DiskSize = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AmiId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAwsTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAwsTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AmiId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeCount", wireType)
			}
			m.NodeCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAwsTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NodeCount |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EbsVolumeSize", wireType)
			}
			m.EbsVolumeSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAwsTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EbsVolumeSize |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EbsVolumeAz", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAwsTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAwsTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EbsVolumeAz = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAwsTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAwsTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CloudSubnetType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAwsTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CloudSubnetType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CloudSubnetType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubnetParam", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAwsTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAwsTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SubnetParam == nil {
				m.SubnetParam = &ves_io_schema_views1.CloudSubnetParamType{}
			}
			if err := m.SubnetParam.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExistingSubnetId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAwsTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAwsTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExistingSubnetId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAwsTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAwsTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SubnetType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAwsTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SubnetType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SubnetType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VoltSubnetId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAwsTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAwsTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VoltSubnetId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VoltVpcId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAwsTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAwsTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VoltVpcId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Az", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAwsTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAwsTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Az = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Subnet", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAwsTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAwsTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Subnet == nil {
				m.Subnet = &CloudSubnetType{}
			}
			if err := m.Subnet.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InterfaceType", wireType)
			}
			m.InterfaceType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAwsTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InterfaceType |= (InterfaceType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAwsTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAwsTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AWSVPCInfoType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAwsTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AWSVPCInfoType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AWSVPCInfoType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewVpc", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAwsTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAwsTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.NewVpc == nil {
				m.NewVpc = &ves_io_schema_views1.AWSVPCParamsType{}
			}
			if err := m.NewVpc.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VpcId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAwsTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAwsTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VpcId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAwsTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAwsTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AWSTGWInfoType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAwsTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AWSTGWInfoType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AWSTGWInfoType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewTgw", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAwsTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.NewTgw = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TgwId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAwsTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAwsTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TgwId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TgwAsn", wireType)
			}
			m.TgwAsn = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAwsTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TgwAsn |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VolterraSiteAsn", wireType)
			}
			m.VolterraSiteAsn = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAwsTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VolterraSiteAsn |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAwsTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAwsTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AWSVPCType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAwsTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AWSVPCType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AWSVPCType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VoltVpcId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAwsTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAwsTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VoltVpcId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FleetLabel", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAwsTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAwsTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FleetLabel = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CertifiedHw", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAwsTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAwsTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CertifiedHw = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vpc", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAwsTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAwsTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Vpc == nil {
				m.Vpc = &AWSVPCInfoType{}
			}
			if err := m.Vpc.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Subnets", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAwsTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAwsTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Subnets = append(m.Subnets, &SubnetType{})
			if err := m.Subnets[len(m.Subnets)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MasterNodes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAwsTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAwsTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MasterNodes = append(m.MasterNodes, &AWSInstanceType{})
			if err := m.MasterNodes[len(m.MasterNodes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AwsRegion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAwsTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAwsTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AwsRegion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SiteName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAwsTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAwsTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SiteName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GatewayType", wireType)
			}
			m.GatewayType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAwsTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GatewayType |= (CloudGatewayType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SshKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAwsTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAwsTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SshKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkerNodes", wireType)
			}
			m.WorkerNodes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAwsTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WorkerNodes |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AwsName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAwsTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAwsTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AwsName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAwsTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAwsTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AWSTGWTunnelInfoType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAwsTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AWSTGWTunnelInfoType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AWSTGWTunnelInfoType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAwsTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAwsTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NodeName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tunnel1InsidePrefix", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAwsTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAwsTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tunnel1InsidePrefix = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tunnel2InsidePrefix", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAwsTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAwsTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tunnel2InsidePrefix = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tunnel1Psk", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAwsTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAwsTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Tunnel1Psk == nil {
				m.Tunnel1Psk = &ves_io_schema4.SecretType{}
			}
			if err := m.Tunnel1Psk.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tunnel2Psk", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAwsTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAwsTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Tunnel2Psk == nil {
				m.Tunnel2Psk = &ves_io_schema4.SecretType{}
			}
			if err := m.Tunnel2Psk.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAwsTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAwsTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AWSTGWType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAwsTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AWSTGWType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AWSTGWType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SiteName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAwsTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAwsTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SiteName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VoltVpcId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAwsTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAwsTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VoltVpcId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FleetLabel", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAwsTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAwsTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FleetLabel = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CertifiedHw", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAwsTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAwsTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CertifiedHw = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tgw", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAwsTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAwsTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Tgw == nil {
				m.Tgw = &AWSTGWInfoType{}
			}
			if err := m.Tgw.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vpc", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAwsTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAwsTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Vpc == nil {
				m.Vpc = &AWSVPCInfoType{}
			}
			if err := m.Vpc.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Subnets", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAwsTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAwsTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Subnets = append(m.Subnets, &SubnetType{})
			if err := m.Subnets[len(m.Subnets)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MasterNodes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAwsTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAwsTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MasterNodes = append(m.MasterNodes, &AWSInstanceType{})
			if err := m.MasterNodes[len(m.MasterNodes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkerNodes", wireType)
			}
			m.WorkerNodes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAwsTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WorkerNodes |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AwsRegion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAwsTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAwsTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AwsRegion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SshKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAwsTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAwsTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SshKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VpcIds", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAwsTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAwsTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VpcIds = append(m.VpcIds, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TunnelInformation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAwsTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAwsTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TunnelInformation = append(m.TunnelInformation, &AWSTGWTunnelInfoType{})
			if err := m.TunnelInformation[len(m.TunnelInformation)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AwsName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAwsTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAwsTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AwsName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAwsTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAwsTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipAwsTypes(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowAwsTypes
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAwsTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAwsTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthAwsTypes
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowAwsTypes
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipAwsTypes(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthAwsTypes = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowAwsTypes   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("ves.io/schema/views/terraform_parameters/aws_types.proto", fileDescriptorAwsTypes)
}
func init() {
	golang_proto.RegisterFile("ves.io/schema/views/terraform_parameters/aws_types.proto", fileDescriptorAwsTypes)
}

var fileDescriptorAwsTypes = []byte{
	// 1266 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x56, 0x4f, 0x8f, 0xdb, 0x44,
	0x14, 0x5f, 0xe7, 0xaf, 0x3d, 0x4e, 0xb2, 0x5b, 0x43, 0x85, 0xbb, 0x05, 0x13, 0x42, 0x11, 0xa1,
	0xa2, 0x89, 0x48, 0x2b, 0xd1, 0xf6, 0x50, 0xb1, 0xdb, 0x43, 0xc9, 0x52, 0x55, 0x8b, 0x77, 0xb5,
	0x95, 0x10, 0xd4, 0x9a, 0xc4, 0x13, 0xef, 0x28, 0x89, 0x6d, 0x79, 0x26, 0x71, 0x77, 0x4f, 0xfd,
	0x02, 0x48, 0x08, 0x84, 0xe0, 0x23, 0xf0, 0x19, 0x38, 0xf5, 0xc8, 0xb1, 0xc7, 0x1e, 0xd9, 0xf4,
	0x02, 0x17, 0xd4, 0x23, 0x37, 0xd0, 0xbc, 0x71, 0xb2, 0x8e, 0x59, 0xd1, 0x14, 0x95, 0x5b, 0xfc,
	0xe6, 0xbd, 0xdf, 0xbc, 0x3f, 0xbf, 0xdf, 0xcb, 0xa0, 0xeb, 0x53, 0xc2, 0x5a, 0x34, 0x68, 0xb3,
	0xfe, 0x21, 0x19, 0xe3, 0xf6, 0x94, 0x92, 0x98, 0xb5, 0x39, 0x89, 0x22, 0x3c, 0x08, 0xa2, 0xb1,
	0x13, 0xe2, 0x08, 0x8f, 0x09, 0x27, 0x11, 0x6b, 0xe3, 0x98, 0x39, 0xfc, 0x28, 0x24, 0xac, 0x15,
	0x46, 0x01, 0x0f, 0x8c, 0xa6, 0x8c, 0x6c, 0xc9, 0xc8, 0x16, 0x44, 0xb6, 0xce, 0x8a, 0xdc, 0xbc,
	0xe2, 0x51, 0x7e, 0x38, 0xe9, 0xb5, 0xfa, 0xc1, 0xb8, 0xed, 0x05, 0x5e, 0xd0, 0x06, 0x80, 0xde,
	0x64, 0x00, 0x5f, 0xf0, 0x01, 0xbf, 0x24, 0xf0, 0xe6, 0xc5, 0xe5, 0x94, 0x82, 0x90, 0xd3, 0xc0,
	0x4f, 0x6e, 0xdd, 0xbc, 0xb0, 0x7c, 0x98, 0x4a, 0x68, 0xf3, 0xcd, 0x4c, 0x29, 0x78, 0x44, 0x5d,
	0xcc, 0x49, 0x72, 0x7a, 0xe9, 0xac, 0x42, 0x19, 0xe5, 0x24, 0x5d, 0xd4, 0xe6, 0xb5, 0x95, 0xdb,
	0x91, 0x8a, 0x6a, 0xfc, 0x95, 0x43, 0xeb, 0x5b, 0xf7, 0xf7, 0xba, 0x3e, 0xe3, 0xd8, 0xef, 0x93,
	0xfd, 0xa3, 0x90, 0x18, 0x75, 0x54, 0x99, 0x06, 0x23, 0xee, 0xf8, 0x81, 0x4b, 0x1c, 0xea, 0x9a,
	0x4a, 0x5d, 0x69, 0x6a, 0x36, 0x12, 0xb6, 0x7b, 0x81, 0x4b, 0xba, 0xae, 0x61, 0x21, 0x1d, 0x3c,
	0xa6, 0x61, 0x5f, 0x38, 0xe4, 0xc1, 0x41, 0x13, 0xa6, 0x83, 0xb0, 0xdf, 0x75, 0x8d, 0x26, 0xda,
	0x08, 0x27, 0xbd, 0x11, 0xed, 0x3b, 0x6c, 0xd2, 0xf3, 0x09, 0x17, 0x4e, 0x05, 0x70, 0xaa, 0x49,
	0xfb, 0x1e, 0x98, 0xbb, 0xae, 0x71, 0x19, 0x9d, 0x0b, 0x23, 0x3a, 0xc5, 0x9c, 0xa4, 0x5c, 0x8b,
	0xe0, 0xba, 0x9e, 0x1c, 0x2c, 0x7c, 0xdf, 0x45, 0x55, 0x9a, 0xe4, 0x09, 0x95, 0x9b, 0x25, 0xf0,
	0xab, 0xd0, 0x74, 0xf2, 0x17, 0x91, 0xe6, 0x52, 0x36, 0x74, 0x18, 0x3d, 0x26, 0x66, 0x19, 0x1c,
	0x54, 0x61, 0xd8, 0xa3, 0xc7, 0xc4, 0x38, 0x8f, 0x4a, 0x78, 0x4c, 0xc5, 0x15, 0x2a, 0x9c, 0x14,
	0xf1, 0x98, 0x76, 0x5d, 0xe3, 0x2d, 0x84, 0xa0, 0xd6, 0x7e, 0x30, 0xf1, 0xb9, 0xa9, 0xd5, 0x95,
	0x66, 0xd1, 0xd6, 0x84, 0xe5, 0xb6, 0x30, 0x18, 0x1d, 0xb4, 0x4e, 0x7a, 0xcc, 0x99, 0x06, 0xa3,
	0xc9, 0x98, 0x48, 0x60, 0x54, 0x57, 0x9a, 0xd5, 0x6d, 0xf4, 0xf3, 0xef, 0x8f, 0xf3, 0xc5, 0xcb,
	0x79, 0xf3, 0x91, 0x6a, 0x57, 0x49, 0x8f, 0x1d, 0x80, 0x07, 0xdc, 0xd4, 0x40, 0xd5, 0x54, 0x0c,
	0x3e, 0x36, 0x75, 0xb8, 0x50, 0x5f, 0x78, 0x6d, 0x1d, 0xef, 0x14, 0xd4, 0xdc, 0x46, 0xbe, 0xf1,
	0xb5, 0x82, 0xd6, 0x6f, 0x8f, 0x82, 0x89, 0x2b, 0xeb, 0x84, 0x22, 0xee, 0xa2, 0x4a, 0xd2, 0x0d,
	0x18, 0x1b, 0x4c, 0x40, 0xef, 0x7c, 0xd0, 0x3a, 0x8b, 0xb7, 0xa9, 0xd8, 0x5d, 0xe1, 0x2c, 0x00,
	0x6c, 0x9d, 0x9d, 0x1a, 0x8c, 0x0f, 0x91, 0x41, 0x1e, 0x52, 0xc6, 0xa9, 0xef, 0xa5, 0x9a, 0x9c,
	0x83, 0x84, 0x36, 0xe6, 0x27, 0xf3, 0x2e, 0x37, 0xbe, 0xcf, 0x21, 0x94, 0x4a, 0xe5, 0x12, 0xaa,
	0xc1, 0xa8, 0x4f, 0x03, 0x25, 0x1d, 0x80, 0x22, 0x8b, 0xd1, 0x64, 0x08, 0x91, 0xcb, 0x12, 0xa2,
	0x86, 0x72, 0xf8, 0x38, 0xe1, 0x49, 0x0e, 0x1f, 0x1b, 0x9f, 0xa3, 0x92, 0x04, 0x04, 0x5a, 0xe8,
	0x9d, 0x1b, 0xad, 0x55, 0x25, 0xd9, 0xca, 0xf4, 0xca, 0x4e, 0x80, 0x8c, 0x07, 0xa8, 0x46, 0x7d,
	0x4e, 0xa2, 0x01, 0x9e, 0xd3, 0x43, 0xd0, 0xa8, 0xd6, 0xf9, 0x78, 0x75, 0xe8, 0xee, 0x3c, 0x1e,
	0x80, 0xab, 0x34, 0xfd, 0xd9, 0xf0, 0x50, 0x6d, 0xeb, 0xfe, 0xde, 0xc1, 0xee, 0xed, 0xae, 0x3f,
	0x08, 0xa0, 0x35, 0xb7, 0x50, 0xd9, 0x27, 0xb1, 0xa8, 0x39, 0x19, 0xd0, 0x7b, 0x67, 0x5e, 0x25,
	0xa3, 0x60, 0x14, 0x4c, 0x66, 0xec, 0x93, 0xf8, 0x20, 0xec, 0x0b, 0x36, 0x2e, 0xf5, 0xab, 0x38,
	0x15, 0xbd, 0x6a, 0xfc, 0xa0, 0xc0, 0x4d, 0xfb, 0x77, 0xee, 0x2f, 0x6e, 0x7a, 0x43, 0xde, 0xc4,
	0xbd, 0x18, 0x6e, 0x52, 0x01, 0x62, 0xdf, 0x8b, 0x05, 0x04, 0xf7, 0xe2, 0x14, 0x04, 0xf7, 0xe2,
	0xae, 0x6b, 0xd4, 0x51, 0x59, 0x98, 0x31, 0xf3, 0xa1, 0xe7, 0xd5, 0xed, 0xb2, 0x60, 0x6a, 0xee,
	0xf2, 0x9a, 0x2d, 0xdc, 0xb7, 0x98, 0x6f, 0x5c, 0x45, 0xe7, 0xc4, 0x74, 0x44, 0x17, 0x1c, 0x58,
	0x25, 0xc2, 0xb7, 0xb0, 0xec, 0xbb, 0x3e, 0xf7, 0xd8, 0xa3, 0x9c, 0x6c, 0x31, 0xbf, 0xf1, 0x47,
	0x01, 0x21, 0x59, 0x0d, 0x64, 0x95, 0x19, 0xba, 0x92, 0x1d, 0xfa, 0xdb, 0x48, 0x1f, 0x8c, 0x08,
	0xe1, 0xce, 0x08, 0xf7, 0xc8, 0x28, 0xc9, 0x10, 0x81, 0xe9, 0xae, 0xb0, 0x18, 0xef, 0xa0, 0x4a,
	0x9f, 0x44, 0x9c, 0x0e, 0x28, 0x71, 0x9d, 0xc3, 0x38, 0xe1, 0x87, 0xbe, 0xb0, 0x7d, 0x1a, 0x1b,
	0x3b, 0x28, 0x2f, 0xfa, 0x2b, 0x59, 0x72, 0x7d, 0xf5, 0x51, 0x2e, 0x8f, 0xca, 0x16, 0x20, 0xc6,
	0x3d, 0x54, 0x96, 0x5c, 0x61, 0x66, 0xb1, 0x9e, 0x6f, 0xea, 0x9d, 0x6b, 0xab, 0xe3, 0xa5, 0x08,
	0x37, 0x07, 0x31, 0xbe, 0x44, 0x95, 0x31, 0x66, 0x9c, 0x44, 0xb0, 0x29, 0x99, 0x59, 0x02, 0xd0,
	0x1b, 0x2f, 0x95, 0x64, 0x7a, 0xf1, 0xda, 0xba, 0x84, 0x13, 0x4b, 0x96, 0x89, 0xa5, 0x24, 0xfe,
	0xb7, 0x22, 0xe2, 0xd1, 0xc0, 0x87, 0xa5, 0xa4, 0xd9, 0x1a, 0x8e, 0x99, 0x0d, 0x06, 0xb1, 0xe7,
	0x60, 0x6e, 0x3e, 0x1e, 0xcb, 0x75, 0xa4, 0xd9, 0xaa, 0x30, 0xdc, 0xc3, 0x63, 0x62, 0x7c, 0x85,
	0x2a, 0x1e, 0xe6, 0x24, 0xc6, 0x47, 0x52, 0x09, 0x3a, 0x28, 0xe1, 0xe6, 0x4b, 0x8a, 0xec, 0x8e,
	0x84, 0x90, 0xa9, 0x79, 0xa7, 0x1f, 0x82, 0x8e, 0x8c, 0x1d, 0x3a, 0x43, 0x72, 0x64, 0x56, 0xe1,
	0xe6, 0x12, 0x63, 0x87, 0x9f, 0x91, 0x23, 0x31, 0xd0, 0x38, 0x88, 0x86, 0x8b, 0x8e, 0xd4, 0x04,
	0xa1, 0x6c, 0x5d, 0xda, 0x64, 0x59, 0x17, 0x90, 0x2a, 0xca, 0x82, 0xb4, 0xd7, 0x21, 0xb8, 0x8c,
	0x63, 0x26, 0xb2, 0xde, 0x29, 0xa8, 0xe5, 0x0d, 0x75, 0xa7, 0xa0, 0xaa, 0x1b, 0xda, 0x4e, 0x41,
	0xad, 0x6c, 0x54, 0x1b, 0xdf, 0xe5, 0xd0, 0xeb, 0x52, 0x0a, 0xfb, 0x13, 0xdf, 0x27, 0xa3, 0x85,
	0x20, 0x2e, 0x22, 0xd8, 0xcf, 0x12, 0x46, 0x12, 0x4f, 0x15, 0x06, 0xa8, 0xbe, 0x83, 0xce, 0x73,
	0x70, 0xff, 0xc8, 0xa1, 0x3e, 0xa3, 0x2e, 0x71, 0xc2, 0x88, 0x0c, 0xe8, 0xc3, 0x84, 0x81, 0xaf,
	0x25, 0x87, 0x5d, 0x38, 0xdb, 0x85, 0xa3, 0xd3, 0x98, 0x4e, 0x26, 0x26, 0x9f, 0x8e, 0xe9, 0x2c,
	0xc5, 0xdc, 0x44, 0xfa, 0xfc, 0x9e, 0x90, 0x0d, 0x13, 0x8e, 0x5e, 0xc8, 0x34, 0x79, 0x8f, 0xf4,
	0xa3, 0x84, 0x38, 0x28, 0xf1, 0xde, 0x65, 0xc3, 0xd3, 0xd8, 0x0e, 0xc4, 0x16, 0x57, 0x8c, 0xed,
	0xec, 0xb2, 0x61, 0xe3, 0xa4, 0x08, 0x32, 0x14, 0x5d, 0x49, 0x7a, 0x71, 0xca, 0x04, 0x25, 0xc3,
	0x84, 0x17, 0x2d, 0xe6, 0x8c, 0x46, 0xf3, 0x2f, 0xd4, 0x68, 0xe1, 0x4c, 0x8d, 0x8a, 0xcd, 0x54,
	0xfc, 0x0f, 0x1a, 0x4d, 0x2d, 0x39, 0x5b, 0x80, 0xcc, 0xf5, 0x5e, 0x7a, 0xc5, 0x7a, 0x2f, 0xff,
	0x1f, 0x7a, 0x57, 0x5f, 0xa9, 0xde, 0xb3, 0xda, 0xd1, 0xfe, 0xa9, 0x9d, 0xe5, 0x95, 0x80, 0xb2,
	0x2b, 0x21, 0x25, 0x4b, 0x7d, 0x49, 0x96, 0xef, 0xa3, 0xb2, 0x9c, 0x3f, 0x33, 0x2b, 0xf5, 0x7c,
	0x53, 0xdb, 0xae, 0x89, 0x15, 0xaf, 0x7d, 0xab, 0x94, 0x1a, 0x85, 0x28, 0x67, 0x7e, 0x62, 0x97,
	0xe0, 0x9f, 0x87, 0x19, 0x63, 0x64, 0x48, 0x9e, 0x39, 0xd4, 0x17, 0xc9, 0x63, 0xf1, 0x7e, 0x35,
	0xab, 0x50, 0xe7, 0xad, 0x97, 0x1d, 0xec, 0xb2, 0x64, 0xed, 0x73, 0x7c, 0xf1, 0x9d, 0x00, 0xff,
	0xcb, 0x2e, 0xd8, 0xfe, 0x51, 0x79, 0x72, 0x62, 0xad, 0x3d, 0x3d, 0xb1, 0xd6, 0x9e, 0x9f, 0x58,
	0xca, 0x9f, 0x27, 0x96, 0xf2, 0x68, 0x66, 0x29, 0x3f, 0xcd, 0x2c, 0xe5, 0x97, 0x99, 0xa5, 0x3c,
	0x99, 0x59, 0xca, 0xd3, 0x99, 0xa5, 0xfc, 0x3a, 0xb3, 0x94, 0xdf, 0x66, 0xd6, 0xda, 0xf3, 0x99,
	0xa5, 0x7c, 0xf3, 0xcc, 0x5a, 0x7b, 0xfc, 0xcc, 0x52, 0xbe, 0x78, 0xe0, 0x05, 0xe1, 0xd0, 0x6b,
	0xcd, 0xff, 0xbc, 0x5a, 0x93, 0xd4, 0x33, 0xf8, 0x4a, 0x18, 0x05, 0x53, 0xea, 0x92, 0xe8, 0xca,
	0xfc, 0xb8, 0x1d, 0xf6, 0xbc, 0xa0, 0x4d, 0x1e, 0xf2, 0xe4, 0xdd, 0xfc, 0xc2, 0xe7, 0x73, 0xaf,
	0x04, 0x2f, 0xe7, 0xab, 0x7f, 0x07, 0x00, 0x00, 0xff, 0xff, 0x1b, 0xcf, 0x62, 0xcd, 0x80, 0x0c,
	0x00, 0x00,
}
