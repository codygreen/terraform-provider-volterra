// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ves.io/schema/views/terraform_parameters/public_customapi.proto

package terraform_parameters

import (
	proto "github.com/gogo/protobuf/proto"
	golang_proto "github.com/golang/protobuf/proto"

	fmt "fmt"

	math "math"

	_ "github.com/gogo/protobuf/gogoproto"

	_ "github.com/gogo/googleapis/google/api"

	_ "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"

	_ "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"

	_ "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"

	_ "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/vesenv"

	_ "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"

	_ "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/views"

	strings "strings"

	reflect "reflect"

	context "golang.org/x/net/context"

	grpc "google.golang.org/grpc"

	io "io"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Get Terraform Parameters for a View
//
// x-displayName: "Get Terraform Parameters for view"
// returned from list of terraform parameter objects for a given view.
type GetRequest struct {
	// Namespace
	//
	// x-displayName: "Namespace"
	// x-example: "value"
	// Namespace for the label to be retrieved
	Namespace string `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// Kind of View
	//
	// x-displayName: "Kind of View"
	// x-example: "value"
	// Kind of view of which terraform parameters are requested e.g. aws_vpc_site, azure_vnet_site
	ViewKind string `protobuf:"bytes,2,opt,name=view_kind,json=viewKind,proto3" json:"view_kind,omitempty"`
	// Name of view
	//
	// x-displayName: "Name of view"
	// x-example: "value"
	// Name of the view for which terraform parameters are requested
	ViewName string `protobuf:"bytes,3,opt,name=view_name,json=viewName,proto3" json:"view_name,omitempty"`
}

func (m *GetRequest) Reset()                    { *m = GetRequest{} }
func (*GetRequest) ProtoMessage()               {}
func (*GetRequest) Descriptor() ([]byte, []int) { return fileDescriptorPublicCustomapi, []int{0} }

func (m *GetRequest) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *GetRequest) GetViewKind() string {
	if m != nil {
		return m.ViewKind
	}
	return ""
}

func (m *GetRequest) GetViewName() string {
	if m != nil {
		return m.ViewName
	}
	return ""
}

// GetResponse
//
// x-displayName: "Get Response"
// Response for Get API
type GetResponse struct {
	// Terraform Parameters
	//
	// x-displayName: "Terraform Parameters"
	// Terraform Parameters details
	TerraformParameters *GlobalSpecType `protobuf:"bytes,1,opt,name=terraform_parameters,json=terraformParameters" json:"terraform_parameters,omitempty"`
}

func (m *GetResponse) Reset()                    { *m = GetResponse{} }
func (*GetResponse) ProtoMessage()               {}
func (*GetResponse) Descriptor() ([]byte, []int) { return fileDescriptorPublicCustomapi, []int{1} }

func (m *GetResponse) GetTerraformParameters() *GlobalSpecType {
	if m != nil {
		return m.TerraformParameters
	}
	return nil
}

// GetStatusResponse
//
// x-displayName: "Get Status Response"
// Response for GetStatus API
type GetStatusResponse struct {
	// Status Object
	//
	// x-displayName: "Terraform Status Object"
	// Status Object of Terraform for a view
	Status *StatusObject `protobuf:"bytes,1,opt,name=status" json:"status,omitempty"`
}

func (m *GetStatusResponse) Reset()      { *m = GetStatusResponse{} }
func (*GetStatusResponse) ProtoMessage() {}
func (*GetStatusResponse) Descriptor() ([]byte, []int) {
	return fileDescriptorPublicCustomapi, []int{2}
}

func (m *GetStatusResponse) GetStatus() *StatusObject {
	if m != nil {
		return m.Status
	}
	return nil
}

// Run Terraform Action for view
//
// x-displayName: "Run Terraform Action for view"
// perform terraform actions for a given view. Supported actions are apply and plan.
type RunRequest struct {
	// Namespace
	//
	// x-displayName: "Namespace"
	// x-example: "value"
	// Namespace for the label to be retrieved
	Namespace string `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// Kind of View
	//
	// x-displayName: "Kind of View"
	// x-example: "value"
	// Kind of view of which terraform parameters are requested e.g. aws_vpc_site, azure_vnet_site
	ViewKind string `protobuf:"bytes,2,opt,name=view_kind,json=viewKind,proto3" json:"view_kind,omitempty"`
	// Name of view
	//
	// x-displayName: "Name of view"
	// x-example: "value"
	// Name of the view for which terraform parameters are requested
	ViewName string `protobuf:"bytes,3,opt,name=view_name,json=viewName,proto3" json:"view_name,omitempty"`
	// Terraform action to be performed
	//
	// x-displayName: "Terraform action to be performed"
	// Terraform action to be performed for a given view e.g. plan, apply
	Action RunAction `protobuf:"varint,4,opt,name=action,proto3,enum=ves.io.schema.views.terraform_parameters.RunAction" json:"action,omitempty"`
}

func (m *RunRequest) Reset()                    { *m = RunRequest{} }
func (*RunRequest) ProtoMessage()               {}
func (*RunRequest) Descriptor() ([]byte, []int) { return fileDescriptorPublicCustomapi, []int{3} }

func (m *RunRequest) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *RunRequest) GetViewKind() string {
	if m != nil {
		return m.ViewKind
	}
	return ""
}

func (m *RunRequest) GetViewName() string {
	if m != nil {
		return m.ViewName
	}
	return ""
}

func (m *RunRequest) GetAction() RunAction {
	if m != nil {
		return m.Action
	}
	return APPLY
}

// RunResponse
//
// x-displayName: "Run Response"
// Response for Run API
type RunResponse struct {
}

func (m *RunResponse) Reset()                    { *m = RunResponse{} }
func (*RunResponse) ProtoMessage()               {}
func (*RunResponse) Descriptor() ([]byte, []int) { return fileDescriptorPublicCustomapi, []int{4} }

// ForceDeleteRequest
//
// x-displayName: "Force delete view request"
// Force delete view request
type ForceDeleteRequest struct {
	// Namespace
	//
	// x-displayName: "Namespace"
	// x-example: "value"
	// Namespace for the label to be retrieved
	Namespace string `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// Kind of View
	//
	// x-displayName: "Kind of View"
	// x-example: "value"
	// Kind of view of which terraform parameters are requested e.g. aws_vpc_site, azure_vnet_site
	ViewKind string `protobuf:"bytes,2,opt,name=view_kind,json=viewKind,proto3" json:"view_kind,omitempty"`
	// Name of view
	//
	// x-displayName: "Name of view"
	// x-example: "value"
	// Name of the view for which terraform parameters are requested
	ViewName string `protobuf:"bytes,3,opt,name=view_name,json=viewName,proto3" json:"view_name,omitempty"`
}

func (m *ForceDeleteRequest) Reset()      { *m = ForceDeleteRequest{} }
func (*ForceDeleteRequest) ProtoMessage() {}
func (*ForceDeleteRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorPublicCustomapi, []int{5}
}

func (m *ForceDeleteRequest) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *ForceDeleteRequest) GetViewKind() string {
	if m != nil {
		return m.ViewKind
	}
	return ""
}

func (m *ForceDeleteRequest) GetViewName() string {
	if m != nil {
		return m.ViewName
	}
	return ""
}

// ForceDeleteResponse
//
// x-displayName: "Force delete view response"
// Force delete view response
type ForceDeleteResponse struct {
}

func (m *ForceDeleteResponse) Reset()      { *m = ForceDeleteResponse{} }
func (*ForceDeleteResponse) ProtoMessage() {}
func (*ForceDeleteResponse) Descriptor() ([]byte, []int) {
	return fileDescriptorPublicCustomapi, []int{6}
}

func init() {
	proto.RegisterType((*GetRequest)(nil), "ves.io.schema.views.terraform_parameters.GetRequest")
	golang_proto.RegisterType((*GetRequest)(nil), "ves.io.schema.views.terraform_parameters.GetRequest")
	proto.RegisterType((*GetResponse)(nil), "ves.io.schema.views.terraform_parameters.GetResponse")
	golang_proto.RegisterType((*GetResponse)(nil), "ves.io.schema.views.terraform_parameters.GetResponse")
	proto.RegisterType((*GetStatusResponse)(nil), "ves.io.schema.views.terraform_parameters.GetStatusResponse")
	golang_proto.RegisterType((*GetStatusResponse)(nil), "ves.io.schema.views.terraform_parameters.GetStatusResponse")
	proto.RegisterType((*RunRequest)(nil), "ves.io.schema.views.terraform_parameters.RunRequest")
	golang_proto.RegisterType((*RunRequest)(nil), "ves.io.schema.views.terraform_parameters.RunRequest")
	proto.RegisterType((*RunResponse)(nil), "ves.io.schema.views.terraform_parameters.RunResponse")
	golang_proto.RegisterType((*RunResponse)(nil), "ves.io.schema.views.terraform_parameters.RunResponse")
	proto.RegisterType((*ForceDeleteRequest)(nil), "ves.io.schema.views.terraform_parameters.ForceDeleteRequest")
	golang_proto.RegisterType((*ForceDeleteRequest)(nil), "ves.io.schema.views.terraform_parameters.ForceDeleteRequest")
	proto.RegisterType((*ForceDeleteResponse)(nil), "ves.io.schema.views.terraform_parameters.ForceDeleteResponse")
	golang_proto.RegisterType((*ForceDeleteResponse)(nil), "ves.io.schema.views.terraform_parameters.ForceDeleteResponse")
}
func (this *GetRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetRequest)
	if !ok {
		that2, ok := that.(GetRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Namespace != that1.Namespace {
		return false
	}
	if this.ViewKind != that1.ViewKind {
		return false
	}
	if this.ViewName != that1.ViewName {
		return false
	}
	return true
}
func (this *GetResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetResponse)
	if !ok {
		that2, ok := that.(GetResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.TerraformParameters.Equal(that1.TerraformParameters) {
		return false
	}
	return true
}
func (this *GetStatusResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetStatusResponse)
	if !ok {
		that2, ok := that.(GetStatusResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Status.Equal(that1.Status) {
		return false
	}
	return true
}
func (this *RunRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RunRequest)
	if !ok {
		that2, ok := that.(RunRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Namespace != that1.Namespace {
		return false
	}
	if this.ViewKind != that1.ViewKind {
		return false
	}
	if this.ViewName != that1.ViewName {
		return false
	}
	if this.Action != that1.Action {
		return false
	}
	return true
}
func (this *RunResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RunResponse)
	if !ok {
		that2, ok := that.(RunResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *ForceDeleteRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ForceDeleteRequest)
	if !ok {
		that2, ok := that.(ForceDeleteRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Namespace != that1.Namespace {
		return false
	}
	if this.ViewKind != that1.ViewKind {
		return false
	}
	if this.ViewName != that1.ViewName {
		return false
	}
	return true
}
func (this *ForceDeleteResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ForceDeleteResponse)
	if !ok {
		that2, ok := that.(ForceDeleteResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *GetRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&terraform_parameters.GetRequest{")
	s = append(s, "Namespace: "+fmt.Sprintf("%#v", this.Namespace)+",\n")
	s = append(s, "ViewKind: "+fmt.Sprintf("%#v", this.ViewKind)+",\n")
	s = append(s, "ViewName: "+fmt.Sprintf("%#v", this.ViewName)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&terraform_parameters.GetResponse{")
	if this.TerraformParameters != nil {
		s = append(s, "TerraformParameters: "+fmt.Sprintf("%#v", this.TerraformParameters)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetStatusResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&terraform_parameters.GetStatusResponse{")
	if this.Status != nil {
		s = append(s, "Status: "+fmt.Sprintf("%#v", this.Status)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RunRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&terraform_parameters.RunRequest{")
	s = append(s, "Namespace: "+fmt.Sprintf("%#v", this.Namespace)+",\n")
	s = append(s, "ViewKind: "+fmt.Sprintf("%#v", this.ViewKind)+",\n")
	s = append(s, "ViewName: "+fmt.Sprintf("%#v", this.ViewName)+",\n")
	s = append(s, "Action: "+fmt.Sprintf("%#v", this.Action)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RunResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&terraform_parameters.RunResponse{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ForceDeleteRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&terraform_parameters.ForceDeleteRequest{")
	s = append(s, "Namespace: "+fmt.Sprintf("%#v", this.Namespace)+",\n")
	s = append(s, "ViewKind: "+fmt.Sprintf("%#v", this.ViewKind)+",\n")
	s = append(s, "ViewName: "+fmt.Sprintf("%#v", this.ViewName)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ForceDeleteResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&terraform_parameters.ForceDeleteResponse{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringPublicCustomapi(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for CustomAPI service

type CustomAPIClient interface {
	// Get Terraform Parameters for a View
	//
	// x-displayName: "Get Terraform Parameters for view"
	// returned from list of terraform parameter objects for a given view.
	Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error)
	// Get Status of Terraform for a View
	//
	// x-displayName: "Get Status of Terraform for view"
	// returned from list of terraform parameter status objects for a given view.
	GetStatus(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetStatusResponse, error)
}

type customAPIClient struct {
	cc *grpc.ClientConn
}

func NewCustomAPIClient(cc *grpc.ClientConn) CustomAPIClient {
	return &customAPIClient{cc}
}

func (c *customAPIClient) Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error) {
	out := new(GetResponse)
	err := grpc.Invoke(ctx, "/ves.io.schema.views.terraform_parameters.CustomAPI/Get", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customAPIClient) GetStatus(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetStatusResponse, error) {
	out := new(GetStatusResponse)
	err := grpc.Invoke(ctx, "/ves.io.schema.views.terraform_parameters.CustomAPI/GetStatus", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for CustomAPI service

type CustomAPIServer interface {
	// Get Terraform Parameters for a View
	//
	// x-displayName: "Get Terraform Parameters for view"
	// returned from list of terraform parameter objects for a given view.
	Get(context.Context, *GetRequest) (*GetResponse, error)
	// Get Status of Terraform for a View
	//
	// x-displayName: "Get Status of Terraform for view"
	// returned from list of terraform parameter status objects for a given view.
	GetStatus(context.Context, *GetRequest) (*GetStatusResponse, error)
}

func RegisterCustomAPIServer(s *grpc.Server, srv CustomAPIServer) {
	s.RegisterService(&_CustomAPI_serviceDesc, srv)
}

func _CustomAPI_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomAPIServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ves.io.schema.views.terraform_parameters.CustomAPI/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomAPIServer).Get(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomAPI_GetStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomAPIServer).GetStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ves.io.schema.views.terraform_parameters.CustomAPI/GetStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomAPIServer).GetStatus(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _CustomAPI_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ves.io.schema.views.terraform_parameters.CustomAPI",
	HandlerType: (*CustomAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _CustomAPI_Get_Handler,
		},
		{
			MethodName: "GetStatus",
			Handler:    _CustomAPI_GetStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ves.io/schema/views/terraform_parameters/public_customapi.proto",
}

// Client API for CustomActionAPI service

type CustomActionAPIClient interface {
	// Run Terraform Action for view
	//
	// x-displayName: "Run Terraform Action for view"
	// perform terraform actions for a given view. Supported actions are apply and plan.
	Run(ctx context.Context, in *RunRequest, opts ...grpc.CallOption) (*RunResponse, error)
	// Force delete view
	//
	// x-displayName: "Force delete view"
	// force delete view object. This can result in staled objects in cloud provider.
	ForceDelete(ctx context.Context, in *ForceDeleteRequest, opts ...grpc.CallOption) (*ForceDeleteResponse, error)
}

type customActionAPIClient struct {
	cc *grpc.ClientConn
}

func NewCustomActionAPIClient(cc *grpc.ClientConn) CustomActionAPIClient {
	return &customActionAPIClient{cc}
}

func (c *customActionAPIClient) Run(ctx context.Context, in *RunRequest, opts ...grpc.CallOption) (*RunResponse, error) {
	out := new(RunResponse)
	err := grpc.Invoke(ctx, "/ves.io.schema.views.terraform_parameters.CustomActionAPI/Run", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customActionAPIClient) ForceDelete(ctx context.Context, in *ForceDeleteRequest, opts ...grpc.CallOption) (*ForceDeleteResponse, error) {
	out := new(ForceDeleteResponse)
	err := grpc.Invoke(ctx, "/ves.io.schema.views.terraform_parameters.CustomActionAPI/ForceDelete", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for CustomActionAPI service

type CustomActionAPIServer interface {
	// Run Terraform Action for view
	//
	// x-displayName: "Run Terraform Action for view"
	// perform terraform actions for a given view. Supported actions are apply and plan.
	Run(context.Context, *RunRequest) (*RunResponse, error)
	// Force delete view
	//
	// x-displayName: "Force delete view"
	// force delete view object. This can result in staled objects in cloud provider.
	ForceDelete(context.Context, *ForceDeleteRequest) (*ForceDeleteResponse, error)
}

func RegisterCustomActionAPIServer(s *grpc.Server, srv CustomActionAPIServer) {
	s.RegisterService(&_CustomActionAPI_serviceDesc, srv)
}

func _CustomActionAPI_Run_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RunRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomActionAPIServer).Run(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ves.io.schema.views.terraform_parameters.CustomActionAPI/Run",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomActionAPIServer).Run(ctx, req.(*RunRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomActionAPI_ForceDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ForceDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomActionAPIServer).ForceDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ves.io.schema.views.terraform_parameters.CustomActionAPI/ForceDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomActionAPIServer).ForceDelete(ctx, req.(*ForceDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _CustomActionAPI_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ves.io.schema.views.terraform_parameters.CustomActionAPI",
	HandlerType: (*CustomActionAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Run",
			Handler:    _CustomActionAPI_Run_Handler,
		},
		{
			MethodName: "ForceDelete",
			Handler:    _CustomActionAPI_ForceDelete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ves.io/schema/views/terraform_parameters/public_customapi.proto",
}

func (m *GetRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Namespace) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPublicCustomapi(dAtA, i, uint64(len(m.Namespace)))
		i += copy(dAtA[i:], m.Namespace)
	}
	if len(m.ViewKind) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintPublicCustomapi(dAtA, i, uint64(len(m.ViewKind)))
		i += copy(dAtA[i:], m.ViewKind)
	}
	if len(m.ViewName) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintPublicCustomapi(dAtA, i, uint64(len(m.ViewName)))
		i += copy(dAtA[i:], m.ViewName)
	}
	return i, nil
}

func (m *GetResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.TerraformParameters != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPublicCustomapi(dAtA, i, uint64(m.TerraformParameters.Size()))
		n1, err := m.TerraformParameters.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	return i, nil
}

func (m *GetStatusResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetStatusResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Status != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPublicCustomapi(dAtA, i, uint64(m.Status.Size()))
		n2, err := m.Status.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	return i, nil
}

func (m *RunRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RunRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Namespace) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPublicCustomapi(dAtA, i, uint64(len(m.Namespace)))
		i += copy(dAtA[i:], m.Namespace)
	}
	if len(m.ViewKind) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintPublicCustomapi(dAtA, i, uint64(len(m.ViewKind)))
		i += copy(dAtA[i:], m.ViewKind)
	}
	if len(m.ViewName) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintPublicCustomapi(dAtA, i, uint64(len(m.ViewName)))
		i += copy(dAtA[i:], m.ViewName)
	}
	if m.Action != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintPublicCustomapi(dAtA, i, uint64(m.Action))
	}
	return i, nil
}

func (m *RunResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RunResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *ForceDeleteRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ForceDeleteRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Namespace) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPublicCustomapi(dAtA, i, uint64(len(m.Namespace)))
		i += copy(dAtA[i:], m.Namespace)
	}
	if len(m.ViewKind) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintPublicCustomapi(dAtA, i, uint64(len(m.ViewKind)))
		i += copy(dAtA[i:], m.ViewKind)
	}
	if len(m.ViewName) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintPublicCustomapi(dAtA, i, uint64(len(m.ViewName)))
		i += copy(dAtA[i:], m.ViewName)
	}
	return i, nil
}

func (m *ForceDeleteResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ForceDeleteResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func encodeVarintPublicCustomapi(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *GetRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	l = len(m.ViewKind)
	if l > 0 {
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	l = len(m.ViewName)
	if l > 0 {
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	return n
}

func (m *GetResponse) Size() (n int) {
	var l int
	_ = l
	if m.TerraformParameters != nil {
		l = m.TerraformParameters.Size()
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	return n
}

func (m *GetStatusResponse) Size() (n int) {
	var l int
	_ = l
	if m.Status != nil {
		l = m.Status.Size()
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	return n
}

func (m *RunRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	l = len(m.ViewKind)
	if l > 0 {
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	l = len(m.ViewName)
	if l > 0 {
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	if m.Action != 0 {
		n += 1 + sovPublicCustomapi(uint64(m.Action))
	}
	return n
}

func (m *RunResponse) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *ForceDeleteRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	l = len(m.ViewKind)
	if l > 0 {
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	l = len(m.ViewName)
	if l > 0 {
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	return n
}

func (m *ForceDeleteResponse) Size() (n int) {
	var l int
	_ = l
	return n
}

func sovPublicCustomapi(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozPublicCustomapi(x uint64) (n int) {
	return sovPublicCustomapi(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *GetRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetRequest{`,
		`Namespace:` + fmt.Sprintf("%v", this.Namespace) + `,`,
		`ViewKind:` + fmt.Sprintf("%v", this.ViewKind) + `,`,
		`ViewName:` + fmt.Sprintf("%v", this.ViewName) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetResponse{`,
		`TerraformParameters:` + strings.Replace(fmt.Sprintf("%v", this.TerraformParameters), "GlobalSpecType", "GlobalSpecType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetStatusResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetStatusResponse{`,
		`Status:` + strings.Replace(fmt.Sprintf("%v", this.Status), "StatusObject", "StatusObject", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RunRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RunRequest{`,
		`Namespace:` + fmt.Sprintf("%v", this.Namespace) + `,`,
		`ViewKind:` + fmt.Sprintf("%v", this.ViewKind) + `,`,
		`ViewName:` + fmt.Sprintf("%v", this.ViewName) + `,`,
		`Action:` + fmt.Sprintf("%v", this.Action) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RunResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RunResponse{`,
		`}`,
	}, "")
	return s
}
func (this *ForceDeleteRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ForceDeleteRequest{`,
		`Namespace:` + fmt.Sprintf("%v", this.Namespace) + `,`,
		`ViewKind:` + fmt.Sprintf("%v", this.ViewKind) + `,`,
		`ViewName:` + fmt.Sprintf("%v", this.ViewName) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ForceDeleteResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ForceDeleteResponse{`,
		`}`,
	}, "")
	return s
}
func valueToStringPublicCustomapi(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *GetRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCustomapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ViewKind", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ViewKind = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ViewName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ViewName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCustomapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCustomapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TerraformParameters", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TerraformParameters == nil {
				m.TerraformParameters = &GlobalSpecType{}
			}
			if err := m.TerraformParameters.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCustomapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetStatusResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCustomapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetStatusResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetStatusResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Status == nil {
				m.Status = &StatusObject{}
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCustomapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RunRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCustomapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RunRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RunRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ViewKind", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ViewKind = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ViewName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ViewName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Action", wireType)
			}
			m.Action = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Action |= (RunAction(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCustomapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RunResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCustomapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RunResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RunResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCustomapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ForceDeleteRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCustomapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ForceDeleteRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ForceDeleteRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ViewKind", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ViewKind = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ViewName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ViewName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCustomapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ForceDeleteResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCustomapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ForceDeleteResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ForceDeleteResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCustomapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPublicCustomapi(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPublicCustomapi
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthPublicCustomapi
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowPublicCustomapi
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipPublicCustomapi(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthPublicCustomapi = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPublicCustomapi   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("ves.io/schema/views/terraform_parameters/public_customapi.proto", fileDescriptorPublicCustomapi)
}
func init() {
	golang_proto.RegisterFile("ves.io/schema/views/terraform_parameters/public_customapi.proto", fileDescriptorPublicCustomapi)
}

var fileDescriptorPublicCustomapi = []byte{
	// 768 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x55, 0xcf, 0x4f, 0xd4, 0x40,
	0x14, 0xde, 0x61, 0x09, 0x71, 0x67, 0xe3, 0xaf, 0x82, 0xc9, 0xba, 0x90, 0x4a, 0x7a, 0x22, 0x24,
	0xdb, 0x26, 0x0b, 0x18, 0x83, 0x12, 0x03, 0x12, 0x37, 0x84, 0xa0, 0xa4, 0x70, 0xf2, 0x20, 0x99,
	0xed, 0x3e, 0x4a, 0xa1, 0xdb, 0x29, 0xed, 0x74, 0x11, 0xc9, 0x26, 0x86, 0xbf, 0x80, 0xc4, 0x3f,
	0xc0, 0xab, 0x17, 0x0f, 0x9e, 0xb9, 0x70, 0xc3, 0x93, 0x21, 0x7a, 0x31, 0x31, 0x31, 0x52, 0x3c,
	0x78, 0xc4, 0xbb, 0x07, 0xb3, 0xd3, 0xd2, 0xfd, 0xc1, 0x8a, 0x5d, 0x90, 0xdb, 0xec, 0x7c, 0xef,
	0x7d, 0xef, 0xbd, 0x6f, 0xbf, 0xd7, 0xc1, 0x0f, 0x2b, 0xe0, 0xca, 0x06, 0x55, 0x5c, 0x6d, 0x05,
	0xca, 0x44, 0xa9, 0x18, 0xb0, 0xe1, 0x2a, 0x0c, 0x1c, 0x87, 0x2c, 0x53, 0xa7, 0xbc, 0x64, 0x13,
	0x87, 0x94, 0x81, 0x81, 0xe3, 0x2a, 0xb6, 0x57, 0x34, 0x0d, 0x6d, 0x49, 0xf3, 0x5c, 0x46, 0xcb,
	0xc4, 0x36, 0x64, 0xdb, 0xa1, 0x8c, 0x0a, 0x43, 0x01, 0x81, 0x1c, 0x10, 0xc8, 0x9c, 0x40, 0x6e,
	0x47, 0x90, 0xcd, 0xe9, 0x06, 0x5b, 0xf1, 0x8a, 0xb2, 0x46, 0xcb, 0x8a, 0x4e, 0x75, 0xaa, 0x70,
	0x82, 0xa2, 0xb7, 0xcc, 0x7f, 0xf1, 0x1f, 0xfc, 0x14, 0x10, 0x67, 0x07, 0x74, 0x4a, 0x75, 0x13,
	0x14, 0x62, 0x1b, 0x0a, 0xb1, 0x2c, 0xca, 0x08, 0x33, 0xa8, 0xe5, 0x86, 0x68, 0x7f, 0x73, 0xdf,
	0xd4, 0x6e, 0x04, 0x6f, 0x37, 0x83, 0x6c, 0xd3, 0x86, 0x13, 0x68, 0xa0, 0x65, 0x5e, 0x62, 0x1a,
	0x25, 0xc2, 0x20, 0x44, 0xa5, 0x16, 0x14, 0x5c, 0xb0, 0x2a, 0x2d, 0xe4, 0x83, 0xa7, 0x15, 0x5b,
	0x6a, 0x8e, 0x18, 0x8b, 0xad, 0x29, 0x2d, 0xae, 0x82, 0xc6, 0xc2, 0xb4, 0xd1, 0xd8, 0x69, 0x8d,
	0x03, 0xdd, 0x69, 0x9b, 0x55, 0x0f, 0x90, 0x4a, 0x18, 0x17, 0x80, 0xa9, 0xb0, 0xee, 0x81, 0xcb,
	0x84, 0x01, 0x9c, 0xb2, 0x48, 0x19, 0x5c, 0x9b, 0x68, 0x90, 0x41, 0x83, 0x68, 0x28, 0xa5, 0xd6,
	0x2f, 0x84, 0x7e, 0x9c, 0xe2, 0xf3, 0xac, 0x19, 0x56, 0x29, 0xd3, 0xc5, 0xd1, 0x2b, 0xb5, 0x8b,
	0x59, 0xc3, 0x2a, 0x45, 0x60, 0x2d, 0x3c, 0x93, 0xac, 0x83, 0x4f, 0x48, 0x19, 0xa4, 0x97, 0x38,
	0xcd, 0xab, 0xb8, 0x36, 0xb5, 0x5c, 0x10, 0xd6, 0x70, 0x5f, 0xbb, 0xce, 0x79, 0xc5, 0x74, 0xfe,
	0x9e, 0x1c, 0xd7, 0x34, 0x72, 0xc1, 0xa4, 0x45, 0x62, 0x2e, 0xd8, 0xa0, 0x2d, 0x6e, 0xda, 0xa0,
	0xf6, 0x46, 0x41, 0xf3, 0x51, 0x8c, 0xb4, 0x82, 0x6f, 0x16, 0x80, 0x2d, 0x30, 0xc2, 0x3c, 0x37,
	0xea, 0x60, 0x01, 0xf7, 0xb8, 0xfc, 0x26, 0xac, 0x79, 0x37, 0x7e, 0xcd, 0x80, 0xe9, 0x29, 0xff,
	0x6f, 0xa6, 0x92, 0x7b, 0x55, 0xa4, 0x86, 0x54, 0xd2, 0x7b, 0x84, 0xb1, 0xea, 0x59, 0x97, 0x2c,
	0xa6, 0x30, 0x8b, 0x7b, 0x88, 0x56, 0x73, 0x54, 0xa6, 0x7b, 0x10, 0x0d, 0x5d, 0xcb, 0x8f, 0xc4,
	0xef, 0x5d, 0xf5, 0xac, 0x49, 0x9e, 0xaa, 0x86, 0x14, 0xd2, 0x55, 0x9c, 0xe6, 0x2d, 0x07, 0xba,
	0x48, 0x26, 0x16, 0x1e, 0x53, 0x47, 0x83, 0x69, 0x30, 0x81, 0xc1, 0x65, 0xdb, 0xe2, 0x16, 0xee,
	0x6d, 0xaa, 0x16, 0x34, 0x91, 0x7f, 0xd3, 0x8d, 0x53, 0x8f, 0xf8, 0x87, 0x64, 0x72, 0x7e, 0x46,
	0xf8, 0x86, 0x70, 0xb2, 0x00, 0x4c, 0x18, 0xed, 0xc0, 0x16, 0x91, 0xa3, 0xb3, 0x63, 0x1d, 0x66,
	0x85, 0x3a, 0xac, 0xfa, 0xfb, 0x99, 0xde, 0x0a, 0xb8, 0x39, 0x83, 0xe6, 0x74, 0xb0, 0xc0, 0x21,
	0x66, 0xce, 0x01, 0x52, 0xda, 0xfe, 0xfc, 0xe3, 0x75, 0xd7, 0x9c, 0x30, 0x1b, 0x7e, 0xef, 0x94,
	0x48, 0x05, 0x57, 0xd9, 0x8a, 0xce, 0xd5, 0xf6, 0x7b, 0xb9, 0x15, 0xa9, 0x54, 0x0d, 0xcf, 0xb5,
	0x8c, 0xaa, 0xf0, 0x0b, 0xe1, 0x54, 0xe4, 0xd0, 0x73, 0x8e, 0x79, 0xbf, 0xa3, 0xac, 0xe6, 0x65,
	0x90, 0xd6, 0xcf, 0x1a, 0x76, 0x51, 0x50, 0xff, 0xe3, 0xb0, 0x4a, 0xb0, 0x2a, 0xd9, 0x89, 0xbd,
	0x5d, 0x94, 0xfc, 0xb4, 0x8b, 0x94, 0xd8, 0x6d, 0x07, 0x0b, 0xb7, 0xfd, 0x31, 0xd3, 0x75, 0x03,
	0xe5, 0xdf, 0x75, 0xe3, 0xeb, 0xa1, 0x43, 0xb8, 0x8d, 0x6b, 0x3e, 0xf9, 0x8a, 0x70, 0x52, 0xf5,
	0xac, 0x4e, 0x04, 0xac, 0x2f, 0x6b, 0x27, 0x3e, 0x69, 0xdc, 0x17, 0xdd, 0xdf, 0xcf, 0xf4, 0xb5,
	0x48, 0xb7, 0xe1, 0x18, 0x0c, 0xb8, 0x76, 0x33, 0xd2, 0x74, 0x5c, 0xed, 0xfe, 0x2a, 0x98, 0xe3,
	0x59, 0xe3, 0x68, 0x58, 0xf8, 0x8d, 0x70, 0xba, 0x61, 0x57, 0x84, 0x07, 0xf1, 0xfb, 0x3d, 0xbd,
	0xd0, 0xd9, 0x89, 0x73, 0x66, 0x87, 0x53, 0xdb, 0x67, 0x4e, 0xad, 0x4a, 0x73, 0x17, 0x9e, 0x7a,
	0xb9, 0x56, 0x35, 0x57, 0xe2, 0x65, 0xc7, 0xd1, 0xf0, 0x85, 0xfc, 0x32, 0x8f, 0xa6, 0x76, 0xd0,
	0xc1, 0xa1, 0x98, 0xf8, 0x72, 0x28, 0x26, 0x8e, 0x0f, 0x45, 0xf4, 0xca, 0x17, 0xd1, 0x5b, 0x5f,
	0x44, 0x1f, 0x7c, 0x11, 0x1d, 0xf8, 0x22, 0xfa, 0xee, 0x8b, 0xe8, 0xa7, 0x2f, 0x26, 0x8e, 0x7d,
	0x11, 0xed, 0x1c, 0x89, 0x89, 0xbd, 0x23, 0x11, 0x3d, 0x7b, 0xae, 0x53, 0x7b, 0x4d, 0x97, 0x2b,
	0xd4, 0xe4, 0xf4, 0xb2, 0xd7, 0xf0, 0xda, 0xe6, 0x6c, 0x87, 0x56, 0x8c, 0x12, 0x38, 0xb9, 0x13,
	0x58, 0xb1, 0x8b, 0x3a, 0x55, 0xe0, 0x05, 0x0b, 0x1f, 0xda, 0x7f, 0xbe, 0xd2, 0xc5, 0x1e, 0xfe,
	0xfe, 0x8e, 0xfc, 0x09, 0x00, 0x00, 0xff, 0xff, 0xcd, 0x16, 0x8d, 0x86, 0x63, 0x09, 0x00, 0x00,
}
