// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ves.io/schema/views/terraform_parameters/types.proto

package terraform_parameters

import proto "github.com/gogo/protobuf/proto"
import golang_proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"
import google_protobuf3 "github.com/gogo/protobuf/types"
import google_protobuf1 "github.com/gogo/protobuf/types"
import _ "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
import _ "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
import _ "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
import _ "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
import _ "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/views"
import _ "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/views"

import strconv "strconv"

import strings "strings"
import reflect "reflect"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Plan Stage State
//
// x-displayName: "Plan Stage State"
// Terraform state during plan stage
type PlanStageState int32

const (
	PLANNING          PlanStageState = 0
	PLAN_ERRORED      PlanStageState = 1
	NO_CHANGES        PlanStageState = 2
	HAS_CHANGES       PlanStageState = 3
	DISCARDED         PlanStageState = 4
	PLAN_INIT_ERRORED PlanStageState = 5
)

var PlanStageState_name = map[int32]string{
	0: "PLANNING",
	1: "PLAN_ERRORED",
	2: "NO_CHANGES",
	3: "HAS_CHANGES",
	4: "DISCARDED",
	5: "PLAN_INIT_ERRORED",
}
var PlanStageState_value = map[string]int32{
	"PLANNING":          0,
	"PLAN_ERRORED":      1,
	"NO_CHANGES":        2,
	"HAS_CHANGES":       3,
	"DISCARDED":         4,
	"PLAN_INIT_ERRORED": 5,
}

func (PlanStageState) EnumDescriptor() ([]byte, []int) { return fileDescriptorTypes, []int{0} }

// Apply Stage State
//
// x-displayName: "Apply Stage State"
// Terraform state during apply stage
type ApplyStageState int32

const (
	APPLIED            ApplyStageState = 0
	APPLY_ERRORED      ApplyStageState = 1
	APPLY_INIT_ERRORED ApplyStageState = 2
	APPLYING           ApplyStageState = 3
	APPLY_PLANNING     ApplyStageState = 4
	APPLY_PLAN_ERRORED ApplyStageState = 5
)

var ApplyStageState_name = map[int32]string{
	0: "APPLIED",
	1: "APPLY_ERRORED",
	2: "APPLY_INIT_ERRORED",
	3: "APPLYING",
	4: "APPLY_PLANNING",
	5: "APPLY_PLAN_ERRORED",
}
var ApplyStageState_value = map[string]int32{
	"APPLIED":            0,
	"APPLY_ERRORED":      1,
	"APPLY_INIT_ERRORED": 2,
	"APPLYING":           3,
	"APPLY_PLANNING":     4,
	"APPLY_PLAN_ERRORED": 5,
}

func (ApplyStageState) EnumDescriptor() ([]byte, []int) { return fileDescriptorTypes, []int{1} }

// Destroy Stage State
//
// x-displayName: "Destroy Stage State"
// Terraform state during destroy stage
type DestroyStageState int32

const (
	DESTROYED       DestroyStageState = 0
	DESTROY_ERRORED DestroyStageState = 1
	DESTROYING      DestroyStageState = 2
)

var DestroyStageState_name = map[int32]string{
	0: "DESTROYED",
	1: "DESTROY_ERRORED",
	2: "DESTROYING",
}
var DestroyStageState_value = map[string]int32{
	"DESTROYED":       0,
	"DESTROY_ERRORED": 1,
	"DESTROYING":      2,
}

func (DestroyStageState) EnumDescriptor() ([]byte, []int) { return fileDescriptorTypes, []int{2} }

// Infra State
//
// x-displayName: "Infra State"
// Infrastructure state of the view provisioning
type InfraState int32

const (
	PROVISIONED  InfraState = 0
	TIMED_OUT    InfraState = 1
	ERRORED      InfraState = 2
	PROVISIONING InfraState = 3
)

var InfraState_name = map[int32]string{
	0: "PROVISIONED",
	1: "TIMED_OUT",
	2: "ERRORED",
	3: "PROVISIONING",
}
var InfraState_value = map[string]int32{
	"PROVISIONED":  0,
	"TIMED_OUT":    1,
	"ERRORED":      2,
	"PROVISIONING": 3,
}

func (InfraState) EnumDescriptor() ([]byte, []int) { return fileDescriptorTypes, []int{3} }

// Terraform Action
//
// x-displayName: "Terraform action to be performed"
// Terraform action to be performed for a given view e.g. plan, apply
type RunAction int32

const (
	// x-displayName: "Apply"
	// Apply action used to apply the changes required to reach the desired state of the configuration
	APPLY RunAction = 0
	// x-displayName: "Plan"
	// Plan action is a convenient way to check whether the execution plan for a set of changes matches your expectations without making any changes to real resources or to the state
	PLAN RunAction = 1
	// x-displayName: "Destroy"
	// DESTROY action is used to destroy the Terraform-managed infrastructure
	DESTROY RunAction = 2
)

var RunAction_name = map[int32]string{
	0: "APPLY",
	1: "PLAN",
	2: "DESTROY",
}
var RunAction_value = map[string]int32{
	"APPLY":   0,
	"PLAN":    1,
	"DESTROY": 2,
}

func (RunAction) EnumDescriptor() ([]byte, []int) { return fileDescriptorTypes, []int{4} }

// InterfaceType
//
// x-displayName: "Interface Type"
// Interface type - inside or outsise
type InterfaceType int32

const (
	// Interface Inside
	//
	// x-displayName: "Inside Interface"
	// Inside Interface
	INTERFACE_INSIDE InterfaceType = 0
	// Interface Outside
	//
	// x-displayName: "Outside Interface"
	// Outside Interface
	INTERFACE_OUTSIDE InterfaceType = 1
	// Interface Workload
	//
	// x-displayName: "Interface Workload"
	// Interface Workload
	INTERFACE_WORKLOAD InterfaceType = 2
)

var InterfaceType_name = map[int32]string{
	0: "INTERFACE_INSIDE",
	1: "INTERFACE_OUTSIDE",
	2: "INTERFACE_WORKLOAD",
}
var InterfaceType_value = map[string]int32{
	"INTERFACE_INSIDE":   0,
	"INTERFACE_OUTSIDE":  1,
	"INTERFACE_WORKLOAD": 2,
}

func (InterfaceType) EnumDescriptor() ([]byte, []int) { return fileDescriptorTypes, []int{5} }

// Cloud Gateway Type
//
// x-displayName: "Cloud Gateway Type"
// Cloud Gateway Type
type CloudGatewayType int32

const (
	// Ingres Gateway
	//
	// x-displayName: "Ingress Gateway"
	// Ingress Gateway
	INGRESS_GATEWAY CloudGatewayType = 0
	// Ingres Egress Gateway
	//
	// x-displayName: "Ingress Egress Gateway"
	// Ingress Egress Gateway
	INGRESS_EGRESS_GATEWAY CloudGatewayType = 1
)

var CloudGatewayType_name = map[int32]string{
	0: "INGRESS_GATEWAY",
	1: "INGRESS_EGRESS_GATEWAY",
}
var CloudGatewayType_value = map[string]int32{
	"INGRESS_GATEWAY":        0,
	"INGRESS_EGRESS_GATEWAY": 1,
}

func (CloudGatewayType) EnumDescriptor() ([]byte, []int) { return fileDescriptorTypes, []int{6} }

// GlobalSpecType
//
// x-displayName: "View Terraform Parameters Specification"
// Shape of the view terraform parameters specification
type GlobalSpecType struct {
	// child_objects
	//
	// x-displayName: "Child Objects"
	// Data specific to child objects
	TfObjects []*google_protobuf3.Any `protobuf:"bytes,2,rep,name=tf_objects,json=tfObjects" json:"tf_objects,omitempty"`
}

func (m *GlobalSpecType) Reset()                    { *m = GlobalSpecType{} }
func (*GlobalSpecType) ProtoMessage()               {}
func (*GlobalSpecType) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{0} }

func (m *GlobalSpecType) GetTfObjects() []*google_protobuf3.Any {
	if m != nil {
		return m.TfObjects
	}
	return nil
}

type PlanStatus struct {
	// state
	//
	// x-displayName: "State"
	// State of terraform run
	//
	// Types that are valid to be assigned to State:
	//	*PlanStatus_PlanState
	//	*PlanStatus_InfraState
	State isPlanStatus_State `protobuf_oneof:"state"`
	// tf_plan_output
	//
	// x-displayName: "Terraform Plan Output"
	// x-example: "value"
	// Terraform "plan" command output. Terraform performs a refresh, unless explicitly disabled, and then
	// determines what actions are necessary to achieve the desired state specified in the configuration files.
	TfPlanOutput string `protobuf:"bytes,3,opt,name=tf_plan_output,json=tfPlanOutput,proto3" json:"tf_plan_output,omitempty"`
	// error_output
	//
	// x-displayName: "Error Output"
	// x-example: "value"
	// Error output of terraform run
	ErrorOutput string `protobuf:"bytes,4,opt,name=error_output,json=errorOutput,proto3" json:"error_output,omitempty"`
	// modification_timestamp
	//
	// x-displayName: "Modification Timestamp"
	// ModificationTimestamp is a timestamp representing the server time when this status was
	// last modified.
	ModificationTimestamp *google_protobuf1.Timestamp `protobuf:"bytes,5,opt,name=modification_timestamp,json=modificationTimestamp" json:"modification_timestamp,omitempty"`
}

func (m *PlanStatus) Reset()                    { *m = PlanStatus{} }
func (*PlanStatus) ProtoMessage()               {}
func (*PlanStatus) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{1} }

type isPlanStatus_State interface {
	isPlanStatus_State()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type PlanStatus_PlanState struct {
	PlanState PlanStageState `protobuf:"varint,1,opt,name=plan_state,json=planState,proto3,enum=ves.io.schema.views.terraform_parameters.PlanStageState,oneof"`
}
type PlanStatus_InfraState struct {
	InfraState InfraState `protobuf:"varint,2,opt,name=infra_state,json=infraState,proto3,enum=ves.io.schema.views.terraform_parameters.InfraState,oneof"`
}

func (*PlanStatus_PlanState) isPlanStatus_State()  {}
func (*PlanStatus_InfraState) isPlanStatus_State() {}

func (m *PlanStatus) GetState() isPlanStatus_State {
	if m != nil {
		return m.State
	}
	return nil
}

func (m *PlanStatus) GetPlanState() PlanStageState {
	if x, ok := m.GetState().(*PlanStatus_PlanState); ok {
		return x.PlanState
	}
	return PLANNING
}

func (m *PlanStatus) GetInfraState() InfraState {
	if x, ok := m.GetState().(*PlanStatus_InfraState); ok {
		return x.InfraState
	}
	return PROVISIONED
}

func (m *PlanStatus) GetTfPlanOutput() string {
	if m != nil {
		return m.TfPlanOutput
	}
	return ""
}

func (m *PlanStatus) GetErrorOutput() string {
	if m != nil {
		return m.ErrorOutput
	}
	return ""
}

func (m *PlanStatus) GetModificationTimestamp() *google_protobuf1.Timestamp {
	if m != nil {
		return m.ModificationTimestamp
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*PlanStatus) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _PlanStatus_OneofMarshaler, _PlanStatus_OneofUnmarshaler, _PlanStatus_OneofSizer, []interface{}{
		(*PlanStatus_PlanState)(nil),
		(*PlanStatus_InfraState)(nil),
	}
}

func _PlanStatus_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*PlanStatus)
	// state
	switch x := m.State.(type) {
	case *PlanStatus_PlanState:
		_ = b.EncodeVarint(1<<3 | proto.WireVarint)
		_ = b.EncodeVarint(uint64(x.PlanState))
	case *PlanStatus_InfraState:
		_ = b.EncodeVarint(2<<3 | proto.WireVarint)
		_ = b.EncodeVarint(uint64(x.InfraState))
	case nil:
	default:
		return fmt.Errorf("PlanStatus.State has unexpected type %T", x)
	}
	return nil
}

func _PlanStatus_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*PlanStatus)
	switch tag {
	case 1: // state.plan_state
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.State = &PlanStatus_PlanState{PlanStageState(x)}
		return true, err
	case 2: // state.infra_state
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.State = &PlanStatus_InfraState{InfraState(x)}
		return true, err
	default:
		return false, nil
	}
}

func _PlanStatus_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*PlanStatus)
	// state
	switch x := m.State.(type) {
	case *PlanStatus_PlanState:
		n += proto.SizeVarint(1<<3 | proto.WireVarint)
		n += proto.SizeVarint(uint64(x.PlanState))
	case *PlanStatus_InfraState:
		n += proto.SizeVarint(2<<3 | proto.WireVarint)
		n += proto.SizeVarint(uint64(x.InfraState))
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type ApplyStatus struct {
	// state
	//
	// x-displayName: "State"
	// State of terraform run
	//
	// Types that are valid to be assigned to State:
	//	*ApplyStatus_ApplyState
	//	*ApplyStatus_DestroyState
	//	*ApplyStatus_InfraState
	State isApplyStatus_State `protobuf_oneof:"state"`
	// tf_output
	//
	// x-displayName: "Terraform Output"
	// x-example: "value"
	// The value of an "output" variable from the terraform state file.
	TfOutput string `protobuf:"bytes,4,opt,name=tf_output,json=tfOutput,proto3" json:"tf_output,omitempty"`
	// error_output
	//
	// x-displayName: "Error Output"
	// x-example: "value"
	// Error output of terraform run
	ErrorOutput string `protobuf:"bytes,5,opt,name=error_output,json=errorOutput,proto3" json:"error_output,omitempty"`
	// modification_timestamp
	//
	// x-displayName: "Modification Timestamp"
	// ModificationTimestamp is a timestamp representing the server time when this status was
	// last modified.
	ModificationTimestamp *google_protobuf1.Timestamp `protobuf:"bytes,6,opt,name=modification_timestamp,json=modificationTimestamp" json:"modification_timestamp,omitempty"`
	// tf_stdout
	//
	// x-displayName: "Terraform Standard Output"
	// The stdout of terraform apply command.
	TfStdout string `protobuf:"bytes,7,opt,name=tf_stdout,json=tfStdout,proto3" json:"tf_stdout,omitempty"`
}

func (m *ApplyStatus) Reset()                    { *m = ApplyStatus{} }
func (*ApplyStatus) ProtoMessage()               {}
func (*ApplyStatus) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{2} }

type isApplyStatus_State interface {
	isApplyStatus_State()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type ApplyStatus_ApplyState struct {
	ApplyState ApplyStageState `protobuf:"varint,1,opt,name=apply_state,json=applyState,proto3,enum=ves.io.schema.views.terraform_parameters.ApplyStageState,oneof"`
}
type ApplyStatus_DestroyState struct {
	DestroyState DestroyStageState `protobuf:"varint,2,opt,name=destroy_state,json=destroyState,proto3,enum=ves.io.schema.views.terraform_parameters.DestroyStageState,oneof"`
}
type ApplyStatus_InfraState struct {
	InfraState InfraState `protobuf:"varint,3,opt,name=infra_state,json=infraState,proto3,enum=ves.io.schema.views.terraform_parameters.InfraState,oneof"`
}

func (*ApplyStatus_ApplyState) isApplyStatus_State()   {}
func (*ApplyStatus_DestroyState) isApplyStatus_State() {}
func (*ApplyStatus_InfraState) isApplyStatus_State()   {}

func (m *ApplyStatus) GetState() isApplyStatus_State {
	if m != nil {
		return m.State
	}
	return nil
}

func (m *ApplyStatus) GetApplyState() ApplyStageState {
	if x, ok := m.GetState().(*ApplyStatus_ApplyState); ok {
		return x.ApplyState
	}
	return APPLIED
}

func (m *ApplyStatus) GetDestroyState() DestroyStageState {
	if x, ok := m.GetState().(*ApplyStatus_DestroyState); ok {
		return x.DestroyState
	}
	return DESTROYED
}

func (m *ApplyStatus) GetInfraState() InfraState {
	if x, ok := m.GetState().(*ApplyStatus_InfraState); ok {
		return x.InfraState
	}
	return PROVISIONED
}

func (m *ApplyStatus) GetTfOutput() string {
	if m != nil {
		return m.TfOutput
	}
	return ""
}

func (m *ApplyStatus) GetErrorOutput() string {
	if m != nil {
		return m.ErrorOutput
	}
	return ""
}

func (m *ApplyStatus) GetModificationTimestamp() *google_protobuf1.Timestamp {
	if m != nil {
		return m.ModificationTimestamp
	}
	return nil
}

func (m *ApplyStatus) GetTfStdout() string {
	if m != nil {
		return m.TfStdout
	}
	return ""
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*ApplyStatus) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _ApplyStatus_OneofMarshaler, _ApplyStatus_OneofUnmarshaler, _ApplyStatus_OneofSizer, []interface{}{
		(*ApplyStatus_ApplyState)(nil),
		(*ApplyStatus_DestroyState)(nil),
		(*ApplyStatus_InfraState)(nil),
	}
}

func _ApplyStatus_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*ApplyStatus)
	// state
	switch x := m.State.(type) {
	case *ApplyStatus_ApplyState:
		_ = b.EncodeVarint(1<<3 | proto.WireVarint)
		_ = b.EncodeVarint(uint64(x.ApplyState))
	case *ApplyStatus_DestroyState:
		_ = b.EncodeVarint(2<<3 | proto.WireVarint)
		_ = b.EncodeVarint(uint64(x.DestroyState))
	case *ApplyStatus_InfraState:
		_ = b.EncodeVarint(3<<3 | proto.WireVarint)
		_ = b.EncodeVarint(uint64(x.InfraState))
	case nil:
	default:
		return fmt.Errorf("ApplyStatus.State has unexpected type %T", x)
	}
	return nil
}

func _ApplyStatus_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*ApplyStatus)
	switch tag {
	case 1: // state.apply_state
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.State = &ApplyStatus_ApplyState{ApplyStageState(x)}
		return true, err
	case 2: // state.destroy_state
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.State = &ApplyStatus_DestroyState{DestroyStageState(x)}
		return true, err
	case 3: // state.infra_state
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.State = &ApplyStatus_InfraState{InfraState(x)}
		return true, err
	default:
		return false, nil
	}
}

func _ApplyStatus_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*ApplyStatus)
	// state
	switch x := m.State.(type) {
	case *ApplyStatus_ApplyState:
		n += proto.SizeVarint(1<<3 | proto.WireVarint)
		n += proto.SizeVarint(uint64(x.ApplyState))
	case *ApplyStatus_DestroyState:
		n += proto.SizeVarint(2<<3 | proto.WireVarint)
		n += proto.SizeVarint(uint64(x.DestroyState))
	case *ApplyStatus_InfraState:
		n += proto.SizeVarint(3<<3 | proto.WireVarint)
		n += proto.SizeVarint(uint64(x.InfraState))
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// VIP Port Config
//
// x-displayName: "VIP Port Config"
// Defines VIP Port config which will be used while creating cloud loadbalancer listener
type VIPPortConfig struct {
	// Port
	//
	// x-displayName: "TCP/UDP Port"
	// x-example: "443"
	// Listener port for the cloud loadbalancer
	Port uint32 `protobuf:"varint,1,opt,name=port,proto3" json:"port,omitempty"`
	// protocol
	//
	// x-displayName: "Protocol"
	// x-example: "TCP"
	// Protocol for the cloud loadbalancer listener.
	Protocol string `protobuf:"bytes,2,opt,name=protocol,proto3" json:"protocol,omitempty"`
}

func (m *VIPPortConfig) Reset()                    { *m = VIPPortConfig{} }
func (*VIPPortConfig) ProtoMessage()               {}
func (*VIPPortConfig) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{3} }

func (m *VIPPortConfig) GetPort() uint32 {
	if m != nil {
		return m.Port
	}
	return 0
}

func (m *VIPPortConfig) GetProtocol() string {
	if m != nil {
		return m.Protocol
	}
	return ""
}

func init() {
	proto.RegisterType((*GlobalSpecType)(nil), "ves.io.schema.views.terraform_parameters.GlobalSpecType")
	golang_proto.RegisterType((*GlobalSpecType)(nil), "ves.io.schema.views.terraform_parameters.GlobalSpecType")
	proto.RegisterType((*PlanStatus)(nil), "ves.io.schema.views.terraform_parameters.PlanStatus")
	golang_proto.RegisterType((*PlanStatus)(nil), "ves.io.schema.views.terraform_parameters.PlanStatus")
	proto.RegisterType((*ApplyStatus)(nil), "ves.io.schema.views.terraform_parameters.ApplyStatus")
	golang_proto.RegisterType((*ApplyStatus)(nil), "ves.io.schema.views.terraform_parameters.ApplyStatus")
	proto.RegisterType((*VIPPortConfig)(nil), "ves.io.schema.views.terraform_parameters.VIPPortConfig")
	golang_proto.RegisterType((*VIPPortConfig)(nil), "ves.io.schema.views.terraform_parameters.VIPPortConfig")
	proto.RegisterEnum("ves.io.schema.views.terraform_parameters.PlanStageState", PlanStageState_name, PlanStageState_value)
	golang_proto.RegisterEnum("ves.io.schema.views.terraform_parameters.PlanStageState", PlanStageState_name, PlanStageState_value)
	proto.RegisterEnum("ves.io.schema.views.terraform_parameters.ApplyStageState", ApplyStageState_name, ApplyStageState_value)
	golang_proto.RegisterEnum("ves.io.schema.views.terraform_parameters.ApplyStageState", ApplyStageState_name, ApplyStageState_value)
	proto.RegisterEnum("ves.io.schema.views.terraform_parameters.DestroyStageState", DestroyStageState_name, DestroyStageState_value)
	golang_proto.RegisterEnum("ves.io.schema.views.terraform_parameters.DestroyStageState", DestroyStageState_name, DestroyStageState_value)
	proto.RegisterEnum("ves.io.schema.views.terraform_parameters.InfraState", InfraState_name, InfraState_value)
	golang_proto.RegisterEnum("ves.io.schema.views.terraform_parameters.InfraState", InfraState_name, InfraState_value)
	proto.RegisterEnum("ves.io.schema.views.terraform_parameters.RunAction", RunAction_name, RunAction_value)
	golang_proto.RegisterEnum("ves.io.schema.views.terraform_parameters.RunAction", RunAction_name, RunAction_value)
	proto.RegisterEnum("ves.io.schema.views.terraform_parameters.InterfaceType", InterfaceType_name, InterfaceType_value)
	golang_proto.RegisterEnum("ves.io.schema.views.terraform_parameters.InterfaceType", InterfaceType_name, InterfaceType_value)
	proto.RegisterEnum("ves.io.schema.views.terraform_parameters.CloudGatewayType", CloudGatewayType_name, CloudGatewayType_value)
	golang_proto.RegisterEnum("ves.io.schema.views.terraform_parameters.CloudGatewayType", CloudGatewayType_name, CloudGatewayType_value)
}
func (x PlanStageState) String() string {
	s, ok := PlanStageState_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x ApplyStageState) String() string {
	s, ok := ApplyStageState_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x DestroyStageState) String() string {
	s, ok := DestroyStageState_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x InfraState) String() string {
	s, ok := InfraState_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x RunAction) String() string {
	s, ok := RunAction_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x InterfaceType) String() string {
	s, ok := InterfaceType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x CloudGatewayType) String() string {
	s, ok := CloudGatewayType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *GlobalSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType)
	if !ok {
		that2, ok := that.(GlobalSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.TfObjects) != len(that1.TfObjects) {
		return false
	}
	for i := range this.TfObjects {
		if !this.TfObjects[i].Equal(that1.TfObjects[i]) {
			return false
		}
	}
	return true
}
func (this *PlanStatus) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PlanStatus)
	if !ok {
		that2, ok := that.(PlanStatus)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.State == nil {
		if this.State != nil {
			return false
		}
	} else if this.State == nil {
		return false
	} else if !this.State.Equal(that1.State) {
		return false
	}
	if this.TfPlanOutput != that1.TfPlanOutput {
		return false
	}
	if this.ErrorOutput != that1.ErrorOutput {
		return false
	}
	if !this.ModificationTimestamp.Equal(that1.ModificationTimestamp) {
		return false
	}
	return true
}
func (this *PlanStatus_PlanState) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PlanStatus_PlanState)
	if !ok {
		that2, ok := that.(PlanStatus_PlanState)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.PlanState != that1.PlanState {
		return false
	}
	return true
}
func (this *PlanStatus_InfraState) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PlanStatus_InfraState)
	if !ok {
		that2, ok := that.(PlanStatus_InfraState)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.InfraState != that1.InfraState {
		return false
	}
	return true
}
func (this *ApplyStatus) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ApplyStatus)
	if !ok {
		that2, ok := that.(ApplyStatus)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.State == nil {
		if this.State != nil {
			return false
		}
	} else if this.State == nil {
		return false
	} else if !this.State.Equal(that1.State) {
		return false
	}
	if this.TfOutput != that1.TfOutput {
		return false
	}
	if this.ErrorOutput != that1.ErrorOutput {
		return false
	}
	if !this.ModificationTimestamp.Equal(that1.ModificationTimestamp) {
		return false
	}
	if this.TfStdout != that1.TfStdout {
		return false
	}
	return true
}
func (this *ApplyStatus_ApplyState) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ApplyStatus_ApplyState)
	if !ok {
		that2, ok := that.(ApplyStatus_ApplyState)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ApplyState != that1.ApplyState {
		return false
	}
	return true
}
func (this *ApplyStatus_DestroyState) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ApplyStatus_DestroyState)
	if !ok {
		that2, ok := that.(ApplyStatus_DestroyState)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.DestroyState != that1.DestroyState {
		return false
	}
	return true
}
func (this *ApplyStatus_InfraState) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ApplyStatus_InfraState)
	if !ok {
		that2, ok := that.(ApplyStatus_InfraState)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.InfraState != that1.InfraState {
		return false
	}
	return true
}
func (this *VIPPortConfig) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*VIPPortConfig)
	if !ok {
		that2, ok := that.(VIPPortConfig)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Port != that1.Port {
		return false
	}
	if this.Protocol != that1.Protocol {
		return false
	}
	return true
}
func (this *GlobalSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&terraform_parameters.GlobalSpecType{")
	if this.TfObjects != nil {
		s = append(s, "TfObjects: "+fmt.Sprintf("%#v", this.TfObjects)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *PlanStatus) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&terraform_parameters.PlanStatus{")
	if this.State != nil {
		s = append(s, "State: "+fmt.Sprintf("%#v", this.State)+",\n")
	}
	s = append(s, "TfPlanOutput: "+fmt.Sprintf("%#v", this.TfPlanOutput)+",\n")
	s = append(s, "ErrorOutput: "+fmt.Sprintf("%#v", this.ErrorOutput)+",\n")
	if this.ModificationTimestamp != nil {
		s = append(s, "ModificationTimestamp: "+fmt.Sprintf("%#v", this.ModificationTimestamp)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *PlanStatus_PlanState) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&terraform_parameters.PlanStatus_PlanState{` +
		`PlanState:` + fmt.Sprintf("%#v", this.PlanState) + `}`}, ", ")
	return s
}
func (this *PlanStatus_InfraState) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&terraform_parameters.PlanStatus_InfraState{` +
		`InfraState:` + fmt.Sprintf("%#v", this.InfraState) + `}`}, ", ")
	return s
}
func (this *ApplyStatus) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 11)
	s = append(s, "&terraform_parameters.ApplyStatus{")
	if this.State != nil {
		s = append(s, "State: "+fmt.Sprintf("%#v", this.State)+",\n")
	}
	s = append(s, "TfOutput: "+fmt.Sprintf("%#v", this.TfOutput)+",\n")
	s = append(s, "ErrorOutput: "+fmt.Sprintf("%#v", this.ErrorOutput)+",\n")
	if this.ModificationTimestamp != nil {
		s = append(s, "ModificationTimestamp: "+fmt.Sprintf("%#v", this.ModificationTimestamp)+",\n")
	}
	s = append(s, "TfStdout: "+fmt.Sprintf("%#v", this.TfStdout)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ApplyStatus_ApplyState) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&terraform_parameters.ApplyStatus_ApplyState{` +
		`ApplyState:` + fmt.Sprintf("%#v", this.ApplyState) + `}`}, ", ")
	return s
}
func (this *ApplyStatus_DestroyState) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&terraform_parameters.ApplyStatus_DestroyState{` +
		`DestroyState:` + fmt.Sprintf("%#v", this.DestroyState) + `}`}, ", ")
	return s
}
func (this *ApplyStatus_InfraState) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&terraform_parameters.ApplyStatus_InfraState{` +
		`InfraState:` + fmt.Sprintf("%#v", this.InfraState) + `}`}, ", ")
	return s
}
func (this *VIPPortConfig) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&terraform_parameters.VIPPortConfig{")
	s = append(s, "Port: "+fmt.Sprintf("%#v", this.Port)+",\n")
	s = append(s, "Protocol: "+fmt.Sprintf("%#v", this.Protocol)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringTypes(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *GlobalSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GlobalSpecType) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.TfObjects) > 0 {
		for _, msg := range m.TfObjects {
			dAtA[i] = 0x12
			i++
			i = encodeVarintTypes(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *PlanStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PlanStatus) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.State != nil {
		nn1, err := m.State.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn1
	}
	if len(m.TfPlanOutput) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(len(m.TfPlanOutput)))
		i += copy(dAtA[i:], m.TfPlanOutput)
	}
	if len(m.ErrorOutput) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintTypes(dAtA, i, uint64(len(m.ErrorOutput)))
		i += copy(dAtA[i:], m.ErrorOutput)
	}
	if m.ModificationTimestamp != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.ModificationTimestamp.Size()))
		n2, err := m.ModificationTimestamp.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	return i, nil
}

func (m *PlanStatus_PlanState) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x8
	i++
	i = encodeVarintTypes(dAtA, i, uint64(m.PlanState))
	return i, nil
}
func (m *PlanStatus_InfraState) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x10
	i++
	i = encodeVarintTypes(dAtA, i, uint64(m.InfraState))
	return i, nil
}
func (m *ApplyStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ApplyStatus) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.State != nil {
		nn3, err := m.State.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn3
	}
	if len(m.TfOutput) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintTypes(dAtA, i, uint64(len(m.TfOutput)))
		i += copy(dAtA[i:], m.TfOutput)
	}
	if len(m.ErrorOutput) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(len(m.ErrorOutput)))
		i += copy(dAtA[i:], m.ErrorOutput)
	}
	if m.ModificationTimestamp != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.ModificationTimestamp.Size()))
		n4, err := m.ModificationTimestamp.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	if len(m.TfStdout) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(len(m.TfStdout)))
		i += copy(dAtA[i:], m.TfStdout)
	}
	return i, nil
}

func (m *ApplyStatus_ApplyState) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x8
	i++
	i = encodeVarintTypes(dAtA, i, uint64(m.ApplyState))
	return i, nil
}
func (m *ApplyStatus_DestroyState) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x10
	i++
	i = encodeVarintTypes(dAtA, i, uint64(m.DestroyState))
	return i, nil
}
func (m *ApplyStatus_InfraState) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x18
	i++
	i = encodeVarintTypes(dAtA, i, uint64(m.InfraState))
	return i, nil
}
func (m *VIPPortConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VIPPortConfig) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Port != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.Port))
	}
	if len(m.Protocol) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Protocol)))
		i += copy(dAtA[i:], m.Protocol)
	}
	return i, nil
}

func encodeVarintTypes(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *GlobalSpecType) Size() (n int) {
	var l int
	_ = l
	if len(m.TfObjects) > 0 {
		for _, e := range m.TfObjects {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *PlanStatus) Size() (n int) {
	var l int
	_ = l
	if m.State != nil {
		n += m.State.Size()
	}
	l = len(m.TfPlanOutput)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.ErrorOutput)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.ModificationTimestamp != nil {
		l = m.ModificationTimestamp.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *PlanStatus_PlanState) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovTypes(uint64(m.PlanState))
	return n
}
func (m *PlanStatus_InfraState) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovTypes(uint64(m.InfraState))
	return n
}
func (m *ApplyStatus) Size() (n int) {
	var l int
	_ = l
	if m.State != nil {
		n += m.State.Size()
	}
	l = len(m.TfOutput)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.ErrorOutput)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.ModificationTimestamp != nil {
		l = m.ModificationTimestamp.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.TfStdout)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *ApplyStatus_ApplyState) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovTypes(uint64(m.ApplyState))
	return n
}
func (m *ApplyStatus_DestroyState) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovTypes(uint64(m.DestroyState))
	return n
}
func (m *ApplyStatus_InfraState) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovTypes(uint64(m.InfraState))
	return n
}
func (m *VIPPortConfig) Size() (n int) {
	var l int
	_ = l
	if m.Port != 0 {
		n += 1 + sovTypes(uint64(m.Port))
	}
	l = len(m.Protocol)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func sovTypes(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozTypes(x uint64) (n int) {
	return sovTypes(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *GlobalSpecType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType{`,
		`TfObjects:` + strings.Replace(fmt.Sprintf("%v", this.TfObjects), "Any", "google_protobuf3.Any", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PlanStatus) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PlanStatus{`,
		`State:` + fmt.Sprintf("%v", this.State) + `,`,
		`TfPlanOutput:` + fmt.Sprintf("%v", this.TfPlanOutput) + `,`,
		`ErrorOutput:` + fmt.Sprintf("%v", this.ErrorOutput) + `,`,
		`ModificationTimestamp:` + strings.Replace(fmt.Sprintf("%v", this.ModificationTimestamp), "Timestamp", "google_protobuf1.Timestamp", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PlanStatus_PlanState) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PlanStatus_PlanState{`,
		`PlanState:` + fmt.Sprintf("%v", this.PlanState) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PlanStatus_InfraState) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PlanStatus_InfraState{`,
		`InfraState:` + fmt.Sprintf("%v", this.InfraState) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ApplyStatus) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ApplyStatus{`,
		`State:` + fmt.Sprintf("%v", this.State) + `,`,
		`TfOutput:` + fmt.Sprintf("%v", this.TfOutput) + `,`,
		`ErrorOutput:` + fmt.Sprintf("%v", this.ErrorOutput) + `,`,
		`ModificationTimestamp:` + strings.Replace(fmt.Sprintf("%v", this.ModificationTimestamp), "Timestamp", "google_protobuf1.Timestamp", 1) + `,`,
		`TfStdout:` + fmt.Sprintf("%v", this.TfStdout) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ApplyStatus_ApplyState) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ApplyStatus_ApplyState{`,
		`ApplyState:` + fmt.Sprintf("%v", this.ApplyState) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ApplyStatus_DestroyState) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ApplyStatus_DestroyState{`,
		`DestroyState:` + fmt.Sprintf("%v", this.DestroyState) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ApplyStatus_InfraState) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ApplyStatus_InfraState{`,
		`InfraState:` + fmt.Sprintf("%v", this.InfraState) + `,`,
		`}`,
	}, "")
	return s
}
func (this *VIPPortConfig) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&VIPPortConfig{`,
		`Port:` + fmt.Sprintf("%v", this.Port) + `,`,
		`Protocol:` + fmt.Sprintf("%v", this.Protocol) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringTypes(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *GlobalSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GlobalSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GlobalSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TfObjects", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TfObjects = append(m.TfObjects, &google_protobuf3.Any{})
			if err := m.TfObjects[len(m.TfObjects)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PlanStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PlanStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PlanStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlanState", wireType)
			}
			var v PlanStageState
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (PlanStageState(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.State = &PlanStatus_PlanState{v}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InfraState", wireType)
			}
			var v InfraState
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (InfraState(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.State = &PlanStatus_InfraState{v}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TfPlanOutput", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TfPlanOutput = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorOutput", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ErrorOutput = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ModificationTimestamp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ModificationTimestamp == nil {
				m.ModificationTimestamp = &google_protobuf1.Timestamp{}
			}
			if err := m.ModificationTimestamp.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ApplyStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ApplyStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ApplyStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApplyState", wireType)
			}
			var v ApplyStageState
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (ApplyStageState(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.State = &ApplyStatus_ApplyState{v}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DestroyState", wireType)
			}
			var v DestroyStageState
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (DestroyStageState(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.State = &ApplyStatus_DestroyState{v}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InfraState", wireType)
			}
			var v InfraState
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (InfraState(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.State = &ApplyStatus_InfraState{v}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TfOutput", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TfOutput = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorOutput", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ErrorOutput = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ModificationTimestamp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ModificationTimestamp == nil {
				m.ModificationTimestamp = &google_protobuf1.Timestamp{}
			}
			if err := m.ModificationTimestamp.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TfStdout", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TfStdout = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VIPPortConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VIPPortConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VIPPortConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Port", wireType)
			}
			m.Port = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Port |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Protocol", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Protocol = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTypes(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthTypes
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipTypes(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthTypes = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTypes   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("ves.io/schema/views/terraform_parameters/types.proto", fileDescriptorTypes)
}
func init() {
	golang_proto.RegisterFile("ves.io/schema/views/terraform_parameters/types.proto", fileDescriptorTypes)
}

var fileDescriptorTypes = []byte{
	// 1024 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x56, 0xcd, 0x6e, 0xe3, 0x54,
	0x14, 0x8e, 0xf3, 0xd3, 0x49, 0x4e, 0x7e, 0xea, 0xde, 0x99, 0xa9, 0x42, 0x07, 0xb9, 0xa5, 0x9a,
	0x45, 0x15, 0x29, 0x8e, 0xd4, 0x99, 0x05, 0x88, 0x95, 0x9b, 0x98, 0xd4, 0x6d, 0x89, 0x83, 0xed,
	0x4e, 0x55, 0x84, 0xb0, 0x9c, 0xe4, 0x3a, 0x63, 0x70, 0x72, 0x2d, 0xfb, 0xa6, 0x25, 0x3b, 0x24,
	0x5e, 0x80, 0x05, 0x0f, 0xc1, 0x33, 0xc0, 0x66, 0x96, 0x2c, 0xbb, 0x9c, 0x25, 0xcd, 0x6c, 0x60,
	0x81, 0x34, 0x3c, 0xc1, 0x20, 0xdf, 0xd8, 0x49, 0xdc, 0x16, 0x51, 0x10, 0xbb, 0x9e, 0xbf, 0xef,
	0x7e, 0xe7, 0xfb, 0x4e, 0x9a, 0xc0, 0xf3, 0x0b, 0x1c, 0x88, 0x0e, 0x69, 0x04, 0xfd, 0x97, 0x78,
	0x64, 0x35, 0x2e, 0x1c, 0x7c, 0x19, 0x34, 0x28, 0xf6, 0x7d, 0xcb, 0x26, 0xfe, 0xc8, 0xf4, 0x2c,
	0xdf, 0x1a, 0x61, 0x8a, 0xfd, 0xa0, 0x41, 0xa7, 0x1e, 0x0e, 0x44, 0xcf, 0x27, 0x94, 0xa0, 0xbd,
	0xf9, 0x94, 0x38, 0x9f, 0x12, 0xd9, 0x94, 0x78, 0xd7, 0xd4, 0x56, 0x7d, 0xe8, 0xd0, 0x97, 0x93,
	0x9e, 0xd8, 0x27, 0xa3, 0xc6, 0x90, 0x0c, 0x49, 0x83, 0x01, 0xf4, 0x26, 0x36, 0x8b, 0x58, 0xc0,
	0xfe, 0x9a, 0x03, 0x6f, 0xbd, 0x37, 0x24, 0x64, 0xe8, 0xe2, 0x65, 0x97, 0x35, 0x9e, 0x46, 0xa5,
	0xed, 0x9b, 0x25, 0xea, 0x8c, 0x70, 0x40, 0xad, 0x91, 0x17, 0x35, 0x3c, 0x49, 0xae, 0x42, 0x3c,
	0xea, 0x90, 0x71, 0x10, 0x03, 0x27, 0x8b, 0x2b, 0xcb, 0x6c, 0xbd, 0x7f, 0x43, 0x02, 0xcb, 0x75,
	0x06, 0x16, 0xc5, 0x51, 0x75, 0xe7, 0xb6, 0x40, 0x66, 0x12, 0xfa, 0xe9, 0x5d, 0x12, 0x06, 0x0e,
	0xc5, 0xe6, 0xea, 0x2b, 0xdb, 0x77, 0x0a, 0xbd, 0x6c, 0xd8, 0x3d, 0x86, 0x4a, 0xdb, 0x25, 0x3d,
	0xcb, 0xd5, 0x3d, 0xdc, 0x37, 0xa6, 0x1e, 0x46, 0xcf, 0x00, 0xa8, 0x6d, 0x92, 0xde, 0x57, 0xb8,
	0x4f, 0x83, 0x6a, 0x7a, 0x27, 0xb3, 0x57, 0xdc, 0x7f, 0x24, 0xce, 0x65, 0x10, 0x63, 0x19, 0x44,
	0x69, 0x3c, 0xd5, 0x0a, 0xd4, 0x56, 0xe7, 0x6d, 0x47, 0xd9, 0x3c, 0xc7, 0xa7, 0x77, 0xff, 0x4c,
	0x03, 0x74, 0x5d, 0x6b, 0xac, 0x53, 0x8b, 0x4e, 0x02, 0x74, 0x0e, 0xe0, 0xb9, 0xd6, 0xd8, 0x0c,
	0xa8, 0x45, 0x71, 0x95, 0xdb, 0xe1, 0xf6, 0x2a, 0xfb, 0x1f, 0x8a, 0xf7, 0x35, 0x51, 0x8c, 0x90,
	0x86, 0x38, 0x84, 0xc3, 0x87, 0x29, 0xad, 0xe0, 0x45, 0xd8, 0x18, 0x9d, 0x41, 0xd1, 0x19, 0xdb,
	0xbe, 0x15, 0x61, 0xa7, 0x19, 0xf6, 0xf3, 0xfb, 0x63, 0x2b, 0xe1, 0x70, 0x8c, 0x0b, 0xce, 0x22,
	0x42, 0x4f, 0xa1, 0x42, 0x6d, 0x93, 0xd1, 0x26, 0x13, 0xea, 0x4d, 0x68, 0x35, 0xb3, 0xc3, 0xed,
	0x15, 0xb4, 0x12, 0xb5, 0x43, 0x3e, 0x2a, 0xcb, 0xa1, 0x0f, 0xa0, 0x84, 0x7d, 0x9f, 0xf8, 0x71,
	0x4f, 0x96, 0xf5, 0x14, 0x59, 0x2e, 0x6a, 0xf9, 0x0c, 0x36, 0x47, 0x64, 0xe0, 0xd8, 0x4e, 0xdf,
	0x0a, 0x6d, 0x33, 0x17, 0x77, 0x53, 0xcd, 0xed, 0x70, 0x7b, 0xc5, 0xfd, 0xad, 0x5b, 0x92, 0x1a,
	0x71, 0x87, 0xf6, 0x78, 0x75, 0x72, 0x91, 0x3e, 0x28, 0x43, 0x8e, 0xad, 0x8b, 0xb2, 0x57, 0x3f,
	0x73, 0x6b, 0x47, 0xd9, 0xfc, 0x1a, 0xff, 0x60, 0xf7, 0x8f, 0x0c, 0x14, 0x25, 0xcf, 0x73, 0xa7,
	0x91, 0xe8, 0x5f, 0x40, 0xd1, 0x0a, 0xc3, 0x84, 0xea, 0x1f, 0xdd, 0x5f, 0x99, 0x18, 0x6b, 0x29,
	0x3b, 0x58, 0x31, 0x3c, 0x46, 0x3d, 0x28, 0x0f, 0x70, 0x40, 0x7d, 0x32, 0x4d, 0x28, 0xff, 0xf1,
	0xfd, 0xf1, 0x5b, 0xf3, 0xf1, 0xc4, 0x0b, 0xa5, 0xc1, 0x22, 0x79, 0xdb, 0xdb, 0xcc, 0xff, 0xe6,
	0xed, 0x13, 0x28, 0x84, 0x97, 0xbd, 0x6a, 0x59, 0x9e, 0xda, 0x7f, 0x63, 0x69, 0xee, 0xdf, 0x58,
	0xba, 0xf6, 0x1f, 0x2d, 0x8d, 0x28, 0x05, 0x74, 0x40, 0x26, 0xb4, 0xfa, 0x20, 0xa6, 0xa4, 0xb3,
	0x38, 0xe9, 0x77, 0xfe, 0x28, 0x9b, 0xcf, 0xf3, 0x85, 0x5d, 0x13, 0xca, 0x2f, 0x94, 0x6e, 0x97,
	0xf8, 0xb4, 0x49, 0xc6, 0xb6, 0x33, 0x44, 0xdb, 0x90, 0xf5, 0x88, 0x4f, 0x99, 0xd3, 0xe5, 0x83,
	0xe2, 0x4f, 0xbf, 0xbf, 0xca, 0xac, 0xd5, 0xb2, 0xd5, 0x77, 0xef, 0x32, 0x1a, 0x2b, 0xa0, 0x3a,
	0xe4, 0x19, 0xa1, 0x3e, 0x71, 0x99, 0x5d, 0x85, 0x83, 0x8d, 0xb0, 0xa9, 0xe4, 0x83, 0x96, 0x31,
	0x9a, 0x5d, 0x2d, 0x73, 0xda, 0xea, 0x6a, 0x8b, 0x96, 0xda, 0x25, 0x54, 0x92, 0x9f, 0x3c, 0x54,
	0x82, 0x7c, 0xf7, 0x44, 0xea, 0x74, 0x94, 0x4e, 0x9b, 0x4f, 0x21, 0x1e, 0x4a, 0x61, 0x64, 0xca,
	0x9a, 0xa6, 0x6a, 0x72, 0x8b, 0xe7, 0x50, 0x05, 0xa0, 0xa3, 0x9a, 0xcd, 0x43, 0xa9, 0xd3, 0x96,
	0x75, 0x3e, 0x8d, 0xd6, 0xa1, 0x78, 0x28, 0xe9, 0x8b, 0x44, 0x06, 0x95, 0xa1, 0xd0, 0x52, 0xf4,
	0xa6, 0xa4, 0xb5, 0xe4, 0x16, 0x9f, 0x45, 0x8f, 0x61, 0x83, 0x21, 0x28, 0x1d, 0xc5, 0x58, 0xc0,
	0xe4, 0x6a, 0xdf, 0x71, 0xb0, 0x7e, 0xe3, 0xfa, 0x50, 0x11, 0x1e, 0x48, 0xdd, 0xee, 0x89, 0x22,
	0xb7, 0xf8, 0x14, 0xda, 0x80, 0x72, 0x18, 0x9c, 0xaf, 0x3c, 0xbd, 0x09, 0x68, 0x9e, 0x4a, 0x60,
	0xa5, 0x43, 0xca, 0x2c, 0x1f, 0x52, 0xce, 0x20, 0x04, 0x95, 0x79, 0xd7, 0x62, 0x8d, 0xec, 0x72,
	0x32, 0xb1, 0x4c, 0xae, 0xd6, 0x86, 0x8d, 0x5b, 0x27, 0xca, 0x16, 0x90, 0x75, 0x43, 0x53, 0xcf,
	0x19, 0x91, 0x87, 0xb0, 0x1e, 0x85, 0x49, 0x15, 0xa2, 0x64, 0xf8, 0x40, 0xba, 0x76, 0x0c, 0xb0,
	0xbc, 0xc4, 0x50, 0x93, 0xae, 0xa6, 0xbe, 0x50, 0x74, 0x45, 0xed, 0x30, 0x8c, 0x32, 0x14, 0x0c,
	0xe5, 0x53, 0xb9, 0x65, 0xaa, 0xa7, 0x06, 0xcf, 0x85, 0x8b, 0x2e, 0xd9, 0x87, 0x12, 0xc7, 0xcd,
	0x6c, 0x83, 0x5a, 0x1d, 0x0a, 0xda, 0x64, 0x2c, 0xf5, 0xc3, 0xeb, 0x41, 0x05, 0xc8, 0x31, 0xea,
	0x7c, 0x0a, 0xe5, 0x21, 0x1b, 0xf2, 0x9f, 0x03, 0x44, 0xcf, 0xf3, 0xe9, 0x9a, 0x01, 0x65, 0x65,
	0x4c, 0xb1, 0x6f, 0x5b, 0x7d, 0xcc, 0xfe, 0xa9, 0x3f, 0x02, 0x5e, 0xe9, 0x18, 0xb2, 0xf6, 0x89,
	0xd4, 0x94, 0x4d, 0xa5, 0xa3, 0x2b, 0x2d, 0x99, 0x4f, 0x85, 0x46, 0x2c, 0xb3, 0xea, 0xa9, 0xc1,
	0xd2, 0x4c, 0xd4, 0x65, 0xfa, 0x4c, 0xd5, 0x8e, 0x4f, 0x54, 0xa9, 0xc5, 0xa7, 0x6b, 0x4d, 0xe0,
	0x9b, 0x2e, 0x99, 0x0c, 0xda, 0x16, 0xc5, 0x97, 0xd6, 0x94, 0x01, 0x3f, 0x84, 0x75, 0xa5, 0xd3,
	0xd6, 0x64, 0x5d, 0x37, 0xdb, 0x92, 0x21, 0x9f, 0x49, 0x21, 0xab, 0x2d, 0xd8, 0x8c, 0x93, 0x72,
	0xb2, 0xc6, 0x1d, 0xfc, 0xc0, 0x5d, 0x5d, 0x0b, 0xa9, 0xd7, 0xd7, 0x42, 0xea, 0xed, 0xb5, 0xc0,
	0x7d, 0x3b, 0x13, 0xb8, 0x1f, 0x67, 0x02, 0xf7, 0xcb, 0x4c, 0xe0, 0xae, 0x66, 0x02, 0xf7, 0x7a,
	0x26, 0x70, 0xbf, 0xce, 0x04, 0xee, 0xb7, 0x99, 0x90, 0x7a, 0x3b, 0x13, 0xb8, 0xef, 0xdf, 0x08,
	0xa9, 0x57, 0x6f, 0x04, 0xee, 0xf3, 0x2f, 0x87, 0xc4, 0xfb, 0x7a, 0x28, 0x5e, 0x10, 0x97, 0x7d,
	0xe6, 0xc5, 0xc9, 0xca, 0xef, 0x85, 0xba, 0xe7, 0x93, 0x0b, 0x67, 0x80, 0xfd, 0x7a, 0x5c, 0x6e,
	0x78, 0xbd, 0x21, 0x69, 0xe0, 0x6f, 0x68, 0xf4, 0xbd, 0xf7, 0x8f, 0xbf, 0x33, 0x7a, 0x6b, 0xec,
	0xfe, 0x9f, 0xfd, 0x15, 0x00, 0x00, 0xff, 0xff, 0x80, 0x45, 0x44, 0x5a, 0x9a, 0x08, 0x00, 0x00,
}
