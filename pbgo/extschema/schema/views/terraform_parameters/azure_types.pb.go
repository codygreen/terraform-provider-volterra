// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ves.io/schema/views/terraform_parameters/azure_types.proto

package terraform_parameters

import proto "github.com/gogo/protobuf/proto"
import golang_proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"
import _ "github.com/gogo/protobuf/types"
import ves_io_schema_certified_hardware "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/certified_hardware"
import _ "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
import _ "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
import _ "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
import _ "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
import ves_io_schema_views1 "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/views"
import _ "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/views"

import strings "strings"
import reflect "reflect"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Azure Terraform Instance Parameters
//
// x-displayName: "Azure Terraform Instance Parameters"
// Shape of the view terraform parameters specification
type AzureInstanceType struct {
	// Volterra Node Id
	//
	// x-displayName: "Volterra Node ID"
	// Volterra Node ID will be used to refer to this node in other TF parameters
	VoltNodeId string `protobuf:"bytes,1,opt,name=volt_node_id,json=voltNodeId,proto3" json:"volt_node_id,omitempty"`
	// Volterra Vnet id
	//
	// x-displayName: "Volterra Vnet id"
	// Vnet in which Cloud Instance is launched
	VoltVnetId string `protobuf:"bytes,3,opt,name=volt_vnet_id,json=voltVnetId,proto3" json:"volt_vnet_id,omitempty"`
	// Public Subnet
	//
	// x-displayName: "Public Subnet"
	// Public subnet will be used as site local network
	PublicSubnetId string `protobuf:"bytes,4,opt,name=public_subnet_id,json=publicSubnetId,proto3" json:"public_subnet_id,omitempty"`
	// Private Subnet
	//
	// x-displayName: "Private Subnet"
	// Private subnet will be used as site inside network, when node type has two interfaces.
	PrivateSubnetId string `protobuf:"bytes,5,opt,name=private_subnet_id,json=privateSubnetId,proto3" json:"private_subnet_id,omitempty"`
	// Cloud Instance Type
	//
	// x-displayName: "Cloud Instance Type"
	// Cloud instance type like small, medium, large etc
	MachineType string `protobuf:"bytes,6,opt,name=machine_type,json=machineType,proto3" json:"machine_type,omitempty"`
	// Cloud Disk size
	//
	// x-displayName: "Cloud Disk Size"
	// Disk size to be used for this instance
	DiskSize string `protobuf:"bytes,7,opt,name=disk_size,json=diskSize,proto3" json:"disk_size,omitempty"`
	// Azure Image Parameters
	//
	// x-displayName: " Azure Image Parameters"
	// Azure Image parameters
	Marketplace *ves_io_schema_certified_hardware.Marketplace `protobuf:"bytes,9,opt,name=marketplace" json:"marketplace,omitempty"`
	// Cloud Instance AZ
	//
	// x-displayName: "Cloud Instance Az"
	// Cloud Instance AZ in which to create this instance
	Az string `protobuf:"bytes,10,opt,name=az,proto3" json:"az,omitempty"`
	// Volterra Node count
	//
	// x-displayName: "Volterra Node count"
	// Desired number of node count used for worker node scaling
	NodeCount int32 `protobuf:"varint,11,opt,name=node_count,json=nodeCount,proto3" json:"node_count,omitempty"`
}

func (m *AzureInstanceType) Reset()                    { *m = AzureInstanceType{} }
func (*AzureInstanceType) ProtoMessage()               {}
func (*AzureInstanceType) Descriptor() ([]byte, []int) { return fileDescriptorAzureTypes, []int{0} }

func (m *AzureInstanceType) GetVoltNodeId() string {
	if m != nil {
		return m.VoltNodeId
	}
	return ""
}

func (m *AzureInstanceType) GetVoltVnetId() string {
	if m != nil {
		return m.VoltVnetId
	}
	return ""
}

func (m *AzureInstanceType) GetPublicSubnetId() string {
	if m != nil {
		return m.PublicSubnetId
	}
	return ""
}

func (m *AzureInstanceType) GetPrivateSubnetId() string {
	if m != nil {
		return m.PrivateSubnetId
	}
	return ""
}

func (m *AzureInstanceType) GetMachineType() string {
	if m != nil {
		return m.MachineType
	}
	return ""
}

func (m *AzureInstanceType) GetDiskSize() string {
	if m != nil {
		return m.DiskSize
	}
	return ""
}

func (m *AzureInstanceType) GetMarketplace() *ves_io_schema_certified_hardware.Marketplace {
	if m != nil {
		return m.Marketplace
	}
	return nil
}

func (m *AzureInstanceType) GetAz() string {
	if m != nil {
		return m.Az
	}
	return ""
}

func (m *AzureInstanceType) GetNodeCount() int32 {
	if m != nil {
		return m.NodeCount
	}
	return 0
}

// Azure Subnet Param
//
// x-displayName: "New Cloud Subnet Parameters"
// Parameters for creating new AWS subnet
type AzureSubnetParamType struct {
	// Azure Resource Group
	//
	// x-displayName: "Resource Group"
	// Resource Group for this subnet
	ResourceGroup string `protobuf:"bytes,1,opt,name=resource_group,json=resourceGroup,proto3" json:"resource_group,omitempty"`
	// IPv4 Subnet
	//
	// x-displayName: "IPv4 Subnet"
	// x-example: "10.1.2.0/24"
	// IPv4 subnet prefix for this subnet
	Ipv4 string `protobuf:"bytes,2,opt,name=ipv4,proto3" json:"ipv4,omitempty"`
	// IPv6 Subnet
	//
	// x-displayName: "IPv6 Subnet"
	// x-example: "1234:568:abcd:9100::/64"
	// IPv6 subnet prefix for this subnet
	Ipv6 string `protobuf:"bytes,3,opt,name=ipv6,proto3" json:"ipv6,omitempty"`
}

func (m *AzureSubnetParamType) Reset()                    { *m = AzureSubnetParamType{} }
func (*AzureSubnetParamType) ProtoMessage()               {}
func (*AzureSubnetParamType) Descriptor() ([]byte, []int) { return fileDescriptorAzureTypes, []int{1} }

func (m *AzureSubnetParamType) GetResourceGroup() string {
	if m != nil {
		return m.ResourceGroup
	}
	return ""
}

func (m *AzureSubnetParamType) GetIpv4() string {
	if m != nil {
		return m.Ipv4
	}
	return ""
}

func (m *AzureSubnetParamType) GetIpv6() string {
	if m != nil {
		return m.Ipv6
	}
	return ""
}

// Azure Existing Subnet Type
//
// x-displayName: "Azure Existing Subnet Parameters"
// Parameters for existing subnet
type AzureExistingSubnetParamType struct {
	// Existing Subnet Name
	//
	// x-displayName: "Subnet Name"
	// Name of existing subnet.
	SubnetName string `protobuf:"bytes,1,opt,name=subnet_name,json=subnetName,proto3" json:"subnet_name,omitempty"`
	// subnet_resource_grp
	//
	// x-displayName: "Resource Group Name"
	// Specify name of Resource Group
	SubnetResourceGrp string `protobuf:"bytes,2,opt,name=subnet_resource_grp,json=subnetResourceGrp,proto3" json:"subnet_resource_grp,omitempty"`
}

func (m *AzureExistingSubnetParamType) Reset()      { *m = AzureExistingSubnetParamType{} }
func (*AzureExistingSubnetParamType) ProtoMessage() {}
func (*AzureExistingSubnetParamType) Descriptor() ([]byte, []int) {
	return fileDescriptorAzureTypes, []int{2}
}

func (m *AzureExistingSubnetParamType) GetSubnetName() string {
	if m != nil {
		return m.SubnetName
	}
	return ""
}

func (m *AzureExistingSubnetParamType) GetSubnetResourceGrp() string {
	if m != nil {
		return m.SubnetResourceGrp
	}
	return ""
}

// Azure Cloud Subnet
//
// x-displayName: "Azure Subnet"
// Parameters for Azure subnet
type AzureSubnetChoice struct {
	// New Subnet
	//
	// x-displayName: "New Subnet"
	// Parameters for creating new subnet
	SubnetParam *AzureSubnetParamType `protobuf:"bytes,1,opt,name=subnet_param,json=subnetParam" json:"subnet_param,omitempty"`
	// Existing Subnet Name
	//
	// x-displayName: "Existing Subnet Name"
	// Information about existing subnet
	ExistingSubnet *AzureExistingSubnetParamType `protobuf:"bytes,3,opt,name=existing_subnet,json=existingSubnet" json:"existing_subnet,omitempty"`
}

func (m *AzureSubnetChoice) Reset()                    { *m = AzureSubnetChoice{} }
func (*AzureSubnetChoice) ProtoMessage()               {}
func (*AzureSubnetChoice) Descriptor() ([]byte, []int) { return fileDescriptorAzureTypes, []int{3} }

func (m *AzureSubnetChoice) GetSubnetParam() *AzureSubnetParamType {
	if m != nil {
		return m.SubnetParam
	}
	return nil
}

func (m *AzureSubnetChoice) GetExistingSubnet() *AzureExistingSubnetParamType {
	if m != nil {
		return m.ExistingSubnet
	}
	return nil
}

// Terraform subnets Parameters
//
// x-displayName: "Terraform Subnet Parameters"
// Specifies subnet to be used or created in the cloud
type AzureSubnetType struct {
	// Volterra Subnet Id
	//
	// x-displayName: "Volterra Subnet ID"
	// Volterra subnet ID will be used to refer to this subnet in other TF parameters
	VoltSubnetId string `protobuf:"bytes,1,opt,name=volt_subnet_id,json=voltSubnetId,proto3" json:"volt_subnet_id,omitempty"`
	// Volterra Vnet id
	//
	// x-displayName: "Volterra Vnet id"
	// Vnet in which Cloud Instance is launched
	VoltVnetId string `protobuf:"bytes,2,opt,name=volt_vnet_id,json=voltVnetId,proto3" json:"volt_vnet_id,omitempty"`
	// Subnet Parameters
	//
	// x-displayName: "Subnet Parameters"
	// Subnet parameters for existing subnet or new subnet
	Subnet *AzureSubnetChoice `protobuf:"bytes,4,opt,name=subnet" json:"subnet,omitempty"`
	// Interface Type
	//
	// x-displayName: "Interface Type"
	// Interface Type
	InterfaceType InterfaceType `protobuf:"varint,5,opt,name=interface_type,json=interfaceType,proto3,enum=ves.io.schema.views.terraform_parameters.InterfaceType" json:"interface_type,omitempty"`
}

func (m *AzureSubnetType) Reset()                    { *m = AzureSubnetType{} }
func (*AzureSubnetType) ProtoMessage()               {}
func (*AzureSubnetType) Descriptor() ([]byte, []int) { return fileDescriptorAzureTypes, []int{4} }

func (m *AzureSubnetType) GetVoltSubnetId() string {
	if m != nil {
		return m.VoltSubnetId
	}
	return ""
}

func (m *AzureSubnetType) GetVoltVnetId() string {
	if m != nil {
		return m.VoltVnetId
	}
	return ""
}

func (m *AzureSubnetType) GetSubnet() *AzureSubnetChoice {
	if m != nil {
		return m.Subnet
	}
	return nil
}

func (m *AzureSubnetType) GetInterfaceType() InterfaceType {
	if m != nil {
		return m.InterfaceType
	}
	return INTERFACE_INSIDE
}

// Azure Vnet Parameters
//
// x-displayName: "AWS VPC Parameters"
// Parameters to create new AWS VPC
type AzureVnetParamsType struct {
	// Azure Resource Group
	//
	// x-displayName: "Resource Group"
	// Resource Group for this Vnet
	ResourceGroup string `protobuf:"bytes,1,opt,name=resource_group,json=resourceGroup,proto3" json:"resource_group,omitempty"`
	// Azure Vnet Name
	//
	// x-displayName: "Azure Vnet Name"
	// x-example: "MyVnet"
	// Name for your Azure Vnet
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// IPv4 CIDR block
	//
	// x-displayName: "IPv4 CIDR block"
	// x-example: "10.1.2.3.0/24"
	// IPv4 CIDR block for this Vnet. It has to private address space.
	PrimaryIpv4 string `protobuf:"bytes,3,opt,name=primary_ipv4,json=primaryIpv4,proto3" json:"primary_ipv4,omitempty"`
}

func (m *AzureVnetParamsType) Reset()                    { *m = AzureVnetParamsType{} }
func (*AzureVnetParamsType) ProtoMessage()               {}
func (*AzureVnetParamsType) Descriptor() ([]byte, []int) { return fileDescriptorAzureTypes, []int{5} }

func (m *AzureVnetParamsType) GetResourceGroup() string {
	if m != nil {
		return m.ResourceGroup
	}
	return ""
}

func (m *AzureVnetParamsType) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *AzureVnetParamsType) GetPrimaryIpv4() string {
	if m != nil {
		return m.PrimaryIpv4
	}
	return ""
}

// Azure Vnet Information
//
// x-displayName: "Azure Vnet Information"
// This defines Azure Vnet for a view
type AzureVnetInfoType struct {
	// New Vnet
	//
	// x-displayName: "New Vnet Parameters"
	// Parameters for creating new Vnet
	NewVnet *ves_io_schema_views1.AzureVnetParamsType `protobuf:"bytes,1,opt,name=new_vnet,json=newVnet" json:"new_vnet,omitempty"`
	// Existing Vnet
	//
	// x-displayName: "Existing Vnet"
	// Information about existing Vnet
	Vnet *ves_io_schema_views1.AzureVnetType `protobuf:"bytes,2,opt,name=vnet" json:"vnet,omitempty"`
}

func (m *AzureVnetInfoType) Reset()                    { *m = AzureVnetInfoType{} }
func (*AzureVnetInfoType) ProtoMessage()               {}
func (*AzureVnetInfoType) Descriptor() ([]byte, []int) { return fileDescriptorAzureTypes, []int{6} }

func (m *AzureVnetInfoType) GetNewVnet() *ves_io_schema_views1.AzureVnetParamsType {
	if m != nil {
		return m.NewVnet
	}
	return nil
}

func (m *AzureVnetInfoType) GetVnet() *ves_io_schema_views1.AzureVnetType {
	if m != nil {
		return m.Vnet
	}
	return nil
}

// Azure Availability Sets Information
//
// x-displayName: "Availability Sets Information"
// Provides information related to availability sets
type AvailabilitySetsInfoType struct {
	// Enable Availability Sets
	//
	// x-displayName: "Enable Availability Sets"
	// Flag to enable/disable availability sets
	Enable string `protobuf:"bytes,1,opt,name=enable,proto3" json:"enable,omitempty"`
	// Number of fault domains
	//
	// x-displayName: "Number of fault domains"
	// x-example: "1"
	// Namuber of fault domains to be used while creating the availability set
	FaultDomains uint32 `protobuf:"varint,4,opt,name=fault_domains,json=faultDomains,proto3" json:"fault_domains,omitempty"`
	// Number of update domains
	//
	// x-displayName: "Number of update domains"
	// x-example: "1"
	// Namuber of update domains to be used while creating the availability set
	UpdateDomains uint32 `protobuf:"varint,5,opt,name=update_domains,json=updateDomains,proto3" json:"update_domains,omitempty"`
}

func (m *AvailabilitySetsInfoType) Reset()      { *m = AvailabilitySetsInfoType{} }
func (*AvailabilitySetsInfoType) ProtoMessage() {}
func (*AvailabilitySetsInfoType) Descriptor() ([]byte, []int) {
	return fileDescriptorAzureTypes, []int{7}
}

func (m *AvailabilitySetsInfoType) GetEnable() string {
	if m != nil {
		return m.Enable
	}
	return ""
}

func (m *AvailabilitySetsInfoType) GetFaultDomains() uint32 {
	if m != nil {
		return m.FaultDomains
	}
	return 0
}

func (m *AvailabilitySetsInfoType) GetUpdateDomains() uint32 {
	if m != nil {
		return m.UpdateDomains
	}
	return 0
}

// Terraform Azure Vnet Site Parameters
//
// x-displayName: "Terraform Object Parameters"
// Terraform parameters to create site in Azure.
type AzureVnetSiteType struct {
	// Site Name
	//
	// x-displayName: "Site Name"
	// Name of the site object to be created
	SiteName string `protobuf:"bytes,1,opt,name=site_name,json=siteName,proto3" json:"site_name,omitempty"`
	// Azure Unique Name
	//
	// x-displayName: "Azure Unique Name"
	// Azure unique name which will be used to create the cloud resource objects on azure"
	AzureName string `protobuf:"bytes,15,opt,name=azure_name,json=azureName,proto3" json:"azure_name,omitempty"`
	// Volterra Vnet Id
	//
	// x-displayName: "Volterra Vnet ID"
	// Volterra vnet ID will be used to refer to this vnet in other TF parameters
	VoltVnetId string `protobuf:"bytes,2,opt,name=volt_vnet_id,json=voltVnetId,proto3" json:"volt_vnet_id,omitempty"`
	// Fleet Label
	//
	// x-displayName: "Fleet Label"
	// Fleet Label to identify Fleet for this site. Fleet Label is assigned to site at registration approval
	FleetLabel string `protobuf:"bytes,3,opt,name=fleet_label,json=fleetLabel,proto3" json:"fleet_label,omitempty"`
	// Certified Hardware
	//
	// x-displayName: "Certified Hardware"
	// Certified Hardware to be used to create this site.
	CertifiedHw string `protobuf:"bytes,4,opt,name=certified_hw,json=certifiedHw,proto3" json:"certified_hw,omitempty"`
	// Azure Region
	//
	// x-displayName: "Azure Region"
	// Azure region
	AzureRegion string `protobuf:"bytes,5,opt,name=azure_region,json=azureRegion,proto3" json:"azure_region,omitempty"`
	// Azure Resource Group
	//
	// x-displayName: "Azure Resource Group"
	// Azure resource group
	AzureResourceGrp string `protobuf:"bytes,6,opt,name=azure_resource_grp,json=azureResourceGrp,proto3" json:"azure_resource_grp,omitempty"`
	// Vnet
	//
	// x-displayName: "Vnet"
	// Vnet parameters to instantiate this site
	Vnet *AzureVnetInfoType `protobuf:"bytes,7,opt,name=vnet" json:"vnet,omitempty"`
	// List of Subnets
	//
	// x-displayName: "List of Subnets"
	// List of Subnets that TF script needs
	Subnets []*AzureSubnetType `protobuf:"bytes,8,rep,name=subnets" json:"subnets,omitempty"`
	// List of Master Nodes
	//
	// x-displayName: "List of Master Nodes"
	// List of Master Nodes in this Site that TF script needs to instantiate
	MasterNodes []*AzureInstanceType `protobuf:"bytes,9,rep,name=master_nodes,json=masterNodes" json:"master_nodes,omitempty"`
	// List of Inside VIP Port Config
	//
	// x-displayName: "List of Inside VIP Port Config"
	// List of Ports which will be used to create cloud loadbalancer listener
	InsideVipPortConfig []*VIPPortConfig `protobuf:"bytes,16,rep,name=inside_vip_port_config,json=insideVipPortConfig" json:"inside_vip_port_config,omitempty"`
	// List of Outside VIP Port Config
	//
	// x-displayName: "List of Outside VIP Port Config"
	// List of Ports which will be used to create cloud loadbalancer listener
	OutsideVipPortConfig []*VIPPortConfig `protobuf:"bytes,17,rep,name=outside_vip_port_config,json=outsideVipPortConfig" json:"outside_vip_port_config,omitempty"`
	// Worker Node Scaling
	//
	// x-displayName: "Worker Node Scaling"
	// Number of Maximum Worker Nodes for Auto Scale Configuration
	WorkerNodes uint32 `protobuf:"varint,14,opt,name=worker_nodes,json=workerNodes,proto3" json:"worker_nodes,omitempty"`
	// Gateway Type
	//
	// x-displayName: "Gateway Type"
	// Gateway Type
	GatewayType CloudGatewayType `protobuf:"varint,11,opt,name=gateway_type,json=gatewayType,proto3,enum=ves.io.schema.views.terraform_parameters.CloudGatewayType" json:"gateway_type,omitempty"`
	// Public SSH key
	//
	// x-displayName: "Public SSH key"
	// Public SSH key for accessing the site.
	SshKey string `protobuf:"bytes,13,opt,name=ssh_key,json=sshKey,proto3" json:"ssh_key,omitempty"`
	// Azure Availability Sets Information
	//
	// x-displayName: "Availability Sets Information"
	// Provides information related to availability sets
	AvailabilitySet *AvailabilitySetsInfoType `protobuf:"bytes,18,opt,name=availability_set,json=availabilitySet" json:"availability_set,omitempty"`
}

func (m *AzureVnetSiteType) Reset()                    { *m = AzureVnetSiteType{} }
func (*AzureVnetSiteType) ProtoMessage()               {}
func (*AzureVnetSiteType) Descriptor() ([]byte, []int) { return fileDescriptorAzureTypes, []int{8} }

func (m *AzureVnetSiteType) GetSiteName() string {
	if m != nil {
		return m.SiteName
	}
	return ""
}

func (m *AzureVnetSiteType) GetAzureName() string {
	if m != nil {
		return m.AzureName
	}
	return ""
}

func (m *AzureVnetSiteType) GetVoltVnetId() string {
	if m != nil {
		return m.VoltVnetId
	}
	return ""
}

func (m *AzureVnetSiteType) GetFleetLabel() string {
	if m != nil {
		return m.FleetLabel
	}
	return ""
}

func (m *AzureVnetSiteType) GetCertifiedHw() string {
	if m != nil {
		return m.CertifiedHw
	}
	return ""
}

func (m *AzureVnetSiteType) GetAzureRegion() string {
	if m != nil {
		return m.AzureRegion
	}
	return ""
}

func (m *AzureVnetSiteType) GetAzureResourceGrp() string {
	if m != nil {
		return m.AzureResourceGrp
	}
	return ""
}

func (m *AzureVnetSiteType) GetVnet() *AzureVnetInfoType {
	if m != nil {
		return m.Vnet
	}
	return nil
}

func (m *AzureVnetSiteType) GetSubnets() []*AzureSubnetType {
	if m != nil {
		return m.Subnets
	}
	return nil
}

func (m *AzureVnetSiteType) GetMasterNodes() []*AzureInstanceType {
	if m != nil {
		return m.MasterNodes
	}
	return nil
}

func (m *AzureVnetSiteType) GetInsideVipPortConfig() []*VIPPortConfig {
	if m != nil {
		return m.InsideVipPortConfig
	}
	return nil
}

func (m *AzureVnetSiteType) GetOutsideVipPortConfig() []*VIPPortConfig {
	if m != nil {
		return m.OutsideVipPortConfig
	}
	return nil
}

func (m *AzureVnetSiteType) GetWorkerNodes() uint32 {
	if m != nil {
		return m.WorkerNodes
	}
	return 0
}

func (m *AzureVnetSiteType) GetGatewayType() CloudGatewayType {
	if m != nil {
		return m.GatewayType
	}
	return INGRESS_GATEWAY
}

func (m *AzureVnetSiteType) GetSshKey() string {
	if m != nil {
		return m.SshKey
	}
	return ""
}

func (m *AzureVnetSiteType) GetAvailabilitySet() *AvailabilitySetsInfoType {
	if m != nil {
		return m.AvailabilitySet
	}
	return nil
}

func init() {
	proto.RegisterType((*AzureInstanceType)(nil), "ves.io.schema.views.terraform_parameters.AzureInstanceType")
	golang_proto.RegisterType((*AzureInstanceType)(nil), "ves.io.schema.views.terraform_parameters.AzureInstanceType")
	proto.RegisterType((*AzureSubnetParamType)(nil), "ves.io.schema.views.terraform_parameters.AzureSubnetParamType")
	golang_proto.RegisterType((*AzureSubnetParamType)(nil), "ves.io.schema.views.terraform_parameters.AzureSubnetParamType")
	proto.RegisterType((*AzureExistingSubnetParamType)(nil), "ves.io.schema.views.terraform_parameters.AzureExistingSubnetParamType")
	golang_proto.RegisterType((*AzureExistingSubnetParamType)(nil), "ves.io.schema.views.terraform_parameters.AzureExistingSubnetParamType")
	proto.RegisterType((*AzureSubnetChoice)(nil), "ves.io.schema.views.terraform_parameters.AzureSubnetChoice")
	golang_proto.RegisterType((*AzureSubnetChoice)(nil), "ves.io.schema.views.terraform_parameters.AzureSubnetChoice")
	proto.RegisterType((*AzureSubnetType)(nil), "ves.io.schema.views.terraform_parameters.AzureSubnetType")
	golang_proto.RegisterType((*AzureSubnetType)(nil), "ves.io.schema.views.terraform_parameters.AzureSubnetType")
	proto.RegisterType((*AzureVnetParamsType)(nil), "ves.io.schema.views.terraform_parameters.AzureVnetParamsType")
	golang_proto.RegisterType((*AzureVnetParamsType)(nil), "ves.io.schema.views.terraform_parameters.AzureVnetParamsType")
	proto.RegisterType((*AzureVnetInfoType)(nil), "ves.io.schema.views.terraform_parameters.AzureVnetInfoType")
	golang_proto.RegisterType((*AzureVnetInfoType)(nil), "ves.io.schema.views.terraform_parameters.AzureVnetInfoType")
	proto.RegisterType((*AvailabilitySetsInfoType)(nil), "ves.io.schema.views.terraform_parameters.AvailabilitySetsInfoType")
	golang_proto.RegisterType((*AvailabilitySetsInfoType)(nil), "ves.io.schema.views.terraform_parameters.AvailabilitySetsInfoType")
	proto.RegisterType((*AzureVnetSiteType)(nil), "ves.io.schema.views.terraform_parameters.AzureVnetSiteType")
	golang_proto.RegisterType((*AzureVnetSiteType)(nil), "ves.io.schema.views.terraform_parameters.AzureVnetSiteType")
}
func (this *AzureInstanceType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AzureInstanceType)
	if !ok {
		that2, ok := that.(AzureInstanceType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.VoltNodeId != that1.VoltNodeId {
		return false
	}
	if this.VoltVnetId != that1.VoltVnetId {
		return false
	}
	if this.PublicSubnetId != that1.PublicSubnetId {
		return false
	}
	if this.PrivateSubnetId != that1.PrivateSubnetId {
		return false
	}
	if this.MachineType != that1.MachineType {
		return false
	}
	if this.DiskSize != that1.DiskSize {
		return false
	}
	if !this.Marketplace.Equal(that1.Marketplace) {
		return false
	}
	if this.Az != that1.Az {
		return false
	}
	if this.NodeCount != that1.NodeCount {
		return false
	}
	return true
}
func (this *AzureSubnetParamType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AzureSubnetParamType)
	if !ok {
		that2, ok := that.(AzureSubnetParamType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ResourceGroup != that1.ResourceGroup {
		return false
	}
	if this.Ipv4 != that1.Ipv4 {
		return false
	}
	if this.Ipv6 != that1.Ipv6 {
		return false
	}
	return true
}
func (this *AzureExistingSubnetParamType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AzureExistingSubnetParamType)
	if !ok {
		that2, ok := that.(AzureExistingSubnetParamType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.SubnetName != that1.SubnetName {
		return false
	}
	if this.SubnetResourceGrp != that1.SubnetResourceGrp {
		return false
	}
	return true
}
func (this *AzureSubnetChoice) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AzureSubnetChoice)
	if !ok {
		that2, ok := that.(AzureSubnetChoice)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.SubnetParam.Equal(that1.SubnetParam) {
		return false
	}
	if !this.ExistingSubnet.Equal(that1.ExistingSubnet) {
		return false
	}
	return true
}
func (this *AzureSubnetType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AzureSubnetType)
	if !ok {
		that2, ok := that.(AzureSubnetType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.VoltSubnetId != that1.VoltSubnetId {
		return false
	}
	if this.VoltVnetId != that1.VoltVnetId {
		return false
	}
	if !this.Subnet.Equal(that1.Subnet) {
		return false
	}
	if this.InterfaceType != that1.InterfaceType {
		return false
	}
	return true
}
func (this *AzureVnetParamsType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AzureVnetParamsType)
	if !ok {
		that2, ok := that.(AzureVnetParamsType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ResourceGroup != that1.ResourceGroup {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.PrimaryIpv4 != that1.PrimaryIpv4 {
		return false
	}
	return true
}
func (this *AzureVnetInfoType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AzureVnetInfoType)
	if !ok {
		that2, ok := that.(AzureVnetInfoType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NewVnet.Equal(that1.NewVnet) {
		return false
	}
	if !this.Vnet.Equal(that1.Vnet) {
		return false
	}
	return true
}
func (this *AvailabilitySetsInfoType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AvailabilitySetsInfoType)
	if !ok {
		that2, ok := that.(AvailabilitySetsInfoType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Enable != that1.Enable {
		return false
	}
	if this.FaultDomains != that1.FaultDomains {
		return false
	}
	if this.UpdateDomains != that1.UpdateDomains {
		return false
	}
	return true
}
func (this *AzureVnetSiteType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AzureVnetSiteType)
	if !ok {
		that2, ok := that.(AzureVnetSiteType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.SiteName != that1.SiteName {
		return false
	}
	if this.AzureName != that1.AzureName {
		return false
	}
	if this.VoltVnetId != that1.VoltVnetId {
		return false
	}
	if this.FleetLabel != that1.FleetLabel {
		return false
	}
	if this.CertifiedHw != that1.CertifiedHw {
		return false
	}
	if this.AzureRegion != that1.AzureRegion {
		return false
	}
	if this.AzureResourceGrp != that1.AzureResourceGrp {
		return false
	}
	if !this.Vnet.Equal(that1.Vnet) {
		return false
	}
	if len(this.Subnets) != len(that1.Subnets) {
		return false
	}
	for i := range this.Subnets {
		if !this.Subnets[i].Equal(that1.Subnets[i]) {
			return false
		}
	}
	if len(this.MasterNodes) != len(that1.MasterNodes) {
		return false
	}
	for i := range this.MasterNodes {
		if !this.MasterNodes[i].Equal(that1.MasterNodes[i]) {
			return false
		}
	}
	if len(this.InsideVipPortConfig) != len(that1.InsideVipPortConfig) {
		return false
	}
	for i := range this.InsideVipPortConfig {
		if !this.InsideVipPortConfig[i].Equal(that1.InsideVipPortConfig[i]) {
			return false
		}
	}
	if len(this.OutsideVipPortConfig) != len(that1.OutsideVipPortConfig) {
		return false
	}
	for i := range this.OutsideVipPortConfig {
		if !this.OutsideVipPortConfig[i].Equal(that1.OutsideVipPortConfig[i]) {
			return false
		}
	}
	if this.WorkerNodes != that1.WorkerNodes {
		return false
	}
	if this.GatewayType != that1.GatewayType {
		return false
	}
	if this.SshKey != that1.SshKey {
		return false
	}
	if !this.AvailabilitySet.Equal(that1.AvailabilitySet) {
		return false
	}
	return true
}
func (this *AzureInstanceType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 13)
	s = append(s, "&terraform_parameters.AzureInstanceType{")
	s = append(s, "VoltNodeId: "+fmt.Sprintf("%#v", this.VoltNodeId)+",\n")
	s = append(s, "VoltVnetId: "+fmt.Sprintf("%#v", this.VoltVnetId)+",\n")
	s = append(s, "PublicSubnetId: "+fmt.Sprintf("%#v", this.PublicSubnetId)+",\n")
	s = append(s, "PrivateSubnetId: "+fmt.Sprintf("%#v", this.PrivateSubnetId)+",\n")
	s = append(s, "MachineType: "+fmt.Sprintf("%#v", this.MachineType)+",\n")
	s = append(s, "DiskSize: "+fmt.Sprintf("%#v", this.DiskSize)+",\n")
	if this.Marketplace != nil {
		s = append(s, "Marketplace: "+fmt.Sprintf("%#v", this.Marketplace)+",\n")
	}
	s = append(s, "Az: "+fmt.Sprintf("%#v", this.Az)+",\n")
	s = append(s, "NodeCount: "+fmt.Sprintf("%#v", this.NodeCount)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AzureSubnetParamType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&terraform_parameters.AzureSubnetParamType{")
	s = append(s, "ResourceGroup: "+fmt.Sprintf("%#v", this.ResourceGroup)+",\n")
	s = append(s, "Ipv4: "+fmt.Sprintf("%#v", this.Ipv4)+",\n")
	s = append(s, "Ipv6: "+fmt.Sprintf("%#v", this.Ipv6)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AzureExistingSubnetParamType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&terraform_parameters.AzureExistingSubnetParamType{")
	s = append(s, "SubnetName: "+fmt.Sprintf("%#v", this.SubnetName)+",\n")
	s = append(s, "SubnetResourceGrp: "+fmt.Sprintf("%#v", this.SubnetResourceGrp)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AzureSubnetChoice) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&terraform_parameters.AzureSubnetChoice{")
	if this.SubnetParam != nil {
		s = append(s, "SubnetParam: "+fmt.Sprintf("%#v", this.SubnetParam)+",\n")
	}
	if this.ExistingSubnet != nil {
		s = append(s, "ExistingSubnet: "+fmt.Sprintf("%#v", this.ExistingSubnet)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AzureSubnetType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&terraform_parameters.AzureSubnetType{")
	s = append(s, "VoltSubnetId: "+fmt.Sprintf("%#v", this.VoltSubnetId)+",\n")
	s = append(s, "VoltVnetId: "+fmt.Sprintf("%#v", this.VoltVnetId)+",\n")
	if this.Subnet != nil {
		s = append(s, "Subnet: "+fmt.Sprintf("%#v", this.Subnet)+",\n")
	}
	s = append(s, "InterfaceType: "+fmt.Sprintf("%#v", this.InterfaceType)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AzureVnetParamsType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&terraform_parameters.AzureVnetParamsType{")
	s = append(s, "ResourceGroup: "+fmt.Sprintf("%#v", this.ResourceGroup)+",\n")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "PrimaryIpv4: "+fmt.Sprintf("%#v", this.PrimaryIpv4)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AzureVnetInfoType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&terraform_parameters.AzureVnetInfoType{")
	if this.NewVnet != nil {
		s = append(s, "NewVnet: "+fmt.Sprintf("%#v", this.NewVnet)+",\n")
	}
	if this.Vnet != nil {
		s = append(s, "Vnet: "+fmt.Sprintf("%#v", this.Vnet)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AvailabilitySetsInfoType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&terraform_parameters.AvailabilitySetsInfoType{")
	s = append(s, "Enable: "+fmt.Sprintf("%#v", this.Enable)+",\n")
	s = append(s, "FaultDomains: "+fmt.Sprintf("%#v", this.FaultDomains)+",\n")
	s = append(s, "UpdateDomains: "+fmt.Sprintf("%#v", this.UpdateDomains)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AzureVnetSiteType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 20)
	s = append(s, "&terraform_parameters.AzureVnetSiteType{")
	s = append(s, "SiteName: "+fmt.Sprintf("%#v", this.SiteName)+",\n")
	s = append(s, "AzureName: "+fmt.Sprintf("%#v", this.AzureName)+",\n")
	s = append(s, "VoltVnetId: "+fmt.Sprintf("%#v", this.VoltVnetId)+",\n")
	s = append(s, "FleetLabel: "+fmt.Sprintf("%#v", this.FleetLabel)+",\n")
	s = append(s, "CertifiedHw: "+fmt.Sprintf("%#v", this.CertifiedHw)+",\n")
	s = append(s, "AzureRegion: "+fmt.Sprintf("%#v", this.AzureRegion)+",\n")
	s = append(s, "AzureResourceGrp: "+fmt.Sprintf("%#v", this.AzureResourceGrp)+",\n")
	if this.Vnet != nil {
		s = append(s, "Vnet: "+fmt.Sprintf("%#v", this.Vnet)+",\n")
	}
	if this.Subnets != nil {
		s = append(s, "Subnets: "+fmt.Sprintf("%#v", this.Subnets)+",\n")
	}
	if this.MasterNodes != nil {
		s = append(s, "MasterNodes: "+fmt.Sprintf("%#v", this.MasterNodes)+",\n")
	}
	if this.InsideVipPortConfig != nil {
		s = append(s, "InsideVipPortConfig: "+fmt.Sprintf("%#v", this.InsideVipPortConfig)+",\n")
	}
	if this.OutsideVipPortConfig != nil {
		s = append(s, "OutsideVipPortConfig: "+fmt.Sprintf("%#v", this.OutsideVipPortConfig)+",\n")
	}
	s = append(s, "WorkerNodes: "+fmt.Sprintf("%#v", this.WorkerNodes)+",\n")
	s = append(s, "GatewayType: "+fmt.Sprintf("%#v", this.GatewayType)+",\n")
	s = append(s, "SshKey: "+fmt.Sprintf("%#v", this.SshKey)+",\n")
	if this.AvailabilitySet != nil {
		s = append(s, "AvailabilitySet: "+fmt.Sprintf("%#v", this.AvailabilitySet)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringAzureTypes(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *AzureInstanceType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AzureInstanceType) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.VoltNodeId) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAzureTypes(dAtA, i, uint64(len(m.VoltNodeId)))
		i += copy(dAtA[i:], m.VoltNodeId)
	}
	if len(m.VoltVnetId) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintAzureTypes(dAtA, i, uint64(len(m.VoltVnetId)))
		i += copy(dAtA[i:], m.VoltVnetId)
	}
	if len(m.PublicSubnetId) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintAzureTypes(dAtA, i, uint64(len(m.PublicSubnetId)))
		i += copy(dAtA[i:], m.PublicSubnetId)
	}
	if len(m.PrivateSubnetId) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintAzureTypes(dAtA, i, uint64(len(m.PrivateSubnetId)))
		i += copy(dAtA[i:], m.PrivateSubnetId)
	}
	if len(m.MachineType) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintAzureTypes(dAtA, i, uint64(len(m.MachineType)))
		i += copy(dAtA[i:], m.MachineType)
	}
	if len(m.DiskSize) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintAzureTypes(dAtA, i, uint64(len(m.DiskSize)))
		i += copy(dAtA[i:], m.DiskSize)
	}
	if m.Marketplace != nil {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintAzureTypes(dAtA, i, uint64(m.Marketplace.Size()))
		n1, err := m.Marketplace.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if len(m.Az) > 0 {
		dAtA[i] = 0x52
		i++
		i = encodeVarintAzureTypes(dAtA, i, uint64(len(m.Az)))
		i += copy(dAtA[i:], m.Az)
	}
	if m.NodeCount != 0 {
		dAtA[i] = 0x58
		i++
		i = encodeVarintAzureTypes(dAtA, i, uint64(m.NodeCount))
	}
	return i, nil
}

func (m *AzureSubnetParamType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AzureSubnetParamType) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ResourceGroup) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAzureTypes(dAtA, i, uint64(len(m.ResourceGroup)))
		i += copy(dAtA[i:], m.ResourceGroup)
	}
	if len(m.Ipv4) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintAzureTypes(dAtA, i, uint64(len(m.Ipv4)))
		i += copy(dAtA[i:], m.Ipv4)
	}
	if len(m.Ipv6) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintAzureTypes(dAtA, i, uint64(len(m.Ipv6)))
		i += copy(dAtA[i:], m.Ipv6)
	}
	return i, nil
}

func (m *AzureExistingSubnetParamType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AzureExistingSubnetParamType) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.SubnetName) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAzureTypes(dAtA, i, uint64(len(m.SubnetName)))
		i += copy(dAtA[i:], m.SubnetName)
	}
	if len(m.SubnetResourceGrp) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintAzureTypes(dAtA, i, uint64(len(m.SubnetResourceGrp)))
		i += copy(dAtA[i:], m.SubnetResourceGrp)
	}
	return i, nil
}

func (m *AzureSubnetChoice) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AzureSubnetChoice) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.SubnetParam != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAzureTypes(dAtA, i, uint64(m.SubnetParam.Size()))
		n2, err := m.SubnetParam.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if m.ExistingSubnet != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintAzureTypes(dAtA, i, uint64(m.ExistingSubnet.Size()))
		n3, err := m.ExistingSubnet.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	return i, nil
}

func (m *AzureSubnetType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AzureSubnetType) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.VoltSubnetId) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAzureTypes(dAtA, i, uint64(len(m.VoltSubnetId)))
		i += copy(dAtA[i:], m.VoltSubnetId)
	}
	if len(m.VoltVnetId) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintAzureTypes(dAtA, i, uint64(len(m.VoltVnetId)))
		i += copy(dAtA[i:], m.VoltVnetId)
	}
	if m.Subnet != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintAzureTypes(dAtA, i, uint64(m.Subnet.Size()))
		n4, err := m.Subnet.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	if m.InterfaceType != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintAzureTypes(dAtA, i, uint64(m.InterfaceType))
	}
	return i, nil
}

func (m *AzureVnetParamsType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AzureVnetParamsType) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ResourceGroup) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAzureTypes(dAtA, i, uint64(len(m.ResourceGroup)))
		i += copy(dAtA[i:], m.ResourceGroup)
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintAzureTypes(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.PrimaryIpv4) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintAzureTypes(dAtA, i, uint64(len(m.PrimaryIpv4)))
		i += copy(dAtA[i:], m.PrimaryIpv4)
	}
	return i, nil
}

func (m *AzureVnetInfoType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AzureVnetInfoType) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.NewVnet != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAzureTypes(dAtA, i, uint64(m.NewVnet.Size()))
		n5, err := m.NewVnet.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	if m.Vnet != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintAzureTypes(dAtA, i, uint64(m.Vnet.Size()))
		n6, err := m.Vnet.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	return i, nil
}

func (m *AvailabilitySetsInfoType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AvailabilitySetsInfoType) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Enable) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAzureTypes(dAtA, i, uint64(len(m.Enable)))
		i += copy(dAtA[i:], m.Enable)
	}
	if m.FaultDomains != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintAzureTypes(dAtA, i, uint64(m.FaultDomains))
	}
	if m.UpdateDomains != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintAzureTypes(dAtA, i, uint64(m.UpdateDomains))
	}
	return i, nil
}

func (m *AzureVnetSiteType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AzureVnetSiteType) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.SiteName) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAzureTypes(dAtA, i, uint64(len(m.SiteName)))
		i += copy(dAtA[i:], m.SiteName)
	}
	if len(m.VoltVnetId) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintAzureTypes(dAtA, i, uint64(len(m.VoltVnetId)))
		i += copy(dAtA[i:], m.VoltVnetId)
	}
	if len(m.FleetLabel) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintAzureTypes(dAtA, i, uint64(len(m.FleetLabel)))
		i += copy(dAtA[i:], m.FleetLabel)
	}
	if len(m.CertifiedHw) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintAzureTypes(dAtA, i, uint64(len(m.CertifiedHw)))
		i += copy(dAtA[i:], m.CertifiedHw)
	}
	if len(m.AzureRegion) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintAzureTypes(dAtA, i, uint64(len(m.AzureRegion)))
		i += copy(dAtA[i:], m.AzureRegion)
	}
	if len(m.AzureResourceGrp) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintAzureTypes(dAtA, i, uint64(len(m.AzureResourceGrp)))
		i += copy(dAtA[i:], m.AzureResourceGrp)
	}
	if m.Vnet != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintAzureTypes(dAtA, i, uint64(m.Vnet.Size()))
		n7, err := m.Vnet.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	if len(m.Subnets) > 0 {
		for _, msg := range m.Subnets {
			dAtA[i] = 0x42
			i++
			i = encodeVarintAzureTypes(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.MasterNodes) > 0 {
		for _, msg := range m.MasterNodes {
			dAtA[i] = 0x4a
			i++
			i = encodeVarintAzureTypes(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.GatewayType != 0 {
		dAtA[i] = 0x58
		i++
		i = encodeVarintAzureTypes(dAtA, i, uint64(m.GatewayType))
	}
	if len(m.SshKey) > 0 {
		dAtA[i] = 0x6a
		i++
		i = encodeVarintAzureTypes(dAtA, i, uint64(len(m.SshKey)))
		i += copy(dAtA[i:], m.SshKey)
	}
	if m.WorkerNodes != 0 {
		dAtA[i] = 0x70
		i++
		i = encodeVarintAzureTypes(dAtA, i, uint64(m.WorkerNodes))
	}
	if len(m.AzureName) > 0 {
		dAtA[i] = 0x7a
		i++
		i = encodeVarintAzureTypes(dAtA, i, uint64(len(m.AzureName)))
		i += copy(dAtA[i:], m.AzureName)
	}
	if len(m.InsideVipPortConfig) > 0 {
		for _, msg := range m.InsideVipPortConfig {
			dAtA[i] = 0x82
			i++
			dAtA[i] = 0x1
			i++
			i = encodeVarintAzureTypes(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.OutsideVipPortConfig) > 0 {
		for _, msg := range m.OutsideVipPortConfig {
			dAtA[i] = 0x8a
			i++
			dAtA[i] = 0x1
			i++
			i = encodeVarintAzureTypes(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.AvailabilitySet != nil {
		dAtA[i] = 0x92
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintAzureTypes(dAtA, i, uint64(m.AvailabilitySet.Size()))
		n8, err := m.AvailabilitySet.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n8
	}
	return i, nil
}

func encodeVarintAzureTypes(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *AzureInstanceType) Size() (n int) {
	var l int
	_ = l
	l = len(m.VoltNodeId)
	if l > 0 {
		n += 1 + l + sovAzureTypes(uint64(l))
	}
	l = len(m.VoltVnetId)
	if l > 0 {
		n += 1 + l + sovAzureTypes(uint64(l))
	}
	l = len(m.PublicSubnetId)
	if l > 0 {
		n += 1 + l + sovAzureTypes(uint64(l))
	}
	l = len(m.PrivateSubnetId)
	if l > 0 {
		n += 1 + l + sovAzureTypes(uint64(l))
	}
	l = len(m.MachineType)
	if l > 0 {
		n += 1 + l + sovAzureTypes(uint64(l))
	}
	l = len(m.DiskSize)
	if l > 0 {
		n += 1 + l + sovAzureTypes(uint64(l))
	}
	if m.Marketplace != nil {
		l = m.Marketplace.Size()
		n += 1 + l + sovAzureTypes(uint64(l))
	}
	l = len(m.Az)
	if l > 0 {
		n += 1 + l + sovAzureTypes(uint64(l))
	}
	if m.NodeCount != 0 {
		n += 1 + sovAzureTypes(uint64(m.NodeCount))
	}
	return n
}

func (m *AzureSubnetParamType) Size() (n int) {
	var l int
	_ = l
	l = len(m.ResourceGroup)
	if l > 0 {
		n += 1 + l + sovAzureTypes(uint64(l))
	}
	l = len(m.Ipv4)
	if l > 0 {
		n += 1 + l + sovAzureTypes(uint64(l))
	}
	l = len(m.Ipv6)
	if l > 0 {
		n += 1 + l + sovAzureTypes(uint64(l))
	}
	return n
}

func (m *AzureExistingSubnetParamType) Size() (n int) {
	var l int
	_ = l
	l = len(m.SubnetName)
	if l > 0 {
		n += 1 + l + sovAzureTypes(uint64(l))
	}
	l = len(m.SubnetResourceGrp)
	if l > 0 {
		n += 1 + l + sovAzureTypes(uint64(l))
	}
	return n
}

func (m *AzureSubnetChoice) Size() (n int) {
	var l int
	_ = l
	if m.SubnetParam != nil {
		l = m.SubnetParam.Size()
		n += 1 + l + sovAzureTypes(uint64(l))
	}
	if m.ExistingSubnet != nil {
		l = m.ExistingSubnet.Size()
		n += 1 + l + sovAzureTypes(uint64(l))
	}
	return n
}

func (m *AzureSubnetType) Size() (n int) {
	var l int
	_ = l
	l = len(m.VoltSubnetId)
	if l > 0 {
		n += 1 + l + sovAzureTypes(uint64(l))
	}
	l = len(m.VoltVnetId)
	if l > 0 {
		n += 1 + l + sovAzureTypes(uint64(l))
	}
	if m.Subnet != nil {
		l = m.Subnet.Size()
		n += 1 + l + sovAzureTypes(uint64(l))
	}
	if m.InterfaceType != 0 {
		n += 1 + sovAzureTypes(uint64(m.InterfaceType))
	}
	return n
}

func (m *AzureVnetParamsType) Size() (n int) {
	var l int
	_ = l
	l = len(m.ResourceGroup)
	if l > 0 {
		n += 1 + l + sovAzureTypes(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovAzureTypes(uint64(l))
	}
	l = len(m.PrimaryIpv4)
	if l > 0 {
		n += 1 + l + sovAzureTypes(uint64(l))
	}
	return n
}

func (m *AzureVnetInfoType) Size() (n int) {
	var l int
	_ = l
	if m.NewVnet != nil {
		l = m.NewVnet.Size()
		n += 1 + l + sovAzureTypes(uint64(l))
	}
	if m.Vnet != nil {
		l = m.Vnet.Size()
		n += 1 + l + sovAzureTypes(uint64(l))
	}
	return n
}

func (m *AvailabilitySetsInfoType) Size() (n int) {
	var l int
	_ = l
	l = len(m.Enable)
	if l > 0 {
		n += 1 + l + sovAzureTypes(uint64(l))
	}
	if m.FaultDomains != 0 {
		n += 1 + sovAzureTypes(uint64(m.FaultDomains))
	}
	if m.UpdateDomains != 0 {
		n += 1 + sovAzureTypes(uint64(m.UpdateDomains))
	}
	return n
}

func (m *AzureVnetSiteType) Size() (n int) {
	var l int
	_ = l
	l = len(m.SiteName)
	if l > 0 {
		n += 1 + l + sovAzureTypes(uint64(l))
	}
	l = len(m.VoltVnetId)
	if l > 0 {
		n += 1 + l + sovAzureTypes(uint64(l))
	}
	l = len(m.FleetLabel)
	if l > 0 {
		n += 1 + l + sovAzureTypes(uint64(l))
	}
	l = len(m.CertifiedHw)
	if l > 0 {
		n += 1 + l + sovAzureTypes(uint64(l))
	}
	l = len(m.AzureRegion)
	if l > 0 {
		n += 1 + l + sovAzureTypes(uint64(l))
	}
	l = len(m.AzureResourceGrp)
	if l > 0 {
		n += 1 + l + sovAzureTypes(uint64(l))
	}
	if m.Vnet != nil {
		l = m.Vnet.Size()
		n += 1 + l + sovAzureTypes(uint64(l))
	}
	if len(m.Subnets) > 0 {
		for _, e := range m.Subnets {
			l = e.Size()
			n += 1 + l + sovAzureTypes(uint64(l))
		}
	}
	if len(m.MasterNodes) > 0 {
		for _, e := range m.MasterNodes {
			l = e.Size()
			n += 1 + l + sovAzureTypes(uint64(l))
		}
	}
	if m.GatewayType != 0 {
		n += 1 + sovAzureTypes(uint64(m.GatewayType))
	}
	l = len(m.SshKey)
	if l > 0 {
		n += 1 + l + sovAzureTypes(uint64(l))
	}
	if m.WorkerNodes != 0 {
		n += 1 + sovAzureTypes(uint64(m.WorkerNodes))
	}
	l = len(m.AzureName)
	if l > 0 {
		n += 1 + l + sovAzureTypes(uint64(l))
	}
	if len(m.InsideVipPortConfig) > 0 {
		for _, e := range m.InsideVipPortConfig {
			l = e.Size()
			n += 2 + l + sovAzureTypes(uint64(l))
		}
	}
	if len(m.OutsideVipPortConfig) > 0 {
		for _, e := range m.OutsideVipPortConfig {
			l = e.Size()
			n += 2 + l + sovAzureTypes(uint64(l))
		}
	}
	if m.AvailabilitySet != nil {
		l = m.AvailabilitySet.Size()
		n += 2 + l + sovAzureTypes(uint64(l))
	}
	return n
}

func sovAzureTypes(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozAzureTypes(x uint64) (n int) {
	return sovAzureTypes(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *AzureInstanceType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AzureInstanceType{`,
		`VoltNodeId:` + fmt.Sprintf("%v", this.VoltNodeId) + `,`,
		`VoltVnetId:` + fmt.Sprintf("%v", this.VoltVnetId) + `,`,
		`PublicSubnetId:` + fmt.Sprintf("%v", this.PublicSubnetId) + `,`,
		`PrivateSubnetId:` + fmt.Sprintf("%v", this.PrivateSubnetId) + `,`,
		`MachineType:` + fmt.Sprintf("%v", this.MachineType) + `,`,
		`DiskSize:` + fmt.Sprintf("%v", this.DiskSize) + `,`,
		`Marketplace:` + strings.Replace(fmt.Sprintf("%v", this.Marketplace), "Marketplace", "ves_io_schema_certified_hardware.Marketplace", 1) + `,`,
		`Az:` + fmt.Sprintf("%v", this.Az) + `,`,
		`NodeCount:` + fmt.Sprintf("%v", this.NodeCount) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AzureSubnetParamType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AzureSubnetParamType{`,
		`ResourceGroup:` + fmt.Sprintf("%v", this.ResourceGroup) + `,`,
		`Ipv4:` + fmt.Sprintf("%v", this.Ipv4) + `,`,
		`Ipv6:` + fmt.Sprintf("%v", this.Ipv6) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AzureExistingSubnetParamType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AzureExistingSubnetParamType{`,
		`SubnetName:` + fmt.Sprintf("%v", this.SubnetName) + `,`,
		`SubnetResourceGrp:` + fmt.Sprintf("%v", this.SubnetResourceGrp) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AzureSubnetChoice) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AzureSubnetChoice{`,
		`SubnetParam:` + strings.Replace(fmt.Sprintf("%v", this.SubnetParam), "AzureSubnetParamType", "AzureSubnetParamType", 1) + `,`,
		`ExistingSubnet:` + strings.Replace(fmt.Sprintf("%v", this.ExistingSubnet), "AzureExistingSubnetParamType", "AzureExistingSubnetParamType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AzureSubnetType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AzureSubnetType{`,
		`VoltSubnetId:` + fmt.Sprintf("%v", this.VoltSubnetId) + `,`,
		`VoltVnetId:` + fmt.Sprintf("%v", this.VoltVnetId) + `,`,
		`Subnet:` + strings.Replace(fmt.Sprintf("%v", this.Subnet), "AzureSubnetChoice", "AzureSubnetChoice", 1) + `,`,
		`InterfaceType:` + fmt.Sprintf("%v", this.InterfaceType) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AzureVnetParamsType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AzureVnetParamsType{`,
		`ResourceGroup:` + fmt.Sprintf("%v", this.ResourceGroup) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`PrimaryIpv4:` + fmt.Sprintf("%v", this.PrimaryIpv4) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AzureVnetInfoType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AzureVnetInfoType{`,
		`NewVnet:` + strings.Replace(fmt.Sprintf("%v", this.NewVnet), "AzureVnetParamsType", "ves_io_schema_views1.AzureVnetParamsType", 1) + `,`,
		`Vnet:` + strings.Replace(fmt.Sprintf("%v", this.Vnet), "AzureVnetType", "ves_io_schema_views1.AzureVnetType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AvailabilitySetsInfoType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AvailabilitySetsInfoType{`,
		`Enable:` + fmt.Sprintf("%v", this.Enable) + `,`,
		`FaultDomains:` + fmt.Sprintf("%v", this.FaultDomains) + `,`,
		`UpdateDomains:` + fmt.Sprintf("%v", this.UpdateDomains) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AzureVnetSiteType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AzureVnetSiteType{`,
		`SiteName:` + fmt.Sprintf("%v", this.SiteName) + `,`,
		`VoltVnetId:` + fmt.Sprintf("%v", this.VoltVnetId) + `,`,
		`FleetLabel:` + fmt.Sprintf("%v", this.FleetLabel) + `,`,
		`CertifiedHw:` + fmt.Sprintf("%v", this.CertifiedHw) + `,`,
		`AzureRegion:` + fmt.Sprintf("%v", this.AzureRegion) + `,`,
		`AzureResourceGrp:` + fmt.Sprintf("%v", this.AzureResourceGrp) + `,`,
		`Vnet:` + strings.Replace(fmt.Sprintf("%v", this.Vnet), "AzureVnetInfoType", "AzureVnetInfoType", 1) + `,`,
		`Subnets:` + strings.Replace(fmt.Sprintf("%v", this.Subnets), "AzureSubnetType", "AzureSubnetType", 1) + `,`,
		`MasterNodes:` + strings.Replace(fmt.Sprintf("%v", this.MasterNodes), "AzureInstanceType", "AzureInstanceType", 1) + `,`,
		`GatewayType:` + fmt.Sprintf("%v", this.GatewayType) + `,`,
		`SshKey:` + fmt.Sprintf("%v", this.SshKey) + `,`,
		`WorkerNodes:` + fmt.Sprintf("%v", this.WorkerNodes) + `,`,
		`AzureName:` + fmt.Sprintf("%v", this.AzureName) + `,`,
		`InsideVipPortConfig:` + strings.Replace(fmt.Sprintf("%v", this.InsideVipPortConfig), "VIPPortConfig", "VIPPortConfig", 1) + `,`,
		`OutsideVipPortConfig:` + strings.Replace(fmt.Sprintf("%v", this.OutsideVipPortConfig), "VIPPortConfig", "VIPPortConfig", 1) + `,`,
		`AvailabilitySet:` + strings.Replace(fmt.Sprintf("%v", this.AvailabilitySet), "AvailabilitySetsInfoType", "AvailabilitySetsInfoType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringAzureTypes(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *AzureInstanceType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAzureTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AzureInstanceType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AzureInstanceType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VoltNodeId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAzureTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAzureTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VoltNodeId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VoltVnetId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAzureTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAzureTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VoltVnetId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PublicSubnetId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAzureTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAzureTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PublicSubnetId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrivateSubnetId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAzureTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAzureTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PrivateSubnetId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MachineType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAzureTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAzureTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MachineType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DiskSize", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAzureTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAzureTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DiskSize = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Marketplace", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAzureTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAzureTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Marketplace == nil {
				m.Marketplace = &ves_io_schema_certified_hardware.Marketplace{}
			}
			if err := m.Marketplace.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Az", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAzureTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAzureTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Az = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeCount", wireType)
			}
			m.NodeCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAzureTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NodeCount |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAzureTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAzureTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AzureSubnetParamType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAzureTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AzureSubnetParamType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AzureSubnetParamType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResourceGroup", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAzureTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAzureTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ResourceGroup = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ipv4", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAzureTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAzureTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ipv4 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ipv6", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAzureTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAzureTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ipv6 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAzureTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAzureTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AzureExistingSubnetParamType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAzureTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AzureExistingSubnetParamType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AzureExistingSubnetParamType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubnetName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAzureTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAzureTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SubnetName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubnetResourceGrp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAzureTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAzureTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SubnetResourceGrp = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAzureTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAzureTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AzureSubnetChoice) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAzureTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AzureSubnetChoice: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AzureSubnetChoice: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubnetParam", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAzureTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAzureTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SubnetParam == nil {
				m.SubnetParam = &AzureSubnetParamType{}
			}
			if err := m.SubnetParam.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExistingSubnet", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAzureTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAzureTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ExistingSubnet == nil {
				m.ExistingSubnet = &AzureExistingSubnetParamType{}
			}
			if err := m.ExistingSubnet.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAzureTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAzureTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AzureSubnetType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAzureTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AzureSubnetType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AzureSubnetType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VoltSubnetId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAzureTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAzureTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VoltSubnetId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VoltVnetId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAzureTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAzureTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VoltVnetId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Subnet", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAzureTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAzureTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Subnet == nil {
				m.Subnet = &AzureSubnetChoice{}
			}
			if err := m.Subnet.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InterfaceType", wireType)
			}
			m.InterfaceType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAzureTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InterfaceType |= (InterfaceType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAzureTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAzureTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AzureVnetParamsType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAzureTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AzureVnetParamsType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AzureVnetParamsType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResourceGroup", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAzureTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAzureTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ResourceGroup = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAzureTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAzureTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrimaryIpv4", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAzureTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAzureTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PrimaryIpv4 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAzureTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAzureTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AzureVnetInfoType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAzureTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AzureVnetInfoType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AzureVnetInfoType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewVnet", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAzureTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAzureTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.NewVnet == nil {
				m.NewVnet = &ves_io_schema_views1.AzureVnetParamsType{}
			}
			if err := m.NewVnet.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vnet", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAzureTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAzureTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Vnet == nil {
				m.Vnet = &ves_io_schema_views1.AzureVnetType{}
			}
			if err := m.Vnet.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAzureTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAzureTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AvailabilitySetsInfoType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAzureTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AvailabilitySetsInfoType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AvailabilitySetsInfoType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Enable", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAzureTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAzureTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Enable = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FaultDomains", wireType)
			}
			m.FaultDomains = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAzureTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FaultDomains |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateDomains", wireType)
			}
			m.UpdateDomains = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAzureTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpdateDomains |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAzureTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAzureTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AzureVnetSiteType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAzureTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AzureVnetSiteType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AzureVnetSiteType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SiteName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAzureTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAzureTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SiteName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VoltVnetId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAzureTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAzureTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VoltVnetId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FleetLabel", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAzureTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAzureTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FleetLabel = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CertifiedHw", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAzureTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAzureTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CertifiedHw = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AzureRegion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAzureTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAzureTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AzureRegion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AzureResourceGrp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAzureTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAzureTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AzureResourceGrp = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vnet", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAzureTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAzureTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Vnet == nil {
				m.Vnet = &AzureVnetInfoType{}
			}
			if err := m.Vnet.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Subnets", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAzureTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAzureTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Subnets = append(m.Subnets, &AzureSubnetType{})
			if err := m.Subnets[len(m.Subnets)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MasterNodes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAzureTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAzureTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MasterNodes = append(m.MasterNodes, &AzureInstanceType{})
			if err := m.MasterNodes[len(m.MasterNodes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GatewayType", wireType)
			}
			m.GatewayType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAzureTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GatewayType |= (CloudGatewayType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SshKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAzureTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAzureTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SshKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkerNodes", wireType)
			}
			m.WorkerNodes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAzureTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WorkerNodes |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AzureName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAzureTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAzureTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AzureName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InsideVipPortConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAzureTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAzureTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InsideVipPortConfig = append(m.InsideVipPortConfig, &VIPPortConfig{})
			if err := m.InsideVipPortConfig[len(m.InsideVipPortConfig)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutsideVipPortConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAzureTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAzureTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OutsideVipPortConfig = append(m.OutsideVipPortConfig, &VIPPortConfig{})
			if err := m.OutsideVipPortConfig[len(m.OutsideVipPortConfig)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AvailabilitySet", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAzureTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAzureTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AvailabilitySet == nil {
				m.AvailabilitySet = &AvailabilitySetsInfoType{}
			}
			if err := m.AvailabilitySet.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAzureTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAzureTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipAzureTypes(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowAzureTypes
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAzureTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAzureTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthAzureTypes
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowAzureTypes
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipAzureTypes(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthAzureTypes = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowAzureTypes   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("ves.io/schema/views/terraform_parameters/azure_types.proto", fileDescriptorAzureTypes)
}
func init() {
	golang_proto.RegisterFile("ves.io/schema/views/terraform_parameters/azure_types.proto", fileDescriptorAzureTypes)
}

var fileDescriptorAzureTypes = []byte{
	// 1322 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x56, 0xcf, 0x6f, 0x13, 0xc7,
	0x17, 0xcf, 0xda, 0x4e, 0x62, 0xcf, 0xc6, 0x8e, 0xb3, 0x44, 0x5f, 0x96, 0x00, 0x26, 0x58, 0x1c,
	0x2c, 0x44, 0xec, 0x6f, 0x53, 0x04, 0x82, 0x4a, 0x55, 0x49, 0xda, 0x52, 0xa7, 0x2d, 0xa0, 0x4d,
	0x95, 0x43, 0xa5, 0xb2, 0x1a, 0x7b, 0xc7, 0xeb, 0x51, 0xd6, 0x3b, 0xab, 0xd9, 0x59, 0x1b, 0xe7,
	0xc4, 0x9f, 0xc0, 0x81, 0x6b, 0xef, 0xfd, 0x1b, 0xda, 0x1e, 0x38, 0xf6, 0xc8, 0x91, 0x63, 0x31,
	0x97, 0xf6, 0x50, 0x89, 0x23, 0xbd, 0x55, 0xf3, 0x66, 0x6c, 0xaf, 0xc1, 0x94, 0x24, 0xbd, 0xed,
	0xbe, 0xf7, 0x79, 0x6f, 0xde, 0x7c, 0xde, 0xaf, 0x41, 0xb7, 0xfb, 0x24, 0xae, 0x53, 0xd6, 0x88,
	0xdb, 0x5d, 0xd2, 0xc3, 0x8d, 0x3e, 0x25, 0x83, 0xb8, 0x21, 0x08, 0xe7, 0xb8, 0xc3, 0x78, 0xcf,
	0x8d, 0x30, 0xc7, 0x3d, 0x22, 0x08, 0x8f, 0x1b, 0xf8, 0x28, 0xe1, 0xc4, 0x15, 0xc3, 0x88, 0xc4,
	0xf5, 0x88, 0x33, 0xc1, 0xac, 0x9a, 0xb2, 0xad, 0x2b, 0xdb, 0x3a, 0xd8, 0xd6, 0xe7, 0xd9, 0x6e,
	0x6c, 0xf9, 0x54, 0x74, 0x93, 0x56, 0xbd, 0xcd, 0x7a, 0x0d, 0x9f, 0xf9, 0xac, 0x01, 0x0e, 0x5a,
	0x49, 0x07, 0xfe, 0xe0, 0x07, 0xbe, 0x94, 0xe3, 0x8d, 0x73, 0x3e, 0x63, 0x7e, 0x40, 0xa6, 0x28,
	0x1c, 0x0e, 0xb5, 0xea, 0xda, 0x6c, 0xbc, 0x6d, 0xc2, 0x05, 0xed, 0x50, 0xe2, 0xb9, 0x5d, 0xcc,
	0xbd, 0x01, 0xe6, 0xa4, 0x91, 0x8a, 0x70, 0xe3, 0xfc, 0x2c, 0x9a, 0x45, 0x82, 0xb2, 0x70, 0xac,
	0x3c, 0x37, 0xab, 0x4c, 0xdb, 0x5d, 0x78, 0x8b, 0x15, 0x1c, 0x50, 0x0f, 0x0b, 0xa2, 0xb5, 0x9b,
	0xef, 0x72, 0xe6, 0xce, 0xba, 0xbe, 0x32, 0x8f, 0xd5, 0x98, 0x8a, 0x19, 0xfe, 0x36, 0xae, 0x1f,
	0x9b, 0xfb, 0xb4, 0xd5, 0xa5, 0xb9, 0x56, 0x53, 0x40, 0xf5, 0xef, 0x0c, 0x5a, 0xbb, 0x23, 0x93,
	0xd5, 0x0c, 0x63, 0x81, 0xc3, 0x36, 0xf9, 0x6e, 0x18, 0x11, 0x6b, 0x13, 0xad, 0xf4, 0x59, 0x20,
	0xdc, 0x90, 0x79, 0xc4, 0xa5, 0x9e, 0x6d, 0x6c, 0x1a, 0xb5, 0x82, 0x83, 0xa4, 0xec, 0x1e, 0xf3,
	0x48, 0xd3, 0x9b, 0x20, 0xfa, 0x21, 0x11, 0x12, 0x91, 0x9d, 0x22, 0x0e, 0x42, 0x22, 0x9a, 0x9e,
	0x55, 0x43, 0xe5, 0x28, 0x69, 0x05, 0xb4, 0xed, 0xc6, 0x49, 0x4b, 0xa3, 0x72, 0x80, 0x2a, 0x29,
	0xf9, 0x3e, 0x88, 0x9b, 0x9e, 0x75, 0x15, 0xad, 0x45, 0x9c, 0xf6, 0xb1, 0x20, 0x29, 0xe8, 0x22,
	0x40, 0x57, 0xb5, 0x62, 0x82, 0xbd, 0x8c, 0x56, 0x7a, 0xb8, 0xdd, 0xa5, 0xa1, 0x62, 0xc7, 0x5e,
	0x02, 0x98, 0xa9, 0x65, 0x10, 0xfc, 0x79, 0x54, 0xf0, 0x68, 0x7c, 0xe8, 0xc6, 0xf4, 0x88, 0xd8,
	0xcb, 0xa0, 0xcf, 0x4b, 0xc1, 0x3e, 0x3d, 0x22, 0xd6, 0x7d, 0x64, 0xf6, 0x30, 0x3f, 0x24, 0x22,
	0x0a, 0x70, 0x9b, 0xd8, 0x85, 0x4d, 0xa3, 0x66, 0x6e, 0x6f, 0xd5, 0x67, 0x8b, 0xf3, 0xdd, 0x42,
	0xa9, 0x7f, 0x3b, 0x35, 0x72, 0xd2, 0x1e, 0xac, 0x12, 0xca, 0xe0, 0x23, 0x1b, 0xc1, 0x31, 0x19,
	0x7c, 0x64, 0x5d, 0x44, 0x08, 0x58, 0x6b, 0xb3, 0x24, 0x14, 0xb6, 0xb9, 0x69, 0xd4, 0x16, 0x9d,
	0x82, 0x94, 0xec, 0x4a, 0xc1, 0x5e, 0x2e, 0x9f, 0x29, 0x67, 0xf7, 0x72, 0xf9, 0x7c, 0xb9, 0x50,
	0x7d, 0x62, 0xa0, 0x75, 0xe0, 0x5e, 0xdd, 0xee, 0x81, 0x4c, 0x21, 0xdc, 0xe0, 0xff, 0xa8, 0xc4,
	0x49, 0xcc, 0x12, 0xde, 0x26, 0xae, 0xcf, 0x59, 0x12, 0xa9, 0x04, 0xec, 0x14, 0x7e, 0xfe, 0xf3,
	0x59, 0x36, 0xc7, 0x33, 0xf6, 0x67, 0x4e, 0x71, 0x0c, 0xb8, 0x2b, 0xf5, 0x56, 0x15, 0xe5, 0x68,
	0xd4, 0xbf, 0x6e, 0x67, 0x00, 0x57, 0x7a, 0xf3, 0x8b, 0xb1, 0x20, 0xb1, 0x8b, 0x3c, 0xfb, 0xc6,
	0x30, 0x1c, 0xd0, 0x69, 0xcc, 0x0d, 0x95, 0xaa, 0x19, 0xcc, 0xe3, 0x8c, 0xc2, 0xdc, 0xa8, 0x32,
	0x74, 0x01, 0x22, 0xfa, 0xe2, 0x11, 0x8d, 0x05, 0x0d, 0xfd, 0xb7, 0x23, 0xbb, 0x84, 0x4c, 0x9d,
	0xa2, 0x10, 0xf7, 0xc8, 0xb8, 0x2e, 0x94, 0xe8, 0x1e, 0xee, 0x11, 0xab, 0x8e, 0xce, 0x68, 0x40,
	0xea, 0x06, 0x91, 0x8a, 0xcb, 0x59, 0x53, 0x2a, 0x67, 0x12, 0x7a, 0x54, 0xfd, 0xcb, 0xd0, 0xf5,
	0xa7, 0x4e, 0xda, 0xed, 0x32, 0xda, 0x26, 0x16, 0x46, 0x2b, 0xda, 0x0b, 0xd4, 0x35, 0x9c, 0x63,
	0x6e, 0x7f, 0x5a, 0x3f, 0xee, 0x0c, 0xa9, 0xcf, 0xa3, 0xd5, 0xd1, 0xa1, 0x83, 0xc0, 0x62, 0x68,
	0x95, 0xe8, 0x4b, 0xea, 0xaa, 0x03, 0x62, 0xcc, 0xed, 0x2f, 0x4f, 0x78, 0xca, 0x7b, 0xa8, 0x72,
	0x4a, 0x64, 0x46, 0xa1, 0x32, 0x5f, 0x7d, 0x9a, 0x41, 0xab, 0xa9, 0xe0, 0x80, 0xd4, 0x2b, 0xa8,
	0x04, 0xbd, 0x34, 0x2d, 0x7e, 0xc5, 0x2b, 0x74, 0xd8, 0xa4, 0xf2, 0xdf, 0xee, 0xb8, 0xcc, 0x3b,
	0x1d, 0xb7, 0x8f, 0x96, 0xf4, 0x4d, 0x72, 0x70, 0x93, 0x4f, 0x4e, 0xc5, 0x97, 0x4a, 0x81, 0xa3,
	0x5d, 0x59, 0x0f, 0x51, 0x89, 0x86, 0x82, 0xf0, 0x0e, 0x6e, 0xeb, 0x96, 0x93, 0x9d, 0x59, 0xda,
	0xbe, 0x79, 0x7c, 0xe7, 0xcd, 0xb1, 0x3d, 0xf0, 0x52, 0xa4, 0xe9, 0xdf, 0xbd, 0x5c, 0x3e, 0x5b,
	0xce, 0x55, 0x7f, 0x34, 0xd0, 0x19, 0x88, 0xe1, 0x60, 0xcc, 0x61, 0x7c, 0xca, 0x4e, 0xb8, 0x8c,
	0x72, 0x50, 0x9a, 0xaa, 0x13, 0x8a, 0xe3, 0x2a, 0x57, 0x58, 0x50, 0x59, 0x1f, 0xa1, 0x95, 0x88,
	0xd3, 0x1e, 0xe6, 0x43, 0x17, 0x9a, 0x26, 0x3b, 0xb7, 0x69, 0x4c, 0x8d, 0x69, 0x46, 0xfd, 0xeb,
	0xb2, 0x55, 0xd7, 0x26, 0xf1, 0x35, 0xc3, 0x0e, 0x83, 0xe8, 0x76, 0x51, 0x3e, 0x24, 0x03, 0xc8,
	0x88, 0x2e, 0xd1, 0xda, 0x5c, 0x56, 0xe6, 0xdc, 0xcc, 0x59, 0x0e, 0xc9, 0x40, 0x8a, 0xac, 0x1b,
	0x28, 0x07, 0x0e, 0x32, 0xe0, 0xa0, 0xfa, 0xef, 0x0e, 0xc0, 0x14, 0xf0, 0xd5, 0x5f, 0x0d, 0x64,
	0xdf, 0xe9, 0x63, 0x1a, 0xe0, 0x16, 0x0d, 0xa8, 0x18, 0xee, 0x13, 0x11, 0x4f, 0x22, 0xbb, 0x86,
	0x96, 0x48, 0x88, 0x5b, 0x81, 0x6e, 0xd1, 0x9d, 0x75, 0x79, 0xb1, 0x55, 0x5e, 0x74, 0x72, 0x82,
	0x27, 0xc4, 0x59, 0xec, 0xe0, 0x20, 0x26, 0x8e, 0xc6, 0x58, 0x37, 0x51, 0xb1, 0x83, 0x93, 0x40,
	0xb8, 0x1e, 0xeb, 0x61, 0x1a, 0xc6, 0x50, 0x3f, 0xc5, 0x1d, 0x0b, 0x88, 0xbb, 0x9a, 0xa9, 0x19,
	0xfa, 0xc3, 0xce, 0x3a, 0x2b, 0x00, 0xfc, 0x5c, 0xe1, 0xac, 0x5b, 0xa8, 0x94, 0x44, 0x72, 0xd9,
	0x4d, 0x2c, 0x17, 0xdf, 0x63, 0xb9, 0xee, 0x14, 0x15, 0x52, 0x9b, 0x56, 0x1f, 0xe7, 0x53, 0x8c,
	0xee, 0x53, 0x31, 0x99, 0xdd, 0xb0, 0xf9, 0x52, 0xd3, 0x25, 0x2f, 0x05, 0x30, 0x5b, 0x3e, 0xdc,
	0x01, 0x97, 0x90, 0xd9, 0x09, 0x08, 0x11, 0x6e, 0x80, 0x5b, 0x24, 0x18, 0x2f, 0x25, 0x10, 0x7d,
	0x23, 0x25, 0x72, 0x7d, 0xa4, 0x86, 0xfb, 0x40, 0x2f, 0x24, 0x73, 0x22, 0xfb, 0x6a, 0x20, 0x21,
	0xea, 0xf5, 0xc2, 0x89, 0x4f, 0x59, 0xa8, 0x17, 0x91, 0x09, 0x32, 0x07, 0x44, 0xd6, 0x35, 0x64,
	0x8d, 0x21, 0xa9, 0x19, 0xa7, 0x56, 0x51, 0x59, 0x03, 0x27, 0x23, 0xce, 0xba, 0xaf, 0x13, 0xbc,
	0x7c, 0xaa, 0xa6, 0x4c, 0x17, 0x9c, 0xca, 0xbc, 0xb5, 0x8f, 0x96, 0x55, 0x73, 0xc6, 0x76, 0x7e,
	0x33, 0x5b, 0x33, 0xb7, 0x6f, 0x9d, 0xaa, 0xd1, 0x55, 0x19, 0x6a, 0x4f, 0xd6, 0x43, 0xb9, 0x58,
	0x63, 0x41, 0x38, 0x2c, 0xfd, 0xd8, 0x2e, 0x80, 0xe7, 0x93, 0x46, 0x9b, 0x7e, 0x45, 0xc8, 0x3d,
	0x29, 0x1d, 0xca, 0x17, 0x43, 0x6c, 0xfd, 0x80, 0x56, 0x7c, 0x2c, 0xc8, 0x00, 0x0f, 0xd5, 0x14,
	0x31, 0x61, 0x8a, 0xdc, 0x3e, 0xbe, 0xff, 0xdd, 0x80, 0x25, 0xde, 0x5d, 0xe5, 0x42, 0xb9, 0xf7,
	0xa7, 0x3f, 0xd6, 0x59, 0xb4, 0x1c, 0xc7, 0x5d, 0xf7, 0x90, 0x0c, 0xed, 0x22, 0xe4, 0x61, 0x29,
	0x8e, 0xbb, 0x5f, 0x93, 0xa1, 0x4c, 0xe7, 0x80, 0xf1, 0xc3, 0xc9, 0xbd, 0x4a, 0xb2, 0x40, 0x1d,
	0x53, 0xc9, 0x54, 0x68, 0x17, 0x11, 0x52, 0xe9, 0x84, 0xaa, 0x5b, 0x05, 0xf3, 0x02, 0x48, 0xa0,
	0xec, 0x02, 0xf4, 0x3f, 0x1a, 0xc6, 0xd4, 0x23, 0x6e, 0x9f, 0x46, 0x6e, 0xc4, 0xb8, 0x70, 0xdb,
	0x2c, 0xec, 0x50, 0xdf, 0x2e, 0x03, 0x47, 0x27, 0x98, 0x84, 0x07, 0xcd, 0x07, 0x0f, 0x18, 0x17,
	0xbb, 0x60, 0xee, 0x9c, 0x51, 0x6e, 0x0f, 0x68, 0x34, 0x15, 0x5a, 0x21, 0x3a, 0xcb, 0x12, 0x31,
	0xf7, 0xb8, 0xb5, 0xff, 0x76, 0xdc, 0xba, 0xf6, 0x3b, 0x7b, 0x5e, 0x0f, 0x95, 0x71, 0x6a, 0x8a,
	0xb8, 0x31, 0x11, 0xb6, 0x05, 0x95, 0xba, 0x73, 0x82, 0xdc, 0xbf, 0x67, 0x0e, 0x39, 0xab, 0x78,
	0x56, 0xb3, 0x97, 0xcb, 0xa3, 0xb2, 0xb9, 0x97, 0xcb, 0xaf, 0x94, 0x8b, 0x3b, 0x4f, 0x8d, 0xe7,
	0x2f, 0x2b, 0x0b, 0x2f, 0x5e, 0x56, 0x16, 0x5e, 0xbf, 0xac, 0x18, 0x8f, 0x47, 0x15, 0xe3, 0xa7,
	0x51, 0xc5, 0xf8, 0x6d, 0x54, 0x31, 0x9e, 0x8f, 0x2a, 0xc6, 0x8b, 0x51, 0xc5, 0xf8, 0x7d, 0x54,
	0x31, 0xfe, 0x18, 0x55, 0x16, 0x5e, 0x8f, 0x2a, 0xc6, 0x93, 0x57, 0x95, 0x85, 0x67, 0xaf, 0x2a,
	0xc6, 0xf7, 0x0f, 0x7d, 0x16, 0x1d, 0xfa, 0x75, 0xd9, 0xf6, 0x32, 0x96, 0x7a, 0x92, 0x7a, 0x07,
	0x6f, 0x45, 0x9c, 0xf5, 0xa9, 0x47, 0xf8, 0xd6, 0x58, 0xdd, 0x88, 0x5a, 0x3e, 0x6b, 0x90, 0x47,
	0x42, 0x3f, 0x81, 0x3f, 0xf8, 0x7e, 0x6e, 0x2d, 0xc1, 0xcb, 0xf8, 0xe3, 0x7f, 0x02, 0x00, 0x00,
	0xff, 0xff, 0x9c, 0x80, 0xe4, 0xaf, 0xee, 0x0c, 0x00, 0x00,
}
