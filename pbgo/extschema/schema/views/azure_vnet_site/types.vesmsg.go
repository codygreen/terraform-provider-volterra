//
// Copyright (c) 2018 Volterra, Inc. All rights reserved.
// Code generated by ves-gen-schema-go. DO NOT EDIT.
//
package azure_vnet_site

import (
	"context"
	"fmt"
	"strings"

	"github.com/gogo/protobuf/proto"

	"gopkg.volterra.us/stdlib/codec"
	"gopkg.volterra.us/stdlib/db"
	"gopkg.volterra.us/stdlib/errors"

	ves_io_schema "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
	ves_io_schema_network_firewall "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/network_firewall"
	ves_io_schema_site "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/site"
	ves_io_schema_views "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/views"
)

var (
	// dummy imports in case file has no message with Refs
	_ db.Interface
	_ = errors.Wrap
	_ = strings.Split
)

// augmented methods on protoc/std generated struct

func (m *AzureVnetIngressEgressGwReplaceType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *AzureVnetIngressEgressGwReplaceType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

// Redact squashes sensitive info in m (in-place)
func (m *AzureVnetIngressEgressGwReplaceType) Redact(ctx context.Context) error {
	// clear fields with confidential option set (at message or field level)
	if m == nil {
		return nil
	}

	if err := m.GetGlobalNetworkList().Redact(ctx); err != nil {
		return errors.Wrapf(err, "Redacting AzureVnetIngressEgressGwReplaceType.global_network_list")
	}

	return nil
}

func (m *AzureVnetIngressEgressGwReplaceType) DeepCopy() *AzureVnetIngressEgressGwReplaceType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &AzureVnetIngressEgressGwReplaceType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *AzureVnetIngressEgressGwReplaceType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *AzureVnetIngressEgressGwReplaceType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return AzureVnetIngressEgressGwReplaceTypeValidator().Validate(ctx, m, opts...)
}

func (m *AzureVnetIngressEgressGwReplaceType) GetDRefInfo() ([]db.DRefInfo, error) {
	var drInfos []db.DRefInfo
	if fdrInfos, err := m.GetForwardProxyChoiceDRefInfo(); err != nil {
		return nil, err
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetGlobalNetworkChoiceDRefInfo(); err != nil {
		return nil, err
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetInsideStaticRouteChoiceDRefInfo(); err != nil {
		return nil, err
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetNetworkPolicyChoiceDRefInfo(); err != nil {
		return nil, err
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetOutsideStaticRouteChoiceDRefInfo(); err != nil {
		return nil, err
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	return drInfos, nil
}

// GetDRefInfo for the field's type
func (m *AzureVnetIngressEgressGwReplaceType) GetForwardProxyChoiceDRefInfo() ([]db.DRefInfo, error) {
	var (
		drInfos, driSet []db.DRefInfo
		err             error
	)
	_ = driSet
	if m.GetForwardProxyChoice() == nil {
		return []db.DRefInfo{}, nil
	}

	var odrInfos []db.DRefInfo

	switch m.GetForwardProxyChoice().(type) {
	case *AzureVnetIngressEgressGwReplaceType_NoForwardProxy:

	case *AzureVnetIngressEgressGwReplaceType_ActiveForwardProxyPolicies:
		odrInfos, err = m.GetActiveForwardProxyPolicies().GetDRefInfo()
		if err != nil {
			return nil, err
		}
		for _, odri := range odrInfos {
			odri.DRField = "active_forward_proxy_policies." + odri.DRField
			drInfos = append(drInfos, odri)
		}

	case *AzureVnetIngressEgressGwReplaceType_ForwardProxyAllowAll:

	}

	return drInfos, err
}

// GetDRefInfo for the field's type
func (m *AzureVnetIngressEgressGwReplaceType) GetGlobalNetworkChoiceDRefInfo() ([]db.DRefInfo, error) {
	var (
		drInfos, driSet []db.DRefInfo
		err             error
	)
	_ = driSet
	if m.GetGlobalNetworkChoice() == nil {
		return []db.DRefInfo{}, nil
	}

	var odrInfos []db.DRefInfo

	switch m.GetGlobalNetworkChoice().(type) {
	case *AzureVnetIngressEgressGwReplaceType_NoGlobalNetwork:

	case *AzureVnetIngressEgressGwReplaceType_GlobalNetworkList:
		odrInfos, err = m.GetGlobalNetworkList().GetDRefInfo()
		if err != nil {
			return nil, err
		}
		for _, odri := range odrInfos {
			odri.DRField = "global_network_list." + odri.DRField
			drInfos = append(drInfos, odri)
		}

	}

	return drInfos, err
}

// GetDRefInfo for the field's type
func (m *AzureVnetIngressEgressGwReplaceType) GetInsideStaticRouteChoiceDRefInfo() ([]db.DRefInfo, error) {
	var (
		drInfos, driSet []db.DRefInfo
		err             error
	)
	_ = driSet
	if m.GetInsideStaticRouteChoice() == nil {
		return []db.DRefInfo{}, nil
	}

	var odrInfos []db.DRefInfo

	switch m.GetInsideStaticRouteChoice().(type) {
	case *AzureVnetIngressEgressGwReplaceType_NoInsideStaticRoutes:

	case *AzureVnetIngressEgressGwReplaceType_InsideStaticRoutes:
		odrInfos, err = m.GetInsideStaticRoutes().GetDRefInfo()
		if err != nil {
			return nil, err
		}
		for _, odri := range odrInfos {
			odri.DRField = "inside_static_routes." + odri.DRField
			drInfos = append(drInfos, odri)
		}

	}

	return drInfos, err
}

// GetDRefInfo for the field's type
func (m *AzureVnetIngressEgressGwReplaceType) GetNetworkPolicyChoiceDRefInfo() ([]db.DRefInfo, error) {
	var (
		drInfos, driSet []db.DRefInfo
		err             error
	)
	_ = driSet
	if m.GetNetworkPolicyChoice() == nil {
		return []db.DRefInfo{}, nil
	}

	var odrInfos []db.DRefInfo

	switch m.GetNetworkPolicyChoice().(type) {
	case *AzureVnetIngressEgressGwReplaceType_NoNetworkPolicy:

	case *AzureVnetIngressEgressGwReplaceType_ActiveNetworkPolicies:
		odrInfos, err = m.GetActiveNetworkPolicies().GetDRefInfo()
		if err != nil {
			return nil, err
		}
		for _, odri := range odrInfos {
			odri.DRField = "active_network_policies." + odri.DRField
			drInfos = append(drInfos, odri)
		}

	}

	return drInfos, err
}

// GetDRefInfo for the field's type
func (m *AzureVnetIngressEgressGwReplaceType) GetOutsideStaticRouteChoiceDRefInfo() ([]db.DRefInfo, error) {
	var (
		drInfos, driSet []db.DRefInfo
		err             error
	)
	_ = driSet
	if m.GetOutsideStaticRouteChoice() == nil {
		return []db.DRefInfo{}, nil
	}

	var odrInfos []db.DRefInfo

	switch m.GetOutsideStaticRouteChoice().(type) {
	case *AzureVnetIngressEgressGwReplaceType_NoOutsideStaticRoutes:

	case *AzureVnetIngressEgressGwReplaceType_OutsideStaticRoutes:
		odrInfos, err = m.GetOutsideStaticRoutes().GetDRefInfo()
		if err != nil {
			return nil, err
		}
		for _, odri := range odrInfos {
			odri.DRField = "outside_static_routes." + odri.DRField
			drInfos = append(drInfos, odri)
		}

	}

	return drInfos, err
}

type ValidateAzureVnetIngressEgressGwReplaceType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateAzureVnetIngressEgressGwReplaceType) ForwardProxyChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for forward_proxy_choice")
	}
	return validatorFn, nil
}

func (v *ValidateAzureVnetIngressEgressGwReplaceType) GlobalNetworkChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for global_network_choice")
	}
	return validatorFn, nil
}

func (v *ValidateAzureVnetIngressEgressGwReplaceType) InsideStaticRouteChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for inside_static_route_choice")
	}
	return validatorFn, nil
}

func (v *ValidateAzureVnetIngressEgressGwReplaceType) NetworkPolicyChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for network_policy_choice")
	}
	return validatorFn, nil
}

func (v *ValidateAzureVnetIngressEgressGwReplaceType) OutsideStaticRouteChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for outside_static_route_choice")
	}
	return validatorFn, nil
}

func (v *ValidateAzureVnetIngressEgressGwReplaceType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*AzureVnetIngressEgressGwReplaceType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *AzureVnetIngressEgressGwReplaceType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["forward_proxy_choice"]; exists {
		val := m.GetForwardProxyChoice()
		vOpts := append(opts,
			db.WithValidateField("forward_proxy_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetForwardProxyChoice().(type) {
	case *AzureVnetIngressEgressGwReplaceType_NoForwardProxy:
		if fv, exists := v.FldValidators["forward_proxy_choice.no_forward_proxy"]; exists {
			val := m.GetForwardProxyChoice().(*AzureVnetIngressEgressGwReplaceType_NoForwardProxy).NoForwardProxy
			vOpts := append(opts,
				db.WithValidateField("forward_proxy_choice"),
				db.WithValidateField("no_forward_proxy"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *AzureVnetIngressEgressGwReplaceType_ActiveForwardProxyPolicies:
		if fv, exists := v.FldValidators["forward_proxy_choice.active_forward_proxy_policies"]; exists {
			val := m.GetForwardProxyChoice().(*AzureVnetIngressEgressGwReplaceType_ActiveForwardProxyPolicies).ActiveForwardProxyPolicies
			vOpts := append(opts,
				db.WithValidateField("forward_proxy_choice"),
				db.WithValidateField("active_forward_proxy_policies"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *AzureVnetIngressEgressGwReplaceType_ForwardProxyAllowAll:
		if fv, exists := v.FldValidators["forward_proxy_choice.forward_proxy_allow_all"]; exists {
			val := m.GetForwardProxyChoice().(*AzureVnetIngressEgressGwReplaceType_ForwardProxyAllowAll).ForwardProxyAllowAll
			vOpts := append(opts,
				db.WithValidateField("forward_proxy_choice"),
				db.WithValidateField("forward_proxy_allow_all"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["global_network_choice"]; exists {
		val := m.GetGlobalNetworkChoice()
		vOpts := append(opts,
			db.WithValidateField("global_network_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetGlobalNetworkChoice().(type) {
	case *AzureVnetIngressEgressGwReplaceType_NoGlobalNetwork:
		if fv, exists := v.FldValidators["global_network_choice.no_global_network"]; exists {
			val := m.GetGlobalNetworkChoice().(*AzureVnetIngressEgressGwReplaceType_NoGlobalNetwork).NoGlobalNetwork
			vOpts := append(opts,
				db.WithValidateField("global_network_choice"),
				db.WithValidateField("no_global_network"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *AzureVnetIngressEgressGwReplaceType_GlobalNetworkList:
		if fv, exists := v.FldValidators["global_network_choice.global_network_list"]; exists {
			val := m.GetGlobalNetworkChoice().(*AzureVnetIngressEgressGwReplaceType_GlobalNetworkList).GlobalNetworkList
			vOpts := append(opts,
				db.WithValidateField("global_network_choice"),
				db.WithValidateField("global_network_list"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["inside_static_route_choice"]; exists {
		val := m.GetInsideStaticRouteChoice()
		vOpts := append(opts,
			db.WithValidateField("inside_static_route_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetInsideStaticRouteChoice().(type) {
	case *AzureVnetIngressEgressGwReplaceType_NoInsideStaticRoutes:
		if fv, exists := v.FldValidators["inside_static_route_choice.no_inside_static_routes"]; exists {
			val := m.GetInsideStaticRouteChoice().(*AzureVnetIngressEgressGwReplaceType_NoInsideStaticRoutes).NoInsideStaticRoutes
			vOpts := append(opts,
				db.WithValidateField("inside_static_route_choice"),
				db.WithValidateField("no_inside_static_routes"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *AzureVnetIngressEgressGwReplaceType_InsideStaticRoutes:
		if fv, exists := v.FldValidators["inside_static_route_choice.inside_static_routes"]; exists {
			val := m.GetInsideStaticRouteChoice().(*AzureVnetIngressEgressGwReplaceType_InsideStaticRoutes).InsideStaticRoutes
			vOpts := append(opts,
				db.WithValidateField("inside_static_route_choice"),
				db.WithValidateField("inside_static_routes"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["network_policy_choice"]; exists {
		val := m.GetNetworkPolicyChoice()
		vOpts := append(opts,
			db.WithValidateField("network_policy_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetNetworkPolicyChoice().(type) {
	case *AzureVnetIngressEgressGwReplaceType_NoNetworkPolicy:
		if fv, exists := v.FldValidators["network_policy_choice.no_network_policy"]; exists {
			val := m.GetNetworkPolicyChoice().(*AzureVnetIngressEgressGwReplaceType_NoNetworkPolicy).NoNetworkPolicy
			vOpts := append(opts,
				db.WithValidateField("network_policy_choice"),
				db.WithValidateField("no_network_policy"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *AzureVnetIngressEgressGwReplaceType_ActiveNetworkPolicies:
		if fv, exists := v.FldValidators["network_policy_choice.active_network_policies"]; exists {
			val := m.GetNetworkPolicyChoice().(*AzureVnetIngressEgressGwReplaceType_ActiveNetworkPolicies).ActiveNetworkPolicies
			vOpts := append(opts,
				db.WithValidateField("network_policy_choice"),
				db.WithValidateField("active_network_policies"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["outside_static_route_choice"]; exists {
		val := m.GetOutsideStaticRouteChoice()
		vOpts := append(opts,
			db.WithValidateField("outside_static_route_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetOutsideStaticRouteChoice().(type) {
	case *AzureVnetIngressEgressGwReplaceType_NoOutsideStaticRoutes:
		if fv, exists := v.FldValidators["outside_static_route_choice.no_outside_static_routes"]; exists {
			val := m.GetOutsideStaticRouteChoice().(*AzureVnetIngressEgressGwReplaceType_NoOutsideStaticRoutes).NoOutsideStaticRoutes
			vOpts := append(opts,
				db.WithValidateField("outside_static_route_choice"),
				db.WithValidateField("no_outside_static_routes"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *AzureVnetIngressEgressGwReplaceType_OutsideStaticRoutes:
		if fv, exists := v.FldValidators["outside_static_route_choice.outside_static_routes"]; exists {
			val := m.GetOutsideStaticRouteChoice().(*AzureVnetIngressEgressGwReplaceType_OutsideStaticRoutes).OutsideStaticRoutes
			vOpts := append(opts,
				db.WithValidateField("outside_static_route_choice"),
				db.WithValidateField("outside_static_routes"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultAzureVnetIngressEgressGwReplaceTypeValidator = func() *ValidateAzureVnetIngressEgressGwReplaceType {
	v := &ValidateAzureVnetIngressEgressGwReplaceType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhForwardProxyChoice := v.ForwardProxyChoiceValidationRuleHandler
	rulesForwardProxyChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhForwardProxyChoice(rulesForwardProxyChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for AzureVnetIngressEgressGwReplaceType.forward_proxy_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["forward_proxy_choice"] = vFn

	vrhGlobalNetworkChoice := v.GlobalNetworkChoiceValidationRuleHandler
	rulesGlobalNetworkChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhGlobalNetworkChoice(rulesGlobalNetworkChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for AzureVnetIngressEgressGwReplaceType.global_network_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["global_network_choice"] = vFn

	vrhInsideStaticRouteChoice := v.InsideStaticRouteChoiceValidationRuleHandler
	rulesInsideStaticRouteChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhInsideStaticRouteChoice(rulesInsideStaticRouteChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for AzureVnetIngressEgressGwReplaceType.inside_static_route_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["inside_static_route_choice"] = vFn

	vrhNetworkPolicyChoice := v.NetworkPolicyChoiceValidationRuleHandler
	rulesNetworkPolicyChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhNetworkPolicyChoice(rulesNetworkPolicyChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for AzureVnetIngressEgressGwReplaceType.network_policy_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["network_policy_choice"] = vFn

	vrhOutsideStaticRouteChoice := v.OutsideStaticRouteChoiceValidationRuleHandler
	rulesOutsideStaticRouteChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhOutsideStaticRouteChoice(rulesOutsideStaticRouteChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for AzureVnetIngressEgressGwReplaceType.outside_static_route_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["outside_static_route_choice"] = vFn

	v.FldValidators["forward_proxy_choice.active_forward_proxy_policies"] = ves_io_schema_network_firewall.ActiveForwardProxyPoliciesTypeValidator().Validate

	v.FldValidators["global_network_choice.global_network_list"] = ves_io_schema_views.GlobalNetworkConnectionListTypeValidator().Validate

	v.FldValidators["inside_static_route_choice.inside_static_routes"] = ves_io_schema_views.SiteStaticRoutesListTypeValidator().Validate

	v.FldValidators["network_policy_choice.active_network_policies"] = ves_io_schema_network_firewall.ActiveNetworkPoliciesTypeValidator().Validate

	v.FldValidators["outside_static_route_choice.outside_static_routes"] = ves_io_schema_views.SiteStaticRoutesListTypeValidator().Validate

	return v
}()

func AzureVnetIngressEgressGwReplaceTypeValidator() db.Validator {
	return DefaultAzureVnetIngressEgressGwReplaceTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *AzureVnetIngressEgressGwType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *AzureVnetIngressEgressGwType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

// Redact squashes sensitive info in m (in-place)
func (m *AzureVnetIngressEgressGwType) Redact(ctx context.Context) error {
	// clear fields with confidential option set (at message or field level)
	if m == nil {
		return nil
	}

	if err := m.GetGlobalNetworkList().Redact(ctx); err != nil {
		return errors.Wrapf(err, "Redacting AzureVnetIngressEgressGwType.global_network_list")
	}

	return nil
}

func (m *AzureVnetIngressEgressGwType) DeepCopy() *AzureVnetIngressEgressGwType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &AzureVnetIngressEgressGwType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *AzureVnetIngressEgressGwType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *AzureVnetIngressEgressGwType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return AzureVnetIngressEgressGwTypeValidator().Validate(ctx, m, opts...)
}

func (m *AzureVnetIngressEgressGwType) GetDRefInfo() ([]db.DRefInfo, error) {
	var drInfos []db.DRefInfo
	if fdrInfos, err := m.GetForwardProxyChoiceDRefInfo(); err != nil {
		return nil, err
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetGlobalNetworkChoiceDRefInfo(); err != nil {
		return nil, err
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetInsideStaticRouteChoiceDRefInfo(); err != nil {
		return nil, err
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetNetworkPolicyChoiceDRefInfo(); err != nil {
		return nil, err
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetOutsideStaticRouteChoiceDRefInfo(); err != nil {
		return nil, err
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	return drInfos, nil
}

// GetDRefInfo for the field's type
func (m *AzureVnetIngressEgressGwType) GetForwardProxyChoiceDRefInfo() ([]db.DRefInfo, error) {
	var (
		drInfos, driSet []db.DRefInfo
		err             error
	)
	_ = driSet
	if m.GetForwardProxyChoice() == nil {
		return []db.DRefInfo{}, nil
	}

	var odrInfos []db.DRefInfo

	switch m.GetForwardProxyChoice().(type) {
	case *AzureVnetIngressEgressGwType_NoForwardProxy:

	case *AzureVnetIngressEgressGwType_ActiveForwardProxyPolicies:
		odrInfos, err = m.GetActiveForwardProxyPolicies().GetDRefInfo()
		if err != nil {
			return nil, err
		}
		for _, odri := range odrInfos {
			odri.DRField = "active_forward_proxy_policies." + odri.DRField
			drInfos = append(drInfos, odri)
		}

	case *AzureVnetIngressEgressGwType_ForwardProxyAllowAll:

	}

	return drInfos, err
}

// GetDRefInfo for the field's type
func (m *AzureVnetIngressEgressGwType) GetGlobalNetworkChoiceDRefInfo() ([]db.DRefInfo, error) {
	var (
		drInfos, driSet []db.DRefInfo
		err             error
	)
	_ = driSet
	if m.GetGlobalNetworkChoice() == nil {
		return []db.DRefInfo{}, nil
	}

	var odrInfos []db.DRefInfo

	switch m.GetGlobalNetworkChoice().(type) {
	case *AzureVnetIngressEgressGwType_NoGlobalNetwork:

	case *AzureVnetIngressEgressGwType_GlobalNetworkList:
		odrInfos, err = m.GetGlobalNetworkList().GetDRefInfo()
		if err != nil {
			return nil, err
		}
		for _, odri := range odrInfos {
			odri.DRField = "global_network_list." + odri.DRField
			drInfos = append(drInfos, odri)
		}

	}

	return drInfos, err
}

// GetDRefInfo for the field's type
func (m *AzureVnetIngressEgressGwType) GetInsideStaticRouteChoiceDRefInfo() ([]db.DRefInfo, error) {
	var (
		drInfos, driSet []db.DRefInfo
		err             error
	)
	_ = driSet
	if m.GetInsideStaticRouteChoice() == nil {
		return []db.DRefInfo{}, nil
	}

	var odrInfos []db.DRefInfo

	switch m.GetInsideStaticRouteChoice().(type) {
	case *AzureVnetIngressEgressGwType_NoInsideStaticRoutes:

	case *AzureVnetIngressEgressGwType_InsideStaticRoutes:
		odrInfos, err = m.GetInsideStaticRoutes().GetDRefInfo()
		if err != nil {
			return nil, err
		}
		for _, odri := range odrInfos {
			odri.DRField = "inside_static_routes." + odri.DRField
			drInfos = append(drInfos, odri)
		}

	}

	return drInfos, err
}

// GetDRefInfo for the field's type
func (m *AzureVnetIngressEgressGwType) GetNetworkPolicyChoiceDRefInfo() ([]db.DRefInfo, error) {
	var (
		drInfos, driSet []db.DRefInfo
		err             error
	)
	_ = driSet
	if m.GetNetworkPolicyChoice() == nil {
		return []db.DRefInfo{}, nil
	}

	var odrInfos []db.DRefInfo

	switch m.GetNetworkPolicyChoice().(type) {
	case *AzureVnetIngressEgressGwType_NoNetworkPolicy:

	case *AzureVnetIngressEgressGwType_ActiveNetworkPolicies:
		odrInfos, err = m.GetActiveNetworkPolicies().GetDRefInfo()
		if err != nil {
			return nil, err
		}
		for _, odri := range odrInfos {
			odri.DRField = "active_network_policies." + odri.DRField
			drInfos = append(drInfos, odri)
		}

	}

	return drInfos, err
}

// GetDRefInfo for the field's type
func (m *AzureVnetIngressEgressGwType) GetOutsideStaticRouteChoiceDRefInfo() ([]db.DRefInfo, error) {
	var (
		drInfos, driSet []db.DRefInfo
		err             error
	)
	_ = driSet
	if m.GetOutsideStaticRouteChoice() == nil {
		return []db.DRefInfo{}, nil
	}

	var odrInfos []db.DRefInfo

	switch m.GetOutsideStaticRouteChoice().(type) {
	case *AzureVnetIngressEgressGwType_NoOutsideStaticRoutes:

	case *AzureVnetIngressEgressGwType_OutsideStaticRoutes:
		odrInfos, err = m.GetOutsideStaticRoutes().GetDRefInfo()
		if err != nil {
			return nil, err
		}
		for _, odri := range odrInfos {
			odri.DRField = "outside_static_routes." + odri.DRField
			drInfos = append(drInfos, odri)
		}

	}

	return drInfos, err
}

type ValidateAzureVnetIngressEgressGwType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateAzureVnetIngressEgressGwType) ForwardProxyChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for forward_proxy_choice")
	}
	return validatorFn, nil
}

func (v *ValidateAzureVnetIngressEgressGwType) GlobalNetworkChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for global_network_choice")
	}
	return validatorFn, nil
}

func (v *ValidateAzureVnetIngressEgressGwType) InsideStaticRouteChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for inside_static_route_choice")
	}
	return validatorFn, nil
}

func (v *ValidateAzureVnetIngressEgressGwType) NetworkPolicyChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for network_policy_choice")
	}
	return validatorFn, nil
}

func (v *ValidateAzureVnetIngressEgressGwType) OutsideStaticRouteChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for outside_static_route_choice")
	}
	return validatorFn, nil
}

func (v *ValidateAzureVnetIngressEgressGwType) AzNodesValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemsValidatorFn := func(ctx context.Context, elems []*ves_io_schema_views.AzureVnetTwoInterfaceNodeType, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := ves_io_schema_views.AzureVnetTwoInterfaceNodeTypeValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for az_nodes")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*ves_io_schema_views.AzureVnetTwoInterfaceNodeType)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*ves_io_schema_views.AzureVnetTwoInterfaceNodeType, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated az_nodes")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items az_nodes")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateAzureVnetIngressEgressGwType) AzureCertifiedHwValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for azure_certified_hw")
	}

	return validatorFn, nil
}

func (v *ValidateAzureVnetIngressEgressGwType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*AzureVnetIngressEgressGwType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *AzureVnetIngressEgressGwType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["az_nodes"]; exists {
		vOpts := append(opts, db.WithValidateField("az_nodes"))
		if err := fv(ctx, m.GetAzNodes(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["azure_certified_hw"]; exists {

		vOpts := append(opts, db.WithValidateField("azure_certified_hw"))
		if err := fv(ctx, m.GetAzureCertifiedHw(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["forward_proxy_choice"]; exists {
		val := m.GetForwardProxyChoice()
		vOpts := append(opts,
			db.WithValidateField("forward_proxy_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetForwardProxyChoice().(type) {
	case *AzureVnetIngressEgressGwType_NoForwardProxy:
		if fv, exists := v.FldValidators["forward_proxy_choice.no_forward_proxy"]; exists {
			val := m.GetForwardProxyChoice().(*AzureVnetIngressEgressGwType_NoForwardProxy).NoForwardProxy
			vOpts := append(opts,
				db.WithValidateField("forward_proxy_choice"),
				db.WithValidateField("no_forward_proxy"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *AzureVnetIngressEgressGwType_ActiveForwardProxyPolicies:
		if fv, exists := v.FldValidators["forward_proxy_choice.active_forward_proxy_policies"]; exists {
			val := m.GetForwardProxyChoice().(*AzureVnetIngressEgressGwType_ActiveForwardProxyPolicies).ActiveForwardProxyPolicies
			vOpts := append(opts,
				db.WithValidateField("forward_proxy_choice"),
				db.WithValidateField("active_forward_proxy_policies"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *AzureVnetIngressEgressGwType_ForwardProxyAllowAll:
		if fv, exists := v.FldValidators["forward_proxy_choice.forward_proxy_allow_all"]; exists {
			val := m.GetForwardProxyChoice().(*AzureVnetIngressEgressGwType_ForwardProxyAllowAll).ForwardProxyAllowAll
			vOpts := append(opts,
				db.WithValidateField("forward_proxy_choice"),
				db.WithValidateField("forward_proxy_allow_all"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["global_network_choice"]; exists {
		val := m.GetGlobalNetworkChoice()
		vOpts := append(opts,
			db.WithValidateField("global_network_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetGlobalNetworkChoice().(type) {
	case *AzureVnetIngressEgressGwType_NoGlobalNetwork:
		if fv, exists := v.FldValidators["global_network_choice.no_global_network"]; exists {
			val := m.GetGlobalNetworkChoice().(*AzureVnetIngressEgressGwType_NoGlobalNetwork).NoGlobalNetwork
			vOpts := append(opts,
				db.WithValidateField("global_network_choice"),
				db.WithValidateField("no_global_network"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *AzureVnetIngressEgressGwType_GlobalNetworkList:
		if fv, exists := v.FldValidators["global_network_choice.global_network_list"]; exists {
			val := m.GetGlobalNetworkChoice().(*AzureVnetIngressEgressGwType_GlobalNetworkList).GlobalNetworkList
			vOpts := append(opts,
				db.WithValidateField("global_network_choice"),
				db.WithValidateField("global_network_list"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["inside_static_route_choice"]; exists {
		val := m.GetInsideStaticRouteChoice()
		vOpts := append(opts,
			db.WithValidateField("inside_static_route_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetInsideStaticRouteChoice().(type) {
	case *AzureVnetIngressEgressGwType_NoInsideStaticRoutes:
		if fv, exists := v.FldValidators["inside_static_route_choice.no_inside_static_routes"]; exists {
			val := m.GetInsideStaticRouteChoice().(*AzureVnetIngressEgressGwType_NoInsideStaticRoutes).NoInsideStaticRoutes
			vOpts := append(opts,
				db.WithValidateField("inside_static_route_choice"),
				db.WithValidateField("no_inside_static_routes"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *AzureVnetIngressEgressGwType_InsideStaticRoutes:
		if fv, exists := v.FldValidators["inside_static_route_choice.inside_static_routes"]; exists {
			val := m.GetInsideStaticRouteChoice().(*AzureVnetIngressEgressGwType_InsideStaticRoutes).InsideStaticRoutes
			vOpts := append(opts,
				db.WithValidateField("inside_static_route_choice"),
				db.WithValidateField("inside_static_routes"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["network_policy_choice"]; exists {
		val := m.GetNetworkPolicyChoice()
		vOpts := append(opts,
			db.WithValidateField("network_policy_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetNetworkPolicyChoice().(type) {
	case *AzureVnetIngressEgressGwType_NoNetworkPolicy:
		if fv, exists := v.FldValidators["network_policy_choice.no_network_policy"]; exists {
			val := m.GetNetworkPolicyChoice().(*AzureVnetIngressEgressGwType_NoNetworkPolicy).NoNetworkPolicy
			vOpts := append(opts,
				db.WithValidateField("network_policy_choice"),
				db.WithValidateField("no_network_policy"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *AzureVnetIngressEgressGwType_ActiveNetworkPolicies:
		if fv, exists := v.FldValidators["network_policy_choice.active_network_policies"]; exists {
			val := m.GetNetworkPolicyChoice().(*AzureVnetIngressEgressGwType_ActiveNetworkPolicies).ActiveNetworkPolicies
			vOpts := append(opts,
				db.WithValidateField("network_policy_choice"),
				db.WithValidateField("active_network_policies"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["outside_static_route_choice"]; exists {
		val := m.GetOutsideStaticRouteChoice()
		vOpts := append(opts,
			db.WithValidateField("outside_static_route_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetOutsideStaticRouteChoice().(type) {
	case *AzureVnetIngressEgressGwType_NoOutsideStaticRoutes:
		if fv, exists := v.FldValidators["outside_static_route_choice.no_outside_static_routes"]; exists {
			val := m.GetOutsideStaticRouteChoice().(*AzureVnetIngressEgressGwType_NoOutsideStaticRoutes).NoOutsideStaticRoutes
			vOpts := append(opts,
				db.WithValidateField("outside_static_route_choice"),
				db.WithValidateField("no_outside_static_routes"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *AzureVnetIngressEgressGwType_OutsideStaticRoutes:
		if fv, exists := v.FldValidators["outside_static_route_choice.outside_static_routes"]; exists {
			val := m.GetOutsideStaticRouteChoice().(*AzureVnetIngressEgressGwType_OutsideStaticRoutes).OutsideStaticRoutes
			vOpts := append(opts,
				db.WithValidateField("outside_static_route_choice"),
				db.WithValidateField("outside_static_routes"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultAzureVnetIngressEgressGwTypeValidator = func() *ValidateAzureVnetIngressEgressGwType {
	v := &ValidateAzureVnetIngressEgressGwType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhForwardProxyChoice := v.ForwardProxyChoiceValidationRuleHandler
	rulesForwardProxyChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhForwardProxyChoice(rulesForwardProxyChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for AzureVnetIngressEgressGwType.forward_proxy_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["forward_proxy_choice"] = vFn

	vrhGlobalNetworkChoice := v.GlobalNetworkChoiceValidationRuleHandler
	rulesGlobalNetworkChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhGlobalNetworkChoice(rulesGlobalNetworkChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for AzureVnetIngressEgressGwType.global_network_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["global_network_choice"] = vFn

	vrhInsideStaticRouteChoice := v.InsideStaticRouteChoiceValidationRuleHandler
	rulesInsideStaticRouteChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhInsideStaticRouteChoice(rulesInsideStaticRouteChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for AzureVnetIngressEgressGwType.inside_static_route_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["inside_static_route_choice"] = vFn

	vrhNetworkPolicyChoice := v.NetworkPolicyChoiceValidationRuleHandler
	rulesNetworkPolicyChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhNetworkPolicyChoice(rulesNetworkPolicyChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for AzureVnetIngressEgressGwType.network_policy_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["network_policy_choice"] = vFn

	vrhOutsideStaticRouteChoice := v.OutsideStaticRouteChoiceValidationRuleHandler
	rulesOutsideStaticRouteChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhOutsideStaticRouteChoice(rulesOutsideStaticRouteChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for AzureVnetIngressEgressGwType.outside_static_route_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["outside_static_route_choice"] = vFn

	vrhAzNodes := v.AzNodesValidationRuleHandler
	rulesAzNodes := map[string]string{
		"ves.io.schema.rules.repeated.num_items": "1,3",
	}
	vFn, err = vrhAzNodes(rulesAzNodes)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for AzureVnetIngressEgressGwType.az_nodes: %s", err)
		panic(errMsg)
	}
	v.FldValidators["az_nodes"] = vFn

	vrhAzureCertifiedHw := v.AzureCertifiedHwValidationRuleHandler
	rulesAzureCertifiedHw := map[string]string{
		"ves.io.schema.rules.message.required": "true",
		"ves.io.schema.rules.string.in":        "[\"azure-byol-multi-nic-voltmesh\"]",
		"ves.io.schema.rules.string.max_len":   "64",
	}
	vFn, err = vrhAzureCertifiedHw(rulesAzureCertifiedHw)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for AzureVnetIngressEgressGwType.azure_certified_hw: %s", err)
		panic(errMsg)
	}
	v.FldValidators["azure_certified_hw"] = vFn

	v.FldValidators["forward_proxy_choice.active_forward_proxy_policies"] = ves_io_schema_network_firewall.ActiveForwardProxyPoliciesTypeValidator().Validate

	v.FldValidators["global_network_choice.global_network_list"] = ves_io_schema_views.GlobalNetworkConnectionListTypeValidator().Validate

	v.FldValidators["inside_static_route_choice.inside_static_routes"] = ves_io_schema_views.SiteStaticRoutesListTypeValidator().Validate

	v.FldValidators["network_policy_choice.active_network_policies"] = ves_io_schema_network_firewall.ActiveNetworkPoliciesTypeValidator().Validate

	v.FldValidators["outside_static_route_choice.outside_static_routes"] = ves_io_schema_views.SiteStaticRoutesListTypeValidator().Validate

	return v
}()

func AzureVnetIngressEgressGwTypeValidator() db.Validator {
	return DefaultAzureVnetIngressEgressGwTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *AzureVnetIngressGwReplaceType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *AzureVnetIngressGwReplaceType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *AzureVnetIngressGwReplaceType) DeepCopy() *AzureVnetIngressGwReplaceType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &AzureVnetIngressGwReplaceType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *AzureVnetIngressGwReplaceType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *AzureVnetIngressGwReplaceType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return AzureVnetIngressGwReplaceTypeValidator().Validate(ctx, m, opts...)
}

type ValidateAzureVnetIngressGwReplaceType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateAzureVnetIngressGwReplaceType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*AzureVnetIngressGwReplaceType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *AzureVnetIngressGwReplaceType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultAzureVnetIngressGwReplaceTypeValidator = func() *ValidateAzureVnetIngressGwReplaceType {
	v := &ValidateAzureVnetIngressGwReplaceType{FldValidators: map[string]db.ValidatorFunc{}}

	return v
}()

func AzureVnetIngressGwReplaceTypeValidator() db.Validator {
	return DefaultAzureVnetIngressGwReplaceTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *AzureVnetIngressGwType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *AzureVnetIngressGwType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *AzureVnetIngressGwType) DeepCopy() *AzureVnetIngressGwType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &AzureVnetIngressGwType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *AzureVnetIngressGwType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *AzureVnetIngressGwType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return AzureVnetIngressGwTypeValidator().Validate(ctx, m, opts...)
}

type ValidateAzureVnetIngressGwType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateAzureVnetIngressGwType) AzNodesValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemsValidatorFn := func(ctx context.Context, elems []*ves_io_schema_views.AzureVnetOneInterfaceNodeType, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := ves_io_schema_views.AzureVnetOneInterfaceNodeTypeValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for az_nodes")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*ves_io_schema_views.AzureVnetOneInterfaceNodeType)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*ves_io_schema_views.AzureVnetOneInterfaceNodeType, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated az_nodes")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items az_nodes")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateAzureVnetIngressGwType) AzureCertifiedHwValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for azure_certified_hw")
	}

	return validatorFn, nil
}

func (v *ValidateAzureVnetIngressGwType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*AzureVnetIngressGwType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *AzureVnetIngressGwType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["az_nodes"]; exists {
		vOpts := append(opts, db.WithValidateField("az_nodes"))
		if err := fv(ctx, m.GetAzNodes(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["azure_certified_hw"]; exists {

		vOpts := append(opts, db.WithValidateField("azure_certified_hw"))
		if err := fv(ctx, m.GetAzureCertifiedHw(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultAzureVnetIngressGwTypeValidator = func() *ValidateAzureVnetIngressGwType {
	v := &ValidateAzureVnetIngressGwType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhAzNodes := v.AzNodesValidationRuleHandler
	rulesAzNodes := map[string]string{
		"ves.io.schema.rules.repeated.num_items": "1,3",
	}
	vFn, err = vrhAzNodes(rulesAzNodes)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for AzureVnetIngressGwType.az_nodes: %s", err)
		panic(errMsg)
	}
	v.FldValidators["az_nodes"] = vFn

	vrhAzureCertifiedHw := v.AzureCertifiedHwValidationRuleHandler
	rulesAzureCertifiedHw := map[string]string{
		"ves.io.schema.rules.message.required": "true",
		"ves.io.schema.rules.string.in":        "[\"azure-byol-voltmesh\"]",
		"ves.io.schema.rules.string.max_len":   "64",
	}
	vFn, err = vrhAzureCertifiedHw(rulesAzureCertifiedHw)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for AzureVnetIngressGwType.azure_certified_hw: %s", err)
		panic(errMsg)
	}
	v.FldValidators["azure_certified_hw"] = vFn

	return v
}()

func AzureVnetIngressGwTypeValidator() db.Validator {
	return DefaultAzureVnetIngressGwTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *AzureVnetVoltstackClusterReplaceType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *AzureVnetVoltstackClusterReplaceType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

// Redact squashes sensitive info in m (in-place)
func (m *AzureVnetVoltstackClusterReplaceType) Redact(ctx context.Context) error {
	// clear fields with confidential option set (at message or field level)
	if m == nil {
		return nil
	}

	if err := m.GetGlobalNetworkList().Redact(ctx); err != nil {
		return errors.Wrapf(err, "Redacting AzureVnetVoltstackClusterReplaceType.global_network_list")
	}

	return nil
}

func (m *AzureVnetVoltstackClusterReplaceType) DeepCopy() *AzureVnetVoltstackClusterReplaceType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &AzureVnetVoltstackClusterReplaceType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *AzureVnetVoltstackClusterReplaceType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *AzureVnetVoltstackClusterReplaceType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return AzureVnetVoltstackClusterReplaceTypeValidator().Validate(ctx, m, opts...)
}

func (m *AzureVnetVoltstackClusterReplaceType) GetDRefInfo() ([]db.DRefInfo, error) {
	var drInfos []db.DRefInfo
	if fdrInfos, err := m.GetForwardProxyChoiceDRefInfo(); err != nil {
		return nil, err
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetGlobalNetworkChoiceDRefInfo(); err != nil {
		return nil, err
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetNetworkPolicyChoiceDRefInfo(); err != nil {
		return nil, err
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetOutsideStaticRouteChoiceDRefInfo(); err != nil {
		return nil, err
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	return drInfos, nil
}

// GetDRefInfo for the field's type
func (m *AzureVnetVoltstackClusterReplaceType) GetForwardProxyChoiceDRefInfo() ([]db.DRefInfo, error) {
	var (
		drInfos, driSet []db.DRefInfo
		err             error
	)
	_ = driSet
	if m.GetForwardProxyChoice() == nil {
		return []db.DRefInfo{}, nil
	}

	var odrInfos []db.DRefInfo

	switch m.GetForwardProxyChoice().(type) {
	case *AzureVnetVoltstackClusterReplaceType_NoForwardProxy:

	case *AzureVnetVoltstackClusterReplaceType_ActiveForwardProxyPolicies:
		odrInfos, err = m.GetActiveForwardProxyPolicies().GetDRefInfo()
		if err != nil {
			return nil, err
		}
		for _, odri := range odrInfos {
			odri.DRField = "active_forward_proxy_policies." + odri.DRField
			drInfos = append(drInfos, odri)
		}

	case *AzureVnetVoltstackClusterReplaceType_ForwardProxyAllowAll:

	}

	return drInfos, err
}

// GetDRefInfo for the field's type
func (m *AzureVnetVoltstackClusterReplaceType) GetGlobalNetworkChoiceDRefInfo() ([]db.DRefInfo, error) {
	var (
		drInfos, driSet []db.DRefInfo
		err             error
	)
	_ = driSet
	if m.GetGlobalNetworkChoice() == nil {
		return []db.DRefInfo{}, nil
	}

	var odrInfos []db.DRefInfo

	switch m.GetGlobalNetworkChoice().(type) {
	case *AzureVnetVoltstackClusterReplaceType_NoGlobalNetwork:

	case *AzureVnetVoltstackClusterReplaceType_GlobalNetworkList:
		odrInfos, err = m.GetGlobalNetworkList().GetDRefInfo()
		if err != nil {
			return nil, err
		}
		for _, odri := range odrInfos {
			odri.DRField = "global_network_list." + odri.DRField
			drInfos = append(drInfos, odri)
		}

	}

	return drInfos, err
}

// GetDRefInfo for the field's type
func (m *AzureVnetVoltstackClusterReplaceType) GetNetworkPolicyChoiceDRefInfo() ([]db.DRefInfo, error) {
	var (
		drInfos, driSet []db.DRefInfo
		err             error
	)
	_ = driSet
	if m.GetNetworkPolicyChoice() == nil {
		return []db.DRefInfo{}, nil
	}

	var odrInfos []db.DRefInfo

	switch m.GetNetworkPolicyChoice().(type) {
	case *AzureVnetVoltstackClusterReplaceType_NoNetworkPolicy:

	case *AzureVnetVoltstackClusterReplaceType_ActiveNetworkPolicies:
		odrInfos, err = m.GetActiveNetworkPolicies().GetDRefInfo()
		if err != nil {
			return nil, err
		}
		for _, odri := range odrInfos {
			odri.DRField = "active_network_policies." + odri.DRField
			drInfos = append(drInfos, odri)
		}

	}

	return drInfos, err
}

// GetDRefInfo for the field's type
func (m *AzureVnetVoltstackClusterReplaceType) GetOutsideStaticRouteChoiceDRefInfo() ([]db.DRefInfo, error) {
	var (
		drInfos, driSet []db.DRefInfo
		err             error
	)
	_ = driSet
	if m.GetOutsideStaticRouteChoice() == nil {
		return []db.DRefInfo{}, nil
	}

	var odrInfos []db.DRefInfo

	switch m.GetOutsideStaticRouteChoice().(type) {
	case *AzureVnetVoltstackClusterReplaceType_NoOutsideStaticRoutes:

	case *AzureVnetVoltstackClusterReplaceType_OutsideStaticRoutes:
		odrInfos, err = m.GetOutsideStaticRoutes().GetDRefInfo()
		if err != nil {
			return nil, err
		}
		for _, odri := range odrInfos {
			odri.DRField = "outside_static_routes." + odri.DRField
			drInfos = append(drInfos, odri)
		}

	}

	return drInfos, err
}

type ValidateAzureVnetVoltstackClusterReplaceType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateAzureVnetVoltstackClusterReplaceType) ForwardProxyChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for forward_proxy_choice")
	}
	return validatorFn, nil
}

func (v *ValidateAzureVnetVoltstackClusterReplaceType) GlobalNetworkChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for global_network_choice")
	}
	return validatorFn, nil
}

func (v *ValidateAzureVnetVoltstackClusterReplaceType) NetworkPolicyChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for network_policy_choice")
	}
	return validatorFn, nil
}

func (v *ValidateAzureVnetVoltstackClusterReplaceType) OutsideStaticRouteChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for outside_static_route_choice")
	}
	return validatorFn, nil
}

func (v *ValidateAzureVnetVoltstackClusterReplaceType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*AzureVnetVoltstackClusterReplaceType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *AzureVnetVoltstackClusterReplaceType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["forward_proxy_choice"]; exists {
		val := m.GetForwardProxyChoice()
		vOpts := append(opts,
			db.WithValidateField("forward_proxy_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetForwardProxyChoice().(type) {
	case *AzureVnetVoltstackClusterReplaceType_NoForwardProxy:
		if fv, exists := v.FldValidators["forward_proxy_choice.no_forward_proxy"]; exists {
			val := m.GetForwardProxyChoice().(*AzureVnetVoltstackClusterReplaceType_NoForwardProxy).NoForwardProxy
			vOpts := append(opts,
				db.WithValidateField("forward_proxy_choice"),
				db.WithValidateField("no_forward_proxy"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *AzureVnetVoltstackClusterReplaceType_ActiveForwardProxyPolicies:
		if fv, exists := v.FldValidators["forward_proxy_choice.active_forward_proxy_policies"]; exists {
			val := m.GetForwardProxyChoice().(*AzureVnetVoltstackClusterReplaceType_ActiveForwardProxyPolicies).ActiveForwardProxyPolicies
			vOpts := append(opts,
				db.WithValidateField("forward_proxy_choice"),
				db.WithValidateField("active_forward_proxy_policies"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *AzureVnetVoltstackClusterReplaceType_ForwardProxyAllowAll:
		if fv, exists := v.FldValidators["forward_proxy_choice.forward_proxy_allow_all"]; exists {
			val := m.GetForwardProxyChoice().(*AzureVnetVoltstackClusterReplaceType_ForwardProxyAllowAll).ForwardProxyAllowAll
			vOpts := append(opts,
				db.WithValidateField("forward_proxy_choice"),
				db.WithValidateField("forward_proxy_allow_all"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["global_network_choice"]; exists {
		val := m.GetGlobalNetworkChoice()
		vOpts := append(opts,
			db.WithValidateField("global_network_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetGlobalNetworkChoice().(type) {
	case *AzureVnetVoltstackClusterReplaceType_NoGlobalNetwork:
		if fv, exists := v.FldValidators["global_network_choice.no_global_network"]; exists {
			val := m.GetGlobalNetworkChoice().(*AzureVnetVoltstackClusterReplaceType_NoGlobalNetwork).NoGlobalNetwork
			vOpts := append(opts,
				db.WithValidateField("global_network_choice"),
				db.WithValidateField("no_global_network"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *AzureVnetVoltstackClusterReplaceType_GlobalNetworkList:
		if fv, exists := v.FldValidators["global_network_choice.global_network_list"]; exists {
			val := m.GetGlobalNetworkChoice().(*AzureVnetVoltstackClusterReplaceType_GlobalNetworkList).GlobalNetworkList
			vOpts := append(opts,
				db.WithValidateField("global_network_choice"),
				db.WithValidateField("global_network_list"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["network_policy_choice"]; exists {
		val := m.GetNetworkPolicyChoice()
		vOpts := append(opts,
			db.WithValidateField("network_policy_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetNetworkPolicyChoice().(type) {
	case *AzureVnetVoltstackClusterReplaceType_NoNetworkPolicy:
		if fv, exists := v.FldValidators["network_policy_choice.no_network_policy"]; exists {
			val := m.GetNetworkPolicyChoice().(*AzureVnetVoltstackClusterReplaceType_NoNetworkPolicy).NoNetworkPolicy
			vOpts := append(opts,
				db.WithValidateField("network_policy_choice"),
				db.WithValidateField("no_network_policy"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *AzureVnetVoltstackClusterReplaceType_ActiveNetworkPolicies:
		if fv, exists := v.FldValidators["network_policy_choice.active_network_policies"]; exists {
			val := m.GetNetworkPolicyChoice().(*AzureVnetVoltstackClusterReplaceType_ActiveNetworkPolicies).ActiveNetworkPolicies
			vOpts := append(opts,
				db.WithValidateField("network_policy_choice"),
				db.WithValidateField("active_network_policies"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["outside_static_route_choice"]; exists {
		val := m.GetOutsideStaticRouteChoice()
		vOpts := append(opts,
			db.WithValidateField("outside_static_route_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetOutsideStaticRouteChoice().(type) {
	case *AzureVnetVoltstackClusterReplaceType_NoOutsideStaticRoutes:
		if fv, exists := v.FldValidators["outside_static_route_choice.no_outside_static_routes"]; exists {
			val := m.GetOutsideStaticRouteChoice().(*AzureVnetVoltstackClusterReplaceType_NoOutsideStaticRoutes).NoOutsideStaticRoutes
			vOpts := append(opts,
				db.WithValidateField("outside_static_route_choice"),
				db.WithValidateField("no_outside_static_routes"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *AzureVnetVoltstackClusterReplaceType_OutsideStaticRoutes:
		if fv, exists := v.FldValidators["outside_static_route_choice.outside_static_routes"]; exists {
			val := m.GetOutsideStaticRouteChoice().(*AzureVnetVoltstackClusterReplaceType_OutsideStaticRoutes).OutsideStaticRoutes
			vOpts := append(opts,
				db.WithValidateField("outside_static_route_choice"),
				db.WithValidateField("outside_static_routes"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultAzureVnetVoltstackClusterReplaceTypeValidator = func() *ValidateAzureVnetVoltstackClusterReplaceType {
	v := &ValidateAzureVnetVoltstackClusterReplaceType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhForwardProxyChoice := v.ForwardProxyChoiceValidationRuleHandler
	rulesForwardProxyChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhForwardProxyChoice(rulesForwardProxyChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for AzureVnetVoltstackClusterReplaceType.forward_proxy_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["forward_proxy_choice"] = vFn

	vrhGlobalNetworkChoice := v.GlobalNetworkChoiceValidationRuleHandler
	rulesGlobalNetworkChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhGlobalNetworkChoice(rulesGlobalNetworkChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for AzureVnetVoltstackClusterReplaceType.global_network_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["global_network_choice"] = vFn

	vrhNetworkPolicyChoice := v.NetworkPolicyChoiceValidationRuleHandler
	rulesNetworkPolicyChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhNetworkPolicyChoice(rulesNetworkPolicyChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for AzureVnetVoltstackClusterReplaceType.network_policy_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["network_policy_choice"] = vFn

	vrhOutsideStaticRouteChoice := v.OutsideStaticRouteChoiceValidationRuleHandler
	rulesOutsideStaticRouteChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhOutsideStaticRouteChoice(rulesOutsideStaticRouteChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for AzureVnetVoltstackClusterReplaceType.outside_static_route_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["outside_static_route_choice"] = vFn

	v.FldValidators["forward_proxy_choice.active_forward_proxy_policies"] = ves_io_schema_network_firewall.ActiveForwardProxyPoliciesTypeValidator().Validate

	v.FldValidators["global_network_choice.global_network_list"] = ves_io_schema_views.GlobalNetworkConnectionListTypeValidator().Validate

	v.FldValidators["network_policy_choice.active_network_policies"] = ves_io_schema_network_firewall.ActiveNetworkPoliciesTypeValidator().Validate

	v.FldValidators["outside_static_route_choice.outside_static_routes"] = ves_io_schema_views.SiteStaticRoutesListTypeValidator().Validate

	return v
}()

func AzureVnetVoltstackClusterReplaceTypeValidator() db.Validator {
	return DefaultAzureVnetVoltstackClusterReplaceTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *AzureVnetVoltstackClusterType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *AzureVnetVoltstackClusterType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

// Redact squashes sensitive info in m (in-place)
func (m *AzureVnetVoltstackClusterType) Redact(ctx context.Context) error {
	// clear fields with confidential option set (at message or field level)
	if m == nil {
		return nil
	}

	if err := m.GetGlobalNetworkList().Redact(ctx); err != nil {
		return errors.Wrapf(err, "Redacting AzureVnetVoltstackClusterType.global_network_list")
	}

	return nil
}

func (m *AzureVnetVoltstackClusterType) DeepCopy() *AzureVnetVoltstackClusterType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &AzureVnetVoltstackClusterType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *AzureVnetVoltstackClusterType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *AzureVnetVoltstackClusterType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return AzureVnetVoltstackClusterTypeValidator().Validate(ctx, m, opts...)
}

func (m *AzureVnetVoltstackClusterType) GetDRefInfo() ([]db.DRefInfo, error) {
	var drInfos []db.DRefInfo
	if fdrInfos, err := m.GetForwardProxyChoiceDRefInfo(); err != nil {
		return nil, err
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetGlobalNetworkChoiceDRefInfo(); err != nil {
		return nil, err
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetNetworkPolicyChoiceDRefInfo(); err != nil {
		return nil, err
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetOutsideStaticRouteChoiceDRefInfo(); err != nil {
		return nil, err
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	return drInfos, nil
}

// GetDRefInfo for the field's type
func (m *AzureVnetVoltstackClusterType) GetForwardProxyChoiceDRefInfo() ([]db.DRefInfo, error) {
	var (
		drInfos, driSet []db.DRefInfo
		err             error
	)
	_ = driSet
	if m.GetForwardProxyChoice() == nil {
		return []db.DRefInfo{}, nil
	}

	var odrInfos []db.DRefInfo

	switch m.GetForwardProxyChoice().(type) {
	case *AzureVnetVoltstackClusterType_NoForwardProxy:

	case *AzureVnetVoltstackClusterType_ActiveForwardProxyPolicies:
		odrInfos, err = m.GetActiveForwardProxyPolicies().GetDRefInfo()
		if err != nil {
			return nil, err
		}
		for _, odri := range odrInfos {
			odri.DRField = "active_forward_proxy_policies." + odri.DRField
			drInfos = append(drInfos, odri)
		}

	case *AzureVnetVoltstackClusterType_ForwardProxyAllowAll:

	}

	return drInfos, err
}

// GetDRefInfo for the field's type
func (m *AzureVnetVoltstackClusterType) GetGlobalNetworkChoiceDRefInfo() ([]db.DRefInfo, error) {
	var (
		drInfos, driSet []db.DRefInfo
		err             error
	)
	_ = driSet
	if m.GetGlobalNetworkChoice() == nil {
		return []db.DRefInfo{}, nil
	}

	var odrInfos []db.DRefInfo

	switch m.GetGlobalNetworkChoice().(type) {
	case *AzureVnetVoltstackClusterType_NoGlobalNetwork:

	case *AzureVnetVoltstackClusterType_GlobalNetworkList:
		odrInfos, err = m.GetGlobalNetworkList().GetDRefInfo()
		if err != nil {
			return nil, err
		}
		for _, odri := range odrInfos {
			odri.DRField = "global_network_list." + odri.DRField
			drInfos = append(drInfos, odri)
		}

	}

	return drInfos, err
}

// GetDRefInfo for the field's type
func (m *AzureVnetVoltstackClusterType) GetNetworkPolicyChoiceDRefInfo() ([]db.DRefInfo, error) {
	var (
		drInfos, driSet []db.DRefInfo
		err             error
	)
	_ = driSet
	if m.GetNetworkPolicyChoice() == nil {
		return []db.DRefInfo{}, nil
	}

	var odrInfos []db.DRefInfo

	switch m.GetNetworkPolicyChoice().(type) {
	case *AzureVnetVoltstackClusterType_NoNetworkPolicy:

	case *AzureVnetVoltstackClusterType_ActiveNetworkPolicies:
		odrInfos, err = m.GetActiveNetworkPolicies().GetDRefInfo()
		if err != nil {
			return nil, err
		}
		for _, odri := range odrInfos {
			odri.DRField = "active_network_policies." + odri.DRField
			drInfos = append(drInfos, odri)
		}

	}

	return drInfos, err
}

// GetDRefInfo for the field's type
func (m *AzureVnetVoltstackClusterType) GetOutsideStaticRouteChoiceDRefInfo() ([]db.DRefInfo, error) {
	var (
		drInfos, driSet []db.DRefInfo
		err             error
	)
	_ = driSet
	if m.GetOutsideStaticRouteChoice() == nil {
		return []db.DRefInfo{}, nil
	}

	var odrInfos []db.DRefInfo

	switch m.GetOutsideStaticRouteChoice().(type) {
	case *AzureVnetVoltstackClusterType_NoOutsideStaticRoutes:

	case *AzureVnetVoltstackClusterType_OutsideStaticRoutes:
		odrInfos, err = m.GetOutsideStaticRoutes().GetDRefInfo()
		if err != nil {
			return nil, err
		}
		for _, odri := range odrInfos {
			odri.DRField = "outside_static_routes." + odri.DRField
			drInfos = append(drInfos, odri)
		}

	}

	return drInfos, err
}

type ValidateAzureVnetVoltstackClusterType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateAzureVnetVoltstackClusterType) ForwardProxyChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for forward_proxy_choice")
	}
	return validatorFn, nil
}

func (v *ValidateAzureVnetVoltstackClusterType) GlobalNetworkChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for global_network_choice")
	}
	return validatorFn, nil
}

func (v *ValidateAzureVnetVoltstackClusterType) NetworkPolicyChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for network_policy_choice")
	}
	return validatorFn, nil
}

func (v *ValidateAzureVnetVoltstackClusterType) OutsideStaticRouteChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for outside_static_route_choice")
	}
	return validatorFn, nil
}

func (v *ValidateAzureVnetVoltstackClusterType) AzureCertifiedHwValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for azure_certified_hw")
	}

	return validatorFn, nil
}

func (v *ValidateAzureVnetVoltstackClusterType) AzNodesValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemsValidatorFn := func(ctx context.Context, elems []*ves_io_schema_views.AzureVnetOneInterfaceNodeType, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := ves_io_schema_views.AzureVnetOneInterfaceNodeTypeValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for az_nodes")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*ves_io_schema_views.AzureVnetOneInterfaceNodeType)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*ves_io_schema_views.AzureVnetOneInterfaceNodeType, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated az_nodes")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items az_nodes")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateAzureVnetVoltstackClusterType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*AzureVnetVoltstackClusterType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *AzureVnetVoltstackClusterType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["az_nodes"]; exists {
		vOpts := append(opts, db.WithValidateField("az_nodes"))
		if err := fv(ctx, m.GetAzNodes(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["azure_certified_hw"]; exists {

		vOpts := append(opts, db.WithValidateField("azure_certified_hw"))
		if err := fv(ctx, m.GetAzureCertifiedHw(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["forward_proxy_choice"]; exists {
		val := m.GetForwardProxyChoice()
		vOpts := append(opts,
			db.WithValidateField("forward_proxy_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetForwardProxyChoice().(type) {
	case *AzureVnetVoltstackClusterType_NoForwardProxy:
		if fv, exists := v.FldValidators["forward_proxy_choice.no_forward_proxy"]; exists {
			val := m.GetForwardProxyChoice().(*AzureVnetVoltstackClusterType_NoForwardProxy).NoForwardProxy
			vOpts := append(opts,
				db.WithValidateField("forward_proxy_choice"),
				db.WithValidateField("no_forward_proxy"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *AzureVnetVoltstackClusterType_ActiveForwardProxyPolicies:
		if fv, exists := v.FldValidators["forward_proxy_choice.active_forward_proxy_policies"]; exists {
			val := m.GetForwardProxyChoice().(*AzureVnetVoltstackClusterType_ActiveForwardProxyPolicies).ActiveForwardProxyPolicies
			vOpts := append(opts,
				db.WithValidateField("forward_proxy_choice"),
				db.WithValidateField("active_forward_proxy_policies"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *AzureVnetVoltstackClusterType_ForwardProxyAllowAll:
		if fv, exists := v.FldValidators["forward_proxy_choice.forward_proxy_allow_all"]; exists {
			val := m.GetForwardProxyChoice().(*AzureVnetVoltstackClusterType_ForwardProxyAllowAll).ForwardProxyAllowAll
			vOpts := append(opts,
				db.WithValidateField("forward_proxy_choice"),
				db.WithValidateField("forward_proxy_allow_all"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["global_network_choice"]; exists {
		val := m.GetGlobalNetworkChoice()
		vOpts := append(opts,
			db.WithValidateField("global_network_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetGlobalNetworkChoice().(type) {
	case *AzureVnetVoltstackClusterType_NoGlobalNetwork:
		if fv, exists := v.FldValidators["global_network_choice.no_global_network"]; exists {
			val := m.GetGlobalNetworkChoice().(*AzureVnetVoltstackClusterType_NoGlobalNetwork).NoGlobalNetwork
			vOpts := append(opts,
				db.WithValidateField("global_network_choice"),
				db.WithValidateField("no_global_network"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *AzureVnetVoltstackClusterType_GlobalNetworkList:
		if fv, exists := v.FldValidators["global_network_choice.global_network_list"]; exists {
			val := m.GetGlobalNetworkChoice().(*AzureVnetVoltstackClusterType_GlobalNetworkList).GlobalNetworkList
			vOpts := append(opts,
				db.WithValidateField("global_network_choice"),
				db.WithValidateField("global_network_list"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["network_policy_choice"]; exists {
		val := m.GetNetworkPolicyChoice()
		vOpts := append(opts,
			db.WithValidateField("network_policy_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetNetworkPolicyChoice().(type) {
	case *AzureVnetVoltstackClusterType_NoNetworkPolicy:
		if fv, exists := v.FldValidators["network_policy_choice.no_network_policy"]; exists {
			val := m.GetNetworkPolicyChoice().(*AzureVnetVoltstackClusterType_NoNetworkPolicy).NoNetworkPolicy
			vOpts := append(opts,
				db.WithValidateField("network_policy_choice"),
				db.WithValidateField("no_network_policy"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *AzureVnetVoltstackClusterType_ActiveNetworkPolicies:
		if fv, exists := v.FldValidators["network_policy_choice.active_network_policies"]; exists {
			val := m.GetNetworkPolicyChoice().(*AzureVnetVoltstackClusterType_ActiveNetworkPolicies).ActiveNetworkPolicies
			vOpts := append(opts,
				db.WithValidateField("network_policy_choice"),
				db.WithValidateField("active_network_policies"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["outside_static_route_choice"]; exists {
		val := m.GetOutsideStaticRouteChoice()
		vOpts := append(opts,
			db.WithValidateField("outside_static_route_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetOutsideStaticRouteChoice().(type) {
	case *AzureVnetVoltstackClusterType_NoOutsideStaticRoutes:
		if fv, exists := v.FldValidators["outside_static_route_choice.no_outside_static_routes"]; exists {
			val := m.GetOutsideStaticRouteChoice().(*AzureVnetVoltstackClusterType_NoOutsideStaticRoutes).NoOutsideStaticRoutes
			vOpts := append(opts,
				db.WithValidateField("outside_static_route_choice"),
				db.WithValidateField("no_outside_static_routes"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *AzureVnetVoltstackClusterType_OutsideStaticRoutes:
		if fv, exists := v.FldValidators["outside_static_route_choice.outside_static_routes"]; exists {
			val := m.GetOutsideStaticRouteChoice().(*AzureVnetVoltstackClusterType_OutsideStaticRoutes).OutsideStaticRoutes
			vOpts := append(opts,
				db.WithValidateField("outside_static_route_choice"),
				db.WithValidateField("outside_static_routes"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultAzureVnetVoltstackClusterTypeValidator = func() *ValidateAzureVnetVoltstackClusterType {
	v := &ValidateAzureVnetVoltstackClusterType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhForwardProxyChoice := v.ForwardProxyChoiceValidationRuleHandler
	rulesForwardProxyChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhForwardProxyChoice(rulesForwardProxyChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for AzureVnetVoltstackClusterType.forward_proxy_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["forward_proxy_choice"] = vFn

	vrhGlobalNetworkChoice := v.GlobalNetworkChoiceValidationRuleHandler
	rulesGlobalNetworkChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhGlobalNetworkChoice(rulesGlobalNetworkChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for AzureVnetVoltstackClusterType.global_network_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["global_network_choice"] = vFn

	vrhNetworkPolicyChoice := v.NetworkPolicyChoiceValidationRuleHandler
	rulesNetworkPolicyChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhNetworkPolicyChoice(rulesNetworkPolicyChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for AzureVnetVoltstackClusterType.network_policy_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["network_policy_choice"] = vFn

	vrhOutsideStaticRouteChoice := v.OutsideStaticRouteChoiceValidationRuleHandler
	rulesOutsideStaticRouteChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhOutsideStaticRouteChoice(rulesOutsideStaticRouteChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for AzureVnetVoltstackClusterType.outside_static_route_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["outside_static_route_choice"] = vFn

	vrhAzureCertifiedHw := v.AzureCertifiedHwValidationRuleHandler
	rulesAzureCertifiedHw := map[string]string{
		"ves.io.schema.rules.message.required": "true",
		"ves.io.schema.rules.string.in":        "[\"azure-byol-voltstack-combo\"]",
		"ves.io.schema.rules.string.max_len":   "64",
	}
	vFn, err = vrhAzureCertifiedHw(rulesAzureCertifiedHw)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for AzureVnetVoltstackClusterType.azure_certified_hw: %s", err)
		panic(errMsg)
	}
	v.FldValidators["azure_certified_hw"] = vFn

	vrhAzNodes := v.AzNodesValidationRuleHandler
	rulesAzNodes := map[string]string{
		"ves.io.schema.rules.repeated.num_items": "1,3",
	}
	vFn, err = vrhAzNodes(rulesAzNodes)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for AzureVnetVoltstackClusterType.az_nodes: %s", err)
		panic(errMsg)
	}
	v.FldValidators["az_nodes"] = vFn

	v.FldValidators["forward_proxy_choice.active_forward_proxy_policies"] = ves_io_schema_network_firewall.ActiveForwardProxyPoliciesTypeValidator().Validate

	v.FldValidators["global_network_choice.global_network_list"] = ves_io_schema_views.GlobalNetworkConnectionListTypeValidator().Validate

	v.FldValidators["network_policy_choice.active_network_policies"] = ves_io_schema_network_firewall.ActiveNetworkPoliciesTypeValidator().Validate

	v.FldValidators["outside_static_route_choice.outside_static_routes"] = ves_io_schema_views.SiteStaticRoutesListTypeValidator().Validate

	return v
}()

func AzureVnetVoltstackClusterTypeValidator() db.Validator {
	return DefaultAzureVnetVoltstackClusterTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *CreateSpecType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *CreateSpecType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

// Redact squashes sensitive info in m (in-place)
func (m *CreateSpecType) Redact(ctx context.Context) error {
	// clear fields with confidential option set (at message or field level)
	if m == nil {
		return nil
	}

	if err := m.GetIngressEgressGw().Redact(ctx); err != nil {
		return errors.Wrapf(err, "Redacting CreateSpecType.ingress_egress_gw")
	}

	if err := m.GetVoltstackCluster().Redact(ctx); err != nil {
		return errors.Wrapf(err, "Redacting CreateSpecType.voltstack_cluster")
	}

	return nil
}

func (m *CreateSpecType) DeepCopy() *CreateSpecType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &CreateSpecType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *CreateSpecType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *CreateSpecType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return CreateSpecTypeValidator().Validate(ctx, m, opts...)
}

func (m *CreateSpecType) GetDRefInfo() ([]db.DRefInfo, error) {
	var drInfos []db.DRefInfo
	if fdrInfos, err := m.GetDeploymentDRefInfo(); err != nil {
		return nil, err
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetLogsReceiverChoiceDRefInfo(); err != nil {
		return nil, err
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetSiteTypeDRefInfo(); err != nil {
		return nil, err
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	return drInfos, nil
}

func (m *CreateSpecType) GetDeploymentDRefInfo() ([]db.DRefInfo, error) {
	var odrInfos []db.DRefInfo

	switch m.GetDeployment().(type) {
	case *CreateSpecType_AzureCred:

		vref := m.GetAzureCred()
		if vref == nil {
			return nil, nil
		}
		vdRef := db.NewDirectRefForView(vref)
		vdRef.SetKind("cloud_credentials.Object")
		odri := db.DRefInfo{
			RefdType:   "cloud_credentials.Object",
			RefdTenant: vref.Tenant,
			RefdNS:     vref.Namespace,
			RefdName:   vref.Name,
			DRField:    "azure_cred",
			Ref:        vdRef,
		}
		odrInfos = append(odrInfos, odri)

	case *CreateSpecType_Assisted:

	}

	return odrInfos, nil
}

// GetDeploymentDBEntries returns the db.Entry corresponding to the ObjRefType from the default Table
func (m *CreateSpecType) GetDeploymentDBEntries(ctx context.Context, d db.Interface) ([]db.Entry, error) {
	var entries []db.Entry

	switch m.GetDeployment().(type) {
	case *CreateSpecType_AzureCred:
		refdType, err := d.TypeForEntryKind("", "", "cloud_credentials.Object")
		if err != nil {
			return nil, errors.Wrap(err, "Cannot find type for kind: cloud_credentials")
		}

		vref := m.GetAzureCred()
		if vref == nil {
			return nil, nil
		}
		ref := &ves_io_schema.ObjectRefType{
			Kind:      "cloud_credentials.Object",
			Tenant:    vref.Tenant,
			Namespace: vref.Namespace,
			Name:      vref.Name,
		}
		refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
		if err != nil {
			return nil, errors.Wrap(err, "Getting referred entry")
		}
		if refdEnt != nil {
			entries = append(entries, refdEnt)
		}

	case *CreateSpecType_Assisted:

	}

	return entries, nil
}

func (m *CreateSpecType) GetLogsReceiverChoiceDRefInfo() ([]db.DRefInfo, error) {
	var odrInfos []db.DRefInfo

	switch m.GetLogsReceiverChoice().(type) {
	case *CreateSpecType_LogsStreamingDisabled:

	case *CreateSpecType_LogReceiver:

		vref := m.GetLogReceiver()
		if vref == nil {
			return nil, nil
		}
		vdRef := db.NewDirectRefForView(vref)
		vdRef.SetKind("log_receiver.Object")
		odri := db.DRefInfo{
			RefdType:   "log_receiver.Object",
			RefdTenant: vref.Tenant,
			RefdNS:     vref.Namespace,
			RefdName:   vref.Name,
			DRField:    "log_receiver",
			Ref:        vdRef,
		}
		odrInfos = append(odrInfos, odri)

	}

	return odrInfos, nil
}

// GetLogsReceiverChoiceDBEntries returns the db.Entry corresponding to the ObjRefType from the default Table
func (m *CreateSpecType) GetLogsReceiverChoiceDBEntries(ctx context.Context, d db.Interface) ([]db.Entry, error) {
	var entries []db.Entry

	switch m.GetLogsReceiverChoice().(type) {
	case *CreateSpecType_LogsStreamingDisabled:

	case *CreateSpecType_LogReceiver:
		refdType, err := d.TypeForEntryKind("", "", "log_receiver.Object")
		if err != nil {
			return nil, errors.Wrap(err, "Cannot find type for kind: log_receiver")
		}

		vref := m.GetLogReceiver()
		if vref == nil {
			return nil, nil
		}
		ref := &ves_io_schema.ObjectRefType{
			Kind:      "log_receiver.Object",
			Tenant:    vref.Tenant,
			Namespace: vref.Namespace,
			Name:      vref.Name,
		}
		refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
		if err != nil {
			return nil, errors.Wrap(err, "Getting referred entry")
		}
		if refdEnt != nil {
			entries = append(entries, refdEnt)
		}

	}

	return entries, nil
}

// GetDRefInfo for the field's type
func (m *CreateSpecType) GetSiteTypeDRefInfo() ([]db.DRefInfo, error) {
	var (
		drInfos, driSet []db.DRefInfo
		err             error
	)
	_ = driSet
	if m.GetSiteType() == nil {
		return []db.DRefInfo{}, nil
	}

	var odrInfos []db.DRefInfo

	switch m.GetSiteType().(type) {
	case *CreateSpecType_IngressGw:

	case *CreateSpecType_IngressEgressGw:
		odrInfos, err = m.GetIngressEgressGw().GetDRefInfo()
		if err != nil {
			return nil, err
		}
		for _, odri := range odrInfos {
			odri.DRField = "ingress_egress_gw." + odri.DRField
			drInfos = append(drInfos, odri)
		}

	case *CreateSpecType_VoltstackCluster:
		odrInfos, err = m.GetVoltstackCluster().GetDRefInfo()
		if err != nil {
			return nil, err
		}
		for _, odri := range odrInfos {
			odri.DRField = "voltstack_cluster." + odri.DRField
			drInfos = append(drInfos, odri)
		}

	}

	return drInfos, err
}

type ValidateCreateSpecType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateCreateSpecType) DeploymentValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for deployment")
	}
	return validatorFn, nil
}

func (v *ValidateCreateSpecType) LogsReceiverChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for logs_receiver_choice")
	}
	return validatorFn, nil
}

func (v *ValidateCreateSpecType) SiteTypeValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for site_type")
	}
	return validatorFn, nil
}

func (v *ValidateCreateSpecType) ResourceGroupValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for resource_group")
	}

	return validatorFn, nil
}

func (v *ValidateCreateSpecType) AzureRegionValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for azure_region")
	}

	return validatorFn, nil
}

func (v *ValidateCreateSpecType) VnetValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	reqdValidatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "MessageValidationRuleHandler for vnet")
	}
	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		if err := reqdValidatorFn(ctx, val, opts...); err != nil {
			return err
		}

		if err := ves_io_schema_views.AzureVnetChoiceTypeValidator().Validate(ctx, val, opts...); err != nil {
			return err
		}

		return nil
	}

	return validatorFn, nil
}

func (v *ValidateCreateSpecType) MachineTypeValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for machine_type")
	}

	return validatorFn, nil
}

func (v *ValidateCreateSpecType) SshKeyValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for ssh_key")
	}

	return validatorFn, nil
}

func (v *ValidateCreateSpecType) NodesPerAzValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewUint32ValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for nodes_per_az")
	}

	return validatorFn, nil
}

func (v *ValidateCreateSpecType) DiskSizeValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewUint32ValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for disk_size")
	}

	return validatorFn, nil
}

func (v *ValidateCreateSpecType) AddressValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for address")
	}

	return validatorFn, nil
}

func (v *ValidateCreateSpecType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*CreateSpecType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *CreateSpecType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["address"]; exists {

		vOpts := append(opts, db.WithValidateField("address"))
		if err := fv(ctx, m.GetAddress(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["azure_region"]; exists {

		vOpts := append(opts, db.WithValidateField("azure_region"))
		if err := fv(ctx, m.GetAzureRegion(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["coordinates"]; exists {

		vOpts := append(opts, db.WithValidateField("coordinates"))
		if err := fv(ctx, m.GetCoordinates(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["deployment"]; exists {
		val := m.GetDeployment()
		vOpts := append(opts,
			db.WithValidateField("deployment"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetDeployment().(type) {
	case *CreateSpecType_AzureCred:
		if fv, exists := v.FldValidators["deployment.azure_cred"]; exists {
			val := m.GetDeployment().(*CreateSpecType_AzureCred).AzureCred
			vOpts := append(opts,
				db.WithValidateField("deployment"),
				db.WithValidateField("azure_cred"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *CreateSpecType_Assisted:
		if fv, exists := v.FldValidators["deployment.assisted"]; exists {
			val := m.GetDeployment().(*CreateSpecType_Assisted).Assisted
			vOpts := append(opts,
				db.WithValidateField("deployment"),
				db.WithValidateField("assisted"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["disk_size"]; exists {

		vOpts := append(opts, db.WithValidateField("disk_size"))
		if err := fv(ctx, m.GetDiskSize(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["logs_receiver_choice"]; exists {
		val := m.GetLogsReceiverChoice()
		vOpts := append(opts,
			db.WithValidateField("logs_receiver_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetLogsReceiverChoice().(type) {
	case *CreateSpecType_LogsStreamingDisabled:
		if fv, exists := v.FldValidators["logs_receiver_choice.logs_streaming_disabled"]; exists {
			val := m.GetLogsReceiverChoice().(*CreateSpecType_LogsStreamingDisabled).LogsStreamingDisabled
			vOpts := append(opts,
				db.WithValidateField("logs_receiver_choice"),
				db.WithValidateField("logs_streaming_disabled"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *CreateSpecType_LogReceiver:
		if fv, exists := v.FldValidators["logs_receiver_choice.log_receiver"]; exists {
			val := m.GetLogsReceiverChoice().(*CreateSpecType_LogReceiver).LogReceiver
			vOpts := append(opts,
				db.WithValidateField("logs_receiver_choice"),
				db.WithValidateField("log_receiver"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["machine_type"]; exists {

		vOpts := append(opts, db.WithValidateField("machine_type"))
		if err := fv(ctx, m.GetMachineType(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["nodes_per_az"]; exists {

		vOpts := append(opts, db.WithValidateField("nodes_per_az"))
		if err := fv(ctx, m.GetNodesPerAz(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["os"]; exists {

		vOpts := append(opts, db.WithValidateField("os"))
		if err := fv(ctx, m.GetOs(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["resource_group"]; exists {

		vOpts := append(opts, db.WithValidateField("resource_group"))
		if err := fv(ctx, m.GetResourceGroup(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["site_type"]; exists {
		val := m.GetSiteType()
		vOpts := append(opts,
			db.WithValidateField("site_type"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetSiteType().(type) {
	case *CreateSpecType_IngressGw:
		if fv, exists := v.FldValidators["site_type.ingress_gw"]; exists {
			val := m.GetSiteType().(*CreateSpecType_IngressGw).IngressGw
			vOpts := append(opts,
				db.WithValidateField("site_type"),
				db.WithValidateField("ingress_gw"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *CreateSpecType_IngressEgressGw:
		if fv, exists := v.FldValidators["site_type.ingress_egress_gw"]; exists {
			val := m.GetSiteType().(*CreateSpecType_IngressEgressGw).IngressEgressGw
			vOpts := append(opts,
				db.WithValidateField("site_type"),
				db.WithValidateField("ingress_egress_gw"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *CreateSpecType_VoltstackCluster:
		if fv, exists := v.FldValidators["site_type.voltstack_cluster"]; exists {
			val := m.GetSiteType().(*CreateSpecType_VoltstackCluster).VoltstackCluster
			vOpts := append(opts,
				db.WithValidateField("site_type"),
				db.WithValidateField("voltstack_cluster"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["ssh_key"]; exists {

		vOpts := append(opts, db.WithValidateField("ssh_key"))
		if err := fv(ctx, m.GetSshKey(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["sw"]; exists {

		vOpts := append(opts, db.WithValidateField("sw"))
		if err := fv(ctx, m.GetSw(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["vnet"]; exists {

		vOpts := append(opts, db.WithValidateField("vnet"))
		if err := fv(ctx, m.GetVnet(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultCreateSpecTypeValidator = func() *ValidateCreateSpecType {
	v := &ValidateCreateSpecType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhDeployment := v.DeploymentValidationRuleHandler
	rulesDeployment := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhDeployment(rulesDeployment)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for CreateSpecType.deployment: %s", err)
		panic(errMsg)
	}
	v.FldValidators["deployment"] = vFn

	vrhLogsReceiverChoice := v.LogsReceiverChoiceValidationRuleHandler
	rulesLogsReceiverChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhLogsReceiverChoice(rulesLogsReceiverChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for CreateSpecType.logs_receiver_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["logs_receiver_choice"] = vFn

	vrhSiteType := v.SiteTypeValidationRuleHandler
	rulesSiteType := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhSiteType(rulesSiteType)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for CreateSpecType.site_type: %s", err)
		panic(errMsg)
	}
	v.FldValidators["site_type"] = vFn

	vrhResourceGroup := v.ResourceGroupValidationRuleHandler
	rulesResourceGroup := map[string]string{
		"ves.io.schema.rules.message.required": "true",
		"ves.io.schema.rules.string.max_len":   "64",
		"ves.io.schema.rules.string.min_len":   "1",
	}
	vFn, err = vrhResourceGroup(rulesResourceGroup)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for CreateSpecType.resource_group: %s", err)
		panic(errMsg)
	}
	v.FldValidators["resource_group"] = vFn

	vrhAzureRegion := v.AzureRegionValidationRuleHandler
	rulesAzureRegion := map[string]string{
		"ves.io.schema.rules.message.required": "true",
		"ves.io.schema.rules.string.in":        "[\"southeastasia\",\"centralus\",\"eastus\",\"eastus2\",\"southcentralus\",\"northeurope\",\"westeurope\",\"japaneast\",\"australiaeast\",\"canadacentral\",\"uksouth\",\"westus2\",\"francecentral\",\"southafricanorth\"]",
	}
	vFn, err = vrhAzureRegion(rulesAzureRegion)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for CreateSpecType.azure_region: %s", err)
		panic(errMsg)
	}
	v.FldValidators["azure_region"] = vFn

	vrhVnet := v.VnetValidationRuleHandler
	rulesVnet := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhVnet(rulesVnet)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for CreateSpecType.vnet: %s", err)
		panic(errMsg)
	}
	v.FldValidators["vnet"] = vFn

	vrhMachineType := v.MachineTypeValidationRuleHandler
	rulesMachineType := map[string]string{
		"ves.io.schema.rules.string.max_len": "64",
	}
	vFn, err = vrhMachineType(rulesMachineType)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for CreateSpecType.machine_type: %s", err)
		panic(errMsg)
	}
	v.FldValidators["machine_type"] = vFn

	vrhSshKey := v.SshKeyValidationRuleHandler
	rulesSshKey := map[string]string{
		"ves.io.schema.rules.string.max_len": "8192",
	}
	vFn, err = vrhSshKey(rulesSshKey)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for CreateSpecType.ssh_key: %s", err)
		panic(errMsg)
	}
	v.FldValidators["ssh_key"] = vFn

	vrhNodesPerAz := v.NodesPerAzValidationRuleHandler
	rulesNodesPerAz := map[string]string{
		"ves.io.schema.rules.uint32.gte": "0",
		"ves.io.schema.rules.uint32.lte": "21",
	}
	vFn, err = vrhNodesPerAz(rulesNodesPerAz)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for CreateSpecType.nodes_per_az: %s", err)
		panic(errMsg)
	}
	v.FldValidators["nodes_per_az"] = vFn

	vrhDiskSize := v.DiskSizeValidationRuleHandler
	rulesDiskSize := map[string]string{
		"ves.io.schema.rules.uint32.lte": "4095",
	}
	vFn, err = vrhDiskSize(rulesDiskSize)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for CreateSpecType.disk_size: %s", err)
		panic(errMsg)
	}
	v.FldValidators["disk_size"] = vFn

	vrhAddress := v.AddressValidationRuleHandler
	rulesAddress := map[string]string{
		"ves.io.schema.rules.string.max_len": "256",
	}
	vFn, err = vrhAddress(rulesAddress)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for CreateSpecType.address: %s", err)
		panic(errMsg)
	}
	v.FldValidators["address"] = vFn

	v.FldValidators["deployment.azure_cred"] = ves_io_schema_views.ObjectRefTypeValidator().Validate

	v.FldValidators["logs_receiver_choice.log_receiver"] = ves_io_schema_views.ObjectRefTypeValidator().Validate

	v.FldValidators["site_type.ingress_gw"] = AzureVnetIngressGwTypeValidator().Validate
	v.FldValidators["site_type.ingress_egress_gw"] = AzureVnetIngressEgressGwTypeValidator().Validate
	v.FldValidators["site_type.voltstack_cluster"] = AzureVnetVoltstackClusterTypeValidator().Validate

	v.FldValidators["coordinates"] = ves_io_schema_site.CoordinatesValidator().Validate

	v.FldValidators["sw"] = ves_io_schema_views.VolterraSoftwareTypeValidator().Validate

	v.FldValidators["os"] = ves_io_schema_views.OperatingSystemTypeValidator().Validate

	return v
}()

func CreateSpecTypeValidator() db.Validator {
	return DefaultCreateSpecTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *GetSpecType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *GetSpecType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

// Redact squashes sensitive info in m (in-place)
func (m *GetSpecType) Redact(ctx context.Context) error {
	// clear fields with confidential option set (at message or field level)
	if m == nil {
		return nil
	}

	if err := m.GetIngressEgressGw().Redact(ctx); err != nil {
		return errors.Wrapf(err, "Redacting GetSpecType.ingress_egress_gw")
	}

	if err := m.GetVoltstackCluster().Redact(ctx); err != nil {
		return errors.Wrapf(err, "Redacting GetSpecType.voltstack_cluster")
	}

	return nil
}

func (m *GetSpecType) DeepCopy() *GetSpecType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &GetSpecType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *GetSpecType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *GetSpecType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return GetSpecTypeValidator().Validate(ctx, m, opts...)
}

func (m *GetSpecType) GetDRefInfo() ([]db.DRefInfo, error) {
	var drInfos []db.DRefInfo
	if fdrInfos, err := m.GetDeploymentDRefInfo(); err != nil {
		return nil, err
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetLogsReceiverChoiceDRefInfo(); err != nil {
		return nil, err
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetSiteTypeDRefInfo(); err != nil {
		return nil, err
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	return drInfos, nil
}

func (m *GetSpecType) GetDeploymentDRefInfo() ([]db.DRefInfo, error) {
	var odrInfos []db.DRefInfo

	switch m.GetDeployment().(type) {
	case *GetSpecType_AzureCred:

		vref := m.GetAzureCred()
		if vref == nil {
			return nil, nil
		}
		vdRef := db.NewDirectRefForView(vref)
		vdRef.SetKind("cloud_credentials.Object")
		odri := db.DRefInfo{
			RefdType:   "cloud_credentials.Object",
			RefdTenant: vref.Tenant,
			RefdNS:     vref.Namespace,
			RefdName:   vref.Name,
			DRField:    "azure_cred",
			Ref:        vdRef,
		}
		odrInfos = append(odrInfos, odri)

	case *GetSpecType_Assisted:

	}

	return odrInfos, nil
}

// GetDeploymentDBEntries returns the db.Entry corresponding to the ObjRefType from the default Table
func (m *GetSpecType) GetDeploymentDBEntries(ctx context.Context, d db.Interface) ([]db.Entry, error) {
	var entries []db.Entry

	switch m.GetDeployment().(type) {
	case *GetSpecType_AzureCred:
		refdType, err := d.TypeForEntryKind("", "", "cloud_credentials.Object")
		if err != nil {
			return nil, errors.Wrap(err, "Cannot find type for kind: cloud_credentials")
		}

		vref := m.GetAzureCred()
		if vref == nil {
			return nil, nil
		}
		ref := &ves_io_schema.ObjectRefType{
			Kind:      "cloud_credentials.Object",
			Tenant:    vref.Tenant,
			Namespace: vref.Namespace,
			Name:      vref.Name,
		}
		refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
		if err != nil {
			return nil, errors.Wrap(err, "Getting referred entry")
		}
		if refdEnt != nil {
			entries = append(entries, refdEnt)
		}

	case *GetSpecType_Assisted:

	}

	return entries, nil
}

func (m *GetSpecType) GetLogsReceiverChoiceDRefInfo() ([]db.DRefInfo, error) {
	var odrInfos []db.DRefInfo

	switch m.GetLogsReceiverChoice().(type) {
	case *GetSpecType_LogsStreamingDisabled:

	case *GetSpecType_LogReceiver:

		vref := m.GetLogReceiver()
		if vref == nil {
			return nil, nil
		}
		vdRef := db.NewDirectRefForView(vref)
		vdRef.SetKind("log_receiver.Object")
		odri := db.DRefInfo{
			RefdType:   "log_receiver.Object",
			RefdTenant: vref.Tenant,
			RefdNS:     vref.Namespace,
			RefdName:   vref.Name,
			DRField:    "log_receiver",
			Ref:        vdRef,
		}
		odrInfos = append(odrInfos, odri)

	}

	return odrInfos, nil
}

// GetLogsReceiverChoiceDBEntries returns the db.Entry corresponding to the ObjRefType from the default Table
func (m *GetSpecType) GetLogsReceiverChoiceDBEntries(ctx context.Context, d db.Interface) ([]db.Entry, error) {
	var entries []db.Entry

	switch m.GetLogsReceiverChoice().(type) {
	case *GetSpecType_LogsStreamingDisabled:

	case *GetSpecType_LogReceiver:
		refdType, err := d.TypeForEntryKind("", "", "log_receiver.Object")
		if err != nil {
			return nil, errors.Wrap(err, "Cannot find type for kind: log_receiver")
		}

		vref := m.GetLogReceiver()
		if vref == nil {
			return nil, nil
		}
		ref := &ves_io_schema.ObjectRefType{
			Kind:      "log_receiver.Object",
			Tenant:    vref.Tenant,
			Namespace: vref.Namespace,
			Name:      vref.Name,
		}
		refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
		if err != nil {
			return nil, errors.Wrap(err, "Getting referred entry")
		}
		if refdEnt != nil {
			entries = append(entries, refdEnt)
		}

	}

	return entries, nil
}

// GetDRefInfo for the field's type
func (m *GetSpecType) GetSiteTypeDRefInfo() ([]db.DRefInfo, error) {
	var (
		drInfos, driSet []db.DRefInfo
		err             error
	)
	_ = driSet
	if m.GetSiteType() == nil {
		return []db.DRefInfo{}, nil
	}

	var odrInfos []db.DRefInfo

	switch m.GetSiteType().(type) {
	case *GetSpecType_IngressGw:

	case *GetSpecType_IngressEgressGw:
		odrInfos, err = m.GetIngressEgressGw().GetDRefInfo()
		if err != nil {
			return nil, err
		}
		for _, odri := range odrInfos {
			odri.DRField = "ingress_egress_gw." + odri.DRField
			drInfos = append(drInfos, odri)
		}

	case *GetSpecType_VoltstackCluster:
		odrInfos, err = m.GetVoltstackCluster().GetDRefInfo()
		if err != nil {
			return nil, err
		}
		for _, odri := range odrInfos {
			odri.DRField = "voltstack_cluster." + odri.DRField
			drInfos = append(drInfos, odri)
		}

	}

	return drInfos, err
}

type ValidateGetSpecType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateGetSpecType) DeploymentValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for deployment")
	}
	return validatorFn, nil
}

func (v *ValidateGetSpecType) LogsReceiverChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for logs_receiver_choice")
	}
	return validatorFn, nil
}

func (v *ValidateGetSpecType) SiteTypeValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for site_type")
	}
	return validatorFn, nil
}

func (v *ValidateGetSpecType) ResourceGroupValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for resource_group")
	}

	return validatorFn, nil
}

func (v *ValidateGetSpecType) AzureRegionValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for azure_region")
	}

	return validatorFn, nil
}

func (v *ValidateGetSpecType) VnetValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	reqdValidatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "MessageValidationRuleHandler for vnet")
	}
	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		if err := reqdValidatorFn(ctx, val, opts...); err != nil {
			return err
		}

		if err := ves_io_schema_views.AzureVnetChoiceTypeValidator().Validate(ctx, val, opts...); err != nil {
			return err
		}

		return nil
	}

	return validatorFn, nil
}

func (v *ValidateGetSpecType) MachineTypeValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for machine_type")
	}

	return validatorFn, nil
}

func (v *ValidateGetSpecType) VolterraSoftwareVersionValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for volterra_software_version")
	}

	return validatorFn, nil
}

func (v *ValidateGetSpecType) OperatingSystemVersionValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for operating_system_version")
	}

	return validatorFn, nil
}

func (v *ValidateGetSpecType) SshKeyValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for ssh_key")
	}

	return validatorFn, nil
}

func (v *ValidateGetSpecType) NodesPerAzValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewUint32ValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for nodes_per_az")
	}

	return validatorFn, nil
}

func (v *ValidateGetSpecType) DiskSizeValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewUint32ValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for disk_size")
	}

	return validatorFn, nil
}

func (v *ValidateGetSpecType) AddressValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for address")
	}

	return validatorFn, nil
}

func (v *ValidateGetSpecType) VipParamsPerAzValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemsValidatorFn := func(ctx context.Context, elems []*ves_io_schema_site.PublishVIPParamsPerAz, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := ves_io_schema_site.PublishVIPParamsPerAzValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for vip_params_per_az")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*ves_io_schema_site.PublishVIPParamsPerAz)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*ves_io_schema_site.PublishVIPParamsPerAz, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated vip_params_per_az")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items vip_params_per_az")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateGetSpecType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*GetSpecType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *GetSpecType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["address"]; exists {

		vOpts := append(opts, db.WithValidateField("address"))
		if err := fv(ctx, m.GetAddress(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["azure_region"]; exists {

		vOpts := append(opts, db.WithValidateField("azure_region"))
		if err := fv(ctx, m.GetAzureRegion(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["coordinates"]; exists {

		vOpts := append(opts, db.WithValidateField("coordinates"))
		if err := fv(ctx, m.GetCoordinates(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["deployment"]; exists {
		val := m.GetDeployment()
		vOpts := append(opts,
			db.WithValidateField("deployment"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetDeployment().(type) {
	case *GetSpecType_AzureCred:
		if fv, exists := v.FldValidators["deployment.azure_cred"]; exists {
			val := m.GetDeployment().(*GetSpecType_AzureCred).AzureCred
			vOpts := append(opts,
				db.WithValidateField("deployment"),
				db.WithValidateField("azure_cred"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GetSpecType_Assisted:
		if fv, exists := v.FldValidators["deployment.assisted"]; exists {
			val := m.GetDeployment().(*GetSpecType_Assisted).Assisted
			vOpts := append(opts,
				db.WithValidateField("deployment"),
				db.WithValidateField("assisted"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["disk_size"]; exists {

		vOpts := append(opts, db.WithValidateField("disk_size"))
		if err := fv(ctx, m.GetDiskSize(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["logs_receiver_choice"]; exists {
		val := m.GetLogsReceiverChoice()
		vOpts := append(opts,
			db.WithValidateField("logs_receiver_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetLogsReceiverChoice().(type) {
	case *GetSpecType_LogsStreamingDisabled:
		if fv, exists := v.FldValidators["logs_receiver_choice.logs_streaming_disabled"]; exists {
			val := m.GetLogsReceiverChoice().(*GetSpecType_LogsStreamingDisabled).LogsStreamingDisabled
			vOpts := append(opts,
				db.WithValidateField("logs_receiver_choice"),
				db.WithValidateField("logs_streaming_disabled"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GetSpecType_LogReceiver:
		if fv, exists := v.FldValidators["logs_receiver_choice.log_receiver"]; exists {
			val := m.GetLogsReceiverChoice().(*GetSpecType_LogReceiver).LogReceiver
			vOpts := append(opts,
				db.WithValidateField("logs_receiver_choice"),
				db.WithValidateField("log_receiver"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["machine_type"]; exists {

		vOpts := append(opts, db.WithValidateField("machine_type"))
		if err := fv(ctx, m.GetMachineType(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["nodes_per_az"]; exists {

		vOpts := append(opts, db.WithValidateField("nodes_per_az"))
		if err := fv(ctx, m.GetNodesPerAz(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["operating_system_version"]; exists {

		vOpts := append(opts, db.WithValidateField("operating_system_version"))
		if err := fv(ctx, m.GetOperatingSystemVersion(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["resource_group"]; exists {

		vOpts := append(opts, db.WithValidateField("resource_group"))
		if err := fv(ctx, m.GetResourceGroup(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["site_state"]; exists {

		vOpts := append(opts, db.WithValidateField("site_state"))
		if err := fv(ctx, m.GetSiteState(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["site_type"]; exists {
		val := m.GetSiteType()
		vOpts := append(opts,
			db.WithValidateField("site_type"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetSiteType().(type) {
	case *GetSpecType_IngressGw:
		if fv, exists := v.FldValidators["site_type.ingress_gw"]; exists {
			val := m.GetSiteType().(*GetSpecType_IngressGw).IngressGw
			vOpts := append(opts,
				db.WithValidateField("site_type"),
				db.WithValidateField("ingress_gw"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GetSpecType_IngressEgressGw:
		if fv, exists := v.FldValidators["site_type.ingress_egress_gw"]; exists {
			val := m.GetSiteType().(*GetSpecType_IngressEgressGw).IngressEgressGw
			vOpts := append(opts,
				db.WithValidateField("site_type"),
				db.WithValidateField("ingress_egress_gw"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GetSpecType_VoltstackCluster:
		if fv, exists := v.FldValidators["site_type.voltstack_cluster"]; exists {
			val := m.GetSiteType().(*GetSpecType_VoltstackCluster).VoltstackCluster
			vOpts := append(opts,
				db.WithValidateField("site_type"),
				db.WithValidateField("voltstack_cluster"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["ssh_key"]; exists {

		vOpts := append(opts, db.WithValidateField("ssh_key"))
		if err := fv(ctx, m.GetSshKey(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["vip_params_per_az"]; exists {
		vOpts := append(opts, db.WithValidateField("vip_params_per_az"))
		if err := fv(ctx, m.GetVipParamsPerAz(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["vnet"]; exists {

		vOpts := append(opts, db.WithValidateField("vnet"))
		if err := fv(ctx, m.GetVnet(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["volterra_software_version"]; exists {

		vOpts := append(opts, db.WithValidateField("volterra_software_version"))
		if err := fv(ctx, m.GetVolterraSoftwareVersion(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultGetSpecTypeValidator = func() *ValidateGetSpecType {
	v := &ValidateGetSpecType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhDeployment := v.DeploymentValidationRuleHandler
	rulesDeployment := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhDeployment(rulesDeployment)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GetSpecType.deployment: %s", err)
		panic(errMsg)
	}
	v.FldValidators["deployment"] = vFn

	vrhLogsReceiverChoice := v.LogsReceiverChoiceValidationRuleHandler
	rulesLogsReceiverChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhLogsReceiverChoice(rulesLogsReceiverChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GetSpecType.logs_receiver_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["logs_receiver_choice"] = vFn

	vrhSiteType := v.SiteTypeValidationRuleHandler
	rulesSiteType := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhSiteType(rulesSiteType)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GetSpecType.site_type: %s", err)
		panic(errMsg)
	}
	v.FldValidators["site_type"] = vFn

	vrhResourceGroup := v.ResourceGroupValidationRuleHandler
	rulesResourceGroup := map[string]string{
		"ves.io.schema.rules.message.required": "true",
		"ves.io.schema.rules.string.max_len":   "64",
		"ves.io.schema.rules.string.min_len":   "1",
	}
	vFn, err = vrhResourceGroup(rulesResourceGroup)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GetSpecType.resource_group: %s", err)
		panic(errMsg)
	}
	v.FldValidators["resource_group"] = vFn

	vrhAzureRegion := v.AzureRegionValidationRuleHandler
	rulesAzureRegion := map[string]string{
		"ves.io.schema.rules.message.required": "true",
		"ves.io.schema.rules.string.in":        "[\"southeastasia\",\"centralus\",\"eastus\",\"eastus2\",\"southcentralus\",\"northeurope\",\"westeurope\",\"japaneast\",\"australiaeast\",\"canadacentral\",\"uksouth\",\"westus2\",\"francecentral\",\"southafricanorth\"]",
	}
	vFn, err = vrhAzureRegion(rulesAzureRegion)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GetSpecType.azure_region: %s", err)
		panic(errMsg)
	}
	v.FldValidators["azure_region"] = vFn

	vrhVnet := v.VnetValidationRuleHandler
	rulesVnet := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhVnet(rulesVnet)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GetSpecType.vnet: %s", err)
		panic(errMsg)
	}
	v.FldValidators["vnet"] = vFn

	vrhMachineType := v.MachineTypeValidationRuleHandler
	rulesMachineType := map[string]string{
		"ves.io.schema.rules.string.max_len": "64",
	}
	vFn, err = vrhMachineType(rulesMachineType)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GetSpecType.machine_type: %s", err)
		panic(errMsg)
	}
	v.FldValidators["machine_type"] = vFn

	vrhVolterraSoftwareVersion := v.VolterraSoftwareVersionValidationRuleHandler
	rulesVolterraSoftwareVersion := map[string]string{
		"ves.io.schema.rules.string.max_len": "64",
	}
	vFn, err = vrhVolterraSoftwareVersion(rulesVolterraSoftwareVersion)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GetSpecType.volterra_software_version: %s", err)
		panic(errMsg)
	}
	v.FldValidators["volterra_software_version"] = vFn

	vrhOperatingSystemVersion := v.OperatingSystemVersionValidationRuleHandler
	rulesOperatingSystemVersion := map[string]string{
		"ves.io.schema.rules.string.max_len": "64",
	}
	vFn, err = vrhOperatingSystemVersion(rulesOperatingSystemVersion)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GetSpecType.operating_system_version: %s", err)
		panic(errMsg)
	}
	v.FldValidators["operating_system_version"] = vFn

	vrhSshKey := v.SshKeyValidationRuleHandler
	rulesSshKey := map[string]string{
		"ves.io.schema.rules.string.max_len": "8192",
	}
	vFn, err = vrhSshKey(rulesSshKey)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GetSpecType.ssh_key: %s", err)
		panic(errMsg)
	}
	v.FldValidators["ssh_key"] = vFn

	vrhNodesPerAz := v.NodesPerAzValidationRuleHandler
	rulesNodesPerAz := map[string]string{
		"ves.io.schema.rules.uint32.gte": "0",
		"ves.io.schema.rules.uint32.lte": "21",
	}
	vFn, err = vrhNodesPerAz(rulesNodesPerAz)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GetSpecType.nodes_per_az: %s", err)
		panic(errMsg)
	}
	v.FldValidators["nodes_per_az"] = vFn

	vrhDiskSize := v.DiskSizeValidationRuleHandler
	rulesDiskSize := map[string]string{
		"ves.io.schema.rules.uint32.lte": "4095",
	}
	vFn, err = vrhDiskSize(rulesDiskSize)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GetSpecType.disk_size: %s", err)
		panic(errMsg)
	}
	v.FldValidators["disk_size"] = vFn

	vrhAddress := v.AddressValidationRuleHandler
	rulesAddress := map[string]string{
		"ves.io.schema.rules.string.max_len": "256",
	}
	vFn, err = vrhAddress(rulesAddress)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GetSpecType.address: %s", err)
		panic(errMsg)
	}
	v.FldValidators["address"] = vFn

	vrhVipParamsPerAz := v.VipParamsPerAzValidationRuleHandler
	rulesVipParamsPerAz := map[string]string{
		"ves.io.schema.rules.repeated.num_items": "0,1,3",
		"ves.io.schema.rules.repeated.unique":    "true",
	}
	vFn, err = vrhVipParamsPerAz(rulesVipParamsPerAz)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GetSpecType.vip_params_per_az: %s", err)
		panic(errMsg)
	}
	v.FldValidators["vip_params_per_az"] = vFn

	v.FldValidators["deployment.azure_cred"] = ves_io_schema_views.ObjectRefTypeValidator().Validate

	v.FldValidators["logs_receiver_choice.log_receiver"] = ves_io_schema_views.ObjectRefTypeValidator().Validate

	v.FldValidators["site_type.ingress_gw"] = AzureVnetIngressGwTypeValidator().Validate
	v.FldValidators["site_type.ingress_egress_gw"] = AzureVnetIngressEgressGwTypeValidator().Validate
	v.FldValidators["site_type.voltstack_cluster"] = AzureVnetVoltstackClusterTypeValidator().Validate

	v.FldValidators["coordinates"] = ves_io_schema_site.CoordinatesValidator().Validate

	return v
}()

func GetSpecTypeValidator() db.Validator {
	return DefaultGetSpecTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *GlobalSpecType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *GlobalSpecType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

// Redact squashes sensitive info in m (in-place)
func (m *GlobalSpecType) Redact(ctx context.Context) error {
	// clear fields with confidential option set (at message or field level)
	if m == nil {
		return nil
	}

	if err := m.GetIngressEgressGw().Redact(ctx); err != nil {
		return errors.Wrapf(err, "Redacting GlobalSpecType.ingress_egress_gw")
	}

	if err := m.GetVoltstackCluster().Redact(ctx); err != nil {
		return errors.Wrapf(err, "Redacting GlobalSpecType.voltstack_cluster")
	}

	return nil
}

func (m *GlobalSpecType) DeepCopy() *GlobalSpecType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &GlobalSpecType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *GlobalSpecType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *GlobalSpecType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return GlobalSpecTypeValidator().Validate(ctx, m, opts...)
}

func (m *GlobalSpecType) GetDRefInfo() ([]db.DRefInfo, error) {
	var drInfos []db.DRefInfo
	if fdrInfos, err := m.GetDeploymentDRefInfo(); err != nil {
		return nil, err
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetLogsReceiverChoiceDRefInfo(); err != nil {
		return nil, err
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetSiteTypeDRefInfo(); err != nil {
		return nil, err
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetTfParamsDRefInfo(); err != nil {
		return nil, err
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetViewInternalDRefInfo(); err != nil {
		return nil, err
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	return drInfos, nil
}

func (m *GlobalSpecType) GetDeploymentDRefInfo() ([]db.DRefInfo, error) {
	var odrInfos []db.DRefInfo

	switch m.GetDeployment().(type) {
	case *GlobalSpecType_AzureCred:

		vref := m.GetAzureCred()
		if vref == nil {
			return nil, nil
		}
		vdRef := db.NewDirectRefForView(vref)
		vdRef.SetKind("cloud_credentials.Object")
		odri := db.DRefInfo{
			RefdType:   "cloud_credentials.Object",
			RefdTenant: vref.Tenant,
			RefdNS:     vref.Namespace,
			RefdName:   vref.Name,
			DRField:    "azure_cred",
			Ref:        vdRef,
		}
		odrInfos = append(odrInfos, odri)

	case *GlobalSpecType_Assisted:

	}

	return odrInfos, nil
}

// GetDeploymentDBEntries returns the db.Entry corresponding to the ObjRefType from the default Table
func (m *GlobalSpecType) GetDeploymentDBEntries(ctx context.Context, d db.Interface) ([]db.Entry, error) {
	var entries []db.Entry

	switch m.GetDeployment().(type) {
	case *GlobalSpecType_AzureCred:
		refdType, err := d.TypeForEntryKind("", "", "cloud_credentials.Object")
		if err != nil {
			return nil, errors.Wrap(err, "Cannot find type for kind: cloud_credentials")
		}

		vref := m.GetAzureCred()
		if vref == nil {
			return nil, nil
		}
		ref := &ves_io_schema.ObjectRefType{
			Kind:      "cloud_credentials.Object",
			Tenant:    vref.Tenant,
			Namespace: vref.Namespace,
			Name:      vref.Name,
		}
		refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
		if err != nil {
			return nil, errors.Wrap(err, "Getting referred entry")
		}
		if refdEnt != nil {
			entries = append(entries, refdEnt)
		}

	case *GlobalSpecType_Assisted:

	}

	return entries, nil
}

func (m *GlobalSpecType) GetLogsReceiverChoiceDRefInfo() ([]db.DRefInfo, error) {
	var odrInfos []db.DRefInfo

	switch m.GetLogsReceiverChoice().(type) {
	case *GlobalSpecType_LogsStreamingDisabled:

	case *GlobalSpecType_LogReceiver:

		vref := m.GetLogReceiver()
		if vref == nil {
			return nil, nil
		}
		vdRef := db.NewDirectRefForView(vref)
		vdRef.SetKind("log_receiver.Object")
		odri := db.DRefInfo{
			RefdType:   "log_receiver.Object",
			RefdTenant: vref.Tenant,
			RefdNS:     vref.Namespace,
			RefdName:   vref.Name,
			DRField:    "log_receiver",
			Ref:        vdRef,
		}
		odrInfos = append(odrInfos, odri)

	}

	return odrInfos, nil
}

// GetLogsReceiverChoiceDBEntries returns the db.Entry corresponding to the ObjRefType from the default Table
func (m *GlobalSpecType) GetLogsReceiverChoiceDBEntries(ctx context.Context, d db.Interface) ([]db.Entry, error) {
	var entries []db.Entry

	switch m.GetLogsReceiverChoice().(type) {
	case *GlobalSpecType_LogsStreamingDisabled:

	case *GlobalSpecType_LogReceiver:
		refdType, err := d.TypeForEntryKind("", "", "log_receiver.Object")
		if err != nil {
			return nil, errors.Wrap(err, "Cannot find type for kind: log_receiver")
		}

		vref := m.GetLogReceiver()
		if vref == nil {
			return nil, nil
		}
		ref := &ves_io_schema.ObjectRefType{
			Kind:      "log_receiver.Object",
			Tenant:    vref.Tenant,
			Namespace: vref.Namespace,
			Name:      vref.Name,
		}
		refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
		if err != nil {
			return nil, errors.Wrap(err, "Getting referred entry")
		}
		if refdEnt != nil {
			entries = append(entries, refdEnt)
		}

	}

	return entries, nil
}

// GetDRefInfo for the field's type
func (m *GlobalSpecType) GetSiteTypeDRefInfo() ([]db.DRefInfo, error) {
	var (
		drInfos, driSet []db.DRefInfo
		err             error
	)
	_ = driSet
	if m.GetSiteType() == nil {
		return []db.DRefInfo{}, nil
	}

	var odrInfos []db.DRefInfo

	switch m.GetSiteType().(type) {
	case *GlobalSpecType_IngressGw:

	case *GlobalSpecType_IngressEgressGw:
		odrInfos, err = m.GetIngressEgressGw().GetDRefInfo()
		if err != nil {
			return nil, err
		}
		for _, odri := range odrInfos {
			odri.DRField = "ingress_egress_gw." + odri.DRField
			drInfos = append(drInfos, odri)
		}

	case *GlobalSpecType_VoltstackCluster:
		odrInfos, err = m.GetVoltstackCluster().GetDRefInfo()
		if err != nil {
			return nil, err
		}
		for _, odri := range odrInfos {
			odri.DRField = "voltstack_cluster." + odri.DRField
			drInfos = append(drInfos, odri)
		}

	}

	return drInfos, err
}

func (m *GlobalSpecType) GetTfParamsDRefInfo() ([]db.DRefInfo, error) {
	drInfos := []db.DRefInfo{}

	vref := m.GetTfParams()
	if vref == nil {
		return nil, nil
	}
	vdRef := db.NewDirectRefForView(vref)
	vdRef.SetKind("terraform_parameters.Object")
	drInfos = append(drInfos, db.DRefInfo{
		RefdType:   "terraform_parameters.Object",
		RefdTenant: vref.Tenant,
		RefdNS:     vref.Namespace,
		RefdName:   vref.Name,
		DRField:    "tf_params",
		Ref:        vdRef,
	})

	return drInfos, nil
}

// GetTfParamsDBEntries returns the db.Entry corresponding to the ObjRefType from the default Table
func (m *GlobalSpecType) GetTfParamsDBEntries(ctx context.Context, d db.Interface) ([]db.Entry, error) {
	var entries []db.Entry
	refdType, err := d.TypeForEntryKind("", "", "terraform_parameters.Object")
	if err != nil {
		return nil, errors.Wrap(err, "Cannot find type for kind: terraform_parameters")
	}

	vref := m.GetTfParams()
	if vref == nil {
		return nil, nil
	}
	ref := &ves_io_schema.ObjectRefType{
		Kind:      "terraform_parameters.Object",
		Tenant:    vref.Tenant,
		Namespace: vref.Namespace,
		Name:      vref.Name,
	}
	refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
	if err != nil {
		return nil, errors.Wrap(err, "Getting referred entry")
	}
	if refdEnt != nil {
		entries = append(entries, refdEnt)
	}

	return entries, nil
}

func (m *GlobalSpecType) GetViewInternalDRefInfo() ([]db.DRefInfo, error) {
	drInfos := []db.DRefInfo{}

	vref := m.GetViewInternal()
	if vref == nil {
		return nil, nil
	}
	vdRef := db.NewDirectRefForView(vref)
	vdRef.SetKind("view_internal.Object")
	drInfos = append(drInfos, db.DRefInfo{
		RefdType:   "view_internal.Object",
		RefdTenant: vref.Tenant,
		RefdNS:     vref.Namespace,
		RefdName:   vref.Name,
		DRField:    "view_internal",
		Ref:        vdRef,
	})

	return drInfos, nil
}

// GetViewInternalDBEntries returns the db.Entry corresponding to the ObjRefType from the default Table
func (m *GlobalSpecType) GetViewInternalDBEntries(ctx context.Context, d db.Interface) ([]db.Entry, error) {
	var entries []db.Entry
	refdType, err := d.TypeForEntryKind("", "", "view_internal.Object")
	if err != nil {
		return nil, errors.Wrap(err, "Cannot find type for kind: view_internal")
	}

	vref := m.GetViewInternal()
	if vref == nil {
		return nil, nil
	}
	ref := &ves_io_schema.ObjectRefType{
		Kind:      "view_internal.Object",
		Tenant:    vref.Tenant,
		Namespace: vref.Namespace,
		Name:      vref.Name,
	}
	refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
	if err != nil {
		return nil, errors.Wrap(err, "Getting referred entry")
	}
	if refdEnt != nil {
		entries = append(entries, refdEnt)
	}

	return entries, nil
}

type ValidateGlobalSpecType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateGlobalSpecType) DeploymentValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for deployment")
	}
	return validatorFn, nil
}

func (v *ValidateGlobalSpecType) LogsReceiverChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for logs_receiver_choice")
	}
	return validatorFn, nil
}

func (v *ValidateGlobalSpecType) SiteTypeValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for site_type")
	}
	return validatorFn, nil
}

func (v *ValidateGlobalSpecType) ResourceGroupValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for resource_group")
	}

	return validatorFn, nil
}

func (v *ValidateGlobalSpecType) AzureRegionValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for azure_region")
	}

	return validatorFn, nil
}

func (v *ValidateGlobalSpecType) VnetValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	reqdValidatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "MessageValidationRuleHandler for vnet")
	}
	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		if err := reqdValidatorFn(ctx, val, opts...); err != nil {
			return err
		}

		if err := ves_io_schema_views.AzureVnetChoiceTypeValidator().Validate(ctx, val, opts...); err != nil {
			return err
		}

		return nil
	}

	return validatorFn, nil
}

func (v *ValidateGlobalSpecType) MachineTypeValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for machine_type")
	}

	return validatorFn, nil
}

func (v *ValidateGlobalSpecType) VolterraSoftwareVersionValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for volterra_software_version")
	}

	return validatorFn, nil
}

func (v *ValidateGlobalSpecType) OperatingSystemVersionValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for operating_system_version")
	}

	return validatorFn, nil
}

func (v *ValidateGlobalSpecType) SshKeyValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for ssh_key")
	}

	return validatorFn, nil
}

func (v *ValidateGlobalSpecType) NodesPerAzValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewUint32ValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for nodes_per_az")
	}

	return validatorFn, nil
}

func (v *ValidateGlobalSpecType) DiskSizeValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewUint32ValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for disk_size")
	}

	return validatorFn, nil
}

func (v *ValidateGlobalSpecType) AddressValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for address")
	}

	return validatorFn, nil
}

func (v *ValidateGlobalSpecType) VipParamsPerAzValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemsValidatorFn := func(ctx context.Context, elems []*ves_io_schema_site.PublishVIPParamsPerAz, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := ves_io_schema_site.PublishVIPParamsPerAzValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for vip_params_per_az")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*ves_io_schema_site.PublishVIPParamsPerAz)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*ves_io_schema_site.PublishVIPParamsPerAz, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated vip_params_per_az")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items vip_params_per_az")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateGlobalSpecType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*GlobalSpecType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *GlobalSpecType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["address"]; exists {

		vOpts := append(opts, db.WithValidateField("address"))
		if err := fv(ctx, m.GetAddress(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["azure_region"]; exists {

		vOpts := append(opts, db.WithValidateField("azure_region"))
		if err := fv(ctx, m.GetAzureRegion(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["coordinates"]; exists {

		vOpts := append(opts, db.WithValidateField("coordinates"))
		if err := fv(ctx, m.GetCoordinates(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["deployment"]; exists {
		val := m.GetDeployment()
		vOpts := append(opts,
			db.WithValidateField("deployment"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetDeployment().(type) {
	case *GlobalSpecType_AzureCred:
		if fv, exists := v.FldValidators["deployment.azure_cred"]; exists {
			val := m.GetDeployment().(*GlobalSpecType_AzureCred).AzureCred
			vOpts := append(opts,
				db.WithValidateField("deployment"),
				db.WithValidateField("azure_cred"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GlobalSpecType_Assisted:
		if fv, exists := v.FldValidators["deployment.assisted"]; exists {
			val := m.GetDeployment().(*GlobalSpecType_Assisted).Assisted
			vOpts := append(opts,
				db.WithValidateField("deployment"),
				db.WithValidateField("assisted"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["disk_size"]; exists {

		vOpts := append(opts, db.WithValidateField("disk_size"))
		if err := fv(ctx, m.GetDiskSize(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["logs_receiver_choice"]; exists {
		val := m.GetLogsReceiverChoice()
		vOpts := append(opts,
			db.WithValidateField("logs_receiver_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetLogsReceiverChoice().(type) {
	case *GlobalSpecType_LogsStreamingDisabled:
		if fv, exists := v.FldValidators["logs_receiver_choice.logs_streaming_disabled"]; exists {
			val := m.GetLogsReceiverChoice().(*GlobalSpecType_LogsStreamingDisabled).LogsStreamingDisabled
			vOpts := append(opts,
				db.WithValidateField("logs_receiver_choice"),
				db.WithValidateField("logs_streaming_disabled"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GlobalSpecType_LogReceiver:
		if fv, exists := v.FldValidators["logs_receiver_choice.log_receiver"]; exists {
			val := m.GetLogsReceiverChoice().(*GlobalSpecType_LogReceiver).LogReceiver
			vOpts := append(opts,
				db.WithValidateField("logs_receiver_choice"),
				db.WithValidateField("log_receiver"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["machine_type"]; exists {

		vOpts := append(opts, db.WithValidateField("machine_type"))
		if err := fv(ctx, m.GetMachineType(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["nodes_per_az"]; exists {

		vOpts := append(opts, db.WithValidateField("nodes_per_az"))
		if err := fv(ctx, m.GetNodesPerAz(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["operating_system_version"]; exists {

		vOpts := append(opts, db.WithValidateField("operating_system_version"))
		if err := fv(ctx, m.GetOperatingSystemVersion(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["os"]; exists {

		vOpts := append(opts, db.WithValidateField("os"))
		if err := fv(ctx, m.GetOs(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["resource_group"]; exists {

		vOpts := append(opts, db.WithValidateField("resource_group"))
		if err := fv(ctx, m.GetResourceGroup(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["site_type"]; exists {
		val := m.GetSiteType()
		vOpts := append(opts,
			db.WithValidateField("site_type"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetSiteType().(type) {
	case *GlobalSpecType_IngressGw:
		if fv, exists := v.FldValidators["site_type.ingress_gw"]; exists {
			val := m.GetSiteType().(*GlobalSpecType_IngressGw).IngressGw
			vOpts := append(opts,
				db.WithValidateField("site_type"),
				db.WithValidateField("ingress_gw"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GlobalSpecType_IngressEgressGw:
		if fv, exists := v.FldValidators["site_type.ingress_egress_gw"]; exists {
			val := m.GetSiteType().(*GlobalSpecType_IngressEgressGw).IngressEgressGw
			vOpts := append(opts,
				db.WithValidateField("site_type"),
				db.WithValidateField("ingress_egress_gw"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GlobalSpecType_VoltstackCluster:
		if fv, exists := v.FldValidators["site_type.voltstack_cluster"]; exists {
			val := m.GetSiteType().(*GlobalSpecType_VoltstackCluster).VoltstackCluster
			vOpts := append(opts,
				db.WithValidateField("site_type"),
				db.WithValidateField("voltstack_cluster"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["ssh_key"]; exists {

		vOpts := append(opts, db.WithValidateField("ssh_key"))
		if err := fv(ctx, m.GetSshKey(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["sw"]; exists {

		vOpts := append(opts, db.WithValidateField("sw"))
		if err := fv(ctx, m.GetSw(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["tf_params"]; exists {

		vOpts := append(opts, db.WithValidateField("tf_params"))
		if err := fv(ctx, m.GetTfParams(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["view_internal"]; exists {

		vOpts := append(opts, db.WithValidateField("view_internal"))
		if err := fv(ctx, m.GetViewInternal(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["vip_params_per_az"]; exists {
		vOpts := append(opts, db.WithValidateField("vip_params_per_az"))
		if err := fv(ctx, m.GetVipParamsPerAz(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["vnet"]; exists {

		vOpts := append(opts, db.WithValidateField("vnet"))
		if err := fv(ctx, m.GetVnet(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["volterra_software_version"]; exists {

		vOpts := append(opts, db.WithValidateField("volterra_software_version"))
		if err := fv(ctx, m.GetVolterraSoftwareVersion(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultGlobalSpecTypeValidator = func() *ValidateGlobalSpecType {
	v := &ValidateGlobalSpecType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhDeployment := v.DeploymentValidationRuleHandler
	rulesDeployment := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhDeployment(rulesDeployment)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GlobalSpecType.deployment: %s", err)
		panic(errMsg)
	}
	v.FldValidators["deployment"] = vFn

	vrhLogsReceiverChoice := v.LogsReceiverChoiceValidationRuleHandler
	rulesLogsReceiverChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhLogsReceiverChoice(rulesLogsReceiverChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GlobalSpecType.logs_receiver_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["logs_receiver_choice"] = vFn

	vrhSiteType := v.SiteTypeValidationRuleHandler
	rulesSiteType := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhSiteType(rulesSiteType)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GlobalSpecType.site_type: %s", err)
		panic(errMsg)
	}
	v.FldValidators["site_type"] = vFn

	vrhResourceGroup := v.ResourceGroupValidationRuleHandler
	rulesResourceGroup := map[string]string{
		"ves.io.schema.rules.message.required": "true",
		"ves.io.schema.rules.string.max_len":   "64",
		"ves.io.schema.rules.string.min_len":   "1",
	}
	vFn, err = vrhResourceGroup(rulesResourceGroup)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GlobalSpecType.resource_group: %s", err)
		panic(errMsg)
	}
	v.FldValidators["resource_group"] = vFn

	vrhAzureRegion := v.AzureRegionValidationRuleHandler
	rulesAzureRegion := map[string]string{
		"ves.io.schema.rules.message.required": "true",
		"ves.io.schema.rules.string.in":        "[\"southeastasia\",\"centralus\",\"eastus\",\"eastus2\",\"southcentralus\",\"northeurope\",\"westeurope\",\"japaneast\",\"australiaeast\",\"canadacentral\",\"uksouth\",\"westus2\",\"francecentral\",\"southafricanorth\"]",
	}
	vFn, err = vrhAzureRegion(rulesAzureRegion)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GlobalSpecType.azure_region: %s", err)
		panic(errMsg)
	}
	v.FldValidators["azure_region"] = vFn

	vrhVnet := v.VnetValidationRuleHandler
	rulesVnet := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhVnet(rulesVnet)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GlobalSpecType.vnet: %s", err)
		panic(errMsg)
	}
	v.FldValidators["vnet"] = vFn

	vrhMachineType := v.MachineTypeValidationRuleHandler
	rulesMachineType := map[string]string{
		"ves.io.schema.rules.string.max_len": "64",
	}
	vFn, err = vrhMachineType(rulesMachineType)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GlobalSpecType.machine_type: %s", err)
		panic(errMsg)
	}
	v.FldValidators["machine_type"] = vFn

	vrhVolterraSoftwareVersion := v.VolterraSoftwareVersionValidationRuleHandler
	rulesVolterraSoftwareVersion := map[string]string{
		"ves.io.schema.rules.string.max_len": "64",
	}
	vFn, err = vrhVolterraSoftwareVersion(rulesVolterraSoftwareVersion)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GlobalSpecType.volterra_software_version: %s", err)
		panic(errMsg)
	}
	v.FldValidators["volterra_software_version"] = vFn

	vrhOperatingSystemVersion := v.OperatingSystemVersionValidationRuleHandler
	rulesOperatingSystemVersion := map[string]string{
		"ves.io.schema.rules.string.max_len": "64",
	}
	vFn, err = vrhOperatingSystemVersion(rulesOperatingSystemVersion)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GlobalSpecType.operating_system_version: %s", err)
		panic(errMsg)
	}
	v.FldValidators["operating_system_version"] = vFn

	vrhSshKey := v.SshKeyValidationRuleHandler
	rulesSshKey := map[string]string{
		"ves.io.schema.rules.string.max_len": "8192",
	}
	vFn, err = vrhSshKey(rulesSshKey)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GlobalSpecType.ssh_key: %s", err)
		panic(errMsg)
	}
	v.FldValidators["ssh_key"] = vFn

	vrhNodesPerAz := v.NodesPerAzValidationRuleHandler
	rulesNodesPerAz := map[string]string{
		"ves.io.schema.rules.uint32.gte": "0",
		"ves.io.schema.rules.uint32.lte": "21",
	}
	vFn, err = vrhNodesPerAz(rulesNodesPerAz)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GlobalSpecType.nodes_per_az: %s", err)
		panic(errMsg)
	}
	v.FldValidators["nodes_per_az"] = vFn

	vrhDiskSize := v.DiskSizeValidationRuleHandler
	rulesDiskSize := map[string]string{
		"ves.io.schema.rules.uint32.lte": "4095",
	}
	vFn, err = vrhDiskSize(rulesDiskSize)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GlobalSpecType.disk_size: %s", err)
		panic(errMsg)
	}
	v.FldValidators["disk_size"] = vFn

	vrhAddress := v.AddressValidationRuleHandler
	rulesAddress := map[string]string{
		"ves.io.schema.rules.string.max_len": "256",
	}
	vFn, err = vrhAddress(rulesAddress)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GlobalSpecType.address: %s", err)
		panic(errMsg)
	}
	v.FldValidators["address"] = vFn

	vrhVipParamsPerAz := v.VipParamsPerAzValidationRuleHandler
	rulesVipParamsPerAz := map[string]string{
		"ves.io.schema.rules.repeated.num_items": "0,1,3",
		"ves.io.schema.rules.repeated.unique":    "true",
	}
	vFn, err = vrhVipParamsPerAz(rulesVipParamsPerAz)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GlobalSpecType.vip_params_per_az: %s", err)
		panic(errMsg)
	}
	v.FldValidators["vip_params_per_az"] = vFn

	v.FldValidators["deployment.azure_cred"] = ves_io_schema_views.ObjectRefTypeValidator().Validate

	v.FldValidators["logs_receiver_choice.log_receiver"] = ves_io_schema_views.ObjectRefTypeValidator().Validate

	v.FldValidators["site_type.ingress_gw"] = AzureVnetIngressGwTypeValidator().Validate
	v.FldValidators["site_type.ingress_egress_gw"] = AzureVnetIngressEgressGwTypeValidator().Validate
	v.FldValidators["site_type.voltstack_cluster"] = AzureVnetVoltstackClusterTypeValidator().Validate

	v.FldValidators["coordinates"] = ves_io_schema_site.CoordinatesValidator().Validate

	v.FldValidators["sw"] = ves_io_schema_views.VolterraSoftwareTypeValidator().Validate

	v.FldValidators["os"] = ves_io_schema_views.OperatingSystemTypeValidator().Validate

	v.FldValidators["tf_params"] = ves_io_schema_views.ObjectRefTypeValidator().Validate

	v.FldValidators["view_internal"] = ves_io_schema_views.ObjectRefTypeValidator().Validate

	return v
}()

func GlobalSpecTypeValidator() db.Validator {
	return DefaultGlobalSpecTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *ReplaceSpecType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *ReplaceSpecType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

// Redact squashes sensitive info in m (in-place)
func (m *ReplaceSpecType) Redact(ctx context.Context) error {
	// clear fields with confidential option set (at message or field level)
	if m == nil {
		return nil
	}

	if err := m.GetIngressEgressGw().Redact(ctx); err != nil {
		return errors.Wrapf(err, "Redacting ReplaceSpecType.ingress_egress_gw")
	}

	if err := m.GetVoltstackCluster().Redact(ctx); err != nil {
		return errors.Wrapf(err, "Redacting ReplaceSpecType.voltstack_cluster")
	}

	return nil
}

func (m *ReplaceSpecType) DeepCopy() *ReplaceSpecType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &ReplaceSpecType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *ReplaceSpecType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *ReplaceSpecType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return ReplaceSpecTypeValidator().Validate(ctx, m, opts...)
}

func (m *ReplaceSpecType) GetDRefInfo() ([]db.DRefInfo, error) {
	var drInfos []db.DRefInfo
	if fdrInfos, err := m.GetLogsReceiverChoiceDRefInfo(); err != nil {
		return nil, err
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetSiteTypeDRefInfo(); err != nil {
		return nil, err
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	return drInfos, nil
}

func (m *ReplaceSpecType) GetLogsReceiverChoiceDRefInfo() ([]db.DRefInfo, error) {
	var odrInfos []db.DRefInfo

	switch m.GetLogsReceiverChoice().(type) {
	case *ReplaceSpecType_LogsStreamingDisabled:

	case *ReplaceSpecType_LogReceiver:

		vref := m.GetLogReceiver()
		if vref == nil {
			return nil, nil
		}
		vdRef := db.NewDirectRefForView(vref)
		vdRef.SetKind("log_receiver.Object")
		odri := db.DRefInfo{
			RefdType:   "log_receiver.Object",
			RefdTenant: vref.Tenant,
			RefdNS:     vref.Namespace,
			RefdName:   vref.Name,
			DRField:    "log_receiver",
			Ref:        vdRef,
		}
		odrInfos = append(odrInfos, odri)

	}

	return odrInfos, nil
}

// GetLogsReceiverChoiceDBEntries returns the db.Entry corresponding to the ObjRefType from the default Table
func (m *ReplaceSpecType) GetLogsReceiverChoiceDBEntries(ctx context.Context, d db.Interface) ([]db.Entry, error) {
	var entries []db.Entry

	switch m.GetLogsReceiverChoice().(type) {
	case *ReplaceSpecType_LogsStreamingDisabled:

	case *ReplaceSpecType_LogReceiver:
		refdType, err := d.TypeForEntryKind("", "", "log_receiver.Object")
		if err != nil {
			return nil, errors.Wrap(err, "Cannot find type for kind: log_receiver")
		}

		vref := m.GetLogReceiver()
		if vref == nil {
			return nil, nil
		}
		ref := &ves_io_schema.ObjectRefType{
			Kind:      "log_receiver.Object",
			Tenant:    vref.Tenant,
			Namespace: vref.Namespace,
			Name:      vref.Name,
		}
		refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
		if err != nil {
			return nil, errors.Wrap(err, "Getting referred entry")
		}
		if refdEnt != nil {
			entries = append(entries, refdEnt)
		}

	}

	return entries, nil
}

// GetDRefInfo for the field's type
func (m *ReplaceSpecType) GetSiteTypeDRefInfo() ([]db.DRefInfo, error) {
	var (
		drInfos, driSet []db.DRefInfo
		err             error
	)
	_ = driSet
	if m.GetSiteType() == nil {
		return []db.DRefInfo{}, nil
	}

	var odrInfos []db.DRefInfo

	switch m.GetSiteType().(type) {
	case *ReplaceSpecType_IngressGw:

	case *ReplaceSpecType_IngressEgressGw:
		odrInfos, err = m.GetIngressEgressGw().GetDRefInfo()
		if err != nil {
			return nil, err
		}
		for _, odri := range odrInfos {
			odri.DRField = "ingress_egress_gw." + odri.DRField
			drInfos = append(drInfos, odri)
		}

	case *ReplaceSpecType_VoltstackCluster:
		odrInfos, err = m.GetVoltstackCluster().GetDRefInfo()
		if err != nil {
			return nil, err
		}
		for _, odri := range odrInfos {
			odri.DRField = "voltstack_cluster." + odri.DRField
			drInfos = append(drInfos, odri)
		}

	}

	return drInfos, err
}

type ValidateReplaceSpecType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateReplaceSpecType) LogsReceiverChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for logs_receiver_choice")
	}
	return validatorFn, nil
}

func (v *ValidateReplaceSpecType) SiteTypeValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for site_type")
	}
	return validatorFn, nil
}

func (v *ValidateReplaceSpecType) NodesPerAzValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewUint32ValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for nodes_per_az")
	}

	return validatorFn, nil
}

func (v *ValidateReplaceSpecType) AddressValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for address")
	}

	return validatorFn, nil
}

func (v *ValidateReplaceSpecType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*ReplaceSpecType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *ReplaceSpecType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["address"]; exists {

		vOpts := append(opts, db.WithValidateField("address"))
		if err := fv(ctx, m.GetAddress(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["coordinates"]; exists {

		vOpts := append(opts, db.WithValidateField("coordinates"))
		if err := fv(ctx, m.GetCoordinates(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["logs_receiver_choice"]; exists {
		val := m.GetLogsReceiverChoice()
		vOpts := append(opts,
			db.WithValidateField("logs_receiver_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetLogsReceiverChoice().(type) {
	case *ReplaceSpecType_LogsStreamingDisabled:
		if fv, exists := v.FldValidators["logs_receiver_choice.logs_streaming_disabled"]; exists {
			val := m.GetLogsReceiverChoice().(*ReplaceSpecType_LogsStreamingDisabled).LogsStreamingDisabled
			vOpts := append(opts,
				db.WithValidateField("logs_receiver_choice"),
				db.WithValidateField("logs_streaming_disabled"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ReplaceSpecType_LogReceiver:
		if fv, exists := v.FldValidators["logs_receiver_choice.log_receiver"]; exists {
			val := m.GetLogsReceiverChoice().(*ReplaceSpecType_LogReceiver).LogReceiver
			vOpts := append(opts,
				db.WithValidateField("logs_receiver_choice"),
				db.WithValidateField("log_receiver"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["nodes_per_az"]; exists {

		vOpts := append(opts, db.WithValidateField("nodes_per_az"))
		if err := fv(ctx, m.GetNodesPerAz(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["site_type"]; exists {
		val := m.GetSiteType()
		vOpts := append(opts,
			db.WithValidateField("site_type"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetSiteType().(type) {
	case *ReplaceSpecType_IngressGw:
		if fv, exists := v.FldValidators["site_type.ingress_gw"]; exists {
			val := m.GetSiteType().(*ReplaceSpecType_IngressGw).IngressGw
			vOpts := append(opts,
				db.WithValidateField("site_type"),
				db.WithValidateField("ingress_gw"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ReplaceSpecType_IngressEgressGw:
		if fv, exists := v.FldValidators["site_type.ingress_egress_gw"]; exists {
			val := m.GetSiteType().(*ReplaceSpecType_IngressEgressGw).IngressEgressGw
			vOpts := append(opts,
				db.WithValidateField("site_type"),
				db.WithValidateField("ingress_egress_gw"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ReplaceSpecType_VoltstackCluster:
		if fv, exists := v.FldValidators["site_type.voltstack_cluster"]; exists {
			val := m.GetSiteType().(*ReplaceSpecType_VoltstackCluster).VoltstackCluster
			vOpts := append(opts,
				db.WithValidateField("site_type"),
				db.WithValidateField("voltstack_cluster"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultReplaceSpecTypeValidator = func() *ValidateReplaceSpecType {
	v := &ValidateReplaceSpecType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhLogsReceiverChoice := v.LogsReceiverChoiceValidationRuleHandler
	rulesLogsReceiverChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhLogsReceiverChoice(rulesLogsReceiverChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ReplaceSpecType.logs_receiver_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["logs_receiver_choice"] = vFn

	vrhSiteType := v.SiteTypeValidationRuleHandler
	rulesSiteType := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhSiteType(rulesSiteType)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ReplaceSpecType.site_type: %s", err)
		panic(errMsg)
	}
	v.FldValidators["site_type"] = vFn

	vrhNodesPerAz := v.NodesPerAzValidationRuleHandler
	rulesNodesPerAz := map[string]string{
		"ves.io.schema.rules.uint32.gte": "0",
		"ves.io.schema.rules.uint32.lte": "21",
	}
	vFn, err = vrhNodesPerAz(rulesNodesPerAz)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ReplaceSpecType.nodes_per_az: %s", err)
		panic(errMsg)
	}
	v.FldValidators["nodes_per_az"] = vFn

	vrhAddress := v.AddressValidationRuleHandler
	rulesAddress := map[string]string{
		"ves.io.schema.rules.string.max_len": "256",
	}
	vFn, err = vrhAddress(rulesAddress)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ReplaceSpecType.address: %s", err)
		panic(errMsg)
	}
	v.FldValidators["address"] = vFn

	v.FldValidators["logs_receiver_choice.log_receiver"] = ves_io_schema_views.ObjectRefTypeValidator().Validate

	v.FldValidators["site_type.ingress_egress_gw"] = AzureVnetIngressEgressGwReplaceTypeValidator().Validate
	v.FldValidators["site_type.voltstack_cluster"] = AzureVnetVoltstackClusterReplaceTypeValidator().Validate

	v.FldValidators["coordinates"] = ves_io_schema_site.CoordinatesValidator().Validate

	return v
}()

func ReplaceSpecTypeValidator() db.Validator {
	return DefaultReplaceSpecTypeValidator
}

// create setters in AzureVnetIngressEgressGwReplaceType from AzureVnetIngressEgressGwType for oneof fields
func (r *AzureVnetIngressEgressGwReplaceType) SetForwardProxyChoiceToAzureVnetIngressEgressGwType(o *AzureVnetIngressEgressGwType) error {
	switch of := r.ForwardProxyChoice.(type) {
	case nil:
		o.ForwardProxyChoice = nil

	case *AzureVnetIngressEgressGwReplaceType_ActiveForwardProxyPolicies:
		o.ForwardProxyChoice = &AzureVnetIngressEgressGwType_ActiveForwardProxyPolicies{ActiveForwardProxyPolicies: of.ActiveForwardProxyPolicies}

	case *AzureVnetIngressEgressGwReplaceType_ForwardProxyAllowAll:
		o.ForwardProxyChoice = &AzureVnetIngressEgressGwType_ForwardProxyAllowAll{ForwardProxyAllowAll: of.ForwardProxyAllowAll}

	case *AzureVnetIngressEgressGwReplaceType_NoForwardProxy:
		o.ForwardProxyChoice = &AzureVnetIngressEgressGwType_NoForwardProxy{NoForwardProxy: of.NoForwardProxy}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *AzureVnetIngressEgressGwReplaceType) GetForwardProxyChoiceFromAzureVnetIngressEgressGwType(o *AzureVnetIngressEgressGwType) error {
	switch of := o.ForwardProxyChoice.(type) {
	case nil:
		r.ForwardProxyChoice = nil

	case *AzureVnetIngressEgressGwType_ActiveForwardProxyPolicies:
		r.ForwardProxyChoice = &AzureVnetIngressEgressGwReplaceType_ActiveForwardProxyPolicies{ActiveForwardProxyPolicies: of.ActiveForwardProxyPolicies}

	case *AzureVnetIngressEgressGwType_ForwardProxyAllowAll:
		r.ForwardProxyChoice = &AzureVnetIngressEgressGwReplaceType_ForwardProxyAllowAll{ForwardProxyAllowAll: of.ForwardProxyAllowAll}

	case *AzureVnetIngressEgressGwType_NoForwardProxy:
		r.ForwardProxyChoice = &AzureVnetIngressEgressGwReplaceType_NoForwardProxy{NoForwardProxy: of.NoForwardProxy}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

// create setters in AzureVnetIngressEgressGwReplaceType from AzureVnetIngressEgressGwType for oneof fields
func (r *AzureVnetIngressEgressGwReplaceType) SetGlobalNetworkChoiceToAzureVnetIngressEgressGwType(o *AzureVnetIngressEgressGwType) error {
	switch of := r.GlobalNetworkChoice.(type) {
	case nil:
		o.GlobalNetworkChoice = nil

	case *AzureVnetIngressEgressGwReplaceType_GlobalNetworkList:
		o.GlobalNetworkChoice = &AzureVnetIngressEgressGwType_GlobalNetworkList{GlobalNetworkList: of.GlobalNetworkList}

	case *AzureVnetIngressEgressGwReplaceType_NoGlobalNetwork:
		o.GlobalNetworkChoice = &AzureVnetIngressEgressGwType_NoGlobalNetwork{NoGlobalNetwork: of.NoGlobalNetwork}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *AzureVnetIngressEgressGwReplaceType) GetGlobalNetworkChoiceFromAzureVnetIngressEgressGwType(o *AzureVnetIngressEgressGwType) error {
	switch of := o.GlobalNetworkChoice.(type) {
	case nil:
		r.GlobalNetworkChoice = nil

	case *AzureVnetIngressEgressGwType_GlobalNetworkList:
		r.GlobalNetworkChoice = &AzureVnetIngressEgressGwReplaceType_GlobalNetworkList{GlobalNetworkList: of.GlobalNetworkList}

	case *AzureVnetIngressEgressGwType_NoGlobalNetwork:
		r.GlobalNetworkChoice = &AzureVnetIngressEgressGwReplaceType_NoGlobalNetwork{NoGlobalNetwork: of.NoGlobalNetwork}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

// create setters in AzureVnetIngressEgressGwReplaceType from AzureVnetIngressEgressGwType for oneof fields
func (r *AzureVnetIngressEgressGwReplaceType) SetInsideStaticRouteChoiceToAzureVnetIngressEgressGwType(o *AzureVnetIngressEgressGwType) error {
	switch of := r.InsideStaticRouteChoice.(type) {
	case nil:
		o.InsideStaticRouteChoice = nil

	case *AzureVnetIngressEgressGwReplaceType_InsideStaticRoutes:
		o.InsideStaticRouteChoice = &AzureVnetIngressEgressGwType_InsideStaticRoutes{InsideStaticRoutes: of.InsideStaticRoutes}

	case *AzureVnetIngressEgressGwReplaceType_NoInsideStaticRoutes:
		o.InsideStaticRouteChoice = &AzureVnetIngressEgressGwType_NoInsideStaticRoutes{NoInsideStaticRoutes: of.NoInsideStaticRoutes}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *AzureVnetIngressEgressGwReplaceType) GetInsideStaticRouteChoiceFromAzureVnetIngressEgressGwType(o *AzureVnetIngressEgressGwType) error {
	switch of := o.InsideStaticRouteChoice.(type) {
	case nil:
		r.InsideStaticRouteChoice = nil

	case *AzureVnetIngressEgressGwType_InsideStaticRoutes:
		r.InsideStaticRouteChoice = &AzureVnetIngressEgressGwReplaceType_InsideStaticRoutes{InsideStaticRoutes: of.InsideStaticRoutes}

	case *AzureVnetIngressEgressGwType_NoInsideStaticRoutes:
		r.InsideStaticRouteChoice = &AzureVnetIngressEgressGwReplaceType_NoInsideStaticRoutes{NoInsideStaticRoutes: of.NoInsideStaticRoutes}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

// create setters in AzureVnetIngressEgressGwReplaceType from AzureVnetIngressEgressGwType for oneof fields
func (r *AzureVnetIngressEgressGwReplaceType) SetNetworkPolicyChoiceToAzureVnetIngressEgressGwType(o *AzureVnetIngressEgressGwType) error {
	switch of := r.NetworkPolicyChoice.(type) {
	case nil:
		o.NetworkPolicyChoice = nil

	case *AzureVnetIngressEgressGwReplaceType_ActiveNetworkPolicies:
		o.NetworkPolicyChoice = &AzureVnetIngressEgressGwType_ActiveNetworkPolicies{ActiveNetworkPolicies: of.ActiveNetworkPolicies}

	case *AzureVnetIngressEgressGwReplaceType_NoNetworkPolicy:
		o.NetworkPolicyChoice = &AzureVnetIngressEgressGwType_NoNetworkPolicy{NoNetworkPolicy: of.NoNetworkPolicy}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *AzureVnetIngressEgressGwReplaceType) GetNetworkPolicyChoiceFromAzureVnetIngressEgressGwType(o *AzureVnetIngressEgressGwType) error {
	switch of := o.NetworkPolicyChoice.(type) {
	case nil:
		r.NetworkPolicyChoice = nil

	case *AzureVnetIngressEgressGwType_ActiveNetworkPolicies:
		r.NetworkPolicyChoice = &AzureVnetIngressEgressGwReplaceType_ActiveNetworkPolicies{ActiveNetworkPolicies: of.ActiveNetworkPolicies}

	case *AzureVnetIngressEgressGwType_NoNetworkPolicy:
		r.NetworkPolicyChoice = &AzureVnetIngressEgressGwReplaceType_NoNetworkPolicy{NoNetworkPolicy: of.NoNetworkPolicy}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

// create setters in AzureVnetIngressEgressGwReplaceType from AzureVnetIngressEgressGwType for oneof fields
func (r *AzureVnetIngressEgressGwReplaceType) SetOutsideStaticRouteChoiceToAzureVnetIngressEgressGwType(o *AzureVnetIngressEgressGwType) error {
	switch of := r.OutsideStaticRouteChoice.(type) {
	case nil:
		o.OutsideStaticRouteChoice = nil

	case *AzureVnetIngressEgressGwReplaceType_NoOutsideStaticRoutes:
		o.OutsideStaticRouteChoice = &AzureVnetIngressEgressGwType_NoOutsideStaticRoutes{NoOutsideStaticRoutes: of.NoOutsideStaticRoutes}

	case *AzureVnetIngressEgressGwReplaceType_OutsideStaticRoutes:
		o.OutsideStaticRouteChoice = &AzureVnetIngressEgressGwType_OutsideStaticRoutes{OutsideStaticRoutes: of.OutsideStaticRoutes}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *AzureVnetIngressEgressGwReplaceType) GetOutsideStaticRouteChoiceFromAzureVnetIngressEgressGwType(o *AzureVnetIngressEgressGwType) error {
	switch of := o.OutsideStaticRouteChoice.(type) {
	case nil:
		r.OutsideStaticRouteChoice = nil

	case *AzureVnetIngressEgressGwType_NoOutsideStaticRoutes:
		r.OutsideStaticRouteChoice = &AzureVnetIngressEgressGwReplaceType_NoOutsideStaticRoutes{NoOutsideStaticRoutes: of.NoOutsideStaticRoutes}

	case *AzureVnetIngressEgressGwType_OutsideStaticRoutes:
		r.OutsideStaticRouteChoice = &AzureVnetIngressEgressGwReplaceType_OutsideStaticRoutes{OutsideStaticRoutes: of.OutsideStaticRoutes}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (m *AzureVnetIngressEgressGwReplaceType) FromAzureVnetIngressEgressGwType(f *AzureVnetIngressEgressGwType) {
	if f == nil {
		return
	}
	m.GetForwardProxyChoiceFromAzureVnetIngressEgressGwType(f)
	m.GetGlobalNetworkChoiceFromAzureVnetIngressEgressGwType(f)
	m.GetInsideStaticRouteChoiceFromAzureVnetIngressEgressGwType(f)
	m.GetNetworkPolicyChoiceFromAzureVnetIngressEgressGwType(f)
	m.GetOutsideStaticRouteChoiceFromAzureVnetIngressEgressGwType(f)
}

func (m *AzureVnetIngressEgressGwReplaceType) ToAzureVnetIngressEgressGwType(f *AzureVnetIngressEgressGwType) {
	m1 := m.DeepCopy()
	_ = m1
	if f == nil {
		return
	}
	m1.SetForwardProxyChoiceToAzureVnetIngressEgressGwType(f)
	m1.SetGlobalNetworkChoiceToAzureVnetIngressEgressGwType(f)
	m1.SetInsideStaticRouteChoiceToAzureVnetIngressEgressGwType(f)
	m1.SetNetworkPolicyChoiceToAzureVnetIngressEgressGwType(f)
	m1.SetOutsideStaticRouteChoiceToAzureVnetIngressEgressGwType(f)
}

func (m *AzureVnetIngressGwReplaceType) FromAzureVnetIngressGwType(f *AzureVnetIngressGwType) {
	if f == nil {
		return
	}
}

func (m *AzureVnetIngressGwReplaceType) ToAzureVnetIngressGwType(f *AzureVnetIngressGwType) {
	m1 := m.DeepCopy()
	_ = m1
	if f == nil {
		return
	}
}

// create setters in AzureVnetVoltstackClusterReplaceType from AzureVnetVoltstackClusterType for oneof fields
func (r *AzureVnetVoltstackClusterReplaceType) SetForwardProxyChoiceToAzureVnetVoltstackClusterType(o *AzureVnetVoltstackClusterType) error {
	switch of := r.ForwardProxyChoice.(type) {
	case nil:
		o.ForwardProxyChoice = nil

	case *AzureVnetVoltstackClusterReplaceType_ActiveForwardProxyPolicies:
		o.ForwardProxyChoice = &AzureVnetVoltstackClusterType_ActiveForwardProxyPolicies{ActiveForwardProxyPolicies: of.ActiveForwardProxyPolicies}

	case *AzureVnetVoltstackClusterReplaceType_ForwardProxyAllowAll:
		o.ForwardProxyChoice = &AzureVnetVoltstackClusterType_ForwardProxyAllowAll{ForwardProxyAllowAll: of.ForwardProxyAllowAll}

	case *AzureVnetVoltstackClusterReplaceType_NoForwardProxy:
		o.ForwardProxyChoice = &AzureVnetVoltstackClusterType_NoForwardProxy{NoForwardProxy: of.NoForwardProxy}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *AzureVnetVoltstackClusterReplaceType) GetForwardProxyChoiceFromAzureVnetVoltstackClusterType(o *AzureVnetVoltstackClusterType) error {
	switch of := o.ForwardProxyChoice.(type) {
	case nil:
		r.ForwardProxyChoice = nil

	case *AzureVnetVoltstackClusterType_ActiveForwardProxyPolicies:
		r.ForwardProxyChoice = &AzureVnetVoltstackClusterReplaceType_ActiveForwardProxyPolicies{ActiveForwardProxyPolicies: of.ActiveForwardProxyPolicies}

	case *AzureVnetVoltstackClusterType_ForwardProxyAllowAll:
		r.ForwardProxyChoice = &AzureVnetVoltstackClusterReplaceType_ForwardProxyAllowAll{ForwardProxyAllowAll: of.ForwardProxyAllowAll}

	case *AzureVnetVoltstackClusterType_NoForwardProxy:
		r.ForwardProxyChoice = &AzureVnetVoltstackClusterReplaceType_NoForwardProxy{NoForwardProxy: of.NoForwardProxy}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

// create setters in AzureVnetVoltstackClusterReplaceType from AzureVnetVoltstackClusterType for oneof fields
func (r *AzureVnetVoltstackClusterReplaceType) SetGlobalNetworkChoiceToAzureVnetVoltstackClusterType(o *AzureVnetVoltstackClusterType) error {
	switch of := r.GlobalNetworkChoice.(type) {
	case nil:
		o.GlobalNetworkChoice = nil

	case *AzureVnetVoltstackClusterReplaceType_GlobalNetworkList:
		o.GlobalNetworkChoice = &AzureVnetVoltstackClusterType_GlobalNetworkList{GlobalNetworkList: of.GlobalNetworkList}

	case *AzureVnetVoltstackClusterReplaceType_NoGlobalNetwork:
		o.GlobalNetworkChoice = &AzureVnetVoltstackClusterType_NoGlobalNetwork{NoGlobalNetwork: of.NoGlobalNetwork}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *AzureVnetVoltstackClusterReplaceType) GetGlobalNetworkChoiceFromAzureVnetVoltstackClusterType(o *AzureVnetVoltstackClusterType) error {
	switch of := o.GlobalNetworkChoice.(type) {
	case nil:
		r.GlobalNetworkChoice = nil

	case *AzureVnetVoltstackClusterType_GlobalNetworkList:
		r.GlobalNetworkChoice = &AzureVnetVoltstackClusterReplaceType_GlobalNetworkList{GlobalNetworkList: of.GlobalNetworkList}

	case *AzureVnetVoltstackClusterType_NoGlobalNetwork:
		r.GlobalNetworkChoice = &AzureVnetVoltstackClusterReplaceType_NoGlobalNetwork{NoGlobalNetwork: of.NoGlobalNetwork}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

// create setters in AzureVnetVoltstackClusterReplaceType from AzureVnetVoltstackClusterType for oneof fields
func (r *AzureVnetVoltstackClusterReplaceType) SetNetworkPolicyChoiceToAzureVnetVoltstackClusterType(o *AzureVnetVoltstackClusterType) error {
	switch of := r.NetworkPolicyChoice.(type) {
	case nil:
		o.NetworkPolicyChoice = nil

	case *AzureVnetVoltstackClusterReplaceType_ActiveNetworkPolicies:
		o.NetworkPolicyChoice = &AzureVnetVoltstackClusterType_ActiveNetworkPolicies{ActiveNetworkPolicies: of.ActiveNetworkPolicies}

	case *AzureVnetVoltstackClusterReplaceType_NoNetworkPolicy:
		o.NetworkPolicyChoice = &AzureVnetVoltstackClusterType_NoNetworkPolicy{NoNetworkPolicy: of.NoNetworkPolicy}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *AzureVnetVoltstackClusterReplaceType) GetNetworkPolicyChoiceFromAzureVnetVoltstackClusterType(o *AzureVnetVoltstackClusterType) error {
	switch of := o.NetworkPolicyChoice.(type) {
	case nil:
		r.NetworkPolicyChoice = nil

	case *AzureVnetVoltstackClusterType_ActiveNetworkPolicies:
		r.NetworkPolicyChoice = &AzureVnetVoltstackClusterReplaceType_ActiveNetworkPolicies{ActiveNetworkPolicies: of.ActiveNetworkPolicies}

	case *AzureVnetVoltstackClusterType_NoNetworkPolicy:
		r.NetworkPolicyChoice = &AzureVnetVoltstackClusterReplaceType_NoNetworkPolicy{NoNetworkPolicy: of.NoNetworkPolicy}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

// create setters in AzureVnetVoltstackClusterReplaceType from AzureVnetVoltstackClusterType for oneof fields
func (r *AzureVnetVoltstackClusterReplaceType) SetOutsideStaticRouteChoiceToAzureVnetVoltstackClusterType(o *AzureVnetVoltstackClusterType) error {
	switch of := r.OutsideStaticRouteChoice.(type) {
	case nil:
		o.OutsideStaticRouteChoice = nil

	case *AzureVnetVoltstackClusterReplaceType_NoOutsideStaticRoutes:
		o.OutsideStaticRouteChoice = &AzureVnetVoltstackClusterType_NoOutsideStaticRoutes{NoOutsideStaticRoutes: of.NoOutsideStaticRoutes}

	case *AzureVnetVoltstackClusterReplaceType_OutsideStaticRoutes:
		o.OutsideStaticRouteChoice = &AzureVnetVoltstackClusterType_OutsideStaticRoutes{OutsideStaticRoutes: of.OutsideStaticRoutes}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *AzureVnetVoltstackClusterReplaceType) GetOutsideStaticRouteChoiceFromAzureVnetVoltstackClusterType(o *AzureVnetVoltstackClusterType) error {
	switch of := o.OutsideStaticRouteChoice.(type) {
	case nil:
		r.OutsideStaticRouteChoice = nil

	case *AzureVnetVoltstackClusterType_NoOutsideStaticRoutes:
		r.OutsideStaticRouteChoice = &AzureVnetVoltstackClusterReplaceType_NoOutsideStaticRoutes{NoOutsideStaticRoutes: of.NoOutsideStaticRoutes}

	case *AzureVnetVoltstackClusterType_OutsideStaticRoutes:
		r.OutsideStaticRouteChoice = &AzureVnetVoltstackClusterReplaceType_OutsideStaticRoutes{OutsideStaticRoutes: of.OutsideStaticRoutes}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (m *AzureVnetVoltstackClusterReplaceType) FromAzureVnetVoltstackClusterType(f *AzureVnetVoltstackClusterType) {
	if f == nil {
		return
	}
	m.GetForwardProxyChoiceFromAzureVnetVoltstackClusterType(f)
	m.GetGlobalNetworkChoiceFromAzureVnetVoltstackClusterType(f)
	m.GetNetworkPolicyChoiceFromAzureVnetVoltstackClusterType(f)
	m.GetOutsideStaticRouteChoiceFromAzureVnetVoltstackClusterType(f)
}

func (m *AzureVnetVoltstackClusterReplaceType) ToAzureVnetVoltstackClusterType(f *AzureVnetVoltstackClusterType) {
	m1 := m.DeepCopy()
	_ = m1
	if f == nil {
		return
	}
	m1.SetForwardProxyChoiceToAzureVnetVoltstackClusterType(f)
	m1.SetGlobalNetworkChoiceToAzureVnetVoltstackClusterType(f)
	m1.SetNetworkPolicyChoiceToAzureVnetVoltstackClusterType(f)
	m1.SetOutsideStaticRouteChoiceToAzureVnetVoltstackClusterType(f)
}

// create setters in CreateSpecType from GlobalSpecType for oneof fields
func (r *CreateSpecType) SetDeploymentToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.Deployment.(type) {
	case nil:
		o.Deployment = nil

	case *CreateSpecType_Assisted:
		o.Deployment = &GlobalSpecType_Assisted{Assisted: of.Assisted}

	case *CreateSpecType_AzureCred:
		o.Deployment = &GlobalSpecType_AzureCred{AzureCred: of.AzureCred}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *CreateSpecType) GetDeploymentFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.Deployment.(type) {
	case nil:
		r.Deployment = nil

	case *GlobalSpecType_Assisted:
		r.Deployment = &CreateSpecType_Assisted{Assisted: of.Assisted}

	case *GlobalSpecType_AzureCred:
		r.Deployment = &CreateSpecType_AzureCred{AzureCred: of.AzureCred}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

// create setters in CreateSpecType from GlobalSpecType for oneof fields
func (r *CreateSpecType) SetLogsReceiverChoiceToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.LogsReceiverChoice.(type) {
	case nil:
		o.LogsReceiverChoice = nil

	case *CreateSpecType_LogReceiver:
		o.LogsReceiverChoice = &GlobalSpecType_LogReceiver{LogReceiver: of.LogReceiver}

	case *CreateSpecType_LogsStreamingDisabled:
		o.LogsReceiverChoice = &GlobalSpecType_LogsStreamingDisabled{LogsStreamingDisabled: of.LogsStreamingDisabled}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *CreateSpecType) GetLogsReceiverChoiceFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.LogsReceiverChoice.(type) {
	case nil:
		r.LogsReceiverChoice = nil

	case *GlobalSpecType_LogReceiver:
		r.LogsReceiverChoice = &CreateSpecType_LogReceiver{LogReceiver: of.LogReceiver}

	case *GlobalSpecType_LogsStreamingDisabled:
		r.LogsReceiverChoice = &CreateSpecType_LogsStreamingDisabled{LogsStreamingDisabled: of.LogsStreamingDisabled}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

// create setters in CreateSpecType from GlobalSpecType for oneof fields
func (r *CreateSpecType) SetSiteTypeToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.SiteType.(type) {
	case nil:
		o.SiteType = nil

	case *CreateSpecType_IngressEgressGw:
		o.SiteType = &GlobalSpecType_IngressEgressGw{IngressEgressGw: of.IngressEgressGw}

	case *CreateSpecType_IngressGw:
		o.SiteType = &GlobalSpecType_IngressGw{IngressGw: of.IngressGw}

	case *CreateSpecType_VoltstackCluster:
		o.SiteType = &GlobalSpecType_VoltstackCluster{VoltstackCluster: of.VoltstackCluster}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *CreateSpecType) GetSiteTypeFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.SiteType.(type) {
	case nil:
		r.SiteType = nil

	case *GlobalSpecType_IngressEgressGw:
		r.SiteType = &CreateSpecType_IngressEgressGw{IngressEgressGw: of.IngressEgressGw}

	case *GlobalSpecType_IngressGw:
		r.SiteType = &CreateSpecType_IngressGw{IngressGw: of.IngressGw}

	case *GlobalSpecType_VoltstackCluster:
		r.SiteType = &CreateSpecType_VoltstackCluster{VoltstackCluster: of.VoltstackCluster}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (m *CreateSpecType) FromGlobalSpecType(f *GlobalSpecType) {
	if f == nil {
		return
	}
	m.Address = f.GetAddress()
	m.AzureRegion = f.GetAzureRegion()
	m.Coordinates = f.GetCoordinates()
	m.GetDeploymentFromGlobalSpecType(f)
	m.DiskSize = f.GetDiskSize()
	m.GetLogsReceiverChoiceFromGlobalSpecType(f)
	m.MachineType = f.GetMachineType()
	m.NodesPerAz = f.GetNodesPerAz()
	m.Os = f.GetOs()
	m.ResourceGroup = f.GetResourceGroup()
	m.GetSiteTypeFromGlobalSpecType(f)
	m.SshKey = f.GetSshKey()
	m.Sw = f.GetSw()
	m.Vnet = f.GetVnet()
}

func (m *CreateSpecType) ToGlobalSpecType(f *GlobalSpecType) {
	m1 := m.DeepCopy()
	_ = m1
	if f == nil {
		return
	}
	f.Address = m1.Address
	f.AzureRegion = m1.AzureRegion
	f.Coordinates = m1.Coordinates
	m1.SetDeploymentToGlobalSpecType(f)
	f.DiskSize = m1.DiskSize
	m1.SetLogsReceiverChoiceToGlobalSpecType(f)
	f.MachineType = m1.MachineType
	f.NodesPerAz = m1.NodesPerAz
	f.Os = m1.Os
	f.ResourceGroup = m1.ResourceGroup
	m1.SetSiteTypeToGlobalSpecType(f)
	f.SshKey = m1.SshKey
	f.Sw = m1.Sw
	f.Vnet = m1.Vnet
}

// create setters in GetSpecType from GlobalSpecType for oneof fields
func (r *GetSpecType) SetDeploymentToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.Deployment.(type) {
	case nil:
		o.Deployment = nil

	case *GetSpecType_Assisted:
		o.Deployment = &GlobalSpecType_Assisted{Assisted: of.Assisted}

	case *GetSpecType_AzureCred:
		o.Deployment = &GlobalSpecType_AzureCred{AzureCred: of.AzureCred}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *GetSpecType) GetDeploymentFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.Deployment.(type) {
	case nil:
		r.Deployment = nil

	case *GlobalSpecType_Assisted:
		r.Deployment = &GetSpecType_Assisted{Assisted: of.Assisted}

	case *GlobalSpecType_AzureCred:
		r.Deployment = &GetSpecType_AzureCred{AzureCred: of.AzureCred}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

// create setters in GetSpecType from GlobalSpecType for oneof fields
func (r *GetSpecType) SetLogsReceiverChoiceToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.LogsReceiverChoice.(type) {
	case nil:
		o.LogsReceiverChoice = nil

	case *GetSpecType_LogReceiver:
		o.LogsReceiverChoice = &GlobalSpecType_LogReceiver{LogReceiver: of.LogReceiver}

	case *GetSpecType_LogsStreamingDisabled:
		o.LogsReceiverChoice = &GlobalSpecType_LogsStreamingDisabled{LogsStreamingDisabled: of.LogsStreamingDisabled}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *GetSpecType) GetLogsReceiverChoiceFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.LogsReceiverChoice.(type) {
	case nil:
		r.LogsReceiverChoice = nil

	case *GlobalSpecType_LogReceiver:
		r.LogsReceiverChoice = &GetSpecType_LogReceiver{LogReceiver: of.LogReceiver}

	case *GlobalSpecType_LogsStreamingDisabled:
		r.LogsReceiverChoice = &GetSpecType_LogsStreamingDisabled{LogsStreamingDisabled: of.LogsStreamingDisabled}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

// create setters in GetSpecType from GlobalSpecType for oneof fields
func (r *GetSpecType) SetSiteTypeToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.SiteType.(type) {
	case nil:
		o.SiteType = nil

	case *GetSpecType_IngressEgressGw:
		o.SiteType = &GlobalSpecType_IngressEgressGw{IngressEgressGw: of.IngressEgressGw}

	case *GetSpecType_IngressGw:
		o.SiteType = &GlobalSpecType_IngressGw{IngressGw: of.IngressGw}

	case *GetSpecType_VoltstackCluster:
		o.SiteType = &GlobalSpecType_VoltstackCluster{VoltstackCluster: of.VoltstackCluster}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *GetSpecType) GetSiteTypeFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.SiteType.(type) {
	case nil:
		r.SiteType = nil

	case *GlobalSpecType_IngressEgressGw:
		r.SiteType = &GetSpecType_IngressEgressGw{IngressEgressGw: of.IngressEgressGw}

	case *GlobalSpecType_IngressGw:
		r.SiteType = &GetSpecType_IngressGw{IngressGw: of.IngressGw}

	case *GlobalSpecType_VoltstackCluster:
		r.SiteType = &GetSpecType_VoltstackCluster{VoltstackCluster: of.VoltstackCluster}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (m *GetSpecType) FromGlobalSpecType(f *GlobalSpecType) {
	if f == nil {
		return
	}
	m.Address = f.GetAddress()
	m.AzureRegion = f.GetAzureRegion()
	m.Coordinates = f.GetCoordinates()
	m.GetDeploymentFromGlobalSpecType(f)
	m.DiskSize = f.GetDiskSize()
	m.GetLogsReceiverChoiceFromGlobalSpecType(f)
	m.MachineType = f.GetMachineType()
	m.NodesPerAz = f.GetNodesPerAz()
	m.OperatingSystemVersion = f.GetOperatingSystemVersion()
	m.ResourceGroup = f.GetResourceGroup()

	m.GetSiteTypeFromGlobalSpecType(f)
	m.SshKey = f.GetSshKey()
	m.VipParamsPerAz = f.GetVipParamsPerAz()
	m.Vnet = f.GetVnet()
	m.VolterraSoftwareVersion = f.GetVolterraSoftwareVersion()
}

func (m *GetSpecType) ToGlobalSpecType(f *GlobalSpecType) {
	m1 := m.DeepCopy()
	_ = m1
	if f == nil {
		return
	}
	f.Address = m1.Address
	f.AzureRegion = m1.AzureRegion
	f.Coordinates = m1.Coordinates
	m1.SetDeploymentToGlobalSpecType(f)
	f.DiskSize = m1.DiskSize
	m1.SetLogsReceiverChoiceToGlobalSpecType(f)
	f.MachineType = m1.MachineType
	f.NodesPerAz = m1.NodesPerAz
	f.OperatingSystemVersion = m1.OperatingSystemVersion
	f.ResourceGroup = m1.ResourceGroup

	m1.SetSiteTypeToGlobalSpecType(f)
	f.SshKey = m1.SshKey
	f.VipParamsPerAz = m1.VipParamsPerAz
	f.Vnet = m1.Vnet
	f.VolterraSoftwareVersion = m1.VolterraSoftwareVersion
}

// create setters in ReplaceSpecType from GlobalSpecType for oneof fields
func (r *ReplaceSpecType) SetLogsReceiverChoiceToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.LogsReceiverChoice.(type) {
	case nil:
		o.LogsReceiverChoice = nil

	case *ReplaceSpecType_LogReceiver:
		o.LogsReceiverChoice = &GlobalSpecType_LogReceiver{LogReceiver: of.LogReceiver}

	case *ReplaceSpecType_LogsStreamingDisabled:
		o.LogsReceiverChoice = &GlobalSpecType_LogsStreamingDisabled{LogsStreamingDisabled: of.LogsStreamingDisabled}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *ReplaceSpecType) GetLogsReceiverChoiceFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.LogsReceiverChoice.(type) {
	case nil:
		r.LogsReceiverChoice = nil

	case *GlobalSpecType_LogReceiver:
		r.LogsReceiverChoice = &ReplaceSpecType_LogReceiver{LogReceiver: of.LogReceiver}

	case *GlobalSpecType_LogsStreamingDisabled:
		r.LogsReceiverChoice = &ReplaceSpecType_LogsStreamingDisabled{LogsStreamingDisabled: of.LogsStreamingDisabled}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

// create setters in ReplaceSpecType from GlobalSpecType for oneof fields
func (r *ReplaceSpecType) SetSiteTypeToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.SiteType.(type) {
	case nil:
		o.SiteType = nil

	case *ReplaceSpecType_IngressEgressGw:

		f1 := o.GetIngressEgressGw()
		if f1 == nil {
			f1 = &AzureVnetIngressEgressGwType{}
		}
		of.IngressEgressGw.ToAzureVnetIngressEgressGwType(f1)
		o.SiteType = &GlobalSpecType_IngressEgressGw{IngressEgressGw: f1}

	case *ReplaceSpecType_IngressGw:

		f1 := o.GetIngressGw()
		if f1 == nil {
			f1 = &AzureVnetIngressGwType{}
		}
		of.IngressGw.ToAzureVnetIngressGwType(f1)
		o.SiteType = &GlobalSpecType_IngressGw{IngressGw: f1}

	case *ReplaceSpecType_VoltstackCluster:

		f1 := o.GetVoltstackCluster()
		if f1 == nil {
			f1 = &AzureVnetVoltstackClusterType{}
		}
		of.VoltstackCluster.ToAzureVnetVoltstackClusterType(f1)
		o.SiteType = &GlobalSpecType_VoltstackCluster{VoltstackCluster: f1}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *ReplaceSpecType) GetSiteTypeFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.SiteType.(type) {
	case nil:
		r.SiteType = nil

	case *GlobalSpecType_IngressEgressGw:

		f1 := &AzureVnetIngressEgressGwReplaceType{}
		f1.FromAzureVnetIngressEgressGwType(of.IngressEgressGw)
		r.SiteType = &ReplaceSpecType_IngressEgressGw{IngressEgressGw: f1}

	case *GlobalSpecType_IngressGw:

		f1 := &AzureVnetIngressGwReplaceType{}
		f1.FromAzureVnetIngressGwType(of.IngressGw)
		r.SiteType = &ReplaceSpecType_IngressGw{IngressGw: f1}

	case *GlobalSpecType_VoltstackCluster:

		f1 := &AzureVnetVoltstackClusterReplaceType{}
		f1.FromAzureVnetVoltstackClusterType(of.VoltstackCluster)
		r.SiteType = &ReplaceSpecType_VoltstackCluster{VoltstackCluster: f1}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (m *ReplaceSpecType) FromGlobalSpecType(f *GlobalSpecType) {
	if f == nil {
		return
	}
	m.Address = f.GetAddress()
	m.Coordinates = f.GetCoordinates()
	m.GetLogsReceiverChoiceFromGlobalSpecType(f)
	m.NodesPerAz = f.GetNodesPerAz()
	m.GetSiteTypeFromGlobalSpecType(f)
}

func (m *ReplaceSpecType) ToGlobalSpecType(f *GlobalSpecType) {
	m1 := m.DeepCopy()
	_ = m1
	if f == nil {
		return
	}
	f.Address = m1.Address
	f.Coordinates = m1.Coordinates
	m1.SetLogsReceiverChoiceToGlobalSpecType(f)
	f.NodesPerAz = m1.NodesPerAz
	m1.SetSiteTypeToGlobalSpecType(f)
}
