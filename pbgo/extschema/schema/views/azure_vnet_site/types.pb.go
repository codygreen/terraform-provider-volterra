// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ves.io/schema/views/azure_vnet_site/types.proto

package azure_vnet_site

import (
	proto "github.com/gogo/protobuf/proto"
	golang_proto "github.com/golang/protobuf/proto"

	fmt "fmt"

	math "math"

	_ "github.com/gogo/protobuf/gogoproto"

	ves_io_schema_network_firewall "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/network_firewall"

	_ "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"

	ves_io_schema_site "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/site"

	ves_io_schema4 "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"

	_ "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"

	_ "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"

	ves_io_schema_views1 "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/views"

	ves_io_schema_views "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/views"

	strings "strings"

	reflect "reflect"

	io "io"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Azure Ingress Gateway
//
// x-displayName: "Azure Ingress Gateway"
// Single interface Azure ingress site
type AzureVnetIngressGwType struct {
	// Nodes
	//
	// x-displayName: "Ingress Gateway (One Interface) Nodes in AZ"
	// Only Single AZ or Three AZ(s) nodes are supported currently.
	AzNodes []*ves_io_schema_views1.AzureVnetOneInterfaceNodeType `protobuf:"bytes,1,rep,name=az_nodes,json=azNodes" json:"az_nodes,omitempty"`
	// Azure Certified Hardware
	//
	// x-displayName: "Azure Certified Hardware"
	// x-example: "azure-byol-voltmesh"
	// x-required
	// Name for Azure certified hardware.
	AzureCertifiedHw string `protobuf:"bytes,2,opt,name=azure_certified_hw,json=azureCertifiedHw,proto3" json:"azure_certified_hw,omitempty"`
}

func (m *AzureVnetIngressGwType) Reset()                    { *m = AzureVnetIngressGwType{} }
func (*AzureVnetIngressGwType) ProtoMessage()               {}
func (*AzureVnetIngressGwType) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{0} }

func (m *AzureVnetIngressGwType) GetAzNodes() []*ves_io_schema_views1.AzureVnetOneInterfaceNodeType {
	if m != nil {
		return m.AzNodes
	}
	return nil
}

func (m *AzureVnetIngressGwType) GetAzureCertifiedHw() string {
	if m != nil {
		return m.AzureCertifiedHw
	}
	return ""
}

// Azure Ingress Egress Gateway
//
// x-displayName: "Azure Ingress/Egress Gateway"
// Two interface Azure ingress/egress site
type AzureVnetIngressEgressGwType struct {
	// Nodes
	//
	// x-displayName: "Ingress/Egress Gateway (two Interface) Nodes in AZ"
	// Only Single AZ or Three AZ(s) nodes are supported currently.
	AzNodes []*ves_io_schema_views1.AzureVnetTwoInterfaceNodeType `protobuf:"bytes,1,rep,name=az_nodes,json=azNodes" json:"az_nodes,omitempty"`
	// Manage Network Policy
	//
	// x-displayName: "Manage Network Policy"
	// x-required
	// Manage Network Policy via this view
	//
	// Types that are valid to be assigned to NetworkPolicyChoice:
	//	*AzureVnetIngressEgressGwType_NoNetworkPolicy
	//	*AzureVnetIngressEgressGwType_ActiveNetworkPolicies
	NetworkPolicyChoice isAzureVnetIngressEgressGwType_NetworkPolicyChoice `protobuf_oneof:"network_policy_choice"`
	// Manage Forward Proxy
	//
	// x-displayName: "Manage Forward Proxy"
	// x-required
	// Manage Forward Proxy for this site
	//
	// Types that are valid to be assigned to ForwardProxyChoice:
	//	*AzureVnetIngressEgressGwType_NoForwardProxy
	//	*AzureVnetIngressEgressGwType_ActiveForwardProxyPolicies
	//	*AzureVnetIngressEgressGwType_ForwardProxyAllowAll
	ForwardProxyChoice isAzureVnetIngressEgressGwType_ForwardProxyChoice `protobuf_oneof:"forward_proxy_choice"`
	// Azure Certified Hardware
	//
	// x-displayName: "Azure Certified Hardware"
	// x-example: "azure-byol-multi-nic-voltmesh"
	// x-required
	// Name for Azure certified hardware.
	AzureCertifiedHw string `protobuf:"bytes,8,opt,name=azure_certified_hw,json=azureCertifiedHw,proto3" json:"azure_certified_hw,omitempty"`
	// Manage Static Routes for Inside Network
	//
	// x-displayName: "Manage Static Routes for Inside Network"
	// x-required
	// Add static routes to inside network. Used to reach indirectly connected subnets.
	//
	// Types that are valid to be assigned to InsideStaticRouteChoice:
	//	*AzureVnetIngressEgressGwType_NoInsideStaticRoutes
	//	*AzureVnetIngressEgressGwType_InsideStaticRoutes
	InsideStaticRouteChoice isAzureVnetIngressEgressGwType_InsideStaticRouteChoice `protobuf_oneof:"inside_static_route_choice"`
	// Manage Static Routes for Outside Network
	//
	// x-displayName: "Manage Static Routes for Outside Network"
	// x-required
	// Add static routes to outside network. Used to reach indirectly connected subnets.
	//
	// Types that are valid to be assigned to OutsideStaticRouteChoice:
	//	*AzureVnetIngressEgressGwType_NoOutsideStaticRoutes
	//	*AzureVnetIngressEgressGwType_OutsideStaticRoutes
	OutsideStaticRouteChoice isAzureVnetIngressEgressGwType_OutsideStaticRouteChoice `protobuf_oneof:"outside_static_route_choice"`
	// Connect to Global Network
	//
	// x-displayName: "Select Global Networks to Connect"
	// x-required
	// Select global networks to connect to inside or outside network
	//
	// Types that are valid to be assigned to GlobalNetworkChoice:
	//	*AzureVnetIngressEgressGwType_NoGlobalNetwork
	//	*AzureVnetIngressEgressGwType_GlobalNetworkList
	GlobalNetworkChoice isAzureVnetIngressEgressGwType_GlobalNetworkChoice `protobuf_oneof:"global_network_choice"`
}

func (m *AzureVnetIngressEgressGwType) Reset()      { *m = AzureVnetIngressEgressGwType{} }
func (*AzureVnetIngressEgressGwType) ProtoMessage() {}
func (*AzureVnetIngressEgressGwType) Descriptor() ([]byte, []int) {
	return fileDescriptorTypes, []int{1}
}

type isAzureVnetIngressEgressGwType_NetworkPolicyChoice interface {
	isAzureVnetIngressEgressGwType_NetworkPolicyChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isAzureVnetIngressEgressGwType_ForwardProxyChoice interface {
	isAzureVnetIngressEgressGwType_ForwardProxyChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isAzureVnetIngressEgressGwType_InsideStaticRouteChoice interface {
	isAzureVnetIngressEgressGwType_InsideStaticRouteChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isAzureVnetIngressEgressGwType_OutsideStaticRouteChoice interface {
	isAzureVnetIngressEgressGwType_OutsideStaticRouteChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isAzureVnetIngressEgressGwType_GlobalNetworkChoice interface {
	isAzureVnetIngressEgressGwType_GlobalNetworkChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type AzureVnetIngressEgressGwType_NoNetworkPolicy struct {
	NoNetworkPolicy *ves_io_schema4.Empty `protobuf:"bytes,2,opt,name=no_network_policy,json=noNetworkPolicy,oneof"`
}
type AzureVnetIngressEgressGwType_ActiveNetworkPolicies struct {
	ActiveNetworkPolicies *ves_io_schema_network_firewall.ActiveNetworkPoliciesType `protobuf:"bytes,10,opt,name=active_network_policies,json=activeNetworkPolicies,oneof"`
}
type AzureVnetIngressEgressGwType_NoForwardProxy struct {
	NoForwardProxy *ves_io_schema4.Empty `protobuf:"bytes,4,opt,name=no_forward_proxy,json=noForwardProxy,oneof"`
}
type AzureVnetIngressEgressGwType_ActiveForwardProxyPolicies struct {
	ActiveForwardProxyPolicies *ves_io_schema_network_firewall.ActiveForwardProxyPoliciesType `protobuf:"bytes,9,opt,name=active_forward_proxy_policies,json=activeForwardProxyPolicies,oneof"`
}
type AzureVnetIngressEgressGwType_ForwardProxyAllowAll struct {
	ForwardProxyAllowAll *ves_io_schema4.Empty `protobuf:"bytes,20,opt,name=forward_proxy_allow_all,json=forwardProxyAllowAll,oneof"`
}
type AzureVnetIngressEgressGwType_NoInsideStaticRoutes struct {
	NoInsideStaticRoutes *ves_io_schema4.Empty `protobuf:"bytes,12,opt,name=no_inside_static_routes,json=noInsideStaticRoutes,oneof"`
}
type AzureVnetIngressEgressGwType_InsideStaticRoutes struct {
	InsideStaticRoutes *ves_io_schema_views1.SiteStaticRoutesListType `protobuf:"bytes,13,opt,name=inside_static_routes,json=insideStaticRoutes,oneof"`
}
type AzureVnetIngressEgressGwType_NoOutsideStaticRoutes struct {
	NoOutsideStaticRoutes *ves_io_schema4.Empty `protobuf:"bytes,15,opt,name=no_outside_static_routes,json=noOutsideStaticRoutes,oneof"`
}
type AzureVnetIngressEgressGwType_OutsideStaticRoutes struct {
	OutsideStaticRoutes *ves_io_schema_views1.SiteStaticRoutesListType `protobuf:"bytes,16,opt,name=outside_static_routes,json=outsideStaticRoutes,oneof"`
}
type AzureVnetIngressEgressGwType_NoGlobalNetwork struct {
	NoGlobalNetwork *ves_io_schema4.Empty `protobuf:"bytes,18,opt,name=no_global_network,json=noGlobalNetwork,oneof"`
}
type AzureVnetIngressEgressGwType_GlobalNetworkList struct {
	GlobalNetworkList *ves_io_schema_views1.GlobalNetworkConnectionListType `protobuf:"bytes,19,opt,name=global_network_list,json=globalNetworkList,oneof"`
}

func (*AzureVnetIngressEgressGwType_NoNetworkPolicy) isAzureVnetIngressEgressGwType_NetworkPolicyChoice() {
}
func (*AzureVnetIngressEgressGwType_ActiveNetworkPolicies) isAzureVnetIngressEgressGwType_NetworkPolicyChoice() {
}
func (*AzureVnetIngressEgressGwType_NoForwardProxy) isAzureVnetIngressEgressGwType_ForwardProxyChoice() {
}
func (*AzureVnetIngressEgressGwType_ActiveForwardProxyPolicies) isAzureVnetIngressEgressGwType_ForwardProxyChoice() {
}
func (*AzureVnetIngressEgressGwType_ForwardProxyAllowAll) isAzureVnetIngressEgressGwType_ForwardProxyChoice() {
}
func (*AzureVnetIngressEgressGwType_NoInsideStaticRoutes) isAzureVnetIngressEgressGwType_InsideStaticRouteChoice() {
}
func (*AzureVnetIngressEgressGwType_InsideStaticRoutes) isAzureVnetIngressEgressGwType_InsideStaticRouteChoice() {
}
func (*AzureVnetIngressEgressGwType_NoOutsideStaticRoutes) isAzureVnetIngressEgressGwType_OutsideStaticRouteChoice() {
}
func (*AzureVnetIngressEgressGwType_OutsideStaticRoutes) isAzureVnetIngressEgressGwType_OutsideStaticRouteChoice() {
}
func (*AzureVnetIngressEgressGwType_NoGlobalNetwork) isAzureVnetIngressEgressGwType_GlobalNetworkChoice() {
}
func (*AzureVnetIngressEgressGwType_GlobalNetworkList) isAzureVnetIngressEgressGwType_GlobalNetworkChoice() {
}

func (m *AzureVnetIngressEgressGwType) GetNetworkPolicyChoice() isAzureVnetIngressEgressGwType_NetworkPolicyChoice {
	if m != nil {
		return m.NetworkPolicyChoice
	}
	return nil
}
func (m *AzureVnetIngressEgressGwType) GetForwardProxyChoice() isAzureVnetIngressEgressGwType_ForwardProxyChoice {
	if m != nil {
		return m.ForwardProxyChoice
	}
	return nil
}
func (m *AzureVnetIngressEgressGwType) GetInsideStaticRouteChoice() isAzureVnetIngressEgressGwType_InsideStaticRouteChoice {
	if m != nil {
		return m.InsideStaticRouteChoice
	}
	return nil
}
func (m *AzureVnetIngressEgressGwType) GetOutsideStaticRouteChoice() isAzureVnetIngressEgressGwType_OutsideStaticRouteChoice {
	if m != nil {
		return m.OutsideStaticRouteChoice
	}
	return nil
}
func (m *AzureVnetIngressEgressGwType) GetGlobalNetworkChoice() isAzureVnetIngressEgressGwType_GlobalNetworkChoice {
	if m != nil {
		return m.GlobalNetworkChoice
	}
	return nil
}

func (m *AzureVnetIngressEgressGwType) GetAzNodes() []*ves_io_schema_views1.AzureVnetTwoInterfaceNodeType {
	if m != nil {
		return m.AzNodes
	}
	return nil
}

func (m *AzureVnetIngressEgressGwType) GetNoNetworkPolicy() *ves_io_schema4.Empty {
	if x, ok := m.GetNetworkPolicyChoice().(*AzureVnetIngressEgressGwType_NoNetworkPolicy); ok {
		return x.NoNetworkPolicy
	}
	return nil
}

func (m *AzureVnetIngressEgressGwType) GetActiveNetworkPolicies() *ves_io_schema_network_firewall.ActiveNetworkPoliciesType {
	if x, ok := m.GetNetworkPolicyChoice().(*AzureVnetIngressEgressGwType_ActiveNetworkPolicies); ok {
		return x.ActiveNetworkPolicies
	}
	return nil
}

func (m *AzureVnetIngressEgressGwType) GetNoForwardProxy() *ves_io_schema4.Empty {
	if x, ok := m.GetForwardProxyChoice().(*AzureVnetIngressEgressGwType_NoForwardProxy); ok {
		return x.NoForwardProxy
	}
	return nil
}

func (m *AzureVnetIngressEgressGwType) GetActiveForwardProxyPolicies() *ves_io_schema_network_firewall.ActiveForwardProxyPoliciesType {
	if x, ok := m.GetForwardProxyChoice().(*AzureVnetIngressEgressGwType_ActiveForwardProxyPolicies); ok {
		return x.ActiveForwardProxyPolicies
	}
	return nil
}

func (m *AzureVnetIngressEgressGwType) GetForwardProxyAllowAll() *ves_io_schema4.Empty {
	if x, ok := m.GetForwardProxyChoice().(*AzureVnetIngressEgressGwType_ForwardProxyAllowAll); ok {
		return x.ForwardProxyAllowAll
	}
	return nil
}

func (m *AzureVnetIngressEgressGwType) GetAzureCertifiedHw() string {
	if m != nil {
		return m.AzureCertifiedHw
	}
	return ""
}

func (m *AzureVnetIngressEgressGwType) GetNoInsideStaticRoutes() *ves_io_schema4.Empty {
	if x, ok := m.GetInsideStaticRouteChoice().(*AzureVnetIngressEgressGwType_NoInsideStaticRoutes); ok {
		return x.NoInsideStaticRoutes
	}
	return nil
}

func (m *AzureVnetIngressEgressGwType) GetInsideStaticRoutes() *ves_io_schema_views1.SiteStaticRoutesListType {
	if x, ok := m.GetInsideStaticRouteChoice().(*AzureVnetIngressEgressGwType_InsideStaticRoutes); ok {
		return x.InsideStaticRoutes
	}
	return nil
}

func (m *AzureVnetIngressEgressGwType) GetNoOutsideStaticRoutes() *ves_io_schema4.Empty {
	if x, ok := m.GetOutsideStaticRouteChoice().(*AzureVnetIngressEgressGwType_NoOutsideStaticRoutes); ok {
		return x.NoOutsideStaticRoutes
	}
	return nil
}

func (m *AzureVnetIngressEgressGwType) GetOutsideStaticRoutes() *ves_io_schema_views1.SiteStaticRoutesListType {
	if x, ok := m.GetOutsideStaticRouteChoice().(*AzureVnetIngressEgressGwType_OutsideStaticRoutes); ok {
		return x.OutsideStaticRoutes
	}
	return nil
}

func (m *AzureVnetIngressEgressGwType) GetNoGlobalNetwork() *ves_io_schema4.Empty {
	if x, ok := m.GetGlobalNetworkChoice().(*AzureVnetIngressEgressGwType_NoGlobalNetwork); ok {
		return x.NoGlobalNetwork
	}
	return nil
}

func (m *AzureVnetIngressEgressGwType) GetGlobalNetworkList() *ves_io_schema_views1.GlobalNetworkConnectionListType {
	if x, ok := m.GetGlobalNetworkChoice().(*AzureVnetIngressEgressGwType_GlobalNetworkList); ok {
		return x.GlobalNetworkList
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*AzureVnetIngressEgressGwType) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _AzureVnetIngressEgressGwType_OneofMarshaler, _AzureVnetIngressEgressGwType_OneofUnmarshaler, _AzureVnetIngressEgressGwType_OneofSizer, []interface{}{
		(*AzureVnetIngressEgressGwType_NoNetworkPolicy)(nil),
		(*AzureVnetIngressEgressGwType_ActiveNetworkPolicies)(nil),
		(*AzureVnetIngressEgressGwType_NoForwardProxy)(nil),
		(*AzureVnetIngressEgressGwType_ActiveForwardProxyPolicies)(nil),
		(*AzureVnetIngressEgressGwType_ForwardProxyAllowAll)(nil),
		(*AzureVnetIngressEgressGwType_NoInsideStaticRoutes)(nil),
		(*AzureVnetIngressEgressGwType_InsideStaticRoutes)(nil),
		(*AzureVnetIngressEgressGwType_NoOutsideStaticRoutes)(nil),
		(*AzureVnetIngressEgressGwType_OutsideStaticRoutes)(nil),
		(*AzureVnetIngressEgressGwType_NoGlobalNetwork)(nil),
		(*AzureVnetIngressEgressGwType_GlobalNetworkList)(nil),
	}
}

func _AzureVnetIngressEgressGwType_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*AzureVnetIngressEgressGwType)
	// network_policy_choice
	switch x := m.NetworkPolicyChoice.(type) {
	case *AzureVnetIngressEgressGwType_NoNetworkPolicy:
		_ = b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.NoNetworkPolicy); err != nil {
			return err
		}
	case *AzureVnetIngressEgressGwType_ActiveNetworkPolicies:
		_ = b.EncodeVarint(10<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ActiveNetworkPolicies); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("AzureVnetIngressEgressGwType.NetworkPolicyChoice has unexpected type %T", x)
	}
	// forward_proxy_choice
	switch x := m.ForwardProxyChoice.(type) {
	case *AzureVnetIngressEgressGwType_NoForwardProxy:
		_ = b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.NoForwardProxy); err != nil {
			return err
		}
	case *AzureVnetIngressEgressGwType_ActiveForwardProxyPolicies:
		_ = b.EncodeVarint(9<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ActiveForwardProxyPolicies); err != nil {
			return err
		}
	case *AzureVnetIngressEgressGwType_ForwardProxyAllowAll:
		_ = b.EncodeVarint(20<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ForwardProxyAllowAll); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("AzureVnetIngressEgressGwType.ForwardProxyChoice has unexpected type %T", x)
	}
	// inside_static_route_choice
	switch x := m.InsideStaticRouteChoice.(type) {
	case *AzureVnetIngressEgressGwType_NoInsideStaticRoutes:
		_ = b.EncodeVarint(12<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.NoInsideStaticRoutes); err != nil {
			return err
		}
	case *AzureVnetIngressEgressGwType_InsideStaticRoutes:
		_ = b.EncodeVarint(13<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.InsideStaticRoutes); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("AzureVnetIngressEgressGwType.InsideStaticRouteChoice has unexpected type %T", x)
	}
	// outside_static_route_choice
	switch x := m.OutsideStaticRouteChoice.(type) {
	case *AzureVnetIngressEgressGwType_NoOutsideStaticRoutes:
		_ = b.EncodeVarint(15<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.NoOutsideStaticRoutes); err != nil {
			return err
		}
	case *AzureVnetIngressEgressGwType_OutsideStaticRoutes:
		_ = b.EncodeVarint(16<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.OutsideStaticRoutes); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("AzureVnetIngressEgressGwType.OutsideStaticRouteChoice has unexpected type %T", x)
	}
	// global_network_choice
	switch x := m.GlobalNetworkChoice.(type) {
	case *AzureVnetIngressEgressGwType_NoGlobalNetwork:
		_ = b.EncodeVarint(18<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.NoGlobalNetwork); err != nil {
			return err
		}
	case *AzureVnetIngressEgressGwType_GlobalNetworkList:
		_ = b.EncodeVarint(19<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.GlobalNetworkList); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("AzureVnetIngressEgressGwType.GlobalNetworkChoice has unexpected type %T", x)
	}
	return nil
}

func _AzureVnetIngressEgressGwType_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*AzureVnetIngressEgressGwType)
	switch tag {
	case 2: // network_policy_choice.no_network_policy
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.NetworkPolicyChoice = &AzureVnetIngressEgressGwType_NoNetworkPolicy{msg}
		return true, err
	case 10: // network_policy_choice.active_network_policies
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema_network_firewall.ActiveNetworkPoliciesType)
		err := b.DecodeMessage(msg)
		m.NetworkPolicyChoice = &AzureVnetIngressEgressGwType_ActiveNetworkPolicies{msg}
		return true, err
	case 4: // forward_proxy_choice.no_forward_proxy
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.ForwardProxyChoice = &AzureVnetIngressEgressGwType_NoForwardProxy{msg}
		return true, err
	case 9: // forward_proxy_choice.active_forward_proxy_policies
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema_network_firewall.ActiveForwardProxyPoliciesType)
		err := b.DecodeMessage(msg)
		m.ForwardProxyChoice = &AzureVnetIngressEgressGwType_ActiveForwardProxyPolicies{msg}
		return true, err
	case 20: // forward_proxy_choice.forward_proxy_allow_all
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.ForwardProxyChoice = &AzureVnetIngressEgressGwType_ForwardProxyAllowAll{msg}
		return true, err
	case 12: // inside_static_route_choice.no_inside_static_routes
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.InsideStaticRouteChoice = &AzureVnetIngressEgressGwType_NoInsideStaticRoutes{msg}
		return true, err
	case 13: // inside_static_route_choice.inside_static_routes
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema_views1.SiteStaticRoutesListType)
		err := b.DecodeMessage(msg)
		m.InsideStaticRouteChoice = &AzureVnetIngressEgressGwType_InsideStaticRoutes{msg}
		return true, err
	case 15: // outside_static_route_choice.no_outside_static_routes
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.OutsideStaticRouteChoice = &AzureVnetIngressEgressGwType_NoOutsideStaticRoutes{msg}
		return true, err
	case 16: // outside_static_route_choice.outside_static_routes
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema_views1.SiteStaticRoutesListType)
		err := b.DecodeMessage(msg)
		m.OutsideStaticRouteChoice = &AzureVnetIngressEgressGwType_OutsideStaticRoutes{msg}
		return true, err
	case 18: // global_network_choice.no_global_network
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.GlobalNetworkChoice = &AzureVnetIngressEgressGwType_NoGlobalNetwork{msg}
		return true, err
	case 19: // global_network_choice.global_network_list
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema_views1.GlobalNetworkConnectionListType)
		err := b.DecodeMessage(msg)
		m.GlobalNetworkChoice = &AzureVnetIngressEgressGwType_GlobalNetworkList{msg}
		return true, err
	default:
		return false, nil
	}
}

func _AzureVnetIngressEgressGwType_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*AzureVnetIngressEgressGwType)
	// network_policy_choice
	switch x := m.NetworkPolicyChoice.(type) {
	case *AzureVnetIngressEgressGwType_NoNetworkPolicy:
		s := proto.Size(x.NoNetworkPolicy)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *AzureVnetIngressEgressGwType_ActiveNetworkPolicies:
		s := proto.Size(x.ActiveNetworkPolicies)
		n += proto.SizeVarint(10<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	// forward_proxy_choice
	switch x := m.ForwardProxyChoice.(type) {
	case *AzureVnetIngressEgressGwType_NoForwardProxy:
		s := proto.Size(x.NoForwardProxy)
		n += proto.SizeVarint(4<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *AzureVnetIngressEgressGwType_ActiveForwardProxyPolicies:
		s := proto.Size(x.ActiveForwardProxyPolicies)
		n += proto.SizeVarint(9<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *AzureVnetIngressEgressGwType_ForwardProxyAllowAll:
		s := proto.Size(x.ForwardProxyAllowAll)
		n += proto.SizeVarint(20<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	// inside_static_route_choice
	switch x := m.InsideStaticRouteChoice.(type) {
	case *AzureVnetIngressEgressGwType_NoInsideStaticRoutes:
		s := proto.Size(x.NoInsideStaticRoutes)
		n += proto.SizeVarint(12<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *AzureVnetIngressEgressGwType_InsideStaticRoutes:
		s := proto.Size(x.InsideStaticRoutes)
		n += proto.SizeVarint(13<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	// outside_static_route_choice
	switch x := m.OutsideStaticRouteChoice.(type) {
	case *AzureVnetIngressEgressGwType_NoOutsideStaticRoutes:
		s := proto.Size(x.NoOutsideStaticRoutes)
		n += proto.SizeVarint(15<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *AzureVnetIngressEgressGwType_OutsideStaticRoutes:
		s := proto.Size(x.OutsideStaticRoutes)
		n += proto.SizeVarint(16<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	// global_network_choice
	switch x := m.GlobalNetworkChoice.(type) {
	case *AzureVnetIngressEgressGwType_NoGlobalNetwork:
		s := proto.Size(x.NoGlobalNetwork)
		n += proto.SizeVarint(18<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *AzureVnetIngressEgressGwType_GlobalNetworkList:
		s := proto.Size(x.GlobalNetworkList)
		n += proto.SizeVarint(19<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// Azure Voltstack Cluster
//
// x-displayName: "Azure Voltstack Cluster"
// Voltstack Cluster of single interface Azure nodes
type AzureVnetVoltstackClusterType struct {
	// Azure Certified Hardware
	//
	// x-displayName: "Azure Certified Hardware"
	// x-example: "azure-byol-voltstack-combo"
	// x-required
	// Name for Azure certified hardware.
	AzureCertifiedHw string `protobuf:"bytes,1,opt,name=azure_certified_hw,json=azureCertifiedHw,proto3" json:"azure_certified_hw,omitempty"`
	// Nodes
	//
	// x-displayName: "VoltStack Cluster (One Interface) Nodes in AZ"
	// Only Single AZ or Three AZ(s) nodes are supported currently.
	AzNodes []*ves_io_schema_views1.AzureVnetOneInterfaceNodeType `protobuf:"bytes,2,rep,name=az_nodes,json=azNodes" json:"az_nodes,omitempty"`
	// Manage Network Policy
	//
	// x-displayName: "Manage Network Policy"
	// x-required
	// Manage Network Policy via this view
	//
	// Types that are valid to be assigned to NetworkPolicyChoice:
	//	*AzureVnetVoltstackClusterType_NoNetworkPolicy
	//	*AzureVnetVoltstackClusterType_ActiveNetworkPolicies
	NetworkPolicyChoice isAzureVnetVoltstackClusterType_NetworkPolicyChoice `protobuf_oneof:"network_policy_choice"`
	// Manage Forward Proxy
	//
	// x-displayName: "Manage Forward Proxy"
	// x-required
	// Manage Forward Proxy for this site
	//
	// Types that are valid to be assigned to ForwardProxyChoice:
	//	*AzureVnetVoltstackClusterType_NoForwardProxy
	//	*AzureVnetVoltstackClusterType_ActiveForwardProxyPolicies
	//	*AzureVnetVoltstackClusterType_ForwardProxyAllowAll
	ForwardProxyChoice isAzureVnetVoltstackClusterType_ForwardProxyChoice `protobuf_oneof:"forward_proxy_choice"`
	// Manage Static Routes for Site Local Network
	//
	// x-displayName: "Manage Static Routes for Site Local Network"
	// x-required
	// Add static routes to site local network. Used to reach indirectly connected subnets.
	//
	// Types that are valid to be assigned to OutsideStaticRouteChoice:
	//	*AzureVnetVoltstackClusterType_NoOutsideStaticRoutes
	//	*AzureVnetVoltstackClusterType_OutsideStaticRoutes
	OutsideStaticRouteChoice isAzureVnetVoltstackClusterType_OutsideStaticRouteChoice `protobuf_oneof:"outside_static_route_choice"`
	// Connect to Global Network
	//
	// x-displayName: "Select Global Networks to Connect"
	// x-required
	// Select global networks to connect to site local network
	//
	// Types that are valid to be assigned to GlobalNetworkChoice:
	//	*AzureVnetVoltstackClusterType_NoGlobalNetwork
	//	*AzureVnetVoltstackClusterType_GlobalNetworkList
	GlobalNetworkChoice isAzureVnetVoltstackClusterType_GlobalNetworkChoice `protobuf_oneof:"global_network_choice"`
}

func (m *AzureVnetVoltstackClusterType) Reset()      { *m = AzureVnetVoltstackClusterType{} }
func (*AzureVnetVoltstackClusterType) ProtoMessage() {}
func (*AzureVnetVoltstackClusterType) Descriptor() ([]byte, []int) {
	return fileDescriptorTypes, []int{2}
}

type isAzureVnetVoltstackClusterType_NetworkPolicyChoice interface {
	isAzureVnetVoltstackClusterType_NetworkPolicyChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isAzureVnetVoltstackClusterType_ForwardProxyChoice interface {
	isAzureVnetVoltstackClusterType_ForwardProxyChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isAzureVnetVoltstackClusterType_OutsideStaticRouteChoice interface {
	isAzureVnetVoltstackClusterType_OutsideStaticRouteChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isAzureVnetVoltstackClusterType_GlobalNetworkChoice interface {
	isAzureVnetVoltstackClusterType_GlobalNetworkChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type AzureVnetVoltstackClusterType_NoNetworkPolicy struct {
	NoNetworkPolicy *ves_io_schema4.Empty `protobuf:"bytes,4,opt,name=no_network_policy,json=noNetworkPolicy,oneof"`
}
type AzureVnetVoltstackClusterType_ActiveNetworkPolicies struct {
	ActiveNetworkPolicies *ves_io_schema_network_firewall.ActiveNetworkPoliciesType `protobuf:"bytes,5,opt,name=active_network_policies,json=activeNetworkPolicies,oneof"`
}
type AzureVnetVoltstackClusterType_NoForwardProxy struct {
	NoForwardProxy *ves_io_schema4.Empty `protobuf:"bytes,7,opt,name=no_forward_proxy,json=noForwardProxy,oneof"`
}
type AzureVnetVoltstackClusterType_ActiveForwardProxyPolicies struct {
	ActiveForwardProxyPolicies *ves_io_schema_network_firewall.ActiveForwardProxyPoliciesType `protobuf:"bytes,8,opt,name=active_forward_proxy_policies,json=activeForwardProxyPolicies,oneof"`
}
type AzureVnetVoltstackClusterType_ForwardProxyAllowAll struct {
	ForwardProxyAllowAll *ves_io_schema4.Empty `protobuf:"bytes,15,opt,name=forward_proxy_allow_all,json=forwardProxyAllowAll,oneof"`
}
type AzureVnetVoltstackClusterType_NoOutsideStaticRoutes struct {
	NoOutsideStaticRoutes *ves_io_schema4.Empty `protobuf:"bytes,10,opt,name=no_outside_static_routes,json=noOutsideStaticRoutes,oneof"`
}
type AzureVnetVoltstackClusterType_OutsideStaticRoutes struct {
	OutsideStaticRoutes *ves_io_schema_views1.SiteStaticRoutesListType `protobuf:"bytes,11,opt,name=outside_static_routes,json=outsideStaticRoutes,oneof"`
}
type AzureVnetVoltstackClusterType_NoGlobalNetwork struct {
	NoGlobalNetwork *ves_io_schema4.Empty `protobuf:"bytes,13,opt,name=no_global_network,json=noGlobalNetwork,oneof"`
}
type AzureVnetVoltstackClusterType_GlobalNetworkList struct {
	GlobalNetworkList *ves_io_schema_views1.GlobalNetworkConnectionListType `protobuf:"bytes,14,opt,name=global_network_list,json=globalNetworkList,oneof"`
}

func (*AzureVnetVoltstackClusterType_NoNetworkPolicy) isAzureVnetVoltstackClusterType_NetworkPolicyChoice() {
}
func (*AzureVnetVoltstackClusterType_ActiveNetworkPolicies) isAzureVnetVoltstackClusterType_NetworkPolicyChoice() {
}
func (*AzureVnetVoltstackClusterType_NoForwardProxy) isAzureVnetVoltstackClusterType_ForwardProxyChoice() {
}
func (*AzureVnetVoltstackClusterType_ActiveForwardProxyPolicies) isAzureVnetVoltstackClusterType_ForwardProxyChoice() {
}
func (*AzureVnetVoltstackClusterType_ForwardProxyAllowAll) isAzureVnetVoltstackClusterType_ForwardProxyChoice() {
}
func (*AzureVnetVoltstackClusterType_NoOutsideStaticRoutes) isAzureVnetVoltstackClusterType_OutsideStaticRouteChoice() {
}
func (*AzureVnetVoltstackClusterType_OutsideStaticRoutes) isAzureVnetVoltstackClusterType_OutsideStaticRouteChoice() {
}
func (*AzureVnetVoltstackClusterType_NoGlobalNetwork) isAzureVnetVoltstackClusterType_GlobalNetworkChoice() {
}
func (*AzureVnetVoltstackClusterType_GlobalNetworkList) isAzureVnetVoltstackClusterType_GlobalNetworkChoice() {
}

func (m *AzureVnetVoltstackClusterType) GetNetworkPolicyChoice() isAzureVnetVoltstackClusterType_NetworkPolicyChoice {
	if m != nil {
		return m.NetworkPolicyChoice
	}
	return nil
}
func (m *AzureVnetVoltstackClusterType) GetForwardProxyChoice() isAzureVnetVoltstackClusterType_ForwardProxyChoice {
	if m != nil {
		return m.ForwardProxyChoice
	}
	return nil
}
func (m *AzureVnetVoltstackClusterType) GetOutsideStaticRouteChoice() isAzureVnetVoltstackClusterType_OutsideStaticRouteChoice {
	if m != nil {
		return m.OutsideStaticRouteChoice
	}
	return nil
}
func (m *AzureVnetVoltstackClusterType) GetGlobalNetworkChoice() isAzureVnetVoltstackClusterType_GlobalNetworkChoice {
	if m != nil {
		return m.GlobalNetworkChoice
	}
	return nil
}

func (m *AzureVnetVoltstackClusterType) GetAzureCertifiedHw() string {
	if m != nil {
		return m.AzureCertifiedHw
	}
	return ""
}

func (m *AzureVnetVoltstackClusterType) GetAzNodes() []*ves_io_schema_views1.AzureVnetOneInterfaceNodeType {
	if m != nil {
		return m.AzNodes
	}
	return nil
}

func (m *AzureVnetVoltstackClusterType) GetNoNetworkPolicy() *ves_io_schema4.Empty {
	if x, ok := m.GetNetworkPolicyChoice().(*AzureVnetVoltstackClusterType_NoNetworkPolicy); ok {
		return x.NoNetworkPolicy
	}
	return nil
}

func (m *AzureVnetVoltstackClusterType) GetActiveNetworkPolicies() *ves_io_schema_network_firewall.ActiveNetworkPoliciesType {
	if x, ok := m.GetNetworkPolicyChoice().(*AzureVnetVoltstackClusterType_ActiveNetworkPolicies); ok {
		return x.ActiveNetworkPolicies
	}
	return nil
}

func (m *AzureVnetVoltstackClusterType) GetNoForwardProxy() *ves_io_schema4.Empty {
	if x, ok := m.GetForwardProxyChoice().(*AzureVnetVoltstackClusterType_NoForwardProxy); ok {
		return x.NoForwardProxy
	}
	return nil
}

func (m *AzureVnetVoltstackClusterType) GetActiveForwardProxyPolicies() *ves_io_schema_network_firewall.ActiveForwardProxyPoliciesType {
	if x, ok := m.GetForwardProxyChoice().(*AzureVnetVoltstackClusterType_ActiveForwardProxyPolicies); ok {
		return x.ActiveForwardProxyPolicies
	}
	return nil
}

func (m *AzureVnetVoltstackClusterType) GetForwardProxyAllowAll() *ves_io_schema4.Empty {
	if x, ok := m.GetForwardProxyChoice().(*AzureVnetVoltstackClusterType_ForwardProxyAllowAll); ok {
		return x.ForwardProxyAllowAll
	}
	return nil
}

func (m *AzureVnetVoltstackClusterType) GetNoOutsideStaticRoutes() *ves_io_schema4.Empty {
	if x, ok := m.GetOutsideStaticRouteChoice().(*AzureVnetVoltstackClusterType_NoOutsideStaticRoutes); ok {
		return x.NoOutsideStaticRoutes
	}
	return nil
}

func (m *AzureVnetVoltstackClusterType) GetOutsideStaticRoutes() *ves_io_schema_views1.SiteStaticRoutesListType {
	if x, ok := m.GetOutsideStaticRouteChoice().(*AzureVnetVoltstackClusterType_OutsideStaticRoutes); ok {
		return x.OutsideStaticRoutes
	}
	return nil
}

func (m *AzureVnetVoltstackClusterType) GetNoGlobalNetwork() *ves_io_schema4.Empty {
	if x, ok := m.GetGlobalNetworkChoice().(*AzureVnetVoltstackClusterType_NoGlobalNetwork); ok {
		return x.NoGlobalNetwork
	}
	return nil
}

func (m *AzureVnetVoltstackClusterType) GetGlobalNetworkList() *ves_io_schema_views1.GlobalNetworkConnectionListType {
	if x, ok := m.GetGlobalNetworkChoice().(*AzureVnetVoltstackClusterType_GlobalNetworkList); ok {
		return x.GlobalNetworkList
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*AzureVnetVoltstackClusterType) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _AzureVnetVoltstackClusterType_OneofMarshaler, _AzureVnetVoltstackClusterType_OneofUnmarshaler, _AzureVnetVoltstackClusterType_OneofSizer, []interface{}{
		(*AzureVnetVoltstackClusterType_NoNetworkPolicy)(nil),
		(*AzureVnetVoltstackClusterType_ActiveNetworkPolicies)(nil),
		(*AzureVnetVoltstackClusterType_NoForwardProxy)(nil),
		(*AzureVnetVoltstackClusterType_ActiveForwardProxyPolicies)(nil),
		(*AzureVnetVoltstackClusterType_ForwardProxyAllowAll)(nil),
		(*AzureVnetVoltstackClusterType_NoOutsideStaticRoutes)(nil),
		(*AzureVnetVoltstackClusterType_OutsideStaticRoutes)(nil),
		(*AzureVnetVoltstackClusterType_NoGlobalNetwork)(nil),
		(*AzureVnetVoltstackClusterType_GlobalNetworkList)(nil),
	}
}

func _AzureVnetVoltstackClusterType_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*AzureVnetVoltstackClusterType)
	// network_policy_choice
	switch x := m.NetworkPolicyChoice.(type) {
	case *AzureVnetVoltstackClusterType_NoNetworkPolicy:
		_ = b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.NoNetworkPolicy); err != nil {
			return err
		}
	case *AzureVnetVoltstackClusterType_ActiveNetworkPolicies:
		_ = b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ActiveNetworkPolicies); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("AzureVnetVoltstackClusterType.NetworkPolicyChoice has unexpected type %T", x)
	}
	// forward_proxy_choice
	switch x := m.ForwardProxyChoice.(type) {
	case *AzureVnetVoltstackClusterType_NoForwardProxy:
		_ = b.EncodeVarint(7<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.NoForwardProxy); err != nil {
			return err
		}
	case *AzureVnetVoltstackClusterType_ActiveForwardProxyPolicies:
		_ = b.EncodeVarint(8<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ActiveForwardProxyPolicies); err != nil {
			return err
		}
	case *AzureVnetVoltstackClusterType_ForwardProxyAllowAll:
		_ = b.EncodeVarint(15<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ForwardProxyAllowAll); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("AzureVnetVoltstackClusterType.ForwardProxyChoice has unexpected type %T", x)
	}
	// outside_static_route_choice
	switch x := m.OutsideStaticRouteChoice.(type) {
	case *AzureVnetVoltstackClusterType_NoOutsideStaticRoutes:
		_ = b.EncodeVarint(10<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.NoOutsideStaticRoutes); err != nil {
			return err
		}
	case *AzureVnetVoltstackClusterType_OutsideStaticRoutes:
		_ = b.EncodeVarint(11<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.OutsideStaticRoutes); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("AzureVnetVoltstackClusterType.OutsideStaticRouteChoice has unexpected type %T", x)
	}
	// global_network_choice
	switch x := m.GlobalNetworkChoice.(type) {
	case *AzureVnetVoltstackClusterType_NoGlobalNetwork:
		_ = b.EncodeVarint(13<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.NoGlobalNetwork); err != nil {
			return err
		}
	case *AzureVnetVoltstackClusterType_GlobalNetworkList:
		_ = b.EncodeVarint(14<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.GlobalNetworkList); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("AzureVnetVoltstackClusterType.GlobalNetworkChoice has unexpected type %T", x)
	}
	return nil
}

func _AzureVnetVoltstackClusterType_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*AzureVnetVoltstackClusterType)
	switch tag {
	case 4: // network_policy_choice.no_network_policy
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.NetworkPolicyChoice = &AzureVnetVoltstackClusterType_NoNetworkPolicy{msg}
		return true, err
	case 5: // network_policy_choice.active_network_policies
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema_network_firewall.ActiveNetworkPoliciesType)
		err := b.DecodeMessage(msg)
		m.NetworkPolicyChoice = &AzureVnetVoltstackClusterType_ActiveNetworkPolicies{msg}
		return true, err
	case 7: // forward_proxy_choice.no_forward_proxy
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.ForwardProxyChoice = &AzureVnetVoltstackClusterType_NoForwardProxy{msg}
		return true, err
	case 8: // forward_proxy_choice.active_forward_proxy_policies
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema_network_firewall.ActiveForwardProxyPoliciesType)
		err := b.DecodeMessage(msg)
		m.ForwardProxyChoice = &AzureVnetVoltstackClusterType_ActiveForwardProxyPolicies{msg}
		return true, err
	case 15: // forward_proxy_choice.forward_proxy_allow_all
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.ForwardProxyChoice = &AzureVnetVoltstackClusterType_ForwardProxyAllowAll{msg}
		return true, err
	case 10: // outside_static_route_choice.no_outside_static_routes
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.OutsideStaticRouteChoice = &AzureVnetVoltstackClusterType_NoOutsideStaticRoutes{msg}
		return true, err
	case 11: // outside_static_route_choice.outside_static_routes
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema_views1.SiteStaticRoutesListType)
		err := b.DecodeMessage(msg)
		m.OutsideStaticRouteChoice = &AzureVnetVoltstackClusterType_OutsideStaticRoutes{msg}
		return true, err
	case 13: // global_network_choice.no_global_network
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.GlobalNetworkChoice = &AzureVnetVoltstackClusterType_NoGlobalNetwork{msg}
		return true, err
	case 14: // global_network_choice.global_network_list
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema_views1.GlobalNetworkConnectionListType)
		err := b.DecodeMessage(msg)
		m.GlobalNetworkChoice = &AzureVnetVoltstackClusterType_GlobalNetworkList{msg}
		return true, err
	default:
		return false, nil
	}
}

func _AzureVnetVoltstackClusterType_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*AzureVnetVoltstackClusterType)
	// network_policy_choice
	switch x := m.NetworkPolicyChoice.(type) {
	case *AzureVnetVoltstackClusterType_NoNetworkPolicy:
		s := proto.Size(x.NoNetworkPolicy)
		n += proto.SizeVarint(4<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *AzureVnetVoltstackClusterType_ActiveNetworkPolicies:
		s := proto.Size(x.ActiveNetworkPolicies)
		n += proto.SizeVarint(5<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	// forward_proxy_choice
	switch x := m.ForwardProxyChoice.(type) {
	case *AzureVnetVoltstackClusterType_NoForwardProxy:
		s := proto.Size(x.NoForwardProxy)
		n += proto.SizeVarint(7<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *AzureVnetVoltstackClusterType_ActiveForwardProxyPolicies:
		s := proto.Size(x.ActiveForwardProxyPolicies)
		n += proto.SizeVarint(8<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *AzureVnetVoltstackClusterType_ForwardProxyAllowAll:
		s := proto.Size(x.ForwardProxyAllowAll)
		n += proto.SizeVarint(15<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	// outside_static_route_choice
	switch x := m.OutsideStaticRouteChoice.(type) {
	case *AzureVnetVoltstackClusterType_NoOutsideStaticRoutes:
		s := proto.Size(x.NoOutsideStaticRoutes)
		n += proto.SizeVarint(10<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *AzureVnetVoltstackClusterType_OutsideStaticRoutes:
		s := proto.Size(x.OutsideStaticRoutes)
		n += proto.SizeVarint(11<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	// global_network_choice
	switch x := m.GlobalNetworkChoice.(type) {
	case *AzureVnetVoltstackClusterType_NoGlobalNetwork:
		s := proto.Size(x.NoGlobalNetwork)
		n += proto.SizeVarint(13<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *AzureVnetVoltstackClusterType_GlobalNetworkList:
		s := proto.Size(x.GlobalNetworkList)
		n += proto.SizeVarint(14<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// Azure Ingress Gateway
//
// x-displayName: "Azure Ingress Gateway"
// Single interface Azure ingress site
type AzureVnetIngressGwReplaceType struct {
}

func (m *AzureVnetIngressGwReplaceType) Reset()      { *m = AzureVnetIngressGwReplaceType{} }
func (*AzureVnetIngressGwReplaceType) ProtoMessage() {}
func (*AzureVnetIngressGwReplaceType) Descriptor() ([]byte, []int) {
	return fileDescriptorTypes, []int{3}
}

// Azure Ingress Egress Gateway
//
// x-displayName: "Azure Ingress/Egress Gateway"
// Two interface Azure ingress/egress site
type AzureVnetIngressEgressGwReplaceType struct {
	// Manage Network Policy
	//
	// x-displayName: "Manage Network Policy"
	// x-required
	// Manage Network Policy via this view
	//
	// Types that are valid to be assigned to NetworkPolicyChoice:
	//	*AzureVnetIngressEgressGwReplaceType_NoNetworkPolicy
	//	*AzureVnetIngressEgressGwReplaceType_ActiveNetworkPolicies
	NetworkPolicyChoice isAzureVnetIngressEgressGwReplaceType_NetworkPolicyChoice `protobuf_oneof:"network_policy_choice"`
	// Manage Forward Proxy
	//
	// x-displayName: "Manage Forward Proxy"
	// x-required
	// Manage Forward Proxy for this site
	//
	// Types that are valid to be assigned to ForwardProxyChoice:
	//	*AzureVnetIngressEgressGwReplaceType_NoForwardProxy
	//	*AzureVnetIngressEgressGwReplaceType_ActiveForwardProxyPolicies
	//	*AzureVnetIngressEgressGwReplaceType_ForwardProxyAllowAll
	ForwardProxyChoice isAzureVnetIngressEgressGwReplaceType_ForwardProxyChoice `protobuf_oneof:"forward_proxy_choice"`
	// Manage Static Routes for Inside Network
	//
	// x-displayName: "Manage Static Routes for Inside Network"
	// x-required
	// Add static routes to inside network. Used to reach indirectly connected subnets.
	//
	// Types that are valid to be assigned to InsideStaticRouteChoice:
	//	*AzureVnetIngressEgressGwReplaceType_NoInsideStaticRoutes
	//	*AzureVnetIngressEgressGwReplaceType_InsideStaticRoutes
	InsideStaticRouteChoice isAzureVnetIngressEgressGwReplaceType_InsideStaticRouteChoice `protobuf_oneof:"inside_static_route_choice"`
	// Manage Static Routes for Outside Network
	//
	// x-displayName: "Manage Static Routes for Outside Network"
	// x-required
	// Add static routes to outside network. Used to reach indirectly connected subnets.
	//
	// Types that are valid to be assigned to OutsideStaticRouteChoice:
	//	*AzureVnetIngressEgressGwReplaceType_NoOutsideStaticRoutes
	//	*AzureVnetIngressEgressGwReplaceType_OutsideStaticRoutes
	OutsideStaticRouteChoice isAzureVnetIngressEgressGwReplaceType_OutsideStaticRouteChoice `protobuf_oneof:"outside_static_route_choice"`
	// Connect to Global Network
	//
	// x-displayName: "Select Global Networks to Connect"
	// x-required
	// Select global networks to connect to site local network
	//
	// Types that are valid to be assigned to GlobalNetworkChoice:
	//	*AzureVnetIngressEgressGwReplaceType_NoGlobalNetwork
	//	*AzureVnetIngressEgressGwReplaceType_GlobalNetworkList
	GlobalNetworkChoice isAzureVnetIngressEgressGwReplaceType_GlobalNetworkChoice `protobuf_oneof:"global_network_choice"`
}

func (m *AzureVnetIngressEgressGwReplaceType) Reset()      { *m = AzureVnetIngressEgressGwReplaceType{} }
func (*AzureVnetIngressEgressGwReplaceType) ProtoMessage() {}
func (*AzureVnetIngressEgressGwReplaceType) Descriptor() ([]byte, []int) {
	return fileDescriptorTypes, []int{4}
}

type isAzureVnetIngressEgressGwReplaceType_NetworkPolicyChoice interface {
	isAzureVnetIngressEgressGwReplaceType_NetworkPolicyChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isAzureVnetIngressEgressGwReplaceType_ForwardProxyChoice interface {
	isAzureVnetIngressEgressGwReplaceType_ForwardProxyChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isAzureVnetIngressEgressGwReplaceType_InsideStaticRouteChoice interface {
	isAzureVnetIngressEgressGwReplaceType_InsideStaticRouteChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isAzureVnetIngressEgressGwReplaceType_OutsideStaticRouteChoice interface {
	isAzureVnetIngressEgressGwReplaceType_OutsideStaticRouteChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isAzureVnetIngressEgressGwReplaceType_GlobalNetworkChoice interface {
	isAzureVnetIngressEgressGwReplaceType_GlobalNetworkChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type AzureVnetIngressEgressGwReplaceType_NoNetworkPolicy struct {
	NoNetworkPolicy *ves_io_schema4.Empty `protobuf:"bytes,2,opt,name=no_network_policy,json=noNetworkPolicy,oneof"`
}
type AzureVnetIngressEgressGwReplaceType_ActiveNetworkPolicies struct {
	ActiveNetworkPolicies *ves_io_schema_network_firewall.ActiveNetworkPoliciesType `protobuf:"bytes,10,opt,name=active_network_policies,json=activeNetworkPolicies,oneof"`
}
type AzureVnetIngressEgressGwReplaceType_NoForwardProxy struct {
	NoForwardProxy *ves_io_schema4.Empty `protobuf:"bytes,4,opt,name=no_forward_proxy,json=noForwardProxy,oneof"`
}
type AzureVnetIngressEgressGwReplaceType_ActiveForwardProxyPolicies struct {
	ActiveForwardProxyPolicies *ves_io_schema_network_firewall.ActiveForwardProxyPoliciesType `protobuf:"bytes,9,opt,name=active_forward_proxy_policies,json=activeForwardProxyPolicies,oneof"`
}
type AzureVnetIngressEgressGwReplaceType_ForwardProxyAllowAll struct {
	ForwardProxyAllowAll *ves_io_schema4.Empty `protobuf:"bytes,20,opt,name=forward_proxy_allow_all,json=forwardProxyAllowAll,oneof"`
}
type AzureVnetIngressEgressGwReplaceType_NoInsideStaticRoutes struct {
	NoInsideStaticRoutes *ves_io_schema4.Empty `protobuf:"bytes,12,opt,name=no_inside_static_routes,json=noInsideStaticRoutes,oneof"`
}
type AzureVnetIngressEgressGwReplaceType_InsideStaticRoutes struct {
	InsideStaticRoutes *ves_io_schema_views1.SiteStaticRoutesListType `protobuf:"bytes,13,opt,name=inside_static_routes,json=insideStaticRoutes,oneof"`
}
type AzureVnetIngressEgressGwReplaceType_NoOutsideStaticRoutes struct {
	NoOutsideStaticRoutes *ves_io_schema4.Empty `protobuf:"bytes,15,opt,name=no_outside_static_routes,json=noOutsideStaticRoutes,oneof"`
}
type AzureVnetIngressEgressGwReplaceType_OutsideStaticRoutes struct {
	OutsideStaticRoutes *ves_io_schema_views1.SiteStaticRoutesListType `protobuf:"bytes,16,opt,name=outside_static_routes,json=outsideStaticRoutes,oneof"`
}
type AzureVnetIngressEgressGwReplaceType_NoGlobalNetwork struct {
	NoGlobalNetwork *ves_io_schema4.Empty `protobuf:"bytes,18,opt,name=no_global_network,json=noGlobalNetwork,oneof"`
}
type AzureVnetIngressEgressGwReplaceType_GlobalNetworkList struct {
	GlobalNetworkList *ves_io_schema_views1.GlobalNetworkConnectionListType `protobuf:"bytes,19,opt,name=global_network_list,json=globalNetworkList,oneof"`
}

func (*AzureVnetIngressEgressGwReplaceType_NoNetworkPolicy) isAzureVnetIngressEgressGwReplaceType_NetworkPolicyChoice() {
}
func (*AzureVnetIngressEgressGwReplaceType_ActiveNetworkPolicies) isAzureVnetIngressEgressGwReplaceType_NetworkPolicyChoice() {
}
func (*AzureVnetIngressEgressGwReplaceType_NoForwardProxy) isAzureVnetIngressEgressGwReplaceType_ForwardProxyChoice() {
}
func (*AzureVnetIngressEgressGwReplaceType_ActiveForwardProxyPolicies) isAzureVnetIngressEgressGwReplaceType_ForwardProxyChoice() {
}
func (*AzureVnetIngressEgressGwReplaceType_ForwardProxyAllowAll) isAzureVnetIngressEgressGwReplaceType_ForwardProxyChoice() {
}
func (*AzureVnetIngressEgressGwReplaceType_NoInsideStaticRoutes) isAzureVnetIngressEgressGwReplaceType_InsideStaticRouteChoice() {
}
func (*AzureVnetIngressEgressGwReplaceType_InsideStaticRoutes) isAzureVnetIngressEgressGwReplaceType_InsideStaticRouteChoice() {
}
func (*AzureVnetIngressEgressGwReplaceType_NoOutsideStaticRoutes) isAzureVnetIngressEgressGwReplaceType_OutsideStaticRouteChoice() {
}
func (*AzureVnetIngressEgressGwReplaceType_OutsideStaticRoutes) isAzureVnetIngressEgressGwReplaceType_OutsideStaticRouteChoice() {
}
func (*AzureVnetIngressEgressGwReplaceType_NoGlobalNetwork) isAzureVnetIngressEgressGwReplaceType_GlobalNetworkChoice() {
}
func (*AzureVnetIngressEgressGwReplaceType_GlobalNetworkList) isAzureVnetIngressEgressGwReplaceType_GlobalNetworkChoice() {
}

func (m *AzureVnetIngressEgressGwReplaceType) GetNetworkPolicyChoice() isAzureVnetIngressEgressGwReplaceType_NetworkPolicyChoice {
	if m != nil {
		return m.NetworkPolicyChoice
	}
	return nil
}
func (m *AzureVnetIngressEgressGwReplaceType) GetForwardProxyChoice() isAzureVnetIngressEgressGwReplaceType_ForwardProxyChoice {
	if m != nil {
		return m.ForwardProxyChoice
	}
	return nil
}
func (m *AzureVnetIngressEgressGwReplaceType) GetInsideStaticRouteChoice() isAzureVnetIngressEgressGwReplaceType_InsideStaticRouteChoice {
	if m != nil {
		return m.InsideStaticRouteChoice
	}
	return nil
}
func (m *AzureVnetIngressEgressGwReplaceType) GetOutsideStaticRouteChoice() isAzureVnetIngressEgressGwReplaceType_OutsideStaticRouteChoice {
	if m != nil {
		return m.OutsideStaticRouteChoice
	}
	return nil
}
func (m *AzureVnetIngressEgressGwReplaceType) GetGlobalNetworkChoice() isAzureVnetIngressEgressGwReplaceType_GlobalNetworkChoice {
	if m != nil {
		return m.GlobalNetworkChoice
	}
	return nil
}

func (m *AzureVnetIngressEgressGwReplaceType) GetNoNetworkPolicy() *ves_io_schema4.Empty {
	if x, ok := m.GetNetworkPolicyChoice().(*AzureVnetIngressEgressGwReplaceType_NoNetworkPolicy); ok {
		return x.NoNetworkPolicy
	}
	return nil
}

func (m *AzureVnetIngressEgressGwReplaceType) GetActiveNetworkPolicies() *ves_io_schema_network_firewall.ActiveNetworkPoliciesType {
	if x, ok := m.GetNetworkPolicyChoice().(*AzureVnetIngressEgressGwReplaceType_ActiveNetworkPolicies); ok {
		return x.ActiveNetworkPolicies
	}
	return nil
}

func (m *AzureVnetIngressEgressGwReplaceType) GetNoForwardProxy() *ves_io_schema4.Empty {
	if x, ok := m.GetForwardProxyChoice().(*AzureVnetIngressEgressGwReplaceType_NoForwardProxy); ok {
		return x.NoForwardProxy
	}
	return nil
}

func (m *AzureVnetIngressEgressGwReplaceType) GetActiveForwardProxyPolicies() *ves_io_schema_network_firewall.ActiveForwardProxyPoliciesType {
	if x, ok := m.GetForwardProxyChoice().(*AzureVnetIngressEgressGwReplaceType_ActiveForwardProxyPolicies); ok {
		return x.ActiveForwardProxyPolicies
	}
	return nil
}

func (m *AzureVnetIngressEgressGwReplaceType) GetForwardProxyAllowAll() *ves_io_schema4.Empty {
	if x, ok := m.GetForwardProxyChoice().(*AzureVnetIngressEgressGwReplaceType_ForwardProxyAllowAll); ok {
		return x.ForwardProxyAllowAll
	}
	return nil
}

func (m *AzureVnetIngressEgressGwReplaceType) GetNoInsideStaticRoutes() *ves_io_schema4.Empty {
	if x, ok := m.GetInsideStaticRouteChoice().(*AzureVnetIngressEgressGwReplaceType_NoInsideStaticRoutes); ok {
		return x.NoInsideStaticRoutes
	}
	return nil
}

func (m *AzureVnetIngressEgressGwReplaceType) GetInsideStaticRoutes() *ves_io_schema_views1.SiteStaticRoutesListType {
	if x, ok := m.GetInsideStaticRouteChoice().(*AzureVnetIngressEgressGwReplaceType_InsideStaticRoutes); ok {
		return x.InsideStaticRoutes
	}
	return nil
}

func (m *AzureVnetIngressEgressGwReplaceType) GetNoOutsideStaticRoutes() *ves_io_schema4.Empty {
	if x, ok := m.GetOutsideStaticRouteChoice().(*AzureVnetIngressEgressGwReplaceType_NoOutsideStaticRoutes); ok {
		return x.NoOutsideStaticRoutes
	}
	return nil
}

func (m *AzureVnetIngressEgressGwReplaceType) GetOutsideStaticRoutes() *ves_io_schema_views1.SiteStaticRoutesListType {
	if x, ok := m.GetOutsideStaticRouteChoice().(*AzureVnetIngressEgressGwReplaceType_OutsideStaticRoutes); ok {
		return x.OutsideStaticRoutes
	}
	return nil
}

func (m *AzureVnetIngressEgressGwReplaceType) GetNoGlobalNetwork() *ves_io_schema4.Empty {
	if x, ok := m.GetGlobalNetworkChoice().(*AzureVnetIngressEgressGwReplaceType_NoGlobalNetwork); ok {
		return x.NoGlobalNetwork
	}
	return nil
}

func (m *AzureVnetIngressEgressGwReplaceType) GetGlobalNetworkList() *ves_io_schema_views1.GlobalNetworkConnectionListType {
	if x, ok := m.GetGlobalNetworkChoice().(*AzureVnetIngressEgressGwReplaceType_GlobalNetworkList); ok {
		return x.GlobalNetworkList
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*AzureVnetIngressEgressGwReplaceType) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _AzureVnetIngressEgressGwReplaceType_OneofMarshaler, _AzureVnetIngressEgressGwReplaceType_OneofUnmarshaler, _AzureVnetIngressEgressGwReplaceType_OneofSizer, []interface{}{
		(*AzureVnetIngressEgressGwReplaceType_NoNetworkPolicy)(nil),
		(*AzureVnetIngressEgressGwReplaceType_ActiveNetworkPolicies)(nil),
		(*AzureVnetIngressEgressGwReplaceType_NoForwardProxy)(nil),
		(*AzureVnetIngressEgressGwReplaceType_ActiveForwardProxyPolicies)(nil),
		(*AzureVnetIngressEgressGwReplaceType_ForwardProxyAllowAll)(nil),
		(*AzureVnetIngressEgressGwReplaceType_NoInsideStaticRoutes)(nil),
		(*AzureVnetIngressEgressGwReplaceType_InsideStaticRoutes)(nil),
		(*AzureVnetIngressEgressGwReplaceType_NoOutsideStaticRoutes)(nil),
		(*AzureVnetIngressEgressGwReplaceType_OutsideStaticRoutes)(nil),
		(*AzureVnetIngressEgressGwReplaceType_NoGlobalNetwork)(nil),
		(*AzureVnetIngressEgressGwReplaceType_GlobalNetworkList)(nil),
	}
}

func _AzureVnetIngressEgressGwReplaceType_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*AzureVnetIngressEgressGwReplaceType)
	// network_policy_choice
	switch x := m.NetworkPolicyChoice.(type) {
	case *AzureVnetIngressEgressGwReplaceType_NoNetworkPolicy:
		_ = b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.NoNetworkPolicy); err != nil {
			return err
		}
	case *AzureVnetIngressEgressGwReplaceType_ActiveNetworkPolicies:
		_ = b.EncodeVarint(10<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ActiveNetworkPolicies); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("AzureVnetIngressEgressGwReplaceType.NetworkPolicyChoice has unexpected type %T", x)
	}
	// forward_proxy_choice
	switch x := m.ForwardProxyChoice.(type) {
	case *AzureVnetIngressEgressGwReplaceType_NoForwardProxy:
		_ = b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.NoForwardProxy); err != nil {
			return err
		}
	case *AzureVnetIngressEgressGwReplaceType_ActiveForwardProxyPolicies:
		_ = b.EncodeVarint(9<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ActiveForwardProxyPolicies); err != nil {
			return err
		}
	case *AzureVnetIngressEgressGwReplaceType_ForwardProxyAllowAll:
		_ = b.EncodeVarint(20<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ForwardProxyAllowAll); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("AzureVnetIngressEgressGwReplaceType.ForwardProxyChoice has unexpected type %T", x)
	}
	// inside_static_route_choice
	switch x := m.InsideStaticRouteChoice.(type) {
	case *AzureVnetIngressEgressGwReplaceType_NoInsideStaticRoutes:
		_ = b.EncodeVarint(12<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.NoInsideStaticRoutes); err != nil {
			return err
		}
	case *AzureVnetIngressEgressGwReplaceType_InsideStaticRoutes:
		_ = b.EncodeVarint(13<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.InsideStaticRoutes); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("AzureVnetIngressEgressGwReplaceType.InsideStaticRouteChoice has unexpected type %T", x)
	}
	// outside_static_route_choice
	switch x := m.OutsideStaticRouteChoice.(type) {
	case *AzureVnetIngressEgressGwReplaceType_NoOutsideStaticRoutes:
		_ = b.EncodeVarint(15<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.NoOutsideStaticRoutes); err != nil {
			return err
		}
	case *AzureVnetIngressEgressGwReplaceType_OutsideStaticRoutes:
		_ = b.EncodeVarint(16<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.OutsideStaticRoutes); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("AzureVnetIngressEgressGwReplaceType.OutsideStaticRouteChoice has unexpected type %T", x)
	}
	// global_network_choice
	switch x := m.GlobalNetworkChoice.(type) {
	case *AzureVnetIngressEgressGwReplaceType_NoGlobalNetwork:
		_ = b.EncodeVarint(18<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.NoGlobalNetwork); err != nil {
			return err
		}
	case *AzureVnetIngressEgressGwReplaceType_GlobalNetworkList:
		_ = b.EncodeVarint(19<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.GlobalNetworkList); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("AzureVnetIngressEgressGwReplaceType.GlobalNetworkChoice has unexpected type %T", x)
	}
	return nil
}

func _AzureVnetIngressEgressGwReplaceType_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*AzureVnetIngressEgressGwReplaceType)
	switch tag {
	case 2: // network_policy_choice.no_network_policy
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.NetworkPolicyChoice = &AzureVnetIngressEgressGwReplaceType_NoNetworkPolicy{msg}
		return true, err
	case 10: // network_policy_choice.active_network_policies
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema_network_firewall.ActiveNetworkPoliciesType)
		err := b.DecodeMessage(msg)
		m.NetworkPolicyChoice = &AzureVnetIngressEgressGwReplaceType_ActiveNetworkPolicies{msg}
		return true, err
	case 4: // forward_proxy_choice.no_forward_proxy
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.ForwardProxyChoice = &AzureVnetIngressEgressGwReplaceType_NoForwardProxy{msg}
		return true, err
	case 9: // forward_proxy_choice.active_forward_proxy_policies
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema_network_firewall.ActiveForwardProxyPoliciesType)
		err := b.DecodeMessage(msg)
		m.ForwardProxyChoice = &AzureVnetIngressEgressGwReplaceType_ActiveForwardProxyPolicies{msg}
		return true, err
	case 20: // forward_proxy_choice.forward_proxy_allow_all
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.ForwardProxyChoice = &AzureVnetIngressEgressGwReplaceType_ForwardProxyAllowAll{msg}
		return true, err
	case 12: // inside_static_route_choice.no_inside_static_routes
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.InsideStaticRouteChoice = &AzureVnetIngressEgressGwReplaceType_NoInsideStaticRoutes{msg}
		return true, err
	case 13: // inside_static_route_choice.inside_static_routes
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema_views1.SiteStaticRoutesListType)
		err := b.DecodeMessage(msg)
		m.InsideStaticRouteChoice = &AzureVnetIngressEgressGwReplaceType_InsideStaticRoutes{msg}
		return true, err
	case 15: // outside_static_route_choice.no_outside_static_routes
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.OutsideStaticRouteChoice = &AzureVnetIngressEgressGwReplaceType_NoOutsideStaticRoutes{msg}
		return true, err
	case 16: // outside_static_route_choice.outside_static_routes
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema_views1.SiteStaticRoutesListType)
		err := b.DecodeMessage(msg)
		m.OutsideStaticRouteChoice = &AzureVnetIngressEgressGwReplaceType_OutsideStaticRoutes{msg}
		return true, err
	case 18: // global_network_choice.no_global_network
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.GlobalNetworkChoice = &AzureVnetIngressEgressGwReplaceType_NoGlobalNetwork{msg}
		return true, err
	case 19: // global_network_choice.global_network_list
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema_views1.GlobalNetworkConnectionListType)
		err := b.DecodeMessage(msg)
		m.GlobalNetworkChoice = &AzureVnetIngressEgressGwReplaceType_GlobalNetworkList{msg}
		return true, err
	default:
		return false, nil
	}
}

func _AzureVnetIngressEgressGwReplaceType_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*AzureVnetIngressEgressGwReplaceType)
	// network_policy_choice
	switch x := m.NetworkPolicyChoice.(type) {
	case *AzureVnetIngressEgressGwReplaceType_NoNetworkPolicy:
		s := proto.Size(x.NoNetworkPolicy)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *AzureVnetIngressEgressGwReplaceType_ActiveNetworkPolicies:
		s := proto.Size(x.ActiveNetworkPolicies)
		n += proto.SizeVarint(10<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	// forward_proxy_choice
	switch x := m.ForwardProxyChoice.(type) {
	case *AzureVnetIngressEgressGwReplaceType_NoForwardProxy:
		s := proto.Size(x.NoForwardProxy)
		n += proto.SizeVarint(4<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *AzureVnetIngressEgressGwReplaceType_ActiveForwardProxyPolicies:
		s := proto.Size(x.ActiveForwardProxyPolicies)
		n += proto.SizeVarint(9<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *AzureVnetIngressEgressGwReplaceType_ForwardProxyAllowAll:
		s := proto.Size(x.ForwardProxyAllowAll)
		n += proto.SizeVarint(20<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	// inside_static_route_choice
	switch x := m.InsideStaticRouteChoice.(type) {
	case *AzureVnetIngressEgressGwReplaceType_NoInsideStaticRoutes:
		s := proto.Size(x.NoInsideStaticRoutes)
		n += proto.SizeVarint(12<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *AzureVnetIngressEgressGwReplaceType_InsideStaticRoutes:
		s := proto.Size(x.InsideStaticRoutes)
		n += proto.SizeVarint(13<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	// outside_static_route_choice
	switch x := m.OutsideStaticRouteChoice.(type) {
	case *AzureVnetIngressEgressGwReplaceType_NoOutsideStaticRoutes:
		s := proto.Size(x.NoOutsideStaticRoutes)
		n += proto.SizeVarint(15<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *AzureVnetIngressEgressGwReplaceType_OutsideStaticRoutes:
		s := proto.Size(x.OutsideStaticRoutes)
		n += proto.SizeVarint(16<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	// global_network_choice
	switch x := m.GlobalNetworkChoice.(type) {
	case *AzureVnetIngressEgressGwReplaceType_NoGlobalNetwork:
		s := proto.Size(x.NoGlobalNetwork)
		n += proto.SizeVarint(18<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *AzureVnetIngressEgressGwReplaceType_GlobalNetworkList:
		s := proto.Size(x.GlobalNetworkList)
		n += proto.SizeVarint(19<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// Azure VoltStack Cluster
//
// x-displayName: "Azure VoltStack Cluster"
// Voltstack cluster of single interface Azure nodes
type AzureVnetVoltstackClusterReplaceType struct {
	// Manage Network Policy
	//
	// x-displayName: "Manage Network Policy"
	// x-required
	// Manage Network Policy via this view
	//
	// Types that are valid to be assigned to NetworkPolicyChoice:
	//	*AzureVnetVoltstackClusterReplaceType_NoNetworkPolicy
	//	*AzureVnetVoltstackClusterReplaceType_ActiveNetworkPolicies
	NetworkPolicyChoice isAzureVnetVoltstackClusterReplaceType_NetworkPolicyChoice `protobuf_oneof:"network_policy_choice"`
	// Manage Forward Proxy
	//
	// x-displayName: "Manage Forward Proxy"
	// x-required
	// Manage Forward Proxy for this site
	//
	// Types that are valid to be assigned to ForwardProxyChoice:
	//	*AzureVnetVoltstackClusterReplaceType_NoForwardProxy
	//	*AzureVnetVoltstackClusterReplaceType_ActiveForwardProxyPolicies
	//	*AzureVnetVoltstackClusterReplaceType_ForwardProxyAllowAll
	ForwardProxyChoice isAzureVnetVoltstackClusterReplaceType_ForwardProxyChoice `protobuf_oneof:"forward_proxy_choice"`
	// Manage Static Routes for Site Local Network
	//
	// x-displayName: "Manage Static Routes for Site Local Network"
	// x-required
	// Add static routes to site local network. Used to reach indirectly connected subnets.
	//
	// Types that are valid to be assigned to OutsideStaticRouteChoice:
	//	*AzureVnetVoltstackClusterReplaceType_NoOutsideStaticRoutes
	//	*AzureVnetVoltstackClusterReplaceType_OutsideStaticRoutes
	OutsideStaticRouteChoice isAzureVnetVoltstackClusterReplaceType_OutsideStaticRouteChoice `protobuf_oneof:"outside_static_route_choice"`
	// Connect to Global Network
	//
	// x-displayName: "Select Global Networks to Connect"
	// x-required
	// Select global networks to connect to inside or outside network
	//
	// Types that are valid to be assigned to GlobalNetworkChoice:
	//	*AzureVnetVoltstackClusterReplaceType_NoGlobalNetwork
	//	*AzureVnetVoltstackClusterReplaceType_GlobalNetworkList
	GlobalNetworkChoice isAzureVnetVoltstackClusterReplaceType_GlobalNetworkChoice `protobuf_oneof:"global_network_choice"`
}

func (m *AzureVnetVoltstackClusterReplaceType) Reset()      { *m = AzureVnetVoltstackClusterReplaceType{} }
func (*AzureVnetVoltstackClusterReplaceType) ProtoMessage() {}
func (*AzureVnetVoltstackClusterReplaceType) Descriptor() ([]byte, []int) {
	return fileDescriptorTypes, []int{5}
}

type isAzureVnetVoltstackClusterReplaceType_NetworkPolicyChoice interface {
	isAzureVnetVoltstackClusterReplaceType_NetworkPolicyChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isAzureVnetVoltstackClusterReplaceType_ForwardProxyChoice interface {
	isAzureVnetVoltstackClusterReplaceType_ForwardProxyChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isAzureVnetVoltstackClusterReplaceType_OutsideStaticRouteChoice interface {
	isAzureVnetVoltstackClusterReplaceType_OutsideStaticRouteChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isAzureVnetVoltstackClusterReplaceType_GlobalNetworkChoice interface {
	isAzureVnetVoltstackClusterReplaceType_GlobalNetworkChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type AzureVnetVoltstackClusterReplaceType_NoNetworkPolicy struct {
	NoNetworkPolicy *ves_io_schema4.Empty `protobuf:"bytes,4,opt,name=no_network_policy,json=noNetworkPolicy,oneof"`
}
type AzureVnetVoltstackClusterReplaceType_ActiveNetworkPolicies struct {
	ActiveNetworkPolicies *ves_io_schema_network_firewall.ActiveNetworkPoliciesType `protobuf:"bytes,5,opt,name=active_network_policies,json=activeNetworkPolicies,oneof"`
}
type AzureVnetVoltstackClusterReplaceType_NoForwardProxy struct {
	NoForwardProxy *ves_io_schema4.Empty `protobuf:"bytes,7,opt,name=no_forward_proxy,json=noForwardProxy,oneof"`
}
type AzureVnetVoltstackClusterReplaceType_ActiveForwardProxyPolicies struct {
	ActiveForwardProxyPolicies *ves_io_schema_network_firewall.ActiveForwardProxyPoliciesType `protobuf:"bytes,8,opt,name=active_forward_proxy_policies,json=activeForwardProxyPolicies,oneof"`
}
type AzureVnetVoltstackClusterReplaceType_ForwardProxyAllowAll struct {
	ForwardProxyAllowAll *ves_io_schema4.Empty `protobuf:"bytes,15,opt,name=forward_proxy_allow_all,json=forwardProxyAllowAll,oneof"`
}
type AzureVnetVoltstackClusterReplaceType_NoOutsideStaticRoutes struct {
	NoOutsideStaticRoutes *ves_io_schema4.Empty `protobuf:"bytes,10,opt,name=no_outside_static_routes,json=noOutsideStaticRoutes,oneof"`
}
type AzureVnetVoltstackClusterReplaceType_OutsideStaticRoutes struct {
	OutsideStaticRoutes *ves_io_schema_views1.SiteStaticRoutesListType `protobuf:"bytes,11,opt,name=outside_static_routes,json=outsideStaticRoutes,oneof"`
}
type AzureVnetVoltstackClusterReplaceType_NoGlobalNetwork struct {
	NoGlobalNetwork *ves_io_schema4.Empty `protobuf:"bytes,13,opt,name=no_global_network,json=noGlobalNetwork,oneof"`
}
type AzureVnetVoltstackClusterReplaceType_GlobalNetworkList struct {
	GlobalNetworkList *ves_io_schema_views1.GlobalNetworkConnectionListType `protobuf:"bytes,14,opt,name=global_network_list,json=globalNetworkList,oneof"`
}

func (*AzureVnetVoltstackClusterReplaceType_NoNetworkPolicy) isAzureVnetVoltstackClusterReplaceType_NetworkPolicyChoice() {
}
func (*AzureVnetVoltstackClusterReplaceType_ActiveNetworkPolicies) isAzureVnetVoltstackClusterReplaceType_NetworkPolicyChoice() {
}
func (*AzureVnetVoltstackClusterReplaceType_NoForwardProxy) isAzureVnetVoltstackClusterReplaceType_ForwardProxyChoice() {
}
func (*AzureVnetVoltstackClusterReplaceType_ActiveForwardProxyPolicies) isAzureVnetVoltstackClusterReplaceType_ForwardProxyChoice() {
}
func (*AzureVnetVoltstackClusterReplaceType_ForwardProxyAllowAll) isAzureVnetVoltstackClusterReplaceType_ForwardProxyChoice() {
}
func (*AzureVnetVoltstackClusterReplaceType_NoOutsideStaticRoutes) isAzureVnetVoltstackClusterReplaceType_OutsideStaticRouteChoice() {
}
func (*AzureVnetVoltstackClusterReplaceType_OutsideStaticRoutes) isAzureVnetVoltstackClusterReplaceType_OutsideStaticRouteChoice() {
}
func (*AzureVnetVoltstackClusterReplaceType_NoGlobalNetwork) isAzureVnetVoltstackClusterReplaceType_GlobalNetworkChoice() {
}
func (*AzureVnetVoltstackClusterReplaceType_GlobalNetworkList) isAzureVnetVoltstackClusterReplaceType_GlobalNetworkChoice() {
}

func (m *AzureVnetVoltstackClusterReplaceType) GetNetworkPolicyChoice() isAzureVnetVoltstackClusterReplaceType_NetworkPolicyChoice {
	if m != nil {
		return m.NetworkPolicyChoice
	}
	return nil
}
func (m *AzureVnetVoltstackClusterReplaceType) GetForwardProxyChoice() isAzureVnetVoltstackClusterReplaceType_ForwardProxyChoice {
	if m != nil {
		return m.ForwardProxyChoice
	}
	return nil
}
func (m *AzureVnetVoltstackClusterReplaceType) GetOutsideStaticRouteChoice() isAzureVnetVoltstackClusterReplaceType_OutsideStaticRouteChoice {
	if m != nil {
		return m.OutsideStaticRouteChoice
	}
	return nil
}
func (m *AzureVnetVoltstackClusterReplaceType) GetGlobalNetworkChoice() isAzureVnetVoltstackClusterReplaceType_GlobalNetworkChoice {
	if m != nil {
		return m.GlobalNetworkChoice
	}
	return nil
}

func (m *AzureVnetVoltstackClusterReplaceType) GetNoNetworkPolicy() *ves_io_schema4.Empty {
	if x, ok := m.GetNetworkPolicyChoice().(*AzureVnetVoltstackClusterReplaceType_NoNetworkPolicy); ok {
		return x.NoNetworkPolicy
	}
	return nil
}

func (m *AzureVnetVoltstackClusterReplaceType) GetActiveNetworkPolicies() *ves_io_schema_network_firewall.ActiveNetworkPoliciesType {
	if x, ok := m.GetNetworkPolicyChoice().(*AzureVnetVoltstackClusterReplaceType_ActiveNetworkPolicies); ok {
		return x.ActiveNetworkPolicies
	}
	return nil
}

func (m *AzureVnetVoltstackClusterReplaceType) GetNoForwardProxy() *ves_io_schema4.Empty {
	if x, ok := m.GetForwardProxyChoice().(*AzureVnetVoltstackClusterReplaceType_NoForwardProxy); ok {
		return x.NoForwardProxy
	}
	return nil
}

func (m *AzureVnetVoltstackClusterReplaceType) GetActiveForwardProxyPolicies() *ves_io_schema_network_firewall.ActiveForwardProxyPoliciesType {
	if x, ok := m.GetForwardProxyChoice().(*AzureVnetVoltstackClusterReplaceType_ActiveForwardProxyPolicies); ok {
		return x.ActiveForwardProxyPolicies
	}
	return nil
}

func (m *AzureVnetVoltstackClusterReplaceType) GetForwardProxyAllowAll() *ves_io_schema4.Empty {
	if x, ok := m.GetForwardProxyChoice().(*AzureVnetVoltstackClusterReplaceType_ForwardProxyAllowAll); ok {
		return x.ForwardProxyAllowAll
	}
	return nil
}

func (m *AzureVnetVoltstackClusterReplaceType) GetNoOutsideStaticRoutes() *ves_io_schema4.Empty {
	if x, ok := m.GetOutsideStaticRouteChoice().(*AzureVnetVoltstackClusterReplaceType_NoOutsideStaticRoutes); ok {
		return x.NoOutsideStaticRoutes
	}
	return nil
}

func (m *AzureVnetVoltstackClusterReplaceType) GetOutsideStaticRoutes() *ves_io_schema_views1.SiteStaticRoutesListType {
	if x, ok := m.GetOutsideStaticRouteChoice().(*AzureVnetVoltstackClusterReplaceType_OutsideStaticRoutes); ok {
		return x.OutsideStaticRoutes
	}
	return nil
}

func (m *AzureVnetVoltstackClusterReplaceType) GetNoGlobalNetwork() *ves_io_schema4.Empty {
	if x, ok := m.GetGlobalNetworkChoice().(*AzureVnetVoltstackClusterReplaceType_NoGlobalNetwork); ok {
		return x.NoGlobalNetwork
	}
	return nil
}

func (m *AzureVnetVoltstackClusterReplaceType) GetGlobalNetworkList() *ves_io_schema_views1.GlobalNetworkConnectionListType {
	if x, ok := m.GetGlobalNetworkChoice().(*AzureVnetVoltstackClusterReplaceType_GlobalNetworkList); ok {
		return x.GlobalNetworkList
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*AzureVnetVoltstackClusterReplaceType) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _AzureVnetVoltstackClusterReplaceType_OneofMarshaler, _AzureVnetVoltstackClusterReplaceType_OneofUnmarshaler, _AzureVnetVoltstackClusterReplaceType_OneofSizer, []interface{}{
		(*AzureVnetVoltstackClusterReplaceType_NoNetworkPolicy)(nil),
		(*AzureVnetVoltstackClusterReplaceType_ActiveNetworkPolicies)(nil),
		(*AzureVnetVoltstackClusterReplaceType_NoForwardProxy)(nil),
		(*AzureVnetVoltstackClusterReplaceType_ActiveForwardProxyPolicies)(nil),
		(*AzureVnetVoltstackClusterReplaceType_ForwardProxyAllowAll)(nil),
		(*AzureVnetVoltstackClusterReplaceType_NoOutsideStaticRoutes)(nil),
		(*AzureVnetVoltstackClusterReplaceType_OutsideStaticRoutes)(nil),
		(*AzureVnetVoltstackClusterReplaceType_NoGlobalNetwork)(nil),
		(*AzureVnetVoltstackClusterReplaceType_GlobalNetworkList)(nil),
	}
}

func _AzureVnetVoltstackClusterReplaceType_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*AzureVnetVoltstackClusterReplaceType)
	// network_policy_choice
	switch x := m.NetworkPolicyChoice.(type) {
	case *AzureVnetVoltstackClusterReplaceType_NoNetworkPolicy:
		_ = b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.NoNetworkPolicy); err != nil {
			return err
		}
	case *AzureVnetVoltstackClusterReplaceType_ActiveNetworkPolicies:
		_ = b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ActiveNetworkPolicies); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("AzureVnetVoltstackClusterReplaceType.NetworkPolicyChoice has unexpected type %T", x)
	}
	// forward_proxy_choice
	switch x := m.ForwardProxyChoice.(type) {
	case *AzureVnetVoltstackClusterReplaceType_NoForwardProxy:
		_ = b.EncodeVarint(7<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.NoForwardProxy); err != nil {
			return err
		}
	case *AzureVnetVoltstackClusterReplaceType_ActiveForwardProxyPolicies:
		_ = b.EncodeVarint(8<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ActiveForwardProxyPolicies); err != nil {
			return err
		}
	case *AzureVnetVoltstackClusterReplaceType_ForwardProxyAllowAll:
		_ = b.EncodeVarint(15<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ForwardProxyAllowAll); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("AzureVnetVoltstackClusterReplaceType.ForwardProxyChoice has unexpected type %T", x)
	}
	// outside_static_route_choice
	switch x := m.OutsideStaticRouteChoice.(type) {
	case *AzureVnetVoltstackClusterReplaceType_NoOutsideStaticRoutes:
		_ = b.EncodeVarint(10<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.NoOutsideStaticRoutes); err != nil {
			return err
		}
	case *AzureVnetVoltstackClusterReplaceType_OutsideStaticRoutes:
		_ = b.EncodeVarint(11<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.OutsideStaticRoutes); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("AzureVnetVoltstackClusterReplaceType.OutsideStaticRouteChoice has unexpected type %T", x)
	}
	// global_network_choice
	switch x := m.GlobalNetworkChoice.(type) {
	case *AzureVnetVoltstackClusterReplaceType_NoGlobalNetwork:
		_ = b.EncodeVarint(13<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.NoGlobalNetwork); err != nil {
			return err
		}
	case *AzureVnetVoltstackClusterReplaceType_GlobalNetworkList:
		_ = b.EncodeVarint(14<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.GlobalNetworkList); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("AzureVnetVoltstackClusterReplaceType.GlobalNetworkChoice has unexpected type %T", x)
	}
	return nil
}

func _AzureVnetVoltstackClusterReplaceType_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*AzureVnetVoltstackClusterReplaceType)
	switch tag {
	case 4: // network_policy_choice.no_network_policy
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.NetworkPolicyChoice = &AzureVnetVoltstackClusterReplaceType_NoNetworkPolicy{msg}
		return true, err
	case 5: // network_policy_choice.active_network_policies
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema_network_firewall.ActiveNetworkPoliciesType)
		err := b.DecodeMessage(msg)
		m.NetworkPolicyChoice = &AzureVnetVoltstackClusterReplaceType_ActiveNetworkPolicies{msg}
		return true, err
	case 7: // forward_proxy_choice.no_forward_proxy
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.ForwardProxyChoice = &AzureVnetVoltstackClusterReplaceType_NoForwardProxy{msg}
		return true, err
	case 8: // forward_proxy_choice.active_forward_proxy_policies
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema_network_firewall.ActiveForwardProxyPoliciesType)
		err := b.DecodeMessage(msg)
		m.ForwardProxyChoice = &AzureVnetVoltstackClusterReplaceType_ActiveForwardProxyPolicies{msg}
		return true, err
	case 15: // forward_proxy_choice.forward_proxy_allow_all
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.ForwardProxyChoice = &AzureVnetVoltstackClusterReplaceType_ForwardProxyAllowAll{msg}
		return true, err
	case 10: // outside_static_route_choice.no_outside_static_routes
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.OutsideStaticRouteChoice = &AzureVnetVoltstackClusterReplaceType_NoOutsideStaticRoutes{msg}
		return true, err
	case 11: // outside_static_route_choice.outside_static_routes
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema_views1.SiteStaticRoutesListType)
		err := b.DecodeMessage(msg)
		m.OutsideStaticRouteChoice = &AzureVnetVoltstackClusterReplaceType_OutsideStaticRoutes{msg}
		return true, err
	case 13: // global_network_choice.no_global_network
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.GlobalNetworkChoice = &AzureVnetVoltstackClusterReplaceType_NoGlobalNetwork{msg}
		return true, err
	case 14: // global_network_choice.global_network_list
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema_views1.GlobalNetworkConnectionListType)
		err := b.DecodeMessage(msg)
		m.GlobalNetworkChoice = &AzureVnetVoltstackClusterReplaceType_GlobalNetworkList{msg}
		return true, err
	default:
		return false, nil
	}
}

func _AzureVnetVoltstackClusterReplaceType_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*AzureVnetVoltstackClusterReplaceType)
	// network_policy_choice
	switch x := m.NetworkPolicyChoice.(type) {
	case *AzureVnetVoltstackClusterReplaceType_NoNetworkPolicy:
		s := proto.Size(x.NoNetworkPolicy)
		n += proto.SizeVarint(4<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *AzureVnetVoltstackClusterReplaceType_ActiveNetworkPolicies:
		s := proto.Size(x.ActiveNetworkPolicies)
		n += proto.SizeVarint(5<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	// forward_proxy_choice
	switch x := m.ForwardProxyChoice.(type) {
	case *AzureVnetVoltstackClusterReplaceType_NoForwardProxy:
		s := proto.Size(x.NoForwardProxy)
		n += proto.SizeVarint(7<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *AzureVnetVoltstackClusterReplaceType_ActiveForwardProxyPolicies:
		s := proto.Size(x.ActiveForwardProxyPolicies)
		n += proto.SizeVarint(8<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *AzureVnetVoltstackClusterReplaceType_ForwardProxyAllowAll:
		s := proto.Size(x.ForwardProxyAllowAll)
		n += proto.SizeVarint(15<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	// outside_static_route_choice
	switch x := m.OutsideStaticRouteChoice.(type) {
	case *AzureVnetVoltstackClusterReplaceType_NoOutsideStaticRoutes:
		s := proto.Size(x.NoOutsideStaticRoutes)
		n += proto.SizeVarint(10<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *AzureVnetVoltstackClusterReplaceType_OutsideStaticRoutes:
		s := proto.Size(x.OutsideStaticRoutes)
		n += proto.SizeVarint(11<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	// global_network_choice
	switch x := m.GlobalNetworkChoice.(type) {
	case *AzureVnetVoltstackClusterReplaceType_NoGlobalNetwork:
		s := proto.Size(x.NoGlobalNetwork)
		n += proto.SizeVarint(13<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *AzureVnetVoltstackClusterReplaceType_GlobalNetworkList:
		s := proto.Size(x.GlobalNetworkList)
		n += proto.SizeVarint(14<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// GlobalSpecType
//
// x-displayName: "Global Specification"
// Shape of the Azure Vnet site specification
type GlobalSpecType struct {
	// Resource Group
	//
	// x-displayName: "Resource Group"
	// x-example: "my-resources"
	// x-required
	// Azure resource group for resources that will be created
	ResourceGroup string `protobuf:"bytes,1,opt,name=resource_group,json=resourceGroup,proto3" json:"resource_group,omitempty"`
	// Azure Region
	//
	// x-displayName: "Azure Region"
	// x-example: "East US"
	// x-required
	// name for azure region in which this site will be launched.
	AzureRegion string `protobuf:"bytes,2,opt,name=azure_region,json=azureRegion,proto3" json:"azure_region,omitempty"`
	// Vnet
	//
	// x-displayName: "Vnet"
	// x-required
	// Choice of using existing Vnet or create new Vnet
	Vnet *ves_io_schema_views1.AzureVnetChoiceType `protobuf:"bytes,3,opt,name=vnet" json:"vnet,omitempty"`
	// Number of interfaces on CE
	//
	// x-displayName: "Select Ingress Gateway or Ingress/Egress Gateway"
	// x-required
	// Choice of deploying one interface or two interface site
	//
	// Types that are valid to be assigned to SiteType:
	//	*GlobalSpecType_IngressGw
	//	*GlobalSpecType_IngressEgressGw
	//	*GlobalSpecType_VoltstackCluster
	SiteType isGlobalSpecType_SiteType `protobuf_oneof:"site_type"`
	// Cloud Disk size
	//
	// x-displayName: "Cloud Disk Size"
	// x-example: "80"
	// Disk size to be used for this instance in GiB. 80 is 80 GiB
	DiskSize uint32 `protobuf:"varint,16,opt,name=disk_size,json=diskSize,proto3" json:"disk_size,omitempty"`
	// Automatic Deployment
	//
	// x-displayName: "Select Automatic or Assisted Deployment"
	// x-required
	// Choice of deploying automatic via volterra or Assisted using volterra generated parameters.
	//
	// Types that are valid to be assigned to Deployment:
	//	*GlobalSpecType_AzureCred
	//	*GlobalSpecType_Assisted
	Deployment isGlobalSpecType_Deployment `protobuf_oneof:"deployment"`
	// Machine Type
	//
	// x-displayName: "Azure Machine Type for Node"
	// x-example: "Standard_D3_v2"
	// Select Instance size based on performance needed
	// Standard_D3_v2 (4 x vCPU, 14GB RAM) medium performance
	// Standard_D4_v2 (8 x vCPU, 28GB RAM) high performance
	// Standard_D5_v2 (16 x vCPU, 56GB RAM) very high performance
	MachineType string `protobuf:"bytes,10,opt,name=machine_type,json=machineType,proto3" json:"machine_type,omitempty"`
	// Auto Scale Limit
	//
	// x-displayName: "Auto Scale Limit"
	// x-example: "2"
	// Auto scale maximum worker nodes limit up to 21, value of zero will disable auto scale
	NodesPerAz uint32 `protobuf:"varint,15,opt,name=nodes_per_az,json=nodesPerAz,proto3" json:"nodes_per_az,omitempty"`
	// volterra_software_version
	//
	// x-displayName: "Software Version"
	// x-example: "value"
	// Desired Volterra software version for this site, a string matching released set of software components.
	VolterraSoftwareVersion string `protobuf:"bytes,12,opt,name=volterra_software_version,json=volterraSoftwareVersion,proto3" json:"volterra_software_version,omitempty"`
	// operating_system_version
	//
	// x-displayName: "Operating System Version"
	// x-example: "value"
	// Desired Operating System version for this site.
	OperatingSystemVersion string `protobuf:"bytes,13,opt,name=operating_system_version,json=operatingSystemVersion,proto3" json:"operating_system_version,omitempty"`
	// Public SSH key
	//
	// x-displayName: "Public SSH key"
	// x-example: "ssh-rsa AAAAB..."
	// Public SSH key for accessing the site.
	SshKey string `protobuf:"bytes,14,opt,name=ssh_key,json=sshKey,proto3" json:"ssh_key,omitempty"`
	// address
	//
	// x-displayName: "Geographical Address"
	// x-example: "123 Street, city, country, postal code"
	// Site's geographical address that can be used determine its latitude and longitude.
	Address string `protobuf:"bytes,18,opt,name=address,proto3" json:"address,omitempty"`
	// coordinates
	//
	// x-displayName: "Co-ordinates"
	// Site longitude and latitude co-ordinates
	Coordinates *ves_io_schema_site.Coordinates `protobuf:"bytes,19,opt,name=coordinates" json:"coordinates,omitempty"`
	// Reference to terraform parameters
	//
	// x-displayName: "Terraform Parameters"
	// Reference to view internal object
	TfParams *ves_io_schema_views.ObjectRefType `protobuf:"bytes,999,opt,name=tf_params,json=tfParams" json:"tf_params,omitempty"`
	// view_internal
	//
	// x-displayName: "View Internal"
	// Reference to view internal object
	ViewInternal *ves_io_schema_views.ObjectRefType `protobuf:"bytes,1000,opt,name=view_internal,json=viewInternal" json:"view_internal,omitempty"`
}

func (m *GlobalSpecType) Reset()                    { *m = GlobalSpecType{} }
func (*GlobalSpecType) ProtoMessage()               {}
func (*GlobalSpecType) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{6} }

type isGlobalSpecType_SiteType interface {
	isGlobalSpecType_SiteType()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isGlobalSpecType_Deployment interface {
	isGlobalSpecType_Deployment()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type GlobalSpecType_IngressGw struct {
	IngressGw *AzureVnetIngressGwType `protobuf:"bytes,5,opt,name=ingress_gw,json=ingressGw,oneof"`
}
type GlobalSpecType_IngressEgressGw struct {
	IngressEgressGw *AzureVnetIngressEgressGwType `protobuf:"bytes,6,opt,name=ingress_egress_gw,json=ingressEgressGw,oneof"`
}
type GlobalSpecType_VoltstackCluster struct {
	VoltstackCluster *AzureVnetVoltstackClusterType `protobuf:"bytes,17,opt,name=voltstack_cluster,json=voltstackCluster,oneof"`
}
type GlobalSpecType_AzureCred struct {
	AzureCred *ves_io_schema_views.ObjectRefType `protobuf:"bytes,8,opt,name=azure_cred,json=azureCred,oneof"`
}
type GlobalSpecType_Assisted struct {
	Assisted *ves_io_schema4.Empty `protobuf:"bytes,9,opt,name=assisted,oneof"`
}

func (*GlobalSpecType_IngressGw) isGlobalSpecType_SiteType()        {}
func (*GlobalSpecType_IngressEgressGw) isGlobalSpecType_SiteType()  {}
func (*GlobalSpecType_VoltstackCluster) isGlobalSpecType_SiteType() {}
func (*GlobalSpecType_AzureCred) isGlobalSpecType_Deployment()      {}
func (*GlobalSpecType_Assisted) isGlobalSpecType_Deployment()       {}

func (m *GlobalSpecType) GetSiteType() isGlobalSpecType_SiteType {
	if m != nil {
		return m.SiteType
	}
	return nil
}
func (m *GlobalSpecType) GetDeployment() isGlobalSpecType_Deployment {
	if m != nil {
		return m.Deployment
	}
	return nil
}

func (m *GlobalSpecType) GetResourceGroup() string {
	if m != nil {
		return m.ResourceGroup
	}
	return ""
}

func (m *GlobalSpecType) GetAzureRegion() string {
	if m != nil {
		return m.AzureRegion
	}
	return ""
}

func (m *GlobalSpecType) GetVnet() *ves_io_schema_views1.AzureVnetChoiceType {
	if m != nil {
		return m.Vnet
	}
	return nil
}

func (m *GlobalSpecType) GetIngressGw() *AzureVnetIngressGwType {
	if x, ok := m.GetSiteType().(*GlobalSpecType_IngressGw); ok {
		return x.IngressGw
	}
	return nil
}

func (m *GlobalSpecType) GetIngressEgressGw() *AzureVnetIngressEgressGwType {
	if x, ok := m.GetSiteType().(*GlobalSpecType_IngressEgressGw); ok {
		return x.IngressEgressGw
	}
	return nil
}

func (m *GlobalSpecType) GetVoltstackCluster() *AzureVnetVoltstackClusterType {
	if x, ok := m.GetSiteType().(*GlobalSpecType_VoltstackCluster); ok {
		return x.VoltstackCluster
	}
	return nil
}

func (m *GlobalSpecType) GetDiskSize() uint32 {
	if m != nil {
		return m.DiskSize
	}
	return 0
}

func (m *GlobalSpecType) GetAzureCred() *ves_io_schema_views.ObjectRefType {
	if x, ok := m.GetDeployment().(*GlobalSpecType_AzureCred); ok {
		return x.AzureCred
	}
	return nil
}

func (m *GlobalSpecType) GetAssisted() *ves_io_schema4.Empty {
	if x, ok := m.GetDeployment().(*GlobalSpecType_Assisted); ok {
		return x.Assisted
	}
	return nil
}

func (m *GlobalSpecType) GetMachineType() string {
	if m != nil {
		return m.MachineType
	}
	return ""
}

func (m *GlobalSpecType) GetNodesPerAz() uint32 {
	if m != nil {
		return m.NodesPerAz
	}
	return 0
}

func (m *GlobalSpecType) GetVolterraSoftwareVersion() string {
	if m != nil {
		return m.VolterraSoftwareVersion
	}
	return ""
}

func (m *GlobalSpecType) GetOperatingSystemVersion() string {
	if m != nil {
		return m.OperatingSystemVersion
	}
	return ""
}

func (m *GlobalSpecType) GetSshKey() string {
	if m != nil {
		return m.SshKey
	}
	return ""
}

func (m *GlobalSpecType) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *GlobalSpecType) GetCoordinates() *ves_io_schema_site.Coordinates {
	if m != nil {
		return m.Coordinates
	}
	return nil
}

func (m *GlobalSpecType) GetTfParams() *ves_io_schema_views.ObjectRefType {
	if m != nil {
		return m.TfParams
	}
	return nil
}

func (m *GlobalSpecType) GetViewInternal() *ves_io_schema_views.ObjectRefType {
	if m != nil {
		return m.ViewInternal
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*GlobalSpecType) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _GlobalSpecType_OneofMarshaler, _GlobalSpecType_OneofUnmarshaler, _GlobalSpecType_OneofSizer, []interface{}{
		(*GlobalSpecType_IngressGw)(nil),
		(*GlobalSpecType_IngressEgressGw)(nil),
		(*GlobalSpecType_VoltstackCluster)(nil),
		(*GlobalSpecType_AzureCred)(nil),
		(*GlobalSpecType_Assisted)(nil),
	}
}

func _GlobalSpecType_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*GlobalSpecType)
	// site_type
	switch x := m.SiteType.(type) {
	case *GlobalSpecType_IngressGw:
		_ = b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.IngressGw); err != nil {
			return err
		}
	case *GlobalSpecType_IngressEgressGw:
		_ = b.EncodeVarint(6<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.IngressEgressGw); err != nil {
			return err
		}
	case *GlobalSpecType_VoltstackCluster:
		_ = b.EncodeVarint(17<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.VoltstackCluster); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("GlobalSpecType.SiteType has unexpected type %T", x)
	}
	// deployment
	switch x := m.Deployment.(type) {
	case *GlobalSpecType_AzureCred:
		_ = b.EncodeVarint(8<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.AzureCred); err != nil {
			return err
		}
	case *GlobalSpecType_Assisted:
		_ = b.EncodeVarint(9<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Assisted); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("GlobalSpecType.Deployment has unexpected type %T", x)
	}
	return nil
}

func _GlobalSpecType_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*GlobalSpecType)
	switch tag {
	case 5: // site_type.ingress_gw
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(AzureVnetIngressGwType)
		err := b.DecodeMessage(msg)
		m.SiteType = &GlobalSpecType_IngressGw{msg}
		return true, err
	case 6: // site_type.ingress_egress_gw
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(AzureVnetIngressEgressGwType)
		err := b.DecodeMessage(msg)
		m.SiteType = &GlobalSpecType_IngressEgressGw{msg}
		return true, err
	case 17: // site_type.voltstack_cluster
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(AzureVnetVoltstackClusterType)
		err := b.DecodeMessage(msg)
		m.SiteType = &GlobalSpecType_VoltstackCluster{msg}
		return true, err
	case 8: // deployment.azure_cred
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema_views.ObjectRefType)
		err := b.DecodeMessage(msg)
		m.Deployment = &GlobalSpecType_AzureCred{msg}
		return true, err
	case 9: // deployment.assisted
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.Deployment = &GlobalSpecType_Assisted{msg}
		return true, err
	default:
		return false, nil
	}
}

func _GlobalSpecType_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*GlobalSpecType)
	// site_type
	switch x := m.SiteType.(type) {
	case *GlobalSpecType_IngressGw:
		s := proto.Size(x.IngressGw)
		n += proto.SizeVarint(5<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *GlobalSpecType_IngressEgressGw:
		s := proto.Size(x.IngressEgressGw)
		n += proto.SizeVarint(6<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *GlobalSpecType_VoltstackCluster:
		s := proto.Size(x.VoltstackCluster)
		n += proto.SizeVarint(17<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	// deployment
	switch x := m.Deployment.(type) {
	case *GlobalSpecType_AzureCred:
		s := proto.Size(x.AzureCred)
		n += proto.SizeVarint(8<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *GlobalSpecType_Assisted:
		s := proto.Size(x.Assisted)
		n += proto.SizeVarint(9<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// CreateSpecType
//
// x-displayName: "Create Specification"
// Shape of the Azure Vnet site specification
type CreateSpecType struct {
	ResourceGroup string                                    `protobuf:"bytes,1,opt,name=resource_group,json=resourceGroup,proto3" json:"resource_group,omitempty"`
	AzureRegion   string                                    `protobuf:"bytes,2,opt,name=azure_region,json=azureRegion,proto3" json:"azure_region,omitempty"`
	Vnet          *ves_io_schema_views1.AzureVnetChoiceType `protobuf:"bytes,3,opt,name=vnet" json:"vnet,omitempty"`
	// Types that are valid to be assigned to SiteType:
	//	*CreateSpecType_IngressGw
	//	*CreateSpecType_IngressEgressGw
	//	*CreateSpecType_VoltstackCluster
	SiteType isCreateSpecType_SiteType `protobuf_oneof:"site_type"`
	// Types that are valid to be assigned to Deployment:
	//	*CreateSpecType_AzureCred
	//	*CreateSpecType_Assisted
	Deployment              isCreateSpecType_Deployment     `protobuf_oneof:"deployment"`
	MachineType             string                          `protobuf:"bytes,10,opt,name=machine_type,json=machineType,proto3" json:"machine_type,omitempty"`
	NodesPerAz              uint32                          `protobuf:"varint,15,opt,name=nodes_per_az,json=nodesPerAz,proto3" json:"nodes_per_az,omitempty"`
	DiskSize                uint32                          `protobuf:"varint,16,opt,name=disk_size,json=diskSize,proto3" json:"disk_size,omitempty"`
	VolterraSoftwareVersion string                          `protobuf:"bytes,12,opt,name=volterra_software_version,json=volterraSoftwareVersion,proto3" json:"volterra_software_version,omitempty"`
	OperatingSystemVersion  string                          `protobuf:"bytes,13,opt,name=operating_system_version,json=operatingSystemVersion,proto3" json:"operating_system_version,omitempty"`
	SshKey                  string                          `protobuf:"bytes,14,opt,name=ssh_key,json=sshKey,proto3" json:"ssh_key,omitempty"`
	Address                 string                          `protobuf:"bytes,18,opt,name=address,proto3" json:"address,omitempty"`
	Coordinates             *ves_io_schema_site.Coordinates `protobuf:"bytes,19,opt,name=coordinates" json:"coordinates,omitempty"`
}

func (m *CreateSpecType) Reset()                    { *m = CreateSpecType{} }
func (*CreateSpecType) ProtoMessage()               {}
func (*CreateSpecType) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{7} }

type isCreateSpecType_SiteType interface {
	isCreateSpecType_SiteType()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isCreateSpecType_Deployment interface {
	isCreateSpecType_Deployment()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type CreateSpecType_IngressGw struct {
	IngressGw *AzureVnetIngressGwType `protobuf:"bytes,5,opt,name=ingress_gw,json=ingressGw,oneof"`
}
type CreateSpecType_IngressEgressGw struct {
	IngressEgressGw *AzureVnetIngressEgressGwType `protobuf:"bytes,6,opt,name=ingress_egress_gw,json=ingressEgressGw,oneof"`
}
type CreateSpecType_VoltstackCluster struct {
	VoltstackCluster *AzureVnetVoltstackClusterType `protobuf:"bytes,17,opt,name=voltstack_cluster,json=voltstackCluster,oneof"`
}
type CreateSpecType_AzureCred struct {
	AzureCred *ves_io_schema_views.ObjectRefType `protobuf:"bytes,8,opt,name=azure_cred,json=azureCred,oneof"`
}
type CreateSpecType_Assisted struct {
	Assisted *ves_io_schema4.Empty `protobuf:"bytes,9,opt,name=assisted,oneof"`
}

func (*CreateSpecType_IngressGw) isCreateSpecType_SiteType()        {}
func (*CreateSpecType_IngressEgressGw) isCreateSpecType_SiteType()  {}
func (*CreateSpecType_VoltstackCluster) isCreateSpecType_SiteType() {}
func (*CreateSpecType_AzureCred) isCreateSpecType_Deployment()      {}
func (*CreateSpecType_Assisted) isCreateSpecType_Deployment()       {}

func (m *CreateSpecType) GetSiteType() isCreateSpecType_SiteType {
	if m != nil {
		return m.SiteType
	}
	return nil
}
func (m *CreateSpecType) GetDeployment() isCreateSpecType_Deployment {
	if m != nil {
		return m.Deployment
	}
	return nil
}

func (m *CreateSpecType) GetResourceGroup() string {
	if m != nil {
		return m.ResourceGroup
	}
	return ""
}

func (m *CreateSpecType) GetAzureRegion() string {
	if m != nil {
		return m.AzureRegion
	}
	return ""
}

func (m *CreateSpecType) GetVnet() *ves_io_schema_views1.AzureVnetChoiceType {
	if m != nil {
		return m.Vnet
	}
	return nil
}

func (m *CreateSpecType) GetIngressGw() *AzureVnetIngressGwType {
	if x, ok := m.GetSiteType().(*CreateSpecType_IngressGw); ok {
		return x.IngressGw
	}
	return nil
}

func (m *CreateSpecType) GetIngressEgressGw() *AzureVnetIngressEgressGwType {
	if x, ok := m.GetSiteType().(*CreateSpecType_IngressEgressGw); ok {
		return x.IngressEgressGw
	}
	return nil
}

func (m *CreateSpecType) GetVoltstackCluster() *AzureVnetVoltstackClusterType {
	if x, ok := m.GetSiteType().(*CreateSpecType_VoltstackCluster); ok {
		return x.VoltstackCluster
	}
	return nil
}

func (m *CreateSpecType) GetAzureCred() *ves_io_schema_views.ObjectRefType {
	if x, ok := m.GetDeployment().(*CreateSpecType_AzureCred); ok {
		return x.AzureCred
	}
	return nil
}

func (m *CreateSpecType) GetAssisted() *ves_io_schema4.Empty {
	if x, ok := m.GetDeployment().(*CreateSpecType_Assisted); ok {
		return x.Assisted
	}
	return nil
}

func (m *CreateSpecType) GetMachineType() string {
	if m != nil {
		return m.MachineType
	}
	return ""
}

func (m *CreateSpecType) GetNodesPerAz() uint32 {
	if m != nil {
		return m.NodesPerAz
	}
	return 0
}

func (m *CreateSpecType) GetDiskSize() uint32 {
	if m != nil {
		return m.DiskSize
	}
	return 0
}

func (m *CreateSpecType) GetVolterraSoftwareVersion() string {
	if m != nil {
		return m.VolterraSoftwareVersion
	}
	return ""
}

func (m *CreateSpecType) GetOperatingSystemVersion() string {
	if m != nil {
		return m.OperatingSystemVersion
	}
	return ""
}

func (m *CreateSpecType) GetSshKey() string {
	if m != nil {
		return m.SshKey
	}
	return ""
}

func (m *CreateSpecType) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *CreateSpecType) GetCoordinates() *ves_io_schema_site.Coordinates {
	if m != nil {
		return m.Coordinates
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*CreateSpecType) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _CreateSpecType_OneofMarshaler, _CreateSpecType_OneofUnmarshaler, _CreateSpecType_OneofSizer, []interface{}{
		(*CreateSpecType_IngressGw)(nil),
		(*CreateSpecType_IngressEgressGw)(nil),
		(*CreateSpecType_VoltstackCluster)(nil),
		(*CreateSpecType_AzureCred)(nil),
		(*CreateSpecType_Assisted)(nil),
	}
}

func _CreateSpecType_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*CreateSpecType)
	// site_type
	switch x := m.SiteType.(type) {
	case *CreateSpecType_IngressGw:
		_ = b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.IngressGw); err != nil {
			return err
		}
	case *CreateSpecType_IngressEgressGw:
		_ = b.EncodeVarint(6<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.IngressEgressGw); err != nil {
			return err
		}
	case *CreateSpecType_VoltstackCluster:
		_ = b.EncodeVarint(17<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.VoltstackCluster); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("CreateSpecType.SiteType has unexpected type %T", x)
	}
	// deployment
	switch x := m.Deployment.(type) {
	case *CreateSpecType_AzureCred:
		_ = b.EncodeVarint(8<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.AzureCred); err != nil {
			return err
		}
	case *CreateSpecType_Assisted:
		_ = b.EncodeVarint(9<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Assisted); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("CreateSpecType.Deployment has unexpected type %T", x)
	}
	return nil
}

func _CreateSpecType_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*CreateSpecType)
	switch tag {
	case 5: // site_type.ingress_gw
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(AzureVnetIngressGwType)
		err := b.DecodeMessage(msg)
		m.SiteType = &CreateSpecType_IngressGw{msg}
		return true, err
	case 6: // site_type.ingress_egress_gw
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(AzureVnetIngressEgressGwType)
		err := b.DecodeMessage(msg)
		m.SiteType = &CreateSpecType_IngressEgressGw{msg}
		return true, err
	case 17: // site_type.voltstack_cluster
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(AzureVnetVoltstackClusterType)
		err := b.DecodeMessage(msg)
		m.SiteType = &CreateSpecType_VoltstackCluster{msg}
		return true, err
	case 8: // deployment.azure_cred
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema_views.ObjectRefType)
		err := b.DecodeMessage(msg)
		m.Deployment = &CreateSpecType_AzureCred{msg}
		return true, err
	case 9: // deployment.assisted
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.Deployment = &CreateSpecType_Assisted{msg}
		return true, err
	default:
		return false, nil
	}
}

func _CreateSpecType_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*CreateSpecType)
	// site_type
	switch x := m.SiteType.(type) {
	case *CreateSpecType_IngressGw:
		s := proto.Size(x.IngressGw)
		n += proto.SizeVarint(5<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *CreateSpecType_IngressEgressGw:
		s := proto.Size(x.IngressEgressGw)
		n += proto.SizeVarint(6<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *CreateSpecType_VoltstackCluster:
		s := proto.Size(x.VoltstackCluster)
		n += proto.SizeVarint(17<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	// deployment
	switch x := m.Deployment.(type) {
	case *CreateSpecType_AzureCred:
		s := proto.Size(x.AzureCred)
		n += proto.SizeVarint(8<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *CreateSpecType_Assisted:
		s := proto.Size(x.Assisted)
		n += proto.SizeVarint(9<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// ReplaceSpecType
//
// x-displayName: "Specification"
// Shape of the Azure Vnet site replace specification
type ReplaceSpecType struct {
	// Site Type
	//
	// x-displayName: "Edit Networking Config"
	// x-required
	// Site Type ingress or ingress-egress gateway cannot be changed
	//
	// Types that are valid to be assigned to SiteType:
	//	*ReplaceSpecType_IngressGw
	//	*ReplaceSpecType_IngressEgressGw
	//	*ReplaceSpecType_VoltstackCluster
	SiteType                isReplaceSpecType_SiteType      `protobuf_oneof:"site_type"`
	VolterraSoftwareVersion string                          `protobuf:"bytes,12,opt,name=volterra_software_version,json=volterraSoftwareVersion,proto3" json:"volterra_software_version,omitempty"`
	OperatingSystemVersion  string                          `protobuf:"bytes,13,opt,name=operating_system_version,json=operatingSystemVersion,proto3" json:"operating_system_version,omitempty"`
	NodesPerAz              uint32                          `protobuf:"varint,15,opt,name=nodes_per_az,json=nodesPerAz,proto3" json:"nodes_per_az,omitempty"`
	Address                 string                          `protobuf:"bytes,18,opt,name=address,proto3" json:"address,omitempty"`
	Coordinates             *ves_io_schema_site.Coordinates `protobuf:"bytes,19,opt,name=coordinates" json:"coordinates,omitempty"`
}

func (m *ReplaceSpecType) Reset()                    { *m = ReplaceSpecType{} }
func (*ReplaceSpecType) ProtoMessage()               {}
func (*ReplaceSpecType) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{8} }

type isReplaceSpecType_SiteType interface {
	isReplaceSpecType_SiteType()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type ReplaceSpecType_IngressGw struct {
	IngressGw *AzureVnetIngressGwReplaceType `protobuf:"bytes,5,opt,name=ingress_gw,json=ingressGw,oneof"`
}
type ReplaceSpecType_IngressEgressGw struct {
	IngressEgressGw *AzureVnetIngressEgressGwReplaceType `protobuf:"bytes,6,opt,name=ingress_egress_gw,json=ingressEgressGw,oneof"`
}
type ReplaceSpecType_VoltstackCluster struct {
	VoltstackCluster *AzureVnetVoltstackClusterReplaceType `protobuf:"bytes,17,opt,name=voltstack_cluster,json=voltstackCluster,oneof"`
}

func (*ReplaceSpecType_IngressGw) isReplaceSpecType_SiteType()        {}
func (*ReplaceSpecType_IngressEgressGw) isReplaceSpecType_SiteType()  {}
func (*ReplaceSpecType_VoltstackCluster) isReplaceSpecType_SiteType() {}

func (m *ReplaceSpecType) GetSiteType() isReplaceSpecType_SiteType {
	if m != nil {
		return m.SiteType
	}
	return nil
}

func (m *ReplaceSpecType) GetIngressGw() *AzureVnetIngressGwReplaceType {
	if x, ok := m.GetSiteType().(*ReplaceSpecType_IngressGw); ok {
		return x.IngressGw
	}
	return nil
}

func (m *ReplaceSpecType) GetIngressEgressGw() *AzureVnetIngressEgressGwReplaceType {
	if x, ok := m.GetSiteType().(*ReplaceSpecType_IngressEgressGw); ok {
		return x.IngressEgressGw
	}
	return nil
}

func (m *ReplaceSpecType) GetVoltstackCluster() *AzureVnetVoltstackClusterReplaceType {
	if x, ok := m.GetSiteType().(*ReplaceSpecType_VoltstackCluster); ok {
		return x.VoltstackCluster
	}
	return nil
}

func (m *ReplaceSpecType) GetVolterraSoftwareVersion() string {
	if m != nil {
		return m.VolterraSoftwareVersion
	}
	return ""
}

func (m *ReplaceSpecType) GetOperatingSystemVersion() string {
	if m != nil {
		return m.OperatingSystemVersion
	}
	return ""
}

func (m *ReplaceSpecType) GetNodesPerAz() uint32 {
	if m != nil {
		return m.NodesPerAz
	}
	return 0
}

func (m *ReplaceSpecType) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *ReplaceSpecType) GetCoordinates() *ves_io_schema_site.Coordinates {
	if m != nil {
		return m.Coordinates
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*ReplaceSpecType) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _ReplaceSpecType_OneofMarshaler, _ReplaceSpecType_OneofUnmarshaler, _ReplaceSpecType_OneofSizer, []interface{}{
		(*ReplaceSpecType_IngressGw)(nil),
		(*ReplaceSpecType_IngressEgressGw)(nil),
		(*ReplaceSpecType_VoltstackCluster)(nil),
	}
}

func _ReplaceSpecType_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*ReplaceSpecType)
	// site_type
	switch x := m.SiteType.(type) {
	case *ReplaceSpecType_IngressGw:
		_ = b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.IngressGw); err != nil {
			return err
		}
	case *ReplaceSpecType_IngressEgressGw:
		_ = b.EncodeVarint(6<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.IngressEgressGw); err != nil {
			return err
		}
	case *ReplaceSpecType_VoltstackCluster:
		_ = b.EncodeVarint(17<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.VoltstackCluster); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("ReplaceSpecType.SiteType has unexpected type %T", x)
	}
	return nil
}

func _ReplaceSpecType_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*ReplaceSpecType)
	switch tag {
	case 5: // site_type.ingress_gw
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(AzureVnetIngressGwReplaceType)
		err := b.DecodeMessage(msg)
		m.SiteType = &ReplaceSpecType_IngressGw{msg}
		return true, err
	case 6: // site_type.ingress_egress_gw
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(AzureVnetIngressEgressGwReplaceType)
		err := b.DecodeMessage(msg)
		m.SiteType = &ReplaceSpecType_IngressEgressGw{msg}
		return true, err
	case 17: // site_type.voltstack_cluster
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(AzureVnetVoltstackClusterReplaceType)
		err := b.DecodeMessage(msg)
		m.SiteType = &ReplaceSpecType_VoltstackCluster{msg}
		return true, err
	default:
		return false, nil
	}
}

func _ReplaceSpecType_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*ReplaceSpecType)
	// site_type
	switch x := m.SiteType.(type) {
	case *ReplaceSpecType_IngressGw:
		s := proto.Size(x.IngressGw)
		n += proto.SizeVarint(5<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ReplaceSpecType_IngressEgressGw:
		s := proto.Size(x.IngressEgressGw)
		n += proto.SizeVarint(6<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ReplaceSpecType_VoltstackCluster:
		s := proto.Size(x.VoltstackCluster)
		n += proto.SizeVarint(17<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// GetSpecType
//
// x-displayName: "Specification"
// Shape of the Azure Vnet site specification
type GetSpecType struct {
	ResourceGroup string                                    `protobuf:"bytes,1,opt,name=resource_group,json=resourceGroup,proto3" json:"resource_group,omitempty"`
	AzureRegion   string                                    `protobuf:"bytes,2,opt,name=azure_region,json=azureRegion,proto3" json:"azure_region,omitempty"`
	Vnet          *ves_io_schema_views1.AzureVnetChoiceType `protobuf:"bytes,3,opt,name=vnet" json:"vnet,omitempty"`
	// Types that are valid to be assigned to SiteType:
	//	*GetSpecType_IngressGw
	//	*GetSpecType_IngressEgressGw
	//	*GetSpecType_VoltstackCluster
	SiteType isGetSpecType_SiteType `protobuf_oneof:"site_type"`
	// Types that are valid to be assigned to Deployment:
	//	*GetSpecType_AzureCred
	//	*GetSpecType_Assisted
	Deployment              isGetSpecType_Deployment        `protobuf_oneof:"deployment"`
	MachineType             string                          `protobuf:"bytes,10,opt,name=machine_type,json=machineType,proto3" json:"machine_type,omitempty"`
	NodesPerAz              uint32                          `protobuf:"varint,15,opt,name=nodes_per_az,json=nodesPerAz,proto3" json:"nodes_per_az,omitempty"`
	DiskSize                uint32                          `protobuf:"varint,16,opt,name=disk_size,json=diskSize,proto3" json:"disk_size,omitempty"`
	VolterraSoftwareVersion string                          `protobuf:"bytes,12,opt,name=volterra_software_version,json=volterraSoftwareVersion,proto3" json:"volterra_software_version,omitempty"`
	OperatingSystemVersion  string                          `protobuf:"bytes,13,opt,name=operating_system_version,json=operatingSystemVersion,proto3" json:"operating_system_version,omitempty"`
	SshKey                  string                          `protobuf:"bytes,14,opt,name=ssh_key,json=sshKey,proto3" json:"ssh_key,omitempty"`
	Address                 string                          `protobuf:"bytes,18,opt,name=address,proto3" json:"address,omitempty"`
	Coordinates             *ves_io_schema_site.Coordinates `protobuf:"bytes,19,opt,name=coordinates" json:"coordinates,omitempty"`
}

func (m *GetSpecType) Reset()                    { *m = GetSpecType{} }
func (*GetSpecType) ProtoMessage()               {}
func (*GetSpecType) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{9} }

type isGetSpecType_SiteType interface {
	isGetSpecType_SiteType()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isGetSpecType_Deployment interface {
	isGetSpecType_Deployment()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type GetSpecType_IngressGw struct {
	IngressGw *AzureVnetIngressGwType `protobuf:"bytes,5,opt,name=ingress_gw,json=ingressGw,oneof"`
}
type GetSpecType_IngressEgressGw struct {
	IngressEgressGw *AzureVnetIngressEgressGwType `protobuf:"bytes,6,opt,name=ingress_egress_gw,json=ingressEgressGw,oneof"`
}
type GetSpecType_VoltstackCluster struct {
	VoltstackCluster *AzureVnetVoltstackClusterType `protobuf:"bytes,17,opt,name=voltstack_cluster,json=voltstackCluster,oneof"`
}
type GetSpecType_AzureCred struct {
	AzureCred *ves_io_schema_views.ObjectRefType `protobuf:"bytes,8,opt,name=azure_cred,json=azureCred,oneof"`
}
type GetSpecType_Assisted struct {
	Assisted *ves_io_schema4.Empty `protobuf:"bytes,9,opt,name=assisted,oneof"`
}

func (*GetSpecType_IngressGw) isGetSpecType_SiteType()        {}
func (*GetSpecType_IngressEgressGw) isGetSpecType_SiteType()  {}
func (*GetSpecType_VoltstackCluster) isGetSpecType_SiteType() {}
func (*GetSpecType_AzureCred) isGetSpecType_Deployment()      {}
func (*GetSpecType_Assisted) isGetSpecType_Deployment()       {}

func (m *GetSpecType) GetSiteType() isGetSpecType_SiteType {
	if m != nil {
		return m.SiteType
	}
	return nil
}
func (m *GetSpecType) GetDeployment() isGetSpecType_Deployment {
	if m != nil {
		return m.Deployment
	}
	return nil
}

func (m *GetSpecType) GetResourceGroup() string {
	if m != nil {
		return m.ResourceGroup
	}
	return ""
}

func (m *GetSpecType) GetAzureRegion() string {
	if m != nil {
		return m.AzureRegion
	}
	return ""
}

func (m *GetSpecType) GetVnet() *ves_io_schema_views1.AzureVnetChoiceType {
	if m != nil {
		return m.Vnet
	}
	return nil
}

func (m *GetSpecType) GetIngressGw() *AzureVnetIngressGwType {
	if x, ok := m.GetSiteType().(*GetSpecType_IngressGw); ok {
		return x.IngressGw
	}
	return nil
}

func (m *GetSpecType) GetIngressEgressGw() *AzureVnetIngressEgressGwType {
	if x, ok := m.GetSiteType().(*GetSpecType_IngressEgressGw); ok {
		return x.IngressEgressGw
	}
	return nil
}

func (m *GetSpecType) GetVoltstackCluster() *AzureVnetVoltstackClusterType {
	if x, ok := m.GetSiteType().(*GetSpecType_VoltstackCluster); ok {
		return x.VoltstackCluster
	}
	return nil
}

func (m *GetSpecType) GetAzureCred() *ves_io_schema_views.ObjectRefType {
	if x, ok := m.GetDeployment().(*GetSpecType_AzureCred); ok {
		return x.AzureCred
	}
	return nil
}

func (m *GetSpecType) GetAssisted() *ves_io_schema4.Empty {
	if x, ok := m.GetDeployment().(*GetSpecType_Assisted); ok {
		return x.Assisted
	}
	return nil
}

func (m *GetSpecType) GetMachineType() string {
	if m != nil {
		return m.MachineType
	}
	return ""
}

func (m *GetSpecType) GetNodesPerAz() uint32 {
	if m != nil {
		return m.NodesPerAz
	}
	return 0
}

func (m *GetSpecType) GetDiskSize() uint32 {
	if m != nil {
		return m.DiskSize
	}
	return 0
}

func (m *GetSpecType) GetVolterraSoftwareVersion() string {
	if m != nil {
		return m.VolterraSoftwareVersion
	}
	return ""
}

func (m *GetSpecType) GetOperatingSystemVersion() string {
	if m != nil {
		return m.OperatingSystemVersion
	}
	return ""
}

func (m *GetSpecType) GetSshKey() string {
	if m != nil {
		return m.SshKey
	}
	return ""
}

func (m *GetSpecType) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *GetSpecType) GetCoordinates() *ves_io_schema_site.Coordinates {
	if m != nil {
		return m.Coordinates
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*GetSpecType) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _GetSpecType_OneofMarshaler, _GetSpecType_OneofUnmarshaler, _GetSpecType_OneofSizer, []interface{}{
		(*GetSpecType_IngressGw)(nil),
		(*GetSpecType_IngressEgressGw)(nil),
		(*GetSpecType_VoltstackCluster)(nil),
		(*GetSpecType_AzureCred)(nil),
		(*GetSpecType_Assisted)(nil),
	}
}

func _GetSpecType_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*GetSpecType)
	// site_type
	switch x := m.SiteType.(type) {
	case *GetSpecType_IngressGw:
		_ = b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.IngressGw); err != nil {
			return err
		}
	case *GetSpecType_IngressEgressGw:
		_ = b.EncodeVarint(6<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.IngressEgressGw); err != nil {
			return err
		}
	case *GetSpecType_VoltstackCluster:
		_ = b.EncodeVarint(17<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.VoltstackCluster); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("GetSpecType.SiteType has unexpected type %T", x)
	}
	// deployment
	switch x := m.Deployment.(type) {
	case *GetSpecType_AzureCred:
		_ = b.EncodeVarint(8<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.AzureCred); err != nil {
			return err
		}
	case *GetSpecType_Assisted:
		_ = b.EncodeVarint(9<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Assisted); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("GetSpecType.Deployment has unexpected type %T", x)
	}
	return nil
}

func _GetSpecType_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*GetSpecType)
	switch tag {
	case 5: // site_type.ingress_gw
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(AzureVnetIngressGwType)
		err := b.DecodeMessage(msg)
		m.SiteType = &GetSpecType_IngressGw{msg}
		return true, err
	case 6: // site_type.ingress_egress_gw
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(AzureVnetIngressEgressGwType)
		err := b.DecodeMessage(msg)
		m.SiteType = &GetSpecType_IngressEgressGw{msg}
		return true, err
	case 17: // site_type.voltstack_cluster
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(AzureVnetVoltstackClusterType)
		err := b.DecodeMessage(msg)
		m.SiteType = &GetSpecType_VoltstackCluster{msg}
		return true, err
	case 8: // deployment.azure_cred
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema_views.ObjectRefType)
		err := b.DecodeMessage(msg)
		m.Deployment = &GetSpecType_AzureCred{msg}
		return true, err
	case 9: // deployment.assisted
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.Deployment = &GetSpecType_Assisted{msg}
		return true, err
	default:
		return false, nil
	}
}

func _GetSpecType_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*GetSpecType)
	// site_type
	switch x := m.SiteType.(type) {
	case *GetSpecType_IngressGw:
		s := proto.Size(x.IngressGw)
		n += proto.SizeVarint(5<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *GetSpecType_IngressEgressGw:
		s := proto.Size(x.IngressEgressGw)
		n += proto.SizeVarint(6<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *GetSpecType_VoltstackCluster:
		s := proto.Size(x.VoltstackCluster)
		n += proto.SizeVarint(17<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	// deployment
	switch x := m.Deployment.(type) {
	case *GetSpecType_AzureCred:
		s := proto.Size(x.AzureCred)
		n += proto.SizeVarint(8<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *GetSpecType_Assisted:
		s := proto.Size(x.Assisted)
		n += proto.SizeVarint(9<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

func init() {
	proto.RegisterType((*AzureVnetIngressGwType)(nil), "ves.io.schema.views.azure_vnet_site.AzureVnetIngressGwType")
	golang_proto.RegisterType((*AzureVnetIngressGwType)(nil), "ves.io.schema.views.azure_vnet_site.AzureVnetIngressGwType")
	proto.RegisterType((*AzureVnetIngressEgressGwType)(nil), "ves.io.schema.views.azure_vnet_site.AzureVnetIngressEgressGwType")
	golang_proto.RegisterType((*AzureVnetIngressEgressGwType)(nil), "ves.io.schema.views.azure_vnet_site.AzureVnetIngressEgressGwType")
	proto.RegisterType((*AzureVnetVoltstackClusterType)(nil), "ves.io.schema.views.azure_vnet_site.AzureVnetVoltstackClusterType")
	golang_proto.RegisterType((*AzureVnetVoltstackClusterType)(nil), "ves.io.schema.views.azure_vnet_site.AzureVnetVoltstackClusterType")
	proto.RegisterType((*AzureVnetIngressGwReplaceType)(nil), "ves.io.schema.views.azure_vnet_site.AzureVnetIngressGwReplaceType")
	golang_proto.RegisterType((*AzureVnetIngressGwReplaceType)(nil), "ves.io.schema.views.azure_vnet_site.AzureVnetIngressGwReplaceType")
	proto.RegisterType((*AzureVnetIngressEgressGwReplaceType)(nil), "ves.io.schema.views.azure_vnet_site.AzureVnetIngressEgressGwReplaceType")
	golang_proto.RegisterType((*AzureVnetIngressEgressGwReplaceType)(nil), "ves.io.schema.views.azure_vnet_site.AzureVnetIngressEgressGwReplaceType")
	proto.RegisterType((*AzureVnetVoltstackClusterReplaceType)(nil), "ves.io.schema.views.azure_vnet_site.AzureVnetVoltstackClusterReplaceType")
	golang_proto.RegisterType((*AzureVnetVoltstackClusterReplaceType)(nil), "ves.io.schema.views.azure_vnet_site.AzureVnetVoltstackClusterReplaceType")
	proto.RegisterType((*GlobalSpecType)(nil), "ves.io.schema.views.azure_vnet_site.GlobalSpecType")
	golang_proto.RegisterType((*GlobalSpecType)(nil), "ves.io.schema.views.azure_vnet_site.GlobalSpecType")
	proto.RegisterType((*CreateSpecType)(nil), "ves.io.schema.views.azure_vnet_site.CreateSpecType")
	golang_proto.RegisterType((*CreateSpecType)(nil), "ves.io.schema.views.azure_vnet_site.CreateSpecType")
	proto.RegisterType((*ReplaceSpecType)(nil), "ves.io.schema.views.azure_vnet_site.ReplaceSpecType")
	golang_proto.RegisterType((*ReplaceSpecType)(nil), "ves.io.schema.views.azure_vnet_site.ReplaceSpecType")
	proto.RegisterType((*GetSpecType)(nil), "ves.io.schema.views.azure_vnet_site.GetSpecType")
	golang_proto.RegisterType((*GetSpecType)(nil), "ves.io.schema.views.azure_vnet_site.GetSpecType")
}
func (this *AzureVnetIngressGwType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AzureVnetIngressGwType)
	if !ok {
		that2, ok := that.(AzureVnetIngressGwType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.AzNodes) != len(that1.AzNodes) {
		return false
	}
	for i := range this.AzNodes {
		if !this.AzNodes[i].Equal(that1.AzNodes[i]) {
			return false
		}
	}
	if this.AzureCertifiedHw != that1.AzureCertifiedHw {
		return false
	}
	return true
}
func (this *AzureVnetIngressEgressGwType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AzureVnetIngressEgressGwType)
	if !ok {
		that2, ok := that.(AzureVnetIngressEgressGwType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.AzNodes) != len(that1.AzNodes) {
		return false
	}
	for i := range this.AzNodes {
		if !this.AzNodes[i].Equal(that1.AzNodes[i]) {
			return false
		}
	}
	if that1.NetworkPolicyChoice == nil {
		if this.NetworkPolicyChoice != nil {
			return false
		}
	} else if this.NetworkPolicyChoice == nil {
		return false
	} else if !this.NetworkPolicyChoice.Equal(that1.NetworkPolicyChoice) {
		return false
	}
	if that1.ForwardProxyChoice == nil {
		if this.ForwardProxyChoice != nil {
			return false
		}
	} else if this.ForwardProxyChoice == nil {
		return false
	} else if !this.ForwardProxyChoice.Equal(that1.ForwardProxyChoice) {
		return false
	}
	if this.AzureCertifiedHw != that1.AzureCertifiedHw {
		return false
	}
	if that1.InsideStaticRouteChoice == nil {
		if this.InsideStaticRouteChoice != nil {
			return false
		}
	} else if this.InsideStaticRouteChoice == nil {
		return false
	} else if !this.InsideStaticRouteChoice.Equal(that1.InsideStaticRouteChoice) {
		return false
	}
	if that1.OutsideStaticRouteChoice == nil {
		if this.OutsideStaticRouteChoice != nil {
			return false
		}
	} else if this.OutsideStaticRouteChoice == nil {
		return false
	} else if !this.OutsideStaticRouteChoice.Equal(that1.OutsideStaticRouteChoice) {
		return false
	}
	if that1.GlobalNetworkChoice == nil {
		if this.GlobalNetworkChoice != nil {
			return false
		}
	} else if this.GlobalNetworkChoice == nil {
		return false
	} else if !this.GlobalNetworkChoice.Equal(that1.GlobalNetworkChoice) {
		return false
	}
	return true
}
func (this *AzureVnetIngressEgressGwType_NoNetworkPolicy) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AzureVnetIngressEgressGwType_NoNetworkPolicy)
	if !ok {
		that2, ok := that.(AzureVnetIngressEgressGwType_NoNetworkPolicy)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NoNetworkPolicy.Equal(that1.NoNetworkPolicy) {
		return false
	}
	return true
}
func (this *AzureVnetIngressEgressGwType_ActiveNetworkPolicies) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AzureVnetIngressEgressGwType_ActiveNetworkPolicies)
	if !ok {
		that2, ok := that.(AzureVnetIngressEgressGwType_ActiveNetworkPolicies)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ActiveNetworkPolicies.Equal(that1.ActiveNetworkPolicies) {
		return false
	}
	return true
}
func (this *AzureVnetIngressEgressGwType_NoForwardProxy) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AzureVnetIngressEgressGwType_NoForwardProxy)
	if !ok {
		that2, ok := that.(AzureVnetIngressEgressGwType_NoForwardProxy)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NoForwardProxy.Equal(that1.NoForwardProxy) {
		return false
	}
	return true
}
func (this *AzureVnetIngressEgressGwType_ActiveForwardProxyPolicies) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AzureVnetIngressEgressGwType_ActiveForwardProxyPolicies)
	if !ok {
		that2, ok := that.(AzureVnetIngressEgressGwType_ActiveForwardProxyPolicies)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ActiveForwardProxyPolicies.Equal(that1.ActiveForwardProxyPolicies) {
		return false
	}
	return true
}
func (this *AzureVnetIngressEgressGwType_ForwardProxyAllowAll) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AzureVnetIngressEgressGwType_ForwardProxyAllowAll)
	if !ok {
		that2, ok := that.(AzureVnetIngressEgressGwType_ForwardProxyAllowAll)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ForwardProxyAllowAll.Equal(that1.ForwardProxyAllowAll) {
		return false
	}
	return true
}
func (this *AzureVnetIngressEgressGwType_NoInsideStaticRoutes) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AzureVnetIngressEgressGwType_NoInsideStaticRoutes)
	if !ok {
		that2, ok := that.(AzureVnetIngressEgressGwType_NoInsideStaticRoutes)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NoInsideStaticRoutes.Equal(that1.NoInsideStaticRoutes) {
		return false
	}
	return true
}
func (this *AzureVnetIngressEgressGwType_InsideStaticRoutes) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AzureVnetIngressEgressGwType_InsideStaticRoutes)
	if !ok {
		that2, ok := that.(AzureVnetIngressEgressGwType_InsideStaticRoutes)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.InsideStaticRoutes.Equal(that1.InsideStaticRoutes) {
		return false
	}
	return true
}
func (this *AzureVnetIngressEgressGwType_NoOutsideStaticRoutes) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AzureVnetIngressEgressGwType_NoOutsideStaticRoutes)
	if !ok {
		that2, ok := that.(AzureVnetIngressEgressGwType_NoOutsideStaticRoutes)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NoOutsideStaticRoutes.Equal(that1.NoOutsideStaticRoutes) {
		return false
	}
	return true
}
func (this *AzureVnetIngressEgressGwType_OutsideStaticRoutes) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AzureVnetIngressEgressGwType_OutsideStaticRoutes)
	if !ok {
		that2, ok := that.(AzureVnetIngressEgressGwType_OutsideStaticRoutes)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.OutsideStaticRoutes.Equal(that1.OutsideStaticRoutes) {
		return false
	}
	return true
}
func (this *AzureVnetIngressEgressGwType_NoGlobalNetwork) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AzureVnetIngressEgressGwType_NoGlobalNetwork)
	if !ok {
		that2, ok := that.(AzureVnetIngressEgressGwType_NoGlobalNetwork)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NoGlobalNetwork.Equal(that1.NoGlobalNetwork) {
		return false
	}
	return true
}
func (this *AzureVnetIngressEgressGwType_GlobalNetworkList) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AzureVnetIngressEgressGwType_GlobalNetworkList)
	if !ok {
		that2, ok := that.(AzureVnetIngressEgressGwType_GlobalNetworkList)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.GlobalNetworkList.Equal(that1.GlobalNetworkList) {
		return false
	}
	return true
}
func (this *AzureVnetVoltstackClusterType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AzureVnetVoltstackClusterType)
	if !ok {
		that2, ok := that.(AzureVnetVoltstackClusterType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.AzureCertifiedHw != that1.AzureCertifiedHw {
		return false
	}
	if len(this.AzNodes) != len(that1.AzNodes) {
		return false
	}
	for i := range this.AzNodes {
		if !this.AzNodes[i].Equal(that1.AzNodes[i]) {
			return false
		}
	}
	if that1.NetworkPolicyChoice == nil {
		if this.NetworkPolicyChoice != nil {
			return false
		}
	} else if this.NetworkPolicyChoice == nil {
		return false
	} else if !this.NetworkPolicyChoice.Equal(that1.NetworkPolicyChoice) {
		return false
	}
	if that1.ForwardProxyChoice == nil {
		if this.ForwardProxyChoice != nil {
			return false
		}
	} else if this.ForwardProxyChoice == nil {
		return false
	} else if !this.ForwardProxyChoice.Equal(that1.ForwardProxyChoice) {
		return false
	}
	if that1.OutsideStaticRouteChoice == nil {
		if this.OutsideStaticRouteChoice != nil {
			return false
		}
	} else if this.OutsideStaticRouteChoice == nil {
		return false
	} else if !this.OutsideStaticRouteChoice.Equal(that1.OutsideStaticRouteChoice) {
		return false
	}
	if that1.GlobalNetworkChoice == nil {
		if this.GlobalNetworkChoice != nil {
			return false
		}
	} else if this.GlobalNetworkChoice == nil {
		return false
	} else if !this.GlobalNetworkChoice.Equal(that1.GlobalNetworkChoice) {
		return false
	}
	return true
}
func (this *AzureVnetVoltstackClusterType_NoNetworkPolicy) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AzureVnetVoltstackClusterType_NoNetworkPolicy)
	if !ok {
		that2, ok := that.(AzureVnetVoltstackClusterType_NoNetworkPolicy)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NoNetworkPolicy.Equal(that1.NoNetworkPolicy) {
		return false
	}
	return true
}
func (this *AzureVnetVoltstackClusterType_ActiveNetworkPolicies) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AzureVnetVoltstackClusterType_ActiveNetworkPolicies)
	if !ok {
		that2, ok := that.(AzureVnetVoltstackClusterType_ActiveNetworkPolicies)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ActiveNetworkPolicies.Equal(that1.ActiveNetworkPolicies) {
		return false
	}
	return true
}
func (this *AzureVnetVoltstackClusterType_NoForwardProxy) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AzureVnetVoltstackClusterType_NoForwardProxy)
	if !ok {
		that2, ok := that.(AzureVnetVoltstackClusterType_NoForwardProxy)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NoForwardProxy.Equal(that1.NoForwardProxy) {
		return false
	}
	return true
}
func (this *AzureVnetVoltstackClusterType_ActiveForwardProxyPolicies) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AzureVnetVoltstackClusterType_ActiveForwardProxyPolicies)
	if !ok {
		that2, ok := that.(AzureVnetVoltstackClusterType_ActiveForwardProxyPolicies)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ActiveForwardProxyPolicies.Equal(that1.ActiveForwardProxyPolicies) {
		return false
	}
	return true
}
func (this *AzureVnetVoltstackClusterType_ForwardProxyAllowAll) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AzureVnetVoltstackClusterType_ForwardProxyAllowAll)
	if !ok {
		that2, ok := that.(AzureVnetVoltstackClusterType_ForwardProxyAllowAll)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ForwardProxyAllowAll.Equal(that1.ForwardProxyAllowAll) {
		return false
	}
	return true
}
func (this *AzureVnetVoltstackClusterType_NoOutsideStaticRoutes) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AzureVnetVoltstackClusterType_NoOutsideStaticRoutes)
	if !ok {
		that2, ok := that.(AzureVnetVoltstackClusterType_NoOutsideStaticRoutes)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NoOutsideStaticRoutes.Equal(that1.NoOutsideStaticRoutes) {
		return false
	}
	return true
}
func (this *AzureVnetVoltstackClusterType_OutsideStaticRoutes) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AzureVnetVoltstackClusterType_OutsideStaticRoutes)
	if !ok {
		that2, ok := that.(AzureVnetVoltstackClusterType_OutsideStaticRoutes)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.OutsideStaticRoutes.Equal(that1.OutsideStaticRoutes) {
		return false
	}
	return true
}
func (this *AzureVnetVoltstackClusterType_NoGlobalNetwork) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AzureVnetVoltstackClusterType_NoGlobalNetwork)
	if !ok {
		that2, ok := that.(AzureVnetVoltstackClusterType_NoGlobalNetwork)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NoGlobalNetwork.Equal(that1.NoGlobalNetwork) {
		return false
	}
	return true
}
func (this *AzureVnetVoltstackClusterType_GlobalNetworkList) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AzureVnetVoltstackClusterType_GlobalNetworkList)
	if !ok {
		that2, ok := that.(AzureVnetVoltstackClusterType_GlobalNetworkList)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.GlobalNetworkList.Equal(that1.GlobalNetworkList) {
		return false
	}
	return true
}
func (this *AzureVnetIngressGwReplaceType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AzureVnetIngressGwReplaceType)
	if !ok {
		that2, ok := that.(AzureVnetIngressGwReplaceType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *AzureVnetIngressEgressGwReplaceType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AzureVnetIngressEgressGwReplaceType)
	if !ok {
		that2, ok := that.(AzureVnetIngressEgressGwReplaceType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.NetworkPolicyChoice == nil {
		if this.NetworkPolicyChoice != nil {
			return false
		}
	} else if this.NetworkPolicyChoice == nil {
		return false
	} else if !this.NetworkPolicyChoice.Equal(that1.NetworkPolicyChoice) {
		return false
	}
	if that1.ForwardProxyChoice == nil {
		if this.ForwardProxyChoice != nil {
			return false
		}
	} else if this.ForwardProxyChoice == nil {
		return false
	} else if !this.ForwardProxyChoice.Equal(that1.ForwardProxyChoice) {
		return false
	}
	if that1.InsideStaticRouteChoice == nil {
		if this.InsideStaticRouteChoice != nil {
			return false
		}
	} else if this.InsideStaticRouteChoice == nil {
		return false
	} else if !this.InsideStaticRouteChoice.Equal(that1.InsideStaticRouteChoice) {
		return false
	}
	if that1.OutsideStaticRouteChoice == nil {
		if this.OutsideStaticRouteChoice != nil {
			return false
		}
	} else if this.OutsideStaticRouteChoice == nil {
		return false
	} else if !this.OutsideStaticRouteChoice.Equal(that1.OutsideStaticRouteChoice) {
		return false
	}
	if that1.GlobalNetworkChoice == nil {
		if this.GlobalNetworkChoice != nil {
			return false
		}
	} else if this.GlobalNetworkChoice == nil {
		return false
	} else if !this.GlobalNetworkChoice.Equal(that1.GlobalNetworkChoice) {
		return false
	}
	return true
}
func (this *AzureVnetIngressEgressGwReplaceType_NoNetworkPolicy) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AzureVnetIngressEgressGwReplaceType_NoNetworkPolicy)
	if !ok {
		that2, ok := that.(AzureVnetIngressEgressGwReplaceType_NoNetworkPolicy)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NoNetworkPolicy.Equal(that1.NoNetworkPolicy) {
		return false
	}
	return true
}
func (this *AzureVnetIngressEgressGwReplaceType_ActiveNetworkPolicies) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AzureVnetIngressEgressGwReplaceType_ActiveNetworkPolicies)
	if !ok {
		that2, ok := that.(AzureVnetIngressEgressGwReplaceType_ActiveNetworkPolicies)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ActiveNetworkPolicies.Equal(that1.ActiveNetworkPolicies) {
		return false
	}
	return true
}
func (this *AzureVnetIngressEgressGwReplaceType_NoForwardProxy) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AzureVnetIngressEgressGwReplaceType_NoForwardProxy)
	if !ok {
		that2, ok := that.(AzureVnetIngressEgressGwReplaceType_NoForwardProxy)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NoForwardProxy.Equal(that1.NoForwardProxy) {
		return false
	}
	return true
}
func (this *AzureVnetIngressEgressGwReplaceType_ActiveForwardProxyPolicies) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AzureVnetIngressEgressGwReplaceType_ActiveForwardProxyPolicies)
	if !ok {
		that2, ok := that.(AzureVnetIngressEgressGwReplaceType_ActiveForwardProxyPolicies)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ActiveForwardProxyPolicies.Equal(that1.ActiveForwardProxyPolicies) {
		return false
	}
	return true
}
func (this *AzureVnetIngressEgressGwReplaceType_ForwardProxyAllowAll) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AzureVnetIngressEgressGwReplaceType_ForwardProxyAllowAll)
	if !ok {
		that2, ok := that.(AzureVnetIngressEgressGwReplaceType_ForwardProxyAllowAll)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ForwardProxyAllowAll.Equal(that1.ForwardProxyAllowAll) {
		return false
	}
	return true
}
func (this *AzureVnetIngressEgressGwReplaceType_NoInsideStaticRoutes) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AzureVnetIngressEgressGwReplaceType_NoInsideStaticRoutes)
	if !ok {
		that2, ok := that.(AzureVnetIngressEgressGwReplaceType_NoInsideStaticRoutes)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NoInsideStaticRoutes.Equal(that1.NoInsideStaticRoutes) {
		return false
	}
	return true
}
func (this *AzureVnetIngressEgressGwReplaceType_InsideStaticRoutes) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AzureVnetIngressEgressGwReplaceType_InsideStaticRoutes)
	if !ok {
		that2, ok := that.(AzureVnetIngressEgressGwReplaceType_InsideStaticRoutes)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.InsideStaticRoutes.Equal(that1.InsideStaticRoutes) {
		return false
	}
	return true
}
func (this *AzureVnetIngressEgressGwReplaceType_NoOutsideStaticRoutes) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AzureVnetIngressEgressGwReplaceType_NoOutsideStaticRoutes)
	if !ok {
		that2, ok := that.(AzureVnetIngressEgressGwReplaceType_NoOutsideStaticRoutes)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NoOutsideStaticRoutes.Equal(that1.NoOutsideStaticRoutes) {
		return false
	}
	return true
}
func (this *AzureVnetIngressEgressGwReplaceType_OutsideStaticRoutes) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AzureVnetIngressEgressGwReplaceType_OutsideStaticRoutes)
	if !ok {
		that2, ok := that.(AzureVnetIngressEgressGwReplaceType_OutsideStaticRoutes)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.OutsideStaticRoutes.Equal(that1.OutsideStaticRoutes) {
		return false
	}
	return true
}
func (this *AzureVnetIngressEgressGwReplaceType_NoGlobalNetwork) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AzureVnetIngressEgressGwReplaceType_NoGlobalNetwork)
	if !ok {
		that2, ok := that.(AzureVnetIngressEgressGwReplaceType_NoGlobalNetwork)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NoGlobalNetwork.Equal(that1.NoGlobalNetwork) {
		return false
	}
	return true
}
func (this *AzureVnetIngressEgressGwReplaceType_GlobalNetworkList) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AzureVnetIngressEgressGwReplaceType_GlobalNetworkList)
	if !ok {
		that2, ok := that.(AzureVnetIngressEgressGwReplaceType_GlobalNetworkList)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.GlobalNetworkList.Equal(that1.GlobalNetworkList) {
		return false
	}
	return true
}
func (this *AzureVnetVoltstackClusterReplaceType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AzureVnetVoltstackClusterReplaceType)
	if !ok {
		that2, ok := that.(AzureVnetVoltstackClusterReplaceType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.NetworkPolicyChoice == nil {
		if this.NetworkPolicyChoice != nil {
			return false
		}
	} else if this.NetworkPolicyChoice == nil {
		return false
	} else if !this.NetworkPolicyChoice.Equal(that1.NetworkPolicyChoice) {
		return false
	}
	if that1.ForwardProxyChoice == nil {
		if this.ForwardProxyChoice != nil {
			return false
		}
	} else if this.ForwardProxyChoice == nil {
		return false
	} else if !this.ForwardProxyChoice.Equal(that1.ForwardProxyChoice) {
		return false
	}
	if that1.OutsideStaticRouteChoice == nil {
		if this.OutsideStaticRouteChoice != nil {
			return false
		}
	} else if this.OutsideStaticRouteChoice == nil {
		return false
	} else if !this.OutsideStaticRouteChoice.Equal(that1.OutsideStaticRouteChoice) {
		return false
	}
	if that1.GlobalNetworkChoice == nil {
		if this.GlobalNetworkChoice != nil {
			return false
		}
	} else if this.GlobalNetworkChoice == nil {
		return false
	} else if !this.GlobalNetworkChoice.Equal(that1.GlobalNetworkChoice) {
		return false
	}
	return true
}
func (this *AzureVnetVoltstackClusterReplaceType_NoNetworkPolicy) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AzureVnetVoltstackClusterReplaceType_NoNetworkPolicy)
	if !ok {
		that2, ok := that.(AzureVnetVoltstackClusterReplaceType_NoNetworkPolicy)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NoNetworkPolicy.Equal(that1.NoNetworkPolicy) {
		return false
	}
	return true
}
func (this *AzureVnetVoltstackClusterReplaceType_ActiveNetworkPolicies) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AzureVnetVoltstackClusterReplaceType_ActiveNetworkPolicies)
	if !ok {
		that2, ok := that.(AzureVnetVoltstackClusterReplaceType_ActiveNetworkPolicies)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ActiveNetworkPolicies.Equal(that1.ActiveNetworkPolicies) {
		return false
	}
	return true
}
func (this *AzureVnetVoltstackClusterReplaceType_NoForwardProxy) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AzureVnetVoltstackClusterReplaceType_NoForwardProxy)
	if !ok {
		that2, ok := that.(AzureVnetVoltstackClusterReplaceType_NoForwardProxy)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NoForwardProxy.Equal(that1.NoForwardProxy) {
		return false
	}
	return true
}
func (this *AzureVnetVoltstackClusterReplaceType_ActiveForwardProxyPolicies) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AzureVnetVoltstackClusterReplaceType_ActiveForwardProxyPolicies)
	if !ok {
		that2, ok := that.(AzureVnetVoltstackClusterReplaceType_ActiveForwardProxyPolicies)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ActiveForwardProxyPolicies.Equal(that1.ActiveForwardProxyPolicies) {
		return false
	}
	return true
}
func (this *AzureVnetVoltstackClusterReplaceType_ForwardProxyAllowAll) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AzureVnetVoltstackClusterReplaceType_ForwardProxyAllowAll)
	if !ok {
		that2, ok := that.(AzureVnetVoltstackClusterReplaceType_ForwardProxyAllowAll)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ForwardProxyAllowAll.Equal(that1.ForwardProxyAllowAll) {
		return false
	}
	return true
}
func (this *AzureVnetVoltstackClusterReplaceType_NoOutsideStaticRoutes) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AzureVnetVoltstackClusterReplaceType_NoOutsideStaticRoutes)
	if !ok {
		that2, ok := that.(AzureVnetVoltstackClusterReplaceType_NoOutsideStaticRoutes)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NoOutsideStaticRoutes.Equal(that1.NoOutsideStaticRoutes) {
		return false
	}
	return true
}
func (this *AzureVnetVoltstackClusterReplaceType_OutsideStaticRoutes) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AzureVnetVoltstackClusterReplaceType_OutsideStaticRoutes)
	if !ok {
		that2, ok := that.(AzureVnetVoltstackClusterReplaceType_OutsideStaticRoutes)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.OutsideStaticRoutes.Equal(that1.OutsideStaticRoutes) {
		return false
	}
	return true
}
func (this *AzureVnetVoltstackClusterReplaceType_NoGlobalNetwork) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AzureVnetVoltstackClusterReplaceType_NoGlobalNetwork)
	if !ok {
		that2, ok := that.(AzureVnetVoltstackClusterReplaceType_NoGlobalNetwork)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NoGlobalNetwork.Equal(that1.NoGlobalNetwork) {
		return false
	}
	return true
}
func (this *AzureVnetVoltstackClusterReplaceType_GlobalNetworkList) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AzureVnetVoltstackClusterReplaceType_GlobalNetworkList)
	if !ok {
		that2, ok := that.(AzureVnetVoltstackClusterReplaceType_GlobalNetworkList)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.GlobalNetworkList.Equal(that1.GlobalNetworkList) {
		return false
	}
	return true
}
func (this *GlobalSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType)
	if !ok {
		that2, ok := that.(GlobalSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ResourceGroup != that1.ResourceGroup {
		return false
	}
	if this.AzureRegion != that1.AzureRegion {
		return false
	}
	if !this.Vnet.Equal(that1.Vnet) {
		return false
	}
	if that1.SiteType == nil {
		if this.SiteType != nil {
			return false
		}
	} else if this.SiteType == nil {
		return false
	} else if !this.SiteType.Equal(that1.SiteType) {
		return false
	}
	if this.DiskSize != that1.DiskSize {
		return false
	}
	if that1.Deployment == nil {
		if this.Deployment != nil {
			return false
		}
	} else if this.Deployment == nil {
		return false
	} else if !this.Deployment.Equal(that1.Deployment) {
		return false
	}
	if this.MachineType != that1.MachineType {
		return false
	}
	if this.NodesPerAz != that1.NodesPerAz {
		return false
	}
	if this.VolterraSoftwareVersion != that1.VolterraSoftwareVersion {
		return false
	}
	if this.OperatingSystemVersion != that1.OperatingSystemVersion {
		return false
	}
	if this.SshKey != that1.SshKey {
		return false
	}
	if this.Address != that1.Address {
		return false
	}
	if !this.Coordinates.Equal(that1.Coordinates) {
		return false
	}
	if !this.TfParams.Equal(that1.TfParams) {
		return false
	}
	if !this.ViewInternal.Equal(that1.ViewInternal) {
		return false
	}
	return true
}
func (this *GlobalSpecType_IngressGw) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_IngressGw)
	if !ok {
		that2, ok := that.(GlobalSpecType_IngressGw)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.IngressGw.Equal(that1.IngressGw) {
		return false
	}
	return true
}
func (this *GlobalSpecType_IngressEgressGw) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_IngressEgressGw)
	if !ok {
		that2, ok := that.(GlobalSpecType_IngressEgressGw)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.IngressEgressGw.Equal(that1.IngressEgressGw) {
		return false
	}
	return true
}
func (this *GlobalSpecType_VoltstackCluster) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_VoltstackCluster)
	if !ok {
		that2, ok := that.(GlobalSpecType_VoltstackCluster)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.VoltstackCluster.Equal(that1.VoltstackCluster) {
		return false
	}
	return true
}
func (this *GlobalSpecType_AzureCred) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_AzureCred)
	if !ok {
		that2, ok := that.(GlobalSpecType_AzureCred)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AzureCred.Equal(that1.AzureCred) {
		return false
	}
	return true
}
func (this *GlobalSpecType_Assisted) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_Assisted)
	if !ok {
		that2, ok := that.(GlobalSpecType_Assisted)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Assisted.Equal(that1.Assisted) {
		return false
	}
	return true
}
func (this *CreateSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType)
	if !ok {
		that2, ok := that.(CreateSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ResourceGroup != that1.ResourceGroup {
		return false
	}
	if this.AzureRegion != that1.AzureRegion {
		return false
	}
	if !this.Vnet.Equal(that1.Vnet) {
		return false
	}
	if that1.SiteType == nil {
		if this.SiteType != nil {
			return false
		}
	} else if this.SiteType == nil {
		return false
	} else if !this.SiteType.Equal(that1.SiteType) {
		return false
	}
	if that1.Deployment == nil {
		if this.Deployment != nil {
			return false
		}
	} else if this.Deployment == nil {
		return false
	} else if !this.Deployment.Equal(that1.Deployment) {
		return false
	}
	if this.MachineType != that1.MachineType {
		return false
	}
	if this.NodesPerAz != that1.NodesPerAz {
		return false
	}
	if this.DiskSize != that1.DiskSize {
		return false
	}
	if this.VolterraSoftwareVersion != that1.VolterraSoftwareVersion {
		return false
	}
	if this.OperatingSystemVersion != that1.OperatingSystemVersion {
		return false
	}
	if this.SshKey != that1.SshKey {
		return false
	}
	if this.Address != that1.Address {
		return false
	}
	if !this.Coordinates.Equal(that1.Coordinates) {
		return false
	}
	return true
}
func (this *CreateSpecType_IngressGw) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_IngressGw)
	if !ok {
		that2, ok := that.(CreateSpecType_IngressGw)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.IngressGw.Equal(that1.IngressGw) {
		return false
	}
	return true
}
func (this *CreateSpecType_IngressEgressGw) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_IngressEgressGw)
	if !ok {
		that2, ok := that.(CreateSpecType_IngressEgressGw)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.IngressEgressGw.Equal(that1.IngressEgressGw) {
		return false
	}
	return true
}
func (this *CreateSpecType_VoltstackCluster) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_VoltstackCluster)
	if !ok {
		that2, ok := that.(CreateSpecType_VoltstackCluster)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.VoltstackCluster.Equal(that1.VoltstackCluster) {
		return false
	}
	return true
}
func (this *CreateSpecType_AzureCred) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_AzureCred)
	if !ok {
		that2, ok := that.(CreateSpecType_AzureCred)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AzureCred.Equal(that1.AzureCred) {
		return false
	}
	return true
}
func (this *CreateSpecType_Assisted) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_Assisted)
	if !ok {
		that2, ok := that.(CreateSpecType_Assisted)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Assisted.Equal(that1.Assisted) {
		return false
	}
	return true
}
func (this *ReplaceSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType)
	if !ok {
		that2, ok := that.(ReplaceSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.SiteType == nil {
		if this.SiteType != nil {
			return false
		}
	} else if this.SiteType == nil {
		return false
	} else if !this.SiteType.Equal(that1.SiteType) {
		return false
	}
	if this.VolterraSoftwareVersion != that1.VolterraSoftwareVersion {
		return false
	}
	if this.OperatingSystemVersion != that1.OperatingSystemVersion {
		return false
	}
	if this.NodesPerAz != that1.NodesPerAz {
		return false
	}
	if this.Address != that1.Address {
		return false
	}
	if !this.Coordinates.Equal(that1.Coordinates) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_IngressGw) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_IngressGw)
	if !ok {
		that2, ok := that.(ReplaceSpecType_IngressGw)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.IngressGw.Equal(that1.IngressGw) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_IngressEgressGw) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_IngressEgressGw)
	if !ok {
		that2, ok := that.(ReplaceSpecType_IngressEgressGw)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.IngressEgressGw.Equal(that1.IngressEgressGw) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_VoltstackCluster) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_VoltstackCluster)
	if !ok {
		that2, ok := that.(ReplaceSpecType_VoltstackCluster)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.VoltstackCluster.Equal(that1.VoltstackCluster) {
		return false
	}
	return true
}
func (this *GetSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType)
	if !ok {
		that2, ok := that.(GetSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ResourceGroup != that1.ResourceGroup {
		return false
	}
	if this.AzureRegion != that1.AzureRegion {
		return false
	}
	if !this.Vnet.Equal(that1.Vnet) {
		return false
	}
	if that1.SiteType == nil {
		if this.SiteType != nil {
			return false
		}
	} else if this.SiteType == nil {
		return false
	} else if !this.SiteType.Equal(that1.SiteType) {
		return false
	}
	if that1.Deployment == nil {
		if this.Deployment != nil {
			return false
		}
	} else if this.Deployment == nil {
		return false
	} else if !this.Deployment.Equal(that1.Deployment) {
		return false
	}
	if this.MachineType != that1.MachineType {
		return false
	}
	if this.NodesPerAz != that1.NodesPerAz {
		return false
	}
	if this.DiskSize != that1.DiskSize {
		return false
	}
	if this.VolterraSoftwareVersion != that1.VolterraSoftwareVersion {
		return false
	}
	if this.OperatingSystemVersion != that1.OperatingSystemVersion {
		return false
	}
	if this.SshKey != that1.SshKey {
		return false
	}
	if this.Address != that1.Address {
		return false
	}
	if !this.Coordinates.Equal(that1.Coordinates) {
		return false
	}
	return true
}
func (this *GetSpecType_IngressGw) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_IngressGw)
	if !ok {
		that2, ok := that.(GetSpecType_IngressGw)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.IngressGw.Equal(that1.IngressGw) {
		return false
	}
	return true
}
func (this *GetSpecType_IngressEgressGw) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_IngressEgressGw)
	if !ok {
		that2, ok := that.(GetSpecType_IngressEgressGw)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.IngressEgressGw.Equal(that1.IngressEgressGw) {
		return false
	}
	return true
}
func (this *GetSpecType_VoltstackCluster) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_VoltstackCluster)
	if !ok {
		that2, ok := that.(GetSpecType_VoltstackCluster)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.VoltstackCluster.Equal(that1.VoltstackCluster) {
		return false
	}
	return true
}
func (this *GetSpecType_AzureCred) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_AzureCred)
	if !ok {
		that2, ok := that.(GetSpecType_AzureCred)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AzureCred.Equal(that1.AzureCred) {
		return false
	}
	return true
}
func (this *GetSpecType_Assisted) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_Assisted)
	if !ok {
		that2, ok := that.(GetSpecType_Assisted)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Assisted.Equal(that1.Assisted) {
		return false
	}
	return true
}
func (this *AzureVnetIngressGwType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&azure_vnet_site.AzureVnetIngressGwType{")
	if this.AzNodes != nil {
		s = append(s, "AzNodes: "+fmt.Sprintf("%#v", this.AzNodes)+",\n")
	}
	s = append(s, "AzureCertifiedHw: "+fmt.Sprintf("%#v", this.AzureCertifiedHw)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AzureVnetIngressEgressGwType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 17)
	s = append(s, "&azure_vnet_site.AzureVnetIngressEgressGwType{")
	if this.AzNodes != nil {
		s = append(s, "AzNodes: "+fmt.Sprintf("%#v", this.AzNodes)+",\n")
	}
	if this.NetworkPolicyChoice != nil {
		s = append(s, "NetworkPolicyChoice: "+fmt.Sprintf("%#v", this.NetworkPolicyChoice)+",\n")
	}
	if this.ForwardProxyChoice != nil {
		s = append(s, "ForwardProxyChoice: "+fmt.Sprintf("%#v", this.ForwardProxyChoice)+",\n")
	}
	s = append(s, "AzureCertifiedHw: "+fmt.Sprintf("%#v", this.AzureCertifiedHw)+",\n")
	if this.InsideStaticRouteChoice != nil {
		s = append(s, "InsideStaticRouteChoice: "+fmt.Sprintf("%#v", this.InsideStaticRouteChoice)+",\n")
	}
	if this.OutsideStaticRouteChoice != nil {
		s = append(s, "OutsideStaticRouteChoice: "+fmt.Sprintf("%#v", this.OutsideStaticRouteChoice)+",\n")
	}
	if this.GlobalNetworkChoice != nil {
		s = append(s, "GlobalNetworkChoice: "+fmt.Sprintf("%#v", this.GlobalNetworkChoice)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AzureVnetIngressEgressGwType_NoNetworkPolicy) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.AzureVnetIngressEgressGwType_NoNetworkPolicy{` +
		`NoNetworkPolicy:` + fmt.Sprintf("%#v", this.NoNetworkPolicy) + `}`}, ", ")
	return s
}
func (this *AzureVnetIngressEgressGwType_ActiveNetworkPolicies) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.AzureVnetIngressEgressGwType_ActiveNetworkPolicies{` +
		`ActiveNetworkPolicies:` + fmt.Sprintf("%#v", this.ActiveNetworkPolicies) + `}`}, ", ")
	return s
}
func (this *AzureVnetIngressEgressGwType_NoForwardProxy) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.AzureVnetIngressEgressGwType_NoForwardProxy{` +
		`NoForwardProxy:` + fmt.Sprintf("%#v", this.NoForwardProxy) + `}`}, ", ")
	return s
}
func (this *AzureVnetIngressEgressGwType_ActiveForwardProxyPolicies) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.AzureVnetIngressEgressGwType_ActiveForwardProxyPolicies{` +
		`ActiveForwardProxyPolicies:` + fmt.Sprintf("%#v", this.ActiveForwardProxyPolicies) + `}`}, ", ")
	return s
}
func (this *AzureVnetIngressEgressGwType_ForwardProxyAllowAll) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.AzureVnetIngressEgressGwType_ForwardProxyAllowAll{` +
		`ForwardProxyAllowAll:` + fmt.Sprintf("%#v", this.ForwardProxyAllowAll) + `}`}, ", ")
	return s
}
func (this *AzureVnetIngressEgressGwType_NoInsideStaticRoutes) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.AzureVnetIngressEgressGwType_NoInsideStaticRoutes{` +
		`NoInsideStaticRoutes:` + fmt.Sprintf("%#v", this.NoInsideStaticRoutes) + `}`}, ", ")
	return s
}
func (this *AzureVnetIngressEgressGwType_InsideStaticRoutes) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.AzureVnetIngressEgressGwType_InsideStaticRoutes{` +
		`InsideStaticRoutes:` + fmt.Sprintf("%#v", this.InsideStaticRoutes) + `}`}, ", ")
	return s
}
func (this *AzureVnetIngressEgressGwType_NoOutsideStaticRoutes) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.AzureVnetIngressEgressGwType_NoOutsideStaticRoutes{` +
		`NoOutsideStaticRoutes:` + fmt.Sprintf("%#v", this.NoOutsideStaticRoutes) + `}`}, ", ")
	return s
}
func (this *AzureVnetIngressEgressGwType_OutsideStaticRoutes) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.AzureVnetIngressEgressGwType_OutsideStaticRoutes{` +
		`OutsideStaticRoutes:` + fmt.Sprintf("%#v", this.OutsideStaticRoutes) + `}`}, ", ")
	return s
}
func (this *AzureVnetIngressEgressGwType_NoGlobalNetwork) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.AzureVnetIngressEgressGwType_NoGlobalNetwork{` +
		`NoGlobalNetwork:` + fmt.Sprintf("%#v", this.NoGlobalNetwork) + `}`}, ", ")
	return s
}
func (this *AzureVnetIngressEgressGwType_GlobalNetworkList) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.AzureVnetIngressEgressGwType_GlobalNetworkList{` +
		`GlobalNetworkList:` + fmt.Sprintf("%#v", this.GlobalNetworkList) + `}`}, ", ")
	return s
}
func (this *AzureVnetVoltstackClusterType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 15)
	s = append(s, "&azure_vnet_site.AzureVnetVoltstackClusterType{")
	s = append(s, "AzureCertifiedHw: "+fmt.Sprintf("%#v", this.AzureCertifiedHw)+",\n")
	if this.AzNodes != nil {
		s = append(s, "AzNodes: "+fmt.Sprintf("%#v", this.AzNodes)+",\n")
	}
	if this.NetworkPolicyChoice != nil {
		s = append(s, "NetworkPolicyChoice: "+fmt.Sprintf("%#v", this.NetworkPolicyChoice)+",\n")
	}
	if this.ForwardProxyChoice != nil {
		s = append(s, "ForwardProxyChoice: "+fmt.Sprintf("%#v", this.ForwardProxyChoice)+",\n")
	}
	if this.OutsideStaticRouteChoice != nil {
		s = append(s, "OutsideStaticRouteChoice: "+fmt.Sprintf("%#v", this.OutsideStaticRouteChoice)+",\n")
	}
	if this.GlobalNetworkChoice != nil {
		s = append(s, "GlobalNetworkChoice: "+fmt.Sprintf("%#v", this.GlobalNetworkChoice)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AzureVnetVoltstackClusterType_NoNetworkPolicy) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.AzureVnetVoltstackClusterType_NoNetworkPolicy{` +
		`NoNetworkPolicy:` + fmt.Sprintf("%#v", this.NoNetworkPolicy) + `}`}, ", ")
	return s
}
func (this *AzureVnetVoltstackClusterType_ActiveNetworkPolicies) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.AzureVnetVoltstackClusterType_ActiveNetworkPolicies{` +
		`ActiveNetworkPolicies:` + fmt.Sprintf("%#v", this.ActiveNetworkPolicies) + `}`}, ", ")
	return s
}
func (this *AzureVnetVoltstackClusterType_NoForwardProxy) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.AzureVnetVoltstackClusterType_NoForwardProxy{` +
		`NoForwardProxy:` + fmt.Sprintf("%#v", this.NoForwardProxy) + `}`}, ", ")
	return s
}
func (this *AzureVnetVoltstackClusterType_ActiveForwardProxyPolicies) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.AzureVnetVoltstackClusterType_ActiveForwardProxyPolicies{` +
		`ActiveForwardProxyPolicies:` + fmt.Sprintf("%#v", this.ActiveForwardProxyPolicies) + `}`}, ", ")
	return s
}
func (this *AzureVnetVoltstackClusterType_ForwardProxyAllowAll) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.AzureVnetVoltstackClusterType_ForwardProxyAllowAll{` +
		`ForwardProxyAllowAll:` + fmt.Sprintf("%#v", this.ForwardProxyAllowAll) + `}`}, ", ")
	return s
}
func (this *AzureVnetVoltstackClusterType_NoOutsideStaticRoutes) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.AzureVnetVoltstackClusterType_NoOutsideStaticRoutes{` +
		`NoOutsideStaticRoutes:` + fmt.Sprintf("%#v", this.NoOutsideStaticRoutes) + `}`}, ", ")
	return s
}
func (this *AzureVnetVoltstackClusterType_OutsideStaticRoutes) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.AzureVnetVoltstackClusterType_OutsideStaticRoutes{` +
		`OutsideStaticRoutes:` + fmt.Sprintf("%#v", this.OutsideStaticRoutes) + `}`}, ", ")
	return s
}
func (this *AzureVnetVoltstackClusterType_NoGlobalNetwork) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.AzureVnetVoltstackClusterType_NoGlobalNetwork{` +
		`NoGlobalNetwork:` + fmt.Sprintf("%#v", this.NoGlobalNetwork) + `}`}, ", ")
	return s
}
func (this *AzureVnetVoltstackClusterType_GlobalNetworkList) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.AzureVnetVoltstackClusterType_GlobalNetworkList{` +
		`GlobalNetworkList:` + fmt.Sprintf("%#v", this.GlobalNetworkList) + `}`}, ", ")
	return s
}
func (this *AzureVnetIngressGwReplaceType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&azure_vnet_site.AzureVnetIngressGwReplaceType{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AzureVnetIngressEgressGwReplaceType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 15)
	s = append(s, "&azure_vnet_site.AzureVnetIngressEgressGwReplaceType{")
	if this.NetworkPolicyChoice != nil {
		s = append(s, "NetworkPolicyChoice: "+fmt.Sprintf("%#v", this.NetworkPolicyChoice)+",\n")
	}
	if this.ForwardProxyChoice != nil {
		s = append(s, "ForwardProxyChoice: "+fmt.Sprintf("%#v", this.ForwardProxyChoice)+",\n")
	}
	if this.InsideStaticRouteChoice != nil {
		s = append(s, "InsideStaticRouteChoice: "+fmt.Sprintf("%#v", this.InsideStaticRouteChoice)+",\n")
	}
	if this.OutsideStaticRouteChoice != nil {
		s = append(s, "OutsideStaticRouteChoice: "+fmt.Sprintf("%#v", this.OutsideStaticRouteChoice)+",\n")
	}
	if this.GlobalNetworkChoice != nil {
		s = append(s, "GlobalNetworkChoice: "+fmt.Sprintf("%#v", this.GlobalNetworkChoice)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AzureVnetIngressEgressGwReplaceType_NoNetworkPolicy) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.AzureVnetIngressEgressGwReplaceType_NoNetworkPolicy{` +
		`NoNetworkPolicy:` + fmt.Sprintf("%#v", this.NoNetworkPolicy) + `}`}, ", ")
	return s
}
func (this *AzureVnetIngressEgressGwReplaceType_ActiveNetworkPolicies) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.AzureVnetIngressEgressGwReplaceType_ActiveNetworkPolicies{` +
		`ActiveNetworkPolicies:` + fmt.Sprintf("%#v", this.ActiveNetworkPolicies) + `}`}, ", ")
	return s
}
func (this *AzureVnetIngressEgressGwReplaceType_NoForwardProxy) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.AzureVnetIngressEgressGwReplaceType_NoForwardProxy{` +
		`NoForwardProxy:` + fmt.Sprintf("%#v", this.NoForwardProxy) + `}`}, ", ")
	return s
}
func (this *AzureVnetIngressEgressGwReplaceType_ActiveForwardProxyPolicies) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.AzureVnetIngressEgressGwReplaceType_ActiveForwardProxyPolicies{` +
		`ActiveForwardProxyPolicies:` + fmt.Sprintf("%#v", this.ActiveForwardProxyPolicies) + `}`}, ", ")
	return s
}
func (this *AzureVnetIngressEgressGwReplaceType_ForwardProxyAllowAll) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.AzureVnetIngressEgressGwReplaceType_ForwardProxyAllowAll{` +
		`ForwardProxyAllowAll:` + fmt.Sprintf("%#v", this.ForwardProxyAllowAll) + `}`}, ", ")
	return s
}
func (this *AzureVnetIngressEgressGwReplaceType_NoInsideStaticRoutes) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.AzureVnetIngressEgressGwReplaceType_NoInsideStaticRoutes{` +
		`NoInsideStaticRoutes:` + fmt.Sprintf("%#v", this.NoInsideStaticRoutes) + `}`}, ", ")
	return s
}
func (this *AzureVnetIngressEgressGwReplaceType_InsideStaticRoutes) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.AzureVnetIngressEgressGwReplaceType_InsideStaticRoutes{` +
		`InsideStaticRoutes:` + fmt.Sprintf("%#v", this.InsideStaticRoutes) + `}`}, ", ")
	return s
}
func (this *AzureVnetIngressEgressGwReplaceType_NoOutsideStaticRoutes) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.AzureVnetIngressEgressGwReplaceType_NoOutsideStaticRoutes{` +
		`NoOutsideStaticRoutes:` + fmt.Sprintf("%#v", this.NoOutsideStaticRoutes) + `}`}, ", ")
	return s
}
func (this *AzureVnetIngressEgressGwReplaceType_OutsideStaticRoutes) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.AzureVnetIngressEgressGwReplaceType_OutsideStaticRoutes{` +
		`OutsideStaticRoutes:` + fmt.Sprintf("%#v", this.OutsideStaticRoutes) + `}`}, ", ")
	return s
}
func (this *AzureVnetIngressEgressGwReplaceType_NoGlobalNetwork) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.AzureVnetIngressEgressGwReplaceType_NoGlobalNetwork{` +
		`NoGlobalNetwork:` + fmt.Sprintf("%#v", this.NoGlobalNetwork) + `}`}, ", ")
	return s
}
func (this *AzureVnetIngressEgressGwReplaceType_GlobalNetworkList) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.AzureVnetIngressEgressGwReplaceType_GlobalNetworkList{` +
		`GlobalNetworkList:` + fmt.Sprintf("%#v", this.GlobalNetworkList) + `}`}, ", ")
	return s
}
func (this *AzureVnetVoltstackClusterReplaceType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 13)
	s = append(s, "&azure_vnet_site.AzureVnetVoltstackClusterReplaceType{")
	if this.NetworkPolicyChoice != nil {
		s = append(s, "NetworkPolicyChoice: "+fmt.Sprintf("%#v", this.NetworkPolicyChoice)+",\n")
	}
	if this.ForwardProxyChoice != nil {
		s = append(s, "ForwardProxyChoice: "+fmt.Sprintf("%#v", this.ForwardProxyChoice)+",\n")
	}
	if this.OutsideStaticRouteChoice != nil {
		s = append(s, "OutsideStaticRouteChoice: "+fmt.Sprintf("%#v", this.OutsideStaticRouteChoice)+",\n")
	}
	if this.GlobalNetworkChoice != nil {
		s = append(s, "GlobalNetworkChoice: "+fmt.Sprintf("%#v", this.GlobalNetworkChoice)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AzureVnetVoltstackClusterReplaceType_NoNetworkPolicy) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.AzureVnetVoltstackClusterReplaceType_NoNetworkPolicy{` +
		`NoNetworkPolicy:` + fmt.Sprintf("%#v", this.NoNetworkPolicy) + `}`}, ", ")
	return s
}
func (this *AzureVnetVoltstackClusterReplaceType_ActiveNetworkPolicies) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.AzureVnetVoltstackClusterReplaceType_ActiveNetworkPolicies{` +
		`ActiveNetworkPolicies:` + fmt.Sprintf("%#v", this.ActiveNetworkPolicies) + `}`}, ", ")
	return s
}
func (this *AzureVnetVoltstackClusterReplaceType_NoForwardProxy) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.AzureVnetVoltstackClusterReplaceType_NoForwardProxy{` +
		`NoForwardProxy:` + fmt.Sprintf("%#v", this.NoForwardProxy) + `}`}, ", ")
	return s
}
func (this *AzureVnetVoltstackClusterReplaceType_ActiveForwardProxyPolicies) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.AzureVnetVoltstackClusterReplaceType_ActiveForwardProxyPolicies{` +
		`ActiveForwardProxyPolicies:` + fmt.Sprintf("%#v", this.ActiveForwardProxyPolicies) + `}`}, ", ")
	return s
}
func (this *AzureVnetVoltstackClusterReplaceType_ForwardProxyAllowAll) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.AzureVnetVoltstackClusterReplaceType_ForwardProxyAllowAll{` +
		`ForwardProxyAllowAll:` + fmt.Sprintf("%#v", this.ForwardProxyAllowAll) + `}`}, ", ")
	return s
}
func (this *AzureVnetVoltstackClusterReplaceType_NoOutsideStaticRoutes) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.AzureVnetVoltstackClusterReplaceType_NoOutsideStaticRoutes{` +
		`NoOutsideStaticRoutes:` + fmt.Sprintf("%#v", this.NoOutsideStaticRoutes) + `}`}, ", ")
	return s
}
func (this *AzureVnetVoltstackClusterReplaceType_OutsideStaticRoutes) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.AzureVnetVoltstackClusterReplaceType_OutsideStaticRoutes{` +
		`OutsideStaticRoutes:` + fmt.Sprintf("%#v", this.OutsideStaticRoutes) + `}`}, ", ")
	return s
}
func (this *AzureVnetVoltstackClusterReplaceType_NoGlobalNetwork) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.AzureVnetVoltstackClusterReplaceType_NoGlobalNetwork{` +
		`NoGlobalNetwork:` + fmt.Sprintf("%#v", this.NoGlobalNetwork) + `}`}, ", ")
	return s
}
func (this *AzureVnetVoltstackClusterReplaceType_GlobalNetworkList) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.AzureVnetVoltstackClusterReplaceType_GlobalNetworkList{` +
		`GlobalNetworkList:` + fmt.Sprintf("%#v", this.GlobalNetworkList) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 22)
	s = append(s, "&azure_vnet_site.GlobalSpecType{")
	s = append(s, "ResourceGroup: "+fmt.Sprintf("%#v", this.ResourceGroup)+",\n")
	s = append(s, "AzureRegion: "+fmt.Sprintf("%#v", this.AzureRegion)+",\n")
	if this.Vnet != nil {
		s = append(s, "Vnet: "+fmt.Sprintf("%#v", this.Vnet)+",\n")
	}
	if this.SiteType != nil {
		s = append(s, "SiteType: "+fmt.Sprintf("%#v", this.SiteType)+",\n")
	}
	s = append(s, "DiskSize: "+fmt.Sprintf("%#v", this.DiskSize)+",\n")
	if this.Deployment != nil {
		s = append(s, "Deployment: "+fmt.Sprintf("%#v", this.Deployment)+",\n")
	}
	s = append(s, "MachineType: "+fmt.Sprintf("%#v", this.MachineType)+",\n")
	s = append(s, "NodesPerAz: "+fmt.Sprintf("%#v", this.NodesPerAz)+",\n")
	s = append(s, "VolterraSoftwareVersion: "+fmt.Sprintf("%#v", this.VolterraSoftwareVersion)+",\n")
	s = append(s, "OperatingSystemVersion: "+fmt.Sprintf("%#v", this.OperatingSystemVersion)+",\n")
	s = append(s, "SshKey: "+fmt.Sprintf("%#v", this.SshKey)+",\n")
	s = append(s, "Address: "+fmt.Sprintf("%#v", this.Address)+",\n")
	if this.Coordinates != nil {
		s = append(s, "Coordinates: "+fmt.Sprintf("%#v", this.Coordinates)+",\n")
	}
	if this.TfParams != nil {
		s = append(s, "TfParams: "+fmt.Sprintf("%#v", this.TfParams)+",\n")
	}
	if this.ViewInternal != nil {
		s = append(s, "ViewInternal: "+fmt.Sprintf("%#v", this.ViewInternal)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GlobalSpecType_IngressGw) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.GlobalSpecType_IngressGw{` +
		`IngressGw:` + fmt.Sprintf("%#v", this.IngressGw) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_IngressEgressGw) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.GlobalSpecType_IngressEgressGw{` +
		`IngressEgressGw:` + fmt.Sprintf("%#v", this.IngressEgressGw) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_VoltstackCluster) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.GlobalSpecType_VoltstackCluster{` +
		`VoltstackCluster:` + fmt.Sprintf("%#v", this.VoltstackCluster) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_AzureCred) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.GlobalSpecType_AzureCred{` +
		`AzureCred:` + fmt.Sprintf("%#v", this.AzureCred) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_Assisted) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.GlobalSpecType_Assisted{` +
		`Assisted:` + fmt.Sprintf("%#v", this.Assisted) + `}`}, ", ")
	return s
}
func (this *CreateSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 20)
	s = append(s, "&azure_vnet_site.CreateSpecType{")
	s = append(s, "ResourceGroup: "+fmt.Sprintf("%#v", this.ResourceGroup)+",\n")
	s = append(s, "AzureRegion: "+fmt.Sprintf("%#v", this.AzureRegion)+",\n")
	if this.Vnet != nil {
		s = append(s, "Vnet: "+fmt.Sprintf("%#v", this.Vnet)+",\n")
	}
	if this.SiteType != nil {
		s = append(s, "SiteType: "+fmt.Sprintf("%#v", this.SiteType)+",\n")
	}
	if this.Deployment != nil {
		s = append(s, "Deployment: "+fmt.Sprintf("%#v", this.Deployment)+",\n")
	}
	s = append(s, "MachineType: "+fmt.Sprintf("%#v", this.MachineType)+",\n")
	s = append(s, "NodesPerAz: "+fmt.Sprintf("%#v", this.NodesPerAz)+",\n")
	s = append(s, "DiskSize: "+fmt.Sprintf("%#v", this.DiskSize)+",\n")
	s = append(s, "VolterraSoftwareVersion: "+fmt.Sprintf("%#v", this.VolterraSoftwareVersion)+",\n")
	s = append(s, "OperatingSystemVersion: "+fmt.Sprintf("%#v", this.OperatingSystemVersion)+",\n")
	s = append(s, "SshKey: "+fmt.Sprintf("%#v", this.SshKey)+",\n")
	s = append(s, "Address: "+fmt.Sprintf("%#v", this.Address)+",\n")
	if this.Coordinates != nil {
		s = append(s, "Coordinates: "+fmt.Sprintf("%#v", this.Coordinates)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CreateSpecType_IngressGw) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.CreateSpecType_IngressGw{` +
		`IngressGw:` + fmt.Sprintf("%#v", this.IngressGw) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_IngressEgressGw) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.CreateSpecType_IngressEgressGw{` +
		`IngressEgressGw:` + fmt.Sprintf("%#v", this.IngressEgressGw) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_VoltstackCluster) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.CreateSpecType_VoltstackCluster{` +
		`VoltstackCluster:` + fmt.Sprintf("%#v", this.VoltstackCluster) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_AzureCred) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.CreateSpecType_AzureCred{` +
		`AzureCred:` + fmt.Sprintf("%#v", this.AzureCred) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_Assisted) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.CreateSpecType_Assisted{` +
		`Assisted:` + fmt.Sprintf("%#v", this.Assisted) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 12)
	s = append(s, "&azure_vnet_site.ReplaceSpecType{")
	if this.SiteType != nil {
		s = append(s, "SiteType: "+fmt.Sprintf("%#v", this.SiteType)+",\n")
	}
	s = append(s, "VolterraSoftwareVersion: "+fmt.Sprintf("%#v", this.VolterraSoftwareVersion)+",\n")
	s = append(s, "OperatingSystemVersion: "+fmt.Sprintf("%#v", this.OperatingSystemVersion)+",\n")
	s = append(s, "NodesPerAz: "+fmt.Sprintf("%#v", this.NodesPerAz)+",\n")
	s = append(s, "Address: "+fmt.Sprintf("%#v", this.Address)+",\n")
	if this.Coordinates != nil {
		s = append(s, "Coordinates: "+fmt.Sprintf("%#v", this.Coordinates)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ReplaceSpecType_IngressGw) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.ReplaceSpecType_IngressGw{` +
		`IngressGw:` + fmt.Sprintf("%#v", this.IngressGw) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_IngressEgressGw) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.ReplaceSpecType_IngressEgressGw{` +
		`IngressEgressGw:` + fmt.Sprintf("%#v", this.IngressEgressGw) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_VoltstackCluster) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.ReplaceSpecType_VoltstackCluster{` +
		`VoltstackCluster:` + fmt.Sprintf("%#v", this.VoltstackCluster) + `}`}, ", ")
	return s
}
func (this *GetSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 20)
	s = append(s, "&azure_vnet_site.GetSpecType{")
	s = append(s, "ResourceGroup: "+fmt.Sprintf("%#v", this.ResourceGroup)+",\n")
	s = append(s, "AzureRegion: "+fmt.Sprintf("%#v", this.AzureRegion)+",\n")
	if this.Vnet != nil {
		s = append(s, "Vnet: "+fmt.Sprintf("%#v", this.Vnet)+",\n")
	}
	if this.SiteType != nil {
		s = append(s, "SiteType: "+fmt.Sprintf("%#v", this.SiteType)+",\n")
	}
	if this.Deployment != nil {
		s = append(s, "Deployment: "+fmt.Sprintf("%#v", this.Deployment)+",\n")
	}
	s = append(s, "MachineType: "+fmt.Sprintf("%#v", this.MachineType)+",\n")
	s = append(s, "NodesPerAz: "+fmt.Sprintf("%#v", this.NodesPerAz)+",\n")
	s = append(s, "DiskSize: "+fmt.Sprintf("%#v", this.DiskSize)+",\n")
	s = append(s, "VolterraSoftwareVersion: "+fmt.Sprintf("%#v", this.VolterraSoftwareVersion)+",\n")
	s = append(s, "OperatingSystemVersion: "+fmt.Sprintf("%#v", this.OperatingSystemVersion)+",\n")
	s = append(s, "SshKey: "+fmt.Sprintf("%#v", this.SshKey)+",\n")
	s = append(s, "Address: "+fmt.Sprintf("%#v", this.Address)+",\n")
	if this.Coordinates != nil {
		s = append(s, "Coordinates: "+fmt.Sprintf("%#v", this.Coordinates)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetSpecType_IngressGw) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.GetSpecType_IngressGw{` +
		`IngressGw:` + fmt.Sprintf("%#v", this.IngressGw) + `}`}, ", ")
	return s
}
func (this *GetSpecType_IngressEgressGw) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.GetSpecType_IngressEgressGw{` +
		`IngressEgressGw:` + fmt.Sprintf("%#v", this.IngressEgressGw) + `}`}, ", ")
	return s
}
func (this *GetSpecType_VoltstackCluster) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.GetSpecType_VoltstackCluster{` +
		`VoltstackCluster:` + fmt.Sprintf("%#v", this.VoltstackCluster) + `}`}, ", ")
	return s
}
func (this *GetSpecType_AzureCred) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.GetSpecType_AzureCred{` +
		`AzureCred:` + fmt.Sprintf("%#v", this.AzureCred) + `}`}, ", ")
	return s
}
func (this *GetSpecType_Assisted) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.GetSpecType_Assisted{` +
		`Assisted:` + fmt.Sprintf("%#v", this.Assisted) + `}`}, ", ")
	return s
}
func valueToGoStringTypes(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *AzureVnetIngressGwType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AzureVnetIngressGwType) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.AzNodes) > 0 {
		for _, msg := range m.AzNodes {
			dAtA[i] = 0xa
			i++
			i = encodeVarintTypes(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.AzureCertifiedHw) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTypes(dAtA, i, uint64(len(m.AzureCertifiedHw)))
		i += copy(dAtA[i:], m.AzureCertifiedHw)
	}
	return i, nil
}

func (m *AzureVnetIngressEgressGwType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AzureVnetIngressEgressGwType) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.AzNodes) > 0 {
		for _, msg := range m.AzNodes {
			dAtA[i] = 0xa
			i++
			i = encodeVarintTypes(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.NetworkPolicyChoice != nil {
		nn1, err := m.NetworkPolicyChoice.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn1
	}
	if m.ForwardProxyChoice != nil {
		nn2, err := m.ForwardProxyChoice.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn2
	}
	if len(m.AzureCertifiedHw) > 0 {
		dAtA[i] = 0x42
		i++
		i = encodeVarintTypes(dAtA, i, uint64(len(m.AzureCertifiedHw)))
		i += copy(dAtA[i:], m.AzureCertifiedHw)
	}
	if m.InsideStaticRouteChoice != nil {
		nn3, err := m.InsideStaticRouteChoice.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn3
	}
	if m.OutsideStaticRouteChoice != nil {
		nn4, err := m.OutsideStaticRouteChoice.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn4
	}
	if m.GlobalNetworkChoice != nil {
		nn5, err := m.GlobalNetworkChoice.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn5
	}
	return i, nil
}

func (m *AzureVnetIngressEgressGwType_NoNetworkPolicy) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.NoNetworkPolicy != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.NoNetworkPolicy.Size()))
		n6, err := m.NoNetworkPolicy.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	return i, nil
}
func (m *AzureVnetIngressEgressGwType_NoForwardProxy) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.NoForwardProxy != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.NoForwardProxy.Size()))
		n7, err := m.NoForwardProxy.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	return i, nil
}
func (m *AzureVnetIngressEgressGwType_ActiveForwardProxyPolicies) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.ActiveForwardProxyPolicies != nil {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.ActiveForwardProxyPolicies.Size()))
		n8, err := m.ActiveForwardProxyPolicies.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n8
	}
	return i, nil
}
func (m *AzureVnetIngressEgressGwType_ActiveNetworkPolicies) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.ActiveNetworkPolicies != nil {
		dAtA[i] = 0x52
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.ActiveNetworkPolicies.Size()))
		n9, err := m.ActiveNetworkPolicies.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n9
	}
	return i, nil
}
func (m *AzureVnetIngressEgressGwType_NoInsideStaticRoutes) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.NoInsideStaticRoutes != nil {
		dAtA[i] = 0x62
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.NoInsideStaticRoutes.Size()))
		n10, err := m.NoInsideStaticRoutes.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n10
	}
	return i, nil
}
func (m *AzureVnetIngressEgressGwType_InsideStaticRoutes) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.InsideStaticRoutes != nil {
		dAtA[i] = 0x6a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.InsideStaticRoutes.Size()))
		n11, err := m.InsideStaticRoutes.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n11
	}
	return i, nil
}
func (m *AzureVnetIngressEgressGwType_NoOutsideStaticRoutes) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.NoOutsideStaticRoutes != nil {
		dAtA[i] = 0x7a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.NoOutsideStaticRoutes.Size()))
		n12, err := m.NoOutsideStaticRoutes.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n12
	}
	return i, nil
}
func (m *AzureVnetIngressEgressGwType_OutsideStaticRoutes) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.OutsideStaticRoutes != nil {
		dAtA[i] = 0x82
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.OutsideStaticRoutes.Size()))
		n13, err := m.OutsideStaticRoutes.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n13
	}
	return i, nil
}
func (m *AzureVnetIngressEgressGwType_NoGlobalNetwork) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.NoGlobalNetwork != nil {
		dAtA[i] = 0x92
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.NoGlobalNetwork.Size()))
		n14, err := m.NoGlobalNetwork.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n14
	}
	return i, nil
}
func (m *AzureVnetIngressEgressGwType_GlobalNetworkList) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.GlobalNetworkList != nil {
		dAtA[i] = 0x9a
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.GlobalNetworkList.Size()))
		n15, err := m.GlobalNetworkList.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n15
	}
	return i, nil
}
func (m *AzureVnetIngressEgressGwType_ForwardProxyAllowAll) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.ForwardProxyAllowAll != nil {
		dAtA[i] = 0xa2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.ForwardProxyAllowAll.Size()))
		n16, err := m.ForwardProxyAllowAll.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n16
	}
	return i, nil
}
func (m *AzureVnetVoltstackClusterType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AzureVnetVoltstackClusterType) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.AzureCertifiedHw) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTypes(dAtA, i, uint64(len(m.AzureCertifiedHw)))
		i += copy(dAtA[i:], m.AzureCertifiedHw)
	}
	if len(m.AzNodes) > 0 {
		for _, msg := range m.AzNodes {
			dAtA[i] = 0x12
			i++
			i = encodeVarintTypes(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.NetworkPolicyChoice != nil {
		nn17, err := m.NetworkPolicyChoice.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn17
	}
	if m.ForwardProxyChoice != nil {
		nn18, err := m.ForwardProxyChoice.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn18
	}
	if m.OutsideStaticRouteChoice != nil {
		nn19, err := m.OutsideStaticRouteChoice.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn19
	}
	if m.GlobalNetworkChoice != nil {
		nn20, err := m.GlobalNetworkChoice.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn20
	}
	return i, nil
}

func (m *AzureVnetVoltstackClusterType_NoNetworkPolicy) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.NoNetworkPolicy != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.NoNetworkPolicy.Size()))
		n21, err := m.NoNetworkPolicy.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n21
	}
	return i, nil
}
func (m *AzureVnetVoltstackClusterType_ActiveNetworkPolicies) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.ActiveNetworkPolicies != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.ActiveNetworkPolicies.Size()))
		n22, err := m.ActiveNetworkPolicies.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n22
	}
	return i, nil
}
func (m *AzureVnetVoltstackClusterType_NoForwardProxy) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.NoForwardProxy != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.NoForwardProxy.Size()))
		n23, err := m.NoForwardProxy.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n23
	}
	return i, nil
}
func (m *AzureVnetVoltstackClusterType_ActiveForwardProxyPolicies) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.ActiveForwardProxyPolicies != nil {
		dAtA[i] = 0x42
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.ActiveForwardProxyPolicies.Size()))
		n24, err := m.ActiveForwardProxyPolicies.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n24
	}
	return i, nil
}
func (m *AzureVnetVoltstackClusterType_NoOutsideStaticRoutes) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.NoOutsideStaticRoutes != nil {
		dAtA[i] = 0x52
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.NoOutsideStaticRoutes.Size()))
		n25, err := m.NoOutsideStaticRoutes.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n25
	}
	return i, nil
}
func (m *AzureVnetVoltstackClusterType_OutsideStaticRoutes) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.OutsideStaticRoutes != nil {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.OutsideStaticRoutes.Size()))
		n26, err := m.OutsideStaticRoutes.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n26
	}
	return i, nil
}
func (m *AzureVnetVoltstackClusterType_NoGlobalNetwork) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.NoGlobalNetwork != nil {
		dAtA[i] = 0x6a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.NoGlobalNetwork.Size()))
		n27, err := m.NoGlobalNetwork.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n27
	}
	return i, nil
}
func (m *AzureVnetVoltstackClusterType_GlobalNetworkList) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.GlobalNetworkList != nil {
		dAtA[i] = 0x72
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.GlobalNetworkList.Size()))
		n28, err := m.GlobalNetworkList.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n28
	}
	return i, nil
}
func (m *AzureVnetVoltstackClusterType_ForwardProxyAllowAll) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.ForwardProxyAllowAll != nil {
		dAtA[i] = 0x7a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.ForwardProxyAllowAll.Size()))
		n29, err := m.ForwardProxyAllowAll.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n29
	}
	return i, nil
}
func (m *AzureVnetIngressGwReplaceType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AzureVnetIngressGwReplaceType) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *AzureVnetIngressEgressGwReplaceType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AzureVnetIngressEgressGwReplaceType) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.NetworkPolicyChoice != nil {
		nn30, err := m.NetworkPolicyChoice.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn30
	}
	if m.ForwardProxyChoice != nil {
		nn31, err := m.ForwardProxyChoice.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn31
	}
	if m.InsideStaticRouteChoice != nil {
		nn32, err := m.InsideStaticRouteChoice.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn32
	}
	if m.OutsideStaticRouteChoice != nil {
		nn33, err := m.OutsideStaticRouteChoice.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn33
	}
	if m.GlobalNetworkChoice != nil {
		nn34, err := m.GlobalNetworkChoice.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn34
	}
	return i, nil
}

func (m *AzureVnetIngressEgressGwReplaceType_NoNetworkPolicy) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.NoNetworkPolicy != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.NoNetworkPolicy.Size()))
		n35, err := m.NoNetworkPolicy.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n35
	}
	return i, nil
}
func (m *AzureVnetIngressEgressGwReplaceType_NoForwardProxy) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.NoForwardProxy != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.NoForwardProxy.Size()))
		n36, err := m.NoForwardProxy.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n36
	}
	return i, nil
}
func (m *AzureVnetIngressEgressGwReplaceType_ActiveForwardProxyPolicies) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.ActiveForwardProxyPolicies != nil {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.ActiveForwardProxyPolicies.Size()))
		n37, err := m.ActiveForwardProxyPolicies.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n37
	}
	return i, nil
}
func (m *AzureVnetIngressEgressGwReplaceType_ActiveNetworkPolicies) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.ActiveNetworkPolicies != nil {
		dAtA[i] = 0x52
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.ActiveNetworkPolicies.Size()))
		n38, err := m.ActiveNetworkPolicies.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n38
	}
	return i, nil
}
func (m *AzureVnetIngressEgressGwReplaceType_NoInsideStaticRoutes) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.NoInsideStaticRoutes != nil {
		dAtA[i] = 0x62
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.NoInsideStaticRoutes.Size()))
		n39, err := m.NoInsideStaticRoutes.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n39
	}
	return i, nil
}
func (m *AzureVnetIngressEgressGwReplaceType_InsideStaticRoutes) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.InsideStaticRoutes != nil {
		dAtA[i] = 0x6a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.InsideStaticRoutes.Size()))
		n40, err := m.InsideStaticRoutes.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n40
	}
	return i, nil
}
func (m *AzureVnetIngressEgressGwReplaceType_NoOutsideStaticRoutes) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.NoOutsideStaticRoutes != nil {
		dAtA[i] = 0x7a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.NoOutsideStaticRoutes.Size()))
		n41, err := m.NoOutsideStaticRoutes.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n41
	}
	return i, nil
}
func (m *AzureVnetIngressEgressGwReplaceType_OutsideStaticRoutes) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.OutsideStaticRoutes != nil {
		dAtA[i] = 0x82
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.OutsideStaticRoutes.Size()))
		n42, err := m.OutsideStaticRoutes.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n42
	}
	return i, nil
}
func (m *AzureVnetIngressEgressGwReplaceType_NoGlobalNetwork) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.NoGlobalNetwork != nil {
		dAtA[i] = 0x92
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.NoGlobalNetwork.Size()))
		n43, err := m.NoGlobalNetwork.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n43
	}
	return i, nil
}
func (m *AzureVnetIngressEgressGwReplaceType_GlobalNetworkList) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.GlobalNetworkList != nil {
		dAtA[i] = 0x9a
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.GlobalNetworkList.Size()))
		n44, err := m.GlobalNetworkList.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n44
	}
	return i, nil
}
func (m *AzureVnetIngressEgressGwReplaceType_ForwardProxyAllowAll) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.ForwardProxyAllowAll != nil {
		dAtA[i] = 0xa2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.ForwardProxyAllowAll.Size()))
		n45, err := m.ForwardProxyAllowAll.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n45
	}
	return i, nil
}
func (m *AzureVnetVoltstackClusterReplaceType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AzureVnetVoltstackClusterReplaceType) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.NetworkPolicyChoice != nil {
		nn46, err := m.NetworkPolicyChoice.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn46
	}
	if m.ForwardProxyChoice != nil {
		nn47, err := m.ForwardProxyChoice.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn47
	}
	if m.OutsideStaticRouteChoice != nil {
		nn48, err := m.OutsideStaticRouteChoice.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn48
	}
	if m.GlobalNetworkChoice != nil {
		nn49, err := m.GlobalNetworkChoice.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn49
	}
	return i, nil
}

func (m *AzureVnetVoltstackClusterReplaceType_NoNetworkPolicy) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.NoNetworkPolicy != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.NoNetworkPolicy.Size()))
		n50, err := m.NoNetworkPolicy.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n50
	}
	return i, nil
}
func (m *AzureVnetVoltstackClusterReplaceType_ActiveNetworkPolicies) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.ActiveNetworkPolicies != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.ActiveNetworkPolicies.Size()))
		n51, err := m.ActiveNetworkPolicies.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n51
	}
	return i, nil
}
func (m *AzureVnetVoltstackClusterReplaceType_NoForwardProxy) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.NoForwardProxy != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.NoForwardProxy.Size()))
		n52, err := m.NoForwardProxy.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n52
	}
	return i, nil
}
func (m *AzureVnetVoltstackClusterReplaceType_ActiveForwardProxyPolicies) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.ActiveForwardProxyPolicies != nil {
		dAtA[i] = 0x42
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.ActiveForwardProxyPolicies.Size()))
		n53, err := m.ActiveForwardProxyPolicies.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n53
	}
	return i, nil
}
func (m *AzureVnetVoltstackClusterReplaceType_NoOutsideStaticRoutes) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.NoOutsideStaticRoutes != nil {
		dAtA[i] = 0x52
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.NoOutsideStaticRoutes.Size()))
		n54, err := m.NoOutsideStaticRoutes.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n54
	}
	return i, nil
}
func (m *AzureVnetVoltstackClusterReplaceType_OutsideStaticRoutes) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.OutsideStaticRoutes != nil {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.OutsideStaticRoutes.Size()))
		n55, err := m.OutsideStaticRoutes.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n55
	}
	return i, nil
}
func (m *AzureVnetVoltstackClusterReplaceType_NoGlobalNetwork) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.NoGlobalNetwork != nil {
		dAtA[i] = 0x6a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.NoGlobalNetwork.Size()))
		n56, err := m.NoGlobalNetwork.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n56
	}
	return i, nil
}
func (m *AzureVnetVoltstackClusterReplaceType_GlobalNetworkList) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.GlobalNetworkList != nil {
		dAtA[i] = 0x72
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.GlobalNetworkList.Size()))
		n57, err := m.GlobalNetworkList.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n57
	}
	return i, nil
}
func (m *AzureVnetVoltstackClusterReplaceType_ForwardProxyAllowAll) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.ForwardProxyAllowAll != nil {
		dAtA[i] = 0x7a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.ForwardProxyAllowAll.Size()))
		n58, err := m.ForwardProxyAllowAll.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n58
	}
	return i, nil
}
func (m *GlobalSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GlobalSpecType) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ResourceGroup) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTypes(dAtA, i, uint64(len(m.ResourceGroup)))
		i += copy(dAtA[i:], m.ResourceGroup)
	}
	if len(m.AzureRegion) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTypes(dAtA, i, uint64(len(m.AzureRegion)))
		i += copy(dAtA[i:], m.AzureRegion)
	}
	if m.Vnet != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.Vnet.Size()))
		n59, err := m.Vnet.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n59
	}
	if m.SiteType != nil {
		nn60, err := m.SiteType.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn60
	}
	if m.Deployment != nil {
		nn61, err := m.Deployment.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn61
	}
	if len(m.MachineType) > 0 {
		dAtA[i] = 0x52
		i++
		i = encodeVarintTypes(dAtA, i, uint64(len(m.MachineType)))
		i += copy(dAtA[i:], m.MachineType)
	}
	if len(m.VolterraSoftwareVersion) > 0 {
		dAtA[i] = 0x62
		i++
		i = encodeVarintTypes(dAtA, i, uint64(len(m.VolterraSoftwareVersion)))
		i += copy(dAtA[i:], m.VolterraSoftwareVersion)
	}
	if len(m.OperatingSystemVersion) > 0 {
		dAtA[i] = 0x6a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(len(m.OperatingSystemVersion)))
		i += copy(dAtA[i:], m.OperatingSystemVersion)
	}
	if len(m.SshKey) > 0 {
		dAtA[i] = 0x72
		i++
		i = encodeVarintTypes(dAtA, i, uint64(len(m.SshKey)))
		i += copy(dAtA[i:], m.SshKey)
	}
	if m.NodesPerAz != 0 {
		dAtA[i] = 0x78
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.NodesPerAz))
	}
	if m.DiskSize != 0 {
		dAtA[i] = 0x80
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.DiskSize))
	}
	if len(m.Address) > 0 {
		dAtA[i] = 0x92
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Address)))
		i += copy(dAtA[i:], m.Address)
	}
	if m.Coordinates != nil {
		dAtA[i] = 0x9a
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.Coordinates.Size()))
		n62, err := m.Coordinates.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n62
	}
	if m.TfParams != nil {
		dAtA[i] = 0xba
		i++
		dAtA[i] = 0x3e
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.TfParams.Size()))
		n63, err := m.TfParams.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n63
	}
	if m.ViewInternal != nil {
		dAtA[i] = 0xc2
		i++
		dAtA[i] = 0x3e
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.ViewInternal.Size()))
		n64, err := m.ViewInternal.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n64
	}
	return i, nil
}

func (m *GlobalSpecType_IngressGw) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.IngressGw != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.IngressGw.Size()))
		n65, err := m.IngressGw.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n65
	}
	return i, nil
}
func (m *GlobalSpecType_IngressEgressGw) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.IngressEgressGw != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.IngressEgressGw.Size()))
		n66, err := m.IngressEgressGw.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n66
	}
	return i, nil
}
func (m *GlobalSpecType_AzureCred) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.AzureCred != nil {
		dAtA[i] = 0x42
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.AzureCred.Size()))
		n67, err := m.AzureCred.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n67
	}
	return i, nil
}
func (m *GlobalSpecType_Assisted) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Assisted != nil {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.Assisted.Size()))
		n68, err := m.Assisted.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n68
	}
	return i, nil
}
func (m *GlobalSpecType_VoltstackCluster) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.VoltstackCluster != nil {
		dAtA[i] = 0x8a
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.VoltstackCluster.Size()))
		n69, err := m.VoltstackCluster.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n69
	}
	return i, nil
}
func (m *CreateSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateSpecType) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ResourceGroup) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTypes(dAtA, i, uint64(len(m.ResourceGroup)))
		i += copy(dAtA[i:], m.ResourceGroup)
	}
	if len(m.AzureRegion) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTypes(dAtA, i, uint64(len(m.AzureRegion)))
		i += copy(dAtA[i:], m.AzureRegion)
	}
	if m.Vnet != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.Vnet.Size()))
		n70, err := m.Vnet.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n70
	}
	if m.SiteType != nil {
		nn71, err := m.SiteType.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn71
	}
	if m.Deployment != nil {
		nn72, err := m.Deployment.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn72
	}
	if len(m.MachineType) > 0 {
		dAtA[i] = 0x52
		i++
		i = encodeVarintTypes(dAtA, i, uint64(len(m.MachineType)))
		i += copy(dAtA[i:], m.MachineType)
	}
	if len(m.VolterraSoftwareVersion) > 0 {
		dAtA[i] = 0x62
		i++
		i = encodeVarintTypes(dAtA, i, uint64(len(m.VolterraSoftwareVersion)))
		i += copy(dAtA[i:], m.VolterraSoftwareVersion)
	}
	if len(m.OperatingSystemVersion) > 0 {
		dAtA[i] = 0x6a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(len(m.OperatingSystemVersion)))
		i += copy(dAtA[i:], m.OperatingSystemVersion)
	}
	if len(m.SshKey) > 0 {
		dAtA[i] = 0x72
		i++
		i = encodeVarintTypes(dAtA, i, uint64(len(m.SshKey)))
		i += copy(dAtA[i:], m.SshKey)
	}
	if m.NodesPerAz != 0 {
		dAtA[i] = 0x78
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.NodesPerAz))
	}
	if m.DiskSize != 0 {
		dAtA[i] = 0x80
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.DiskSize))
	}
	if len(m.Address) > 0 {
		dAtA[i] = 0x92
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Address)))
		i += copy(dAtA[i:], m.Address)
	}
	if m.Coordinates != nil {
		dAtA[i] = 0x9a
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.Coordinates.Size()))
		n73, err := m.Coordinates.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n73
	}
	return i, nil
}

func (m *CreateSpecType_IngressGw) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.IngressGw != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.IngressGw.Size()))
		n74, err := m.IngressGw.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n74
	}
	return i, nil
}
func (m *CreateSpecType_IngressEgressGw) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.IngressEgressGw != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.IngressEgressGw.Size()))
		n75, err := m.IngressEgressGw.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n75
	}
	return i, nil
}
func (m *CreateSpecType_AzureCred) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.AzureCred != nil {
		dAtA[i] = 0x42
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.AzureCred.Size()))
		n76, err := m.AzureCred.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n76
	}
	return i, nil
}
func (m *CreateSpecType_Assisted) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Assisted != nil {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.Assisted.Size()))
		n77, err := m.Assisted.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n77
	}
	return i, nil
}
func (m *CreateSpecType_VoltstackCluster) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.VoltstackCluster != nil {
		dAtA[i] = 0x8a
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.VoltstackCluster.Size()))
		n78, err := m.VoltstackCluster.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n78
	}
	return i, nil
}
func (m *ReplaceSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplaceSpecType) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.SiteType != nil {
		nn79, err := m.SiteType.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn79
	}
	if len(m.VolterraSoftwareVersion) > 0 {
		dAtA[i] = 0x62
		i++
		i = encodeVarintTypes(dAtA, i, uint64(len(m.VolterraSoftwareVersion)))
		i += copy(dAtA[i:], m.VolterraSoftwareVersion)
	}
	if len(m.OperatingSystemVersion) > 0 {
		dAtA[i] = 0x6a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(len(m.OperatingSystemVersion)))
		i += copy(dAtA[i:], m.OperatingSystemVersion)
	}
	if m.NodesPerAz != 0 {
		dAtA[i] = 0x78
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.NodesPerAz))
	}
	if len(m.Address) > 0 {
		dAtA[i] = 0x92
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Address)))
		i += copy(dAtA[i:], m.Address)
	}
	if m.Coordinates != nil {
		dAtA[i] = 0x9a
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.Coordinates.Size()))
		n80, err := m.Coordinates.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n80
	}
	return i, nil
}

func (m *ReplaceSpecType_IngressGw) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.IngressGw != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.IngressGw.Size()))
		n81, err := m.IngressGw.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n81
	}
	return i, nil
}
func (m *ReplaceSpecType_IngressEgressGw) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.IngressEgressGw != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.IngressEgressGw.Size()))
		n82, err := m.IngressEgressGw.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n82
	}
	return i, nil
}
func (m *ReplaceSpecType_VoltstackCluster) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.VoltstackCluster != nil {
		dAtA[i] = 0x8a
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.VoltstackCluster.Size()))
		n83, err := m.VoltstackCluster.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n83
	}
	return i, nil
}
func (m *GetSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetSpecType) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ResourceGroup) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTypes(dAtA, i, uint64(len(m.ResourceGroup)))
		i += copy(dAtA[i:], m.ResourceGroup)
	}
	if len(m.AzureRegion) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTypes(dAtA, i, uint64(len(m.AzureRegion)))
		i += copy(dAtA[i:], m.AzureRegion)
	}
	if m.Vnet != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.Vnet.Size()))
		n84, err := m.Vnet.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n84
	}
	if m.SiteType != nil {
		nn85, err := m.SiteType.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn85
	}
	if m.Deployment != nil {
		nn86, err := m.Deployment.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn86
	}
	if len(m.MachineType) > 0 {
		dAtA[i] = 0x52
		i++
		i = encodeVarintTypes(dAtA, i, uint64(len(m.MachineType)))
		i += copy(dAtA[i:], m.MachineType)
	}
	if len(m.VolterraSoftwareVersion) > 0 {
		dAtA[i] = 0x62
		i++
		i = encodeVarintTypes(dAtA, i, uint64(len(m.VolterraSoftwareVersion)))
		i += copy(dAtA[i:], m.VolterraSoftwareVersion)
	}
	if len(m.OperatingSystemVersion) > 0 {
		dAtA[i] = 0x6a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(len(m.OperatingSystemVersion)))
		i += copy(dAtA[i:], m.OperatingSystemVersion)
	}
	if len(m.SshKey) > 0 {
		dAtA[i] = 0x72
		i++
		i = encodeVarintTypes(dAtA, i, uint64(len(m.SshKey)))
		i += copy(dAtA[i:], m.SshKey)
	}
	if m.NodesPerAz != 0 {
		dAtA[i] = 0x78
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.NodesPerAz))
	}
	if m.DiskSize != 0 {
		dAtA[i] = 0x80
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.DiskSize))
	}
	if len(m.Address) > 0 {
		dAtA[i] = 0x92
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Address)))
		i += copy(dAtA[i:], m.Address)
	}
	if m.Coordinates != nil {
		dAtA[i] = 0x9a
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.Coordinates.Size()))
		n87, err := m.Coordinates.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n87
	}
	return i, nil
}

func (m *GetSpecType_IngressGw) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.IngressGw != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.IngressGw.Size()))
		n88, err := m.IngressGw.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n88
	}
	return i, nil
}
func (m *GetSpecType_IngressEgressGw) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.IngressEgressGw != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.IngressEgressGw.Size()))
		n89, err := m.IngressEgressGw.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n89
	}
	return i, nil
}
func (m *GetSpecType_AzureCred) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.AzureCred != nil {
		dAtA[i] = 0x42
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.AzureCred.Size()))
		n90, err := m.AzureCred.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n90
	}
	return i, nil
}
func (m *GetSpecType_Assisted) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Assisted != nil {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.Assisted.Size()))
		n91, err := m.Assisted.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n91
	}
	return i, nil
}
func (m *GetSpecType_VoltstackCluster) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.VoltstackCluster != nil {
		dAtA[i] = 0x8a
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.VoltstackCluster.Size()))
		n92, err := m.VoltstackCluster.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n92
	}
	return i, nil
}
func encodeVarintTypes(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func NewPopulatedAzureVnetIngressGwType(r randyTypes, easy bool) *AzureVnetIngressGwType {
	this := &AzureVnetIngressGwType{}
	if r.Intn(10) != 0 {
		v1 := r.Intn(5)
		this.AzNodes = make([]*ves_io_schema_views1.AzureVnetOneInterfaceNodeType, v1)
		for i := 0; i < v1; i++ {
			this.AzNodes[i] = ves_io_schema_views1.NewPopulatedAzureVnetOneInterfaceNodeType(r, easy)
		}
	}
	this.AzureCertifiedHw = string(randStringTypes(r))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedAzureVnetIngressEgressGwType(r randyTypes, easy bool) *AzureVnetIngressEgressGwType {
	this := &AzureVnetIngressEgressGwType{}
	if r.Intn(10) != 0 {
		v2 := r.Intn(5)
		this.AzNodes = make([]*ves_io_schema_views1.AzureVnetTwoInterfaceNodeType, v2)
		for i := 0; i < v2; i++ {
			this.AzNodes[i] = ves_io_schema_views1.NewPopulatedAzureVnetTwoInterfaceNodeType(r, easy)
		}
	}
	oneofNumber_NetworkPolicyChoice := []int32{2, 10}[r.Intn(2)]
	switch oneofNumber_NetworkPolicyChoice {
	case 2:
		this.NetworkPolicyChoice = NewPopulatedAzureVnetIngressEgressGwType_NoNetworkPolicy(r, easy)
	case 10:
		this.NetworkPolicyChoice = NewPopulatedAzureVnetIngressEgressGwType_ActiveNetworkPolicies(r, easy)
	}
	oneofNumber_ForwardProxyChoice := []int32{4, 9, 20}[r.Intn(3)]
	switch oneofNumber_ForwardProxyChoice {
	case 4:
		this.ForwardProxyChoice = NewPopulatedAzureVnetIngressEgressGwType_NoForwardProxy(r, easy)
	case 9:
		this.ForwardProxyChoice = NewPopulatedAzureVnetIngressEgressGwType_ActiveForwardProxyPolicies(r, easy)
	case 20:
		this.ForwardProxyChoice = NewPopulatedAzureVnetIngressEgressGwType_ForwardProxyAllowAll(r, easy)
	}
	this.AzureCertifiedHw = string(randStringTypes(r))
	oneofNumber_InsideStaticRouteChoice := []int32{12, 13}[r.Intn(2)]
	switch oneofNumber_InsideStaticRouteChoice {
	case 12:
		this.InsideStaticRouteChoice = NewPopulatedAzureVnetIngressEgressGwType_NoInsideStaticRoutes(r, easy)
	case 13:
		this.InsideStaticRouteChoice = NewPopulatedAzureVnetIngressEgressGwType_InsideStaticRoutes(r, easy)
	}
	oneofNumber_OutsideStaticRouteChoice := []int32{15, 16}[r.Intn(2)]
	switch oneofNumber_OutsideStaticRouteChoice {
	case 15:
		this.OutsideStaticRouteChoice = NewPopulatedAzureVnetIngressEgressGwType_NoOutsideStaticRoutes(r, easy)
	case 16:
		this.OutsideStaticRouteChoice = NewPopulatedAzureVnetIngressEgressGwType_OutsideStaticRoutes(r, easy)
	}
	oneofNumber_GlobalNetworkChoice := []int32{18, 19}[r.Intn(2)]
	switch oneofNumber_GlobalNetworkChoice {
	case 18:
		this.GlobalNetworkChoice = NewPopulatedAzureVnetIngressEgressGwType_NoGlobalNetwork(r, easy)
	case 19:
		this.GlobalNetworkChoice = NewPopulatedAzureVnetIngressEgressGwType_GlobalNetworkList(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedAzureVnetIngressEgressGwType_NoNetworkPolicy(r randyTypes, easy bool) *AzureVnetIngressEgressGwType_NoNetworkPolicy {
	this := &AzureVnetIngressEgressGwType_NoNetworkPolicy{}
	this.NoNetworkPolicy = ves_io_schema4.NewPopulatedEmpty(r, easy)
	return this
}
func NewPopulatedAzureVnetIngressEgressGwType_NoForwardProxy(r randyTypes, easy bool) *AzureVnetIngressEgressGwType_NoForwardProxy {
	this := &AzureVnetIngressEgressGwType_NoForwardProxy{}
	this.NoForwardProxy = ves_io_schema4.NewPopulatedEmpty(r, easy)
	return this
}
func NewPopulatedAzureVnetIngressEgressGwType_ActiveForwardProxyPolicies(r randyTypes, easy bool) *AzureVnetIngressEgressGwType_ActiveForwardProxyPolicies {
	this := &AzureVnetIngressEgressGwType_ActiveForwardProxyPolicies{}
	this.ActiveForwardProxyPolicies = ves_io_schema_network_firewall.NewPopulatedActiveForwardProxyPoliciesType(r, easy)
	return this
}
func NewPopulatedAzureVnetIngressEgressGwType_ActiveNetworkPolicies(r randyTypes, easy bool) *AzureVnetIngressEgressGwType_ActiveNetworkPolicies {
	this := &AzureVnetIngressEgressGwType_ActiveNetworkPolicies{}
	this.ActiveNetworkPolicies = ves_io_schema_network_firewall.NewPopulatedActiveNetworkPoliciesType(r, easy)
	return this
}
func NewPopulatedAzureVnetIngressEgressGwType_NoInsideStaticRoutes(r randyTypes, easy bool) *AzureVnetIngressEgressGwType_NoInsideStaticRoutes {
	this := &AzureVnetIngressEgressGwType_NoInsideStaticRoutes{}
	this.NoInsideStaticRoutes = ves_io_schema4.NewPopulatedEmpty(r, easy)
	return this
}
func NewPopulatedAzureVnetIngressEgressGwType_InsideStaticRoutes(r randyTypes, easy bool) *AzureVnetIngressEgressGwType_InsideStaticRoutes {
	this := &AzureVnetIngressEgressGwType_InsideStaticRoutes{}
	this.InsideStaticRoutes = ves_io_schema_views1.NewPopulatedSiteStaticRoutesListType(r, easy)
	return this
}
func NewPopulatedAzureVnetIngressEgressGwType_NoOutsideStaticRoutes(r randyTypes, easy bool) *AzureVnetIngressEgressGwType_NoOutsideStaticRoutes {
	this := &AzureVnetIngressEgressGwType_NoOutsideStaticRoutes{}
	this.NoOutsideStaticRoutes = ves_io_schema4.NewPopulatedEmpty(r, easy)
	return this
}
func NewPopulatedAzureVnetIngressEgressGwType_OutsideStaticRoutes(r randyTypes, easy bool) *AzureVnetIngressEgressGwType_OutsideStaticRoutes {
	this := &AzureVnetIngressEgressGwType_OutsideStaticRoutes{}
	this.OutsideStaticRoutes = ves_io_schema_views1.NewPopulatedSiteStaticRoutesListType(r, easy)
	return this
}
func NewPopulatedAzureVnetIngressEgressGwType_NoGlobalNetwork(r randyTypes, easy bool) *AzureVnetIngressEgressGwType_NoGlobalNetwork {
	this := &AzureVnetIngressEgressGwType_NoGlobalNetwork{}
	this.NoGlobalNetwork = ves_io_schema4.NewPopulatedEmpty(r, easy)
	return this
}
func NewPopulatedAzureVnetIngressEgressGwType_GlobalNetworkList(r randyTypes, easy bool) *AzureVnetIngressEgressGwType_GlobalNetworkList {
	this := &AzureVnetIngressEgressGwType_GlobalNetworkList{}
	this.GlobalNetworkList = ves_io_schema_views1.NewPopulatedGlobalNetworkConnectionListType(r, easy)
	return this
}
func NewPopulatedAzureVnetIngressEgressGwType_ForwardProxyAllowAll(r randyTypes, easy bool) *AzureVnetIngressEgressGwType_ForwardProxyAllowAll {
	this := &AzureVnetIngressEgressGwType_ForwardProxyAllowAll{}
	this.ForwardProxyAllowAll = ves_io_schema4.NewPopulatedEmpty(r, easy)
	return this
}
func NewPopulatedAzureVnetVoltstackClusterType(r randyTypes, easy bool) *AzureVnetVoltstackClusterType {
	this := &AzureVnetVoltstackClusterType{}
	this.AzureCertifiedHw = string(randStringTypes(r))
	if r.Intn(10) != 0 {
		v3 := r.Intn(5)
		this.AzNodes = make([]*ves_io_schema_views1.AzureVnetOneInterfaceNodeType, v3)
		for i := 0; i < v3; i++ {
			this.AzNodes[i] = ves_io_schema_views1.NewPopulatedAzureVnetOneInterfaceNodeType(r, easy)
		}
	}
	oneofNumber_NetworkPolicyChoice := []int32{4, 5}[r.Intn(2)]
	switch oneofNumber_NetworkPolicyChoice {
	case 4:
		this.NetworkPolicyChoice = NewPopulatedAzureVnetVoltstackClusterType_NoNetworkPolicy(r, easy)
	case 5:
		this.NetworkPolicyChoice = NewPopulatedAzureVnetVoltstackClusterType_ActiveNetworkPolicies(r, easy)
	}
	oneofNumber_ForwardProxyChoice := []int32{7, 8, 15}[r.Intn(3)]
	switch oneofNumber_ForwardProxyChoice {
	case 7:
		this.ForwardProxyChoice = NewPopulatedAzureVnetVoltstackClusterType_NoForwardProxy(r, easy)
	case 8:
		this.ForwardProxyChoice = NewPopulatedAzureVnetVoltstackClusterType_ActiveForwardProxyPolicies(r, easy)
	case 15:
		this.ForwardProxyChoice = NewPopulatedAzureVnetVoltstackClusterType_ForwardProxyAllowAll(r, easy)
	}
	oneofNumber_OutsideStaticRouteChoice := []int32{10, 11}[r.Intn(2)]
	switch oneofNumber_OutsideStaticRouteChoice {
	case 10:
		this.OutsideStaticRouteChoice = NewPopulatedAzureVnetVoltstackClusterType_NoOutsideStaticRoutes(r, easy)
	case 11:
		this.OutsideStaticRouteChoice = NewPopulatedAzureVnetVoltstackClusterType_OutsideStaticRoutes(r, easy)
	}
	oneofNumber_GlobalNetworkChoice := []int32{13, 14}[r.Intn(2)]
	switch oneofNumber_GlobalNetworkChoice {
	case 13:
		this.GlobalNetworkChoice = NewPopulatedAzureVnetVoltstackClusterType_NoGlobalNetwork(r, easy)
	case 14:
		this.GlobalNetworkChoice = NewPopulatedAzureVnetVoltstackClusterType_GlobalNetworkList(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedAzureVnetVoltstackClusterType_NoNetworkPolicy(r randyTypes, easy bool) *AzureVnetVoltstackClusterType_NoNetworkPolicy {
	this := &AzureVnetVoltstackClusterType_NoNetworkPolicy{}
	this.NoNetworkPolicy = ves_io_schema4.NewPopulatedEmpty(r, easy)
	return this
}
func NewPopulatedAzureVnetVoltstackClusterType_ActiveNetworkPolicies(r randyTypes, easy bool) *AzureVnetVoltstackClusterType_ActiveNetworkPolicies {
	this := &AzureVnetVoltstackClusterType_ActiveNetworkPolicies{}
	this.ActiveNetworkPolicies = ves_io_schema_network_firewall.NewPopulatedActiveNetworkPoliciesType(r, easy)
	return this
}
func NewPopulatedAzureVnetVoltstackClusterType_NoForwardProxy(r randyTypes, easy bool) *AzureVnetVoltstackClusterType_NoForwardProxy {
	this := &AzureVnetVoltstackClusterType_NoForwardProxy{}
	this.NoForwardProxy = ves_io_schema4.NewPopulatedEmpty(r, easy)
	return this
}
func NewPopulatedAzureVnetVoltstackClusterType_ActiveForwardProxyPolicies(r randyTypes, easy bool) *AzureVnetVoltstackClusterType_ActiveForwardProxyPolicies {
	this := &AzureVnetVoltstackClusterType_ActiveForwardProxyPolicies{}
	this.ActiveForwardProxyPolicies = ves_io_schema_network_firewall.NewPopulatedActiveForwardProxyPoliciesType(r, easy)
	return this
}
func NewPopulatedAzureVnetVoltstackClusterType_NoOutsideStaticRoutes(r randyTypes, easy bool) *AzureVnetVoltstackClusterType_NoOutsideStaticRoutes {
	this := &AzureVnetVoltstackClusterType_NoOutsideStaticRoutes{}
	this.NoOutsideStaticRoutes = ves_io_schema4.NewPopulatedEmpty(r, easy)
	return this
}
func NewPopulatedAzureVnetVoltstackClusterType_OutsideStaticRoutes(r randyTypes, easy bool) *AzureVnetVoltstackClusterType_OutsideStaticRoutes {
	this := &AzureVnetVoltstackClusterType_OutsideStaticRoutes{}
	this.OutsideStaticRoutes = ves_io_schema_views1.NewPopulatedSiteStaticRoutesListType(r, easy)
	return this
}
func NewPopulatedAzureVnetVoltstackClusterType_NoGlobalNetwork(r randyTypes, easy bool) *AzureVnetVoltstackClusterType_NoGlobalNetwork {
	this := &AzureVnetVoltstackClusterType_NoGlobalNetwork{}
	this.NoGlobalNetwork = ves_io_schema4.NewPopulatedEmpty(r, easy)
	return this
}
func NewPopulatedAzureVnetVoltstackClusterType_GlobalNetworkList(r randyTypes, easy bool) *AzureVnetVoltstackClusterType_GlobalNetworkList {
	this := &AzureVnetVoltstackClusterType_GlobalNetworkList{}
	this.GlobalNetworkList = ves_io_schema_views1.NewPopulatedGlobalNetworkConnectionListType(r, easy)
	return this
}
func NewPopulatedAzureVnetVoltstackClusterType_ForwardProxyAllowAll(r randyTypes, easy bool) *AzureVnetVoltstackClusterType_ForwardProxyAllowAll {
	this := &AzureVnetVoltstackClusterType_ForwardProxyAllowAll{}
	this.ForwardProxyAllowAll = ves_io_schema4.NewPopulatedEmpty(r, easy)
	return this
}
func NewPopulatedAzureVnetIngressGwReplaceType(r randyTypes, easy bool) *AzureVnetIngressGwReplaceType {
	this := &AzureVnetIngressGwReplaceType{}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedAzureVnetIngressEgressGwReplaceType(r randyTypes, easy bool) *AzureVnetIngressEgressGwReplaceType {
	this := &AzureVnetIngressEgressGwReplaceType{}
	oneofNumber_NetworkPolicyChoice := []int32{2, 10}[r.Intn(2)]
	switch oneofNumber_NetworkPolicyChoice {
	case 2:
		this.NetworkPolicyChoice = NewPopulatedAzureVnetIngressEgressGwReplaceType_NoNetworkPolicy(r, easy)
	case 10:
		this.NetworkPolicyChoice = NewPopulatedAzureVnetIngressEgressGwReplaceType_ActiveNetworkPolicies(r, easy)
	}
	oneofNumber_ForwardProxyChoice := []int32{4, 9, 20}[r.Intn(3)]
	switch oneofNumber_ForwardProxyChoice {
	case 4:
		this.ForwardProxyChoice = NewPopulatedAzureVnetIngressEgressGwReplaceType_NoForwardProxy(r, easy)
	case 9:
		this.ForwardProxyChoice = NewPopulatedAzureVnetIngressEgressGwReplaceType_ActiveForwardProxyPolicies(r, easy)
	case 20:
		this.ForwardProxyChoice = NewPopulatedAzureVnetIngressEgressGwReplaceType_ForwardProxyAllowAll(r, easy)
	}
	oneofNumber_InsideStaticRouteChoice := []int32{12, 13}[r.Intn(2)]
	switch oneofNumber_InsideStaticRouteChoice {
	case 12:
		this.InsideStaticRouteChoice = NewPopulatedAzureVnetIngressEgressGwReplaceType_NoInsideStaticRoutes(r, easy)
	case 13:
		this.InsideStaticRouteChoice = NewPopulatedAzureVnetIngressEgressGwReplaceType_InsideStaticRoutes(r, easy)
	}
	oneofNumber_OutsideStaticRouteChoice := []int32{15, 16}[r.Intn(2)]
	switch oneofNumber_OutsideStaticRouteChoice {
	case 15:
		this.OutsideStaticRouteChoice = NewPopulatedAzureVnetIngressEgressGwReplaceType_NoOutsideStaticRoutes(r, easy)
	case 16:
		this.OutsideStaticRouteChoice = NewPopulatedAzureVnetIngressEgressGwReplaceType_OutsideStaticRoutes(r, easy)
	}
	oneofNumber_GlobalNetworkChoice := []int32{18, 19}[r.Intn(2)]
	switch oneofNumber_GlobalNetworkChoice {
	case 18:
		this.GlobalNetworkChoice = NewPopulatedAzureVnetIngressEgressGwReplaceType_NoGlobalNetwork(r, easy)
	case 19:
		this.GlobalNetworkChoice = NewPopulatedAzureVnetIngressEgressGwReplaceType_GlobalNetworkList(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedAzureVnetIngressEgressGwReplaceType_NoNetworkPolicy(r randyTypes, easy bool) *AzureVnetIngressEgressGwReplaceType_NoNetworkPolicy {
	this := &AzureVnetIngressEgressGwReplaceType_NoNetworkPolicy{}
	this.NoNetworkPolicy = ves_io_schema4.NewPopulatedEmpty(r, easy)
	return this
}
func NewPopulatedAzureVnetIngressEgressGwReplaceType_NoForwardProxy(r randyTypes, easy bool) *AzureVnetIngressEgressGwReplaceType_NoForwardProxy {
	this := &AzureVnetIngressEgressGwReplaceType_NoForwardProxy{}
	this.NoForwardProxy = ves_io_schema4.NewPopulatedEmpty(r, easy)
	return this
}
func NewPopulatedAzureVnetIngressEgressGwReplaceType_ActiveForwardProxyPolicies(r randyTypes, easy bool) *AzureVnetIngressEgressGwReplaceType_ActiveForwardProxyPolicies {
	this := &AzureVnetIngressEgressGwReplaceType_ActiveForwardProxyPolicies{}
	this.ActiveForwardProxyPolicies = ves_io_schema_network_firewall.NewPopulatedActiveForwardProxyPoliciesType(r, easy)
	return this
}
func NewPopulatedAzureVnetIngressEgressGwReplaceType_ActiveNetworkPolicies(r randyTypes, easy bool) *AzureVnetIngressEgressGwReplaceType_ActiveNetworkPolicies {
	this := &AzureVnetIngressEgressGwReplaceType_ActiveNetworkPolicies{}
	this.ActiveNetworkPolicies = ves_io_schema_network_firewall.NewPopulatedActiveNetworkPoliciesType(r, easy)
	return this
}
func NewPopulatedAzureVnetIngressEgressGwReplaceType_NoInsideStaticRoutes(r randyTypes, easy bool) *AzureVnetIngressEgressGwReplaceType_NoInsideStaticRoutes {
	this := &AzureVnetIngressEgressGwReplaceType_NoInsideStaticRoutes{}
	this.NoInsideStaticRoutes = ves_io_schema4.NewPopulatedEmpty(r, easy)
	return this
}
func NewPopulatedAzureVnetIngressEgressGwReplaceType_InsideStaticRoutes(r randyTypes, easy bool) *AzureVnetIngressEgressGwReplaceType_InsideStaticRoutes {
	this := &AzureVnetIngressEgressGwReplaceType_InsideStaticRoutes{}
	this.InsideStaticRoutes = ves_io_schema_views1.NewPopulatedSiteStaticRoutesListType(r, easy)
	return this
}
func NewPopulatedAzureVnetIngressEgressGwReplaceType_NoOutsideStaticRoutes(r randyTypes, easy bool) *AzureVnetIngressEgressGwReplaceType_NoOutsideStaticRoutes {
	this := &AzureVnetIngressEgressGwReplaceType_NoOutsideStaticRoutes{}
	this.NoOutsideStaticRoutes = ves_io_schema4.NewPopulatedEmpty(r, easy)
	return this
}
func NewPopulatedAzureVnetIngressEgressGwReplaceType_OutsideStaticRoutes(r randyTypes, easy bool) *AzureVnetIngressEgressGwReplaceType_OutsideStaticRoutes {
	this := &AzureVnetIngressEgressGwReplaceType_OutsideStaticRoutes{}
	this.OutsideStaticRoutes = ves_io_schema_views1.NewPopulatedSiteStaticRoutesListType(r, easy)
	return this
}
func NewPopulatedAzureVnetIngressEgressGwReplaceType_NoGlobalNetwork(r randyTypes, easy bool) *AzureVnetIngressEgressGwReplaceType_NoGlobalNetwork {
	this := &AzureVnetIngressEgressGwReplaceType_NoGlobalNetwork{}
	this.NoGlobalNetwork = ves_io_schema4.NewPopulatedEmpty(r, easy)
	return this
}
func NewPopulatedAzureVnetIngressEgressGwReplaceType_GlobalNetworkList(r randyTypes, easy bool) *AzureVnetIngressEgressGwReplaceType_GlobalNetworkList {
	this := &AzureVnetIngressEgressGwReplaceType_GlobalNetworkList{}
	this.GlobalNetworkList = ves_io_schema_views1.NewPopulatedGlobalNetworkConnectionListType(r, easy)
	return this
}
func NewPopulatedAzureVnetIngressEgressGwReplaceType_ForwardProxyAllowAll(r randyTypes, easy bool) *AzureVnetIngressEgressGwReplaceType_ForwardProxyAllowAll {
	this := &AzureVnetIngressEgressGwReplaceType_ForwardProxyAllowAll{}
	this.ForwardProxyAllowAll = ves_io_schema4.NewPopulatedEmpty(r, easy)
	return this
}
func NewPopulatedAzureVnetVoltstackClusterReplaceType(r randyTypes, easy bool) *AzureVnetVoltstackClusterReplaceType {
	this := &AzureVnetVoltstackClusterReplaceType{}
	oneofNumber_NetworkPolicyChoice := []int32{4, 5}[r.Intn(2)]
	switch oneofNumber_NetworkPolicyChoice {
	case 4:
		this.NetworkPolicyChoice = NewPopulatedAzureVnetVoltstackClusterReplaceType_NoNetworkPolicy(r, easy)
	case 5:
		this.NetworkPolicyChoice = NewPopulatedAzureVnetVoltstackClusterReplaceType_ActiveNetworkPolicies(r, easy)
	}
	oneofNumber_ForwardProxyChoice := []int32{7, 8, 15}[r.Intn(3)]
	switch oneofNumber_ForwardProxyChoice {
	case 7:
		this.ForwardProxyChoice = NewPopulatedAzureVnetVoltstackClusterReplaceType_NoForwardProxy(r, easy)
	case 8:
		this.ForwardProxyChoice = NewPopulatedAzureVnetVoltstackClusterReplaceType_ActiveForwardProxyPolicies(r, easy)
	case 15:
		this.ForwardProxyChoice = NewPopulatedAzureVnetVoltstackClusterReplaceType_ForwardProxyAllowAll(r, easy)
	}
	oneofNumber_OutsideStaticRouteChoice := []int32{10, 11}[r.Intn(2)]
	switch oneofNumber_OutsideStaticRouteChoice {
	case 10:
		this.OutsideStaticRouteChoice = NewPopulatedAzureVnetVoltstackClusterReplaceType_NoOutsideStaticRoutes(r, easy)
	case 11:
		this.OutsideStaticRouteChoice = NewPopulatedAzureVnetVoltstackClusterReplaceType_OutsideStaticRoutes(r, easy)
	}
	oneofNumber_GlobalNetworkChoice := []int32{13, 14}[r.Intn(2)]
	switch oneofNumber_GlobalNetworkChoice {
	case 13:
		this.GlobalNetworkChoice = NewPopulatedAzureVnetVoltstackClusterReplaceType_NoGlobalNetwork(r, easy)
	case 14:
		this.GlobalNetworkChoice = NewPopulatedAzureVnetVoltstackClusterReplaceType_GlobalNetworkList(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedAzureVnetVoltstackClusterReplaceType_NoNetworkPolicy(r randyTypes, easy bool) *AzureVnetVoltstackClusterReplaceType_NoNetworkPolicy {
	this := &AzureVnetVoltstackClusterReplaceType_NoNetworkPolicy{}
	this.NoNetworkPolicy = ves_io_schema4.NewPopulatedEmpty(r, easy)
	return this
}
func NewPopulatedAzureVnetVoltstackClusterReplaceType_ActiveNetworkPolicies(r randyTypes, easy bool) *AzureVnetVoltstackClusterReplaceType_ActiveNetworkPolicies {
	this := &AzureVnetVoltstackClusterReplaceType_ActiveNetworkPolicies{}
	this.ActiveNetworkPolicies = ves_io_schema_network_firewall.NewPopulatedActiveNetworkPoliciesType(r, easy)
	return this
}
func NewPopulatedAzureVnetVoltstackClusterReplaceType_NoForwardProxy(r randyTypes, easy bool) *AzureVnetVoltstackClusterReplaceType_NoForwardProxy {
	this := &AzureVnetVoltstackClusterReplaceType_NoForwardProxy{}
	this.NoForwardProxy = ves_io_schema4.NewPopulatedEmpty(r, easy)
	return this
}
func NewPopulatedAzureVnetVoltstackClusterReplaceType_ActiveForwardProxyPolicies(r randyTypes, easy bool) *AzureVnetVoltstackClusterReplaceType_ActiveForwardProxyPolicies {
	this := &AzureVnetVoltstackClusterReplaceType_ActiveForwardProxyPolicies{}
	this.ActiveForwardProxyPolicies = ves_io_schema_network_firewall.NewPopulatedActiveForwardProxyPoliciesType(r, easy)
	return this
}
func NewPopulatedAzureVnetVoltstackClusterReplaceType_NoOutsideStaticRoutes(r randyTypes, easy bool) *AzureVnetVoltstackClusterReplaceType_NoOutsideStaticRoutes {
	this := &AzureVnetVoltstackClusterReplaceType_NoOutsideStaticRoutes{}
	this.NoOutsideStaticRoutes = ves_io_schema4.NewPopulatedEmpty(r, easy)
	return this
}
func NewPopulatedAzureVnetVoltstackClusterReplaceType_OutsideStaticRoutes(r randyTypes, easy bool) *AzureVnetVoltstackClusterReplaceType_OutsideStaticRoutes {
	this := &AzureVnetVoltstackClusterReplaceType_OutsideStaticRoutes{}
	this.OutsideStaticRoutes = ves_io_schema_views1.NewPopulatedSiteStaticRoutesListType(r, easy)
	return this
}
func NewPopulatedAzureVnetVoltstackClusterReplaceType_NoGlobalNetwork(r randyTypes, easy bool) *AzureVnetVoltstackClusterReplaceType_NoGlobalNetwork {
	this := &AzureVnetVoltstackClusterReplaceType_NoGlobalNetwork{}
	this.NoGlobalNetwork = ves_io_schema4.NewPopulatedEmpty(r, easy)
	return this
}
func NewPopulatedAzureVnetVoltstackClusterReplaceType_GlobalNetworkList(r randyTypes, easy bool) *AzureVnetVoltstackClusterReplaceType_GlobalNetworkList {
	this := &AzureVnetVoltstackClusterReplaceType_GlobalNetworkList{}
	this.GlobalNetworkList = ves_io_schema_views1.NewPopulatedGlobalNetworkConnectionListType(r, easy)
	return this
}
func NewPopulatedAzureVnetVoltstackClusterReplaceType_ForwardProxyAllowAll(r randyTypes, easy bool) *AzureVnetVoltstackClusterReplaceType_ForwardProxyAllowAll {
	this := &AzureVnetVoltstackClusterReplaceType_ForwardProxyAllowAll{}
	this.ForwardProxyAllowAll = ves_io_schema4.NewPopulatedEmpty(r, easy)
	return this
}
func NewPopulatedGlobalSpecType(r randyTypes, easy bool) *GlobalSpecType {
	this := &GlobalSpecType{}
	this.ResourceGroup = string(randStringTypes(r))
	this.AzureRegion = string(randStringTypes(r))
	if r.Intn(10) != 0 {
		this.Vnet = ves_io_schema_views1.NewPopulatedAzureVnetChoiceType(r, easy)
	}
	oneofNumber_SiteType := []int32{5, 6, 17}[r.Intn(3)]
	switch oneofNumber_SiteType {
	case 5:
		this.SiteType = NewPopulatedGlobalSpecType_IngressGw(r, easy)
	case 6:
		this.SiteType = NewPopulatedGlobalSpecType_IngressEgressGw(r, easy)
	case 17:
		this.SiteType = NewPopulatedGlobalSpecType_VoltstackCluster(r, easy)
	}
	oneofNumber_Deployment := []int32{8, 9}[r.Intn(2)]
	switch oneofNumber_Deployment {
	case 8:
		this.Deployment = NewPopulatedGlobalSpecType_AzureCred(r, easy)
	case 9:
		this.Deployment = NewPopulatedGlobalSpecType_Assisted(r, easy)
	}
	this.MachineType = string(randStringTypes(r))
	this.VolterraSoftwareVersion = string(randStringTypes(r))
	this.OperatingSystemVersion = string(randStringTypes(r))
	this.SshKey = string(randStringTypes(r))
	this.NodesPerAz = uint32(r.Uint32())
	this.DiskSize = uint32(r.Uint32())
	this.Address = string(randStringTypes(r))
	if r.Intn(10) != 0 {
		this.Coordinates = ves_io_schema_site.NewPopulatedCoordinates(r, easy)
	}
	if r.Intn(10) != 0 {
		this.TfParams = ves_io_schema_views.NewPopulatedObjectRefType(r, easy)
	}
	if r.Intn(10) != 0 {
		this.ViewInternal = ves_io_schema_views.NewPopulatedObjectRefType(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedGlobalSpecType_IngressGw(r randyTypes, easy bool) *GlobalSpecType_IngressGw {
	this := &GlobalSpecType_IngressGw{}
	this.IngressGw = NewPopulatedAzureVnetIngressGwType(r, easy)
	return this
}
func NewPopulatedGlobalSpecType_IngressEgressGw(r randyTypes, easy bool) *GlobalSpecType_IngressEgressGw {
	this := &GlobalSpecType_IngressEgressGw{}
	this.IngressEgressGw = NewPopulatedAzureVnetIngressEgressGwType(r, easy)
	return this
}
func NewPopulatedGlobalSpecType_AzureCred(r randyTypes, easy bool) *GlobalSpecType_AzureCred {
	this := &GlobalSpecType_AzureCred{}
	this.AzureCred = ves_io_schema_views.NewPopulatedObjectRefType(r, easy)
	return this
}
func NewPopulatedGlobalSpecType_Assisted(r randyTypes, easy bool) *GlobalSpecType_Assisted {
	this := &GlobalSpecType_Assisted{}
	this.Assisted = ves_io_schema4.NewPopulatedEmpty(r, easy)
	return this
}
func NewPopulatedGlobalSpecType_VoltstackCluster(r randyTypes, easy bool) *GlobalSpecType_VoltstackCluster {
	this := &GlobalSpecType_VoltstackCluster{}
	this.VoltstackCluster = NewPopulatedAzureVnetVoltstackClusterType(r, easy)
	return this
}
func NewPopulatedCreateSpecType(r randyTypes, easy bool) *CreateSpecType {
	this := &CreateSpecType{}
	this.ResourceGroup = string(randStringTypes(r))
	this.AzureRegion = string(randStringTypes(r))
	if r.Intn(10) != 0 {
		this.Vnet = ves_io_schema_views1.NewPopulatedAzureVnetChoiceType(r, easy)
	}
	oneofNumber_SiteType := []int32{5, 6, 17}[r.Intn(3)]
	switch oneofNumber_SiteType {
	case 5:
		this.SiteType = NewPopulatedCreateSpecType_IngressGw(r, easy)
	case 6:
		this.SiteType = NewPopulatedCreateSpecType_IngressEgressGw(r, easy)
	case 17:
		this.SiteType = NewPopulatedCreateSpecType_VoltstackCluster(r, easy)
	}
	oneofNumber_Deployment := []int32{8, 9}[r.Intn(2)]
	switch oneofNumber_Deployment {
	case 8:
		this.Deployment = NewPopulatedCreateSpecType_AzureCred(r, easy)
	case 9:
		this.Deployment = NewPopulatedCreateSpecType_Assisted(r, easy)
	}
	this.MachineType = string(randStringTypes(r))
	this.VolterraSoftwareVersion = string(randStringTypes(r))
	this.OperatingSystemVersion = string(randStringTypes(r))
	this.SshKey = string(randStringTypes(r))
	this.NodesPerAz = uint32(r.Uint32())
	this.DiskSize = uint32(r.Uint32())
	this.Address = string(randStringTypes(r))
	if r.Intn(10) != 0 {
		this.Coordinates = ves_io_schema_site.NewPopulatedCoordinates(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedCreateSpecType_IngressGw(r randyTypes, easy bool) *CreateSpecType_IngressGw {
	this := &CreateSpecType_IngressGw{}
	this.IngressGw = NewPopulatedAzureVnetIngressGwType(r, easy)
	return this
}
func NewPopulatedCreateSpecType_IngressEgressGw(r randyTypes, easy bool) *CreateSpecType_IngressEgressGw {
	this := &CreateSpecType_IngressEgressGw{}
	this.IngressEgressGw = NewPopulatedAzureVnetIngressEgressGwType(r, easy)
	return this
}
func NewPopulatedCreateSpecType_AzureCred(r randyTypes, easy bool) *CreateSpecType_AzureCred {
	this := &CreateSpecType_AzureCred{}
	this.AzureCred = ves_io_schema_views.NewPopulatedObjectRefType(r, easy)
	return this
}
func NewPopulatedCreateSpecType_Assisted(r randyTypes, easy bool) *CreateSpecType_Assisted {
	this := &CreateSpecType_Assisted{}
	this.Assisted = ves_io_schema4.NewPopulatedEmpty(r, easy)
	return this
}
func NewPopulatedCreateSpecType_VoltstackCluster(r randyTypes, easy bool) *CreateSpecType_VoltstackCluster {
	this := &CreateSpecType_VoltstackCluster{}
	this.VoltstackCluster = NewPopulatedAzureVnetVoltstackClusterType(r, easy)
	return this
}
func NewPopulatedReplaceSpecType(r randyTypes, easy bool) *ReplaceSpecType {
	this := &ReplaceSpecType{}
	oneofNumber_SiteType := []int32{5, 6, 17}[r.Intn(3)]
	switch oneofNumber_SiteType {
	case 5:
		this.SiteType = NewPopulatedReplaceSpecType_IngressGw(r, easy)
	case 6:
		this.SiteType = NewPopulatedReplaceSpecType_IngressEgressGw(r, easy)
	case 17:
		this.SiteType = NewPopulatedReplaceSpecType_VoltstackCluster(r, easy)
	}
	this.VolterraSoftwareVersion = string(randStringTypes(r))
	this.OperatingSystemVersion = string(randStringTypes(r))
	this.NodesPerAz = uint32(r.Uint32())
	this.Address = string(randStringTypes(r))
	if r.Intn(10) != 0 {
		this.Coordinates = ves_io_schema_site.NewPopulatedCoordinates(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedReplaceSpecType_IngressGw(r randyTypes, easy bool) *ReplaceSpecType_IngressGw {
	this := &ReplaceSpecType_IngressGw{}
	this.IngressGw = NewPopulatedAzureVnetIngressGwReplaceType(r, easy)
	return this
}
func NewPopulatedReplaceSpecType_IngressEgressGw(r randyTypes, easy bool) *ReplaceSpecType_IngressEgressGw {
	this := &ReplaceSpecType_IngressEgressGw{}
	this.IngressEgressGw = NewPopulatedAzureVnetIngressEgressGwReplaceType(r, easy)
	return this
}
func NewPopulatedReplaceSpecType_VoltstackCluster(r randyTypes, easy bool) *ReplaceSpecType_VoltstackCluster {
	this := &ReplaceSpecType_VoltstackCluster{}
	this.VoltstackCluster = NewPopulatedAzureVnetVoltstackClusterReplaceType(r, easy)
	return this
}
func NewPopulatedGetSpecType(r randyTypes, easy bool) *GetSpecType {
	this := &GetSpecType{}
	this.ResourceGroup = string(randStringTypes(r))
	this.AzureRegion = string(randStringTypes(r))
	if r.Intn(10) != 0 {
		this.Vnet = ves_io_schema_views1.NewPopulatedAzureVnetChoiceType(r, easy)
	}
	oneofNumber_SiteType := []int32{5, 6, 17}[r.Intn(3)]
	switch oneofNumber_SiteType {
	case 5:
		this.SiteType = NewPopulatedGetSpecType_IngressGw(r, easy)
	case 6:
		this.SiteType = NewPopulatedGetSpecType_IngressEgressGw(r, easy)
	case 17:
		this.SiteType = NewPopulatedGetSpecType_VoltstackCluster(r, easy)
	}
	oneofNumber_Deployment := []int32{8, 9}[r.Intn(2)]
	switch oneofNumber_Deployment {
	case 8:
		this.Deployment = NewPopulatedGetSpecType_AzureCred(r, easy)
	case 9:
		this.Deployment = NewPopulatedGetSpecType_Assisted(r, easy)
	}
	this.MachineType = string(randStringTypes(r))
	this.VolterraSoftwareVersion = string(randStringTypes(r))
	this.OperatingSystemVersion = string(randStringTypes(r))
	this.SshKey = string(randStringTypes(r))
	this.NodesPerAz = uint32(r.Uint32())
	this.DiskSize = uint32(r.Uint32())
	this.Address = string(randStringTypes(r))
	if r.Intn(10) != 0 {
		this.Coordinates = ves_io_schema_site.NewPopulatedCoordinates(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedGetSpecType_IngressGw(r randyTypes, easy bool) *GetSpecType_IngressGw {
	this := &GetSpecType_IngressGw{}
	this.IngressGw = NewPopulatedAzureVnetIngressGwType(r, easy)
	return this
}
func NewPopulatedGetSpecType_IngressEgressGw(r randyTypes, easy bool) *GetSpecType_IngressEgressGw {
	this := &GetSpecType_IngressEgressGw{}
	this.IngressEgressGw = NewPopulatedAzureVnetIngressEgressGwType(r, easy)
	return this
}
func NewPopulatedGetSpecType_AzureCred(r randyTypes, easy bool) *GetSpecType_AzureCred {
	this := &GetSpecType_AzureCred{}
	this.AzureCred = ves_io_schema_views.NewPopulatedObjectRefType(r, easy)
	return this
}
func NewPopulatedGetSpecType_Assisted(r randyTypes, easy bool) *GetSpecType_Assisted {
	this := &GetSpecType_Assisted{}
	this.Assisted = ves_io_schema4.NewPopulatedEmpty(r, easy)
	return this
}
func NewPopulatedGetSpecType_VoltstackCluster(r randyTypes, easy bool) *GetSpecType_VoltstackCluster {
	this := &GetSpecType_VoltstackCluster{}
	this.VoltstackCluster = NewPopulatedAzureVnetVoltstackClusterType(r, easy)
	return this
}

type randyTypes interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneTypes(r randyTypes) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringTypes(r randyTypes) string {
	v4 := r.Intn(100)
	tmps := make([]rune, v4)
	for i := 0; i < v4; i++ {
		tmps[i] = randUTF8RuneTypes(r)
	}
	return string(tmps)
}
func randUnrecognizedTypes(r randyTypes, maxFieldNumber int) (dAtA []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		dAtA = randFieldTypes(dAtA, r, fieldNumber, wire)
	}
	return dAtA
}
func randFieldTypes(dAtA []byte, r randyTypes, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		dAtA = encodeVarintPopulateTypes(dAtA, uint64(key))
		v5 := r.Int63()
		if r.Intn(2) == 0 {
			v5 *= -1
		}
		dAtA = encodeVarintPopulateTypes(dAtA, uint64(v5))
	case 1:
		dAtA = encodeVarintPopulateTypes(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		dAtA = encodeVarintPopulateTypes(dAtA, uint64(key))
		ll := r.Intn(100)
		dAtA = encodeVarintPopulateTypes(dAtA, uint64(ll))
		for j := 0; j < ll; j++ {
			dAtA = append(dAtA, byte(r.Intn(256)))
		}
	default:
		dAtA = encodeVarintPopulateTypes(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return dAtA
}
func encodeVarintPopulateTypes(dAtA []byte, v uint64) []byte {
	for v >= 1<<7 {
		dAtA = append(dAtA, uint8(uint64(v)&0x7f|0x80))
		v >>= 7
	}
	dAtA = append(dAtA, uint8(v))
	return dAtA
}
func (m *AzureVnetIngressGwType) Size() (n int) {
	var l int
	_ = l
	if len(m.AzNodes) > 0 {
		for _, e := range m.AzNodes {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	l = len(m.AzureCertifiedHw)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *AzureVnetIngressEgressGwType) Size() (n int) {
	var l int
	_ = l
	if len(m.AzNodes) > 0 {
		for _, e := range m.AzNodes {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if m.NetworkPolicyChoice != nil {
		n += m.NetworkPolicyChoice.Size()
	}
	if m.ForwardProxyChoice != nil {
		n += m.ForwardProxyChoice.Size()
	}
	l = len(m.AzureCertifiedHw)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.InsideStaticRouteChoice != nil {
		n += m.InsideStaticRouteChoice.Size()
	}
	if m.OutsideStaticRouteChoice != nil {
		n += m.OutsideStaticRouteChoice.Size()
	}
	if m.GlobalNetworkChoice != nil {
		n += m.GlobalNetworkChoice.Size()
	}
	return n
}

func (m *AzureVnetIngressEgressGwType_NoNetworkPolicy) Size() (n int) {
	var l int
	_ = l
	if m.NoNetworkPolicy != nil {
		l = m.NoNetworkPolicy.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *AzureVnetIngressEgressGwType_NoForwardProxy) Size() (n int) {
	var l int
	_ = l
	if m.NoForwardProxy != nil {
		l = m.NoForwardProxy.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *AzureVnetIngressEgressGwType_ActiveForwardProxyPolicies) Size() (n int) {
	var l int
	_ = l
	if m.ActiveForwardProxyPolicies != nil {
		l = m.ActiveForwardProxyPolicies.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *AzureVnetIngressEgressGwType_ActiveNetworkPolicies) Size() (n int) {
	var l int
	_ = l
	if m.ActiveNetworkPolicies != nil {
		l = m.ActiveNetworkPolicies.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *AzureVnetIngressEgressGwType_NoInsideStaticRoutes) Size() (n int) {
	var l int
	_ = l
	if m.NoInsideStaticRoutes != nil {
		l = m.NoInsideStaticRoutes.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *AzureVnetIngressEgressGwType_InsideStaticRoutes) Size() (n int) {
	var l int
	_ = l
	if m.InsideStaticRoutes != nil {
		l = m.InsideStaticRoutes.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *AzureVnetIngressEgressGwType_NoOutsideStaticRoutes) Size() (n int) {
	var l int
	_ = l
	if m.NoOutsideStaticRoutes != nil {
		l = m.NoOutsideStaticRoutes.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *AzureVnetIngressEgressGwType_OutsideStaticRoutes) Size() (n int) {
	var l int
	_ = l
	if m.OutsideStaticRoutes != nil {
		l = m.OutsideStaticRoutes.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *AzureVnetIngressEgressGwType_NoGlobalNetwork) Size() (n int) {
	var l int
	_ = l
	if m.NoGlobalNetwork != nil {
		l = m.NoGlobalNetwork.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *AzureVnetIngressEgressGwType_GlobalNetworkList) Size() (n int) {
	var l int
	_ = l
	if m.GlobalNetworkList != nil {
		l = m.GlobalNetworkList.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *AzureVnetIngressEgressGwType_ForwardProxyAllowAll) Size() (n int) {
	var l int
	_ = l
	if m.ForwardProxyAllowAll != nil {
		l = m.ForwardProxyAllowAll.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *AzureVnetVoltstackClusterType) Size() (n int) {
	var l int
	_ = l
	l = len(m.AzureCertifiedHw)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if len(m.AzNodes) > 0 {
		for _, e := range m.AzNodes {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if m.NetworkPolicyChoice != nil {
		n += m.NetworkPolicyChoice.Size()
	}
	if m.ForwardProxyChoice != nil {
		n += m.ForwardProxyChoice.Size()
	}
	if m.OutsideStaticRouteChoice != nil {
		n += m.OutsideStaticRouteChoice.Size()
	}
	if m.GlobalNetworkChoice != nil {
		n += m.GlobalNetworkChoice.Size()
	}
	return n
}

func (m *AzureVnetVoltstackClusterType_NoNetworkPolicy) Size() (n int) {
	var l int
	_ = l
	if m.NoNetworkPolicy != nil {
		l = m.NoNetworkPolicy.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *AzureVnetVoltstackClusterType_ActiveNetworkPolicies) Size() (n int) {
	var l int
	_ = l
	if m.ActiveNetworkPolicies != nil {
		l = m.ActiveNetworkPolicies.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *AzureVnetVoltstackClusterType_NoForwardProxy) Size() (n int) {
	var l int
	_ = l
	if m.NoForwardProxy != nil {
		l = m.NoForwardProxy.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *AzureVnetVoltstackClusterType_ActiveForwardProxyPolicies) Size() (n int) {
	var l int
	_ = l
	if m.ActiveForwardProxyPolicies != nil {
		l = m.ActiveForwardProxyPolicies.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *AzureVnetVoltstackClusterType_NoOutsideStaticRoutes) Size() (n int) {
	var l int
	_ = l
	if m.NoOutsideStaticRoutes != nil {
		l = m.NoOutsideStaticRoutes.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *AzureVnetVoltstackClusterType_OutsideStaticRoutes) Size() (n int) {
	var l int
	_ = l
	if m.OutsideStaticRoutes != nil {
		l = m.OutsideStaticRoutes.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *AzureVnetVoltstackClusterType_NoGlobalNetwork) Size() (n int) {
	var l int
	_ = l
	if m.NoGlobalNetwork != nil {
		l = m.NoGlobalNetwork.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *AzureVnetVoltstackClusterType_GlobalNetworkList) Size() (n int) {
	var l int
	_ = l
	if m.GlobalNetworkList != nil {
		l = m.GlobalNetworkList.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *AzureVnetVoltstackClusterType_ForwardProxyAllowAll) Size() (n int) {
	var l int
	_ = l
	if m.ForwardProxyAllowAll != nil {
		l = m.ForwardProxyAllowAll.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *AzureVnetIngressGwReplaceType) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *AzureVnetIngressEgressGwReplaceType) Size() (n int) {
	var l int
	_ = l
	if m.NetworkPolicyChoice != nil {
		n += m.NetworkPolicyChoice.Size()
	}
	if m.ForwardProxyChoice != nil {
		n += m.ForwardProxyChoice.Size()
	}
	if m.InsideStaticRouteChoice != nil {
		n += m.InsideStaticRouteChoice.Size()
	}
	if m.OutsideStaticRouteChoice != nil {
		n += m.OutsideStaticRouteChoice.Size()
	}
	if m.GlobalNetworkChoice != nil {
		n += m.GlobalNetworkChoice.Size()
	}
	return n
}

func (m *AzureVnetIngressEgressGwReplaceType_NoNetworkPolicy) Size() (n int) {
	var l int
	_ = l
	if m.NoNetworkPolicy != nil {
		l = m.NoNetworkPolicy.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *AzureVnetIngressEgressGwReplaceType_NoForwardProxy) Size() (n int) {
	var l int
	_ = l
	if m.NoForwardProxy != nil {
		l = m.NoForwardProxy.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *AzureVnetIngressEgressGwReplaceType_ActiveForwardProxyPolicies) Size() (n int) {
	var l int
	_ = l
	if m.ActiveForwardProxyPolicies != nil {
		l = m.ActiveForwardProxyPolicies.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *AzureVnetIngressEgressGwReplaceType_ActiveNetworkPolicies) Size() (n int) {
	var l int
	_ = l
	if m.ActiveNetworkPolicies != nil {
		l = m.ActiveNetworkPolicies.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *AzureVnetIngressEgressGwReplaceType_NoInsideStaticRoutes) Size() (n int) {
	var l int
	_ = l
	if m.NoInsideStaticRoutes != nil {
		l = m.NoInsideStaticRoutes.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *AzureVnetIngressEgressGwReplaceType_InsideStaticRoutes) Size() (n int) {
	var l int
	_ = l
	if m.InsideStaticRoutes != nil {
		l = m.InsideStaticRoutes.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *AzureVnetIngressEgressGwReplaceType_NoOutsideStaticRoutes) Size() (n int) {
	var l int
	_ = l
	if m.NoOutsideStaticRoutes != nil {
		l = m.NoOutsideStaticRoutes.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *AzureVnetIngressEgressGwReplaceType_OutsideStaticRoutes) Size() (n int) {
	var l int
	_ = l
	if m.OutsideStaticRoutes != nil {
		l = m.OutsideStaticRoutes.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *AzureVnetIngressEgressGwReplaceType_NoGlobalNetwork) Size() (n int) {
	var l int
	_ = l
	if m.NoGlobalNetwork != nil {
		l = m.NoGlobalNetwork.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *AzureVnetIngressEgressGwReplaceType_GlobalNetworkList) Size() (n int) {
	var l int
	_ = l
	if m.GlobalNetworkList != nil {
		l = m.GlobalNetworkList.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *AzureVnetIngressEgressGwReplaceType_ForwardProxyAllowAll) Size() (n int) {
	var l int
	_ = l
	if m.ForwardProxyAllowAll != nil {
		l = m.ForwardProxyAllowAll.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *AzureVnetVoltstackClusterReplaceType) Size() (n int) {
	var l int
	_ = l
	if m.NetworkPolicyChoice != nil {
		n += m.NetworkPolicyChoice.Size()
	}
	if m.ForwardProxyChoice != nil {
		n += m.ForwardProxyChoice.Size()
	}
	if m.OutsideStaticRouteChoice != nil {
		n += m.OutsideStaticRouteChoice.Size()
	}
	if m.GlobalNetworkChoice != nil {
		n += m.GlobalNetworkChoice.Size()
	}
	return n
}

func (m *AzureVnetVoltstackClusterReplaceType_NoNetworkPolicy) Size() (n int) {
	var l int
	_ = l
	if m.NoNetworkPolicy != nil {
		l = m.NoNetworkPolicy.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *AzureVnetVoltstackClusterReplaceType_ActiveNetworkPolicies) Size() (n int) {
	var l int
	_ = l
	if m.ActiveNetworkPolicies != nil {
		l = m.ActiveNetworkPolicies.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *AzureVnetVoltstackClusterReplaceType_NoForwardProxy) Size() (n int) {
	var l int
	_ = l
	if m.NoForwardProxy != nil {
		l = m.NoForwardProxy.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *AzureVnetVoltstackClusterReplaceType_ActiveForwardProxyPolicies) Size() (n int) {
	var l int
	_ = l
	if m.ActiveForwardProxyPolicies != nil {
		l = m.ActiveForwardProxyPolicies.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *AzureVnetVoltstackClusterReplaceType_NoOutsideStaticRoutes) Size() (n int) {
	var l int
	_ = l
	if m.NoOutsideStaticRoutes != nil {
		l = m.NoOutsideStaticRoutes.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *AzureVnetVoltstackClusterReplaceType_OutsideStaticRoutes) Size() (n int) {
	var l int
	_ = l
	if m.OutsideStaticRoutes != nil {
		l = m.OutsideStaticRoutes.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *AzureVnetVoltstackClusterReplaceType_NoGlobalNetwork) Size() (n int) {
	var l int
	_ = l
	if m.NoGlobalNetwork != nil {
		l = m.NoGlobalNetwork.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *AzureVnetVoltstackClusterReplaceType_GlobalNetworkList) Size() (n int) {
	var l int
	_ = l
	if m.GlobalNetworkList != nil {
		l = m.GlobalNetworkList.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *AzureVnetVoltstackClusterReplaceType_ForwardProxyAllowAll) Size() (n int) {
	var l int
	_ = l
	if m.ForwardProxyAllowAll != nil {
		l = m.ForwardProxyAllowAll.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType) Size() (n int) {
	var l int
	_ = l
	l = len(m.ResourceGroup)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.AzureRegion)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.Vnet != nil {
		l = m.Vnet.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.SiteType != nil {
		n += m.SiteType.Size()
	}
	if m.Deployment != nil {
		n += m.Deployment.Size()
	}
	l = len(m.MachineType)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.VolterraSoftwareVersion)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.OperatingSystemVersion)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.SshKey)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.NodesPerAz != 0 {
		n += 1 + sovTypes(uint64(m.NodesPerAz))
	}
	if m.DiskSize != 0 {
		n += 2 + sovTypes(uint64(m.DiskSize))
	}
	l = len(m.Address)
	if l > 0 {
		n += 2 + l + sovTypes(uint64(l))
	}
	if m.Coordinates != nil {
		l = m.Coordinates.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	if m.TfParams != nil {
		l = m.TfParams.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	if m.ViewInternal != nil {
		l = m.ViewInternal.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *GlobalSpecType_IngressGw) Size() (n int) {
	var l int
	_ = l
	if m.IngressGw != nil {
		l = m.IngressGw.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_IngressEgressGw) Size() (n int) {
	var l int
	_ = l
	if m.IngressEgressGw != nil {
		l = m.IngressEgressGw.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_AzureCred) Size() (n int) {
	var l int
	_ = l
	if m.AzureCred != nil {
		l = m.AzureCred.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_Assisted) Size() (n int) {
	var l int
	_ = l
	if m.Assisted != nil {
		l = m.Assisted.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_VoltstackCluster) Size() (n int) {
	var l int
	_ = l
	if m.VoltstackCluster != nil {
		l = m.VoltstackCluster.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType) Size() (n int) {
	var l int
	_ = l
	l = len(m.ResourceGroup)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.AzureRegion)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.Vnet != nil {
		l = m.Vnet.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.SiteType != nil {
		n += m.SiteType.Size()
	}
	if m.Deployment != nil {
		n += m.Deployment.Size()
	}
	l = len(m.MachineType)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.VolterraSoftwareVersion)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.OperatingSystemVersion)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.SshKey)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.NodesPerAz != 0 {
		n += 1 + sovTypes(uint64(m.NodesPerAz))
	}
	if m.DiskSize != 0 {
		n += 2 + sovTypes(uint64(m.DiskSize))
	}
	l = len(m.Address)
	if l > 0 {
		n += 2 + l + sovTypes(uint64(l))
	}
	if m.Coordinates != nil {
		l = m.Coordinates.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *CreateSpecType_IngressGw) Size() (n int) {
	var l int
	_ = l
	if m.IngressGw != nil {
		l = m.IngressGw.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_IngressEgressGw) Size() (n int) {
	var l int
	_ = l
	if m.IngressEgressGw != nil {
		l = m.IngressEgressGw.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_AzureCred) Size() (n int) {
	var l int
	_ = l
	if m.AzureCred != nil {
		l = m.AzureCred.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_Assisted) Size() (n int) {
	var l int
	_ = l
	if m.Assisted != nil {
		l = m.Assisted.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_VoltstackCluster) Size() (n int) {
	var l int
	_ = l
	if m.VoltstackCluster != nil {
		l = m.VoltstackCluster.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType) Size() (n int) {
	var l int
	_ = l
	if m.SiteType != nil {
		n += m.SiteType.Size()
	}
	l = len(m.VolterraSoftwareVersion)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.OperatingSystemVersion)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.NodesPerAz != 0 {
		n += 1 + sovTypes(uint64(m.NodesPerAz))
	}
	l = len(m.Address)
	if l > 0 {
		n += 2 + l + sovTypes(uint64(l))
	}
	if m.Coordinates != nil {
		l = m.Coordinates.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *ReplaceSpecType_IngressGw) Size() (n int) {
	var l int
	_ = l
	if m.IngressGw != nil {
		l = m.IngressGw.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_IngressEgressGw) Size() (n int) {
	var l int
	_ = l
	if m.IngressEgressGw != nil {
		l = m.IngressEgressGw.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_VoltstackCluster) Size() (n int) {
	var l int
	_ = l
	if m.VoltstackCluster != nil {
		l = m.VoltstackCluster.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType) Size() (n int) {
	var l int
	_ = l
	l = len(m.ResourceGroup)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.AzureRegion)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.Vnet != nil {
		l = m.Vnet.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.SiteType != nil {
		n += m.SiteType.Size()
	}
	if m.Deployment != nil {
		n += m.Deployment.Size()
	}
	l = len(m.MachineType)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.VolterraSoftwareVersion)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.OperatingSystemVersion)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.SshKey)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.NodesPerAz != 0 {
		n += 1 + sovTypes(uint64(m.NodesPerAz))
	}
	if m.DiskSize != 0 {
		n += 2 + sovTypes(uint64(m.DiskSize))
	}
	l = len(m.Address)
	if l > 0 {
		n += 2 + l + sovTypes(uint64(l))
	}
	if m.Coordinates != nil {
		l = m.Coordinates.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *GetSpecType_IngressGw) Size() (n int) {
	var l int
	_ = l
	if m.IngressGw != nil {
		l = m.IngressGw.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_IngressEgressGw) Size() (n int) {
	var l int
	_ = l
	if m.IngressEgressGw != nil {
		l = m.IngressEgressGw.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_AzureCred) Size() (n int) {
	var l int
	_ = l
	if m.AzureCred != nil {
		l = m.AzureCred.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_Assisted) Size() (n int) {
	var l int
	_ = l
	if m.Assisted != nil {
		l = m.Assisted.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_VoltstackCluster) Size() (n int) {
	var l int
	_ = l
	if m.VoltstackCluster != nil {
		l = m.VoltstackCluster.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}

func sovTypes(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozTypes(x uint64) (n int) {
	return sovTypes(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *AzureVnetIngressGwType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AzureVnetIngressGwType{`,
		`AzNodes:` + strings.Replace(fmt.Sprintf("%v", this.AzNodes), "AzureVnetOneInterfaceNodeType", "ves_io_schema_views1.AzureVnetOneInterfaceNodeType", 1) + `,`,
		`AzureCertifiedHw:` + fmt.Sprintf("%v", this.AzureCertifiedHw) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AzureVnetIngressEgressGwType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AzureVnetIngressEgressGwType{`,
		`AzNodes:` + strings.Replace(fmt.Sprintf("%v", this.AzNodes), "AzureVnetTwoInterfaceNodeType", "ves_io_schema_views1.AzureVnetTwoInterfaceNodeType", 1) + `,`,
		`NetworkPolicyChoice:` + fmt.Sprintf("%v", this.NetworkPolicyChoice) + `,`,
		`ForwardProxyChoice:` + fmt.Sprintf("%v", this.ForwardProxyChoice) + `,`,
		`AzureCertifiedHw:` + fmt.Sprintf("%v", this.AzureCertifiedHw) + `,`,
		`InsideStaticRouteChoice:` + fmt.Sprintf("%v", this.InsideStaticRouteChoice) + `,`,
		`OutsideStaticRouteChoice:` + fmt.Sprintf("%v", this.OutsideStaticRouteChoice) + `,`,
		`GlobalNetworkChoice:` + fmt.Sprintf("%v", this.GlobalNetworkChoice) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AzureVnetIngressEgressGwType_NoNetworkPolicy) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AzureVnetIngressEgressGwType_NoNetworkPolicy{`,
		`NoNetworkPolicy:` + strings.Replace(fmt.Sprintf("%v", this.NoNetworkPolicy), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AzureVnetIngressEgressGwType_NoForwardProxy) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AzureVnetIngressEgressGwType_NoForwardProxy{`,
		`NoForwardProxy:` + strings.Replace(fmt.Sprintf("%v", this.NoForwardProxy), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AzureVnetIngressEgressGwType_ActiveForwardProxyPolicies) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AzureVnetIngressEgressGwType_ActiveForwardProxyPolicies{`,
		`ActiveForwardProxyPolicies:` + strings.Replace(fmt.Sprintf("%v", this.ActiveForwardProxyPolicies), "ActiveForwardProxyPoliciesType", "ves_io_schema_network_firewall.ActiveForwardProxyPoliciesType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AzureVnetIngressEgressGwType_ActiveNetworkPolicies) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AzureVnetIngressEgressGwType_ActiveNetworkPolicies{`,
		`ActiveNetworkPolicies:` + strings.Replace(fmt.Sprintf("%v", this.ActiveNetworkPolicies), "ActiveNetworkPoliciesType", "ves_io_schema_network_firewall.ActiveNetworkPoliciesType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AzureVnetIngressEgressGwType_NoInsideStaticRoutes) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AzureVnetIngressEgressGwType_NoInsideStaticRoutes{`,
		`NoInsideStaticRoutes:` + strings.Replace(fmt.Sprintf("%v", this.NoInsideStaticRoutes), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AzureVnetIngressEgressGwType_InsideStaticRoutes) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AzureVnetIngressEgressGwType_InsideStaticRoutes{`,
		`InsideStaticRoutes:` + strings.Replace(fmt.Sprintf("%v", this.InsideStaticRoutes), "SiteStaticRoutesListType", "ves_io_schema_views1.SiteStaticRoutesListType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AzureVnetIngressEgressGwType_NoOutsideStaticRoutes) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AzureVnetIngressEgressGwType_NoOutsideStaticRoutes{`,
		`NoOutsideStaticRoutes:` + strings.Replace(fmt.Sprintf("%v", this.NoOutsideStaticRoutes), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AzureVnetIngressEgressGwType_OutsideStaticRoutes) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AzureVnetIngressEgressGwType_OutsideStaticRoutes{`,
		`OutsideStaticRoutes:` + strings.Replace(fmt.Sprintf("%v", this.OutsideStaticRoutes), "SiteStaticRoutesListType", "ves_io_schema_views1.SiteStaticRoutesListType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AzureVnetIngressEgressGwType_NoGlobalNetwork) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AzureVnetIngressEgressGwType_NoGlobalNetwork{`,
		`NoGlobalNetwork:` + strings.Replace(fmt.Sprintf("%v", this.NoGlobalNetwork), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AzureVnetIngressEgressGwType_GlobalNetworkList) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AzureVnetIngressEgressGwType_GlobalNetworkList{`,
		`GlobalNetworkList:` + strings.Replace(fmt.Sprintf("%v", this.GlobalNetworkList), "GlobalNetworkConnectionListType", "ves_io_schema_views1.GlobalNetworkConnectionListType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AzureVnetIngressEgressGwType_ForwardProxyAllowAll) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AzureVnetIngressEgressGwType_ForwardProxyAllowAll{`,
		`ForwardProxyAllowAll:` + strings.Replace(fmt.Sprintf("%v", this.ForwardProxyAllowAll), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AzureVnetVoltstackClusterType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AzureVnetVoltstackClusterType{`,
		`AzureCertifiedHw:` + fmt.Sprintf("%v", this.AzureCertifiedHw) + `,`,
		`AzNodes:` + strings.Replace(fmt.Sprintf("%v", this.AzNodes), "AzureVnetOneInterfaceNodeType", "ves_io_schema_views1.AzureVnetOneInterfaceNodeType", 1) + `,`,
		`NetworkPolicyChoice:` + fmt.Sprintf("%v", this.NetworkPolicyChoice) + `,`,
		`ForwardProxyChoice:` + fmt.Sprintf("%v", this.ForwardProxyChoice) + `,`,
		`OutsideStaticRouteChoice:` + fmt.Sprintf("%v", this.OutsideStaticRouteChoice) + `,`,
		`GlobalNetworkChoice:` + fmt.Sprintf("%v", this.GlobalNetworkChoice) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AzureVnetVoltstackClusterType_NoNetworkPolicy) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AzureVnetVoltstackClusterType_NoNetworkPolicy{`,
		`NoNetworkPolicy:` + strings.Replace(fmt.Sprintf("%v", this.NoNetworkPolicy), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AzureVnetVoltstackClusterType_ActiveNetworkPolicies) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AzureVnetVoltstackClusterType_ActiveNetworkPolicies{`,
		`ActiveNetworkPolicies:` + strings.Replace(fmt.Sprintf("%v", this.ActiveNetworkPolicies), "ActiveNetworkPoliciesType", "ves_io_schema_network_firewall.ActiveNetworkPoliciesType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AzureVnetVoltstackClusterType_NoForwardProxy) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AzureVnetVoltstackClusterType_NoForwardProxy{`,
		`NoForwardProxy:` + strings.Replace(fmt.Sprintf("%v", this.NoForwardProxy), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AzureVnetVoltstackClusterType_ActiveForwardProxyPolicies) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AzureVnetVoltstackClusterType_ActiveForwardProxyPolicies{`,
		`ActiveForwardProxyPolicies:` + strings.Replace(fmt.Sprintf("%v", this.ActiveForwardProxyPolicies), "ActiveForwardProxyPoliciesType", "ves_io_schema_network_firewall.ActiveForwardProxyPoliciesType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AzureVnetVoltstackClusterType_NoOutsideStaticRoutes) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AzureVnetVoltstackClusterType_NoOutsideStaticRoutes{`,
		`NoOutsideStaticRoutes:` + strings.Replace(fmt.Sprintf("%v", this.NoOutsideStaticRoutes), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AzureVnetVoltstackClusterType_OutsideStaticRoutes) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AzureVnetVoltstackClusterType_OutsideStaticRoutes{`,
		`OutsideStaticRoutes:` + strings.Replace(fmt.Sprintf("%v", this.OutsideStaticRoutes), "SiteStaticRoutesListType", "ves_io_schema_views1.SiteStaticRoutesListType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AzureVnetVoltstackClusterType_NoGlobalNetwork) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AzureVnetVoltstackClusterType_NoGlobalNetwork{`,
		`NoGlobalNetwork:` + strings.Replace(fmt.Sprintf("%v", this.NoGlobalNetwork), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AzureVnetVoltstackClusterType_GlobalNetworkList) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AzureVnetVoltstackClusterType_GlobalNetworkList{`,
		`GlobalNetworkList:` + strings.Replace(fmt.Sprintf("%v", this.GlobalNetworkList), "GlobalNetworkConnectionListType", "ves_io_schema_views1.GlobalNetworkConnectionListType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AzureVnetVoltstackClusterType_ForwardProxyAllowAll) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AzureVnetVoltstackClusterType_ForwardProxyAllowAll{`,
		`ForwardProxyAllowAll:` + strings.Replace(fmt.Sprintf("%v", this.ForwardProxyAllowAll), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AzureVnetIngressGwReplaceType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AzureVnetIngressGwReplaceType{`,
		`}`,
	}, "")
	return s
}
func (this *AzureVnetIngressEgressGwReplaceType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AzureVnetIngressEgressGwReplaceType{`,
		`NetworkPolicyChoice:` + fmt.Sprintf("%v", this.NetworkPolicyChoice) + `,`,
		`ForwardProxyChoice:` + fmt.Sprintf("%v", this.ForwardProxyChoice) + `,`,
		`InsideStaticRouteChoice:` + fmt.Sprintf("%v", this.InsideStaticRouteChoice) + `,`,
		`OutsideStaticRouteChoice:` + fmt.Sprintf("%v", this.OutsideStaticRouteChoice) + `,`,
		`GlobalNetworkChoice:` + fmt.Sprintf("%v", this.GlobalNetworkChoice) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AzureVnetIngressEgressGwReplaceType_NoNetworkPolicy) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AzureVnetIngressEgressGwReplaceType_NoNetworkPolicy{`,
		`NoNetworkPolicy:` + strings.Replace(fmt.Sprintf("%v", this.NoNetworkPolicy), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AzureVnetIngressEgressGwReplaceType_NoForwardProxy) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AzureVnetIngressEgressGwReplaceType_NoForwardProxy{`,
		`NoForwardProxy:` + strings.Replace(fmt.Sprintf("%v", this.NoForwardProxy), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AzureVnetIngressEgressGwReplaceType_ActiveForwardProxyPolicies) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AzureVnetIngressEgressGwReplaceType_ActiveForwardProxyPolicies{`,
		`ActiveForwardProxyPolicies:` + strings.Replace(fmt.Sprintf("%v", this.ActiveForwardProxyPolicies), "ActiveForwardProxyPoliciesType", "ves_io_schema_network_firewall.ActiveForwardProxyPoliciesType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AzureVnetIngressEgressGwReplaceType_ActiveNetworkPolicies) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AzureVnetIngressEgressGwReplaceType_ActiveNetworkPolicies{`,
		`ActiveNetworkPolicies:` + strings.Replace(fmt.Sprintf("%v", this.ActiveNetworkPolicies), "ActiveNetworkPoliciesType", "ves_io_schema_network_firewall.ActiveNetworkPoliciesType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AzureVnetIngressEgressGwReplaceType_NoInsideStaticRoutes) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AzureVnetIngressEgressGwReplaceType_NoInsideStaticRoutes{`,
		`NoInsideStaticRoutes:` + strings.Replace(fmt.Sprintf("%v", this.NoInsideStaticRoutes), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AzureVnetIngressEgressGwReplaceType_InsideStaticRoutes) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AzureVnetIngressEgressGwReplaceType_InsideStaticRoutes{`,
		`InsideStaticRoutes:` + strings.Replace(fmt.Sprintf("%v", this.InsideStaticRoutes), "SiteStaticRoutesListType", "ves_io_schema_views1.SiteStaticRoutesListType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AzureVnetIngressEgressGwReplaceType_NoOutsideStaticRoutes) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AzureVnetIngressEgressGwReplaceType_NoOutsideStaticRoutes{`,
		`NoOutsideStaticRoutes:` + strings.Replace(fmt.Sprintf("%v", this.NoOutsideStaticRoutes), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AzureVnetIngressEgressGwReplaceType_OutsideStaticRoutes) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AzureVnetIngressEgressGwReplaceType_OutsideStaticRoutes{`,
		`OutsideStaticRoutes:` + strings.Replace(fmt.Sprintf("%v", this.OutsideStaticRoutes), "SiteStaticRoutesListType", "ves_io_schema_views1.SiteStaticRoutesListType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AzureVnetIngressEgressGwReplaceType_NoGlobalNetwork) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AzureVnetIngressEgressGwReplaceType_NoGlobalNetwork{`,
		`NoGlobalNetwork:` + strings.Replace(fmt.Sprintf("%v", this.NoGlobalNetwork), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AzureVnetIngressEgressGwReplaceType_GlobalNetworkList) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AzureVnetIngressEgressGwReplaceType_GlobalNetworkList{`,
		`GlobalNetworkList:` + strings.Replace(fmt.Sprintf("%v", this.GlobalNetworkList), "GlobalNetworkConnectionListType", "ves_io_schema_views1.GlobalNetworkConnectionListType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AzureVnetIngressEgressGwReplaceType_ForwardProxyAllowAll) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AzureVnetIngressEgressGwReplaceType_ForwardProxyAllowAll{`,
		`ForwardProxyAllowAll:` + strings.Replace(fmt.Sprintf("%v", this.ForwardProxyAllowAll), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AzureVnetVoltstackClusterReplaceType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AzureVnetVoltstackClusterReplaceType{`,
		`NetworkPolicyChoice:` + fmt.Sprintf("%v", this.NetworkPolicyChoice) + `,`,
		`ForwardProxyChoice:` + fmt.Sprintf("%v", this.ForwardProxyChoice) + `,`,
		`OutsideStaticRouteChoice:` + fmt.Sprintf("%v", this.OutsideStaticRouteChoice) + `,`,
		`GlobalNetworkChoice:` + fmt.Sprintf("%v", this.GlobalNetworkChoice) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AzureVnetVoltstackClusterReplaceType_NoNetworkPolicy) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AzureVnetVoltstackClusterReplaceType_NoNetworkPolicy{`,
		`NoNetworkPolicy:` + strings.Replace(fmt.Sprintf("%v", this.NoNetworkPolicy), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AzureVnetVoltstackClusterReplaceType_ActiveNetworkPolicies) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AzureVnetVoltstackClusterReplaceType_ActiveNetworkPolicies{`,
		`ActiveNetworkPolicies:` + strings.Replace(fmt.Sprintf("%v", this.ActiveNetworkPolicies), "ActiveNetworkPoliciesType", "ves_io_schema_network_firewall.ActiveNetworkPoliciesType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AzureVnetVoltstackClusterReplaceType_NoForwardProxy) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AzureVnetVoltstackClusterReplaceType_NoForwardProxy{`,
		`NoForwardProxy:` + strings.Replace(fmt.Sprintf("%v", this.NoForwardProxy), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AzureVnetVoltstackClusterReplaceType_ActiveForwardProxyPolicies) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AzureVnetVoltstackClusterReplaceType_ActiveForwardProxyPolicies{`,
		`ActiveForwardProxyPolicies:` + strings.Replace(fmt.Sprintf("%v", this.ActiveForwardProxyPolicies), "ActiveForwardProxyPoliciesType", "ves_io_schema_network_firewall.ActiveForwardProxyPoliciesType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AzureVnetVoltstackClusterReplaceType_NoOutsideStaticRoutes) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AzureVnetVoltstackClusterReplaceType_NoOutsideStaticRoutes{`,
		`NoOutsideStaticRoutes:` + strings.Replace(fmt.Sprintf("%v", this.NoOutsideStaticRoutes), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AzureVnetVoltstackClusterReplaceType_OutsideStaticRoutes) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AzureVnetVoltstackClusterReplaceType_OutsideStaticRoutes{`,
		`OutsideStaticRoutes:` + strings.Replace(fmt.Sprintf("%v", this.OutsideStaticRoutes), "SiteStaticRoutesListType", "ves_io_schema_views1.SiteStaticRoutesListType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AzureVnetVoltstackClusterReplaceType_NoGlobalNetwork) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AzureVnetVoltstackClusterReplaceType_NoGlobalNetwork{`,
		`NoGlobalNetwork:` + strings.Replace(fmt.Sprintf("%v", this.NoGlobalNetwork), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AzureVnetVoltstackClusterReplaceType_GlobalNetworkList) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AzureVnetVoltstackClusterReplaceType_GlobalNetworkList{`,
		`GlobalNetworkList:` + strings.Replace(fmt.Sprintf("%v", this.GlobalNetworkList), "GlobalNetworkConnectionListType", "ves_io_schema_views1.GlobalNetworkConnectionListType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AzureVnetVoltstackClusterReplaceType_ForwardProxyAllowAll) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AzureVnetVoltstackClusterReplaceType_ForwardProxyAllowAll{`,
		`ForwardProxyAllowAll:` + strings.Replace(fmt.Sprintf("%v", this.ForwardProxyAllowAll), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType{`,
		`ResourceGroup:` + fmt.Sprintf("%v", this.ResourceGroup) + `,`,
		`AzureRegion:` + fmt.Sprintf("%v", this.AzureRegion) + `,`,
		`Vnet:` + strings.Replace(fmt.Sprintf("%v", this.Vnet), "AzureVnetChoiceType", "ves_io_schema_views1.AzureVnetChoiceType", 1) + `,`,
		`SiteType:` + fmt.Sprintf("%v", this.SiteType) + `,`,
		`Deployment:` + fmt.Sprintf("%v", this.Deployment) + `,`,
		`MachineType:` + fmt.Sprintf("%v", this.MachineType) + `,`,
		`VolterraSoftwareVersion:` + fmt.Sprintf("%v", this.VolterraSoftwareVersion) + `,`,
		`OperatingSystemVersion:` + fmt.Sprintf("%v", this.OperatingSystemVersion) + `,`,
		`SshKey:` + fmt.Sprintf("%v", this.SshKey) + `,`,
		`NodesPerAz:` + fmt.Sprintf("%v", this.NodesPerAz) + `,`,
		`DiskSize:` + fmt.Sprintf("%v", this.DiskSize) + `,`,
		`Address:` + fmt.Sprintf("%v", this.Address) + `,`,
		`Coordinates:` + strings.Replace(fmt.Sprintf("%v", this.Coordinates), "Coordinates", "ves_io_schema_site.Coordinates", 1) + `,`,
		`TfParams:` + strings.Replace(fmt.Sprintf("%v", this.TfParams), "ObjectRefType", "ves_io_schema_views.ObjectRefType", 1) + `,`,
		`ViewInternal:` + strings.Replace(fmt.Sprintf("%v", this.ViewInternal), "ObjectRefType", "ves_io_schema_views.ObjectRefType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_IngressGw) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_IngressGw{`,
		`IngressGw:` + strings.Replace(fmt.Sprintf("%v", this.IngressGw), "AzureVnetIngressGwType", "AzureVnetIngressGwType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_IngressEgressGw) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_IngressEgressGw{`,
		`IngressEgressGw:` + strings.Replace(fmt.Sprintf("%v", this.IngressEgressGw), "AzureVnetIngressEgressGwType", "AzureVnetIngressEgressGwType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_AzureCred) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_AzureCred{`,
		`AzureCred:` + strings.Replace(fmt.Sprintf("%v", this.AzureCred), "ObjectRefType", "ves_io_schema_views.ObjectRefType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_Assisted) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_Assisted{`,
		`Assisted:` + strings.Replace(fmt.Sprintf("%v", this.Assisted), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_VoltstackCluster) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_VoltstackCluster{`,
		`VoltstackCluster:` + strings.Replace(fmt.Sprintf("%v", this.VoltstackCluster), "AzureVnetVoltstackClusterType", "AzureVnetVoltstackClusterType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType{`,
		`ResourceGroup:` + fmt.Sprintf("%v", this.ResourceGroup) + `,`,
		`AzureRegion:` + fmt.Sprintf("%v", this.AzureRegion) + `,`,
		`Vnet:` + strings.Replace(fmt.Sprintf("%v", this.Vnet), "AzureVnetChoiceType", "ves_io_schema_views1.AzureVnetChoiceType", 1) + `,`,
		`SiteType:` + fmt.Sprintf("%v", this.SiteType) + `,`,
		`Deployment:` + fmt.Sprintf("%v", this.Deployment) + `,`,
		`MachineType:` + fmt.Sprintf("%v", this.MachineType) + `,`,
		`VolterraSoftwareVersion:` + fmt.Sprintf("%v", this.VolterraSoftwareVersion) + `,`,
		`OperatingSystemVersion:` + fmt.Sprintf("%v", this.OperatingSystemVersion) + `,`,
		`SshKey:` + fmt.Sprintf("%v", this.SshKey) + `,`,
		`NodesPerAz:` + fmt.Sprintf("%v", this.NodesPerAz) + `,`,
		`DiskSize:` + fmt.Sprintf("%v", this.DiskSize) + `,`,
		`Address:` + fmt.Sprintf("%v", this.Address) + `,`,
		`Coordinates:` + strings.Replace(fmt.Sprintf("%v", this.Coordinates), "Coordinates", "ves_io_schema_site.Coordinates", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_IngressGw) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_IngressGw{`,
		`IngressGw:` + strings.Replace(fmt.Sprintf("%v", this.IngressGw), "AzureVnetIngressGwType", "AzureVnetIngressGwType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_IngressEgressGw) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_IngressEgressGw{`,
		`IngressEgressGw:` + strings.Replace(fmt.Sprintf("%v", this.IngressEgressGw), "AzureVnetIngressEgressGwType", "AzureVnetIngressEgressGwType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_AzureCred) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_AzureCred{`,
		`AzureCred:` + strings.Replace(fmt.Sprintf("%v", this.AzureCred), "ObjectRefType", "ves_io_schema_views.ObjectRefType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_Assisted) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_Assisted{`,
		`Assisted:` + strings.Replace(fmt.Sprintf("%v", this.Assisted), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_VoltstackCluster) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_VoltstackCluster{`,
		`VoltstackCluster:` + strings.Replace(fmt.Sprintf("%v", this.VoltstackCluster), "AzureVnetVoltstackClusterType", "AzureVnetVoltstackClusterType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType{`,
		`SiteType:` + fmt.Sprintf("%v", this.SiteType) + `,`,
		`VolterraSoftwareVersion:` + fmt.Sprintf("%v", this.VolterraSoftwareVersion) + `,`,
		`OperatingSystemVersion:` + fmt.Sprintf("%v", this.OperatingSystemVersion) + `,`,
		`NodesPerAz:` + fmt.Sprintf("%v", this.NodesPerAz) + `,`,
		`Address:` + fmt.Sprintf("%v", this.Address) + `,`,
		`Coordinates:` + strings.Replace(fmt.Sprintf("%v", this.Coordinates), "Coordinates", "ves_io_schema_site.Coordinates", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_IngressGw) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_IngressGw{`,
		`IngressGw:` + strings.Replace(fmt.Sprintf("%v", this.IngressGw), "AzureVnetIngressGwReplaceType", "AzureVnetIngressGwReplaceType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_IngressEgressGw) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_IngressEgressGw{`,
		`IngressEgressGw:` + strings.Replace(fmt.Sprintf("%v", this.IngressEgressGw), "AzureVnetIngressEgressGwReplaceType", "AzureVnetIngressEgressGwReplaceType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_VoltstackCluster) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_VoltstackCluster{`,
		`VoltstackCluster:` + strings.Replace(fmt.Sprintf("%v", this.VoltstackCluster), "AzureVnetVoltstackClusterReplaceType", "AzureVnetVoltstackClusterReplaceType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType{`,
		`ResourceGroup:` + fmt.Sprintf("%v", this.ResourceGroup) + `,`,
		`AzureRegion:` + fmt.Sprintf("%v", this.AzureRegion) + `,`,
		`Vnet:` + strings.Replace(fmt.Sprintf("%v", this.Vnet), "AzureVnetChoiceType", "ves_io_schema_views1.AzureVnetChoiceType", 1) + `,`,
		`SiteType:` + fmt.Sprintf("%v", this.SiteType) + `,`,
		`Deployment:` + fmt.Sprintf("%v", this.Deployment) + `,`,
		`MachineType:` + fmt.Sprintf("%v", this.MachineType) + `,`,
		`VolterraSoftwareVersion:` + fmt.Sprintf("%v", this.VolterraSoftwareVersion) + `,`,
		`OperatingSystemVersion:` + fmt.Sprintf("%v", this.OperatingSystemVersion) + `,`,
		`SshKey:` + fmt.Sprintf("%v", this.SshKey) + `,`,
		`NodesPerAz:` + fmt.Sprintf("%v", this.NodesPerAz) + `,`,
		`DiskSize:` + fmt.Sprintf("%v", this.DiskSize) + `,`,
		`Address:` + fmt.Sprintf("%v", this.Address) + `,`,
		`Coordinates:` + strings.Replace(fmt.Sprintf("%v", this.Coordinates), "Coordinates", "ves_io_schema_site.Coordinates", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_IngressGw) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_IngressGw{`,
		`IngressGw:` + strings.Replace(fmt.Sprintf("%v", this.IngressGw), "AzureVnetIngressGwType", "AzureVnetIngressGwType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_IngressEgressGw) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_IngressEgressGw{`,
		`IngressEgressGw:` + strings.Replace(fmt.Sprintf("%v", this.IngressEgressGw), "AzureVnetIngressEgressGwType", "AzureVnetIngressEgressGwType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_AzureCred) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_AzureCred{`,
		`AzureCred:` + strings.Replace(fmt.Sprintf("%v", this.AzureCred), "ObjectRefType", "ves_io_schema_views.ObjectRefType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_Assisted) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_Assisted{`,
		`Assisted:` + strings.Replace(fmt.Sprintf("%v", this.Assisted), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_VoltstackCluster) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_VoltstackCluster{`,
		`VoltstackCluster:` + strings.Replace(fmt.Sprintf("%v", this.VoltstackCluster), "AzureVnetVoltstackClusterType", "AzureVnetVoltstackClusterType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringTypes(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *AzureVnetIngressGwType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AzureVnetIngressGwType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AzureVnetIngressGwType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AzNodes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AzNodes = append(m.AzNodes, &ves_io_schema_views1.AzureVnetOneInterfaceNodeType{})
			if err := m.AzNodes[len(m.AzNodes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AzureCertifiedHw", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AzureCertifiedHw = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AzureVnetIngressEgressGwType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AzureVnetIngressEgressGwType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AzureVnetIngressEgressGwType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AzNodes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AzNodes = append(m.AzNodes, &ves_io_schema_views1.AzureVnetTwoInterfaceNodeType{})
			if err := m.AzNodes[len(m.AzNodes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoNetworkPolicy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.NetworkPolicyChoice = &AzureVnetIngressEgressGwType_NoNetworkPolicy{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoForwardProxy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ForwardProxyChoice = &AzureVnetIngressEgressGwType_NoForwardProxy{v}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AzureCertifiedHw", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AzureCertifiedHw = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActiveForwardProxyPolicies", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema_network_firewall.ActiveForwardProxyPoliciesType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ForwardProxyChoice = &AzureVnetIngressEgressGwType_ActiveForwardProxyPolicies{v}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActiveNetworkPolicies", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema_network_firewall.ActiveNetworkPoliciesType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.NetworkPolicyChoice = &AzureVnetIngressEgressGwType_ActiveNetworkPolicies{v}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoInsideStaticRoutes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.InsideStaticRouteChoice = &AzureVnetIngressEgressGwType_NoInsideStaticRoutes{v}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InsideStaticRoutes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema_views1.SiteStaticRoutesListType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.InsideStaticRouteChoice = &AzureVnetIngressEgressGwType_InsideStaticRoutes{v}
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoOutsideStaticRoutes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.OutsideStaticRouteChoice = &AzureVnetIngressEgressGwType_NoOutsideStaticRoutes{v}
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutsideStaticRoutes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema_views1.SiteStaticRoutesListType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.OutsideStaticRouteChoice = &AzureVnetIngressEgressGwType_OutsideStaticRoutes{v}
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoGlobalNetwork", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.GlobalNetworkChoice = &AzureVnetIngressEgressGwType_NoGlobalNetwork{v}
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GlobalNetworkList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema_views1.GlobalNetworkConnectionListType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.GlobalNetworkChoice = &AzureVnetIngressEgressGwType_GlobalNetworkList{v}
			iNdEx = postIndex
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ForwardProxyAllowAll", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ForwardProxyChoice = &AzureVnetIngressEgressGwType_ForwardProxyAllowAll{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AzureVnetVoltstackClusterType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AzureVnetVoltstackClusterType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AzureVnetVoltstackClusterType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AzureCertifiedHw", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AzureCertifiedHw = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AzNodes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AzNodes = append(m.AzNodes, &ves_io_schema_views1.AzureVnetOneInterfaceNodeType{})
			if err := m.AzNodes[len(m.AzNodes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoNetworkPolicy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.NetworkPolicyChoice = &AzureVnetVoltstackClusterType_NoNetworkPolicy{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActiveNetworkPolicies", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema_network_firewall.ActiveNetworkPoliciesType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.NetworkPolicyChoice = &AzureVnetVoltstackClusterType_ActiveNetworkPolicies{v}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoForwardProxy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ForwardProxyChoice = &AzureVnetVoltstackClusterType_NoForwardProxy{v}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActiveForwardProxyPolicies", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema_network_firewall.ActiveForwardProxyPoliciesType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ForwardProxyChoice = &AzureVnetVoltstackClusterType_ActiveForwardProxyPolicies{v}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoOutsideStaticRoutes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.OutsideStaticRouteChoice = &AzureVnetVoltstackClusterType_NoOutsideStaticRoutes{v}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutsideStaticRoutes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema_views1.SiteStaticRoutesListType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.OutsideStaticRouteChoice = &AzureVnetVoltstackClusterType_OutsideStaticRoutes{v}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoGlobalNetwork", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.GlobalNetworkChoice = &AzureVnetVoltstackClusterType_NoGlobalNetwork{v}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GlobalNetworkList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema_views1.GlobalNetworkConnectionListType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.GlobalNetworkChoice = &AzureVnetVoltstackClusterType_GlobalNetworkList{v}
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ForwardProxyAllowAll", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ForwardProxyChoice = &AzureVnetVoltstackClusterType_ForwardProxyAllowAll{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AzureVnetIngressGwReplaceType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AzureVnetIngressGwReplaceType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AzureVnetIngressGwReplaceType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AzureVnetIngressEgressGwReplaceType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AzureVnetIngressEgressGwReplaceType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AzureVnetIngressEgressGwReplaceType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoNetworkPolicy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.NetworkPolicyChoice = &AzureVnetIngressEgressGwReplaceType_NoNetworkPolicy{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoForwardProxy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ForwardProxyChoice = &AzureVnetIngressEgressGwReplaceType_NoForwardProxy{v}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActiveForwardProxyPolicies", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema_network_firewall.ActiveForwardProxyPoliciesType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ForwardProxyChoice = &AzureVnetIngressEgressGwReplaceType_ActiveForwardProxyPolicies{v}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActiveNetworkPolicies", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema_network_firewall.ActiveNetworkPoliciesType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.NetworkPolicyChoice = &AzureVnetIngressEgressGwReplaceType_ActiveNetworkPolicies{v}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoInsideStaticRoutes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.InsideStaticRouteChoice = &AzureVnetIngressEgressGwReplaceType_NoInsideStaticRoutes{v}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InsideStaticRoutes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema_views1.SiteStaticRoutesListType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.InsideStaticRouteChoice = &AzureVnetIngressEgressGwReplaceType_InsideStaticRoutes{v}
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoOutsideStaticRoutes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.OutsideStaticRouteChoice = &AzureVnetIngressEgressGwReplaceType_NoOutsideStaticRoutes{v}
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutsideStaticRoutes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema_views1.SiteStaticRoutesListType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.OutsideStaticRouteChoice = &AzureVnetIngressEgressGwReplaceType_OutsideStaticRoutes{v}
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoGlobalNetwork", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.GlobalNetworkChoice = &AzureVnetIngressEgressGwReplaceType_NoGlobalNetwork{v}
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GlobalNetworkList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema_views1.GlobalNetworkConnectionListType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.GlobalNetworkChoice = &AzureVnetIngressEgressGwReplaceType_GlobalNetworkList{v}
			iNdEx = postIndex
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ForwardProxyAllowAll", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ForwardProxyChoice = &AzureVnetIngressEgressGwReplaceType_ForwardProxyAllowAll{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AzureVnetVoltstackClusterReplaceType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AzureVnetVoltstackClusterReplaceType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AzureVnetVoltstackClusterReplaceType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoNetworkPolicy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.NetworkPolicyChoice = &AzureVnetVoltstackClusterReplaceType_NoNetworkPolicy{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActiveNetworkPolicies", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema_network_firewall.ActiveNetworkPoliciesType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.NetworkPolicyChoice = &AzureVnetVoltstackClusterReplaceType_ActiveNetworkPolicies{v}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoForwardProxy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ForwardProxyChoice = &AzureVnetVoltstackClusterReplaceType_NoForwardProxy{v}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActiveForwardProxyPolicies", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema_network_firewall.ActiveForwardProxyPoliciesType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ForwardProxyChoice = &AzureVnetVoltstackClusterReplaceType_ActiveForwardProxyPolicies{v}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoOutsideStaticRoutes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.OutsideStaticRouteChoice = &AzureVnetVoltstackClusterReplaceType_NoOutsideStaticRoutes{v}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutsideStaticRoutes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema_views1.SiteStaticRoutesListType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.OutsideStaticRouteChoice = &AzureVnetVoltstackClusterReplaceType_OutsideStaticRoutes{v}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoGlobalNetwork", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.GlobalNetworkChoice = &AzureVnetVoltstackClusterReplaceType_NoGlobalNetwork{v}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GlobalNetworkList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema_views1.GlobalNetworkConnectionListType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.GlobalNetworkChoice = &AzureVnetVoltstackClusterReplaceType_GlobalNetworkList{v}
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ForwardProxyAllowAll", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ForwardProxyChoice = &AzureVnetVoltstackClusterReplaceType_ForwardProxyAllowAll{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GlobalSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GlobalSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GlobalSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResourceGroup", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ResourceGroup = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AzureRegion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AzureRegion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vnet", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Vnet == nil {
				m.Vnet = &ves_io_schema_views1.AzureVnetChoiceType{}
			}
			if err := m.Vnet.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IngressGw", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &AzureVnetIngressGwType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.SiteType = &GlobalSpecType_IngressGw{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IngressEgressGw", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &AzureVnetIngressEgressGwType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.SiteType = &GlobalSpecType_IngressEgressGw{v}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AzureCred", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema_views.ObjectRefType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Deployment = &GlobalSpecType_AzureCred{v}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Assisted", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Deployment = &GlobalSpecType_Assisted{v}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MachineType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MachineType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VolterraSoftwareVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VolterraSoftwareVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperatingSystemVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OperatingSystemVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SshKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SshKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodesPerAz", wireType)
			}
			m.NodesPerAz = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NodesPerAz |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DiskSize", wireType)
			}
			m.DiskSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DiskSize |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VoltstackCluster", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &AzureVnetVoltstackClusterType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.SiteType = &GlobalSpecType_VoltstackCluster{v}
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Coordinates", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Coordinates == nil {
				m.Coordinates = &ves_io_schema_site.Coordinates{}
			}
			if err := m.Coordinates.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 999:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TfParams", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TfParams == nil {
				m.TfParams = &ves_io_schema_views.ObjectRefType{}
			}
			if err := m.TfParams.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 1000:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ViewInternal", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ViewInternal == nil {
				m.ViewInternal = &ves_io_schema_views.ObjectRefType{}
			}
			if err := m.ViewInternal.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResourceGroup", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ResourceGroup = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AzureRegion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AzureRegion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vnet", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Vnet == nil {
				m.Vnet = &ves_io_schema_views1.AzureVnetChoiceType{}
			}
			if err := m.Vnet.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IngressGw", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &AzureVnetIngressGwType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.SiteType = &CreateSpecType_IngressGw{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IngressEgressGw", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &AzureVnetIngressEgressGwType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.SiteType = &CreateSpecType_IngressEgressGw{v}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AzureCred", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema_views.ObjectRefType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Deployment = &CreateSpecType_AzureCred{v}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Assisted", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Deployment = &CreateSpecType_Assisted{v}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MachineType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MachineType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VolterraSoftwareVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VolterraSoftwareVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperatingSystemVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OperatingSystemVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SshKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SshKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodesPerAz", wireType)
			}
			m.NodesPerAz = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NodesPerAz |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DiskSize", wireType)
			}
			m.DiskSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DiskSize |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VoltstackCluster", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &AzureVnetVoltstackClusterType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.SiteType = &CreateSpecType_VoltstackCluster{v}
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Coordinates", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Coordinates == nil {
				m.Coordinates = &ves_io_schema_site.Coordinates{}
			}
			if err := m.Coordinates.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplaceSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplaceSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplaceSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IngressGw", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &AzureVnetIngressGwReplaceType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.SiteType = &ReplaceSpecType_IngressGw{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IngressEgressGw", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &AzureVnetIngressEgressGwReplaceType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.SiteType = &ReplaceSpecType_IngressEgressGw{v}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VolterraSoftwareVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VolterraSoftwareVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperatingSystemVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OperatingSystemVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodesPerAz", wireType)
			}
			m.NodesPerAz = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NodesPerAz |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VoltstackCluster", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &AzureVnetVoltstackClusterReplaceType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.SiteType = &ReplaceSpecType_VoltstackCluster{v}
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Coordinates", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Coordinates == nil {
				m.Coordinates = &ves_io_schema_site.Coordinates{}
			}
			if err := m.Coordinates.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResourceGroup", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ResourceGroup = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AzureRegion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AzureRegion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vnet", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Vnet == nil {
				m.Vnet = &ves_io_schema_views1.AzureVnetChoiceType{}
			}
			if err := m.Vnet.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IngressGw", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &AzureVnetIngressGwType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.SiteType = &GetSpecType_IngressGw{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IngressEgressGw", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &AzureVnetIngressEgressGwType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.SiteType = &GetSpecType_IngressEgressGw{v}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AzureCred", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema_views.ObjectRefType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Deployment = &GetSpecType_AzureCred{v}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Assisted", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Deployment = &GetSpecType_Assisted{v}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MachineType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MachineType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VolterraSoftwareVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VolterraSoftwareVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperatingSystemVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OperatingSystemVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SshKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SshKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodesPerAz", wireType)
			}
			m.NodesPerAz = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NodesPerAz |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DiskSize", wireType)
			}
			m.DiskSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DiskSize |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VoltstackCluster", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &AzureVnetVoltstackClusterType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.SiteType = &GetSpecType_VoltstackCluster{v}
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Coordinates", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Coordinates == nil {
				m.Coordinates = &ves_io_schema_site.Coordinates{}
			}
			if err := m.Coordinates.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTypes(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthTypes
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipTypes(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthTypes = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTypes   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("ves.io/schema/views/azure_vnet_site/types.proto", fileDescriptorTypes)
}
func init() {
	golang_proto.RegisterFile("ves.io/schema/views/azure_vnet_site/types.proto", fileDescriptorTypes)
}

var fileDescriptorTypes = []byte{
	// 2515 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x5a, 0xcd, 0x6f, 0xdb, 0xc8,
	0xf9, 0xf6, 0x58, 0xb4, 0x25, 0x8d, 0x25, 0x59, 0xa6, 0xed, 0x98, 0x71, 0x12, 0x45, 0x71, 0xf6,
	0xf7, 0xab, 0xd7, 0xa0, 0xa5, 0x48, 0x76, 0x12, 0xdb, 0x5d, 0x18, 0x36, 0xdd, 0xc4, 0x1f, 0xed,
	0x26, 0x2e, 0xbd, 0x9b, 0x62, 0x8b, 0xb4, 0x04, 0x4d, 0x8d, 0x64, 0xae, 0x69, 0x8e, 0x4a, 0x8e,
	0xa4, 0xb5, 0xdb, 0x2d, 0x02, 0xf7, 0x58, 0x14, 0x58, 0xf4, 0x56, 0xf4, 0x1f, 0x28, 0xf6, 0x54,
	0xa0, 0x40, 0x51, 0x94, 0x28, 0x60, 0xf8, 0xb4, 0xc8, 0xc9, 0x28, 0x50, 0x60, 0x91, 0x53, 0xa3,
	0x3d, 0x6c, 0x7a, 0x0b, 0x8a, 0x1e, 0x02, 0x9f, 0x0a, 0x0e, 0x29, 0x45, 0x94, 0x29, 0xf9, 0x6b,
	0x93, 0xb6, 0x80, 0x2f, 0x89, 0xc9, 0x79, 0xde, 0xf7, 0x9d, 0x8f, 0x77, 0x9e, 0xe7, 0x9d, 0xa1,
	0x60, 0xba, 0x8c, 0xcc, 0x94, 0x8a, 0xd3, 0xa6, 0xb2, 0x81, 0xb6, 0xe4, 0x74, 0x59, 0x45, 0x15,
	0x33, 0x2d, 0xef, 0x94, 0x0c, 0x24, 0x95, 0x75, 0x44, 0x24, 0x53, 0x25, 0x28, 0x4d, 0xb6, 0x8b,
	0xc8, 0x4c, 0x15, 0x0d, 0x4c, 0x30, 0x7b, 0xd3, 0x31, 0x48, 0x39, 0x06, 0x29, 0x6a, 0x90, 0x6a,
	0x32, 0x18, 0x1e, 0x2f, 0xa8, 0x64, 0xa3, 0xb4, 0x9e, 0x52, 0xf0, 0x56, 0xba, 0x80, 0x0b, 0x38,
	0x4d, 0x6d, 0xd7, 0x4b, 0x79, 0xfa, 0x44, 0x1f, 0xe8, 0x5f, 0x8e, 0xcf, 0xe1, 0x31, 0x6f, 0x27,
	0x74, 0x44, 0x2a, 0xd8, 0xd8, 0x94, 0xf2, 0xaa, 0x81, 0x2a, 0xb2, 0xa6, 0x35, 0xc6, 0x1f, 0xbe,
	0xe2, 0xc5, 0xe2, 0x22, 0x51, 0xb1, 0x5e, 0x6b, 0x4c, 0x78, 0x1b, 0x9b, 0x3b, 0x3f, 0x7c, 0xd9,
	0xdb, 0xde, 0xd8, 0x74, 0xb5, 0x69, 0x22, 0x64, 0x4d, 0xcd, 0xc9, 0x04, 0xb9, 0xad, 0xc9, 0xa3,
	0xd3, 0x24, 0x79, 0x43, 0xbf, 0xe3, 0x37, 0x91, 0x76, 0x07, 0xa4, 0xc6, 0x28, 0xd7, 0xfd, 0x50,
	0x0d, 0x80, 0x91, 0xaf, 0x01, 0xbc, 0x34, 0x6f, 0xcf, 0xe6, 0x23, 0x1d, 0x91, 0x65, 0xbd, 0x60,
	0x20, 0xd3, 0x5c, 0xac, 0x7c, 0xb0, 0x5d, 0x44, 0xec, 0x63, 0x18, 0x92, 0x77, 0x24, 0x1d, 0xe7,
	0x90, 0xc9, 0x81, 0x64, 0x60, 0xb4, 0x27, 0x9b, 0x4d, 0xf9, 0x2d, 0x46, 0xdd, 0xfc, 0xa1, 0x8e,
	0x96, 0x75, 0x82, 0x8c, 0xbc, 0xac, 0xa0, 0x07, 0x38, 0x87, 0x6c, 0x2f, 0x42, 0xf4, 0xcf, 0xff,
	0xd8, 0x0b, 0x84, 0x7e, 0x0d, 0xba, 0xc6, 0x02, 0x19, 0x7e, 0x42, 0x0c, 0xca, 0x3b, 0x76, 0x93,
	0xc9, 0x16, 0x20, 0xeb, 0xac, 0xa2, 0x82, 0x0c, 0xa2, 0xe6, 0x55, 0x94, 0x93, 0x36, 0x2a, 0x5c,
	0x67, 0x12, 0x8c, 0x86, 0x85, 0xe9, 0x67, 0x16, 0xe8, 0xa7, 0xad, 0xe3, 0xeb, 0xdb, 0x58, 0x1b,
	0x2f, 0x63, 0x8d, 0x6c, 0x21, 0x73, 0xe3, 0x95, 0x05, 0x3a, 0x6c, 0x77, 0x97, 0x8d, 0x21, 0x6e,
	0x4e, 0xf4, 0x43, 0x88, 0x71, 0xfa, 0x72, 0xa1, 0xe6, 0x73, 0xa9, 0x32, 0xd3, 0xfd, 0xcf, 0xd9,
	0x40, 0x96, 0xcf, 0x8c, 0xfc, 0x2d, 0x02, 0xaf, 0x36, 0x8f, 0xf4, 0xde, 0xb9, 0xc6, 0xfb, 0x41,
	0x05, 0x9f, 0x7c, 0xbc, 0x02, 0xec, 0xd3, 0xb1, 0x54, 0x4b, 0xb5, 0x22, 0xd6, 0x54, 0x65, 0x9b,
	0x0e, 0xb7, 0x27, 0x3b, 0xd0, 0x14, 0xe6, 0xde, 0x56, 0x91, 0x6c, 0x2f, 0x75, 0x88, 0xbd, 0x3a,
	0x7e, 0xe0, 0xe0, 0x57, 0x29, 0x9c, 0x9d, 0x83, 0x71, 0x1d, 0x4b, 0x79, 0x6c, 0x54, 0x64, 0x23,
	0x27, 0x15, 0x0d, 0xfc, 0xc9, 0x36, 0xc7, 0xb4, 0x71, 0x01, 0xc4, 0x98, 0x8e, 0xef, 0x3b, 0xf0,
	0x55, 0x1b, 0xcd, 0xfe, 0xd4, 0x77, 0xd6, 0x43, 0x74, 0xd6, 0xdf, 0x7f, 0x66, 0x81, 0x6b, 0x0d,
	0x73, 0xba, 0x55, 0xd2, 0x88, 0x3a, 0xae, 0xab, 0xca, 0x91, 0xf9, 0xbf, 0x69, 0xdc, 0xe0, 0xe6,
	0xc4, 0xf6, 0xd8, 0xa3, 0x2b, 0xc1, 0xfe, 0x02, 0xc0, 0x6b, 0xb2, 0x42, 0xd4, 0x32, 0xf2, 0x8e,
	0xc1, 0x99, 0x0d, 0x15, 0x99, 0x5c, 0x98, 0x0e, 0x66, 0xb6, 0x69, 0x30, 0xcd, 0xfb, 0x33, 0x35,
	0x4f, 0x9d, 0x34, 0x0e, 0x6c, 0xd5, 0xf5, 0x60, 0x2f, 0xc1, 0x12, 0x10, 0x87, 0xe5, 0x96, 0x08,
	0xd6, 0x84, 0x43, 0x6e, 0x27, 0x3c, 0x8b, 0x61, 0x87, 0x87, 0x34, 0xfc, 0xf4, 0xc9, 0xc2, 0x37,
	0x2e, 0x4d, 0x2d, 0x72, 0x87, 0x38, 0x28, 0xfb, 0x35, 0xb2, 0x6b, 0x70, 0x48, 0xc7, 0x92, 0xaa,
	0x9b, 0x6a, 0x0e, 0x49, 0x26, 0x91, 0x89, 0xaa, 0x48, 0x06, 0x2e, 0x11, 0x64, 0x72, 0x91, 0xd6,
	0x0b, 0x28, 0x30, 0x7b, 0x16, 0x00, 0x4b, 0x9d, 0xe2, 0x80, 0x8e, 0x97, 0xa9, 0xed, 0x1a, 0x35,
	0x15, 0xa9, 0x25, 0x5b, 0x80, 0x03, 0xbe, 0x1e, 0xa3, 0xd4, 0xe3, 0xb8, 0x6f, 0xf2, 0xae, 0xa9,
	0xc4, 0xe3, 0xe4, 0x7b, 0xaa, 0x49, 0x68, 0xde, 0xd6, 0x42, 0xb1, 0xea, 0xd1, 0x40, 0x1f, 0x42,
	0x4e, 0xc7, 0x12, 0x2e, 0x11, 0x9f, 0x60, 0xbd, 0xc7, 0x76, 0x3f, 0x20, 0x0e, 0xea, 0xf8, 0xa1,
	0x63, 0xec, 0x71, 0xab, 0xc2, 0x41, 0x7f, 0x9f, 0xf1, 0xb3, 0x0f, 0x20, 0x20, 0xf6, 0x63, 0x9f,
	0x50, 0xce, 0xee, 0x2b, 0x68, 0x78, 0x5d, 0xd6, 0x6a, 0xeb, 0xce, 0xb1, 0x6d, 0xb6, 0x0e, 0x63,
	0xef, 0xbe, 0x45, 0x8a, 0x77, 0xd7, 0x92, 0xcd, 0xc3, 0x7e, 0xaf, 0x03, 0x49, 0x53, 0x4d, 0xc2,
	0xf5, 0x53, 0x2f, 0x93, 0xbe, 0x9d, 0xf5, 0x38, 0x58, 0xc0, 0xba, 0x8e, 0x14, 0x9b, 0xc3, 0x6b,
	0x7d, 0x5e, 0x62, 0xc4, 0xbe, 0x42, 0x23, 0xc4, 0x6e, 0x60, 0xdf, 0x87, 0x43, 0xde, 0xed, 0x21,
	0x6b, 0x1a, 0xae, 0xd8, 0xff, 0x72, 0x03, 0x6d, 0x37, 0xfb, 0x40, 0xbe, 0x21, 0xdf, 0xe7, 0x6d,
	0xa3, 0x79, 0x4d, 0x9b, 0x79, 0xb0, 0x6f, 0x81, 0x15, 0x18, 0x81, 0x5d, 0x0e, 0x0f, 0x05, 0xa6,
	0xf8, 0x0c, 0xbc, 0x0a, 0x07, 0xed, 0x79, 0x4c, 0xba, 0x61, 0x93, 0xf7, 0xdd, 0xd4, 0x66, 0x03,
	0x77, 0xf8, 0xbb, 0xf0, 0x2a, 0x8c, 0xcf, 0xe7, 0xca, 0xb2, 0xae, 0xa0, 0x5c, 0xf2, 0xa1, 0x23,
	0x3a, 0x6c, 0x28, 0x73, 0x97, 0xcf, 0x64, 0xf8, 0xcc, 0xa4, 0xf0, 0x2e, 0x1c, 0xf4, 0xb2, 0x98,
	0xa4, 0x6c, 0x60, 0x55, 0x41, 0x6c, 0x7c, 0xcf, 0x02, 0x9d, 0x07, 0x16, 0xe8, 0xae, 0x5a, 0x80,
	0xc9, 0xf2, 0x99, 0x5b, 0xc2, 0x18, 0x1c, 0xf0, 0x8e, 0xc4, 0x45, 0xb2, 0x7b, 0x16, 0x60, 0x0e,
	0x2c, 0x10, 0xac, 0x5a, 0xa0, 0x7b, 0x92, 0xcf, 0xde, 0xe2, 0xa7, 0x85, 0x09, 0x38, 0xec, 0x93,
	0xcc, 0x35, 0x8b, 0xc1, 0x3d, 0x0b, 0x44, 0xbe, 0xb0, 0x00, 0x38, 0xb0, 0x40, 0x4f, 0xd5, 0x02,
	0x5d, 0x99, 0x2c, 0x9f, 0x99, 0x10, 0x26, 0xe1, 0x15, 0xbf, 0x0c, 0x6a, 0xb4, 0xea, 0x75, 0xad,
	0x62, 0xd4, 0xea, 0x36, 0x9f, 0xb9, 0x23, 0xa4, 0xe0, 0x60, 0xd3, 0x42, 0x36, 0xe0, 0x59, 0x17,
	0xdf, 0x47, 0xf1, 0x53, 0x7c, 0x66, 0x7a, 0x85, 0x09, 0x75, 0xc7, 0x83, 0x2b, 0x4c, 0x28, 0x18,
	0x0f, 0xad, 0x30, 0xa1, 0x9e, 0x78, 0x64, 0x85, 0x09, 0xc5, 0xe2, 0xbd, 0x2b, 0x4c, 0xa8, 0x2f,
	0xce, 0x8e, 0xfc, 0x15, 0xc2, 0x6b, 0x75, 0x49, 0x78, 0x84, 0x35, 0x62, 0x12, 0x59, 0xd9, 0x5c,
	0xd0, 0x4a, 0x26, 0x41, 0x06, 0x15, 0x96, 0x92, 0x2f, 0xe9, 0x02, 0x4a, 0xba, 0x8b, 0xcf, 0x2c,
	0x30, 0xdc, 0x24, 0x64, 0xd4, 0xc1, 0xb8, 0x82, 0xb7, 0xd6, 0x71, 0x8d, 0x71, 0x93, 0x46, 0x82,
	0x9b, 0x13, 0xdb, 0x00, 0x7d, 0xe8, 0xb6, 0x51, 0xcf, 0x3a, 0xbf, 0x71, 0xfd, 0xf6, 0xd5, 0x33,
	0xe6, 0x74, 0x7a, 0xd6, 0x86, 0x8a, 0xbb, 0xde, 0x18, 0x15, 0xfb, 0x89, 0x68, 0xf0, 0x54, 0x22,
	0x7a, 0xbc, 0x8e, 0x85, 0xde, 0x82, 0x8e, 0xb5, 0x23, 0x65, 0x78, 0x02, 0x4d, 0x39, 0x2d, 0x29,
	0xf7, 0x9c, 0x47, 0x55, 0x4e, 0x4e, 0xca, 0xd1, 0x36, 0x4b, 0x11, 0x38, 0x31, 0x29, 0xc7, 0xce,
	0x41, 0xca, 0x81, 0x53, 0x92, 0x72, 0xef, 0x19, 0x48, 0x79, 0x65, 0xdf, 0x02, 0xf7, 0x1b, 0x48,
	0x39, 0xc3, 0x67, 0xdb, 0x90, 0xf2, 0x04, 0x7f, 0x07, 0x72, 0x3e, 0xa4, 0xcc, 0x4c, 0xf3, 0x99,
	0xac, 0x30, 0xda, 0x8a, 0x90, 0x7b, 0x5d, 0x9a, 0x0d, 0x54, 0x2d, 0x10, 0x98, 0xe4, 0x6f, 0xb7,
	0xe5, 0xe3, 0xa0, 0xcb, 0xdc, 0xdd, 0x77, 0xf9, 0xcc, 0x6d, 0x7e, 0xea, 0x24, 0xd4, 0x0a, 0x5d,
	0xaa, 0x0c, 0x53, 0xaa, 0xbc, 0xc5, 0x67, 0x32, 0xed, 0xa9, 0x35, 0xea, 0xe2, 0x23, 0x14, 0x3f,
	0xc1, 0x67, 0x26, 0x57, 0x98, 0x50, 0x20, 0xce, 0xd4, 0x09, 0x36, 0x1c, 0x87, 0x2b, 0x4c, 0x28,
	0x12, 0x8f, 0x8e, 0xcc, 0x34, 0x70, 0x6a, 0xfd, 0x54, 0x22, 0xa2, 0xa2, 0x26, 0x2b, 0x94, 0x96,
	0x66, 0x2e, 0x3f, 0x9d, 0x6d, 0x71, 0x6e, 0x19, 0xf9, 0x4d, 0x04, 0xde, 0x6c, 0x55, 0xe8, 0x37,
	0xb8, 0xf8, 0x2f, 0xa9, 0xc8, 0x2f, 0x8a, 0xe2, 0x8b, 0xa2, 0xf8, 0xa2, 0x28, 0x7e, 0xdb, 0x45,
	0xb1, 0xf4, 0x74, 0xb6, 0xed, 0x65, 0xc0, 0xbe, 0x05, 0xde, 0x3b, 0x57, 0x95, 0x2c, 0xb4, 0x22,
	0xe5, 0x77, 0x9b, 0xab, 0xe4, 0xdd, 0x43, 0xe0, 0x0f, 0x15, 0x84, 0x16, 0x74, 0x3d, 0x76, 0xb4,
	0x7c, 0xde, 0x3d, 0x04, 0xbe, 0x58, 0xe1, 0xfb, 0x6d, 0xcb, 0xea, 0x09, 0xdf, 0xb2, 0x7a, 0xf7,
	0x10, 0xb4, 0x31, 0x12, 0xd6, 0xda, 0x2b, 0xc3, 0xa4, 0x6f, 0xd1, 0xbd, 0x7b, 0x08, 0xda, 0x59,
	0x09, 0x8b, 0xad, 0x84, 0x23, 0xe5, 0x5b, 0x93, 0xdb, 0x93, 0xe6, 0x8b, 0x3f, 0xa6, 0x58, 0xff,
	0x25, 0x84, 0xef, 0xb4, 0x2c, 0xd6, 0x8f, 0x15, 0x87, 0x8b, 0xf2, 0xf6, 0xa2, 0xbc, 0xbd, 0x28,
	0x6f, 0x4f, 0x40, 0xaf, 0x8f, 0x9f, 0xce, 0xb6, 0x3f, 0x13, 0xef, 0x5b, 0x60, 0xea, 0xcc, 0x05,
	0xef, 0x7c, 0x2b, 0x6e, 0x1d, 0x6d, 0x2a, 0x78, 0xcf, 0x46, 0xad, 0x4d, 0x95, 0x70, 0x4b, 0x6a,
	0x3d, 0x01, 0x0f, 0x1e, 0xad, 0x90, 0xcf, 0xc5, 0x83, 0x47, 0x0b, 0xe8, 0x76, 0x3c, 0x08, 0xe2,
	0x9d, 0x2b, 0x4c, 0xa8, 0x33, 0x1e, 0x68, 0x59, 0x65, 0xff, 0x31, 0x0a, 0x63, 0x4e, 0xba, 0xac,
	0x15, 0x91, 0x42, 0x79, 0xef, 0x0e, 0x8c, 0x19, 0xc8, 0xc4, 0x25, 0x43, 0x41, 0x52, 0xc1, 0xc0,
	0xa5, 0xa2, 0x7b, 0x4f, 0xd1, 0x5b, 0xbb, 0x89, 0xe8, 0x36, 0x98, 0x38, 0xe0, 0xe6, 0xc4, 0x68,
	0x0d, 0xb6, 0x68, 0xa3, 0xd8, 0xe7, 0x00, 0x46, 0x9c, 0x4b, 0x0e, 0x03, 0x15, 0x54, 0xac, 0xbb,
	0x37, 0xf9, 0x7f, 0x01, 0x35, 0xbb, 0x3f, 0x00, 0xe3, 0xf7, 0x40, 0x8c, 0x9a, 0xb8, 0x44, 0x36,
	0x90, 0x6c, 0x12, 0xd9, 0x54, 0x65, 0x31, 0xac, 0x20, 0x9d, 0x18, 0xb2, 0x56, 0x32, 0xc5, 0x6e,
	0xfb, 0x65, 0xc9, 0x14, 0x83, 0xce, 0xff, 0x59, 0x31, 0x46, 0xa1, 0xaf, 0x01, 0x3d, 0x3a, 0x36,
	0xc8, 0x06, 0x2a, 0x19, 0xb8, 0x88, 0x44, 0x58, 0x41, 0x26, 0x71, 0xff, 0x0e, 0x7f, 0x2c, 0x17,
	0x65, 0xdd, 0x36, 0x13, 0xa3, 0x72, 0xc9, 0xb4, 0xe1, 0xaa, 0xec, 0x3c, 0x2a, 0xb2, 0x2e, 0xe7,
	0x64, 0xd7, 0x87, 0x18, 0x2c, 0x6d, 0x52, 0x9f, 0x62, 0xd0, 0xb6, 0xb6, 0x63, 0x44, 0xf3, 0x86,
	0x9d, 0x60, 0x35, 0x40, 0x9c, 0x36, 0xcb, 0x79, 0x43, 0x55, 0x64, 0x1a, 0x4d, 0xec, 0xa1, 0x63,
	0x12, 0xe9, 0x90, 0x58, 0x01, 0x32, 0x65, 0x1d, 0x11, 0x2e, 0x40, 0x77, 0xc4, 0x68, 0xfb, 0xcb,
	0x94, 0x05, 0xba, 0x0c, 0x0e, 0x4b, 0xbc, 0xb4, 0x00, 0x10, 0xa9, 0x2d, 0xbb, 0x0e, 0xa1, 0xea,
	0x94, 0x1b, 0x52, 0xa1, 0xe2, 0xca, 0xc0, 0xb7, 0x53, 0x27, 0xf8, 0xc6, 0x95, 0xf2, 0x3f, 0xed,
	0x08, 0x76, 0xbe, 0x83, 0xa5, 0x0e, 0x31, 0xac, 0xd6, 0x5e, 0xb3, 0x25, 0xd8, 0x57, 0x8b, 0x81,
	0xea, 0xa1, 0xba, 0x69, 0xa8, 0xf9, 0x33, 0x85, 0xba, 0xe7, 0x17, 0xb0, 0x57, 0xf5, 0x36, 0xb2,
	0x1f, 0x41, 0xe8, 0x5e, 0x73, 0x19, 0x28, 0xe7, 0x6a, 0xc4, 0x88, 0x6f, 0xbc, 0x87, 0xeb, 0x1f,
	0x23, 0x85, 0x88, 0x28, 0x4f, 0x1d, 0x0e, 0x7c, 0xfe, 0x69, 0x9f, 0xa2, 0xe1, 0x52, 0x8e, 0x1a,
	0x22, 0x9d, 0xa8, 0xb2, 0x66, 0x2e, 0x01, 0x31, 0xec, 0xdc, 0x68, 0x19, 0x28, 0xc7, 0x66, 0x61,
	0x48, 0x36, 0x4d, 0xd5, 0x24, 0x28, 0xe7, 0x1e, 0x87, 0x5a, 0xf1, 0x51, 0x1d, 0xc7, 0xe6, 0x60,
	0x64, 0x4b, 0x56, 0x36, 0x54, 0xdd, 0xf9, 0x22, 0x46, 0x45, 0x23, 0x2c, 0xcc, 0x57, 0x2d, 0x70,
	0x0b, 0xc6, 0xd6, 0x88, 0xac, 0xe7, 0xec, 0x1d, 0xfd, 0x9d, 0x09, 0xa9, 0x9c, 0x6d, 0x7c, 0x9e,
	0x6c, 0x7a, 0xbe, 0x2d, 0x95, 0xb3, 0xb5, 0x1c, 0x66, 0x8c, 0x4e, 0x6e, 0x4e, 0xec, 0x71, 0xdd,
	0xd2, 0xfd, 0xb2, 0x0c, 0x2f, 0x97, 0xb1, 0x46, 0x90, 0x61, 0xc8, 0x92, 0x89, 0xf3, 0xa4, 0x22,
	0xdb, 0x33, 0x89, 0x0c, 0xd3, 0xde, 0x03, 0x11, 0x1a, 0x32, 0xea, 0x35, 0x1f, 0xaa, 0xe1, 0xd7,
	0x5c, 0xf8, 0x23, 0x07, 0xcd, 0x2e, 0x42, 0x0e, 0x17, 0x91, 0x21, 0x13, 0x55, 0x2f, 0x48, 0xe6,
	0xb6, 0x49, 0xd0, 0x56, 0xdd, 0x53, 0xd4, 0xcf, 0xd3, 0xa5, 0x3a, 0x7c, 0x8d, 0xa2, 0x6b, 0x8e,
	0xbe, 0x05, 0x83, 0xa6, 0xb9, 0x21, 0x6d, 0xa2, 0x6d, 0x2a, 0x14, 0x61, 0x21, 0xf6, 0xca, 0x02,
	0x01, 0xdb, 0xae, 0xcb, 0x08, 0x70, 0x4f, 0xe6, 0xc4, 0x6e, 0xd3, 0xdc, 0xf8, 0x2e, 0xda, 0x66,
	0xd3, 0x30, 0x42, 0xaf, 0x07, 0xa5, 0x22, 0x32, 0x24, 0x79, 0x87, 0x52, 0x7d, 0x54, 0x88, 0xda,
	0xa2, 0x46, 0xa3, 0x8c, 0x75, 0x72, 0x83, 0x22, 0xa4, 0x90, 0x55, 0x64, 0xcc, 0xef, 0xb0, 0xb7,
	0x60, 0x38, 0xa7, 0x9a, 0x9b, 0x92, 0xa9, 0xee, 0x20, 0x7a, 0x20, 0x89, 0x0a, 0xfd, 0x36, 0xba,
	0x4e, 0x0e, 0x63, 0x0c, 0xf7, 0xe4, 0x5f, 0x01, 0x31, 0x64, 0xa3, 0xd6, 0xd4, 0x1d, 0xc4, 0x56,
	0x60, 0x5f, 0xfd, 0xa6, 0x52, 0x52, 0x1c, 0x01, 0xe0, 0xfa, 0xe8, 0x12, 0x0a, 0xa7, 0xcb, 0x45,
	0x3f, 0x19, 0xa9, 0x27, 0x63, 0xbc, 0xdc, 0xd4, 0xca, 0x8e, 0xc2, 0xa0, 0x9c, 0xcb, 0xd9, 0xa9,
	0x49, 0x8f, 0x34, 0x61, 0x21, 0x56, 0x1b, 0x16, 0x9d, 0x84, 0x4e, 0xb1, 0xd6, 0xcc, 0x2e, 0xc2,
	0x1e, 0x05, 0x63, 0x23, 0xa7, 0xea, 0xb2, 0x5d, 0x08, 0x38, 0x47, 0x97, 0xeb, 0x4d, 0x9d, 0xa3,
	0x7d, 0x59, 0x78, 0x0d, 0x73, 0xa4, 0x5f, 0x6c, 0xb4, 0x64, 0x7f, 0x04, 0xc3, 0x24, 0x2f, 0x15,
	0x65, 0x43, 0xde, 0x32, 0xb9, 0xaf, 0x83, 0x27, 0xde, 0x00, 0x57, 0x3e, 0xff, 0x74, 0x80, 0x66,
	0x44, 0x1e, 0x1b, 0x5b, 0x8e, 0x3d, 0x22, 0xc8, 0x30, 0x5f, 0xd8, 0x11, 0x42, 0x24, 0xbf, 0x4a,
	0x3d, 0xb2, 0x3f, 0x86, 0x51, 0xfa, 0x1d, 0x58, 0xd5, 0x09, 0x32, 0x74, 0x59, 0xe3, 0x5e, 0x04,
	0x4f, 0xb3, 0xc7, 0xbc, 0xc6, 0xd4, 0x77, 0xc4, 0x7e, 0xb5, 0xec, 0xbe, 0x99, 0xf9, 0xc1, 0xbe,
	0x05, 0xd6, 0x60, 0x12, 0xf6, 0x53, 0x51, 0xb6, 0xcd, 0x92, 0x6b, 0x48, 0x73, 0xaa, 0x07, 0x36,
	0x9c, 0xe1, 0xb3, 0xfc, 0x04, 0x3f, 0xc9, 0xdf, 0x85, 0x69, 0x38, 0xe0, 0xc8, 0x36, 0xce, 0xa1,
	0xe4, 0x6a, 0xbd, 0xb7, 0xec, 0x90, 0x2d, 0x70, 0x76, 0xad, 0xcf, 0xd3, 0x53, 0x04, 0x9f, 0x99,
	0xe4, 0x69, 0xad, 0x2e, 0x5c, 0x87, 0xe1, 0xfa, 0x87, 0x69, 0x7a, 0xd7, 0xd4, 0x75, 0x60, 0x01,
	0xc6, 0x56, 0xd8, 0xdb, 0xfc, 0x1d, 0x3e, 0x73, 0x57, 0xb8, 0x06, 0x61, 0x0e, 0x15, 0x35, 0xbc,
	0xbd, 0x85, 0x74, 0x42, 0xaf, 0xad, 0x42, 0xee, 0xf1, 0x26, 0x30, 0xc5, 0x4f, 0xaf, 0x30, 0x21,
	0x26, 0xde, 0xd5, 0x58, 0xd2, 0x8f, 0x7c, 0x16, 0x82, 0xb1, 0x05, 0x03, 0xc9, 0x04, 0xd5, 0x85,
	0xeb, 0xff, 0xfc, 0x85, 0xab, 0x59, 0xa7, 0x6e, 0xf8, 0xc9, 0x94, 0x97, 0xe6, 0xdf, 0x3b, 0x1b,
	0xcd, 0xbb, 0x04, 0xff, 0xf8, 0x1b, 0x26, 0x78, 0x2f, 0xb5, 0xe3, 0x37, 0x49, 0xed, 0xff, 0x03,
	0xa4, 0x7e, 0xc3, 0x8f, 0xd4, 0xbd, 0x8c, 0x3c, 0x73, 0x2c, 0x23, 0xb7, 0xa6, 0xe0, 0xa9, 0xe3,
	0x28, 0xb8, 0x25, 0xe7, 0x0e, 0x35, 0x71, 0x6e, 0x9d, 0x63, 0x93, 0x7e, 0x1c, 0xeb, 0x21, 0xd5,
	0x2b, 0x47, 0x48, 0xb5, 0x81, 0x3f, 0x7f, 0xf2, 0x46, 0xf9, 0xd3, 0x97, 0x39, 0xb9, 0x26, 0xe6,
	0x7c, 0xcd, 0x94, 0xf3, 0x67, 0x61, 0x4a, 0x0f, 0x47, 0xce, 0xf4, 0x3d, 0x9d, 0x6d, 0x2a, 0x39,
	0x85, 0xe1, 0x46, 0x7a, 0x88, 0xee, 0x1e, 0x82, 0xd7, 0x8f, 0xc2, 0x55, 0x0f, 0x33, 0xc4, 0x76,
	0x0f, 0x41, 0xc3, 0x73, 0x23, 0x31, 0x8c, 0xbc, 0xe8, 0x82, 0xbd, 0xee, 0x01, 0xbe, 0xce, 0x09,
	0xaa, 0xcf, 0x5e, 0x14, 0xce, 0xb8, 0x17, 0x1b, 0x2e, 0x07, 0xfc, 0x6a, 0xae, 0x9f, 0xb5, 0xde,
	0x98, 0x4b, 0xe7, 0xda, 0x98, 0x7e, 0x71, 0x8f, 0xec, 0xd2, 0xff, 0x4c, 0xce, 0x1f, 0x9f, 0xda,
	0x3f, 0x6f, 0x9d, 0xbd, 0xcb, 0xe7, 0xcb, 0x5e, 0xbf, 0x69, 0x79, 0xcb, 0xa9, 0xfc, 0xe1, 0x91,
	0x54, 0xde, 0xb7, 0xc0, 0x1c, 0xbc, 0x04, 0xfb, 0xdc, 0x03, 0xad, 0xaa, 0x17, 0x92, 0x0b, 0x58,
	0xcf, 0xab, 0x05, 0x16, 0x4c, 0xc2, 0xff, 0x6f, 0x21, 0x9b, 0x31, 0x5b, 0x33, 0x1d, 0xc1, 0xa4,
	0x6a, 0xd9, 0x66, 0x3b, 0x38, 0x09, 0x3f, 0xf2, 0xab, 0x10, 0xec, 0x59, 0x44, 0xe4, 0x42, 0xfa,
	0x2e, 0xa4, 0xef, 0x42, 0xfa, 0x2e, 0xa4, 0x4f, 0xf8, 0x2d, 0x38, 0x78, 0x9e, 0xe8, 0xf8, 0xf2,
	0x79, 0xa2, 0xe3, 0xe5, 0xf3, 0x04, 0x78, 0xf5, 0x3c, 0x01, 0x9e, 0x54, 0x13, 0xe0, 0x77, 0xd5,
	0x04, 0xf8, 0x53, 0x35, 0x01, 0xf6, 0xaa, 0x09, 0xf0, 0x45, 0x35, 0x01, 0x0e, 0xaa, 0x09, 0xf0,
	0x65, 0x35, 0x01, 0xfe, 0x5e, 0x4d, 0x80, 0x17, 0xd5, 0x44, 0xc7, 0xcb, 0x6a, 0x02, 0x7c, 0xf6,
	0x55, 0xa2, 0x63, 0xef, 0xab, 0x04, 0xf8, 0xe1, 0x47, 0x05, 0x5c, 0xdc, 0x2c, 0xa4, 0x6a, 0xc9,
	0x91, 0x2a, 0x99, 0xe9, 0xfa, 0x89, 0x64, 0xbc, 0x68, 0xe0, 0xb2, 0x9a, 0x43, 0xc6, 0x78, 0xad,
	0x39, 0x5d, 0x5c, 0x2f, 0xe0, 0x34, 0xfa, 0x84, 0xd4, 0x7e, 0xf7, 0xda, 0xe6, 0xc7, 0xbc, 0xeb,
	0xdd, 0xf4, 0x87, 0xa6, 0x13, 0xff, 0x0e, 0x00, 0x00, 0xff, 0xff, 0xe9, 0xb2, 0xdd, 0xa5, 0xfa,
	0x2b, 0x00, 0x00,
}
