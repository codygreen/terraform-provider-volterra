// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ves.io/schema/views/azure_vnet_site/types.proto

package azure_vnet_site

import proto "github.com/gogo/protobuf/proto"
import golang_proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"
import ves_io_schema_network_firewall "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/network_firewall"
import _ "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
import ves_io_schema_site "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/site"
import ves_io_schema4 "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
import _ "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
import _ "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
import ves_io_schema_views1 "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/views"
import ves_io_schema_views "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/views"

import strings "strings"
import reflect "reflect"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Azure Ingress Gateway on Recommended Region
//
// x-displayName: "Azure Ingress Gateway on Recommended Region"
// Single interface Azure ingress site on on Recommended Region
type AzureVnetIngressGwType struct {
	// Nodes
	//
	// x-displayName: "Ingress Gateway (One Interface) Nodes in AZ"
	// Only Single AZ or Three AZ(s) nodes are supported currently.
	AzNodes []*ves_io_schema_views1.AzureVnetOneInterfaceNodeType `protobuf:"bytes,1,rep,name=az_nodes,json=azNodes" json:"az_nodes,omitempty"`
	// Azure Certified Hardware
	//
	// x-displayName: "Azure Certified Hardware"
	// x-example: "azure-byol-voltmesh"
	// x-required
	// Name for Azure certified hardware.
	AzureCertifiedHw string `protobuf:"bytes,2,opt,name=azure_certified_hw,json=azureCertifiedHw,proto3" json:"azure_certified_hw,omitempty"`
}

func (m *AzureVnetIngressGwType) Reset()                    { *m = AzureVnetIngressGwType{} }
func (*AzureVnetIngressGwType) ProtoMessage()               {}
func (*AzureVnetIngressGwType) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{0} }

func (m *AzureVnetIngressGwType) GetAzNodes() []*ves_io_schema_views1.AzureVnetOneInterfaceNodeType {
	if m != nil {
		return m.AzNodes
	}
	return nil
}

func (m *AzureVnetIngressGwType) GetAzureCertifiedHw() string {
	if m != nil {
		return m.AzureCertifiedHw
	}
	return ""
}

// Azure Ingress Gateway on Alternate Region
//
// x-displayName: "Azure Ingress Gateway on Alternate Region"
// Single interface Azure ingress site
type AzureVnetIngressGwARType struct {
	// Node Information
	//
	// x-displayName: "Ingress Gateway (One Interface) Node information"
	// Ingress Gateway (One Interface) Node information
	Node *ves_io_schema_views1.AzureVnetOneInterfaceNodeARType `protobuf:"bytes,1,opt,name=node" json:"node,omitempty"`
	// Azure Certified Hardware
	//
	// x-displayName: "Azure Certified Hardware"
	// x-example: "azure-byol-voltmesh"
	// x-required
	// Name for Azure certified hardware.
	AzureCertifiedHw string `protobuf:"bytes,2,opt,name=azure_certified_hw,json=azureCertifiedHw,proto3" json:"azure_certified_hw,omitempty"`
}

func (m *AzureVnetIngressGwARType) Reset()                    { *m = AzureVnetIngressGwARType{} }
func (*AzureVnetIngressGwARType) ProtoMessage()               {}
func (*AzureVnetIngressGwARType) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{1} }

func (m *AzureVnetIngressGwARType) GetNode() *ves_io_schema_views1.AzureVnetOneInterfaceNodeARType {
	if m != nil {
		return m.Node
	}
	return nil
}

func (m *AzureVnetIngressGwARType) GetAzureCertifiedHw() string {
	if m != nil {
		return m.AzureCertifiedHw
	}
	return ""
}

// Azure Ingress Egress Gateway on Recommended Region
//
// x-displayName: "Azure Ingress/Egress Gateway on Recommended Region"
// Two interface Azure ingress/egress site
type AzureVnetIngressEgressGwType struct {
	// Nodes
	//
	// x-displayName: "Ingress/Egress Gateway (two Interface) Nodes in AZ"
	// Only Single AZ or Three AZ(s) nodes are supported currently.
	AzNodes []*ves_io_schema_views1.AzureVnetTwoInterfaceNodeType `protobuf:"bytes,1,rep,name=az_nodes,json=azNodes" json:"az_nodes,omitempty"`
	// Manage Network Policy
	//
	// x-displayName: "Manage Network Policy"
	// x-required
	// Manage Network Policy via this view
	//
	// Types that are valid to be assigned to NetworkPolicyChoice:
	//	*AzureVnetIngressEgressGwType_NoNetworkPolicy
	//	*AzureVnetIngressEgressGwType_ActiveNetworkPolicies
	NetworkPolicyChoice isAzureVnetIngressEgressGwType_NetworkPolicyChoice `protobuf_oneof:"network_policy_choice"`
	// Manage Forward Proxy
	//
	// x-displayName: "Manage Forward Proxy"
	// x-required
	// Manage Forward Proxy for this site
	//
	// Types that are valid to be assigned to ForwardProxyChoice:
	//	*AzureVnetIngressEgressGwType_NoForwardProxy
	//	*AzureVnetIngressEgressGwType_ActiveForwardProxyPolicies
	//	*AzureVnetIngressEgressGwType_ForwardProxyAllowAll
	ForwardProxyChoice isAzureVnetIngressEgressGwType_ForwardProxyChoice `protobuf_oneof:"forward_proxy_choice"`
	// Azure Certified Hardware
	//
	// x-displayName: "Azure Certified Hardware"
	// x-example: "azure-byol-multi-nic-voltmesh"
	// x-required
	// Name for Azure certified hardware.
	AzureCertifiedHw string `protobuf:"bytes,8,opt,name=azure_certified_hw,json=azureCertifiedHw,proto3" json:"azure_certified_hw,omitempty"`
	// Manage Static Routes for Inside Network
	//
	// x-displayName: "Manage Static Routes for Inside Network"
	// x-required
	// Add static routes to inside network. Used to reach indirectly connected subnets.
	//
	// Types that are valid to be assigned to InsideStaticRouteChoice:
	//	*AzureVnetIngressEgressGwType_NoInsideStaticRoutes
	//	*AzureVnetIngressEgressGwType_InsideStaticRoutes
	InsideStaticRouteChoice isAzureVnetIngressEgressGwType_InsideStaticRouteChoice `protobuf_oneof:"inside_static_route_choice"`
	// Manage Static Routes for Outside Network
	//
	// x-displayName: "Manage Static Routes for Outside Network"
	// x-required
	// Add static routes to outside network. Used to reach indirectly connected subnets.
	//
	// Types that are valid to be assigned to OutsideStaticRouteChoice:
	//	*AzureVnetIngressEgressGwType_NoOutsideStaticRoutes
	//	*AzureVnetIngressEgressGwType_OutsideStaticRoutes
	OutsideStaticRouteChoice isAzureVnetIngressEgressGwType_OutsideStaticRouteChoice `protobuf_oneof:"outside_static_route_choice"`
	// Connect to Global Network
	//
	// x-displayName: "Select Global Networks to Connect"
	// x-required
	// Select global networks to connect to inside or outside network
	//
	// Types that are valid to be assigned to GlobalNetworkChoice:
	//	*AzureVnetIngressEgressGwType_NoGlobalNetwork
	//	*AzureVnetIngressEgressGwType_GlobalNetworkList
	GlobalNetworkChoice isAzureVnetIngressEgressGwType_GlobalNetworkChoice `protobuf_oneof:"global_network_choice"`
}

func (m *AzureVnetIngressEgressGwType) Reset()      { *m = AzureVnetIngressEgressGwType{} }
func (*AzureVnetIngressEgressGwType) ProtoMessage() {}
func (*AzureVnetIngressEgressGwType) Descriptor() ([]byte, []int) {
	return fileDescriptorTypes, []int{2}
}

type isAzureVnetIngressEgressGwType_NetworkPolicyChoice interface {
	isAzureVnetIngressEgressGwType_NetworkPolicyChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isAzureVnetIngressEgressGwType_ForwardProxyChoice interface {
	isAzureVnetIngressEgressGwType_ForwardProxyChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isAzureVnetIngressEgressGwType_InsideStaticRouteChoice interface {
	isAzureVnetIngressEgressGwType_InsideStaticRouteChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isAzureVnetIngressEgressGwType_OutsideStaticRouteChoice interface {
	isAzureVnetIngressEgressGwType_OutsideStaticRouteChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isAzureVnetIngressEgressGwType_GlobalNetworkChoice interface {
	isAzureVnetIngressEgressGwType_GlobalNetworkChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type AzureVnetIngressEgressGwType_NoNetworkPolicy struct {
	NoNetworkPolicy *ves_io_schema4.Empty `protobuf:"bytes,2,opt,name=no_network_policy,json=noNetworkPolicy,oneof"`
}
type AzureVnetIngressEgressGwType_ActiveNetworkPolicies struct {
	ActiveNetworkPolicies *ves_io_schema_network_firewall.ActiveNetworkPoliciesType `protobuf:"bytes,10,opt,name=active_network_policies,json=activeNetworkPolicies,oneof"`
}
type AzureVnetIngressEgressGwType_NoForwardProxy struct {
	NoForwardProxy *ves_io_schema4.Empty `protobuf:"bytes,4,opt,name=no_forward_proxy,json=noForwardProxy,oneof"`
}
type AzureVnetIngressEgressGwType_ActiveForwardProxyPolicies struct {
	ActiveForwardProxyPolicies *ves_io_schema_network_firewall.ActiveForwardProxyPoliciesType `protobuf:"bytes,9,opt,name=active_forward_proxy_policies,json=activeForwardProxyPolicies,oneof"`
}
type AzureVnetIngressEgressGwType_ForwardProxyAllowAll struct {
	ForwardProxyAllowAll *ves_io_schema4.Empty `protobuf:"bytes,20,opt,name=forward_proxy_allow_all,json=forwardProxyAllowAll,oneof"`
}
type AzureVnetIngressEgressGwType_NoInsideStaticRoutes struct {
	NoInsideStaticRoutes *ves_io_schema4.Empty `protobuf:"bytes,12,opt,name=no_inside_static_routes,json=noInsideStaticRoutes,oneof"`
}
type AzureVnetIngressEgressGwType_InsideStaticRoutes struct {
	InsideStaticRoutes *ves_io_schema_views1.SiteStaticRoutesListType `protobuf:"bytes,13,opt,name=inside_static_routes,json=insideStaticRoutes,oneof"`
}
type AzureVnetIngressEgressGwType_NoOutsideStaticRoutes struct {
	NoOutsideStaticRoutes *ves_io_schema4.Empty `protobuf:"bytes,15,opt,name=no_outside_static_routes,json=noOutsideStaticRoutes,oneof"`
}
type AzureVnetIngressEgressGwType_OutsideStaticRoutes struct {
	OutsideStaticRoutes *ves_io_schema_views1.SiteStaticRoutesListType `protobuf:"bytes,16,opt,name=outside_static_routes,json=outsideStaticRoutes,oneof"`
}
type AzureVnetIngressEgressGwType_NoGlobalNetwork struct {
	NoGlobalNetwork *ves_io_schema4.Empty `protobuf:"bytes,18,opt,name=no_global_network,json=noGlobalNetwork,oneof"`
}
type AzureVnetIngressEgressGwType_GlobalNetworkList struct {
	GlobalNetworkList *ves_io_schema_views1.GlobalNetworkConnectionListType `protobuf:"bytes,19,opt,name=global_network_list,json=globalNetworkList,oneof"`
}

func (*AzureVnetIngressEgressGwType_NoNetworkPolicy) isAzureVnetIngressEgressGwType_NetworkPolicyChoice() {
}
func (*AzureVnetIngressEgressGwType_ActiveNetworkPolicies) isAzureVnetIngressEgressGwType_NetworkPolicyChoice() {
}
func (*AzureVnetIngressEgressGwType_NoForwardProxy) isAzureVnetIngressEgressGwType_ForwardProxyChoice() {
}
func (*AzureVnetIngressEgressGwType_ActiveForwardProxyPolicies) isAzureVnetIngressEgressGwType_ForwardProxyChoice() {
}
func (*AzureVnetIngressEgressGwType_ForwardProxyAllowAll) isAzureVnetIngressEgressGwType_ForwardProxyChoice() {
}
func (*AzureVnetIngressEgressGwType_NoInsideStaticRoutes) isAzureVnetIngressEgressGwType_InsideStaticRouteChoice() {
}
func (*AzureVnetIngressEgressGwType_InsideStaticRoutes) isAzureVnetIngressEgressGwType_InsideStaticRouteChoice() {
}
func (*AzureVnetIngressEgressGwType_NoOutsideStaticRoutes) isAzureVnetIngressEgressGwType_OutsideStaticRouteChoice() {
}
func (*AzureVnetIngressEgressGwType_OutsideStaticRoutes) isAzureVnetIngressEgressGwType_OutsideStaticRouteChoice() {
}
func (*AzureVnetIngressEgressGwType_NoGlobalNetwork) isAzureVnetIngressEgressGwType_GlobalNetworkChoice() {
}
func (*AzureVnetIngressEgressGwType_GlobalNetworkList) isAzureVnetIngressEgressGwType_GlobalNetworkChoice() {
}

func (m *AzureVnetIngressEgressGwType) GetNetworkPolicyChoice() isAzureVnetIngressEgressGwType_NetworkPolicyChoice {
	if m != nil {
		return m.NetworkPolicyChoice
	}
	return nil
}
func (m *AzureVnetIngressEgressGwType) GetForwardProxyChoice() isAzureVnetIngressEgressGwType_ForwardProxyChoice {
	if m != nil {
		return m.ForwardProxyChoice
	}
	return nil
}
func (m *AzureVnetIngressEgressGwType) GetInsideStaticRouteChoice() isAzureVnetIngressEgressGwType_InsideStaticRouteChoice {
	if m != nil {
		return m.InsideStaticRouteChoice
	}
	return nil
}
func (m *AzureVnetIngressEgressGwType) GetOutsideStaticRouteChoice() isAzureVnetIngressEgressGwType_OutsideStaticRouteChoice {
	if m != nil {
		return m.OutsideStaticRouteChoice
	}
	return nil
}
func (m *AzureVnetIngressEgressGwType) GetGlobalNetworkChoice() isAzureVnetIngressEgressGwType_GlobalNetworkChoice {
	if m != nil {
		return m.GlobalNetworkChoice
	}
	return nil
}

func (m *AzureVnetIngressEgressGwType) GetAzNodes() []*ves_io_schema_views1.AzureVnetTwoInterfaceNodeType {
	if m != nil {
		return m.AzNodes
	}
	return nil
}

func (m *AzureVnetIngressEgressGwType) GetNoNetworkPolicy() *ves_io_schema4.Empty {
	if x, ok := m.GetNetworkPolicyChoice().(*AzureVnetIngressEgressGwType_NoNetworkPolicy); ok {
		return x.NoNetworkPolicy
	}
	return nil
}

func (m *AzureVnetIngressEgressGwType) GetActiveNetworkPolicies() *ves_io_schema_network_firewall.ActiveNetworkPoliciesType {
	if x, ok := m.GetNetworkPolicyChoice().(*AzureVnetIngressEgressGwType_ActiveNetworkPolicies); ok {
		return x.ActiveNetworkPolicies
	}
	return nil
}

func (m *AzureVnetIngressEgressGwType) GetNoForwardProxy() *ves_io_schema4.Empty {
	if x, ok := m.GetForwardProxyChoice().(*AzureVnetIngressEgressGwType_NoForwardProxy); ok {
		return x.NoForwardProxy
	}
	return nil
}

func (m *AzureVnetIngressEgressGwType) GetActiveForwardProxyPolicies() *ves_io_schema_network_firewall.ActiveForwardProxyPoliciesType {
	if x, ok := m.GetForwardProxyChoice().(*AzureVnetIngressEgressGwType_ActiveForwardProxyPolicies); ok {
		return x.ActiveForwardProxyPolicies
	}
	return nil
}

func (m *AzureVnetIngressEgressGwType) GetForwardProxyAllowAll() *ves_io_schema4.Empty {
	if x, ok := m.GetForwardProxyChoice().(*AzureVnetIngressEgressGwType_ForwardProxyAllowAll); ok {
		return x.ForwardProxyAllowAll
	}
	return nil
}

func (m *AzureVnetIngressEgressGwType) GetAzureCertifiedHw() string {
	if m != nil {
		return m.AzureCertifiedHw
	}
	return ""
}

func (m *AzureVnetIngressEgressGwType) GetNoInsideStaticRoutes() *ves_io_schema4.Empty {
	if x, ok := m.GetInsideStaticRouteChoice().(*AzureVnetIngressEgressGwType_NoInsideStaticRoutes); ok {
		return x.NoInsideStaticRoutes
	}
	return nil
}

func (m *AzureVnetIngressEgressGwType) GetInsideStaticRoutes() *ves_io_schema_views1.SiteStaticRoutesListType {
	if x, ok := m.GetInsideStaticRouteChoice().(*AzureVnetIngressEgressGwType_InsideStaticRoutes); ok {
		return x.InsideStaticRoutes
	}
	return nil
}

func (m *AzureVnetIngressEgressGwType) GetNoOutsideStaticRoutes() *ves_io_schema4.Empty {
	if x, ok := m.GetOutsideStaticRouteChoice().(*AzureVnetIngressEgressGwType_NoOutsideStaticRoutes); ok {
		return x.NoOutsideStaticRoutes
	}
	return nil
}

func (m *AzureVnetIngressEgressGwType) GetOutsideStaticRoutes() *ves_io_schema_views1.SiteStaticRoutesListType {
	if x, ok := m.GetOutsideStaticRouteChoice().(*AzureVnetIngressEgressGwType_OutsideStaticRoutes); ok {
		return x.OutsideStaticRoutes
	}
	return nil
}

func (m *AzureVnetIngressEgressGwType) GetNoGlobalNetwork() *ves_io_schema4.Empty {
	if x, ok := m.GetGlobalNetworkChoice().(*AzureVnetIngressEgressGwType_NoGlobalNetwork); ok {
		return x.NoGlobalNetwork
	}
	return nil
}

func (m *AzureVnetIngressEgressGwType) GetGlobalNetworkList() *ves_io_schema_views1.GlobalNetworkConnectionListType {
	if x, ok := m.GetGlobalNetworkChoice().(*AzureVnetIngressEgressGwType_GlobalNetworkList); ok {
		return x.GlobalNetworkList
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*AzureVnetIngressEgressGwType) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _AzureVnetIngressEgressGwType_OneofMarshaler, _AzureVnetIngressEgressGwType_OneofUnmarshaler, _AzureVnetIngressEgressGwType_OneofSizer, []interface{}{
		(*AzureVnetIngressEgressGwType_NoNetworkPolicy)(nil),
		(*AzureVnetIngressEgressGwType_ActiveNetworkPolicies)(nil),
		(*AzureVnetIngressEgressGwType_NoForwardProxy)(nil),
		(*AzureVnetIngressEgressGwType_ActiveForwardProxyPolicies)(nil),
		(*AzureVnetIngressEgressGwType_ForwardProxyAllowAll)(nil),
		(*AzureVnetIngressEgressGwType_NoInsideStaticRoutes)(nil),
		(*AzureVnetIngressEgressGwType_InsideStaticRoutes)(nil),
		(*AzureVnetIngressEgressGwType_NoOutsideStaticRoutes)(nil),
		(*AzureVnetIngressEgressGwType_OutsideStaticRoutes)(nil),
		(*AzureVnetIngressEgressGwType_NoGlobalNetwork)(nil),
		(*AzureVnetIngressEgressGwType_GlobalNetworkList)(nil),
	}
}

func _AzureVnetIngressEgressGwType_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*AzureVnetIngressEgressGwType)
	// network_policy_choice
	switch x := m.NetworkPolicyChoice.(type) {
	case *AzureVnetIngressEgressGwType_NoNetworkPolicy:
		_ = b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.NoNetworkPolicy); err != nil {
			return err
		}
	case *AzureVnetIngressEgressGwType_ActiveNetworkPolicies:
		_ = b.EncodeVarint(10<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ActiveNetworkPolicies); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("AzureVnetIngressEgressGwType.NetworkPolicyChoice has unexpected type %T", x)
	}
	// forward_proxy_choice
	switch x := m.ForwardProxyChoice.(type) {
	case *AzureVnetIngressEgressGwType_NoForwardProxy:
		_ = b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.NoForwardProxy); err != nil {
			return err
		}
	case *AzureVnetIngressEgressGwType_ActiveForwardProxyPolicies:
		_ = b.EncodeVarint(9<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ActiveForwardProxyPolicies); err != nil {
			return err
		}
	case *AzureVnetIngressEgressGwType_ForwardProxyAllowAll:
		_ = b.EncodeVarint(20<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ForwardProxyAllowAll); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("AzureVnetIngressEgressGwType.ForwardProxyChoice has unexpected type %T", x)
	}
	// inside_static_route_choice
	switch x := m.InsideStaticRouteChoice.(type) {
	case *AzureVnetIngressEgressGwType_NoInsideStaticRoutes:
		_ = b.EncodeVarint(12<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.NoInsideStaticRoutes); err != nil {
			return err
		}
	case *AzureVnetIngressEgressGwType_InsideStaticRoutes:
		_ = b.EncodeVarint(13<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.InsideStaticRoutes); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("AzureVnetIngressEgressGwType.InsideStaticRouteChoice has unexpected type %T", x)
	}
	// outside_static_route_choice
	switch x := m.OutsideStaticRouteChoice.(type) {
	case *AzureVnetIngressEgressGwType_NoOutsideStaticRoutes:
		_ = b.EncodeVarint(15<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.NoOutsideStaticRoutes); err != nil {
			return err
		}
	case *AzureVnetIngressEgressGwType_OutsideStaticRoutes:
		_ = b.EncodeVarint(16<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.OutsideStaticRoutes); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("AzureVnetIngressEgressGwType.OutsideStaticRouteChoice has unexpected type %T", x)
	}
	// global_network_choice
	switch x := m.GlobalNetworkChoice.(type) {
	case *AzureVnetIngressEgressGwType_NoGlobalNetwork:
		_ = b.EncodeVarint(18<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.NoGlobalNetwork); err != nil {
			return err
		}
	case *AzureVnetIngressEgressGwType_GlobalNetworkList:
		_ = b.EncodeVarint(19<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.GlobalNetworkList); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("AzureVnetIngressEgressGwType.GlobalNetworkChoice has unexpected type %T", x)
	}
	return nil
}

func _AzureVnetIngressEgressGwType_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*AzureVnetIngressEgressGwType)
	switch tag {
	case 2: // network_policy_choice.no_network_policy
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.NetworkPolicyChoice = &AzureVnetIngressEgressGwType_NoNetworkPolicy{msg}
		return true, err
	case 10: // network_policy_choice.active_network_policies
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema_network_firewall.ActiveNetworkPoliciesType)
		err := b.DecodeMessage(msg)
		m.NetworkPolicyChoice = &AzureVnetIngressEgressGwType_ActiveNetworkPolicies{msg}
		return true, err
	case 4: // forward_proxy_choice.no_forward_proxy
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.ForwardProxyChoice = &AzureVnetIngressEgressGwType_NoForwardProxy{msg}
		return true, err
	case 9: // forward_proxy_choice.active_forward_proxy_policies
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema_network_firewall.ActiveForwardProxyPoliciesType)
		err := b.DecodeMessage(msg)
		m.ForwardProxyChoice = &AzureVnetIngressEgressGwType_ActiveForwardProxyPolicies{msg}
		return true, err
	case 20: // forward_proxy_choice.forward_proxy_allow_all
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.ForwardProxyChoice = &AzureVnetIngressEgressGwType_ForwardProxyAllowAll{msg}
		return true, err
	case 12: // inside_static_route_choice.no_inside_static_routes
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.InsideStaticRouteChoice = &AzureVnetIngressEgressGwType_NoInsideStaticRoutes{msg}
		return true, err
	case 13: // inside_static_route_choice.inside_static_routes
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema_views1.SiteStaticRoutesListType)
		err := b.DecodeMessage(msg)
		m.InsideStaticRouteChoice = &AzureVnetIngressEgressGwType_InsideStaticRoutes{msg}
		return true, err
	case 15: // outside_static_route_choice.no_outside_static_routes
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.OutsideStaticRouteChoice = &AzureVnetIngressEgressGwType_NoOutsideStaticRoutes{msg}
		return true, err
	case 16: // outside_static_route_choice.outside_static_routes
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema_views1.SiteStaticRoutesListType)
		err := b.DecodeMessage(msg)
		m.OutsideStaticRouteChoice = &AzureVnetIngressEgressGwType_OutsideStaticRoutes{msg}
		return true, err
	case 18: // global_network_choice.no_global_network
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.GlobalNetworkChoice = &AzureVnetIngressEgressGwType_NoGlobalNetwork{msg}
		return true, err
	case 19: // global_network_choice.global_network_list
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema_views1.GlobalNetworkConnectionListType)
		err := b.DecodeMessage(msg)
		m.GlobalNetworkChoice = &AzureVnetIngressEgressGwType_GlobalNetworkList{msg}
		return true, err
	default:
		return false, nil
	}
}

func _AzureVnetIngressEgressGwType_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*AzureVnetIngressEgressGwType)
	// network_policy_choice
	switch x := m.NetworkPolicyChoice.(type) {
	case *AzureVnetIngressEgressGwType_NoNetworkPolicy:
		s := proto.Size(x.NoNetworkPolicy)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *AzureVnetIngressEgressGwType_ActiveNetworkPolicies:
		s := proto.Size(x.ActiveNetworkPolicies)
		n += proto.SizeVarint(10<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	// forward_proxy_choice
	switch x := m.ForwardProxyChoice.(type) {
	case *AzureVnetIngressEgressGwType_NoForwardProxy:
		s := proto.Size(x.NoForwardProxy)
		n += proto.SizeVarint(4<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *AzureVnetIngressEgressGwType_ActiveForwardProxyPolicies:
		s := proto.Size(x.ActiveForwardProxyPolicies)
		n += proto.SizeVarint(9<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *AzureVnetIngressEgressGwType_ForwardProxyAllowAll:
		s := proto.Size(x.ForwardProxyAllowAll)
		n += proto.SizeVarint(20<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	// inside_static_route_choice
	switch x := m.InsideStaticRouteChoice.(type) {
	case *AzureVnetIngressEgressGwType_NoInsideStaticRoutes:
		s := proto.Size(x.NoInsideStaticRoutes)
		n += proto.SizeVarint(12<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *AzureVnetIngressEgressGwType_InsideStaticRoutes:
		s := proto.Size(x.InsideStaticRoutes)
		n += proto.SizeVarint(13<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	// outside_static_route_choice
	switch x := m.OutsideStaticRouteChoice.(type) {
	case *AzureVnetIngressEgressGwType_NoOutsideStaticRoutes:
		s := proto.Size(x.NoOutsideStaticRoutes)
		n += proto.SizeVarint(15<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *AzureVnetIngressEgressGwType_OutsideStaticRoutes:
		s := proto.Size(x.OutsideStaticRoutes)
		n += proto.SizeVarint(16<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	// global_network_choice
	switch x := m.GlobalNetworkChoice.(type) {
	case *AzureVnetIngressEgressGwType_NoGlobalNetwork:
		s := proto.Size(x.NoGlobalNetwork)
		n += proto.SizeVarint(18<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *AzureVnetIngressEgressGwType_GlobalNetworkList:
		s := proto.Size(x.GlobalNetworkList)
		n += proto.SizeVarint(19<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// Azure Ingress Egress Gateway on Alternate Region
//
// x-displayName: "Azure Ingress/Egress Gateway on Alternate Region"
// Two interface Azure ingress/egress site on Alternate Region with no support for zones
type AzureVnetIngressEgressGwARType struct {
	// Node Information
	//
	// x-displayName: "Ingress/Egress Gateway (Two Interface) Node information"
	// Ingress/Egress Gateway (Two Interface) Node information.
	Node *ves_io_schema_views1.AzureVnetTwoInterfaceNodeARType `protobuf:"bytes,1,opt,name=node" json:"node,omitempty"`
	// Manage Network Policy
	//
	// x-displayName: "Manage Network Policy"
	// x-required
	// Manage Network Policy via this view
	//
	// Types that are valid to be assigned to NetworkPolicyChoice:
	//	*AzureVnetIngressEgressGwARType_NoNetworkPolicy
	//	*AzureVnetIngressEgressGwARType_ActiveNetworkPolicies
	NetworkPolicyChoice isAzureVnetIngressEgressGwARType_NetworkPolicyChoice `protobuf_oneof:"network_policy_choice"`
	// Manage Forward Proxy
	//
	// x-displayName: "Manage Forward Proxy"
	// x-required
	// Manage Forward Proxy for this site
	//
	// Types that are valid to be assigned to ForwardProxyChoice:
	//	*AzureVnetIngressEgressGwARType_NoForwardProxy
	//	*AzureVnetIngressEgressGwARType_ActiveForwardProxyPolicies
	//	*AzureVnetIngressEgressGwARType_ForwardProxyAllowAll
	ForwardProxyChoice isAzureVnetIngressEgressGwARType_ForwardProxyChoice `protobuf_oneof:"forward_proxy_choice"`
	// Azure Certified Hardware
	//
	// x-displayName: "Azure Certified Hardware"
	// x-example: "azure-byol-multi-nic-voltmesh"
	// x-required
	// Name for Azure certified hardware.
	AzureCertifiedHw string `protobuf:"bytes,8,opt,name=azure_certified_hw,json=azureCertifiedHw,proto3" json:"azure_certified_hw,omitempty"`
	// Manage Static Routes for Inside Network
	//
	// x-displayName: "Manage Static Routes for Inside Network"
	// x-required
	// Add static routes to inside network. Used to reach indirectly connected subnets.
	//
	// Types that are valid to be assigned to InsideStaticRouteChoice:
	//	*AzureVnetIngressEgressGwARType_NoInsideStaticRoutes
	//	*AzureVnetIngressEgressGwARType_InsideStaticRoutes
	InsideStaticRouteChoice isAzureVnetIngressEgressGwARType_InsideStaticRouteChoice `protobuf_oneof:"inside_static_route_choice"`
	// Manage Static Routes for Outside Network
	//
	// x-displayName: "Manage Static Routes for Outside Network"
	// x-required
	// Add static routes to outside network. Used to reach indirectly connected subnets.
	//
	// Types that are valid to be assigned to OutsideStaticRouteChoice:
	//	*AzureVnetIngressEgressGwARType_NoOutsideStaticRoutes
	//	*AzureVnetIngressEgressGwARType_OutsideStaticRoutes
	OutsideStaticRouteChoice isAzureVnetIngressEgressGwARType_OutsideStaticRouteChoice `protobuf_oneof:"outside_static_route_choice"`
	// Connect to Global Network
	//
	// x-displayName: "Select Global Networks to Connect"
	// x-required
	// Select global networks to connect to inside or outside network
	//
	// Types that are valid to be assigned to GlobalNetworkChoice:
	//	*AzureVnetIngressEgressGwARType_NoGlobalNetwork
	//	*AzureVnetIngressEgressGwARType_GlobalNetworkList
	GlobalNetworkChoice isAzureVnetIngressEgressGwARType_GlobalNetworkChoice `protobuf_oneof:"global_network_choice"`
}

func (m *AzureVnetIngressEgressGwARType) Reset()      { *m = AzureVnetIngressEgressGwARType{} }
func (*AzureVnetIngressEgressGwARType) ProtoMessage() {}
func (*AzureVnetIngressEgressGwARType) Descriptor() ([]byte, []int) {
	return fileDescriptorTypes, []int{3}
}

type isAzureVnetIngressEgressGwARType_NetworkPolicyChoice interface {
	isAzureVnetIngressEgressGwARType_NetworkPolicyChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isAzureVnetIngressEgressGwARType_ForwardProxyChoice interface {
	isAzureVnetIngressEgressGwARType_ForwardProxyChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isAzureVnetIngressEgressGwARType_InsideStaticRouteChoice interface {
	isAzureVnetIngressEgressGwARType_InsideStaticRouteChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isAzureVnetIngressEgressGwARType_OutsideStaticRouteChoice interface {
	isAzureVnetIngressEgressGwARType_OutsideStaticRouteChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isAzureVnetIngressEgressGwARType_GlobalNetworkChoice interface {
	isAzureVnetIngressEgressGwARType_GlobalNetworkChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type AzureVnetIngressEgressGwARType_NoNetworkPolicy struct {
	NoNetworkPolicy *ves_io_schema4.Empty `protobuf:"bytes,2,opt,name=no_network_policy,json=noNetworkPolicy,oneof"`
}
type AzureVnetIngressEgressGwARType_ActiveNetworkPolicies struct {
	ActiveNetworkPolicies *ves_io_schema_network_firewall.ActiveNetworkPoliciesType `protobuf:"bytes,10,opt,name=active_network_policies,json=activeNetworkPolicies,oneof"`
}
type AzureVnetIngressEgressGwARType_NoForwardProxy struct {
	NoForwardProxy *ves_io_schema4.Empty `protobuf:"bytes,4,opt,name=no_forward_proxy,json=noForwardProxy,oneof"`
}
type AzureVnetIngressEgressGwARType_ActiveForwardProxyPolicies struct {
	ActiveForwardProxyPolicies *ves_io_schema_network_firewall.ActiveForwardProxyPoliciesType `protobuf:"bytes,9,opt,name=active_forward_proxy_policies,json=activeForwardProxyPolicies,oneof"`
}
type AzureVnetIngressEgressGwARType_ForwardProxyAllowAll struct {
	ForwardProxyAllowAll *ves_io_schema4.Empty `protobuf:"bytes,20,opt,name=forward_proxy_allow_all,json=forwardProxyAllowAll,oneof"`
}
type AzureVnetIngressEgressGwARType_NoInsideStaticRoutes struct {
	NoInsideStaticRoutes *ves_io_schema4.Empty `protobuf:"bytes,12,opt,name=no_inside_static_routes,json=noInsideStaticRoutes,oneof"`
}
type AzureVnetIngressEgressGwARType_InsideStaticRoutes struct {
	InsideStaticRoutes *ves_io_schema_views1.SiteStaticRoutesListType `protobuf:"bytes,13,opt,name=inside_static_routes,json=insideStaticRoutes,oneof"`
}
type AzureVnetIngressEgressGwARType_NoOutsideStaticRoutes struct {
	NoOutsideStaticRoutes *ves_io_schema4.Empty `protobuf:"bytes,15,opt,name=no_outside_static_routes,json=noOutsideStaticRoutes,oneof"`
}
type AzureVnetIngressEgressGwARType_OutsideStaticRoutes struct {
	OutsideStaticRoutes *ves_io_schema_views1.SiteStaticRoutesListType `protobuf:"bytes,16,opt,name=outside_static_routes,json=outsideStaticRoutes,oneof"`
}
type AzureVnetIngressEgressGwARType_NoGlobalNetwork struct {
	NoGlobalNetwork *ves_io_schema4.Empty `protobuf:"bytes,18,opt,name=no_global_network,json=noGlobalNetwork,oneof"`
}
type AzureVnetIngressEgressGwARType_GlobalNetworkList struct {
	GlobalNetworkList *ves_io_schema_views1.GlobalNetworkConnectionListType `protobuf:"bytes,19,opt,name=global_network_list,json=globalNetworkList,oneof"`
}

func (*AzureVnetIngressEgressGwARType_NoNetworkPolicy) isAzureVnetIngressEgressGwARType_NetworkPolicyChoice() {
}
func (*AzureVnetIngressEgressGwARType_ActiveNetworkPolicies) isAzureVnetIngressEgressGwARType_NetworkPolicyChoice() {
}
func (*AzureVnetIngressEgressGwARType_NoForwardProxy) isAzureVnetIngressEgressGwARType_ForwardProxyChoice() {
}
func (*AzureVnetIngressEgressGwARType_ActiveForwardProxyPolicies) isAzureVnetIngressEgressGwARType_ForwardProxyChoice() {
}
func (*AzureVnetIngressEgressGwARType_ForwardProxyAllowAll) isAzureVnetIngressEgressGwARType_ForwardProxyChoice() {
}
func (*AzureVnetIngressEgressGwARType_NoInsideStaticRoutes) isAzureVnetIngressEgressGwARType_InsideStaticRouteChoice() {
}
func (*AzureVnetIngressEgressGwARType_InsideStaticRoutes) isAzureVnetIngressEgressGwARType_InsideStaticRouteChoice() {
}
func (*AzureVnetIngressEgressGwARType_NoOutsideStaticRoutes) isAzureVnetIngressEgressGwARType_OutsideStaticRouteChoice() {
}
func (*AzureVnetIngressEgressGwARType_OutsideStaticRoutes) isAzureVnetIngressEgressGwARType_OutsideStaticRouteChoice() {
}
func (*AzureVnetIngressEgressGwARType_NoGlobalNetwork) isAzureVnetIngressEgressGwARType_GlobalNetworkChoice() {
}
func (*AzureVnetIngressEgressGwARType_GlobalNetworkList) isAzureVnetIngressEgressGwARType_GlobalNetworkChoice() {
}

func (m *AzureVnetIngressEgressGwARType) GetNetworkPolicyChoice() isAzureVnetIngressEgressGwARType_NetworkPolicyChoice {
	if m != nil {
		return m.NetworkPolicyChoice
	}
	return nil
}
func (m *AzureVnetIngressEgressGwARType) GetForwardProxyChoice() isAzureVnetIngressEgressGwARType_ForwardProxyChoice {
	if m != nil {
		return m.ForwardProxyChoice
	}
	return nil
}
func (m *AzureVnetIngressEgressGwARType) GetInsideStaticRouteChoice() isAzureVnetIngressEgressGwARType_InsideStaticRouteChoice {
	if m != nil {
		return m.InsideStaticRouteChoice
	}
	return nil
}
func (m *AzureVnetIngressEgressGwARType) GetOutsideStaticRouteChoice() isAzureVnetIngressEgressGwARType_OutsideStaticRouteChoice {
	if m != nil {
		return m.OutsideStaticRouteChoice
	}
	return nil
}
func (m *AzureVnetIngressEgressGwARType) GetGlobalNetworkChoice() isAzureVnetIngressEgressGwARType_GlobalNetworkChoice {
	if m != nil {
		return m.GlobalNetworkChoice
	}
	return nil
}

func (m *AzureVnetIngressEgressGwARType) GetNode() *ves_io_schema_views1.AzureVnetTwoInterfaceNodeARType {
	if m != nil {
		return m.Node
	}
	return nil
}

func (m *AzureVnetIngressEgressGwARType) GetNoNetworkPolicy() *ves_io_schema4.Empty {
	if x, ok := m.GetNetworkPolicyChoice().(*AzureVnetIngressEgressGwARType_NoNetworkPolicy); ok {
		return x.NoNetworkPolicy
	}
	return nil
}

func (m *AzureVnetIngressEgressGwARType) GetActiveNetworkPolicies() *ves_io_schema_network_firewall.ActiveNetworkPoliciesType {
	if x, ok := m.GetNetworkPolicyChoice().(*AzureVnetIngressEgressGwARType_ActiveNetworkPolicies); ok {
		return x.ActiveNetworkPolicies
	}
	return nil
}

func (m *AzureVnetIngressEgressGwARType) GetNoForwardProxy() *ves_io_schema4.Empty {
	if x, ok := m.GetForwardProxyChoice().(*AzureVnetIngressEgressGwARType_NoForwardProxy); ok {
		return x.NoForwardProxy
	}
	return nil
}

func (m *AzureVnetIngressEgressGwARType) GetActiveForwardProxyPolicies() *ves_io_schema_network_firewall.ActiveForwardProxyPoliciesType {
	if x, ok := m.GetForwardProxyChoice().(*AzureVnetIngressEgressGwARType_ActiveForwardProxyPolicies); ok {
		return x.ActiveForwardProxyPolicies
	}
	return nil
}

func (m *AzureVnetIngressEgressGwARType) GetForwardProxyAllowAll() *ves_io_schema4.Empty {
	if x, ok := m.GetForwardProxyChoice().(*AzureVnetIngressEgressGwARType_ForwardProxyAllowAll); ok {
		return x.ForwardProxyAllowAll
	}
	return nil
}

func (m *AzureVnetIngressEgressGwARType) GetAzureCertifiedHw() string {
	if m != nil {
		return m.AzureCertifiedHw
	}
	return ""
}

func (m *AzureVnetIngressEgressGwARType) GetNoInsideStaticRoutes() *ves_io_schema4.Empty {
	if x, ok := m.GetInsideStaticRouteChoice().(*AzureVnetIngressEgressGwARType_NoInsideStaticRoutes); ok {
		return x.NoInsideStaticRoutes
	}
	return nil
}

func (m *AzureVnetIngressEgressGwARType) GetInsideStaticRoutes() *ves_io_schema_views1.SiteStaticRoutesListType {
	if x, ok := m.GetInsideStaticRouteChoice().(*AzureVnetIngressEgressGwARType_InsideStaticRoutes); ok {
		return x.InsideStaticRoutes
	}
	return nil
}

func (m *AzureVnetIngressEgressGwARType) GetNoOutsideStaticRoutes() *ves_io_schema4.Empty {
	if x, ok := m.GetOutsideStaticRouteChoice().(*AzureVnetIngressEgressGwARType_NoOutsideStaticRoutes); ok {
		return x.NoOutsideStaticRoutes
	}
	return nil
}

func (m *AzureVnetIngressEgressGwARType) GetOutsideStaticRoutes() *ves_io_schema_views1.SiteStaticRoutesListType {
	if x, ok := m.GetOutsideStaticRouteChoice().(*AzureVnetIngressEgressGwARType_OutsideStaticRoutes); ok {
		return x.OutsideStaticRoutes
	}
	return nil
}

func (m *AzureVnetIngressEgressGwARType) GetNoGlobalNetwork() *ves_io_schema4.Empty {
	if x, ok := m.GetGlobalNetworkChoice().(*AzureVnetIngressEgressGwARType_NoGlobalNetwork); ok {
		return x.NoGlobalNetwork
	}
	return nil
}

func (m *AzureVnetIngressEgressGwARType) GetGlobalNetworkList() *ves_io_schema_views1.GlobalNetworkConnectionListType {
	if x, ok := m.GetGlobalNetworkChoice().(*AzureVnetIngressEgressGwARType_GlobalNetworkList); ok {
		return x.GlobalNetworkList
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*AzureVnetIngressEgressGwARType) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _AzureVnetIngressEgressGwARType_OneofMarshaler, _AzureVnetIngressEgressGwARType_OneofUnmarshaler, _AzureVnetIngressEgressGwARType_OneofSizer, []interface{}{
		(*AzureVnetIngressEgressGwARType_NoNetworkPolicy)(nil),
		(*AzureVnetIngressEgressGwARType_ActiveNetworkPolicies)(nil),
		(*AzureVnetIngressEgressGwARType_NoForwardProxy)(nil),
		(*AzureVnetIngressEgressGwARType_ActiveForwardProxyPolicies)(nil),
		(*AzureVnetIngressEgressGwARType_ForwardProxyAllowAll)(nil),
		(*AzureVnetIngressEgressGwARType_NoInsideStaticRoutes)(nil),
		(*AzureVnetIngressEgressGwARType_InsideStaticRoutes)(nil),
		(*AzureVnetIngressEgressGwARType_NoOutsideStaticRoutes)(nil),
		(*AzureVnetIngressEgressGwARType_OutsideStaticRoutes)(nil),
		(*AzureVnetIngressEgressGwARType_NoGlobalNetwork)(nil),
		(*AzureVnetIngressEgressGwARType_GlobalNetworkList)(nil),
	}
}

func _AzureVnetIngressEgressGwARType_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*AzureVnetIngressEgressGwARType)
	// network_policy_choice
	switch x := m.NetworkPolicyChoice.(type) {
	case *AzureVnetIngressEgressGwARType_NoNetworkPolicy:
		_ = b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.NoNetworkPolicy); err != nil {
			return err
		}
	case *AzureVnetIngressEgressGwARType_ActiveNetworkPolicies:
		_ = b.EncodeVarint(10<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ActiveNetworkPolicies); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("AzureVnetIngressEgressGwARType.NetworkPolicyChoice has unexpected type %T", x)
	}
	// forward_proxy_choice
	switch x := m.ForwardProxyChoice.(type) {
	case *AzureVnetIngressEgressGwARType_NoForwardProxy:
		_ = b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.NoForwardProxy); err != nil {
			return err
		}
	case *AzureVnetIngressEgressGwARType_ActiveForwardProxyPolicies:
		_ = b.EncodeVarint(9<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ActiveForwardProxyPolicies); err != nil {
			return err
		}
	case *AzureVnetIngressEgressGwARType_ForwardProxyAllowAll:
		_ = b.EncodeVarint(20<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ForwardProxyAllowAll); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("AzureVnetIngressEgressGwARType.ForwardProxyChoice has unexpected type %T", x)
	}
	// inside_static_route_choice
	switch x := m.InsideStaticRouteChoice.(type) {
	case *AzureVnetIngressEgressGwARType_NoInsideStaticRoutes:
		_ = b.EncodeVarint(12<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.NoInsideStaticRoutes); err != nil {
			return err
		}
	case *AzureVnetIngressEgressGwARType_InsideStaticRoutes:
		_ = b.EncodeVarint(13<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.InsideStaticRoutes); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("AzureVnetIngressEgressGwARType.InsideStaticRouteChoice has unexpected type %T", x)
	}
	// outside_static_route_choice
	switch x := m.OutsideStaticRouteChoice.(type) {
	case *AzureVnetIngressEgressGwARType_NoOutsideStaticRoutes:
		_ = b.EncodeVarint(15<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.NoOutsideStaticRoutes); err != nil {
			return err
		}
	case *AzureVnetIngressEgressGwARType_OutsideStaticRoutes:
		_ = b.EncodeVarint(16<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.OutsideStaticRoutes); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("AzureVnetIngressEgressGwARType.OutsideStaticRouteChoice has unexpected type %T", x)
	}
	// global_network_choice
	switch x := m.GlobalNetworkChoice.(type) {
	case *AzureVnetIngressEgressGwARType_NoGlobalNetwork:
		_ = b.EncodeVarint(18<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.NoGlobalNetwork); err != nil {
			return err
		}
	case *AzureVnetIngressEgressGwARType_GlobalNetworkList:
		_ = b.EncodeVarint(19<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.GlobalNetworkList); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("AzureVnetIngressEgressGwARType.GlobalNetworkChoice has unexpected type %T", x)
	}
	return nil
}

func _AzureVnetIngressEgressGwARType_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*AzureVnetIngressEgressGwARType)
	switch tag {
	case 2: // network_policy_choice.no_network_policy
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.NetworkPolicyChoice = &AzureVnetIngressEgressGwARType_NoNetworkPolicy{msg}
		return true, err
	case 10: // network_policy_choice.active_network_policies
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema_network_firewall.ActiveNetworkPoliciesType)
		err := b.DecodeMessage(msg)
		m.NetworkPolicyChoice = &AzureVnetIngressEgressGwARType_ActiveNetworkPolicies{msg}
		return true, err
	case 4: // forward_proxy_choice.no_forward_proxy
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.ForwardProxyChoice = &AzureVnetIngressEgressGwARType_NoForwardProxy{msg}
		return true, err
	case 9: // forward_proxy_choice.active_forward_proxy_policies
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema_network_firewall.ActiveForwardProxyPoliciesType)
		err := b.DecodeMessage(msg)
		m.ForwardProxyChoice = &AzureVnetIngressEgressGwARType_ActiveForwardProxyPolicies{msg}
		return true, err
	case 20: // forward_proxy_choice.forward_proxy_allow_all
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.ForwardProxyChoice = &AzureVnetIngressEgressGwARType_ForwardProxyAllowAll{msg}
		return true, err
	case 12: // inside_static_route_choice.no_inside_static_routes
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.InsideStaticRouteChoice = &AzureVnetIngressEgressGwARType_NoInsideStaticRoutes{msg}
		return true, err
	case 13: // inside_static_route_choice.inside_static_routes
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema_views1.SiteStaticRoutesListType)
		err := b.DecodeMessage(msg)
		m.InsideStaticRouteChoice = &AzureVnetIngressEgressGwARType_InsideStaticRoutes{msg}
		return true, err
	case 15: // outside_static_route_choice.no_outside_static_routes
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.OutsideStaticRouteChoice = &AzureVnetIngressEgressGwARType_NoOutsideStaticRoutes{msg}
		return true, err
	case 16: // outside_static_route_choice.outside_static_routes
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema_views1.SiteStaticRoutesListType)
		err := b.DecodeMessage(msg)
		m.OutsideStaticRouteChoice = &AzureVnetIngressEgressGwARType_OutsideStaticRoutes{msg}
		return true, err
	case 18: // global_network_choice.no_global_network
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.GlobalNetworkChoice = &AzureVnetIngressEgressGwARType_NoGlobalNetwork{msg}
		return true, err
	case 19: // global_network_choice.global_network_list
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema_views1.GlobalNetworkConnectionListType)
		err := b.DecodeMessage(msg)
		m.GlobalNetworkChoice = &AzureVnetIngressEgressGwARType_GlobalNetworkList{msg}
		return true, err
	default:
		return false, nil
	}
}

func _AzureVnetIngressEgressGwARType_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*AzureVnetIngressEgressGwARType)
	// network_policy_choice
	switch x := m.NetworkPolicyChoice.(type) {
	case *AzureVnetIngressEgressGwARType_NoNetworkPolicy:
		s := proto.Size(x.NoNetworkPolicy)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *AzureVnetIngressEgressGwARType_ActiveNetworkPolicies:
		s := proto.Size(x.ActiveNetworkPolicies)
		n += proto.SizeVarint(10<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	// forward_proxy_choice
	switch x := m.ForwardProxyChoice.(type) {
	case *AzureVnetIngressEgressGwARType_NoForwardProxy:
		s := proto.Size(x.NoForwardProxy)
		n += proto.SizeVarint(4<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *AzureVnetIngressEgressGwARType_ActiveForwardProxyPolicies:
		s := proto.Size(x.ActiveForwardProxyPolicies)
		n += proto.SizeVarint(9<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *AzureVnetIngressEgressGwARType_ForwardProxyAllowAll:
		s := proto.Size(x.ForwardProxyAllowAll)
		n += proto.SizeVarint(20<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	// inside_static_route_choice
	switch x := m.InsideStaticRouteChoice.(type) {
	case *AzureVnetIngressEgressGwARType_NoInsideStaticRoutes:
		s := proto.Size(x.NoInsideStaticRoutes)
		n += proto.SizeVarint(12<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *AzureVnetIngressEgressGwARType_InsideStaticRoutes:
		s := proto.Size(x.InsideStaticRoutes)
		n += proto.SizeVarint(13<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	// outside_static_route_choice
	switch x := m.OutsideStaticRouteChoice.(type) {
	case *AzureVnetIngressEgressGwARType_NoOutsideStaticRoutes:
		s := proto.Size(x.NoOutsideStaticRoutes)
		n += proto.SizeVarint(15<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *AzureVnetIngressEgressGwARType_OutsideStaticRoutes:
		s := proto.Size(x.OutsideStaticRoutes)
		n += proto.SizeVarint(16<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	// global_network_choice
	switch x := m.GlobalNetworkChoice.(type) {
	case *AzureVnetIngressEgressGwARType_NoGlobalNetwork:
		s := proto.Size(x.NoGlobalNetwork)
		n += proto.SizeVarint(18<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *AzureVnetIngressEgressGwARType_GlobalNetworkList:
		s := proto.Size(x.GlobalNetworkList)
		n += proto.SizeVarint(19<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// Azure Voltstack Cluster on Recommended Region
//
// x-displayName: "Azure Voltstack Cluster on Recommended Region"
// Voltstack Cluster of single interface Azure nodes
type AzureVnetVoltstackClusterType struct {
	// Azure Certified Hardware
	//
	// x-displayName: "Azure Certified Hardware"
	// x-example: "azure-byol-voltstack-combo"
	// x-required
	// Name for Azure certified hardware.
	AzureCertifiedHw string `protobuf:"bytes,1,opt,name=azure_certified_hw,json=azureCertifiedHw,proto3" json:"azure_certified_hw,omitempty"`
	// Nodes
	//
	// x-displayName: "VoltStack Cluster (One Interface) Nodes in AZ"
	// Only Single AZ or Three AZ(s) nodes are supported currently.
	AzNodes []*ves_io_schema_views1.AzureVnetOneInterfaceNodeType `protobuf:"bytes,2,rep,name=az_nodes,json=azNodes" json:"az_nodes,omitempty"`
	// Manage Network Policy
	//
	// x-displayName: "Manage Network Policy"
	// x-required
	// Manage Network Policy via this view
	//
	// Types that are valid to be assigned to NetworkPolicyChoice:
	//	*AzureVnetVoltstackClusterType_NoNetworkPolicy
	//	*AzureVnetVoltstackClusterType_ActiveNetworkPolicies
	NetworkPolicyChoice isAzureVnetVoltstackClusterType_NetworkPolicyChoice `protobuf_oneof:"network_policy_choice"`
	// Manage Forward Proxy
	//
	// x-displayName: "Manage Forward Proxy"
	// x-required
	// Manage Forward Proxy for this site
	//
	// Types that are valid to be assigned to ForwardProxyChoice:
	//	*AzureVnetVoltstackClusterType_NoForwardProxy
	//	*AzureVnetVoltstackClusterType_ActiveForwardProxyPolicies
	//	*AzureVnetVoltstackClusterType_ForwardProxyAllowAll
	ForwardProxyChoice isAzureVnetVoltstackClusterType_ForwardProxyChoice `protobuf_oneof:"forward_proxy_choice"`
	// Manage Static Routes for Site Local Network
	//
	// x-displayName: "Manage Static Routes for Site Local Network"
	// x-required
	// Add static routes to site local network. Used to reach indirectly connected subnets.
	//
	// Types that are valid to be assigned to OutsideStaticRouteChoice:
	//	*AzureVnetVoltstackClusterType_NoOutsideStaticRoutes
	//	*AzureVnetVoltstackClusterType_OutsideStaticRoutes
	OutsideStaticRouteChoice isAzureVnetVoltstackClusterType_OutsideStaticRouteChoice `protobuf_oneof:"outside_static_route_choice"`
	// Connect to Global Network
	//
	// x-displayName: "Select Global Networks to Connect"
	// x-required
	// Select global networks to connect to site local network
	//
	// Types that are valid to be assigned to GlobalNetworkChoice:
	//	*AzureVnetVoltstackClusterType_NoGlobalNetwork
	//	*AzureVnetVoltstackClusterType_GlobalNetworkList
	GlobalNetworkChoice isAzureVnetVoltstackClusterType_GlobalNetworkChoice `protobuf_oneof:"global_network_choice"`
	// Site Local K8s API access
	//
	// x-displayName: "Site Local K8s API access"
	// x-required
	// Enable/Disable choice for site local K8s API access
	//
	// Types that are valid to be assigned to K8SClusterChoice:
	//	*AzureVnetVoltstackClusterType_NoK8SCluster
	//	*AzureVnetVoltstackClusterType_K8SCluster
	K8SClusterChoice isAzureVnetVoltstackClusterType_K8SClusterChoice `protobuf_oneof:"k8s_cluster_choice"`
}

func (m *AzureVnetVoltstackClusterType) Reset()      { *m = AzureVnetVoltstackClusterType{} }
func (*AzureVnetVoltstackClusterType) ProtoMessage() {}
func (*AzureVnetVoltstackClusterType) Descriptor() ([]byte, []int) {
	return fileDescriptorTypes, []int{4}
}

type isAzureVnetVoltstackClusterType_NetworkPolicyChoice interface {
	isAzureVnetVoltstackClusterType_NetworkPolicyChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isAzureVnetVoltstackClusterType_ForwardProxyChoice interface {
	isAzureVnetVoltstackClusterType_ForwardProxyChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isAzureVnetVoltstackClusterType_OutsideStaticRouteChoice interface {
	isAzureVnetVoltstackClusterType_OutsideStaticRouteChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isAzureVnetVoltstackClusterType_GlobalNetworkChoice interface {
	isAzureVnetVoltstackClusterType_GlobalNetworkChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isAzureVnetVoltstackClusterType_K8SClusterChoice interface {
	isAzureVnetVoltstackClusterType_K8SClusterChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type AzureVnetVoltstackClusterType_NoNetworkPolicy struct {
	NoNetworkPolicy *ves_io_schema4.Empty `protobuf:"bytes,4,opt,name=no_network_policy,json=noNetworkPolicy,oneof"`
}
type AzureVnetVoltstackClusterType_ActiveNetworkPolicies struct {
	ActiveNetworkPolicies *ves_io_schema_network_firewall.ActiveNetworkPoliciesType `protobuf:"bytes,5,opt,name=active_network_policies,json=activeNetworkPolicies,oneof"`
}
type AzureVnetVoltstackClusterType_NoForwardProxy struct {
	NoForwardProxy *ves_io_schema4.Empty `protobuf:"bytes,7,opt,name=no_forward_proxy,json=noForwardProxy,oneof"`
}
type AzureVnetVoltstackClusterType_ActiveForwardProxyPolicies struct {
	ActiveForwardProxyPolicies *ves_io_schema_network_firewall.ActiveForwardProxyPoliciesType `protobuf:"bytes,8,opt,name=active_forward_proxy_policies,json=activeForwardProxyPolicies,oneof"`
}
type AzureVnetVoltstackClusterType_ForwardProxyAllowAll struct {
	ForwardProxyAllowAll *ves_io_schema4.Empty `protobuf:"bytes,15,opt,name=forward_proxy_allow_all,json=forwardProxyAllowAll,oneof"`
}
type AzureVnetVoltstackClusterType_NoOutsideStaticRoutes struct {
	NoOutsideStaticRoutes *ves_io_schema4.Empty `protobuf:"bytes,10,opt,name=no_outside_static_routes,json=noOutsideStaticRoutes,oneof"`
}
type AzureVnetVoltstackClusterType_OutsideStaticRoutes struct {
	OutsideStaticRoutes *ves_io_schema_views1.SiteStaticRoutesListType `protobuf:"bytes,11,opt,name=outside_static_routes,json=outsideStaticRoutes,oneof"`
}
type AzureVnetVoltstackClusterType_NoGlobalNetwork struct {
	NoGlobalNetwork *ves_io_schema4.Empty `protobuf:"bytes,13,opt,name=no_global_network,json=noGlobalNetwork,oneof"`
}
type AzureVnetVoltstackClusterType_GlobalNetworkList struct {
	GlobalNetworkList *ves_io_schema_views1.GlobalNetworkConnectionListType `protobuf:"bytes,14,opt,name=global_network_list,json=globalNetworkList,oneof"`
}
type AzureVnetVoltstackClusterType_NoK8SCluster struct {
	NoK8SCluster *ves_io_schema4.Empty `protobuf:"bytes,27,opt,name=no_k8s_cluster,json=noK8sCluster,oneof"`
}
type AzureVnetVoltstackClusterType_K8SCluster struct {
	K8SCluster *ves_io_schema_views.ObjectRefType `protobuf:"bytes,28,opt,name=k8s_cluster,json=k8sCluster,oneof"`
}

func (*AzureVnetVoltstackClusterType_NoNetworkPolicy) isAzureVnetVoltstackClusterType_NetworkPolicyChoice() {
}
func (*AzureVnetVoltstackClusterType_ActiveNetworkPolicies) isAzureVnetVoltstackClusterType_NetworkPolicyChoice() {
}
func (*AzureVnetVoltstackClusterType_NoForwardProxy) isAzureVnetVoltstackClusterType_ForwardProxyChoice() {
}
func (*AzureVnetVoltstackClusterType_ActiveForwardProxyPolicies) isAzureVnetVoltstackClusterType_ForwardProxyChoice() {
}
func (*AzureVnetVoltstackClusterType_ForwardProxyAllowAll) isAzureVnetVoltstackClusterType_ForwardProxyChoice() {
}
func (*AzureVnetVoltstackClusterType_NoOutsideStaticRoutes) isAzureVnetVoltstackClusterType_OutsideStaticRouteChoice() {
}
func (*AzureVnetVoltstackClusterType_OutsideStaticRoutes) isAzureVnetVoltstackClusterType_OutsideStaticRouteChoice() {
}
func (*AzureVnetVoltstackClusterType_NoGlobalNetwork) isAzureVnetVoltstackClusterType_GlobalNetworkChoice() {
}
func (*AzureVnetVoltstackClusterType_GlobalNetworkList) isAzureVnetVoltstackClusterType_GlobalNetworkChoice() {
}
func (*AzureVnetVoltstackClusterType_NoK8SCluster) isAzureVnetVoltstackClusterType_K8SClusterChoice() {
}
func (*AzureVnetVoltstackClusterType_K8SCluster) isAzureVnetVoltstackClusterType_K8SClusterChoice() {}

func (m *AzureVnetVoltstackClusterType) GetNetworkPolicyChoice() isAzureVnetVoltstackClusterType_NetworkPolicyChoice {
	if m != nil {
		return m.NetworkPolicyChoice
	}
	return nil
}
func (m *AzureVnetVoltstackClusterType) GetForwardProxyChoice() isAzureVnetVoltstackClusterType_ForwardProxyChoice {
	if m != nil {
		return m.ForwardProxyChoice
	}
	return nil
}
func (m *AzureVnetVoltstackClusterType) GetOutsideStaticRouteChoice() isAzureVnetVoltstackClusterType_OutsideStaticRouteChoice {
	if m != nil {
		return m.OutsideStaticRouteChoice
	}
	return nil
}
func (m *AzureVnetVoltstackClusterType) GetGlobalNetworkChoice() isAzureVnetVoltstackClusterType_GlobalNetworkChoice {
	if m != nil {
		return m.GlobalNetworkChoice
	}
	return nil
}
func (m *AzureVnetVoltstackClusterType) GetK8SClusterChoice() isAzureVnetVoltstackClusterType_K8SClusterChoice {
	if m != nil {
		return m.K8SClusterChoice
	}
	return nil
}

func (m *AzureVnetVoltstackClusterType) GetAzureCertifiedHw() string {
	if m != nil {
		return m.AzureCertifiedHw
	}
	return ""
}

func (m *AzureVnetVoltstackClusterType) GetAzNodes() []*ves_io_schema_views1.AzureVnetOneInterfaceNodeType {
	if m != nil {
		return m.AzNodes
	}
	return nil
}

func (m *AzureVnetVoltstackClusterType) GetNoNetworkPolicy() *ves_io_schema4.Empty {
	if x, ok := m.GetNetworkPolicyChoice().(*AzureVnetVoltstackClusterType_NoNetworkPolicy); ok {
		return x.NoNetworkPolicy
	}
	return nil
}

func (m *AzureVnetVoltstackClusterType) GetActiveNetworkPolicies() *ves_io_schema_network_firewall.ActiveNetworkPoliciesType {
	if x, ok := m.GetNetworkPolicyChoice().(*AzureVnetVoltstackClusterType_ActiveNetworkPolicies); ok {
		return x.ActiveNetworkPolicies
	}
	return nil
}

func (m *AzureVnetVoltstackClusterType) GetNoForwardProxy() *ves_io_schema4.Empty {
	if x, ok := m.GetForwardProxyChoice().(*AzureVnetVoltstackClusterType_NoForwardProxy); ok {
		return x.NoForwardProxy
	}
	return nil
}

func (m *AzureVnetVoltstackClusterType) GetActiveForwardProxyPolicies() *ves_io_schema_network_firewall.ActiveForwardProxyPoliciesType {
	if x, ok := m.GetForwardProxyChoice().(*AzureVnetVoltstackClusterType_ActiveForwardProxyPolicies); ok {
		return x.ActiveForwardProxyPolicies
	}
	return nil
}

func (m *AzureVnetVoltstackClusterType) GetForwardProxyAllowAll() *ves_io_schema4.Empty {
	if x, ok := m.GetForwardProxyChoice().(*AzureVnetVoltstackClusterType_ForwardProxyAllowAll); ok {
		return x.ForwardProxyAllowAll
	}
	return nil
}

func (m *AzureVnetVoltstackClusterType) GetNoOutsideStaticRoutes() *ves_io_schema4.Empty {
	if x, ok := m.GetOutsideStaticRouteChoice().(*AzureVnetVoltstackClusterType_NoOutsideStaticRoutes); ok {
		return x.NoOutsideStaticRoutes
	}
	return nil
}

func (m *AzureVnetVoltstackClusterType) GetOutsideStaticRoutes() *ves_io_schema_views1.SiteStaticRoutesListType {
	if x, ok := m.GetOutsideStaticRouteChoice().(*AzureVnetVoltstackClusterType_OutsideStaticRoutes); ok {
		return x.OutsideStaticRoutes
	}
	return nil
}

func (m *AzureVnetVoltstackClusterType) GetNoGlobalNetwork() *ves_io_schema4.Empty {
	if x, ok := m.GetGlobalNetworkChoice().(*AzureVnetVoltstackClusterType_NoGlobalNetwork); ok {
		return x.NoGlobalNetwork
	}
	return nil
}

func (m *AzureVnetVoltstackClusterType) GetGlobalNetworkList() *ves_io_schema_views1.GlobalNetworkConnectionListType {
	if x, ok := m.GetGlobalNetworkChoice().(*AzureVnetVoltstackClusterType_GlobalNetworkList); ok {
		return x.GlobalNetworkList
	}
	return nil
}

func (m *AzureVnetVoltstackClusterType) GetNoK8SCluster() *ves_io_schema4.Empty {
	if x, ok := m.GetK8SClusterChoice().(*AzureVnetVoltstackClusterType_NoK8SCluster); ok {
		return x.NoK8SCluster
	}
	return nil
}

func (m *AzureVnetVoltstackClusterType) GetK8SCluster() *ves_io_schema_views.ObjectRefType {
	if x, ok := m.GetK8SClusterChoice().(*AzureVnetVoltstackClusterType_K8SCluster); ok {
		return x.K8SCluster
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*AzureVnetVoltstackClusterType) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _AzureVnetVoltstackClusterType_OneofMarshaler, _AzureVnetVoltstackClusterType_OneofUnmarshaler, _AzureVnetVoltstackClusterType_OneofSizer, []interface{}{
		(*AzureVnetVoltstackClusterType_NoNetworkPolicy)(nil),
		(*AzureVnetVoltstackClusterType_ActiveNetworkPolicies)(nil),
		(*AzureVnetVoltstackClusterType_NoForwardProxy)(nil),
		(*AzureVnetVoltstackClusterType_ActiveForwardProxyPolicies)(nil),
		(*AzureVnetVoltstackClusterType_ForwardProxyAllowAll)(nil),
		(*AzureVnetVoltstackClusterType_NoOutsideStaticRoutes)(nil),
		(*AzureVnetVoltstackClusterType_OutsideStaticRoutes)(nil),
		(*AzureVnetVoltstackClusterType_NoGlobalNetwork)(nil),
		(*AzureVnetVoltstackClusterType_GlobalNetworkList)(nil),
		(*AzureVnetVoltstackClusterType_NoK8SCluster)(nil),
		(*AzureVnetVoltstackClusterType_K8SCluster)(nil),
	}
}

func _AzureVnetVoltstackClusterType_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*AzureVnetVoltstackClusterType)
	// network_policy_choice
	switch x := m.NetworkPolicyChoice.(type) {
	case *AzureVnetVoltstackClusterType_NoNetworkPolicy:
		_ = b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.NoNetworkPolicy); err != nil {
			return err
		}
	case *AzureVnetVoltstackClusterType_ActiveNetworkPolicies:
		_ = b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ActiveNetworkPolicies); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("AzureVnetVoltstackClusterType.NetworkPolicyChoice has unexpected type %T", x)
	}
	// forward_proxy_choice
	switch x := m.ForwardProxyChoice.(type) {
	case *AzureVnetVoltstackClusterType_NoForwardProxy:
		_ = b.EncodeVarint(7<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.NoForwardProxy); err != nil {
			return err
		}
	case *AzureVnetVoltstackClusterType_ActiveForwardProxyPolicies:
		_ = b.EncodeVarint(8<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ActiveForwardProxyPolicies); err != nil {
			return err
		}
	case *AzureVnetVoltstackClusterType_ForwardProxyAllowAll:
		_ = b.EncodeVarint(15<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ForwardProxyAllowAll); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("AzureVnetVoltstackClusterType.ForwardProxyChoice has unexpected type %T", x)
	}
	// outside_static_route_choice
	switch x := m.OutsideStaticRouteChoice.(type) {
	case *AzureVnetVoltstackClusterType_NoOutsideStaticRoutes:
		_ = b.EncodeVarint(10<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.NoOutsideStaticRoutes); err != nil {
			return err
		}
	case *AzureVnetVoltstackClusterType_OutsideStaticRoutes:
		_ = b.EncodeVarint(11<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.OutsideStaticRoutes); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("AzureVnetVoltstackClusterType.OutsideStaticRouteChoice has unexpected type %T", x)
	}
	// global_network_choice
	switch x := m.GlobalNetworkChoice.(type) {
	case *AzureVnetVoltstackClusterType_NoGlobalNetwork:
		_ = b.EncodeVarint(13<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.NoGlobalNetwork); err != nil {
			return err
		}
	case *AzureVnetVoltstackClusterType_GlobalNetworkList:
		_ = b.EncodeVarint(14<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.GlobalNetworkList); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("AzureVnetVoltstackClusterType.GlobalNetworkChoice has unexpected type %T", x)
	}
	// k8s_cluster_choice
	switch x := m.K8SClusterChoice.(type) {
	case *AzureVnetVoltstackClusterType_NoK8SCluster:
		_ = b.EncodeVarint(27<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.NoK8SCluster); err != nil {
			return err
		}
	case *AzureVnetVoltstackClusterType_K8SCluster:
		_ = b.EncodeVarint(28<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.K8SCluster); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("AzureVnetVoltstackClusterType.K8SClusterChoice has unexpected type %T", x)
	}
	return nil
}

func _AzureVnetVoltstackClusterType_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*AzureVnetVoltstackClusterType)
	switch tag {
	case 4: // network_policy_choice.no_network_policy
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.NetworkPolicyChoice = &AzureVnetVoltstackClusterType_NoNetworkPolicy{msg}
		return true, err
	case 5: // network_policy_choice.active_network_policies
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema_network_firewall.ActiveNetworkPoliciesType)
		err := b.DecodeMessage(msg)
		m.NetworkPolicyChoice = &AzureVnetVoltstackClusterType_ActiveNetworkPolicies{msg}
		return true, err
	case 7: // forward_proxy_choice.no_forward_proxy
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.ForwardProxyChoice = &AzureVnetVoltstackClusterType_NoForwardProxy{msg}
		return true, err
	case 8: // forward_proxy_choice.active_forward_proxy_policies
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema_network_firewall.ActiveForwardProxyPoliciesType)
		err := b.DecodeMessage(msg)
		m.ForwardProxyChoice = &AzureVnetVoltstackClusterType_ActiveForwardProxyPolicies{msg}
		return true, err
	case 15: // forward_proxy_choice.forward_proxy_allow_all
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.ForwardProxyChoice = &AzureVnetVoltstackClusterType_ForwardProxyAllowAll{msg}
		return true, err
	case 10: // outside_static_route_choice.no_outside_static_routes
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.OutsideStaticRouteChoice = &AzureVnetVoltstackClusterType_NoOutsideStaticRoutes{msg}
		return true, err
	case 11: // outside_static_route_choice.outside_static_routes
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema_views1.SiteStaticRoutesListType)
		err := b.DecodeMessage(msg)
		m.OutsideStaticRouteChoice = &AzureVnetVoltstackClusterType_OutsideStaticRoutes{msg}
		return true, err
	case 13: // global_network_choice.no_global_network
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.GlobalNetworkChoice = &AzureVnetVoltstackClusterType_NoGlobalNetwork{msg}
		return true, err
	case 14: // global_network_choice.global_network_list
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema_views1.GlobalNetworkConnectionListType)
		err := b.DecodeMessage(msg)
		m.GlobalNetworkChoice = &AzureVnetVoltstackClusterType_GlobalNetworkList{msg}
		return true, err
	case 27: // k8s_cluster_choice.no_k8s_cluster
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.K8SClusterChoice = &AzureVnetVoltstackClusterType_NoK8SCluster{msg}
		return true, err
	case 28: // k8s_cluster_choice.k8s_cluster
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema_views.ObjectRefType)
		err := b.DecodeMessage(msg)
		m.K8SClusterChoice = &AzureVnetVoltstackClusterType_K8SCluster{msg}
		return true, err
	default:
		return false, nil
	}
}

func _AzureVnetVoltstackClusterType_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*AzureVnetVoltstackClusterType)
	// network_policy_choice
	switch x := m.NetworkPolicyChoice.(type) {
	case *AzureVnetVoltstackClusterType_NoNetworkPolicy:
		s := proto.Size(x.NoNetworkPolicy)
		n += proto.SizeVarint(4<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *AzureVnetVoltstackClusterType_ActiveNetworkPolicies:
		s := proto.Size(x.ActiveNetworkPolicies)
		n += proto.SizeVarint(5<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	// forward_proxy_choice
	switch x := m.ForwardProxyChoice.(type) {
	case *AzureVnetVoltstackClusterType_NoForwardProxy:
		s := proto.Size(x.NoForwardProxy)
		n += proto.SizeVarint(7<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *AzureVnetVoltstackClusterType_ActiveForwardProxyPolicies:
		s := proto.Size(x.ActiveForwardProxyPolicies)
		n += proto.SizeVarint(8<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *AzureVnetVoltstackClusterType_ForwardProxyAllowAll:
		s := proto.Size(x.ForwardProxyAllowAll)
		n += proto.SizeVarint(15<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	// outside_static_route_choice
	switch x := m.OutsideStaticRouteChoice.(type) {
	case *AzureVnetVoltstackClusterType_NoOutsideStaticRoutes:
		s := proto.Size(x.NoOutsideStaticRoutes)
		n += proto.SizeVarint(10<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *AzureVnetVoltstackClusterType_OutsideStaticRoutes:
		s := proto.Size(x.OutsideStaticRoutes)
		n += proto.SizeVarint(11<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	// global_network_choice
	switch x := m.GlobalNetworkChoice.(type) {
	case *AzureVnetVoltstackClusterType_NoGlobalNetwork:
		s := proto.Size(x.NoGlobalNetwork)
		n += proto.SizeVarint(13<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *AzureVnetVoltstackClusterType_GlobalNetworkList:
		s := proto.Size(x.GlobalNetworkList)
		n += proto.SizeVarint(14<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	// k8s_cluster_choice
	switch x := m.K8SClusterChoice.(type) {
	case *AzureVnetVoltstackClusterType_NoK8SCluster:
		s := proto.Size(x.NoK8SCluster)
		n += proto.SizeVarint(27<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *AzureVnetVoltstackClusterType_K8SCluster:
		s := proto.Size(x.K8SCluster)
		n += proto.SizeVarint(28<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// Azure Voltstack Cluster on Alternate Region
//
// x-displayName: "Azure Voltstack Cluster on Alternate Region"
// Voltstack Cluster of single interface Azure nodes
type AzureVnetVoltstackClusterARType struct {
	// Azure Certified Hardware
	//
	// x-displayName: "Azure Certified Hardware"
	// x-example: "azure-byol-voltstack-combo"
	// x-required
	// Name for Azure certified hardware.
	AzureCertifiedHw string `protobuf:"bytes,1,opt,name=azure_certified_hw,json=azureCertifiedHw,proto3" json:"azure_certified_hw,omitempty"`
	// Node Information
	//
	// x-displayName: "Ingress Gateway (One Interface) Node information"
	// Only Single AZ or Three AZ(s) nodes are supported currently.
	Node *ves_io_schema_views1.AzureVnetOneInterfaceNodeARType `protobuf:"bytes,2,opt,name=node" json:"node,omitempty"`
	// Manage Network Policy
	//
	// x-displayName: "Manage Network Policy"
	// x-required
	// Manage Network Policy via this view
	//
	// Types that are valid to be assigned to NetworkPolicyChoice:
	//	*AzureVnetVoltstackClusterARType_NoNetworkPolicy
	//	*AzureVnetVoltstackClusterARType_ActiveNetworkPolicies
	NetworkPolicyChoice isAzureVnetVoltstackClusterARType_NetworkPolicyChoice `protobuf_oneof:"network_policy_choice"`
	// Manage Forward Proxy
	//
	// x-displayName: "Manage Forward Proxy"
	// x-required
	// Manage Forward Proxy for this site
	//
	// Types that are valid to be assigned to ForwardProxyChoice:
	//	*AzureVnetVoltstackClusterARType_NoForwardProxy
	//	*AzureVnetVoltstackClusterARType_ActiveForwardProxyPolicies
	//	*AzureVnetVoltstackClusterARType_ForwardProxyAllowAll
	ForwardProxyChoice isAzureVnetVoltstackClusterARType_ForwardProxyChoice `protobuf_oneof:"forward_proxy_choice"`
	// Manage Static Routes for Site Local Network
	//
	// x-displayName: "Manage Static Routes for Site Local Network"
	// x-required
	// Add static routes to site local network. Used to reach indirectly connected subnets.
	//
	// Types that are valid to be assigned to OutsideStaticRouteChoice:
	//	*AzureVnetVoltstackClusterARType_NoOutsideStaticRoutes
	//	*AzureVnetVoltstackClusterARType_OutsideStaticRoutes
	OutsideStaticRouteChoice isAzureVnetVoltstackClusterARType_OutsideStaticRouteChoice `protobuf_oneof:"outside_static_route_choice"`
	// Connect to Global Network
	//
	// x-displayName: "Select Global Networks to Connect"
	// x-required
	// Select global networks to connect to site local network
	//
	// Types that are valid to be assigned to GlobalNetworkChoice:
	//	*AzureVnetVoltstackClusterARType_NoGlobalNetwork
	//	*AzureVnetVoltstackClusterARType_GlobalNetworkList
	GlobalNetworkChoice isAzureVnetVoltstackClusterARType_GlobalNetworkChoice `protobuf_oneof:"global_network_choice"`
	// Site Local K8s API access
	//
	// x-displayName: "Site Local K8s API access"
	// x-required
	// Enable/Disable choice for site local K8s API access
	//
	// Types that are valid to be assigned to K8SClusterChoice:
	//	*AzureVnetVoltstackClusterARType_NoK8SCluster
	//	*AzureVnetVoltstackClusterARType_K8SCluster
	K8SClusterChoice isAzureVnetVoltstackClusterARType_K8SClusterChoice `protobuf_oneof:"k8s_cluster_choice"`
}

func (m *AzureVnetVoltstackClusterARType) Reset()      { *m = AzureVnetVoltstackClusterARType{} }
func (*AzureVnetVoltstackClusterARType) ProtoMessage() {}
func (*AzureVnetVoltstackClusterARType) Descriptor() ([]byte, []int) {
	return fileDescriptorTypes, []int{5}
}

type isAzureVnetVoltstackClusterARType_NetworkPolicyChoice interface {
	isAzureVnetVoltstackClusterARType_NetworkPolicyChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isAzureVnetVoltstackClusterARType_ForwardProxyChoice interface {
	isAzureVnetVoltstackClusterARType_ForwardProxyChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isAzureVnetVoltstackClusterARType_OutsideStaticRouteChoice interface {
	isAzureVnetVoltstackClusterARType_OutsideStaticRouteChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isAzureVnetVoltstackClusterARType_GlobalNetworkChoice interface {
	isAzureVnetVoltstackClusterARType_GlobalNetworkChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isAzureVnetVoltstackClusterARType_K8SClusterChoice interface {
	isAzureVnetVoltstackClusterARType_K8SClusterChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type AzureVnetVoltstackClusterARType_NoNetworkPolicy struct {
	NoNetworkPolicy *ves_io_schema4.Empty `protobuf:"bytes,4,opt,name=no_network_policy,json=noNetworkPolicy,oneof"`
}
type AzureVnetVoltstackClusterARType_ActiveNetworkPolicies struct {
	ActiveNetworkPolicies *ves_io_schema_network_firewall.ActiveNetworkPoliciesType `protobuf:"bytes,5,opt,name=active_network_policies,json=activeNetworkPolicies,oneof"`
}
type AzureVnetVoltstackClusterARType_NoForwardProxy struct {
	NoForwardProxy *ves_io_schema4.Empty `protobuf:"bytes,7,opt,name=no_forward_proxy,json=noForwardProxy,oneof"`
}
type AzureVnetVoltstackClusterARType_ActiveForwardProxyPolicies struct {
	ActiveForwardProxyPolicies *ves_io_schema_network_firewall.ActiveForwardProxyPoliciesType `protobuf:"bytes,8,opt,name=active_forward_proxy_policies,json=activeForwardProxyPolicies,oneof"`
}
type AzureVnetVoltstackClusterARType_ForwardProxyAllowAll struct {
	ForwardProxyAllowAll *ves_io_schema4.Empty `protobuf:"bytes,15,opt,name=forward_proxy_allow_all,json=forwardProxyAllowAll,oneof"`
}
type AzureVnetVoltstackClusterARType_NoOutsideStaticRoutes struct {
	NoOutsideStaticRoutes *ves_io_schema4.Empty `protobuf:"bytes,10,opt,name=no_outside_static_routes,json=noOutsideStaticRoutes,oneof"`
}
type AzureVnetVoltstackClusterARType_OutsideStaticRoutes struct {
	OutsideStaticRoutes *ves_io_schema_views1.SiteStaticRoutesListType `protobuf:"bytes,11,opt,name=outside_static_routes,json=outsideStaticRoutes,oneof"`
}
type AzureVnetVoltstackClusterARType_NoGlobalNetwork struct {
	NoGlobalNetwork *ves_io_schema4.Empty `protobuf:"bytes,13,opt,name=no_global_network,json=noGlobalNetwork,oneof"`
}
type AzureVnetVoltstackClusterARType_GlobalNetworkList struct {
	GlobalNetworkList *ves_io_schema_views1.GlobalNetworkConnectionListType `protobuf:"bytes,14,opt,name=global_network_list,json=globalNetworkList,oneof"`
}
type AzureVnetVoltstackClusterARType_NoK8SCluster struct {
	NoK8SCluster *ves_io_schema4.Empty `protobuf:"bytes,27,opt,name=no_k8s_cluster,json=noK8sCluster,oneof"`
}
type AzureVnetVoltstackClusterARType_K8SCluster struct {
	K8SCluster *ves_io_schema_views.ObjectRefType `protobuf:"bytes,28,opt,name=k8s_cluster,json=k8sCluster,oneof"`
}

func (*AzureVnetVoltstackClusterARType_NoNetworkPolicy) isAzureVnetVoltstackClusterARType_NetworkPolicyChoice() {
}
func (*AzureVnetVoltstackClusterARType_ActiveNetworkPolicies) isAzureVnetVoltstackClusterARType_NetworkPolicyChoice() {
}
func (*AzureVnetVoltstackClusterARType_NoForwardProxy) isAzureVnetVoltstackClusterARType_ForwardProxyChoice() {
}
func (*AzureVnetVoltstackClusterARType_ActiveForwardProxyPolicies) isAzureVnetVoltstackClusterARType_ForwardProxyChoice() {
}
func (*AzureVnetVoltstackClusterARType_ForwardProxyAllowAll) isAzureVnetVoltstackClusterARType_ForwardProxyChoice() {
}
func (*AzureVnetVoltstackClusterARType_NoOutsideStaticRoutes) isAzureVnetVoltstackClusterARType_OutsideStaticRouteChoice() {
}
func (*AzureVnetVoltstackClusterARType_OutsideStaticRoutes) isAzureVnetVoltstackClusterARType_OutsideStaticRouteChoice() {
}
func (*AzureVnetVoltstackClusterARType_NoGlobalNetwork) isAzureVnetVoltstackClusterARType_GlobalNetworkChoice() {
}
func (*AzureVnetVoltstackClusterARType_GlobalNetworkList) isAzureVnetVoltstackClusterARType_GlobalNetworkChoice() {
}
func (*AzureVnetVoltstackClusterARType_NoK8SCluster) isAzureVnetVoltstackClusterARType_K8SClusterChoice() {
}
func (*AzureVnetVoltstackClusterARType_K8SCluster) isAzureVnetVoltstackClusterARType_K8SClusterChoice() {
}

func (m *AzureVnetVoltstackClusterARType) GetNetworkPolicyChoice() isAzureVnetVoltstackClusterARType_NetworkPolicyChoice {
	if m != nil {
		return m.NetworkPolicyChoice
	}
	return nil
}
func (m *AzureVnetVoltstackClusterARType) GetForwardProxyChoice() isAzureVnetVoltstackClusterARType_ForwardProxyChoice {
	if m != nil {
		return m.ForwardProxyChoice
	}
	return nil
}
func (m *AzureVnetVoltstackClusterARType) GetOutsideStaticRouteChoice() isAzureVnetVoltstackClusterARType_OutsideStaticRouteChoice {
	if m != nil {
		return m.OutsideStaticRouteChoice
	}
	return nil
}
func (m *AzureVnetVoltstackClusterARType) GetGlobalNetworkChoice() isAzureVnetVoltstackClusterARType_GlobalNetworkChoice {
	if m != nil {
		return m.GlobalNetworkChoice
	}
	return nil
}
func (m *AzureVnetVoltstackClusterARType) GetK8SClusterChoice() isAzureVnetVoltstackClusterARType_K8SClusterChoice {
	if m != nil {
		return m.K8SClusterChoice
	}
	return nil
}

func (m *AzureVnetVoltstackClusterARType) GetAzureCertifiedHw() string {
	if m != nil {
		return m.AzureCertifiedHw
	}
	return ""
}

func (m *AzureVnetVoltstackClusterARType) GetNode() *ves_io_schema_views1.AzureVnetOneInterfaceNodeARType {
	if m != nil {
		return m.Node
	}
	return nil
}

func (m *AzureVnetVoltstackClusterARType) GetNoNetworkPolicy() *ves_io_schema4.Empty {
	if x, ok := m.GetNetworkPolicyChoice().(*AzureVnetVoltstackClusterARType_NoNetworkPolicy); ok {
		return x.NoNetworkPolicy
	}
	return nil
}

func (m *AzureVnetVoltstackClusterARType) GetActiveNetworkPolicies() *ves_io_schema_network_firewall.ActiveNetworkPoliciesType {
	if x, ok := m.GetNetworkPolicyChoice().(*AzureVnetVoltstackClusterARType_ActiveNetworkPolicies); ok {
		return x.ActiveNetworkPolicies
	}
	return nil
}

func (m *AzureVnetVoltstackClusterARType) GetNoForwardProxy() *ves_io_schema4.Empty {
	if x, ok := m.GetForwardProxyChoice().(*AzureVnetVoltstackClusterARType_NoForwardProxy); ok {
		return x.NoForwardProxy
	}
	return nil
}

func (m *AzureVnetVoltstackClusterARType) GetActiveForwardProxyPolicies() *ves_io_schema_network_firewall.ActiveForwardProxyPoliciesType {
	if x, ok := m.GetForwardProxyChoice().(*AzureVnetVoltstackClusterARType_ActiveForwardProxyPolicies); ok {
		return x.ActiveForwardProxyPolicies
	}
	return nil
}

func (m *AzureVnetVoltstackClusterARType) GetForwardProxyAllowAll() *ves_io_schema4.Empty {
	if x, ok := m.GetForwardProxyChoice().(*AzureVnetVoltstackClusterARType_ForwardProxyAllowAll); ok {
		return x.ForwardProxyAllowAll
	}
	return nil
}

func (m *AzureVnetVoltstackClusterARType) GetNoOutsideStaticRoutes() *ves_io_schema4.Empty {
	if x, ok := m.GetOutsideStaticRouteChoice().(*AzureVnetVoltstackClusterARType_NoOutsideStaticRoutes); ok {
		return x.NoOutsideStaticRoutes
	}
	return nil
}

func (m *AzureVnetVoltstackClusterARType) GetOutsideStaticRoutes() *ves_io_schema_views1.SiteStaticRoutesListType {
	if x, ok := m.GetOutsideStaticRouteChoice().(*AzureVnetVoltstackClusterARType_OutsideStaticRoutes); ok {
		return x.OutsideStaticRoutes
	}
	return nil
}

func (m *AzureVnetVoltstackClusterARType) GetNoGlobalNetwork() *ves_io_schema4.Empty {
	if x, ok := m.GetGlobalNetworkChoice().(*AzureVnetVoltstackClusterARType_NoGlobalNetwork); ok {
		return x.NoGlobalNetwork
	}
	return nil
}

func (m *AzureVnetVoltstackClusterARType) GetGlobalNetworkList() *ves_io_schema_views1.GlobalNetworkConnectionListType {
	if x, ok := m.GetGlobalNetworkChoice().(*AzureVnetVoltstackClusterARType_GlobalNetworkList); ok {
		return x.GlobalNetworkList
	}
	return nil
}

func (m *AzureVnetVoltstackClusterARType) GetNoK8SCluster() *ves_io_schema4.Empty {
	if x, ok := m.GetK8SClusterChoice().(*AzureVnetVoltstackClusterARType_NoK8SCluster); ok {
		return x.NoK8SCluster
	}
	return nil
}

func (m *AzureVnetVoltstackClusterARType) GetK8SCluster() *ves_io_schema_views.ObjectRefType {
	if x, ok := m.GetK8SClusterChoice().(*AzureVnetVoltstackClusterARType_K8SCluster); ok {
		return x.K8SCluster
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*AzureVnetVoltstackClusterARType) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _AzureVnetVoltstackClusterARType_OneofMarshaler, _AzureVnetVoltstackClusterARType_OneofUnmarshaler, _AzureVnetVoltstackClusterARType_OneofSizer, []interface{}{
		(*AzureVnetVoltstackClusterARType_NoNetworkPolicy)(nil),
		(*AzureVnetVoltstackClusterARType_ActiveNetworkPolicies)(nil),
		(*AzureVnetVoltstackClusterARType_NoForwardProxy)(nil),
		(*AzureVnetVoltstackClusterARType_ActiveForwardProxyPolicies)(nil),
		(*AzureVnetVoltstackClusterARType_ForwardProxyAllowAll)(nil),
		(*AzureVnetVoltstackClusterARType_NoOutsideStaticRoutes)(nil),
		(*AzureVnetVoltstackClusterARType_OutsideStaticRoutes)(nil),
		(*AzureVnetVoltstackClusterARType_NoGlobalNetwork)(nil),
		(*AzureVnetVoltstackClusterARType_GlobalNetworkList)(nil),
		(*AzureVnetVoltstackClusterARType_NoK8SCluster)(nil),
		(*AzureVnetVoltstackClusterARType_K8SCluster)(nil),
	}
}

func _AzureVnetVoltstackClusterARType_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*AzureVnetVoltstackClusterARType)
	// network_policy_choice
	switch x := m.NetworkPolicyChoice.(type) {
	case *AzureVnetVoltstackClusterARType_NoNetworkPolicy:
		_ = b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.NoNetworkPolicy); err != nil {
			return err
		}
	case *AzureVnetVoltstackClusterARType_ActiveNetworkPolicies:
		_ = b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ActiveNetworkPolicies); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("AzureVnetVoltstackClusterARType.NetworkPolicyChoice has unexpected type %T", x)
	}
	// forward_proxy_choice
	switch x := m.ForwardProxyChoice.(type) {
	case *AzureVnetVoltstackClusterARType_NoForwardProxy:
		_ = b.EncodeVarint(7<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.NoForwardProxy); err != nil {
			return err
		}
	case *AzureVnetVoltstackClusterARType_ActiveForwardProxyPolicies:
		_ = b.EncodeVarint(8<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ActiveForwardProxyPolicies); err != nil {
			return err
		}
	case *AzureVnetVoltstackClusterARType_ForwardProxyAllowAll:
		_ = b.EncodeVarint(15<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ForwardProxyAllowAll); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("AzureVnetVoltstackClusterARType.ForwardProxyChoice has unexpected type %T", x)
	}
	// outside_static_route_choice
	switch x := m.OutsideStaticRouteChoice.(type) {
	case *AzureVnetVoltstackClusterARType_NoOutsideStaticRoutes:
		_ = b.EncodeVarint(10<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.NoOutsideStaticRoutes); err != nil {
			return err
		}
	case *AzureVnetVoltstackClusterARType_OutsideStaticRoutes:
		_ = b.EncodeVarint(11<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.OutsideStaticRoutes); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("AzureVnetVoltstackClusterARType.OutsideStaticRouteChoice has unexpected type %T", x)
	}
	// global_network_choice
	switch x := m.GlobalNetworkChoice.(type) {
	case *AzureVnetVoltstackClusterARType_NoGlobalNetwork:
		_ = b.EncodeVarint(13<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.NoGlobalNetwork); err != nil {
			return err
		}
	case *AzureVnetVoltstackClusterARType_GlobalNetworkList:
		_ = b.EncodeVarint(14<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.GlobalNetworkList); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("AzureVnetVoltstackClusterARType.GlobalNetworkChoice has unexpected type %T", x)
	}
	// k8s_cluster_choice
	switch x := m.K8SClusterChoice.(type) {
	case *AzureVnetVoltstackClusterARType_NoK8SCluster:
		_ = b.EncodeVarint(27<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.NoK8SCluster); err != nil {
			return err
		}
	case *AzureVnetVoltstackClusterARType_K8SCluster:
		_ = b.EncodeVarint(28<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.K8SCluster); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("AzureVnetVoltstackClusterARType.K8SClusterChoice has unexpected type %T", x)
	}
	return nil
}

func _AzureVnetVoltstackClusterARType_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*AzureVnetVoltstackClusterARType)
	switch tag {
	case 4: // network_policy_choice.no_network_policy
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.NetworkPolicyChoice = &AzureVnetVoltstackClusterARType_NoNetworkPolicy{msg}
		return true, err
	case 5: // network_policy_choice.active_network_policies
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema_network_firewall.ActiveNetworkPoliciesType)
		err := b.DecodeMessage(msg)
		m.NetworkPolicyChoice = &AzureVnetVoltstackClusterARType_ActiveNetworkPolicies{msg}
		return true, err
	case 7: // forward_proxy_choice.no_forward_proxy
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.ForwardProxyChoice = &AzureVnetVoltstackClusterARType_NoForwardProxy{msg}
		return true, err
	case 8: // forward_proxy_choice.active_forward_proxy_policies
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema_network_firewall.ActiveForwardProxyPoliciesType)
		err := b.DecodeMessage(msg)
		m.ForwardProxyChoice = &AzureVnetVoltstackClusterARType_ActiveForwardProxyPolicies{msg}
		return true, err
	case 15: // forward_proxy_choice.forward_proxy_allow_all
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.ForwardProxyChoice = &AzureVnetVoltstackClusterARType_ForwardProxyAllowAll{msg}
		return true, err
	case 10: // outside_static_route_choice.no_outside_static_routes
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.OutsideStaticRouteChoice = &AzureVnetVoltstackClusterARType_NoOutsideStaticRoutes{msg}
		return true, err
	case 11: // outside_static_route_choice.outside_static_routes
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema_views1.SiteStaticRoutesListType)
		err := b.DecodeMessage(msg)
		m.OutsideStaticRouteChoice = &AzureVnetVoltstackClusterARType_OutsideStaticRoutes{msg}
		return true, err
	case 13: // global_network_choice.no_global_network
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.GlobalNetworkChoice = &AzureVnetVoltstackClusterARType_NoGlobalNetwork{msg}
		return true, err
	case 14: // global_network_choice.global_network_list
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema_views1.GlobalNetworkConnectionListType)
		err := b.DecodeMessage(msg)
		m.GlobalNetworkChoice = &AzureVnetVoltstackClusterARType_GlobalNetworkList{msg}
		return true, err
	case 27: // k8s_cluster_choice.no_k8s_cluster
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.K8SClusterChoice = &AzureVnetVoltstackClusterARType_NoK8SCluster{msg}
		return true, err
	case 28: // k8s_cluster_choice.k8s_cluster
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema_views.ObjectRefType)
		err := b.DecodeMessage(msg)
		m.K8SClusterChoice = &AzureVnetVoltstackClusterARType_K8SCluster{msg}
		return true, err
	default:
		return false, nil
	}
}

func _AzureVnetVoltstackClusterARType_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*AzureVnetVoltstackClusterARType)
	// network_policy_choice
	switch x := m.NetworkPolicyChoice.(type) {
	case *AzureVnetVoltstackClusterARType_NoNetworkPolicy:
		s := proto.Size(x.NoNetworkPolicy)
		n += proto.SizeVarint(4<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *AzureVnetVoltstackClusterARType_ActiveNetworkPolicies:
		s := proto.Size(x.ActiveNetworkPolicies)
		n += proto.SizeVarint(5<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	// forward_proxy_choice
	switch x := m.ForwardProxyChoice.(type) {
	case *AzureVnetVoltstackClusterARType_NoForwardProxy:
		s := proto.Size(x.NoForwardProxy)
		n += proto.SizeVarint(7<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *AzureVnetVoltstackClusterARType_ActiveForwardProxyPolicies:
		s := proto.Size(x.ActiveForwardProxyPolicies)
		n += proto.SizeVarint(8<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *AzureVnetVoltstackClusterARType_ForwardProxyAllowAll:
		s := proto.Size(x.ForwardProxyAllowAll)
		n += proto.SizeVarint(15<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	// outside_static_route_choice
	switch x := m.OutsideStaticRouteChoice.(type) {
	case *AzureVnetVoltstackClusterARType_NoOutsideStaticRoutes:
		s := proto.Size(x.NoOutsideStaticRoutes)
		n += proto.SizeVarint(10<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *AzureVnetVoltstackClusterARType_OutsideStaticRoutes:
		s := proto.Size(x.OutsideStaticRoutes)
		n += proto.SizeVarint(11<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	// global_network_choice
	switch x := m.GlobalNetworkChoice.(type) {
	case *AzureVnetVoltstackClusterARType_NoGlobalNetwork:
		s := proto.Size(x.NoGlobalNetwork)
		n += proto.SizeVarint(13<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *AzureVnetVoltstackClusterARType_GlobalNetworkList:
		s := proto.Size(x.GlobalNetworkList)
		n += proto.SizeVarint(14<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	// k8s_cluster_choice
	switch x := m.K8SClusterChoice.(type) {
	case *AzureVnetVoltstackClusterARType_NoK8SCluster:
		s := proto.Size(x.NoK8SCluster)
		n += proto.SizeVarint(27<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *AzureVnetVoltstackClusterARType_K8SCluster:
		s := proto.Size(x.K8SCluster)
		n += proto.SizeVarint(28<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// Azure Ingress Gateway
//
// x-displayName: "Azure Ingress Gateway"
// Single interface Azure ingress site
type AzureVnetIngressGwReplaceType struct {
}

func (m *AzureVnetIngressGwReplaceType) Reset()      { *m = AzureVnetIngressGwReplaceType{} }
func (*AzureVnetIngressGwReplaceType) ProtoMessage() {}
func (*AzureVnetIngressGwReplaceType) Descriptor() ([]byte, []int) {
	return fileDescriptorTypes, []int{6}
}

// Azure Ingress Egress Gateway
//
// x-displayName: "Azure Ingress/Egress Gateway"
// Two interface Azure ingress/egress site
type AzureVnetIngressEgressGwReplaceType struct {
	// Manage Network Policy
	//
	// x-displayName: "Manage Network Policy"
	// x-required
	// Manage Network Policy via this view
	//
	// Types that are valid to be assigned to NetworkPolicyChoice:
	//	*AzureVnetIngressEgressGwReplaceType_NoNetworkPolicy
	//	*AzureVnetIngressEgressGwReplaceType_ActiveNetworkPolicies
	NetworkPolicyChoice isAzureVnetIngressEgressGwReplaceType_NetworkPolicyChoice `protobuf_oneof:"network_policy_choice"`
	// Manage Forward Proxy
	//
	// x-displayName: "Manage Forward Proxy"
	// x-required
	// Manage Forward Proxy for this site
	//
	// Types that are valid to be assigned to ForwardProxyChoice:
	//	*AzureVnetIngressEgressGwReplaceType_NoForwardProxy
	//	*AzureVnetIngressEgressGwReplaceType_ActiveForwardProxyPolicies
	//	*AzureVnetIngressEgressGwReplaceType_ForwardProxyAllowAll
	ForwardProxyChoice isAzureVnetIngressEgressGwReplaceType_ForwardProxyChoice `protobuf_oneof:"forward_proxy_choice"`
	// Manage Static Routes for Inside Network
	//
	// x-displayName: "Manage Static Routes for Inside Network"
	// x-required
	// Add static routes to inside network. Used to reach indirectly connected subnets.
	//
	// Types that are valid to be assigned to InsideStaticRouteChoice:
	//	*AzureVnetIngressEgressGwReplaceType_NoInsideStaticRoutes
	//	*AzureVnetIngressEgressGwReplaceType_InsideStaticRoutes
	InsideStaticRouteChoice isAzureVnetIngressEgressGwReplaceType_InsideStaticRouteChoice `protobuf_oneof:"inside_static_route_choice"`
	// Manage Static Routes for Outside Network
	//
	// x-displayName: "Manage Static Routes for Outside Network"
	// x-required
	// Add static routes to outside network. Used to reach indirectly connected subnets.
	//
	// Types that are valid to be assigned to OutsideStaticRouteChoice:
	//	*AzureVnetIngressEgressGwReplaceType_NoOutsideStaticRoutes
	//	*AzureVnetIngressEgressGwReplaceType_OutsideStaticRoutes
	OutsideStaticRouteChoice isAzureVnetIngressEgressGwReplaceType_OutsideStaticRouteChoice `protobuf_oneof:"outside_static_route_choice"`
	// Connect to Global Network
	//
	// x-displayName: "Select Global Networks to Connect"
	// x-required
	// Select global networks to connect to site local network
	//
	// Types that are valid to be assigned to GlobalNetworkChoice:
	//	*AzureVnetIngressEgressGwReplaceType_NoGlobalNetwork
	//	*AzureVnetIngressEgressGwReplaceType_GlobalNetworkList
	GlobalNetworkChoice isAzureVnetIngressEgressGwReplaceType_GlobalNetworkChoice `protobuf_oneof:"global_network_choice"`
}

func (m *AzureVnetIngressEgressGwReplaceType) Reset()      { *m = AzureVnetIngressEgressGwReplaceType{} }
func (*AzureVnetIngressEgressGwReplaceType) ProtoMessage() {}
func (*AzureVnetIngressEgressGwReplaceType) Descriptor() ([]byte, []int) {
	return fileDescriptorTypes, []int{7}
}

type isAzureVnetIngressEgressGwReplaceType_NetworkPolicyChoice interface {
	isAzureVnetIngressEgressGwReplaceType_NetworkPolicyChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isAzureVnetIngressEgressGwReplaceType_ForwardProxyChoice interface {
	isAzureVnetIngressEgressGwReplaceType_ForwardProxyChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isAzureVnetIngressEgressGwReplaceType_InsideStaticRouteChoice interface {
	isAzureVnetIngressEgressGwReplaceType_InsideStaticRouteChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isAzureVnetIngressEgressGwReplaceType_OutsideStaticRouteChoice interface {
	isAzureVnetIngressEgressGwReplaceType_OutsideStaticRouteChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isAzureVnetIngressEgressGwReplaceType_GlobalNetworkChoice interface {
	isAzureVnetIngressEgressGwReplaceType_GlobalNetworkChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type AzureVnetIngressEgressGwReplaceType_NoNetworkPolicy struct {
	NoNetworkPolicy *ves_io_schema4.Empty `protobuf:"bytes,2,opt,name=no_network_policy,json=noNetworkPolicy,oneof"`
}
type AzureVnetIngressEgressGwReplaceType_ActiveNetworkPolicies struct {
	ActiveNetworkPolicies *ves_io_schema_network_firewall.ActiveNetworkPoliciesType `protobuf:"bytes,10,opt,name=active_network_policies,json=activeNetworkPolicies,oneof"`
}
type AzureVnetIngressEgressGwReplaceType_NoForwardProxy struct {
	NoForwardProxy *ves_io_schema4.Empty `protobuf:"bytes,4,opt,name=no_forward_proxy,json=noForwardProxy,oneof"`
}
type AzureVnetIngressEgressGwReplaceType_ActiveForwardProxyPolicies struct {
	ActiveForwardProxyPolicies *ves_io_schema_network_firewall.ActiveForwardProxyPoliciesType `protobuf:"bytes,9,opt,name=active_forward_proxy_policies,json=activeForwardProxyPolicies,oneof"`
}
type AzureVnetIngressEgressGwReplaceType_ForwardProxyAllowAll struct {
	ForwardProxyAllowAll *ves_io_schema4.Empty `protobuf:"bytes,20,opt,name=forward_proxy_allow_all,json=forwardProxyAllowAll,oneof"`
}
type AzureVnetIngressEgressGwReplaceType_NoInsideStaticRoutes struct {
	NoInsideStaticRoutes *ves_io_schema4.Empty `protobuf:"bytes,12,opt,name=no_inside_static_routes,json=noInsideStaticRoutes,oneof"`
}
type AzureVnetIngressEgressGwReplaceType_InsideStaticRoutes struct {
	InsideStaticRoutes *ves_io_schema_views1.SiteStaticRoutesListType `protobuf:"bytes,13,opt,name=inside_static_routes,json=insideStaticRoutes,oneof"`
}
type AzureVnetIngressEgressGwReplaceType_NoOutsideStaticRoutes struct {
	NoOutsideStaticRoutes *ves_io_schema4.Empty `protobuf:"bytes,15,opt,name=no_outside_static_routes,json=noOutsideStaticRoutes,oneof"`
}
type AzureVnetIngressEgressGwReplaceType_OutsideStaticRoutes struct {
	OutsideStaticRoutes *ves_io_schema_views1.SiteStaticRoutesListType `protobuf:"bytes,16,opt,name=outside_static_routes,json=outsideStaticRoutes,oneof"`
}
type AzureVnetIngressEgressGwReplaceType_NoGlobalNetwork struct {
	NoGlobalNetwork *ves_io_schema4.Empty `protobuf:"bytes,18,opt,name=no_global_network,json=noGlobalNetwork,oneof"`
}
type AzureVnetIngressEgressGwReplaceType_GlobalNetworkList struct {
	GlobalNetworkList *ves_io_schema_views1.GlobalNetworkConnectionListType `protobuf:"bytes,19,opt,name=global_network_list,json=globalNetworkList,oneof"`
}

func (*AzureVnetIngressEgressGwReplaceType_NoNetworkPolicy) isAzureVnetIngressEgressGwReplaceType_NetworkPolicyChoice() {
}
func (*AzureVnetIngressEgressGwReplaceType_ActiveNetworkPolicies) isAzureVnetIngressEgressGwReplaceType_NetworkPolicyChoice() {
}
func (*AzureVnetIngressEgressGwReplaceType_NoForwardProxy) isAzureVnetIngressEgressGwReplaceType_ForwardProxyChoice() {
}
func (*AzureVnetIngressEgressGwReplaceType_ActiveForwardProxyPolicies) isAzureVnetIngressEgressGwReplaceType_ForwardProxyChoice() {
}
func (*AzureVnetIngressEgressGwReplaceType_ForwardProxyAllowAll) isAzureVnetIngressEgressGwReplaceType_ForwardProxyChoice() {
}
func (*AzureVnetIngressEgressGwReplaceType_NoInsideStaticRoutes) isAzureVnetIngressEgressGwReplaceType_InsideStaticRouteChoice() {
}
func (*AzureVnetIngressEgressGwReplaceType_InsideStaticRoutes) isAzureVnetIngressEgressGwReplaceType_InsideStaticRouteChoice() {
}
func (*AzureVnetIngressEgressGwReplaceType_NoOutsideStaticRoutes) isAzureVnetIngressEgressGwReplaceType_OutsideStaticRouteChoice() {
}
func (*AzureVnetIngressEgressGwReplaceType_OutsideStaticRoutes) isAzureVnetIngressEgressGwReplaceType_OutsideStaticRouteChoice() {
}
func (*AzureVnetIngressEgressGwReplaceType_NoGlobalNetwork) isAzureVnetIngressEgressGwReplaceType_GlobalNetworkChoice() {
}
func (*AzureVnetIngressEgressGwReplaceType_GlobalNetworkList) isAzureVnetIngressEgressGwReplaceType_GlobalNetworkChoice() {
}

func (m *AzureVnetIngressEgressGwReplaceType) GetNetworkPolicyChoice() isAzureVnetIngressEgressGwReplaceType_NetworkPolicyChoice {
	if m != nil {
		return m.NetworkPolicyChoice
	}
	return nil
}
func (m *AzureVnetIngressEgressGwReplaceType) GetForwardProxyChoice() isAzureVnetIngressEgressGwReplaceType_ForwardProxyChoice {
	if m != nil {
		return m.ForwardProxyChoice
	}
	return nil
}
func (m *AzureVnetIngressEgressGwReplaceType) GetInsideStaticRouteChoice() isAzureVnetIngressEgressGwReplaceType_InsideStaticRouteChoice {
	if m != nil {
		return m.InsideStaticRouteChoice
	}
	return nil
}
func (m *AzureVnetIngressEgressGwReplaceType) GetOutsideStaticRouteChoice() isAzureVnetIngressEgressGwReplaceType_OutsideStaticRouteChoice {
	if m != nil {
		return m.OutsideStaticRouteChoice
	}
	return nil
}
func (m *AzureVnetIngressEgressGwReplaceType) GetGlobalNetworkChoice() isAzureVnetIngressEgressGwReplaceType_GlobalNetworkChoice {
	if m != nil {
		return m.GlobalNetworkChoice
	}
	return nil
}

func (m *AzureVnetIngressEgressGwReplaceType) GetNoNetworkPolicy() *ves_io_schema4.Empty {
	if x, ok := m.GetNetworkPolicyChoice().(*AzureVnetIngressEgressGwReplaceType_NoNetworkPolicy); ok {
		return x.NoNetworkPolicy
	}
	return nil
}

func (m *AzureVnetIngressEgressGwReplaceType) GetActiveNetworkPolicies() *ves_io_schema_network_firewall.ActiveNetworkPoliciesType {
	if x, ok := m.GetNetworkPolicyChoice().(*AzureVnetIngressEgressGwReplaceType_ActiveNetworkPolicies); ok {
		return x.ActiveNetworkPolicies
	}
	return nil
}

func (m *AzureVnetIngressEgressGwReplaceType) GetNoForwardProxy() *ves_io_schema4.Empty {
	if x, ok := m.GetForwardProxyChoice().(*AzureVnetIngressEgressGwReplaceType_NoForwardProxy); ok {
		return x.NoForwardProxy
	}
	return nil
}

func (m *AzureVnetIngressEgressGwReplaceType) GetActiveForwardProxyPolicies() *ves_io_schema_network_firewall.ActiveForwardProxyPoliciesType {
	if x, ok := m.GetForwardProxyChoice().(*AzureVnetIngressEgressGwReplaceType_ActiveForwardProxyPolicies); ok {
		return x.ActiveForwardProxyPolicies
	}
	return nil
}

func (m *AzureVnetIngressEgressGwReplaceType) GetForwardProxyAllowAll() *ves_io_schema4.Empty {
	if x, ok := m.GetForwardProxyChoice().(*AzureVnetIngressEgressGwReplaceType_ForwardProxyAllowAll); ok {
		return x.ForwardProxyAllowAll
	}
	return nil
}

func (m *AzureVnetIngressEgressGwReplaceType) GetNoInsideStaticRoutes() *ves_io_schema4.Empty {
	if x, ok := m.GetInsideStaticRouteChoice().(*AzureVnetIngressEgressGwReplaceType_NoInsideStaticRoutes); ok {
		return x.NoInsideStaticRoutes
	}
	return nil
}

func (m *AzureVnetIngressEgressGwReplaceType) GetInsideStaticRoutes() *ves_io_schema_views1.SiteStaticRoutesListType {
	if x, ok := m.GetInsideStaticRouteChoice().(*AzureVnetIngressEgressGwReplaceType_InsideStaticRoutes); ok {
		return x.InsideStaticRoutes
	}
	return nil
}

func (m *AzureVnetIngressEgressGwReplaceType) GetNoOutsideStaticRoutes() *ves_io_schema4.Empty {
	if x, ok := m.GetOutsideStaticRouteChoice().(*AzureVnetIngressEgressGwReplaceType_NoOutsideStaticRoutes); ok {
		return x.NoOutsideStaticRoutes
	}
	return nil
}

func (m *AzureVnetIngressEgressGwReplaceType) GetOutsideStaticRoutes() *ves_io_schema_views1.SiteStaticRoutesListType {
	if x, ok := m.GetOutsideStaticRouteChoice().(*AzureVnetIngressEgressGwReplaceType_OutsideStaticRoutes); ok {
		return x.OutsideStaticRoutes
	}
	return nil
}

func (m *AzureVnetIngressEgressGwReplaceType) GetNoGlobalNetwork() *ves_io_schema4.Empty {
	if x, ok := m.GetGlobalNetworkChoice().(*AzureVnetIngressEgressGwReplaceType_NoGlobalNetwork); ok {
		return x.NoGlobalNetwork
	}
	return nil
}

func (m *AzureVnetIngressEgressGwReplaceType) GetGlobalNetworkList() *ves_io_schema_views1.GlobalNetworkConnectionListType {
	if x, ok := m.GetGlobalNetworkChoice().(*AzureVnetIngressEgressGwReplaceType_GlobalNetworkList); ok {
		return x.GlobalNetworkList
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*AzureVnetIngressEgressGwReplaceType) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _AzureVnetIngressEgressGwReplaceType_OneofMarshaler, _AzureVnetIngressEgressGwReplaceType_OneofUnmarshaler, _AzureVnetIngressEgressGwReplaceType_OneofSizer, []interface{}{
		(*AzureVnetIngressEgressGwReplaceType_NoNetworkPolicy)(nil),
		(*AzureVnetIngressEgressGwReplaceType_ActiveNetworkPolicies)(nil),
		(*AzureVnetIngressEgressGwReplaceType_NoForwardProxy)(nil),
		(*AzureVnetIngressEgressGwReplaceType_ActiveForwardProxyPolicies)(nil),
		(*AzureVnetIngressEgressGwReplaceType_ForwardProxyAllowAll)(nil),
		(*AzureVnetIngressEgressGwReplaceType_NoInsideStaticRoutes)(nil),
		(*AzureVnetIngressEgressGwReplaceType_InsideStaticRoutes)(nil),
		(*AzureVnetIngressEgressGwReplaceType_NoOutsideStaticRoutes)(nil),
		(*AzureVnetIngressEgressGwReplaceType_OutsideStaticRoutes)(nil),
		(*AzureVnetIngressEgressGwReplaceType_NoGlobalNetwork)(nil),
		(*AzureVnetIngressEgressGwReplaceType_GlobalNetworkList)(nil),
	}
}

func _AzureVnetIngressEgressGwReplaceType_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*AzureVnetIngressEgressGwReplaceType)
	// network_policy_choice
	switch x := m.NetworkPolicyChoice.(type) {
	case *AzureVnetIngressEgressGwReplaceType_NoNetworkPolicy:
		_ = b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.NoNetworkPolicy); err != nil {
			return err
		}
	case *AzureVnetIngressEgressGwReplaceType_ActiveNetworkPolicies:
		_ = b.EncodeVarint(10<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ActiveNetworkPolicies); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("AzureVnetIngressEgressGwReplaceType.NetworkPolicyChoice has unexpected type %T", x)
	}
	// forward_proxy_choice
	switch x := m.ForwardProxyChoice.(type) {
	case *AzureVnetIngressEgressGwReplaceType_NoForwardProxy:
		_ = b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.NoForwardProxy); err != nil {
			return err
		}
	case *AzureVnetIngressEgressGwReplaceType_ActiveForwardProxyPolicies:
		_ = b.EncodeVarint(9<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ActiveForwardProxyPolicies); err != nil {
			return err
		}
	case *AzureVnetIngressEgressGwReplaceType_ForwardProxyAllowAll:
		_ = b.EncodeVarint(20<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ForwardProxyAllowAll); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("AzureVnetIngressEgressGwReplaceType.ForwardProxyChoice has unexpected type %T", x)
	}
	// inside_static_route_choice
	switch x := m.InsideStaticRouteChoice.(type) {
	case *AzureVnetIngressEgressGwReplaceType_NoInsideStaticRoutes:
		_ = b.EncodeVarint(12<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.NoInsideStaticRoutes); err != nil {
			return err
		}
	case *AzureVnetIngressEgressGwReplaceType_InsideStaticRoutes:
		_ = b.EncodeVarint(13<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.InsideStaticRoutes); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("AzureVnetIngressEgressGwReplaceType.InsideStaticRouteChoice has unexpected type %T", x)
	}
	// outside_static_route_choice
	switch x := m.OutsideStaticRouteChoice.(type) {
	case *AzureVnetIngressEgressGwReplaceType_NoOutsideStaticRoutes:
		_ = b.EncodeVarint(15<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.NoOutsideStaticRoutes); err != nil {
			return err
		}
	case *AzureVnetIngressEgressGwReplaceType_OutsideStaticRoutes:
		_ = b.EncodeVarint(16<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.OutsideStaticRoutes); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("AzureVnetIngressEgressGwReplaceType.OutsideStaticRouteChoice has unexpected type %T", x)
	}
	// global_network_choice
	switch x := m.GlobalNetworkChoice.(type) {
	case *AzureVnetIngressEgressGwReplaceType_NoGlobalNetwork:
		_ = b.EncodeVarint(18<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.NoGlobalNetwork); err != nil {
			return err
		}
	case *AzureVnetIngressEgressGwReplaceType_GlobalNetworkList:
		_ = b.EncodeVarint(19<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.GlobalNetworkList); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("AzureVnetIngressEgressGwReplaceType.GlobalNetworkChoice has unexpected type %T", x)
	}
	return nil
}

func _AzureVnetIngressEgressGwReplaceType_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*AzureVnetIngressEgressGwReplaceType)
	switch tag {
	case 2: // network_policy_choice.no_network_policy
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.NetworkPolicyChoice = &AzureVnetIngressEgressGwReplaceType_NoNetworkPolicy{msg}
		return true, err
	case 10: // network_policy_choice.active_network_policies
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema_network_firewall.ActiveNetworkPoliciesType)
		err := b.DecodeMessage(msg)
		m.NetworkPolicyChoice = &AzureVnetIngressEgressGwReplaceType_ActiveNetworkPolicies{msg}
		return true, err
	case 4: // forward_proxy_choice.no_forward_proxy
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.ForwardProxyChoice = &AzureVnetIngressEgressGwReplaceType_NoForwardProxy{msg}
		return true, err
	case 9: // forward_proxy_choice.active_forward_proxy_policies
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema_network_firewall.ActiveForwardProxyPoliciesType)
		err := b.DecodeMessage(msg)
		m.ForwardProxyChoice = &AzureVnetIngressEgressGwReplaceType_ActiveForwardProxyPolicies{msg}
		return true, err
	case 20: // forward_proxy_choice.forward_proxy_allow_all
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.ForwardProxyChoice = &AzureVnetIngressEgressGwReplaceType_ForwardProxyAllowAll{msg}
		return true, err
	case 12: // inside_static_route_choice.no_inside_static_routes
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.InsideStaticRouteChoice = &AzureVnetIngressEgressGwReplaceType_NoInsideStaticRoutes{msg}
		return true, err
	case 13: // inside_static_route_choice.inside_static_routes
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema_views1.SiteStaticRoutesListType)
		err := b.DecodeMessage(msg)
		m.InsideStaticRouteChoice = &AzureVnetIngressEgressGwReplaceType_InsideStaticRoutes{msg}
		return true, err
	case 15: // outside_static_route_choice.no_outside_static_routes
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.OutsideStaticRouteChoice = &AzureVnetIngressEgressGwReplaceType_NoOutsideStaticRoutes{msg}
		return true, err
	case 16: // outside_static_route_choice.outside_static_routes
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema_views1.SiteStaticRoutesListType)
		err := b.DecodeMessage(msg)
		m.OutsideStaticRouteChoice = &AzureVnetIngressEgressGwReplaceType_OutsideStaticRoutes{msg}
		return true, err
	case 18: // global_network_choice.no_global_network
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.GlobalNetworkChoice = &AzureVnetIngressEgressGwReplaceType_NoGlobalNetwork{msg}
		return true, err
	case 19: // global_network_choice.global_network_list
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema_views1.GlobalNetworkConnectionListType)
		err := b.DecodeMessage(msg)
		m.GlobalNetworkChoice = &AzureVnetIngressEgressGwReplaceType_GlobalNetworkList{msg}
		return true, err
	default:
		return false, nil
	}
}

func _AzureVnetIngressEgressGwReplaceType_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*AzureVnetIngressEgressGwReplaceType)
	// network_policy_choice
	switch x := m.NetworkPolicyChoice.(type) {
	case *AzureVnetIngressEgressGwReplaceType_NoNetworkPolicy:
		s := proto.Size(x.NoNetworkPolicy)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *AzureVnetIngressEgressGwReplaceType_ActiveNetworkPolicies:
		s := proto.Size(x.ActiveNetworkPolicies)
		n += proto.SizeVarint(10<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	// forward_proxy_choice
	switch x := m.ForwardProxyChoice.(type) {
	case *AzureVnetIngressEgressGwReplaceType_NoForwardProxy:
		s := proto.Size(x.NoForwardProxy)
		n += proto.SizeVarint(4<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *AzureVnetIngressEgressGwReplaceType_ActiveForwardProxyPolicies:
		s := proto.Size(x.ActiveForwardProxyPolicies)
		n += proto.SizeVarint(9<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *AzureVnetIngressEgressGwReplaceType_ForwardProxyAllowAll:
		s := proto.Size(x.ForwardProxyAllowAll)
		n += proto.SizeVarint(20<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	// inside_static_route_choice
	switch x := m.InsideStaticRouteChoice.(type) {
	case *AzureVnetIngressEgressGwReplaceType_NoInsideStaticRoutes:
		s := proto.Size(x.NoInsideStaticRoutes)
		n += proto.SizeVarint(12<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *AzureVnetIngressEgressGwReplaceType_InsideStaticRoutes:
		s := proto.Size(x.InsideStaticRoutes)
		n += proto.SizeVarint(13<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	// outside_static_route_choice
	switch x := m.OutsideStaticRouteChoice.(type) {
	case *AzureVnetIngressEgressGwReplaceType_NoOutsideStaticRoutes:
		s := proto.Size(x.NoOutsideStaticRoutes)
		n += proto.SizeVarint(15<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *AzureVnetIngressEgressGwReplaceType_OutsideStaticRoutes:
		s := proto.Size(x.OutsideStaticRoutes)
		n += proto.SizeVarint(16<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	// global_network_choice
	switch x := m.GlobalNetworkChoice.(type) {
	case *AzureVnetIngressEgressGwReplaceType_NoGlobalNetwork:
		s := proto.Size(x.NoGlobalNetwork)
		n += proto.SizeVarint(18<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *AzureVnetIngressEgressGwReplaceType_GlobalNetworkList:
		s := proto.Size(x.GlobalNetworkList)
		n += proto.SizeVarint(19<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// Azure VoltStack Cluster
//
// x-displayName: "Azure VoltStack Cluster"
// Voltstack cluster of single interface Azure nodes
type AzureVnetVoltstackClusterReplaceType struct {
	// Manage Network Policy
	//
	// x-displayName: "Manage Network Policy"
	// x-required
	// Manage Network Policy via this view
	//
	// Types that are valid to be assigned to NetworkPolicyChoice:
	//	*AzureVnetVoltstackClusterReplaceType_NoNetworkPolicy
	//	*AzureVnetVoltstackClusterReplaceType_ActiveNetworkPolicies
	NetworkPolicyChoice isAzureVnetVoltstackClusterReplaceType_NetworkPolicyChoice `protobuf_oneof:"network_policy_choice"`
	// Manage Forward Proxy
	//
	// x-displayName: "Manage Forward Proxy"
	// x-required
	// Manage Forward Proxy for this site
	//
	// Types that are valid to be assigned to ForwardProxyChoice:
	//	*AzureVnetVoltstackClusterReplaceType_NoForwardProxy
	//	*AzureVnetVoltstackClusterReplaceType_ActiveForwardProxyPolicies
	//	*AzureVnetVoltstackClusterReplaceType_ForwardProxyAllowAll
	ForwardProxyChoice isAzureVnetVoltstackClusterReplaceType_ForwardProxyChoice `protobuf_oneof:"forward_proxy_choice"`
	// Manage Static Routes for Site Local Network
	//
	// x-displayName: "Manage Static Routes for Site Local Network"
	// x-required
	// Add static routes to site local network. Used to reach indirectly connected subnets.
	//
	// Types that are valid to be assigned to OutsideStaticRouteChoice:
	//	*AzureVnetVoltstackClusterReplaceType_NoOutsideStaticRoutes
	//	*AzureVnetVoltstackClusterReplaceType_OutsideStaticRoutes
	OutsideStaticRouteChoice isAzureVnetVoltstackClusterReplaceType_OutsideStaticRouteChoice `protobuf_oneof:"outside_static_route_choice"`
	// Connect to Global Network
	//
	// x-displayName: "Select Global Networks to Connect"
	// x-required
	// Select global networks to connect to inside or outside network
	//
	// Types that are valid to be assigned to GlobalNetworkChoice:
	//	*AzureVnetVoltstackClusterReplaceType_NoGlobalNetwork
	//	*AzureVnetVoltstackClusterReplaceType_GlobalNetworkList
	GlobalNetworkChoice isAzureVnetVoltstackClusterReplaceType_GlobalNetworkChoice `protobuf_oneof:"global_network_choice"`
}

func (m *AzureVnetVoltstackClusterReplaceType) Reset()      { *m = AzureVnetVoltstackClusterReplaceType{} }
func (*AzureVnetVoltstackClusterReplaceType) ProtoMessage() {}
func (*AzureVnetVoltstackClusterReplaceType) Descriptor() ([]byte, []int) {
	return fileDescriptorTypes, []int{8}
}

type isAzureVnetVoltstackClusterReplaceType_NetworkPolicyChoice interface {
	isAzureVnetVoltstackClusterReplaceType_NetworkPolicyChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isAzureVnetVoltstackClusterReplaceType_ForwardProxyChoice interface {
	isAzureVnetVoltstackClusterReplaceType_ForwardProxyChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isAzureVnetVoltstackClusterReplaceType_OutsideStaticRouteChoice interface {
	isAzureVnetVoltstackClusterReplaceType_OutsideStaticRouteChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isAzureVnetVoltstackClusterReplaceType_GlobalNetworkChoice interface {
	isAzureVnetVoltstackClusterReplaceType_GlobalNetworkChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type AzureVnetVoltstackClusterReplaceType_NoNetworkPolicy struct {
	NoNetworkPolicy *ves_io_schema4.Empty `protobuf:"bytes,4,opt,name=no_network_policy,json=noNetworkPolicy,oneof"`
}
type AzureVnetVoltstackClusterReplaceType_ActiveNetworkPolicies struct {
	ActiveNetworkPolicies *ves_io_schema_network_firewall.ActiveNetworkPoliciesType `protobuf:"bytes,5,opt,name=active_network_policies,json=activeNetworkPolicies,oneof"`
}
type AzureVnetVoltstackClusterReplaceType_NoForwardProxy struct {
	NoForwardProxy *ves_io_schema4.Empty `protobuf:"bytes,7,opt,name=no_forward_proxy,json=noForwardProxy,oneof"`
}
type AzureVnetVoltstackClusterReplaceType_ActiveForwardProxyPolicies struct {
	ActiveForwardProxyPolicies *ves_io_schema_network_firewall.ActiveForwardProxyPoliciesType `protobuf:"bytes,8,opt,name=active_forward_proxy_policies,json=activeForwardProxyPolicies,oneof"`
}
type AzureVnetVoltstackClusterReplaceType_ForwardProxyAllowAll struct {
	ForwardProxyAllowAll *ves_io_schema4.Empty `protobuf:"bytes,15,opt,name=forward_proxy_allow_all,json=forwardProxyAllowAll,oneof"`
}
type AzureVnetVoltstackClusterReplaceType_NoOutsideStaticRoutes struct {
	NoOutsideStaticRoutes *ves_io_schema4.Empty `protobuf:"bytes,10,opt,name=no_outside_static_routes,json=noOutsideStaticRoutes,oneof"`
}
type AzureVnetVoltstackClusterReplaceType_OutsideStaticRoutes struct {
	OutsideStaticRoutes *ves_io_schema_views1.SiteStaticRoutesListType `protobuf:"bytes,11,opt,name=outside_static_routes,json=outsideStaticRoutes,oneof"`
}
type AzureVnetVoltstackClusterReplaceType_NoGlobalNetwork struct {
	NoGlobalNetwork *ves_io_schema4.Empty `protobuf:"bytes,13,opt,name=no_global_network,json=noGlobalNetwork,oneof"`
}
type AzureVnetVoltstackClusterReplaceType_GlobalNetworkList struct {
	GlobalNetworkList *ves_io_schema_views1.GlobalNetworkConnectionListType `protobuf:"bytes,14,opt,name=global_network_list,json=globalNetworkList,oneof"`
}

func (*AzureVnetVoltstackClusterReplaceType_NoNetworkPolicy) isAzureVnetVoltstackClusterReplaceType_NetworkPolicyChoice() {
}
func (*AzureVnetVoltstackClusterReplaceType_ActiveNetworkPolicies) isAzureVnetVoltstackClusterReplaceType_NetworkPolicyChoice() {
}
func (*AzureVnetVoltstackClusterReplaceType_NoForwardProxy) isAzureVnetVoltstackClusterReplaceType_ForwardProxyChoice() {
}
func (*AzureVnetVoltstackClusterReplaceType_ActiveForwardProxyPolicies) isAzureVnetVoltstackClusterReplaceType_ForwardProxyChoice() {
}
func (*AzureVnetVoltstackClusterReplaceType_ForwardProxyAllowAll) isAzureVnetVoltstackClusterReplaceType_ForwardProxyChoice() {
}
func (*AzureVnetVoltstackClusterReplaceType_NoOutsideStaticRoutes) isAzureVnetVoltstackClusterReplaceType_OutsideStaticRouteChoice() {
}
func (*AzureVnetVoltstackClusterReplaceType_OutsideStaticRoutes) isAzureVnetVoltstackClusterReplaceType_OutsideStaticRouteChoice() {
}
func (*AzureVnetVoltstackClusterReplaceType_NoGlobalNetwork) isAzureVnetVoltstackClusterReplaceType_GlobalNetworkChoice() {
}
func (*AzureVnetVoltstackClusterReplaceType_GlobalNetworkList) isAzureVnetVoltstackClusterReplaceType_GlobalNetworkChoice() {
}

func (m *AzureVnetVoltstackClusterReplaceType) GetNetworkPolicyChoice() isAzureVnetVoltstackClusterReplaceType_NetworkPolicyChoice {
	if m != nil {
		return m.NetworkPolicyChoice
	}
	return nil
}
func (m *AzureVnetVoltstackClusterReplaceType) GetForwardProxyChoice() isAzureVnetVoltstackClusterReplaceType_ForwardProxyChoice {
	if m != nil {
		return m.ForwardProxyChoice
	}
	return nil
}
func (m *AzureVnetVoltstackClusterReplaceType) GetOutsideStaticRouteChoice() isAzureVnetVoltstackClusterReplaceType_OutsideStaticRouteChoice {
	if m != nil {
		return m.OutsideStaticRouteChoice
	}
	return nil
}
func (m *AzureVnetVoltstackClusterReplaceType) GetGlobalNetworkChoice() isAzureVnetVoltstackClusterReplaceType_GlobalNetworkChoice {
	if m != nil {
		return m.GlobalNetworkChoice
	}
	return nil
}

func (m *AzureVnetVoltstackClusterReplaceType) GetNoNetworkPolicy() *ves_io_schema4.Empty {
	if x, ok := m.GetNetworkPolicyChoice().(*AzureVnetVoltstackClusterReplaceType_NoNetworkPolicy); ok {
		return x.NoNetworkPolicy
	}
	return nil
}

func (m *AzureVnetVoltstackClusterReplaceType) GetActiveNetworkPolicies() *ves_io_schema_network_firewall.ActiveNetworkPoliciesType {
	if x, ok := m.GetNetworkPolicyChoice().(*AzureVnetVoltstackClusterReplaceType_ActiveNetworkPolicies); ok {
		return x.ActiveNetworkPolicies
	}
	return nil
}

func (m *AzureVnetVoltstackClusterReplaceType) GetNoForwardProxy() *ves_io_schema4.Empty {
	if x, ok := m.GetForwardProxyChoice().(*AzureVnetVoltstackClusterReplaceType_NoForwardProxy); ok {
		return x.NoForwardProxy
	}
	return nil
}

func (m *AzureVnetVoltstackClusterReplaceType) GetActiveForwardProxyPolicies() *ves_io_schema_network_firewall.ActiveForwardProxyPoliciesType {
	if x, ok := m.GetForwardProxyChoice().(*AzureVnetVoltstackClusterReplaceType_ActiveForwardProxyPolicies); ok {
		return x.ActiveForwardProxyPolicies
	}
	return nil
}

func (m *AzureVnetVoltstackClusterReplaceType) GetForwardProxyAllowAll() *ves_io_schema4.Empty {
	if x, ok := m.GetForwardProxyChoice().(*AzureVnetVoltstackClusterReplaceType_ForwardProxyAllowAll); ok {
		return x.ForwardProxyAllowAll
	}
	return nil
}

func (m *AzureVnetVoltstackClusterReplaceType) GetNoOutsideStaticRoutes() *ves_io_schema4.Empty {
	if x, ok := m.GetOutsideStaticRouteChoice().(*AzureVnetVoltstackClusterReplaceType_NoOutsideStaticRoutes); ok {
		return x.NoOutsideStaticRoutes
	}
	return nil
}

func (m *AzureVnetVoltstackClusterReplaceType) GetOutsideStaticRoutes() *ves_io_schema_views1.SiteStaticRoutesListType {
	if x, ok := m.GetOutsideStaticRouteChoice().(*AzureVnetVoltstackClusterReplaceType_OutsideStaticRoutes); ok {
		return x.OutsideStaticRoutes
	}
	return nil
}

func (m *AzureVnetVoltstackClusterReplaceType) GetNoGlobalNetwork() *ves_io_schema4.Empty {
	if x, ok := m.GetGlobalNetworkChoice().(*AzureVnetVoltstackClusterReplaceType_NoGlobalNetwork); ok {
		return x.NoGlobalNetwork
	}
	return nil
}

func (m *AzureVnetVoltstackClusterReplaceType) GetGlobalNetworkList() *ves_io_schema_views1.GlobalNetworkConnectionListType {
	if x, ok := m.GetGlobalNetworkChoice().(*AzureVnetVoltstackClusterReplaceType_GlobalNetworkList); ok {
		return x.GlobalNetworkList
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*AzureVnetVoltstackClusterReplaceType) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _AzureVnetVoltstackClusterReplaceType_OneofMarshaler, _AzureVnetVoltstackClusterReplaceType_OneofUnmarshaler, _AzureVnetVoltstackClusterReplaceType_OneofSizer, []interface{}{
		(*AzureVnetVoltstackClusterReplaceType_NoNetworkPolicy)(nil),
		(*AzureVnetVoltstackClusterReplaceType_ActiveNetworkPolicies)(nil),
		(*AzureVnetVoltstackClusterReplaceType_NoForwardProxy)(nil),
		(*AzureVnetVoltstackClusterReplaceType_ActiveForwardProxyPolicies)(nil),
		(*AzureVnetVoltstackClusterReplaceType_ForwardProxyAllowAll)(nil),
		(*AzureVnetVoltstackClusterReplaceType_NoOutsideStaticRoutes)(nil),
		(*AzureVnetVoltstackClusterReplaceType_OutsideStaticRoutes)(nil),
		(*AzureVnetVoltstackClusterReplaceType_NoGlobalNetwork)(nil),
		(*AzureVnetVoltstackClusterReplaceType_GlobalNetworkList)(nil),
	}
}

func _AzureVnetVoltstackClusterReplaceType_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*AzureVnetVoltstackClusterReplaceType)
	// network_policy_choice
	switch x := m.NetworkPolicyChoice.(type) {
	case *AzureVnetVoltstackClusterReplaceType_NoNetworkPolicy:
		_ = b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.NoNetworkPolicy); err != nil {
			return err
		}
	case *AzureVnetVoltstackClusterReplaceType_ActiveNetworkPolicies:
		_ = b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ActiveNetworkPolicies); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("AzureVnetVoltstackClusterReplaceType.NetworkPolicyChoice has unexpected type %T", x)
	}
	// forward_proxy_choice
	switch x := m.ForwardProxyChoice.(type) {
	case *AzureVnetVoltstackClusterReplaceType_NoForwardProxy:
		_ = b.EncodeVarint(7<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.NoForwardProxy); err != nil {
			return err
		}
	case *AzureVnetVoltstackClusterReplaceType_ActiveForwardProxyPolicies:
		_ = b.EncodeVarint(8<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ActiveForwardProxyPolicies); err != nil {
			return err
		}
	case *AzureVnetVoltstackClusterReplaceType_ForwardProxyAllowAll:
		_ = b.EncodeVarint(15<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ForwardProxyAllowAll); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("AzureVnetVoltstackClusterReplaceType.ForwardProxyChoice has unexpected type %T", x)
	}
	// outside_static_route_choice
	switch x := m.OutsideStaticRouteChoice.(type) {
	case *AzureVnetVoltstackClusterReplaceType_NoOutsideStaticRoutes:
		_ = b.EncodeVarint(10<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.NoOutsideStaticRoutes); err != nil {
			return err
		}
	case *AzureVnetVoltstackClusterReplaceType_OutsideStaticRoutes:
		_ = b.EncodeVarint(11<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.OutsideStaticRoutes); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("AzureVnetVoltstackClusterReplaceType.OutsideStaticRouteChoice has unexpected type %T", x)
	}
	// global_network_choice
	switch x := m.GlobalNetworkChoice.(type) {
	case *AzureVnetVoltstackClusterReplaceType_NoGlobalNetwork:
		_ = b.EncodeVarint(13<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.NoGlobalNetwork); err != nil {
			return err
		}
	case *AzureVnetVoltstackClusterReplaceType_GlobalNetworkList:
		_ = b.EncodeVarint(14<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.GlobalNetworkList); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("AzureVnetVoltstackClusterReplaceType.GlobalNetworkChoice has unexpected type %T", x)
	}
	return nil
}

func _AzureVnetVoltstackClusterReplaceType_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*AzureVnetVoltstackClusterReplaceType)
	switch tag {
	case 4: // network_policy_choice.no_network_policy
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.NetworkPolicyChoice = &AzureVnetVoltstackClusterReplaceType_NoNetworkPolicy{msg}
		return true, err
	case 5: // network_policy_choice.active_network_policies
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema_network_firewall.ActiveNetworkPoliciesType)
		err := b.DecodeMessage(msg)
		m.NetworkPolicyChoice = &AzureVnetVoltstackClusterReplaceType_ActiveNetworkPolicies{msg}
		return true, err
	case 7: // forward_proxy_choice.no_forward_proxy
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.ForwardProxyChoice = &AzureVnetVoltstackClusterReplaceType_NoForwardProxy{msg}
		return true, err
	case 8: // forward_proxy_choice.active_forward_proxy_policies
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema_network_firewall.ActiveForwardProxyPoliciesType)
		err := b.DecodeMessage(msg)
		m.ForwardProxyChoice = &AzureVnetVoltstackClusterReplaceType_ActiveForwardProxyPolicies{msg}
		return true, err
	case 15: // forward_proxy_choice.forward_proxy_allow_all
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.ForwardProxyChoice = &AzureVnetVoltstackClusterReplaceType_ForwardProxyAllowAll{msg}
		return true, err
	case 10: // outside_static_route_choice.no_outside_static_routes
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.OutsideStaticRouteChoice = &AzureVnetVoltstackClusterReplaceType_NoOutsideStaticRoutes{msg}
		return true, err
	case 11: // outside_static_route_choice.outside_static_routes
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema_views1.SiteStaticRoutesListType)
		err := b.DecodeMessage(msg)
		m.OutsideStaticRouteChoice = &AzureVnetVoltstackClusterReplaceType_OutsideStaticRoutes{msg}
		return true, err
	case 13: // global_network_choice.no_global_network
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.GlobalNetworkChoice = &AzureVnetVoltstackClusterReplaceType_NoGlobalNetwork{msg}
		return true, err
	case 14: // global_network_choice.global_network_list
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema_views1.GlobalNetworkConnectionListType)
		err := b.DecodeMessage(msg)
		m.GlobalNetworkChoice = &AzureVnetVoltstackClusterReplaceType_GlobalNetworkList{msg}
		return true, err
	default:
		return false, nil
	}
}

func _AzureVnetVoltstackClusterReplaceType_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*AzureVnetVoltstackClusterReplaceType)
	// network_policy_choice
	switch x := m.NetworkPolicyChoice.(type) {
	case *AzureVnetVoltstackClusterReplaceType_NoNetworkPolicy:
		s := proto.Size(x.NoNetworkPolicy)
		n += proto.SizeVarint(4<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *AzureVnetVoltstackClusterReplaceType_ActiveNetworkPolicies:
		s := proto.Size(x.ActiveNetworkPolicies)
		n += proto.SizeVarint(5<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	// forward_proxy_choice
	switch x := m.ForwardProxyChoice.(type) {
	case *AzureVnetVoltstackClusterReplaceType_NoForwardProxy:
		s := proto.Size(x.NoForwardProxy)
		n += proto.SizeVarint(7<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *AzureVnetVoltstackClusterReplaceType_ActiveForwardProxyPolicies:
		s := proto.Size(x.ActiveForwardProxyPolicies)
		n += proto.SizeVarint(8<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *AzureVnetVoltstackClusterReplaceType_ForwardProxyAllowAll:
		s := proto.Size(x.ForwardProxyAllowAll)
		n += proto.SizeVarint(15<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	// outside_static_route_choice
	switch x := m.OutsideStaticRouteChoice.(type) {
	case *AzureVnetVoltstackClusterReplaceType_NoOutsideStaticRoutes:
		s := proto.Size(x.NoOutsideStaticRoutes)
		n += proto.SizeVarint(10<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *AzureVnetVoltstackClusterReplaceType_OutsideStaticRoutes:
		s := proto.Size(x.OutsideStaticRoutes)
		n += proto.SizeVarint(11<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	// global_network_choice
	switch x := m.GlobalNetworkChoice.(type) {
	case *AzureVnetVoltstackClusterReplaceType_NoGlobalNetwork:
		s := proto.Size(x.NoGlobalNetwork)
		n += proto.SizeVarint(13<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *AzureVnetVoltstackClusterReplaceType_GlobalNetworkList:
		s := proto.Size(x.GlobalNetworkList)
		n += proto.SizeVarint(14<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// GlobalSpecType
//
// x-displayName: "Global Specification"
// Shape of the Azure Vnet site specification
type GlobalSpecType struct {
	// Resource Group
	//
	// x-displayName: "Resource Group"
	// x-example: "my-resources"
	// x-required
	// Azure resource group for resources that will be created
	ResourceGroup string `protobuf:"bytes,1,opt,name=resource_group,json=resourceGroup,proto3" json:"resource_group,omitempty"`
	// Select Azure Region Type
	//
	// x-displayName: "Select Azure Region Type"
	// x-required
	// Choice of selecting recommended region or alternate region
	//
	// Types that are valid to be assigned to RegionChoice:
	//	*GlobalSpecType_AzureRegion
	//	*GlobalSpecType_AlternateRegion
	RegionChoice isGlobalSpecType_RegionChoice `protobuf_oneof:"region_choice"`
	// Vnet
	//
	// x-displayName: "Vnet"
	// x-required
	// Choice of using existing Vnet or create new Vnet
	Vnet *ves_io_schema_views1.AzureVnetChoiceType `protobuf:"bytes,3,opt,name=vnet" json:"vnet,omitempty"`
	// Number of interfaces on CE
	//
	// x-displayName: "Select Ingress Gateway or Ingress/Egress Gateway"
	// x-required
	// Choice of deploying one interface or two interface site
	//
	// Types that are valid to be assigned to SiteType:
	//	*GlobalSpecType_IngressGw
	//	*GlobalSpecType_IngressEgressGw
	//	*GlobalSpecType_VoltstackCluster
	//	*GlobalSpecType_IngressGwAr
	//	*GlobalSpecType_IngressEgressGwAr
	//	*GlobalSpecType_VoltstackClusterAr
	SiteType isGlobalSpecType_SiteType `protobuf_oneof:"site_type"`
	// Cloud Disk size
	//
	// x-displayName: "Cloud Disk Size"
	// x-example: "80"
	// Disk size to be used for this instance in GiB. 80 is 80 GiB
	DiskSize uint32 `protobuf:"varint,16,opt,name=disk_size,json=diskSize,proto3" json:"disk_size,omitempty"`
	// Automatic Deployment
	//
	// x-displayName: "Select Automatic or Assisted Deployment"
	// x-required
	// Choice of deploying automatic via volterra or Assisted using volterra generated parameters.
	//
	// Types that are valid to be assigned to Deployment:
	//	*GlobalSpecType_AzureCred
	//	*GlobalSpecType_Assisted
	Deployment isGlobalSpecType_Deployment `protobuf_oneof:"deployment"`
	// Machine Type
	//
	// x-displayName: "Azure Machine Type for Node"
	// x-example: "Standard_D3_v2"
	// Select Instance size based on performance needed
	MachineType string `protobuf:"bytes,10,opt,name=machine_type,json=machineType,proto3" json:"machine_type,omitempty"`
	// Desired Worker Nodes Selection
	//
	// x-displayName: "Desired Worker Nodes Selection"
	// x-required
	// Choice of deploying desired number of worker nodes.
	//
	// Types that are valid to be assigned to WorkerNodes:
	//	*GlobalSpecType_NodesPerAz
	//	*GlobalSpecType_TotalNodes
	//	*GlobalSpecType_NoWorkerNodes
	WorkerNodes isGlobalSpecType_WorkerNodes `protobuf_oneof:"worker_nodes"`
	// volterra_software_version
	//
	// x-displayName: "Software Version"
	// x-example: "value"
	// Desired Volterra software version for this site, a string matching released set of software components.
	VolterraSoftwareVersion string `protobuf:"bytes,12,opt,name=volterra_software_version,json=volterraSoftwareVersion,proto3" json:"volterra_software_version,omitempty"`
	// operating_system_version
	//
	// x-displayName: "Operating System Version"
	// x-example: "value"
	// Desired Operating System version for this site.
	OperatingSystemVersion string `protobuf:"bytes,13,opt,name=operating_system_version,json=operatingSystemVersion,proto3" json:"operating_system_version,omitempty"`
	// Public SSH key
	//
	// x-displayName: "Public SSH key"
	// x-example: "ssh-rsa AAAAB..."
	// Public SSH key for accessing the site.
	SshKey string `protobuf:"bytes,14,opt,name=ssh_key,json=sshKey,proto3" json:"ssh_key,omitempty"`
	// address
	//
	// x-displayName: "Geographical Address"
	// x-example: "123 Street, city, country, postal code"
	// Site's geographical address that can be used determine its latitude and longitude.
	Address string `protobuf:"bytes,18,opt,name=address,proto3" json:"address,omitempty"`
	// coordinates
	//
	// x-displayName: "Co-ordinates"
	// Site longitude and latitude co-ordinates
	Coordinates *ves_io_schema_site.Coordinates `protobuf:"bytes,19,opt,name=coordinates" json:"coordinates,omitempty"`
	// Logs Streaming
	//
	// x-displayName: "Logs Streaming"
	// x-required
	// Select Logs receiver for logs streaming
	//
	// Types that are valid to be assigned to LogsReceiverChoice:
	//	*GlobalSpecType_LogsStreamingDisabled
	//	*GlobalSpecType_LogReceiver
	LogsReceiverChoice isGlobalSpecType_LogsReceiverChoice `protobuf_oneof:"logs_receiver_choice"`
	// Volterra Software
	//
	// x-displayName: "Volterra Software"
	// Volterra Software Details
	Sw *ves_io_schema_views.VolterraSoftwareType `protobuf:"bytes,23,opt,name=sw" json:"sw,omitempty"`
	// Operating System
	//
	// x-displayName: "Operating System"
	// Operating System Details
	Os *ves_io_schema_views.OperatingSystemType `protobuf:"bytes,24,opt,name=os" json:"os,omitempty"`
	// VIP Params Per Az
	//
	// x-displayName: "VIP Params Per AZ"
	// VIP Parameters Per AZ.
	VipParamsPerAz []*ves_io_schema_site.PublishVIPParamsPerAz `protobuf:"bytes,25,rep,name=vip_params_per_az,json=vipParamsPerAz" json:"vip_params_per_az,omitempty"`
	// Reference to terraform parameters
	//
	// x-displayName: "Terraform Parameters"
	// Reference to view internal object
	TfParams *ves_io_schema_views.ObjectRefType `protobuf:"bytes,999,opt,name=tf_params,json=tfParams" json:"tf_params,omitempty"`
	// view_internal
	//
	// x-displayName: "View Internal"
	// Reference to view internal object
	ViewInternal *ves_io_schema_views.ObjectRefType `protobuf:"bytes,1000,opt,name=view_internal,json=viewInternal" json:"view_internal,omitempty"`
}

func (m *GlobalSpecType) Reset()                    { *m = GlobalSpecType{} }
func (*GlobalSpecType) ProtoMessage()               {}
func (*GlobalSpecType) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{9} }

type isGlobalSpecType_RegionChoice interface {
	isGlobalSpecType_RegionChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isGlobalSpecType_SiteType interface {
	isGlobalSpecType_SiteType()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isGlobalSpecType_Deployment interface {
	isGlobalSpecType_Deployment()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isGlobalSpecType_WorkerNodes interface {
	isGlobalSpecType_WorkerNodes()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isGlobalSpecType_LogsReceiverChoice interface {
	isGlobalSpecType_LogsReceiverChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type GlobalSpecType_AzureRegion struct {
	AzureRegion string `protobuf:"bytes,2,opt,name=azure_region,json=azureRegion,proto3,oneof"`
}
type GlobalSpecType_AlternateRegion struct {
	AlternateRegion string `protobuf:"bytes,31,opt,name=alternate_region,json=alternateRegion,proto3,oneof"`
}
type GlobalSpecType_IngressGw struct {
	IngressGw *AzureVnetIngressGwType `protobuf:"bytes,5,opt,name=ingress_gw,json=ingressGw,oneof"`
}
type GlobalSpecType_IngressEgressGw struct {
	IngressEgressGw *AzureVnetIngressEgressGwType `protobuf:"bytes,6,opt,name=ingress_egress_gw,json=ingressEgressGw,oneof"`
}
type GlobalSpecType_VoltstackCluster struct {
	VoltstackCluster *AzureVnetVoltstackClusterType `protobuf:"bytes,17,opt,name=voltstack_cluster,json=voltstackCluster,oneof"`
}
type GlobalSpecType_IngressGwAr struct {
	IngressGwAr *AzureVnetIngressGwARType `protobuf:"bytes,32,opt,name=ingress_gw_ar,json=ingressGwAr,oneof"`
}
type GlobalSpecType_IngressEgressGwAr struct {
	IngressEgressGwAr *AzureVnetIngressEgressGwARType `protobuf:"bytes,33,opt,name=ingress_egress_gw_ar,json=ingressEgressGwAr,oneof"`
}
type GlobalSpecType_VoltstackClusterAr struct {
	VoltstackClusterAr *AzureVnetVoltstackClusterARType `protobuf:"bytes,34,opt,name=voltstack_cluster_ar,json=voltstackClusterAr,oneof"`
}
type GlobalSpecType_AzureCred struct {
	AzureCred *ves_io_schema_views.ObjectRefType `protobuf:"bytes,8,opt,name=azure_cred,json=azureCred,oneof"`
}
type GlobalSpecType_Assisted struct {
	Assisted *ves_io_schema4.Empty `protobuf:"bytes,9,opt,name=assisted,oneof"`
}
type GlobalSpecType_NodesPerAz struct {
	NodesPerAz uint32 `protobuf:"varint,15,opt,name=nodes_per_az,json=nodesPerAz,proto3,oneof"`
}
type GlobalSpecType_TotalNodes struct {
	TotalNodes uint32 `protobuf:"varint,27,opt,name=total_nodes,json=totalNodes,proto3,oneof"`
}
type GlobalSpecType_NoWorkerNodes struct {
	NoWorkerNodes *ves_io_schema4.Empty `protobuf:"bytes,28,opt,name=no_worker_nodes,json=noWorkerNodes,oneof"`
}
type GlobalSpecType_LogsStreamingDisabled struct {
	LogsStreamingDisabled *ves_io_schema4.Empty `protobuf:"bytes,21,opt,name=logs_streaming_disabled,json=logsStreamingDisabled,oneof"`
}
type GlobalSpecType_LogReceiver struct {
	LogReceiver *ves_io_schema_views.ObjectRefType `protobuf:"bytes,22,opt,name=log_receiver,json=logReceiver,oneof"`
}

func (*GlobalSpecType_AzureRegion) isGlobalSpecType_RegionChoice()                 {}
func (*GlobalSpecType_AlternateRegion) isGlobalSpecType_RegionChoice()             {}
func (*GlobalSpecType_IngressGw) isGlobalSpecType_SiteType()                       {}
func (*GlobalSpecType_IngressEgressGw) isGlobalSpecType_SiteType()                 {}
func (*GlobalSpecType_VoltstackCluster) isGlobalSpecType_SiteType()                {}
func (*GlobalSpecType_IngressGwAr) isGlobalSpecType_SiteType()                     {}
func (*GlobalSpecType_IngressEgressGwAr) isGlobalSpecType_SiteType()               {}
func (*GlobalSpecType_VoltstackClusterAr) isGlobalSpecType_SiteType()              {}
func (*GlobalSpecType_AzureCred) isGlobalSpecType_Deployment()                     {}
func (*GlobalSpecType_Assisted) isGlobalSpecType_Deployment()                      {}
func (*GlobalSpecType_NodesPerAz) isGlobalSpecType_WorkerNodes()                   {}
func (*GlobalSpecType_TotalNodes) isGlobalSpecType_WorkerNodes()                   {}
func (*GlobalSpecType_NoWorkerNodes) isGlobalSpecType_WorkerNodes()                {}
func (*GlobalSpecType_LogsStreamingDisabled) isGlobalSpecType_LogsReceiverChoice() {}
func (*GlobalSpecType_LogReceiver) isGlobalSpecType_LogsReceiverChoice()           {}

func (m *GlobalSpecType) GetRegionChoice() isGlobalSpecType_RegionChoice {
	if m != nil {
		return m.RegionChoice
	}
	return nil
}
func (m *GlobalSpecType) GetSiteType() isGlobalSpecType_SiteType {
	if m != nil {
		return m.SiteType
	}
	return nil
}
func (m *GlobalSpecType) GetDeployment() isGlobalSpecType_Deployment {
	if m != nil {
		return m.Deployment
	}
	return nil
}
func (m *GlobalSpecType) GetWorkerNodes() isGlobalSpecType_WorkerNodes {
	if m != nil {
		return m.WorkerNodes
	}
	return nil
}
func (m *GlobalSpecType) GetLogsReceiverChoice() isGlobalSpecType_LogsReceiverChoice {
	if m != nil {
		return m.LogsReceiverChoice
	}
	return nil
}

func (m *GlobalSpecType) GetResourceGroup() string {
	if m != nil {
		return m.ResourceGroup
	}
	return ""
}

func (m *GlobalSpecType) GetAzureRegion() string {
	if x, ok := m.GetRegionChoice().(*GlobalSpecType_AzureRegion); ok {
		return x.AzureRegion
	}
	return ""
}

func (m *GlobalSpecType) GetAlternateRegion() string {
	if x, ok := m.GetRegionChoice().(*GlobalSpecType_AlternateRegion); ok {
		return x.AlternateRegion
	}
	return ""
}

func (m *GlobalSpecType) GetVnet() *ves_io_schema_views1.AzureVnetChoiceType {
	if m != nil {
		return m.Vnet
	}
	return nil
}

func (m *GlobalSpecType) GetIngressGw() *AzureVnetIngressGwType {
	if x, ok := m.GetSiteType().(*GlobalSpecType_IngressGw); ok {
		return x.IngressGw
	}
	return nil
}

func (m *GlobalSpecType) GetIngressEgressGw() *AzureVnetIngressEgressGwType {
	if x, ok := m.GetSiteType().(*GlobalSpecType_IngressEgressGw); ok {
		return x.IngressEgressGw
	}
	return nil
}

func (m *GlobalSpecType) GetVoltstackCluster() *AzureVnetVoltstackClusterType {
	if x, ok := m.GetSiteType().(*GlobalSpecType_VoltstackCluster); ok {
		return x.VoltstackCluster
	}
	return nil
}

func (m *GlobalSpecType) GetIngressGwAr() *AzureVnetIngressGwARType {
	if x, ok := m.GetSiteType().(*GlobalSpecType_IngressGwAr); ok {
		return x.IngressGwAr
	}
	return nil
}

func (m *GlobalSpecType) GetIngressEgressGwAr() *AzureVnetIngressEgressGwARType {
	if x, ok := m.GetSiteType().(*GlobalSpecType_IngressEgressGwAr); ok {
		return x.IngressEgressGwAr
	}
	return nil
}

func (m *GlobalSpecType) GetVoltstackClusterAr() *AzureVnetVoltstackClusterARType {
	if x, ok := m.GetSiteType().(*GlobalSpecType_VoltstackClusterAr); ok {
		return x.VoltstackClusterAr
	}
	return nil
}

func (m *GlobalSpecType) GetDiskSize() uint32 {
	if m != nil {
		return m.DiskSize
	}
	return 0
}

func (m *GlobalSpecType) GetAzureCred() *ves_io_schema_views.ObjectRefType {
	if x, ok := m.GetDeployment().(*GlobalSpecType_AzureCred); ok {
		return x.AzureCred
	}
	return nil
}

func (m *GlobalSpecType) GetAssisted() *ves_io_schema4.Empty {
	if x, ok := m.GetDeployment().(*GlobalSpecType_Assisted); ok {
		return x.Assisted
	}
	return nil
}

func (m *GlobalSpecType) GetMachineType() string {
	if m != nil {
		return m.MachineType
	}
	return ""
}

func (m *GlobalSpecType) GetNodesPerAz() uint32 {
	if x, ok := m.GetWorkerNodes().(*GlobalSpecType_NodesPerAz); ok {
		return x.NodesPerAz
	}
	return 0
}

func (m *GlobalSpecType) GetTotalNodes() uint32 {
	if x, ok := m.GetWorkerNodes().(*GlobalSpecType_TotalNodes); ok {
		return x.TotalNodes
	}
	return 0
}

func (m *GlobalSpecType) GetNoWorkerNodes() *ves_io_schema4.Empty {
	if x, ok := m.GetWorkerNodes().(*GlobalSpecType_NoWorkerNodes); ok {
		return x.NoWorkerNodes
	}
	return nil
}

func (m *GlobalSpecType) GetVolterraSoftwareVersion() string {
	if m != nil {
		return m.VolterraSoftwareVersion
	}
	return ""
}

func (m *GlobalSpecType) GetOperatingSystemVersion() string {
	if m != nil {
		return m.OperatingSystemVersion
	}
	return ""
}

func (m *GlobalSpecType) GetSshKey() string {
	if m != nil {
		return m.SshKey
	}
	return ""
}

func (m *GlobalSpecType) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *GlobalSpecType) GetCoordinates() *ves_io_schema_site.Coordinates {
	if m != nil {
		return m.Coordinates
	}
	return nil
}

func (m *GlobalSpecType) GetLogsStreamingDisabled() *ves_io_schema4.Empty {
	if x, ok := m.GetLogsReceiverChoice().(*GlobalSpecType_LogsStreamingDisabled); ok {
		return x.LogsStreamingDisabled
	}
	return nil
}

func (m *GlobalSpecType) GetLogReceiver() *ves_io_schema_views.ObjectRefType {
	if x, ok := m.GetLogsReceiverChoice().(*GlobalSpecType_LogReceiver); ok {
		return x.LogReceiver
	}
	return nil
}

func (m *GlobalSpecType) GetSw() *ves_io_schema_views.VolterraSoftwareType {
	if m != nil {
		return m.Sw
	}
	return nil
}

func (m *GlobalSpecType) GetOs() *ves_io_schema_views.OperatingSystemType {
	if m != nil {
		return m.Os
	}
	return nil
}

func (m *GlobalSpecType) GetVipParamsPerAz() []*ves_io_schema_site.PublishVIPParamsPerAz {
	if m != nil {
		return m.VipParamsPerAz
	}
	return nil
}

func (m *GlobalSpecType) GetTfParams() *ves_io_schema_views.ObjectRefType {
	if m != nil {
		return m.TfParams
	}
	return nil
}

func (m *GlobalSpecType) GetViewInternal() *ves_io_schema_views.ObjectRefType {
	if m != nil {
		return m.ViewInternal
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*GlobalSpecType) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _GlobalSpecType_OneofMarshaler, _GlobalSpecType_OneofUnmarshaler, _GlobalSpecType_OneofSizer, []interface{}{
		(*GlobalSpecType_AzureRegion)(nil),
		(*GlobalSpecType_AlternateRegion)(nil),
		(*GlobalSpecType_IngressGw)(nil),
		(*GlobalSpecType_IngressEgressGw)(nil),
		(*GlobalSpecType_VoltstackCluster)(nil),
		(*GlobalSpecType_IngressGwAr)(nil),
		(*GlobalSpecType_IngressEgressGwAr)(nil),
		(*GlobalSpecType_VoltstackClusterAr)(nil),
		(*GlobalSpecType_AzureCred)(nil),
		(*GlobalSpecType_Assisted)(nil),
		(*GlobalSpecType_NodesPerAz)(nil),
		(*GlobalSpecType_TotalNodes)(nil),
		(*GlobalSpecType_NoWorkerNodes)(nil),
		(*GlobalSpecType_LogsStreamingDisabled)(nil),
		(*GlobalSpecType_LogReceiver)(nil),
	}
}

func _GlobalSpecType_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*GlobalSpecType)
	// region_choice
	switch x := m.RegionChoice.(type) {
	case *GlobalSpecType_AzureRegion:
		_ = b.EncodeVarint(2<<3 | proto.WireBytes)
		_ = b.EncodeStringBytes(x.AzureRegion)
	case *GlobalSpecType_AlternateRegion:
		_ = b.EncodeVarint(31<<3 | proto.WireBytes)
		_ = b.EncodeStringBytes(x.AlternateRegion)
	case nil:
	default:
		return fmt.Errorf("GlobalSpecType.RegionChoice has unexpected type %T", x)
	}
	// site_type
	switch x := m.SiteType.(type) {
	case *GlobalSpecType_IngressGw:
		_ = b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.IngressGw); err != nil {
			return err
		}
	case *GlobalSpecType_IngressEgressGw:
		_ = b.EncodeVarint(6<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.IngressEgressGw); err != nil {
			return err
		}
	case *GlobalSpecType_VoltstackCluster:
		_ = b.EncodeVarint(17<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.VoltstackCluster); err != nil {
			return err
		}
	case *GlobalSpecType_IngressGwAr:
		_ = b.EncodeVarint(32<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.IngressGwAr); err != nil {
			return err
		}
	case *GlobalSpecType_IngressEgressGwAr:
		_ = b.EncodeVarint(33<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.IngressEgressGwAr); err != nil {
			return err
		}
	case *GlobalSpecType_VoltstackClusterAr:
		_ = b.EncodeVarint(34<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.VoltstackClusterAr); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("GlobalSpecType.SiteType has unexpected type %T", x)
	}
	// deployment
	switch x := m.Deployment.(type) {
	case *GlobalSpecType_AzureCred:
		_ = b.EncodeVarint(8<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.AzureCred); err != nil {
			return err
		}
	case *GlobalSpecType_Assisted:
		_ = b.EncodeVarint(9<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Assisted); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("GlobalSpecType.Deployment has unexpected type %T", x)
	}
	// worker_nodes
	switch x := m.WorkerNodes.(type) {
	case *GlobalSpecType_NodesPerAz:
		_ = b.EncodeVarint(15<<3 | proto.WireVarint)
		_ = b.EncodeVarint(uint64(x.NodesPerAz))
	case *GlobalSpecType_TotalNodes:
		_ = b.EncodeVarint(27<<3 | proto.WireVarint)
		_ = b.EncodeVarint(uint64(x.TotalNodes))
	case *GlobalSpecType_NoWorkerNodes:
		_ = b.EncodeVarint(28<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.NoWorkerNodes); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("GlobalSpecType.WorkerNodes has unexpected type %T", x)
	}
	// logs_receiver_choice
	switch x := m.LogsReceiverChoice.(type) {
	case *GlobalSpecType_LogsStreamingDisabled:
		_ = b.EncodeVarint(21<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.LogsStreamingDisabled); err != nil {
			return err
		}
	case *GlobalSpecType_LogReceiver:
		_ = b.EncodeVarint(22<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.LogReceiver); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("GlobalSpecType.LogsReceiverChoice has unexpected type %T", x)
	}
	return nil
}

func _GlobalSpecType_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*GlobalSpecType)
	switch tag {
	case 2: // region_choice.azure_region
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.RegionChoice = &GlobalSpecType_AzureRegion{x}
		return true, err
	case 31: // region_choice.alternate_region
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.RegionChoice = &GlobalSpecType_AlternateRegion{x}
		return true, err
	case 5: // site_type.ingress_gw
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(AzureVnetIngressGwType)
		err := b.DecodeMessage(msg)
		m.SiteType = &GlobalSpecType_IngressGw{msg}
		return true, err
	case 6: // site_type.ingress_egress_gw
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(AzureVnetIngressEgressGwType)
		err := b.DecodeMessage(msg)
		m.SiteType = &GlobalSpecType_IngressEgressGw{msg}
		return true, err
	case 17: // site_type.voltstack_cluster
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(AzureVnetVoltstackClusterType)
		err := b.DecodeMessage(msg)
		m.SiteType = &GlobalSpecType_VoltstackCluster{msg}
		return true, err
	case 32: // site_type.ingress_gw_ar
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(AzureVnetIngressGwARType)
		err := b.DecodeMessage(msg)
		m.SiteType = &GlobalSpecType_IngressGwAr{msg}
		return true, err
	case 33: // site_type.ingress_egress_gw_ar
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(AzureVnetIngressEgressGwARType)
		err := b.DecodeMessage(msg)
		m.SiteType = &GlobalSpecType_IngressEgressGwAr{msg}
		return true, err
	case 34: // site_type.voltstack_cluster_ar
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(AzureVnetVoltstackClusterARType)
		err := b.DecodeMessage(msg)
		m.SiteType = &GlobalSpecType_VoltstackClusterAr{msg}
		return true, err
	case 8: // deployment.azure_cred
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema_views.ObjectRefType)
		err := b.DecodeMessage(msg)
		m.Deployment = &GlobalSpecType_AzureCred{msg}
		return true, err
	case 9: // deployment.assisted
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.Deployment = &GlobalSpecType_Assisted{msg}
		return true, err
	case 15: // worker_nodes.nodes_per_az
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.WorkerNodes = &GlobalSpecType_NodesPerAz{uint32(x)}
		return true, err
	case 27: // worker_nodes.total_nodes
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.WorkerNodes = &GlobalSpecType_TotalNodes{uint32(x)}
		return true, err
	case 28: // worker_nodes.no_worker_nodes
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.WorkerNodes = &GlobalSpecType_NoWorkerNodes{msg}
		return true, err
	case 21: // logs_receiver_choice.logs_streaming_disabled
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.LogsReceiverChoice = &GlobalSpecType_LogsStreamingDisabled{msg}
		return true, err
	case 22: // logs_receiver_choice.log_receiver
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema_views.ObjectRefType)
		err := b.DecodeMessage(msg)
		m.LogsReceiverChoice = &GlobalSpecType_LogReceiver{msg}
		return true, err
	default:
		return false, nil
	}
}

func _GlobalSpecType_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*GlobalSpecType)
	// region_choice
	switch x := m.RegionChoice.(type) {
	case *GlobalSpecType_AzureRegion:
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.AzureRegion)))
		n += len(x.AzureRegion)
	case *GlobalSpecType_AlternateRegion:
		n += proto.SizeVarint(31<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.AlternateRegion)))
		n += len(x.AlternateRegion)
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	// site_type
	switch x := m.SiteType.(type) {
	case *GlobalSpecType_IngressGw:
		s := proto.Size(x.IngressGw)
		n += proto.SizeVarint(5<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *GlobalSpecType_IngressEgressGw:
		s := proto.Size(x.IngressEgressGw)
		n += proto.SizeVarint(6<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *GlobalSpecType_VoltstackCluster:
		s := proto.Size(x.VoltstackCluster)
		n += proto.SizeVarint(17<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *GlobalSpecType_IngressGwAr:
		s := proto.Size(x.IngressGwAr)
		n += proto.SizeVarint(32<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *GlobalSpecType_IngressEgressGwAr:
		s := proto.Size(x.IngressEgressGwAr)
		n += proto.SizeVarint(33<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *GlobalSpecType_VoltstackClusterAr:
		s := proto.Size(x.VoltstackClusterAr)
		n += proto.SizeVarint(34<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	// deployment
	switch x := m.Deployment.(type) {
	case *GlobalSpecType_AzureCred:
		s := proto.Size(x.AzureCred)
		n += proto.SizeVarint(8<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *GlobalSpecType_Assisted:
		s := proto.Size(x.Assisted)
		n += proto.SizeVarint(9<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	// worker_nodes
	switch x := m.WorkerNodes.(type) {
	case *GlobalSpecType_NodesPerAz:
		n += proto.SizeVarint(15<<3 | proto.WireVarint)
		n += proto.SizeVarint(uint64(x.NodesPerAz))
	case *GlobalSpecType_TotalNodes:
		n += proto.SizeVarint(27<<3 | proto.WireVarint)
		n += proto.SizeVarint(uint64(x.TotalNodes))
	case *GlobalSpecType_NoWorkerNodes:
		s := proto.Size(x.NoWorkerNodes)
		n += proto.SizeVarint(28<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	// logs_receiver_choice
	switch x := m.LogsReceiverChoice.(type) {
	case *GlobalSpecType_LogsStreamingDisabled:
		s := proto.Size(x.LogsStreamingDisabled)
		n += proto.SizeVarint(21<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *GlobalSpecType_LogReceiver:
		s := proto.Size(x.LogReceiver)
		n += proto.SizeVarint(22<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// CreateSpecType
//
// x-displayName: "Create Azure Vnet site"
// Shape of the Azure Vnet site specification
type CreateSpecType struct {
	ResourceGroup string `protobuf:"bytes,1,opt,name=resource_group,json=resourceGroup,proto3" json:"resource_group,omitempty"`
	// Types that are valid to be assigned to RegionChoice:
	//	*CreateSpecType_AzureRegion
	//	*CreateSpecType_AlternateRegion
	RegionChoice isCreateSpecType_RegionChoice             `protobuf_oneof:"region_choice"`
	Vnet         *ves_io_schema_views1.AzureVnetChoiceType `protobuf:"bytes,3,opt,name=vnet" json:"vnet,omitempty"`
	// Types that are valid to be assigned to SiteType:
	//	*CreateSpecType_IngressGw
	//	*CreateSpecType_IngressEgressGw
	//	*CreateSpecType_VoltstackCluster
	//	*CreateSpecType_IngressGwAr
	//	*CreateSpecType_IngressEgressGwAr
	//	*CreateSpecType_VoltstackClusterAr
	SiteType isCreateSpecType_SiteType `protobuf_oneof:"site_type"`
	// Types that are valid to be assigned to Deployment:
	//	*CreateSpecType_AzureCred
	//	*CreateSpecType_Assisted
	Deployment  isCreateSpecType_Deployment     `protobuf_oneof:"deployment"`
	MachineType string                          `protobuf:"bytes,10,opt,name=machine_type,json=machineType,proto3" json:"machine_type,omitempty"`
	DiskSize    uint32                          `protobuf:"varint,16,opt,name=disk_size,json=diskSize,proto3" json:"disk_size,omitempty"`
	SshKey      string                          `protobuf:"bytes,14,opt,name=ssh_key,json=sshKey,proto3" json:"ssh_key,omitempty"`
	Address     string                          `protobuf:"bytes,18,opt,name=address,proto3" json:"address,omitempty"`
	Coordinates *ves_io_schema_site.Coordinates `protobuf:"bytes,19,opt,name=coordinates" json:"coordinates,omitempty"`
	// Types that are valid to be assigned to LogsReceiverChoice:
	//	*CreateSpecType_LogsStreamingDisabled
	//	*CreateSpecType_LogReceiver
	LogsReceiverChoice isCreateSpecType_LogsReceiverChoice `protobuf_oneof:"logs_receiver_choice"`
	// Volterra Software
	//
	// x-displayName: "Volterra Software"
	// Volterra Software Details
	Sw *ves_io_schema_views.VolterraSoftwareType `protobuf:"bytes,23,opt,name=sw" json:"sw,omitempty"`
	// Operating System
	//
	// x-displayName: "Operating System"
	// Operating System Details
	Os *ves_io_schema_views.OperatingSystemType `protobuf:"bytes,24,opt,name=os" json:"os,omitempty"`
	// Types that are valid to be assigned to WorkerNodes:
	//	*CreateSpecType_NodesPerAz
	//	*CreateSpecType_TotalNodes
	//	*CreateSpecType_NoWorkerNodes
	WorkerNodes isCreateSpecType_WorkerNodes `protobuf_oneof:"worker_nodes"`
}

func (m *CreateSpecType) Reset()                    { *m = CreateSpecType{} }
func (*CreateSpecType) ProtoMessage()               {}
func (*CreateSpecType) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{10} }

type isCreateSpecType_RegionChoice interface {
	isCreateSpecType_RegionChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isCreateSpecType_SiteType interface {
	isCreateSpecType_SiteType()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isCreateSpecType_Deployment interface {
	isCreateSpecType_Deployment()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isCreateSpecType_LogsReceiverChoice interface {
	isCreateSpecType_LogsReceiverChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isCreateSpecType_WorkerNodes interface {
	isCreateSpecType_WorkerNodes()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type CreateSpecType_AzureRegion struct {
	AzureRegion string `protobuf:"bytes,2,opt,name=azure_region,json=azureRegion,proto3,oneof"`
}
type CreateSpecType_AlternateRegion struct {
	AlternateRegion string `protobuf:"bytes,31,opt,name=alternate_region,json=alternateRegion,proto3,oneof"`
}
type CreateSpecType_IngressGw struct {
	IngressGw *AzureVnetIngressGwType `protobuf:"bytes,5,opt,name=ingress_gw,json=ingressGw,oneof"`
}
type CreateSpecType_IngressEgressGw struct {
	IngressEgressGw *AzureVnetIngressEgressGwType `protobuf:"bytes,6,opt,name=ingress_egress_gw,json=ingressEgressGw,oneof"`
}
type CreateSpecType_VoltstackCluster struct {
	VoltstackCluster *AzureVnetVoltstackClusterType `protobuf:"bytes,17,opt,name=voltstack_cluster,json=voltstackCluster,oneof"`
}
type CreateSpecType_IngressGwAr struct {
	IngressGwAr *AzureVnetIngressGwARType `protobuf:"bytes,32,opt,name=ingress_gw_ar,json=ingressGwAr,oneof"`
}
type CreateSpecType_IngressEgressGwAr struct {
	IngressEgressGwAr *AzureVnetIngressEgressGwARType `protobuf:"bytes,33,opt,name=ingress_egress_gw_ar,json=ingressEgressGwAr,oneof"`
}
type CreateSpecType_VoltstackClusterAr struct {
	VoltstackClusterAr *AzureVnetVoltstackClusterARType `protobuf:"bytes,34,opt,name=voltstack_cluster_ar,json=voltstackClusterAr,oneof"`
}
type CreateSpecType_AzureCred struct {
	AzureCred *ves_io_schema_views.ObjectRefType `protobuf:"bytes,8,opt,name=azure_cred,json=azureCred,oneof"`
}
type CreateSpecType_Assisted struct {
	Assisted *ves_io_schema4.Empty `protobuf:"bytes,9,opt,name=assisted,oneof"`
}
type CreateSpecType_LogsStreamingDisabled struct {
	LogsStreamingDisabled *ves_io_schema4.Empty `protobuf:"bytes,21,opt,name=logs_streaming_disabled,json=logsStreamingDisabled,oneof"`
}
type CreateSpecType_LogReceiver struct {
	LogReceiver *ves_io_schema_views.ObjectRefType `protobuf:"bytes,22,opt,name=log_receiver,json=logReceiver,oneof"`
}
type CreateSpecType_NodesPerAz struct {
	NodesPerAz uint32 `protobuf:"varint,15,opt,name=nodes_per_az,json=nodesPerAz,proto3,oneof"`
}
type CreateSpecType_TotalNodes struct {
	TotalNodes uint32 `protobuf:"varint,27,opt,name=total_nodes,json=totalNodes,proto3,oneof"`
}
type CreateSpecType_NoWorkerNodes struct {
	NoWorkerNodes *ves_io_schema4.Empty `protobuf:"bytes,28,opt,name=no_worker_nodes,json=noWorkerNodes,oneof"`
}

func (*CreateSpecType_AzureRegion) isCreateSpecType_RegionChoice()                 {}
func (*CreateSpecType_AlternateRegion) isCreateSpecType_RegionChoice()             {}
func (*CreateSpecType_IngressGw) isCreateSpecType_SiteType()                       {}
func (*CreateSpecType_IngressEgressGw) isCreateSpecType_SiteType()                 {}
func (*CreateSpecType_VoltstackCluster) isCreateSpecType_SiteType()                {}
func (*CreateSpecType_IngressGwAr) isCreateSpecType_SiteType()                     {}
func (*CreateSpecType_IngressEgressGwAr) isCreateSpecType_SiteType()               {}
func (*CreateSpecType_VoltstackClusterAr) isCreateSpecType_SiteType()              {}
func (*CreateSpecType_AzureCred) isCreateSpecType_Deployment()                     {}
func (*CreateSpecType_Assisted) isCreateSpecType_Deployment()                      {}
func (*CreateSpecType_LogsStreamingDisabled) isCreateSpecType_LogsReceiverChoice() {}
func (*CreateSpecType_LogReceiver) isCreateSpecType_LogsReceiverChoice()           {}
func (*CreateSpecType_NodesPerAz) isCreateSpecType_WorkerNodes()                   {}
func (*CreateSpecType_TotalNodes) isCreateSpecType_WorkerNodes()                   {}
func (*CreateSpecType_NoWorkerNodes) isCreateSpecType_WorkerNodes()                {}

func (m *CreateSpecType) GetRegionChoice() isCreateSpecType_RegionChoice {
	if m != nil {
		return m.RegionChoice
	}
	return nil
}
func (m *CreateSpecType) GetSiteType() isCreateSpecType_SiteType {
	if m != nil {
		return m.SiteType
	}
	return nil
}
func (m *CreateSpecType) GetDeployment() isCreateSpecType_Deployment {
	if m != nil {
		return m.Deployment
	}
	return nil
}
func (m *CreateSpecType) GetLogsReceiverChoice() isCreateSpecType_LogsReceiverChoice {
	if m != nil {
		return m.LogsReceiverChoice
	}
	return nil
}
func (m *CreateSpecType) GetWorkerNodes() isCreateSpecType_WorkerNodes {
	if m != nil {
		return m.WorkerNodes
	}
	return nil
}

func (m *CreateSpecType) GetResourceGroup() string {
	if m != nil {
		return m.ResourceGroup
	}
	return ""
}

func (m *CreateSpecType) GetAzureRegion() string {
	if x, ok := m.GetRegionChoice().(*CreateSpecType_AzureRegion); ok {
		return x.AzureRegion
	}
	return ""
}

func (m *CreateSpecType) GetAlternateRegion() string {
	if x, ok := m.GetRegionChoice().(*CreateSpecType_AlternateRegion); ok {
		return x.AlternateRegion
	}
	return ""
}

func (m *CreateSpecType) GetVnet() *ves_io_schema_views1.AzureVnetChoiceType {
	if m != nil {
		return m.Vnet
	}
	return nil
}

func (m *CreateSpecType) GetIngressGw() *AzureVnetIngressGwType {
	if x, ok := m.GetSiteType().(*CreateSpecType_IngressGw); ok {
		return x.IngressGw
	}
	return nil
}

func (m *CreateSpecType) GetIngressEgressGw() *AzureVnetIngressEgressGwType {
	if x, ok := m.GetSiteType().(*CreateSpecType_IngressEgressGw); ok {
		return x.IngressEgressGw
	}
	return nil
}

func (m *CreateSpecType) GetVoltstackCluster() *AzureVnetVoltstackClusterType {
	if x, ok := m.GetSiteType().(*CreateSpecType_VoltstackCluster); ok {
		return x.VoltstackCluster
	}
	return nil
}

func (m *CreateSpecType) GetIngressGwAr() *AzureVnetIngressGwARType {
	if x, ok := m.GetSiteType().(*CreateSpecType_IngressGwAr); ok {
		return x.IngressGwAr
	}
	return nil
}

func (m *CreateSpecType) GetIngressEgressGwAr() *AzureVnetIngressEgressGwARType {
	if x, ok := m.GetSiteType().(*CreateSpecType_IngressEgressGwAr); ok {
		return x.IngressEgressGwAr
	}
	return nil
}

func (m *CreateSpecType) GetVoltstackClusterAr() *AzureVnetVoltstackClusterARType {
	if x, ok := m.GetSiteType().(*CreateSpecType_VoltstackClusterAr); ok {
		return x.VoltstackClusterAr
	}
	return nil
}

func (m *CreateSpecType) GetAzureCred() *ves_io_schema_views.ObjectRefType {
	if x, ok := m.GetDeployment().(*CreateSpecType_AzureCred); ok {
		return x.AzureCred
	}
	return nil
}

func (m *CreateSpecType) GetAssisted() *ves_io_schema4.Empty {
	if x, ok := m.GetDeployment().(*CreateSpecType_Assisted); ok {
		return x.Assisted
	}
	return nil
}

func (m *CreateSpecType) GetMachineType() string {
	if m != nil {
		return m.MachineType
	}
	return ""
}

func (m *CreateSpecType) GetDiskSize() uint32 {
	if m != nil {
		return m.DiskSize
	}
	return 0
}

func (m *CreateSpecType) GetSshKey() string {
	if m != nil {
		return m.SshKey
	}
	return ""
}

func (m *CreateSpecType) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *CreateSpecType) GetCoordinates() *ves_io_schema_site.Coordinates {
	if m != nil {
		return m.Coordinates
	}
	return nil
}

func (m *CreateSpecType) GetLogsStreamingDisabled() *ves_io_schema4.Empty {
	if x, ok := m.GetLogsReceiverChoice().(*CreateSpecType_LogsStreamingDisabled); ok {
		return x.LogsStreamingDisabled
	}
	return nil
}

func (m *CreateSpecType) GetLogReceiver() *ves_io_schema_views.ObjectRefType {
	if x, ok := m.GetLogsReceiverChoice().(*CreateSpecType_LogReceiver); ok {
		return x.LogReceiver
	}
	return nil
}

func (m *CreateSpecType) GetSw() *ves_io_schema_views.VolterraSoftwareType {
	if m != nil {
		return m.Sw
	}
	return nil
}

func (m *CreateSpecType) GetOs() *ves_io_schema_views.OperatingSystemType {
	if m != nil {
		return m.Os
	}
	return nil
}

func (m *CreateSpecType) GetNodesPerAz() uint32 {
	if x, ok := m.GetWorkerNodes().(*CreateSpecType_NodesPerAz); ok {
		return x.NodesPerAz
	}
	return 0
}

func (m *CreateSpecType) GetTotalNodes() uint32 {
	if x, ok := m.GetWorkerNodes().(*CreateSpecType_TotalNodes); ok {
		return x.TotalNodes
	}
	return 0
}

func (m *CreateSpecType) GetNoWorkerNodes() *ves_io_schema4.Empty {
	if x, ok := m.GetWorkerNodes().(*CreateSpecType_NoWorkerNodes); ok {
		return x.NoWorkerNodes
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*CreateSpecType) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _CreateSpecType_OneofMarshaler, _CreateSpecType_OneofUnmarshaler, _CreateSpecType_OneofSizer, []interface{}{
		(*CreateSpecType_AzureRegion)(nil),
		(*CreateSpecType_AlternateRegion)(nil),
		(*CreateSpecType_IngressGw)(nil),
		(*CreateSpecType_IngressEgressGw)(nil),
		(*CreateSpecType_VoltstackCluster)(nil),
		(*CreateSpecType_IngressGwAr)(nil),
		(*CreateSpecType_IngressEgressGwAr)(nil),
		(*CreateSpecType_VoltstackClusterAr)(nil),
		(*CreateSpecType_AzureCred)(nil),
		(*CreateSpecType_Assisted)(nil),
		(*CreateSpecType_LogsStreamingDisabled)(nil),
		(*CreateSpecType_LogReceiver)(nil),
		(*CreateSpecType_NodesPerAz)(nil),
		(*CreateSpecType_TotalNodes)(nil),
		(*CreateSpecType_NoWorkerNodes)(nil),
	}
}

func _CreateSpecType_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*CreateSpecType)
	// region_choice
	switch x := m.RegionChoice.(type) {
	case *CreateSpecType_AzureRegion:
		_ = b.EncodeVarint(2<<3 | proto.WireBytes)
		_ = b.EncodeStringBytes(x.AzureRegion)
	case *CreateSpecType_AlternateRegion:
		_ = b.EncodeVarint(31<<3 | proto.WireBytes)
		_ = b.EncodeStringBytes(x.AlternateRegion)
	case nil:
	default:
		return fmt.Errorf("CreateSpecType.RegionChoice has unexpected type %T", x)
	}
	// site_type
	switch x := m.SiteType.(type) {
	case *CreateSpecType_IngressGw:
		_ = b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.IngressGw); err != nil {
			return err
		}
	case *CreateSpecType_IngressEgressGw:
		_ = b.EncodeVarint(6<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.IngressEgressGw); err != nil {
			return err
		}
	case *CreateSpecType_VoltstackCluster:
		_ = b.EncodeVarint(17<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.VoltstackCluster); err != nil {
			return err
		}
	case *CreateSpecType_IngressGwAr:
		_ = b.EncodeVarint(32<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.IngressGwAr); err != nil {
			return err
		}
	case *CreateSpecType_IngressEgressGwAr:
		_ = b.EncodeVarint(33<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.IngressEgressGwAr); err != nil {
			return err
		}
	case *CreateSpecType_VoltstackClusterAr:
		_ = b.EncodeVarint(34<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.VoltstackClusterAr); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("CreateSpecType.SiteType has unexpected type %T", x)
	}
	// deployment
	switch x := m.Deployment.(type) {
	case *CreateSpecType_AzureCred:
		_ = b.EncodeVarint(8<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.AzureCred); err != nil {
			return err
		}
	case *CreateSpecType_Assisted:
		_ = b.EncodeVarint(9<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Assisted); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("CreateSpecType.Deployment has unexpected type %T", x)
	}
	// logs_receiver_choice
	switch x := m.LogsReceiverChoice.(type) {
	case *CreateSpecType_LogsStreamingDisabled:
		_ = b.EncodeVarint(21<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.LogsStreamingDisabled); err != nil {
			return err
		}
	case *CreateSpecType_LogReceiver:
		_ = b.EncodeVarint(22<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.LogReceiver); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("CreateSpecType.LogsReceiverChoice has unexpected type %T", x)
	}
	// worker_nodes
	switch x := m.WorkerNodes.(type) {
	case *CreateSpecType_NodesPerAz:
		_ = b.EncodeVarint(15<<3 | proto.WireVarint)
		_ = b.EncodeVarint(uint64(x.NodesPerAz))
	case *CreateSpecType_TotalNodes:
		_ = b.EncodeVarint(27<<3 | proto.WireVarint)
		_ = b.EncodeVarint(uint64(x.TotalNodes))
	case *CreateSpecType_NoWorkerNodes:
		_ = b.EncodeVarint(28<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.NoWorkerNodes); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("CreateSpecType.WorkerNodes has unexpected type %T", x)
	}
	return nil
}

func _CreateSpecType_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*CreateSpecType)
	switch tag {
	case 2: // region_choice.azure_region
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.RegionChoice = &CreateSpecType_AzureRegion{x}
		return true, err
	case 31: // region_choice.alternate_region
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.RegionChoice = &CreateSpecType_AlternateRegion{x}
		return true, err
	case 5: // site_type.ingress_gw
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(AzureVnetIngressGwType)
		err := b.DecodeMessage(msg)
		m.SiteType = &CreateSpecType_IngressGw{msg}
		return true, err
	case 6: // site_type.ingress_egress_gw
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(AzureVnetIngressEgressGwType)
		err := b.DecodeMessage(msg)
		m.SiteType = &CreateSpecType_IngressEgressGw{msg}
		return true, err
	case 17: // site_type.voltstack_cluster
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(AzureVnetVoltstackClusterType)
		err := b.DecodeMessage(msg)
		m.SiteType = &CreateSpecType_VoltstackCluster{msg}
		return true, err
	case 32: // site_type.ingress_gw_ar
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(AzureVnetIngressGwARType)
		err := b.DecodeMessage(msg)
		m.SiteType = &CreateSpecType_IngressGwAr{msg}
		return true, err
	case 33: // site_type.ingress_egress_gw_ar
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(AzureVnetIngressEgressGwARType)
		err := b.DecodeMessage(msg)
		m.SiteType = &CreateSpecType_IngressEgressGwAr{msg}
		return true, err
	case 34: // site_type.voltstack_cluster_ar
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(AzureVnetVoltstackClusterARType)
		err := b.DecodeMessage(msg)
		m.SiteType = &CreateSpecType_VoltstackClusterAr{msg}
		return true, err
	case 8: // deployment.azure_cred
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema_views.ObjectRefType)
		err := b.DecodeMessage(msg)
		m.Deployment = &CreateSpecType_AzureCred{msg}
		return true, err
	case 9: // deployment.assisted
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.Deployment = &CreateSpecType_Assisted{msg}
		return true, err
	case 21: // logs_receiver_choice.logs_streaming_disabled
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.LogsReceiverChoice = &CreateSpecType_LogsStreamingDisabled{msg}
		return true, err
	case 22: // logs_receiver_choice.log_receiver
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema_views.ObjectRefType)
		err := b.DecodeMessage(msg)
		m.LogsReceiverChoice = &CreateSpecType_LogReceiver{msg}
		return true, err
	case 15: // worker_nodes.nodes_per_az
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.WorkerNodes = &CreateSpecType_NodesPerAz{uint32(x)}
		return true, err
	case 27: // worker_nodes.total_nodes
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.WorkerNodes = &CreateSpecType_TotalNodes{uint32(x)}
		return true, err
	case 28: // worker_nodes.no_worker_nodes
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.WorkerNodes = &CreateSpecType_NoWorkerNodes{msg}
		return true, err
	default:
		return false, nil
	}
}

func _CreateSpecType_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*CreateSpecType)
	// region_choice
	switch x := m.RegionChoice.(type) {
	case *CreateSpecType_AzureRegion:
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.AzureRegion)))
		n += len(x.AzureRegion)
	case *CreateSpecType_AlternateRegion:
		n += proto.SizeVarint(31<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.AlternateRegion)))
		n += len(x.AlternateRegion)
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	// site_type
	switch x := m.SiteType.(type) {
	case *CreateSpecType_IngressGw:
		s := proto.Size(x.IngressGw)
		n += proto.SizeVarint(5<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *CreateSpecType_IngressEgressGw:
		s := proto.Size(x.IngressEgressGw)
		n += proto.SizeVarint(6<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *CreateSpecType_VoltstackCluster:
		s := proto.Size(x.VoltstackCluster)
		n += proto.SizeVarint(17<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *CreateSpecType_IngressGwAr:
		s := proto.Size(x.IngressGwAr)
		n += proto.SizeVarint(32<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *CreateSpecType_IngressEgressGwAr:
		s := proto.Size(x.IngressEgressGwAr)
		n += proto.SizeVarint(33<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *CreateSpecType_VoltstackClusterAr:
		s := proto.Size(x.VoltstackClusterAr)
		n += proto.SizeVarint(34<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	// deployment
	switch x := m.Deployment.(type) {
	case *CreateSpecType_AzureCred:
		s := proto.Size(x.AzureCred)
		n += proto.SizeVarint(8<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *CreateSpecType_Assisted:
		s := proto.Size(x.Assisted)
		n += proto.SizeVarint(9<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	// logs_receiver_choice
	switch x := m.LogsReceiverChoice.(type) {
	case *CreateSpecType_LogsStreamingDisabled:
		s := proto.Size(x.LogsStreamingDisabled)
		n += proto.SizeVarint(21<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *CreateSpecType_LogReceiver:
		s := proto.Size(x.LogReceiver)
		n += proto.SizeVarint(22<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	// worker_nodes
	switch x := m.WorkerNodes.(type) {
	case *CreateSpecType_NodesPerAz:
		n += proto.SizeVarint(15<<3 | proto.WireVarint)
		n += proto.SizeVarint(uint64(x.NodesPerAz))
	case *CreateSpecType_TotalNodes:
		n += proto.SizeVarint(27<<3 | proto.WireVarint)
		n += proto.SizeVarint(uint64(x.TotalNodes))
	case *CreateSpecType_NoWorkerNodes:
		s := proto.Size(x.NoWorkerNodes)
		n += proto.SizeVarint(28<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// ReplaceSpecType
//
// x-displayName: "Replace Azure Vnet site"
// Shape of the Azure Vnet site replace specification
type ReplaceSpecType struct {
	// Site Type
	//
	// x-displayName: "Edit Networking Config"
	// x-required
	// Site Type ingress or ingress-egress gateway cannot be changed
	//
	// Types that are valid to be assigned to SiteType:
	//	*ReplaceSpecType_IngressGw
	//	*ReplaceSpecType_IngressEgressGw
	//	*ReplaceSpecType_VoltstackCluster
	//	*ReplaceSpecType_IngressGwAr
	//	*ReplaceSpecType_IngressEgressGwAr
	//	*ReplaceSpecType_VoltstackClusterAr
	SiteType    isReplaceSpecType_SiteType      `protobuf_oneof:"site_type"`
	Address     string                          `protobuf:"bytes,18,opt,name=address,proto3" json:"address,omitempty"`
	Coordinates *ves_io_schema_site.Coordinates `protobuf:"bytes,19,opt,name=coordinates" json:"coordinates,omitempty"`
	// Types that are valid to be assigned to LogsReceiverChoice:
	//	*ReplaceSpecType_LogsStreamingDisabled
	//	*ReplaceSpecType_LogReceiver
	LogsReceiverChoice isReplaceSpecType_LogsReceiverChoice `protobuf_oneof:"logs_receiver_choice"`
	// Types that are valid to be assigned to WorkerNodes:
	//	*ReplaceSpecType_NodesPerAz
	//	*ReplaceSpecType_TotalNodes
	//	*ReplaceSpecType_NoWorkerNodes
	WorkerNodes isReplaceSpecType_WorkerNodes `protobuf_oneof:"worker_nodes"`
}

func (m *ReplaceSpecType) Reset()                    { *m = ReplaceSpecType{} }
func (*ReplaceSpecType) ProtoMessage()               {}
func (*ReplaceSpecType) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{11} }

type isReplaceSpecType_SiteType interface {
	isReplaceSpecType_SiteType()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isReplaceSpecType_LogsReceiverChoice interface {
	isReplaceSpecType_LogsReceiverChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isReplaceSpecType_WorkerNodes interface {
	isReplaceSpecType_WorkerNodes()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type ReplaceSpecType_IngressGw struct {
	IngressGw *AzureVnetIngressGwReplaceType `protobuf:"bytes,5,opt,name=ingress_gw,json=ingressGw,oneof"`
}
type ReplaceSpecType_IngressEgressGw struct {
	IngressEgressGw *AzureVnetIngressEgressGwReplaceType `protobuf:"bytes,6,opt,name=ingress_egress_gw,json=ingressEgressGw,oneof"`
}
type ReplaceSpecType_VoltstackCluster struct {
	VoltstackCluster *AzureVnetVoltstackClusterReplaceType `protobuf:"bytes,17,opt,name=voltstack_cluster,json=voltstackCluster,oneof"`
}
type ReplaceSpecType_IngressGwAr struct {
	IngressGwAr *AzureVnetIngressGwReplaceType `protobuf:"bytes,32,opt,name=ingress_gw_ar,json=ingressGwAr,oneof"`
}
type ReplaceSpecType_IngressEgressGwAr struct {
	IngressEgressGwAr *AzureVnetIngressEgressGwReplaceType `protobuf:"bytes,33,opt,name=ingress_egress_gw_ar,json=ingressEgressGwAr,oneof"`
}
type ReplaceSpecType_VoltstackClusterAr struct {
	VoltstackClusterAr *AzureVnetVoltstackClusterReplaceType `protobuf:"bytes,34,opt,name=voltstack_cluster_ar,json=voltstackClusterAr,oneof"`
}
type ReplaceSpecType_LogsStreamingDisabled struct {
	LogsStreamingDisabled *ves_io_schema4.Empty `protobuf:"bytes,21,opt,name=logs_streaming_disabled,json=logsStreamingDisabled,oneof"`
}
type ReplaceSpecType_LogReceiver struct {
	LogReceiver *ves_io_schema_views.ObjectRefType `protobuf:"bytes,22,opt,name=log_receiver,json=logReceiver,oneof"`
}
type ReplaceSpecType_NodesPerAz struct {
	NodesPerAz uint32 `protobuf:"varint,15,opt,name=nodes_per_az,json=nodesPerAz,proto3,oneof"`
}
type ReplaceSpecType_TotalNodes struct {
	TotalNodes uint32 `protobuf:"varint,27,opt,name=total_nodes,json=totalNodes,proto3,oneof"`
}
type ReplaceSpecType_NoWorkerNodes struct {
	NoWorkerNodes *ves_io_schema4.Empty `protobuf:"bytes,28,opt,name=no_worker_nodes,json=noWorkerNodes,oneof"`
}

func (*ReplaceSpecType_IngressGw) isReplaceSpecType_SiteType()                       {}
func (*ReplaceSpecType_IngressEgressGw) isReplaceSpecType_SiteType()                 {}
func (*ReplaceSpecType_VoltstackCluster) isReplaceSpecType_SiteType()                {}
func (*ReplaceSpecType_IngressGwAr) isReplaceSpecType_SiteType()                     {}
func (*ReplaceSpecType_IngressEgressGwAr) isReplaceSpecType_SiteType()               {}
func (*ReplaceSpecType_VoltstackClusterAr) isReplaceSpecType_SiteType()              {}
func (*ReplaceSpecType_LogsStreamingDisabled) isReplaceSpecType_LogsReceiverChoice() {}
func (*ReplaceSpecType_LogReceiver) isReplaceSpecType_LogsReceiverChoice()           {}
func (*ReplaceSpecType_NodesPerAz) isReplaceSpecType_WorkerNodes()                   {}
func (*ReplaceSpecType_TotalNodes) isReplaceSpecType_WorkerNodes()                   {}
func (*ReplaceSpecType_NoWorkerNodes) isReplaceSpecType_WorkerNodes()                {}

func (m *ReplaceSpecType) GetSiteType() isReplaceSpecType_SiteType {
	if m != nil {
		return m.SiteType
	}
	return nil
}
func (m *ReplaceSpecType) GetLogsReceiverChoice() isReplaceSpecType_LogsReceiverChoice {
	if m != nil {
		return m.LogsReceiverChoice
	}
	return nil
}
func (m *ReplaceSpecType) GetWorkerNodes() isReplaceSpecType_WorkerNodes {
	if m != nil {
		return m.WorkerNodes
	}
	return nil
}

func (m *ReplaceSpecType) GetIngressGw() *AzureVnetIngressGwReplaceType {
	if x, ok := m.GetSiteType().(*ReplaceSpecType_IngressGw); ok {
		return x.IngressGw
	}
	return nil
}

func (m *ReplaceSpecType) GetIngressEgressGw() *AzureVnetIngressEgressGwReplaceType {
	if x, ok := m.GetSiteType().(*ReplaceSpecType_IngressEgressGw); ok {
		return x.IngressEgressGw
	}
	return nil
}

func (m *ReplaceSpecType) GetVoltstackCluster() *AzureVnetVoltstackClusterReplaceType {
	if x, ok := m.GetSiteType().(*ReplaceSpecType_VoltstackCluster); ok {
		return x.VoltstackCluster
	}
	return nil
}

func (m *ReplaceSpecType) GetIngressGwAr() *AzureVnetIngressGwReplaceType {
	if x, ok := m.GetSiteType().(*ReplaceSpecType_IngressGwAr); ok {
		return x.IngressGwAr
	}
	return nil
}

func (m *ReplaceSpecType) GetIngressEgressGwAr() *AzureVnetIngressEgressGwReplaceType {
	if x, ok := m.GetSiteType().(*ReplaceSpecType_IngressEgressGwAr); ok {
		return x.IngressEgressGwAr
	}
	return nil
}

func (m *ReplaceSpecType) GetVoltstackClusterAr() *AzureVnetVoltstackClusterReplaceType {
	if x, ok := m.GetSiteType().(*ReplaceSpecType_VoltstackClusterAr); ok {
		return x.VoltstackClusterAr
	}
	return nil
}

func (m *ReplaceSpecType) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *ReplaceSpecType) GetCoordinates() *ves_io_schema_site.Coordinates {
	if m != nil {
		return m.Coordinates
	}
	return nil
}

func (m *ReplaceSpecType) GetLogsStreamingDisabled() *ves_io_schema4.Empty {
	if x, ok := m.GetLogsReceiverChoice().(*ReplaceSpecType_LogsStreamingDisabled); ok {
		return x.LogsStreamingDisabled
	}
	return nil
}

func (m *ReplaceSpecType) GetLogReceiver() *ves_io_schema_views.ObjectRefType {
	if x, ok := m.GetLogsReceiverChoice().(*ReplaceSpecType_LogReceiver); ok {
		return x.LogReceiver
	}
	return nil
}

func (m *ReplaceSpecType) GetNodesPerAz() uint32 {
	if x, ok := m.GetWorkerNodes().(*ReplaceSpecType_NodesPerAz); ok {
		return x.NodesPerAz
	}
	return 0
}

func (m *ReplaceSpecType) GetTotalNodes() uint32 {
	if x, ok := m.GetWorkerNodes().(*ReplaceSpecType_TotalNodes); ok {
		return x.TotalNodes
	}
	return 0
}

func (m *ReplaceSpecType) GetNoWorkerNodes() *ves_io_schema4.Empty {
	if x, ok := m.GetWorkerNodes().(*ReplaceSpecType_NoWorkerNodes); ok {
		return x.NoWorkerNodes
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*ReplaceSpecType) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _ReplaceSpecType_OneofMarshaler, _ReplaceSpecType_OneofUnmarshaler, _ReplaceSpecType_OneofSizer, []interface{}{
		(*ReplaceSpecType_IngressGw)(nil),
		(*ReplaceSpecType_IngressEgressGw)(nil),
		(*ReplaceSpecType_VoltstackCluster)(nil),
		(*ReplaceSpecType_IngressGwAr)(nil),
		(*ReplaceSpecType_IngressEgressGwAr)(nil),
		(*ReplaceSpecType_VoltstackClusterAr)(nil),
		(*ReplaceSpecType_LogsStreamingDisabled)(nil),
		(*ReplaceSpecType_LogReceiver)(nil),
		(*ReplaceSpecType_NodesPerAz)(nil),
		(*ReplaceSpecType_TotalNodes)(nil),
		(*ReplaceSpecType_NoWorkerNodes)(nil),
	}
}

func _ReplaceSpecType_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*ReplaceSpecType)
	// site_type
	switch x := m.SiteType.(type) {
	case *ReplaceSpecType_IngressGw:
		_ = b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.IngressGw); err != nil {
			return err
		}
	case *ReplaceSpecType_IngressEgressGw:
		_ = b.EncodeVarint(6<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.IngressEgressGw); err != nil {
			return err
		}
	case *ReplaceSpecType_VoltstackCluster:
		_ = b.EncodeVarint(17<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.VoltstackCluster); err != nil {
			return err
		}
	case *ReplaceSpecType_IngressGwAr:
		_ = b.EncodeVarint(32<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.IngressGwAr); err != nil {
			return err
		}
	case *ReplaceSpecType_IngressEgressGwAr:
		_ = b.EncodeVarint(33<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.IngressEgressGwAr); err != nil {
			return err
		}
	case *ReplaceSpecType_VoltstackClusterAr:
		_ = b.EncodeVarint(34<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.VoltstackClusterAr); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("ReplaceSpecType.SiteType has unexpected type %T", x)
	}
	// logs_receiver_choice
	switch x := m.LogsReceiverChoice.(type) {
	case *ReplaceSpecType_LogsStreamingDisabled:
		_ = b.EncodeVarint(21<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.LogsStreamingDisabled); err != nil {
			return err
		}
	case *ReplaceSpecType_LogReceiver:
		_ = b.EncodeVarint(22<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.LogReceiver); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("ReplaceSpecType.LogsReceiverChoice has unexpected type %T", x)
	}
	// worker_nodes
	switch x := m.WorkerNodes.(type) {
	case *ReplaceSpecType_NodesPerAz:
		_ = b.EncodeVarint(15<<3 | proto.WireVarint)
		_ = b.EncodeVarint(uint64(x.NodesPerAz))
	case *ReplaceSpecType_TotalNodes:
		_ = b.EncodeVarint(27<<3 | proto.WireVarint)
		_ = b.EncodeVarint(uint64(x.TotalNodes))
	case *ReplaceSpecType_NoWorkerNodes:
		_ = b.EncodeVarint(28<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.NoWorkerNodes); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("ReplaceSpecType.WorkerNodes has unexpected type %T", x)
	}
	return nil
}

func _ReplaceSpecType_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*ReplaceSpecType)
	switch tag {
	case 5: // site_type.ingress_gw
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(AzureVnetIngressGwReplaceType)
		err := b.DecodeMessage(msg)
		m.SiteType = &ReplaceSpecType_IngressGw{msg}
		return true, err
	case 6: // site_type.ingress_egress_gw
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(AzureVnetIngressEgressGwReplaceType)
		err := b.DecodeMessage(msg)
		m.SiteType = &ReplaceSpecType_IngressEgressGw{msg}
		return true, err
	case 17: // site_type.voltstack_cluster
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(AzureVnetVoltstackClusterReplaceType)
		err := b.DecodeMessage(msg)
		m.SiteType = &ReplaceSpecType_VoltstackCluster{msg}
		return true, err
	case 32: // site_type.ingress_gw_ar
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(AzureVnetIngressGwReplaceType)
		err := b.DecodeMessage(msg)
		m.SiteType = &ReplaceSpecType_IngressGwAr{msg}
		return true, err
	case 33: // site_type.ingress_egress_gw_ar
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(AzureVnetIngressEgressGwReplaceType)
		err := b.DecodeMessage(msg)
		m.SiteType = &ReplaceSpecType_IngressEgressGwAr{msg}
		return true, err
	case 34: // site_type.voltstack_cluster_ar
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(AzureVnetVoltstackClusterReplaceType)
		err := b.DecodeMessage(msg)
		m.SiteType = &ReplaceSpecType_VoltstackClusterAr{msg}
		return true, err
	case 21: // logs_receiver_choice.logs_streaming_disabled
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.LogsReceiverChoice = &ReplaceSpecType_LogsStreamingDisabled{msg}
		return true, err
	case 22: // logs_receiver_choice.log_receiver
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema_views.ObjectRefType)
		err := b.DecodeMessage(msg)
		m.LogsReceiverChoice = &ReplaceSpecType_LogReceiver{msg}
		return true, err
	case 15: // worker_nodes.nodes_per_az
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.WorkerNodes = &ReplaceSpecType_NodesPerAz{uint32(x)}
		return true, err
	case 27: // worker_nodes.total_nodes
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.WorkerNodes = &ReplaceSpecType_TotalNodes{uint32(x)}
		return true, err
	case 28: // worker_nodes.no_worker_nodes
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.WorkerNodes = &ReplaceSpecType_NoWorkerNodes{msg}
		return true, err
	default:
		return false, nil
	}
}

func _ReplaceSpecType_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*ReplaceSpecType)
	// site_type
	switch x := m.SiteType.(type) {
	case *ReplaceSpecType_IngressGw:
		s := proto.Size(x.IngressGw)
		n += proto.SizeVarint(5<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ReplaceSpecType_IngressEgressGw:
		s := proto.Size(x.IngressEgressGw)
		n += proto.SizeVarint(6<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ReplaceSpecType_VoltstackCluster:
		s := proto.Size(x.VoltstackCluster)
		n += proto.SizeVarint(17<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ReplaceSpecType_IngressGwAr:
		s := proto.Size(x.IngressGwAr)
		n += proto.SizeVarint(32<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ReplaceSpecType_IngressEgressGwAr:
		s := proto.Size(x.IngressEgressGwAr)
		n += proto.SizeVarint(33<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ReplaceSpecType_VoltstackClusterAr:
		s := proto.Size(x.VoltstackClusterAr)
		n += proto.SizeVarint(34<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	// logs_receiver_choice
	switch x := m.LogsReceiverChoice.(type) {
	case *ReplaceSpecType_LogsStreamingDisabled:
		s := proto.Size(x.LogsStreamingDisabled)
		n += proto.SizeVarint(21<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ReplaceSpecType_LogReceiver:
		s := proto.Size(x.LogReceiver)
		n += proto.SizeVarint(22<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	// worker_nodes
	switch x := m.WorkerNodes.(type) {
	case *ReplaceSpecType_NodesPerAz:
		n += proto.SizeVarint(15<<3 | proto.WireVarint)
		n += proto.SizeVarint(uint64(x.NodesPerAz))
	case *ReplaceSpecType_TotalNodes:
		n += proto.SizeVarint(27<<3 | proto.WireVarint)
		n += proto.SizeVarint(uint64(x.TotalNodes))
	case *ReplaceSpecType_NoWorkerNodes:
		s := proto.Size(x.NoWorkerNodes)
		n += proto.SizeVarint(28<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// GetSpecType
//
// x-displayName: "Get Azure Vnet site"
// Shape of the Azure Vnet site specification
type GetSpecType struct {
	ResourceGroup string `protobuf:"bytes,1,opt,name=resource_group,json=resourceGroup,proto3" json:"resource_group,omitempty"`
	// Types that are valid to be assigned to RegionChoice:
	//	*GetSpecType_AzureRegion
	//	*GetSpecType_AlternateRegion
	RegionChoice isGetSpecType_RegionChoice                `protobuf_oneof:"region_choice"`
	Vnet         *ves_io_schema_views1.AzureVnetChoiceType `protobuf:"bytes,3,opt,name=vnet" json:"vnet,omitempty"`
	// Types that are valid to be assigned to SiteType:
	//	*GetSpecType_IngressGw
	//	*GetSpecType_IngressEgressGw
	//	*GetSpecType_VoltstackCluster
	//	*GetSpecType_IngressGwAr
	//	*GetSpecType_IngressEgressGwAr
	//	*GetSpecType_VoltstackClusterAr
	SiteType isGetSpecType_SiteType `protobuf_oneof:"site_type"`
	// Types that are valid to be assigned to Deployment:
	//	*GetSpecType_AzureCred
	//	*GetSpecType_Assisted
	Deployment              isGetSpecType_Deployment        `protobuf_oneof:"deployment"`
	MachineType             string                          `protobuf:"bytes,10,opt,name=machine_type,json=machineType,proto3" json:"machine_type,omitempty"`
	DiskSize                uint32                          `protobuf:"varint,16,opt,name=disk_size,json=diskSize,proto3" json:"disk_size,omitempty"`
	VolterraSoftwareVersion string                          `protobuf:"bytes,12,opt,name=volterra_software_version,json=volterraSoftwareVersion,proto3" json:"volterra_software_version,omitempty"`
	OperatingSystemVersion  string                          `protobuf:"bytes,13,opt,name=operating_system_version,json=operatingSystemVersion,proto3" json:"operating_system_version,omitempty"`
	SshKey                  string                          `protobuf:"bytes,14,opt,name=ssh_key,json=sshKey,proto3" json:"ssh_key,omitempty"`
	Address                 string                          `protobuf:"bytes,18,opt,name=address,proto3" json:"address,omitempty"`
	Coordinates             *ves_io_schema_site.Coordinates `protobuf:"bytes,19,opt,name=coordinates" json:"coordinates,omitempty"`
	// Types that are valid to be assigned to LogsReceiverChoice:
	//	*GetSpecType_LogsStreamingDisabled
	//	*GetSpecType_LogReceiver
	LogsReceiverChoice isGetSpecType_LogsReceiverChoice            `protobuf_oneof:"logs_receiver_choice"`
	SiteState          ves_io_schema_site.SiteState                `protobuf:"varint,23,opt,name=site_state,json=siteState,proto3,enum=ves.io.schema.site.SiteState" json:"site_state,omitempty"`
	VipParamsPerAz     []*ves_io_schema_site.PublishVIPParamsPerAz `protobuf:"bytes,25,rep,name=vip_params_per_az,json=vipParamsPerAz" json:"vip_params_per_az,omitempty"`
	// Types that are valid to be assigned to WorkerNodes:
	//	*GetSpecType_NodesPerAz
	//	*GetSpecType_TotalNodes
	//	*GetSpecType_NoWorkerNodes
	WorkerNodes isGetSpecType_WorkerNodes `protobuf_oneof:"worker_nodes"`
}

func (m *GetSpecType) Reset()                    { *m = GetSpecType{} }
func (*GetSpecType) ProtoMessage()               {}
func (*GetSpecType) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{12} }

type isGetSpecType_RegionChoice interface {
	isGetSpecType_RegionChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isGetSpecType_SiteType interface {
	isGetSpecType_SiteType()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isGetSpecType_Deployment interface {
	isGetSpecType_Deployment()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isGetSpecType_LogsReceiverChoice interface {
	isGetSpecType_LogsReceiverChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isGetSpecType_WorkerNodes interface {
	isGetSpecType_WorkerNodes()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type GetSpecType_AzureRegion struct {
	AzureRegion string `protobuf:"bytes,2,opt,name=azure_region,json=azureRegion,proto3,oneof"`
}
type GetSpecType_AlternateRegion struct {
	AlternateRegion string `protobuf:"bytes,31,opt,name=alternate_region,json=alternateRegion,proto3,oneof"`
}
type GetSpecType_IngressGw struct {
	IngressGw *AzureVnetIngressGwType `protobuf:"bytes,5,opt,name=ingress_gw,json=ingressGw,oneof"`
}
type GetSpecType_IngressEgressGw struct {
	IngressEgressGw *AzureVnetIngressEgressGwType `protobuf:"bytes,6,opt,name=ingress_egress_gw,json=ingressEgressGw,oneof"`
}
type GetSpecType_VoltstackCluster struct {
	VoltstackCluster *AzureVnetVoltstackClusterType `protobuf:"bytes,17,opt,name=voltstack_cluster,json=voltstackCluster,oneof"`
}
type GetSpecType_IngressGwAr struct {
	IngressGwAr *AzureVnetIngressGwARType `protobuf:"bytes,32,opt,name=ingress_gw_ar,json=ingressGwAr,oneof"`
}
type GetSpecType_IngressEgressGwAr struct {
	IngressEgressGwAr *AzureVnetIngressEgressGwARType `protobuf:"bytes,33,opt,name=ingress_egress_gw_ar,json=ingressEgressGwAr,oneof"`
}
type GetSpecType_VoltstackClusterAr struct {
	VoltstackClusterAr *AzureVnetVoltstackClusterARType `protobuf:"bytes,34,opt,name=voltstack_cluster_ar,json=voltstackClusterAr,oneof"`
}
type GetSpecType_AzureCred struct {
	AzureCred *ves_io_schema_views.ObjectRefType `protobuf:"bytes,8,opt,name=azure_cred,json=azureCred,oneof"`
}
type GetSpecType_Assisted struct {
	Assisted *ves_io_schema4.Empty `protobuf:"bytes,9,opt,name=assisted,oneof"`
}
type GetSpecType_LogsStreamingDisabled struct {
	LogsStreamingDisabled *ves_io_schema4.Empty `protobuf:"bytes,21,opt,name=logs_streaming_disabled,json=logsStreamingDisabled,oneof"`
}
type GetSpecType_LogReceiver struct {
	LogReceiver *ves_io_schema_views.ObjectRefType `protobuf:"bytes,22,opt,name=log_receiver,json=logReceiver,oneof"`
}
type GetSpecType_NodesPerAz struct {
	NodesPerAz uint32 `protobuf:"varint,15,opt,name=nodes_per_az,json=nodesPerAz,proto3,oneof"`
}
type GetSpecType_TotalNodes struct {
	TotalNodes uint32 `protobuf:"varint,27,opt,name=total_nodes,json=totalNodes,proto3,oneof"`
}
type GetSpecType_NoWorkerNodes struct {
	NoWorkerNodes *ves_io_schema4.Empty `protobuf:"bytes,28,opt,name=no_worker_nodes,json=noWorkerNodes,oneof"`
}

func (*GetSpecType_AzureRegion) isGetSpecType_RegionChoice()                 {}
func (*GetSpecType_AlternateRegion) isGetSpecType_RegionChoice()             {}
func (*GetSpecType_IngressGw) isGetSpecType_SiteType()                       {}
func (*GetSpecType_IngressEgressGw) isGetSpecType_SiteType()                 {}
func (*GetSpecType_VoltstackCluster) isGetSpecType_SiteType()                {}
func (*GetSpecType_IngressGwAr) isGetSpecType_SiteType()                     {}
func (*GetSpecType_IngressEgressGwAr) isGetSpecType_SiteType()               {}
func (*GetSpecType_VoltstackClusterAr) isGetSpecType_SiteType()              {}
func (*GetSpecType_AzureCred) isGetSpecType_Deployment()                     {}
func (*GetSpecType_Assisted) isGetSpecType_Deployment()                      {}
func (*GetSpecType_LogsStreamingDisabled) isGetSpecType_LogsReceiverChoice() {}
func (*GetSpecType_LogReceiver) isGetSpecType_LogsReceiverChoice()           {}
func (*GetSpecType_NodesPerAz) isGetSpecType_WorkerNodes()                   {}
func (*GetSpecType_TotalNodes) isGetSpecType_WorkerNodes()                   {}
func (*GetSpecType_NoWorkerNodes) isGetSpecType_WorkerNodes()                {}

func (m *GetSpecType) GetRegionChoice() isGetSpecType_RegionChoice {
	if m != nil {
		return m.RegionChoice
	}
	return nil
}
func (m *GetSpecType) GetSiteType() isGetSpecType_SiteType {
	if m != nil {
		return m.SiteType
	}
	return nil
}
func (m *GetSpecType) GetDeployment() isGetSpecType_Deployment {
	if m != nil {
		return m.Deployment
	}
	return nil
}
func (m *GetSpecType) GetLogsReceiverChoice() isGetSpecType_LogsReceiverChoice {
	if m != nil {
		return m.LogsReceiverChoice
	}
	return nil
}
func (m *GetSpecType) GetWorkerNodes() isGetSpecType_WorkerNodes {
	if m != nil {
		return m.WorkerNodes
	}
	return nil
}

func (m *GetSpecType) GetResourceGroup() string {
	if m != nil {
		return m.ResourceGroup
	}
	return ""
}

func (m *GetSpecType) GetAzureRegion() string {
	if x, ok := m.GetRegionChoice().(*GetSpecType_AzureRegion); ok {
		return x.AzureRegion
	}
	return ""
}

func (m *GetSpecType) GetAlternateRegion() string {
	if x, ok := m.GetRegionChoice().(*GetSpecType_AlternateRegion); ok {
		return x.AlternateRegion
	}
	return ""
}

func (m *GetSpecType) GetVnet() *ves_io_schema_views1.AzureVnetChoiceType {
	if m != nil {
		return m.Vnet
	}
	return nil
}

func (m *GetSpecType) GetIngressGw() *AzureVnetIngressGwType {
	if x, ok := m.GetSiteType().(*GetSpecType_IngressGw); ok {
		return x.IngressGw
	}
	return nil
}

func (m *GetSpecType) GetIngressEgressGw() *AzureVnetIngressEgressGwType {
	if x, ok := m.GetSiteType().(*GetSpecType_IngressEgressGw); ok {
		return x.IngressEgressGw
	}
	return nil
}

func (m *GetSpecType) GetVoltstackCluster() *AzureVnetVoltstackClusterType {
	if x, ok := m.GetSiteType().(*GetSpecType_VoltstackCluster); ok {
		return x.VoltstackCluster
	}
	return nil
}

func (m *GetSpecType) GetIngressGwAr() *AzureVnetIngressGwARType {
	if x, ok := m.GetSiteType().(*GetSpecType_IngressGwAr); ok {
		return x.IngressGwAr
	}
	return nil
}

func (m *GetSpecType) GetIngressEgressGwAr() *AzureVnetIngressEgressGwARType {
	if x, ok := m.GetSiteType().(*GetSpecType_IngressEgressGwAr); ok {
		return x.IngressEgressGwAr
	}
	return nil
}

func (m *GetSpecType) GetVoltstackClusterAr() *AzureVnetVoltstackClusterARType {
	if x, ok := m.GetSiteType().(*GetSpecType_VoltstackClusterAr); ok {
		return x.VoltstackClusterAr
	}
	return nil
}

func (m *GetSpecType) GetAzureCred() *ves_io_schema_views.ObjectRefType {
	if x, ok := m.GetDeployment().(*GetSpecType_AzureCred); ok {
		return x.AzureCred
	}
	return nil
}

func (m *GetSpecType) GetAssisted() *ves_io_schema4.Empty {
	if x, ok := m.GetDeployment().(*GetSpecType_Assisted); ok {
		return x.Assisted
	}
	return nil
}

func (m *GetSpecType) GetMachineType() string {
	if m != nil {
		return m.MachineType
	}
	return ""
}

func (m *GetSpecType) GetDiskSize() uint32 {
	if m != nil {
		return m.DiskSize
	}
	return 0
}

func (m *GetSpecType) GetVolterraSoftwareVersion() string {
	if m != nil {
		return m.VolterraSoftwareVersion
	}
	return ""
}

func (m *GetSpecType) GetOperatingSystemVersion() string {
	if m != nil {
		return m.OperatingSystemVersion
	}
	return ""
}

func (m *GetSpecType) GetSshKey() string {
	if m != nil {
		return m.SshKey
	}
	return ""
}

func (m *GetSpecType) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *GetSpecType) GetCoordinates() *ves_io_schema_site.Coordinates {
	if m != nil {
		return m.Coordinates
	}
	return nil
}

func (m *GetSpecType) GetLogsStreamingDisabled() *ves_io_schema4.Empty {
	if x, ok := m.GetLogsReceiverChoice().(*GetSpecType_LogsStreamingDisabled); ok {
		return x.LogsStreamingDisabled
	}
	return nil
}

func (m *GetSpecType) GetLogReceiver() *ves_io_schema_views.ObjectRefType {
	if x, ok := m.GetLogsReceiverChoice().(*GetSpecType_LogReceiver); ok {
		return x.LogReceiver
	}
	return nil
}

func (m *GetSpecType) GetSiteState() ves_io_schema_site.SiteState {
	if m != nil {
		return m.SiteState
	}
	return ves_io_schema_site.ONLINE
}

func (m *GetSpecType) GetVipParamsPerAz() []*ves_io_schema_site.PublishVIPParamsPerAz {
	if m != nil {
		return m.VipParamsPerAz
	}
	return nil
}

func (m *GetSpecType) GetNodesPerAz() uint32 {
	if x, ok := m.GetWorkerNodes().(*GetSpecType_NodesPerAz); ok {
		return x.NodesPerAz
	}
	return 0
}

func (m *GetSpecType) GetTotalNodes() uint32 {
	if x, ok := m.GetWorkerNodes().(*GetSpecType_TotalNodes); ok {
		return x.TotalNodes
	}
	return 0
}

func (m *GetSpecType) GetNoWorkerNodes() *ves_io_schema4.Empty {
	if x, ok := m.GetWorkerNodes().(*GetSpecType_NoWorkerNodes); ok {
		return x.NoWorkerNodes
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*GetSpecType) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _GetSpecType_OneofMarshaler, _GetSpecType_OneofUnmarshaler, _GetSpecType_OneofSizer, []interface{}{
		(*GetSpecType_AzureRegion)(nil),
		(*GetSpecType_AlternateRegion)(nil),
		(*GetSpecType_IngressGw)(nil),
		(*GetSpecType_IngressEgressGw)(nil),
		(*GetSpecType_VoltstackCluster)(nil),
		(*GetSpecType_IngressGwAr)(nil),
		(*GetSpecType_IngressEgressGwAr)(nil),
		(*GetSpecType_VoltstackClusterAr)(nil),
		(*GetSpecType_AzureCred)(nil),
		(*GetSpecType_Assisted)(nil),
		(*GetSpecType_LogsStreamingDisabled)(nil),
		(*GetSpecType_LogReceiver)(nil),
		(*GetSpecType_NodesPerAz)(nil),
		(*GetSpecType_TotalNodes)(nil),
		(*GetSpecType_NoWorkerNodes)(nil),
	}
}

func _GetSpecType_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*GetSpecType)
	// region_choice
	switch x := m.RegionChoice.(type) {
	case *GetSpecType_AzureRegion:
		_ = b.EncodeVarint(2<<3 | proto.WireBytes)
		_ = b.EncodeStringBytes(x.AzureRegion)
	case *GetSpecType_AlternateRegion:
		_ = b.EncodeVarint(31<<3 | proto.WireBytes)
		_ = b.EncodeStringBytes(x.AlternateRegion)
	case nil:
	default:
		return fmt.Errorf("GetSpecType.RegionChoice has unexpected type %T", x)
	}
	// site_type
	switch x := m.SiteType.(type) {
	case *GetSpecType_IngressGw:
		_ = b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.IngressGw); err != nil {
			return err
		}
	case *GetSpecType_IngressEgressGw:
		_ = b.EncodeVarint(6<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.IngressEgressGw); err != nil {
			return err
		}
	case *GetSpecType_VoltstackCluster:
		_ = b.EncodeVarint(17<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.VoltstackCluster); err != nil {
			return err
		}
	case *GetSpecType_IngressGwAr:
		_ = b.EncodeVarint(32<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.IngressGwAr); err != nil {
			return err
		}
	case *GetSpecType_IngressEgressGwAr:
		_ = b.EncodeVarint(33<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.IngressEgressGwAr); err != nil {
			return err
		}
	case *GetSpecType_VoltstackClusterAr:
		_ = b.EncodeVarint(34<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.VoltstackClusterAr); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("GetSpecType.SiteType has unexpected type %T", x)
	}
	// deployment
	switch x := m.Deployment.(type) {
	case *GetSpecType_AzureCred:
		_ = b.EncodeVarint(8<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.AzureCred); err != nil {
			return err
		}
	case *GetSpecType_Assisted:
		_ = b.EncodeVarint(9<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Assisted); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("GetSpecType.Deployment has unexpected type %T", x)
	}
	// logs_receiver_choice
	switch x := m.LogsReceiverChoice.(type) {
	case *GetSpecType_LogsStreamingDisabled:
		_ = b.EncodeVarint(21<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.LogsStreamingDisabled); err != nil {
			return err
		}
	case *GetSpecType_LogReceiver:
		_ = b.EncodeVarint(22<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.LogReceiver); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("GetSpecType.LogsReceiverChoice has unexpected type %T", x)
	}
	// worker_nodes
	switch x := m.WorkerNodes.(type) {
	case *GetSpecType_NodesPerAz:
		_ = b.EncodeVarint(15<<3 | proto.WireVarint)
		_ = b.EncodeVarint(uint64(x.NodesPerAz))
	case *GetSpecType_TotalNodes:
		_ = b.EncodeVarint(27<<3 | proto.WireVarint)
		_ = b.EncodeVarint(uint64(x.TotalNodes))
	case *GetSpecType_NoWorkerNodes:
		_ = b.EncodeVarint(28<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.NoWorkerNodes); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("GetSpecType.WorkerNodes has unexpected type %T", x)
	}
	return nil
}

func _GetSpecType_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*GetSpecType)
	switch tag {
	case 2: // region_choice.azure_region
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.RegionChoice = &GetSpecType_AzureRegion{x}
		return true, err
	case 31: // region_choice.alternate_region
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.RegionChoice = &GetSpecType_AlternateRegion{x}
		return true, err
	case 5: // site_type.ingress_gw
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(AzureVnetIngressGwType)
		err := b.DecodeMessage(msg)
		m.SiteType = &GetSpecType_IngressGw{msg}
		return true, err
	case 6: // site_type.ingress_egress_gw
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(AzureVnetIngressEgressGwType)
		err := b.DecodeMessage(msg)
		m.SiteType = &GetSpecType_IngressEgressGw{msg}
		return true, err
	case 17: // site_type.voltstack_cluster
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(AzureVnetVoltstackClusterType)
		err := b.DecodeMessage(msg)
		m.SiteType = &GetSpecType_VoltstackCluster{msg}
		return true, err
	case 32: // site_type.ingress_gw_ar
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(AzureVnetIngressGwARType)
		err := b.DecodeMessage(msg)
		m.SiteType = &GetSpecType_IngressGwAr{msg}
		return true, err
	case 33: // site_type.ingress_egress_gw_ar
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(AzureVnetIngressEgressGwARType)
		err := b.DecodeMessage(msg)
		m.SiteType = &GetSpecType_IngressEgressGwAr{msg}
		return true, err
	case 34: // site_type.voltstack_cluster_ar
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(AzureVnetVoltstackClusterARType)
		err := b.DecodeMessage(msg)
		m.SiteType = &GetSpecType_VoltstackClusterAr{msg}
		return true, err
	case 8: // deployment.azure_cred
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema_views.ObjectRefType)
		err := b.DecodeMessage(msg)
		m.Deployment = &GetSpecType_AzureCred{msg}
		return true, err
	case 9: // deployment.assisted
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.Deployment = &GetSpecType_Assisted{msg}
		return true, err
	case 21: // logs_receiver_choice.logs_streaming_disabled
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.LogsReceiverChoice = &GetSpecType_LogsStreamingDisabled{msg}
		return true, err
	case 22: // logs_receiver_choice.log_receiver
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema_views.ObjectRefType)
		err := b.DecodeMessage(msg)
		m.LogsReceiverChoice = &GetSpecType_LogReceiver{msg}
		return true, err
	case 15: // worker_nodes.nodes_per_az
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.WorkerNodes = &GetSpecType_NodesPerAz{uint32(x)}
		return true, err
	case 27: // worker_nodes.total_nodes
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.WorkerNodes = &GetSpecType_TotalNodes{uint32(x)}
		return true, err
	case 28: // worker_nodes.no_worker_nodes
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.WorkerNodes = &GetSpecType_NoWorkerNodes{msg}
		return true, err
	default:
		return false, nil
	}
}

func _GetSpecType_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*GetSpecType)
	// region_choice
	switch x := m.RegionChoice.(type) {
	case *GetSpecType_AzureRegion:
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.AzureRegion)))
		n += len(x.AzureRegion)
	case *GetSpecType_AlternateRegion:
		n += proto.SizeVarint(31<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.AlternateRegion)))
		n += len(x.AlternateRegion)
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	// site_type
	switch x := m.SiteType.(type) {
	case *GetSpecType_IngressGw:
		s := proto.Size(x.IngressGw)
		n += proto.SizeVarint(5<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *GetSpecType_IngressEgressGw:
		s := proto.Size(x.IngressEgressGw)
		n += proto.SizeVarint(6<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *GetSpecType_VoltstackCluster:
		s := proto.Size(x.VoltstackCluster)
		n += proto.SizeVarint(17<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *GetSpecType_IngressGwAr:
		s := proto.Size(x.IngressGwAr)
		n += proto.SizeVarint(32<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *GetSpecType_IngressEgressGwAr:
		s := proto.Size(x.IngressEgressGwAr)
		n += proto.SizeVarint(33<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *GetSpecType_VoltstackClusterAr:
		s := proto.Size(x.VoltstackClusterAr)
		n += proto.SizeVarint(34<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	// deployment
	switch x := m.Deployment.(type) {
	case *GetSpecType_AzureCred:
		s := proto.Size(x.AzureCred)
		n += proto.SizeVarint(8<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *GetSpecType_Assisted:
		s := proto.Size(x.Assisted)
		n += proto.SizeVarint(9<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	// logs_receiver_choice
	switch x := m.LogsReceiverChoice.(type) {
	case *GetSpecType_LogsStreamingDisabled:
		s := proto.Size(x.LogsStreamingDisabled)
		n += proto.SizeVarint(21<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *GetSpecType_LogReceiver:
		s := proto.Size(x.LogReceiver)
		n += proto.SizeVarint(22<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	// worker_nodes
	switch x := m.WorkerNodes.(type) {
	case *GetSpecType_NodesPerAz:
		n += proto.SizeVarint(15<<3 | proto.WireVarint)
		n += proto.SizeVarint(uint64(x.NodesPerAz))
	case *GetSpecType_TotalNodes:
		n += proto.SizeVarint(27<<3 | proto.WireVarint)
		n += proto.SizeVarint(uint64(x.TotalNodes))
	case *GetSpecType_NoWorkerNodes:
		s := proto.Size(x.NoWorkerNodes)
		n += proto.SizeVarint(28<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

func init() {
	proto.RegisterType((*AzureVnetIngressGwType)(nil), "ves.io.schema.views.azure_vnet_site.AzureVnetIngressGwType")
	golang_proto.RegisterType((*AzureVnetIngressGwType)(nil), "ves.io.schema.views.azure_vnet_site.AzureVnetIngressGwType")
	proto.RegisterType((*AzureVnetIngressGwARType)(nil), "ves.io.schema.views.azure_vnet_site.AzureVnetIngressGwARType")
	golang_proto.RegisterType((*AzureVnetIngressGwARType)(nil), "ves.io.schema.views.azure_vnet_site.AzureVnetIngressGwARType")
	proto.RegisterType((*AzureVnetIngressEgressGwType)(nil), "ves.io.schema.views.azure_vnet_site.AzureVnetIngressEgressGwType")
	golang_proto.RegisterType((*AzureVnetIngressEgressGwType)(nil), "ves.io.schema.views.azure_vnet_site.AzureVnetIngressEgressGwType")
	proto.RegisterType((*AzureVnetIngressEgressGwARType)(nil), "ves.io.schema.views.azure_vnet_site.AzureVnetIngressEgressGwARType")
	golang_proto.RegisterType((*AzureVnetIngressEgressGwARType)(nil), "ves.io.schema.views.azure_vnet_site.AzureVnetIngressEgressGwARType")
	proto.RegisterType((*AzureVnetVoltstackClusterType)(nil), "ves.io.schema.views.azure_vnet_site.AzureVnetVoltstackClusterType")
	golang_proto.RegisterType((*AzureVnetVoltstackClusterType)(nil), "ves.io.schema.views.azure_vnet_site.AzureVnetVoltstackClusterType")
	proto.RegisterType((*AzureVnetVoltstackClusterARType)(nil), "ves.io.schema.views.azure_vnet_site.AzureVnetVoltstackClusterARType")
	golang_proto.RegisterType((*AzureVnetVoltstackClusterARType)(nil), "ves.io.schema.views.azure_vnet_site.AzureVnetVoltstackClusterARType")
	proto.RegisterType((*AzureVnetIngressGwReplaceType)(nil), "ves.io.schema.views.azure_vnet_site.AzureVnetIngressGwReplaceType")
	golang_proto.RegisterType((*AzureVnetIngressGwReplaceType)(nil), "ves.io.schema.views.azure_vnet_site.AzureVnetIngressGwReplaceType")
	proto.RegisterType((*AzureVnetIngressEgressGwReplaceType)(nil), "ves.io.schema.views.azure_vnet_site.AzureVnetIngressEgressGwReplaceType")
	golang_proto.RegisterType((*AzureVnetIngressEgressGwReplaceType)(nil), "ves.io.schema.views.azure_vnet_site.AzureVnetIngressEgressGwReplaceType")
	proto.RegisterType((*AzureVnetVoltstackClusterReplaceType)(nil), "ves.io.schema.views.azure_vnet_site.AzureVnetVoltstackClusterReplaceType")
	golang_proto.RegisterType((*AzureVnetVoltstackClusterReplaceType)(nil), "ves.io.schema.views.azure_vnet_site.AzureVnetVoltstackClusterReplaceType")
	proto.RegisterType((*GlobalSpecType)(nil), "ves.io.schema.views.azure_vnet_site.GlobalSpecType")
	golang_proto.RegisterType((*GlobalSpecType)(nil), "ves.io.schema.views.azure_vnet_site.GlobalSpecType")
	proto.RegisterType((*CreateSpecType)(nil), "ves.io.schema.views.azure_vnet_site.CreateSpecType")
	golang_proto.RegisterType((*CreateSpecType)(nil), "ves.io.schema.views.azure_vnet_site.CreateSpecType")
	proto.RegisterType((*ReplaceSpecType)(nil), "ves.io.schema.views.azure_vnet_site.ReplaceSpecType")
	golang_proto.RegisterType((*ReplaceSpecType)(nil), "ves.io.schema.views.azure_vnet_site.ReplaceSpecType")
	proto.RegisterType((*GetSpecType)(nil), "ves.io.schema.views.azure_vnet_site.GetSpecType")
	golang_proto.RegisterType((*GetSpecType)(nil), "ves.io.schema.views.azure_vnet_site.GetSpecType")
}
func (this *AzureVnetIngressGwType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AzureVnetIngressGwType)
	if !ok {
		that2, ok := that.(AzureVnetIngressGwType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.AzNodes) != len(that1.AzNodes) {
		return false
	}
	for i := range this.AzNodes {
		if !this.AzNodes[i].Equal(that1.AzNodes[i]) {
			return false
		}
	}
	if this.AzureCertifiedHw != that1.AzureCertifiedHw {
		return false
	}
	return true
}
func (this *AzureVnetIngressGwARType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AzureVnetIngressGwARType)
	if !ok {
		that2, ok := that.(AzureVnetIngressGwARType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Node.Equal(that1.Node) {
		return false
	}
	if this.AzureCertifiedHw != that1.AzureCertifiedHw {
		return false
	}
	return true
}
func (this *AzureVnetIngressEgressGwType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AzureVnetIngressEgressGwType)
	if !ok {
		that2, ok := that.(AzureVnetIngressEgressGwType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.AzNodes) != len(that1.AzNodes) {
		return false
	}
	for i := range this.AzNodes {
		if !this.AzNodes[i].Equal(that1.AzNodes[i]) {
			return false
		}
	}
	if that1.NetworkPolicyChoice == nil {
		if this.NetworkPolicyChoice != nil {
			return false
		}
	} else if this.NetworkPolicyChoice == nil {
		return false
	} else if !this.NetworkPolicyChoice.Equal(that1.NetworkPolicyChoice) {
		return false
	}
	if that1.ForwardProxyChoice == nil {
		if this.ForwardProxyChoice != nil {
			return false
		}
	} else if this.ForwardProxyChoice == nil {
		return false
	} else if !this.ForwardProxyChoice.Equal(that1.ForwardProxyChoice) {
		return false
	}
	if this.AzureCertifiedHw != that1.AzureCertifiedHw {
		return false
	}
	if that1.InsideStaticRouteChoice == nil {
		if this.InsideStaticRouteChoice != nil {
			return false
		}
	} else if this.InsideStaticRouteChoice == nil {
		return false
	} else if !this.InsideStaticRouteChoice.Equal(that1.InsideStaticRouteChoice) {
		return false
	}
	if that1.OutsideStaticRouteChoice == nil {
		if this.OutsideStaticRouteChoice != nil {
			return false
		}
	} else if this.OutsideStaticRouteChoice == nil {
		return false
	} else if !this.OutsideStaticRouteChoice.Equal(that1.OutsideStaticRouteChoice) {
		return false
	}
	if that1.GlobalNetworkChoice == nil {
		if this.GlobalNetworkChoice != nil {
			return false
		}
	} else if this.GlobalNetworkChoice == nil {
		return false
	} else if !this.GlobalNetworkChoice.Equal(that1.GlobalNetworkChoice) {
		return false
	}
	return true
}
func (this *AzureVnetIngressEgressGwType_NoNetworkPolicy) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AzureVnetIngressEgressGwType_NoNetworkPolicy)
	if !ok {
		that2, ok := that.(AzureVnetIngressEgressGwType_NoNetworkPolicy)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NoNetworkPolicy.Equal(that1.NoNetworkPolicy) {
		return false
	}
	return true
}
func (this *AzureVnetIngressEgressGwType_ActiveNetworkPolicies) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AzureVnetIngressEgressGwType_ActiveNetworkPolicies)
	if !ok {
		that2, ok := that.(AzureVnetIngressEgressGwType_ActiveNetworkPolicies)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ActiveNetworkPolicies.Equal(that1.ActiveNetworkPolicies) {
		return false
	}
	return true
}
func (this *AzureVnetIngressEgressGwType_NoForwardProxy) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AzureVnetIngressEgressGwType_NoForwardProxy)
	if !ok {
		that2, ok := that.(AzureVnetIngressEgressGwType_NoForwardProxy)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NoForwardProxy.Equal(that1.NoForwardProxy) {
		return false
	}
	return true
}
func (this *AzureVnetIngressEgressGwType_ActiveForwardProxyPolicies) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AzureVnetIngressEgressGwType_ActiveForwardProxyPolicies)
	if !ok {
		that2, ok := that.(AzureVnetIngressEgressGwType_ActiveForwardProxyPolicies)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ActiveForwardProxyPolicies.Equal(that1.ActiveForwardProxyPolicies) {
		return false
	}
	return true
}
func (this *AzureVnetIngressEgressGwType_ForwardProxyAllowAll) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AzureVnetIngressEgressGwType_ForwardProxyAllowAll)
	if !ok {
		that2, ok := that.(AzureVnetIngressEgressGwType_ForwardProxyAllowAll)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ForwardProxyAllowAll.Equal(that1.ForwardProxyAllowAll) {
		return false
	}
	return true
}
func (this *AzureVnetIngressEgressGwType_NoInsideStaticRoutes) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AzureVnetIngressEgressGwType_NoInsideStaticRoutes)
	if !ok {
		that2, ok := that.(AzureVnetIngressEgressGwType_NoInsideStaticRoutes)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NoInsideStaticRoutes.Equal(that1.NoInsideStaticRoutes) {
		return false
	}
	return true
}
func (this *AzureVnetIngressEgressGwType_InsideStaticRoutes) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AzureVnetIngressEgressGwType_InsideStaticRoutes)
	if !ok {
		that2, ok := that.(AzureVnetIngressEgressGwType_InsideStaticRoutes)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.InsideStaticRoutes.Equal(that1.InsideStaticRoutes) {
		return false
	}
	return true
}
func (this *AzureVnetIngressEgressGwType_NoOutsideStaticRoutes) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AzureVnetIngressEgressGwType_NoOutsideStaticRoutes)
	if !ok {
		that2, ok := that.(AzureVnetIngressEgressGwType_NoOutsideStaticRoutes)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NoOutsideStaticRoutes.Equal(that1.NoOutsideStaticRoutes) {
		return false
	}
	return true
}
func (this *AzureVnetIngressEgressGwType_OutsideStaticRoutes) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AzureVnetIngressEgressGwType_OutsideStaticRoutes)
	if !ok {
		that2, ok := that.(AzureVnetIngressEgressGwType_OutsideStaticRoutes)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.OutsideStaticRoutes.Equal(that1.OutsideStaticRoutes) {
		return false
	}
	return true
}
func (this *AzureVnetIngressEgressGwType_NoGlobalNetwork) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AzureVnetIngressEgressGwType_NoGlobalNetwork)
	if !ok {
		that2, ok := that.(AzureVnetIngressEgressGwType_NoGlobalNetwork)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NoGlobalNetwork.Equal(that1.NoGlobalNetwork) {
		return false
	}
	return true
}
func (this *AzureVnetIngressEgressGwType_GlobalNetworkList) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AzureVnetIngressEgressGwType_GlobalNetworkList)
	if !ok {
		that2, ok := that.(AzureVnetIngressEgressGwType_GlobalNetworkList)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.GlobalNetworkList.Equal(that1.GlobalNetworkList) {
		return false
	}
	return true
}
func (this *AzureVnetIngressEgressGwARType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AzureVnetIngressEgressGwARType)
	if !ok {
		that2, ok := that.(AzureVnetIngressEgressGwARType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Node.Equal(that1.Node) {
		return false
	}
	if that1.NetworkPolicyChoice == nil {
		if this.NetworkPolicyChoice != nil {
			return false
		}
	} else if this.NetworkPolicyChoice == nil {
		return false
	} else if !this.NetworkPolicyChoice.Equal(that1.NetworkPolicyChoice) {
		return false
	}
	if that1.ForwardProxyChoice == nil {
		if this.ForwardProxyChoice != nil {
			return false
		}
	} else if this.ForwardProxyChoice == nil {
		return false
	} else if !this.ForwardProxyChoice.Equal(that1.ForwardProxyChoice) {
		return false
	}
	if this.AzureCertifiedHw != that1.AzureCertifiedHw {
		return false
	}
	if that1.InsideStaticRouteChoice == nil {
		if this.InsideStaticRouteChoice != nil {
			return false
		}
	} else if this.InsideStaticRouteChoice == nil {
		return false
	} else if !this.InsideStaticRouteChoice.Equal(that1.InsideStaticRouteChoice) {
		return false
	}
	if that1.OutsideStaticRouteChoice == nil {
		if this.OutsideStaticRouteChoice != nil {
			return false
		}
	} else if this.OutsideStaticRouteChoice == nil {
		return false
	} else if !this.OutsideStaticRouteChoice.Equal(that1.OutsideStaticRouteChoice) {
		return false
	}
	if that1.GlobalNetworkChoice == nil {
		if this.GlobalNetworkChoice != nil {
			return false
		}
	} else if this.GlobalNetworkChoice == nil {
		return false
	} else if !this.GlobalNetworkChoice.Equal(that1.GlobalNetworkChoice) {
		return false
	}
	return true
}
func (this *AzureVnetIngressEgressGwARType_NoNetworkPolicy) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AzureVnetIngressEgressGwARType_NoNetworkPolicy)
	if !ok {
		that2, ok := that.(AzureVnetIngressEgressGwARType_NoNetworkPolicy)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NoNetworkPolicy.Equal(that1.NoNetworkPolicy) {
		return false
	}
	return true
}
func (this *AzureVnetIngressEgressGwARType_ActiveNetworkPolicies) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AzureVnetIngressEgressGwARType_ActiveNetworkPolicies)
	if !ok {
		that2, ok := that.(AzureVnetIngressEgressGwARType_ActiveNetworkPolicies)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ActiveNetworkPolicies.Equal(that1.ActiveNetworkPolicies) {
		return false
	}
	return true
}
func (this *AzureVnetIngressEgressGwARType_NoForwardProxy) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AzureVnetIngressEgressGwARType_NoForwardProxy)
	if !ok {
		that2, ok := that.(AzureVnetIngressEgressGwARType_NoForwardProxy)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NoForwardProxy.Equal(that1.NoForwardProxy) {
		return false
	}
	return true
}
func (this *AzureVnetIngressEgressGwARType_ActiveForwardProxyPolicies) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AzureVnetIngressEgressGwARType_ActiveForwardProxyPolicies)
	if !ok {
		that2, ok := that.(AzureVnetIngressEgressGwARType_ActiveForwardProxyPolicies)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ActiveForwardProxyPolicies.Equal(that1.ActiveForwardProxyPolicies) {
		return false
	}
	return true
}
func (this *AzureVnetIngressEgressGwARType_ForwardProxyAllowAll) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AzureVnetIngressEgressGwARType_ForwardProxyAllowAll)
	if !ok {
		that2, ok := that.(AzureVnetIngressEgressGwARType_ForwardProxyAllowAll)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ForwardProxyAllowAll.Equal(that1.ForwardProxyAllowAll) {
		return false
	}
	return true
}
func (this *AzureVnetIngressEgressGwARType_NoInsideStaticRoutes) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AzureVnetIngressEgressGwARType_NoInsideStaticRoutes)
	if !ok {
		that2, ok := that.(AzureVnetIngressEgressGwARType_NoInsideStaticRoutes)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NoInsideStaticRoutes.Equal(that1.NoInsideStaticRoutes) {
		return false
	}
	return true
}
func (this *AzureVnetIngressEgressGwARType_InsideStaticRoutes) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AzureVnetIngressEgressGwARType_InsideStaticRoutes)
	if !ok {
		that2, ok := that.(AzureVnetIngressEgressGwARType_InsideStaticRoutes)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.InsideStaticRoutes.Equal(that1.InsideStaticRoutes) {
		return false
	}
	return true
}
func (this *AzureVnetIngressEgressGwARType_NoOutsideStaticRoutes) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AzureVnetIngressEgressGwARType_NoOutsideStaticRoutes)
	if !ok {
		that2, ok := that.(AzureVnetIngressEgressGwARType_NoOutsideStaticRoutes)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NoOutsideStaticRoutes.Equal(that1.NoOutsideStaticRoutes) {
		return false
	}
	return true
}
func (this *AzureVnetIngressEgressGwARType_OutsideStaticRoutes) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AzureVnetIngressEgressGwARType_OutsideStaticRoutes)
	if !ok {
		that2, ok := that.(AzureVnetIngressEgressGwARType_OutsideStaticRoutes)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.OutsideStaticRoutes.Equal(that1.OutsideStaticRoutes) {
		return false
	}
	return true
}
func (this *AzureVnetIngressEgressGwARType_NoGlobalNetwork) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AzureVnetIngressEgressGwARType_NoGlobalNetwork)
	if !ok {
		that2, ok := that.(AzureVnetIngressEgressGwARType_NoGlobalNetwork)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NoGlobalNetwork.Equal(that1.NoGlobalNetwork) {
		return false
	}
	return true
}
func (this *AzureVnetIngressEgressGwARType_GlobalNetworkList) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AzureVnetIngressEgressGwARType_GlobalNetworkList)
	if !ok {
		that2, ok := that.(AzureVnetIngressEgressGwARType_GlobalNetworkList)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.GlobalNetworkList.Equal(that1.GlobalNetworkList) {
		return false
	}
	return true
}
func (this *AzureVnetVoltstackClusterType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AzureVnetVoltstackClusterType)
	if !ok {
		that2, ok := that.(AzureVnetVoltstackClusterType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.AzureCertifiedHw != that1.AzureCertifiedHw {
		return false
	}
	if len(this.AzNodes) != len(that1.AzNodes) {
		return false
	}
	for i := range this.AzNodes {
		if !this.AzNodes[i].Equal(that1.AzNodes[i]) {
			return false
		}
	}
	if that1.NetworkPolicyChoice == nil {
		if this.NetworkPolicyChoice != nil {
			return false
		}
	} else if this.NetworkPolicyChoice == nil {
		return false
	} else if !this.NetworkPolicyChoice.Equal(that1.NetworkPolicyChoice) {
		return false
	}
	if that1.ForwardProxyChoice == nil {
		if this.ForwardProxyChoice != nil {
			return false
		}
	} else if this.ForwardProxyChoice == nil {
		return false
	} else if !this.ForwardProxyChoice.Equal(that1.ForwardProxyChoice) {
		return false
	}
	if that1.OutsideStaticRouteChoice == nil {
		if this.OutsideStaticRouteChoice != nil {
			return false
		}
	} else if this.OutsideStaticRouteChoice == nil {
		return false
	} else if !this.OutsideStaticRouteChoice.Equal(that1.OutsideStaticRouteChoice) {
		return false
	}
	if that1.GlobalNetworkChoice == nil {
		if this.GlobalNetworkChoice != nil {
			return false
		}
	} else if this.GlobalNetworkChoice == nil {
		return false
	} else if !this.GlobalNetworkChoice.Equal(that1.GlobalNetworkChoice) {
		return false
	}
	if that1.K8SClusterChoice == nil {
		if this.K8SClusterChoice != nil {
			return false
		}
	} else if this.K8SClusterChoice == nil {
		return false
	} else if !this.K8SClusterChoice.Equal(that1.K8SClusterChoice) {
		return false
	}
	return true
}
func (this *AzureVnetVoltstackClusterType_NoNetworkPolicy) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AzureVnetVoltstackClusterType_NoNetworkPolicy)
	if !ok {
		that2, ok := that.(AzureVnetVoltstackClusterType_NoNetworkPolicy)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NoNetworkPolicy.Equal(that1.NoNetworkPolicy) {
		return false
	}
	return true
}
func (this *AzureVnetVoltstackClusterType_ActiveNetworkPolicies) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AzureVnetVoltstackClusterType_ActiveNetworkPolicies)
	if !ok {
		that2, ok := that.(AzureVnetVoltstackClusterType_ActiveNetworkPolicies)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ActiveNetworkPolicies.Equal(that1.ActiveNetworkPolicies) {
		return false
	}
	return true
}
func (this *AzureVnetVoltstackClusterType_NoForwardProxy) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AzureVnetVoltstackClusterType_NoForwardProxy)
	if !ok {
		that2, ok := that.(AzureVnetVoltstackClusterType_NoForwardProxy)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NoForwardProxy.Equal(that1.NoForwardProxy) {
		return false
	}
	return true
}
func (this *AzureVnetVoltstackClusterType_ActiveForwardProxyPolicies) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AzureVnetVoltstackClusterType_ActiveForwardProxyPolicies)
	if !ok {
		that2, ok := that.(AzureVnetVoltstackClusterType_ActiveForwardProxyPolicies)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ActiveForwardProxyPolicies.Equal(that1.ActiveForwardProxyPolicies) {
		return false
	}
	return true
}
func (this *AzureVnetVoltstackClusterType_ForwardProxyAllowAll) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AzureVnetVoltstackClusterType_ForwardProxyAllowAll)
	if !ok {
		that2, ok := that.(AzureVnetVoltstackClusterType_ForwardProxyAllowAll)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ForwardProxyAllowAll.Equal(that1.ForwardProxyAllowAll) {
		return false
	}
	return true
}
func (this *AzureVnetVoltstackClusterType_NoOutsideStaticRoutes) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AzureVnetVoltstackClusterType_NoOutsideStaticRoutes)
	if !ok {
		that2, ok := that.(AzureVnetVoltstackClusterType_NoOutsideStaticRoutes)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NoOutsideStaticRoutes.Equal(that1.NoOutsideStaticRoutes) {
		return false
	}
	return true
}
func (this *AzureVnetVoltstackClusterType_OutsideStaticRoutes) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AzureVnetVoltstackClusterType_OutsideStaticRoutes)
	if !ok {
		that2, ok := that.(AzureVnetVoltstackClusterType_OutsideStaticRoutes)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.OutsideStaticRoutes.Equal(that1.OutsideStaticRoutes) {
		return false
	}
	return true
}
func (this *AzureVnetVoltstackClusterType_NoGlobalNetwork) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AzureVnetVoltstackClusterType_NoGlobalNetwork)
	if !ok {
		that2, ok := that.(AzureVnetVoltstackClusterType_NoGlobalNetwork)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NoGlobalNetwork.Equal(that1.NoGlobalNetwork) {
		return false
	}
	return true
}
func (this *AzureVnetVoltstackClusterType_GlobalNetworkList) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AzureVnetVoltstackClusterType_GlobalNetworkList)
	if !ok {
		that2, ok := that.(AzureVnetVoltstackClusterType_GlobalNetworkList)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.GlobalNetworkList.Equal(that1.GlobalNetworkList) {
		return false
	}
	return true
}
func (this *AzureVnetVoltstackClusterType_NoK8SCluster) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AzureVnetVoltstackClusterType_NoK8SCluster)
	if !ok {
		that2, ok := that.(AzureVnetVoltstackClusterType_NoK8SCluster)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NoK8SCluster.Equal(that1.NoK8SCluster) {
		return false
	}
	return true
}
func (this *AzureVnetVoltstackClusterType_K8SCluster) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AzureVnetVoltstackClusterType_K8SCluster)
	if !ok {
		that2, ok := that.(AzureVnetVoltstackClusterType_K8SCluster)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.K8SCluster.Equal(that1.K8SCluster) {
		return false
	}
	return true
}
func (this *AzureVnetVoltstackClusterARType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AzureVnetVoltstackClusterARType)
	if !ok {
		that2, ok := that.(AzureVnetVoltstackClusterARType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.AzureCertifiedHw != that1.AzureCertifiedHw {
		return false
	}
	if !this.Node.Equal(that1.Node) {
		return false
	}
	if that1.NetworkPolicyChoice == nil {
		if this.NetworkPolicyChoice != nil {
			return false
		}
	} else if this.NetworkPolicyChoice == nil {
		return false
	} else if !this.NetworkPolicyChoice.Equal(that1.NetworkPolicyChoice) {
		return false
	}
	if that1.ForwardProxyChoice == nil {
		if this.ForwardProxyChoice != nil {
			return false
		}
	} else if this.ForwardProxyChoice == nil {
		return false
	} else if !this.ForwardProxyChoice.Equal(that1.ForwardProxyChoice) {
		return false
	}
	if that1.OutsideStaticRouteChoice == nil {
		if this.OutsideStaticRouteChoice != nil {
			return false
		}
	} else if this.OutsideStaticRouteChoice == nil {
		return false
	} else if !this.OutsideStaticRouteChoice.Equal(that1.OutsideStaticRouteChoice) {
		return false
	}
	if that1.GlobalNetworkChoice == nil {
		if this.GlobalNetworkChoice != nil {
			return false
		}
	} else if this.GlobalNetworkChoice == nil {
		return false
	} else if !this.GlobalNetworkChoice.Equal(that1.GlobalNetworkChoice) {
		return false
	}
	if that1.K8SClusterChoice == nil {
		if this.K8SClusterChoice != nil {
			return false
		}
	} else if this.K8SClusterChoice == nil {
		return false
	} else if !this.K8SClusterChoice.Equal(that1.K8SClusterChoice) {
		return false
	}
	return true
}
func (this *AzureVnetVoltstackClusterARType_NoNetworkPolicy) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AzureVnetVoltstackClusterARType_NoNetworkPolicy)
	if !ok {
		that2, ok := that.(AzureVnetVoltstackClusterARType_NoNetworkPolicy)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NoNetworkPolicy.Equal(that1.NoNetworkPolicy) {
		return false
	}
	return true
}
func (this *AzureVnetVoltstackClusterARType_ActiveNetworkPolicies) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AzureVnetVoltstackClusterARType_ActiveNetworkPolicies)
	if !ok {
		that2, ok := that.(AzureVnetVoltstackClusterARType_ActiveNetworkPolicies)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ActiveNetworkPolicies.Equal(that1.ActiveNetworkPolicies) {
		return false
	}
	return true
}
func (this *AzureVnetVoltstackClusterARType_NoForwardProxy) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AzureVnetVoltstackClusterARType_NoForwardProxy)
	if !ok {
		that2, ok := that.(AzureVnetVoltstackClusterARType_NoForwardProxy)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NoForwardProxy.Equal(that1.NoForwardProxy) {
		return false
	}
	return true
}
func (this *AzureVnetVoltstackClusterARType_ActiveForwardProxyPolicies) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AzureVnetVoltstackClusterARType_ActiveForwardProxyPolicies)
	if !ok {
		that2, ok := that.(AzureVnetVoltstackClusterARType_ActiveForwardProxyPolicies)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ActiveForwardProxyPolicies.Equal(that1.ActiveForwardProxyPolicies) {
		return false
	}
	return true
}
func (this *AzureVnetVoltstackClusterARType_ForwardProxyAllowAll) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AzureVnetVoltstackClusterARType_ForwardProxyAllowAll)
	if !ok {
		that2, ok := that.(AzureVnetVoltstackClusterARType_ForwardProxyAllowAll)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ForwardProxyAllowAll.Equal(that1.ForwardProxyAllowAll) {
		return false
	}
	return true
}
func (this *AzureVnetVoltstackClusterARType_NoOutsideStaticRoutes) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AzureVnetVoltstackClusterARType_NoOutsideStaticRoutes)
	if !ok {
		that2, ok := that.(AzureVnetVoltstackClusterARType_NoOutsideStaticRoutes)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NoOutsideStaticRoutes.Equal(that1.NoOutsideStaticRoutes) {
		return false
	}
	return true
}
func (this *AzureVnetVoltstackClusterARType_OutsideStaticRoutes) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AzureVnetVoltstackClusterARType_OutsideStaticRoutes)
	if !ok {
		that2, ok := that.(AzureVnetVoltstackClusterARType_OutsideStaticRoutes)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.OutsideStaticRoutes.Equal(that1.OutsideStaticRoutes) {
		return false
	}
	return true
}
func (this *AzureVnetVoltstackClusterARType_NoGlobalNetwork) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AzureVnetVoltstackClusterARType_NoGlobalNetwork)
	if !ok {
		that2, ok := that.(AzureVnetVoltstackClusterARType_NoGlobalNetwork)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NoGlobalNetwork.Equal(that1.NoGlobalNetwork) {
		return false
	}
	return true
}
func (this *AzureVnetVoltstackClusterARType_GlobalNetworkList) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AzureVnetVoltstackClusterARType_GlobalNetworkList)
	if !ok {
		that2, ok := that.(AzureVnetVoltstackClusterARType_GlobalNetworkList)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.GlobalNetworkList.Equal(that1.GlobalNetworkList) {
		return false
	}
	return true
}
func (this *AzureVnetVoltstackClusterARType_NoK8SCluster) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AzureVnetVoltstackClusterARType_NoK8SCluster)
	if !ok {
		that2, ok := that.(AzureVnetVoltstackClusterARType_NoK8SCluster)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NoK8SCluster.Equal(that1.NoK8SCluster) {
		return false
	}
	return true
}
func (this *AzureVnetVoltstackClusterARType_K8SCluster) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AzureVnetVoltstackClusterARType_K8SCluster)
	if !ok {
		that2, ok := that.(AzureVnetVoltstackClusterARType_K8SCluster)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.K8SCluster.Equal(that1.K8SCluster) {
		return false
	}
	return true
}
func (this *AzureVnetIngressGwReplaceType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AzureVnetIngressGwReplaceType)
	if !ok {
		that2, ok := that.(AzureVnetIngressGwReplaceType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *AzureVnetIngressEgressGwReplaceType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AzureVnetIngressEgressGwReplaceType)
	if !ok {
		that2, ok := that.(AzureVnetIngressEgressGwReplaceType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.NetworkPolicyChoice == nil {
		if this.NetworkPolicyChoice != nil {
			return false
		}
	} else if this.NetworkPolicyChoice == nil {
		return false
	} else if !this.NetworkPolicyChoice.Equal(that1.NetworkPolicyChoice) {
		return false
	}
	if that1.ForwardProxyChoice == nil {
		if this.ForwardProxyChoice != nil {
			return false
		}
	} else if this.ForwardProxyChoice == nil {
		return false
	} else if !this.ForwardProxyChoice.Equal(that1.ForwardProxyChoice) {
		return false
	}
	if that1.InsideStaticRouteChoice == nil {
		if this.InsideStaticRouteChoice != nil {
			return false
		}
	} else if this.InsideStaticRouteChoice == nil {
		return false
	} else if !this.InsideStaticRouteChoice.Equal(that1.InsideStaticRouteChoice) {
		return false
	}
	if that1.OutsideStaticRouteChoice == nil {
		if this.OutsideStaticRouteChoice != nil {
			return false
		}
	} else if this.OutsideStaticRouteChoice == nil {
		return false
	} else if !this.OutsideStaticRouteChoice.Equal(that1.OutsideStaticRouteChoice) {
		return false
	}
	if that1.GlobalNetworkChoice == nil {
		if this.GlobalNetworkChoice != nil {
			return false
		}
	} else if this.GlobalNetworkChoice == nil {
		return false
	} else if !this.GlobalNetworkChoice.Equal(that1.GlobalNetworkChoice) {
		return false
	}
	return true
}
func (this *AzureVnetIngressEgressGwReplaceType_NoNetworkPolicy) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AzureVnetIngressEgressGwReplaceType_NoNetworkPolicy)
	if !ok {
		that2, ok := that.(AzureVnetIngressEgressGwReplaceType_NoNetworkPolicy)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NoNetworkPolicy.Equal(that1.NoNetworkPolicy) {
		return false
	}
	return true
}
func (this *AzureVnetIngressEgressGwReplaceType_ActiveNetworkPolicies) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AzureVnetIngressEgressGwReplaceType_ActiveNetworkPolicies)
	if !ok {
		that2, ok := that.(AzureVnetIngressEgressGwReplaceType_ActiveNetworkPolicies)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ActiveNetworkPolicies.Equal(that1.ActiveNetworkPolicies) {
		return false
	}
	return true
}
func (this *AzureVnetIngressEgressGwReplaceType_NoForwardProxy) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AzureVnetIngressEgressGwReplaceType_NoForwardProxy)
	if !ok {
		that2, ok := that.(AzureVnetIngressEgressGwReplaceType_NoForwardProxy)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NoForwardProxy.Equal(that1.NoForwardProxy) {
		return false
	}
	return true
}
func (this *AzureVnetIngressEgressGwReplaceType_ActiveForwardProxyPolicies) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AzureVnetIngressEgressGwReplaceType_ActiveForwardProxyPolicies)
	if !ok {
		that2, ok := that.(AzureVnetIngressEgressGwReplaceType_ActiveForwardProxyPolicies)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ActiveForwardProxyPolicies.Equal(that1.ActiveForwardProxyPolicies) {
		return false
	}
	return true
}
func (this *AzureVnetIngressEgressGwReplaceType_ForwardProxyAllowAll) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AzureVnetIngressEgressGwReplaceType_ForwardProxyAllowAll)
	if !ok {
		that2, ok := that.(AzureVnetIngressEgressGwReplaceType_ForwardProxyAllowAll)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ForwardProxyAllowAll.Equal(that1.ForwardProxyAllowAll) {
		return false
	}
	return true
}
func (this *AzureVnetIngressEgressGwReplaceType_NoInsideStaticRoutes) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AzureVnetIngressEgressGwReplaceType_NoInsideStaticRoutes)
	if !ok {
		that2, ok := that.(AzureVnetIngressEgressGwReplaceType_NoInsideStaticRoutes)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NoInsideStaticRoutes.Equal(that1.NoInsideStaticRoutes) {
		return false
	}
	return true
}
func (this *AzureVnetIngressEgressGwReplaceType_InsideStaticRoutes) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AzureVnetIngressEgressGwReplaceType_InsideStaticRoutes)
	if !ok {
		that2, ok := that.(AzureVnetIngressEgressGwReplaceType_InsideStaticRoutes)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.InsideStaticRoutes.Equal(that1.InsideStaticRoutes) {
		return false
	}
	return true
}
func (this *AzureVnetIngressEgressGwReplaceType_NoOutsideStaticRoutes) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AzureVnetIngressEgressGwReplaceType_NoOutsideStaticRoutes)
	if !ok {
		that2, ok := that.(AzureVnetIngressEgressGwReplaceType_NoOutsideStaticRoutes)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NoOutsideStaticRoutes.Equal(that1.NoOutsideStaticRoutes) {
		return false
	}
	return true
}
func (this *AzureVnetIngressEgressGwReplaceType_OutsideStaticRoutes) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AzureVnetIngressEgressGwReplaceType_OutsideStaticRoutes)
	if !ok {
		that2, ok := that.(AzureVnetIngressEgressGwReplaceType_OutsideStaticRoutes)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.OutsideStaticRoutes.Equal(that1.OutsideStaticRoutes) {
		return false
	}
	return true
}
func (this *AzureVnetIngressEgressGwReplaceType_NoGlobalNetwork) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AzureVnetIngressEgressGwReplaceType_NoGlobalNetwork)
	if !ok {
		that2, ok := that.(AzureVnetIngressEgressGwReplaceType_NoGlobalNetwork)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NoGlobalNetwork.Equal(that1.NoGlobalNetwork) {
		return false
	}
	return true
}
func (this *AzureVnetIngressEgressGwReplaceType_GlobalNetworkList) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AzureVnetIngressEgressGwReplaceType_GlobalNetworkList)
	if !ok {
		that2, ok := that.(AzureVnetIngressEgressGwReplaceType_GlobalNetworkList)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.GlobalNetworkList.Equal(that1.GlobalNetworkList) {
		return false
	}
	return true
}
func (this *AzureVnetVoltstackClusterReplaceType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AzureVnetVoltstackClusterReplaceType)
	if !ok {
		that2, ok := that.(AzureVnetVoltstackClusterReplaceType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.NetworkPolicyChoice == nil {
		if this.NetworkPolicyChoice != nil {
			return false
		}
	} else if this.NetworkPolicyChoice == nil {
		return false
	} else if !this.NetworkPolicyChoice.Equal(that1.NetworkPolicyChoice) {
		return false
	}
	if that1.ForwardProxyChoice == nil {
		if this.ForwardProxyChoice != nil {
			return false
		}
	} else if this.ForwardProxyChoice == nil {
		return false
	} else if !this.ForwardProxyChoice.Equal(that1.ForwardProxyChoice) {
		return false
	}
	if that1.OutsideStaticRouteChoice == nil {
		if this.OutsideStaticRouteChoice != nil {
			return false
		}
	} else if this.OutsideStaticRouteChoice == nil {
		return false
	} else if !this.OutsideStaticRouteChoice.Equal(that1.OutsideStaticRouteChoice) {
		return false
	}
	if that1.GlobalNetworkChoice == nil {
		if this.GlobalNetworkChoice != nil {
			return false
		}
	} else if this.GlobalNetworkChoice == nil {
		return false
	} else if !this.GlobalNetworkChoice.Equal(that1.GlobalNetworkChoice) {
		return false
	}
	return true
}
func (this *AzureVnetVoltstackClusterReplaceType_NoNetworkPolicy) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AzureVnetVoltstackClusterReplaceType_NoNetworkPolicy)
	if !ok {
		that2, ok := that.(AzureVnetVoltstackClusterReplaceType_NoNetworkPolicy)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NoNetworkPolicy.Equal(that1.NoNetworkPolicy) {
		return false
	}
	return true
}
func (this *AzureVnetVoltstackClusterReplaceType_ActiveNetworkPolicies) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AzureVnetVoltstackClusterReplaceType_ActiveNetworkPolicies)
	if !ok {
		that2, ok := that.(AzureVnetVoltstackClusterReplaceType_ActiveNetworkPolicies)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ActiveNetworkPolicies.Equal(that1.ActiveNetworkPolicies) {
		return false
	}
	return true
}
func (this *AzureVnetVoltstackClusterReplaceType_NoForwardProxy) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AzureVnetVoltstackClusterReplaceType_NoForwardProxy)
	if !ok {
		that2, ok := that.(AzureVnetVoltstackClusterReplaceType_NoForwardProxy)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NoForwardProxy.Equal(that1.NoForwardProxy) {
		return false
	}
	return true
}
func (this *AzureVnetVoltstackClusterReplaceType_ActiveForwardProxyPolicies) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AzureVnetVoltstackClusterReplaceType_ActiveForwardProxyPolicies)
	if !ok {
		that2, ok := that.(AzureVnetVoltstackClusterReplaceType_ActiveForwardProxyPolicies)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ActiveForwardProxyPolicies.Equal(that1.ActiveForwardProxyPolicies) {
		return false
	}
	return true
}
func (this *AzureVnetVoltstackClusterReplaceType_ForwardProxyAllowAll) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AzureVnetVoltstackClusterReplaceType_ForwardProxyAllowAll)
	if !ok {
		that2, ok := that.(AzureVnetVoltstackClusterReplaceType_ForwardProxyAllowAll)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ForwardProxyAllowAll.Equal(that1.ForwardProxyAllowAll) {
		return false
	}
	return true
}
func (this *AzureVnetVoltstackClusterReplaceType_NoOutsideStaticRoutes) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AzureVnetVoltstackClusterReplaceType_NoOutsideStaticRoutes)
	if !ok {
		that2, ok := that.(AzureVnetVoltstackClusterReplaceType_NoOutsideStaticRoutes)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NoOutsideStaticRoutes.Equal(that1.NoOutsideStaticRoutes) {
		return false
	}
	return true
}
func (this *AzureVnetVoltstackClusterReplaceType_OutsideStaticRoutes) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AzureVnetVoltstackClusterReplaceType_OutsideStaticRoutes)
	if !ok {
		that2, ok := that.(AzureVnetVoltstackClusterReplaceType_OutsideStaticRoutes)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.OutsideStaticRoutes.Equal(that1.OutsideStaticRoutes) {
		return false
	}
	return true
}
func (this *AzureVnetVoltstackClusterReplaceType_NoGlobalNetwork) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AzureVnetVoltstackClusterReplaceType_NoGlobalNetwork)
	if !ok {
		that2, ok := that.(AzureVnetVoltstackClusterReplaceType_NoGlobalNetwork)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NoGlobalNetwork.Equal(that1.NoGlobalNetwork) {
		return false
	}
	return true
}
func (this *AzureVnetVoltstackClusterReplaceType_GlobalNetworkList) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AzureVnetVoltstackClusterReplaceType_GlobalNetworkList)
	if !ok {
		that2, ok := that.(AzureVnetVoltstackClusterReplaceType_GlobalNetworkList)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.GlobalNetworkList.Equal(that1.GlobalNetworkList) {
		return false
	}
	return true
}
func (this *GlobalSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType)
	if !ok {
		that2, ok := that.(GlobalSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ResourceGroup != that1.ResourceGroup {
		return false
	}
	if that1.RegionChoice == nil {
		if this.RegionChoice != nil {
			return false
		}
	} else if this.RegionChoice == nil {
		return false
	} else if !this.RegionChoice.Equal(that1.RegionChoice) {
		return false
	}
	if !this.Vnet.Equal(that1.Vnet) {
		return false
	}
	if that1.SiteType == nil {
		if this.SiteType != nil {
			return false
		}
	} else if this.SiteType == nil {
		return false
	} else if !this.SiteType.Equal(that1.SiteType) {
		return false
	}
	if this.DiskSize != that1.DiskSize {
		return false
	}
	if that1.Deployment == nil {
		if this.Deployment != nil {
			return false
		}
	} else if this.Deployment == nil {
		return false
	} else if !this.Deployment.Equal(that1.Deployment) {
		return false
	}
	if this.MachineType != that1.MachineType {
		return false
	}
	if that1.WorkerNodes == nil {
		if this.WorkerNodes != nil {
			return false
		}
	} else if this.WorkerNodes == nil {
		return false
	} else if !this.WorkerNodes.Equal(that1.WorkerNodes) {
		return false
	}
	if this.VolterraSoftwareVersion != that1.VolterraSoftwareVersion {
		return false
	}
	if this.OperatingSystemVersion != that1.OperatingSystemVersion {
		return false
	}
	if this.SshKey != that1.SshKey {
		return false
	}
	if this.Address != that1.Address {
		return false
	}
	if !this.Coordinates.Equal(that1.Coordinates) {
		return false
	}
	if that1.LogsReceiverChoice == nil {
		if this.LogsReceiverChoice != nil {
			return false
		}
	} else if this.LogsReceiverChoice == nil {
		return false
	} else if !this.LogsReceiverChoice.Equal(that1.LogsReceiverChoice) {
		return false
	}
	if !this.Sw.Equal(that1.Sw) {
		return false
	}
	if !this.Os.Equal(that1.Os) {
		return false
	}
	if len(this.VipParamsPerAz) != len(that1.VipParamsPerAz) {
		return false
	}
	for i := range this.VipParamsPerAz {
		if !this.VipParamsPerAz[i].Equal(that1.VipParamsPerAz[i]) {
			return false
		}
	}
	if !this.TfParams.Equal(that1.TfParams) {
		return false
	}
	if !this.ViewInternal.Equal(that1.ViewInternal) {
		return false
	}
	return true
}
func (this *GlobalSpecType_AzureRegion) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_AzureRegion)
	if !ok {
		that2, ok := that.(GlobalSpecType_AzureRegion)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.AzureRegion != that1.AzureRegion {
		return false
	}
	return true
}
func (this *GlobalSpecType_AlternateRegion) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_AlternateRegion)
	if !ok {
		that2, ok := that.(GlobalSpecType_AlternateRegion)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.AlternateRegion != that1.AlternateRegion {
		return false
	}
	return true
}
func (this *GlobalSpecType_IngressGw) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_IngressGw)
	if !ok {
		that2, ok := that.(GlobalSpecType_IngressGw)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.IngressGw.Equal(that1.IngressGw) {
		return false
	}
	return true
}
func (this *GlobalSpecType_IngressEgressGw) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_IngressEgressGw)
	if !ok {
		that2, ok := that.(GlobalSpecType_IngressEgressGw)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.IngressEgressGw.Equal(that1.IngressEgressGw) {
		return false
	}
	return true
}
func (this *GlobalSpecType_VoltstackCluster) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_VoltstackCluster)
	if !ok {
		that2, ok := that.(GlobalSpecType_VoltstackCluster)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.VoltstackCluster.Equal(that1.VoltstackCluster) {
		return false
	}
	return true
}
func (this *GlobalSpecType_IngressGwAr) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_IngressGwAr)
	if !ok {
		that2, ok := that.(GlobalSpecType_IngressGwAr)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.IngressGwAr.Equal(that1.IngressGwAr) {
		return false
	}
	return true
}
func (this *GlobalSpecType_IngressEgressGwAr) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_IngressEgressGwAr)
	if !ok {
		that2, ok := that.(GlobalSpecType_IngressEgressGwAr)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.IngressEgressGwAr.Equal(that1.IngressEgressGwAr) {
		return false
	}
	return true
}
func (this *GlobalSpecType_VoltstackClusterAr) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_VoltstackClusterAr)
	if !ok {
		that2, ok := that.(GlobalSpecType_VoltstackClusterAr)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.VoltstackClusterAr.Equal(that1.VoltstackClusterAr) {
		return false
	}
	return true
}
func (this *GlobalSpecType_AzureCred) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_AzureCred)
	if !ok {
		that2, ok := that.(GlobalSpecType_AzureCred)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AzureCred.Equal(that1.AzureCred) {
		return false
	}
	return true
}
func (this *GlobalSpecType_Assisted) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_Assisted)
	if !ok {
		that2, ok := that.(GlobalSpecType_Assisted)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Assisted.Equal(that1.Assisted) {
		return false
	}
	return true
}
func (this *GlobalSpecType_NodesPerAz) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_NodesPerAz)
	if !ok {
		that2, ok := that.(GlobalSpecType_NodesPerAz)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.NodesPerAz != that1.NodesPerAz {
		return false
	}
	return true
}
func (this *GlobalSpecType_TotalNodes) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_TotalNodes)
	if !ok {
		that2, ok := that.(GlobalSpecType_TotalNodes)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.TotalNodes != that1.TotalNodes {
		return false
	}
	return true
}
func (this *GlobalSpecType_NoWorkerNodes) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_NoWorkerNodes)
	if !ok {
		that2, ok := that.(GlobalSpecType_NoWorkerNodes)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NoWorkerNodes.Equal(that1.NoWorkerNodes) {
		return false
	}
	return true
}
func (this *GlobalSpecType_LogsStreamingDisabled) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_LogsStreamingDisabled)
	if !ok {
		that2, ok := that.(GlobalSpecType_LogsStreamingDisabled)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.LogsStreamingDisabled.Equal(that1.LogsStreamingDisabled) {
		return false
	}
	return true
}
func (this *GlobalSpecType_LogReceiver) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_LogReceiver)
	if !ok {
		that2, ok := that.(GlobalSpecType_LogReceiver)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.LogReceiver.Equal(that1.LogReceiver) {
		return false
	}
	return true
}
func (this *CreateSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType)
	if !ok {
		that2, ok := that.(CreateSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ResourceGroup != that1.ResourceGroup {
		return false
	}
	if that1.RegionChoice == nil {
		if this.RegionChoice != nil {
			return false
		}
	} else if this.RegionChoice == nil {
		return false
	} else if !this.RegionChoice.Equal(that1.RegionChoice) {
		return false
	}
	if !this.Vnet.Equal(that1.Vnet) {
		return false
	}
	if that1.SiteType == nil {
		if this.SiteType != nil {
			return false
		}
	} else if this.SiteType == nil {
		return false
	} else if !this.SiteType.Equal(that1.SiteType) {
		return false
	}
	if that1.Deployment == nil {
		if this.Deployment != nil {
			return false
		}
	} else if this.Deployment == nil {
		return false
	} else if !this.Deployment.Equal(that1.Deployment) {
		return false
	}
	if this.MachineType != that1.MachineType {
		return false
	}
	if this.DiskSize != that1.DiskSize {
		return false
	}
	if this.SshKey != that1.SshKey {
		return false
	}
	if this.Address != that1.Address {
		return false
	}
	if !this.Coordinates.Equal(that1.Coordinates) {
		return false
	}
	if that1.LogsReceiverChoice == nil {
		if this.LogsReceiverChoice != nil {
			return false
		}
	} else if this.LogsReceiverChoice == nil {
		return false
	} else if !this.LogsReceiverChoice.Equal(that1.LogsReceiverChoice) {
		return false
	}
	if !this.Sw.Equal(that1.Sw) {
		return false
	}
	if !this.Os.Equal(that1.Os) {
		return false
	}
	if that1.WorkerNodes == nil {
		if this.WorkerNodes != nil {
			return false
		}
	} else if this.WorkerNodes == nil {
		return false
	} else if !this.WorkerNodes.Equal(that1.WorkerNodes) {
		return false
	}
	return true
}
func (this *CreateSpecType_AzureRegion) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_AzureRegion)
	if !ok {
		that2, ok := that.(CreateSpecType_AzureRegion)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.AzureRegion != that1.AzureRegion {
		return false
	}
	return true
}
func (this *CreateSpecType_AlternateRegion) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_AlternateRegion)
	if !ok {
		that2, ok := that.(CreateSpecType_AlternateRegion)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.AlternateRegion != that1.AlternateRegion {
		return false
	}
	return true
}
func (this *CreateSpecType_IngressGw) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_IngressGw)
	if !ok {
		that2, ok := that.(CreateSpecType_IngressGw)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.IngressGw.Equal(that1.IngressGw) {
		return false
	}
	return true
}
func (this *CreateSpecType_IngressEgressGw) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_IngressEgressGw)
	if !ok {
		that2, ok := that.(CreateSpecType_IngressEgressGw)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.IngressEgressGw.Equal(that1.IngressEgressGw) {
		return false
	}
	return true
}
func (this *CreateSpecType_VoltstackCluster) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_VoltstackCluster)
	if !ok {
		that2, ok := that.(CreateSpecType_VoltstackCluster)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.VoltstackCluster.Equal(that1.VoltstackCluster) {
		return false
	}
	return true
}
func (this *CreateSpecType_IngressGwAr) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_IngressGwAr)
	if !ok {
		that2, ok := that.(CreateSpecType_IngressGwAr)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.IngressGwAr.Equal(that1.IngressGwAr) {
		return false
	}
	return true
}
func (this *CreateSpecType_IngressEgressGwAr) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_IngressEgressGwAr)
	if !ok {
		that2, ok := that.(CreateSpecType_IngressEgressGwAr)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.IngressEgressGwAr.Equal(that1.IngressEgressGwAr) {
		return false
	}
	return true
}
func (this *CreateSpecType_VoltstackClusterAr) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_VoltstackClusterAr)
	if !ok {
		that2, ok := that.(CreateSpecType_VoltstackClusterAr)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.VoltstackClusterAr.Equal(that1.VoltstackClusterAr) {
		return false
	}
	return true
}
func (this *CreateSpecType_AzureCred) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_AzureCred)
	if !ok {
		that2, ok := that.(CreateSpecType_AzureCred)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AzureCred.Equal(that1.AzureCred) {
		return false
	}
	return true
}
func (this *CreateSpecType_Assisted) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_Assisted)
	if !ok {
		that2, ok := that.(CreateSpecType_Assisted)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Assisted.Equal(that1.Assisted) {
		return false
	}
	return true
}
func (this *CreateSpecType_LogsStreamingDisabled) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_LogsStreamingDisabled)
	if !ok {
		that2, ok := that.(CreateSpecType_LogsStreamingDisabled)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.LogsStreamingDisabled.Equal(that1.LogsStreamingDisabled) {
		return false
	}
	return true
}
func (this *CreateSpecType_LogReceiver) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_LogReceiver)
	if !ok {
		that2, ok := that.(CreateSpecType_LogReceiver)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.LogReceiver.Equal(that1.LogReceiver) {
		return false
	}
	return true
}
func (this *CreateSpecType_NodesPerAz) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_NodesPerAz)
	if !ok {
		that2, ok := that.(CreateSpecType_NodesPerAz)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.NodesPerAz != that1.NodesPerAz {
		return false
	}
	return true
}
func (this *CreateSpecType_TotalNodes) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_TotalNodes)
	if !ok {
		that2, ok := that.(CreateSpecType_TotalNodes)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.TotalNodes != that1.TotalNodes {
		return false
	}
	return true
}
func (this *CreateSpecType_NoWorkerNodes) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_NoWorkerNodes)
	if !ok {
		that2, ok := that.(CreateSpecType_NoWorkerNodes)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NoWorkerNodes.Equal(that1.NoWorkerNodes) {
		return false
	}
	return true
}
func (this *ReplaceSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType)
	if !ok {
		that2, ok := that.(ReplaceSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.SiteType == nil {
		if this.SiteType != nil {
			return false
		}
	} else if this.SiteType == nil {
		return false
	} else if !this.SiteType.Equal(that1.SiteType) {
		return false
	}
	if this.Address != that1.Address {
		return false
	}
	if !this.Coordinates.Equal(that1.Coordinates) {
		return false
	}
	if that1.LogsReceiverChoice == nil {
		if this.LogsReceiverChoice != nil {
			return false
		}
	} else if this.LogsReceiverChoice == nil {
		return false
	} else if !this.LogsReceiverChoice.Equal(that1.LogsReceiverChoice) {
		return false
	}
	if that1.WorkerNodes == nil {
		if this.WorkerNodes != nil {
			return false
		}
	} else if this.WorkerNodes == nil {
		return false
	} else if !this.WorkerNodes.Equal(that1.WorkerNodes) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_IngressGw) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_IngressGw)
	if !ok {
		that2, ok := that.(ReplaceSpecType_IngressGw)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.IngressGw.Equal(that1.IngressGw) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_IngressEgressGw) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_IngressEgressGw)
	if !ok {
		that2, ok := that.(ReplaceSpecType_IngressEgressGw)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.IngressEgressGw.Equal(that1.IngressEgressGw) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_VoltstackCluster) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_VoltstackCluster)
	if !ok {
		that2, ok := that.(ReplaceSpecType_VoltstackCluster)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.VoltstackCluster.Equal(that1.VoltstackCluster) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_IngressGwAr) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_IngressGwAr)
	if !ok {
		that2, ok := that.(ReplaceSpecType_IngressGwAr)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.IngressGwAr.Equal(that1.IngressGwAr) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_IngressEgressGwAr) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_IngressEgressGwAr)
	if !ok {
		that2, ok := that.(ReplaceSpecType_IngressEgressGwAr)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.IngressEgressGwAr.Equal(that1.IngressEgressGwAr) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_VoltstackClusterAr) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_VoltstackClusterAr)
	if !ok {
		that2, ok := that.(ReplaceSpecType_VoltstackClusterAr)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.VoltstackClusterAr.Equal(that1.VoltstackClusterAr) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_LogsStreamingDisabled) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_LogsStreamingDisabled)
	if !ok {
		that2, ok := that.(ReplaceSpecType_LogsStreamingDisabled)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.LogsStreamingDisabled.Equal(that1.LogsStreamingDisabled) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_LogReceiver) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_LogReceiver)
	if !ok {
		that2, ok := that.(ReplaceSpecType_LogReceiver)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.LogReceiver.Equal(that1.LogReceiver) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_NodesPerAz) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_NodesPerAz)
	if !ok {
		that2, ok := that.(ReplaceSpecType_NodesPerAz)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.NodesPerAz != that1.NodesPerAz {
		return false
	}
	return true
}
func (this *ReplaceSpecType_TotalNodes) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_TotalNodes)
	if !ok {
		that2, ok := that.(ReplaceSpecType_TotalNodes)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.TotalNodes != that1.TotalNodes {
		return false
	}
	return true
}
func (this *ReplaceSpecType_NoWorkerNodes) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_NoWorkerNodes)
	if !ok {
		that2, ok := that.(ReplaceSpecType_NoWorkerNodes)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NoWorkerNodes.Equal(that1.NoWorkerNodes) {
		return false
	}
	return true
}
func (this *GetSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType)
	if !ok {
		that2, ok := that.(GetSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ResourceGroup != that1.ResourceGroup {
		return false
	}
	if that1.RegionChoice == nil {
		if this.RegionChoice != nil {
			return false
		}
	} else if this.RegionChoice == nil {
		return false
	} else if !this.RegionChoice.Equal(that1.RegionChoice) {
		return false
	}
	if !this.Vnet.Equal(that1.Vnet) {
		return false
	}
	if that1.SiteType == nil {
		if this.SiteType != nil {
			return false
		}
	} else if this.SiteType == nil {
		return false
	} else if !this.SiteType.Equal(that1.SiteType) {
		return false
	}
	if that1.Deployment == nil {
		if this.Deployment != nil {
			return false
		}
	} else if this.Deployment == nil {
		return false
	} else if !this.Deployment.Equal(that1.Deployment) {
		return false
	}
	if this.MachineType != that1.MachineType {
		return false
	}
	if this.DiskSize != that1.DiskSize {
		return false
	}
	if this.VolterraSoftwareVersion != that1.VolterraSoftwareVersion {
		return false
	}
	if this.OperatingSystemVersion != that1.OperatingSystemVersion {
		return false
	}
	if this.SshKey != that1.SshKey {
		return false
	}
	if this.Address != that1.Address {
		return false
	}
	if !this.Coordinates.Equal(that1.Coordinates) {
		return false
	}
	if that1.LogsReceiverChoice == nil {
		if this.LogsReceiverChoice != nil {
			return false
		}
	} else if this.LogsReceiverChoice == nil {
		return false
	} else if !this.LogsReceiverChoice.Equal(that1.LogsReceiverChoice) {
		return false
	}
	if this.SiteState != that1.SiteState {
		return false
	}
	if len(this.VipParamsPerAz) != len(that1.VipParamsPerAz) {
		return false
	}
	for i := range this.VipParamsPerAz {
		if !this.VipParamsPerAz[i].Equal(that1.VipParamsPerAz[i]) {
			return false
		}
	}
	if that1.WorkerNodes == nil {
		if this.WorkerNodes != nil {
			return false
		}
	} else if this.WorkerNodes == nil {
		return false
	} else if !this.WorkerNodes.Equal(that1.WorkerNodes) {
		return false
	}
	return true
}
func (this *GetSpecType_AzureRegion) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_AzureRegion)
	if !ok {
		that2, ok := that.(GetSpecType_AzureRegion)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.AzureRegion != that1.AzureRegion {
		return false
	}
	return true
}
func (this *GetSpecType_AlternateRegion) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_AlternateRegion)
	if !ok {
		that2, ok := that.(GetSpecType_AlternateRegion)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.AlternateRegion != that1.AlternateRegion {
		return false
	}
	return true
}
func (this *GetSpecType_IngressGw) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_IngressGw)
	if !ok {
		that2, ok := that.(GetSpecType_IngressGw)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.IngressGw.Equal(that1.IngressGw) {
		return false
	}
	return true
}
func (this *GetSpecType_IngressEgressGw) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_IngressEgressGw)
	if !ok {
		that2, ok := that.(GetSpecType_IngressEgressGw)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.IngressEgressGw.Equal(that1.IngressEgressGw) {
		return false
	}
	return true
}
func (this *GetSpecType_VoltstackCluster) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_VoltstackCluster)
	if !ok {
		that2, ok := that.(GetSpecType_VoltstackCluster)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.VoltstackCluster.Equal(that1.VoltstackCluster) {
		return false
	}
	return true
}
func (this *GetSpecType_IngressGwAr) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_IngressGwAr)
	if !ok {
		that2, ok := that.(GetSpecType_IngressGwAr)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.IngressGwAr.Equal(that1.IngressGwAr) {
		return false
	}
	return true
}
func (this *GetSpecType_IngressEgressGwAr) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_IngressEgressGwAr)
	if !ok {
		that2, ok := that.(GetSpecType_IngressEgressGwAr)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.IngressEgressGwAr.Equal(that1.IngressEgressGwAr) {
		return false
	}
	return true
}
func (this *GetSpecType_VoltstackClusterAr) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_VoltstackClusterAr)
	if !ok {
		that2, ok := that.(GetSpecType_VoltstackClusterAr)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.VoltstackClusterAr.Equal(that1.VoltstackClusterAr) {
		return false
	}
	return true
}
func (this *GetSpecType_AzureCred) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_AzureCred)
	if !ok {
		that2, ok := that.(GetSpecType_AzureCred)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AzureCred.Equal(that1.AzureCred) {
		return false
	}
	return true
}
func (this *GetSpecType_Assisted) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_Assisted)
	if !ok {
		that2, ok := that.(GetSpecType_Assisted)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Assisted.Equal(that1.Assisted) {
		return false
	}
	return true
}
func (this *GetSpecType_LogsStreamingDisabled) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_LogsStreamingDisabled)
	if !ok {
		that2, ok := that.(GetSpecType_LogsStreamingDisabled)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.LogsStreamingDisabled.Equal(that1.LogsStreamingDisabled) {
		return false
	}
	return true
}
func (this *GetSpecType_LogReceiver) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_LogReceiver)
	if !ok {
		that2, ok := that.(GetSpecType_LogReceiver)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.LogReceiver.Equal(that1.LogReceiver) {
		return false
	}
	return true
}
func (this *GetSpecType_NodesPerAz) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_NodesPerAz)
	if !ok {
		that2, ok := that.(GetSpecType_NodesPerAz)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.NodesPerAz != that1.NodesPerAz {
		return false
	}
	return true
}
func (this *GetSpecType_TotalNodes) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_TotalNodes)
	if !ok {
		that2, ok := that.(GetSpecType_TotalNodes)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.TotalNodes != that1.TotalNodes {
		return false
	}
	return true
}
func (this *GetSpecType_NoWorkerNodes) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_NoWorkerNodes)
	if !ok {
		that2, ok := that.(GetSpecType_NoWorkerNodes)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NoWorkerNodes.Equal(that1.NoWorkerNodes) {
		return false
	}
	return true
}
func (this *AzureVnetIngressGwType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&azure_vnet_site.AzureVnetIngressGwType{")
	if this.AzNodes != nil {
		s = append(s, "AzNodes: "+fmt.Sprintf("%#v", this.AzNodes)+",\n")
	}
	s = append(s, "AzureCertifiedHw: "+fmt.Sprintf("%#v", this.AzureCertifiedHw)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AzureVnetIngressGwARType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&azure_vnet_site.AzureVnetIngressGwARType{")
	if this.Node != nil {
		s = append(s, "Node: "+fmt.Sprintf("%#v", this.Node)+",\n")
	}
	s = append(s, "AzureCertifiedHw: "+fmt.Sprintf("%#v", this.AzureCertifiedHw)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AzureVnetIngressEgressGwType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 17)
	s = append(s, "&azure_vnet_site.AzureVnetIngressEgressGwType{")
	if this.AzNodes != nil {
		s = append(s, "AzNodes: "+fmt.Sprintf("%#v", this.AzNodes)+",\n")
	}
	if this.NetworkPolicyChoice != nil {
		s = append(s, "NetworkPolicyChoice: "+fmt.Sprintf("%#v", this.NetworkPolicyChoice)+",\n")
	}
	if this.ForwardProxyChoice != nil {
		s = append(s, "ForwardProxyChoice: "+fmt.Sprintf("%#v", this.ForwardProxyChoice)+",\n")
	}
	s = append(s, "AzureCertifiedHw: "+fmt.Sprintf("%#v", this.AzureCertifiedHw)+",\n")
	if this.InsideStaticRouteChoice != nil {
		s = append(s, "InsideStaticRouteChoice: "+fmt.Sprintf("%#v", this.InsideStaticRouteChoice)+",\n")
	}
	if this.OutsideStaticRouteChoice != nil {
		s = append(s, "OutsideStaticRouteChoice: "+fmt.Sprintf("%#v", this.OutsideStaticRouteChoice)+",\n")
	}
	if this.GlobalNetworkChoice != nil {
		s = append(s, "GlobalNetworkChoice: "+fmt.Sprintf("%#v", this.GlobalNetworkChoice)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AzureVnetIngressEgressGwType_NoNetworkPolicy) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.AzureVnetIngressEgressGwType_NoNetworkPolicy{` +
		`NoNetworkPolicy:` + fmt.Sprintf("%#v", this.NoNetworkPolicy) + `}`}, ", ")
	return s
}
func (this *AzureVnetIngressEgressGwType_ActiveNetworkPolicies) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.AzureVnetIngressEgressGwType_ActiveNetworkPolicies{` +
		`ActiveNetworkPolicies:` + fmt.Sprintf("%#v", this.ActiveNetworkPolicies) + `}`}, ", ")
	return s
}
func (this *AzureVnetIngressEgressGwType_NoForwardProxy) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.AzureVnetIngressEgressGwType_NoForwardProxy{` +
		`NoForwardProxy:` + fmt.Sprintf("%#v", this.NoForwardProxy) + `}`}, ", ")
	return s
}
func (this *AzureVnetIngressEgressGwType_ActiveForwardProxyPolicies) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.AzureVnetIngressEgressGwType_ActiveForwardProxyPolicies{` +
		`ActiveForwardProxyPolicies:` + fmt.Sprintf("%#v", this.ActiveForwardProxyPolicies) + `}`}, ", ")
	return s
}
func (this *AzureVnetIngressEgressGwType_ForwardProxyAllowAll) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.AzureVnetIngressEgressGwType_ForwardProxyAllowAll{` +
		`ForwardProxyAllowAll:` + fmt.Sprintf("%#v", this.ForwardProxyAllowAll) + `}`}, ", ")
	return s
}
func (this *AzureVnetIngressEgressGwType_NoInsideStaticRoutes) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.AzureVnetIngressEgressGwType_NoInsideStaticRoutes{` +
		`NoInsideStaticRoutes:` + fmt.Sprintf("%#v", this.NoInsideStaticRoutes) + `}`}, ", ")
	return s
}
func (this *AzureVnetIngressEgressGwType_InsideStaticRoutes) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.AzureVnetIngressEgressGwType_InsideStaticRoutes{` +
		`InsideStaticRoutes:` + fmt.Sprintf("%#v", this.InsideStaticRoutes) + `}`}, ", ")
	return s
}
func (this *AzureVnetIngressEgressGwType_NoOutsideStaticRoutes) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.AzureVnetIngressEgressGwType_NoOutsideStaticRoutes{` +
		`NoOutsideStaticRoutes:` + fmt.Sprintf("%#v", this.NoOutsideStaticRoutes) + `}`}, ", ")
	return s
}
func (this *AzureVnetIngressEgressGwType_OutsideStaticRoutes) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.AzureVnetIngressEgressGwType_OutsideStaticRoutes{` +
		`OutsideStaticRoutes:` + fmt.Sprintf("%#v", this.OutsideStaticRoutes) + `}`}, ", ")
	return s
}
func (this *AzureVnetIngressEgressGwType_NoGlobalNetwork) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.AzureVnetIngressEgressGwType_NoGlobalNetwork{` +
		`NoGlobalNetwork:` + fmt.Sprintf("%#v", this.NoGlobalNetwork) + `}`}, ", ")
	return s
}
func (this *AzureVnetIngressEgressGwType_GlobalNetworkList) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.AzureVnetIngressEgressGwType_GlobalNetworkList{` +
		`GlobalNetworkList:` + fmt.Sprintf("%#v", this.GlobalNetworkList) + `}`}, ", ")
	return s
}
func (this *AzureVnetIngressEgressGwARType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 17)
	s = append(s, "&azure_vnet_site.AzureVnetIngressEgressGwARType{")
	if this.Node != nil {
		s = append(s, "Node: "+fmt.Sprintf("%#v", this.Node)+",\n")
	}
	if this.NetworkPolicyChoice != nil {
		s = append(s, "NetworkPolicyChoice: "+fmt.Sprintf("%#v", this.NetworkPolicyChoice)+",\n")
	}
	if this.ForwardProxyChoice != nil {
		s = append(s, "ForwardProxyChoice: "+fmt.Sprintf("%#v", this.ForwardProxyChoice)+",\n")
	}
	s = append(s, "AzureCertifiedHw: "+fmt.Sprintf("%#v", this.AzureCertifiedHw)+",\n")
	if this.InsideStaticRouteChoice != nil {
		s = append(s, "InsideStaticRouteChoice: "+fmt.Sprintf("%#v", this.InsideStaticRouteChoice)+",\n")
	}
	if this.OutsideStaticRouteChoice != nil {
		s = append(s, "OutsideStaticRouteChoice: "+fmt.Sprintf("%#v", this.OutsideStaticRouteChoice)+",\n")
	}
	if this.GlobalNetworkChoice != nil {
		s = append(s, "GlobalNetworkChoice: "+fmt.Sprintf("%#v", this.GlobalNetworkChoice)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AzureVnetIngressEgressGwARType_NoNetworkPolicy) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.AzureVnetIngressEgressGwARType_NoNetworkPolicy{` +
		`NoNetworkPolicy:` + fmt.Sprintf("%#v", this.NoNetworkPolicy) + `}`}, ", ")
	return s
}
func (this *AzureVnetIngressEgressGwARType_ActiveNetworkPolicies) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.AzureVnetIngressEgressGwARType_ActiveNetworkPolicies{` +
		`ActiveNetworkPolicies:` + fmt.Sprintf("%#v", this.ActiveNetworkPolicies) + `}`}, ", ")
	return s
}
func (this *AzureVnetIngressEgressGwARType_NoForwardProxy) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.AzureVnetIngressEgressGwARType_NoForwardProxy{` +
		`NoForwardProxy:` + fmt.Sprintf("%#v", this.NoForwardProxy) + `}`}, ", ")
	return s
}
func (this *AzureVnetIngressEgressGwARType_ActiveForwardProxyPolicies) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.AzureVnetIngressEgressGwARType_ActiveForwardProxyPolicies{` +
		`ActiveForwardProxyPolicies:` + fmt.Sprintf("%#v", this.ActiveForwardProxyPolicies) + `}`}, ", ")
	return s
}
func (this *AzureVnetIngressEgressGwARType_ForwardProxyAllowAll) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.AzureVnetIngressEgressGwARType_ForwardProxyAllowAll{` +
		`ForwardProxyAllowAll:` + fmt.Sprintf("%#v", this.ForwardProxyAllowAll) + `}`}, ", ")
	return s
}
func (this *AzureVnetIngressEgressGwARType_NoInsideStaticRoutes) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.AzureVnetIngressEgressGwARType_NoInsideStaticRoutes{` +
		`NoInsideStaticRoutes:` + fmt.Sprintf("%#v", this.NoInsideStaticRoutes) + `}`}, ", ")
	return s
}
func (this *AzureVnetIngressEgressGwARType_InsideStaticRoutes) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.AzureVnetIngressEgressGwARType_InsideStaticRoutes{` +
		`InsideStaticRoutes:` + fmt.Sprintf("%#v", this.InsideStaticRoutes) + `}`}, ", ")
	return s
}
func (this *AzureVnetIngressEgressGwARType_NoOutsideStaticRoutes) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.AzureVnetIngressEgressGwARType_NoOutsideStaticRoutes{` +
		`NoOutsideStaticRoutes:` + fmt.Sprintf("%#v", this.NoOutsideStaticRoutes) + `}`}, ", ")
	return s
}
func (this *AzureVnetIngressEgressGwARType_OutsideStaticRoutes) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.AzureVnetIngressEgressGwARType_OutsideStaticRoutes{` +
		`OutsideStaticRoutes:` + fmt.Sprintf("%#v", this.OutsideStaticRoutes) + `}`}, ", ")
	return s
}
func (this *AzureVnetIngressEgressGwARType_NoGlobalNetwork) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.AzureVnetIngressEgressGwARType_NoGlobalNetwork{` +
		`NoGlobalNetwork:` + fmt.Sprintf("%#v", this.NoGlobalNetwork) + `}`}, ", ")
	return s
}
func (this *AzureVnetIngressEgressGwARType_GlobalNetworkList) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.AzureVnetIngressEgressGwARType_GlobalNetworkList{` +
		`GlobalNetworkList:` + fmt.Sprintf("%#v", this.GlobalNetworkList) + `}`}, ", ")
	return s
}
func (this *AzureVnetVoltstackClusterType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 17)
	s = append(s, "&azure_vnet_site.AzureVnetVoltstackClusterType{")
	s = append(s, "AzureCertifiedHw: "+fmt.Sprintf("%#v", this.AzureCertifiedHw)+",\n")
	if this.AzNodes != nil {
		s = append(s, "AzNodes: "+fmt.Sprintf("%#v", this.AzNodes)+",\n")
	}
	if this.NetworkPolicyChoice != nil {
		s = append(s, "NetworkPolicyChoice: "+fmt.Sprintf("%#v", this.NetworkPolicyChoice)+",\n")
	}
	if this.ForwardProxyChoice != nil {
		s = append(s, "ForwardProxyChoice: "+fmt.Sprintf("%#v", this.ForwardProxyChoice)+",\n")
	}
	if this.OutsideStaticRouteChoice != nil {
		s = append(s, "OutsideStaticRouteChoice: "+fmt.Sprintf("%#v", this.OutsideStaticRouteChoice)+",\n")
	}
	if this.GlobalNetworkChoice != nil {
		s = append(s, "GlobalNetworkChoice: "+fmt.Sprintf("%#v", this.GlobalNetworkChoice)+",\n")
	}
	if this.K8SClusterChoice != nil {
		s = append(s, "K8SClusterChoice: "+fmt.Sprintf("%#v", this.K8SClusterChoice)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AzureVnetVoltstackClusterType_NoNetworkPolicy) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.AzureVnetVoltstackClusterType_NoNetworkPolicy{` +
		`NoNetworkPolicy:` + fmt.Sprintf("%#v", this.NoNetworkPolicy) + `}`}, ", ")
	return s
}
func (this *AzureVnetVoltstackClusterType_ActiveNetworkPolicies) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.AzureVnetVoltstackClusterType_ActiveNetworkPolicies{` +
		`ActiveNetworkPolicies:` + fmt.Sprintf("%#v", this.ActiveNetworkPolicies) + `}`}, ", ")
	return s
}
func (this *AzureVnetVoltstackClusterType_NoForwardProxy) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.AzureVnetVoltstackClusterType_NoForwardProxy{` +
		`NoForwardProxy:` + fmt.Sprintf("%#v", this.NoForwardProxy) + `}`}, ", ")
	return s
}
func (this *AzureVnetVoltstackClusterType_ActiveForwardProxyPolicies) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.AzureVnetVoltstackClusterType_ActiveForwardProxyPolicies{` +
		`ActiveForwardProxyPolicies:` + fmt.Sprintf("%#v", this.ActiveForwardProxyPolicies) + `}`}, ", ")
	return s
}
func (this *AzureVnetVoltstackClusterType_ForwardProxyAllowAll) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.AzureVnetVoltstackClusterType_ForwardProxyAllowAll{` +
		`ForwardProxyAllowAll:` + fmt.Sprintf("%#v", this.ForwardProxyAllowAll) + `}`}, ", ")
	return s
}
func (this *AzureVnetVoltstackClusterType_NoOutsideStaticRoutes) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.AzureVnetVoltstackClusterType_NoOutsideStaticRoutes{` +
		`NoOutsideStaticRoutes:` + fmt.Sprintf("%#v", this.NoOutsideStaticRoutes) + `}`}, ", ")
	return s
}
func (this *AzureVnetVoltstackClusterType_OutsideStaticRoutes) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.AzureVnetVoltstackClusterType_OutsideStaticRoutes{` +
		`OutsideStaticRoutes:` + fmt.Sprintf("%#v", this.OutsideStaticRoutes) + `}`}, ", ")
	return s
}
func (this *AzureVnetVoltstackClusterType_NoGlobalNetwork) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.AzureVnetVoltstackClusterType_NoGlobalNetwork{` +
		`NoGlobalNetwork:` + fmt.Sprintf("%#v", this.NoGlobalNetwork) + `}`}, ", ")
	return s
}
func (this *AzureVnetVoltstackClusterType_GlobalNetworkList) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.AzureVnetVoltstackClusterType_GlobalNetworkList{` +
		`GlobalNetworkList:` + fmt.Sprintf("%#v", this.GlobalNetworkList) + `}`}, ", ")
	return s
}
func (this *AzureVnetVoltstackClusterType_NoK8SCluster) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.AzureVnetVoltstackClusterType_NoK8SCluster{` +
		`NoK8SCluster:` + fmt.Sprintf("%#v", this.NoK8SCluster) + `}`}, ", ")
	return s
}
func (this *AzureVnetVoltstackClusterType_K8SCluster) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.AzureVnetVoltstackClusterType_K8SCluster{` +
		`K8SCluster:` + fmt.Sprintf("%#v", this.K8SCluster) + `}`}, ", ")
	return s
}
func (this *AzureVnetVoltstackClusterARType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 17)
	s = append(s, "&azure_vnet_site.AzureVnetVoltstackClusterARType{")
	s = append(s, "AzureCertifiedHw: "+fmt.Sprintf("%#v", this.AzureCertifiedHw)+",\n")
	if this.Node != nil {
		s = append(s, "Node: "+fmt.Sprintf("%#v", this.Node)+",\n")
	}
	if this.NetworkPolicyChoice != nil {
		s = append(s, "NetworkPolicyChoice: "+fmt.Sprintf("%#v", this.NetworkPolicyChoice)+",\n")
	}
	if this.ForwardProxyChoice != nil {
		s = append(s, "ForwardProxyChoice: "+fmt.Sprintf("%#v", this.ForwardProxyChoice)+",\n")
	}
	if this.OutsideStaticRouteChoice != nil {
		s = append(s, "OutsideStaticRouteChoice: "+fmt.Sprintf("%#v", this.OutsideStaticRouteChoice)+",\n")
	}
	if this.GlobalNetworkChoice != nil {
		s = append(s, "GlobalNetworkChoice: "+fmt.Sprintf("%#v", this.GlobalNetworkChoice)+",\n")
	}
	if this.K8SClusterChoice != nil {
		s = append(s, "K8SClusterChoice: "+fmt.Sprintf("%#v", this.K8SClusterChoice)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AzureVnetVoltstackClusterARType_NoNetworkPolicy) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.AzureVnetVoltstackClusterARType_NoNetworkPolicy{` +
		`NoNetworkPolicy:` + fmt.Sprintf("%#v", this.NoNetworkPolicy) + `}`}, ", ")
	return s
}
func (this *AzureVnetVoltstackClusterARType_ActiveNetworkPolicies) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.AzureVnetVoltstackClusterARType_ActiveNetworkPolicies{` +
		`ActiveNetworkPolicies:` + fmt.Sprintf("%#v", this.ActiveNetworkPolicies) + `}`}, ", ")
	return s
}
func (this *AzureVnetVoltstackClusterARType_NoForwardProxy) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.AzureVnetVoltstackClusterARType_NoForwardProxy{` +
		`NoForwardProxy:` + fmt.Sprintf("%#v", this.NoForwardProxy) + `}`}, ", ")
	return s
}
func (this *AzureVnetVoltstackClusterARType_ActiveForwardProxyPolicies) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.AzureVnetVoltstackClusterARType_ActiveForwardProxyPolicies{` +
		`ActiveForwardProxyPolicies:` + fmt.Sprintf("%#v", this.ActiveForwardProxyPolicies) + `}`}, ", ")
	return s
}
func (this *AzureVnetVoltstackClusterARType_ForwardProxyAllowAll) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.AzureVnetVoltstackClusterARType_ForwardProxyAllowAll{` +
		`ForwardProxyAllowAll:` + fmt.Sprintf("%#v", this.ForwardProxyAllowAll) + `}`}, ", ")
	return s
}
func (this *AzureVnetVoltstackClusterARType_NoOutsideStaticRoutes) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.AzureVnetVoltstackClusterARType_NoOutsideStaticRoutes{` +
		`NoOutsideStaticRoutes:` + fmt.Sprintf("%#v", this.NoOutsideStaticRoutes) + `}`}, ", ")
	return s
}
func (this *AzureVnetVoltstackClusterARType_OutsideStaticRoutes) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.AzureVnetVoltstackClusterARType_OutsideStaticRoutes{` +
		`OutsideStaticRoutes:` + fmt.Sprintf("%#v", this.OutsideStaticRoutes) + `}`}, ", ")
	return s
}
func (this *AzureVnetVoltstackClusterARType_NoGlobalNetwork) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.AzureVnetVoltstackClusterARType_NoGlobalNetwork{` +
		`NoGlobalNetwork:` + fmt.Sprintf("%#v", this.NoGlobalNetwork) + `}`}, ", ")
	return s
}
func (this *AzureVnetVoltstackClusterARType_GlobalNetworkList) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.AzureVnetVoltstackClusterARType_GlobalNetworkList{` +
		`GlobalNetworkList:` + fmt.Sprintf("%#v", this.GlobalNetworkList) + `}`}, ", ")
	return s
}
func (this *AzureVnetVoltstackClusterARType_NoK8SCluster) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.AzureVnetVoltstackClusterARType_NoK8SCluster{` +
		`NoK8SCluster:` + fmt.Sprintf("%#v", this.NoK8SCluster) + `}`}, ", ")
	return s
}
func (this *AzureVnetVoltstackClusterARType_K8SCluster) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.AzureVnetVoltstackClusterARType_K8SCluster{` +
		`K8SCluster:` + fmt.Sprintf("%#v", this.K8SCluster) + `}`}, ", ")
	return s
}
func (this *AzureVnetIngressGwReplaceType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&azure_vnet_site.AzureVnetIngressGwReplaceType{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AzureVnetIngressEgressGwReplaceType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 15)
	s = append(s, "&azure_vnet_site.AzureVnetIngressEgressGwReplaceType{")
	if this.NetworkPolicyChoice != nil {
		s = append(s, "NetworkPolicyChoice: "+fmt.Sprintf("%#v", this.NetworkPolicyChoice)+",\n")
	}
	if this.ForwardProxyChoice != nil {
		s = append(s, "ForwardProxyChoice: "+fmt.Sprintf("%#v", this.ForwardProxyChoice)+",\n")
	}
	if this.InsideStaticRouteChoice != nil {
		s = append(s, "InsideStaticRouteChoice: "+fmt.Sprintf("%#v", this.InsideStaticRouteChoice)+",\n")
	}
	if this.OutsideStaticRouteChoice != nil {
		s = append(s, "OutsideStaticRouteChoice: "+fmt.Sprintf("%#v", this.OutsideStaticRouteChoice)+",\n")
	}
	if this.GlobalNetworkChoice != nil {
		s = append(s, "GlobalNetworkChoice: "+fmt.Sprintf("%#v", this.GlobalNetworkChoice)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AzureVnetIngressEgressGwReplaceType_NoNetworkPolicy) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.AzureVnetIngressEgressGwReplaceType_NoNetworkPolicy{` +
		`NoNetworkPolicy:` + fmt.Sprintf("%#v", this.NoNetworkPolicy) + `}`}, ", ")
	return s
}
func (this *AzureVnetIngressEgressGwReplaceType_ActiveNetworkPolicies) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.AzureVnetIngressEgressGwReplaceType_ActiveNetworkPolicies{` +
		`ActiveNetworkPolicies:` + fmt.Sprintf("%#v", this.ActiveNetworkPolicies) + `}`}, ", ")
	return s
}
func (this *AzureVnetIngressEgressGwReplaceType_NoForwardProxy) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.AzureVnetIngressEgressGwReplaceType_NoForwardProxy{` +
		`NoForwardProxy:` + fmt.Sprintf("%#v", this.NoForwardProxy) + `}`}, ", ")
	return s
}
func (this *AzureVnetIngressEgressGwReplaceType_ActiveForwardProxyPolicies) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.AzureVnetIngressEgressGwReplaceType_ActiveForwardProxyPolicies{` +
		`ActiveForwardProxyPolicies:` + fmt.Sprintf("%#v", this.ActiveForwardProxyPolicies) + `}`}, ", ")
	return s
}
func (this *AzureVnetIngressEgressGwReplaceType_ForwardProxyAllowAll) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.AzureVnetIngressEgressGwReplaceType_ForwardProxyAllowAll{` +
		`ForwardProxyAllowAll:` + fmt.Sprintf("%#v", this.ForwardProxyAllowAll) + `}`}, ", ")
	return s
}
func (this *AzureVnetIngressEgressGwReplaceType_NoInsideStaticRoutes) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.AzureVnetIngressEgressGwReplaceType_NoInsideStaticRoutes{` +
		`NoInsideStaticRoutes:` + fmt.Sprintf("%#v", this.NoInsideStaticRoutes) + `}`}, ", ")
	return s
}
func (this *AzureVnetIngressEgressGwReplaceType_InsideStaticRoutes) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.AzureVnetIngressEgressGwReplaceType_InsideStaticRoutes{` +
		`InsideStaticRoutes:` + fmt.Sprintf("%#v", this.InsideStaticRoutes) + `}`}, ", ")
	return s
}
func (this *AzureVnetIngressEgressGwReplaceType_NoOutsideStaticRoutes) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.AzureVnetIngressEgressGwReplaceType_NoOutsideStaticRoutes{` +
		`NoOutsideStaticRoutes:` + fmt.Sprintf("%#v", this.NoOutsideStaticRoutes) + `}`}, ", ")
	return s
}
func (this *AzureVnetIngressEgressGwReplaceType_OutsideStaticRoutes) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.AzureVnetIngressEgressGwReplaceType_OutsideStaticRoutes{` +
		`OutsideStaticRoutes:` + fmt.Sprintf("%#v", this.OutsideStaticRoutes) + `}`}, ", ")
	return s
}
func (this *AzureVnetIngressEgressGwReplaceType_NoGlobalNetwork) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.AzureVnetIngressEgressGwReplaceType_NoGlobalNetwork{` +
		`NoGlobalNetwork:` + fmt.Sprintf("%#v", this.NoGlobalNetwork) + `}`}, ", ")
	return s
}
func (this *AzureVnetIngressEgressGwReplaceType_GlobalNetworkList) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.AzureVnetIngressEgressGwReplaceType_GlobalNetworkList{` +
		`GlobalNetworkList:` + fmt.Sprintf("%#v", this.GlobalNetworkList) + `}`}, ", ")
	return s
}
func (this *AzureVnetVoltstackClusterReplaceType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 13)
	s = append(s, "&azure_vnet_site.AzureVnetVoltstackClusterReplaceType{")
	if this.NetworkPolicyChoice != nil {
		s = append(s, "NetworkPolicyChoice: "+fmt.Sprintf("%#v", this.NetworkPolicyChoice)+",\n")
	}
	if this.ForwardProxyChoice != nil {
		s = append(s, "ForwardProxyChoice: "+fmt.Sprintf("%#v", this.ForwardProxyChoice)+",\n")
	}
	if this.OutsideStaticRouteChoice != nil {
		s = append(s, "OutsideStaticRouteChoice: "+fmt.Sprintf("%#v", this.OutsideStaticRouteChoice)+",\n")
	}
	if this.GlobalNetworkChoice != nil {
		s = append(s, "GlobalNetworkChoice: "+fmt.Sprintf("%#v", this.GlobalNetworkChoice)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AzureVnetVoltstackClusterReplaceType_NoNetworkPolicy) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.AzureVnetVoltstackClusterReplaceType_NoNetworkPolicy{` +
		`NoNetworkPolicy:` + fmt.Sprintf("%#v", this.NoNetworkPolicy) + `}`}, ", ")
	return s
}
func (this *AzureVnetVoltstackClusterReplaceType_ActiveNetworkPolicies) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.AzureVnetVoltstackClusterReplaceType_ActiveNetworkPolicies{` +
		`ActiveNetworkPolicies:` + fmt.Sprintf("%#v", this.ActiveNetworkPolicies) + `}`}, ", ")
	return s
}
func (this *AzureVnetVoltstackClusterReplaceType_NoForwardProxy) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.AzureVnetVoltstackClusterReplaceType_NoForwardProxy{` +
		`NoForwardProxy:` + fmt.Sprintf("%#v", this.NoForwardProxy) + `}`}, ", ")
	return s
}
func (this *AzureVnetVoltstackClusterReplaceType_ActiveForwardProxyPolicies) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.AzureVnetVoltstackClusterReplaceType_ActiveForwardProxyPolicies{` +
		`ActiveForwardProxyPolicies:` + fmt.Sprintf("%#v", this.ActiveForwardProxyPolicies) + `}`}, ", ")
	return s
}
func (this *AzureVnetVoltstackClusterReplaceType_ForwardProxyAllowAll) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.AzureVnetVoltstackClusterReplaceType_ForwardProxyAllowAll{` +
		`ForwardProxyAllowAll:` + fmt.Sprintf("%#v", this.ForwardProxyAllowAll) + `}`}, ", ")
	return s
}
func (this *AzureVnetVoltstackClusterReplaceType_NoOutsideStaticRoutes) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.AzureVnetVoltstackClusterReplaceType_NoOutsideStaticRoutes{` +
		`NoOutsideStaticRoutes:` + fmt.Sprintf("%#v", this.NoOutsideStaticRoutes) + `}`}, ", ")
	return s
}
func (this *AzureVnetVoltstackClusterReplaceType_OutsideStaticRoutes) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.AzureVnetVoltstackClusterReplaceType_OutsideStaticRoutes{` +
		`OutsideStaticRoutes:` + fmt.Sprintf("%#v", this.OutsideStaticRoutes) + `}`}, ", ")
	return s
}
func (this *AzureVnetVoltstackClusterReplaceType_NoGlobalNetwork) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.AzureVnetVoltstackClusterReplaceType_NoGlobalNetwork{` +
		`NoGlobalNetwork:` + fmt.Sprintf("%#v", this.NoGlobalNetwork) + `}`}, ", ")
	return s
}
func (this *AzureVnetVoltstackClusterReplaceType_GlobalNetworkList) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.AzureVnetVoltstackClusterReplaceType_GlobalNetworkList{` +
		`GlobalNetworkList:` + fmt.Sprintf("%#v", this.GlobalNetworkList) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 33)
	s = append(s, "&azure_vnet_site.GlobalSpecType{")
	s = append(s, "ResourceGroup: "+fmt.Sprintf("%#v", this.ResourceGroup)+",\n")
	if this.RegionChoice != nil {
		s = append(s, "RegionChoice: "+fmt.Sprintf("%#v", this.RegionChoice)+",\n")
	}
	if this.Vnet != nil {
		s = append(s, "Vnet: "+fmt.Sprintf("%#v", this.Vnet)+",\n")
	}
	if this.SiteType != nil {
		s = append(s, "SiteType: "+fmt.Sprintf("%#v", this.SiteType)+",\n")
	}
	s = append(s, "DiskSize: "+fmt.Sprintf("%#v", this.DiskSize)+",\n")
	if this.Deployment != nil {
		s = append(s, "Deployment: "+fmt.Sprintf("%#v", this.Deployment)+",\n")
	}
	s = append(s, "MachineType: "+fmt.Sprintf("%#v", this.MachineType)+",\n")
	if this.WorkerNodes != nil {
		s = append(s, "WorkerNodes: "+fmt.Sprintf("%#v", this.WorkerNodes)+",\n")
	}
	s = append(s, "VolterraSoftwareVersion: "+fmt.Sprintf("%#v", this.VolterraSoftwareVersion)+",\n")
	s = append(s, "OperatingSystemVersion: "+fmt.Sprintf("%#v", this.OperatingSystemVersion)+",\n")
	s = append(s, "SshKey: "+fmt.Sprintf("%#v", this.SshKey)+",\n")
	s = append(s, "Address: "+fmt.Sprintf("%#v", this.Address)+",\n")
	if this.Coordinates != nil {
		s = append(s, "Coordinates: "+fmt.Sprintf("%#v", this.Coordinates)+",\n")
	}
	if this.LogsReceiverChoice != nil {
		s = append(s, "LogsReceiverChoice: "+fmt.Sprintf("%#v", this.LogsReceiverChoice)+",\n")
	}
	if this.Sw != nil {
		s = append(s, "Sw: "+fmt.Sprintf("%#v", this.Sw)+",\n")
	}
	if this.Os != nil {
		s = append(s, "Os: "+fmt.Sprintf("%#v", this.Os)+",\n")
	}
	if this.VipParamsPerAz != nil {
		s = append(s, "VipParamsPerAz: "+fmt.Sprintf("%#v", this.VipParamsPerAz)+",\n")
	}
	if this.TfParams != nil {
		s = append(s, "TfParams: "+fmt.Sprintf("%#v", this.TfParams)+",\n")
	}
	if this.ViewInternal != nil {
		s = append(s, "ViewInternal: "+fmt.Sprintf("%#v", this.ViewInternal)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GlobalSpecType_AzureRegion) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.GlobalSpecType_AzureRegion{` +
		`AzureRegion:` + fmt.Sprintf("%#v", this.AzureRegion) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_AlternateRegion) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.GlobalSpecType_AlternateRegion{` +
		`AlternateRegion:` + fmt.Sprintf("%#v", this.AlternateRegion) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_IngressGw) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.GlobalSpecType_IngressGw{` +
		`IngressGw:` + fmt.Sprintf("%#v", this.IngressGw) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_IngressEgressGw) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.GlobalSpecType_IngressEgressGw{` +
		`IngressEgressGw:` + fmt.Sprintf("%#v", this.IngressEgressGw) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_VoltstackCluster) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.GlobalSpecType_VoltstackCluster{` +
		`VoltstackCluster:` + fmt.Sprintf("%#v", this.VoltstackCluster) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_IngressGwAr) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.GlobalSpecType_IngressGwAr{` +
		`IngressGwAr:` + fmt.Sprintf("%#v", this.IngressGwAr) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_IngressEgressGwAr) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.GlobalSpecType_IngressEgressGwAr{` +
		`IngressEgressGwAr:` + fmt.Sprintf("%#v", this.IngressEgressGwAr) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_VoltstackClusterAr) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.GlobalSpecType_VoltstackClusterAr{` +
		`VoltstackClusterAr:` + fmt.Sprintf("%#v", this.VoltstackClusterAr) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_AzureCred) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.GlobalSpecType_AzureCred{` +
		`AzureCred:` + fmt.Sprintf("%#v", this.AzureCred) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_Assisted) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.GlobalSpecType_Assisted{` +
		`Assisted:` + fmt.Sprintf("%#v", this.Assisted) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_NodesPerAz) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.GlobalSpecType_NodesPerAz{` +
		`NodesPerAz:` + fmt.Sprintf("%#v", this.NodesPerAz) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_TotalNodes) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.GlobalSpecType_TotalNodes{` +
		`TotalNodes:` + fmt.Sprintf("%#v", this.TotalNodes) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_NoWorkerNodes) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.GlobalSpecType_NoWorkerNodes{` +
		`NoWorkerNodes:` + fmt.Sprintf("%#v", this.NoWorkerNodes) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_LogsStreamingDisabled) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.GlobalSpecType_LogsStreamingDisabled{` +
		`LogsStreamingDisabled:` + fmt.Sprintf("%#v", this.LogsStreamingDisabled) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_LogReceiver) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.GlobalSpecType_LogReceiver{` +
		`LogReceiver:` + fmt.Sprintf("%#v", this.LogReceiver) + `}`}, ", ")
	return s
}
func (this *CreateSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 28)
	s = append(s, "&azure_vnet_site.CreateSpecType{")
	s = append(s, "ResourceGroup: "+fmt.Sprintf("%#v", this.ResourceGroup)+",\n")
	if this.RegionChoice != nil {
		s = append(s, "RegionChoice: "+fmt.Sprintf("%#v", this.RegionChoice)+",\n")
	}
	if this.Vnet != nil {
		s = append(s, "Vnet: "+fmt.Sprintf("%#v", this.Vnet)+",\n")
	}
	if this.SiteType != nil {
		s = append(s, "SiteType: "+fmt.Sprintf("%#v", this.SiteType)+",\n")
	}
	if this.Deployment != nil {
		s = append(s, "Deployment: "+fmt.Sprintf("%#v", this.Deployment)+",\n")
	}
	s = append(s, "MachineType: "+fmt.Sprintf("%#v", this.MachineType)+",\n")
	s = append(s, "DiskSize: "+fmt.Sprintf("%#v", this.DiskSize)+",\n")
	s = append(s, "SshKey: "+fmt.Sprintf("%#v", this.SshKey)+",\n")
	s = append(s, "Address: "+fmt.Sprintf("%#v", this.Address)+",\n")
	if this.Coordinates != nil {
		s = append(s, "Coordinates: "+fmt.Sprintf("%#v", this.Coordinates)+",\n")
	}
	if this.LogsReceiverChoice != nil {
		s = append(s, "LogsReceiverChoice: "+fmt.Sprintf("%#v", this.LogsReceiverChoice)+",\n")
	}
	if this.Sw != nil {
		s = append(s, "Sw: "+fmt.Sprintf("%#v", this.Sw)+",\n")
	}
	if this.Os != nil {
		s = append(s, "Os: "+fmt.Sprintf("%#v", this.Os)+",\n")
	}
	if this.WorkerNodes != nil {
		s = append(s, "WorkerNodes: "+fmt.Sprintf("%#v", this.WorkerNodes)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CreateSpecType_AzureRegion) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.CreateSpecType_AzureRegion{` +
		`AzureRegion:` + fmt.Sprintf("%#v", this.AzureRegion) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_AlternateRegion) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.CreateSpecType_AlternateRegion{` +
		`AlternateRegion:` + fmt.Sprintf("%#v", this.AlternateRegion) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_IngressGw) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.CreateSpecType_IngressGw{` +
		`IngressGw:` + fmt.Sprintf("%#v", this.IngressGw) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_IngressEgressGw) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.CreateSpecType_IngressEgressGw{` +
		`IngressEgressGw:` + fmt.Sprintf("%#v", this.IngressEgressGw) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_VoltstackCluster) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.CreateSpecType_VoltstackCluster{` +
		`VoltstackCluster:` + fmt.Sprintf("%#v", this.VoltstackCluster) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_IngressGwAr) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.CreateSpecType_IngressGwAr{` +
		`IngressGwAr:` + fmt.Sprintf("%#v", this.IngressGwAr) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_IngressEgressGwAr) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.CreateSpecType_IngressEgressGwAr{` +
		`IngressEgressGwAr:` + fmt.Sprintf("%#v", this.IngressEgressGwAr) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_VoltstackClusterAr) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.CreateSpecType_VoltstackClusterAr{` +
		`VoltstackClusterAr:` + fmt.Sprintf("%#v", this.VoltstackClusterAr) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_AzureCred) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.CreateSpecType_AzureCred{` +
		`AzureCred:` + fmt.Sprintf("%#v", this.AzureCred) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_Assisted) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.CreateSpecType_Assisted{` +
		`Assisted:` + fmt.Sprintf("%#v", this.Assisted) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_LogsStreamingDisabled) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.CreateSpecType_LogsStreamingDisabled{` +
		`LogsStreamingDisabled:` + fmt.Sprintf("%#v", this.LogsStreamingDisabled) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_LogReceiver) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.CreateSpecType_LogReceiver{` +
		`LogReceiver:` + fmt.Sprintf("%#v", this.LogReceiver) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_NodesPerAz) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.CreateSpecType_NodesPerAz{` +
		`NodesPerAz:` + fmt.Sprintf("%#v", this.NodesPerAz) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_TotalNodes) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.CreateSpecType_TotalNodes{` +
		`TotalNodes:` + fmt.Sprintf("%#v", this.TotalNodes) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_NoWorkerNodes) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.CreateSpecType_NoWorkerNodes{` +
		`NoWorkerNodes:` + fmt.Sprintf("%#v", this.NoWorkerNodes) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 17)
	s = append(s, "&azure_vnet_site.ReplaceSpecType{")
	if this.SiteType != nil {
		s = append(s, "SiteType: "+fmt.Sprintf("%#v", this.SiteType)+",\n")
	}
	s = append(s, "Address: "+fmt.Sprintf("%#v", this.Address)+",\n")
	if this.Coordinates != nil {
		s = append(s, "Coordinates: "+fmt.Sprintf("%#v", this.Coordinates)+",\n")
	}
	if this.LogsReceiverChoice != nil {
		s = append(s, "LogsReceiverChoice: "+fmt.Sprintf("%#v", this.LogsReceiverChoice)+",\n")
	}
	if this.WorkerNodes != nil {
		s = append(s, "WorkerNodes: "+fmt.Sprintf("%#v", this.WorkerNodes)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ReplaceSpecType_IngressGw) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.ReplaceSpecType_IngressGw{` +
		`IngressGw:` + fmt.Sprintf("%#v", this.IngressGw) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_IngressEgressGw) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.ReplaceSpecType_IngressEgressGw{` +
		`IngressEgressGw:` + fmt.Sprintf("%#v", this.IngressEgressGw) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_VoltstackCluster) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.ReplaceSpecType_VoltstackCluster{` +
		`VoltstackCluster:` + fmt.Sprintf("%#v", this.VoltstackCluster) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_IngressGwAr) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.ReplaceSpecType_IngressGwAr{` +
		`IngressGwAr:` + fmt.Sprintf("%#v", this.IngressGwAr) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_IngressEgressGwAr) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.ReplaceSpecType_IngressEgressGwAr{` +
		`IngressEgressGwAr:` + fmt.Sprintf("%#v", this.IngressEgressGwAr) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_VoltstackClusterAr) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.ReplaceSpecType_VoltstackClusterAr{` +
		`VoltstackClusterAr:` + fmt.Sprintf("%#v", this.VoltstackClusterAr) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_LogsStreamingDisabled) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.ReplaceSpecType_LogsStreamingDisabled{` +
		`LogsStreamingDisabled:` + fmt.Sprintf("%#v", this.LogsStreamingDisabled) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_LogReceiver) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.ReplaceSpecType_LogReceiver{` +
		`LogReceiver:` + fmt.Sprintf("%#v", this.LogReceiver) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_NodesPerAz) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.ReplaceSpecType_NodesPerAz{` +
		`NodesPerAz:` + fmt.Sprintf("%#v", this.NodesPerAz) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_TotalNodes) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.ReplaceSpecType_TotalNodes{` +
		`TotalNodes:` + fmt.Sprintf("%#v", this.TotalNodes) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_NoWorkerNodes) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.ReplaceSpecType_NoWorkerNodes{` +
		`NoWorkerNodes:` + fmt.Sprintf("%#v", this.NoWorkerNodes) + `}`}, ", ")
	return s
}
func (this *GetSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 30)
	s = append(s, "&azure_vnet_site.GetSpecType{")
	s = append(s, "ResourceGroup: "+fmt.Sprintf("%#v", this.ResourceGroup)+",\n")
	if this.RegionChoice != nil {
		s = append(s, "RegionChoice: "+fmt.Sprintf("%#v", this.RegionChoice)+",\n")
	}
	if this.Vnet != nil {
		s = append(s, "Vnet: "+fmt.Sprintf("%#v", this.Vnet)+",\n")
	}
	if this.SiteType != nil {
		s = append(s, "SiteType: "+fmt.Sprintf("%#v", this.SiteType)+",\n")
	}
	if this.Deployment != nil {
		s = append(s, "Deployment: "+fmt.Sprintf("%#v", this.Deployment)+",\n")
	}
	s = append(s, "MachineType: "+fmt.Sprintf("%#v", this.MachineType)+",\n")
	s = append(s, "DiskSize: "+fmt.Sprintf("%#v", this.DiskSize)+",\n")
	s = append(s, "VolterraSoftwareVersion: "+fmt.Sprintf("%#v", this.VolterraSoftwareVersion)+",\n")
	s = append(s, "OperatingSystemVersion: "+fmt.Sprintf("%#v", this.OperatingSystemVersion)+",\n")
	s = append(s, "SshKey: "+fmt.Sprintf("%#v", this.SshKey)+",\n")
	s = append(s, "Address: "+fmt.Sprintf("%#v", this.Address)+",\n")
	if this.Coordinates != nil {
		s = append(s, "Coordinates: "+fmt.Sprintf("%#v", this.Coordinates)+",\n")
	}
	if this.LogsReceiverChoice != nil {
		s = append(s, "LogsReceiverChoice: "+fmt.Sprintf("%#v", this.LogsReceiverChoice)+",\n")
	}
	s = append(s, "SiteState: "+fmt.Sprintf("%#v", this.SiteState)+",\n")
	if this.VipParamsPerAz != nil {
		s = append(s, "VipParamsPerAz: "+fmt.Sprintf("%#v", this.VipParamsPerAz)+",\n")
	}
	if this.WorkerNodes != nil {
		s = append(s, "WorkerNodes: "+fmt.Sprintf("%#v", this.WorkerNodes)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetSpecType_AzureRegion) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.GetSpecType_AzureRegion{` +
		`AzureRegion:` + fmt.Sprintf("%#v", this.AzureRegion) + `}`}, ", ")
	return s
}
func (this *GetSpecType_AlternateRegion) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.GetSpecType_AlternateRegion{` +
		`AlternateRegion:` + fmt.Sprintf("%#v", this.AlternateRegion) + `}`}, ", ")
	return s
}
func (this *GetSpecType_IngressGw) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.GetSpecType_IngressGw{` +
		`IngressGw:` + fmt.Sprintf("%#v", this.IngressGw) + `}`}, ", ")
	return s
}
func (this *GetSpecType_IngressEgressGw) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.GetSpecType_IngressEgressGw{` +
		`IngressEgressGw:` + fmt.Sprintf("%#v", this.IngressEgressGw) + `}`}, ", ")
	return s
}
func (this *GetSpecType_VoltstackCluster) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.GetSpecType_VoltstackCluster{` +
		`VoltstackCluster:` + fmt.Sprintf("%#v", this.VoltstackCluster) + `}`}, ", ")
	return s
}
func (this *GetSpecType_IngressGwAr) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.GetSpecType_IngressGwAr{` +
		`IngressGwAr:` + fmt.Sprintf("%#v", this.IngressGwAr) + `}`}, ", ")
	return s
}
func (this *GetSpecType_IngressEgressGwAr) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.GetSpecType_IngressEgressGwAr{` +
		`IngressEgressGwAr:` + fmt.Sprintf("%#v", this.IngressEgressGwAr) + `}`}, ", ")
	return s
}
func (this *GetSpecType_VoltstackClusterAr) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.GetSpecType_VoltstackClusterAr{` +
		`VoltstackClusterAr:` + fmt.Sprintf("%#v", this.VoltstackClusterAr) + `}`}, ", ")
	return s
}
func (this *GetSpecType_AzureCred) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.GetSpecType_AzureCred{` +
		`AzureCred:` + fmt.Sprintf("%#v", this.AzureCred) + `}`}, ", ")
	return s
}
func (this *GetSpecType_Assisted) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.GetSpecType_Assisted{` +
		`Assisted:` + fmt.Sprintf("%#v", this.Assisted) + `}`}, ", ")
	return s
}
func (this *GetSpecType_LogsStreamingDisabled) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.GetSpecType_LogsStreamingDisabled{` +
		`LogsStreamingDisabled:` + fmt.Sprintf("%#v", this.LogsStreamingDisabled) + `}`}, ", ")
	return s
}
func (this *GetSpecType_LogReceiver) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.GetSpecType_LogReceiver{` +
		`LogReceiver:` + fmt.Sprintf("%#v", this.LogReceiver) + `}`}, ", ")
	return s
}
func (this *GetSpecType_NodesPerAz) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.GetSpecType_NodesPerAz{` +
		`NodesPerAz:` + fmt.Sprintf("%#v", this.NodesPerAz) + `}`}, ", ")
	return s
}
func (this *GetSpecType_TotalNodes) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.GetSpecType_TotalNodes{` +
		`TotalNodes:` + fmt.Sprintf("%#v", this.TotalNodes) + `}`}, ", ")
	return s
}
func (this *GetSpecType_NoWorkerNodes) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&azure_vnet_site.GetSpecType_NoWorkerNodes{` +
		`NoWorkerNodes:` + fmt.Sprintf("%#v", this.NoWorkerNodes) + `}`}, ", ")
	return s
}
func valueToGoStringTypes(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *AzureVnetIngressGwType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AzureVnetIngressGwType) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.AzNodes) > 0 {
		for _, msg := range m.AzNodes {
			dAtA[i] = 0xa
			i++
			i = encodeVarintTypes(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.AzureCertifiedHw) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTypes(dAtA, i, uint64(len(m.AzureCertifiedHw)))
		i += copy(dAtA[i:], m.AzureCertifiedHw)
	}
	return i, nil
}

func (m *AzureVnetIngressGwARType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AzureVnetIngressGwARType) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Node != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.Node.Size()))
		n1, err := m.Node.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if len(m.AzureCertifiedHw) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTypes(dAtA, i, uint64(len(m.AzureCertifiedHw)))
		i += copy(dAtA[i:], m.AzureCertifiedHw)
	}
	return i, nil
}

func (m *AzureVnetIngressEgressGwType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AzureVnetIngressEgressGwType) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.AzNodes) > 0 {
		for _, msg := range m.AzNodes {
			dAtA[i] = 0xa
			i++
			i = encodeVarintTypes(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.NetworkPolicyChoice != nil {
		nn2, err := m.NetworkPolicyChoice.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn2
	}
	if m.ForwardProxyChoice != nil {
		nn3, err := m.ForwardProxyChoice.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn3
	}
	if len(m.AzureCertifiedHw) > 0 {
		dAtA[i] = 0x42
		i++
		i = encodeVarintTypes(dAtA, i, uint64(len(m.AzureCertifiedHw)))
		i += copy(dAtA[i:], m.AzureCertifiedHw)
	}
	if m.InsideStaticRouteChoice != nil {
		nn4, err := m.InsideStaticRouteChoice.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn4
	}
	if m.OutsideStaticRouteChoice != nil {
		nn5, err := m.OutsideStaticRouteChoice.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn5
	}
	if m.GlobalNetworkChoice != nil {
		nn6, err := m.GlobalNetworkChoice.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn6
	}
	return i, nil
}

func (m *AzureVnetIngressEgressGwType_NoNetworkPolicy) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.NoNetworkPolicy != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.NoNetworkPolicy.Size()))
		n7, err := m.NoNetworkPolicy.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	return i, nil
}
func (m *AzureVnetIngressEgressGwType_NoForwardProxy) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.NoForwardProxy != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.NoForwardProxy.Size()))
		n8, err := m.NoForwardProxy.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n8
	}
	return i, nil
}
func (m *AzureVnetIngressEgressGwType_ActiveForwardProxyPolicies) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.ActiveForwardProxyPolicies != nil {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.ActiveForwardProxyPolicies.Size()))
		n9, err := m.ActiveForwardProxyPolicies.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n9
	}
	return i, nil
}
func (m *AzureVnetIngressEgressGwType_ActiveNetworkPolicies) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.ActiveNetworkPolicies != nil {
		dAtA[i] = 0x52
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.ActiveNetworkPolicies.Size()))
		n10, err := m.ActiveNetworkPolicies.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n10
	}
	return i, nil
}
func (m *AzureVnetIngressEgressGwType_NoInsideStaticRoutes) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.NoInsideStaticRoutes != nil {
		dAtA[i] = 0x62
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.NoInsideStaticRoutes.Size()))
		n11, err := m.NoInsideStaticRoutes.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n11
	}
	return i, nil
}
func (m *AzureVnetIngressEgressGwType_InsideStaticRoutes) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.InsideStaticRoutes != nil {
		dAtA[i] = 0x6a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.InsideStaticRoutes.Size()))
		n12, err := m.InsideStaticRoutes.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n12
	}
	return i, nil
}
func (m *AzureVnetIngressEgressGwType_NoOutsideStaticRoutes) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.NoOutsideStaticRoutes != nil {
		dAtA[i] = 0x7a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.NoOutsideStaticRoutes.Size()))
		n13, err := m.NoOutsideStaticRoutes.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n13
	}
	return i, nil
}
func (m *AzureVnetIngressEgressGwType_OutsideStaticRoutes) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.OutsideStaticRoutes != nil {
		dAtA[i] = 0x82
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.OutsideStaticRoutes.Size()))
		n14, err := m.OutsideStaticRoutes.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n14
	}
	return i, nil
}
func (m *AzureVnetIngressEgressGwType_NoGlobalNetwork) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.NoGlobalNetwork != nil {
		dAtA[i] = 0x92
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.NoGlobalNetwork.Size()))
		n15, err := m.NoGlobalNetwork.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n15
	}
	return i, nil
}
func (m *AzureVnetIngressEgressGwType_GlobalNetworkList) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.GlobalNetworkList != nil {
		dAtA[i] = 0x9a
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.GlobalNetworkList.Size()))
		n16, err := m.GlobalNetworkList.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n16
	}
	return i, nil
}
func (m *AzureVnetIngressEgressGwType_ForwardProxyAllowAll) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.ForwardProxyAllowAll != nil {
		dAtA[i] = 0xa2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.ForwardProxyAllowAll.Size()))
		n17, err := m.ForwardProxyAllowAll.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n17
	}
	return i, nil
}
func (m *AzureVnetIngressEgressGwARType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AzureVnetIngressEgressGwARType) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Node != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.Node.Size()))
		n18, err := m.Node.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n18
	}
	if m.NetworkPolicyChoice != nil {
		nn19, err := m.NetworkPolicyChoice.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn19
	}
	if m.ForwardProxyChoice != nil {
		nn20, err := m.ForwardProxyChoice.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn20
	}
	if len(m.AzureCertifiedHw) > 0 {
		dAtA[i] = 0x42
		i++
		i = encodeVarintTypes(dAtA, i, uint64(len(m.AzureCertifiedHw)))
		i += copy(dAtA[i:], m.AzureCertifiedHw)
	}
	if m.InsideStaticRouteChoice != nil {
		nn21, err := m.InsideStaticRouteChoice.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn21
	}
	if m.OutsideStaticRouteChoice != nil {
		nn22, err := m.OutsideStaticRouteChoice.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn22
	}
	if m.GlobalNetworkChoice != nil {
		nn23, err := m.GlobalNetworkChoice.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn23
	}
	return i, nil
}

func (m *AzureVnetIngressEgressGwARType_NoNetworkPolicy) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.NoNetworkPolicy != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.NoNetworkPolicy.Size()))
		n24, err := m.NoNetworkPolicy.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n24
	}
	return i, nil
}
func (m *AzureVnetIngressEgressGwARType_NoForwardProxy) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.NoForwardProxy != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.NoForwardProxy.Size()))
		n25, err := m.NoForwardProxy.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n25
	}
	return i, nil
}
func (m *AzureVnetIngressEgressGwARType_ActiveForwardProxyPolicies) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.ActiveForwardProxyPolicies != nil {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.ActiveForwardProxyPolicies.Size()))
		n26, err := m.ActiveForwardProxyPolicies.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n26
	}
	return i, nil
}
func (m *AzureVnetIngressEgressGwARType_ActiveNetworkPolicies) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.ActiveNetworkPolicies != nil {
		dAtA[i] = 0x52
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.ActiveNetworkPolicies.Size()))
		n27, err := m.ActiveNetworkPolicies.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n27
	}
	return i, nil
}
func (m *AzureVnetIngressEgressGwARType_NoInsideStaticRoutes) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.NoInsideStaticRoutes != nil {
		dAtA[i] = 0x62
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.NoInsideStaticRoutes.Size()))
		n28, err := m.NoInsideStaticRoutes.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n28
	}
	return i, nil
}
func (m *AzureVnetIngressEgressGwARType_InsideStaticRoutes) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.InsideStaticRoutes != nil {
		dAtA[i] = 0x6a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.InsideStaticRoutes.Size()))
		n29, err := m.InsideStaticRoutes.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n29
	}
	return i, nil
}
func (m *AzureVnetIngressEgressGwARType_NoOutsideStaticRoutes) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.NoOutsideStaticRoutes != nil {
		dAtA[i] = 0x7a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.NoOutsideStaticRoutes.Size()))
		n30, err := m.NoOutsideStaticRoutes.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n30
	}
	return i, nil
}
func (m *AzureVnetIngressEgressGwARType_OutsideStaticRoutes) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.OutsideStaticRoutes != nil {
		dAtA[i] = 0x82
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.OutsideStaticRoutes.Size()))
		n31, err := m.OutsideStaticRoutes.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n31
	}
	return i, nil
}
func (m *AzureVnetIngressEgressGwARType_NoGlobalNetwork) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.NoGlobalNetwork != nil {
		dAtA[i] = 0x92
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.NoGlobalNetwork.Size()))
		n32, err := m.NoGlobalNetwork.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n32
	}
	return i, nil
}
func (m *AzureVnetIngressEgressGwARType_GlobalNetworkList) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.GlobalNetworkList != nil {
		dAtA[i] = 0x9a
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.GlobalNetworkList.Size()))
		n33, err := m.GlobalNetworkList.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n33
	}
	return i, nil
}
func (m *AzureVnetIngressEgressGwARType_ForwardProxyAllowAll) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.ForwardProxyAllowAll != nil {
		dAtA[i] = 0xa2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.ForwardProxyAllowAll.Size()))
		n34, err := m.ForwardProxyAllowAll.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n34
	}
	return i, nil
}
func (m *AzureVnetVoltstackClusterType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AzureVnetVoltstackClusterType) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.AzureCertifiedHw) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTypes(dAtA, i, uint64(len(m.AzureCertifiedHw)))
		i += copy(dAtA[i:], m.AzureCertifiedHw)
	}
	if len(m.AzNodes) > 0 {
		for _, msg := range m.AzNodes {
			dAtA[i] = 0x12
			i++
			i = encodeVarintTypes(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.NetworkPolicyChoice != nil {
		nn35, err := m.NetworkPolicyChoice.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn35
	}
	if m.ForwardProxyChoice != nil {
		nn36, err := m.ForwardProxyChoice.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn36
	}
	if m.OutsideStaticRouteChoice != nil {
		nn37, err := m.OutsideStaticRouteChoice.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn37
	}
	if m.GlobalNetworkChoice != nil {
		nn38, err := m.GlobalNetworkChoice.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn38
	}
	if m.K8SClusterChoice != nil {
		nn39, err := m.K8SClusterChoice.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn39
	}
	return i, nil
}

func (m *AzureVnetVoltstackClusterType_NoNetworkPolicy) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.NoNetworkPolicy != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.NoNetworkPolicy.Size()))
		n40, err := m.NoNetworkPolicy.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n40
	}
	return i, nil
}
func (m *AzureVnetVoltstackClusterType_ActiveNetworkPolicies) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.ActiveNetworkPolicies != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.ActiveNetworkPolicies.Size()))
		n41, err := m.ActiveNetworkPolicies.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n41
	}
	return i, nil
}
func (m *AzureVnetVoltstackClusterType_NoForwardProxy) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.NoForwardProxy != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.NoForwardProxy.Size()))
		n42, err := m.NoForwardProxy.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n42
	}
	return i, nil
}
func (m *AzureVnetVoltstackClusterType_ActiveForwardProxyPolicies) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.ActiveForwardProxyPolicies != nil {
		dAtA[i] = 0x42
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.ActiveForwardProxyPolicies.Size()))
		n43, err := m.ActiveForwardProxyPolicies.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n43
	}
	return i, nil
}
func (m *AzureVnetVoltstackClusterType_NoOutsideStaticRoutes) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.NoOutsideStaticRoutes != nil {
		dAtA[i] = 0x52
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.NoOutsideStaticRoutes.Size()))
		n44, err := m.NoOutsideStaticRoutes.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n44
	}
	return i, nil
}
func (m *AzureVnetVoltstackClusterType_OutsideStaticRoutes) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.OutsideStaticRoutes != nil {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.OutsideStaticRoutes.Size()))
		n45, err := m.OutsideStaticRoutes.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n45
	}
	return i, nil
}
func (m *AzureVnetVoltstackClusterType_NoGlobalNetwork) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.NoGlobalNetwork != nil {
		dAtA[i] = 0x6a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.NoGlobalNetwork.Size()))
		n46, err := m.NoGlobalNetwork.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n46
	}
	return i, nil
}
func (m *AzureVnetVoltstackClusterType_GlobalNetworkList) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.GlobalNetworkList != nil {
		dAtA[i] = 0x72
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.GlobalNetworkList.Size()))
		n47, err := m.GlobalNetworkList.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n47
	}
	return i, nil
}
func (m *AzureVnetVoltstackClusterType_ForwardProxyAllowAll) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.ForwardProxyAllowAll != nil {
		dAtA[i] = 0x7a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.ForwardProxyAllowAll.Size()))
		n48, err := m.ForwardProxyAllowAll.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n48
	}
	return i, nil
}
func (m *AzureVnetVoltstackClusterType_NoK8SCluster) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.NoK8SCluster != nil {
		dAtA[i] = 0xda
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.NoK8SCluster.Size()))
		n49, err := m.NoK8SCluster.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n49
	}
	return i, nil
}
func (m *AzureVnetVoltstackClusterType_K8SCluster) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.K8SCluster != nil {
		dAtA[i] = 0xe2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.K8SCluster.Size()))
		n50, err := m.K8SCluster.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n50
	}
	return i, nil
}
func (m *AzureVnetVoltstackClusterARType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AzureVnetVoltstackClusterARType) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.AzureCertifiedHw) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTypes(dAtA, i, uint64(len(m.AzureCertifiedHw)))
		i += copy(dAtA[i:], m.AzureCertifiedHw)
	}
	if m.Node != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.Node.Size()))
		n51, err := m.Node.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n51
	}
	if m.NetworkPolicyChoice != nil {
		nn52, err := m.NetworkPolicyChoice.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn52
	}
	if m.ForwardProxyChoice != nil {
		nn53, err := m.ForwardProxyChoice.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn53
	}
	if m.OutsideStaticRouteChoice != nil {
		nn54, err := m.OutsideStaticRouteChoice.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn54
	}
	if m.GlobalNetworkChoice != nil {
		nn55, err := m.GlobalNetworkChoice.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn55
	}
	if m.K8SClusterChoice != nil {
		nn56, err := m.K8SClusterChoice.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn56
	}
	return i, nil
}

func (m *AzureVnetVoltstackClusterARType_NoNetworkPolicy) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.NoNetworkPolicy != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.NoNetworkPolicy.Size()))
		n57, err := m.NoNetworkPolicy.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n57
	}
	return i, nil
}
func (m *AzureVnetVoltstackClusterARType_ActiveNetworkPolicies) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.ActiveNetworkPolicies != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.ActiveNetworkPolicies.Size()))
		n58, err := m.ActiveNetworkPolicies.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n58
	}
	return i, nil
}
func (m *AzureVnetVoltstackClusterARType_NoForwardProxy) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.NoForwardProxy != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.NoForwardProxy.Size()))
		n59, err := m.NoForwardProxy.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n59
	}
	return i, nil
}
func (m *AzureVnetVoltstackClusterARType_ActiveForwardProxyPolicies) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.ActiveForwardProxyPolicies != nil {
		dAtA[i] = 0x42
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.ActiveForwardProxyPolicies.Size()))
		n60, err := m.ActiveForwardProxyPolicies.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n60
	}
	return i, nil
}
func (m *AzureVnetVoltstackClusterARType_NoOutsideStaticRoutes) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.NoOutsideStaticRoutes != nil {
		dAtA[i] = 0x52
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.NoOutsideStaticRoutes.Size()))
		n61, err := m.NoOutsideStaticRoutes.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n61
	}
	return i, nil
}
func (m *AzureVnetVoltstackClusterARType_OutsideStaticRoutes) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.OutsideStaticRoutes != nil {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.OutsideStaticRoutes.Size()))
		n62, err := m.OutsideStaticRoutes.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n62
	}
	return i, nil
}
func (m *AzureVnetVoltstackClusterARType_NoGlobalNetwork) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.NoGlobalNetwork != nil {
		dAtA[i] = 0x6a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.NoGlobalNetwork.Size()))
		n63, err := m.NoGlobalNetwork.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n63
	}
	return i, nil
}
func (m *AzureVnetVoltstackClusterARType_GlobalNetworkList) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.GlobalNetworkList != nil {
		dAtA[i] = 0x72
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.GlobalNetworkList.Size()))
		n64, err := m.GlobalNetworkList.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n64
	}
	return i, nil
}
func (m *AzureVnetVoltstackClusterARType_ForwardProxyAllowAll) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.ForwardProxyAllowAll != nil {
		dAtA[i] = 0x7a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.ForwardProxyAllowAll.Size()))
		n65, err := m.ForwardProxyAllowAll.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n65
	}
	return i, nil
}
func (m *AzureVnetVoltstackClusterARType_NoK8SCluster) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.NoK8SCluster != nil {
		dAtA[i] = 0xda
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.NoK8SCluster.Size()))
		n66, err := m.NoK8SCluster.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n66
	}
	return i, nil
}
func (m *AzureVnetVoltstackClusterARType_K8SCluster) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.K8SCluster != nil {
		dAtA[i] = 0xe2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.K8SCluster.Size()))
		n67, err := m.K8SCluster.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n67
	}
	return i, nil
}
func (m *AzureVnetIngressGwReplaceType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AzureVnetIngressGwReplaceType) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *AzureVnetIngressEgressGwReplaceType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AzureVnetIngressEgressGwReplaceType) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.NetworkPolicyChoice != nil {
		nn68, err := m.NetworkPolicyChoice.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn68
	}
	if m.ForwardProxyChoice != nil {
		nn69, err := m.ForwardProxyChoice.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn69
	}
	if m.InsideStaticRouteChoice != nil {
		nn70, err := m.InsideStaticRouteChoice.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn70
	}
	if m.OutsideStaticRouteChoice != nil {
		nn71, err := m.OutsideStaticRouteChoice.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn71
	}
	if m.GlobalNetworkChoice != nil {
		nn72, err := m.GlobalNetworkChoice.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn72
	}
	return i, nil
}

func (m *AzureVnetIngressEgressGwReplaceType_NoNetworkPolicy) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.NoNetworkPolicy != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.NoNetworkPolicy.Size()))
		n73, err := m.NoNetworkPolicy.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n73
	}
	return i, nil
}
func (m *AzureVnetIngressEgressGwReplaceType_NoForwardProxy) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.NoForwardProxy != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.NoForwardProxy.Size()))
		n74, err := m.NoForwardProxy.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n74
	}
	return i, nil
}
func (m *AzureVnetIngressEgressGwReplaceType_ActiveForwardProxyPolicies) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.ActiveForwardProxyPolicies != nil {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.ActiveForwardProxyPolicies.Size()))
		n75, err := m.ActiveForwardProxyPolicies.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n75
	}
	return i, nil
}
func (m *AzureVnetIngressEgressGwReplaceType_ActiveNetworkPolicies) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.ActiveNetworkPolicies != nil {
		dAtA[i] = 0x52
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.ActiveNetworkPolicies.Size()))
		n76, err := m.ActiveNetworkPolicies.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n76
	}
	return i, nil
}
func (m *AzureVnetIngressEgressGwReplaceType_NoInsideStaticRoutes) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.NoInsideStaticRoutes != nil {
		dAtA[i] = 0x62
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.NoInsideStaticRoutes.Size()))
		n77, err := m.NoInsideStaticRoutes.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n77
	}
	return i, nil
}
func (m *AzureVnetIngressEgressGwReplaceType_InsideStaticRoutes) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.InsideStaticRoutes != nil {
		dAtA[i] = 0x6a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.InsideStaticRoutes.Size()))
		n78, err := m.InsideStaticRoutes.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n78
	}
	return i, nil
}
func (m *AzureVnetIngressEgressGwReplaceType_NoOutsideStaticRoutes) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.NoOutsideStaticRoutes != nil {
		dAtA[i] = 0x7a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.NoOutsideStaticRoutes.Size()))
		n79, err := m.NoOutsideStaticRoutes.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n79
	}
	return i, nil
}
func (m *AzureVnetIngressEgressGwReplaceType_OutsideStaticRoutes) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.OutsideStaticRoutes != nil {
		dAtA[i] = 0x82
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.OutsideStaticRoutes.Size()))
		n80, err := m.OutsideStaticRoutes.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n80
	}
	return i, nil
}
func (m *AzureVnetIngressEgressGwReplaceType_NoGlobalNetwork) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.NoGlobalNetwork != nil {
		dAtA[i] = 0x92
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.NoGlobalNetwork.Size()))
		n81, err := m.NoGlobalNetwork.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n81
	}
	return i, nil
}
func (m *AzureVnetIngressEgressGwReplaceType_GlobalNetworkList) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.GlobalNetworkList != nil {
		dAtA[i] = 0x9a
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.GlobalNetworkList.Size()))
		n82, err := m.GlobalNetworkList.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n82
	}
	return i, nil
}
func (m *AzureVnetIngressEgressGwReplaceType_ForwardProxyAllowAll) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.ForwardProxyAllowAll != nil {
		dAtA[i] = 0xa2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.ForwardProxyAllowAll.Size()))
		n83, err := m.ForwardProxyAllowAll.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n83
	}
	return i, nil
}
func (m *AzureVnetVoltstackClusterReplaceType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AzureVnetVoltstackClusterReplaceType) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.NetworkPolicyChoice != nil {
		nn84, err := m.NetworkPolicyChoice.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn84
	}
	if m.ForwardProxyChoice != nil {
		nn85, err := m.ForwardProxyChoice.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn85
	}
	if m.OutsideStaticRouteChoice != nil {
		nn86, err := m.OutsideStaticRouteChoice.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn86
	}
	if m.GlobalNetworkChoice != nil {
		nn87, err := m.GlobalNetworkChoice.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn87
	}
	return i, nil
}

func (m *AzureVnetVoltstackClusterReplaceType_NoNetworkPolicy) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.NoNetworkPolicy != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.NoNetworkPolicy.Size()))
		n88, err := m.NoNetworkPolicy.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n88
	}
	return i, nil
}
func (m *AzureVnetVoltstackClusterReplaceType_ActiveNetworkPolicies) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.ActiveNetworkPolicies != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.ActiveNetworkPolicies.Size()))
		n89, err := m.ActiveNetworkPolicies.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n89
	}
	return i, nil
}
func (m *AzureVnetVoltstackClusterReplaceType_NoForwardProxy) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.NoForwardProxy != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.NoForwardProxy.Size()))
		n90, err := m.NoForwardProxy.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n90
	}
	return i, nil
}
func (m *AzureVnetVoltstackClusterReplaceType_ActiveForwardProxyPolicies) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.ActiveForwardProxyPolicies != nil {
		dAtA[i] = 0x42
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.ActiveForwardProxyPolicies.Size()))
		n91, err := m.ActiveForwardProxyPolicies.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n91
	}
	return i, nil
}
func (m *AzureVnetVoltstackClusterReplaceType_NoOutsideStaticRoutes) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.NoOutsideStaticRoutes != nil {
		dAtA[i] = 0x52
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.NoOutsideStaticRoutes.Size()))
		n92, err := m.NoOutsideStaticRoutes.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n92
	}
	return i, nil
}
func (m *AzureVnetVoltstackClusterReplaceType_OutsideStaticRoutes) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.OutsideStaticRoutes != nil {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.OutsideStaticRoutes.Size()))
		n93, err := m.OutsideStaticRoutes.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n93
	}
	return i, nil
}
func (m *AzureVnetVoltstackClusterReplaceType_NoGlobalNetwork) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.NoGlobalNetwork != nil {
		dAtA[i] = 0x6a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.NoGlobalNetwork.Size()))
		n94, err := m.NoGlobalNetwork.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n94
	}
	return i, nil
}
func (m *AzureVnetVoltstackClusterReplaceType_GlobalNetworkList) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.GlobalNetworkList != nil {
		dAtA[i] = 0x72
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.GlobalNetworkList.Size()))
		n95, err := m.GlobalNetworkList.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n95
	}
	return i, nil
}
func (m *AzureVnetVoltstackClusterReplaceType_ForwardProxyAllowAll) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.ForwardProxyAllowAll != nil {
		dAtA[i] = 0x7a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.ForwardProxyAllowAll.Size()))
		n96, err := m.ForwardProxyAllowAll.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n96
	}
	return i, nil
}
func (m *GlobalSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GlobalSpecType) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ResourceGroup) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTypes(dAtA, i, uint64(len(m.ResourceGroup)))
		i += copy(dAtA[i:], m.ResourceGroup)
	}
	if m.RegionChoice != nil {
		nn97, err := m.RegionChoice.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn97
	}
	if m.Vnet != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.Vnet.Size()))
		n98, err := m.Vnet.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n98
	}
	if m.SiteType != nil {
		nn99, err := m.SiteType.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn99
	}
	if m.Deployment != nil {
		nn100, err := m.Deployment.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn100
	}
	if len(m.MachineType) > 0 {
		dAtA[i] = 0x52
		i++
		i = encodeVarintTypes(dAtA, i, uint64(len(m.MachineType)))
		i += copy(dAtA[i:], m.MachineType)
	}
	if len(m.VolterraSoftwareVersion) > 0 {
		dAtA[i] = 0x62
		i++
		i = encodeVarintTypes(dAtA, i, uint64(len(m.VolterraSoftwareVersion)))
		i += copy(dAtA[i:], m.VolterraSoftwareVersion)
	}
	if len(m.OperatingSystemVersion) > 0 {
		dAtA[i] = 0x6a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(len(m.OperatingSystemVersion)))
		i += copy(dAtA[i:], m.OperatingSystemVersion)
	}
	if len(m.SshKey) > 0 {
		dAtA[i] = 0x72
		i++
		i = encodeVarintTypes(dAtA, i, uint64(len(m.SshKey)))
		i += copy(dAtA[i:], m.SshKey)
	}
	if m.WorkerNodes != nil {
		nn101, err := m.WorkerNodes.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn101
	}
	if m.DiskSize != 0 {
		dAtA[i] = 0x80
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.DiskSize))
	}
	if len(m.Address) > 0 {
		dAtA[i] = 0x92
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Address)))
		i += copy(dAtA[i:], m.Address)
	}
	if m.Coordinates != nil {
		dAtA[i] = 0x9a
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.Coordinates.Size()))
		n102, err := m.Coordinates.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n102
	}
	if m.LogsReceiverChoice != nil {
		nn103, err := m.LogsReceiverChoice.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn103
	}
	if m.Sw != nil {
		dAtA[i] = 0xba
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.Sw.Size()))
		n104, err := m.Sw.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n104
	}
	if m.Os != nil {
		dAtA[i] = 0xc2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.Os.Size()))
		n105, err := m.Os.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n105
	}
	if len(m.VipParamsPerAz) > 0 {
		for _, msg := range m.VipParamsPerAz {
			dAtA[i] = 0xca
			i++
			dAtA[i] = 0x1
			i++
			i = encodeVarintTypes(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.TfParams != nil {
		dAtA[i] = 0xba
		i++
		dAtA[i] = 0x3e
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.TfParams.Size()))
		n106, err := m.TfParams.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n106
	}
	if m.ViewInternal != nil {
		dAtA[i] = 0xc2
		i++
		dAtA[i] = 0x3e
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.ViewInternal.Size()))
		n107, err := m.ViewInternal.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n107
	}
	return i, nil
}

func (m *GlobalSpecType_AzureRegion) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x12
	i++
	i = encodeVarintTypes(dAtA, i, uint64(len(m.AzureRegion)))
	i += copy(dAtA[i:], m.AzureRegion)
	return i, nil
}
func (m *GlobalSpecType_IngressGw) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.IngressGw != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.IngressGw.Size()))
		n108, err := m.IngressGw.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n108
	}
	return i, nil
}
func (m *GlobalSpecType_IngressEgressGw) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.IngressEgressGw != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.IngressEgressGw.Size()))
		n109, err := m.IngressEgressGw.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n109
	}
	return i, nil
}
func (m *GlobalSpecType_AzureCred) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.AzureCred != nil {
		dAtA[i] = 0x42
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.AzureCred.Size()))
		n110, err := m.AzureCred.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n110
	}
	return i, nil
}
func (m *GlobalSpecType_Assisted) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Assisted != nil {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.Assisted.Size()))
		n111, err := m.Assisted.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n111
	}
	return i, nil
}
func (m *GlobalSpecType_NodesPerAz) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x78
	i++
	i = encodeVarintTypes(dAtA, i, uint64(m.NodesPerAz))
	return i, nil
}
func (m *GlobalSpecType_VoltstackCluster) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.VoltstackCluster != nil {
		dAtA[i] = 0x8a
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.VoltstackCluster.Size()))
		n112, err := m.VoltstackCluster.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n112
	}
	return i, nil
}
func (m *GlobalSpecType_LogsStreamingDisabled) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.LogsStreamingDisabled != nil {
		dAtA[i] = 0xaa
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.LogsStreamingDisabled.Size()))
		n113, err := m.LogsStreamingDisabled.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n113
	}
	return i, nil
}
func (m *GlobalSpecType_LogReceiver) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.LogReceiver != nil {
		dAtA[i] = 0xb2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.LogReceiver.Size()))
		n114, err := m.LogReceiver.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n114
	}
	return i, nil
}
func (m *GlobalSpecType_TotalNodes) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0xd8
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintTypes(dAtA, i, uint64(m.TotalNodes))
	return i, nil
}
func (m *GlobalSpecType_NoWorkerNodes) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.NoWorkerNodes != nil {
		dAtA[i] = 0xe2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.NoWorkerNodes.Size()))
		n115, err := m.NoWorkerNodes.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n115
	}
	return i, nil
}
func (m *GlobalSpecType_AlternateRegion) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0xfa
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintTypes(dAtA, i, uint64(len(m.AlternateRegion)))
	i += copy(dAtA[i:], m.AlternateRegion)
	return i, nil
}
func (m *GlobalSpecType_IngressGwAr) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.IngressGwAr != nil {
		dAtA[i] = 0x82
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.IngressGwAr.Size()))
		n116, err := m.IngressGwAr.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n116
	}
	return i, nil
}
func (m *GlobalSpecType_IngressEgressGwAr) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.IngressEgressGwAr != nil {
		dAtA[i] = 0x8a
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.IngressEgressGwAr.Size()))
		n117, err := m.IngressEgressGwAr.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n117
	}
	return i, nil
}
func (m *GlobalSpecType_VoltstackClusterAr) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.VoltstackClusterAr != nil {
		dAtA[i] = 0x92
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.VoltstackClusterAr.Size()))
		n118, err := m.VoltstackClusterAr.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n118
	}
	return i, nil
}
func (m *CreateSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateSpecType) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ResourceGroup) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTypes(dAtA, i, uint64(len(m.ResourceGroup)))
		i += copy(dAtA[i:], m.ResourceGroup)
	}
	if m.RegionChoice != nil {
		nn119, err := m.RegionChoice.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn119
	}
	if m.Vnet != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.Vnet.Size()))
		n120, err := m.Vnet.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n120
	}
	if m.SiteType != nil {
		nn121, err := m.SiteType.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn121
	}
	if m.Deployment != nil {
		nn122, err := m.Deployment.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn122
	}
	if len(m.MachineType) > 0 {
		dAtA[i] = 0x52
		i++
		i = encodeVarintTypes(dAtA, i, uint64(len(m.MachineType)))
		i += copy(dAtA[i:], m.MachineType)
	}
	if len(m.SshKey) > 0 {
		dAtA[i] = 0x72
		i++
		i = encodeVarintTypes(dAtA, i, uint64(len(m.SshKey)))
		i += copy(dAtA[i:], m.SshKey)
	}
	if m.WorkerNodes != nil {
		nn123, err := m.WorkerNodes.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn123
	}
	if m.DiskSize != 0 {
		dAtA[i] = 0x80
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.DiskSize))
	}
	if len(m.Address) > 0 {
		dAtA[i] = 0x92
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Address)))
		i += copy(dAtA[i:], m.Address)
	}
	if m.Coordinates != nil {
		dAtA[i] = 0x9a
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.Coordinates.Size()))
		n124, err := m.Coordinates.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n124
	}
	if m.LogsReceiverChoice != nil {
		nn125, err := m.LogsReceiverChoice.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn125
	}
	if m.Sw != nil {
		dAtA[i] = 0xba
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.Sw.Size()))
		n126, err := m.Sw.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n126
	}
	if m.Os != nil {
		dAtA[i] = 0xc2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.Os.Size()))
		n127, err := m.Os.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n127
	}
	return i, nil
}

func (m *CreateSpecType_AzureRegion) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x12
	i++
	i = encodeVarintTypes(dAtA, i, uint64(len(m.AzureRegion)))
	i += copy(dAtA[i:], m.AzureRegion)
	return i, nil
}
func (m *CreateSpecType_IngressGw) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.IngressGw != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.IngressGw.Size()))
		n128, err := m.IngressGw.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n128
	}
	return i, nil
}
func (m *CreateSpecType_IngressEgressGw) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.IngressEgressGw != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.IngressEgressGw.Size()))
		n129, err := m.IngressEgressGw.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n129
	}
	return i, nil
}
func (m *CreateSpecType_AzureCred) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.AzureCred != nil {
		dAtA[i] = 0x42
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.AzureCred.Size()))
		n130, err := m.AzureCred.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n130
	}
	return i, nil
}
func (m *CreateSpecType_Assisted) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Assisted != nil {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.Assisted.Size()))
		n131, err := m.Assisted.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n131
	}
	return i, nil
}
func (m *CreateSpecType_NodesPerAz) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x78
	i++
	i = encodeVarintTypes(dAtA, i, uint64(m.NodesPerAz))
	return i, nil
}
func (m *CreateSpecType_VoltstackCluster) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.VoltstackCluster != nil {
		dAtA[i] = 0x8a
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.VoltstackCluster.Size()))
		n132, err := m.VoltstackCluster.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n132
	}
	return i, nil
}
func (m *CreateSpecType_LogsStreamingDisabled) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.LogsStreamingDisabled != nil {
		dAtA[i] = 0xaa
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.LogsStreamingDisabled.Size()))
		n133, err := m.LogsStreamingDisabled.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n133
	}
	return i, nil
}
func (m *CreateSpecType_LogReceiver) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.LogReceiver != nil {
		dAtA[i] = 0xb2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.LogReceiver.Size()))
		n134, err := m.LogReceiver.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n134
	}
	return i, nil
}
func (m *CreateSpecType_TotalNodes) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0xd8
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintTypes(dAtA, i, uint64(m.TotalNodes))
	return i, nil
}
func (m *CreateSpecType_NoWorkerNodes) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.NoWorkerNodes != nil {
		dAtA[i] = 0xe2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.NoWorkerNodes.Size()))
		n135, err := m.NoWorkerNodes.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n135
	}
	return i, nil
}
func (m *CreateSpecType_AlternateRegion) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0xfa
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintTypes(dAtA, i, uint64(len(m.AlternateRegion)))
	i += copy(dAtA[i:], m.AlternateRegion)
	return i, nil
}
func (m *CreateSpecType_IngressGwAr) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.IngressGwAr != nil {
		dAtA[i] = 0x82
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.IngressGwAr.Size()))
		n136, err := m.IngressGwAr.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n136
	}
	return i, nil
}
func (m *CreateSpecType_IngressEgressGwAr) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.IngressEgressGwAr != nil {
		dAtA[i] = 0x8a
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.IngressEgressGwAr.Size()))
		n137, err := m.IngressEgressGwAr.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n137
	}
	return i, nil
}
func (m *CreateSpecType_VoltstackClusterAr) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.VoltstackClusterAr != nil {
		dAtA[i] = 0x92
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.VoltstackClusterAr.Size()))
		n138, err := m.VoltstackClusterAr.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n138
	}
	return i, nil
}
func (m *ReplaceSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplaceSpecType) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.SiteType != nil {
		nn139, err := m.SiteType.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn139
	}
	if m.WorkerNodes != nil {
		nn140, err := m.WorkerNodes.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn140
	}
	if len(m.Address) > 0 {
		dAtA[i] = 0x92
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Address)))
		i += copy(dAtA[i:], m.Address)
	}
	if m.Coordinates != nil {
		dAtA[i] = 0x9a
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.Coordinates.Size()))
		n141, err := m.Coordinates.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n141
	}
	if m.LogsReceiverChoice != nil {
		nn142, err := m.LogsReceiverChoice.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn142
	}
	return i, nil
}

func (m *ReplaceSpecType_IngressGw) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.IngressGw != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.IngressGw.Size()))
		n143, err := m.IngressGw.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n143
	}
	return i, nil
}
func (m *ReplaceSpecType_IngressEgressGw) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.IngressEgressGw != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.IngressEgressGw.Size()))
		n144, err := m.IngressEgressGw.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n144
	}
	return i, nil
}
func (m *ReplaceSpecType_NodesPerAz) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x78
	i++
	i = encodeVarintTypes(dAtA, i, uint64(m.NodesPerAz))
	return i, nil
}
func (m *ReplaceSpecType_VoltstackCluster) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.VoltstackCluster != nil {
		dAtA[i] = 0x8a
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.VoltstackCluster.Size()))
		n145, err := m.VoltstackCluster.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n145
	}
	return i, nil
}
func (m *ReplaceSpecType_LogsStreamingDisabled) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.LogsStreamingDisabled != nil {
		dAtA[i] = 0xaa
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.LogsStreamingDisabled.Size()))
		n146, err := m.LogsStreamingDisabled.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n146
	}
	return i, nil
}
func (m *ReplaceSpecType_LogReceiver) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.LogReceiver != nil {
		dAtA[i] = 0xb2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.LogReceiver.Size()))
		n147, err := m.LogReceiver.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n147
	}
	return i, nil
}
func (m *ReplaceSpecType_TotalNodes) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0xd8
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintTypes(dAtA, i, uint64(m.TotalNodes))
	return i, nil
}
func (m *ReplaceSpecType_NoWorkerNodes) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.NoWorkerNodes != nil {
		dAtA[i] = 0xe2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.NoWorkerNodes.Size()))
		n148, err := m.NoWorkerNodes.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n148
	}
	return i, nil
}
func (m *ReplaceSpecType_IngressGwAr) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.IngressGwAr != nil {
		dAtA[i] = 0x82
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.IngressGwAr.Size()))
		n149, err := m.IngressGwAr.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n149
	}
	return i, nil
}
func (m *ReplaceSpecType_IngressEgressGwAr) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.IngressEgressGwAr != nil {
		dAtA[i] = 0x8a
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.IngressEgressGwAr.Size()))
		n150, err := m.IngressEgressGwAr.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n150
	}
	return i, nil
}
func (m *ReplaceSpecType_VoltstackClusterAr) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.VoltstackClusterAr != nil {
		dAtA[i] = 0x92
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.VoltstackClusterAr.Size()))
		n151, err := m.VoltstackClusterAr.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n151
	}
	return i, nil
}
func (m *GetSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetSpecType) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ResourceGroup) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTypes(dAtA, i, uint64(len(m.ResourceGroup)))
		i += copy(dAtA[i:], m.ResourceGroup)
	}
	if m.RegionChoice != nil {
		nn152, err := m.RegionChoice.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn152
	}
	if m.Vnet != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.Vnet.Size()))
		n153, err := m.Vnet.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n153
	}
	if m.SiteType != nil {
		nn154, err := m.SiteType.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn154
	}
	if m.Deployment != nil {
		nn155, err := m.Deployment.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn155
	}
	if len(m.MachineType) > 0 {
		dAtA[i] = 0x52
		i++
		i = encodeVarintTypes(dAtA, i, uint64(len(m.MachineType)))
		i += copy(dAtA[i:], m.MachineType)
	}
	if len(m.VolterraSoftwareVersion) > 0 {
		dAtA[i] = 0x62
		i++
		i = encodeVarintTypes(dAtA, i, uint64(len(m.VolterraSoftwareVersion)))
		i += copy(dAtA[i:], m.VolterraSoftwareVersion)
	}
	if len(m.OperatingSystemVersion) > 0 {
		dAtA[i] = 0x6a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(len(m.OperatingSystemVersion)))
		i += copy(dAtA[i:], m.OperatingSystemVersion)
	}
	if len(m.SshKey) > 0 {
		dAtA[i] = 0x72
		i++
		i = encodeVarintTypes(dAtA, i, uint64(len(m.SshKey)))
		i += copy(dAtA[i:], m.SshKey)
	}
	if m.WorkerNodes != nil {
		nn156, err := m.WorkerNodes.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn156
	}
	if m.DiskSize != 0 {
		dAtA[i] = 0x80
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.DiskSize))
	}
	if len(m.Address) > 0 {
		dAtA[i] = 0x92
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Address)))
		i += copy(dAtA[i:], m.Address)
	}
	if m.Coordinates != nil {
		dAtA[i] = 0x9a
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.Coordinates.Size()))
		n157, err := m.Coordinates.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n157
	}
	if m.LogsReceiverChoice != nil {
		nn158, err := m.LogsReceiverChoice.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn158
	}
	if m.SiteState != 0 {
		dAtA[i] = 0xb8
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.SiteState))
	}
	if len(m.VipParamsPerAz) > 0 {
		for _, msg := range m.VipParamsPerAz {
			dAtA[i] = 0xca
			i++
			dAtA[i] = 0x1
			i++
			i = encodeVarintTypes(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *GetSpecType_AzureRegion) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x12
	i++
	i = encodeVarintTypes(dAtA, i, uint64(len(m.AzureRegion)))
	i += copy(dAtA[i:], m.AzureRegion)
	return i, nil
}
func (m *GetSpecType_IngressGw) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.IngressGw != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.IngressGw.Size()))
		n159, err := m.IngressGw.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n159
	}
	return i, nil
}
func (m *GetSpecType_IngressEgressGw) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.IngressEgressGw != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.IngressEgressGw.Size()))
		n160, err := m.IngressEgressGw.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n160
	}
	return i, nil
}
func (m *GetSpecType_AzureCred) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.AzureCred != nil {
		dAtA[i] = 0x42
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.AzureCred.Size()))
		n161, err := m.AzureCred.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n161
	}
	return i, nil
}
func (m *GetSpecType_Assisted) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Assisted != nil {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.Assisted.Size()))
		n162, err := m.Assisted.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n162
	}
	return i, nil
}
func (m *GetSpecType_NodesPerAz) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x78
	i++
	i = encodeVarintTypes(dAtA, i, uint64(m.NodesPerAz))
	return i, nil
}
func (m *GetSpecType_VoltstackCluster) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.VoltstackCluster != nil {
		dAtA[i] = 0x8a
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.VoltstackCluster.Size()))
		n163, err := m.VoltstackCluster.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n163
	}
	return i, nil
}
func (m *GetSpecType_LogsStreamingDisabled) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.LogsStreamingDisabled != nil {
		dAtA[i] = 0xaa
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.LogsStreamingDisabled.Size()))
		n164, err := m.LogsStreamingDisabled.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n164
	}
	return i, nil
}
func (m *GetSpecType_LogReceiver) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.LogReceiver != nil {
		dAtA[i] = 0xb2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.LogReceiver.Size()))
		n165, err := m.LogReceiver.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n165
	}
	return i, nil
}
func (m *GetSpecType_TotalNodes) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0xd8
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintTypes(dAtA, i, uint64(m.TotalNodes))
	return i, nil
}
func (m *GetSpecType_NoWorkerNodes) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.NoWorkerNodes != nil {
		dAtA[i] = 0xe2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.NoWorkerNodes.Size()))
		n166, err := m.NoWorkerNodes.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n166
	}
	return i, nil
}
func (m *GetSpecType_AlternateRegion) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0xfa
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintTypes(dAtA, i, uint64(len(m.AlternateRegion)))
	i += copy(dAtA[i:], m.AlternateRegion)
	return i, nil
}
func (m *GetSpecType_IngressGwAr) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.IngressGwAr != nil {
		dAtA[i] = 0x82
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.IngressGwAr.Size()))
		n167, err := m.IngressGwAr.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n167
	}
	return i, nil
}
func (m *GetSpecType_IngressEgressGwAr) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.IngressEgressGwAr != nil {
		dAtA[i] = 0x8a
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.IngressEgressGwAr.Size()))
		n168, err := m.IngressEgressGwAr.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n168
	}
	return i, nil
}
func (m *GetSpecType_VoltstackClusterAr) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.VoltstackClusterAr != nil {
		dAtA[i] = 0x92
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.VoltstackClusterAr.Size()))
		n169, err := m.VoltstackClusterAr.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n169
	}
	return i, nil
}
func encodeVarintTypes(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *AzureVnetIngressGwType) Size() (n int) {
	var l int
	_ = l
	if len(m.AzNodes) > 0 {
		for _, e := range m.AzNodes {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	l = len(m.AzureCertifiedHw)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *AzureVnetIngressGwARType) Size() (n int) {
	var l int
	_ = l
	if m.Node != nil {
		l = m.Node.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.AzureCertifiedHw)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *AzureVnetIngressEgressGwType) Size() (n int) {
	var l int
	_ = l
	if len(m.AzNodes) > 0 {
		for _, e := range m.AzNodes {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if m.NetworkPolicyChoice != nil {
		n += m.NetworkPolicyChoice.Size()
	}
	if m.ForwardProxyChoice != nil {
		n += m.ForwardProxyChoice.Size()
	}
	l = len(m.AzureCertifiedHw)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.InsideStaticRouteChoice != nil {
		n += m.InsideStaticRouteChoice.Size()
	}
	if m.OutsideStaticRouteChoice != nil {
		n += m.OutsideStaticRouteChoice.Size()
	}
	if m.GlobalNetworkChoice != nil {
		n += m.GlobalNetworkChoice.Size()
	}
	return n
}

func (m *AzureVnetIngressEgressGwType_NoNetworkPolicy) Size() (n int) {
	var l int
	_ = l
	if m.NoNetworkPolicy != nil {
		l = m.NoNetworkPolicy.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *AzureVnetIngressEgressGwType_NoForwardProxy) Size() (n int) {
	var l int
	_ = l
	if m.NoForwardProxy != nil {
		l = m.NoForwardProxy.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *AzureVnetIngressEgressGwType_ActiveForwardProxyPolicies) Size() (n int) {
	var l int
	_ = l
	if m.ActiveForwardProxyPolicies != nil {
		l = m.ActiveForwardProxyPolicies.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *AzureVnetIngressEgressGwType_ActiveNetworkPolicies) Size() (n int) {
	var l int
	_ = l
	if m.ActiveNetworkPolicies != nil {
		l = m.ActiveNetworkPolicies.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *AzureVnetIngressEgressGwType_NoInsideStaticRoutes) Size() (n int) {
	var l int
	_ = l
	if m.NoInsideStaticRoutes != nil {
		l = m.NoInsideStaticRoutes.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *AzureVnetIngressEgressGwType_InsideStaticRoutes) Size() (n int) {
	var l int
	_ = l
	if m.InsideStaticRoutes != nil {
		l = m.InsideStaticRoutes.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *AzureVnetIngressEgressGwType_NoOutsideStaticRoutes) Size() (n int) {
	var l int
	_ = l
	if m.NoOutsideStaticRoutes != nil {
		l = m.NoOutsideStaticRoutes.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *AzureVnetIngressEgressGwType_OutsideStaticRoutes) Size() (n int) {
	var l int
	_ = l
	if m.OutsideStaticRoutes != nil {
		l = m.OutsideStaticRoutes.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *AzureVnetIngressEgressGwType_NoGlobalNetwork) Size() (n int) {
	var l int
	_ = l
	if m.NoGlobalNetwork != nil {
		l = m.NoGlobalNetwork.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *AzureVnetIngressEgressGwType_GlobalNetworkList) Size() (n int) {
	var l int
	_ = l
	if m.GlobalNetworkList != nil {
		l = m.GlobalNetworkList.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *AzureVnetIngressEgressGwType_ForwardProxyAllowAll) Size() (n int) {
	var l int
	_ = l
	if m.ForwardProxyAllowAll != nil {
		l = m.ForwardProxyAllowAll.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *AzureVnetIngressEgressGwARType) Size() (n int) {
	var l int
	_ = l
	if m.Node != nil {
		l = m.Node.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.NetworkPolicyChoice != nil {
		n += m.NetworkPolicyChoice.Size()
	}
	if m.ForwardProxyChoice != nil {
		n += m.ForwardProxyChoice.Size()
	}
	l = len(m.AzureCertifiedHw)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.InsideStaticRouteChoice != nil {
		n += m.InsideStaticRouteChoice.Size()
	}
	if m.OutsideStaticRouteChoice != nil {
		n += m.OutsideStaticRouteChoice.Size()
	}
	if m.GlobalNetworkChoice != nil {
		n += m.GlobalNetworkChoice.Size()
	}
	return n
}

func (m *AzureVnetIngressEgressGwARType_NoNetworkPolicy) Size() (n int) {
	var l int
	_ = l
	if m.NoNetworkPolicy != nil {
		l = m.NoNetworkPolicy.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *AzureVnetIngressEgressGwARType_NoForwardProxy) Size() (n int) {
	var l int
	_ = l
	if m.NoForwardProxy != nil {
		l = m.NoForwardProxy.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *AzureVnetIngressEgressGwARType_ActiveForwardProxyPolicies) Size() (n int) {
	var l int
	_ = l
	if m.ActiveForwardProxyPolicies != nil {
		l = m.ActiveForwardProxyPolicies.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *AzureVnetIngressEgressGwARType_ActiveNetworkPolicies) Size() (n int) {
	var l int
	_ = l
	if m.ActiveNetworkPolicies != nil {
		l = m.ActiveNetworkPolicies.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *AzureVnetIngressEgressGwARType_NoInsideStaticRoutes) Size() (n int) {
	var l int
	_ = l
	if m.NoInsideStaticRoutes != nil {
		l = m.NoInsideStaticRoutes.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *AzureVnetIngressEgressGwARType_InsideStaticRoutes) Size() (n int) {
	var l int
	_ = l
	if m.InsideStaticRoutes != nil {
		l = m.InsideStaticRoutes.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *AzureVnetIngressEgressGwARType_NoOutsideStaticRoutes) Size() (n int) {
	var l int
	_ = l
	if m.NoOutsideStaticRoutes != nil {
		l = m.NoOutsideStaticRoutes.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *AzureVnetIngressEgressGwARType_OutsideStaticRoutes) Size() (n int) {
	var l int
	_ = l
	if m.OutsideStaticRoutes != nil {
		l = m.OutsideStaticRoutes.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *AzureVnetIngressEgressGwARType_NoGlobalNetwork) Size() (n int) {
	var l int
	_ = l
	if m.NoGlobalNetwork != nil {
		l = m.NoGlobalNetwork.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *AzureVnetIngressEgressGwARType_GlobalNetworkList) Size() (n int) {
	var l int
	_ = l
	if m.GlobalNetworkList != nil {
		l = m.GlobalNetworkList.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *AzureVnetIngressEgressGwARType_ForwardProxyAllowAll) Size() (n int) {
	var l int
	_ = l
	if m.ForwardProxyAllowAll != nil {
		l = m.ForwardProxyAllowAll.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *AzureVnetVoltstackClusterType) Size() (n int) {
	var l int
	_ = l
	l = len(m.AzureCertifiedHw)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if len(m.AzNodes) > 0 {
		for _, e := range m.AzNodes {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if m.NetworkPolicyChoice != nil {
		n += m.NetworkPolicyChoice.Size()
	}
	if m.ForwardProxyChoice != nil {
		n += m.ForwardProxyChoice.Size()
	}
	if m.OutsideStaticRouteChoice != nil {
		n += m.OutsideStaticRouteChoice.Size()
	}
	if m.GlobalNetworkChoice != nil {
		n += m.GlobalNetworkChoice.Size()
	}
	if m.K8SClusterChoice != nil {
		n += m.K8SClusterChoice.Size()
	}
	return n
}

func (m *AzureVnetVoltstackClusterType_NoNetworkPolicy) Size() (n int) {
	var l int
	_ = l
	if m.NoNetworkPolicy != nil {
		l = m.NoNetworkPolicy.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *AzureVnetVoltstackClusterType_ActiveNetworkPolicies) Size() (n int) {
	var l int
	_ = l
	if m.ActiveNetworkPolicies != nil {
		l = m.ActiveNetworkPolicies.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *AzureVnetVoltstackClusterType_NoForwardProxy) Size() (n int) {
	var l int
	_ = l
	if m.NoForwardProxy != nil {
		l = m.NoForwardProxy.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *AzureVnetVoltstackClusterType_ActiveForwardProxyPolicies) Size() (n int) {
	var l int
	_ = l
	if m.ActiveForwardProxyPolicies != nil {
		l = m.ActiveForwardProxyPolicies.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *AzureVnetVoltstackClusterType_NoOutsideStaticRoutes) Size() (n int) {
	var l int
	_ = l
	if m.NoOutsideStaticRoutes != nil {
		l = m.NoOutsideStaticRoutes.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *AzureVnetVoltstackClusterType_OutsideStaticRoutes) Size() (n int) {
	var l int
	_ = l
	if m.OutsideStaticRoutes != nil {
		l = m.OutsideStaticRoutes.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *AzureVnetVoltstackClusterType_NoGlobalNetwork) Size() (n int) {
	var l int
	_ = l
	if m.NoGlobalNetwork != nil {
		l = m.NoGlobalNetwork.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *AzureVnetVoltstackClusterType_GlobalNetworkList) Size() (n int) {
	var l int
	_ = l
	if m.GlobalNetworkList != nil {
		l = m.GlobalNetworkList.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *AzureVnetVoltstackClusterType_ForwardProxyAllowAll) Size() (n int) {
	var l int
	_ = l
	if m.ForwardProxyAllowAll != nil {
		l = m.ForwardProxyAllowAll.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *AzureVnetVoltstackClusterType_NoK8SCluster) Size() (n int) {
	var l int
	_ = l
	if m.NoK8SCluster != nil {
		l = m.NoK8SCluster.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *AzureVnetVoltstackClusterType_K8SCluster) Size() (n int) {
	var l int
	_ = l
	if m.K8SCluster != nil {
		l = m.K8SCluster.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *AzureVnetVoltstackClusterARType) Size() (n int) {
	var l int
	_ = l
	l = len(m.AzureCertifiedHw)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.Node != nil {
		l = m.Node.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.NetworkPolicyChoice != nil {
		n += m.NetworkPolicyChoice.Size()
	}
	if m.ForwardProxyChoice != nil {
		n += m.ForwardProxyChoice.Size()
	}
	if m.OutsideStaticRouteChoice != nil {
		n += m.OutsideStaticRouteChoice.Size()
	}
	if m.GlobalNetworkChoice != nil {
		n += m.GlobalNetworkChoice.Size()
	}
	if m.K8SClusterChoice != nil {
		n += m.K8SClusterChoice.Size()
	}
	return n
}

func (m *AzureVnetVoltstackClusterARType_NoNetworkPolicy) Size() (n int) {
	var l int
	_ = l
	if m.NoNetworkPolicy != nil {
		l = m.NoNetworkPolicy.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *AzureVnetVoltstackClusterARType_ActiveNetworkPolicies) Size() (n int) {
	var l int
	_ = l
	if m.ActiveNetworkPolicies != nil {
		l = m.ActiveNetworkPolicies.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *AzureVnetVoltstackClusterARType_NoForwardProxy) Size() (n int) {
	var l int
	_ = l
	if m.NoForwardProxy != nil {
		l = m.NoForwardProxy.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *AzureVnetVoltstackClusterARType_ActiveForwardProxyPolicies) Size() (n int) {
	var l int
	_ = l
	if m.ActiveForwardProxyPolicies != nil {
		l = m.ActiveForwardProxyPolicies.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *AzureVnetVoltstackClusterARType_NoOutsideStaticRoutes) Size() (n int) {
	var l int
	_ = l
	if m.NoOutsideStaticRoutes != nil {
		l = m.NoOutsideStaticRoutes.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *AzureVnetVoltstackClusterARType_OutsideStaticRoutes) Size() (n int) {
	var l int
	_ = l
	if m.OutsideStaticRoutes != nil {
		l = m.OutsideStaticRoutes.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *AzureVnetVoltstackClusterARType_NoGlobalNetwork) Size() (n int) {
	var l int
	_ = l
	if m.NoGlobalNetwork != nil {
		l = m.NoGlobalNetwork.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *AzureVnetVoltstackClusterARType_GlobalNetworkList) Size() (n int) {
	var l int
	_ = l
	if m.GlobalNetworkList != nil {
		l = m.GlobalNetworkList.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *AzureVnetVoltstackClusterARType_ForwardProxyAllowAll) Size() (n int) {
	var l int
	_ = l
	if m.ForwardProxyAllowAll != nil {
		l = m.ForwardProxyAllowAll.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *AzureVnetVoltstackClusterARType_NoK8SCluster) Size() (n int) {
	var l int
	_ = l
	if m.NoK8SCluster != nil {
		l = m.NoK8SCluster.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *AzureVnetVoltstackClusterARType_K8SCluster) Size() (n int) {
	var l int
	_ = l
	if m.K8SCluster != nil {
		l = m.K8SCluster.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *AzureVnetIngressGwReplaceType) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *AzureVnetIngressEgressGwReplaceType) Size() (n int) {
	var l int
	_ = l
	if m.NetworkPolicyChoice != nil {
		n += m.NetworkPolicyChoice.Size()
	}
	if m.ForwardProxyChoice != nil {
		n += m.ForwardProxyChoice.Size()
	}
	if m.InsideStaticRouteChoice != nil {
		n += m.InsideStaticRouteChoice.Size()
	}
	if m.OutsideStaticRouteChoice != nil {
		n += m.OutsideStaticRouteChoice.Size()
	}
	if m.GlobalNetworkChoice != nil {
		n += m.GlobalNetworkChoice.Size()
	}
	return n
}

func (m *AzureVnetIngressEgressGwReplaceType_NoNetworkPolicy) Size() (n int) {
	var l int
	_ = l
	if m.NoNetworkPolicy != nil {
		l = m.NoNetworkPolicy.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *AzureVnetIngressEgressGwReplaceType_NoForwardProxy) Size() (n int) {
	var l int
	_ = l
	if m.NoForwardProxy != nil {
		l = m.NoForwardProxy.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *AzureVnetIngressEgressGwReplaceType_ActiveForwardProxyPolicies) Size() (n int) {
	var l int
	_ = l
	if m.ActiveForwardProxyPolicies != nil {
		l = m.ActiveForwardProxyPolicies.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *AzureVnetIngressEgressGwReplaceType_ActiveNetworkPolicies) Size() (n int) {
	var l int
	_ = l
	if m.ActiveNetworkPolicies != nil {
		l = m.ActiveNetworkPolicies.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *AzureVnetIngressEgressGwReplaceType_NoInsideStaticRoutes) Size() (n int) {
	var l int
	_ = l
	if m.NoInsideStaticRoutes != nil {
		l = m.NoInsideStaticRoutes.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *AzureVnetIngressEgressGwReplaceType_InsideStaticRoutes) Size() (n int) {
	var l int
	_ = l
	if m.InsideStaticRoutes != nil {
		l = m.InsideStaticRoutes.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *AzureVnetIngressEgressGwReplaceType_NoOutsideStaticRoutes) Size() (n int) {
	var l int
	_ = l
	if m.NoOutsideStaticRoutes != nil {
		l = m.NoOutsideStaticRoutes.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *AzureVnetIngressEgressGwReplaceType_OutsideStaticRoutes) Size() (n int) {
	var l int
	_ = l
	if m.OutsideStaticRoutes != nil {
		l = m.OutsideStaticRoutes.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *AzureVnetIngressEgressGwReplaceType_NoGlobalNetwork) Size() (n int) {
	var l int
	_ = l
	if m.NoGlobalNetwork != nil {
		l = m.NoGlobalNetwork.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *AzureVnetIngressEgressGwReplaceType_GlobalNetworkList) Size() (n int) {
	var l int
	_ = l
	if m.GlobalNetworkList != nil {
		l = m.GlobalNetworkList.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *AzureVnetIngressEgressGwReplaceType_ForwardProxyAllowAll) Size() (n int) {
	var l int
	_ = l
	if m.ForwardProxyAllowAll != nil {
		l = m.ForwardProxyAllowAll.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *AzureVnetVoltstackClusterReplaceType) Size() (n int) {
	var l int
	_ = l
	if m.NetworkPolicyChoice != nil {
		n += m.NetworkPolicyChoice.Size()
	}
	if m.ForwardProxyChoice != nil {
		n += m.ForwardProxyChoice.Size()
	}
	if m.OutsideStaticRouteChoice != nil {
		n += m.OutsideStaticRouteChoice.Size()
	}
	if m.GlobalNetworkChoice != nil {
		n += m.GlobalNetworkChoice.Size()
	}
	return n
}

func (m *AzureVnetVoltstackClusterReplaceType_NoNetworkPolicy) Size() (n int) {
	var l int
	_ = l
	if m.NoNetworkPolicy != nil {
		l = m.NoNetworkPolicy.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *AzureVnetVoltstackClusterReplaceType_ActiveNetworkPolicies) Size() (n int) {
	var l int
	_ = l
	if m.ActiveNetworkPolicies != nil {
		l = m.ActiveNetworkPolicies.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *AzureVnetVoltstackClusterReplaceType_NoForwardProxy) Size() (n int) {
	var l int
	_ = l
	if m.NoForwardProxy != nil {
		l = m.NoForwardProxy.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *AzureVnetVoltstackClusterReplaceType_ActiveForwardProxyPolicies) Size() (n int) {
	var l int
	_ = l
	if m.ActiveForwardProxyPolicies != nil {
		l = m.ActiveForwardProxyPolicies.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *AzureVnetVoltstackClusterReplaceType_NoOutsideStaticRoutes) Size() (n int) {
	var l int
	_ = l
	if m.NoOutsideStaticRoutes != nil {
		l = m.NoOutsideStaticRoutes.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *AzureVnetVoltstackClusterReplaceType_OutsideStaticRoutes) Size() (n int) {
	var l int
	_ = l
	if m.OutsideStaticRoutes != nil {
		l = m.OutsideStaticRoutes.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *AzureVnetVoltstackClusterReplaceType_NoGlobalNetwork) Size() (n int) {
	var l int
	_ = l
	if m.NoGlobalNetwork != nil {
		l = m.NoGlobalNetwork.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *AzureVnetVoltstackClusterReplaceType_GlobalNetworkList) Size() (n int) {
	var l int
	_ = l
	if m.GlobalNetworkList != nil {
		l = m.GlobalNetworkList.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *AzureVnetVoltstackClusterReplaceType_ForwardProxyAllowAll) Size() (n int) {
	var l int
	_ = l
	if m.ForwardProxyAllowAll != nil {
		l = m.ForwardProxyAllowAll.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType) Size() (n int) {
	var l int
	_ = l
	l = len(m.ResourceGroup)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.RegionChoice != nil {
		n += m.RegionChoice.Size()
	}
	if m.Vnet != nil {
		l = m.Vnet.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.SiteType != nil {
		n += m.SiteType.Size()
	}
	if m.Deployment != nil {
		n += m.Deployment.Size()
	}
	l = len(m.MachineType)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.VolterraSoftwareVersion)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.OperatingSystemVersion)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.SshKey)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.WorkerNodes != nil {
		n += m.WorkerNodes.Size()
	}
	if m.DiskSize != 0 {
		n += 2 + sovTypes(uint64(m.DiskSize))
	}
	l = len(m.Address)
	if l > 0 {
		n += 2 + l + sovTypes(uint64(l))
	}
	if m.Coordinates != nil {
		l = m.Coordinates.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	if m.LogsReceiverChoice != nil {
		n += m.LogsReceiverChoice.Size()
	}
	if m.Sw != nil {
		l = m.Sw.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	if m.Os != nil {
		l = m.Os.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	if len(m.VipParamsPerAz) > 0 {
		for _, e := range m.VipParamsPerAz {
			l = e.Size()
			n += 2 + l + sovTypes(uint64(l))
		}
	}
	if m.TfParams != nil {
		l = m.TfParams.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	if m.ViewInternal != nil {
		l = m.ViewInternal.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *GlobalSpecType_AzureRegion) Size() (n int) {
	var l int
	_ = l
	l = len(m.AzureRegion)
	n += 1 + l + sovTypes(uint64(l))
	return n
}
func (m *GlobalSpecType_IngressGw) Size() (n int) {
	var l int
	_ = l
	if m.IngressGw != nil {
		l = m.IngressGw.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_IngressEgressGw) Size() (n int) {
	var l int
	_ = l
	if m.IngressEgressGw != nil {
		l = m.IngressEgressGw.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_AzureCred) Size() (n int) {
	var l int
	_ = l
	if m.AzureCred != nil {
		l = m.AzureCred.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_Assisted) Size() (n int) {
	var l int
	_ = l
	if m.Assisted != nil {
		l = m.Assisted.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_NodesPerAz) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovTypes(uint64(m.NodesPerAz))
	return n
}
func (m *GlobalSpecType_VoltstackCluster) Size() (n int) {
	var l int
	_ = l
	if m.VoltstackCluster != nil {
		l = m.VoltstackCluster.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_LogsStreamingDisabled) Size() (n int) {
	var l int
	_ = l
	if m.LogsStreamingDisabled != nil {
		l = m.LogsStreamingDisabled.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_LogReceiver) Size() (n int) {
	var l int
	_ = l
	if m.LogReceiver != nil {
		l = m.LogReceiver.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_TotalNodes) Size() (n int) {
	var l int
	_ = l
	n += 2 + sovTypes(uint64(m.TotalNodes))
	return n
}
func (m *GlobalSpecType_NoWorkerNodes) Size() (n int) {
	var l int
	_ = l
	if m.NoWorkerNodes != nil {
		l = m.NoWorkerNodes.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_AlternateRegion) Size() (n int) {
	var l int
	_ = l
	l = len(m.AlternateRegion)
	n += 2 + l + sovTypes(uint64(l))
	return n
}
func (m *GlobalSpecType_IngressGwAr) Size() (n int) {
	var l int
	_ = l
	if m.IngressGwAr != nil {
		l = m.IngressGwAr.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_IngressEgressGwAr) Size() (n int) {
	var l int
	_ = l
	if m.IngressEgressGwAr != nil {
		l = m.IngressEgressGwAr.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_VoltstackClusterAr) Size() (n int) {
	var l int
	_ = l
	if m.VoltstackClusterAr != nil {
		l = m.VoltstackClusterAr.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType) Size() (n int) {
	var l int
	_ = l
	l = len(m.ResourceGroup)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.RegionChoice != nil {
		n += m.RegionChoice.Size()
	}
	if m.Vnet != nil {
		l = m.Vnet.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.SiteType != nil {
		n += m.SiteType.Size()
	}
	if m.Deployment != nil {
		n += m.Deployment.Size()
	}
	l = len(m.MachineType)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.SshKey)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.WorkerNodes != nil {
		n += m.WorkerNodes.Size()
	}
	if m.DiskSize != 0 {
		n += 2 + sovTypes(uint64(m.DiskSize))
	}
	l = len(m.Address)
	if l > 0 {
		n += 2 + l + sovTypes(uint64(l))
	}
	if m.Coordinates != nil {
		l = m.Coordinates.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	if m.LogsReceiverChoice != nil {
		n += m.LogsReceiverChoice.Size()
	}
	if m.Sw != nil {
		l = m.Sw.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	if m.Os != nil {
		l = m.Os.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *CreateSpecType_AzureRegion) Size() (n int) {
	var l int
	_ = l
	l = len(m.AzureRegion)
	n += 1 + l + sovTypes(uint64(l))
	return n
}
func (m *CreateSpecType_IngressGw) Size() (n int) {
	var l int
	_ = l
	if m.IngressGw != nil {
		l = m.IngressGw.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_IngressEgressGw) Size() (n int) {
	var l int
	_ = l
	if m.IngressEgressGw != nil {
		l = m.IngressEgressGw.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_AzureCred) Size() (n int) {
	var l int
	_ = l
	if m.AzureCred != nil {
		l = m.AzureCred.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_Assisted) Size() (n int) {
	var l int
	_ = l
	if m.Assisted != nil {
		l = m.Assisted.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_NodesPerAz) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovTypes(uint64(m.NodesPerAz))
	return n
}
func (m *CreateSpecType_VoltstackCluster) Size() (n int) {
	var l int
	_ = l
	if m.VoltstackCluster != nil {
		l = m.VoltstackCluster.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_LogsStreamingDisabled) Size() (n int) {
	var l int
	_ = l
	if m.LogsStreamingDisabled != nil {
		l = m.LogsStreamingDisabled.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_LogReceiver) Size() (n int) {
	var l int
	_ = l
	if m.LogReceiver != nil {
		l = m.LogReceiver.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_TotalNodes) Size() (n int) {
	var l int
	_ = l
	n += 2 + sovTypes(uint64(m.TotalNodes))
	return n
}
func (m *CreateSpecType_NoWorkerNodes) Size() (n int) {
	var l int
	_ = l
	if m.NoWorkerNodes != nil {
		l = m.NoWorkerNodes.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_AlternateRegion) Size() (n int) {
	var l int
	_ = l
	l = len(m.AlternateRegion)
	n += 2 + l + sovTypes(uint64(l))
	return n
}
func (m *CreateSpecType_IngressGwAr) Size() (n int) {
	var l int
	_ = l
	if m.IngressGwAr != nil {
		l = m.IngressGwAr.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_IngressEgressGwAr) Size() (n int) {
	var l int
	_ = l
	if m.IngressEgressGwAr != nil {
		l = m.IngressEgressGwAr.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_VoltstackClusterAr) Size() (n int) {
	var l int
	_ = l
	if m.VoltstackClusterAr != nil {
		l = m.VoltstackClusterAr.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType) Size() (n int) {
	var l int
	_ = l
	if m.SiteType != nil {
		n += m.SiteType.Size()
	}
	if m.WorkerNodes != nil {
		n += m.WorkerNodes.Size()
	}
	l = len(m.Address)
	if l > 0 {
		n += 2 + l + sovTypes(uint64(l))
	}
	if m.Coordinates != nil {
		l = m.Coordinates.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	if m.LogsReceiverChoice != nil {
		n += m.LogsReceiverChoice.Size()
	}
	return n
}

func (m *ReplaceSpecType_IngressGw) Size() (n int) {
	var l int
	_ = l
	if m.IngressGw != nil {
		l = m.IngressGw.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_IngressEgressGw) Size() (n int) {
	var l int
	_ = l
	if m.IngressEgressGw != nil {
		l = m.IngressEgressGw.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_NodesPerAz) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovTypes(uint64(m.NodesPerAz))
	return n
}
func (m *ReplaceSpecType_VoltstackCluster) Size() (n int) {
	var l int
	_ = l
	if m.VoltstackCluster != nil {
		l = m.VoltstackCluster.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_LogsStreamingDisabled) Size() (n int) {
	var l int
	_ = l
	if m.LogsStreamingDisabled != nil {
		l = m.LogsStreamingDisabled.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_LogReceiver) Size() (n int) {
	var l int
	_ = l
	if m.LogReceiver != nil {
		l = m.LogReceiver.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_TotalNodes) Size() (n int) {
	var l int
	_ = l
	n += 2 + sovTypes(uint64(m.TotalNodes))
	return n
}
func (m *ReplaceSpecType_NoWorkerNodes) Size() (n int) {
	var l int
	_ = l
	if m.NoWorkerNodes != nil {
		l = m.NoWorkerNodes.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_IngressGwAr) Size() (n int) {
	var l int
	_ = l
	if m.IngressGwAr != nil {
		l = m.IngressGwAr.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_IngressEgressGwAr) Size() (n int) {
	var l int
	_ = l
	if m.IngressEgressGwAr != nil {
		l = m.IngressEgressGwAr.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_VoltstackClusterAr) Size() (n int) {
	var l int
	_ = l
	if m.VoltstackClusterAr != nil {
		l = m.VoltstackClusterAr.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType) Size() (n int) {
	var l int
	_ = l
	l = len(m.ResourceGroup)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.RegionChoice != nil {
		n += m.RegionChoice.Size()
	}
	if m.Vnet != nil {
		l = m.Vnet.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.SiteType != nil {
		n += m.SiteType.Size()
	}
	if m.Deployment != nil {
		n += m.Deployment.Size()
	}
	l = len(m.MachineType)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.VolterraSoftwareVersion)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.OperatingSystemVersion)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.SshKey)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.WorkerNodes != nil {
		n += m.WorkerNodes.Size()
	}
	if m.DiskSize != 0 {
		n += 2 + sovTypes(uint64(m.DiskSize))
	}
	l = len(m.Address)
	if l > 0 {
		n += 2 + l + sovTypes(uint64(l))
	}
	if m.Coordinates != nil {
		l = m.Coordinates.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	if m.LogsReceiverChoice != nil {
		n += m.LogsReceiverChoice.Size()
	}
	if m.SiteState != 0 {
		n += 2 + sovTypes(uint64(m.SiteState))
	}
	if len(m.VipParamsPerAz) > 0 {
		for _, e := range m.VipParamsPerAz {
			l = e.Size()
			n += 2 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *GetSpecType_AzureRegion) Size() (n int) {
	var l int
	_ = l
	l = len(m.AzureRegion)
	n += 1 + l + sovTypes(uint64(l))
	return n
}
func (m *GetSpecType_IngressGw) Size() (n int) {
	var l int
	_ = l
	if m.IngressGw != nil {
		l = m.IngressGw.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_IngressEgressGw) Size() (n int) {
	var l int
	_ = l
	if m.IngressEgressGw != nil {
		l = m.IngressEgressGw.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_AzureCred) Size() (n int) {
	var l int
	_ = l
	if m.AzureCred != nil {
		l = m.AzureCred.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_Assisted) Size() (n int) {
	var l int
	_ = l
	if m.Assisted != nil {
		l = m.Assisted.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_NodesPerAz) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovTypes(uint64(m.NodesPerAz))
	return n
}
func (m *GetSpecType_VoltstackCluster) Size() (n int) {
	var l int
	_ = l
	if m.VoltstackCluster != nil {
		l = m.VoltstackCluster.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_LogsStreamingDisabled) Size() (n int) {
	var l int
	_ = l
	if m.LogsStreamingDisabled != nil {
		l = m.LogsStreamingDisabled.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_LogReceiver) Size() (n int) {
	var l int
	_ = l
	if m.LogReceiver != nil {
		l = m.LogReceiver.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_TotalNodes) Size() (n int) {
	var l int
	_ = l
	n += 2 + sovTypes(uint64(m.TotalNodes))
	return n
}
func (m *GetSpecType_NoWorkerNodes) Size() (n int) {
	var l int
	_ = l
	if m.NoWorkerNodes != nil {
		l = m.NoWorkerNodes.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_AlternateRegion) Size() (n int) {
	var l int
	_ = l
	l = len(m.AlternateRegion)
	n += 2 + l + sovTypes(uint64(l))
	return n
}
func (m *GetSpecType_IngressGwAr) Size() (n int) {
	var l int
	_ = l
	if m.IngressGwAr != nil {
		l = m.IngressGwAr.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_IngressEgressGwAr) Size() (n int) {
	var l int
	_ = l
	if m.IngressEgressGwAr != nil {
		l = m.IngressEgressGwAr.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_VoltstackClusterAr) Size() (n int) {
	var l int
	_ = l
	if m.VoltstackClusterAr != nil {
		l = m.VoltstackClusterAr.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}

func sovTypes(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozTypes(x uint64) (n int) {
	return sovTypes(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *AzureVnetIngressGwType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AzureVnetIngressGwType{`,
		`AzNodes:` + strings.Replace(fmt.Sprintf("%v", this.AzNodes), "AzureVnetOneInterfaceNodeType", "ves_io_schema_views1.AzureVnetOneInterfaceNodeType", 1) + `,`,
		`AzureCertifiedHw:` + fmt.Sprintf("%v", this.AzureCertifiedHw) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AzureVnetIngressGwARType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AzureVnetIngressGwARType{`,
		`Node:` + strings.Replace(fmt.Sprintf("%v", this.Node), "AzureVnetOneInterfaceNodeARType", "ves_io_schema_views1.AzureVnetOneInterfaceNodeARType", 1) + `,`,
		`AzureCertifiedHw:` + fmt.Sprintf("%v", this.AzureCertifiedHw) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AzureVnetIngressEgressGwType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AzureVnetIngressEgressGwType{`,
		`AzNodes:` + strings.Replace(fmt.Sprintf("%v", this.AzNodes), "AzureVnetTwoInterfaceNodeType", "ves_io_schema_views1.AzureVnetTwoInterfaceNodeType", 1) + `,`,
		`NetworkPolicyChoice:` + fmt.Sprintf("%v", this.NetworkPolicyChoice) + `,`,
		`ForwardProxyChoice:` + fmt.Sprintf("%v", this.ForwardProxyChoice) + `,`,
		`AzureCertifiedHw:` + fmt.Sprintf("%v", this.AzureCertifiedHw) + `,`,
		`InsideStaticRouteChoice:` + fmt.Sprintf("%v", this.InsideStaticRouteChoice) + `,`,
		`OutsideStaticRouteChoice:` + fmt.Sprintf("%v", this.OutsideStaticRouteChoice) + `,`,
		`GlobalNetworkChoice:` + fmt.Sprintf("%v", this.GlobalNetworkChoice) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AzureVnetIngressEgressGwType_NoNetworkPolicy) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AzureVnetIngressEgressGwType_NoNetworkPolicy{`,
		`NoNetworkPolicy:` + strings.Replace(fmt.Sprintf("%v", this.NoNetworkPolicy), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AzureVnetIngressEgressGwType_NoForwardProxy) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AzureVnetIngressEgressGwType_NoForwardProxy{`,
		`NoForwardProxy:` + strings.Replace(fmt.Sprintf("%v", this.NoForwardProxy), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AzureVnetIngressEgressGwType_ActiveForwardProxyPolicies) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AzureVnetIngressEgressGwType_ActiveForwardProxyPolicies{`,
		`ActiveForwardProxyPolicies:` + strings.Replace(fmt.Sprintf("%v", this.ActiveForwardProxyPolicies), "ActiveForwardProxyPoliciesType", "ves_io_schema_network_firewall.ActiveForwardProxyPoliciesType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AzureVnetIngressEgressGwType_ActiveNetworkPolicies) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AzureVnetIngressEgressGwType_ActiveNetworkPolicies{`,
		`ActiveNetworkPolicies:` + strings.Replace(fmt.Sprintf("%v", this.ActiveNetworkPolicies), "ActiveNetworkPoliciesType", "ves_io_schema_network_firewall.ActiveNetworkPoliciesType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AzureVnetIngressEgressGwType_NoInsideStaticRoutes) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AzureVnetIngressEgressGwType_NoInsideStaticRoutes{`,
		`NoInsideStaticRoutes:` + strings.Replace(fmt.Sprintf("%v", this.NoInsideStaticRoutes), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AzureVnetIngressEgressGwType_InsideStaticRoutes) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AzureVnetIngressEgressGwType_InsideStaticRoutes{`,
		`InsideStaticRoutes:` + strings.Replace(fmt.Sprintf("%v", this.InsideStaticRoutes), "SiteStaticRoutesListType", "ves_io_schema_views1.SiteStaticRoutesListType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AzureVnetIngressEgressGwType_NoOutsideStaticRoutes) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AzureVnetIngressEgressGwType_NoOutsideStaticRoutes{`,
		`NoOutsideStaticRoutes:` + strings.Replace(fmt.Sprintf("%v", this.NoOutsideStaticRoutes), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AzureVnetIngressEgressGwType_OutsideStaticRoutes) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AzureVnetIngressEgressGwType_OutsideStaticRoutes{`,
		`OutsideStaticRoutes:` + strings.Replace(fmt.Sprintf("%v", this.OutsideStaticRoutes), "SiteStaticRoutesListType", "ves_io_schema_views1.SiteStaticRoutesListType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AzureVnetIngressEgressGwType_NoGlobalNetwork) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AzureVnetIngressEgressGwType_NoGlobalNetwork{`,
		`NoGlobalNetwork:` + strings.Replace(fmt.Sprintf("%v", this.NoGlobalNetwork), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AzureVnetIngressEgressGwType_GlobalNetworkList) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AzureVnetIngressEgressGwType_GlobalNetworkList{`,
		`GlobalNetworkList:` + strings.Replace(fmt.Sprintf("%v", this.GlobalNetworkList), "GlobalNetworkConnectionListType", "ves_io_schema_views1.GlobalNetworkConnectionListType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AzureVnetIngressEgressGwType_ForwardProxyAllowAll) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AzureVnetIngressEgressGwType_ForwardProxyAllowAll{`,
		`ForwardProxyAllowAll:` + strings.Replace(fmt.Sprintf("%v", this.ForwardProxyAllowAll), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AzureVnetIngressEgressGwARType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AzureVnetIngressEgressGwARType{`,
		`Node:` + strings.Replace(fmt.Sprintf("%v", this.Node), "AzureVnetTwoInterfaceNodeARType", "ves_io_schema_views1.AzureVnetTwoInterfaceNodeARType", 1) + `,`,
		`NetworkPolicyChoice:` + fmt.Sprintf("%v", this.NetworkPolicyChoice) + `,`,
		`ForwardProxyChoice:` + fmt.Sprintf("%v", this.ForwardProxyChoice) + `,`,
		`AzureCertifiedHw:` + fmt.Sprintf("%v", this.AzureCertifiedHw) + `,`,
		`InsideStaticRouteChoice:` + fmt.Sprintf("%v", this.InsideStaticRouteChoice) + `,`,
		`OutsideStaticRouteChoice:` + fmt.Sprintf("%v", this.OutsideStaticRouteChoice) + `,`,
		`GlobalNetworkChoice:` + fmt.Sprintf("%v", this.GlobalNetworkChoice) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AzureVnetIngressEgressGwARType_NoNetworkPolicy) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AzureVnetIngressEgressGwARType_NoNetworkPolicy{`,
		`NoNetworkPolicy:` + strings.Replace(fmt.Sprintf("%v", this.NoNetworkPolicy), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AzureVnetIngressEgressGwARType_NoForwardProxy) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AzureVnetIngressEgressGwARType_NoForwardProxy{`,
		`NoForwardProxy:` + strings.Replace(fmt.Sprintf("%v", this.NoForwardProxy), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AzureVnetIngressEgressGwARType_ActiveForwardProxyPolicies) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AzureVnetIngressEgressGwARType_ActiveForwardProxyPolicies{`,
		`ActiveForwardProxyPolicies:` + strings.Replace(fmt.Sprintf("%v", this.ActiveForwardProxyPolicies), "ActiveForwardProxyPoliciesType", "ves_io_schema_network_firewall.ActiveForwardProxyPoliciesType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AzureVnetIngressEgressGwARType_ActiveNetworkPolicies) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AzureVnetIngressEgressGwARType_ActiveNetworkPolicies{`,
		`ActiveNetworkPolicies:` + strings.Replace(fmt.Sprintf("%v", this.ActiveNetworkPolicies), "ActiveNetworkPoliciesType", "ves_io_schema_network_firewall.ActiveNetworkPoliciesType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AzureVnetIngressEgressGwARType_NoInsideStaticRoutes) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AzureVnetIngressEgressGwARType_NoInsideStaticRoutes{`,
		`NoInsideStaticRoutes:` + strings.Replace(fmt.Sprintf("%v", this.NoInsideStaticRoutes), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AzureVnetIngressEgressGwARType_InsideStaticRoutes) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AzureVnetIngressEgressGwARType_InsideStaticRoutes{`,
		`InsideStaticRoutes:` + strings.Replace(fmt.Sprintf("%v", this.InsideStaticRoutes), "SiteStaticRoutesListType", "ves_io_schema_views1.SiteStaticRoutesListType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AzureVnetIngressEgressGwARType_NoOutsideStaticRoutes) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AzureVnetIngressEgressGwARType_NoOutsideStaticRoutes{`,
		`NoOutsideStaticRoutes:` + strings.Replace(fmt.Sprintf("%v", this.NoOutsideStaticRoutes), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AzureVnetIngressEgressGwARType_OutsideStaticRoutes) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AzureVnetIngressEgressGwARType_OutsideStaticRoutes{`,
		`OutsideStaticRoutes:` + strings.Replace(fmt.Sprintf("%v", this.OutsideStaticRoutes), "SiteStaticRoutesListType", "ves_io_schema_views1.SiteStaticRoutesListType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AzureVnetIngressEgressGwARType_NoGlobalNetwork) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AzureVnetIngressEgressGwARType_NoGlobalNetwork{`,
		`NoGlobalNetwork:` + strings.Replace(fmt.Sprintf("%v", this.NoGlobalNetwork), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AzureVnetIngressEgressGwARType_GlobalNetworkList) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AzureVnetIngressEgressGwARType_GlobalNetworkList{`,
		`GlobalNetworkList:` + strings.Replace(fmt.Sprintf("%v", this.GlobalNetworkList), "GlobalNetworkConnectionListType", "ves_io_schema_views1.GlobalNetworkConnectionListType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AzureVnetIngressEgressGwARType_ForwardProxyAllowAll) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AzureVnetIngressEgressGwARType_ForwardProxyAllowAll{`,
		`ForwardProxyAllowAll:` + strings.Replace(fmt.Sprintf("%v", this.ForwardProxyAllowAll), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AzureVnetVoltstackClusterType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AzureVnetVoltstackClusterType{`,
		`AzureCertifiedHw:` + fmt.Sprintf("%v", this.AzureCertifiedHw) + `,`,
		`AzNodes:` + strings.Replace(fmt.Sprintf("%v", this.AzNodes), "AzureVnetOneInterfaceNodeType", "ves_io_schema_views1.AzureVnetOneInterfaceNodeType", 1) + `,`,
		`NetworkPolicyChoice:` + fmt.Sprintf("%v", this.NetworkPolicyChoice) + `,`,
		`ForwardProxyChoice:` + fmt.Sprintf("%v", this.ForwardProxyChoice) + `,`,
		`OutsideStaticRouteChoice:` + fmt.Sprintf("%v", this.OutsideStaticRouteChoice) + `,`,
		`GlobalNetworkChoice:` + fmt.Sprintf("%v", this.GlobalNetworkChoice) + `,`,
		`K8SClusterChoice:` + fmt.Sprintf("%v", this.K8SClusterChoice) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AzureVnetVoltstackClusterType_NoNetworkPolicy) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AzureVnetVoltstackClusterType_NoNetworkPolicy{`,
		`NoNetworkPolicy:` + strings.Replace(fmt.Sprintf("%v", this.NoNetworkPolicy), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AzureVnetVoltstackClusterType_ActiveNetworkPolicies) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AzureVnetVoltstackClusterType_ActiveNetworkPolicies{`,
		`ActiveNetworkPolicies:` + strings.Replace(fmt.Sprintf("%v", this.ActiveNetworkPolicies), "ActiveNetworkPoliciesType", "ves_io_schema_network_firewall.ActiveNetworkPoliciesType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AzureVnetVoltstackClusterType_NoForwardProxy) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AzureVnetVoltstackClusterType_NoForwardProxy{`,
		`NoForwardProxy:` + strings.Replace(fmt.Sprintf("%v", this.NoForwardProxy), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AzureVnetVoltstackClusterType_ActiveForwardProxyPolicies) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AzureVnetVoltstackClusterType_ActiveForwardProxyPolicies{`,
		`ActiveForwardProxyPolicies:` + strings.Replace(fmt.Sprintf("%v", this.ActiveForwardProxyPolicies), "ActiveForwardProxyPoliciesType", "ves_io_schema_network_firewall.ActiveForwardProxyPoliciesType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AzureVnetVoltstackClusterType_NoOutsideStaticRoutes) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AzureVnetVoltstackClusterType_NoOutsideStaticRoutes{`,
		`NoOutsideStaticRoutes:` + strings.Replace(fmt.Sprintf("%v", this.NoOutsideStaticRoutes), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AzureVnetVoltstackClusterType_OutsideStaticRoutes) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AzureVnetVoltstackClusterType_OutsideStaticRoutes{`,
		`OutsideStaticRoutes:` + strings.Replace(fmt.Sprintf("%v", this.OutsideStaticRoutes), "SiteStaticRoutesListType", "ves_io_schema_views1.SiteStaticRoutesListType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AzureVnetVoltstackClusterType_NoGlobalNetwork) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AzureVnetVoltstackClusterType_NoGlobalNetwork{`,
		`NoGlobalNetwork:` + strings.Replace(fmt.Sprintf("%v", this.NoGlobalNetwork), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AzureVnetVoltstackClusterType_GlobalNetworkList) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AzureVnetVoltstackClusterType_GlobalNetworkList{`,
		`GlobalNetworkList:` + strings.Replace(fmt.Sprintf("%v", this.GlobalNetworkList), "GlobalNetworkConnectionListType", "ves_io_schema_views1.GlobalNetworkConnectionListType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AzureVnetVoltstackClusterType_ForwardProxyAllowAll) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AzureVnetVoltstackClusterType_ForwardProxyAllowAll{`,
		`ForwardProxyAllowAll:` + strings.Replace(fmt.Sprintf("%v", this.ForwardProxyAllowAll), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AzureVnetVoltstackClusterType_NoK8SCluster) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AzureVnetVoltstackClusterType_NoK8SCluster{`,
		`NoK8SCluster:` + strings.Replace(fmt.Sprintf("%v", this.NoK8SCluster), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AzureVnetVoltstackClusterType_K8SCluster) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AzureVnetVoltstackClusterType_K8SCluster{`,
		`K8SCluster:` + strings.Replace(fmt.Sprintf("%v", this.K8SCluster), "ObjectRefType", "ves_io_schema_views.ObjectRefType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AzureVnetVoltstackClusterARType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AzureVnetVoltstackClusterARType{`,
		`AzureCertifiedHw:` + fmt.Sprintf("%v", this.AzureCertifiedHw) + `,`,
		`Node:` + strings.Replace(fmt.Sprintf("%v", this.Node), "AzureVnetOneInterfaceNodeARType", "ves_io_schema_views1.AzureVnetOneInterfaceNodeARType", 1) + `,`,
		`NetworkPolicyChoice:` + fmt.Sprintf("%v", this.NetworkPolicyChoice) + `,`,
		`ForwardProxyChoice:` + fmt.Sprintf("%v", this.ForwardProxyChoice) + `,`,
		`OutsideStaticRouteChoice:` + fmt.Sprintf("%v", this.OutsideStaticRouteChoice) + `,`,
		`GlobalNetworkChoice:` + fmt.Sprintf("%v", this.GlobalNetworkChoice) + `,`,
		`K8SClusterChoice:` + fmt.Sprintf("%v", this.K8SClusterChoice) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AzureVnetVoltstackClusterARType_NoNetworkPolicy) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AzureVnetVoltstackClusterARType_NoNetworkPolicy{`,
		`NoNetworkPolicy:` + strings.Replace(fmt.Sprintf("%v", this.NoNetworkPolicy), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AzureVnetVoltstackClusterARType_ActiveNetworkPolicies) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AzureVnetVoltstackClusterARType_ActiveNetworkPolicies{`,
		`ActiveNetworkPolicies:` + strings.Replace(fmt.Sprintf("%v", this.ActiveNetworkPolicies), "ActiveNetworkPoliciesType", "ves_io_schema_network_firewall.ActiveNetworkPoliciesType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AzureVnetVoltstackClusterARType_NoForwardProxy) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AzureVnetVoltstackClusterARType_NoForwardProxy{`,
		`NoForwardProxy:` + strings.Replace(fmt.Sprintf("%v", this.NoForwardProxy), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AzureVnetVoltstackClusterARType_ActiveForwardProxyPolicies) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AzureVnetVoltstackClusterARType_ActiveForwardProxyPolicies{`,
		`ActiveForwardProxyPolicies:` + strings.Replace(fmt.Sprintf("%v", this.ActiveForwardProxyPolicies), "ActiveForwardProxyPoliciesType", "ves_io_schema_network_firewall.ActiveForwardProxyPoliciesType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AzureVnetVoltstackClusterARType_NoOutsideStaticRoutes) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AzureVnetVoltstackClusterARType_NoOutsideStaticRoutes{`,
		`NoOutsideStaticRoutes:` + strings.Replace(fmt.Sprintf("%v", this.NoOutsideStaticRoutes), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AzureVnetVoltstackClusterARType_OutsideStaticRoutes) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AzureVnetVoltstackClusterARType_OutsideStaticRoutes{`,
		`OutsideStaticRoutes:` + strings.Replace(fmt.Sprintf("%v", this.OutsideStaticRoutes), "SiteStaticRoutesListType", "ves_io_schema_views1.SiteStaticRoutesListType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AzureVnetVoltstackClusterARType_NoGlobalNetwork) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AzureVnetVoltstackClusterARType_NoGlobalNetwork{`,
		`NoGlobalNetwork:` + strings.Replace(fmt.Sprintf("%v", this.NoGlobalNetwork), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AzureVnetVoltstackClusterARType_GlobalNetworkList) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AzureVnetVoltstackClusterARType_GlobalNetworkList{`,
		`GlobalNetworkList:` + strings.Replace(fmt.Sprintf("%v", this.GlobalNetworkList), "GlobalNetworkConnectionListType", "ves_io_schema_views1.GlobalNetworkConnectionListType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AzureVnetVoltstackClusterARType_ForwardProxyAllowAll) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AzureVnetVoltstackClusterARType_ForwardProxyAllowAll{`,
		`ForwardProxyAllowAll:` + strings.Replace(fmt.Sprintf("%v", this.ForwardProxyAllowAll), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AzureVnetVoltstackClusterARType_NoK8SCluster) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AzureVnetVoltstackClusterARType_NoK8SCluster{`,
		`NoK8SCluster:` + strings.Replace(fmt.Sprintf("%v", this.NoK8SCluster), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AzureVnetVoltstackClusterARType_K8SCluster) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AzureVnetVoltstackClusterARType_K8SCluster{`,
		`K8SCluster:` + strings.Replace(fmt.Sprintf("%v", this.K8SCluster), "ObjectRefType", "ves_io_schema_views.ObjectRefType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AzureVnetIngressGwReplaceType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AzureVnetIngressGwReplaceType{`,
		`}`,
	}, "")
	return s
}
func (this *AzureVnetIngressEgressGwReplaceType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AzureVnetIngressEgressGwReplaceType{`,
		`NetworkPolicyChoice:` + fmt.Sprintf("%v", this.NetworkPolicyChoice) + `,`,
		`ForwardProxyChoice:` + fmt.Sprintf("%v", this.ForwardProxyChoice) + `,`,
		`InsideStaticRouteChoice:` + fmt.Sprintf("%v", this.InsideStaticRouteChoice) + `,`,
		`OutsideStaticRouteChoice:` + fmt.Sprintf("%v", this.OutsideStaticRouteChoice) + `,`,
		`GlobalNetworkChoice:` + fmt.Sprintf("%v", this.GlobalNetworkChoice) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AzureVnetIngressEgressGwReplaceType_NoNetworkPolicy) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AzureVnetIngressEgressGwReplaceType_NoNetworkPolicy{`,
		`NoNetworkPolicy:` + strings.Replace(fmt.Sprintf("%v", this.NoNetworkPolicy), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AzureVnetIngressEgressGwReplaceType_NoForwardProxy) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AzureVnetIngressEgressGwReplaceType_NoForwardProxy{`,
		`NoForwardProxy:` + strings.Replace(fmt.Sprintf("%v", this.NoForwardProxy), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AzureVnetIngressEgressGwReplaceType_ActiveForwardProxyPolicies) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AzureVnetIngressEgressGwReplaceType_ActiveForwardProxyPolicies{`,
		`ActiveForwardProxyPolicies:` + strings.Replace(fmt.Sprintf("%v", this.ActiveForwardProxyPolicies), "ActiveForwardProxyPoliciesType", "ves_io_schema_network_firewall.ActiveForwardProxyPoliciesType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AzureVnetIngressEgressGwReplaceType_ActiveNetworkPolicies) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AzureVnetIngressEgressGwReplaceType_ActiveNetworkPolicies{`,
		`ActiveNetworkPolicies:` + strings.Replace(fmt.Sprintf("%v", this.ActiveNetworkPolicies), "ActiveNetworkPoliciesType", "ves_io_schema_network_firewall.ActiveNetworkPoliciesType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AzureVnetIngressEgressGwReplaceType_NoInsideStaticRoutes) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AzureVnetIngressEgressGwReplaceType_NoInsideStaticRoutes{`,
		`NoInsideStaticRoutes:` + strings.Replace(fmt.Sprintf("%v", this.NoInsideStaticRoutes), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AzureVnetIngressEgressGwReplaceType_InsideStaticRoutes) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AzureVnetIngressEgressGwReplaceType_InsideStaticRoutes{`,
		`InsideStaticRoutes:` + strings.Replace(fmt.Sprintf("%v", this.InsideStaticRoutes), "SiteStaticRoutesListType", "ves_io_schema_views1.SiteStaticRoutesListType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AzureVnetIngressEgressGwReplaceType_NoOutsideStaticRoutes) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AzureVnetIngressEgressGwReplaceType_NoOutsideStaticRoutes{`,
		`NoOutsideStaticRoutes:` + strings.Replace(fmt.Sprintf("%v", this.NoOutsideStaticRoutes), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AzureVnetIngressEgressGwReplaceType_OutsideStaticRoutes) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AzureVnetIngressEgressGwReplaceType_OutsideStaticRoutes{`,
		`OutsideStaticRoutes:` + strings.Replace(fmt.Sprintf("%v", this.OutsideStaticRoutes), "SiteStaticRoutesListType", "ves_io_schema_views1.SiteStaticRoutesListType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AzureVnetIngressEgressGwReplaceType_NoGlobalNetwork) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AzureVnetIngressEgressGwReplaceType_NoGlobalNetwork{`,
		`NoGlobalNetwork:` + strings.Replace(fmt.Sprintf("%v", this.NoGlobalNetwork), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AzureVnetIngressEgressGwReplaceType_GlobalNetworkList) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AzureVnetIngressEgressGwReplaceType_GlobalNetworkList{`,
		`GlobalNetworkList:` + strings.Replace(fmt.Sprintf("%v", this.GlobalNetworkList), "GlobalNetworkConnectionListType", "ves_io_schema_views1.GlobalNetworkConnectionListType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AzureVnetIngressEgressGwReplaceType_ForwardProxyAllowAll) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AzureVnetIngressEgressGwReplaceType_ForwardProxyAllowAll{`,
		`ForwardProxyAllowAll:` + strings.Replace(fmt.Sprintf("%v", this.ForwardProxyAllowAll), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AzureVnetVoltstackClusterReplaceType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AzureVnetVoltstackClusterReplaceType{`,
		`NetworkPolicyChoice:` + fmt.Sprintf("%v", this.NetworkPolicyChoice) + `,`,
		`ForwardProxyChoice:` + fmt.Sprintf("%v", this.ForwardProxyChoice) + `,`,
		`OutsideStaticRouteChoice:` + fmt.Sprintf("%v", this.OutsideStaticRouteChoice) + `,`,
		`GlobalNetworkChoice:` + fmt.Sprintf("%v", this.GlobalNetworkChoice) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AzureVnetVoltstackClusterReplaceType_NoNetworkPolicy) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AzureVnetVoltstackClusterReplaceType_NoNetworkPolicy{`,
		`NoNetworkPolicy:` + strings.Replace(fmt.Sprintf("%v", this.NoNetworkPolicy), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AzureVnetVoltstackClusterReplaceType_ActiveNetworkPolicies) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AzureVnetVoltstackClusterReplaceType_ActiveNetworkPolicies{`,
		`ActiveNetworkPolicies:` + strings.Replace(fmt.Sprintf("%v", this.ActiveNetworkPolicies), "ActiveNetworkPoliciesType", "ves_io_schema_network_firewall.ActiveNetworkPoliciesType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AzureVnetVoltstackClusterReplaceType_NoForwardProxy) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AzureVnetVoltstackClusterReplaceType_NoForwardProxy{`,
		`NoForwardProxy:` + strings.Replace(fmt.Sprintf("%v", this.NoForwardProxy), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AzureVnetVoltstackClusterReplaceType_ActiveForwardProxyPolicies) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AzureVnetVoltstackClusterReplaceType_ActiveForwardProxyPolicies{`,
		`ActiveForwardProxyPolicies:` + strings.Replace(fmt.Sprintf("%v", this.ActiveForwardProxyPolicies), "ActiveForwardProxyPoliciesType", "ves_io_schema_network_firewall.ActiveForwardProxyPoliciesType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AzureVnetVoltstackClusterReplaceType_NoOutsideStaticRoutes) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AzureVnetVoltstackClusterReplaceType_NoOutsideStaticRoutes{`,
		`NoOutsideStaticRoutes:` + strings.Replace(fmt.Sprintf("%v", this.NoOutsideStaticRoutes), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AzureVnetVoltstackClusterReplaceType_OutsideStaticRoutes) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AzureVnetVoltstackClusterReplaceType_OutsideStaticRoutes{`,
		`OutsideStaticRoutes:` + strings.Replace(fmt.Sprintf("%v", this.OutsideStaticRoutes), "SiteStaticRoutesListType", "ves_io_schema_views1.SiteStaticRoutesListType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AzureVnetVoltstackClusterReplaceType_NoGlobalNetwork) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AzureVnetVoltstackClusterReplaceType_NoGlobalNetwork{`,
		`NoGlobalNetwork:` + strings.Replace(fmt.Sprintf("%v", this.NoGlobalNetwork), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AzureVnetVoltstackClusterReplaceType_GlobalNetworkList) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AzureVnetVoltstackClusterReplaceType_GlobalNetworkList{`,
		`GlobalNetworkList:` + strings.Replace(fmt.Sprintf("%v", this.GlobalNetworkList), "GlobalNetworkConnectionListType", "ves_io_schema_views1.GlobalNetworkConnectionListType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AzureVnetVoltstackClusterReplaceType_ForwardProxyAllowAll) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AzureVnetVoltstackClusterReplaceType_ForwardProxyAllowAll{`,
		`ForwardProxyAllowAll:` + strings.Replace(fmt.Sprintf("%v", this.ForwardProxyAllowAll), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType{`,
		`ResourceGroup:` + fmt.Sprintf("%v", this.ResourceGroup) + `,`,
		`RegionChoice:` + fmt.Sprintf("%v", this.RegionChoice) + `,`,
		`Vnet:` + strings.Replace(fmt.Sprintf("%v", this.Vnet), "AzureVnetChoiceType", "ves_io_schema_views1.AzureVnetChoiceType", 1) + `,`,
		`SiteType:` + fmt.Sprintf("%v", this.SiteType) + `,`,
		`Deployment:` + fmt.Sprintf("%v", this.Deployment) + `,`,
		`MachineType:` + fmt.Sprintf("%v", this.MachineType) + `,`,
		`VolterraSoftwareVersion:` + fmt.Sprintf("%v", this.VolterraSoftwareVersion) + `,`,
		`OperatingSystemVersion:` + fmt.Sprintf("%v", this.OperatingSystemVersion) + `,`,
		`SshKey:` + fmt.Sprintf("%v", this.SshKey) + `,`,
		`WorkerNodes:` + fmt.Sprintf("%v", this.WorkerNodes) + `,`,
		`DiskSize:` + fmt.Sprintf("%v", this.DiskSize) + `,`,
		`Address:` + fmt.Sprintf("%v", this.Address) + `,`,
		`Coordinates:` + strings.Replace(fmt.Sprintf("%v", this.Coordinates), "Coordinates", "ves_io_schema_site.Coordinates", 1) + `,`,
		`LogsReceiverChoice:` + fmt.Sprintf("%v", this.LogsReceiverChoice) + `,`,
		`Sw:` + strings.Replace(fmt.Sprintf("%v", this.Sw), "VolterraSoftwareType", "ves_io_schema_views.VolterraSoftwareType", 1) + `,`,
		`Os:` + strings.Replace(fmt.Sprintf("%v", this.Os), "OperatingSystemType", "ves_io_schema_views.OperatingSystemType", 1) + `,`,
		`VipParamsPerAz:` + strings.Replace(fmt.Sprintf("%v", this.VipParamsPerAz), "PublishVIPParamsPerAz", "ves_io_schema_site.PublishVIPParamsPerAz", 1) + `,`,
		`TfParams:` + strings.Replace(fmt.Sprintf("%v", this.TfParams), "ObjectRefType", "ves_io_schema_views.ObjectRefType", 1) + `,`,
		`ViewInternal:` + strings.Replace(fmt.Sprintf("%v", this.ViewInternal), "ObjectRefType", "ves_io_schema_views.ObjectRefType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_AzureRegion) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_AzureRegion{`,
		`AzureRegion:` + fmt.Sprintf("%v", this.AzureRegion) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_IngressGw) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_IngressGw{`,
		`IngressGw:` + strings.Replace(fmt.Sprintf("%v", this.IngressGw), "AzureVnetIngressGwType", "AzureVnetIngressGwType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_IngressEgressGw) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_IngressEgressGw{`,
		`IngressEgressGw:` + strings.Replace(fmt.Sprintf("%v", this.IngressEgressGw), "AzureVnetIngressEgressGwType", "AzureVnetIngressEgressGwType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_AzureCred) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_AzureCred{`,
		`AzureCred:` + strings.Replace(fmt.Sprintf("%v", this.AzureCred), "ObjectRefType", "ves_io_schema_views.ObjectRefType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_Assisted) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_Assisted{`,
		`Assisted:` + strings.Replace(fmt.Sprintf("%v", this.Assisted), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_NodesPerAz) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_NodesPerAz{`,
		`NodesPerAz:` + fmt.Sprintf("%v", this.NodesPerAz) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_VoltstackCluster) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_VoltstackCluster{`,
		`VoltstackCluster:` + strings.Replace(fmt.Sprintf("%v", this.VoltstackCluster), "AzureVnetVoltstackClusterType", "AzureVnetVoltstackClusterType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_LogsStreamingDisabled) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_LogsStreamingDisabled{`,
		`LogsStreamingDisabled:` + strings.Replace(fmt.Sprintf("%v", this.LogsStreamingDisabled), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_LogReceiver) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_LogReceiver{`,
		`LogReceiver:` + strings.Replace(fmt.Sprintf("%v", this.LogReceiver), "ObjectRefType", "ves_io_schema_views.ObjectRefType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_TotalNodes) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_TotalNodes{`,
		`TotalNodes:` + fmt.Sprintf("%v", this.TotalNodes) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_NoWorkerNodes) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_NoWorkerNodes{`,
		`NoWorkerNodes:` + strings.Replace(fmt.Sprintf("%v", this.NoWorkerNodes), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_AlternateRegion) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_AlternateRegion{`,
		`AlternateRegion:` + fmt.Sprintf("%v", this.AlternateRegion) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_IngressGwAr) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_IngressGwAr{`,
		`IngressGwAr:` + strings.Replace(fmt.Sprintf("%v", this.IngressGwAr), "AzureVnetIngressGwARType", "AzureVnetIngressGwARType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_IngressEgressGwAr) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_IngressEgressGwAr{`,
		`IngressEgressGwAr:` + strings.Replace(fmt.Sprintf("%v", this.IngressEgressGwAr), "AzureVnetIngressEgressGwARType", "AzureVnetIngressEgressGwARType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_VoltstackClusterAr) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_VoltstackClusterAr{`,
		`VoltstackClusterAr:` + strings.Replace(fmt.Sprintf("%v", this.VoltstackClusterAr), "AzureVnetVoltstackClusterARType", "AzureVnetVoltstackClusterARType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType{`,
		`ResourceGroup:` + fmt.Sprintf("%v", this.ResourceGroup) + `,`,
		`RegionChoice:` + fmt.Sprintf("%v", this.RegionChoice) + `,`,
		`Vnet:` + strings.Replace(fmt.Sprintf("%v", this.Vnet), "AzureVnetChoiceType", "ves_io_schema_views1.AzureVnetChoiceType", 1) + `,`,
		`SiteType:` + fmt.Sprintf("%v", this.SiteType) + `,`,
		`Deployment:` + fmt.Sprintf("%v", this.Deployment) + `,`,
		`MachineType:` + fmt.Sprintf("%v", this.MachineType) + `,`,
		`SshKey:` + fmt.Sprintf("%v", this.SshKey) + `,`,
		`WorkerNodes:` + fmt.Sprintf("%v", this.WorkerNodes) + `,`,
		`DiskSize:` + fmt.Sprintf("%v", this.DiskSize) + `,`,
		`Address:` + fmt.Sprintf("%v", this.Address) + `,`,
		`Coordinates:` + strings.Replace(fmt.Sprintf("%v", this.Coordinates), "Coordinates", "ves_io_schema_site.Coordinates", 1) + `,`,
		`LogsReceiverChoice:` + fmt.Sprintf("%v", this.LogsReceiverChoice) + `,`,
		`Sw:` + strings.Replace(fmt.Sprintf("%v", this.Sw), "VolterraSoftwareType", "ves_io_schema_views.VolterraSoftwareType", 1) + `,`,
		`Os:` + strings.Replace(fmt.Sprintf("%v", this.Os), "OperatingSystemType", "ves_io_schema_views.OperatingSystemType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_AzureRegion) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_AzureRegion{`,
		`AzureRegion:` + fmt.Sprintf("%v", this.AzureRegion) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_IngressGw) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_IngressGw{`,
		`IngressGw:` + strings.Replace(fmt.Sprintf("%v", this.IngressGw), "AzureVnetIngressGwType", "AzureVnetIngressGwType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_IngressEgressGw) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_IngressEgressGw{`,
		`IngressEgressGw:` + strings.Replace(fmt.Sprintf("%v", this.IngressEgressGw), "AzureVnetIngressEgressGwType", "AzureVnetIngressEgressGwType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_AzureCred) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_AzureCred{`,
		`AzureCred:` + strings.Replace(fmt.Sprintf("%v", this.AzureCred), "ObjectRefType", "ves_io_schema_views.ObjectRefType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_Assisted) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_Assisted{`,
		`Assisted:` + strings.Replace(fmt.Sprintf("%v", this.Assisted), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_NodesPerAz) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_NodesPerAz{`,
		`NodesPerAz:` + fmt.Sprintf("%v", this.NodesPerAz) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_VoltstackCluster) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_VoltstackCluster{`,
		`VoltstackCluster:` + strings.Replace(fmt.Sprintf("%v", this.VoltstackCluster), "AzureVnetVoltstackClusterType", "AzureVnetVoltstackClusterType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_LogsStreamingDisabled) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_LogsStreamingDisabled{`,
		`LogsStreamingDisabled:` + strings.Replace(fmt.Sprintf("%v", this.LogsStreamingDisabled), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_LogReceiver) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_LogReceiver{`,
		`LogReceiver:` + strings.Replace(fmt.Sprintf("%v", this.LogReceiver), "ObjectRefType", "ves_io_schema_views.ObjectRefType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_TotalNodes) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_TotalNodes{`,
		`TotalNodes:` + fmt.Sprintf("%v", this.TotalNodes) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_NoWorkerNodes) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_NoWorkerNodes{`,
		`NoWorkerNodes:` + strings.Replace(fmt.Sprintf("%v", this.NoWorkerNodes), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_AlternateRegion) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_AlternateRegion{`,
		`AlternateRegion:` + fmt.Sprintf("%v", this.AlternateRegion) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_IngressGwAr) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_IngressGwAr{`,
		`IngressGwAr:` + strings.Replace(fmt.Sprintf("%v", this.IngressGwAr), "AzureVnetIngressGwARType", "AzureVnetIngressGwARType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_IngressEgressGwAr) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_IngressEgressGwAr{`,
		`IngressEgressGwAr:` + strings.Replace(fmt.Sprintf("%v", this.IngressEgressGwAr), "AzureVnetIngressEgressGwARType", "AzureVnetIngressEgressGwARType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_VoltstackClusterAr) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_VoltstackClusterAr{`,
		`VoltstackClusterAr:` + strings.Replace(fmt.Sprintf("%v", this.VoltstackClusterAr), "AzureVnetVoltstackClusterARType", "AzureVnetVoltstackClusterARType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType{`,
		`SiteType:` + fmt.Sprintf("%v", this.SiteType) + `,`,
		`WorkerNodes:` + fmt.Sprintf("%v", this.WorkerNodes) + `,`,
		`Address:` + fmt.Sprintf("%v", this.Address) + `,`,
		`Coordinates:` + strings.Replace(fmt.Sprintf("%v", this.Coordinates), "Coordinates", "ves_io_schema_site.Coordinates", 1) + `,`,
		`LogsReceiverChoice:` + fmt.Sprintf("%v", this.LogsReceiverChoice) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_IngressGw) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_IngressGw{`,
		`IngressGw:` + strings.Replace(fmt.Sprintf("%v", this.IngressGw), "AzureVnetIngressGwReplaceType", "AzureVnetIngressGwReplaceType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_IngressEgressGw) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_IngressEgressGw{`,
		`IngressEgressGw:` + strings.Replace(fmt.Sprintf("%v", this.IngressEgressGw), "AzureVnetIngressEgressGwReplaceType", "AzureVnetIngressEgressGwReplaceType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_NodesPerAz) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_NodesPerAz{`,
		`NodesPerAz:` + fmt.Sprintf("%v", this.NodesPerAz) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_VoltstackCluster) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_VoltstackCluster{`,
		`VoltstackCluster:` + strings.Replace(fmt.Sprintf("%v", this.VoltstackCluster), "AzureVnetVoltstackClusterReplaceType", "AzureVnetVoltstackClusterReplaceType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_LogsStreamingDisabled) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_LogsStreamingDisabled{`,
		`LogsStreamingDisabled:` + strings.Replace(fmt.Sprintf("%v", this.LogsStreamingDisabled), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_LogReceiver) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_LogReceiver{`,
		`LogReceiver:` + strings.Replace(fmt.Sprintf("%v", this.LogReceiver), "ObjectRefType", "ves_io_schema_views.ObjectRefType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_TotalNodes) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_TotalNodes{`,
		`TotalNodes:` + fmt.Sprintf("%v", this.TotalNodes) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_NoWorkerNodes) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_NoWorkerNodes{`,
		`NoWorkerNodes:` + strings.Replace(fmt.Sprintf("%v", this.NoWorkerNodes), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_IngressGwAr) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_IngressGwAr{`,
		`IngressGwAr:` + strings.Replace(fmt.Sprintf("%v", this.IngressGwAr), "AzureVnetIngressGwReplaceType", "AzureVnetIngressGwReplaceType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_IngressEgressGwAr) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_IngressEgressGwAr{`,
		`IngressEgressGwAr:` + strings.Replace(fmt.Sprintf("%v", this.IngressEgressGwAr), "AzureVnetIngressEgressGwReplaceType", "AzureVnetIngressEgressGwReplaceType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_VoltstackClusterAr) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_VoltstackClusterAr{`,
		`VoltstackClusterAr:` + strings.Replace(fmt.Sprintf("%v", this.VoltstackClusterAr), "AzureVnetVoltstackClusterReplaceType", "AzureVnetVoltstackClusterReplaceType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType{`,
		`ResourceGroup:` + fmt.Sprintf("%v", this.ResourceGroup) + `,`,
		`RegionChoice:` + fmt.Sprintf("%v", this.RegionChoice) + `,`,
		`Vnet:` + strings.Replace(fmt.Sprintf("%v", this.Vnet), "AzureVnetChoiceType", "ves_io_schema_views1.AzureVnetChoiceType", 1) + `,`,
		`SiteType:` + fmt.Sprintf("%v", this.SiteType) + `,`,
		`Deployment:` + fmt.Sprintf("%v", this.Deployment) + `,`,
		`MachineType:` + fmt.Sprintf("%v", this.MachineType) + `,`,
		`VolterraSoftwareVersion:` + fmt.Sprintf("%v", this.VolterraSoftwareVersion) + `,`,
		`OperatingSystemVersion:` + fmt.Sprintf("%v", this.OperatingSystemVersion) + `,`,
		`SshKey:` + fmt.Sprintf("%v", this.SshKey) + `,`,
		`WorkerNodes:` + fmt.Sprintf("%v", this.WorkerNodes) + `,`,
		`DiskSize:` + fmt.Sprintf("%v", this.DiskSize) + `,`,
		`Address:` + fmt.Sprintf("%v", this.Address) + `,`,
		`Coordinates:` + strings.Replace(fmt.Sprintf("%v", this.Coordinates), "Coordinates", "ves_io_schema_site.Coordinates", 1) + `,`,
		`LogsReceiverChoice:` + fmt.Sprintf("%v", this.LogsReceiverChoice) + `,`,
		`SiteState:` + fmt.Sprintf("%v", this.SiteState) + `,`,
		`VipParamsPerAz:` + strings.Replace(fmt.Sprintf("%v", this.VipParamsPerAz), "PublishVIPParamsPerAz", "ves_io_schema_site.PublishVIPParamsPerAz", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_AzureRegion) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_AzureRegion{`,
		`AzureRegion:` + fmt.Sprintf("%v", this.AzureRegion) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_IngressGw) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_IngressGw{`,
		`IngressGw:` + strings.Replace(fmt.Sprintf("%v", this.IngressGw), "AzureVnetIngressGwType", "AzureVnetIngressGwType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_IngressEgressGw) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_IngressEgressGw{`,
		`IngressEgressGw:` + strings.Replace(fmt.Sprintf("%v", this.IngressEgressGw), "AzureVnetIngressEgressGwType", "AzureVnetIngressEgressGwType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_AzureCred) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_AzureCred{`,
		`AzureCred:` + strings.Replace(fmt.Sprintf("%v", this.AzureCred), "ObjectRefType", "ves_io_schema_views.ObjectRefType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_Assisted) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_Assisted{`,
		`Assisted:` + strings.Replace(fmt.Sprintf("%v", this.Assisted), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_NodesPerAz) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_NodesPerAz{`,
		`NodesPerAz:` + fmt.Sprintf("%v", this.NodesPerAz) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_VoltstackCluster) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_VoltstackCluster{`,
		`VoltstackCluster:` + strings.Replace(fmt.Sprintf("%v", this.VoltstackCluster), "AzureVnetVoltstackClusterType", "AzureVnetVoltstackClusterType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_LogsStreamingDisabled) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_LogsStreamingDisabled{`,
		`LogsStreamingDisabled:` + strings.Replace(fmt.Sprintf("%v", this.LogsStreamingDisabled), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_LogReceiver) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_LogReceiver{`,
		`LogReceiver:` + strings.Replace(fmt.Sprintf("%v", this.LogReceiver), "ObjectRefType", "ves_io_schema_views.ObjectRefType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_TotalNodes) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_TotalNodes{`,
		`TotalNodes:` + fmt.Sprintf("%v", this.TotalNodes) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_NoWorkerNodes) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_NoWorkerNodes{`,
		`NoWorkerNodes:` + strings.Replace(fmt.Sprintf("%v", this.NoWorkerNodes), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_AlternateRegion) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_AlternateRegion{`,
		`AlternateRegion:` + fmt.Sprintf("%v", this.AlternateRegion) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_IngressGwAr) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_IngressGwAr{`,
		`IngressGwAr:` + strings.Replace(fmt.Sprintf("%v", this.IngressGwAr), "AzureVnetIngressGwARType", "AzureVnetIngressGwARType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_IngressEgressGwAr) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_IngressEgressGwAr{`,
		`IngressEgressGwAr:` + strings.Replace(fmt.Sprintf("%v", this.IngressEgressGwAr), "AzureVnetIngressEgressGwARType", "AzureVnetIngressEgressGwARType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_VoltstackClusterAr) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_VoltstackClusterAr{`,
		`VoltstackClusterAr:` + strings.Replace(fmt.Sprintf("%v", this.VoltstackClusterAr), "AzureVnetVoltstackClusterARType", "AzureVnetVoltstackClusterARType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringTypes(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *AzureVnetIngressGwType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AzureVnetIngressGwType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AzureVnetIngressGwType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AzNodes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AzNodes = append(m.AzNodes, &ves_io_schema_views1.AzureVnetOneInterfaceNodeType{})
			if err := m.AzNodes[len(m.AzNodes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AzureCertifiedHw", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AzureCertifiedHw = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AzureVnetIngressGwARType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AzureVnetIngressGwARType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AzureVnetIngressGwARType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Node", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Node == nil {
				m.Node = &ves_io_schema_views1.AzureVnetOneInterfaceNodeARType{}
			}
			if err := m.Node.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AzureCertifiedHw", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AzureCertifiedHw = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AzureVnetIngressEgressGwType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AzureVnetIngressEgressGwType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AzureVnetIngressEgressGwType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AzNodes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AzNodes = append(m.AzNodes, &ves_io_schema_views1.AzureVnetTwoInterfaceNodeType{})
			if err := m.AzNodes[len(m.AzNodes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoNetworkPolicy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.NetworkPolicyChoice = &AzureVnetIngressEgressGwType_NoNetworkPolicy{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoForwardProxy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ForwardProxyChoice = &AzureVnetIngressEgressGwType_NoForwardProxy{v}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AzureCertifiedHw", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AzureCertifiedHw = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActiveForwardProxyPolicies", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema_network_firewall.ActiveForwardProxyPoliciesType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ForwardProxyChoice = &AzureVnetIngressEgressGwType_ActiveForwardProxyPolicies{v}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActiveNetworkPolicies", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema_network_firewall.ActiveNetworkPoliciesType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.NetworkPolicyChoice = &AzureVnetIngressEgressGwType_ActiveNetworkPolicies{v}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoInsideStaticRoutes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.InsideStaticRouteChoice = &AzureVnetIngressEgressGwType_NoInsideStaticRoutes{v}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InsideStaticRoutes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema_views1.SiteStaticRoutesListType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.InsideStaticRouteChoice = &AzureVnetIngressEgressGwType_InsideStaticRoutes{v}
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoOutsideStaticRoutes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.OutsideStaticRouteChoice = &AzureVnetIngressEgressGwType_NoOutsideStaticRoutes{v}
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutsideStaticRoutes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema_views1.SiteStaticRoutesListType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.OutsideStaticRouteChoice = &AzureVnetIngressEgressGwType_OutsideStaticRoutes{v}
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoGlobalNetwork", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.GlobalNetworkChoice = &AzureVnetIngressEgressGwType_NoGlobalNetwork{v}
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GlobalNetworkList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema_views1.GlobalNetworkConnectionListType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.GlobalNetworkChoice = &AzureVnetIngressEgressGwType_GlobalNetworkList{v}
			iNdEx = postIndex
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ForwardProxyAllowAll", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ForwardProxyChoice = &AzureVnetIngressEgressGwType_ForwardProxyAllowAll{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AzureVnetIngressEgressGwARType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AzureVnetIngressEgressGwARType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AzureVnetIngressEgressGwARType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Node", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Node == nil {
				m.Node = &ves_io_schema_views1.AzureVnetTwoInterfaceNodeARType{}
			}
			if err := m.Node.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoNetworkPolicy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.NetworkPolicyChoice = &AzureVnetIngressEgressGwARType_NoNetworkPolicy{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoForwardProxy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ForwardProxyChoice = &AzureVnetIngressEgressGwARType_NoForwardProxy{v}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AzureCertifiedHw", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AzureCertifiedHw = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActiveForwardProxyPolicies", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema_network_firewall.ActiveForwardProxyPoliciesType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ForwardProxyChoice = &AzureVnetIngressEgressGwARType_ActiveForwardProxyPolicies{v}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActiveNetworkPolicies", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema_network_firewall.ActiveNetworkPoliciesType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.NetworkPolicyChoice = &AzureVnetIngressEgressGwARType_ActiveNetworkPolicies{v}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoInsideStaticRoutes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.InsideStaticRouteChoice = &AzureVnetIngressEgressGwARType_NoInsideStaticRoutes{v}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InsideStaticRoutes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema_views1.SiteStaticRoutesListType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.InsideStaticRouteChoice = &AzureVnetIngressEgressGwARType_InsideStaticRoutes{v}
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoOutsideStaticRoutes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.OutsideStaticRouteChoice = &AzureVnetIngressEgressGwARType_NoOutsideStaticRoutes{v}
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutsideStaticRoutes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema_views1.SiteStaticRoutesListType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.OutsideStaticRouteChoice = &AzureVnetIngressEgressGwARType_OutsideStaticRoutes{v}
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoGlobalNetwork", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.GlobalNetworkChoice = &AzureVnetIngressEgressGwARType_NoGlobalNetwork{v}
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GlobalNetworkList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema_views1.GlobalNetworkConnectionListType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.GlobalNetworkChoice = &AzureVnetIngressEgressGwARType_GlobalNetworkList{v}
			iNdEx = postIndex
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ForwardProxyAllowAll", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ForwardProxyChoice = &AzureVnetIngressEgressGwARType_ForwardProxyAllowAll{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AzureVnetVoltstackClusterType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AzureVnetVoltstackClusterType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AzureVnetVoltstackClusterType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AzureCertifiedHw", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AzureCertifiedHw = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AzNodes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AzNodes = append(m.AzNodes, &ves_io_schema_views1.AzureVnetOneInterfaceNodeType{})
			if err := m.AzNodes[len(m.AzNodes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoNetworkPolicy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.NetworkPolicyChoice = &AzureVnetVoltstackClusterType_NoNetworkPolicy{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActiveNetworkPolicies", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema_network_firewall.ActiveNetworkPoliciesType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.NetworkPolicyChoice = &AzureVnetVoltstackClusterType_ActiveNetworkPolicies{v}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoForwardProxy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ForwardProxyChoice = &AzureVnetVoltstackClusterType_NoForwardProxy{v}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActiveForwardProxyPolicies", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema_network_firewall.ActiveForwardProxyPoliciesType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ForwardProxyChoice = &AzureVnetVoltstackClusterType_ActiveForwardProxyPolicies{v}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoOutsideStaticRoutes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.OutsideStaticRouteChoice = &AzureVnetVoltstackClusterType_NoOutsideStaticRoutes{v}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutsideStaticRoutes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema_views1.SiteStaticRoutesListType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.OutsideStaticRouteChoice = &AzureVnetVoltstackClusterType_OutsideStaticRoutes{v}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoGlobalNetwork", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.GlobalNetworkChoice = &AzureVnetVoltstackClusterType_NoGlobalNetwork{v}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GlobalNetworkList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema_views1.GlobalNetworkConnectionListType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.GlobalNetworkChoice = &AzureVnetVoltstackClusterType_GlobalNetworkList{v}
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ForwardProxyAllowAll", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ForwardProxyChoice = &AzureVnetVoltstackClusterType_ForwardProxyAllowAll{v}
			iNdEx = postIndex
		case 27:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoK8SCluster", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.K8SClusterChoice = &AzureVnetVoltstackClusterType_NoK8SCluster{v}
			iNdEx = postIndex
		case 28:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field K8SCluster", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema_views.ObjectRefType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.K8SClusterChoice = &AzureVnetVoltstackClusterType_K8SCluster{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AzureVnetVoltstackClusterARType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AzureVnetVoltstackClusterARType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AzureVnetVoltstackClusterARType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AzureCertifiedHw", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AzureCertifiedHw = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Node", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Node == nil {
				m.Node = &ves_io_schema_views1.AzureVnetOneInterfaceNodeARType{}
			}
			if err := m.Node.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoNetworkPolicy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.NetworkPolicyChoice = &AzureVnetVoltstackClusterARType_NoNetworkPolicy{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActiveNetworkPolicies", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema_network_firewall.ActiveNetworkPoliciesType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.NetworkPolicyChoice = &AzureVnetVoltstackClusterARType_ActiveNetworkPolicies{v}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoForwardProxy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ForwardProxyChoice = &AzureVnetVoltstackClusterARType_NoForwardProxy{v}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActiveForwardProxyPolicies", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema_network_firewall.ActiveForwardProxyPoliciesType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ForwardProxyChoice = &AzureVnetVoltstackClusterARType_ActiveForwardProxyPolicies{v}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoOutsideStaticRoutes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.OutsideStaticRouteChoice = &AzureVnetVoltstackClusterARType_NoOutsideStaticRoutes{v}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutsideStaticRoutes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema_views1.SiteStaticRoutesListType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.OutsideStaticRouteChoice = &AzureVnetVoltstackClusterARType_OutsideStaticRoutes{v}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoGlobalNetwork", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.GlobalNetworkChoice = &AzureVnetVoltstackClusterARType_NoGlobalNetwork{v}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GlobalNetworkList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema_views1.GlobalNetworkConnectionListType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.GlobalNetworkChoice = &AzureVnetVoltstackClusterARType_GlobalNetworkList{v}
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ForwardProxyAllowAll", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ForwardProxyChoice = &AzureVnetVoltstackClusterARType_ForwardProxyAllowAll{v}
			iNdEx = postIndex
		case 27:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoK8SCluster", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.K8SClusterChoice = &AzureVnetVoltstackClusterARType_NoK8SCluster{v}
			iNdEx = postIndex
		case 28:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field K8SCluster", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema_views.ObjectRefType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.K8SClusterChoice = &AzureVnetVoltstackClusterARType_K8SCluster{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AzureVnetIngressGwReplaceType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AzureVnetIngressGwReplaceType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AzureVnetIngressGwReplaceType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AzureVnetIngressEgressGwReplaceType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AzureVnetIngressEgressGwReplaceType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AzureVnetIngressEgressGwReplaceType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoNetworkPolicy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.NetworkPolicyChoice = &AzureVnetIngressEgressGwReplaceType_NoNetworkPolicy{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoForwardProxy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ForwardProxyChoice = &AzureVnetIngressEgressGwReplaceType_NoForwardProxy{v}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActiveForwardProxyPolicies", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema_network_firewall.ActiveForwardProxyPoliciesType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ForwardProxyChoice = &AzureVnetIngressEgressGwReplaceType_ActiveForwardProxyPolicies{v}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActiveNetworkPolicies", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema_network_firewall.ActiveNetworkPoliciesType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.NetworkPolicyChoice = &AzureVnetIngressEgressGwReplaceType_ActiveNetworkPolicies{v}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoInsideStaticRoutes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.InsideStaticRouteChoice = &AzureVnetIngressEgressGwReplaceType_NoInsideStaticRoutes{v}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InsideStaticRoutes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema_views1.SiteStaticRoutesListType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.InsideStaticRouteChoice = &AzureVnetIngressEgressGwReplaceType_InsideStaticRoutes{v}
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoOutsideStaticRoutes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.OutsideStaticRouteChoice = &AzureVnetIngressEgressGwReplaceType_NoOutsideStaticRoutes{v}
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutsideStaticRoutes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema_views1.SiteStaticRoutesListType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.OutsideStaticRouteChoice = &AzureVnetIngressEgressGwReplaceType_OutsideStaticRoutes{v}
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoGlobalNetwork", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.GlobalNetworkChoice = &AzureVnetIngressEgressGwReplaceType_NoGlobalNetwork{v}
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GlobalNetworkList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema_views1.GlobalNetworkConnectionListType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.GlobalNetworkChoice = &AzureVnetIngressEgressGwReplaceType_GlobalNetworkList{v}
			iNdEx = postIndex
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ForwardProxyAllowAll", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ForwardProxyChoice = &AzureVnetIngressEgressGwReplaceType_ForwardProxyAllowAll{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AzureVnetVoltstackClusterReplaceType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AzureVnetVoltstackClusterReplaceType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AzureVnetVoltstackClusterReplaceType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoNetworkPolicy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.NetworkPolicyChoice = &AzureVnetVoltstackClusterReplaceType_NoNetworkPolicy{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActiveNetworkPolicies", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema_network_firewall.ActiveNetworkPoliciesType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.NetworkPolicyChoice = &AzureVnetVoltstackClusterReplaceType_ActiveNetworkPolicies{v}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoForwardProxy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ForwardProxyChoice = &AzureVnetVoltstackClusterReplaceType_NoForwardProxy{v}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActiveForwardProxyPolicies", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema_network_firewall.ActiveForwardProxyPoliciesType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ForwardProxyChoice = &AzureVnetVoltstackClusterReplaceType_ActiveForwardProxyPolicies{v}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoOutsideStaticRoutes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.OutsideStaticRouteChoice = &AzureVnetVoltstackClusterReplaceType_NoOutsideStaticRoutes{v}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutsideStaticRoutes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema_views1.SiteStaticRoutesListType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.OutsideStaticRouteChoice = &AzureVnetVoltstackClusterReplaceType_OutsideStaticRoutes{v}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoGlobalNetwork", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.GlobalNetworkChoice = &AzureVnetVoltstackClusterReplaceType_NoGlobalNetwork{v}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GlobalNetworkList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema_views1.GlobalNetworkConnectionListType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.GlobalNetworkChoice = &AzureVnetVoltstackClusterReplaceType_GlobalNetworkList{v}
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ForwardProxyAllowAll", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ForwardProxyChoice = &AzureVnetVoltstackClusterReplaceType_ForwardProxyAllowAll{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GlobalSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GlobalSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GlobalSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResourceGroup", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ResourceGroup = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AzureRegion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RegionChoice = &GlobalSpecType_AzureRegion{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vnet", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Vnet == nil {
				m.Vnet = &ves_io_schema_views1.AzureVnetChoiceType{}
			}
			if err := m.Vnet.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IngressGw", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &AzureVnetIngressGwType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.SiteType = &GlobalSpecType_IngressGw{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IngressEgressGw", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &AzureVnetIngressEgressGwType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.SiteType = &GlobalSpecType_IngressEgressGw{v}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AzureCred", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema_views.ObjectRefType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Deployment = &GlobalSpecType_AzureCred{v}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Assisted", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Deployment = &GlobalSpecType_Assisted{v}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MachineType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MachineType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VolterraSoftwareVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VolterraSoftwareVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperatingSystemVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OperatingSystemVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SshKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SshKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodesPerAz", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.WorkerNodes = &GlobalSpecType_NodesPerAz{v}
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DiskSize", wireType)
			}
			m.DiskSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DiskSize |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VoltstackCluster", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &AzureVnetVoltstackClusterType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.SiteType = &GlobalSpecType_VoltstackCluster{v}
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Coordinates", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Coordinates == nil {
				m.Coordinates = &ves_io_schema_site.Coordinates{}
			}
			if err := m.Coordinates.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LogsStreamingDisabled", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.LogsReceiverChoice = &GlobalSpecType_LogsStreamingDisabled{v}
			iNdEx = postIndex
		case 22:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LogReceiver", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema_views.ObjectRefType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.LogsReceiverChoice = &GlobalSpecType_LogReceiver{v}
			iNdEx = postIndex
		case 23:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sw", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Sw == nil {
				m.Sw = &ves_io_schema_views.VolterraSoftwareType{}
			}
			if err := m.Sw.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 24:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Os", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Os == nil {
				m.Os = &ves_io_schema_views.OperatingSystemType{}
			}
			if err := m.Os.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 25:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VipParamsPerAz", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VipParamsPerAz = append(m.VipParamsPerAz, &ves_io_schema_site.PublishVIPParamsPerAz{})
			if err := m.VipParamsPerAz[len(m.VipParamsPerAz)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 27:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalNodes", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.WorkerNodes = &GlobalSpecType_TotalNodes{v}
		case 28:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoWorkerNodes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.WorkerNodes = &GlobalSpecType_NoWorkerNodes{v}
			iNdEx = postIndex
		case 31:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AlternateRegion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RegionChoice = &GlobalSpecType_AlternateRegion{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 32:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IngressGwAr", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &AzureVnetIngressGwARType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.SiteType = &GlobalSpecType_IngressGwAr{v}
			iNdEx = postIndex
		case 33:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IngressEgressGwAr", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &AzureVnetIngressEgressGwARType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.SiteType = &GlobalSpecType_IngressEgressGwAr{v}
			iNdEx = postIndex
		case 34:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VoltstackClusterAr", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &AzureVnetVoltstackClusterARType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.SiteType = &GlobalSpecType_VoltstackClusterAr{v}
			iNdEx = postIndex
		case 999:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TfParams", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TfParams == nil {
				m.TfParams = &ves_io_schema_views.ObjectRefType{}
			}
			if err := m.TfParams.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 1000:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ViewInternal", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ViewInternal == nil {
				m.ViewInternal = &ves_io_schema_views.ObjectRefType{}
			}
			if err := m.ViewInternal.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResourceGroup", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ResourceGroup = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AzureRegion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RegionChoice = &CreateSpecType_AzureRegion{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vnet", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Vnet == nil {
				m.Vnet = &ves_io_schema_views1.AzureVnetChoiceType{}
			}
			if err := m.Vnet.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IngressGw", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &AzureVnetIngressGwType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.SiteType = &CreateSpecType_IngressGw{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IngressEgressGw", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &AzureVnetIngressEgressGwType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.SiteType = &CreateSpecType_IngressEgressGw{v}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AzureCred", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema_views.ObjectRefType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Deployment = &CreateSpecType_AzureCred{v}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Assisted", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Deployment = &CreateSpecType_Assisted{v}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MachineType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MachineType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SshKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SshKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodesPerAz", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.WorkerNodes = &CreateSpecType_NodesPerAz{v}
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DiskSize", wireType)
			}
			m.DiskSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DiskSize |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VoltstackCluster", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &AzureVnetVoltstackClusterType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.SiteType = &CreateSpecType_VoltstackCluster{v}
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Coordinates", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Coordinates == nil {
				m.Coordinates = &ves_io_schema_site.Coordinates{}
			}
			if err := m.Coordinates.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LogsStreamingDisabled", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.LogsReceiverChoice = &CreateSpecType_LogsStreamingDisabled{v}
			iNdEx = postIndex
		case 22:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LogReceiver", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema_views.ObjectRefType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.LogsReceiverChoice = &CreateSpecType_LogReceiver{v}
			iNdEx = postIndex
		case 23:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sw", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Sw == nil {
				m.Sw = &ves_io_schema_views.VolterraSoftwareType{}
			}
			if err := m.Sw.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 24:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Os", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Os == nil {
				m.Os = &ves_io_schema_views.OperatingSystemType{}
			}
			if err := m.Os.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 27:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalNodes", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.WorkerNodes = &CreateSpecType_TotalNodes{v}
		case 28:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoWorkerNodes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.WorkerNodes = &CreateSpecType_NoWorkerNodes{v}
			iNdEx = postIndex
		case 31:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AlternateRegion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RegionChoice = &CreateSpecType_AlternateRegion{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 32:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IngressGwAr", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &AzureVnetIngressGwARType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.SiteType = &CreateSpecType_IngressGwAr{v}
			iNdEx = postIndex
		case 33:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IngressEgressGwAr", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &AzureVnetIngressEgressGwARType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.SiteType = &CreateSpecType_IngressEgressGwAr{v}
			iNdEx = postIndex
		case 34:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VoltstackClusterAr", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &AzureVnetVoltstackClusterARType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.SiteType = &CreateSpecType_VoltstackClusterAr{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplaceSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplaceSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplaceSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IngressGw", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &AzureVnetIngressGwReplaceType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.SiteType = &ReplaceSpecType_IngressGw{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IngressEgressGw", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &AzureVnetIngressEgressGwReplaceType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.SiteType = &ReplaceSpecType_IngressEgressGw{v}
			iNdEx = postIndex
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodesPerAz", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.WorkerNodes = &ReplaceSpecType_NodesPerAz{v}
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VoltstackCluster", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &AzureVnetVoltstackClusterReplaceType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.SiteType = &ReplaceSpecType_VoltstackCluster{v}
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Coordinates", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Coordinates == nil {
				m.Coordinates = &ves_io_schema_site.Coordinates{}
			}
			if err := m.Coordinates.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LogsStreamingDisabled", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.LogsReceiverChoice = &ReplaceSpecType_LogsStreamingDisabled{v}
			iNdEx = postIndex
		case 22:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LogReceiver", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema_views.ObjectRefType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.LogsReceiverChoice = &ReplaceSpecType_LogReceiver{v}
			iNdEx = postIndex
		case 27:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalNodes", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.WorkerNodes = &ReplaceSpecType_TotalNodes{v}
		case 28:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoWorkerNodes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.WorkerNodes = &ReplaceSpecType_NoWorkerNodes{v}
			iNdEx = postIndex
		case 32:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IngressGwAr", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &AzureVnetIngressGwReplaceType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.SiteType = &ReplaceSpecType_IngressGwAr{v}
			iNdEx = postIndex
		case 33:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IngressEgressGwAr", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &AzureVnetIngressEgressGwReplaceType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.SiteType = &ReplaceSpecType_IngressEgressGwAr{v}
			iNdEx = postIndex
		case 34:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VoltstackClusterAr", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &AzureVnetVoltstackClusterReplaceType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.SiteType = &ReplaceSpecType_VoltstackClusterAr{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResourceGroup", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ResourceGroup = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AzureRegion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RegionChoice = &GetSpecType_AzureRegion{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vnet", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Vnet == nil {
				m.Vnet = &ves_io_schema_views1.AzureVnetChoiceType{}
			}
			if err := m.Vnet.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IngressGw", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &AzureVnetIngressGwType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.SiteType = &GetSpecType_IngressGw{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IngressEgressGw", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &AzureVnetIngressEgressGwType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.SiteType = &GetSpecType_IngressEgressGw{v}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AzureCred", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema_views.ObjectRefType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Deployment = &GetSpecType_AzureCred{v}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Assisted", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Deployment = &GetSpecType_Assisted{v}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MachineType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MachineType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VolterraSoftwareVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VolterraSoftwareVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperatingSystemVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OperatingSystemVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SshKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SshKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodesPerAz", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.WorkerNodes = &GetSpecType_NodesPerAz{v}
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DiskSize", wireType)
			}
			m.DiskSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DiskSize |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VoltstackCluster", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &AzureVnetVoltstackClusterType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.SiteType = &GetSpecType_VoltstackCluster{v}
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Coordinates", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Coordinates == nil {
				m.Coordinates = &ves_io_schema_site.Coordinates{}
			}
			if err := m.Coordinates.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LogsStreamingDisabled", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.LogsReceiverChoice = &GetSpecType_LogsStreamingDisabled{v}
			iNdEx = postIndex
		case 22:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LogReceiver", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema_views.ObjectRefType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.LogsReceiverChoice = &GetSpecType_LogReceiver{v}
			iNdEx = postIndex
		case 23:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SiteState", wireType)
			}
			m.SiteState = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SiteState |= (ves_io_schema_site.SiteState(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 25:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VipParamsPerAz", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VipParamsPerAz = append(m.VipParamsPerAz, &ves_io_schema_site.PublishVIPParamsPerAz{})
			if err := m.VipParamsPerAz[len(m.VipParamsPerAz)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 27:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalNodes", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.WorkerNodes = &GetSpecType_TotalNodes{v}
		case 28:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoWorkerNodes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.WorkerNodes = &GetSpecType_NoWorkerNodes{v}
			iNdEx = postIndex
		case 31:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AlternateRegion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RegionChoice = &GetSpecType_AlternateRegion{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 32:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IngressGwAr", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &AzureVnetIngressGwARType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.SiteType = &GetSpecType_IngressGwAr{v}
			iNdEx = postIndex
		case 33:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IngressEgressGwAr", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &AzureVnetIngressEgressGwARType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.SiteType = &GetSpecType_IngressEgressGwAr{v}
			iNdEx = postIndex
		case 34:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VoltstackClusterAr", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &AzureVnetVoltstackClusterARType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.SiteType = &GetSpecType_VoltstackClusterAr{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTypes(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthTypes
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipTypes(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthTypes = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTypes   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("ves.io/schema/views/azure_vnet_site/types.proto", fileDescriptorTypes)
}
func init() {
	golang_proto.RegisterFile("ves.io/schema/views/azure_vnet_site/types.proto", fileDescriptorTypes)
}

var fileDescriptorTypes = []byte{
	// 3556 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x5c, 0xdb, 0x6f, 0xdb, 0xd6,
	0x7f, 0xf7, 0x91, 0x64, 0x5b, 0x3e, 0xba, 0x58, 0x66, 0xe4, 0x98, 0xb1, 0x1d, 0x45, 0x71, 0x7a,
	0x71, 0x52, 0xfa, 0x22, 0xc9, 0x76, 0x6c, 0xaf, 0xf5, 0x62, 0xba, 0xad, 0x1d, 0x77, 0x49, 0x3c,
	0x3a, 0xcd, 0xd6, 0x21, 0x1b, 0x41, 0x4b, 0xc7, 0x32, 0x6b, 0x99, 0x47, 0x23, 0x29, 0x29, 0xf6,
	0x9a, 0xa2, 0x73, 0x31, 0x60, 0xc0, 0x30, 0x74, 0x08, 0xb0, 0x87, 0xfd, 0x03, 0xdb, 0x90, 0xd7,
	0x3d, 0x0c, 0x28, 0x3b, 0xc0, 0xc8, 0x5e, 0x8a, 0x3c, 0xe5, 0x65, 0x58, 0x91, 0x61, 0xc0, 0xea,
	0x3e, 0x34, 0x7b, 0x2b, 0xf6, 0x54, 0x78, 0x0f, 0x1b, 0xce, 0x21, 0xc5, 0x50, 0x14, 0x25, 0xdf,
	0xe2, 0xf6, 0xd7, 0xfe, 0xf4, 0xd2, 0x4a, 0xe4, 0xf7, 0xc2, 0x73, 0xfb, 0x7c, 0x3e, 0xdf, 0x2f,
	0x15, 0xc3, 0xb1, 0x32, 0xd2, 0x46, 0x65, 0x3c, 0xa6, 0x65, 0x37, 0xd0, 0x96, 0x34, 0x56, 0x96,
	0x51, 0x45, 0x1b, 0x93, 0x76, 0x4a, 0x2a, 0x12, 0xcb, 0x0a, 0xd2, 0x45, 0x4d, 0xd6, 0xd1, 0x98,
	0xbe, 0x5d, 0x44, 0xda, 0x68, 0x51, 0xc5, 0x3a, 0x66, 0xae, 0x98, 0x0e, 0xa3, 0xa6, 0xc3, 0x28,
	0x75, 0x18, 0x75, 0x39, 0xf4, 0x8f, 0xe4, 0x65, 0x7d, 0xa3, 0xb4, 0x36, 0x9a, 0xc5, 0x5b, 0x63,
	0x79, 0x9c, 0xc7, 0x63, 0xd4, 0x77, 0xad, 0xb4, 0x4e, 0xbf, 0xd1, 0x2f, 0xf4, 0x93, 0x19, 0xb3,
	0xff, 0x5a, 0xed, 0x43, 0x28, 0x48, 0xaf, 0x60, 0x75, 0x53, 0x5c, 0x97, 0x55, 0x54, 0x91, 0x0a,
	0x05, 0x67, 0xfe, 0xfe, 0x81, 0x5a, 0x5b, 0x5c, 0xd4, 0x65, 0xac, 0x54, 0x6f, 0x26, 0x6a, 0x6f,
	0xba, 0x1f, 0xbe, 0xff, 0x42, 0xed, 0x7d, 0xe7, 0xad, 0x41, 0xd7, 0x44, 0x48, 0x05, 0x39, 0x27,
	0xe9, 0xc8, 0xba, 0x9b, 0xac, 0x9f, 0x26, 0xb1, 0x36, 0xf5, 0x6b, 0x5e, 0x13, 0x49, 0x1e, 0x40,
	0x74, 0x66, 0xb9, 0xe4, 0x65, 0xe5, 0x30, 0x18, 0xfa, 0x1e, 0xc0, 0xf3, 0xf3, 0x64, 0x36, 0xef,
	0x29, 0x48, 0xbf, 0xa9, 0xe4, 0x55, 0xa4, 0x69, 0x8b, 0x95, 0xbb, 0xdb, 0x45, 0xc4, 0xdc, 0x87,
	0x41, 0x69, 0x47, 0x54, 0x70, 0x0e, 0x69, 0x2c, 0x48, 0xfa, 0x87, 0x43, 0xe9, 0xf4, 0xa8, 0xd7,
	0x62, 0xd8, 0xee, 0x77, 0x14, 0x74, 0x53, 0xd1, 0x91, 0xba, 0x2e, 0x65, 0xd1, 0x6d, 0x9c, 0x43,
	0x24, 0x0a, 0x1f, 0xf9, 0xf2, 0xbf, 0xf7, 0xfc, 0xc1, 0x47, 0xa0, 0xfd, 0x9a, 0x3f, 0xc5, 0x65,
	0x84, 0x4e, 0x69, 0x87, 0xdc, 0xd2, 0x98, 0x3c, 0x64, 0xcc, 0x55, 0xcc, 0x22, 0x55, 0x97, 0xd7,
	0x65, 0x94, 0x13, 0x37, 0x2a, 0xac, 0x2f, 0x09, 0x86, 0xbb, 0xf8, 0x99, 0xe7, 0x06, 0x38, 0x47,
	0xef, 0x8e, 0xac, 0x6d, 0xe3, 0xc2, 0x48, 0x19, 0x17, 0xf4, 0x2d, 0xa4, 0x6d, 0xfc, 0x68, 0x80,
	0x36, 0x12, 0xee, 0x82, 0xda, 0xc7, 0xde, 0x10, 0xbc, 0x2c, 0x84, 0x18, 0xbd, 0xb8, 0x50, 0x8d,
	0xb9, 0x54, 0x99, 0xed, 0xf8, 0x9f, 0x39, 0x7f, 0x9a, 0x4b, 0x0d, 0xfd, 0x1b, 0x80, 0x6c, 0xfd,
	0x48, 0xe7, 0x05, 0x3a, 0xd6, 0x25, 0x18, 0x20, 0x03, 0x65, 0x41, 0x12, 0x0c, 0x87, 0xd2, 0x13,
	0xc7, 0x1b, 0xa7, 0x19, 0x43, 0xa0, 0x11, 0x7e, 0x86, 0x71, 0x85, 0xe1, 0xa0, 0x7b, 0x5c, 0xef,
	0x9d, 0x6a, 0x1d, 0xef, 0x56, 0xf0, 0xd1, 0xd7, 0x91, 0x87, 0x3d, 0x0a, 0x16, 0xab, 0x47, 0xa8,
	0x88, 0x0b, 0x72, 0x76, 0x9b, 0x0e, 0x37, 0x94, 0x8e, 0xbb, 0xd2, 0xbc, 0xb7, 0x55, 0xd4, 0xb7,
	0x97, 0xda, 0x84, 0x6e, 0x05, 0xdf, 0x36, 0xed, 0x57, 0xa8, 0x39, 0x73, 0x03, 0xc6, 0x14, 0x2c,
	0xae, 0x63, 0xb5, 0x22, 0xa9, 0x39, 0xb1, 0xa8, 0xe2, 0x07, 0xdb, 0x6c, 0xa0, 0x49, 0x08, 0x20,
	0x44, 0x15, 0xfc, 0xbe, 0x69, 0xbe, 0x42, 0xac, 0x99, 0x3f, 0xf3, 0x9c, 0xf5, 0x20, 0x9d, 0xf5,
	0x5b, 0xcf, 0x0d, 0x70, 0xd1, 0x31, 0xa7, 0x5b, 0xa5, 0x82, 0x2e, 0x8f, 0x28, 0x72, 0xb6, 0x6e,
	0xfe, 0xaf, 0xa8, 0x97, 0xd9, 0x1b, 0x42, 0x73, 0xdb, 0xfa, 0x95, 0x60, 0x3e, 0x07, 0xf0, 0xa2,
	0x94, 0xd5, 0xe5, 0x32, 0xaa, 0x1d, 0x83, 0x39, 0x1b, 0x32, 0xd2, 0xd8, 0x2e, 0x3a, 0x98, 0x39,
	0xd7, 0x60, 0xdc, 0xb8, 0x33, 0x3a, 0x4f, 0x83, 0x38, 0x07, 0xb6, 0x62, 0x45, 0x20, 0x4b, 0xb0,
	0x04, 0x84, 0x7e, 0xa9, 0xa1, 0x05, 0xa3, 0xc1, 0x3e, 0xeb, 0x21, 0x6a, 0x16, 0x83, 0xa4, 0x87,
	0x34, 0xfd, 0xcc, 0xd1, 0xd2, 0x3b, 0x97, 0xa6, 0x9a, 0xb9, 0x4d, 0xe8, 0x95, 0xbc, 0x6e, 0x32,
	0xab, 0xb0, 0x4f, 0xc1, 0xa2, 0xac, 0x68, 0x72, 0x0e, 0x89, 0x9a, 0x2e, 0xe9, 0x72, 0x56, 0x54,
	0x71, 0x49, 0x47, 0x1a, 0x1b, 0x6e, 0xbc, 0x80, 0x7c, 0x60, 0xcf, 0x00, 0x60, 0xc9, 0x27, 0xc4,
	0x15, 0x7c, 0x93, 0xfa, 0xae, 0x52, 0x57, 0x81, 0x7a, 0x32, 0x79, 0x18, 0xf7, 0x8c, 0x18, 0xa1,
	0x11, 0x47, 0x3c, 0x37, 0xef, 0xaa, 0xac, 0xd7, 0x04, 0xf9, 0x3d, 0x59, 0xd3, 0xe9, 0xbe, 0xad,
	0xa6, 0x62, 0xe4, 0xfa, 0x44, 0x1f, 0x42, 0x56, 0xc1, 0x22, 0x2e, 0xe9, 0x1e, 0xc9, 0xba, 0x0f,
	0x7d, 0x7c, 0xbf, 0xd0, 0xab, 0xe0, 0x3b, 0xa6, 0x73, 0x4d, 0x58, 0x19, 0xf6, 0x7a, 0xc7, 0x8c,
	0x9d, 0x7c, 0x00, 0x7e, 0xe1, 0x1c, 0xf6, 0x48, 0x65, 0x9e, 0xbe, 0x7c, 0x01, 0xaf, 0x49, 0x85,
	0xea, 0xba, 0xb3, 0x4c, 0x93, 0xa3, 0x13, 0x20, 0xa7, 0x6f, 0x91, 0xda, 0x5b, 0x6b, 0xc9, 0xac,
	0xc3, 0x73, 0xb5, 0x01, 0xc4, 0x82, 0xac, 0xe9, 0xec, 0xb9, 0x26, 0x50, 0x58, 0x13, 0x60, 0x01,
	0x2b, 0x0a, 0xca, 0x12, 0x6e, 0xaa, 0x3e, 0xf3, 0x52, 0x40, 0xe8, 0xc9, 0x3b, 0x4d, 0xc8, 0x0d,
	0xe6, 0x16, 0xec, 0xab, 0x3d, 0x1e, 0x52, 0xa1, 0x80, 0x2b, 0xe4, 0xbf, 0x6c, 0xbc, 0xe9, 0x61,
	0x8f, 0xaf, 0x3b, 0xf6, 0xfb, 0x3c, 0x71, 0x9a, 0x2f, 0x14, 0x66, 0x6f, 0x3f, 0x31, 0xc0, 0x32,
	0x0c, 0xc3, 0x76, 0x13, 0x87, 0xfc, 0xd3, 0x5c, 0x0a, 0x0e, 0xc2, 0x5e, 0x32, 0x8f, 0x49, 0x2b,
	0x6d, 0xf2, 0x7d, 0x6b, 0x6b, 0x33, 0xfe, 0x29, 0xee, 0x3a, 0x1c, 0x84, 0xb1, 0xf9, 0x5c, 0x59,
	0x52, 0xb2, 0x28, 0x97, 0xbc, 0x63, 0x92, 0x29, 0x13, 0x4c, 0x5d, 0xe7, 0x52, 0x29, 0x2e, 0x35,
	0xc1, 0x5f, 0x85, 0xbd, 0xb5, 0x28, 0x26, 0x66, 0x37, 0xb0, 0x9c, 0x45, 0x4c, 0x6c, 0xcf, 0x00,
	0xbe, 0x67, 0x06, 0xe8, 0xd8, 0x37, 0x40, 0x20, 0xcd, 0xa5, 0xc6, 0xf9, 0x6b, 0x30, 0x5e, 0x3b,
	0x12, 0xcb, 0x92, 0xd9, 0x33, 0x40, 0xe0, 0x99, 0x01, 0x3a, 0xf7, 0x0d, 0xd0, 0x31, 0xc1, 0xa5,
	0xc7, 0xb9, 0x19, 0x3e, 0x03, 0xfb, 0x3d, 0x36, 0x73, 0xd5, 0xa3, 0x77, 0xcf, 0x00, 0xe1, 0xaf,
	0x0d, 0x00, 0x9e, 0x19, 0x20, 0xb4, 0x6f, 0x80, 0xf6, 0x54, 0x9a, 0x4b, 0x65, 0xf8, 0x09, 0x38,
	0xe0, 0xb5, 0x83, 0x9c, 0x5e, 0xdd, 0x96, 0x57, 0x94, 0x7a, 0x4d, 0x72, 0xa9, 0x29, 0x7e, 0x14,
	0xf6, 0xba, 0x16, 0xd2, 0x61, 0xcf, 0x58, 0xf6, 0x3d, 0xd4, 0x7e, 0x9a, 0x4b, 0xcd, 0x2c, 0x07,
	0x82, 0x1d, 0xb1, 0xce, 0xe5, 0x40, 0xb0, 0x33, 0x16, 0x5c, 0x0e, 0x04, 0x43, 0xb1, 0xf0, 0x72,
	0x20, 0x18, 0x8d, 0x75, 0x2f, 0x07, 0x82, 0x3d, 0x31, 0x66, 0xe8, 0x5f, 0xc3, 0x30, 0xd1, 0x88,
	0x57, 0x4e, 0xc2, 0x9a, 0x6e, 0x56, 0xa9, 0x61, 0xcd, 0x16, 0x8b, 0xb4, 0x58, 0xa4, 0xc5, 0x22,
	0x2d, 0x16, 0x69, 0xb1, 0xc8, 0xaf, 0x8c, 0x45, 0xfe, 0x21, 0x0c, 0x2f, 0xda, 0x14, 0x70, 0x0f,
	0x17, 0x74, 0x4d, 0x97, 0xb2, 0x9b, 0x0b, 0x85, 0x92, 0xa6, 0x23, 0x95, 0x92, 0x48, 0xc9, 0x13,
	0x74, 0x01, 0x05, 0xdd, 0xc5, 0xe7, 0x06, 0xe8, 0x77, 0x95, 0x43, 0x34, 0xc0, 0x48, 0x16, 0x6f,
	0xad, 0xe1, 0x2a, 0xe2, 0x26, 0xd5, 0x04, 0x7b, 0x43, 0x68, 0x62, 0xe8, 0x01, 0xb7, 0xce, 0xaa,
	0xc8, 0xf7, 0xca, 0xab, 0x5b, 0x4f, 0x3e, 0x0b, 0x1c, 0x8f, 0xcf, 0x9a, 0x40, 0x71, 0xfb, 0x99,
	0x41, 0xb1, 0x17, 0x89, 0x76, 0x1e, 0x8b, 0x44, 0x0f, 0xe7, 0xb1, 0xe0, 0x4f, 0xc0, 0x63, 0xcd,
	0x40, 0x19, 0x1e, 0x81, 0x53, 0x8e, 0x0b, 0xca, 0xa1, 0xd3, 0xb0, 0xca, 0xd1, 0x41, 0x39, 0xd2,
	0x64, 0x29, 0xfc, 0x47, 0x06, 0xe5, 0xe8, 0x29, 0x40, 0xd9, 0x7f, 0x4c, 0x50, 0xee, 0x3e, 0x3e,
	0x28, 0x33, 0x3c, 0x8c, 0x2a, 0x58, 0xdc, 0x9c, 0xd6, 0xc4, 0xac, 0x09, 0x14, 0xec, 0xc0, 0xa1,
	0x4b, 0x16, 0x10, 0xc2, 0x0a, 0xfe, 0x60, 0x5a, 0xb3, 0xa0, 0x85, 0xf9, 0x08, 0x86, 0x9c, 0x01,
	0x06, 0x69, 0x80, 0x21, 0xcf, 0x21, 0xdf, 0x59, 0xfb, 0x18, 0x65, 0x75, 0x01, 0xad, 0xd3, 0x45,
	0x61, 0x1e, 0x3f, 0x74, 0x7a, 0x5a, 0xc1, 0xe1, 0xa6, 0x1d, 0x7a, 0xf6, 0xd6, 0x13, 0x03, 0xdc,
	0x74, 0x70, 0x46, 0x8a, 0x4b, 0x37, 0xe1, 0x8c, 0x0c, 0x37, 0x05, 0x07, 0x3c, 0x38, 0xa3, 0x73,
	0x86, 0x4b, 0xa5, 0xb9, 0xf4, 0x14, 0x3f, 0xdc, 0x88, 0x32, 0xba, 0x2d, 0x22, 0xf0, 0xef, 0x1b,
	0xc0, 0x3f, 0xc1, 0x4d, 0x36, 0x65, 0x8c, 0x4e, 0x8b, 0x5b, 0x3a, 0xae, 0x73, 0xa9, 0x49, 0x6e,
	0xfa, 0x28, 0xe0, 0x0f, 0x2d, 0x30, 0xef, 0xa2, 0x60, 0x3e, 0xce, 0xa5, 0x52, 0xcd, 0xc1, 0x3f,
	0x62, 0xd9, 0x87, 0xa9, 0x7d, 0x86, 0xd0, 0xdd, 0x5b, 0x90, 0x71, 0xcc, 0x95, 0xd3, 0x78, 0xc0,
	0x32, 0xee, 0x27, 0xc6, 0xe9, 0xeb, 0x5c, 0x7a, 0x7a, 0x39, 0x10, 0xf4, 0xc7, 0x02, 0x36, 0x5f,
	0x74, 0xc5, 0xe0, 0x72, 0x20, 0x18, 0x8e, 0x45, 0x96, 0x03, 0xc1, 0xfe, 0xd8, 0xc0, 0xd0, 0xdf,
	0x86, 0xe1, 0xa5, 0x86, 0x4c, 0x61, 0x15, 0x1c, 0x3f, 0x13, 0x57, 0x54, 0xeb, 0x1c, 0xdf, 0xa9,
	0xbb, 0x83, 0x2d, 0x5e, 0x68, 0xf1, 0x42, 0x8b, 0x17, 0x5a, 0xbc, 0xd0, 0xe2, 0x85, 0x23, 0xf3,
	0xc2, 0xac, 0xa3, 0x80, 0xb0, 0x5f, 0xdb, 0x08, 0xa8, 0x58, 0x90, 0xb2, 0x54, 0x83, 0xcf, 0x5e,
	0x78, 0x3a, 0xd7, 0xe0, 0x15, 0xd6, 0xd0, 0xdf, 0x85, 0xe1, 0x95, 0x46, 0x3d, 0x2c, 0x47, 0x88,
	0xdf, 0x90, 0xf6, 0x53, 0xab, 0x03, 0xd4, 0xea, 0x00, 0xb5, 0x3a, 0x40, 0x3f, 0x75, 0x07, 0x48,
	0x7c, 0x3a, 0xd7, 0xf4, 0xfd, 0xe9, 0x13, 0x03, 0xbc, 0x7d, 0xaa, 0x96, 0x10, 0xdf, 0x08, 0xc7,
	0xaf, 0xba, 0x5b, 0x42, 0xbb, 0x07, 0xc0, 0xdb, 0x94, 0xe7, 0x1b, 0x20, 0xfc, 0xb5, 0xfa, 0x5e,
	0xd1, 0xee, 0x01, 0xf0, 0xb4, 0xe5, 0x7f, 0xbf, 0x69, 0x0f, 0x29, 0xe3, 0xd9, 0x43, 0xda, 0x3d,
	0x00, 0x4d, 0x9c, 0xf8, 0xd5, 0xe6, 0x64, 0x32, 0xe1, 0xd9, 0x61, 0xda, 0x3d, 0x00, 0xcd, 0xbc,
	0xf8, 0xc5, 0x46, 0x5c, 0x33, 0xea, 0xd9, 0x80, 0x22, 0x93, 0xe6, 0x69, 0x7f, 0x48, 0x67, 0xea,
	0xaf, 0x20, 0x7c, 0xad, 0x61, 0xbd, 0x71, 0x28, 0x39, 0xb4, 0x34, 0x7b, 0x4b, 0xb3, 0xb7, 0x34,
	0xfb, 0x11, 0xe0, 0xf5, 0xfe, 0xd3, 0xb9, 0xe6, 0x0d, 0xe0, 0x27, 0x06, 0x98, 0x3e, 0x44, 0x26,
	0xb3, 0x1e, 0xf8, 0x1a, 0x20, 0x32, 0x99, 0x9f, 0x6f, 0x84, 0xad, 0xc3, 0x2e, 0x8d, 0x7c, 0x32,
	0x68, 0x75, 0x89, 0xe7, 0x86, 0xd0, 0x7a, 0x04, 0x1c, 0xac, 0x17, 0xd5, 0xa7, 0xc2, 0xc1, 0x7a,
	0xcd, 0xdd, 0x0c, 0x07, 0x41, 0xcc, 0xb7, 0x1c, 0x08, 0xfa, 0x62, 0xfe, 0x46, 0x5a, 0x7b, 0xe8,
	0xef, 0xfb, 0x61, 0xd4, 0xdc, 0x2e, 0xab, 0x45, 0x94, 0xa5, 0xb8, 0x37, 0x05, 0xa3, 0x2a, 0xd2,
	0x70, 0x49, 0xcd, 0x22, 0x31, 0xaf, 0xe2, 0x52, 0xd1, 0x6a, 0xb4, 0x74, 0x57, 0x5b, 0x29, 0x1d,
	0x6a, 0x20, 0x06, 0xd8, 0x1b, 0x42, 0xa4, 0x6a, 0xb6, 0x48, 0xac, 0x98, 0xbf, 0xf6, 0xc1, 0xb0,
	0xd9, 0xa5, 0x51, 0x51, 0x5e, 0xc6, 0x8a, 0xf5, 0xe3, 0xa7, 0xef, 0x41, 0xd5, 0xef, 0x3f, 0x81,
	0xfa, 0x1c, 0x08, 0x11, 0x0d, 0x97, 0xf4, 0x0d, 0x24, 0x69, 0xba, 0xa4, 0xc9, 0x92, 0xd0, 0x95,
	0x45, 0x8a, 0xae, 0x4a, 0x85, 0x92, 0x26, 0x74, 0x90, 0x8b, 0x25, 0x4d, 0xe8, 0x34, 0xff, 0x9f,
	0x16, 0xa2, 0xd4, 0xf4, 0xa5, 0x41, 0x48, 0xc1, 0xaa, 0xbe, 0x81, 0x4a, 0x2a, 0x2e, 0x22, 0x01,
	0x56, 0x90, 0xa6, 0x5b, 0x9f, 0xbb, 0x3e, 0x96, 0x8a, 0x92, 0x42, 0xdc, 0x84, 0x88, 0x54, 0xd2,
	0x88, 0xb9, 0x2c, 0x99, 0x5f, 0xb3, 0x92, 0x22, 0xe5, 0x24, 0x2b, 0x86, 0xd0, 0x59, 0xda, 0xa4,
	0x31, 0x85, 0x4e, 0xe2, 0x4d, 0x72, 0x58, 0x1f, 0x32, 0x42, 0x64, 0x5d, 0x25, 0x3b, 0xad, 0x6a,
	0x19, 0xa3, 0x76, 0xd2, 0xba, 0x2a, 0x67, 0x25, 0x9a, 0x56, 0x08, 0xad, 0xa9, 0xd2, 0x8e, 0x5c,
	0x30, 0xfd, 0x99, 0x3c, 0x52, 0xb7, 0x24, 0x65, 0x9b, 0x78, 0x5b, 0x2e, 0x4b, 0x6d, 0x42, 0x88,
	0x8e, 0x5f, 0xa0, 0xc3, 0x67, 0x78, 0x18, 0x28, 0x2b, 0x48, 0x67, 0xfd, 0xf4, 0xf4, 0x0c, 0x37,
	0xef, 0x1e, 0x2d, 0xd0, 0x25, 0x33, 0x11, 0xe5, 0x07, 0x03, 0x00, 0x81, 0xfa, 0x32, 0x6b, 0x10,
	0xca, 0xa6, 0x34, 0x11, 0xf3, 0x15, 0x8b, 0x32, 0x7e, 0x67, 0xf4, 0x08, 0x3f, 0x8d, 0x1c, 0xf5,
	0xae, 0x8c, 0x78, 0x72, 0x36, 0xc0, 0x12, 0x10, 0xba, 0xe4, 0xea, 0x65, 0xa6, 0x04, 0x7b, 0xaa,
	0x39, 0x90, 0x9d, 0xaa, 0x83, 0xa6, 0x9a, 0x3f, 0x51, 0xaa, 0xf7, 0xbc, 0x12, 0x76, 0xcb, 0xb5,
	0x37, 0x99, 0x8f, 0x20, 0xb4, 0x7a, 0x7a, 0x2a, 0xca, 0x59, 0x7c, 0x72, 0x94, 0x7a, 0x3c, 0xfe,
	0xf8, 0x61, 0x4f, 0xb6, 0x80, 0x4b, 0x39, 0xea, 0x88, 0x14, 0x5d, 0x96, 0x0a, 0xda, 0x92, 0x4f,
	0xe8, 0x32, 0xdb, 0x77, 0x2a, 0xca, 0x31, 0x69, 0x18, 0x94, 0x34, 0x4d, 0xd6, 0x74, 0x94, 0xb3,
	0x4a, 0x27, 0x6f, 0xec, 0xf2, 0x09, 0xb6, 0x1d, 0xf3, 0xbf, 0x00, 0x86, 0xb7, 0xa4, 0xec, 0x86,
	0xac, 0x98, 0xbf, 0xa4, 0xa4, 0x0c, 0xd3, 0xc5, 0xff, 0x3b, 0x78, 0x6e, 0x80, 0xe8, 0xaa, 0x2e,
	0x29, 0x39, 0x72, 0xfa, 0xdf, 0xcd, 0x88, 0xe5, 0x34, 0xd9, 0xcf, 0x8f, 0xbe, 0x02, 0xff, 0x04,
	0xe0, 0x0c, 0x74, 0xdd, 0x62, 0xde, 0x1c, 0x9e, 0x48, 0x3e, 0x48, 0x96, 0x17, 0x56, 0x3e, 0xe4,
	0x92, 0xa9, 0x89, 0x45, 0x3e, 0x29, 0xcc, 0xdf, 0xba, 0x9a, 0xdc, 0x42, 0x39, 0xb9, 0xb4, 0x95,
	0x2c, 0x22, 0x75, 0x1d, 0x93, 0x6d, 0x93, 0x45, 0xf0, 0xba, 0xd3, 0x75, 0x82, 0xb8, 0xbe, 0x3e,
	0x3c, 0x6d, 0xbb, 0xa6, 0xa7, 0xab, 0xae, 0x1b, 0x72, 0x7e, 0xa3, 0xc6, 0xf1, 0x1d, 0xa7, 0xe3,
	0x24, 0x71, 0x7c, 0x6b, 0x38, 0x35, 0x65, 0x7b, 0x4e, 0x4e, 0x55, 0x3d, 0xcb, 0x48, 0xdd, 0xae,
	0x73, 0x27, 0xe7, 0x30, 0xa0, 0xfa, 0xd8, 0x1b, 0x42, 0xc8, 0x1a, 0x2d, 0x3d, 0xf3, 0x2b, 0xf0,
	0x42, 0x19, 0x17, 0x74, 0xa4, 0xaa, 0x92, 0xa8, 0xe1, 0x75, 0xbd, 0x22, 0x91, 0x15, 0x46, 0xaa,
	0x46, 0xce, 0x71, 0x98, 0xce, 0x44, 0xfc, 0x9b, 0x87, 0xe0, 0x85, 0x01, 0xec, 0xd3, 0x6c, 0x46,
	0xe9, 0xab, 0xba, 0xad, 0x5a, 0x5e, 0xf7, 0x4c, 0x27, 0xe6, 0x36, 0x64, 0x71, 0x11, 0xa9, 0x92,
	0x2e, 0x2b, 0x79, 0x51, 0xdb, 0xd6, 0x74, 0xb4, 0x65, 0x07, 0x8c, 0x34, 0x09, 0x78, 0xde, 0xf6,
	0x5a, 0xa5, 0x4e, 0xd5, 0x78, 0x6f, 0xc2, 0x4e, 0x4d, 0xdb, 0x10, 0x37, 0xd1, 0x36, 0xa5, 0xbe,
	0x2e, 0x3e, 0xfa, 0xa3, 0x01, 0xfc, 0xc4, 0xaf, 0x5d, 0xf5, 0xb3, 0x9f, 0xdd, 0x10, 0x3a, 0x34,
	0x6d, 0xe3, 0x03, 0xb4, 0xcd, 0x4c, 0xc1, 0x30, 0x7d, 0xbb, 0x27, 0x16, 0x91, 0x2a, 0x4a, 0x3b,
	0x94, 0xbc, 0x22, 0x3c, 0xf3, 0xdc, 0x00, 0x60, 0xdc, 0x4e, 0x75, 0xcd, 0xc7, 0xf6, 0x2e, 0xf9,
	0x05, 0x48, 0x2d, 0x57, 0x90, 0x3a, 0xbf, 0xc3, 0x64, 0x60, 0x57, 0x4e, 0xd6, 0x36, 0x45, 0x4d,
	0xde, 0x41, 0xb4, 0xd2, 0x8a, 0xf0, 0xe7, 0xf7, 0xac, 0xc7, 0xfb, 0xcb, 0xaf, 0x40, 0x0f, 0x4d,
	0x75, 0xcd, 0xcf, 0xfe, 0xdf, 0x25, 0x21, 0x48, 0x0c, 0x57, 0xe5, 0x1d, 0xc4, 0x54, 0x60, 0x8f,
	0xdd, 0x46, 0xb6, 0x7b, 0x4b, 0x3d, 0x74, 0xcb, 0xf1, 0xc7, 0x3b, 0x3b, 0x5e, 0x14, 0x69, 0x1f,
	0x9e, 0x58, 0xd9, 0x75, 0x97, 0x19, 0x86, 0x9d, 0x52, 0x2e, 0x47, 0x8e, 0x12, 0x2d, 0xd7, 0xba,
	0xf8, 0x28, 0x79, 0x56, 0x7b, 0x3a, 0x7c, 0x42, 0xf5, 0x36, 0xb3, 0x08, 0x43, 0x59, 0x8c, 0xd5,
	0x9c, 0xac, 0x48, 0x44, 0xe4, 0x98, 0x65, 0xd9, 0x25, 0xd7, 0xc3, 0xd1, 0x67, 0x59, 0x78, 0x69,
	0x66, 0xca, 0x1a, 0xc1, 0xe9, 0xc9, 0xdc, 0x85, 0x7d, 0x05, 0x9c, 0xd7, 0x44, 0x4d, 0x57, 0x91,
	0xb4, 0x45, 0x96, 0x35, 0x27, 0x6b, 0xd2, 0x5a, 0x01, 0xe5, 0xd8, 0xde, 0x23, 0xb4, 0xe3, 0x7a,
	0x89, 0xf3, 0x6a, 0xd5, 0xf7, 0x5d, 0xcb, 0x95, 0xb9, 0x0f, 0xc3, 0x05, 0x9c, 0x17, 0x55, 0x94,
	0x45, 0x72, 0x19, 0xa9, 0xec, 0xf9, 0x23, 0x03, 0xc1, 0xb9, 0xc7, 0x0f, 0x6b, 0x5c, 0xad, 0x3c,
	0xa1, 0x02, 0xce, 0x0b, 0xd6, 0x25, 0x66, 0x01, 0xfa, 0xb4, 0x0a, 0xdb, 0x47, 0x63, 0x5e, 0xf5,
	0x8c, 0x79, 0xcf, 0xb5, 0x7f, 0x69, 0xe8, 0x20, 0x89, 0x45, 0x61, 0xd8, 0xa7, 0x55, 0x18, 0x1e,
	0xfa, 0xb0, 0xc6, 0xb2, 0x4d, 0x60, 0xfc, 0x4e, 0xed, 0x9e, 0x75, 0xc7, 0xc0, 0x1a, 0x53, 0x86,
	0x3d, 0x65, 0xb9, 0x28, 0x16, 0x25, 0x55, 0xda, 0xb2, 0xb7, 0xe6, 0x05, 0xfa, 0xfe, 0xf9, 0xaa,
	0xd7, 0x5a, 0xac, 0x94, 0xd6, 0x0a, 0xb2, 0xb6, 0x71, 0xef, 0xe6, 0xca, 0x0a, 0x75, 0xa1, 0x7b,
	0x94, 0x4f, 0x5a, 0x47, 0x86, 0xac, 0x33, 0x7c, 0x04, 0x3a, 0xaf, 0xb5, 0x8f, 0x73, 0x29, 0x2e,
	0x43, 0x97, 0xfd, 0x11, 0xf0, 0xb1, 0x40, 0x88, 0x96, 0xe5, 0xa2, 0xc3, 0x83, 0x99, 0x84, 0x21,
	0x1d, 0xeb, 0x44, 0x1b, 0xd0, 0x37, 0xde, 0x03, 0x0d, 0x0e, 0xc3, 0x3b, 0xe4, 0x30, 0x50, 0x43,
	0xb3, 0x87, 0x39, 0x07, 0xbb, 0x15, 0x2c, 0x12, 0x31, 0x81, 0x54, 0xcb, 0x75, 0xb0, 0xa9, 0x6c,
	0x8d, 0x28, 0xf8, 0x0f, 0xa8, 0xb5, 0xe9, 0xff, 0x2f, 0x3e, 0x18, 0x93, 0xc8, 0xc4, 0x92, 0xad,
	0x53, 0xd5, 0x03, 0x97, 0xe8, 0x46, 0xfd, 0xc2, 0x57, 0x4d, 0xfc, 0x17, 0x3e, 0x75, 0xd7, 0x47,
	0x6a, 0x0f, 0xd5, 0x49, 0xf2, 0xe1, 0x4d, 0xac, 0x22, 0x9b, 0xb0, 0xc3, 0xd6, 0x07, 0x59, 0xc9,
	0xc9, 0x92, 0x00, 0x29, 0xf9, 0x9a, 0x9f, 0x7b, 0x6c, 0xa2, 0xb7, 0x4c, 0xd2, 0x42, 0xcc, 0x7d,
	0xc9, 0x83, 0xc5, 0xa1, 0x42, 0x84, 0xdc, 0xb6, 0x29, 0x0e, 0xb4, 0x0a, 0x61, 0x90, 0x97, 0xc6,
	0x15, 0x59, 0xdf, 0x41, 0x6a, 0x41, 0x52, 0x72, 0xa6, 0x71, 0xb0, 0x24, 0x21, 0xcb, 0xad, 0x24,
	0xd9, 0xd2, 0xa0, 0xdb, 0x61, 0x47, 0xf8, 0xbf, 0x1a, 0x93, 0x7e, 0x0e, 0x5b, 0xc2, 0xc0, 0xd2,
	0x0c, 0xa6, 0xa8, 0x30, 0x35, 0x03, 0x34, 0xb5, 0x08, 0x4d, 0x0d, 0xe9, 0x28, 0xe9, 0x75, 0x52,
	0x37, 0xda, 0x73, 0x65, 0x69, 0x07, 0x19, 0x46, 0x5e, 0xf2, 0xbe, 0x28, 0xa9, 0x6c, 0x92, 0xce,
	0xfe, 0x3b, 0x27, 0xa4, 0x7e, 0xf3, 0x5d, 0x94, 0x0d, 0x27, 0x21, 0x9b, 0xfc, 0xe7, 0x55, 0xe6,
	0x13, 0x18, 0xaf, 0xa3, 0x7f, 0x92, 0xf1, 0x32, 0xcd, 0xb8, 0x70, 0x2a, 0x05, 0xe0, 0xca, 0xdb,
	0xe3, 0xd2, 0x00, 0xf3, 0x2a, 0xf3, 0x29, 0x8c, 0xd7, 0x01, 0x28, 0xc9, 0x3e, 0x44, 0xb3, 0xbf,
	0x7b, 0x3a, 0x0c, 0x75, 0xa5, 0x67, 0xdc, 0x28, 0x3a, 0xaf, 0x32, 0x7f, 0x0c, 0xbb, 0xf4, 0x75,
	0xeb, 0x58, 0xb2, 0xdf, 0x77, 0x1e, 0x19, 0x7c, 0x06, 0x1e, 0x3f, 0x8c, 0x53, 0xdc, 0x20, 0xc4,
	0x6a, 0xfa, 0x23, 0x1d, 0xa9, 0x1a, 0x39, 0x9d, 0x42, 0x50, 0x5f, 0x37, 0xcf, 0x20, 0xf3, 0x27,
	0x30, 0x42, 0xff, 0x0d, 0x87, 0xac, 0xd0, 0xf5, 0x2d, 0xb0, 0x2f, 0x3a, 0x8f, 0x23, 0x74, 0x6a,
	0x9d, 0x69, 0xec, 0x30, 0xb9, 0x74, 0xd3, 0xba, 0x32, 0x5b, 0x7e, 0x62, 0x00, 0x15, 0x5e, 0x86,
	0xe7, 0x68, 0x15, 0x45, 0xdc, 0x92, 0xab, 0xa8, 0x60, 0x96, 0x7b, 0x0c, 0x4c, 0x71, 0x99, 0x71,
	0x2e, 0xc3, 0x4d, 0x70, 0xd7, 0xe1, 0x1b, 0x30, 0x6e, 0x16, 0x5a, 0x38, 0x87, 0x92, 0x2b, 0xf6,
	0xe3, 0x32, 0x51, 0x52, 0x92, 0x4c, 0x71, 0xa9, 0x09, 0x8e, 0x36, 0x55, 0xe0, 0xeb, 0xf0, 0xbc,
	0x5d, 0x72, 0x2d, 0x60, 0x65, 0x5d, 0xce, 0x97, 0x08, 0xb2, 0x61, 0x85, 0x09, 0xa5, 0xc7, 0xb9,
	0x74, 0x86, 0x4b, 0x4f, 0x70, 0xe9, 0x19, 0xfe, 0x0d, 0x18, 0x31, 0x0f, 0xb5, 0xb3, 0xc5, 0xef,
	0x7b, 0x66, 0x80, 0x04, 0x6d, 0xef, 0x73, 0xc9, 0x4c, 0x8a, 0x3c, 0x2d, 0xcf, 0xc1, 0x2e, 0xfb,
	0xdf, 0xa6, 0x30, 0x97, 0xf6, 0x0c, 0xd0, 0xfe, 0xcc, 0x00, 0x81, 0x7d, 0x03, 0x74, 0x4f, 0x72,
	0x53, 0x5c, 0xea, 0x3a, 0x97, 0x49, 0x73, 0x99, 0x0c, 0x97, 0x99, 0xa0, 0xd6, 0x17, 0x21, 0xcc,
	0xa1, 0x62, 0x01, 0x6f, 0x6f, 0x21, 0x45, 0xa7, 0xaf, 0x3b, 0x82, 0x56, 0x8f, 0xcb, 0x3f, 0xcd,
	0xcd, 0xf0, 0xc3, 0x30, 0xec, 0x44, 0x24, 0x86, 0xdd, 0x33, 0xc0, 0xa0, 0x55, 0x0f, 0x5d, 0xdc,
	0x37, 0x40, 0x30, 0x35, 0xc9, 0xd1, 0x37, 0x0b, 0xfc, 0x08, 0x8c, 0x53, 0xaa, 0xaa, 0x52, 0x83,
	0xf3, 0x29, 0x7b, 0x2d, 0x8f, 0x38, 0x7d, 0xd2, 0x14, 0x97, 0x4e, 0x2f, 0x07, 0x82, 0x89, 0xd8,
	0xa5, 0xe5, 0x40, 0x30, 0x10, 0x6b, 0xb7, 0xdb, 0x46, 0x17, 0x63, 0x09, 0xbb, 0x79, 0x14, 0x8f,
	0xf5, 0x0e, 0x7d, 0x19, 0x85, 0xd1, 0x05, 0x15, 0x49, 0x3a, 0xb2, 0x0b, 0xa5, 0xd7, 0xbd, 0x0b,
	0x25, 0x77, 0x5d, 0x74, 0xc5, 0xab, 0x2c, 0x72, 0x17, 0x0b, 0x6f, 0x9f, 0xac, 0x58, 0xb0, 0xca,
	0x84, 0xfb, 0xaf, 0xb8, 0x4c, 0xa8, 0x2d, 0x10, 0xf0, 0x59, 0x16, 0x08, 0xbf, 0x80, 0xd2, 0xe0,
	0xb2, 0x57, 0x65, 0x50, 0xab, 0x9f, 0xfb, 0x5c, 0xea, 0xd4, 0x56, 0xa3, 0x43, 0x5e, 0x6a, 0x74,
	0x29, 0x50, 0xa3, 0x3c, 0x07, 0xea, 0x94, 0xa7, 0x43, 0x61, 0xfe, 0xe9, 0x99, 0x2a, 0x4c, 0x4f,
	0x6d, 0xc9, 0xba, 0xb4, 0xe5, 0x4b, 0x2d, 0x39, 0x7f, 0x12, 0x2d, 0x59, 0xab, 0x22, 0x6f, 0x9f,
	0x48, 0x45, 0x2e, 0xf9, 0x1b, 0xe9, 0xc7, 0x3f, 0x3c, 0xb1, 0x7e, 0xec, 0x76, 0xe9, 0xc7, 0x25,
	0x7f, 0xad, 0x76, 0xfc, 0xdd, 0x93, 0x69, 0xc7, 0x80, 0xad, 0x1b, 0xe7, 0x4e, 0xa4, 0x1b, 0x03,
	0xb6, 0x66, 0xbc, 0xec, 0xa1, 0xdd, 0xc8, 0xd6, 0x39, 0xb9, 0x4e, 0x0b, 0xb8, 0x75, 0xda, 0x5b,
	0x8d, 0x64, 0x9a, 0x97, 0x28, 0xc9, 0x9e, 0x85, 0x28, 0x71, 0xcb, 0x91, 0xf2, 0x99, 0xcb, 0x11,
	0x6f, 0x21, 0xf2, 0xe0, 0xec, 0x85, 0x88, 0xb7, 0x04, 0x99, 0xed, 0x79, 0x3a, 0xe7, 0x6a, 0xc1,
	0xf1, 0x43, 0x6e, 0x7a, 0xed, 0xd9, 0x3d, 0x00, 0xb5, 0x97, 0xf8, 0x7e, 0x27, 0xb5, 0x46, 0x76,
	0x0f, 0xc0, 0xcb, 0xaf, 0xfc, 0x60, 0x0d, 0x91, 0x46, 0x77, 0x0f, 0x80, 0xe3, 0x3b, 0x3f, 0xde,
	0x80, 0x1d, 0xd9, 0xdd, 0x03, 0xe0, 0x79, 0x87, 0x4f, 0xba, 0x98, 0x37, 0xb6, 0x7b, 0x00, 0x6a,
	0xae, 0xb8, 0xc8, 0xd3, 0x7c, 0x8b, 0x1f, 0x89, 0x45, 0x2d, 0xf2, 0xfc, 0x0f, 0x08, 0xbb, 0xad,
	0x57, 0x2b, 0x36, 0x7b, 0xca, 0x1e, 0x9c, 0xc5, 0x9f, 0x70, 0x2b, 0x39, 0x5e, 0xdb, 0x58, 0x6a,
	0xaf, 0xcd, 0x49, 0x60, 0x9f, 0x34, 0x26, 0xb0, 0xa5, 0x53, 0x6d, 0x28, 0xaf, 0xbc, 0x75, 0x6c,
	0xe6, 0x4d, 0x01, 0xbe, 0x1a, 0x0a, 0xf8, 0xb4, 0x31, 0xca, 0xdf, 0x3c, 0xdd, 0xd6, 0xf3, 0x7a,
	0xc4, 0x5f, 0x06, 0xe4, 0x83, 0x9f, 0x00, 0xf2, 0x41, 0x2d, 0xe4, 0x7b, 0x22, 0xae, 0xef, 0x34,
	0x88, 0xeb, 0x73, 0x23, 0xae, 0xe2, 0x0d, 0xa2, 0xaf, 0x72, 0xe7, 0xd7, 0xe0, 0xe9, 0x9f, 0x83,
	0xa6, 0x80, 0xfa, 0xea, 0xf7, 0xbf, 0x07, 0xb6, 0x7e, 0x0e, 0x9a, 0x82, 0xeb, 0x19, 0xec, 0x70,
	0x2f, 0x9c, 0xbd, 0x53, 0x87, 0xb3, 0x4f, 0x0c, 0x30, 0x0b, 0xcf, 0xc3, 0x1e, 0xeb, 0xed, 0x93,
	0xac, 0xe4, 0xad, 0x9a, 0x87, 0x01, 0x13, 0x30, 0xd9, 0xa0, 0x62, 0x0a, 0xd2, 0x42, 0x89, 0x14,
	0x41, 0xcd, 0x10, 0xf8, 0x2c, 0x31, 0xd6, 0x8d, 0xae, 0xff, 0xdc, 0x0d, 0x43, 0x8b, 0x48, 0x6f,
	0xd5, 0x25, 0xad, 0xba, 0xc4, 0x5d, 0x97, 0xcc, 0x1e, 0xda, 0xd7, 0x6f, 0xdc, 0xc1, 0x9f, 0x3e,
	0xac, 0x83, 0xdf, 0xb0, 0x57, 0xdf, 0xaa, 0x86, 0x7e, 0x7d, 0xd5, 0xd0, 0xdb, 0x10, 0x52, 0x74,
	0xd3, 0x74, 0x49, 0x47, 0xb4, 0x2a, 0x8a, 0xa6, 0x2f, 0x7a, 0x8d, 0xb5, 0xfa, 0x4b, 0x09, 0x24,
	0x50, 0x38, 0xa4, 0x1f, 0x99, 0xbb, 0xaf, 0xa2, 0xfd, 0x5d, 0xd7, 0xdc, 0x6e, 0x15, 0x48, 0xbf,
	0x15, 0x05, 0x52, 0xbc, 0x8e, 0xb8, 0x5f, 0xcc, 0x81, 0x5f, 0x7c, 0x8d, 0x14, 0x8f, 0xf5, 0xf2,
	0x5f, 0x80, 0x67, 0xdf, 0x26, 0xda, 0xbe, 0xf9, 0x36, 0xd1, 0xf6, 0xc3, 0xb7, 0x09, 0xf0, 0xd9,
	0x7e, 0x02, 0xfc, 0xe3, 0x7e, 0x02, 0x7c, 0xbd, 0x9f, 0x00, 0xcf, 0xf6, 0x13, 0xe0, 0x9b, 0xfd,
	0x04, 0xf8, 0xaf, 0xfd, 0x04, 0x78, 0xb1, 0x9f, 0x68, 0xfb, 0x61, 0x3f, 0x01, 0xfe, 0xe6, 0xbb,
	0x44, 0xdb, 0xde, 0x77, 0x09, 0xf0, 0x47, 0x1f, 0xe5, 0x71, 0x71, 0x33, 0x3f, 0x5a, 0x05, 0xee,
	0xd1, 0x92, 0x36, 0x66, 0xf7, 0xa2, 0x47, 0x8a, 0x2a, 0x2e, 0xcb, 0x39, 0xa4, 0x8e, 0x54, 0x6f,
	0x8f, 0x15, 0xd7, 0xf2, 0x78, 0x0c, 0x3d, 0xd0, 0xab, 0x7f, 0xad, 0xa8, 0xc9, 0x9f, 0x60, 0x5a,
	0xeb, 0xa0, 0x7f, 0x1e, 0x28, 0xf3, 0xff, 0x01, 0x00, 0x00, 0xff, 0xff, 0x09, 0xbf, 0x1b, 0x12,
	0xb0, 0x49, 0x00, 0x00,
}
