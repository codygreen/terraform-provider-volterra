// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ves.io/schema/views/azure_vnet_site/public_customapi.proto

package azure_vnet_site

import proto "github.com/gogo/protobuf/proto"
import golang_proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"
import _ "github.com/gogo/googleapis/google/api"
import _ "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
import ves_io_schema_site "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/site"
import _ "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
import _ "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/vesenv"
import _ "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"

import strings "strings"
import reflect "reflect"

import context "golang.org/x/net/context"
import grpc "google.golang.org/grpc"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Request to configure Azure Vnet Site VIP information
//
// x-displayName: "Request to configure Azure Vnet Site VIP information"
// Request to configure Azure Vnet Site VIP information
type SetVIPInfoRequest struct {
	// Namespace
	//
	// x-displayName: "Namespace"
	// x-example: "default"
	// Namespace for the object to be configured
	Namespace string `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// Name
	//
	// x-displayName: "Name"
	// x-example: "aws-vpc-site-1"
	// Name of the object to be configured
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// VIP Params Per AZ
	//
	// x-displayName: "VIP Params Per AZ"
	// x-example: "master-0"
	// VIP Parameters per AZ
	VipParamsPerAz []*ves_io_schema_site.PublishVIPParamsPerAz `protobuf:"bytes,3,rep,name=vip_params_per_az,json=vipParamsPerAz" json:"vip_params_per_az,omitempty"`
}

func (m *SetVIPInfoRequest) Reset()                    { *m = SetVIPInfoRequest{} }
func (*SetVIPInfoRequest) ProtoMessage()               {}
func (*SetVIPInfoRequest) Descriptor() ([]byte, []int) { return fileDescriptorPublicCustomapi, []int{0} }

func (m *SetVIPInfoRequest) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *SetVIPInfoRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *SetVIPInfoRequest) GetVipParamsPerAz() []*ves_io_schema_site.PublishVIPParamsPerAz {
	if m != nil {
		return m.VipParamsPerAz
	}
	return nil
}

// Response to configure Azure Vnet Site VIP Information
//
// x-displayName: "Response to configure Azure Vnet Site VIP Information"
type SetVIPInfoResponse struct {
}

func (m *SetVIPInfoResponse) Reset()      { *m = SetVIPInfoResponse{} }
func (*SetVIPInfoResponse) ProtoMessage() {}
func (*SetVIPInfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptorPublicCustomapi, []int{1}
}

func init() {
	proto.RegisterType((*SetVIPInfoRequest)(nil), "ves.io.schema.views.azure_vnet_site.SetVIPInfoRequest")
	golang_proto.RegisterType((*SetVIPInfoRequest)(nil), "ves.io.schema.views.azure_vnet_site.SetVIPInfoRequest")
	proto.RegisterType((*SetVIPInfoResponse)(nil), "ves.io.schema.views.azure_vnet_site.SetVIPInfoResponse")
	golang_proto.RegisterType((*SetVIPInfoResponse)(nil), "ves.io.schema.views.azure_vnet_site.SetVIPInfoResponse")
}
func (this *SetVIPInfoRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SetVIPInfoRequest)
	if !ok {
		that2, ok := that.(SetVIPInfoRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Namespace != that1.Namespace {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if len(this.VipParamsPerAz) != len(that1.VipParamsPerAz) {
		return false
	}
	for i := range this.VipParamsPerAz {
		if !this.VipParamsPerAz[i].Equal(that1.VipParamsPerAz[i]) {
			return false
		}
	}
	return true
}
func (this *SetVIPInfoResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SetVIPInfoResponse)
	if !ok {
		that2, ok := that.(SetVIPInfoResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *SetVIPInfoRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&azure_vnet_site.SetVIPInfoRequest{")
	s = append(s, "Namespace: "+fmt.Sprintf("%#v", this.Namespace)+",\n")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	if this.VipParamsPerAz != nil {
		s = append(s, "VipParamsPerAz: "+fmt.Sprintf("%#v", this.VipParamsPerAz)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SetVIPInfoResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&azure_vnet_site.SetVIPInfoResponse{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringPublicCustomapi(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for CustomAPI service

type CustomAPIClient interface {
	// Configure Azure Vnet Site VIP Information
	//
	// x-displayName: "Configure Azure Vnet Site VIP Information"
	// Configure Azure Vnet Site VIP Information
	SetVIPInfo(ctx context.Context, in *SetVIPInfoRequest, opts ...grpc.CallOption) (*SetVIPInfoResponse, error)
}

type customAPIClient struct {
	cc *grpc.ClientConn
}

func NewCustomAPIClient(cc *grpc.ClientConn) CustomAPIClient {
	return &customAPIClient{cc}
}

func (c *customAPIClient) SetVIPInfo(ctx context.Context, in *SetVIPInfoRequest, opts ...grpc.CallOption) (*SetVIPInfoResponse, error) {
	out := new(SetVIPInfoResponse)
	err := grpc.Invoke(ctx, "/ves.io.schema.views.azure_vnet_site.CustomAPI/SetVIPInfo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for CustomAPI service

type CustomAPIServer interface {
	// Configure Azure Vnet Site VIP Information
	//
	// x-displayName: "Configure Azure Vnet Site VIP Information"
	// Configure Azure Vnet Site VIP Information
	SetVIPInfo(context.Context, *SetVIPInfoRequest) (*SetVIPInfoResponse, error)
}

func RegisterCustomAPIServer(s *grpc.Server, srv CustomAPIServer) {
	s.RegisterService(&_CustomAPI_serviceDesc, srv)
}

func _CustomAPI_SetVIPInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetVIPInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomAPIServer).SetVIPInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ves.io.schema.views.azure_vnet_site.CustomAPI/SetVIPInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomAPIServer).SetVIPInfo(ctx, req.(*SetVIPInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _CustomAPI_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ves.io.schema.views.azure_vnet_site.CustomAPI",
	HandlerType: (*CustomAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SetVIPInfo",
			Handler:    _CustomAPI_SetVIPInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ves.io/schema/views/azure_vnet_site/public_customapi.proto",
}

func (m *SetVIPInfoRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SetVIPInfoRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Namespace) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPublicCustomapi(dAtA, i, uint64(len(m.Namespace)))
		i += copy(dAtA[i:], m.Namespace)
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintPublicCustomapi(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.VipParamsPerAz) > 0 {
		for _, msg := range m.VipParamsPerAz {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintPublicCustomapi(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *SetVIPInfoResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SetVIPInfoResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func encodeVarintPublicCustomapi(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *SetVIPInfoRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	if len(m.VipParamsPerAz) > 0 {
		for _, e := range m.VipParamsPerAz {
			l = e.Size()
			n += 1 + l + sovPublicCustomapi(uint64(l))
		}
	}
	return n
}

func (m *SetVIPInfoResponse) Size() (n int) {
	var l int
	_ = l
	return n
}

func sovPublicCustomapi(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozPublicCustomapi(x uint64) (n int) {
	return sovPublicCustomapi(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *SetVIPInfoRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SetVIPInfoRequest{`,
		`Namespace:` + fmt.Sprintf("%v", this.Namespace) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`VipParamsPerAz:` + strings.Replace(fmt.Sprintf("%v", this.VipParamsPerAz), "PublishVIPParamsPerAz", "ves_io_schema_site.PublishVIPParamsPerAz", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SetVIPInfoResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SetVIPInfoResponse{`,
		`}`,
	}, "")
	return s
}
func valueToStringPublicCustomapi(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *SetVIPInfoRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCustomapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SetVIPInfoRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SetVIPInfoRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VipParamsPerAz", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VipParamsPerAz = append(m.VipParamsPerAz, &ves_io_schema_site.PublishVIPParamsPerAz{})
			if err := m.VipParamsPerAz[len(m.VipParamsPerAz)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCustomapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SetVIPInfoResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCustomapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SetVIPInfoResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SetVIPInfoResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCustomapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPublicCustomapi(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPublicCustomapi
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthPublicCustomapi
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowPublicCustomapi
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipPublicCustomapi(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthPublicCustomapi = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPublicCustomapi   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("ves.io/schema/views/azure_vnet_site/public_customapi.proto", fileDescriptorPublicCustomapi)
}
func init() {
	golang_proto.RegisterFile("ves.io/schema/views/azure_vnet_site/public_customapi.proto", fileDescriptorPublicCustomapi)
}

var fileDescriptorPublicCustomapi = []byte{
	// 568 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x93, 0xbf, 0x6f, 0x13, 0x3f,
	0x18, 0xc6, 0xe3, 0xe4, 0xfb, 0x45, 0xf4, 0x10, 0x88, 0x9e, 0x18, 0xa2, 0x50, 0x59, 0x55, 0x58,
	0x4a, 0xc5, 0xd9, 0xd0, 0x4a, 0x80, 0xba, 0xb5, 0x0c, 0x28, 0x13, 0xa7, 0x22, 0x55, 0x82, 0xe5,
	0xe4, 0xbb, 0xbe, 0xb9, 0x1a, 0x72, 0x67, 0x63, 0xfb, 0xae, 0x10, 0x54, 0x09, 0x75, 0x65, 0x41,
	0xf0, 0x4f, 0x20, 0x56, 0x36, 0xba, 0x64, 0x83, 0x09, 0x55, 0xb0, 0x30, 0x92, 0x2b, 0x03, 0x88,
	0xa5, 0x7f, 0x02, 0x8a, 0x93, 0xb4, 0xf9, 0x21, 0xa1, 0xb0, 0xbd, 0xef, 0x7d, 0xfc, 0x9c, 0x1f,
	0xbf, 0x7e, 0xec, 0xac, 0xe5, 0xa0, 0x09, 0x17, 0x54, 0x47, 0x3b, 0x90, 0x30, 0x9a, 0x73, 0xd8,
	0xd5, 0x94, 0xb5, 0x33, 0x05, 0x41, 0x9e, 0x82, 0x09, 0x34, 0x37, 0x40, 0x65, 0x16, 0xb6, 0x78,
	0x14, 0x44, 0x99, 0x36, 0x22, 0x61, 0x92, 0x13, 0xa9, 0x84, 0x11, 0xee, 0x95, 0xbe, 0x96, 0xf4,
	0xb5, 0xc4, 0x6a, 0xc9, 0x84, 0xb6, 0xe6, 0xc5, 0xdc, 0xec, 0x64, 0x21, 0x89, 0x44, 0x42, 0x63,
	0x11, 0x0b, 0x6a, 0xb5, 0x61, 0xd6, 0xb4, 0x9d, 0x6d, 0x6c, 0xd5, 0xff, 0x67, 0x6d, 0x21, 0x16,
	0x22, 0x6e, 0x01, 0x65, 0x92, 0x53, 0x96, 0xa6, 0xc2, 0x30, 0xc3, 0x45, 0xaa, 0x07, 0xf4, 0xf2,
	0xb8, 0x5b, 0x21, 0x47, 0x21, 0x1e, 0x87, 0xd6, 0xb9, 0x79, 0x26, 0x61, 0xc8, 0x17, 0x26, 0x8e,
	0xca, 0x5a, 0x7c, 0x9b, 0x19, 0x18, 0xd0, 0xfa, 0x04, 0x05, 0x0d, 0x69, 0x3e, 0xb1, 0xc3, 0xe2,
	0xf4, 0xb0, 0x82, 0xf1, 0x15, 0xd7, 0x67, 0x19, 0xa7, 0x08, 0x1f, 0x41, 0x64, 0x06, 0x0a, 0x3a,
	0x8b, 0x62, 0xe4, 0x18, 0xf5, 0x77, 0xc8, 0x99, 0xbf, 0x0f, 0x66, 0xab, 0xe1, 0x37, 0xd2, 0xa6,
	0xd8, 0x84, 0x27, 0x19, 0x68, 0xe3, 0x2e, 0x38, 0x73, 0x29, 0x4b, 0x40, 0x4b, 0x16, 0x41, 0x15,
	0x2d, 0xa2, 0xa5, 0xb9, 0xcd, 0xd3, 0x0f, 0xae, 0xeb, 0xfc, 0xd7, 0x6b, 0xaa, 0x65, 0x0b, 0x6c,
	0xed, 0x46, 0xce, 0x7c, 0xce, 0x65, 0x20, 0x99, 0x62, 0x89, 0x0e, 0x24, 0xa8, 0x80, 0xb5, 0xab,
	0x95, 0xc5, 0xca, 0xd2, 0xb9, 0x95, 0xab, 0x64, 0xfc, 0x66, 0x7b, 0x1e, 0x88, 0xdf, 0x0b, 0x81,
	0xde, 0xd9, 0x6a, 0xf8, 0xbe, 0x95, 0xf8, 0xa0, 0xd6, 0xdb, 0x1b, 0xe7, 0x3f, 0xfc, 0xea, 0x54,
	0xce, 0xbe, 0x46, 0xff, 0x2f, 0x57, 0x6e, 0x5c, 0x5b, 0xdd, 0xbc, 0x90, 0x73, 0x39, 0x82, 0xeb,
	0x97, 0x1c, 0x77, 0xd4, 0xab, 0x96, 0x22, 0xd5, 0xb0, 0xf2, 0xbe, 0xec, 0xcc, 0xdd, 0xb1, 0x61,
	0x5a, 0xf7, 0x1b, 0xee, 0x6f, 0xe4, 0x38, 0xa7, 0x8b, 0xdc, 0x9b, 0x64, 0x86, 0x58, 0x91, 0xa9,
	0x09, 0xd4, 0x6e, 0xfd, 0xb3, 0xae, 0xef, 0xa6, 0xde, 0x2a, 0x3e, 0x56, 0x7b, 0xc1, 0xf2, 0xb8,
	0xf0, 0x78, 0xda, 0x54, 0x4c, 0x1b, 0x95, 0x45, 0x26, 0x53, 0xe0, 0xed, 0x2a, 0x6e, 0x60, 0xff,
	0xeb, 0x8f, 0x37, 0xe5, 0xbb, 0xf5, 0x8d, 0xc1, 0x33, 0xa0, 0x27, 0x63, 0xd5, 0xf4, 0xf9, 0x49,
	0xbd, 0x37, 0x75, 0x67, 0x96, 0xed, 0x51, 0x0d, 0x26, 0xe8, 0xcd, 0x99, 0xa7, 0x4d, 0xb1, 0x86,
	0x96, 0x6b, 0xb7, 0x3b, 0x07, 0xa8, 0xf2, 0xe5, 0x00, 0x2d, 0xcf, 0xe2, 0xf6, 0x9e, 0x4d, 0xca,
	0xfe, 0xe7, 0x6a, 0xf9, 0x22, 0xda, 0x78, 0x89, 0x0e, 0xbb, 0xb8, 0xf4, 0xad, 0x8b, 0x4b, 0xc7,
	0x5d, 0x8c, 0x5e, 0x14, 0x18, 0xbd, 0x2d, 0x30, 0xfa, 0x54, 0x60, 0x74, 0x58, 0x60, 0xf4, 0xbd,
	0xc0, 0xe8, 0x67, 0x81, 0x4b, 0xc7, 0x05, 0x46, 0xaf, 0x8e, 0x70, 0xa9, 0x73, 0x84, 0xd1, 0xc3,
	0x07, 0xb1, 0x90, 0x8f, 0x63, 0x92, 0x8b, 0x96, 0x01, 0xa5, 0x18, 0xc9, 0x34, 0xb5, 0x45, 0x53,
	0xa8, 0xc4, 0x93, 0x4a, 0xe4, 0x7c, 0x1b, 0x94, 0x37, 0xc4, 0x54, 0x86, 0xb1, 0xa0, 0xf0, 0xd4,
	0x0c, 0x5f, 0xd0, 0x5f, 0x22, 0x19, 0x9e, 0xb1, 0x69, 0x5c, 0xfd, 0x13, 0x00, 0x00, 0xff, 0xff,
	0x8e, 0x83, 0xad, 0x96, 0x41, 0x04, 0x00, 0x00,
}
