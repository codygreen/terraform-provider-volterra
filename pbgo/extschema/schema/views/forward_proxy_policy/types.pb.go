// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ves.io/schema/views/forward_proxy_policy/types.proto

package forward_proxy_policy

import proto "github.com/gogo/protobuf/proto"
import golang_proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"
import _ "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
import _ "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
import ves_io_schema_policy "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/policy"
import ves_io_schema4 "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
import _ "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
import _ "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
import _ "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/views"
import ves_io_schema_views "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/views"

import strings "strings"
import reflect "reflect"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// URL
//
// x-displayName: "URL"
// URL strings in form "http://<domian>/<path>"
type URLType struct {
	// Select Domain
	//
	// x-displayName: "Enter Domain"
	// x-required
	// Domain part of the URL
	//
	// Types that are valid to be assigned to DomainChoice:
	//	*URLType_ExactValue
	//	*URLType_SuffixValue
	//	*URLType_RegexValue
	DomainChoice isURLType_DomainChoice `protobuf_oneof:"domain_choice"`
	// Select Path for Domain
	//
	// x-displayName: "Enter Path"
	// x-required
	// Path part of the URL
	//
	// Types that are valid to be assigned to PathChoice:
	//	*URLType_PathExactValue
	//	*URLType_PathPrefixValue
	//	*URLType_PathRegexValue
	//	*URLType_AnyPath
	PathChoice isURLType_PathChoice `protobuf_oneof:"path_choice"`
}

func (m *URLType) Reset()                    { *m = URLType{} }
func (*URLType) ProtoMessage()               {}
func (*URLType) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{0} }

type isURLType_DomainChoice interface {
	isURLType_DomainChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isURLType_PathChoice interface {
	isURLType_PathChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type URLType_ExactValue struct {
	ExactValue string `protobuf:"bytes,1,opt,name=exact_value,json=exactValue,proto3,oneof"`
}
type URLType_SuffixValue struct {
	SuffixValue string `protobuf:"bytes,2,opt,name=suffix_value,json=suffixValue,proto3,oneof"`
}
type URLType_RegexValue struct {
	RegexValue string `protobuf:"bytes,3,opt,name=regex_value,json=regexValue,proto3,oneof"`
}
type URLType_PathExactValue struct {
	PathExactValue string `protobuf:"bytes,4,opt,name=path_exact_value,json=pathExactValue,proto3,oneof"`
}
type URLType_PathPrefixValue struct {
	PathPrefixValue string `protobuf:"bytes,5,opt,name=path_prefix_value,json=pathPrefixValue,proto3,oneof"`
}
type URLType_PathRegexValue struct {
	PathRegexValue string `protobuf:"bytes,6,opt,name=path_regex_value,json=pathRegexValue,proto3,oneof"`
}
type URLType_AnyPath struct {
	AnyPath *ves_io_schema4.Empty `protobuf:"bytes,9,opt,name=any_path,json=anyPath,oneof"`
}

func (*URLType_ExactValue) isURLType_DomainChoice()    {}
func (*URLType_SuffixValue) isURLType_DomainChoice()   {}
func (*URLType_RegexValue) isURLType_DomainChoice()    {}
func (*URLType_PathExactValue) isURLType_PathChoice()  {}
func (*URLType_PathPrefixValue) isURLType_PathChoice() {}
func (*URLType_PathRegexValue) isURLType_PathChoice()  {}
func (*URLType_AnyPath) isURLType_PathChoice()         {}

func (m *URLType) GetDomainChoice() isURLType_DomainChoice {
	if m != nil {
		return m.DomainChoice
	}
	return nil
}
func (m *URLType) GetPathChoice() isURLType_PathChoice {
	if m != nil {
		return m.PathChoice
	}
	return nil
}

func (m *URLType) GetExactValue() string {
	if x, ok := m.GetDomainChoice().(*URLType_ExactValue); ok {
		return x.ExactValue
	}
	return ""
}

func (m *URLType) GetSuffixValue() string {
	if x, ok := m.GetDomainChoice().(*URLType_SuffixValue); ok {
		return x.SuffixValue
	}
	return ""
}

func (m *URLType) GetRegexValue() string {
	if x, ok := m.GetDomainChoice().(*URLType_RegexValue); ok {
		return x.RegexValue
	}
	return ""
}

func (m *URLType) GetPathExactValue() string {
	if x, ok := m.GetPathChoice().(*URLType_PathExactValue); ok {
		return x.PathExactValue
	}
	return ""
}

func (m *URLType) GetPathPrefixValue() string {
	if x, ok := m.GetPathChoice().(*URLType_PathPrefixValue); ok {
		return x.PathPrefixValue
	}
	return ""
}

func (m *URLType) GetPathRegexValue() string {
	if x, ok := m.GetPathChoice().(*URLType_PathRegexValue); ok {
		return x.PathRegexValue
	}
	return ""
}

func (m *URLType) GetAnyPath() *ves_io_schema4.Empty {
	if x, ok := m.GetPathChoice().(*URLType_AnyPath); ok {
		return x.AnyPath
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*URLType) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _URLType_OneofMarshaler, _URLType_OneofUnmarshaler, _URLType_OneofSizer, []interface{}{
		(*URLType_ExactValue)(nil),
		(*URLType_SuffixValue)(nil),
		(*URLType_RegexValue)(nil),
		(*URLType_PathExactValue)(nil),
		(*URLType_PathPrefixValue)(nil),
		(*URLType_PathRegexValue)(nil),
		(*URLType_AnyPath)(nil),
	}
}

func _URLType_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*URLType)
	// domain_choice
	switch x := m.DomainChoice.(type) {
	case *URLType_ExactValue:
		_ = b.EncodeVarint(1<<3 | proto.WireBytes)
		_ = b.EncodeStringBytes(x.ExactValue)
	case *URLType_SuffixValue:
		_ = b.EncodeVarint(2<<3 | proto.WireBytes)
		_ = b.EncodeStringBytes(x.SuffixValue)
	case *URLType_RegexValue:
		_ = b.EncodeVarint(3<<3 | proto.WireBytes)
		_ = b.EncodeStringBytes(x.RegexValue)
	case nil:
	default:
		return fmt.Errorf("URLType.DomainChoice has unexpected type %T", x)
	}
	// path_choice
	switch x := m.PathChoice.(type) {
	case *URLType_PathExactValue:
		_ = b.EncodeVarint(4<<3 | proto.WireBytes)
		_ = b.EncodeStringBytes(x.PathExactValue)
	case *URLType_PathPrefixValue:
		_ = b.EncodeVarint(5<<3 | proto.WireBytes)
		_ = b.EncodeStringBytes(x.PathPrefixValue)
	case *URLType_PathRegexValue:
		_ = b.EncodeVarint(6<<3 | proto.WireBytes)
		_ = b.EncodeStringBytes(x.PathRegexValue)
	case *URLType_AnyPath:
		_ = b.EncodeVarint(9<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.AnyPath); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("URLType.PathChoice has unexpected type %T", x)
	}
	return nil
}

func _URLType_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*URLType)
	switch tag {
	case 1: // domain_choice.exact_value
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.DomainChoice = &URLType_ExactValue{x}
		return true, err
	case 2: // domain_choice.suffix_value
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.DomainChoice = &URLType_SuffixValue{x}
		return true, err
	case 3: // domain_choice.regex_value
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.DomainChoice = &URLType_RegexValue{x}
		return true, err
	case 4: // path_choice.path_exact_value
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.PathChoice = &URLType_PathExactValue{x}
		return true, err
	case 5: // path_choice.path_prefix_value
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.PathChoice = &URLType_PathPrefixValue{x}
		return true, err
	case 6: // path_choice.path_regex_value
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.PathChoice = &URLType_PathRegexValue{x}
		return true, err
	case 9: // path_choice.any_path
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.PathChoice = &URLType_AnyPath{msg}
		return true, err
	default:
		return false, nil
	}
}

func _URLType_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*URLType)
	// domain_choice
	switch x := m.DomainChoice.(type) {
	case *URLType_ExactValue:
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.ExactValue)))
		n += len(x.ExactValue)
	case *URLType_SuffixValue:
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.SuffixValue)))
		n += len(x.SuffixValue)
	case *URLType_RegexValue:
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.RegexValue)))
		n += len(x.RegexValue)
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	// path_choice
	switch x := m.PathChoice.(type) {
	case *URLType_PathExactValue:
		n += proto.SizeVarint(4<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.PathExactValue)))
		n += len(x.PathExactValue)
	case *URLType_PathPrefixValue:
		n += proto.SizeVarint(5<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.PathPrefixValue)))
		n += len(x.PathPrefixValue)
	case *URLType_PathRegexValue:
		n += proto.SizeVarint(6<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.PathRegexValue)))
		n += len(x.PathRegexValue)
	case *URLType_AnyPath:
		s := proto.Size(x.AnyPath)
		n += proto.SizeVarint(9<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// Forward Proxy Rule
//
// x-displayName: "Forward Proxy Rule"
// URL(s) and domains policy for forward proxy for a connection type (TLS or HTTP)
type ForwardProxySimpleRuleType struct {
	// metadata
	//
	// x-displayName: "Metadata"
	// x-required
	// Common attributes for the rule including name and description.
	Metadata *ves_io_schema4.MessageMetaType `protobuf:"bytes,10,opt,name=metadata" json:"metadata,omitempty"`
	// Name
	//
	// x-displayName: "Name"
	// x-example: "my-policy-allow-github.com"
	// Rule Name that will be used to query metrics for this rule.
	RuleName string `protobuf:"bytes,4,opt,name=rule_name,json=ruleName,proto3" json:"rule_name,omitempty"`
	// Description
	//
	// x-displayName: "Description"
	// x-example: "Rule to block example.com"
	// Human readable description for the rule
	RuleDescription string `protobuf:"bytes,5,opt,name=rule_description,json=ruleDescription,proto3" json:"rule_description,omitempty"`
	// TLS Domains
	//
	// x-displayName: "TLS Domains"
	// Domains in SNI for TLS connections
	TlsList []*ves_io_schema4.DomainType `protobuf:"bytes,1,rep,name=tls_list,json=tlsList" json:"tls_list,omitempty"`
	// HTTP URLs
	//
	// x-displayName: "HTTP URLs"
	// URLs for HTTP connections
	HttpList []*URLType `protobuf:"bytes,2,rep,name=http_list,json=httpList" json:"http_list,omitempty"`
	// L4 Destinations
	//
	// x-displayName: "L4 Destination List"
	// L4 destinations for non-HTTP and non-TLS connections and TLS connections without SNI
	DestList []*ves_io_schema4.L4DestType `protobuf:"bytes,3,rep,name=dest_list,json=destList" json:"dest_list,omitempty"`
	// Default Action
	//
	// x-displayName: "Default Action"
	// x-required
	// Default action for connections that do not match any items in the HTTP, TLS and L4 lists
	//
	// Types that are valid to be assigned to DefaultActionChoice:
	//	*ForwardProxySimpleRuleType_DefaultActionNextPolicy
	//	*ForwardProxySimpleRuleType_DefaultActionDeny
	//	*ForwardProxySimpleRuleType_DefaultActionAllow
	DefaultActionChoice isForwardProxySimpleRuleType_DefaultActionChoice `protobuf_oneof:"default_action_choice"`
}

func (m *ForwardProxySimpleRuleType) Reset()                    { *m = ForwardProxySimpleRuleType{} }
func (*ForwardProxySimpleRuleType) ProtoMessage()               {}
func (*ForwardProxySimpleRuleType) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{1} }

type isForwardProxySimpleRuleType_DefaultActionChoice interface {
	isForwardProxySimpleRuleType_DefaultActionChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type ForwardProxySimpleRuleType_DefaultActionNextPolicy struct {
	DefaultActionNextPolicy *ves_io_schema4.Empty `protobuf:"bytes,7,opt,name=default_action_next_policy,json=defaultActionNextPolicy,oneof"`
}
type ForwardProxySimpleRuleType_DefaultActionDeny struct {
	DefaultActionDeny *ves_io_schema4.Empty `protobuf:"bytes,8,opt,name=default_action_deny,json=defaultActionDeny,oneof"`
}
type ForwardProxySimpleRuleType_DefaultActionAllow struct {
	DefaultActionAllow *ves_io_schema4.Empty `protobuf:"bytes,9,opt,name=default_action_allow,json=defaultActionAllow,oneof"`
}

func (*ForwardProxySimpleRuleType_DefaultActionNextPolicy) isForwardProxySimpleRuleType_DefaultActionChoice() {
}
func (*ForwardProxySimpleRuleType_DefaultActionDeny) isForwardProxySimpleRuleType_DefaultActionChoice() {
}
func (*ForwardProxySimpleRuleType_DefaultActionAllow) isForwardProxySimpleRuleType_DefaultActionChoice() {
}

func (m *ForwardProxySimpleRuleType) GetDefaultActionChoice() isForwardProxySimpleRuleType_DefaultActionChoice {
	if m != nil {
		return m.DefaultActionChoice
	}
	return nil
}

func (m *ForwardProxySimpleRuleType) GetMetadata() *ves_io_schema4.MessageMetaType {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *ForwardProxySimpleRuleType) GetRuleName() string {
	if m != nil {
		return m.RuleName
	}
	return ""
}

func (m *ForwardProxySimpleRuleType) GetRuleDescription() string {
	if m != nil {
		return m.RuleDescription
	}
	return ""
}

func (m *ForwardProxySimpleRuleType) GetTlsList() []*ves_io_schema4.DomainType {
	if m != nil {
		return m.TlsList
	}
	return nil
}

func (m *ForwardProxySimpleRuleType) GetHttpList() []*URLType {
	if m != nil {
		return m.HttpList
	}
	return nil
}

func (m *ForwardProxySimpleRuleType) GetDestList() []*ves_io_schema4.L4DestType {
	if m != nil {
		return m.DestList
	}
	return nil
}

func (m *ForwardProxySimpleRuleType) GetDefaultActionNextPolicy() *ves_io_schema4.Empty {
	if x, ok := m.GetDefaultActionChoice().(*ForwardProxySimpleRuleType_DefaultActionNextPolicy); ok {
		return x.DefaultActionNextPolicy
	}
	return nil
}

func (m *ForwardProxySimpleRuleType) GetDefaultActionDeny() *ves_io_schema4.Empty {
	if x, ok := m.GetDefaultActionChoice().(*ForwardProxySimpleRuleType_DefaultActionDeny); ok {
		return x.DefaultActionDeny
	}
	return nil
}

func (m *ForwardProxySimpleRuleType) GetDefaultActionAllow() *ves_io_schema4.Empty {
	if x, ok := m.GetDefaultActionChoice().(*ForwardProxySimpleRuleType_DefaultActionAllow); ok {
		return x.DefaultActionAllow
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*ForwardProxySimpleRuleType) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _ForwardProxySimpleRuleType_OneofMarshaler, _ForwardProxySimpleRuleType_OneofUnmarshaler, _ForwardProxySimpleRuleType_OneofSizer, []interface{}{
		(*ForwardProxySimpleRuleType_DefaultActionNextPolicy)(nil),
		(*ForwardProxySimpleRuleType_DefaultActionDeny)(nil),
		(*ForwardProxySimpleRuleType_DefaultActionAllow)(nil),
	}
}

func _ForwardProxySimpleRuleType_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*ForwardProxySimpleRuleType)
	// default_action_choice
	switch x := m.DefaultActionChoice.(type) {
	case *ForwardProxySimpleRuleType_DefaultActionNextPolicy:
		_ = b.EncodeVarint(7<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.DefaultActionNextPolicy); err != nil {
			return err
		}
	case *ForwardProxySimpleRuleType_DefaultActionDeny:
		_ = b.EncodeVarint(8<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.DefaultActionDeny); err != nil {
			return err
		}
	case *ForwardProxySimpleRuleType_DefaultActionAllow:
		_ = b.EncodeVarint(9<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.DefaultActionAllow); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("ForwardProxySimpleRuleType.DefaultActionChoice has unexpected type %T", x)
	}
	return nil
}

func _ForwardProxySimpleRuleType_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*ForwardProxySimpleRuleType)
	switch tag {
	case 7: // default_action_choice.default_action_next_policy
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.DefaultActionChoice = &ForwardProxySimpleRuleType_DefaultActionNextPolicy{msg}
		return true, err
	case 8: // default_action_choice.default_action_deny
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.DefaultActionChoice = &ForwardProxySimpleRuleType_DefaultActionDeny{msg}
		return true, err
	case 9: // default_action_choice.default_action_allow
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.DefaultActionChoice = &ForwardProxySimpleRuleType_DefaultActionAllow{msg}
		return true, err
	default:
		return false, nil
	}
}

func _ForwardProxySimpleRuleType_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*ForwardProxySimpleRuleType)
	// default_action_choice
	switch x := m.DefaultActionChoice.(type) {
	case *ForwardProxySimpleRuleType_DefaultActionNextPolicy:
		s := proto.Size(x.DefaultActionNextPolicy)
		n += proto.SizeVarint(7<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ForwardProxySimpleRuleType_DefaultActionDeny:
		s := proto.Size(x.DefaultActionDeny)
		n += proto.SizeVarint(8<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ForwardProxySimpleRuleType_DefaultActionAllow:
		s := proto.Size(x.DefaultActionAllow)
		n += proto.SizeVarint(9<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type DomainListType struct {
	// TLS Domains
	//
	// x-displayName: "TLS Domains"
	// Domains in SNI for TLS connections
	TlsList []*ves_io_schema4.DomainType `protobuf:"bytes,1,rep,name=tls_list,json=tlsList" json:"tls_list,omitempty"`
}

func (m *DomainListType) Reset()                    { *m = DomainListType{} }
func (*DomainListType) ProtoMessage()               {}
func (*DomainListType) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{2} }

func (m *DomainListType) GetTlsList() []*ves_io_schema4.DomainType {
	if m != nil {
		return m.TlsList
	}
	return nil
}

type URLListType struct {
	// HTTP URLs
	//
	// x-displayName: "HTTP URLs"
	// URLs for HTTP connections
	HttpList []*URLType `protobuf:"bytes,2,rep,name=http_list,json=httpList" json:"http_list,omitempty"`
}

func (m *URLListType) Reset()                    { *m = URLListType{} }
func (*URLListType) ProtoMessage()               {}
func (*URLListType) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{3} }

func (m *URLListType) GetHttpList() []*URLType {
	if m != nil {
		return m.HttpList
	}
	return nil
}

// Forward Proxy Rule
//
// x-displayName: "Forward Proxy Rule"
// URL(s) and domains policy for forward proxy for a connection type (TLS or HTTP)
type ForwardProxyAdvancedRuleType struct {
	// metadata
	//
	// x-displayName: "Metadata"
	// x-required
	// Common attributes for the rule including name and description.
	Metadata *ves_io_schema4.MessageMetaType `protobuf:"bytes,25,opt,name=metadata" json:"metadata,omitempty"`
	// Name
	//
	// x-displayName: "Name"
	// x-example: "my-policy-allow-github.com"
	// Rule Name that will be used to query metrics for this rule.
	RuleName string `protobuf:"bytes,1,opt,name=rule_name,json=ruleName,proto3" json:"rule_name,omitempty"`
	// Description
	//
	// x-displayName: "Description"
	// x-example: "Rule to block example.com"
	// Human readable description for the rule
	RuleDescription string `protobuf:"bytes,18,opt,name=rule_description,json=ruleDescription,proto3" json:"rule_description,omitempty"`
	// action
	//
	// x-displayName: "Action"
	// x-required
	// Action to be enforced if the input request matches the rule.
	Action ves_io_schema_policy.RuleAction `protobuf:"varint,2,opt,name=action,proto3,enum=ves.io.schema.policy.RuleAction" json:"action,omitempty"`
	// Choose Source
	//
	// x-displayName: "Select Connection Source"
	// x-required
	// Select source for proxy policy.
	// Source can be a particular endpoint or set of endpoints.
	//
	// Types that are valid to be assigned to SourceChoice:
	//	*ForwardProxyAdvancedRuleType_AllSources
	//	*ForwardProxyAdvancedRuleType_PrefixList
	//	*ForwardProxyAdvancedRuleType_InsideSources
	//	*ForwardProxyAdvancedRuleType_Interface
	//	*ForwardProxyAdvancedRuleType_Namespace
	//	*ForwardProxyAdvancedRuleType_LabelSelector
	//	*ForwardProxyAdvancedRuleType_IpPrefixSet
	SourceChoice isForwardProxyAdvancedRuleType_SourceChoice `protobuf_oneof:"source_choice"`
	// Destination Choice
	//
	// x-displayName: "Destination Choice"
	// x-required
	// Destinations of the proxy connections
	//
	// Types that are valid to be assigned to DestinationChoice:
	//	*ForwardProxyAdvancedRuleType_AllDestinations
	//	*ForwardProxyAdvancedRuleType_TlsList
	//	*ForwardProxyAdvancedRuleType_HttpList
	//	*ForwardProxyAdvancedRuleType_DstIpPrefixSet
	//	*ForwardProxyAdvancedRuleType_DstPrefixList
	//	*ForwardProxyAdvancedRuleType_DstAsnSet
	//	*ForwardProxyAdvancedRuleType_DstAsnList
	//	*ForwardProxyAdvancedRuleType_DstLabelSelector
	DestinationChoice isForwardProxyAdvancedRuleType_DestinationChoice `protobuf_oneof:"destination_choice"`
	// Destination port
	//
	// x-displayName: "Destination Port"
	// Match on destination port for connections
	//
	// Types that are valid to be assigned to HttpConnectChoice:
	//	*ForwardProxyAdvancedRuleType_NoHttpConnectPort
	//	*ForwardProxyAdvancedRuleType_PortMatcher
	HttpConnectChoice isForwardProxyAdvancedRuleType_HttpConnectChoice `protobuf_oneof:"http_connect_choice"`
}

func (m *ForwardProxyAdvancedRuleType) Reset()      { *m = ForwardProxyAdvancedRuleType{} }
func (*ForwardProxyAdvancedRuleType) ProtoMessage() {}
func (*ForwardProxyAdvancedRuleType) Descriptor() ([]byte, []int) {
	return fileDescriptorTypes, []int{4}
}

type isForwardProxyAdvancedRuleType_SourceChoice interface {
	isForwardProxyAdvancedRuleType_SourceChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isForwardProxyAdvancedRuleType_DestinationChoice interface {
	isForwardProxyAdvancedRuleType_DestinationChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isForwardProxyAdvancedRuleType_HttpConnectChoice interface {
	isForwardProxyAdvancedRuleType_HttpConnectChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type ForwardProxyAdvancedRuleType_AllSources struct {
	AllSources *ves_io_schema4.Empty `protobuf:"bytes,4,opt,name=all_sources,json=allSources,oneof"`
}
type ForwardProxyAdvancedRuleType_PrefixList struct {
	PrefixList *ves_io_schema_views.PrefixStringListType `protobuf:"bytes,5,opt,name=prefix_list,json=prefixList,oneof"`
}
type ForwardProxyAdvancedRuleType_InsideSources struct {
	InsideSources *ves_io_schema4.Empty `protobuf:"bytes,6,opt,name=inside_sources,json=insideSources,oneof"`
}
type ForwardProxyAdvancedRuleType_Interface struct {
	Interface *ves_io_schema_views.ObjectRefType `protobuf:"bytes,7,opt,name=interface,oneof"`
}
type ForwardProxyAdvancedRuleType_Namespace struct {
	Namespace string `protobuf:"bytes,8,opt,name=namespace,proto3,oneof"`
}
type ForwardProxyAdvancedRuleType_LabelSelector struct {
	LabelSelector *ves_io_schema4.LabelSelectorType `protobuf:"bytes,9,opt,name=label_selector,json=labelSelector,oneof"`
}
type ForwardProxyAdvancedRuleType_IpPrefixSet struct {
	IpPrefixSet *ves_io_schema_views.ObjectRefType `protobuf:"bytes,10,opt,name=ip_prefix_set,json=ipPrefixSet,oneof"`
}
type ForwardProxyAdvancedRuleType_AllDestinations struct {
	AllDestinations *ves_io_schema4.Empty `protobuf:"bytes,12,opt,name=all_destinations,json=allDestinations,oneof"`
}
type ForwardProxyAdvancedRuleType_TlsList struct {
	TlsList *DomainListType `protobuf:"bytes,13,opt,name=tls_list,json=tlsList,oneof"`
}
type ForwardProxyAdvancedRuleType_HttpList struct {
	HttpList *URLListType `protobuf:"bytes,14,opt,name=http_list,json=httpList,oneof"`
}
type ForwardProxyAdvancedRuleType_DstIpPrefixSet struct {
	DstIpPrefixSet *ves_io_schema_views.ObjectRefType `protobuf:"bytes,20,opt,name=dst_ip_prefix_set,json=dstIpPrefixSet,oneof"`
}
type ForwardProxyAdvancedRuleType_DstPrefixList struct {
	DstPrefixList *ves_io_schema_views.PrefixStringListType `protobuf:"bytes,21,opt,name=dst_prefix_list,json=dstPrefixList,oneof"`
}
type ForwardProxyAdvancedRuleType_DstAsnSet struct {
	DstAsnSet *ves_io_schema_views.ObjectRefType `protobuf:"bytes,23,opt,name=dst_asn_set,json=dstAsnSet,oneof"`
}
type ForwardProxyAdvancedRuleType_DstAsnList struct {
	DstAsnList *ves_io_schema_policy.AsnMatchList `protobuf:"bytes,24,opt,name=dst_asn_list,json=dstAsnList,oneof"`
}
type ForwardProxyAdvancedRuleType_DstLabelSelector struct {
	DstLabelSelector *ves_io_schema4.LabelSelectorType `protobuf:"bytes,22,opt,name=dst_label_selector,json=dstLabelSelector,oneof"`
}
type ForwardProxyAdvancedRuleType_NoHttpConnectPort struct {
	NoHttpConnectPort *ves_io_schema4.Empty `protobuf:"bytes,16,opt,name=no_http_connect_port,json=noHttpConnectPort,oneof"`
}
type ForwardProxyAdvancedRuleType_PortMatcher struct {
	PortMatcher *ves_io_schema_policy.PortMatcherType `protobuf:"bytes,17,opt,name=port_matcher,json=portMatcher,oneof"`
}

func (*ForwardProxyAdvancedRuleType_AllSources) isForwardProxyAdvancedRuleType_SourceChoice()    {}
func (*ForwardProxyAdvancedRuleType_PrefixList) isForwardProxyAdvancedRuleType_SourceChoice()    {}
func (*ForwardProxyAdvancedRuleType_InsideSources) isForwardProxyAdvancedRuleType_SourceChoice() {}
func (*ForwardProxyAdvancedRuleType_Interface) isForwardProxyAdvancedRuleType_SourceChoice()     {}
func (*ForwardProxyAdvancedRuleType_Namespace) isForwardProxyAdvancedRuleType_SourceChoice()     {}
func (*ForwardProxyAdvancedRuleType_LabelSelector) isForwardProxyAdvancedRuleType_SourceChoice() {}
func (*ForwardProxyAdvancedRuleType_IpPrefixSet) isForwardProxyAdvancedRuleType_SourceChoice()   {}
func (*ForwardProxyAdvancedRuleType_AllDestinations) isForwardProxyAdvancedRuleType_DestinationChoice() {
}
func (*ForwardProxyAdvancedRuleType_TlsList) isForwardProxyAdvancedRuleType_DestinationChoice()  {}
func (*ForwardProxyAdvancedRuleType_HttpList) isForwardProxyAdvancedRuleType_DestinationChoice() {}
func (*ForwardProxyAdvancedRuleType_DstIpPrefixSet) isForwardProxyAdvancedRuleType_DestinationChoice() {
}
func (*ForwardProxyAdvancedRuleType_DstPrefixList) isForwardProxyAdvancedRuleType_DestinationChoice() {
}
func (*ForwardProxyAdvancedRuleType_DstAsnSet) isForwardProxyAdvancedRuleType_DestinationChoice()  {}
func (*ForwardProxyAdvancedRuleType_DstAsnList) isForwardProxyAdvancedRuleType_DestinationChoice() {}
func (*ForwardProxyAdvancedRuleType_DstLabelSelector) isForwardProxyAdvancedRuleType_DestinationChoice() {
}
func (*ForwardProxyAdvancedRuleType_NoHttpConnectPort) isForwardProxyAdvancedRuleType_HttpConnectChoice() {
}
func (*ForwardProxyAdvancedRuleType_PortMatcher) isForwardProxyAdvancedRuleType_HttpConnectChoice() {}

func (m *ForwardProxyAdvancedRuleType) GetSourceChoice() isForwardProxyAdvancedRuleType_SourceChoice {
	if m != nil {
		return m.SourceChoice
	}
	return nil
}
func (m *ForwardProxyAdvancedRuleType) GetDestinationChoice() isForwardProxyAdvancedRuleType_DestinationChoice {
	if m != nil {
		return m.DestinationChoice
	}
	return nil
}
func (m *ForwardProxyAdvancedRuleType) GetHttpConnectChoice() isForwardProxyAdvancedRuleType_HttpConnectChoice {
	if m != nil {
		return m.HttpConnectChoice
	}
	return nil
}

func (m *ForwardProxyAdvancedRuleType) GetMetadata() *ves_io_schema4.MessageMetaType {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *ForwardProxyAdvancedRuleType) GetRuleName() string {
	if m != nil {
		return m.RuleName
	}
	return ""
}

func (m *ForwardProxyAdvancedRuleType) GetRuleDescription() string {
	if m != nil {
		return m.RuleDescription
	}
	return ""
}

func (m *ForwardProxyAdvancedRuleType) GetAction() ves_io_schema_policy.RuleAction {
	if m != nil {
		return m.Action
	}
	return ves_io_schema_policy.DENY
}

func (m *ForwardProxyAdvancedRuleType) GetAllSources() *ves_io_schema4.Empty {
	if x, ok := m.GetSourceChoice().(*ForwardProxyAdvancedRuleType_AllSources); ok {
		return x.AllSources
	}
	return nil
}

func (m *ForwardProxyAdvancedRuleType) GetPrefixList() *ves_io_schema_views.PrefixStringListType {
	if x, ok := m.GetSourceChoice().(*ForwardProxyAdvancedRuleType_PrefixList); ok {
		return x.PrefixList
	}
	return nil
}

func (m *ForwardProxyAdvancedRuleType) GetInsideSources() *ves_io_schema4.Empty {
	if x, ok := m.GetSourceChoice().(*ForwardProxyAdvancedRuleType_InsideSources); ok {
		return x.InsideSources
	}
	return nil
}

func (m *ForwardProxyAdvancedRuleType) GetInterface() *ves_io_schema_views.ObjectRefType {
	if x, ok := m.GetSourceChoice().(*ForwardProxyAdvancedRuleType_Interface); ok {
		return x.Interface
	}
	return nil
}

func (m *ForwardProxyAdvancedRuleType) GetNamespace() string {
	if x, ok := m.GetSourceChoice().(*ForwardProxyAdvancedRuleType_Namespace); ok {
		return x.Namespace
	}
	return ""
}

func (m *ForwardProxyAdvancedRuleType) GetLabelSelector() *ves_io_schema4.LabelSelectorType {
	if x, ok := m.GetSourceChoice().(*ForwardProxyAdvancedRuleType_LabelSelector); ok {
		return x.LabelSelector
	}
	return nil
}

func (m *ForwardProxyAdvancedRuleType) GetIpPrefixSet() *ves_io_schema_views.ObjectRefType {
	if x, ok := m.GetSourceChoice().(*ForwardProxyAdvancedRuleType_IpPrefixSet); ok {
		return x.IpPrefixSet
	}
	return nil
}

func (m *ForwardProxyAdvancedRuleType) GetAllDestinations() *ves_io_schema4.Empty {
	if x, ok := m.GetDestinationChoice().(*ForwardProxyAdvancedRuleType_AllDestinations); ok {
		return x.AllDestinations
	}
	return nil
}

func (m *ForwardProxyAdvancedRuleType) GetTlsList() *DomainListType {
	if x, ok := m.GetDestinationChoice().(*ForwardProxyAdvancedRuleType_TlsList); ok {
		return x.TlsList
	}
	return nil
}

func (m *ForwardProxyAdvancedRuleType) GetHttpList() *URLListType {
	if x, ok := m.GetDestinationChoice().(*ForwardProxyAdvancedRuleType_HttpList); ok {
		return x.HttpList
	}
	return nil
}

func (m *ForwardProxyAdvancedRuleType) GetDstIpPrefixSet() *ves_io_schema_views.ObjectRefType {
	if x, ok := m.GetDestinationChoice().(*ForwardProxyAdvancedRuleType_DstIpPrefixSet); ok {
		return x.DstIpPrefixSet
	}
	return nil
}

func (m *ForwardProxyAdvancedRuleType) GetDstPrefixList() *ves_io_schema_views.PrefixStringListType {
	if x, ok := m.GetDestinationChoice().(*ForwardProxyAdvancedRuleType_DstPrefixList); ok {
		return x.DstPrefixList
	}
	return nil
}

func (m *ForwardProxyAdvancedRuleType) GetDstAsnSet() *ves_io_schema_views.ObjectRefType {
	if x, ok := m.GetDestinationChoice().(*ForwardProxyAdvancedRuleType_DstAsnSet); ok {
		return x.DstAsnSet
	}
	return nil
}

func (m *ForwardProxyAdvancedRuleType) GetDstAsnList() *ves_io_schema_policy.AsnMatchList {
	if x, ok := m.GetDestinationChoice().(*ForwardProxyAdvancedRuleType_DstAsnList); ok {
		return x.DstAsnList
	}
	return nil
}

func (m *ForwardProxyAdvancedRuleType) GetDstLabelSelector() *ves_io_schema4.LabelSelectorType {
	if x, ok := m.GetDestinationChoice().(*ForwardProxyAdvancedRuleType_DstLabelSelector); ok {
		return x.DstLabelSelector
	}
	return nil
}

func (m *ForwardProxyAdvancedRuleType) GetNoHttpConnectPort() *ves_io_schema4.Empty {
	if x, ok := m.GetHttpConnectChoice().(*ForwardProxyAdvancedRuleType_NoHttpConnectPort); ok {
		return x.NoHttpConnectPort
	}
	return nil
}

func (m *ForwardProxyAdvancedRuleType) GetPortMatcher() *ves_io_schema_policy.PortMatcherType {
	if x, ok := m.GetHttpConnectChoice().(*ForwardProxyAdvancedRuleType_PortMatcher); ok {
		return x.PortMatcher
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*ForwardProxyAdvancedRuleType) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _ForwardProxyAdvancedRuleType_OneofMarshaler, _ForwardProxyAdvancedRuleType_OneofUnmarshaler, _ForwardProxyAdvancedRuleType_OneofSizer, []interface{}{
		(*ForwardProxyAdvancedRuleType_AllSources)(nil),
		(*ForwardProxyAdvancedRuleType_PrefixList)(nil),
		(*ForwardProxyAdvancedRuleType_InsideSources)(nil),
		(*ForwardProxyAdvancedRuleType_Interface)(nil),
		(*ForwardProxyAdvancedRuleType_Namespace)(nil),
		(*ForwardProxyAdvancedRuleType_LabelSelector)(nil),
		(*ForwardProxyAdvancedRuleType_IpPrefixSet)(nil),
		(*ForwardProxyAdvancedRuleType_AllDestinations)(nil),
		(*ForwardProxyAdvancedRuleType_TlsList)(nil),
		(*ForwardProxyAdvancedRuleType_HttpList)(nil),
		(*ForwardProxyAdvancedRuleType_DstIpPrefixSet)(nil),
		(*ForwardProxyAdvancedRuleType_DstPrefixList)(nil),
		(*ForwardProxyAdvancedRuleType_DstAsnSet)(nil),
		(*ForwardProxyAdvancedRuleType_DstAsnList)(nil),
		(*ForwardProxyAdvancedRuleType_DstLabelSelector)(nil),
		(*ForwardProxyAdvancedRuleType_NoHttpConnectPort)(nil),
		(*ForwardProxyAdvancedRuleType_PortMatcher)(nil),
	}
}

func _ForwardProxyAdvancedRuleType_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*ForwardProxyAdvancedRuleType)
	// source_choice
	switch x := m.SourceChoice.(type) {
	case *ForwardProxyAdvancedRuleType_AllSources:
		_ = b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.AllSources); err != nil {
			return err
		}
	case *ForwardProxyAdvancedRuleType_PrefixList:
		_ = b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.PrefixList); err != nil {
			return err
		}
	case *ForwardProxyAdvancedRuleType_InsideSources:
		_ = b.EncodeVarint(6<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.InsideSources); err != nil {
			return err
		}
	case *ForwardProxyAdvancedRuleType_Interface:
		_ = b.EncodeVarint(7<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Interface); err != nil {
			return err
		}
	case *ForwardProxyAdvancedRuleType_Namespace:
		_ = b.EncodeVarint(8<<3 | proto.WireBytes)
		_ = b.EncodeStringBytes(x.Namespace)
	case *ForwardProxyAdvancedRuleType_LabelSelector:
		_ = b.EncodeVarint(9<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.LabelSelector); err != nil {
			return err
		}
	case *ForwardProxyAdvancedRuleType_IpPrefixSet:
		_ = b.EncodeVarint(10<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.IpPrefixSet); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("ForwardProxyAdvancedRuleType.SourceChoice has unexpected type %T", x)
	}
	// destination_choice
	switch x := m.DestinationChoice.(type) {
	case *ForwardProxyAdvancedRuleType_AllDestinations:
		_ = b.EncodeVarint(12<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.AllDestinations); err != nil {
			return err
		}
	case *ForwardProxyAdvancedRuleType_TlsList:
		_ = b.EncodeVarint(13<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.TlsList); err != nil {
			return err
		}
	case *ForwardProxyAdvancedRuleType_HttpList:
		_ = b.EncodeVarint(14<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.HttpList); err != nil {
			return err
		}
	case *ForwardProxyAdvancedRuleType_DstIpPrefixSet:
		_ = b.EncodeVarint(20<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.DstIpPrefixSet); err != nil {
			return err
		}
	case *ForwardProxyAdvancedRuleType_DstPrefixList:
		_ = b.EncodeVarint(21<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.DstPrefixList); err != nil {
			return err
		}
	case *ForwardProxyAdvancedRuleType_DstAsnSet:
		_ = b.EncodeVarint(23<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.DstAsnSet); err != nil {
			return err
		}
	case *ForwardProxyAdvancedRuleType_DstAsnList:
		_ = b.EncodeVarint(24<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.DstAsnList); err != nil {
			return err
		}
	case *ForwardProxyAdvancedRuleType_DstLabelSelector:
		_ = b.EncodeVarint(22<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.DstLabelSelector); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("ForwardProxyAdvancedRuleType.DestinationChoice has unexpected type %T", x)
	}
	// http_connect_choice
	switch x := m.HttpConnectChoice.(type) {
	case *ForwardProxyAdvancedRuleType_NoHttpConnectPort:
		_ = b.EncodeVarint(16<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.NoHttpConnectPort); err != nil {
			return err
		}
	case *ForwardProxyAdvancedRuleType_PortMatcher:
		_ = b.EncodeVarint(17<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.PortMatcher); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("ForwardProxyAdvancedRuleType.HttpConnectChoice has unexpected type %T", x)
	}
	return nil
}

func _ForwardProxyAdvancedRuleType_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*ForwardProxyAdvancedRuleType)
	switch tag {
	case 4: // source_choice.all_sources
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.SourceChoice = &ForwardProxyAdvancedRuleType_AllSources{msg}
		return true, err
	case 5: // source_choice.prefix_list
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema_views.PrefixStringListType)
		err := b.DecodeMessage(msg)
		m.SourceChoice = &ForwardProxyAdvancedRuleType_PrefixList{msg}
		return true, err
	case 6: // source_choice.inside_sources
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.SourceChoice = &ForwardProxyAdvancedRuleType_InsideSources{msg}
		return true, err
	case 7: // source_choice.interface
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema_views.ObjectRefType)
		err := b.DecodeMessage(msg)
		m.SourceChoice = &ForwardProxyAdvancedRuleType_Interface{msg}
		return true, err
	case 8: // source_choice.namespace
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.SourceChoice = &ForwardProxyAdvancedRuleType_Namespace{x}
		return true, err
	case 9: // source_choice.label_selector
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.LabelSelectorType)
		err := b.DecodeMessage(msg)
		m.SourceChoice = &ForwardProxyAdvancedRuleType_LabelSelector{msg}
		return true, err
	case 10: // source_choice.ip_prefix_set
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema_views.ObjectRefType)
		err := b.DecodeMessage(msg)
		m.SourceChoice = &ForwardProxyAdvancedRuleType_IpPrefixSet{msg}
		return true, err
	case 12: // destination_choice.all_destinations
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.DestinationChoice = &ForwardProxyAdvancedRuleType_AllDestinations{msg}
		return true, err
	case 13: // destination_choice.tls_list
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(DomainListType)
		err := b.DecodeMessage(msg)
		m.DestinationChoice = &ForwardProxyAdvancedRuleType_TlsList{msg}
		return true, err
	case 14: // destination_choice.http_list
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(URLListType)
		err := b.DecodeMessage(msg)
		m.DestinationChoice = &ForwardProxyAdvancedRuleType_HttpList{msg}
		return true, err
	case 20: // destination_choice.dst_ip_prefix_set
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema_views.ObjectRefType)
		err := b.DecodeMessage(msg)
		m.DestinationChoice = &ForwardProxyAdvancedRuleType_DstIpPrefixSet{msg}
		return true, err
	case 21: // destination_choice.dst_prefix_list
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema_views.PrefixStringListType)
		err := b.DecodeMessage(msg)
		m.DestinationChoice = &ForwardProxyAdvancedRuleType_DstPrefixList{msg}
		return true, err
	case 23: // destination_choice.dst_asn_set
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema_views.ObjectRefType)
		err := b.DecodeMessage(msg)
		m.DestinationChoice = &ForwardProxyAdvancedRuleType_DstAsnSet{msg}
		return true, err
	case 24: // destination_choice.dst_asn_list
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema_policy.AsnMatchList)
		err := b.DecodeMessage(msg)
		m.DestinationChoice = &ForwardProxyAdvancedRuleType_DstAsnList{msg}
		return true, err
	case 22: // destination_choice.dst_label_selector
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.LabelSelectorType)
		err := b.DecodeMessage(msg)
		m.DestinationChoice = &ForwardProxyAdvancedRuleType_DstLabelSelector{msg}
		return true, err
	case 16: // http_connect_choice.no_http_connect_port
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.HttpConnectChoice = &ForwardProxyAdvancedRuleType_NoHttpConnectPort{msg}
		return true, err
	case 17: // http_connect_choice.port_matcher
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema_policy.PortMatcherType)
		err := b.DecodeMessage(msg)
		m.HttpConnectChoice = &ForwardProxyAdvancedRuleType_PortMatcher{msg}
		return true, err
	default:
		return false, nil
	}
}

func _ForwardProxyAdvancedRuleType_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*ForwardProxyAdvancedRuleType)
	// source_choice
	switch x := m.SourceChoice.(type) {
	case *ForwardProxyAdvancedRuleType_AllSources:
		s := proto.Size(x.AllSources)
		n += proto.SizeVarint(4<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ForwardProxyAdvancedRuleType_PrefixList:
		s := proto.Size(x.PrefixList)
		n += proto.SizeVarint(5<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ForwardProxyAdvancedRuleType_InsideSources:
		s := proto.Size(x.InsideSources)
		n += proto.SizeVarint(6<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ForwardProxyAdvancedRuleType_Interface:
		s := proto.Size(x.Interface)
		n += proto.SizeVarint(7<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ForwardProxyAdvancedRuleType_Namespace:
		n += proto.SizeVarint(8<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.Namespace)))
		n += len(x.Namespace)
	case *ForwardProxyAdvancedRuleType_LabelSelector:
		s := proto.Size(x.LabelSelector)
		n += proto.SizeVarint(9<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ForwardProxyAdvancedRuleType_IpPrefixSet:
		s := proto.Size(x.IpPrefixSet)
		n += proto.SizeVarint(10<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	// destination_choice
	switch x := m.DestinationChoice.(type) {
	case *ForwardProxyAdvancedRuleType_AllDestinations:
		s := proto.Size(x.AllDestinations)
		n += proto.SizeVarint(12<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ForwardProxyAdvancedRuleType_TlsList:
		s := proto.Size(x.TlsList)
		n += proto.SizeVarint(13<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ForwardProxyAdvancedRuleType_HttpList:
		s := proto.Size(x.HttpList)
		n += proto.SizeVarint(14<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ForwardProxyAdvancedRuleType_DstIpPrefixSet:
		s := proto.Size(x.DstIpPrefixSet)
		n += proto.SizeVarint(20<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ForwardProxyAdvancedRuleType_DstPrefixList:
		s := proto.Size(x.DstPrefixList)
		n += proto.SizeVarint(21<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ForwardProxyAdvancedRuleType_DstAsnSet:
		s := proto.Size(x.DstAsnSet)
		n += proto.SizeVarint(23<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ForwardProxyAdvancedRuleType_DstAsnList:
		s := proto.Size(x.DstAsnList)
		n += proto.SizeVarint(24<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ForwardProxyAdvancedRuleType_DstLabelSelector:
		s := proto.Size(x.DstLabelSelector)
		n += proto.SizeVarint(22<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	// http_connect_choice
	switch x := m.HttpConnectChoice.(type) {
	case *ForwardProxyAdvancedRuleType_NoHttpConnectPort:
		s := proto.Size(x.NoHttpConnectPort)
		n += proto.SizeVarint(16<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ForwardProxyAdvancedRuleType_PortMatcher:
		s := proto.Size(x.PortMatcher)
		n += proto.SizeVarint(17<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// Custom List of rules
//
// x-displayName: "Custom Rule List"
// List of custom rules
type ForwardProxyRuleListType struct {
	// rules
	//
	// x-displayName: "Custom Rule List"
	// x-required
	// List of custom rules
	Rules []*ForwardProxyAdvancedRuleType `protobuf:"bytes,1,rep,name=rules" json:"rules,omitempty"`
}

func (m *ForwardProxyRuleListType) Reset()                    { *m = ForwardProxyRuleListType{} }
func (*ForwardProxyRuleListType) ProtoMessage()               {}
func (*ForwardProxyRuleListType) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{5} }

func (m *ForwardProxyRuleListType) GetRules() []*ForwardProxyAdvancedRuleType {
	if m != nil {
		return m.Rules
	}
	return nil
}

// Forward Proxy Policy
//
// x-displayName: "Forward Proxy Policy"
// URL(s) and domains policy for forward proxy
type GlobalSpecType struct {
	// Choose Forward Proxy
	//
	// x-displayName: "Select Forward Proxy"
	// x-required
	// Select Forward Proxy where this policy will be applied
	//
	// Types that are valid to be assigned to ProxyChoice:
	//	*GlobalSpecType_AnyProxy
	//	*GlobalSpecType_NetworkConnector
	//	*GlobalSpecType_ProxyLabelSelector
	//	*GlobalSpecType_DrpHttpConnect
	ProxyChoice isGlobalSpecType_ProxyChoice `protobuf_oneof:"proxy_choice"`
	// Select Policy Rules
	//
	// x-displayName: "Select Policy Rules"
	// x-required
	// Select how rules are configured for forward proxy
	//
	// Types that are valid to be assigned to RuleChoice:
	//	*GlobalSpecType_AllowAll
	//	*GlobalSpecType_AllowList
	//	*GlobalSpecType_DenyList
	//	*GlobalSpecType_RuleList
	RuleChoice isGlobalSpecType_RuleChoice `protobuf_oneof:"rule_choice"`
	// view_internal
	//
	// x-displayName: "View Internal"
	// Reference to view internal object
	ViewInternal *ves_io_schema_views.ObjectRefType `protobuf:"bytes,1000,opt,name=view_internal,json=viewInternal" json:"view_internal,omitempty"`
}

func (m *GlobalSpecType) Reset()                    { *m = GlobalSpecType{} }
func (*GlobalSpecType) ProtoMessage()               {}
func (*GlobalSpecType) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{6} }

type isGlobalSpecType_ProxyChoice interface {
	isGlobalSpecType_ProxyChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isGlobalSpecType_RuleChoice interface {
	isGlobalSpecType_RuleChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type GlobalSpecType_AnyProxy struct {
	AnyProxy *ves_io_schema4.Empty `protobuf:"bytes,2,opt,name=any_proxy,json=anyProxy,oneof"`
}
type GlobalSpecType_NetworkConnector struct {
	NetworkConnector *ves_io_schema_views.ObjectRefType `protobuf:"bytes,3,opt,name=network_connector,json=networkConnector,oneof"`
}
type GlobalSpecType_ProxyLabelSelector struct {
	ProxyLabelSelector *ves_io_schema4.LabelSelectorType `protobuf:"bytes,4,opt,name=proxy_label_selector,json=proxyLabelSelector,oneof"`
}
type GlobalSpecType_DrpHttpConnect struct {
	DrpHttpConnect *ves_io_schema4.Empty `protobuf:"bytes,11,opt,name=drp_http_connect,json=drpHttpConnect,oneof"`
}
type GlobalSpecType_AllowAll struct {
	AllowAll *ves_io_schema4.Empty `protobuf:"bytes,7,opt,name=allow_all,json=allowAll,oneof"`
}
type GlobalSpecType_AllowList struct {
	AllowList *ForwardProxySimpleRuleType `protobuf:"bytes,8,opt,name=allow_list,json=allowList,oneof"`
}
type GlobalSpecType_DenyList struct {
	DenyList *ForwardProxySimpleRuleType `protobuf:"bytes,9,opt,name=deny_list,json=denyList,oneof"`
}
type GlobalSpecType_RuleList struct {
	RuleList *ForwardProxyRuleListType `protobuf:"bytes,10,opt,name=rule_list,json=ruleList,oneof"`
}

func (*GlobalSpecType_AnyProxy) isGlobalSpecType_ProxyChoice()           {}
func (*GlobalSpecType_NetworkConnector) isGlobalSpecType_ProxyChoice()   {}
func (*GlobalSpecType_ProxyLabelSelector) isGlobalSpecType_ProxyChoice() {}
func (*GlobalSpecType_DrpHttpConnect) isGlobalSpecType_ProxyChoice()     {}
func (*GlobalSpecType_AllowAll) isGlobalSpecType_RuleChoice()            {}
func (*GlobalSpecType_AllowList) isGlobalSpecType_RuleChoice()           {}
func (*GlobalSpecType_DenyList) isGlobalSpecType_RuleChoice()            {}
func (*GlobalSpecType_RuleList) isGlobalSpecType_RuleChoice()            {}

func (m *GlobalSpecType) GetProxyChoice() isGlobalSpecType_ProxyChoice {
	if m != nil {
		return m.ProxyChoice
	}
	return nil
}
func (m *GlobalSpecType) GetRuleChoice() isGlobalSpecType_RuleChoice {
	if m != nil {
		return m.RuleChoice
	}
	return nil
}

func (m *GlobalSpecType) GetAnyProxy() *ves_io_schema4.Empty {
	if x, ok := m.GetProxyChoice().(*GlobalSpecType_AnyProxy); ok {
		return x.AnyProxy
	}
	return nil
}

func (m *GlobalSpecType) GetNetworkConnector() *ves_io_schema_views.ObjectRefType {
	if x, ok := m.GetProxyChoice().(*GlobalSpecType_NetworkConnector); ok {
		return x.NetworkConnector
	}
	return nil
}

func (m *GlobalSpecType) GetProxyLabelSelector() *ves_io_schema4.LabelSelectorType {
	if x, ok := m.GetProxyChoice().(*GlobalSpecType_ProxyLabelSelector); ok {
		return x.ProxyLabelSelector
	}
	return nil
}

func (m *GlobalSpecType) GetDrpHttpConnect() *ves_io_schema4.Empty {
	if x, ok := m.GetProxyChoice().(*GlobalSpecType_DrpHttpConnect); ok {
		return x.DrpHttpConnect
	}
	return nil
}

func (m *GlobalSpecType) GetAllowAll() *ves_io_schema4.Empty {
	if x, ok := m.GetRuleChoice().(*GlobalSpecType_AllowAll); ok {
		return x.AllowAll
	}
	return nil
}

func (m *GlobalSpecType) GetAllowList() *ForwardProxySimpleRuleType {
	if x, ok := m.GetRuleChoice().(*GlobalSpecType_AllowList); ok {
		return x.AllowList
	}
	return nil
}

func (m *GlobalSpecType) GetDenyList() *ForwardProxySimpleRuleType {
	if x, ok := m.GetRuleChoice().(*GlobalSpecType_DenyList); ok {
		return x.DenyList
	}
	return nil
}

func (m *GlobalSpecType) GetRuleList() *ForwardProxyRuleListType {
	if x, ok := m.GetRuleChoice().(*GlobalSpecType_RuleList); ok {
		return x.RuleList
	}
	return nil
}

func (m *GlobalSpecType) GetViewInternal() *ves_io_schema_views.ObjectRefType {
	if m != nil {
		return m.ViewInternal
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*GlobalSpecType) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _GlobalSpecType_OneofMarshaler, _GlobalSpecType_OneofUnmarshaler, _GlobalSpecType_OneofSizer, []interface{}{
		(*GlobalSpecType_AnyProxy)(nil),
		(*GlobalSpecType_NetworkConnector)(nil),
		(*GlobalSpecType_ProxyLabelSelector)(nil),
		(*GlobalSpecType_DrpHttpConnect)(nil),
		(*GlobalSpecType_AllowAll)(nil),
		(*GlobalSpecType_AllowList)(nil),
		(*GlobalSpecType_DenyList)(nil),
		(*GlobalSpecType_RuleList)(nil),
	}
}

func _GlobalSpecType_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*GlobalSpecType)
	// proxy_choice
	switch x := m.ProxyChoice.(type) {
	case *GlobalSpecType_AnyProxy:
		_ = b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.AnyProxy); err != nil {
			return err
		}
	case *GlobalSpecType_NetworkConnector:
		_ = b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.NetworkConnector); err != nil {
			return err
		}
	case *GlobalSpecType_ProxyLabelSelector:
		_ = b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ProxyLabelSelector); err != nil {
			return err
		}
	case *GlobalSpecType_DrpHttpConnect:
		_ = b.EncodeVarint(11<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.DrpHttpConnect); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("GlobalSpecType.ProxyChoice has unexpected type %T", x)
	}
	// rule_choice
	switch x := m.RuleChoice.(type) {
	case *GlobalSpecType_AllowAll:
		_ = b.EncodeVarint(7<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.AllowAll); err != nil {
			return err
		}
	case *GlobalSpecType_AllowList:
		_ = b.EncodeVarint(8<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.AllowList); err != nil {
			return err
		}
	case *GlobalSpecType_DenyList:
		_ = b.EncodeVarint(9<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.DenyList); err != nil {
			return err
		}
	case *GlobalSpecType_RuleList:
		_ = b.EncodeVarint(10<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.RuleList); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("GlobalSpecType.RuleChoice has unexpected type %T", x)
	}
	return nil
}

func _GlobalSpecType_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*GlobalSpecType)
	switch tag {
	case 2: // proxy_choice.any_proxy
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.ProxyChoice = &GlobalSpecType_AnyProxy{msg}
		return true, err
	case 3: // proxy_choice.network_connector
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema_views.ObjectRefType)
		err := b.DecodeMessage(msg)
		m.ProxyChoice = &GlobalSpecType_NetworkConnector{msg}
		return true, err
	case 4: // proxy_choice.proxy_label_selector
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.LabelSelectorType)
		err := b.DecodeMessage(msg)
		m.ProxyChoice = &GlobalSpecType_ProxyLabelSelector{msg}
		return true, err
	case 11: // proxy_choice.drp_http_connect
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.ProxyChoice = &GlobalSpecType_DrpHttpConnect{msg}
		return true, err
	case 7: // rule_choice.allow_all
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.RuleChoice = &GlobalSpecType_AllowAll{msg}
		return true, err
	case 8: // rule_choice.allow_list
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ForwardProxySimpleRuleType)
		err := b.DecodeMessage(msg)
		m.RuleChoice = &GlobalSpecType_AllowList{msg}
		return true, err
	case 9: // rule_choice.deny_list
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ForwardProxySimpleRuleType)
		err := b.DecodeMessage(msg)
		m.RuleChoice = &GlobalSpecType_DenyList{msg}
		return true, err
	case 10: // rule_choice.rule_list
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ForwardProxyRuleListType)
		err := b.DecodeMessage(msg)
		m.RuleChoice = &GlobalSpecType_RuleList{msg}
		return true, err
	default:
		return false, nil
	}
}

func _GlobalSpecType_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*GlobalSpecType)
	// proxy_choice
	switch x := m.ProxyChoice.(type) {
	case *GlobalSpecType_AnyProxy:
		s := proto.Size(x.AnyProxy)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *GlobalSpecType_NetworkConnector:
		s := proto.Size(x.NetworkConnector)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *GlobalSpecType_ProxyLabelSelector:
		s := proto.Size(x.ProxyLabelSelector)
		n += proto.SizeVarint(4<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *GlobalSpecType_DrpHttpConnect:
		s := proto.Size(x.DrpHttpConnect)
		n += proto.SizeVarint(11<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	// rule_choice
	switch x := m.RuleChoice.(type) {
	case *GlobalSpecType_AllowAll:
		s := proto.Size(x.AllowAll)
		n += proto.SizeVarint(7<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *GlobalSpecType_AllowList:
		s := proto.Size(x.AllowList)
		n += proto.SizeVarint(8<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *GlobalSpecType_DenyList:
		s := proto.Size(x.DenyList)
		n += proto.SizeVarint(9<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *GlobalSpecType_RuleList:
		s := proto.Size(x.RuleList)
		n += proto.SizeVarint(10<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// CreateSpecType
//
// x-displayName: "Create Forward Proxy Policy"
// Shape of the Forward Proxy Policy specification
type CreateSpecType struct {
	// Types that are valid to be assigned to ProxyChoice:
	//	*CreateSpecType_AnyProxy
	//	*CreateSpecType_NetworkConnector
	//	*CreateSpecType_ProxyLabelSelector
	//	*CreateSpecType_DrpHttpConnect
	ProxyChoice isCreateSpecType_ProxyChoice `protobuf_oneof:"proxy_choice"`
	// Types that are valid to be assigned to RuleChoice:
	//	*CreateSpecType_AllowAll
	//	*CreateSpecType_AllowList
	//	*CreateSpecType_DenyList
	//	*CreateSpecType_RuleList
	RuleChoice isCreateSpecType_RuleChoice `protobuf_oneof:"rule_choice"`
}

func (m *CreateSpecType) Reset()                    { *m = CreateSpecType{} }
func (*CreateSpecType) ProtoMessage()               {}
func (*CreateSpecType) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{7} }

type isCreateSpecType_ProxyChoice interface {
	isCreateSpecType_ProxyChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isCreateSpecType_RuleChoice interface {
	isCreateSpecType_RuleChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type CreateSpecType_AnyProxy struct {
	AnyProxy *ves_io_schema4.Empty `protobuf:"bytes,2,opt,name=any_proxy,json=anyProxy,oneof"`
}
type CreateSpecType_NetworkConnector struct {
	NetworkConnector *ves_io_schema_views.ObjectRefType `protobuf:"bytes,3,opt,name=network_connector,json=networkConnector,oneof"`
}
type CreateSpecType_ProxyLabelSelector struct {
	ProxyLabelSelector *ves_io_schema4.LabelSelectorType `protobuf:"bytes,4,opt,name=proxy_label_selector,json=proxyLabelSelector,oneof"`
}
type CreateSpecType_DrpHttpConnect struct {
	DrpHttpConnect *ves_io_schema4.Empty `protobuf:"bytes,11,opt,name=drp_http_connect,json=drpHttpConnect,oneof"`
}
type CreateSpecType_AllowAll struct {
	AllowAll *ves_io_schema4.Empty `protobuf:"bytes,7,opt,name=allow_all,json=allowAll,oneof"`
}
type CreateSpecType_AllowList struct {
	AllowList *ForwardProxySimpleRuleType `protobuf:"bytes,8,opt,name=allow_list,json=allowList,oneof"`
}
type CreateSpecType_DenyList struct {
	DenyList *ForwardProxySimpleRuleType `protobuf:"bytes,9,opt,name=deny_list,json=denyList,oneof"`
}
type CreateSpecType_RuleList struct {
	RuleList *ForwardProxyRuleListType `protobuf:"bytes,10,opt,name=rule_list,json=ruleList,oneof"`
}

func (*CreateSpecType_AnyProxy) isCreateSpecType_ProxyChoice()           {}
func (*CreateSpecType_NetworkConnector) isCreateSpecType_ProxyChoice()   {}
func (*CreateSpecType_ProxyLabelSelector) isCreateSpecType_ProxyChoice() {}
func (*CreateSpecType_DrpHttpConnect) isCreateSpecType_ProxyChoice()     {}
func (*CreateSpecType_AllowAll) isCreateSpecType_RuleChoice()            {}
func (*CreateSpecType_AllowList) isCreateSpecType_RuleChoice()           {}
func (*CreateSpecType_DenyList) isCreateSpecType_RuleChoice()            {}
func (*CreateSpecType_RuleList) isCreateSpecType_RuleChoice()            {}

func (m *CreateSpecType) GetProxyChoice() isCreateSpecType_ProxyChoice {
	if m != nil {
		return m.ProxyChoice
	}
	return nil
}
func (m *CreateSpecType) GetRuleChoice() isCreateSpecType_RuleChoice {
	if m != nil {
		return m.RuleChoice
	}
	return nil
}

func (m *CreateSpecType) GetAnyProxy() *ves_io_schema4.Empty {
	if x, ok := m.GetProxyChoice().(*CreateSpecType_AnyProxy); ok {
		return x.AnyProxy
	}
	return nil
}

func (m *CreateSpecType) GetNetworkConnector() *ves_io_schema_views.ObjectRefType {
	if x, ok := m.GetProxyChoice().(*CreateSpecType_NetworkConnector); ok {
		return x.NetworkConnector
	}
	return nil
}

func (m *CreateSpecType) GetProxyLabelSelector() *ves_io_schema4.LabelSelectorType {
	if x, ok := m.GetProxyChoice().(*CreateSpecType_ProxyLabelSelector); ok {
		return x.ProxyLabelSelector
	}
	return nil
}

func (m *CreateSpecType) GetDrpHttpConnect() *ves_io_schema4.Empty {
	if x, ok := m.GetProxyChoice().(*CreateSpecType_DrpHttpConnect); ok {
		return x.DrpHttpConnect
	}
	return nil
}

func (m *CreateSpecType) GetAllowAll() *ves_io_schema4.Empty {
	if x, ok := m.GetRuleChoice().(*CreateSpecType_AllowAll); ok {
		return x.AllowAll
	}
	return nil
}

func (m *CreateSpecType) GetAllowList() *ForwardProxySimpleRuleType {
	if x, ok := m.GetRuleChoice().(*CreateSpecType_AllowList); ok {
		return x.AllowList
	}
	return nil
}

func (m *CreateSpecType) GetDenyList() *ForwardProxySimpleRuleType {
	if x, ok := m.GetRuleChoice().(*CreateSpecType_DenyList); ok {
		return x.DenyList
	}
	return nil
}

func (m *CreateSpecType) GetRuleList() *ForwardProxyRuleListType {
	if x, ok := m.GetRuleChoice().(*CreateSpecType_RuleList); ok {
		return x.RuleList
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*CreateSpecType) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _CreateSpecType_OneofMarshaler, _CreateSpecType_OneofUnmarshaler, _CreateSpecType_OneofSizer, []interface{}{
		(*CreateSpecType_AnyProxy)(nil),
		(*CreateSpecType_NetworkConnector)(nil),
		(*CreateSpecType_ProxyLabelSelector)(nil),
		(*CreateSpecType_DrpHttpConnect)(nil),
		(*CreateSpecType_AllowAll)(nil),
		(*CreateSpecType_AllowList)(nil),
		(*CreateSpecType_DenyList)(nil),
		(*CreateSpecType_RuleList)(nil),
	}
}

func _CreateSpecType_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*CreateSpecType)
	// proxy_choice
	switch x := m.ProxyChoice.(type) {
	case *CreateSpecType_AnyProxy:
		_ = b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.AnyProxy); err != nil {
			return err
		}
	case *CreateSpecType_NetworkConnector:
		_ = b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.NetworkConnector); err != nil {
			return err
		}
	case *CreateSpecType_ProxyLabelSelector:
		_ = b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ProxyLabelSelector); err != nil {
			return err
		}
	case *CreateSpecType_DrpHttpConnect:
		_ = b.EncodeVarint(11<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.DrpHttpConnect); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("CreateSpecType.ProxyChoice has unexpected type %T", x)
	}
	// rule_choice
	switch x := m.RuleChoice.(type) {
	case *CreateSpecType_AllowAll:
		_ = b.EncodeVarint(7<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.AllowAll); err != nil {
			return err
		}
	case *CreateSpecType_AllowList:
		_ = b.EncodeVarint(8<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.AllowList); err != nil {
			return err
		}
	case *CreateSpecType_DenyList:
		_ = b.EncodeVarint(9<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.DenyList); err != nil {
			return err
		}
	case *CreateSpecType_RuleList:
		_ = b.EncodeVarint(10<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.RuleList); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("CreateSpecType.RuleChoice has unexpected type %T", x)
	}
	return nil
}

func _CreateSpecType_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*CreateSpecType)
	switch tag {
	case 2: // proxy_choice.any_proxy
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.ProxyChoice = &CreateSpecType_AnyProxy{msg}
		return true, err
	case 3: // proxy_choice.network_connector
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema_views.ObjectRefType)
		err := b.DecodeMessage(msg)
		m.ProxyChoice = &CreateSpecType_NetworkConnector{msg}
		return true, err
	case 4: // proxy_choice.proxy_label_selector
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.LabelSelectorType)
		err := b.DecodeMessage(msg)
		m.ProxyChoice = &CreateSpecType_ProxyLabelSelector{msg}
		return true, err
	case 11: // proxy_choice.drp_http_connect
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.ProxyChoice = &CreateSpecType_DrpHttpConnect{msg}
		return true, err
	case 7: // rule_choice.allow_all
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.RuleChoice = &CreateSpecType_AllowAll{msg}
		return true, err
	case 8: // rule_choice.allow_list
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ForwardProxySimpleRuleType)
		err := b.DecodeMessage(msg)
		m.RuleChoice = &CreateSpecType_AllowList{msg}
		return true, err
	case 9: // rule_choice.deny_list
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ForwardProxySimpleRuleType)
		err := b.DecodeMessage(msg)
		m.RuleChoice = &CreateSpecType_DenyList{msg}
		return true, err
	case 10: // rule_choice.rule_list
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ForwardProxyRuleListType)
		err := b.DecodeMessage(msg)
		m.RuleChoice = &CreateSpecType_RuleList{msg}
		return true, err
	default:
		return false, nil
	}
}

func _CreateSpecType_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*CreateSpecType)
	// proxy_choice
	switch x := m.ProxyChoice.(type) {
	case *CreateSpecType_AnyProxy:
		s := proto.Size(x.AnyProxy)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *CreateSpecType_NetworkConnector:
		s := proto.Size(x.NetworkConnector)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *CreateSpecType_ProxyLabelSelector:
		s := proto.Size(x.ProxyLabelSelector)
		n += proto.SizeVarint(4<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *CreateSpecType_DrpHttpConnect:
		s := proto.Size(x.DrpHttpConnect)
		n += proto.SizeVarint(11<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	// rule_choice
	switch x := m.RuleChoice.(type) {
	case *CreateSpecType_AllowAll:
		s := proto.Size(x.AllowAll)
		n += proto.SizeVarint(7<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *CreateSpecType_AllowList:
		s := proto.Size(x.AllowList)
		n += proto.SizeVarint(8<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *CreateSpecType_DenyList:
		s := proto.Size(x.DenyList)
		n += proto.SizeVarint(9<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *CreateSpecType_RuleList:
		s := proto.Size(x.RuleList)
		n += proto.SizeVarint(10<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// ReplaceSpecType
//
// x-displayName: "Replace Forward Proxy Policy"
// Shape of the Forward Proxy Policy replace specification
type ReplaceSpecType struct {
	// Types that are valid to be assigned to ProxyChoice:
	//	*ReplaceSpecType_AnyProxy
	//	*ReplaceSpecType_NetworkConnector
	//	*ReplaceSpecType_ProxyLabelSelector
	//	*ReplaceSpecType_DrpHttpConnect
	ProxyChoice isReplaceSpecType_ProxyChoice `protobuf_oneof:"proxy_choice"`
	// Types that are valid to be assigned to RuleChoice:
	//	*ReplaceSpecType_AllowAll
	//	*ReplaceSpecType_AllowList
	//	*ReplaceSpecType_DenyList
	//	*ReplaceSpecType_RuleList
	RuleChoice isReplaceSpecType_RuleChoice `protobuf_oneof:"rule_choice"`
}

func (m *ReplaceSpecType) Reset()                    { *m = ReplaceSpecType{} }
func (*ReplaceSpecType) ProtoMessage()               {}
func (*ReplaceSpecType) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{8} }

type isReplaceSpecType_ProxyChoice interface {
	isReplaceSpecType_ProxyChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isReplaceSpecType_RuleChoice interface {
	isReplaceSpecType_RuleChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type ReplaceSpecType_AnyProxy struct {
	AnyProxy *ves_io_schema4.Empty `protobuf:"bytes,2,opt,name=any_proxy,json=anyProxy,oneof"`
}
type ReplaceSpecType_NetworkConnector struct {
	NetworkConnector *ves_io_schema_views.ObjectRefType `protobuf:"bytes,3,opt,name=network_connector,json=networkConnector,oneof"`
}
type ReplaceSpecType_ProxyLabelSelector struct {
	ProxyLabelSelector *ves_io_schema4.LabelSelectorType `protobuf:"bytes,4,opt,name=proxy_label_selector,json=proxyLabelSelector,oneof"`
}
type ReplaceSpecType_DrpHttpConnect struct {
	DrpHttpConnect *ves_io_schema4.Empty `protobuf:"bytes,11,opt,name=drp_http_connect,json=drpHttpConnect,oneof"`
}
type ReplaceSpecType_AllowAll struct {
	AllowAll *ves_io_schema4.Empty `protobuf:"bytes,7,opt,name=allow_all,json=allowAll,oneof"`
}
type ReplaceSpecType_AllowList struct {
	AllowList *ForwardProxySimpleRuleType `protobuf:"bytes,8,opt,name=allow_list,json=allowList,oneof"`
}
type ReplaceSpecType_DenyList struct {
	DenyList *ForwardProxySimpleRuleType `protobuf:"bytes,9,opt,name=deny_list,json=denyList,oneof"`
}
type ReplaceSpecType_RuleList struct {
	RuleList *ForwardProxyRuleListType `protobuf:"bytes,10,opt,name=rule_list,json=ruleList,oneof"`
}

func (*ReplaceSpecType_AnyProxy) isReplaceSpecType_ProxyChoice()           {}
func (*ReplaceSpecType_NetworkConnector) isReplaceSpecType_ProxyChoice()   {}
func (*ReplaceSpecType_ProxyLabelSelector) isReplaceSpecType_ProxyChoice() {}
func (*ReplaceSpecType_DrpHttpConnect) isReplaceSpecType_ProxyChoice()     {}
func (*ReplaceSpecType_AllowAll) isReplaceSpecType_RuleChoice()            {}
func (*ReplaceSpecType_AllowList) isReplaceSpecType_RuleChoice()           {}
func (*ReplaceSpecType_DenyList) isReplaceSpecType_RuleChoice()            {}
func (*ReplaceSpecType_RuleList) isReplaceSpecType_RuleChoice()            {}

func (m *ReplaceSpecType) GetProxyChoice() isReplaceSpecType_ProxyChoice {
	if m != nil {
		return m.ProxyChoice
	}
	return nil
}
func (m *ReplaceSpecType) GetRuleChoice() isReplaceSpecType_RuleChoice {
	if m != nil {
		return m.RuleChoice
	}
	return nil
}

func (m *ReplaceSpecType) GetAnyProxy() *ves_io_schema4.Empty {
	if x, ok := m.GetProxyChoice().(*ReplaceSpecType_AnyProxy); ok {
		return x.AnyProxy
	}
	return nil
}

func (m *ReplaceSpecType) GetNetworkConnector() *ves_io_schema_views.ObjectRefType {
	if x, ok := m.GetProxyChoice().(*ReplaceSpecType_NetworkConnector); ok {
		return x.NetworkConnector
	}
	return nil
}

func (m *ReplaceSpecType) GetProxyLabelSelector() *ves_io_schema4.LabelSelectorType {
	if x, ok := m.GetProxyChoice().(*ReplaceSpecType_ProxyLabelSelector); ok {
		return x.ProxyLabelSelector
	}
	return nil
}

func (m *ReplaceSpecType) GetDrpHttpConnect() *ves_io_schema4.Empty {
	if x, ok := m.GetProxyChoice().(*ReplaceSpecType_DrpHttpConnect); ok {
		return x.DrpHttpConnect
	}
	return nil
}

func (m *ReplaceSpecType) GetAllowAll() *ves_io_schema4.Empty {
	if x, ok := m.GetRuleChoice().(*ReplaceSpecType_AllowAll); ok {
		return x.AllowAll
	}
	return nil
}

func (m *ReplaceSpecType) GetAllowList() *ForwardProxySimpleRuleType {
	if x, ok := m.GetRuleChoice().(*ReplaceSpecType_AllowList); ok {
		return x.AllowList
	}
	return nil
}

func (m *ReplaceSpecType) GetDenyList() *ForwardProxySimpleRuleType {
	if x, ok := m.GetRuleChoice().(*ReplaceSpecType_DenyList); ok {
		return x.DenyList
	}
	return nil
}

func (m *ReplaceSpecType) GetRuleList() *ForwardProxyRuleListType {
	if x, ok := m.GetRuleChoice().(*ReplaceSpecType_RuleList); ok {
		return x.RuleList
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*ReplaceSpecType) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _ReplaceSpecType_OneofMarshaler, _ReplaceSpecType_OneofUnmarshaler, _ReplaceSpecType_OneofSizer, []interface{}{
		(*ReplaceSpecType_AnyProxy)(nil),
		(*ReplaceSpecType_NetworkConnector)(nil),
		(*ReplaceSpecType_ProxyLabelSelector)(nil),
		(*ReplaceSpecType_DrpHttpConnect)(nil),
		(*ReplaceSpecType_AllowAll)(nil),
		(*ReplaceSpecType_AllowList)(nil),
		(*ReplaceSpecType_DenyList)(nil),
		(*ReplaceSpecType_RuleList)(nil),
	}
}

func _ReplaceSpecType_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*ReplaceSpecType)
	// proxy_choice
	switch x := m.ProxyChoice.(type) {
	case *ReplaceSpecType_AnyProxy:
		_ = b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.AnyProxy); err != nil {
			return err
		}
	case *ReplaceSpecType_NetworkConnector:
		_ = b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.NetworkConnector); err != nil {
			return err
		}
	case *ReplaceSpecType_ProxyLabelSelector:
		_ = b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ProxyLabelSelector); err != nil {
			return err
		}
	case *ReplaceSpecType_DrpHttpConnect:
		_ = b.EncodeVarint(11<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.DrpHttpConnect); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("ReplaceSpecType.ProxyChoice has unexpected type %T", x)
	}
	// rule_choice
	switch x := m.RuleChoice.(type) {
	case *ReplaceSpecType_AllowAll:
		_ = b.EncodeVarint(7<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.AllowAll); err != nil {
			return err
		}
	case *ReplaceSpecType_AllowList:
		_ = b.EncodeVarint(8<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.AllowList); err != nil {
			return err
		}
	case *ReplaceSpecType_DenyList:
		_ = b.EncodeVarint(9<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.DenyList); err != nil {
			return err
		}
	case *ReplaceSpecType_RuleList:
		_ = b.EncodeVarint(10<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.RuleList); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("ReplaceSpecType.RuleChoice has unexpected type %T", x)
	}
	return nil
}

func _ReplaceSpecType_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*ReplaceSpecType)
	switch tag {
	case 2: // proxy_choice.any_proxy
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.ProxyChoice = &ReplaceSpecType_AnyProxy{msg}
		return true, err
	case 3: // proxy_choice.network_connector
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema_views.ObjectRefType)
		err := b.DecodeMessage(msg)
		m.ProxyChoice = &ReplaceSpecType_NetworkConnector{msg}
		return true, err
	case 4: // proxy_choice.proxy_label_selector
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.LabelSelectorType)
		err := b.DecodeMessage(msg)
		m.ProxyChoice = &ReplaceSpecType_ProxyLabelSelector{msg}
		return true, err
	case 11: // proxy_choice.drp_http_connect
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.ProxyChoice = &ReplaceSpecType_DrpHttpConnect{msg}
		return true, err
	case 7: // rule_choice.allow_all
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.RuleChoice = &ReplaceSpecType_AllowAll{msg}
		return true, err
	case 8: // rule_choice.allow_list
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ForwardProxySimpleRuleType)
		err := b.DecodeMessage(msg)
		m.RuleChoice = &ReplaceSpecType_AllowList{msg}
		return true, err
	case 9: // rule_choice.deny_list
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ForwardProxySimpleRuleType)
		err := b.DecodeMessage(msg)
		m.RuleChoice = &ReplaceSpecType_DenyList{msg}
		return true, err
	case 10: // rule_choice.rule_list
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ForwardProxyRuleListType)
		err := b.DecodeMessage(msg)
		m.RuleChoice = &ReplaceSpecType_RuleList{msg}
		return true, err
	default:
		return false, nil
	}
}

func _ReplaceSpecType_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*ReplaceSpecType)
	// proxy_choice
	switch x := m.ProxyChoice.(type) {
	case *ReplaceSpecType_AnyProxy:
		s := proto.Size(x.AnyProxy)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ReplaceSpecType_NetworkConnector:
		s := proto.Size(x.NetworkConnector)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ReplaceSpecType_ProxyLabelSelector:
		s := proto.Size(x.ProxyLabelSelector)
		n += proto.SizeVarint(4<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ReplaceSpecType_DrpHttpConnect:
		s := proto.Size(x.DrpHttpConnect)
		n += proto.SizeVarint(11<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	// rule_choice
	switch x := m.RuleChoice.(type) {
	case *ReplaceSpecType_AllowAll:
		s := proto.Size(x.AllowAll)
		n += proto.SizeVarint(7<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ReplaceSpecType_AllowList:
		s := proto.Size(x.AllowList)
		n += proto.SizeVarint(8<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ReplaceSpecType_DenyList:
		s := proto.Size(x.DenyList)
		n += proto.SizeVarint(9<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ReplaceSpecType_RuleList:
		s := proto.Size(x.RuleList)
		n += proto.SizeVarint(10<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// GetSpecType
//
// x-displayName: "Get Forward Proxy Policy"
// Shape of the Forward Proxy Policy specification
type GetSpecType struct {
	// Types that are valid to be assigned to ProxyChoice:
	//	*GetSpecType_AnyProxy
	//	*GetSpecType_NetworkConnector
	//	*GetSpecType_ProxyLabelSelector
	//	*GetSpecType_DrpHttpConnect
	ProxyChoice isGetSpecType_ProxyChoice `protobuf_oneof:"proxy_choice"`
	// Types that are valid to be assigned to RuleChoice:
	//	*GetSpecType_AllowAll
	//	*GetSpecType_AllowList
	//	*GetSpecType_DenyList
	//	*GetSpecType_RuleList
	RuleChoice isGetSpecType_RuleChoice `protobuf_oneof:"rule_choice"`
}

func (m *GetSpecType) Reset()                    { *m = GetSpecType{} }
func (*GetSpecType) ProtoMessage()               {}
func (*GetSpecType) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{9} }

type isGetSpecType_ProxyChoice interface {
	isGetSpecType_ProxyChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isGetSpecType_RuleChoice interface {
	isGetSpecType_RuleChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type GetSpecType_AnyProxy struct {
	AnyProxy *ves_io_schema4.Empty `protobuf:"bytes,2,opt,name=any_proxy,json=anyProxy,oneof"`
}
type GetSpecType_NetworkConnector struct {
	NetworkConnector *ves_io_schema_views.ObjectRefType `protobuf:"bytes,3,opt,name=network_connector,json=networkConnector,oneof"`
}
type GetSpecType_ProxyLabelSelector struct {
	ProxyLabelSelector *ves_io_schema4.LabelSelectorType `protobuf:"bytes,4,opt,name=proxy_label_selector,json=proxyLabelSelector,oneof"`
}
type GetSpecType_DrpHttpConnect struct {
	DrpHttpConnect *ves_io_schema4.Empty `protobuf:"bytes,11,opt,name=drp_http_connect,json=drpHttpConnect,oneof"`
}
type GetSpecType_AllowAll struct {
	AllowAll *ves_io_schema4.Empty `protobuf:"bytes,7,opt,name=allow_all,json=allowAll,oneof"`
}
type GetSpecType_AllowList struct {
	AllowList *ForwardProxySimpleRuleType `protobuf:"bytes,8,opt,name=allow_list,json=allowList,oneof"`
}
type GetSpecType_DenyList struct {
	DenyList *ForwardProxySimpleRuleType `protobuf:"bytes,9,opt,name=deny_list,json=denyList,oneof"`
}
type GetSpecType_RuleList struct {
	RuleList *ForwardProxyRuleListType `protobuf:"bytes,10,opt,name=rule_list,json=ruleList,oneof"`
}

func (*GetSpecType_AnyProxy) isGetSpecType_ProxyChoice()           {}
func (*GetSpecType_NetworkConnector) isGetSpecType_ProxyChoice()   {}
func (*GetSpecType_ProxyLabelSelector) isGetSpecType_ProxyChoice() {}
func (*GetSpecType_DrpHttpConnect) isGetSpecType_ProxyChoice()     {}
func (*GetSpecType_AllowAll) isGetSpecType_RuleChoice()            {}
func (*GetSpecType_AllowList) isGetSpecType_RuleChoice()           {}
func (*GetSpecType_DenyList) isGetSpecType_RuleChoice()            {}
func (*GetSpecType_RuleList) isGetSpecType_RuleChoice()            {}

func (m *GetSpecType) GetProxyChoice() isGetSpecType_ProxyChoice {
	if m != nil {
		return m.ProxyChoice
	}
	return nil
}
func (m *GetSpecType) GetRuleChoice() isGetSpecType_RuleChoice {
	if m != nil {
		return m.RuleChoice
	}
	return nil
}

func (m *GetSpecType) GetAnyProxy() *ves_io_schema4.Empty {
	if x, ok := m.GetProxyChoice().(*GetSpecType_AnyProxy); ok {
		return x.AnyProxy
	}
	return nil
}

func (m *GetSpecType) GetNetworkConnector() *ves_io_schema_views.ObjectRefType {
	if x, ok := m.GetProxyChoice().(*GetSpecType_NetworkConnector); ok {
		return x.NetworkConnector
	}
	return nil
}

func (m *GetSpecType) GetProxyLabelSelector() *ves_io_schema4.LabelSelectorType {
	if x, ok := m.GetProxyChoice().(*GetSpecType_ProxyLabelSelector); ok {
		return x.ProxyLabelSelector
	}
	return nil
}

func (m *GetSpecType) GetDrpHttpConnect() *ves_io_schema4.Empty {
	if x, ok := m.GetProxyChoice().(*GetSpecType_DrpHttpConnect); ok {
		return x.DrpHttpConnect
	}
	return nil
}

func (m *GetSpecType) GetAllowAll() *ves_io_schema4.Empty {
	if x, ok := m.GetRuleChoice().(*GetSpecType_AllowAll); ok {
		return x.AllowAll
	}
	return nil
}

func (m *GetSpecType) GetAllowList() *ForwardProxySimpleRuleType {
	if x, ok := m.GetRuleChoice().(*GetSpecType_AllowList); ok {
		return x.AllowList
	}
	return nil
}

func (m *GetSpecType) GetDenyList() *ForwardProxySimpleRuleType {
	if x, ok := m.GetRuleChoice().(*GetSpecType_DenyList); ok {
		return x.DenyList
	}
	return nil
}

func (m *GetSpecType) GetRuleList() *ForwardProxyRuleListType {
	if x, ok := m.GetRuleChoice().(*GetSpecType_RuleList); ok {
		return x.RuleList
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*GetSpecType) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _GetSpecType_OneofMarshaler, _GetSpecType_OneofUnmarshaler, _GetSpecType_OneofSizer, []interface{}{
		(*GetSpecType_AnyProxy)(nil),
		(*GetSpecType_NetworkConnector)(nil),
		(*GetSpecType_ProxyLabelSelector)(nil),
		(*GetSpecType_DrpHttpConnect)(nil),
		(*GetSpecType_AllowAll)(nil),
		(*GetSpecType_AllowList)(nil),
		(*GetSpecType_DenyList)(nil),
		(*GetSpecType_RuleList)(nil),
	}
}

func _GetSpecType_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*GetSpecType)
	// proxy_choice
	switch x := m.ProxyChoice.(type) {
	case *GetSpecType_AnyProxy:
		_ = b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.AnyProxy); err != nil {
			return err
		}
	case *GetSpecType_NetworkConnector:
		_ = b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.NetworkConnector); err != nil {
			return err
		}
	case *GetSpecType_ProxyLabelSelector:
		_ = b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ProxyLabelSelector); err != nil {
			return err
		}
	case *GetSpecType_DrpHttpConnect:
		_ = b.EncodeVarint(11<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.DrpHttpConnect); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("GetSpecType.ProxyChoice has unexpected type %T", x)
	}
	// rule_choice
	switch x := m.RuleChoice.(type) {
	case *GetSpecType_AllowAll:
		_ = b.EncodeVarint(7<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.AllowAll); err != nil {
			return err
		}
	case *GetSpecType_AllowList:
		_ = b.EncodeVarint(8<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.AllowList); err != nil {
			return err
		}
	case *GetSpecType_DenyList:
		_ = b.EncodeVarint(9<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.DenyList); err != nil {
			return err
		}
	case *GetSpecType_RuleList:
		_ = b.EncodeVarint(10<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.RuleList); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("GetSpecType.RuleChoice has unexpected type %T", x)
	}
	return nil
}

func _GetSpecType_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*GetSpecType)
	switch tag {
	case 2: // proxy_choice.any_proxy
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.ProxyChoice = &GetSpecType_AnyProxy{msg}
		return true, err
	case 3: // proxy_choice.network_connector
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema_views.ObjectRefType)
		err := b.DecodeMessage(msg)
		m.ProxyChoice = &GetSpecType_NetworkConnector{msg}
		return true, err
	case 4: // proxy_choice.proxy_label_selector
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.LabelSelectorType)
		err := b.DecodeMessage(msg)
		m.ProxyChoice = &GetSpecType_ProxyLabelSelector{msg}
		return true, err
	case 11: // proxy_choice.drp_http_connect
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.ProxyChoice = &GetSpecType_DrpHttpConnect{msg}
		return true, err
	case 7: // rule_choice.allow_all
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.RuleChoice = &GetSpecType_AllowAll{msg}
		return true, err
	case 8: // rule_choice.allow_list
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ForwardProxySimpleRuleType)
		err := b.DecodeMessage(msg)
		m.RuleChoice = &GetSpecType_AllowList{msg}
		return true, err
	case 9: // rule_choice.deny_list
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ForwardProxySimpleRuleType)
		err := b.DecodeMessage(msg)
		m.RuleChoice = &GetSpecType_DenyList{msg}
		return true, err
	case 10: // rule_choice.rule_list
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ForwardProxyRuleListType)
		err := b.DecodeMessage(msg)
		m.RuleChoice = &GetSpecType_RuleList{msg}
		return true, err
	default:
		return false, nil
	}
}

func _GetSpecType_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*GetSpecType)
	// proxy_choice
	switch x := m.ProxyChoice.(type) {
	case *GetSpecType_AnyProxy:
		s := proto.Size(x.AnyProxy)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *GetSpecType_NetworkConnector:
		s := proto.Size(x.NetworkConnector)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *GetSpecType_ProxyLabelSelector:
		s := proto.Size(x.ProxyLabelSelector)
		n += proto.SizeVarint(4<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *GetSpecType_DrpHttpConnect:
		s := proto.Size(x.DrpHttpConnect)
		n += proto.SizeVarint(11<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	// rule_choice
	switch x := m.RuleChoice.(type) {
	case *GetSpecType_AllowAll:
		s := proto.Size(x.AllowAll)
		n += proto.SizeVarint(7<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *GetSpecType_AllowList:
		s := proto.Size(x.AllowList)
		n += proto.SizeVarint(8<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *GetSpecType_DenyList:
		s := proto.Size(x.DenyList)
		n += proto.SizeVarint(9<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *GetSpecType_RuleList:
		s := proto.Size(x.RuleList)
		n += proto.SizeVarint(10<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

func init() {
	proto.RegisterType((*URLType)(nil), "ves.io.schema.views.forward_proxy_policy.URLType")
	golang_proto.RegisterType((*URLType)(nil), "ves.io.schema.views.forward_proxy_policy.URLType")
	proto.RegisterType((*ForwardProxySimpleRuleType)(nil), "ves.io.schema.views.forward_proxy_policy.ForwardProxySimpleRuleType")
	golang_proto.RegisterType((*ForwardProxySimpleRuleType)(nil), "ves.io.schema.views.forward_proxy_policy.ForwardProxySimpleRuleType")
	proto.RegisterType((*DomainListType)(nil), "ves.io.schema.views.forward_proxy_policy.DomainListType")
	golang_proto.RegisterType((*DomainListType)(nil), "ves.io.schema.views.forward_proxy_policy.DomainListType")
	proto.RegisterType((*URLListType)(nil), "ves.io.schema.views.forward_proxy_policy.URLListType")
	golang_proto.RegisterType((*URLListType)(nil), "ves.io.schema.views.forward_proxy_policy.URLListType")
	proto.RegisterType((*ForwardProxyAdvancedRuleType)(nil), "ves.io.schema.views.forward_proxy_policy.ForwardProxyAdvancedRuleType")
	golang_proto.RegisterType((*ForwardProxyAdvancedRuleType)(nil), "ves.io.schema.views.forward_proxy_policy.ForwardProxyAdvancedRuleType")
	proto.RegisterType((*ForwardProxyRuleListType)(nil), "ves.io.schema.views.forward_proxy_policy.ForwardProxyRuleListType")
	golang_proto.RegisterType((*ForwardProxyRuleListType)(nil), "ves.io.schema.views.forward_proxy_policy.ForwardProxyRuleListType")
	proto.RegisterType((*GlobalSpecType)(nil), "ves.io.schema.views.forward_proxy_policy.GlobalSpecType")
	golang_proto.RegisterType((*GlobalSpecType)(nil), "ves.io.schema.views.forward_proxy_policy.GlobalSpecType")
	proto.RegisterType((*CreateSpecType)(nil), "ves.io.schema.views.forward_proxy_policy.CreateSpecType")
	golang_proto.RegisterType((*CreateSpecType)(nil), "ves.io.schema.views.forward_proxy_policy.CreateSpecType")
	proto.RegisterType((*ReplaceSpecType)(nil), "ves.io.schema.views.forward_proxy_policy.ReplaceSpecType")
	golang_proto.RegisterType((*ReplaceSpecType)(nil), "ves.io.schema.views.forward_proxy_policy.ReplaceSpecType")
	proto.RegisterType((*GetSpecType)(nil), "ves.io.schema.views.forward_proxy_policy.GetSpecType")
	golang_proto.RegisterType((*GetSpecType)(nil), "ves.io.schema.views.forward_proxy_policy.GetSpecType")
}
func (this *URLType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*URLType)
	if !ok {
		that2, ok := that.(URLType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.DomainChoice == nil {
		if this.DomainChoice != nil {
			return false
		}
	} else if this.DomainChoice == nil {
		return false
	} else if !this.DomainChoice.Equal(that1.DomainChoice) {
		return false
	}
	if that1.PathChoice == nil {
		if this.PathChoice != nil {
			return false
		}
	} else if this.PathChoice == nil {
		return false
	} else if !this.PathChoice.Equal(that1.PathChoice) {
		return false
	}
	return true
}
func (this *URLType_ExactValue) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*URLType_ExactValue)
	if !ok {
		that2, ok := that.(URLType_ExactValue)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ExactValue != that1.ExactValue {
		return false
	}
	return true
}
func (this *URLType_SuffixValue) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*URLType_SuffixValue)
	if !ok {
		that2, ok := that.(URLType_SuffixValue)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.SuffixValue != that1.SuffixValue {
		return false
	}
	return true
}
func (this *URLType_RegexValue) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*URLType_RegexValue)
	if !ok {
		that2, ok := that.(URLType_RegexValue)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.RegexValue != that1.RegexValue {
		return false
	}
	return true
}
func (this *URLType_PathExactValue) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*URLType_PathExactValue)
	if !ok {
		that2, ok := that.(URLType_PathExactValue)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.PathExactValue != that1.PathExactValue {
		return false
	}
	return true
}
func (this *URLType_PathPrefixValue) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*URLType_PathPrefixValue)
	if !ok {
		that2, ok := that.(URLType_PathPrefixValue)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.PathPrefixValue != that1.PathPrefixValue {
		return false
	}
	return true
}
func (this *URLType_PathRegexValue) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*URLType_PathRegexValue)
	if !ok {
		that2, ok := that.(URLType_PathRegexValue)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.PathRegexValue != that1.PathRegexValue {
		return false
	}
	return true
}
func (this *URLType_AnyPath) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*URLType_AnyPath)
	if !ok {
		that2, ok := that.(URLType_AnyPath)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AnyPath.Equal(that1.AnyPath) {
		return false
	}
	return true
}
func (this *ForwardProxySimpleRuleType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ForwardProxySimpleRuleType)
	if !ok {
		that2, ok := that.(ForwardProxySimpleRuleType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Metadata.Equal(that1.Metadata) {
		return false
	}
	if this.RuleName != that1.RuleName {
		return false
	}
	if this.RuleDescription != that1.RuleDescription {
		return false
	}
	if len(this.TlsList) != len(that1.TlsList) {
		return false
	}
	for i := range this.TlsList {
		if !this.TlsList[i].Equal(that1.TlsList[i]) {
			return false
		}
	}
	if len(this.HttpList) != len(that1.HttpList) {
		return false
	}
	for i := range this.HttpList {
		if !this.HttpList[i].Equal(that1.HttpList[i]) {
			return false
		}
	}
	if len(this.DestList) != len(that1.DestList) {
		return false
	}
	for i := range this.DestList {
		if !this.DestList[i].Equal(that1.DestList[i]) {
			return false
		}
	}
	if that1.DefaultActionChoice == nil {
		if this.DefaultActionChoice != nil {
			return false
		}
	} else if this.DefaultActionChoice == nil {
		return false
	} else if !this.DefaultActionChoice.Equal(that1.DefaultActionChoice) {
		return false
	}
	return true
}
func (this *ForwardProxySimpleRuleType_DefaultActionNextPolicy) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ForwardProxySimpleRuleType_DefaultActionNextPolicy)
	if !ok {
		that2, ok := that.(ForwardProxySimpleRuleType_DefaultActionNextPolicy)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DefaultActionNextPolicy.Equal(that1.DefaultActionNextPolicy) {
		return false
	}
	return true
}
func (this *ForwardProxySimpleRuleType_DefaultActionDeny) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ForwardProxySimpleRuleType_DefaultActionDeny)
	if !ok {
		that2, ok := that.(ForwardProxySimpleRuleType_DefaultActionDeny)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DefaultActionDeny.Equal(that1.DefaultActionDeny) {
		return false
	}
	return true
}
func (this *ForwardProxySimpleRuleType_DefaultActionAllow) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ForwardProxySimpleRuleType_DefaultActionAllow)
	if !ok {
		that2, ok := that.(ForwardProxySimpleRuleType_DefaultActionAllow)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DefaultActionAllow.Equal(that1.DefaultActionAllow) {
		return false
	}
	return true
}
func (this *DomainListType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DomainListType)
	if !ok {
		that2, ok := that.(DomainListType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.TlsList) != len(that1.TlsList) {
		return false
	}
	for i := range this.TlsList {
		if !this.TlsList[i].Equal(that1.TlsList[i]) {
			return false
		}
	}
	return true
}
func (this *URLListType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*URLListType)
	if !ok {
		that2, ok := that.(URLListType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.HttpList) != len(that1.HttpList) {
		return false
	}
	for i := range this.HttpList {
		if !this.HttpList[i].Equal(that1.HttpList[i]) {
			return false
		}
	}
	return true
}
func (this *ForwardProxyAdvancedRuleType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ForwardProxyAdvancedRuleType)
	if !ok {
		that2, ok := that.(ForwardProxyAdvancedRuleType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Metadata.Equal(that1.Metadata) {
		return false
	}
	if this.RuleName != that1.RuleName {
		return false
	}
	if this.RuleDescription != that1.RuleDescription {
		return false
	}
	if this.Action != that1.Action {
		return false
	}
	if that1.SourceChoice == nil {
		if this.SourceChoice != nil {
			return false
		}
	} else if this.SourceChoice == nil {
		return false
	} else if !this.SourceChoice.Equal(that1.SourceChoice) {
		return false
	}
	if that1.DestinationChoice == nil {
		if this.DestinationChoice != nil {
			return false
		}
	} else if this.DestinationChoice == nil {
		return false
	} else if !this.DestinationChoice.Equal(that1.DestinationChoice) {
		return false
	}
	if that1.HttpConnectChoice == nil {
		if this.HttpConnectChoice != nil {
			return false
		}
	} else if this.HttpConnectChoice == nil {
		return false
	} else if !this.HttpConnectChoice.Equal(that1.HttpConnectChoice) {
		return false
	}
	return true
}
func (this *ForwardProxyAdvancedRuleType_AllSources) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ForwardProxyAdvancedRuleType_AllSources)
	if !ok {
		that2, ok := that.(ForwardProxyAdvancedRuleType_AllSources)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AllSources.Equal(that1.AllSources) {
		return false
	}
	return true
}
func (this *ForwardProxyAdvancedRuleType_PrefixList) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ForwardProxyAdvancedRuleType_PrefixList)
	if !ok {
		that2, ok := that.(ForwardProxyAdvancedRuleType_PrefixList)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.PrefixList.Equal(that1.PrefixList) {
		return false
	}
	return true
}
func (this *ForwardProxyAdvancedRuleType_InsideSources) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ForwardProxyAdvancedRuleType_InsideSources)
	if !ok {
		that2, ok := that.(ForwardProxyAdvancedRuleType_InsideSources)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.InsideSources.Equal(that1.InsideSources) {
		return false
	}
	return true
}
func (this *ForwardProxyAdvancedRuleType_Interface) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ForwardProxyAdvancedRuleType_Interface)
	if !ok {
		that2, ok := that.(ForwardProxyAdvancedRuleType_Interface)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Interface.Equal(that1.Interface) {
		return false
	}
	return true
}
func (this *ForwardProxyAdvancedRuleType_Namespace) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ForwardProxyAdvancedRuleType_Namespace)
	if !ok {
		that2, ok := that.(ForwardProxyAdvancedRuleType_Namespace)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Namespace != that1.Namespace {
		return false
	}
	return true
}
func (this *ForwardProxyAdvancedRuleType_LabelSelector) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ForwardProxyAdvancedRuleType_LabelSelector)
	if !ok {
		that2, ok := that.(ForwardProxyAdvancedRuleType_LabelSelector)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.LabelSelector.Equal(that1.LabelSelector) {
		return false
	}
	return true
}
func (this *ForwardProxyAdvancedRuleType_IpPrefixSet) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ForwardProxyAdvancedRuleType_IpPrefixSet)
	if !ok {
		that2, ok := that.(ForwardProxyAdvancedRuleType_IpPrefixSet)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.IpPrefixSet.Equal(that1.IpPrefixSet) {
		return false
	}
	return true
}
func (this *ForwardProxyAdvancedRuleType_AllDestinations) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ForwardProxyAdvancedRuleType_AllDestinations)
	if !ok {
		that2, ok := that.(ForwardProxyAdvancedRuleType_AllDestinations)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AllDestinations.Equal(that1.AllDestinations) {
		return false
	}
	return true
}
func (this *ForwardProxyAdvancedRuleType_TlsList) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ForwardProxyAdvancedRuleType_TlsList)
	if !ok {
		that2, ok := that.(ForwardProxyAdvancedRuleType_TlsList)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.TlsList.Equal(that1.TlsList) {
		return false
	}
	return true
}
func (this *ForwardProxyAdvancedRuleType_HttpList) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ForwardProxyAdvancedRuleType_HttpList)
	if !ok {
		that2, ok := that.(ForwardProxyAdvancedRuleType_HttpList)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.HttpList.Equal(that1.HttpList) {
		return false
	}
	return true
}
func (this *ForwardProxyAdvancedRuleType_DstIpPrefixSet) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ForwardProxyAdvancedRuleType_DstIpPrefixSet)
	if !ok {
		that2, ok := that.(ForwardProxyAdvancedRuleType_DstIpPrefixSet)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DstIpPrefixSet.Equal(that1.DstIpPrefixSet) {
		return false
	}
	return true
}
func (this *ForwardProxyAdvancedRuleType_DstPrefixList) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ForwardProxyAdvancedRuleType_DstPrefixList)
	if !ok {
		that2, ok := that.(ForwardProxyAdvancedRuleType_DstPrefixList)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DstPrefixList.Equal(that1.DstPrefixList) {
		return false
	}
	return true
}
func (this *ForwardProxyAdvancedRuleType_DstAsnSet) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ForwardProxyAdvancedRuleType_DstAsnSet)
	if !ok {
		that2, ok := that.(ForwardProxyAdvancedRuleType_DstAsnSet)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DstAsnSet.Equal(that1.DstAsnSet) {
		return false
	}
	return true
}
func (this *ForwardProxyAdvancedRuleType_DstAsnList) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ForwardProxyAdvancedRuleType_DstAsnList)
	if !ok {
		that2, ok := that.(ForwardProxyAdvancedRuleType_DstAsnList)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DstAsnList.Equal(that1.DstAsnList) {
		return false
	}
	return true
}
func (this *ForwardProxyAdvancedRuleType_DstLabelSelector) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ForwardProxyAdvancedRuleType_DstLabelSelector)
	if !ok {
		that2, ok := that.(ForwardProxyAdvancedRuleType_DstLabelSelector)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DstLabelSelector.Equal(that1.DstLabelSelector) {
		return false
	}
	return true
}
func (this *ForwardProxyAdvancedRuleType_NoHttpConnectPort) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ForwardProxyAdvancedRuleType_NoHttpConnectPort)
	if !ok {
		that2, ok := that.(ForwardProxyAdvancedRuleType_NoHttpConnectPort)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NoHttpConnectPort.Equal(that1.NoHttpConnectPort) {
		return false
	}
	return true
}
func (this *ForwardProxyAdvancedRuleType_PortMatcher) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ForwardProxyAdvancedRuleType_PortMatcher)
	if !ok {
		that2, ok := that.(ForwardProxyAdvancedRuleType_PortMatcher)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.PortMatcher.Equal(that1.PortMatcher) {
		return false
	}
	return true
}
func (this *ForwardProxyRuleListType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ForwardProxyRuleListType)
	if !ok {
		that2, ok := that.(ForwardProxyRuleListType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Rules) != len(that1.Rules) {
		return false
	}
	for i := range this.Rules {
		if !this.Rules[i].Equal(that1.Rules[i]) {
			return false
		}
	}
	return true
}
func (this *GlobalSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType)
	if !ok {
		that2, ok := that.(GlobalSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.ProxyChoice == nil {
		if this.ProxyChoice != nil {
			return false
		}
	} else if this.ProxyChoice == nil {
		return false
	} else if !this.ProxyChoice.Equal(that1.ProxyChoice) {
		return false
	}
	if that1.RuleChoice == nil {
		if this.RuleChoice != nil {
			return false
		}
	} else if this.RuleChoice == nil {
		return false
	} else if !this.RuleChoice.Equal(that1.RuleChoice) {
		return false
	}
	if !this.ViewInternal.Equal(that1.ViewInternal) {
		return false
	}
	return true
}
func (this *GlobalSpecType_AnyProxy) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_AnyProxy)
	if !ok {
		that2, ok := that.(GlobalSpecType_AnyProxy)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AnyProxy.Equal(that1.AnyProxy) {
		return false
	}
	return true
}
func (this *GlobalSpecType_NetworkConnector) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_NetworkConnector)
	if !ok {
		that2, ok := that.(GlobalSpecType_NetworkConnector)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NetworkConnector.Equal(that1.NetworkConnector) {
		return false
	}
	return true
}
func (this *GlobalSpecType_ProxyLabelSelector) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_ProxyLabelSelector)
	if !ok {
		that2, ok := that.(GlobalSpecType_ProxyLabelSelector)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ProxyLabelSelector.Equal(that1.ProxyLabelSelector) {
		return false
	}
	return true
}
func (this *GlobalSpecType_DrpHttpConnect) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_DrpHttpConnect)
	if !ok {
		that2, ok := that.(GlobalSpecType_DrpHttpConnect)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DrpHttpConnect.Equal(that1.DrpHttpConnect) {
		return false
	}
	return true
}
func (this *GlobalSpecType_AllowAll) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_AllowAll)
	if !ok {
		that2, ok := that.(GlobalSpecType_AllowAll)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AllowAll.Equal(that1.AllowAll) {
		return false
	}
	return true
}
func (this *GlobalSpecType_AllowList) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_AllowList)
	if !ok {
		that2, ok := that.(GlobalSpecType_AllowList)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AllowList.Equal(that1.AllowList) {
		return false
	}
	return true
}
func (this *GlobalSpecType_DenyList) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_DenyList)
	if !ok {
		that2, ok := that.(GlobalSpecType_DenyList)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DenyList.Equal(that1.DenyList) {
		return false
	}
	return true
}
func (this *GlobalSpecType_RuleList) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_RuleList)
	if !ok {
		that2, ok := that.(GlobalSpecType_RuleList)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.RuleList.Equal(that1.RuleList) {
		return false
	}
	return true
}
func (this *CreateSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType)
	if !ok {
		that2, ok := that.(CreateSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.ProxyChoice == nil {
		if this.ProxyChoice != nil {
			return false
		}
	} else if this.ProxyChoice == nil {
		return false
	} else if !this.ProxyChoice.Equal(that1.ProxyChoice) {
		return false
	}
	if that1.RuleChoice == nil {
		if this.RuleChoice != nil {
			return false
		}
	} else if this.RuleChoice == nil {
		return false
	} else if !this.RuleChoice.Equal(that1.RuleChoice) {
		return false
	}
	return true
}
func (this *CreateSpecType_AnyProxy) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_AnyProxy)
	if !ok {
		that2, ok := that.(CreateSpecType_AnyProxy)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AnyProxy.Equal(that1.AnyProxy) {
		return false
	}
	return true
}
func (this *CreateSpecType_NetworkConnector) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_NetworkConnector)
	if !ok {
		that2, ok := that.(CreateSpecType_NetworkConnector)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NetworkConnector.Equal(that1.NetworkConnector) {
		return false
	}
	return true
}
func (this *CreateSpecType_ProxyLabelSelector) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_ProxyLabelSelector)
	if !ok {
		that2, ok := that.(CreateSpecType_ProxyLabelSelector)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ProxyLabelSelector.Equal(that1.ProxyLabelSelector) {
		return false
	}
	return true
}
func (this *CreateSpecType_DrpHttpConnect) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_DrpHttpConnect)
	if !ok {
		that2, ok := that.(CreateSpecType_DrpHttpConnect)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DrpHttpConnect.Equal(that1.DrpHttpConnect) {
		return false
	}
	return true
}
func (this *CreateSpecType_AllowAll) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_AllowAll)
	if !ok {
		that2, ok := that.(CreateSpecType_AllowAll)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AllowAll.Equal(that1.AllowAll) {
		return false
	}
	return true
}
func (this *CreateSpecType_AllowList) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_AllowList)
	if !ok {
		that2, ok := that.(CreateSpecType_AllowList)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AllowList.Equal(that1.AllowList) {
		return false
	}
	return true
}
func (this *CreateSpecType_DenyList) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_DenyList)
	if !ok {
		that2, ok := that.(CreateSpecType_DenyList)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DenyList.Equal(that1.DenyList) {
		return false
	}
	return true
}
func (this *CreateSpecType_RuleList) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_RuleList)
	if !ok {
		that2, ok := that.(CreateSpecType_RuleList)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.RuleList.Equal(that1.RuleList) {
		return false
	}
	return true
}
func (this *ReplaceSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType)
	if !ok {
		that2, ok := that.(ReplaceSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.ProxyChoice == nil {
		if this.ProxyChoice != nil {
			return false
		}
	} else if this.ProxyChoice == nil {
		return false
	} else if !this.ProxyChoice.Equal(that1.ProxyChoice) {
		return false
	}
	if that1.RuleChoice == nil {
		if this.RuleChoice != nil {
			return false
		}
	} else if this.RuleChoice == nil {
		return false
	} else if !this.RuleChoice.Equal(that1.RuleChoice) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_AnyProxy) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_AnyProxy)
	if !ok {
		that2, ok := that.(ReplaceSpecType_AnyProxy)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AnyProxy.Equal(that1.AnyProxy) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_NetworkConnector) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_NetworkConnector)
	if !ok {
		that2, ok := that.(ReplaceSpecType_NetworkConnector)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NetworkConnector.Equal(that1.NetworkConnector) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_ProxyLabelSelector) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_ProxyLabelSelector)
	if !ok {
		that2, ok := that.(ReplaceSpecType_ProxyLabelSelector)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ProxyLabelSelector.Equal(that1.ProxyLabelSelector) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_DrpHttpConnect) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_DrpHttpConnect)
	if !ok {
		that2, ok := that.(ReplaceSpecType_DrpHttpConnect)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DrpHttpConnect.Equal(that1.DrpHttpConnect) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_AllowAll) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_AllowAll)
	if !ok {
		that2, ok := that.(ReplaceSpecType_AllowAll)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AllowAll.Equal(that1.AllowAll) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_AllowList) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_AllowList)
	if !ok {
		that2, ok := that.(ReplaceSpecType_AllowList)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AllowList.Equal(that1.AllowList) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_DenyList) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_DenyList)
	if !ok {
		that2, ok := that.(ReplaceSpecType_DenyList)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DenyList.Equal(that1.DenyList) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_RuleList) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_RuleList)
	if !ok {
		that2, ok := that.(ReplaceSpecType_RuleList)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.RuleList.Equal(that1.RuleList) {
		return false
	}
	return true
}
func (this *GetSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType)
	if !ok {
		that2, ok := that.(GetSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.ProxyChoice == nil {
		if this.ProxyChoice != nil {
			return false
		}
	} else if this.ProxyChoice == nil {
		return false
	} else if !this.ProxyChoice.Equal(that1.ProxyChoice) {
		return false
	}
	if that1.RuleChoice == nil {
		if this.RuleChoice != nil {
			return false
		}
	} else if this.RuleChoice == nil {
		return false
	} else if !this.RuleChoice.Equal(that1.RuleChoice) {
		return false
	}
	return true
}
func (this *GetSpecType_AnyProxy) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_AnyProxy)
	if !ok {
		that2, ok := that.(GetSpecType_AnyProxy)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AnyProxy.Equal(that1.AnyProxy) {
		return false
	}
	return true
}
func (this *GetSpecType_NetworkConnector) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_NetworkConnector)
	if !ok {
		that2, ok := that.(GetSpecType_NetworkConnector)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NetworkConnector.Equal(that1.NetworkConnector) {
		return false
	}
	return true
}
func (this *GetSpecType_ProxyLabelSelector) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_ProxyLabelSelector)
	if !ok {
		that2, ok := that.(GetSpecType_ProxyLabelSelector)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ProxyLabelSelector.Equal(that1.ProxyLabelSelector) {
		return false
	}
	return true
}
func (this *GetSpecType_DrpHttpConnect) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_DrpHttpConnect)
	if !ok {
		that2, ok := that.(GetSpecType_DrpHttpConnect)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DrpHttpConnect.Equal(that1.DrpHttpConnect) {
		return false
	}
	return true
}
func (this *GetSpecType_AllowAll) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_AllowAll)
	if !ok {
		that2, ok := that.(GetSpecType_AllowAll)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AllowAll.Equal(that1.AllowAll) {
		return false
	}
	return true
}
func (this *GetSpecType_AllowList) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_AllowList)
	if !ok {
		that2, ok := that.(GetSpecType_AllowList)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AllowList.Equal(that1.AllowList) {
		return false
	}
	return true
}
func (this *GetSpecType_DenyList) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_DenyList)
	if !ok {
		that2, ok := that.(GetSpecType_DenyList)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DenyList.Equal(that1.DenyList) {
		return false
	}
	return true
}
func (this *GetSpecType_RuleList) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_RuleList)
	if !ok {
		that2, ok := that.(GetSpecType_RuleList)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.RuleList.Equal(that1.RuleList) {
		return false
	}
	return true
}
func (this *URLType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 11)
	s = append(s, "&forward_proxy_policy.URLType{")
	if this.DomainChoice != nil {
		s = append(s, "DomainChoice: "+fmt.Sprintf("%#v", this.DomainChoice)+",\n")
	}
	if this.PathChoice != nil {
		s = append(s, "PathChoice: "+fmt.Sprintf("%#v", this.PathChoice)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *URLType_ExactValue) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&forward_proxy_policy.URLType_ExactValue{` +
		`ExactValue:` + fmt.Sprintf("%#v", this.ExactValue) + `}`}, ", ")
	return s
}
func (this *URLType_SuffixValue) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&forward_proxy_policy.URLType_SuffixValue{` +
		`SuffixValue:` + fmt.Sprintf("%#v", this.SuffixValue) + `}`}, ", ")
	return s
}
func (this *URLType_RegexValue) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&forward_proxy_policy.URLType_RegexValue{` +
		`RegexValue:` + fmt.Sprintf("%#v", this.RegexValue) + `}`}, ", ")
	return s
}
func (this *URLType_PathExactValue) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&forward_proxy_policy.URLType_PathExactValue{` +
		`PathExactValue:` + fmt.Sprintf("%#v", this.PathExactValue) + `}`}, ", ")
	return s
}
func (this *URLType_PathPrefixValue) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&forward_proxy_policy.URLType_PathPrefixValue{` +
		`PathPrefixValue:` + fmt.Sprintf("%#v", this.PathPrefixValue) + `}`}, ", ")
	return s
}
func (this *URLType_PathRegexValue) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&forward_proxy_policy.URLType_PathRegexValue{` +
		`PathRegexValue:` + fmt.Sprintf("%#v", this.PathRegexValue) + `}`}, ", ")
	return s
}
func (this *URLType_AnyPath) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&forward_proxy_policy.URLType_AnyPath{` +
		`AnyPath:` + fmt.Sprintf("%#v", this.AnyPath) + `}`}, ", ")
	return s
}
func (this *ForwardProxySimpleRuleType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 13)
	s = append(s, "&forward_proxy_policy.ForwardProxySimpleRuleType{")
	if this.Metadata != nil {
		s = append(s, "Metadata: "+fmt.Sprintf("%#v", this.Metadata)+",\n")
	}
	s = append(s, "RuleName: "+fmt.Sprintf("%#v", this.RuleName)+",\n")
	s = append(s, "RuleDescription: "+fmt.Sprintf("%#v", this.RuleDescription)+",\n")
	if this.TlsList != nil {
		s = append(s, "TlsList: "+fmt.Sprintf("%#v", this.TlsList)+",\n")
	}
	if this.HttpList != nil {
		s = append(s, "HttpList: "+fmt.Sprintf("%#v", this.HttpList)+",\n")
	}
	if this.DestList != nil {
		s = append(s, "DestList: "+fmt.Sprintf("%#v", this.DestList)+",\n")
	}
	if this.DefaultActionChoice != nil {
		s = append(s, "DefaultActionChoice: "+fmt.Sprintf("%#v", this.DefaultActionChoice)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ForwardProxySimpleRuleType_DefaultActionNextPolicy) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&forward_proxy_policy.ForwardProxySimpleRuleType_DefaultActionNextPolicy{` +
		`DefaultActionNextPolicy:` + fmt.Sprintf("%#v", this.DefaultActionNextPolicy) + `}`}, ", ")
	return s
}
func (this *ForwardProxySimpleRuleType_DefaultActionDeny) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&forward_proxy_policy.ForwardProxySimpleRuleType_DefaultActionDeny{` +
		`DefaultActionDeny:` + fmt.Sprintf("%#v", this.DefaultActionDeny) + `}`}, ", ")
	return s
}
func (this *ForwardProxySimpleRuleType_DefaultActionAllow) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&forward_proxy_policy.ForwardProxySimpleRuleType_DefaultActionAllow{` +
		`DefaultActionAllow:` + fmt.Sprintf("%#v", this.DefaultActionAllow) + `}`}, ", ")
	return s
}
func (this *DomainListType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&forward_proxy_policy.DomainListType{")
	if this.TlsList != nil {
		s = append(s, "TlsList: "+fmt.Sprintf("%#v", this.TlsList)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *URLListType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&forward_proxy_policy.URLListType{")
	if this.HttpList != nil {
		s = append(s, "HttpList: "+fmt.Sprintf("%#v", this.HttpList)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ForwardProxyAdvancedRuleType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 25)
	s = append(s, "&forward_proxy_policy.ForwardProxyAdvancedRuleType{")
	if this.Metadata != nil {
		s = append(s, "Metadata: "+fmt.Sprintf("%#v", this.Metadata)+",\n")
	}
	s = append(s, "RuleName: "+fmt.Sprintf("%#v", this.RuleName)+",\n")
	s = append(s, "RuleDescription: "+fmt.Sprintf("%#v", this.RuleDescription)+",\n")
	s = append(s, "Action: "+fmt.Sprintf("%#v", this.Action)+",\n")
	if this.SourceChoice != nil {
		s = append(s, "SourceChoice: "+fmt.Sprintf("%#v", this.SourceChoice)+",\n")
	}
	if this.DestinationChoice != nil {
		s = append(s, "DestinationChoice: "+fmt.Sprintf("%#v", this.DestinationChoice)+",\n")
	}
	if this.HttpConnectChoice != nil {
		s = append(s, "HttpConnectChoice: "+fmt.Sprintf("%#v", this.HttpConnectChoice)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ForwardProxyAdvancedRuleType_AllSources) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&forward_proxy_policy.ForwardProxyAdvancedRuleType_AllSources{` +
		`AllSources:` + fmt.Sprintf("%#v", this.AllSources) + `}`}, ", ")
	return s
}
func (this *ForwardProxyAdvancedRuleType_PrefixList) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&forward_proxy_policy.ForwardProxyAdvancedRuleType_PrefixList{` +
		`PrefixList:` + fmt.Sprintf("%#v", this.PrefixList) + `}`}, ", ")
	return s
}
func (this *ForwardProxyAdvancedRuleType_InsideSources) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&forward_proxy_policy.ForwardProxyAdvancedRuleType_InsideSources{` +
		`InsideSources:` + fmt.Sprintf("%#v", this.InsideSources) + `}`}, ", ")
	return s
}
func (this *ForwardProxyAdvancedRuleType_Interface) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&forward_proxy_policy.ForwardProxyAdvancedRuleType_Interface{` +
		`Interface:` + fmt.Sprintf("%#v", this.Interface) + `}`}, ", ")
	return s
}
func (this *ForwardProxyAdvancedRuleType_Namespace) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&forward_proxy_policy.ForwardProxyAdvancedRuleType_Namespace{` +
		`Namespace:` + fmt.Sprintf("%#v", this.Namespace) + `}`}, ", ")
	return s
}
func (this *ForwardProxyAdvancedRuleType_LabelSelector) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&forward_proxy_policy.ForwardProxyAdvancedRuleType_LabelSelector{` +
		`LabelSelector:` + fmt.Sprintf("%#v", this.LabelSelector) + `}`}, ", ")
	return s
}
func (this *ForwardProxyAdvancedRuleType_IpPrefixSet) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&forward_proxy_policy.ForwardProxyAdvancedRuleType_IpPrefixSet{` +
		`IpPrefixSet:` + fmt.Sprintf("%#v", this.IpPrefixSet) + `}`}, ", ")
	return s
}
func (this *ForwardProxyAdvancedRuleType_AllDestinations) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&forward_proxy_policy.ForwardProxyAdvancedRuleType_AllDestinations{` +
		`AllDestinations:` + fmt.Sprintf("%#v", this.AllDestinations) + `}`}, ", ")
	return s
}
func (this *ForwardProxyAdvancedRuleType_TlsList) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&forward_proxy_policy.ForwardProxyAdvancedRuleType_TlsList{` +
		`TlsList:` + fmt.Sprintf("%#v", this.TlsList) + `}`}, ", ")
	return s
}
func (this *ForwardProxyAdvancedRuleType_HttpList) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&forward_proxy_policy.ForwardProxyAdvancedRuleType_HttpList{` +
		`HttpList:` + fmt.Sprintf("%#v", this.HttpList) + `}`}, ", ")
	return s
}
func (this *ForwardProxyAdvancedRuleType_DstIpPrefixSet) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&forward_proxy_policy.ForwardProxyAdvancedRuleType_DstIpPrefixSet{` +
		`DstIpPrefixSet:` + fmt.Sprintf("%#v", this.DstIpPrefixSet) + `}`}, ", ")
	return s
}
func (this *ForwardProxyAdvancedRuleType_DstPrefixList) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&forward_proxy_policy.ForwardProxyAdvancedRuleType_DstPrefixList{` +
		`DstPrefixList:` + fmt.Sprintf("%#v", this.DstPrefixList) + `}`}, ", ")
	return s
}
func (this *ForwardProxyAdvancedRuleType_DstAsnSet) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&forward_proxy_policy.ForwardProxyAdvancedRuleType_DstAsnSet{` +
		`DstAsnSet:` + fmt.Sprintf("%#v", this.DstAsnSet) + `}`}, ", ")
	return s
}
func (this *ForwardProxyAdvancedRuleType_DstAsnList) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&forward_proxy_policy.ForwardProxyAdvancedRuleType_DstAsnList{` +
		`DstAsnList:` + fmt.Sprintf("%#v", this.DstAsnList) + `}`}, ", ")
	return s
}
func (this *ForwardProxyAdvancedRuleType_DstLabelSelector) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&forward_proxy_policy.ForwardProxyAdvancedRuleType_DstLabelSelector{` +
		`DstLabelSelector:` + fmt.Sprintf("%#v", this.DstLabelSelector) + `}`}, ", ")
	return s
}
func (this *ForwardProxyAdvancedRuleType_NoHttpConnectPort) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&forward_proxy_policy.ForwardProxyAdvancedRuleType_NoHttpConnectPort{` +
		`NoHttpConnectPort:` + fmt.Sprintf("%#v", this.NoHttpConnectPort) + `}`}, ", ")
	return s
}
func (this *ForwardProxyAdvancedRuleType_PortMatcher) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&forward_proxy_policy.ForwardProxyAdvancedRuleType_PortMatcher{` +
		`PortMatcher:` + fmt.Sprintf("%#v", this.PortMatcher) + `}`}, ", ")
	return s
}
func (this *ForwardProxyRuleListType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&forward_proxy_policy.ForwardProxyRuleListType{")
	if this.Rules != nil {
		s = append(s, "Rules: "+fmt.Sprintf("%#v", this.Rules)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GlobalSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 13)
	s = append(s, "&forward_proxy_policy.GlobalSpecType{")
	if this.ProxyChoice != nil {
		s = append(s, "ProxyChoice: "+fmt.Sprintf("%#v", this.ProxyChoice)+",\n")
	}
	if this.RuleChoice != nil {
		s = append(s, "RuleChoice: "+fmt.Sprintf("%#v", this.RuleChoice)+",\n")
	}
	if this.ViewInternal != nil {
		s = append(s, "ViewInternal: "+fmt.Sprintf("%#v", this.ViewInternal)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GlobalSpecType_AnyProxy) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&forward_proxy_policy.GlobalSpecType_AnyProxy{` +
		`AnyProxy:` + fmt.Sprintf("%#v", this.AnyProxy) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_NetworkConnector) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&forward_proxy_policy.GlobalSpecType_NetworkConnector{` +
		`NetworkConnector:` + fmt.Sprintf("%#v", this.NetworkConnector) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_ProxyLabelSelector) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&forward_proxy_policy.GlobalSpecType_ProxyLabelSelector{` +
		`ProxyLabelSelector:` + fmt.Sprintf("%#v", this.ProxyLabelSelector) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_DrpHttpConnect) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&forward_proxy_policy.GlobalSpecType_DrpHttpConnect{` +
		`DrpHttpConnect:` + fmt.Sprintf("%#v", this.DrpHttpConnect) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_AllowAll) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&forward_proxy_policy.GlobalSpecType_AllowAll{` +
		`AllowAll:` + fmt.Sprintf("%#v", this.AllowAll) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_AllowList) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&forward_proxy_policy.GlobalSpecType_AllowList{` +
		`AllowList:` + fmt.Sprintf("%#v", this.AllowList) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_DenyList) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&forward_proxy_policy.GlobalSpecType_DenyList{` +
		`DenyList:` + fmt.Sprintf("%#v", this.DenyList) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_RuleList) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&forward_proxy_policy.GlobalSpecType_RuleList{` +
		`RuleList:` + fmt.Sprintf("%#v", this.RuleList) + `}`}, ", ")
	return s
}
func (this *CreateSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 12)
	s = append(s, "&forward_proxy_policy.CreateSpecType{")
	if this.ProxyChoice != nil {
		s = append(s, "ProxyChoice: "+fmt.Sprintf("%#v", this.ProxyChoice)+",\n")
	}
	if this.RuleChoice != nil {
		s = append(s, "RuleChoice: "+fmt.Sprintf("%#v", this.RuleChoice)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CreateSpecType_AnyProxy) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&forward_proxy_policy.CreateSpecType_AnyProxy{` +
		`AnyProxy:` + fmt.Sprintf("%#v", this.AnyProxy) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_NetworkConnector) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&forward_proxy_policy.CreateSpecType_NetworkConnector{` +
		`NetworkConnector:` + fmt.Sprintf("%#v", this.NetworkConnector) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_ProxyLabelSelector) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&forward_proxy_policy.CreateSpecType_ProxyLabelSelector{` +
		`ProxyLabelSelector:` + fmt.Sprintf("%#v", this.ProxyLabelSelector) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_DrpHttpConnect) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&forward_proxy_policy.CreateSpecType_DrpHttpConnect{` +
		`DrpHttpConnect:` + fmt.Sprintf("%#v", this.DrpHttpConnect) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_AllowAll) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&forward_proxy_policy.CreateSpecType_AllowAll{` +
		`AllowAll:` + fmt.Sprintf("%#v", this.AllowAll) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_AllowList) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&forward_proxy_policy.CreateSpecType_AllowList{` +
		`AllowList:` + fmt.Sprintf("%#v", this.AllowList) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_DenyList) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&forward_proxy_policy.CreateSpecType_DenyList{` +
		`DenyList:` + fmt.Sprintf("%#v", this.DenyList) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_RuleList) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&forward_proxy_policy.CreateSpecType_RuleList{` +
		`RuleList:` + fmt.Sprintf("%#v", this.RuleList) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 12)
	s = append(s, "&forward_proxy_policy.ReplaceSpecType{")
	if this.ProxyChoice != nil {
		s = append(s, "ProxyChoice: "+fmt.Sprintf("%#v", this.ProxyChoice)+",\n")
	}
	if this.RuleChoice != nil {
		s = append(s, "RuleChoice: "+fmt.Sprintf("%#v", this.RuleChoice)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ReplaceSpecType_AnyProxy) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&forward_proxy_policy.ReplaceSpecType_AnyProxy{` +
		`AnyProxy:` + fmt.Sprintf("%#v", this.AnyProxy) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_NetworkConnector) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&forward_proxy_policy.ReplaceSpecType_NetworkConnector{` +
		`NetworkConnector:` + fmt.Sprintf("%#v", this.NetworkConnector) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_ProxyLabelSelector) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&forward_proxy_policy.ReplaceSpecType_ProxyLabelSelector{` +
		`ProxyLabelSelector:` + fmt.Sprintf("%#v", this.ProxyLabelSelector) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_DrpHttpConnect) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&forward_proxy_policy.ReplaceSpecType_DrpHttpConnect{` +
		`DrpHttpConnect:` + fmt.Sprintf("%#v", this.DrpHttpConnect) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_AllowAll) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&forward_proxy_policy.ReplaceSpecType_AllowAll{` +
		`AllowAll:` + fmt.Sprintf("%#v", this.AllowAll) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_AllowList) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&forward_proxy_policy.ReplaceSpecType_AllowList{` +
		`AllowList:` + fmt.Sprintf("%#v", this.AllowList) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_DenyList) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&forward_proxy_policy.ReplaceSpecType_DenyList{` +
		`DenyList:` + fmt.Sprintf("%#v", this.DenyList) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_RuleList) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&forward_proxy_policy.ReplaceSpecType_RuleList{` +
		`RuleList:` + fmt.Sprintf("%#v", this.RuleList) + `}`}, ", ")
	return s
}
func (this *GetSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 12)
	s = append(s, "&forward_proxy_policy.GetSpecType{")
	if this.ProxyChoice != nil {
		s = append(s, "ProxyChoice: "+fmt.Sprintf("%#v", this.ProxyChoice)+",\n")
	}
	if this.RuleChoice != nil {
		s = append(s, "RuleChoice: "+fmt.Sprintf("%#v", this.RuleChoice)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetSpecType_AnyProxy) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&forward_proxy_policy.GetSpecType_AnyProxy{` +
		`AnyProxy:` + fmt.Sprintf("%#v", this.AnyProxy) + `}`}, ", ")
	return s
}
func (this *GetSpecType_NetworkConnector) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&forward_proxy_policy.GetSpecType_NetworkConnector{` +
		`NetworkConnector:` + fmt.Sprintf("%#v", this.NetworkConnector) + `}`}, ", ")
	return s
}
func (this *GetSpecType_ProxyLabelSelector) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&forward_proxy_policy.GetSpecType_ProxyLabelSelector{` +
		`ProxyLabelSelector:` + fmt.Sprintf("%#v", this.ProxyLabelSelector) + `}`}, ", ")
	return s
}
func (this *GetSpecType_DrpHttpConnect) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&forward_proxy_policy.GetSpecType_DrpHttpConnect{` +
		`DrpHttpConnect:` + fmt.Sprintf("%#v", this.DrpHttpConnect) + `}`}, ", ")
	return s
}
func (this *GetSpecType_AllowAll) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&forward_proxy_policy.GetSpecType_AllowAll{` +
		`AllowAll:` + fmt.Sprintf("%#v", this.AllowAll) + `}`}, ", ")
	return s
}
func (this *GetSpecType_AllowList) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&forward_proxy_policy.GetSpecType_AllowList{` +
		`AllowList:` + fmt.Sprintf("%#v", this.AllowList) + `}`}, ", ")
	return s
}
func (this *GetSpecType_DenyList) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&forward_proxy_policy.GetSpecType_DenyList{` +
		`DenyList:` + fmt.Sprintf("%#v", this.DenyList) + `}`}, ", ")
	return s
}
func (this *GetSpecType_RuleList) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&forward_proxy_policy.GetSpecType_RuleList{` +
		`RuleList:` + fmt.Sprintf("%#v", this.RuleList) + `}`}, ", ")
	return s
}
func valueToGoStringTypes(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *URLType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *URLType) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.DomainChoice != nil {
		nn1, err := m.DomainChoice.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn1
	}
	if m.PathChoice != nil {
		nn2, err := m.PathChoice.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn2
	}
	return i, nil
}

func (m *URLType_ExactValue) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0xa
	i++
	i = encodeVarintTypes(dAtA, i, uint64(len(m.ExactValue)))
	i += copy(dAtA[i:], m.ExactValue)
	return i, nil
}
func (m *URLType_SuffixValue) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x12
	i++
	i = encodeVarintTypes(dAtA, i, uint64(len(m.SuffixValue)))
	i += copy(dAtA[i:], m.SuffixValue)
	return i, nil
}
func (m *URLType_RegexValue) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x1a
	i++
	i = encodeVarintTypes(dAtA, i, uint64(len(m.RegexValue)))
	i += copy(dAtA[i:], m.RegexValue)
	return i, nil
}
func (m *URLType_PathExactValue) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x22
	i++
	i = encodeVarintTypes(dAtA, i, uint64(len(m.PathExactValue)))
	i += copy(dAtA[i:], m.PathExactValue)
	return i, nil
}
func (m *URLType_PathPrefixValue) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x2a
	i++
	i = encodeVarintTypes(dAtA, i, uint64(len(m.PathPrefixValue)))
	i += copy(dAtA[i:], m.PathPrefixValue)
	return i, nil
}
func (m *URLType_PathRegexValue) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x32
	i++
	i = encodeVarintTypes(dAtA, i, uint64(len(m.PathRegexValue)))
	i += copy(dAtA[i:], m.PathRegexValue)
	return i, nil
}
func (m *URLType_AnyPath) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.AnyPath != nil {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.AnyPath.Size()))
		n3, err := m.AnyPath.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	return i, nil
}
func (m *ForwardProxySimpleRuleType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ForwardProxySimpleRuleType) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.TlsList) > 0 {
		for _, msg := range m.TlsList {
			dAtA[i] = 0xa
			i++
			i = encodeVarintTypes(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.HttpList) > 0 {
		for _, msg := range m.HttpList {
			dAtA[i] = 0x12
			i++
			i = encodeVarintTypes(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.DestList) > 0 {
		for _, msg := range m.DestList {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintTypes(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.RuleName) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintTypes(dAtA, i, uint64(len(m.RuleName)))
		i += copy(dAtA[i:], m.RuleName)
	}
	if len(m.RuleDescription) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(len(m.RuleDescription)))
		i += copy(dAtA[i:], m.RuleDescription)
	}
	if m.DefaultActionChoice != nil {
		nn4, err := m.DefaultActionChoice.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn4
	}
	if m.Metadata != nil {
		dAtA[i] = 0x52
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.Metadata.Size()))
		n5, err := m.Metadata.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	return i, nil
}

func (m *ForwardProxySimpleRuleType_DefaultActionNextPolicy) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.DefaultActionNextPolicy != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.DefaultActionNextPolicy.Size()))
		n6, err := m.DefaultActionNextPolicy.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	return i, nil
}
func (m *ForwardProxySimpleRuleType_DefaultActionDeny) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.DefaultActionDeny != nil {
		dAtA[i] = 0x42
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.DefaultActionDeny.Size()))
		n7, err := m.DefaultActionDeny.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	return i, nil
}
func (m *ForwardProxySimpleRuleType_DefaultActionAllow) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.DefaultActionAllow != nil {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.DefaultActionAllow.Size()))
		n8, err := m.DefaultActionAllow.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n8
	}
	return i, nil
}
func (m *DomainListType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DomainListType) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.TlsList) > 0 {
		for _, msg := range m.TlsList {
			dAtA[i] = 0xa
			i++
			i = encodeVarintTypes(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *URLListType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *URLListType) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.HttpList) > 0 {
		for _, msg := range m.HttpList {
			dAtA[i] = 0x12
			i++
			i = encodeVarintTypes(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *ForwardProxyAdvancedRuleType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ForwardProxyAdvancedRuleType) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.RuleName) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTypes(dAtA, i, uint64(len(m.RuleName)))
		i += copy(dAtA[i:], m.RuleName)
	}
	if m.Action != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.Action))
	}
	if m.SourceChoice != nil {
		nn9, err := m.SourceChoice.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn9
	}
	if m.DestinationChoice != nil {
		nn10, err := m.DestinationChoice.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn10
	}
	if m.HttpConnectChoice != nil {
		nn11, err := m.HttpConnectChoice.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn11
	}
	if len(m.RuleDescription) > 0 {
		dAtA[i] = 0x92
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTypes(dAtA, i, uint64(len(m.RuleDescription)))
		i += copy(dAtA[i:], m.RuleDescription)
	}
	if m.Metadata != nil {
		dAtA[i] = 0xca
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.Metadata.Size()))
		n12, err := m.Metadata.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n12
	}
	return i, nil
}

func (m *ForwardProxyAdvancedRuleType_AllSources) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.AllSources != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.AllSources.Size()))
		n13, err := m.AllSources.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n13
	}
	return i, nil
}
func (m *ForwardProxyAdvancedRuleType_PrefixList) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.PrefixList != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.PrefixList.Size()))
		n14, err := m.PrefixList.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n14
	}
	return i, nil
}
func (m *ForwardProxyAdvancedRuleType_InsideSources) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.InsideSources != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.InsideSources.Size()))
		n15, err := m.InsideSources.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n15
	}
	return i, nil
}
func (m *ForwardProxyAdvancedRuleType_Interface) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Interface != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.Interface.Size()))
		n16, err := m.Interface.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n16
	}
	return i, nil
}
func (m *ForwardProxyAdvancedRuleType_Namespace) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x42
	i++
	i = encodeVarintTypes(dAtA, i, uint64(len(m.Namespace)))
	i += copy(dAtA[i:], m.Namespace)
	return i, nil
}
func (m *ForwardProxyAdvancedRuleType_LabelSelector) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.LabelSelector != nil {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.LabelSelector.Size()))
		n17, err := m.LabelSelector.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n17
	}
	return i, nil
}
func (m *ForwardProxyAdvancedRuleType_IpPrefixSet) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.IpPrefixSet != nil {
		dAtA[i] = 0x52
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.IpPrefixSet.Size()))
		n18, err := m.IpPrefixSet.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n18
	}
	return i, nil
}
func (m *ForwardProxyAdvancedRuleType_AllDestinations) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.AllDestinations != nil {
		dAtA[i] = 0x62
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.AllDestinations.Size()))
		n19, err := m.AllDestinations.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n19
	}
	return i, nil
}
func (m *ForwardProxyAdvancedRuleType_TlsList) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.TlsList != nil {
		dAtA[i] = 0x6a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.TlsList.Size()))
		n20, err := m.TlsList.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n20
	}
	return i, nil
}
func (m *ForwardProxyAdvancedRuleType_HttpList) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.HttpList != nil {
		dAtA[i] = 0x72
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.HttpList.Size()))
		n21, err := m.HttpList.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n21
	}
	return i, nil
}
func (m *ForwardProxyAdvancedRuleType_NoHttpConnectPort) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.NoHttpConnectPort != nil {
		dAtA[i] = 0x82
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.NoHttpConnectPort.Size()))
		n22, err := m.NoHttpConnectPort.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n22
	}
	return i, nil
}
func (m *ForwardProxyAdvancedRuleType_PortMatcher) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.PortMatcher != nil {
		dAtA[i] = 0x8a
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.PortMatcher.Size()))
		n23, err := m.PortMatcher.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n23
	}
	return i, nil
}
func (m *ForwardProxyAdvancedRuleType_DstIpPrefixSet) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.DstIpPrefixSet != nil {
		dAtA[i] = 0xa2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.DstIpPrefixSet.Size()))
		n24, err := m.DstIpPrefixSet.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n24
	}
	return i, nil
}
func (m *ForwardProxyAdvancedRuleType_DstPrefixList) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.DstPrefixList != nil {
		dAtA[i] = 0xaa
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.DstPrefixList.Size()))
		n25, err := m.DstPrefixList.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n25
	}
	return i, nil
}
func (m *ForwardProxyAdvancedRuleType_DstLabelSelector) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.DstLabelSelector != nil {
		dAtA[i] = 0xb2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.DstLabelSelector.Size()))
		n26, err := m.DstLabelSelector.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n26
	}
	return i, nil
}
func (m *ForwardProxyAdvancedRuleType_DstAsnSet) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.DstAsnSet != nil {
		dAtA[i] = 0xba
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.DstAsnSet.Size()))
		n27, err := m.DstAsnSet.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n27
	}
	return i, nil
}
func (m *ForwardProxyAdvancedRuleType_DstAsnList) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.DstAsnList != nil {
		dAtA[i] = 0xc2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.DstAsnList.Size()))
		n28, err := m.DstAsnList.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n28
	}
	return i, nil
}
func (m *ForwardProxyRuleListType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ForwardProxyRuleListType) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Rules) > 0 {
		for _, msg := range m.Rules {
			dAtA[i] = 0xa
			i++
			i = encodeVarintTypes(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *GlobalSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GlobalSpecType) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ProxyChoice != nil {
		nn29, err := m.ProxyChoice.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn29
	}
	if m.RuleChoice != nil {
		nn30, err := m.RuleChoice.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn30
	}
	if m.ViewInternal != nil {
		dAtA[i] = 0xc2
		i++
		dAtA[i] = 0x3e
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.ViewInternal.Size()))
		n31, err := m.ViewInternal.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n31
	}
	return i, nil
}

func (m *GlobalSpecType_AnyProxy) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.AnyProxy != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.AnyProxy.Size()))
		n32, err := m.AnyProxy.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n32
	}
	return i, nil
}
func (m *GlobalSpecType_NetworkConnector) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.NetworkConnector != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.NetworkConnector.Size()))
		n33, err := m.NetworkConnector.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n33
	}
	return i, nil
}
func (m *GlobalSpecType_ProxyLabelSelector) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.ProxyLabelSelector != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.ProxyLabelSelector.Size()))
		n34, err := m.ProxyLabelSelector.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n34
	}
	return i, nil
}
func (m *GlobalSpecType_AllowAll) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.AllowAll != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.AllowAll.Size()))
		n35, err := m.AllowAll.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n35
	}
	return i, nil
}
func (m *GlobalSpecType_AllowList) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.AllowList != nil {
		dAtA[i] = 0x42
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.AllowList.Size()))
		n36, err := m.AllowList.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n36
	}
	return i, nil
}
func (m *GlobalSpecType_DenyList) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.DenyList != nil {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.DenyList.Size()))
		n37, err := m.DenyList.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n37
	}
	return i, nil
}
func (m *GlobalSpecType_RuleList) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.RuleList != nil {
		dAtA[i] = 0x52
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.RuleList.Size()))
		n38, err := m.RuleList.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n38
	}
	return i, nil
}
func (m *GlobalSpecType_DrpHttpConnect) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.DrpHttpConnect != nil {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.DrpHttpConnect.Size()))
		n39, err := m.DrpHttpConnect.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n39
	}
	return i, nil
}
func (m *CreateSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateSpecType) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ProxyChoice != nil {
		nn40, err := m.ProxyChoice.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn40
	}
	if m.RuleChoice != nil {
		nn41, err := m.RuleChoice.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn41
	}
	return i, nil
}

func (m *CreateSpecType_AnyProxy) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.AnyProxy != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.AnyProxy.Size()))
		n42, err := m.AnyProxy.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n42
	}
	return i, nil
}
func (m *CreateSpecType_NetworkConnector) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.NetworkConnector != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.NetworkConnector.Size()))
		n43, err := m.NetworkConnector.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n43
	}
	return i, nil
}
func (m *CreateSpecType_ProxyLabelSelector) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.ProxyLabelSelector != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.ProxyLabelSelector.Size()))
		n44, err := m.ProxyLabelSelector.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n44
	}
	return i, nil
}
func (m *CreateSpecType_AllowAll) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.AllowAll != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.AllowAll.Size()))
		n45, err := m.AllowAll.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n45
	}
	return i, nil
}
func (m *CreateSpecType_AllowList) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.AllowList != nil {
		dAtA[i] = 0x42
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.AllowList.Size()))
		n46, err := m.AllowList.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n46
	}
	return i, nil
}
func (m *CreateSpecType_DenyList) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.DenyList != nil {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.DenyList.Size()))
		n47, err := m.DenyList.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n47
	}
	return i, nil
}
func (m *CreateSpecType_RuleList) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.RuleList != nil {
		dAtA[i] = 0x52
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.RuleList.Size()))
		n48, err := m.RuleList.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n48
	}
	return i, nil
}
func (m *CreateSpecType_DrpHttpConnect) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.DrpHttpConnect != nil {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.DrpHttpConnect.Size()))
		n49, err := m.DrpHttpConnect.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n49
	}
	return i, nil
}
func (m *ReplaceSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplaceSpecType) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ProxyChoice != nil {
		nn50, err := m.ProxyChoice.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn50
	}
	if m.RuleChoice != nil {
		nn51, err := m.RuleChoice.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn51
	}
	return i, nil
}

func (m *ReplaceSpecType_AnyProxy) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.AnyProxy != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.AnyProxy.Size()))
		n52, err := m.AnyProxy.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n52
	}
	return i, nil
}
func (m *ReplaceSpecType_NetworkConnector) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.NetworkConnector != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.NetworkConnector.Size()))
		n53, err := m.NetworkConnector.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n53
	}
	return i, nil
}
func (m *ReplaceSpecType_ProxyLabelSelector) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.ProxyLabelSelector != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.ProxyLabelSelector.Size()))
		n54, err := m.ProxyLabelSelector.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n54
	}
	return i, nil
}
func (m *ReplaceSpecType_AllowAll) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.AllowAll != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.AllowAll.Size()))
		n55, err := m.AllowAll.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n55
	}
	return i, nil
}
func (m *ReplaceSpecType_AllowList) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.AllowList != nil {
		dAtA[i] = 0x42
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.AllowList.Size()))
		n56, err := m.AllowList.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n56
	}
	return i, nil
}
func (m *ReplaceSpecType_DenyList) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.DenyList != nil {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.DenyList.Size()))
		n57, err := m.DenyList.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n57
	}
	return i, nil
}
func (m *ReplaceSpecType_RuleList) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.RuleList != nil {
		dAtA[i] = 0x52
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.RuleList.Size()))
		n58, err := m.RuleList.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n58
	}
	return i, nil
}
func (m *ReplaceSpecType_DrpHttpConnect) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.DrpHttpConnect != nil {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.DrpHttpConnect.Size()))
		n59, err := m.DrpHttpConnect.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n59
	}
	return i, nil
}
func (m *GetSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetSpecType) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ProxyChoice != nil {
		nn60, err := m.ProxyChoice.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn60
	}
	if m.RuleChoice != nil {
		nn61, err := m.RuleChoice.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn61
	}
	return i, nil
}

func (m *GetSpecType_AnyProxy) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.AnyProxy != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.AnyProxy.Size()))
		n62, err := m.AnyProxy.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n62
	}
	return i, nil
}
func (m *GetSpecType_NetworkConnector) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.NetworkConnector != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.NetworkConnector.Size()))
		n63, err := m.NetworkConnector.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n63
	}
	return i, nil
}
func (m *GetSpecType_ProxyLabelSelector) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.ProxyLabelSelector != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.ProxyLabelSelector.Size()))
		n64, err := m.ProxyLabelSelector.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n64
	}
	return i, nil
}
func (m *GetSpecType_AllowAll) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.AllowAll != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.AllowAll.Size()))
		n65, err := m.AllowAll.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n65
	}
	return i, nil
}
func (m *GetSpecType_AllowList) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.AllowList != nil {
		dAtA[i] = 0x42
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.AllowList.Size()))
		n66, err := m.AllowList.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n66
	}
	return i, nil
}
func (m *GetSpecType_DenyList) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.DenyList != nil {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.DenyList.Size()))
		n67, err := m.DenyList.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n67
	}
	return i, nil
}
func (m *GetSpecType_RuleList) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.RuleList != nil {
		dAtA[i] = 0x52
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.RuleList.Size()))
		n68, err := m.RuleList.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n68
	}
	return i, nil
}
func (m *GetSpecType_DrpHttpConnect) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.DrpHttpConnect != nil {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.DrpHttpConnect.Size()))
		n69, err := m.DrpHttpConnect.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n69
	}
	return i, nil
}
func encodeVarintTypes(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *URLType) Size() (n int) {
	var l int
	_ = l
	if m.DomainChoice != nil {
		n += m.DomainChoice.Size()
	}
	if m.PathChoice != nil {
		n += m.PathChoice.Size()
	}
	return n
}

func (m *URLType_ExactValue) Size() (n int) {
	var l int
	_ = l
	l = len(m.ExactValue)
	n += 1 + l + sovTypes(uint64(l))
	return n
}
func (m *URLType_SuffixValue) Size() (n int) {
	var l int
	_ = l
	l = len(m.SuffixValue)
	n += 1 + l + sovTypes(uint64(l))
	return n
}
func (m *URLType_RegexValue) Size() (n int) {
	var l int
	_ = l
	l = len(m.RegexValue)
	n += 1 + l + sovTypes(uint64(l))
	return n
}
func (m *URLType_PathExactValue) Size() (n int) {
	var l int
	_ = l
	l = len(m.PathExactValue)
	n += 1 + l + sovTypes(uint64(l))
	return n
}
func (m *URLType_PathPrefixValue) Size() (n int) {
	var l int
	_ = l
	l = len(m.PathPrefixValue)
	n += 1 + l + sovTypes(uint64(l))
	return n
}
func (m *URLType_PathRegexValue) Size() (n int) {
	var l int
	_ = l
	l = len(m.PathRegexValue)
	n += 1 + l + sovTypes(uint64(l))
	return n
}
func (m *URLType_AnyPath) Size() (n int) {
	var l int
	_ = l
	if m.AnyPath != nil {
		l = m.AnyPath.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ForwardProxySimpleRuleType) Size() (n int) {
	var l int
	_ = l
	if len(m.TlsList) > 0 {
		for _, e := range m.TlsList {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if len(m.HttpList) > 0 {
		for _, e := range m.HttpList {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if len(m.DestList) > 0 {
		for _, e := range m.DestList {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	l = len(m.RuleName)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.RuleDescription)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.DefaultActionChoice != nil {
		n += m.DefaultActionChoice.Size()
	}
	if m.Metadata != nil {
		l = m.Metadata.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *ForwardProxySimpleRuleType_DefaultActionNextPolicy) Size() (n int) {
	var l int
	_ = l
	if m.DefaultActionNextPolicy != nil {
		l = m.DefaultActionNextPolicy.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ForwardProxySimpleRuleType_DefaultActionDeny) Size() (n int) {
	var l int
	_ = l
	if m.DefaultActionDeny != nil {
		l = m.DefaultActionDeny.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ForwardProxySimpleRuleType_DefaultActionAllow) Size() (n int) {
	var l int
	_ = l
	if m.DefaultActionAllow != nil {
		l = m.DefaultActionAllow.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *DomainListType) Size() (n int) {
	var l int
	_ = l
	if len(m.TlsList) > 0 {
		for _, e := range m.TlsList {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *URLListType) Size() (n int) {
	var l int
	_ = l
	if len(m.HttpList) > 0 {
		for _, e := range m.HttpList {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *ForwardProxyAdvancedRuleType) Size() (n int) {
	var l int
	_ = l
	l = len(m.RuleName)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.Action != 0 {
		n += 1 + sovTypes(uint64(m.Action))
	}
	if m.SourceChoice != nil {
		n += m.SourceChoice.Size()
	}
	if m.DestinationChoice != nil {
		n += m.DestinationChoice.Size()
	}
	if m.HttpConnectChoice != nil {
		n += m.HttpConnectChoice.Size()
	}
	l = len(m.RuleDescription)
	if l > 0 {
		n += 2 + l + sovTypes(uint64(l))
	}
	if m.Metadata != nil {
		l = m.Metadata.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *ForwardProxyAdvancedRuleType_AllSources) Size() (n int) {
	var l int
	_ = l
	if m.AllSources != nil {
		l = m.AllSources.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ForwardProxyAdvancedRuleType_PrefixList) Size() (n int) {
	var l int
	_ = l
	if m.PrefixList != nil {
		l = m.PrefixList.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ForwardProxyAdvancedRuleType_InsideSources) Size() (n int) {
	var l int
	_ = l
	if m.InsideSources != nil {
		l = m.InsideSources.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ForwardProxyAdvancedRuleType_Interface) Size() (n int) {
	var l int
	_ = l
	if m.Interface != nil {
		l = m.Interface.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ForwardProxyAdvancedRuleType_Namespace) Size() (n int) {
	var l int
	_ = l
	l = len(m.Namespace)
	n += 1 + l + sovTypes(uint64(l))
	return n
}
func (m *ForwardProxyAdvancedRuleType_LabelSelector) Size() (n int) {
	var l int
	_ = l
	if m.LabelSelector != nil {
		l = m.LabelSelector.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ForwardProxyAdvancedRuleType_IpPrefixSet) Size() (n int) {
	var l int
	_ = l
	if m.IpPrefixSet != nil {
		l = m.IpPrefixSet.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ForwardProxyAdvancedRuleType_AllDestinations) Size() (n int) {
	var l int
	_ = l
	if m.AllDestinations != nil {
		l = m.AllDestinations.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ForwardProxyAdvancedRuleType_TlsList) Size() (n int) {
	var l int
	_ = l
	if m.TlsList != nil {
		l = m.TlsList.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ForwardProxyAdvancedRuleType_HttpList) Size() (n int) {
	var l int
	_ = l
	if m.HttpList != nil {
		l = m.HttpList.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ForwardProxyAdvancedRuleType_NoHttpConnectPort) Size() (n int) {
	var l int
	_ = l
	if m.NoHttpConnectPort != nil {
		l = m.NoHttpConnectPort.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ForwardProxyAdvancedRuleType_PortMatcher) Size() (n int) {
	var l int
	_ = l
	if m.PortMatcher != nil {
		l = m.PortMatcher.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ForwardProxyAdvancedRuleType_DstIpPrefixSet) Size() (n int) {
	var l int
	_ = l
	if m.DstIpPrefixSet != nil {
		l = m.DstIpPrefixSet.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ForwardProxyAdvancedRuleType_DstPrefixList) Size() (n int) {
	var l int
	_ = l
	if m.DstPrefixList != nil {
		l = m.DstPrefixList.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ForwardProxyAdvancedRuleType_DstLabelSelector) Size() (n int) {
	var l int
	_ = l
	if m.DstLabelSelector != nil {
		l = m.DstLabelSelector.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ForwardProxyAdvancedRuleType_DstAsnSet) Size() (n int) {
	var l int
	_ = l
	if m.DstAsnSet != nil {
		l = m.DstAsnSet.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ForwardProxyAdvancedRuleType_DstAsnList) Size() (n int) {
	var l int
	_ = l
	if m.DstAsnList != nil {
		l = m.DstAsnList.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ForwardProxyRuleListType) Size() (n int) {
	var l int
	_ = l
	if len(m.Rules) > 0 {
		for _, e := range m.Rules {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *GlobalSpecType) Size() (n int) {
	var l int
	_ = l
	if m.ProxyChoice != nil {
		n += m.ProxyChoice.Size()
	}
	if m.RuleChoice != nil {
		n += m.RuleChoice.Size()
	}
	if m.ViewInternal != nil {
		l = m.ViewInternal.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *GlobalSpecType_AnyProxy) Size() (n int) {
	var l int
	_ = l
	if m.AnyProxy != nil {
		l = m.AnyProxy.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_NetworkConnector) Size() (n int) {
	var l int
	_ = l
	if m.NetworkConnector != nil {
		l = m.NetworkConnector.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_ProxyLabelSelector) Size() (n int) {
	var l int
	_ = l
	if m.ProxyLabelSelector != nil {
		l = m.ProxyLabelSelector.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_AllowAll) Size() (n int) {
	var l int
	_ = l
	if m.AllowAll != nil {
		l = m.AllowAll.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_AllowList) Size() (n int) {
	var l int
	_ = l
	if m.AllowList != nil {
		l = m.AllowList.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_DenyList) Size() (n int) {
	var l int
	_ = l
	if m.DenyList != nil {
		l = m.DenyList.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_RuleList) Size() (n int) {
	var l int
	_ = l
	if m.RuleList != nil {
		l = m.RuleList.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_DrpHttpConnect) Size() (n int) {
	var l int
	_ = l
	if m.DrpHttpConnect != nil {
		l = m.DrpHttpConnect.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType) Size() (n int) {
	var l int
	_ = l
	if m.ProxyChoice != nil {
		n += m.ProxyChoice.Size()
	}
	if m.RuleChoice != nil {
		n += m.RuleChoice.Size()
	}
	return n
}

func (m *CreateSpecType_AnyProxy) Size() (n int) {
	var l int
	_ = l
	if m.AnyProxy != nil {
		l = m.AnyProxy.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_NetworkConnector) Size() (n int) {
	var l int
	_ = l
	if m.NetworkConnector != nil {
		l = m.NetworkConnector.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_ProxyLabelSelector) Size() (n int) {
	var l int
	_ = l
	if m.ProxyLabelSelector != nil {
		l = m.ProxyLabelSelector.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_AllowAll) Size() (n int) {
	var l int
	_ = l
	if m.AllowAll != nil {
		l = m.AllowAll.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_AllowList) Size() (n int) {
	var l int
	_ = l
	if m.AllowList != nil {
		l = m.AllowList.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_DenyList) Size() (n int) {
	var l int
	_ = l
	if m.DenyList != nil {
		l = m.DenyList.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_RuleList) Size() (n int) {
	var l int
	_ = l
	if m.RuleList != nil {
		l = m.RuleList.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_DrpHttpConnect) Size() (n int) {
	var l int
	_ = l
	if m.DrpHttpConnect != nil {
		l = m.DrpHttpConnect.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType) Size() (n int) {
	var l int
	_ = l
	if m.ProxyChoice != nil {
		n += m.ProxyChoice.Size()
	}
	if m.RuleChoice != nil {
		n += m.RuleChoice.Size()
	}
	return n
}

func (m *ReplaceSpecType_AnyProxy) Size() (n int) {
	var l int
	_ = l
	if m.AnyProxy != nil {
		l = m.AnyProxy.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_NetworkConnector) Size() (n int) {
	var l int
	_ = l
	if m.NetworkConnector != nil {
		l = m.NetworkConnector.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_ProxyLabelSelector) Size() (n int) {
	var l int
	_ = l
	if m.ProxyLabelSelector != nil {
		l = m.ProxyLabelSelector.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_AllowAll) Size() (n int) {
	var l int
	_ = l
	if m.AllowAll != nil {
		l = m.AllowAll.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_AllowList) Size() (n int) {
	var l int
	_ = l
	if m.AllowList != nil {
		l = m.AllowList.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_DenyList) Size() (n int) {
	var l int
	_ = l
	if m.DenyList != nil {
		l = m.DenyList.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_RuleList) Size() (n int) {
	var l int
	_ = l
	if m.RuleList != nil {
		l = m.RuleList.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_DrpHttpConnect) Size() (n int) {
	var l int
	_ = l
	if m.DrpHttpConnect != nil {
		l = m.DrpHttpConnect.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType) Size() (n int) {
	var l int
	_ = l
	if m.ProxyChoice != nil {
		n += m.ProxyChoice.Size()
	}
	if m.RuleChoice != nil {
		n += m.RuleChoice.Size()
	}
	return n
}

func (m *GetSpecType_AnyProxy) Size() (n int) {
	var l int
	_ = l
	if m.AnyProxy != nil {
		l = m.AnyProxy.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_NetworkConnector) Size() (n int) {
	var l int
	_ = l
	if m.NetworkConnector != nil {
		l = m.NetworkConnector.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_ProxyLabelSelector) Size() (n int) {
	var l int
	_ = l
	if m.ProxyLabelSelector != nil {
		l = m.ProxyLabelSelector.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_AllowAll) Size() (n int) {
	var l int
	_ = l
	if m.AllowAll != nil {
		l = m.AllowAll.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_AllowList) Size() (n int) {
	var l int
	_ = l
	if m.AllowList != nil {
		l = m.AllowList.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_DenyList) Size() (n int) {
	var l int
	_ = l
	if m.DenyList != nil {
		l = m.DenyList.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_RuleList) Size() (n int) {
	var l int
	_ = l
	if m.RuleList != nil {
		l = m.RuleList.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_DrpHttpConnect) Size() (n int) {
	var l int
	_ = l
	if m.DrpHttpConnect != nil {
		l = m.DrpHttpConnect.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func sovTypes(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozTypes(x uint64) (n int) {
	return sovTypes(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *URLType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&URLType{`,
		`DomainChoice:` + fmt.Sprintf("%v", this.DomainChoice) + `,`,
		`PathChoice:` + fmt.Sprintf("%v", this.PathChoice) + `,`,
		`}`,
	}, "")
	return s
}
func (this *URLType_ExactValue) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&URLType_ExactValue{`,
		`ExactValue:` + fmt.Sprintf("%v", this.ExactValue) + `,`,
		`}`,
	}, "")
	return s
}
func (this *URLType_SuffixValue) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&URLType_SuffixValue{`,
		`SuffixValue:` + fmt.Sprintf("%v", this.SuffixValue) + `,`,
		`}`,
	}, "")
	return s
}
func (this *URLType_RegexValue) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&URLType_RegexValue{`,
		`RegexValue:` + fmt.Sprintf("%v", this.RegexValue) + `,`,
		`}`,
	}, "")
	return s
}
func (this *URLType_PathExactValue) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&URLType_PathExactValue{`,
		`PathExactValue:` + fmt.Sprintf("%v", this.PathExactValue) + `,`,
		`}`,
	}, "")
	return s
}
func (this *URLType_PathPrefixValue) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&URLType_PathPrefixValue{`,
		`PathPrefixValue:` + fmt.Sprintf("%v", this.PathPrefixValue) + `,`,
		`}`,
	}, "")
	return s
}
func (this *URLType_PathRegexValue) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&URLType_PathRegexValue{`,
		`PathRegexValue:` + fmt.Sprintf("%v", this.PathRegexValue) + `,`,
		`}`,
	}, "")
	return s
}
func (this *URLType_AnyPath) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&URLType_AnyPath{`,
		`AnyPath:` + strings.Replace(fmt.Sprintf("%v", this.AnyPath), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ForwardProxySimpleRuleType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ForwardProxySimpleRuleType{`,
		`TlsList:` + strings.Replace(fmt.Sprintf("%v", this.TlsList), "DomainType", "ves_io_schema4.DomainType", 1) + `,`,
		`HttpList:` + strings.Replace(fmt.Sprintf("%v", this.HttpList), "URLType", "URLType", 1) + `,`,
		`DestList:` + strings.Replace(fmt.Sprintf("%v", this.DestList), "L4DestType", "ves_io_schema4.L4DestType", 1) + `,`,
		`RuleName:` + fmt.Sprintf("%v", this.RuleName) + `,`,
		`RuleDescription:` + fmt.Sprintf("%v", this.RuleDescription) + `,`,
		`DefaultActionChoice:` + fmt.Sprintf("%v", this.DefaultActionChoice) + `,`,
		`Metadata:` + strings.Replace(fmt.Sprintf("%v", this.Metadata), "MessageMetaType", "ves_io_schema4.MessageMetaType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ForwardProxySimpleRuleType_DefaultActionNextPolicy) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ForwardProxySimpleRuleType_DefaultActionNextPolicy{`,
		`DefaultActionNextPolicy:` + strings.Replace(fmt.Sprintf("%v", this.DefaultActionNextPolicy), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ForwardProxySimpleRuleType_DefaultActionDeny) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ForwardProxySimpleRuleType_DefaultActionDeny{`,
		`DefaultActionDeny:` + strings.Replace(fmt.Sprintf("%v", this.DefaultActionDeny), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ForwardProxySimpleRuleType_DefaultActionAllow) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ForwardProxySimpleRuleType_DefaultActionAllow{`,
		`DefaultActionAllow:` + strings.Replace(fmt.Sprintf("%v", this.DefaultActionAllow), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DomainListType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DomainListType{`,
		`TlsList:` + strings.Replace(fmt.Sprintf("%v", this.TlsList), "DomainType", "ves_io_schema4.DomainType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *URLListType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&URLListType{`,
		`HttpList:` + strings.Replace(fmt.Sprintf("%v", this.HttpList), "URLType", "URLType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ForwardProxyAdvancedRuleType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ForwardProxyAdvancedRuleType{`,
		`RuleName:` + fmt.Sprintf("%v", this.RuleName) + `,`,
		`Action:` + fmt.Sprintf("%v", this.Action) + `,`,
		`SourceChoice:` + fmt.Sprintf("%v", this.SourceChoice) + `,`,
		`DestinationChoice:` + fmt.Sprintf("%v", this.DestinationChoice) + `,`,
		`HttpConnectChoice:` + fmt.Sprintf("%v", this.HttpConnectChoice) + `,`,
		`RuleDescription:` + fmt.Sprintf("%v", this.RuleDescription) + `,`,
		`Metadata:` + strings.Replace(fmt.Sprintf("%v", this.Metadata), "MessageMetaType", "ves_io_schema4.MessageMetaType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ForwardProxyAdvancedRuleType_AllSources) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ForwardProxyAdvancedRuleType_AllSources{`,
		`AllSources:` + strings.Replace(fmt.Sprintf("%v", this.AllSources), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ForwardProxyAdvancedRuleType_PrefixList) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ForwardProxyAdvancedRuleType_PrefixList{`,
		`PrefixList:` + strings.Replace(fmt.Sprintf("%v", this.PrefixList), "PrefixStringListType", "ves_io_schema_views.PrefixStringListType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ForwardProxyAdvancedRuleType_InsideSources) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ForwardProxyAdvancedRuleType_InsideSources{`,
		`InsideSources:` + strings.Replace(fmt.Sprintf("%v", this.InsideSources), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ForwardProxyAdvancedRuleType_Interface) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ForwardProxyAdvancedRuleType_Interface{`,
		`Interface:` + strings.Replace(fmt.Sprintf("%v", this.Interface), "ObjectRefType", "ves_io_schema_views.ObjectRefType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ForwardProxyAdvancedRuleType_Namespace) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ForwardProxyAdvancedRuleType_Namespace{`,
		`Namespace:` + fmt.Sprintf("%v", this.Namespace) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ForwardProxyAdvancedRuleType_LabelSelector) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ForwardProxyAdvancedRuleType_LabelSelector{`,
		`LabelSelector:` + strings.Replace(fmt.Sprintf("%v", this.LabelSelector), "LabelSelectorType", "ves_io_schema4.LabelSelectorType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ForwardProxyAdvancedRuleType_IpPrefixSet) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ForwardProxyAdvancedRuleType_IpPrefixSet{`,
		`IpPrefixSet:` + strings.Replace(fmt.Sprintf("%v", this.IpPrefixSet), "ObjectRefType", "ves_io_schema_views.ObjectRefType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ForwardProxyAdvancedRuleType_AllDestinations) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ForwardProxyAdvancedRuleType_AllDestinations{`,
		`AllDestinations:` + strings.Replace(fmt.Sprintf("%v", this.AllDestinations), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ForwardProxyAdvancedRuleType_TlsList) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ForwardProxyAdvancedRuleType_TlsList{`,
		`TlsList:` + strings.Replace(fmt.Sprintf("%v", this.TlsList), "DomainListType", "DomainListType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ForwardProxyAdvancedRuleType_HttpList) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ForwardProxyAdvancedRuleType_HttpList{`,
		`HttpList:` + strings.Replace(fmt.Sprintf("%v", this.HttpList), "URLListType", "URLListType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ForwardProxyAdvancedRuleType_NoHttpConnectPort) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ForwardProxyAdvancedRuleType_NoHttpConnectPort{`,
		`NoHttpConnectPort:` + strings.Replace(fmt.Sprintf("%v", this.NoHttpConnectPort), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ForwardProxyAdvancedRuleType_PortMatcher) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ForwardProxyAdvancedRuleType_PortMatcher{`,
		`PortMatcher:` + strings.Replace(fmt.Sprintf("%v", this.PortMatcher), "PortMatcherType", "ves_io_schema_policy.PortMatcherType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ForwardProxyAdvancedRuleType_DstIpPrefixSet) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ForwardProxyAdvancedRuleType_DstIpPrefixSet{`,
		`DstIpPrefixSet:` + strings.Replace(fmt.Sprintf("%v", this.DstIpPrefixSet), "ObjectRefType", "ves_io_schema_views.ObjectRefType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ForwardProxyAdvancedRuleType_DstPrefixList) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ForwardProxyAdvancedRuleType_DstPrefixList{`,
		`DstPrefixList:` + strings.Replace(fmt.Sprintf("%v", this.DstPrefixList), "PrefixStringListType", "ves_io_schema_views.PrefixStringListType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ForwardProxyAdvancedRuleType_DstLabelSelector) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ForwardProxyAdvancedRuleType_DstLabelSelector{`,
		`DstLabelSelector:` + strings.Replace(fmt.Sprintf("%v", this.DstLabelSelector), "LabelSelectorType", "ves_io_schema4.LabelSelectorType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ForwardProxyAdvancedRuleType_DstAsnSet) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ForwardProxyAdvancedRuleType_DstAsnSet{`,
		`DstAsnSet:` + strings.Replace(fmt.Sprintf("%v", this.DstAsnSet), "ObjectRefType", "ves_io_schema_views.ObjectRefType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ForwardProxyAdvancedRuleType_DstAsnList) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ForwardProxyAdvancedRuleType_DstAsnList{`,
		`DstAsnList:` + strings.Replace(fmt.Sprintf("%v", this.DstAsnList), "AsnMatchList", "ves_io_schema_policy.AsnMatchList", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ForwardProxyRuleListType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ForwardProxyRuleListType{`,
		`Rules:` + strings.Replace(fmt.Sprintf("%v", this.Rules), "ForwardProxyAdvancedRuleType", "ForwardProxyAdvancedRuleType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType{`,
		`ProxyChoice:` + fmt.Sprintf("%v", this.ProxyChoice) + `,`,
		`RuleChoice:` + fmt.Sprintf("%v", this.RuleChoice) + `,`,
		`ViewInternal:` + strings.Replace(fmt.Sprintf("%v", this.ViewInternal), "ObjectRefType", "ves_io_schema_views.ObjectRefType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_AnyProxy) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_AnyProxy{`,
		`AnyProxy:` + strings.Replace(fmt.Sprintf("%v", this.AnyProxy), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_NetworkConnector) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_NetworkConnector{`,
		`NetworkConnector:` + strings.Replace(fmt.Sprintf("%v", this.NetworkConnector), "ObjectRefType", "ves_io_schema_views.ObjectRefType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_ProxyLabelSelector) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_ProxyLabelSelector{`,
		`ProxyLabelSelector:` + strings.Replace(fmt.Sprintf("%v", this.ProxyLabelSelector), "LabelSelectorType", "ves_io_schema4.LabelSelectorType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_AllowAll) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_AllowAll{`,
		`AllowAll:` + strings.Replace(fmt.Sprintf("%v", this.AllowAll), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_AllowList) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_AllowList{`,
		`AllowList:` + strings.Replace(fmt.Sprintf("%v", this.AllowList), "ForwardProxySimpleRuleType", "ForwardProxySimpleRuleType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_DenyList) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_DenyList{`,
		`DenyList:` + strings.Replace(fmt.Sprintf("%v", this.DenyList), "ForwardProxySimpleRuleType", "ForwardProxySimpleRuleType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_RuleList) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_RuleList{`,
		`RuleList:` + strings.Replace(fmt.Sprintf("%v", this.RuleList), "ForwardProxyRuleListType", "ForwardProxyRuleListType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_DrpHttpConnect) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_DrpHttpConnect{`,
		`DrpHttpConnect:` + strings.Replace(fmt.Sprintf("%v", this.DrpHttpConnect), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType{`,
		`ProxyChoice:` + fmt.Sprintf("%v", this.ProxyChoice) + `,`,
		`RuleChoice:` + fmt.Sprintf("%v", this.RuleChoice) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_AnyProxy) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_AnyProxy{`,
		`AnyProxy:` + strings.Replace(fmt.Sprintf("%v", this.AnyProxy), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_NetworkConnector) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_NetworkConnector{`,
		`NetworkConnector:` + strings.Replace(fmt.Sprintf("%v", this.NetworkConnector), "ObjectRefType", "ves_io_schema_views.ObjectRefType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_ProxyLabelSelector) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_ProxyLabelSelector{`,
		`ProxyLabelSelector:` + strings.Replace(fmt.Sprintf("%v", this.ProxyLabelSelector), "LabelSelectorType", "ves_io_schema4.LabelSelectorType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_AllowAll) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_AllowAll{`,
		`AllowAll:` + strings.Replace(fmt.Sprintf("%v", this.AllowAll), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_AllowList) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_AllowList{`,
		`AllowList:` + strings.Replace(fmt.Sprintf("%v", this.AllowList), "ForwardProxySimpleRuleType", "ForwardProxySimpleRuleType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_DenyList) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_DenyList{`,
		`DenyList:` + strings.Replace(fmt.Sprintf("%v", this.DenyList), "ForwardProxySimpleRuleType", "ForwardProxySimpleRuleType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_RuleList) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_RuleList{`,
		`RuleList:` + strings.Replace(fmt.Sprintf("%v", this.RuleList), "ForwardProxyRuleListType", "ForwardProxyRuleListType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_DrpHttpConnect) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_DrpHttpConnect{`,
		`DrpHttpConnect:` + strings.Replace(fmt.Sprintf("%v", this.DrpHttpConnect), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType{`,
		`ProxyChoice:` + fmt.Sprintf("%v", this.ProxyChoice) + `,`,
		`RuleChoice:` + fmt.Sprintf("%v", this.RuleChoice) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_AnyProxy) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_AnyProxy{`,
		`AnyProxy:` + strings.Replace(fmt.Sprintf("%v", this.AnyProxy), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_NetworkConnector) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_NetworkConnector{`,
		`NetworkConnector:` + strings.Replace(fmt.Sprintf("%v", this.NetworkConnector), "ObjectRefType", "ves_io_schema_views.ObjectRefType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_ProxyLabelSelector) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_ProxyLabelSelector{`,
		`ProxyLabelSelector:` + strings.Replace(fmt.Sprintf("%v", this.ProxyLabelSelector), "LabelSelectorType", "ves_io_schema4.LabelSelectorType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_AllowAll) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_AllowAll{`,
		`AllowAll:` + strings.Replace(fmt.Sprintf("%v", this.AllowAll), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_AllowList) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_AllowList{`,
		`AllowList:` + strings.Replace(fmt.Sprintf("%v", this.AllowList), "ForwardProxySimpleRuleType", "ForwardProxySimpleRuleType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_DenyList) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_DenyList{`,
		`DenyList:` + strings.Replace(fmt.Sprintf("%v", this.DenyList), "ForwardProxySimpleRuleType", "ForwardProxySimpleRuleType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_RuleList) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_RuleList{`,
		`RuleList:` + strings.Replace(fmt.Sprintf("%v", this.RuleList), "ForwardProxyRuleListType", "ForwardProxyRuleListType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_DrpHttpConnect) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_DrpHttpConnect{`,
		`DrpHttpConnect:` + strings.Replace(fmt.Sprintf("%v", this.DrpHttpConnect), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType{`,
		`ProxyChoice:` + fmt.Sprintf("%v", this.ProxyChoice) + `,`,
		`RuleChoice:` + fmt.Sprintf("%v", this.RuleChoice) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_AnyProxy) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_AnyProxy{`,
		`AnyProxy:` + strings.Replace(fmt.Sprintf("%v", this.AnyProxy), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_NetworkConnector) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_NetworkConnector{`,
		`NetworkConnector:` + strings.Replace(fmt.Sprintf("%v", this.NetworkConnector), "ObjectRefType", "ves_io_schema_views.ObjectRefType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_ProxyLabelSelector) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_ProxyLabelSelector{`,
		`ProxyLabelSelector:` + strings.Replace(fmt.Sprintf("%v", this.ProxyLabelSelector), "LabelSelectorType", "ves_io_schema4.LabelSelectorType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_AllowAll) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_AllowAll{`,
		`AllowAll:` + strings.Replace(fmt.Sprintf("%v", this.AllowAll), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_AllowList) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_AllowList{`,
		`AllowList:` + strings.Replace(fmt.Sprintf("%v", this.AllowList), "ForwardProxySimpleRuleType", "ForwardProxySimpleRuleType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_DenyList) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_DenyList{`,
		`DenyList:` + strings.Replace(fmt.Sprintf("%v", this.DenyList), "ForwardProxySimpleRuleType", "ForwardProxySimpleRuleType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_RuleList) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_RuleList{`,
		`RuleList:` + strings.Replace(fmt.Sprintf("%v", this.RuleList), "ForwardProxyRuleListType", "ForwardProxyRuleListType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_DrpHttpConnect) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_DrpHttpConnect{`,
		`DrpHttpConnect:` + strings.Replace(fmt.Sprintf("%v", this.DrpHttpConnect), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringTypes(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *URLType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: URLType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: URLType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExactValue", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DomainChoice = &URLType_ExactValue{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SuffixValue", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DomainChoice = &URLType_SuffixValue{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RegexValue", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DomainChoice = &URLType_RegexValue{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PathExactValue", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PathChoice = &URLType_PathExactValue{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PathPrefixValue", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PathChoice = &URLType_PathPrefixValue{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PathRegexValue", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PathChoice = &URLType_PathRegexValue{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AnyPath", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.PathChoice = &URLType_AnyPath{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ForwardProxySimpleRuleType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ForwardProxySimpleRuleType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ForwardProxySimpleRuleType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TlsList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TlsList = append(m.TlsList, &ves_io_schema4.DomainType{})
			if err := m.TlsList[len(m.TlsList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HttpList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HttpList = append(m.HttpList, &URLType{})
			if err := m.HttpList[len(m.HttpList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DestList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DestList = append(m.DestList, &ves_io_schema4.L4DestType{})
			if err := m.DestList[len(m.DestList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RuleName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RuleName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RuleDescription", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RuleDescription = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultActionNextPolicy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.DefaultActionChoice = &ForwardProxySimpleRuleType_DefaultActionNextPolicy{v}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultActionDeny", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.DefaultActionChoice = &ForwardProxySimpleRuleType_DefaultActionDeny{v}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultActionAllow", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.DefaultActionChoice = &ForwardProxySimpleRuleType_DefaultActionAllow{v}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Metadata == nil {
				m.Metadata = &ves_io_schema4.MessageMetaType{}
			}
			if err := m.Metadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DomainListType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DomainListType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DomainListType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TlsList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TlsList = append(m.TlsList, &ves_io_schema4.DomainType{})
			if err := m.TlsList[len(m.TlsList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *URLListType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: URLListType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: URLListType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HttpList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HttpList = append(m.HttpList, &URLType{})
			if err := m.HttpList[len(m.HttpList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ForwardProxyAdvancedRuleType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ForwardProxyAdvancedRuleType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ForwardProxyAdvancedRuleType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RuleName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RuleName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Action", wireType)
			}
			m.Action = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Action |= (ves_io_schema_policy.RuleAction(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllSources", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.SourceChoice = &ForwardProxyAdvancedRuleType_AllSources{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrefixList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema_views.PrefixStringListType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.SourceChoice = &ForwardProxyAdvancedRuleType_PrefixList{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InsideSources", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.SourceChoice = &ForwardProxyAdvancedRuleType_InsideSources{v}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Interface", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema_views.ObjectRefType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.SourceChoice = &ForwardProxyAdvancedRuleType_Interface{v}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SourceChoice = &ForwardProxyAdvancedRuleType_Namespace{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LabelSelector", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.LabelSelectorType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.SourceChoice = &ForwardProxyAdvancedRuleType_LabelSelector{v}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IpPrefixSet", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema_views.ObjectRefType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.SourceChoice = &ForwardProxyAdvancedRuleType_IpPrefixSet{v}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllDestinations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.DestinationChoice = &ForwardProxyAdvancedRuleType_AllDestinations{v}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TlsList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &DomainListType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.DestinationChoice = &ForwardProxyAdvancedRuleType_TlsList{v}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HttpList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &URLListType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.DestinationChoice = &ForwardProxyAdvancedRuleType_HttpList{v}
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoHttpConnectPort", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.HttpConnectChoice = &ForwardProxyAdvancedRuleType_NoHttpConnectPort{v}
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PortMatcher", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema_policy.PortMatcherType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.HttpConnectChoice = &ForwardProxyAdvancedRuleType_PortMatcher{v}
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RuleDescription", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RuleDescription = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DstIpPrefixSet", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema_views.ObjectRefType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.DestinationChoice = &ForwardProxyAdvancedRuleType_DstIpPrefixSet{v}
			iNdEx = postIndex
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DstPrefixList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema_views.PrefixStringListType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.DestinationChoice = &ForwardProxyAdvancedRuleType_DstPrefixList{v}
			iNdEx = postIndex
		case 22:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DstLabelSelector", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.LabelSelectorType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.DestinationChoice = &ForwardProxyAdvancedRuleType_DstLabelSelector{v}
			iNdEx = postIndex
		case 23:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DstAsnSet", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema_views.ObjectRefType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.DestinationChoice = &ForwardProxyAdvancedRuleType_DstAsnSet{v}
			iNdEx = postIndex
		case 24:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DstAsnList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema_policy.AsnMatchList{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.DestinationChoice = &ForwardProxyAdvancedRuleType_DstAsnList{v}
			iNdEx = postIndex
		case 25:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Metadata == nil {
				m.Metadata = &ves_io_schema4.MessageMetaType{}
			}
			if err := m.Metadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ForwardProxyRuleListType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ForwardProxyRuleListType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ForwardProxyRuleListType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rules", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Rules = append(m.Rules, &ForwardProxyAdvancedRuleType{})
			if err := m.Rules[len(m.Rules)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GlobalSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GlobalSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GlobalSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AnyProxy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ProxyChoice = &GlobalSpecType_AnyProxy{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NetworkConnector", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema_views.ObjectRefType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ProxyChoice = &GlobalSpecType_NetworkConnector{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProxyLabelSelector", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.LabelSelectorType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ProxyChoice = &GlobalSpecType_ProxyLabelSelector{v}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllowAll", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.RuleChoice = &GlobalSpecType_AllowAll{v}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllowList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ForwardProxySimpleRuleType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.RuleChoice = &GlobalSpecType_AllowList{v}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DenyList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ForwardProxySimpleRuleType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.RuleChoice = &GlobalSpecType_DenyList{v}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RuleList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ForwardProxyRuleListType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.RuleChoice = &GlobalSpecType_RuleList{v}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DrpHttpConnect", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ProxyChoice = &GlobalSpecType_DrpHttpConnect{v}
			iNdEx = postIndex
		case 1000:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ViewInternal", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ViewInternal == nil {
				m.ViewInternal = &ves_io_schema_views.ObjectRefType{}
			}
			if err := m.ViewInternal.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AnyProxy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ProxyChoice = &CreateSpecType_AnyProxy{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NetworkConnector", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema_views.ObjectRefType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ProxyChoice = &CreateSpecType_NetworkConnector{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProxyLabelSelector", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.LabelSelectorType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ProxyChoice = &CreateSpecType_ProxyLabelSelector{v}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllowAll", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.RuleChoice = &CreateSpecType_AllowAll{v}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllowList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ForwardProxySimpleRuleType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.RuleChoice = &CreateSpecType_AllowList{v}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DenyList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ForwardProxySimpleRuleType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.RuleChoice = &CreateSpecType_DenyList{v}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RuleList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ForwardProxyRuleListType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.RuleChoice = &CreateSpecType_RuleList{v}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DrpHttpConnect", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ProxyChoice = &CreateSpecType_DrpHttpConnect{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplaceSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplaceSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplaceSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AnyProxy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ProxyChoice = &ReplaceSpecType_AnyProxy{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NetworkConnector", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema_views.ObjectRefType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ProxyChoice = &ReplaceSpecType_NetworkConnector{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProxyLabelSelector", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.LabelSelectorType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ProxyChoice = &ReplaceSpecType_ProxyLabelSelector{v}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllowAll", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.RuleChoice = &ReplaceSpecType_AllowAll{v}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllowList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ForwardProxySimpleRuleType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.RuleChoice = &ReplaceSpecType_AllowList{v}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DenyList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ForwardProxySimpleRuleType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.RuleChoice = &ReplaceSpecType_DenyList{v}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RuleList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ForwardProxyRuleListType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.RuleChoice = &ReplaceSpecType_RuleList{v}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DrpHttpConnect", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ProxyChoice = &ReplaceSpecType_DrpHttpConnect{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AnyProxy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ProxyChoice = &GetSpecType_AnyProxy{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NetworkConnector", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema_views.ObjectRefType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ProxyChoice = &GetSpecType_NetworkConnector{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProxyLabelSelector", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.LabelSelectorType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ProxyChoice = &GetSpecType_ProxyLabelSelector{v}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllowAll", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.RuleChoice = &GetSpecType_AllowAll{v}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllowList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ForwardProxySimpleRuleType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.RuleChoice = &GetSpecType_AllowList{v}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DenyList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ForwardProxySimpleRuleType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.RuleChoice = &GetSpecType_DenyList{v}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RuleList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ForwardProxyRuleListType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.RuleChoice = &GetSpecType_RuleList{v}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DrpHttpConnect", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ProxyChoice = &GetSpecType_DrpHttpConnect{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTypes(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthTypes
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipTypes(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthTypes = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTypes   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("ves.io/schema/views/forward_proxy_policy/types.proto", fileDescriptorTypes)
}
func init() {
	golang_proto.RegisterFile("ves.io/schema/views/forward_proxy_policy/types.proto", fileDescriptorTypes)
}

var fileDescriptorTypes = []byte{
	// 2037 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x59, 0xcf, 0x6f, 0xdb, 0xc8,
	0x15, 0xd6, 0x48, 0xb2, 0x44, 0x3d, 0xc9, 0x32, 0xcd, 0x38, 0x6b, 0xc5, 0x1b, 0xa8, 0xae, 0x36,
	0xc5, 0xa6, 0x2d, 0x23, 0x47, 0xb2, 0xf3, 0xcb, 0x28, 0x16, 0xb5, 0xe2, 0x24, 0x5a, 0xc1, 0x49,
	0x0d, 0xda, 0x69, 0xb1, 0x7b, 0x58, 0x75, 0x2c, 0x8e, 0x65, 0x76, 0x29, 0x92, 0x20, 0x47, 0xb6,
	0x55, 0xc0, 0x40, 0x90, 0x3f, 0xa0, 0x68, 0x17, 0x3d, 0x05, 0xe8, 0xbd, 0xc8, 0xa5, 0xf7, 0xd2,
	0x07, 0x23, 0x45, 0x81, 0x45, 0x4f, 0x3e, 0xa6, 0xb7, 0x8d, 0xf6, 0x92, 0xf6, 0xb4, 0xe8, 0xa9,
	0xd8, 0x53, 0x31, 0x43, 0x4a, 0x26, 0x15, 0x59, 0x51, 0x92, 0xb6, 0x7b, 0xf1, 0x8d, 0x9e, 0x79,
	0xdf, 0xf7, 0xde, 0xbc, 0x79, 0xdf, 0xbc, 0x19, 0x0b, 0x96, 0x76, 0x89, 0x53, 0xd4, 0xcc, 0x05,
	0xa7, 0xb1, 0x43, 0x5a, 0x78, 0x61, 0x57, 0x23, 0x7b, 0xce, 0xc2, 0xb6, 0x69, 0xef, 0x61, 0x5b,
	0xad, 0x5b, 0xb6, 0xb9, 0xdf, 0xa9, 0x5b, 0xa6, 0xae, 0x35, 0x3a, 0x0b, 0xb4, 0x63, 0x11, 0xa7,
	0x68, 0xd9, 0x26, 0x35, 0xa5, 0xcb, 0x1e, 0xaa, 0xe8, 0xa1, 0x8a, 0x1c, 0x55, 0x1c, 0x86, 0x9a,
	0xbb, 0xd2, 0xd4, 0xe8, 0x4e, 0x7b, 0xab, 0xd8, 0x30, 0x5b, 0x0b, 0x4d, 0xb3, 0x69, 0x2e, 0x70,
	0x82, 0xad, 0xf6, 0x36, 0xff, 0x8b, 0xff, 0xc1, 0xbf, 0x3c, 0xe2, 0xb9, 0xd9, 0x70, 0x38, 0x06,
	0xa1, 0xfe, 0xc4, 0xfb, 0xe1, 0x09, 0xd3, 0xa2, 0x9a, 0x69, 0xf8, 0xe1, 0xcc, 0xcd, 0x87, 0x27,
	0x5f, 0x0d, 0x78, 0xee, 0x42, 0xd8, 0x22, 0x38, 0x75, 0x71, 0x20, 0x03, 0x58, 0xd7, 0x54, 0x4c,
	0xc9, 0x70, 0x6a, 0xb6, 0xd2, 0x7a, 0xd8, 0xf9, 0xa5, 0x61, 0x19, 0x74, 0x34, 0x4a, 0xea, 0x41,
	0x2f, 0xdf, 0x1b, 0x66, 0x15, 0x30, 0x28, 0xfc, 0x25, 0x0e, 0xc9, 0x87, 0xca, 0xda, 0x66, 0xc7,
	0x22, 0xd2, 0x32, 0xa4, 0xc9, 0x3e, 0x6e, 0xd0, 0xfa, 0x2e, 0xd6, 0xdb, 0x24, 0x87, 0xe6, 0xd1,
	0xe5, 0x54, 0x65, 0xf6, 0xdf, 0x2e, 0x8a, 0xfc, 0xf9, 0x1f, 0x47, 0xb1, 0x09, 0x3b, 0x96, 0x7b,
	0x14, 0x65, 0x5f, 0x71, 0x3b, 0x2a, 0xa2, 0x6a, 0x44, 0x01, 0x6e, 0xfd, 0x73, 0x66, 0x2c, 0xfd,
	0x04, 0x32, 0x4e, 0x7b, 0x7b, 0x5b, 0xdb, 0xf7, 0xc1, 0xd1, 0xd7, 0x81, 0xd3, 0x9e, 0xb9, 0x87,
	0x5e, 0x85, 0xb4, 0x4d, 0x9a, 0xa4, 0x07, 0x8e, 0x71, 0xf0, 0xf7, 0x4f, 0x01, 0xfb, 0x43, 0x47,
	0x88, 0xc7, 0xc0, 0x71, 0x1e, 0xcb, 0x6d, 0x10, 0x2d, 0x4c, 0x77, 0xea, 0xc1, 0x45, 0xc4, 0x47,
	0xc7, 0x81, 0x94, 0x2c, 0x83, 0xdc, 0x39, 0x59, 0xc8, 0x1d, 0x98, 0xe6, 0x24, 0x96, 0x4d, 0x4e,
	0x56, 0x33, 0xf1, 0x3a, 0x96, 0x29, 0x86, 0x59, 0xe7, 0x10, 0x8f, 0xe6, 0xbe, 0x1f, 0x4b, 0x70,
	0x59, 0x89, 0x71, 0x97, 0xe5, 0x47, 0xa5, 0x9c, 0x2c, 0xad, 0x04, 0x02, 0x36, 0x3a, 0x75, 0x36,
	0x9a, 0x4b, 0xcd, 0xa3, 0xcb, 0xe9, 0xf2, 0x4c, 0x31, 0x2c, 0x86, 0x3b, 0x2d, 0x8b, 0x76, 0xaa,
	0x48, 0x49, 0x62, 0xa3, 0xb3, 0x8e, 0xe9, 0xce, 0xf2, 0x7b, 0xcf, 0x5c, 0x24, 0x81, 0x08, 0xa9,
	0xea, 0xe6, 0xe6, 0xfa, 0xfc, 0x43, 0x65, 0xcd, 0x91, 0x62, 0x37, 0xe4, 0x9b, 0x95, 0x02, 0x4c,
	0xaa, 0x66, 0x0b, 0x6b, 0x46, 0xbd, 0xb1, 0x63, 0x6a, 0x0d, 0x22, 0x4d, 0x1f, 0xb9, 0x08, 0x1d,
	0xbb, 0x28, 0xd9, 0x75, 0xd1, 0x44, 0x49, 0x2e, 0xcb, 0x8b, 0x95, 0x02, 0xa4, 0x79, 0xf4, 0xbe,
	0xc5, 0xb9, 0x23, 0x17, 0xa5, 0x8e, 0x5d, 0x24, 0x74, 0x5d, 0x94, 0xbc, 0x25, 0x2f, 0xc9, 0xd7,
	0xe4, 0xeb, 0xb5, 0xb8, 0x90, 0x14, 0x85, 0x5a, 0x5c, 0x10, 0xc4, 0x54, 0xe1, 0x9f, 0x13, 0x30,
	0x77, 0xd7, 0xd3, 0xe1, 0x3a, 0x93, 0xe1, 0x86, 0xd6, 0xb2, 0x74, 0xa2, 0xb4, 0x75, 0xc2, 0x0b,
	0xeb, 0x01, 0x08, 0x54, 0x77, 0xea, 0xba, 0xe6, 0xd0, 0x1c, 0x9a, 0x8f, 0x5d, 0x4e, 0x97, 0x2f,
	0x0c, 0x44, 0xbf, 0xca, 0x23, 0x62, 0xc6, 0x95, 0xdc, 0xb1, 0x8b, 0xbc, 0x64, 0x7c, 0x81, 0xa2,
	0xa2, 0xd8, 0xfb, 0xca, 0x21, 0x25, 0x49, 0x75, 0x67, 0x4d, 0x73, 0xa8, 0xb4, 0x03, 0xa9, 0x1d,
	0x4a, 0x2d, 0x8f, 0x30, 0xca, 0x09, 0x4b, 0xc5, 0x71, 0xcf, 0x86, 0xa2, 0x5f, 0xee, 0x23, 0x1c,
	0x09, 0x8c, 0x9d, 0x7b, 0xda, 0x84, 0x94, 0x4a, 0x1c, 0xea, 0x79, 0x8a, 0x0d, 0x0d, 0x7d, 0x6d,
	0x69, 0x95, 0x38, 0x94, 0x33, 0x5e, 0xf4, 0x33, 0x79, 0x0a, 0x2b, 0x63, 0xe2, 0xac, 0x97, 0x20,
	0x65, 0xb7, 0x75, 0x52, 0x37, 0x70, 0xab, 0x57, 0xa1, 0xc9, 0xe7, 0x07, 0xe8, 0xa5, 0x8b, 0x90,
	0x22, 0xb0, 0x99, 0x07, 0xb8, 0x45, 0xa4, 0x32, 0x88, 0xdc, 0x4a, 0x25, 0x4e, 0xc3, 0xd6, 0xb8,
	0xf8, 0xfd, 0x42, 0xec, 0x1b, 0x4f, 0x31, 0x83, 0xd5, 0x93, 0x79, 0x69, 0x03, 0xe6, 0x54, 0xb2,
	0x8d, 0xdb, 0x3a, 0xad, 0xe3, 0x06, 0x1b, 0xa9, 0x1b, 0x64, 0x9f, 0xfa, 0x2b, 0xcf, 0x25, 0x47,
	0x54, 0x4e, 0x44, 0x99, 0xf5, 0x91, 0x2b, 0x1c, 0xf8, 0x80, 0xec, 0xd3, 0x75, 0x0e, 0x93, 0xee,
	0xc2, 0xb9, 0x01, 0x52, 0x95, 0x18, 0x9d, 0x9c, 0x30, 0x92, 0x6d, 0x3a, 0xc4, 0xb6, 0x4a, 0x8c,
	0x8e, 0x54, 0x85, 0x99, 0x01, 0x1e, 0xac, 0xeb, 0xe6, 0xde, 0xc8, 0x82, 0x8e, 0x28, 0x52, 0x88,
	0x68, 0x85, 0x21, 0xa4, 0x65, 0x10, 0x5a, 0x84, 0x62, 0x15, 0x53, 0x9c, 0x03, 0x8e, 0xce, 0x0f,
	0xa0, 0xef, 0x13, 0xc7, 0xc1, 0x4d, 0x72, 0x9f, 0x50, 0xcc, 0xb6, 0x46, 0xe9, 0xdb, 0x2f, 0x4f,
	0xfe, 0xeb, 0x23, 0x28, 0x5d, 0x95, 0x79, 0xa1, 0xcb, 0xd7, 0x2b, 0x3f, 0x82, 0xf3, 0x03, 0x41,
	0x05, 0x64, 0x91, 0x3c, 0x76, 0x51, 0x82, 0xc9, 0xe2, 0x86, 0x7c, 0x53, 0xbe, 0x55, 0x8b, 0x0b,
	0x09, 0x31, 0x59, 0xf8, 0x25, 0x64, 0xbd, 0x72, 0x65, 0x7b, 0xf9, 0xbf, 0xa8, 0xef, 0xc2, 0x1e,
	0xa4, 0x1f, 0x2a, 0x6b, 0x7d, 0xfa, 0xff, 0x5b, 0xb9, 0x17, 0xfe, 0x94, 0x85, 0x8b, 0x41, 0x1d,
	0xaf, 0xa8, 0xbb, 0xd8, 0x68, 0x10, 0xb5, 0xaf, 0xe4, 0x50, 0xe5, 0xa2, 0xd3, 0x2a, 0xf7, 0x2e,
	0x24, 0xbc, 0x5c, 0xf2, 0x36, 0x90, 0x2d, 0xcf, 0x0f, 0x44, 0xeb, 0x47, 0xc6, 0x58, 0xbd, 0x5d,
	0xad, 0x64, 0x58, 0x38, 0xc9, 0xc7, 0x28, 0x3e, 0x17, 0x8d, 0x20, 0xc5, 0x47, 0x4b, 0x37, 0x20,
	0x8d, 0x75, 0xbd, 0xee, 0x98, 0x6d, 0xbb, 0x41, 0x1c, 0xae, 0x94, 0xd3, 0xeb, 0x04, 0xb0, 0xae,
	0x6f, 0x78, 0x96, 0x92, 0x02, 0x69, 0xff, 0xfc, 0xe6, 0x39, 0x9b, 0xe0, 0xc0, 0x1f, 0x0e, 0xcd,
	0x99, 0x77, 0x68, 0x6f, 0x50, 0x5b, 0x33, 0x9a, 0xbd, 0x8c, 0x57, 0xe2, 0x2c, 0x57, 0x8c, 0xd3,
	0x63, 0xe1, 0xa2, 0xbd, 0x0b, 0x59, 0xcd, 0x70, 0x34, 0x95, 0xf4, 0xe3, 0x49, 0x9c, 0x1e, 0x4f,
	0x3f, 0x2b, 0xd5, 0x88, 0x32, 0xe9, 0xc1, 0x7a, 0xb1, 0xd5, 0x21, 0xa5, 0x19, 0x94, 0xd8, 0xdb,
	0xb8, 0x41, 0x7c, 0x45, 0x16, 0x86, 0x46, 0xf6, 0xb3, 0xad, 0x5f, 0x91, 0x06, 0x55, 0xc8, 0x36,
	0x0f, 0xe9, 0xfd, 0xa7, 0x07, 0xd3, 0x06, 0xa1, 0x7b, 0xa6, 0xfd, 0x79, 0xbd, 0x8f, 0x3f, 0x71,
	0x72, 0xc2, 0x29, 0x7d, 0x08, 0x29, 0xb6, 0x3d, 0x8e, 0xc5, 0x1c, 0x08, 0xa1, 0x3d, 0x62, 0x86,
	0xfd, 0x39, 0x49, 0x81, 0xac, 0x8e, 0xb7, 0x88, 0x5e, 0x77, 0x88, 0x4e, 0x1a, 0xd4, 0xb4, 0x7d,
	0x25, 0x0e, 0x6e, 0xd7, 0x1a, 0x33, 0xda, 0xf0, 0x6d, 0x78, 0x30, 0xc9, 0x27, 0x87, 0x28, 0x06,
	0xde, 0xea, 0xf4, 0xe0, 0xac, 0xf4, 0x29, 0x4c, 0x6a, 0x56, 0xaf, 0x79, 0x3a, 0x84, 0xfa, 0xf2,
	0x1c, 0x67, 0x85, 0xe2, 0xd3, 0x83, 0x30, 0x96, 0xdd, 0x12, 0x34, 0xcb, 0xdf, 0x20, 0x42, 0xa5,
	0x15, 0x10, 0x59, 0x39, 0xb0, 0x63, 0x54, 0x33, 0x30, 0xbf, 0x0c, 0xe5, 0x32, 0x23, 0x9b, 0xe1,
	0x14, 0xd6, 0xf5, 0xd5, 0x80, 0xb9, 0xf4, 0x30, 0xa0, 0xd4, 0x49, 0x0e, 0xbd, 0x39, 0xbe, 0x92,
	0xc2, 0xaa, 0xaf, 0x06, 0x1a, 0xd2, 0x66, 0x50, 0xa1, 0x59, 0xce, 0x7b, 0xed, 0x8d, 0x14, 0x1a,
	0x20, 0x3d, 0x69, 0x3e, 0xf7, 0x60, 0xc6, 0x30, 0xeb, 0x9c, 0xb8, 0x61, 0x1a, 0x06, 0x69, 0xb0,
	0x83, 0xdc, 0xa6, 0x39, 0x71, 0xc4, 0x9a, 0xa3, 0xca, 0xb4, 0x61, 0x56, 0x29, 0xb5, 0x6e, 0x7b,
	0x88, 0x75, 0xd3, 0xa6, 0x52, 0x0d, 0x32, 0x0c, 0x58, 0x6f, 0x61, 0xda, 0xd8, 0x21, 0x76, 0x6e,
	0x9a, 0x13, 0xfc, 0x60, 0xb8, 0x2a, 0x19, 0xe2, 0xbe, 0x67, 0xc8, 0x23, 0x8a, 0x2a, 0x69, 0xeb,
	0x64, 0x68, 0x68, 0x57, 0x92, 0x5e, 0xd3, 0x95, 0x30, 0x4c, 0xab, 0x0e, 0xad, 0x87, 0x0b, 0x63,
	0xe6, 0x1d, 0x0a, 0x03, 0x29, 0x59, 0xd5, 0xa1, 0x1f, 0x07, 0x6a, 0xe3, 0x13, 0x98, 0x62, 0x2e,
	0x82, 0xaa, 0x3f, 0xff, 0x76, 0xaa, 0x47, 0xca, 0xa4, 0xea, 0xd0, 0xf5, 0x13, 0xe1, 0x7f, 0x02,
	0x12, 0xa3, 0x1e, 0x90, 0xca, 0x7b, 0x6f, 0x26, 0x95, 0x68, 0x15, 0x29, 0xa2, 0xea, 0xd0, 0x90,
	0x81, 0xb4, 0x09, 0x69, 0x46, 0x8d, 0x1d, 0x83, 0xa7, 0x64, 0x76, 0xec, 0x94, 0x64, 0x9f, 0x1e,
	0xa4, 0xb7, 0x9a, 0x56, 0x0f, 0x59, 0x45, 0x4a, 0x4a, 0x75, 0xe8, 0x8a, 0x63, 0xb0, 0x5c, 0xac,
	0x41, 0xa6, 0xc7, 0xca, 0x13, 0x91, 0x1b, 0x4a, 0xeb, 0x6f, 0xf7, 0x8a, 0x63, 0xf0, 0xad, 0x65,
	0x4b, 0xed, 0x67, 0x00, 0x3c, 0x32, 0xbe, 0xfc, 0x60, 0xaf, 0xbd, 0xf0, 0x86, 0xbd, 0xb6, 0xfc,
	0xcc, 0x45, 0x45, 0xc8, 0x40, 0x9c, 0x1d, 0xf5, 0x52, 0xbc, 0x7c, 0x4d, 0x2e, 0x43, 0x1a, 0x12,
	0xde, 0x51, 0x28, 0xa1, 0x45, 0x98, 0x86, 0x74, 0x40, 0x9f, 0x52, 0xb4, 0x54, 0xaa, 0xfc, 0x18,
	0x26, 0xbd, 0x03, 0xb6, 0xd7, 0x88, 0xe7, 0x8e, 0x5c, 0xc4, 0x02, 0x8b, 0x75, 0x5d, 0x94, 0xe5,
	0x77, 0x4f, 0x99, 0xb7, 0x63, 0xb9, 0x74, 0xb5, 0x72, 0x0b, 0xa4, 0xc0, 0x71, 0xd0, 0x43, 0x7c,
	0x70, 0xe4, 0xa2, 0xcc, 0xb1, 0x8b, 0xd2, 0x5d, 0x17, 0xcd, 0x96, 0xca, 0x72, 0x69, 0x51, 0x2e,
	0x2d, 0xc9, 0xe5, 0x92, 0x5c, 0xbe, 0x2a, 0x97, 0x97, 0xe4, 0xf2, 0xa2, 0x5c, 0x2e, 0x57, 0x64,
	0x38, 0x17, 0x92, 0x96, 0x8f, 0x3d, 0x7f, 0xe4, 0x22, 0xf1, 0x4b, 0xef, 0x1e, 0x37, 0xc5, 0x6f,
	0xc4, 0xd7, 0xe5, 0xd2, 0x8d, 0x5a, 0x5c, 0x88, 0x89, 0xf1, 0x5a, 0x5c, 0x48, 0x8b, 0x99, 0x5a,
	0x5c, 0x38, 0x27, 0xce, 0xd4, 0xe2, 0xc2, 0x94, 0x28, 0x16, 0xfe, 0x80, 0x20, 0x17, 0xec, 0x98,
	0x6c, 0xa1, 0xfd, 0xc6, 0xfd, 0x08, 0xc1, 0x04, 0xd3, 0x82, 0xe3, 0xdf, 0x0a, 0xee, 0x8e, 0x7f,
	0x26, 0x8c, 0xea, 0xc2, 0x95, 0x42, 0xa8, 0x95, 0xcf, 0xf7, 0xbe, 0x84, 0xfe, 0xd8, 0x55, 0xa4,
	0x78, 0x8e, 0x0b, 0x7f, 0x4f, 0x42, 0xf6, 0x9e, 0x6e, 0x6e, 0x61, 0x7d, 0xc3, 0x22, 0x0d, 0x1e,
	0xd5, 0x2a, 0xa4, 0xf8, 0x5b, 0x82, 0x51, 0xf3, 0x06, 0x7d, 0x5a, 0x0f, 0x9b, 0xea, 0x7e, 0xf5,
	0xd7, 0x18, 0x3c, 0x39, 0x44, 0x09, 0xa7, 0xe3, 0x50, 0xd2, 0xaa, 0x46, 0x14, 0xf6, 0x0a, 0xe1,
	0x31, 0x49, 0xbf, 0x86, 0x7e, 0x3b, 0xf2, 0x33, 0x68, 0xda, 0xfc, 0xe1, 0x36, 0x5e, 0x01, 0x7f,
	0x18, 0x68, 0x67, 0x7d, 0xfc, 0xa3, 0x43, 0x84, 0x5e, 0xf5, 0x29, 0xfa, 0x76, 0xb7, 0x7b, 0x66,
	0x52, 0x0b, 0x66, 0xbc, 0x64, 0x0d, 0x68, 0x32, 0x3e, 0xa6, 0x26, 0x67, 0x9f, 0x1c, 0xa2, 0x38,
	0x44, 0x23, 0x43, 0x9c, 0x49, 0x9c, 0x38, 0xac, 0xd2, 0x45, 0x48, 0xf1, 0x8b, 0x2a, 0xbb, 0xae,
	0x8e, 0xbc, 0x43, 0x23, 0x45, 0xe0, 0x86, 0x2b, 0xba, 0x2e, 0x11, 0x00, 0x0f, 0xc4, 0x25, 0xe8,
	0xdd, 0x95, 0x57, 0xdf, 0x6e, 0xff, 0xc3, 0xaf, 0x29, 0xa6, 0x75, 0xce, 0xcc, 0xd5, 0xd9, 0x60,
	0x0f, 0x14, 0xa3, 0xe3, 0x79, 0x49, 0xfd, 0x57, 0xbd, 0x08, 0x8c, 0x98, 0x3b, 0xc1, 0xfe, 0xad,
	0x8f, 0x3b, 0xf1, 0x1a, 0x7a, 0xe5, 0xed, 0x9c, 0x04, 0xe5, 0x51, 0xf5, 0xaf, 0x8c, 0xdc, 0xc5,
	0x2f, 0x40, 0x54, 0x6d, 0x2b, 0xd4, 0xec, 0x72, 0xe9, 0x11, 0xb5, 0x79, 0x9e, 0x6d, 0x9d, 0xf8,
	0xe4, 0x10, 0x65, 0x9c, 0x1d, 0x6c, 0x13, 0x55, 0x9e, 0x6f, 0x3b, 0xc4, 0xae, 0x46, 0x94, 0xac,
	0x6a, 0x5b, 0x81, 0xfe, 0x27, 0x7d, 0x06, 0x93, 0xfc, 0xbf, 0x27, 0xfc, 0x7e, 0x64, 0x60, 0x3d,
	0xf7, 0x72, 0xfc, 0x3b, 0xd7, 0xcc, 0xd3, 0x83, 0x30, 0x98, 0xb7, 0xb7, 0x0c, 0x1b, 0xfa, 0xd8,
	0x1f, 0x59, 0xbe, 0xf8, 0xcc, 0x45, 0x39, 0x00, 0x98, 0xf0, 0x64, 0x81, 0x4a, 0xec, 0x9b, 0x2d,
	0xd3, 0x91, 0xd0, 0xf5, 0xca, 0x25, 0xc8, 0x78, 0xb9, 0xf0, 0x4f, 0x97, 0x99, 0x23, 0x17, 0x45,
	0x99, 0x7a, 0xbb, 0x2e, 0x12, 0xca, 0x72, 0xa9, 0x24, 0x2f, 0xca, 0x4b, 0x95, 0x0f, 0x20, 0xcd,
	0xf3, 0x1b, 0x30, 0xea, 0xbd, 0x3c, 0x84, 0xde, 0x51, 0x57, 0x8b, 0x0b, 0x13, 0x62, 0xa2, 0x16,
	0x17, 0x90, 0x18, 0xf5, 0x1f, 0x22, 0xbf, 0x4b, 0x40, 0xf6, 0xb6, 0x4d, 0x30, 0x25, 0x7d, 0x6d,
	0x2f, 0x8e, 0xa9, 0xed, 0x90, 0x94, 0x9b, 0xef, 0x26, 0xe5, 0x99, 0x61, 0x52, 0x1e, 0xaa, 0xdb,
	0xcd, 0x77, 0xd3, 0xed, 0x99, 0x3c, 0xbf, 0x33, 0x79, 0xfe, 0xf4, 0xcd, 0xe4, 0xf9, 0xaa, 0x0e,
	0x97, 0xa7, 0xff, 0xf6, 0xd1, 0x40, 0x23, 0xaa, 0xcc, 0x0f, 0x88, 0x43, 0x7c, 0xfc, 0x2d, 0x0a,
	0x8d, 0x54, 0xf2, 0x61, 0x61, 0x4c, 0x3d, 0xfe, 0x16, 0x05, 0x07, 0x86, 0x68, 0xe2, 0x8b, 0x04,
	0x4c, 0x29, 0xc4, 0xd2, 0x71, 0xe3, 0x4c, 0x14, 0x67, 0xa2, 0x38, 0x13, 0x05, 0x17, 0xc5, 0x6f,
	0x12, 0x90, 0xbe, 0x47, 0xe8, 0x99, 0x20, 0xce, 0x04, 0x71, 0x26, 0x88, 0x84, 0x98, 0xac, 0xfc,
	0x1e, 0x1d, 0xbf, 0xc8, 0x47, 0x9e, 0xbf, 0xc8, 0x47, 0xbe, 0x79, 0x91, 0x47, 0x8f, 0xba, 0x79,
	0xf4, 0xc7, 0x6e, 0x1e, 0x7d, 0xd9, 0xcd, 0xa3, 0xe3, 0x6e, 0x1e, 0x3d, 0xef, 0xe6, 0xd1, 0x57,
	0xdd, 0x3c, 0x7a, 0xd9, 0xcd, 0x47, 0xbe, 0xe9, 0xe6, 0xd1, 0x6f, 0xbf, 0xce, 0x47, 0x8e, 0xbe,
	0xce, 0xa3, 0x4f, 0x3f, 0x6b, 0x9a, 0xd6, 0xe7, 0xcd, 0xe2, 0xae, 0xa9, 0x53, 0x62, 0xdb, 0xb8,
	0xd8, 0x76, 0x16, 0xf8, 0xc7, 0xb6, 0x69, 0xb7, 0xae, 0x58, 0xb6, 0xb9, 0xab, 0xa9, 0xc4, 0xbe,
	0xd2, 0x9b, 0x5e, 0xb0, 0xb6, 0x9a, 0xe6, 0x02, 0xd9, 0xa7, 0xfe, 0x8f, 0x6f, 0xaf, 0xfd, 0xad,
	0x73, 0x2b, 0xc1, 0x7f, 0x93, 0x5b, 0xfc, 0x4f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xa9, 0x7f, 0xeb,
	0x91, 0x1e, 0x1d, 0x00, 0x00,
}
