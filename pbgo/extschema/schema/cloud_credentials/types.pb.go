// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ves.io/schema/cloud_credentials/types.proto

package cloud_credentials

import proto "github.com/gogo/protobuf/proto"
import golang_proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"
import _ "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
import ves_io_schema4 "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
import _ "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
import _ "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"

import strings "strings"
import reflect "reflect"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// AWS Programmatic Access Credentials type
//
// x-displayName: "AWS Programmatic Access Credentials"
// AWS Programmatic Access Credentials type
type AWSSecretType struct {
	// AWS Access Key ID
	//
	// x-displayName: "Access Key ID"
	// x-required
	// Access key ID for your AWS account
	AccessKey string `protobuf:"bytes,1,opt,name=access_key,json=accessKey,proto3" json:"access_key,omitempty"`
	// AWS Secret Access Key
	//
	// x-displayName: "Secret Access Key"
	// x-required
	// Secret Access Key for your AWS account
	SecretKey *ves_io_schema4.SecretType `protobuf:"bytes,2,opt,name=secret_key,json=secretKey" json:"secret_key,omitempty"`
}

func (m *AWSSecretType) Reset()                    { *m = AWSSecretType{} }
func (*AWSSecretType) ProtoMessage()               {}
func (*AWSSecretType) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{0} }

func (m *AWSSecretType) GetAccessKey() string {
	if m != nil {
		return m.AccessKey
	}
	return ""
}

func (m *AWSSecretType) GetSecretKey() *ves_io_schema4.SecretType {
	if m != nil {
		return m.SecretKey
	}
	return nil
}

// Azure Credential Client Certificate type
//
// x-displayName: "Client Certificate"
// Azure Credentials Client Certificate type
type AzurePfxType struct {
	// Azure Client ID
	//
	// x-displayName: "Client ID"
	// x-required
	// Client ID for your Azure service principal
	ClientId string `protobuf:"bytes,1,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	// Azure Subscription ID
	//
	// x-displayName: "Subscription ID"
	// x-required
	// Subscription ID for your Azure service principal
	SubscriptionId string `protobuf:"bytes,2,opt,name=subscription_id,json=subscriptionId,proto3" json:"subscription_id,omitempty"`
	// Azure Tenant ID
	//
	// x-displayName: "Tenant ID"
	// x-required
	// Tenant ID for your Azure service principal
	TenantId string `protobuf:"bytes,3,opt,name=tenant_id,json=tenantId,proto3" json:"tenant_id,omitempty"`
	// Azure client certificate
	//
	// x-displayName: "URL for Client Certificate"
	// x-required
	// URL for Client Certificate in '.pfx' or '.p12' whose certificate is linked to service principal object
	// Certificate URL can contain client certificate in string:///<Base64 of certificate> format.
	// Here <Base64 of certificate> is base64 of '.pfx' or '.p12' binary file
	CertificateUrl string `protobuf:"bytes,4,opt,name=certificate_url,json=certificateUrl,proto3" json:"certificate_url,omitempty"`
	// Azure Client Certificate password
	//
	// x-displayName: "Certificate Password"
	// x-required
	// Password for your '.p12' or '.pfx' file whose certificate is linked to service principal object
	Password *ves_io_schema4.SecretType `protobuf:"bytes,5,opt,name=password" json:"password,omitempty"`
}

func (m *AzurePfxType) Reset()                    { *m = AzurePfxType{} }
func (*AzurePfxType) ProtoMessage()               {}
func (*AzurePfxType) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{1} }

func (m *AzurePfxType) GetClientId() string {
	if m != nil {
		return m.ClientId
	}
	return ""
}

func (m *AzurePfxType) GetSubscriptionId() string {
	if m != nil {
		return m.SubscriptionId
	}
	return ""
}

func (m *AzurePfxType) GetTenantId() string {
	if m != nil {
		return m.TenantId
	}
	return ""
}

func (m *AzurePfxType) GetCertificateUrl() string {
	if m != nil {
		return m.CertificateUrl
	}
	return ""
}

func (m *AzurePfxType) GetPassword() *ves_io_schema4.SecretType {
	if m != nil {
		return m.Password
	}
	return nil
}

// Azure Credential Client Secret type
//
// x-displayName: "Azure Client Secret"
// Azure Credentials Client Secret type
type AzureSecretType struct {
	// Azure Client ID
	//
	// x-displayName: "Client ID"
	// x-required
	// Client ID for your Azure service principal
	ClientId string `protobuf:"bytes,1,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	// Azure Subscription ID
	//
	// x-displayName: "Subscription ID"
	// x-required
	// Subscription ID for your Azure service principal
	SubscriptionId string `protobuf:"bytes,2,opt,name=subscription_id,json=subscriptionId,proto3" json:"subscription_id,omitempty"`
	// Azure Tenant ID
	//
	// x-displayName: "Tenant ID"
	// x-required
	// Tenant ID for your Azure service principal
	TenantId string `protobuf:"bytes,3,opt,name=tenant_id,json=tenantId,proto3" json:"tenant_id,omitempty"`
	// Azure client secret
	//
	// x-displayName: "Azure Client Secret"
	// x-required
	// Client Secret (alias password) for your Azure service principal
	ClientSecret *ves_io_schema4.SecretType `protobuf:"bytes,4,opt,name=client_secret,json=clientSecret" json:"client_secret,omitempty"`
}

func (m *AzureSecretType) Reset()                    { *m = AzureSecretType{} }
func (*AzureSecretType) ProtoMessage()               {}
func (*AzureSecretType) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{2} }

func (m *AzureSecretType) GetClientId() string {
	if m != nil {
		return m.ClientId
	}
	return ""
}

func (m *AzureSecretType) GetSubscriptionId() string {
	if m != nil {
		return m.SubscriptionId
	}
	return ""
}

func (m *AzureSecretType) GetTenantId() string {
	if m != nil {
		return m.TenantId
	}
	return ""
}

func (m *AzureSecretType) GetClientSecret() *ves_io_schema4.SecretType {
	if m != nil {
		return m.ClientSecret
	}
	return nil
}

// GCP Credentials type
//
// x-displayName: "GCP Credentials"
// GCP Credentials type
type GCPCredFileType struct {
	// GCP credential file
	//
	// x-displayName: "GCP Credentials"
	// x-required
	// Content of Credential File for your GCP account
	CredentialFile *ves_io_schema4.SecretType `protobuf:"bytes,2,opt,name=credential_file,json=credentialFile" json:"credential_file,omitempty"`
}

func (m *GCPCredFileType) Reset()                    { *m = GCPCredFileType{} }
func (*GCPCredFileType) ProtoMessage()               {}
func (*GCPCredFileType) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{3} }

func (m *GCPCredFileType) GetCredentialFile() *ves_io_schema4.SecretType {
	if m != nil {
		return m.CredentialFile
	}
	return nil
}

// Specification for cloud_credentials
//
// x-displayName: "Specification"
// Desired state of cloud_credentials
type GlobalSpecType struct {
	// One of cloud
	//
	// x-displayName: "Select Cloud Credential Type"
	// x-required
	// Select Cloud credential type for AWS, Azure or GCP
	//
	// Types that are valid to be assigned to Cloud:
	//	*GlobalSpecType_AwsSecretKey
	//	*GlobalSpecType_AzurePfxCertificate
	//	*GlobalSpecType_AzureClientSecret
	//	*GlobalSpecType_GcpCredFile
	Cloud isGlobalSpecType_Cloud `protobuf_oneof:"cloud"`
}

func (m *GlobalSpecType) Reset()                    { *m = GlobalSpecType{} }
func (*GlobalSpecType) ProtoMessage()               {}
func (*GlobalSpecType) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{4} }

type isGlobalSpecType_Cloud interface {
	isGlobalSpecType_Cloud()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type GlobalSpecType_AwsSecretKey struct {
	AwsSecretKey *AWSSecretType `protobuf:"bytes,1,opt,name=aws_secret_key,json=awsSecretKey,oneof"`
}
type GlobalSpecType_AzurePfxCertificate struct {
	AzurePfxCertificate *AzurePfxType `protobuf:"bytes,2,opt,name=azure_pfx_certificate,json=azurePfxCertificate,oneof"`
}
type GlobalSpecType_AzureClientSecret struct {
	AzureClientSecret *AzureSecretType `protobuf:"bytes,3,opt,name=azure_client_secret,json=azureClientSecret,oneof"`
}
type GlobalSpecType_GcpCredFile struct {
	GcpCredFile *GCPCredFileType `protobuf:"bytes,4,opt,name=gcp_cred_file,json=gcpCredFile,oneof"`
}

func (*GlobalSpecType_AwsSecretKey) isGlobalSpecType_Cloud()        {}
func (*GlobalSpecType_AzurePfxCertificate) isGlobalSpecType_Cloud() {}
func (*GlobalSpecType_AzureClientSecret) isGlobalSpecType_Cloud()   {}
func (*GlobalSpecType_GcpCredFile) isGlobalSpecType_Cloud()         {}

func (m *GlobalSpecType) GetCloud() isGlobalSpecType_Cloud {
	if m != nil {
		return m.Cloud
	}
	return nil
}

func (m *GlobalSpecType) GetAwsSecretKey() *AWSSecretType {
	if x, ok := m.GetCloud().(*GlobalSpecType_AwsSecretKey); ok {
		return x.AwsSecretKey
	}
	return nil
}

func (m *GlobalSpecType) GetAzurePfxCertificate() *AzurePfxType {
	if x, ok := m.GetCloud().(*GlobalSpecType_AzurePfxCertificate); ok {
		return x.AzurePfxCertificate
	}
	return nil
}

func (m *GlobalSpecType) GetAzureClientSecret() *AzureSecretType {
	if x, ok := m.GetCloud().(*GlobalSpecType_AzureClientSecret); ok {
		return x.AzureClientSecret
	}
	return nil
}

func (m *GlobalSpecType) GetGcpCredFile() *GCPCredFileType {
	if x, ok := m.GetCloud().(*GlobalSpecType_GcpCredFile); ok {
		return x.GcpCredFile
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*GlobalSpecType) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _GlobalSpecType_OneofMarshaler, _GlobalSpecType_OneofUnmarshaler, _GlobalSpecType_OneofSizer, []interface{}{
		(*GlobalSpecType_AwsSecretKey)(nil),
		(*GlobalSpecType_AzurePfxCertificate)(nil),
		(*GlobalSpecType_AzureClientSecret)(nil),
		(*GlobalSpecType_GcpCredFile)(nil),
	}
}

func _GlobalSpecType_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*GlobalSpecType)
	// cloud
	switch x := m.Cloud.(type) {
	case *GlobalSpecType_AwsSecretKey:
		_ = b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.AwsSecretKey); err != nil {
			return err
		}
	case *GlobalSpecType_AzurePfxCertificate:
		_ = b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.AzurePfxCertificate); err != nil {
			return err
		}
	case *GlobalSpecType_AzureClientSecret:
		_ = b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.AzureClientSecret); err != nil {
			return err
		}
	case *GlobalSpecType_GcpCredFile:
		_ = b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.GcpCredFile); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("GlobalSpecType.Cloud has unexpected type %T", x)
	}
	return nil
}

func _GlobalSpecType_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*GlobalSpecType)
	switch tag {
	case 1: // cloud.aws_secret_key
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(AWSSecretType)
		err := b.DecodeMessage(msg)
		m.Cloud = &GlobalSpecType_AwsSecretKey{msg}
		return true, err
	case 2: // cloud.azure_pfx_certificate
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(AzurePfxType)
		err := b.DecodeMessage(msg)
		m.Cloud = &GlobalSpecType_AzurePfxCertificate{msg}
		return true, err
	case 3: // cloud.azure_client_secret
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(AzureSecretType)
		err := b.DecodeMessage(msg)
		m.Cloud = &GlobalSpecType_AzureClientSecret{msg}
		return true, err
	case 4: // cloud.gcp_cred_file
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(GCPCredFileType)
		err := b.DecodeMessage(msg)
		m.Cloud = &GlobalSpecType_GcpCredFile{msg}
		return true, err
	default:
		return false, nil
	}
}

func _GlobalSpecType_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*GlobalSpecType)
	// cloud
	switch x := m.Cloud.(type) {
	case *GlobalSpecType_AwsSecretKey:
		s := proto.Size(x.AwsSecretKey)
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *GlobalSpecType_AzurePfxCertificate:
		s := proto.Size(x.AzurePfxCertificate)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *GlobalSpecType_AzureClientSecret:
		s := proto.Size(x.AzureClientSecret)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *GlobalSpecType_GcpCredFile:
		s := proto.Size(x.GcpCredFile)
		n += proto.SizeVarint(4<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// Create cloud_credentials
//
// x-displayName: "Create Cloud Credentials"
// API to create cloud_credentials object
type CreateSpecType struct {
	// Types that are valid to be assigned to Cloud:
	//	*CreateSpecType_AwsSecretKey
	//	*CreateSpecType_AzurePfxCertificate
	//	*CreateSpecType_AzureClientSecret
	//	*CreateSpecType_GcpCredFile
	Cloud isCreateSpecType_Cloud `protobuf_oneof:"cloud"`
}

func (m *CreateSpecType) Reset()                    { *m = CreateSpecType{} }
func (*CreateSpecType) ProtoMessage()               {}
func (*CreateSpecType) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{5} }

type isCreateSpecType_Cloud interface {
	isCreateSpecType_Cloud()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type CreateSpecType_AwsSecretKey struct {
	AwsSecretKey *AWSSecretType `protobuf:"bytes,1,opt,name=aws_secret_key,json=awsSecretKey,oneof"`
}
type CreateSpecType_AzurePfxCertificate struct {
	AzurePfxCertificate *AzurePfxType `protobuf:"bytes,2,opt,name=azure_pfx_certificate,json=azurePfxCertificate,oneof"`
}
type CreateSpecType_AzureClientSecret struct {
	AzureClientSecret *AzureSecretType `protobuf:"bytes,3,opt,name=azure_client_secret,json=azureClientSecret,oneof"`
}
type CreateSpecType_GcpCredFile struct {
	GcpCredFile *GCPCredFileType `protobuf:"bytes,4,opt,name=gcp_cred_file,json=gcpCredFile,oneof"`
}

func (*CreateSpecType_AwsSecretKey) isCreateSpecType_Cloud()        {}
func (*CreateSpecType_AzurePfxCertificate) isCreateSpecType_Cloud() {}
func (*CreateSpecType_AzureClientSecret) isCreateSpecType_Cloud()   {}
func (*CreateSpecType_GcpCredFile) isCreateSpecType_Cloud()         {}

func (m *CreateSpecType) GetCloud() isCreateSpecType_Cloud {
	if m != nil {
		return m.Cloud
	}
	return nil
}

func (m *CreateSpecType) GetAwsSecretKey() *AWSSecretType {
	if x, ok := m.GetCloud().(*CreateSpecType_AwsSecretKey); ok {
		return x.AwsSecretKey
	}
	return nil
}

func (m *CreateSpecType) GetAzurePfxCertificate() *AzurePfxType {
	if x, ok := m.GetCloud().(*CreateSpecType_AzurePfxCertificate); ok {
		return x.AzurePfxCertificate
	}
	return nil
}

func (m *CreateSpecType) GetAzureClientSecret() *AzureSecretType {
	if x, ok := m.GetCloud().(*CreateSpecType_AzureClientSecret); ok {
		return x.AzureClientSecret
	}
	return nil
}

func (m *CreateSpecType) GetGcpCredFile() *GCPCredFileType {
	if x, ok := m.GetCloud().(*CreateSpecType_GcpCredFile); ok {
		return x.GcpCredFile
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*CreateSpecType) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _CreateSpecType_OneofMarshaler, _CreateSpecType_OneofUnmarshaler, _CreateSpecType_OneofSizer, []interface{}{
		(*CreateSpecType_AwsSecretKey)(nil),
		(*CreateSpecType_AzurePfxCertificate)(nil),
		(*CreateSpecType_AzureClientSecret)(nil),
		(*CreateSpecType_GcpCredFile)(nil),
	}
}

func _CreateSpecType_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*CreateSpecType)
	// cloud
	switch x := m.Cloud.(type) {
	case *CreateSpecType_AwsSecretKey:
		_ = b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.AwsSecretKey); err != nil {
			return err
		}
	case *CreateSpecType_AzurePfxCertificate:
		_ = b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.AzurePfxCertificate); err != nil {
			return err
		}
	case *CreateSpecType_AzureClientSecret:
		_ = b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.AzureClientSecret); err != nil {
			return err
		}
	case *CreateSpecType_GcpCredFile:
		_ = b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.GcpCredFile); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("CreateSpecType.Cloud has unexpected type %T", x)
	}
	return nil
}

func _CreateSpecType_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*CreateSpecType)
	switch tag {
	case 1: // cloud.aws_secret_key
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(AWSSecretType)
		err := b.DecodeMessage(msg)
		m.Cloud = &CreateSpecType_AwsSecretKey{msg}
		return true, err
	case 2: // cloud.azure_pfx_certificate
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(AzurePfxType)
		err := b.DecodeMessage(msg)
		m.Cloud = &CreateSpecType_AzurePfxCertificate{msg}
		return true, err
	case 3: // cloud.azure_client_secret
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(AzureSecretType)
		err := b.DecodeMessage(msg)
		m.Cloud = &CreateSpecType_AzureClientSecret{msg}
		return true, err
	case 4: // cloud.gcp_cred_file
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(GCPCredFileType)
		err := b.DecodeMessage(msg)
		m.Cloud = &CreateSpecType_GcpCredFile{msg}
		return true, err
	default:
		return false, nil
	}
}

func _CreateSpecType_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*CreateSpecType)
	// cloud
	switch x := m.Cloud.(type) {
	case *CreateSpecType_AwsSecretKey:
		s := proto.Size(x.AwsSecretKey)
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *CreateSpecType_AzurePfxCertificate:
		s := proto.Size(x.AzurePfxCertificate)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *CreateSpecType_AzureClientSecret:
		s := proto.Size(x.AzureClientSecret)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *CreateSpecType_GcpCredFile:
		s := proto.Size(x.GcpCredFile)
		n += proto.SizeVarint(4<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// Replace cloud_credentials
//
// x-displayName: "Replace Cloud Credentials"
// API to replace cloud_credentials object
type ReplaceSpecType struct {
	// Types that are valid to be assigned to Cloud:
	//	*ReplaceSpecType_AwsSecretKey
	//	*ReplaceSpecType_AzurePfxCertificate
	//	*ReplaceSpecType_AzureClientSecret
	//	*ReplaceSpecType_GcpCredFile
	Cloud isReplaceSpecType_Cloud `protobuf_oneof:"cloud"`
}

func (m *ReplaceSpecType) Reset()                    { *m = ReplaceSpecType{} }
func (*ReplaceSpecType) ProtoMessage()               {}
func (*ReplaceSpecType) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{6} }

type isReplaceSpecType_Cloud interface {
	isReplaceSpecType_Cloud()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type ReplaceSpecType_AwsSecretKey struct {
	AwsSecretKey *AWSSecretType `protobuf:"bytes,1,opt,name=aws_secret_key,json=awsSecretKey,oneof"`
}
type ReplaceSpecType_AzurePfxCertificate struct {
	AzurePfxCertificate *AzurePfxType `protobuf:"bytes,2,opt,name=azure_pfx_certificate,json=azurePfxCertificate,oneof"`
}
type ReplaceSpecType_AzureClientSecret struct {
	AzureClientSecret *AzureSecretType `protobuf:"bytes,3,opt,name=azure_client_secret,json=azureClientSecret,oneof"`
}
type ReplaceSpecType_GcpCredFile struct {
	GcpCredFile *GCPCredFileType `protobuf:"bytes,4,opt,name=gcp_cred_file,json=gcpCredFile,oneof"`
}

func (*ReplaceSpecType_AwsSecretKey) isReplaceSpecType_Cloud()        {}
func (*ReplaceSpecType_AzurePfxCertificate) isReplaceSpecType_Cloud() {}
func (*ReplaceSpecType_AzureClientSecret) isReplaceSpecType_Cloud()   {}
func (*ReplaceSpecType_GcpCredFile) isReplaceSpecType_Cloud()         {}

func (m *ReplaceSpecType) GetCloud() isReplaceSpecType_Cloud {
	if m != nil {
		return m.Cloud
	}
	return nil
}

func (m *ReplaceSpecType) GetAwsSecretKey() *AWSSecretType {
	if x, ok := m.GetCloud().(*ReplaceSpecType_AwsSecretKey); ok {
		return x.AwsSecretKey
	}
	return nil
}

func (m *ReplaceSpecType) GetAzurePfxCertificate() *AzurePfxType {
	if x, ok := m.GetCloud().(*ReplaceSpecType_AzurePfxCertificate); ok {
		return x.AzurePfxCertificate
	}
	return nil
}

func (m *ReplaceSpecType) GetAzureClientSecret() *AzureSecretType {
	if x, ok := m.GetCloud().(*ReplaceSpecType_AzureClientSecret); ok {
		return x.AzureClientSecret
	}
	return nil
}

func (m *ReplaceSpecType) GetGcpCredFile() *GCPCredFileType {
	if x, ok := m.GetCloud().(*ReplaceSpecType_GcpCredFile); ok {
		return x.GcpCredFile
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*ReplaceSpecType) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _ReplaceSpecType_OneofMarshaler, _ReplaceSpecType_OneofUnmarshaler, _ReplaceSpecType_OneofSizer, []interface{}{
		(*ReplaceSpecType_AwsSecretKey)(nil),
		(*ReplaceSpecType_AzurePfxCertificate)(nil),
		(*ReplaceSpecType_AzureClientSecret)(nil),
		(*ReplaceSpecType_GcpCredFile)(nil),
	}
}

func _ReplaceSpecType_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*ReplaceSpecType)
	// cloud
	switch x := m.Cloud.(type) {
	case *ReplaceSpecType_AwsSecretKey:
		_ = b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.AwsSecretKey); err != nil {
			return err
		}
	case *ReplaceSpecType_AzurePfxCertificate:
		_ = b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.AzurePfxCertificate); err != nil {
			return err
		}
	case *ReplaceSpecType_AzureClientSecret:
		_ = b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.AzureClientSecret); err != nil {
			return err
		}
	case *ReplaceSpecType_GcpCredFile:
		_ = b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.GcpCredFile); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("ReplaceSpecType.Cloud has unexpected type %T", x)
	}
	return nil
}

func _ReplaceSpecType_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*ReplaceSpecType)
	switch tag {
	case 1: // cloud.aws_secret_key
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(AWSSecretType)
		err := b.DecodeMessage(msg)
		m.Cloud = &ReplaceSpecType_AwsSecretKey{msg}
		return true, err
	case 2: // cloud.azure_pfx_certificate
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(AzurePfxType)
		err := b.DecodeMessage(msg)
		m.Cloud = &ReplaceSpecType_AzurePfxCertificate{msg}
		return true, err
	case 3: // cloud.azure_client_secret
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(AzureSecretType)
		err := b.DecodeMessage(msg)
		m.Cloud = &ReplaceSpecType_AzureClientSecret{msg}
		return true, err
	case 4: // cloud.gcp_cred_file
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(GCPCredFileType)
		err := b.DecodeMessage(msg)
		m.Cloud = &ReplaceSpecType_GcpCredFile{msg}
		return true, err
	default:
		return false, nil
	}
}

func _ReplaceSpecType_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*ReplaceSpecType)
	// cloud
	switch x := m.Cloud.(type) {
	case *ReplaceSpecType_AwsSecretKey:
		s := proto.Size(x.AwsSecretKey)
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ReplaceSpecType_AzurePfxCertificate:
		s := proto.Size(x.AzurePfxCertificate)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ReplaceSpecType_AzureClientSecret:
		s := proto.Size(x.AzureClientSecret)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ReplaceSpecType_GcpCredFile:
		s := proto.Size(x.GcpCredFile)
		n += proto.SizeVarint(4<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// Get cloud_credentials
//
// x-displayName: "Get Cloud Credentials"
// API to Get cloud_credentials object
type GetSpecType struct {
	// Types that are valid to be assigned to Cloud:
	//	*GetSpecType_AwsSecretKey
	//	*GetSpecType_AzurePfxCertificate
	//	*GetSpecType_AzureClientSecret
	//	*GetSpecType_GcpCredFile
	Cloud isGetSpecType_Cloud `protobuf_oneof:"cloud"`
}

func (m *GetSpecType) Reset()                    { *m = GetSpecType{} }
func (*GetSpecType) ProtoMessage()               {}
func (*GetSpecType) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{7} }

type isGetSpecType_Cloud interface {
	isGetSpecType_Cloud()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type GetSpecType_AwsSecretKey struct {
	AwsSecretKey *AWSSecretType `protobuf:"bytes,1,opt,name=aws_secret_key,json=awsSecretKey,oneof"`
}
type GetSpecType_AzurePfxCertificate struct {
	AzurePfxCertificate *AzurePfxType `protobuf:"bytes,2,opt,name=azure_pfx_certificate,json=azurePfxCertificate,oneof"`
}
type GetSpecType_AzureClientSecret struct {
	AzureClientSecret *AzureSecretType `protobuf:"bytes,3,opt,name=azure_client_secret,json=azureClientSecret,oneof"`
}
type GetSpecType_GcpCredFile struct {
	GcpCredFile *GCPCredFileType `protobuf:"bytes,4,opt,name=gcp_cred_file,json=gcpCredFile,oneof"`
}

func (*GetSpecType_AwsSecretKey) isGetSpecType_Cloud()        {}
func (*GetSpecType_AzurePfxCertificate) isGetSpecType_Cloud() {}
func (*GetSpecType_AzureClientSecret) isGetSpecType_Cloud()   {}
func (*GetSpecType_GcpCredFile) isGetSpecType_Cloud()         {}

func (m *GetSpecType) GetCloud() isGetSpecType_Cloud {
	if m != nil {
		return m.Cloud
	}
	return nil
}

func (m *GetSpecType) GetAwsSecretKey() *AWSSecretType {
	if x, ok := m.GetCloud().(*GetSpecType_AwsSecretKey); ok {
		return x.AwsSecretKey
	}
	return nil
}

func (m *GetSpecType) GetAzurePfxCertificate() *AzurePfxType {
	if x, ok := m.GetCloud().(*GetSpecType_AzurePfxCertificate); ok {
		return x.AzurePfxCertificate
	}
	return nil
}

func (m *GetSpecType) GetAzureClientSecret() *AzureSecretType {
	if x, ok := m.GetCloud().(*GetSpecType_AzureClientSecret); ok {
		return x.AzureClientSecret
	}
	return nil
}

func (m *GetSpecType) GetGcpCredFile() *GCPCredFileType {
	if x, ok := m.GetCloud().(*GetSpecType_GcpCredFile); ok {
		return x.GcpCredFile
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*GetSpecType) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _GetSpecType_OneofMarshaler, _GetSpecType_OneofUnmarshaler, _GetSpecType_OneofSizer, []interface{}{
		(*GetSpecType_AwsSecretKey)(nil),
		(*GetSpecType_AzurePfxCertificate)(nil),
		(*GetSpecType_AzureClientSecret)(nil),
		(*GetSpecType_GcpCredFile)(nil),
	}
}

func _GetSpecType_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*GetSpecType)
	// cloud
	switch x := m.Cloud.(type) {
	case *GetSpecType_AwsSecretKey:
		_ = b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.AwsSecretKey); err != nil {
			return err
		}
	case *GetSpecType_AzurePfxCertificate:
		_ = b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.AzurePfxCertificate); err != nil {
			return err
		}
	case *GetSpecType_AzureClientSecret:
		_ = b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.AzureClientSecret); err != nil {
			return err
		}
	case *GetSpecType_GcpCredFile:
		_ = b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.GcpCredFile); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("GetSpecType.Cloud has unexpected type %T", x)
	}
	return nil
}

func _GetSpecType_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*GetSpecType)
	switch tag {
	case 1: // cloud.aws_secret_key
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(AWSSecretType)
		err := b.DecodeMessage(msg)
		m.Cloud = &GetSpecType_AwsSecretKey{msg}
		return true, err
	case 2: // cloud.azure_pfx_certificate
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(AzurePfxType)
		err := b.DecodeMessage(msg)
		m.Cloud = &GetSpecType_AzurePfxCertificate{msg}
		return true, err
	case 3: // cloud.azure_client_secret
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(AzureSecretType)
		err := b.DecodeMessage(msg)
		m.Cloud = &GetSpecType_AzureClientSecret{msg}
		return true, err
	case 4: // cloud.gcp_cred_file
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(GCPCredFileType)
		err := b.DecodeMessage(msg)
		m.Cloud = &GetSpecType_GcpCredFile{msg}
		return true, err
	default:
		return false, nil
	}
}

func _GetSpecType_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*GetSpecType)
	// cloud
	switch x := m.Cloud.(type) {
	case *GetSpecType_AwsSecretKey:
		s := proto.Size(x.AwsSecretKey)
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *GetSpecType_AzurePfxCertificate:
		s := proto.Size(x.AzurePfxCertificate)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *GetSpecType_AzureClientSecret:
		s := proto.Size(x.AzureClientSecret)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *GetSpecType_GcpCredFile:
		s := proto.Size(x.GcpCredFile)
		n += proto.SizeVarint(4<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

func init() {
	proto.RegisterType((*AWSSecretType)(nil), "ves.io.schema.cloud_credentials.AWSSecretType")
	golang_proto.RegisterType((*AWSSecretType)(nil), "ves.io.schema.cloud_credentials.AWSSecretType")
	proto.RegisterType((*AzurePfxType)(nil), "ves.io.schema.cloud_credentials.AzurePfxType")
	golang_proto.RegisterType((*AzurePfxType)(nil), "ves.io.schema.cloud_credentials.AzurePfxType")
	proto.RegisterType((*AzureSecretType)(nil), "ves.io.schema.cloud_credentials.AzureSecretType")
	golang_proto.RegisterType((*AzureSecretType)(nil), "ves.io.schema.cloud_credentials.AzureSecretType")
	proto.RegisterType((*GCPCredFileType)(nil), "ves.io.schema.cloud_credentials.GCPCredFileType")
	golang_proto.RegisterType((*GCPCredFileType)(nil), "ves.io.schema.cloud_credentials.GCPCredFileType")
	proto.RegisterType((*GlobalSpecType)(nil), "ves.io.schema.cloud_credentials.GlobalSpecType")
	golang_proto.RegisterType((*GlobalSpecType)(nil), "ves.io.schema.cloud_credentials.GlobalSpecType")
	proto.RegisterType((*CreateSpecType)(nil), "ves.io.schema.cloud_credentials.CreateSpecType")
	golang_proto.RegisterType((*CreateSpecType)(nil), "ves.io.schema.cloud_credentials.CreateSpecType")
	proto.RegisterType((*ReplaceSpecType)(nil), "ves.io.schema.cloud_credentials.ReplaceSpecType")
	golang_proto.RegisterType((*ReplaceSpecType)(nil), "ves.io.schema.cloud_credentials.ReplaceSpecType")
	proto.RegisterType((*GetSpecType)(nil), "ves.io.schema.cloud_credentials.GetSpecType")
	golang_proto.RegisterType((*GetSpecType)(nil), "ves.io.schema.cloud_credentials.GetSpecType")
}
func (this *AWSSecretType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AWSSecretType)
	if !ok {
		that2, ok := that.(AWSSecretType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.AccessKey != that1.AccessKey {
		return false
	}
	if !this.SecretKey.Equal(that1.SecretKey) {
		return false
	}
	return true
}
func (this *AzurePfxType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AzurePfxType)
	if !ok {
		that2, ok := that.(AzurePfxType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ClientId != that1.ClientId {
		return false
	}
	if this.SubscriptionId != that1.SubscriptionId {
		return false
	}
	if this.TenantId != that1.TenantId {
		return false
	}
	if this.CertificateUrl != that1.CertificateUrl {
		return false
	}
	if !this.Password.Equal(that1.Password) {
		return false
	}
	return true
}
func (this *AzureSecretType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AzureSecretType)
	if !ok {
		that2, ok := that.(AzureSecretType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ClientId != that1.ClientId {
		return false
	}
	if this.SubscriptionId != that1.SubscriptionId {
		return false
	}
	if this.TenantId != that1.TenantId {
		return false
	}
	if !this.ClientSecret.Equal(that1.ClientSecret) {
		return false
	}
	return true
}
func (this *GCPCredFileType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GCPCredFileType)
	if !ok {
		that2, ok := that.(GCPCredFileType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.CredentialFile.Equal(that1.CredentialFile) {
		return false
	}
	return true
}
func (this *GlobalSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType)
	if !ok {
		that2, ok := that.(GlobalSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.Cloud == nil {
		if this.Cloud != nil {
			return false
		}
	} else if this.Cloud == nil {
		return false
	} else if !this.Cloud.Equal(that1.Cloud) {
		return false
	}
	return true
}
func (this *GlobalSpecType_AwsSecretKey) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_AwsSecretKey)
	if !ok {
		that2, ok := that.(GlobalSpecType_AwsSecretKey)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AwsSecretKey.Equal(that1.AwsSecretKey) {
		return false
	}
	return true
}
func (this *GlobalSpecType_AzurePfxCertificate) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_AzurePfxCertificate)
	if !ok {
		that2, ok := that.(GlobalSpecType_AzurePfxCertificate)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AzurePfxCertificate.Equal(that1.AzurePfxCertificate) {
		return false
	}
	return true
}
func (this *GlobalSpecType_AzureClientSecret) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_AzureClientSecret)
	if !ok {
		that2, ok := that.(GlobalSpecType_AzureClientSecret)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AzureClientSecret.Equal(that1.AzureClientSecret) {
		return false
	}
	return true
}
func (this *GlobalSpecType_GcpCredFile) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_GcpCredFile)
	if !ok {
		that2, ok := that.(GlobalSpecType_GcpCredFile)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.GcpCredFile.Equal(that1.GcpCredFile) {
		return false
	}
	return true
}
func (this *CreateSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType)
	if !ok {
		that2, ok := that.(CreateSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.Cloud == nil {
		if this.Cloud != nil {
			return false
		}
	} else if this.Cloud == nil {
		return false
	} else if !this.Cloud.Equal(that1.Cloud) {
		return false
	}
	return true
}
func (this *CreateSpecType_AwsSecretKey) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_AwsSecretKey)
	if !ok {
		that2, ok := that.(CreateSpecType_AwsSecretKey)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AwsSecretKey.Equal(that1.AwsSecretKey) {
		return false
	}
	return true
}
func (this *CreateSpecType_AzurePfxCertificate) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_AzurePfxCertificate)
	if !ok {
		that2, ok := that.(CreateSpecType_AzurePfxCertificate)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AzurePfxCertificate.Equal(that1.AzurePfxCertificate) {
		return false
	}
	return true
}
func (this *CreateSpecType_AzureClientSecret) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_AzureClientSecret)
	if !ok {
		that2, ok := that.(CreateSpecType_AzureClientSecret)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AzureClientSecret.Equal(that1.AzureClientSecret) {
		return false
	}
	return true
}
func (this *CreateSpecType_GcpCredFile) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_GcpCredFile)
	if !ok {
		that2, ok := that.(CreateSpecType_GcpCredFile)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.GcpCredFile.Equal(that1.GcpCredFile) {
		return false
	}
	return true
}
func (this *ReplaceSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType)
	if !ok {
		that2, ok := that.(ReplaceSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.Cloud == nil {
		if this.Cloud != nil {
			return false
		}
	} else if this.Cloud == nil {
		return false
	} else if !this.Cloud.Equal(that1.Cloud) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_AwsSecretKey) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_AwsSecretKey)
	if !ok {
		that2, ok := that.(ReplaceSpecType_AwsSecretKey)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AwsSecretKey.Equal(that1.AwsSecretKey) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_AzurePfxCertificate) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_AzurePfxCertificate)
	if !ok {
		that2, ok := that.(ReplaceSpecType_AzurePfxCertificate)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AzurePfxCertificate.Equal(that1.AzurePfxCertificate) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_AzureClientSecret) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_AzureClientSecret)
	if !ok {
		that2, ok := that.(ReplaceSpecType_AzureClientSecret)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AzureClientSecret.Equal(that1.AzureClientSecret) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_GcpCredFile) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_GcpCredFile)
	if !ok {
		that2, ok := that.(ReplaceSpecType_GcpCredFile)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.GcpCredFile.Equal(that1.GcpCredFile) {
		return false
	}
	return true
}
func (this *GetSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType)
	if !ok {
		that2, ok := that.(GetSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.Cloud == nil {
		if this.Cloud != nil {
			return false
		}
	} else if this.Cloud == nil {
		return false
	} else if !this.Cloud.Equal(that1.Cloud) {
		return false
	}
	return true
}
func (this *GetSpecType_AwsSecretKey) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_AwsSecretKey)
	if !ok {
		that2, ok := that.(GetSpecType_AwsSecretKey)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AwsSecretKey.Equal(that1.AwsSecretKey) {
		return false
	}
	return true
}
func (this *GetSpecType_AzurePfxCertificate) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_AzurePfxCertificate)
	if !ok {
		that2, ok := that.(GetSpecType_AzurePfxCertificate)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AzurePfxCertificate.Equal(that1.AzurePfxCertificate) {
		return false
	}
	return true
}
func (this *GetSpecType_AzureClientSecret) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_AzureClientSecret)
	if !ok {
		that2, ok := that.(GetSpecType_AzureClientSecret)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AzureClientSecret.Equal(that1.AzureClientSecret) {
		return false
	}
	return true
}
func (this *GetSpecType_GcpCredFile) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_GcpCredFile)
	if !ok {
		that2, ok := that.(GetSpecType_GcpCredFile)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.GcpCredFile.Equal(that1.GcpCredFile) {
		return false
	}
	return true
}
func (this *AWSSecretType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&cloud_credentials.AWSSecretType{")
	s = append(s, "AccessKey: "+fmt.Sprintf("%#v", this.AccessKey)+",\n")
	if this.SecretKey != nil {
		s = append(s, "SecretKey: "+fmt.Sprintf("%#v", this.SecretKey)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AzurePfxType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&cloud_credentials.AzurePfxType{")
	s = append(s, "ClientId: "+fmt.Sprintf("%#v", this.ClientId)+",\n")
	s = append(s, "SubscriptionId: "+fmt.Sprintf("%#v", this.SubscriptionId)+",\n")
	s = append(s, "TenantId: "+fmt.Sprintf("%#v", this.TenantId)+",\n")
	s = append(s, "CertificateUrl: "+fmt.Sprintf("%#v", this.CertificateUrl)+",\n")
	if this.Password != nil {
		s = append(s, "Password: "+fmt.Sprintf("%#v", this.Password)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AzureSecretType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&cloud_credentials.AzureSecretType{")
	s = append(s, "ClientId: "+fmt.Sprintf("%#v", this.ClientId)+",\n")
	s = append(s, "SubscriptionId: "+fmt.Sprintf("%#v", this.SubscriptionId)+",\n")
	s = append(s, "TenantId: "+fmt.Sprintf("%#v", this.TenantId)+",\n")
	if this.ClientSecret != nil {
		s = append(s, "ClientSecret: "+fmt.Sprintf("%#v", this.ClientSecret)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GCPCredFileType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&cloud_credentials.GCPCredFileType{")
	if this.CredentialFile != nil {
		s = append(s, "CredentialFile: "+fmt.Sprintf("%#v", this.CredentialFile)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GlobalSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&cloud_credentials.GlobalSpecType{")
	if this.Cloud != nil {
		s = append(s, "Cloud: "+fmt.Sprintf("%#v", this.Cloud)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GlobalSpecType_AwsSecretKey) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&cloud_credentials.GlobalSpecType_AwsSecretKey{` +
		`AwsSecretKey:` + fmt.Sprintf("%#v", this.AwsSecretKey) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_AzurePfxCertificate) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&cloud_credentials.GlobalSpecType_AzurePfxCertificate{` +
		`AzurePfxCertificate:` + fmt.Sprintf("%#v", this.AzurePfxCertificate) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_AzureClientSecret) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&cloud_credentials.GlobalSpecType_AzureClientSecret{` +
		`AzureClientSecret:` + fmt.Sprintf("%#v", this.AzureClientSecret) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_GcpCredFile) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&cloud_credentials.GlobalSpecType_GcpCredFile{` +
		`GcpCredFile:` + fmt.Sprintf("%#v", this.GcpCredFile) + `}`}, ", ")
	return s
}
func (this *CreateSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&cloud_credentials.CreateSpecType{")
	if this.Cloud != nil {
		s = append(s, "Cloud: "+fmt.Sprintf("%#v", this.Cloud)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CreateSpecType_AwsSecretKey) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&cloud_credentials.CreateSpecType_AwsSecretKey{` +
		`AwsSecretKey:` + fmt.Sprintf("%#v", this.AwsSecretKey) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_AzurePfxCertificate) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&cloud_credentials.CreateSpecType_AzurePfxCertificate{` +
		`AzurePfxCertificate:` + fmt.Sprintf("%#v", this.AzurePfxCertificate) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_AzureClientSecret) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&cloud_credentials.CreateSpecType_AzureClientSecret{` +
		`AzureClientSecret:` + fmt.Sprintf("%#v", this.AzureClientSecret) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_GcpCredFile) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&cloud_credentials.CreateSpecType_GcpCredFile{` +
		`GcpCredFile:` + fmt.Sprintf("%#v", this.GcpCredFile) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&cloud_credentials.ReplaceSpecType{")
	if this.Cloud != nil {
		s = append(s, "Cloud: "+fmt.Sprintf("%#v", this.Cloud)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ReplaceSpecType_AwsSecretKey) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&cloud_credentials.ReplaceSpecType_AwsSecretKey{` +
		`AwsSecretKey:` + fmt.Sprintf("%#v", this.AwsSecretKey) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_AzurePfxCertificate) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&cloud_credentials.ReplaceSpecType_AzurePfxCertificate{` +
		`AzurePfxCertificate:` + fmt.Sprintf("%#v", this.AzurePfxCertificate) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_AzureClientSecret) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&cloud_credentials.ReplaceSpecType_AzureClientSecret{` +
		`AzureClientSecret:` + fmt.Sprintf("%#v", this.AzureClientSecret) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_GcpCredFile) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&cloud_credentials.ReplaceSpecType_GcpCredFile{` +
		`GcpCredFile:` + fmt.Sprintf("%#v", this.GcpCredFile) + `}`}, ", ")
	return s
}
func (this *GetSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&cloud_credentials.GetSpecType{")
	if this.Cloud != nil {
		s = append(s, "Cloud: "+fmt.Sprintf("%#v", this.Cloud)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetSpecType_AwsSecretKey) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&cloud_credentials.GetSpecType_AwsSecretKey{` +
		`AwsSecretKey:` + fmt.Sprintf("%#v", this.AwsSecretKey) + `}`}, ", ")
	return s
}
func (this *GetSpecType_AzurePfxCertificate) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&cloud_credentials.GetSpecType_AzurePfxCertificate{` +
		`AzurePfxCertificate:` + fmt.Sprintf("%#v", this.AzurePfxCertificate) + `}`}, ", ")
	return s
}
func (this *GetSpecType_AzureClientSecret) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&cloud_credentials.GetSpecType_AzureClientSecret{` +
		`AzureClientSecret:` + fmt.Sprintf("%#v", this.AzureClientSecret) + `}`}, ", ")
	return s
}
func (this *GetSpecType_GcpCredFile) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&cloud_credentials.GetSpecType_GcpCredFile{` +
		`GcpCredFile:` + fmt.Sprintf("%#v", this.GcpCredFile) + `}`}, ", ")
	return s
}
func valueToGoStringTypes(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *AWSSecretType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AWSSecretType) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.AccessKey) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTypes(dAtA, i, uint64(len(m.AccessKey)))
		i += copy(dAtA[i:], m.AccessKey)
	}
	if m.SecretKey != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.SecretKey.Size()))
		n1, err := m.SecretKey.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	return i, nil
}

func (m *AzurePfxType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AzurePfxType) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ClientId) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTypes(dAtA, i, uint64(len(m.ClientId)))
		i += copy(dAtA[i:], m.ClientId)
	}
	if len(m.SubscriptionId) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTypes(dAtA, i, uint64(len(m.SubscriptionId)))
		i += copy(dAtA[i:], m.SubscriptionId)
	}
	if len(m.TenantId) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(len(m.TenantId)))
		i += copy(dAtA[i:], m.TenantId)
	}
	if len(m.CertificateUrl) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintTypes(dAtA, i, uint64(len(m.CertificateUrl)))
		i += copy(dAtA[i:], m.CertificateUrl)
	}
	if m.Password != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.Password.Size()))
		n2, err := m.Password.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	return i, nil
}

func (m *AzureSecretType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AzureSecretType) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ClientId) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTypes(dAtA, i, uint64(len(m.ClientId)))
		i += copy(dAtA[i:], m.ClientId)
	}
	if len(m.SubscriptionId) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTypes(dAtA, i, uint64(len(m.SubscriptionId)))
		i += copy(dAtA[i:], m.SubscriptionId)
	}
	if len(m.TenantId) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(len(m.TenantId)))
		i += copy(dAtA[i:], m.TenantId)
	}
	if m.ClientSecret != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.ClientSecret.Size()))
		n3, err := m.ClientSecret.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	return i, nil
}

func (m *GCPCredFileType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GCPCredFileType) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.CredentialFile != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.CredentialFile.Size()))
		n4, err := m.CredentialFile.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	return i, nil
}

func (m *GlobalSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GlobalSpecType) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Cloud != nil {
		nn5, err := m.Cloud.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn5
	}
	return i, nil
}

func (m *GlobalSpecType_AwsSecretKey) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.AwsSecretKey != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.AwsSecretKey.Size()))
		n6, err := m.AwsSecretKey.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	return i, nil
}
func (m *GlobalSpecType_AzurePfxCertificate) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.AzurePfxCertificate != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.AzurePfxCertificate.Size()))
		n7, err := m.AzurePfxCertificate.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	return i, nil
}
func (m *GlobalSpecType_AzureClientSecret) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.AzureClientSecret != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.AzureClientSecret.Size()))
		n8, err := m.AzureClientSecret.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n8
	}
	return i, nil
}
func (m *GlobalSpecType_GcpCredFile) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.GcpCredFile != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.GcpCredFile.Size()))
		n9, err := m.GcpCredFile.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n9
	}
	return i, nil
}
func (m *CreateSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateSpecType) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Cloud != nil {
		nn10, err := m.Cloud.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn10
	}
	return i, nil
}

func (m *CreateSpecType_AwsSecretKey) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.AwsSecretKey != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.AwsSecretKey.Size()))
		n11, err := m.AwsSecretKey.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n11
	}
	return i, nil
}
func (m *CreateSpecType_AzurePfxCertificate) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.AzurePfxCertificate != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.AzurePfxCertificate.Size()))
		n12, err := m.AzurePfxCertificate.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n12
	}
	return i, nil
}
func (m *CreateSpecType_AzureClientSecret) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.AzureClientSecret != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.AzureClientSecret.Size()))
		n13, err := m.AzureClientSecret.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n13
	}
	return i, nil
}
func (m *CreateSpecType_GcpCredFile) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.GcpCredFile != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.GcpCredFile.Size()))
		n14, err := m.GcpCredFile.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n14
	}
	return i, nil
}
func (m *ReplaceSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplaceSpecType) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Cloud != nil {
		nn15, err := m.Cloud.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn15
	}
	return i, nil
}

func (m *ReplaceSpecType_AwsSecretKey) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.AwsSecretKey != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.AwsSecretKey.Size()))
		n16, err := m.AwsSecretKey.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n16
	}
	return i, nil
}
func (m *ReplaceSpecType_AzurePfxCertificate) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.AzurePfxCertificate != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.AzurePfxCertificate.Size()))
		n17, err := m.AzurePfxCertificate.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n17
	}
	return i, nil
}
func (m *ReplaceSpecType_AzureClientSecret) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.AzureClientSecret != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.AzureClientSecret.Size()))
		n18, err := m.AzureClientSecret.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n18
	}
	return i, nil
}
func (m *ReplaceSpecType_GcpCredFile) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.GcpCredFile != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.GcpCredFile.Size()))
		n19, err := m.GcpCredFile.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n19
	}
	return i, nil
}
func (m *GetSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetSpecType) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Cloud != nil {
		nn20, err := m.Cloud.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn20
	}
	return i, nil
}

func (m *GetSpecType_AwsSecretKey) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.AwsSecretKey != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.AwsSecretKey.Size()))
		n21, err := m.AwsSecretKey.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n21
	}
	return i, nil
}
func (m *GetSpecType_AzurePfxCertificate) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.AzurePfxCertificate != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.AzurePfxCertificate.Size()))
		n22, err := m.AzurePfxCertificate.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n22
	}
	return i, nil
}
func (m *GetSpecType_AzureClientSecret) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.AzureClientSecret != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.AzureClientSecret.Size()))
		n23, err := m.AzureClientSecret.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n23
	}
	return i, nil
}
func (m *GetSpecType_GcpCredFile) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.GcpCredFile != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.GcpCredFile.Size()))
		n24, err := m.GcpCredFile.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n24
	}
	return i, nil
}
func encodeVarintTypes(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *AWSSecretType) Size() (n int) {
	var l int
	_ = l
	l = len(m.AccessKey)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.SecretKey != nil {
		l = m.SecretKey.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *AzurePfxType) Size() (n int) {
	var l int
	_ = l
	l = len(m.ClientId)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.SubscriptionId)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.TenantId)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.CertificateUrl)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.Password != nil {
		l = m.Password.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *AzureSecretType) Size() (n int) {
	var l int
	_ = l
	l = len(m.ClientId)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.SubscriptionId)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.TenantId)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.ClientSecret != nil {
		l = m.ClientSecret.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *GCPCredFileType) Size() (n int) {
	var l int
	_ = l
	if m.CredentialFile != nil {
		l = m.CredentialFile.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *GlobalSpecType) Size() (n int) {
	var l int
	_ = l
	if m.Cloud != nil {
		n += m.Cloud.Size()
	}
	return n
}

func (m *GlobalSpecType_AwsSecretKey) Size() (n int) {
	var l int
	_ = l
	if m.AwsSecretKey != nil {
		l = m.AwsSecretKey.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_AzurePfxCertificate) Size() (n int) {
	var l int
	_ = l
	if m.AzurePfxCertificate != nil {
		l = m.AzurePfxCertificate.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_AzureClientSecret) Size() (n int) {
	var l int
	_ = l
	if m.AzureClientSecret != nil {
		l = m.AzureClientSecret.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_GcpCredFile) Size() (n int) {
	var l int
	_ = l
	if m.GcpCredFile != nil {
		l = m.GcpCredFile.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType) Size() (n int) {
	var l int
	_ = l
	if m.Cloud != nil {
		n += m.Cloud.Size()
	}
	return n
}

func (m *CreateSpecType_AwsSecretKey) Size() (n int) {
	var l int
	_ = l
	if m.AwsSecretKey != nil {
		l = m.AwsSecretKey.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_AzurePfxCertificate) Size() (n int) {
	var l int
	_ = l
	if m.AzurePfxCertificate != nil {
		l = m.AzurePfxCertificate.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_AzureClientSecret) Size() (n int) {
	var l int
	_ = l
	if m.AzureClientSecret != nil {
		l = m.AzureClientSecret.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_GcpCredFile) Size() (n int) {
	var l int
	_ = l
	if m.GcpCredFile != nil {
		l = m.GcpCredFile.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType) Size() (n int) {
	var l int
	_ = l
	if m.Cloud != nil {
		n += m.Cloud.Size()
	}
	return n
}

func (m *ReplaceSpecType_AwsSecretKey) Size() (n int) {
	var l int
	_ = l
	if m.AwsSecretKey != nil {
		l = m.AwsSecretKey.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_AzurePfxCertificate) Size() (n int) {
	var l int
	_ = l
	if m.AzurePfxCertificate != nil {
		l = m.AzurePfxCertificate.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_AzureClientSecret) Size() (n int) {
	var l int
	_ = l
	if m.AzureClientSecret != nil {
		l = m.AzureClientSecret.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_GcpCredFile) Size() (n int) {
	var l int
	_ = l
	if m.GcpCredFile != nil {
		l = m.GcpCredFile.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType) Size() (n int) {
	var l int
	_ = l
	if m.Cloud != nil {
		n += m.Cloud.Size()
	}
	return n
}

func (m *GetSpecType_AwsSecretKey) Size() (n int) {
	var l int
	_ = l
	if m.AwsSecretKey != nil {
		l = m.AwsSecretKey.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_AzurePfxCertificate) Size() (n int) {
	var l int
	_ = l
	if m.AzurePfxCertificate != nil {
		l = m.AzurePfxCertificate.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_AzureClientSecret) Size() (n int) {
	var l int
	_ = l
	if m.AzureClientSecret != nil {
		l = m.AzureClientSecret.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_GcpCredFile) Size() (n int) {
	var l int
	_ = l
	if m.GcpCredFile != nil {
		l = m.GcpCredFile.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func sovTypes(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozTypes(x uint64) (n int) {
	return sovTypes(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *AWSSecretType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AWSSecretType{`,
		`AccessKey:` + fmt.Sprintf("%v", this.AccessKey) + `,`,
		`SecretKey:` + strings.Replace(fmt.Sprintf("%v", this.SecretKey), "SecretType", "ves_io_schema4.SecretType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AzurePfxType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AzurePfxType{`,
		`ClientId:` + fmt.Sprintf("%v", this.ClientId) + `,`,
		`SubscriptionId:` + fmt.Sprintf("%v", this.SubscriptionId) + `,`,
		`TenantId:` + fmt.Sprintf("%v", this.TenantId) + `,`,
		`CertificateUrl:` + fmt.Sprintf("%v", this.CertificateUrl) + `,`,
		`Password:` + strings.Replace(fmt.Sprintf("%v", this.Password), "SecretType", "ves_io_schema4.SecretType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AzureSecretType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AzureSecretType{`,
		`ClientId:` + fmt.Sprintf("%v", this.ClientId) + `,`,
		`SubscriptionId:` + fmt.Sprintf("%v", this.SubscriptionId) + `,`,
		`TenantId:` + fmt.Sprintf("%v", this.TenantId) + `,`,
		`ClientSecret:` + strings.Replace(fmt.Sprintf("%v", this.ClientSecret), "SecretType", "ves_io_schema4.SecretType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GCPCredFileType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GCPCredFileType{`,
		`CredentialFile:` + strings.Replace(fmt.Sprintf("%v", this.CredentialFile), "SecretType", "ves_io_schema4.SecretType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType{`,
		`Cloud:` + fmt.Sprintf("%v", this.Cloud) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_AwsSecretKey) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_AwsSecretKey{`,
		`AwsSecretKey:` + strings.Replace(fmt.Sprintf("%v", this.AwsSecretKey), "AWSSecretType", "AWSSecretType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_AzurePfxCertificate) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_AzurePfxCertificate{`,
		`AzurePfxCertificate:` + strings.Replace(fmt.Sprintf("%v", this.AzurePfxCertificate), "AzurePfxType", "AzurePfxType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_AzureClientSecret) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_AzureClientSecret{`,
		`AzureClientSecret:` + strings.Replace(fmt.Sprintf("%v", this.AzureClientSecret), "AzureSecretType", "AzureSecretType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_GcpCredFile) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_GcpCredFile{`,
		`GcpCredFile:` + strings.Replace(fmt.Sprintf("%v", this.GcpCredFile), "GCPCredFileType", "GCPCredFileType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType{`,
		`Cloud:` + fmt.Sprintf("%v", this.Cloud) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_AwsSecretKey) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_AwsSecretKey{`,
		`AwsSecretKey:` + strings.Replace(fmt.Sprintf("%v", this.AwsSecretKey), "AWSSecretType", "AWSSecretType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_AzurePfxCertificate) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_AzurePfxCertificate{`,
		`AzurePfxCertificate:` + strings.Replace(fmt.Sprintf("%v", this.AzurePfxCertificate), "AzurePfxType", "AzurePfxType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_AzureClientSecret) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_AzureClientSecret{`,
		`AzureClientSecret:` + strings.Replace(fmt.Sprintf("%v", this.AzureClientSecret), "AzureSecretType", "AzureSecretType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_GcpCredFile) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_GcpCredFile{`,
		`GcpCredFile:` + strings.Replace(fmt.Sprintf("%v", this.GcpCredFile), "GCPCredFileType", "GCPCredFileType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType{`,
		`Cloud:` + fmt.Sprintf("%v", this.Cloud) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_AwsSecretKey) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_AwsSecretKey{`,
		`AwsSecretKey:` + strings.Replace(fmt.Sprintf("%v", this.AwsSecretKey), "AWSSecretType", "AWSSecretType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_AzurePfxCertificate) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_AzurePfxCertificate{`,
		`AzurePfxCertificate:` + strings.Replace(fmt.Sprintf("%v", this.AzurePfxCertificate), "AzurePfxType", "AzurePfxType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_AzureClientSecret) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_AzureClientSecret{`,
		`AzureClientSecret:` + strings.Replace(fmt.Sprintf("%v", this.AzureClientSecret), "AzureSecretType", "AzureSecretType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_GcpCredFile) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_GcpCredFile{`,
		`GcpCredFile:` + strings.Replace(fmt.Sprintf("%v", this.GcpCredFile), "GCPCredFileType", "GCPCredFileType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType{`,
		`Cloud:` + fmt.Sprintf("%v", this.Cloud) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_AwsSecretKey) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_AwsSecretKey{`,
		`AwsSecretKey:` + strings.Replace(fmt.Sprintf("%v", this.AwsSecretKey), "AWSSecretType", "AWSSecretType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_AzurePfxCertificate) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_AzurePfxCertificate{`,
		`AzurePfxCertificate:` + strings.Replace(fmt.Sprintf("%v", this.AzurePfxCertificate), "AzurePfxType", "AzurePfxType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_AzureClientSecret) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_AzureClientSecret{`,
		`AzureClientSecret:` + strings.Replace(fmt.Sprintf("%v", this.AzureClientSecret), "AzureSecretType", "AzureSecretType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_GcpCredFile) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_GcpCredFile{`,
		`GcpCredFile:` + strings.Replace(fmt.Sprintf("%v", this.GcpCredFile), "GCPCredFileType", "GCPCredFileType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringTypes(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *AWSSecretType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AWSSecretType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AWSSecretType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AccessKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SecretKey", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SecretKey == nil {
				m.SecretKey = &ves_io_schema4.SecretType{}
			}
			if err := m.SecretKey.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AzurePfxType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AzurePfxType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AzurePfxType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClientId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubscriptionId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SubscriptionId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TenantId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TenantId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CertificateUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CertificateUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Password", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Password == nil {
				m.Password = &ves_io_schema4.SecretType{}
			}
			if err := m.Password.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AzureSecretType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AzureSecretType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AzureSecretType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClientId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubscriptionId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SubscriptionId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TenantId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TenantId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientSecret", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ClientSecret == nil {
				m.ClientSecret = &ves_io_schema4.SecretType{}
			}
			if err := m.ClientSecret.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GCPCredFileType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GCPCredFileType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GCPCredFileType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CredentialFile", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CredentialFile == nil {
				m.CredentialFile = &ves_io_schema4.SecretType{}
			}
			if err := m.CredentialFile.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GlobalSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GlobalSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GlobalSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AwsSecretKey", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &AWSSecretType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Cloud = &GlobalSpecType_AwsSecretKey{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AzurePfxCertificate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &AzurePfxType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Cloud = &GlobalSpecType_AzurePfxCertificate{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AzureClientSecret", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &AzureSecretType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Cloud = &GlobalSpecType_AzureClientSecret{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GcpCredFile", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &GCPCredFileType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Cloud = &GlobalSpecType_GcpCredFile{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AwsSecretKey", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &AWSSecretType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Cloud = &CreateSpecType_AwsSecretKey{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AzurePfxCertificate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &AzurePfxType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Cloud = &CreateSpecType_AzurePfxCertificate{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AzureClientSecret", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &AzureSecretType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Cloud = &CreateSpecType_AzureClientSecret{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GcpCredFile", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &GCPCredFileType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Cloud = &CreateSpecType_GcpCredFile{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplaceSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplaceSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplaceSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AwsSecretKey", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &AWSSecretType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Cloud = &ReplaceSpecType_AwsSecretKey{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AzurePfxCertificate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &AzurePfxType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Cloud = &ReplaceSpecType_AzurePfxCertificate{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AzureClientSecret", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &AzureSecretType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Cloud = &ReplaceSpecType_AzureClientSecret{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GcpCredFile", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &GCPCredFileType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Cloud = &ReplaceSpecType_GcpCredFile{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AwsSecretKey", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &AWSSecretType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Cloud = &GetSpecType_AwsSecretKey{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AzurePfxCertificate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &AzurePfxType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Cloud = &GetSpecType_AzurePfxCertificate{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AzureClientSecret", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &AzureSecretType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Cloud = &GetSpecType_AzureClientSecret{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GcpCredFile", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &GCPCredFileType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Cloud = &GetSpecType_GcpCredFile{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTypes(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthTypes
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipTypes(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthTypes = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTypes   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("ves.io/schema/cloud_credentials/types.proto", fileDescriptorTypes) }
func init() {
	golang_proto.RegisterFile("ves.io/schema/cloud_credentials/types.proto", fileDescriptorTypes)
}

var fileDescriptorTypes = []byte{
	// 812 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x56, 0xbf, 0x8f, 0x1b, 0x45,
	0x14, 0xde, 0x77, 0x6b, 0x1f, 0xe7, 0xb9, 0x3b, 0x9b, 0xdb, 0x08, 0xe4, 0x98, 0xd3, 0x62, 0xb9,
	0x8a, 0xc0, 0xde, 0x25, 0x17, 0x42, 0x61, 0x24, 0x2b, 0x67, 0x23, 0xce, 0x47, 0x9a, 0x68, 0x4d,
	0x82, 0x04, 0xc5, 0x6a, 0x3c, 0x3b, 0xde, 0xac, 0xb2, 0xe7, 0x59, 0xcd, 0xae, 0xed, 0x33, 0x55,
	0x44, 0x41, 0x43, 0x93, 0x3f, 0x83, 0x02, 0x24, 0x68, 0xd9, 0xe6, 0x44, 0x85, 0xa0, 0x71, 0x99,
	0x92, 0xdb, 0x34, 0xd0, 0x45, 0x47, 0x73, 0xa2, 0x42, 0x9e, 0x5d, 0xc7, 0xbb, 0x47, 0x50, 0xdc,
	0x91, 0x48, 0xd7, 0xcd, 0xcc, 0x7b, 0xdf, 0xf7, 0x7e, 0x7c, 0xef, 0x49, 0x83, 0xde, 0x1d, 0x53,
	0x5f, 0x73, 0x98, 0xee, 0x93, 0xfb, 0xf4, 0x08, 0xeb, 0xc4, 0x65, 0x23, 0xcb, 0x24, 0x9c, 0x5a,
	0x74, 0x18, 0x38, 0xd8, 0xf5, 0xf5, 0x60, 0xea, 0x51, 0x5f, 0xf3, 0x38, 0x0b, 0x98, 0xf2, 0x76,
	0xec, 0xac, 0xc5, 0xce, 0xda, 0xbf, 0x9c, 0x2b, 0x0d, 0xdb, 0x09, 0xee, 0x8f, 0xfa, 0x1a, 0x61,
	0x47, 0xba, 0xcd, 0x6c, 0xa6, 0x0b, 0x5c, 0x7f, 0x34, 0x10, 0x37, 0x71, 0x11, 0xa7, 0x98, 0xaf,
	0xf2, 0x56, 0x36, 0x38, 0xf3, 0x02, 0x87, 0x0d, 0x93, 0x60, 0x95, 0xab, 0x59, 0x63, 0x2a, 0x8f,
	0xca, 0x6e, 0xd6, 0x34, 0xc6, 0xae, 0x63, 0xe1, 0x80, 0x26, 0xd6, 0xea, 0x05, 0xab, 0x43, 0x27,
	0x66, 0x86, 0xba, 0xf6, 0x35, 0xa0, 0xed, 0xfd, 0xcf, 0x7a, 0x3d, 0x4a, 0x38, 0x0d, 0x3e, 0x9d,
	0x7a, 0x54, 0x69, 0x20, 0x84, 0x09, 0xa1, 0xbe, 0x6f, 0x3e, 0xa0, 0xd3, 0x32, 0x54, 0xe1, 0x5a,
	0xa1, 0x5d, 0x3c, 0x0f, 0x01, 0x7e, 0xfa, 0xf3, 0x44, 0xce, 0x73, 0xb9, 0xfc, 0x10, 0x8c, 0x42,
	0xec, 0x71, 0x9b, 0x4e, 0x95, 0x16, 0x42, 0xbe, 0x00, 0x0b, 0xf7, 0xb5, 0x2a, 0x5c, 0xdb, 0xdc,
	0xbb, 0xaa, 0x65, 0xbb, 0xb3, 0x64, 0x6f, 0xe7, 0x66, 0x21, 0x80, 0x51, 0x88, 0x21, 0xb7, 0xe9,
	0xb4, 0xb9, 0x7e, 0xd6, 0x92, 0xaf, 0xd7, 0xf7, 0x6a, 0xdf, 0xad, 0xa1, 0xad, 0xfd, 0x2f, 0x47,
	0x9c, 0xde, 0x19, 0x1c, 0x8b, 0x3c, 0xde, 0x41, 0x05, 0xe2, 0x3a, 0x74, 0x18, 0x98, 0x8e, 0x95,
	0xa4, 0xb1, 0x7d, 0x1e, 0x82, 0x34, 0x4f, 0x23, 0xc7, 0xd7, 0xca, 0xb7, 0x8c, 0x8d, 0xd8, 0x7e,
	0x68, 0x29, 0x1f, 0xa0, 0x92, 0x3f, 0xea, 0xfb, 0x84, 0x3b, 0xa2, 0xb8, 0x39, 0x62, 0xed, 0x79,
	0x88, 0x62, 0xda, 0xeb, 0xd0, 0x9a, 0xc7, 0x08, 0xe8, 0x10, 0xc7, 0x31, 0xe4, 0xe7, 0xc6, 0x88,
	0xed, 0x87, 0x96, 0xb2, 0x8f, 0x4a, 0x84, 0xf2, 0xc0, 0x19, 0x38, 0x04, 0x07, 0xd4, 0x1c, 0x71,
	0xb7, 0x9c, 0x13, 0x88, 0xf2, 0x79, 0x08, 0xf2, 0xb3, 0xe6, 0xdc, 0x4a, 0x4e, 0x8f, 0x00, 0x8c,
	0x62, 0x0a, 0x70, 0x97, 0xbb, 0xca, 0x87, 0x68, 0xc3, 0xc3, 0xbe, 0x3f, 0x61, 0xdc, 0x2a, 0xe7,
	0x57, 0xeb, 0xd4, 0x33, 0x40, 0x73, 0xeb, 0xac, 0x55, 0xb8, 0x5e, 0xdf, 0xab, 0xdf, 0xa8, 0xbf,
	0x5f, 0xbf, 0x59, 0xfb, 0x0b, 0x50, 0x49, 0xb4, 0x2b, 0xa5, 0xdc, 0xcb, 0xd6, 0xb1, 0x8f, 0xd0,
	0x76, 0x92, 0x4f, 0x2c, 0xb7, 0xe8, 0xd7, 0x0a, 0x35, 0x6f, 0xc5, 0xa8, 0xf8, 0xbd, 0x89, 0xce,
	0x5a, 0xaf, 0x25, 0x75, 0xd7, 0xbe, 0x40, 0xa5, 0x83, 0xce, 0x9d, 0x0e, 0xa7, 0xd6, 0xc7, 0x8e,
	0x4b, 0x45, 0xd1, 0x5d, 0x54, 0x5a, 0xae, 0x9d, 0x39, 0x70, 0x5c, 0xba, 0xea, 0x10, 0x16, 0x97,
	0xb8, 0x39, 0x5b, 0xed, 0x37, 0x19, 0x15, 0x0f, 0x5c, 0xd6, 0xc7, 0x6e, 0xcf, 0xa3, 0x44, 0x90,
	0xdf, 0x43, 0x45, 0x3c, 0xf1, 0xcd, 0xd4, 0x80, 0x83, 0xe0, 0xd6, 0xb4, 0x17, 0xac, 0xbf, 0x96,
	0xd9, 0xa9, 0xae, 0x64, 0x6c, 0xe1, 0x89, 0xdf, 0x5b, 0x0c, 0xbd, 0x42, 0xd0, 0x1b, 0x78, 0x2e,
	0x9e, 0xe9, 0x0d, 0x8e, 0xcd, 0xd4, 0x90, 0x24, 0xa9, 0x37, 0x5e, 0x4c, 0x9f, 0xda, 0x94, 0xae,
	0x64, 0x5c, 0xc1, 0xc9, 0xbd, 0xb3, 0xe4, 0x52, 0xfa, 0x28, 0x7e, 0x36, 0xb3, 0x22, 0xc8, 0x22,
	0xc4, 0x7b, 0xab, 0x85, 0xc8, 0xd4, 0xb0, 0x23, 0xe8, 0x3a, 0x29, 0x71, 0x94, 0x7b, 0x68, 0xdb,
	0x26, 0x9e, 0xc0, 0xc5, 0xbd, 0xcf, 0xad, 0xc8, 0x7e, 0x41, 0xc6, 0xae, 0x64, 0x6c, 0xda, 0xc4,
	0x5b, 0x3c, 0x35, 0x77, 0x7f, 0x0e, 0xa1, 0x8c, 0xde, 0x44, 0x3b, 0x9d, 0x39, 0xb2, 0xda, 0x59,
	0x22, 0x15, 0xb8, 0xd9, 0xde, 0x45, 0x79, 0xc1, 0xa8, 0x5c, 0x39, 0x09, 0x01, 0x66, 0x21, 0xe4,
	0xa3, 0x10, 0x16, 0x43, 0xf2, 0x49, 0x6e, 0x23, 0xff, 0xfa, 0x7a, 0xed, 0x07, 0x19, 0x15, 0x3b,
	0x9c, 0xe2, 0x80, 0x5e, 0xaa, 0xf9, 0x7f, 0xab, 0xb9, 0xf3, 0x6b, 0xeb, 0xc2, 0x66, 0xb5, 0x95,
	0x85, 0x84, 0x85, 0xaf, 0xfe, 0x86, 0xf8, 0x58, 0xfb, 0x51, 0x46, 0x25, 0x83, 0x7a, 0x2e, 0x26,
	0x97, 0x9a, 0xbd, 0x2a, 0x9a, 0x7d, 0x2f, 0xa3, 0xcd, 0x03, 0x1a, 0x5c, 0xea, 0xf5, 0x6a, 0xe8,
	0xd5, 0xfe, 0x06, 0x66, 0xa7, 0xaa, 0xf4, 0xf8, 0x54, 0x95, 0x9e, 0x9e, 0xaa, 0xf0, 0x30, 0x52,
	0xe1, 0xdb, 0x48, 0x85, 0x5f, 0x22, 0x15, 0x66, 0x91, 0x0a, 0x8f, 0x23, 0x15, 0x7e, 0x8f, 0x54,
	0xf8, 0x23, 0x52, 0xa5, 0xa7, 0x91, 0x0a, 0x8f, 0x9e, 0xa8, 0xd2, 0xc9, 0x13, 0x15, 0x3e, 0xbf,
	0x6b, 0x33, 0xef, 0x81, 0xad, 0x8d, 0x99, 0x1b, 0x50, 0xce, 0xb1, 0x36, 0xf2, 0x75, 0x71, 0x18,
	0x30, 0x7e, 0xd4, 0xf0, 0x38, 0x1b, 0x3b, 0x16, 0xe5, 0x8d, 0x85, 0x59, 0xf7, 0xfa, 0x36, 0xd3,
	0xe9, 0x71, 0x90, 0xfc, 0x3b, 0xff, 0xeb, 0x47, 0xdd, 0x5f, 0x17, 0x9f, 0xd0, 0x1b, 0xff, 0x04,
	0x00, 0x00, 0xff, 0xff, 0xe8, 0x01, 0x9f, 0xc2, 0x7b, 0x0b, 0x00, 0x00,
}
