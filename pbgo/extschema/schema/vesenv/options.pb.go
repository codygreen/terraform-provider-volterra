// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ves.io/schema/vesenv/options.proto

package vesenv

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"
import google_protobuf "github.com/golang/protobuf/protoc-gen-go/descriptor"

import strings "strings"
import reflect "reflect"
import sortkeys "github.com/gogo/protobuf/sortkeys"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// BFSecretInfo is a type used in vesenv package to hold information
// about operator defined secrets in blindfold.
type BFSecretInfo struct {
	// This is the name of the secret_policy.Object
	PolicyName string `protobuf:"bytes,1,opt,name=policy_name,json=policyName,proto3" json:"policy_name,omitempty"`
	// This is the unique number for every configured secret policy
	PolicyId int32 `protobuf:"varint,2,opt,name=policy_id,json=policyId,proto3" json:"policy_id,omitempty"`
	// A distinction is made between gc and non-gc services and jobs since the FQDN
	// to use in secret_policy_rule.Object ClientNameMatcher differs based on location.
	// This is the set of GC services that are allowed access for this secret
	// E.g. for container_registry password this would be 'akar', has to be non-empty
	GcServices []string `protobuf:"bytes,3,rep,name=gc_services,json=gcServices" json:"gc_services,omitempty"`
	// This is the set of non-gc services, if any, that are allowed access for this secret
	// E.g. for container_registry password this would be 'rakar'
	NonGcServices []string `protobuf:"bytes,4,rep,name=non_gc_services,json=nonGcServices" json:"non_gc_services,omitempty"`
	// This is the set of jobs that run on GC, e.g. terraform jobs for view-like sites
	GcJobs []string `protobuf:"bytes,5,rep,name=gc_jobs,json=gcJobs" json:"gc_jobs,omitempty"`
}

func (m *BFSecretInfo) Reset()                    { *m = BFSecretInfo{} }
func (*BFSecretInfo) ProtoMessage()               {}
func (*BFSecretInfo) Descriptor() ([]byte, []int) { return fileDescriptorOptions, []int{0} }

func (m *BFSecretInfo) GetPolicyName() string {
	if m != nil {
		return m.PolicyName
	}
	return ""
}

func (m *BFSecretInfo) GetPolicyId() int32 {
	if m != nil {
		return m.PolicyId
	}
	return 0
}

func (m *BFSecretInfo) GetGcServices() []string {
	if m != nil {
		return m.GcServices
	}
	return nil
}

func (m *BFSecretInfo) GetNonGcServices() []string {
	if m != nil {
		return m.NonGcServices
	}
	return nil
}

func (m *BFSecretInfo) GetGcJobs() []string {
	if m != nil {
		return m.GcJobs
	}
	return nil
}

// BFSecretChoice enumerates all the secrets configured on blindfold by the VES operator
type BFSecretChoice struct {
	// Types that are valid to be assigned to Choice:
	//	*BFSecretChoice_VesContainerRegistryPassword
	//	*BFSecretChoice_VesAlertReceiverSlackUrl
	//	*BFSecretChoice_VesAlertReceiverPagerdutyRoutingKey
	//	*BFSecretChoice_VesAlertReceiverOpsgenieApiKey
	//	*BFSecretChoice_VesTerraformJobViewSite
	Choice isBFSecretChoice_Choice `protobuf_oneof:"choice"`
}

func (m *BFSecretChoice) Reset()                    { *m = BFSecretChoice{} }
func (*BFSecretChoice) ProtoMessage()               {}
func (*BFSecretChoice) Descriptor() ([]byte, []int) { return fileDescriptorOptions, []int{1} }

type isBFSecretChoice_Choice interface {
	isBFSecretChoice_Choice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type BFSecretChoice_VesContainerRegistryPassword struct {
	VesContainerRegistryPassword bool `protobuf:"varint,1,opt,name=ves_container_registry_password,json=vesContainerRegistryPassword,proto3,oneof"`
}
type BFSecretChoice_VesAlertReceiverSlackUrl struct {
	VesAlertReceiverSlackUrl bool `protobuf:"varint,2,opt,name=ves_alert_receiver_slack_url,json=vesAlertReceiverSlackUrl,proto3,oneof"`
}
type BFSecretChoice_VesAlertReceiverPagerdutyRoutingKey struct {
	VesAlertReceiverPagerdutyRoutingKey bool `protobuf:"varint,3,opt,name=ves_alert_receiver_pagerduty_routing_key,json=vesAlertReceiverPagerdutyRoutingKey,proto3,oneof"`
}
type BFSecretChoice_VesAlertReceiverOpsgenieApiKey struct {
	VesAlertReceiverOpsgenieApiKey bool `protobuf:"varint,4,opt,name=ves_alert_receiver_opsgenie_api_key,json=vesAlertReceiverOpsgenieApiKey,proto3,oneof"`
}
type BFSecretChoice_VesTerraformJobViewSite struct {
	VesTerraformJobViewSite bool `protobuf:"varint,5,opt,name=ves_terraform_job_view_site,json=vesTerraformJobViewSite,proto3,oneof"`
}

func (*BFSecretChoice_VesContainerRegistryPassword) isBFSecretChoice_Choice()        {}
func (*BFSecretChoice_VesAlertReceiverSlackUrl) isBFSecretChoice_Choice()            {}
func (*BFSecretChoice_VesAlertReceiverPagerdutyRoutingKey) isBFSecretChoice_Choice() {}
func (*BFSecretChoice_VesAlertReceiverOpsgenieApiKey) isBFSecretChoice_Choice()      {}
func (*BFSecretChoice_VesTerraformJobViewSite) isBFSecretChoice_Choice()             {}

func (m *BFSecretChoice) GetChoice() isBFSecretChoice_Choice {
	if m != nil {
		return m.Choice
	}
	return nil
}

func (m *BFSecretChoice) GetVesContainerRegistryPassword() bool {
	if x, ok := m.GetChoice().(*BFSecretChoice_VesContainerRegistryPassword); ok {
		return x.VesContainerRegistryPassword
	}
	return false
}

func (m *BFSecretChoice) GetVesAlertReceiverSlackUrl() bool {
	if x, ok := m.GetChoice().(*BFSecretChoice_VesAlertReceiverSlackUrl); ok {
		return x.VesAlertReceiverSlackUrl
	}
	return false
}

func (m *BFSecretChoice) GetVesAlertReceiverPagerdutyRoutingKey() bool {
	if x, ok := m.GetChoice().(*BFSecretChoice_VesAlertReceiverPagerdutyRoutingKey); ok {
		return x.VesAlertReceiverPagerdutyRoutingKey
	}
	return false
}

func (m *BFSecretChoice) GetVesAlertReceiverOpsgenieApiKey() bool {
	if x, ok := m.GetChoice().(*BFSecretChoice_VesAlertReceiverOpsgenieApiKey); ok {
		return x.VesAlertReceiverOpsgenieApiKey
	}
	return false
}

func (m *BFSecretChoice) GetVesTerraformJobViewSite() bool {
	if x, ok := m.GetChoice().(*BFSecretChoice_VesTerraformJobViewSite); ok {
		return x.VesTerraformJobViewSite
	}
	return false
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*BFSecretChoice) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _BFSecretChoice_OneofMarshaler, _BFSecretChoice_OneofUnmarshaler, _BFSecretChoice_OneofSizer, []interface{}{
		(*BFSecretChoice_VesContainerRegistryPassword)(nil),
		(*BFSecretChoice_VesAlertReceiverSlackUrl)(nil),
		(*BFSecretChoice_VesAlertReceiverPagerdutyRoutingKey)(nil),
		(*BFSecretChoice_VesAlertReceiverOpsgenieApiKey)(nil),
		(*BFSecretChoice_VesTerraformJobViewSite)(nil),
	}
}

func _BFSecretChoice_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*BFSecretChoice)
	// choice
	switch x := m.Choice.(type) {
	case *BFSecretChoice_VesContainerRegistryPassword:
		t := uint64(0)
		if x.VesContainerRegistryPassword {
			t = 1
		}
		_ = b.EncodeVarint(1<<3 | proto.WireVarint)
		_ = b.EncodeVarint(t)
	case *BFSecretChoice_VesAlertReceiverSlackUrl:
		t := uint64(0)
		if x.VesAlertReceiverSlackUrl {
			t = 1
		}
		_ = b.EncodeVarint(2<<3 | proto.WireVarint)
		_ = b.EncodeVarint(t)
	case *BFSecretChoice_VesAlertReceiverPagerdutyRoutingKey:
		t := uint64(0)
		if x.VesAlertReceiverPagerdutyRoutingKey {
			t = 1
		}
		_ = b.EncodeVarint(3<<3 | proto.WireVarint)
		_ = b.EncodeVarint(t)
	case *BFSecretChoice_VesAlertReceiverOpsgenieApiKey:
		t := uint64(0)
		if x.VesAlertReceiverOpsgenieApiKey {
			t = 1
		}
		_ = b.EncodeVarint(4<<3 | proto.WireVarint)
		_ = b.EncodeVarint(t)
	case *BFSecretChoice_VesTerraformJobViewSite:
		t := uint64(0)
		if x.VesTerraformJobViewSite {
			t = 1
		}
		_ = b.EncodeVarint(5<<3 | proto.WireVarint)
		_ = b.EncodeVarint(t)
	case nil:
	default:
		return fmt.Errorf("BFSecretChoice.Choice has unexpected type %T", x)
	}
	return nil
}

func _BFSecretChoice_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*BFSecretChoice)
	switch tag {
	case 1: // choice.ves_container_registry_password
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.Choice = &BFSecretChoice_VesContainerRegistryPassword{x != 0}
		return true, err
	case 2: // choice.ves_alert_receiver_slack_url
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.Choice = &BFSecretChoice_VesAlertReceiverSlackUrl{x != 0}
		return true, err
	case 3: // choice.ves_alert_receiver_pagerduty_routing_key
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.Choice = &BFSecretChoice_VesAlertReceiverPagerdutyRoutingKey{x != 0}
		return true, err
	case 4: // choice.ves_alert_receiver_opsgenie_api_key
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.Choice = &BFSecretChoice_VesAlertReceiverOpsgenieApiKey{x != 0}
		return true, err
	case 5: // choice.ves_terraform_job_view_site
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.Choice = &BFSecretChoice_VesTerraformJobViewSite{x != 0}
		return true, err
	default:
		return false, nil
	}
}

func _BFSecretChoice_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*BFSecretChoice)
	// choice
	switch x := m.Choice.(type) {
	case *BFSecretChoice_VesContainerRegistryPassword:
		n += proto.SizeVarint(1<<3 | proto.WireVarint)
		n += 1
	case *BFSecretChoice_VesAlertReceiverSlackUrl:
		n += proto.SizeVarint(2<<3 | proto.WireVarint)
		n += 1
	case *BFSecretChoice_VesAlertReceiverPagerdutyRoutingKey:
		n += proto.SizeVarint(3<<3 | proto.WireVarint)
		n += 1
	case *BFSecretChoice_VesAlertReceiverOpsgenieApiKey:
		n += proto.SizeVarint(4<<3 | proto.WireVarint)
		n += 1
	case *BFSecretChoice_VesTerraformJobViewSite:
		n += proto.SizeVarint(5<<3 | proto.WireVarint)
		n += 1
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type ReEncryptSecretItemType struct {
	FieldPath  string `protobuf:"bytes,1,opt,name=field_path,json=fieldPath,proto3" json:"field_path,omitempty"`
	PolicyName string `protobuf:"bytes,2,opt,name=policy_name,json=policyName,proto3" json:"policy_name,omitempty"`
}

func (m *ReEncryptSecretItemType) Reset()                    { *m = ReEncryptSecretItemType{} }
func (*ReEncryptSecretItemType) ProtoMessage()               {}
func (*ReEncryptSecretItemType) Descriptor() ([]byte, []int) { return fileDescriptorOptions, []int{2} }

func (m *ReEncryptSecretItemType) GetFieldPath() string {
	if m != nil {
		return m.FieldPath
	}
	return ""
}

func (m *ReEncryptSecretItemType) GetPolicyName() string {
	if m != nil {
		return m.PolicyName
	}
	return ""
}

type ReEncryptSecretsType struct {
	Items []*ReEncryptSecretItemType `protobuf:"bytes,1,rep,name=items" json:"items,omitempty"`
}

func (m *ReEncryptSecretsType) Reset()                    { *m = ReEncryptSecretsType{} }
func (*ReEncryptSecretsType) ProtoMessage()               {}
func (*ReEncryptSecretsType) Descriptor() ([]byte, []int) { return fileDescriptorOptions, []int{3} }

func (m *ReEncryptSecretsType) GetItems() []*ReEncryptSecretItemType {
	if m != nil {
		return m.Items
	}
	return nil
}

type ServiceSlugInfo struct {
	// As API gateway is programmed. e.g. config (allows for dashes)
	Value  string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	Daemon string `protobuf:"bytes,2,opt,name=daemon,proto3" json:"daemon,omitempty"`
}

func (m *ServiceSlugInfo) Reset()                    { *m = ServiceSlugInfo{} }
func (*ServiceSlugInfo) ProtoMessage()               {}
func (*ServiceSlugInfo) Descriptor() ([]byte, []int) { return fileDescriptorOptions, []int{4} }

func (m *ServiceSlugInfo) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func (m *ServiceSlugInfo) GetDaemon() string {
	if m != nil {
		return m.Daemon
	}
	return ""
}

// SecretSlugChoice enumerates the slug for every public service on the api-gw
// Note: all services (including internal are defined separately in 'message ServiceChoice')
type ServiceSlugChoice struct {
	// Types that are valid to be assigned to Choice:
	//	*ServiceSlugChoice_Alert
	//	*ServiceSlugChoice_Config
	//	*ServiceSlugChoice_Data
	//	*ServiceSlugChoice_Infraprotect
	//	*ServiceSlugChoice_Kms
	//	*ServiceSlugChoice_Ml
	//	*ServiceSlugChoice_Operate
	//	*ServiceSlugChoice_Register
	//	*ServiceSlugChoice_SecretManagement
	//	*ServiceSlugChoice_Terraform
	//	*ServiceSlugChoice_Tpm
	//	*ServiceSlugChoice_Uam
	//	*ServiceSlugChoice_Web
	Choice isServiceSlugChoice_Choice `protobuf_oneof:"choice"`
}

func (m *ServiceSlugChoice) Reset()                    { *m = ServiceSlugChoice{} }
func (*ServiceSlugChoice) ProtoMessage()               {}
func (*ServiceSlugChoice) Descriptor() ([]byte, []int) { return fileDescriptorOptions, []int{5} }

type isServiceSlugChoice_Choice interface {
	isServiceSlugChoice_Choice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type ServiceSlugChoice_Alert struct {
	Alert bool `protobuf:"varint,1,opt,name=alert,proto3,oneof"`
}
type ServiceSlugChoice_Config struct {
	Config bool `protobuf:"varint,2,opt,name=config,proto3,oneof"`
}
type ServiceSlugChoice_Data struct {
	Data bool `protobuf:"varint,3,opt,name=data,proto3,oneof"`
}
type ServiceSlugChoice_Infraprotect struct {
	Infraprotect bool `protobuf:"varint,4,opt,name=infraprotect,proto3,oneof"`
}
type ServiceSlugChoice_Kms struct {
	Kms bool `protobuf:"varint,5,opt,name=kms,proto3,oneof"`
}
type ServiceSlugChoice_Ml struct {
	Ml bool `protobuf:"varint,6,opt,name=ml,proto3,oneof"`
}
type ServiceSlugChoice_Operate struct {
	Operate bool `protobuf:"varint,7,opt,name=operate,proto3,oneof"`
}
type ServiceSlugChoice_Register struct {
	Register bool `protobuf:"varint,8,opt,name=register,proto3,oneof"`
}
type ServiceSlugChoice_SecretManagement struct {
	SecretManagement bool `protobuf:"varint,9,opt,name=secret_management,json=secretManagement,proto3,oneof"`
}
type ServiceSlugChoice_Terraform struct {
	Terraform bool `protobuf:"varint,10,opt,name=terraform,proto3,oneof"`
}
type ServiceSlugChoice_Tpm struct {
	Tpm bool `protobuf:"varint,11,opt,name=tpm,proto3,oneof"`
}
type ServiceSlugChoice_Uam struct {
	Uam bool `protobuf:"varint,12,opt,name=uam,proto3,oneof"`
}
type ServiceSlugChoice_Web struct {
	Web bool `protobuf:"varint,13,opt,name=web,proto3,oneof"`
}

func (*ServiceSlugChoice_Alert) isServiceSlugChoice_Choice()            {}
func (*ServiceSlugChoice_Config) isServiceSlugChoice_Choice()           {}
func (*ServiceSlugChoice_Data) isServiceSlugChoice_Choice()             {}
func (*ServiceSlugChoice_Infraprotect) isServiceSlugChoice_Choice()     {}
func (*ServiceSlugChoice_Kms) isServiceSlugChoice_Choice()              {}
func (*ServiceSlugChoice_Ml) isServiceSlugChoice_Choice()               {}
func (*ServiceSlugChoice_Operate) isServiceSlugChoice_Choice()          {}
func (*ServiceSlugChoice_Register) isServiceSlugChoice_Choice()         {}
func (*ServiceSlugChoice_SecretManagement) isServiceSlugChoice_Choice() {}
func (*ServiceSlugChoice_Terraform) isServiceSlugChoice_Choice()        {}
func (*ServiceSlugChoice_Tpm) isServiceSlugChoice_Choice()              {}
func (*ServiceSlugChoice_Uam) isServiceSlugChoice_Choice()              {}
func (*ServiceSlugChoice_Web) isServiceSlugChoice_Choice()              {}

func (m *ServiceSlugChoice) GetChoice() isServiceSlugChoice_Choice {
	if m != nil {
		return m.Choice
	}
	return nil
}

func (m *ServiceSlugChoice) GetAlert() bool {
	if x, ok := m.GetChoice().(*ServiceSlugChoice_Alert); ok {
		return x.Alert
	}
	return false
}

func (m *ServiceSlugChoice) GetConfig() bool {
	if x, ok := m.GetChoice().(*ServiceSlugChoice_Config); ok {
		return x.Config
	}
	return false
}

func (m *ServiceSlugChoice) GetData() bool {
	if x, ok := m.GetChoice().(*ServiceSlugChoice_Data); ok {
		return x.Data
	}
	return false
}

func (m *ServiceSlugChoice) GetInfraprotect() bool {
	if x, ok := m.GetChoice().(*ServiceSlugChoice_Infraprotect); ok {
		return x.Infraprotect
	}
	return false
}

func (m *ServiceSlugChoice) GetKms() bool {
	if x, ok := m.GetChoice().(*ServiceSlugChoice_Kms); ok {
		return x.Kms
	}
	return false
}

func (m *ServiceSlugChoice) GetMl() bool {
	if x, ok := m.GetChoice().(*ServiceSlugChoice_Ml); ok {
		return x.Ml
	}
	return false
}

func (m *ServiceSlugChoice) GetOperate() bool {
	if x, ok := m.GetChoice().(*ServiceSlugChoice_Operate); ok {
		return x.Operate
	}
	return false
}

func (m *ServiceSlugChoice) GetRegister() bool {
	if x, ok := m.GetChoice().(*ServiceSlugChoice_Register); ok {
		return x.Register
	}
	return false
}

func (m *ServiceSlugChoice) GetSecretManagement() bool {
	if x, ok := m.GetChoice().(*ServiceSlugChoice_SecretManagement); ok {
		return x.SecretManagement
	}
	return false
}

func (m *ServiceSlugChoice) GetTerraform() bool {
	if x, ok := m.GetChoice().(*ServiceSlugChoice_Terraform); ok {
		return x.Terraform
	}
	return false
}

func (m *ServiceSlugChoice) GetTpm() bool {
	if x, ok := m.GetChoice().(*ServiceSlugChoice_Tpm); ok {
		return x.Tpm
	}
	return false
}

func (m *ServiceSlugChoice) GetUam() bool {
	if x, ok := m.GetChoice().(*ServiceSlugChoice_Uam); ok {
		return x.Uam
	}
	return false
}

func (m *ServiceSlugChoice) GetWeb() bool {
	if x, ok := m.GetChoice().(*ServiceSlugChoice_Web); ok {
		return x.Web
	}
	return false
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*ServiceSlugChoice) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _ServiceSlugChoice_OneofMarshaler, _ServiceSlugChoice_OneofUnmarshaler, _ServiceSlugChoice_OneofSizer, []interface{}{
		(*ServiceSlugChoice_Alert)(nil),
		(*ServiceSlugChoice_Config)(nil),
		(*ServiceSlugChoice_Data)(nil),
		(*ServiceSlugChoice_Infraprotect)(nil),
		(*ServiceSlugChoice_Kms)(nil),
		(*ServiceSlugChoice_Ml)(nil),
		(*ServiceSlugChoice_Operate)(nil),
		(*ServiceSlugChoice_Register)(nil),
		(*ServiceSlugChoice_SecretManagement)(nil),
		(*ServiceSlugChoice_Terraform)(nil),
		(*ServiceSlugChoice_Tpm)(nil),
		(*ServiceSlugChoice_Uam)(nil),
		(*ServiceSlugChoice_Web)(nil),
	}
}

func _ServiceSlugChoice_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*ServiceSlugChoice)
	// choice
	switch x := m.Choice.(type) {
	case *ServiceSlugChoice_Alert:
		t := uint64(0)
		if x.Alert {
			t = 1
		}
		_ = b.EncodeVarint(1<<3 | proto.WireVarint)
		_ = b.EncodeVarint(t)
	case *ServiceSlugChoice_Config:
		t := uint64(0)
		if x.Config {
			t = 1
		}
		_ = b.EncodeVarint(2<<3 | proto.WireVarint)
		_ = b.EncodeVarint(t)
	case *ServiceSlugChoice_Data:
		t := uint64(0)
		if x.Data {
			t = 1
		}
		_ = b.EncodeVarint(3<<3 | proto.WireVarint)
		_ = b.EncodeVarint(t)
	case *ServiceSlugChoice_Infraprotect:
		t := uint64(0)
		if x.Infraprotect {
			t = 1
		}
		_ = b.EncodeVarint(4<<3 | proto.WireVarint)
		_ = b.EncodeVarint(t)
	case *ServiceSlugChoice_Kms:
		t := uint64(0)
		if x.Kms {
			t = 1
		}
		_ = b.EncodeVarint(5<<3 | proto.WireVarint)
		_ = b.EncodeVarint(t)
	case *ServiceSlugChoice_Ml:
		t := uint64(0)
		if x.Ml {
			t = 1
		}
		_ = b.EncodeVarint(6<<3 | proto.WireVarint)
		_ = b.EncodeVarint(t)
	case *ServiceSlugChoice_Operate:
		t := uint64(0)
		if x.Operate {
			t = 1
		}
		_ = b.EncodeVarint(7<<3 | proto.WireVarint)
		_ = b.EncodeVarint(t)
	case *ServiceSlugChoice_Register:
		t := uint64(0)
		if x.Register {
			t = 1
		}
		_ = b.EncodeVarint(8<<3 | proto.WireVarint)
		_ = b.EncodeVarint(t)
	case *ServiceSlugChoice_SecretManagement:
		t := uint64(0)
		if x.SecretManagement {
			t = 1
		}
		_ = b.EncodeVarint(9<<3 | proto.WireVarint)
		_ = b.EncodeVarint(t)
	case *ServiceSlugChoice_Terraform:
		t := uint64(0)
		if x.Terraform {
			t = 1
		}
		_ = b.EncodeVarint(10<<3 | proto.WireVarint)
		_ = b.EncodeVarint(t)
	case *ServiceSlugChoice_Tpm:
		t := uint64(0)
		if x.Tpm {
			t = 1
		}
		_ = b.EncodeVarint(11<<3 | proto.WireVarint)
		_ = b.EncodeVarint(t)
	case *ServiceSlugChoice_Uam:
		t := uint64(0)
		if x.Uam {
			t = 1
		}
		_ = b.EncodeVarint(12<<3 | proto.WireVarint)
		_ = b.EncodeVarint(t)
	case *ServiceSlugChoice_Web:
		t := uint64(0)
		if x.Web {
			t = 1
		}
		_ = b.EncodeVarint(13<<3 | proto.WireVarint)
		_ = b.EncodeVarint(t)
	case nil:
	default:
		return fmt.Errorf("ServiceSlugChoice.Choice has unexpected type %T", x)
	}
	return nil
}

func _ServiceSlugChoice_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*ServiceSlugChoice)
	switch tag {
	case 1: // choice.alert
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.Choice = &ServiceSlugChoice_Alert{x != 0}
		return true, err
	case 2: // choice.config
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.Choice = &ServiceSlugChoice_Config{x != 0}
		return true, err
	case 3: // choice.data
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.Choice = &ServiceSlugChoice_Data{x != 0}
		return true, err
	case 4: // choice.infraprotect
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.Choice = &ServiceSlugChoice_Infraprotect{x != 0}
		return true, err
	case 5: // choice.kms
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.Choice = &ServiceSlugChoice_Kms{x != 0}
		return true, err
	case 6: // choice.ml
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.Choice = &ServiceSlugChoice_Ml{x != 0}
		return true, err
	case 7: // choice.operate
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.Choice = &ServiceSlugChoice_Operate{x != 0}
		return true, err
	case 8: // choice.register
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.Choice = &ServiceSlugChoice_Register{x != 0}
		return true, err
	case 9: // choice.secret_management
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.Choice = &ServiceSlugChoice_SecretManagement{x != 0}
		return true, err
	case 10: // choice.terraform
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.Choice = &ServiceSlugChoice_Terraform{x != 0}
		return true, err
	case 11: // choice.tpm
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.Choice = &ServiceSlugChoice_Tpm{x != 0}
		return true, err
	case 12: // choice.uam
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.Choice = &ServiceSlugChoice_Uam{x != 0}
		return true, err
	case 13: // choice.web
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.Choice = &ServiceSlugChoice_Web{x != 0}
		return true, err
	default:
		return false, nil
	}
}

func _ServiceSlugChoice_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*ServiceSlugChoice)
	// choice
	switch x := m.Choice.(type) {
	case *ServiceSlugChoice_Alert:
		n += proto.SizeVarint(1<<3 | proto.WireVarint)
		n += 1
	case *ServiceSlugChoice_Config:
		n += proto.SizeVarint(2<<3 | proto.WireVarint)
		n += 1
	case *ServiceSlugChoice_Data:
		n += proto.SizeVarint(3<<3 | proto.WireVarint)
		n += 1
	case *ServiceSlugChoice_Infraprotect:
		n += proto.SizeVarint(4<<3 | proto.WireVarint)
		n += 1
	case *ServiceSlugChoice_Kms:
		n += proto.SizeVarint(5<<3 | proto.WireVarint)
		n += 1
	case *ServiceSlugChoice_Ml:
		n += proto.SizeVarint(6<<3 | proto.WireVarint)
		n += 1
	case *ServiceSlugChoice_Operate:
		n += proto.SizeVarint(7<<3 | proto.WireVarint)
		n += 1
	case *ServiceSlugChoice_Register:
		n += proto.SizeVarint(8<<3 | proto.WireVarint)
		n += 1
	case *ServiceSlugChoice_SecretManagement:
		n += proto.SizeVarint(9<<3 | proto.WireVarint)
		n += 1
	case *ServiceSlugChoice_Terraform:
		n += proto.SizeVarint(10<<3 | proto.WireVarint)
		n += 1
	case *ServiceSlugChoice_Tpm:
		n += proto.SizeVarint(11<<3 | proto.WireVarint)
		n += 1
	case *ServiceSlugChoice_Uam:
		n += proto.SizeVarint(12<<3 | proto.WireVarint)
		n += 1
	case *ServiceSlugChoice_Web:
		n += proto.SizeVarint(13<<3 | proto.WireVarint)
		n += 1
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// ServiceInfo encapsulates information of a service in VES environment
type ServiceInfo struct {
	// Name of the daemon e.g. akar, nio, vega
	Daemon string `protobuf:"bytes,1,opt,name=daemon,proto3" json:"daemon,omitempty"`
	// Locations where daemon runs in e.g. GC, RE, CE
	Locations []string `protobuf:"bytes,2,rep,name=locations" json:"locations,omitempty"`
}

func (m *ServiceInfo) Reset()                    { *m = ServiceInfo{} }
func (*ServiceInfo) ProtoMessage()               {}
func (*ServiceInfo) Descriptor() ([]byte, []int) { return fileDescriptorOptions, []int{6} }

func (m *ServiceInfo) GetDaemon() string {
	if m != nil {
		return m.Daemon
	}
	return ""
}

func (m *ServiceInfo) GetLocations() []string {
	if m != nil {
		return m.Locations
	}
	return nil
}

// QuotaResourceKeyInfo encapsulates information about a key in quota.Object.resources field
type QuotaResourceKeyInfo struct {
	// value is what is used in resource_limits field of quota.Object
	Value string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	// daemon is the name of the daemon handling this aspect
	Daemon string `protobuf:"bytes,2,opt,name=daemon,proto3" json:"daemon,omitempty"`
}

func (m *QuotaResourceKeyInfo) Reset()                    { *m = QuotaResourceKeyInfo{} }
func (*QuotaResourceKeyInfo) ProtoMessage()               {}
func (*QuotaResourceKeyInfo) Descriptor() ([]byte, []int) { return fileDescriptorOptions, []int{7} }

func (m *QuotaResourceKeyInfo) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func (m *QuotaResourceKeyInfo) GetDaemon() string {
	if m != nil {
		return m.Daemon
	}
	return ""
}

type APIGroupElementItem struct {
	Method    string `protobuf:"bytes,1,opt,name=method,proto3" json:"method,omitempty"`
	PathRegex string `protobuf:"bytes,2,opt,name=path_regex,json=pathRegex,proto3" json:"path_regex,omitempty"`
}

func (m *APIGroupElementItem) Reset()                    { *m = APIGroupElementItem{} }
func (*APIGroupElementItem) ProtoMessage()               {}
func (*APIGroupElementItem) Descriptor() ([]byte, []int) { return fileDescriptorOptions, []int{8} }

func (m *APIGroupElementItem) GetMethod() string {
	if m != nil {
		return m.Method
	}
	return ""
}

func (m *APIGroupElementItem) GetPathRegex() string {
	if m != nil {
		return m.PathRegex
	}
	return ""
}

type APIGroupElementInfo struct {
	// This is name of api_group_element to be created. e.g. ves-io-some-custom-api-group-element-name
	// If 'items' is not empty, then 'name' is only a prefix of api_group_elements to be created. e.g.
	// ves-io-some-api-group-element-name-0, ves-io-some-api-group-element-name-1 etc.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// optional method to path-regex mappings, allows for specifying more than one path for same method (e.g. additional_bindings)
	Items []*APIGroupElementItem `protobuf:"bytes,2,rep,name=items" json:"items,omitempty"`
}

func (m *APIGroupElementInfo) Reset()                    { *m = APIGroupElementInfo{} }
func (*APIGroupElementInfo) ProtoMessage()               {}
func (*APIGroupElementInfo) Descriptor() ([]byte, []int) { return fileDescriptorOptions, []int{9} }

func (m *APIGroupElementInfo) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *APIGroupElementInfo) GetItems() []*APIGroupElementItem {
	if m != nil {
		return m.Items
	}
	return nil
}

type APIGroupNameMap struct {
	// Key is RPC Name e.g. Create, value is comma separate list of api-group names e.g. "ves-io-network-write, ves-io-network-monitor"
	RpcMappings map[string]string `protobuf:"bytes,1,rep,name=rpc_mappings,json=rpcMappings" json:"rpc_mappings,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *APIGroupNameMap) Reset()                    { *m = APIGroupNameMap{} }
func (*APIGroupNameMap) ProtoMessage()               {}
func (*APIGroupNameMap) Descriptor() ([]byte, []int) { return fileDescriptorOptions, []int{10} }

func (m *APIGroupNameMap) GetRpcMappings() map[string]string {
	if m != nil {
		return m.RpcMappings
	}
	return nil
}

var E_SvcSlugInfo = &proto.ExtensionDesc{
	ExtendedType:  (*google_protobuf.FieldOptions)(nil),
	ExtensionType: (*ServiceSlugInfo)(nil),
	Field:         50100,
	Name:          "ves.io.schema.vesenv.svc_slug_info",
	Tag:           "bytes,50100,opt,name=svc_slug_info,json=svcSlugInfo",
	Filename:      "ves.io/schema/vesenv/options.proto",
}

var E_QuotaRkeyInfo = &proto.ExtensionDesc{
	ExtendedType:  (*google_protobuf.FieldOptions)(nil),
	ExtensionType: (*QuotaResourceKeyInfo)(nil),
	Field:         50101,
	Name:          "ves.io.schema.vesenv.quota_rkey_info",
	Tag:           "bytes,50101,opt,name=quota_rkey_info,json=quotaRkeyInfo",
	Filename:      "ves.io/schema/vesenv/options.proto",
}

var E_BfSecretInfo = &proto.ExtensionDesc{
	ExtendedType:  (*google_protobuf.FieldOptions)(nil),
	ExtensionType: (*BFSecretInfo)(nil),
	Field:         50102,
	Name:          "ves.io.schema.vesenv.bf_secret_info",
	Tag:           "bytes,50102,opt,name=bf_secret_info,json=bfSecretInfo",
	Filename:      "ves.io/schema/vesenv/options.proto",
}

var E_SvcInfo = &proto.ExtensionDesc{
	ExtendedType:  (*google_protobuf.FieldOptions)(nil),
	ExtensionType: (*ServiceInfo)(nil),
	Field:         50103,
	Name:          "ves.io.schema.vesenv.svc_info",
	Tag:           "bytes,50103,opt,name=svc_info,json=svcInfo",
	Filename:      "ves.io/schema/vesenv/options.proto",
}

var E_CrudServiceSlugChoice = &proto.ExtensionDesc{
	ExtendedType:  (*google_protobuf.MessageOptions)(nil),
	ExtensionType: (*ServiceSlugChoice)(nil),
	Field:         50200,
	Name:          "ves.io.schema.vesenv.crud_service_slug_choice",
	Tag:           "bytes,50200,opt,name=crud_service_slug_choice,json=crudServiceSlugChoice",
	Filename:      "ves.io/schema/vesenv/options.proto",
}

var E_CrudApiGroupPrefixes = &proto.ExtensionDesc{
	ExtendedType:  (*google_protobuf.MessageOptions)(nil),
	ExtensionType: (*string)(nil),
	Field:         50201,
	Name:          "ves.io.schema.vesenv.crud_api_group_prefixes",
	Tag:           "bytes,50201,opt,name=crud_api_group_prefixes,json=crudApiGroupPrefixes",
	Filename:      "ves.io/schema/vesenv/options.proto",
}

var E_CrudApiGroupNames = &proto.ExtensionDesc{
	ExtendedType:  (*google_protobuf.MessageOptions)(nil),
	ExtensionType: (*APIGroupNameMap)(nil),
	Field:         50202,
	Name:          "ves.io.schema.vesenv.crud_api_group_names",
	Tag:           "bytes,50202,opt,name=crud_api_group_names,json=crudApiGroupNames",
	Filename:      "ves.io/schema/vesenv/options.proto",
}

var E_ReEncryptSecrets = &proto.ExtensionDesc{
	ExtendedType:  (*google_protobuf.MessageOptions)(nil),
	ExtensionType: (*ReEncryptSecretsType)(nil),
	Field:         50203,
	Name:          "ves.io.schema.vesenv.re_encrypt_secrets",
	Tag:           "bytes,50203,opt,name=re_encrypt_secrets,json=reEncryptSecrets",
	Filename:      "ves.io/schema/vesenv/options.proto",
}

var E_ApiGroupNames = &proto.ExtensionDesc{
	ExtendedType:  (*google_protobuf.MethodOptions)(nil),
	ExtensionType: (*string)(nil),
	Field:         50300,
	Name:          "ves.io.schema.vesenv.api_group_names",
	Tag:           "bytes,50300,opt,name=api_group_names,json=apiGroupNames",
	Filename:      "ves.io/schema/vesenv/options.proto",
}

var E_ApiGroupElementInfo = &proto.ExtensionDesc{
	ExtendedType:  (*google_protobuf.MethodOptions)(nil),
	ExtensionType: (*APIGroupElementInfo)(nil),
	Field:         50301,
	Name:          "ves.io.schema.vesenv.api_group_element_info",
	Tag:           "bytes,50301,opt,name=api_group_element_info,json=apiGroupElementInfo",
	Filename:      "ves.io/schema/vesenv/options.proto",
}

var E_ServiceSlugChoice = &proto.ExtensionDesc{
	ExtendedType:  (*google_protobuf.ServiceOptions)(nil),
	ExtensionType: (*ServiceSlugChoice)(nil),
	Field:         50400,
	Name:          "ves.io.schema.vesenv.service_slug_choice",
	Tag:           "bytes,50400,opt,name=service_slug_choice,json=serviceSlugChoice",
	Filename:      "ves.io/schema/vesenv/options.proto",
}

func init() {
	proto.RegisterType((*BFSecretInfo)(nil), "ves.io.schema.vesenv.BFSecretInfo")
	proto.RegisterType((*BFSecretChoice)(nil), "ves.io.schema.vesenv.BFSecretChoice")
	proto.RegisterType((*ReEncryptSecretItemType)(nil), "ves.io.schema.vesenv.ReEncryptSecretItemType")
	proto.RegisterType((*ReEncryptSecretsType)(nil), "ves.io.schema.vesenv.ReEncryptSecretsType")
	proto.RegisterType((*ServiceSlugInfo)(nil), "ves.io.schema.vesenv.ServiceSlugInfo")
	proto.RegisterType((*ServiceSlugChoice)(nil), "ves.io.schema.vesenv.ServiceSlugChoice")
	proto.RegisterType((*ServiceInfo)(nil), "ves.io.schema.vesenv.ServiceInfo")
	proto.RegisterType((*QuotaResourceKeyInfo)(nil), "ves.io.schema.vesenv.QuotaResourceKeyInfo")
	proto.RegisterType((*APIGroupElementItem)(nil), "ves.io.schema.vesenv.APIGroupElementItem")
	proto.RegisterType((*APIGroupElementInfo)(nil), "ves.io.schema.vesenv.APIGroupElementInfo")
	proto.RegisterType((*APIGroupNameMap)(nil), "ves.io.schema.vesenv.APIGroupNameMap")
	proto.RegisterExtension(E_SvcSlugInfo)
	proto.RegisterExtension(E_QuotaRkeyInfo)
	proto.RegisterExtension(E_BfSecretInfo)
	proto.RegisterExtension(E_SvcInfo)
	proto.RegisterExtension(E_CrudServiceSlugChoice)
	proto.RegisterExtension(E_CrudApiGroupPrefixes)
	proto.RegisterExtension(E_CrudApiGroupNames)
	proto.RegisterExtension(E_ReEncryptSecrets)
	proto.RegisterExtension(E_ApiGroupNames)
	proto.RegisterExtension(E_ApiGroupElementInfo)
	proto.RegisterExtension(E_ServiceSlugChoice)
}
func (this *BFSecretInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*BFSecretInfo)
	if !ok {
		that2, ok := that.(BFSecretInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.PolicyName != that1.PolicyName {
		return false
	}
	if this.PolicyId != that1.PolicyId {
		return false
	}
	if len(this.GcServices) != len(that1.GcServices) {
		return false
	}
	for i := range this.GcServices {
		if this.GcServices[i] != that1.GcServices[i] {
			return false
		}
	}
	if len(this.NonGcServices) != len(that1.NonGcServices) {
		return false
	}
	for i := range this.NonGcServices {
		if this.NonGcServices[i] != that1.NonGcServices[i] {
			return false
		}
	}
	if len(this.GcJobs) != len(that1.GcJobs) {
		return false
	}
	for i := range this.GcJobs {
		if this.GcJobs[i] != that1.GcJobs[i] {
			return false
		}
	}
	return true
}
func (this *BFSecretChoice) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*BFSecretChoice)
	if !ok {
		that2, ok := that.(BFSecretChoice)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.Choice == nil {
		if this.Choice != nil {
			return false
		}
	} else if this.Choice == nil {
		return false
	} else if !this.Choice.Equal(that1.Choice) {
		return false
	}
	return true
}
func (this *BFSecretChoice_VesContainerRegistryPassword) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*BFSecretChoice_VesContainerRegistryPassword)
	if !ok {
		that2, ok := that.(BFSecretChoice_VesContainerRegistryPassword)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.VesContainerRegistryPassword != that1.VesContainerRegistryPassword {
		return false
	}
	return true
}
func (this *BFSecretChoice_VesAlertReceiverSlackUrl) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*BFSecretChoice_VesAlertReceiverSlackUrl)
	if !ok {
		that2, ok := that.(BFSecretChoice_VesAlertReceiverSlackUrl)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.VesAlertReceiverSlackUrl != that1.VesAlertReceiverSlackUrl {
		return false
	}
	return true
}
func (this *BFSecretChoice_VesAlertReceiverPagerdutyRoutingKey) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*BFSecretChoice_VesAlertReceiverPagerdutyRoutingKey)
	if !ok {
		that2, ok := that.(BFSecretChoice_VesAlertReceiverPagerdutyRoutingKey)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.VesAlertReceiverPagerdutyRoutingKey != that1.VesAlertReceiverPagerdutyRoutingKey {
		return false
	}
	return true
}
func (this *BFSecretChoice_VesAlertReceiverOpsgenieApiKey) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*BFSecretChoice_VesAlertReceiverOpsgenieApiKey)
	if !ok {
		that2, ok := that.(BFSecretChoice_VesAlertReceiverOpsgenieApiKey)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.VesAlertReceiverOpsgenieApiKey != that1.VesAlertReceiverOpsgenieApiKey {
		return false
	}
	return true
}
func (this *BFSecretChoice_VesTerraformJobViewSite) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*BFSecretChoice_VesTerraformJobViewSite)
	if !ok {
		that2, ok := that.(BFSecretChoice_VesTerraformJobViewSite)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.VesTerraformJobViewSite != that1.VesTerraformJobViewSite {
		return false
	}
	return true
}
func (this *ReEncryptSecretItemType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReEncryptSecretItemType)
	if !ok {
		that2, ok := that.(ReEncryptSecretItemType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.FieldPath != that1.FieldPath {
		return false
	}
	if this.PolicyName != that1.PolicyName {
		return false
	}
	return true
}
func (this *ReEncryptSecretsType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReEncryptSecretsType)
	if !ok {
		that2, ok := that.(ReEncryptSecretsType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Items) != len(that1.Items) {
		return false
	}
	for i := range this.Items {
		if !this.Items[i].Equal(that1.Items[i]) {
			return false
		}
	}
	return true
}
func (this *ServiceSlugInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ServiceSlugInfo)
	if !ok {
		that2, ok := that.(ServiceSlugInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Value != that1.Value {
		return false
	}
	if this.Daemon != that1.Daemon {
		return false
	}
	return true
}
func (this *ServiceSlugChoice) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ServiceSlugChoice)
	if !ok {
		that2, ok := that.(ServiceSlugChoice)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.Choice == nil {
		if this.Choice != nil {
			return false
		}
	} else if this.Choice == nil {
		return false
	} else if !this.Choice.Equal(that1.Choice) {
		return false
	}
	return true
}
func (this *ServiceSlugChoice_Alert) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ServiceSlugChoice_Alert)
	if !ok {
		that2, ok := that.(ServiceSlugChoice_Alert)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Alert != that1.Alert {
		return false
	}
	return true
}
func (this *ServiceSlugChoice_Config) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ServiceSlugChoice_Config)
	if !ok {
		that2, ok := that.(ServiceSlugChoice_Config)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Config != that1.Config {
		return false
	}
	return true
}
func (this *ServiceSlugChoice_Data) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ServiceSlugChoice_Data)
	if !ok {
		that2, ok := that.(ServiceSlugChoice_Data)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Data != that1.Data {
		return false
	}
	return true
}
func (this *ServiceSlugChoice_Infraprotect) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ServiceSlugChoice_Infraprotect)
	if !ok {
		that2, ok := that.(ServiceSlugChoice_Infraprotect)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Infraprotect != that1.Infraprotect {
		return false
	}
	return true
}
func (this *ServiceSlugChoice_Kms) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ServiceSlugChoice_Kms)
	if !ok {
		that2, ok := that.(ServiceSlugChoice_Kms)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Kms != that1.Kms {
		return false
	}
	return true
}
func (this *ServiceSlugChoice_Ml) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ServiceSlugChoice_Ml)
	if !ok {
		that2, ok := that.(ServiceSlugChoice_Ml)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Ml != that1.Ml {
		return false
	}
	return true
}
func (this *ServiceSlugChoice_Operate) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ServiceSlugChoice_Operate)
	if !ok {
		that2, ok := that.(ServiceSlugChoice_Operate)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Operate != that1.Operate {
		return false
	}
	return true
}
func (this *ServiceSlugChoice_Register) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ServiceSlugChoice_Register)
	if !ok {
		that2, ok := that.(ServiceSlugChoice_Register)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Register != that1.Register {
		return false
	}
	return true
}
func (this *ServiceSlugChoice_SecretManagement) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ServiceSlugChoice_SecretManagement)
	if !ok {
		that2, ok := that.(ServiceSlugChoice_SecretManagement)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.SecretManagement != that1.SecretManagement {
		return false
	}
	return true
}
func (this *ServiceSlugChoice_Terraform) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ServiceSlugChoice_Terraform)
	if !ok {
		that2, ok := that.(ServiceSlugChoice_Terraform)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Terraform != that1.Terraform {
		return false
	}
	return true
}
func (this *ServiceSlugChoice_Tpm) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ServiceSlugChoice_Tpm)
	if !ok {
		that2, ok := that.(ServiceSlugChoice_Tpm)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Tpm != that1.Tpm {
		return false
	}
	return true
}
func (this *ServiceSlugChoice_Uam) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ServiceSlugChoice_Uam)
	if !ok {
		that2, ok := that.(ServiceSlugChoice_Uam)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Uam != that1.Uam {
		return false
	}
	return true
}
func (this *ServiceSlugChoice_Web) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ServiceSlugChoice_Web)
	if !ok {
		that2, ok := that.(ServiceSlugChoice_Web)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Web != that1.Web {
		return false
	}
	return true
}
func (this *ServiceInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ServiceInfo)
	if !ok {
		that2, ok := that.(ServiceInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Daemon != that1.Daemon {
		return false
	}
	if len(this.Locations) != len(that1.Locations) {
		return false
	}
	for i := range this.Locations {
		if this.Locations[i] != that1.Locations[i] {
			return false
		}
	}
	return true
}
func (this *QuotaResourceKeyInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*QuotaResourceKeyInfo)
	if !ok {
		that2, ok := that.(QuotaResourceKeyInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Value != that1.Value {
		return false
	}
	if this.Daemon != that1.Daemon {
		return false
	}
	return true
}
func (this *APIGroupElementItem) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*APIGroupElementItem)
	if !ok {
		that2, ok := that.(APIGroupElementItem)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Method != that1.Method {
		return false
	}
	if this.PathRegex != that1.PathRegex {
		return false
	}
	return true
}
func (this *APIGroupElementInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*APIGroupElementInfo)
	if !ok {
		that2, ok := that.(APIGroupElementInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if len(this.Items) != len(that1.Items) {
		return false
	}
	for i := range this.Items {
		if !this.Items[i].Equal(that1.Items[i]) {
			return false
		}
	}
	return true
}
func (this *APIGroupNameMap) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*APIGroupNameMap)
	if !ok {
		that2, ok := that.(APIGroupNameMap)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.RpcMappings) != len(that1.RpcMappings) {
		return false
	}
	for i := range this.RpcMappings {
		if this.RpcMappings[i] != that1.RpcMappings[i] {
			return false
		}
	}
	return true
}
func (this *BFSecretInfo) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&vesenv.BFSecretInfo{")
	s = append(s, "PolicyName: "+fmt.Sprintf("%#v", this.PolicyName)+",\n")
	s = append(s, "PolicyId: "+fmt.Sprintf("%#v", this.PolicyId)+",\n")
	s = append(s, "GcServices: "+fmt.Sprintf("%#v", this.GcServices)+",\n")
	s = append(s, "NonGcServices: "+fmt.Sprintf("%#v", this.NonGcServices)+",\n")
	s = append(s, "GcJobs: "+fmt.Sprintf("%#v", this.GcJobs)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *BFSecretChoice) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&vesenv.BFSecretChoice{")
	if this.Choice != nil {
		s = append(s, "Choice: "+fmt.Sprintf("%#v", this.Choice)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *BFSecretChoice_VesContainerRegistryPassword) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&vesenv.BFSecretChoice_VesContainerRegistryPassword{` +
		`VesContainerRegistryPassword:` + fmt.Sprintf("%#v", this.VesContainerRegistryPassword) + `}`}, ", ")
	return s
}
func (this *BFSecretChoice_VesAlertReceiverSlackUrl) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&vesenv.BFSecretChoice_VesAlertReceiverSlackUrl{` +
		`VesAlertReceiverSlackUrl:` + fmt.Sprintf("%#v", this.VesAlertReceiverSlackUrl) + `}`}, ", ")
	return s
}
func (this *BFSecretChoice_VesAlertReceiverPagerdutyRoutingKey) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&vesenv.BFSecretChoice_VesAlertReceiverPagerdutyRoutingKey{` +
		`VesAlertReceiverPagerdutyRoutingKey:` + fmt.Sprintf("%#v", this.VesAlertReceiverPagerdutyRoutingKey) + `}`}, ", ")
	return s
}
func (this *BFSecretChoice_VesAlertReceiverOpsgenieApiKey) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&vesenv.BFSecretChoice_VesAlertReceiverOpsgenieApiKey{` +
		`VesAlertReceiverOpsgenieApiKey:` + fmt.Sprintf("%#v", this.VesAlertReceiverOpsgenieApiKey) + `}`}, ", ")
	return s
}
func (this *BFSecretChoice_VesTerraformJobViewSite) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&vesenv.BFSecretChoice_VesTerraformJobViewSite{` +
		`VesTerraformJobViewSite:` + fmt.Sprintf("%#v", this.VesTerraformJobViewSite) + `}`}, ", ")
	return s
}
func (this *ReEncryptSecretItemType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&vesenv.ReEncryptSecretItemType{")
	s = append(s, "FieldPath: "+fmt.Sprintf("%#v", this.FieldPath)+",\n")
	s = append(s, "PolicyName: "+fmt.Sprintf("%#v", this.PolicyName)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ReEncryptSecretsType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&vesenv.ReEncryptSecretsType{")
	if this.Items != nil {
		s = append(s, "Items: "+fmt.Sprintf("%#v", this.Items)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ServiceSlugInfo) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&vesenv.ServiceSlugInfo{")
	s = append(s, "Value: "+fmt.Sprintf("%#v", this.Value)+",\n")
	s = append(s, "Daemon: "+fmt.Sprintf("%#v", this.Daemon)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ServiceSlugChoice) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 17)
	s = append(s, "&vesenv.ServiceSlugChoice{")
	if this.Choice != nil {
		s = append(s, "Choice: "+fmt.Sprintf("%#v", this.Choice)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ServiceSlugChoice_Alert) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&vesenv.ServiceSlugChoice_Alert{` +
		`Alert:` + fmt.Sprintf("%#v", this.Alert) + `}`}, ", ")
	return s
}
func (this *ServiceSlugChoice_Config) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&vesenv.ServiceSlugChoice_Config{` +
		`Config:` + fmt.Sprintf("%#v", this.Config) + `}`}, ", ")
	return s
}
func (this *ServiceSlugChoice_Data) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&vesenv.ServiceSlugChoice_Data{` +
		`Data:` + fmt.Sprintf("%#v", this.Data) + `}`}, ", ")
	return s
}
func (this *ServiceSlugChoice_Infraprotect) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&vesenv.ServiceSlugChoice_Infraprotect{` +
		`Infraprotect:` + fmt.Sprintf("%#v", this.Infraprotect) + `}`}, ", ")
	return s
}
func (this *ServiceSlugChoice_Kms) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&vesenv.ServiceSlugChoice_Kms{` +
		`Kms:` + fmt.Sprintf("%#v", this.Kms) + `}`}, ", ")
	return s
}
func (this *ServiceSlugChoice_Ml) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&vesenv.ServiceSlugChoice_Ml{` +
		`Ml:` + fmt.Sprintf("%#v", this.Ml) + `}`}, ", ")
	return s
}
func (this *ServiceSlugChoice_Operate) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&vesenv.ServiceSlugChoice_Operate{` +
		`Operate:` + fmt.Sprintf("%#v", this.Operate) + `}`}, ", ")
	return s
}
func (this *ServiceSlugChoice_Register) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&vesenv.ServiceSlugChoice_Register{` +
		`Register:` + fmt.Sprintf("%#v", this.Register) + `}`}, ", ")
	return s
}
func (this *ServiceSlugChoice_SecretManagement) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&vesenv.ServiceSlugChoice_SecretManagement{` +
		`SecretManagement:` + fmt.Sprintf("%#v", this.SecretManagement) + `}`}, ", ")
	return s
}
func (this *ServiceSlugChoice_Terraform) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&vesenv.ServiceSlugChoice_Terraform{` +
		`Terraform:` + fmt.Sprintf("%#v", this.Terraform) + `}`}, ", ")
	return s
}
func (this *ServiceSlugChoice_Tpm) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&vesenv.ServiceSlugChoice_Tpm{` +
		`Tpm:` + fmt.Sprintf("%#v", this.Tpm) + `}`}, ", ")
	return s
}
func (this *ServiceSlugChoice_Uam) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&vesenv.ServiceSlugChoice_Uam{` +
		`Uam:` + fmt.Sprintf("%#v", this.Uam) + `}`}, ", ")
	return s
}
func (this *ServiceSlugChoice_Web) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&vesenv.ServiceSlugChoice_Web{` +
		`Web:` + fmt.Sprintf("%#v", this.Web) + `}`}, ", ")
	return s
}
func (this *ServiceInfo) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&vesenv.ServiceInfo{")
	s = append(s, "Daemon: "+fmt.Sprintf("%#v", this.Daemon)+",\n")
	s = append(s, "Locations: "+fmt.Sprintf("%#v", this.Locations)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *QuotaResourceKeyInfo) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&vesenv.QuotaResourceKeyInfo{")
	s = append(s, "Value: "+fmt.Sprintf("%#v", this.Value)+",\n")
	s = append(s, "Daemon: "+fmt.Sprintf("%#v", this.Daemon)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *APIGroupElementItem) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&vesenv.APIGroupElementItem{")
	s = append(s, "Method: "+fmt.Sprintf("%#v", this.Method)+",\n")
	s = append(s, "PathRegex: "+fmt.Sprintf("%#v", this.PathRegex)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *APIGroupElementInfo) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&vesenv.APIGroupElementInfo{")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	if this.Items != nil {
		s = append(s, "Items: "+fmt.Sprintf("%#v", this.Items)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *APIGroupNameMap) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&vesenv.APIGroupNameMap{")
	keysForRpcMappings := make([]string, 0, len(this.RpcMappings))
	for k, _ := range this.RpcMappings {
		keysForRpcMappings = append(keysForRpcMappings, k)
	}
	sortkeys.Strings(keysForRpcMappings)
	mapStringForRpcMappings := "map[string]string{"
	for _, k := range keysForRpcMappings {
		mapStringForRpcMappings += fmt.Sprintf("%#v: %#v,", k, this.RpcMappings[k])
	}
	mapStringForRpcMappings += "}"
	if this.RpcMappings != nil {
		s = append(s, "RpcMappings: "+mapStringForRpcMappings+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringOptions(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *BFSecretInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BFSecretInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.PolicyName) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintOptions(dAtA, i, uint64(len(m.PolicyName)))
		i += copy(dAtA[i:], m.PolicyName)
	}
	if m.PolicyId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintOptions(dAtA, i, uint64(m.PolicyId))
	}
	if len(m.GcServices) > 0 {
		for _, s := range m.GcServices {
			dAtA[i] = 0x1a
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.NonGcServices) > 0 {
		for _, s := range m.NonGcServices {
			dAtA[i] = 0x22
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.GcJobs) > 0 {
		for _, s := range m.GcJobs {
			dAtA[i] = 0x2a
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	return i, nil
}

func (m *BFSecretChoice) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BFSecretChoice) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Choice != nil {
		nn1, err := m.Choice.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn1
	}
	return i, nil
}

func (m *BFSecretChoice_VesContainerRegistryPassword) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x8
	i++
	if m.VesContainerRegistryPassword {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i++
	return i, nil
}
func (m *BFSecretChoice_VesAlertReceiverSlackUrl) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x10
	i++
	if m.VesAlertReceiverSlackUrl {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i++
	return i, nil
}
func (m *BFSecretChoice_VesAlertReceiverPagerdutyRoutingKey) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x18
	i++
	if m.VesAlertReceiverPagerdutyRoutingKey {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i++
	return i, nil
}
func (m *BFSecretChoice_VesAlertReceiverOpsgenieApiKey) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x20
	i++
	if m.VesAlertReceiverOpsgenieApiKey {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i++
	return i, nil
}
func (m *BFSecretChoice_VesTerraformJobViewSite) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x28
	i++
	if m.VesTerraformJobViewSite {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i++
	return i, nil
}
func (m *ReEncryptSecretItemType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReEncryptSecretItemType) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.FieldPath) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintOptions(dAtA, i, uint64(len(m.FieldPath)))
		i += copy(dAtA[i:], m.FieldPath)
	}
	if len(m.PolicyName) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintOptions(dAtA, i, uint64(len(m.PolicyName)))
		i += copy(dAtA[i:], m.PolicyName)
	}
	return i, nil
}

func (m *ReEncryptSecretsType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReEncryptSecretsType) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Items) > 0 {
		for _, msg := range m.Items {
			dAtA[i] = 0xa
			i++
			i = encodeVarintOptions(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *ServiceSlugInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ServiceSlugInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Value) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintOptions(dAtA, i, uint64(len(m.Value)))
		i += copy(dAtA[i:], m.Value)
	}
	if len(m.Daemon) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintOptions(dAtA, i, uint64(len(m.Daemon)))
		i += copy(dAtA[i:], m.Daemon)
	}
	return i, nil
}

func (m *ServiceSlugChoice) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ServiceSlugChoice) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Choice != nil {
		nn2, err := m.Choice.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn2
	}
	return i, nil
}

func (m *ServiceSlugChoice_Alert) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x8
	i++
	if m.Alert {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i++
	return i, nil
}
func (m *ServiceSlugChoice_Config) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x10
	i++
	if m.Config {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i++
	return i, nil
}
func (m *ServiceSlugChoice_Data) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x18
	i++
	if m.Data {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i++
	return i, nil
}
func (m *ServiceSlugChoice_Infraprotect) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x20
	i++
	if m.Infraprotect {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i++
	return i, nil
}
func (m *ServiceSlugChoice_Kms) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x28
	i++
	if m.Kms {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i++
	return i, nil
}
func (m *ServiceSlugChoice_Ml) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x30
	i++
	if m.Ml {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i++
	return i, nil
}
func (m *ServiceSlugChoice_Operate) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x38
	i++
	if m.Operate {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i++
	return i, nil
}
func (m *ServiceSlugChoice_Register) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x40
	i++
	if m.Register {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i++
	return i, nil
}
func (m *ServiceSlugChoice_SecretManagement) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x48
	i++
	if m.SecretManagement {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i++
	return i, nil
}
func (m *ServiceSlugChoice_Terraform) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x50
	i++
	if m.Terraform {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i++
	return i, nil
}
func (m *ServiceSlugChoice_Tpm) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x58
	i++
	if m.Tpm {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i++
	return i, nil
}
func (m *ServiceSlugChoice_Uam) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x60
	i++
	if m.Uam {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i++
	return i, nil
}
func (m *ServiceSlugChoice_Web) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x68
	i++
	if m.Web {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i++
	return i, nil
}
func (m *ServiceInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ServiceInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Daemon) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintOptions(dAtA, i, uint64(len(m.Daemon)))
		i += copy(dAtA[i:], m.Daemon)
	}
	if len(m.Locations) > 0 {
		for _, s := range m.Locations {
			dAtA[i] = 0x12
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	return i, nil
}

func (m *QuotaResourceKeyInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuotaResourceKeyInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Value) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintOptions(dAtA, i, uint64(len(m.Value)))
		i += copy(dAtA[i:], m.Value)
	}
	if len(m.Daemon) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintOptions(dAtA, i, uint64(len(m.Daemon)))
		i += copy(dAtA[i:], m.Daemon)
	}
	return i, nil
}

func (m *APIGroupElementItem) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *APIGroupElementItem) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Method) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintOptions(dAtA, i, uint64(len(m.Method)))
		i += copy(dAtA[i:], m.Method)
	}
	if len(m.PathRegex) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintOptions(dAtA, i, uint64(len(m.PathRegex)))
		i += copy(dAtA[i:], m.PathRegex)
	}
	return i, nil
}

func (m *APIGroupElementInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *APIGroupElementInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintOptions(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.Items) > 0 {
		for _, msg := range m.Items {
			dAtA[i] = 0x12
			i++
			i = encodeVarintOptions(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *APIGroupNameMap) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *APIGroupNameMap) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.RpcMappings) > 0 {
		for k, _ := range m.RpcMappings {
			dAtA[i] = 0xa
			i++
			v := m.RpcMappings[k]
			mapSize := 1 + len(k) + sovOptions(uint64(len(k))) + 1 + len(v) + sovOptions(uint64(len(v)))
			i = encodeVarintOptions(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintOptions(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			dAtA[i] = 0x12
			i++
			i = encodeVarintOptions(dAtA, i, uint64(len(v)))
			i += copy(dAtA[i:], v)
		}
	}
	return i, nil
}

func encodeVarintOptions(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *BFSecretInfo) Size() (n int) {
	var l int
	_ = l
	l = len(m.PolicyName)
	if l > 0 {
		n += 1 + l + sovOptions(uint64(l))
	}
	if m.PolicyId != 0 {
		n += 1 + sovOptions(uint64(m.PolicyId))
	}
	if len(m.GcServices) > 0 {
		for _, s := range m.GcServices {
			l = len(s)
			n += 1 + l + sovOptions(uint64(l))
		}
	}
	if len(m.NonGcServices) > 0 {
		for _, s := range m.NonGcServices {
			l = len(s)
			n += 1 + l + sovOptions(uint64(l))
		}
	}
	if len(m.GcJobs) > 0 {
		for _, s := range m.GcJobs {
			l = len(s)
			n += 1 + l + sovOptions(uint64(l))
		}
	}
	return n
}

func (m *BFSecretChoice) Size() (n int) {
	var l int
	_ = l
	if m.Choice != nil {
		n += m.Choice.Size()
	}
	return n
}

func (m *BFSecretChoice_VesContainerRegistryPassword) Size() (n int) {
	var l int
	_ = l
	n += 2
	return n
}
func (m *BFSecretChoice_VesAlertReceiverSlackUrl) Size() (n int) {
	var l int
	_ = l
	n += 2
	return n
}
func (m *BFSecretChoice_VesAlertReceiverPagerdutyRoutingKey) Size() (n int) {
	var l int
	_ = l
	n += 2
	return n
}
func (m *BFSecretChoice_VesAlertReceiverOpsgenieApiKey) Size() (n int) {
	var l int
	_ = l
	n += 2
	return n
}
func (m *BFSecretChoice_VesTerraformJobViewSite) Size() (n int) {
	var l int
	_ = l
	n += 2
	return n
}
func (m *ReEncryptSecretItemType) Size() (n int) {
	var l int
	_ = l
	l = len(m.FieldPath)
	if l > 0 {
		n += 1 + l + sovOptions(uint64(l))
	}
	l = len(m.PolicyName)
	if l > 0 {
		n += 1 + l + sovOptions(uint64(l))
	}
	return n
}

func (m *ReEncryptSecretsType) Size() (n int) {
	var l int
	_ = l
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovOptions(uint64(l))
		}
	}
	return n
}

func (m *ServiceSlugInfo) Size() (n int) {
	var l int
	_ = l
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovOptions(uint64(l))
	}
	l = len(m.Daemon)
	if l > 0 {
		n += 1 + l + sovOptions(uint64(l))
	}
	return n
}

func (m *ServiceSlugChoice) Size() (n int) {
	var l int
	_ = l
	if m.Choice != nil {
		n += m.Choice.Size()
	}
	return n
}

func (m *ServiceSlugChoice_Alert) Size() (n int) {
	var l int
	_ = l
	n += 2
	return n
}
func (m *ServiceSlugChoice_Config) Size() (n int) {
	var l int
	_ = l
	n += 2
	return n
}
func (m *ServiceSlugChoice_Data) Size() (n int) {
	var l int
	_ = l
	n += 2
	return n
}
func (m *ServiceSlugChoice_Infraprotect) Size() (n int) {
	var l int
	_ = l
	n += 2
	return n
}
func (m *ServiceSlugChoice_Kms) Size() (n int) {
	var l int
	_ = l
	n += 2
	return n
}
func (m *ServiceSlugChoice_Ml) Size() (n int) {
	var l int
	_ = l
	n += 2
	return n
}
func (m *ServiceSlugChoice_Operate) Size() (n int) {
	var l int
	_ = l
	n += 2
	return n
}
func (m *ServiceSlugChoice_Register) Size() (n int) {
	var l int
	_ = l
	n += 2
	return n
}
func (m *ServiceSlugChoice_SecretManagement) Size() (n int) {
	var l int
	_ = l
	n += 2
	return n
}
func (m *ServiceSlugChoice_Terraform) Size() (n int) {
	var l int
	_ = l
	n += 2
	return n
}
func (m *ServiceSlugChoice_Tpm) Size() (n int) {
	var l int
	_ = l
	n += 2
	return n
}
func (m *ServiceSlugChoice_Uam) Size() (n int) {
	var l int
	_ = l
	n += 2
	return n
}
func (m *ServiceSlugChoice_Web) Size() (n int) {
	var l int
	_ = l
	n += 2
	return n
}
func (m *ServiceInfo) Size() (n int) {
	var l int
	_ = l
	l = len(m.Daemon)
	if l > 0 {
		n += 1 + l + sovOptions(uint64(l))
	}
	if len(m.Locations) > 0 {
		for _, s := range m.Locations {
			l = len(s)
			n += 1 + l + sovOptions(uint64(l))
		}
	}
	return n
}

func (m *QuotaResourceKeyInfo) Size() (n int) {
	var l int
	_ = l
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovOptions(uint64(l))
	}
	l = len(m.Daemon)
	if l > 0 {
		n += 1 + l + sovOptions(uint64(l))
	}
	return n
}

func (m *APIGroupElementItem) Size() (n int) {
	var l int
	_ = l
	l = len(m.Method)
	if l > 0 {
		n += 1 + l + sovOptions(uint64(l))
	}
	l = len(m.PathRegex)
	if l > 0 {
		n += 1 + l + sovOptions(uint64(l))
	}
	return n
}

func (m *APIGroupElementInfo) Size() (n int) {
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovOptions(uint64(l))
	}
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovOptions(uint64(l))
		}
	}
	return n
}

func (m *APIGroupNameMap) Size() (n int) {
	var l int
	_ = l
	if len(m.RpcMappings) > 0 {
		for k, v := range m.RpcMappings {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovOptions(uint64(len(k))) + 1 + len(v) + sovOptions(uint64(len(v)))
			n += mapEntrySize + 1 + sovOptions(uint64(mapEntrySize))
		}
	}
	return n
}

func sovOptions(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozOptions(x uint64) (n int) {
	return sovOptions(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *BFSecretInfo) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&BFSecretInfo{`,
		`PolicyName:` + fmt.Sprintf("%v", this.PolicyName) + `,`,
		`PolicyId:` + fmt.Sprintf("%v", this.PolicyId) + `,`,
		`GcServices:` + fmt.Sprintf("%v", this.GcServices) + `,`,
		`NonGcServices:` + fmt.Sprintf("%v", this.NonGcServices) + `,`,
		`GcJobs:` + fmt.Sprintf("%v", this.GcJobs) + `,`,
		`}`,
	}, "")
	return s
}
func (this *BFSecretChoice) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&BFSecretChoice{`,
		`Choice:` + fmt.Sprintf("%v", this.Choice) + `,`,
		`}`,
	}, "")
	return s
}
func (this *BFSecretChoice_VesContainerRegistryPassword) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&BFSecretChoice_VesContainerRegistryPassword{`,
		`VesContainerRegistryPassword:` + fmt.Sprintf("%v", this.VesContainerRegistryPassword) + `,`,
		`}`,
	}, "")
	return s
}
func (this *BFSecretChoice_VesAlertReceiverSlackUrl) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&BFSecretChoice_VesAlertReceiverSlackUrl{`,
		`VesAlertReceiverSlackUrl:` + fmt.Sprintf("%v", this.VesAlertReceiverSlackUrl) + `,`,
		`}`,
	}, "")
	return s
}
func (this *BFSecretChoice_VesAlertReceiverPagerdutyRoutingKey) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&BFSecretChoice_VesAlertReceiverPagerdutyRoutingKey{`,
		`VesAlertReceiverPagerdutyRoutingKey:` + fmt.Sprintf("%v", this.VesAlertReceiverPagerdutyRoutingKey) + `,`,
		`}`,
	}, "")
	return s
}
func (this *BFSecretChoice_VesAlertReceiverOpsgenieApiKey) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&BFSecretChoice_VesAlertReceiverOpsgenieApiKey{`,
		`VesAlertReceiverOpsgenieApiKey:` + fmt.Sprintf("%v", this.VesAlertReceiverOpsgenieApiKey) + `,`,
		`}`,
	}, "")
	return s
}
func (this *BFSecretChoice_VesTerraformJobViewSite) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&BFSecretChoice_VesTerraformJobViewSite{`,
		`VesTerraformJobViewSite:` + fmt.Sprintf("%v", this.VesTerraformJobViewSite) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReEncryptSecretItemType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReEncryptSecretItemType{`,
		`FieldPath:` + fmt.Sprintf("%v", this.FieldPath) + `,`,
		`PolicyName:` + fmt.Sprintf("%v", this.PolicyName) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReEncryptSecretsType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReEncryptSecretsType{`,
		`Items:` + strings.Replace(fmt.Sprintf("%v", this.Items), "ReEncryptSecretItemType", "ReEncryptSecretItemType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ServiceSlugInfo) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ServiceSlugInfo{`,
		`Value:` + fmt.Sprintf("%v", this.Value) + `,`,
		`Daemon:` + fmt.Sprintf("%v", this.Daemon) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ServiceSlugChoice) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ServiceSlugChoice{`,
		`Choice:` + fmt.Sprintf("%v", this.Choice) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ServiceSlugChoice_Alert) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ServiceSlugChoice_Alert{`,
		`Alert:` + fmt.Sprintf("%v", this.Alert) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ServiceSlugChoice_Config) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ServiceSlugChoice_Config{`,
		`Config:` + fmt.Sprintf("%v", this.Config) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ServiceSlugChoice_Data) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ServiceSlugChoice_Data{`,
		`Data:` + fmt.Sprintf("%v", this.Data) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ServiceSlugChoice_Infraprotect) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ServiceSlugChoice_Infraprotect{`,
		`Infraprotect:` + fmt.Sprintf("%v", this.Infraprotect) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ServiceSlugChoice_Kms) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ServiceSlugChoice_Kms{`,
		`Kms:` + fmt.Sprintf("%v", this.Kms) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ServiceSlugChoice_Ml) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ServiceSlugChoice_Ml{`,
		`Ml:` + fmt.Sprintf("%v", this.Ml) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ServiceSlugChoice_Operate) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ServiceSlugChoice_Operate{`,
		`Operate:` + fmt.Sprintf("%v", this.Operate) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ServiceSlugChoice_Register) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ServiceSlugChoice_Register{`,
		`Register:` + fmt.Sprintf("%v", this.Register) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ServiceSlugChoice_SecretManagement) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ServiceSlugChoice_SecretManagement{`,
		`SecretManagement:` + fmt.Sprintf("%v", this.SecretManagement) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ServiceSlugChoice_Terraform) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ServiceSlugChoice_Terraform{`,
		`Terraform:` + fmt.Sprintf("%v", this.Terraform) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ServiceSlugChoice_Tpm) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ServiceSlugChoice_Tpm{`,
		`Tpm:` + fmt.Sprintf("%v", this.Tpm) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ServiceSlugChoice_Uam) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ServiceSlugChoice_Uam{`,
		`Uam:` + fmt.Sprintf("%v", this.Uam) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ServiceSlugChoice_Web) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ServiceSlugChoice_Web{`,
		`Web:` + fmt.Sprintf("%v", this.Web) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ServiceInfo) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ServiceInfo{`,
		`Daemon:` + fmt.Sprintf("%v", this.Daemon) + `,`,
		`Locations:` + fmt.Sprintf("%v", this.Locations) + `,`,
		`}`,
	}, "")
	return s
}
func (this *QuotaResourceKeyInfo) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&QuotaResourceKeyInfo{`,
		`Value:` + fmt.Sprintf("%v", this.Value) + `,`,
		`Daemon:` + fmt.Sprintf("%v", this.Daemon) + `,`,
		`}`,
	}, "")
	return s
}
func (this *APIGroupElementItem) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&APIGroupElementItem{`,
		`Method:` + fmt.Sprintf("%v", this.Method) + `,`,
		`PathRegex:` + fmt.Sprintf("%v", this.PathRegex) + `,`,
		`}`,
	}, "")
	return s
}
func (this *APIGroupElementInfo) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&APIGroupElementInfo{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Items:` + strings.Replace(fmt.Sprintf("%v", this.Items), "APIGroupElementItem", "APIGroupElementItem", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *APIGroupNameMap) String() string {
	if this == nil {
		return "nil"
	}
	keysForRpcMappings := make([]string, 0, len(this.RpcMappings))
	for k, _ := range this.RpcMappings {
		keysForRpcMappings = append(keysForRpcMappings, k)
	}
	sortkeys.Strings(keysForRpcMappings)
	mapStringForRpcMappings := "map[string]string{"
	for _, k := range keysForRpcMappings {
		mapStringForRpcMappings += fmt.Sprintf("%v: %v,", k, this.RpcMappings[k])
	}
	mapStringForRpcMappings += "}"
	s := strings.Join([]string{`&APIGroupNameMap{`,
		`RpcMappings:` + mapStringForRpcMappings + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringOptions(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *BFSecretInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOptions
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BFSecretInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BFSecretInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PolicyName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOptions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOptions
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PolicyName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PolicyId", wireType)
			}
			m.PolicyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOptions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PolicyId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GcServices", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOptions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOptions
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GcServices = append(m.GcServices, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NonGcServices", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOptions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOptions
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NonGcServices = append(m.NonGcServices, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GcJobs", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOptions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOptions
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GcJobs = append(m.GcJobs, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOptions(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOptions
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BFSecretChoice) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOptions
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BFSecretChoice: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BFSecretChoice: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VesContainerRegistryPassword", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOptions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.Choice = &BFSecretChoice_VesContainerRegistryPassword{b}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VesAlertReceiverSlackUrl", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOptions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.Choice = &BFSecretChoice_VesAlertReceiverSlackUrl{b}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VesAlertReceiverPagerdutyRoutingKey", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOptions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.Choice = &BFSecretChoice_VesAlertReceiverPagerdutyRoutingKey{b}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VesAlertReceiverOpsgenieApiKey", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOptions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.Choice = &BFSecretChoice_VesAlertReceiverOpsgenieApiKey{b}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VesTerraformJobViewSite", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOptions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.Choice = &BFSecretChoice_VesTerraformJobViewSite{b}
		default:
			iNdEx = preIndex
			skippy, err := skipOptions(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOptions
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReEncryptSecretItemType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOptions
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReEncryptSecretItemType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReEncryptSecretItemType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FieldPath", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOptions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOptions
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FieldPath = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PolicyName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOptions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOptions
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PolicyName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOptions(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOptions
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReEncryptSecretsType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOptions
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReEncryptSecretsType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReEncryptSecretsType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOptions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOptions
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &ReEncryptSecretItemType{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOptions(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOptions
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ServiceSlugInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOptions
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ServiceSlugInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ServiceSlugInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOptions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOptions
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Daemon", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOptions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOptions
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Daemon = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOptions(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOptions
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ServiceSlugChoice) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOptions
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ServiceSlugChoice: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ServiceSlugChoice: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Alert", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOptions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.Choice = &ServiceSlugChoice_Alert{b}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Config", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOptions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.Choice = &ServiceSlugChoice_Config{b}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOptions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.Choice = &ServiceSlugChoice_Data{b}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Infraprotect", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOptions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.Choice = &ServiceSlugChoice_Infraprotect{b}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Kms", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOptions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.Choice = &ServiceSlugChoice_Kms{b}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ml", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOptions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.Choice = &ServiceSlugChoice_Ml{b}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Operate", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOptions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.Choice = &ServiceSlugChoice_Operate{b}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Register", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOptions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.Choice = &ServiceSlugChoice_Register{b}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SecretManagement", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOptions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.Choice = &ServiceSlugChoice_SecretManagement{b}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Terraform", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOptions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.Choice = &ServiceSlugChoice_Terraform{b}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tpm", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOptions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.Choice = &ServiceSlugChoice_Tpm{b}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uam", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOptions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.Choice = &ServiceSlugChoice_Uam{b}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Web", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOptions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.Choice = &ServiceSlugChoice_Web{b}
		default:
			iNdEx = preIndex
			skippy, err := skipOptions(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOptions
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ServiceInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOptions
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ServiceInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ServiceInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Daemon", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOptions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOptions
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Daemon = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Locations", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOptions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOptions
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Locations = append(m.Locations, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOptions(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOptions
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QuotaResourceKeyInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOptions
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuotaResourceKeyInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuotaResourceKeyInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOptions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOptions
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Daemon", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOptions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOptions
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Daemon = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOptions(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOptions
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *APIGroupElementItem) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOptions
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: APIGroupElementItem: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: APIGroupElementItem: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Method", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOptions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOptions
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Method = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PathRegex", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOptions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOptions
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PathRegex = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOptions(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOptions
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *APIGroupElementInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOptions
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: APIGroupElementInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: APIGroupElementInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOptions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOptions
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOptions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOptions
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &APIGroupElementItem{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOptions(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOptions
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *APIGroupNameMap) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOptions
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: APIGroupNameMap: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: APIGroupNameMap: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RpcMappings", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOptions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOptions
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RpcMappings == nil {
				m.RpcMappings = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowOptions
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowOptions
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthOptions
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowOptions
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthOptions
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipOptions(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthOptions
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.RpcMappings[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOptions(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOptions
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipOptions(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowOptions
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowOptions
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowOptions
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthOptions
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowOptions
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipOptions(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthOptions = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowOptions   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("ves.io/schema/vesenv/options.proto", fileDescriptorOptions) }

var fileDescriptorOptions = []byte{
	// 1670 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x57, 0xcb, 0x6f, 0x23, 0x49,
	0x19, 0x77, 0xc7, 0xb1, 0x13, 0x57, 0x92, 0x89, 0xd3, 0x93, 0xdd, 0x94, 0xb2, 0xb3, 0x9e, 0xe0,
	0xc0, 0x32, 0xbb, 0xd0, 0x8e, 0xb4, 0xab, 0x05, 0x64, 0x01, 0xab, 0x64, 0x98, 0x59, 0xcf, 0x2c,
	0x61, 0xb3, 0x9d, 0x59, 0xb4, 0xc3, 0x43, 0xad, 0x72, 0xfb, 0x73, 0xa7, 0xc6, 0xdd, 0x5d, 0x4d,
	0x55, 0x77, 0x27, 0x86, 0xcb, 0x4a, 0x20, 0x31, 0x9c, 0xe0, 0xc6, 0xf3, 0x64, 0x2e, 0x1c, 0x10,
	0x87, 0x88, 0x97, 0xe4, 0x13, 0x2f, 0x89, 0xe3, 0x1e, 0x39, 0xee, 0x84, 0x0b, 0xc7, 0xfd, 0x03,
	0x40, 0x42, 0x55, 0x5d, 0x9d, 0x76, 0x3c, 0x66, 0x26, 0xc3, 0xc9, 0xfd, 0xfd, 0xea, 0x7b, 0xfc,
	0xaa, 0xfa, 0xfb, 0x7e, 0x5d, 0x46, 0xcd, 0x14, 0x44, 0x8b, 0xb2, 0x1d, 0xe1, 0x1e, 0x41, 0x40,
	0x76, 0x52, 0x10, 0x10, 0xa6, 0x3b, 0x2c, 0x8a, 0x29, 0x0b, 0x45, 0x2b, 0xe2, 0x2c, 0x66, 0xe6,
	0x7a, 0xe6, 0xd3, 0xca, 0x7c, 0x5a, 0x99, 0xcf, 0xa6, 0xe5, 0xd1, 0xf8, 0x28, 0xe9, 0xb6, 0x5c,
	0x16, 0xec, 0x78, 0xcc, 0x63, 0x3b, 0xca, 0xb9, 0x9b, 0xf4, 0x95, 0xa5, 0x0c, 0xf5, 0x94, 0x25,
	0xd9, 0xdc, 0xf2, 0x18, 0xf3, 0x7c, 0x28, 0xbc, 0x7a, 0x20, 0x5c, 0x4e, 0xa3, 0x98, 0xf1, 0xcc,
	0xa3, 0xf9, 0x1b, 0x03, 0x2d, 0xef, 0xdd, 0x3e, 0x04, 0x97, 0x43, 0x7c, 0x27, 0xec, 0x33, 0xf3,
	0x3a, 0x5a, 0x8a, 0x98, 0x4f, 0xdd, 0xa1, 0x13, 0x92, 0x00, 0xb0, 0xb1, 0x65, 0xdc, 0xa8, 0xd9,
	0x28, 0x83, 0xbe, 0x42, 0x02, 0x30, 0x5f, 0x40, 0x35, 0xed, 0x40, 0x7b, 0x78, 0x6e, 0xcb, 0xb8,
	0x51, 0xb1, 0x17, 0x33, 0xe0, 0x4e, 0x4f, 0x46, 0x7b, 0xae, 0x23, 0x80, 0xa7, 0xd4, 0x05, 0x81,
	0xcb, 0x5b, 0x65, 0x19, 0xed, 0xb9, 0x87, 0x1a, 0x31, 0x5f, 0x42, 0xab, 0x21, 0x0b, 0x9d, 0x49,
	0xa7, 0x79, 0xe5, 0xb4, 0x12, 0xb2, 0xf0, 0xcd, 0xc2, 0x6f, 0x03, 0x2d, 0x78, 0xae, 0xf3, 0x80,
	0x75, 0x05, 0xae, 0xa8, 0xf5, 0xaa, 0xe7, 0xde, 0x65, 0x5d, 0xd1, 0xfc, 0x63, 0x15, 0x5d, 0xc9,
	0x09, 0xdf, 0x3c, 0x62, 0xd4, 0x05, 0xf3, 0x87, 0x06, 0xba, 0x9e, 0x82, 0x70, 0x5c, 0x16, 0xc6,
	0x84, 0x86, 0xc0, 0x1d, 0x0e, 0x1e, 0x15, 0x31, 0x1f, 0x3a, 0x11, 0x11, 0xe2, 0x98, 0xf1, 0x9e,
	0xda, 0xc7, 0xe2, 0xde, 0xed, 0xd3, 0x31, 0xde, 0x43, 0xf2, 0xc0, 0x2d, 0xca, 0xac, 0x73, 0x7f,
	0x2b, 0xf7, 0xb7, 0x44, 0x04, 0xae, 0xe5, 0xb9, 0xd9, 0x6f, 0x1e, 0x5c, 0xff, 0xd3, 0xf7, 0xbe,
	0xb0, 0x39, 0x4f, 0x06, 0x84, 0x37, 0x2b, 0x5c, 0xfe, 0x74, 0x4a, 0xf6, 0xb5, 0x14, 0xc4, 0xcd,
	0x3c, 0xde, 0xd6, 0xe1, 0x07, 0x3a, 0x40, 0x32, 0x92, 0x0e, 0x0e, 0xf1, 0x81, 0xc7, 0x0e, 0x07,
	0x17, 0x68, 0x0a, 0xdc, 0x11, 0x3e, 0x71, 0x07, 0x4e, 0xc2, 0x7d, 0x75, 0x6e, 0x8b, 0x7b, 0xfb,
	0xa7, 0x63, 0x7c, 0x07, 0xbd, 0xae, 0xe9, 0x28, 0x67, 0x2b, 0x77, 0xbe, 0x48, 0xa5, 0x40, 0x65,
	0x0a, 0x2b, 0xe1, 0x7e, 0xfd, 0xcf, 0x39, 0xa9, 0xcd, 0x2a, 0x89, 0x8f, 0x20, 0x24, 0x9d, 0x92,
	0x8d, 0x53, 0x10, 0xbb, 0x32, 0x8d, 0xad, 0xfd, 0x0f, 0xa5, 0xfb, 0xbb, 0xdc, 0x37, 0x4f, 0x0d,
	0x74, 0x63, 0x06, 0xa3, 0x88, 0x78, 0xc0, 0x7b, 0x49, 0x3c, 0x74, 0x38, 0x4b, 0x62, 0x1a, 0x7a,
	0xce, 0x00, 0x86, 0xb8, 0xac, 0xd8, 0xdd, 0x3f, 0x1d, 0xe3, 0x77, 0xd1, 0xee, 0xb3, 0xb0, 0x3b,
	0x4f, 0x67, 0xe9, 0x74, 0xd6, 0x00, 0x86, 0xf5, 0xbf, 0xcc, 0x60, 0xba, 0x3d, 0xcd, 0xf4, 0x20,
	0x0f, 0xb5, 0xb3, 0xc8, 0xb7, 0x60, 0x68, 0xfe, 0xd2, 0x40, 0xdb, 0x33, 0x48, 0xb3, 0x48, 0x78,
	0x10, 0x52, 0x70, 0x48, 0x44, 0x15, 0xdf, 0x79, 0xc5, 0xf7, 0xde, 0xe9, 0x18, 0x1f, 0xa0, 0xcf,
	0x3f, 0x0b, 0xdf, 0x3c, 0x93, 0x45, 0x22, 0xaa, 0xa8, 0xfe, 0x75, 0x06, 0xd5, 0xc6, 0x34, 0xd5,
	0xb7, 0x75, 0xd4, 0x6e, 0x44, 0x25, 0xcb, 0x5f, 0x18, 0xe8, 0x05, 0xc9, 0x32, 0x06, 0xce, 0x49,
	0x9f, 0xf1, 0x40, 0xb6, 0xad, 0x93, 0x52, 0x38, 0x76, 0x04, 0x8d, 0x01, 0x57, 0x14, 0xbb, 0x6f,
	0x9c, 0x8e, 0xf1, 0x7b, 0xe8, 0x35, 0xcd, 0x4e, 0xae, 0x5a, 0x72, 0xf5, 0x22, 0xb1, 0x1e, 0x44,
	0x3e, 0x1b, 0x06, 0x10, 0xc6, 0x96, 0xeb, 0xb3, 0xa4, 0x67, 0xb9, 0x1c, 0x7a, 0xf5, 0xbf, 0xe5,
	0xa4, 0x5e, 0xd9, 0x38, 0xaf, 0x61, 0x3d, 0x60, 0xdd, 0x22, 0x4b, 0xa7, 0x64, 0x6f, 0xa4, 0x20,
	0xee, 0xe5, 0xab, 0x77, 0x59, 0xf7, 0xab, 0x14, 0x8e, 0x0f, 0x69, 0x0c, 0x7b, 0x8b, 0xa8, 0xea,
	0xaa, 0x39, 0x69, 0xde, 0x47, 0x1b, 0x36, 0xdc, 0x0a, 0x5d, 0x3e, 0x8c, 0x62, 0x3d, 0xf1, 0x31,
	0x04, 0xf7, 0x86, 0x11, 0x98, 0x2f, 0x22, 0xd4, 0xa7, 0xe0, 0xf7, 0x9c, 0x88, 0xc4, 0x47, 0x7a,
	0xe8, 0x6b, 0x0a, 0x39, 0x20, 0xf1, 0xd1, 0xb4, 0x28, 0xcc, 0x4d, 0x8b, 0x42, 0xf3, 0xeb, 0x68,
	0x7d, 0x2a, 0xb5, 0x50, 0x79, 0x6f, 0xa2, 0x0a, 0x8d, 0x21, 0x10, 0xd8, 0xd8, 0x2a, 0xdf, 0x58,
	0x7a, 0xd5, 0x6a, 0xcd, 0x52, 0xb5, 0xd6, 0xff, 0x60, 0x65, 0x67, 0xb1, 0xcd, 0x37, 0xd0, 0xaa,
	0xd6, 0x85, 0x43, 0x3f, 0xf1, 0x94, 0x4a, 0xad, 0xa3, 0x4a, 0x4a, 0xfc, 0x24, 0xd7, 0xa7, 0xcc,
	0x30, 0x9f, 0x47, 0xd5, 0x1e, 0x81, 0x80, 0x85, 0x9a, 0xa1, 0xb6, 0x9a, 0x3f, 0xae, 0xa0, 0xb5,
	0x89, 0x0c, 0x5a, 0x36, 0x3e, 0x85, 0x2a, 0xaa, 0x49, 0xb4, 0x36, 0x5c, 0x1d, 0x8d, 0xf1, 0xaa,
	0x86, 0xcc, 0xe2, 0xed, 0x6b, 0xe0, 0xd3, 0xa8, 0xea, 0xb2, 0xb0, 0x4f, 0x3d, 0x3d, 0xba, 0xe6,
	0x68, 0x8c, 0xaf, 0xe4, 0x98, 0x39, 0xaf, 0x55, 0x21, 0xb7, 0x5f, 0x42, 0xf3, 0x3d, 0x12, 0x13,
	0x3d, 0x48, 0xf5, 0xd1, 0x18, 0x2f, 0x67, 0x88, 0x39, 0xdf, 0x65, 0x7e, 0xdc, 0x29, 0xd9, 0x99,
	0xb5, 0x87, 0x96, 0x69, 0xd8, 0xe7, 0x44, 0x6a, 0x31, 0xb8, 0xb1, 0x6e, 0xe4, 0x6b, 0xa3, 0x31,
	0xc6, 0x17, 0x57, 0xcc, 0x45, 0xf5, 0x30, 0x88, 0x69, 0xa7, 0x64, 0x5f, 0x5c, 0xf9, 0x38, 0x2a,
	0x0f, 0x02, 0xa1, 0xbb, 0x2c, 0x2b, 0x25, 0x01, 0xb3, 0x32, 0x80, 0x61, 0x24, 0x49, 0x29, 0x6b,
	0x1b, 0xcd, 0x05, 0x3e, 0xae, 0x2a, 0xa7, 0xb5, 0xd1, 0x18, 0xaf, 0x48, 0xdb, 0x5c, 0x20, 0x22,
	0x06, 0x4e, 0x4f, 0x3a, 0x25, 0x5b, 0x9a, 0x2d, 0xb4, 0xc0, 0x22, 0xe0, 0x24, 0x06, 0xbc, 0x30,
	0xb1, 0xcb, 0x1c, 0x34, 0xcb, 0x34, 0x8a, 0x3a, 0x25, 0xfb, 0xdc, 0x7e, 0x1d, 0x2d, 0x66, 0xca,
	0x09, 0x1c, 0x2f, 0xaa, 0x80, 0x8d, 0xd1, 0x18, 0x5f, 0x2d, 0x50, 0x73, 0x21, 0x20, 0x09, 0xa7,
	0xae, 0x6c, 0xd0, 0x02, 0x7c, 0x07, 0xad, 0x09, 0xf5, 0xa2, 0x9d, 0x80, 0x84, 0xc4, 0x03, 0xd9,
	0xef, 0xb8, 0xa6, 0xe2, 0x9b, 0xa3, 0x31, 0x6e, 0xcc, 0x58, 0x36, 0x6b, 0x5d, 0x9f, 0x86, 0xbd,
	0x3e, 0xf3, 0x7b, 0x9d, 0x92, 0x5d, 0xcf, 0xd6, 0xf7, 0x8b, 0xe5, 0xcf, 0xa2, 0xda, 0xf9, 0x68,
	0x60, 0x34, 0x41, 0xa5, 0x80, 0xcd, 0x6a, 0x9a, 0xf8, 0x91, 0xda, 0xeb, 0x04, 0xf8, 0x32, 0x2a,
	0xc7, 0x51, 0x80, 0x97, 0x54, 0xc8, 0x73, 0xa3, 0x31, 0x5e, 0x53, 0x80, 0x89, 0xe2, 0x28, 0xc8,
	0xca, 0xab, 0x23, 0x94, 0xd0, 0x36, 0x2a, 0x27, 0x24, 0xc0, 0xcb, 0xca, 0x75, 0x75, 0x34, 0xc6,
	0x4b, 0x0a, 0x30, 0xe7, 0x61, 0x78, 0x2c, 0x3b, 0x45, 0x19, 0xdb, 0xa8, 0x7c, 0x0c, 0x5d, 0xbc,
	0x32, 0xe9, 0x74, 0x0c, 0xdd, 0xc2, 0xe9, 0x18, 0xba, 0x13, 0x23, 0x79, 0x13, 0x2d, 0xe9, 0xc6,
	0x54, 0x6d, 0x5d, 0x34, 0xb0, 0x31, 0xd9, 0xc0, 0xe6, 0x35, 0x54, 0xf3, 0x99, 0x4b, 0xd4, 0xfd,
	0x00, 0xcf, 0xa9, 0xef, 0x61, 0x01, 0x34, 0xbf, 0x84, 0xd6, 0xdf, 0x49, 0x58, 0x4c, 0x6c, 0x10,
	0x2c, 0xe1, 0x2e, 0xbc, 0x05, 0xc3, 0xff, 0x63, 0x48, 0xbe, 0x8c, 0xae, 0xee, 0x1e, 0xdc, 0x79,
	0x93, 0xb3, 0x24, 0xba, 0xe5, 0xab, 0x53, 0x95, 0x73, 0x28, 0xdd, 0x03, 0x88, 0x8f, 0x58, 0x2f,
	0xa7, 0x94, 0x59, 0x52, 0x31, 0xa4, 0x56, 0xc8, 0x4f, 0x2d, 0x9c, 0xe8, 0x54, 0x35, 0x89, 0xd8,
	0x12, 0x68, 0x3e, 0x78, 0x3c, 0x9b, 0xa4, 0x64, 0xa2, 0xf9, 0x89, 0x6b, 0x85, 0x7a, 0x36, 0xdf,
	0xc8, 0x35, 0x62, 0x4e, 0x69, 0xc4, 0xcb, 0xb3, 0x35, 0x62, 0x06, 0xb7, 0x5c, 0x1f, 0x7e, 0x6d,
	0xa0, 0xd5, 0x7c, 0x59, 0xaa, 0xd1, 0x3e, 0x89, 0xcc, 0xfb, 0x68, 0x99, 0x47, 0xae, 0x13, 0x90,
	0x28, 0xa2, 0xa1, 0x97, 0xeb, 0xcf, 0x67, 0x9e, 0x9c, 0x5b, 0x07, 0xb7, 0xec, 0xc8, 0xdd, 0xd7,
	0x81, 0xb7, 0xc2, 0x98, 0x0f, 0xed, 0x25, 0x5e, 0x20, 0x9b, 0x5f, 0x44, 0xf5, 0x69, 0x07, 0xb3,
	0x8e, 0xca, 0xf2, 0x43, 0x94, 0x6d, 0x4b, 0x3e, 0x16, 0x87, 0x3f, 0x37, 0x71, 0xf8, 0xed, 0xb9,
	0xcf, 0x19, 0xed, 0x07, 0x68, 0x45, 0xa4, 0xae, 0x23, 0xfc, 0xc4, 0x73, 0xa8, 0x3c, 0x94, 0x17,
	0x5b, 0xd9, 0x35, 0xad, 0x95, 0x5f, 0xd3, 0x5a, 0xb7, 0xa5, 0xf2, 0xbe, 0x9d, 0xdd, 0x07, 0xf1,
	0x6f, 0xbf, 0x2f, 0x65, 0x64, 0xe9, 0xd5, 0x4f, 0xcc, 0x26, 0x3f, 0x25, 0x8d, 0xf6, 0x92, 0x48,
	0xdd, 0xdc, 0x68, 0x0b, 0xb4, 0xfa, 0x2d, 0xd9, 0x1a, 0x0e, 0x1f, 0xc0, 0xf0, 0x52, 0xd5, 0x7e,
	0xa7, 0xab, 0xbd, 0x32, 0xbb, 0xda, 0xac, 0x46, 0xb3, 0x57, 0x54, 0x0d, 0x7b, 0x90, 0x99, 0x6d,
	0x8a, 0xae, 0x74, 0xfb, 0x8e, 0x9e, 0xe1, 0xcb, 0xd4, 0xfc, 0xbd, 0xae, 0xd9, 0x9c, 0x5d, 0x73,
	0xf2, 0x7e, 0x6a, 0x2f, 0x77, 0xfb, 0x85, 0xd5, 0xfe, 0x26, 0x5a, 0x94, 0x67, 0x79, 0x99, 0x22,
	0x7f, 0xd0, 0x45, 0x3e, 0xf6, 0xc4, 0x63, 0x54, 0x35, 0x16, 0x44, 0xea, 0xaa, 0xf4, 0xdf, 0x35,
	0x10, 0x76, 0x79, 0xd2, 0xcb, 0x2f, 0xab, 0xd9, 0x4b, 0xcb, 0x66, 0xd7, 0xbc, 0xfe, 0x58, 0xbd,
	0x7d, 0x10, 0x82, 0x78, 0x90, 0x57, 0xfc, 0xc9, 0xc3, 0xac, 0xe2, 0x27, 0x9f, 0xfa, 0xe2, 0xb2,
	0x2f, 0x92, 0xfd, 0x9c, 0xac, 0xf5, 0x18, 0xdc, 0x7e, 0x0f, 0x6d, 0x28, 0x12, 0xf2, 0xba, 0xe3,
	0xc9, 0x3e, 0x75, 0x22, 0x0e, 0x7d, 0x7a, 0x02, 0xe2, 0xe9, 0x1c, 0x7e, 0xaa, 0x38, 0xd4, 0xec,
	0x75, 0x99, 0x61, 0x37, 0xa2, 0xaa, 0xcf, 0x0f, 0x74, 0x78, 0x7b, 0x88, 0xd6, 0xa7, 0x32, 0xcb,
	0x89, 0xbc, 0x44, 0xda, 0x9f, 0x3d, 0x7c, 0x62, 0x4f, 0x4e, 0x0d, 0x94, 0xbd, 0x36, 0x59, 0x5d,
	0x82, 0xa2, 0xfd, 0x1d, 0x64, 0x72, 0x70, 0x20, 0xfb, 0xee, 0xeb, 0x66, 0xb9, 0x44, 0xe1, 0x9f,
	0x3f, 0x7c, 0x62, 0x7b, 0xce, 0xba, 0x84, 0xd8, 0x75, 0x3e, 0x85, 0xb6, 0x3b, 0x68, 0x75, 0x7a,
	0xcb, 0x8d, 0x19, 0x95, 0xa5, 0xd0, 0xe5, 0x85, 0xff, 0xad, 0x0f, 0x72, 0x85, 0x5c, 0xd8, 0xc6,
	0xfb, 0x06, 0x7a, 0xbe, 0x48, 0x05, 0x99, 0x38, 0x65, 0xfd, 0xf8, 0xb4, 0x8c, 0xff, 0xd1, 0x5b,
	0xb9, 0xa4, 0xe0, 0xc9, 0xc6, 0xbc, 0x9a, 0x17, 0x9f, 0x00, 0xdb, 0xdf, 0x46, 0x57, 0x2f, 0xd7,
	0x9e, 0xba, 0xb3, 0xf2, 0xfa, 0x1f, 0xfe, 0xe0, 0x19, 0xdb, 0x73, 0x4d, 0x4c, 0x43, 0x7b, 0x27,
	0x1f, 0x3c, 0x6a, 0x94, 0xfe, 0xf1, 0xa8, 0x51, 0xfa, 0xe8, 0x51, 0xc3, 0x78, 0xff, 0xac, 0x61,
	0xfc, 0xea, 0xac, 0x61, 0xfc, 0xfd, 0xac, 0x61, 0x7c, 0x70, 0xd6, 0x30, 0x3e, 0x3c, 0x6b, 0x18,
	0xff, 0x3a, 0x6b, 0x94, 0x3e, 0x3a, 0x6b, 0x18, 0x3f, 0xfa, 0x67, 0xa3, 0xf4, 0xb5, 0xbb, 0x1e,
	0x8b, 0x06, 0x5e, 0x2b, 0x65, 0xbe, 0xfa, 0x00, 0xb7, 0x12, 0xb1, 0x53, 0x5c, 0x68, 0x23, 0xce,
	0x52, 0xda, 0x03, 0x6e, 0xe5, 0xcb, 0x3b, 0x51, 0xd7, 0x63, 0x3b, 0x70, 0x12, 0xeb, 0xbf, 0xc9,
	0x17, 0xfe, 0x2d, 0x77, 0xab, 0x6a, 0x5b, 0xaf, 0xfd, 0x37, 0x00, 0x00, 0xff, 0xff, 0xd0, 0xbc,
	0x9a, 0x67, 0x4c, 0x0f, 0x00, 0x00,
}
