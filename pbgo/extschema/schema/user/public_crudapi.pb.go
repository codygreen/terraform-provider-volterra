// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ves.io/schema/user/public_crudapi.proto

package user

import proto "github.com/gogo/protobuf/proto"
import golang_proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"
import _ "github.com/gogo/googleapis/google/api"
import _ "github.com/gogo/protobuf/types"
import ves_io_schema5 "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
import _ "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
import ves_io_schema4 "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
import _ "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/vesenv"
import _ "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"

import strconv "strconv"

import strings "strings"
import reflect "reflect"
import sortkeys "github.com/gogo/protobuf/sortkeys"

import context "golang.org/x/net/context"
import grpc "google.golang.org/grpc"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// GetResponseFormatCode
//
// x-displayName: "Get Response Format"
// This is the various forms that can be requested to be sent in the GetResponse
type GetResponseFormatCode int32

const (
	// x-displayName: "Default Format"
	// Default format of returned resource
	GET_RSP_FORMAT_DEFAULT GetResponseFormatCode = 0
	// x-displayName: "Create request Format"
	// Response should be in CreateRequest format
	GET_RSP_FORMAT_FOR_CREATE GetResponseFormatCode = 1
	// x-displayName: "Replace request format"
	// Response should be in ReplaceRequest format
	GET_RSP_FORMAT_FOR_REPLACE GetResponseFormatCode = 2
	// x-displayName: "Status format"
	// Response should be in StatusObject(s) format
	GET_RSP_FORMAT_STATUS GetResponseFormatCode = 3
	// x-displayName: "GetSpecType format"
	// Response should be in format of GetSpecType
	GET_RSP_FORMAT_READ GetResponseFormatCode = 4
	// x-displayName: "Referring Objects"
	// Response should have other objects referring to this object
	GET_RSP_FORMAT_REFERRING_OBJECTS GetResponseFormatCode = 5
)

var GetResponseFormatCode_name = map[int32]string{
	0: "GET_RSP_FORMAT_DEFAULT",
	1: "GET_RSP_FORMAT_FOR_CREATE",
	2: "GET_RSP_FORMAT_FOR_REPLACE",
	3: "GET_RSP_FORMAT_STATUS",
	4: "GET_RSP_FORMAT_READ",
	5: "GET_RSP_FORMAT_REFERRING_OBJECTS",
}
var GetResponseFormatCode_value = map[string]int32{
	"GET_RSP_FORMAT_DEFAULT":           0,
	"GET_RSP_FORMAT_FOR_CREATE":        1,
	"GET_RSP_FORMAT_FOR_REPLACE":       2,
	"GET_RSP_FORMAT_STATUS":            3,
	"GET_RSP_FORMAT_READ":              4,
	"GET_RSP_FORMAT_REFERRING_OBJECTS": 5,
}

func (GetResponseFormatCode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorPublicCrudapi, []int{0}
}

// CreateRequest is used to create an instance of user
//
// x-displayName: "Create Request"
// This is the input message of the 'Create' RPC
type CreateRequest struct {
	// metadata
	//
	// x-displayName: "Metadata"
	// Common attributes that can be set during create for all configuration objects like name, labels etc.
	Metadata *ves_io_schema4.ObjectCreateMetaType `protobuf:"bytes,1,opt,name=metadata" json:"metadata,omitempty"`
	// spec
	//
	// x-displayName: "Spec"
	// A specification of the configuration object to be created
	Spec *CreateSpecType `protobuf:"bytes,2,opt,name=spec" json:"spec,omitempty"`
}

func (m *CreateRequest) Reset()                    { *m = CreateRequest{} }
func (*CreateRequest) ProtoMessage()               {}
func (*CreateRequest) Descriptor() ([]byte, []int) { return fileDescriptorPublicCrudapi, []int{0} }

func (m *CreateRequest) GetMetadata() *ves_io_schema4.ObjectCreateMetaType {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *CreateRequest) GetSpec() *CreateSpecType {
	if m != nil {
		return m.Spec
	}
	return nil
}

type CreateResponse struct {
	// metadata
	//
	// x-displayName: "Metadata"
	// Common attributes of the object like name, labels etc.
	Metadata *ves_io_schema4.ObjectGetMetaType `protobuf:"bytes,1,opt,name=metadata" json:"metadata,omitempty"`
	// system metadata
	//
	// x-displayName: "System Metadata"
	// System generated attributes all this object.
	SystemMetadata *ves_io_schema4.SystemObjectGetMetaType `protobuf:"bytes,3,opt,name=system_metadata,json=systemMetadata" json:"system_metadata,omitempty"`
	// spec
	//
	// x-displayName: "Spec"
	// A specification of the configuration object created
	Spec *GetSpecType `protobuf:"bytes,2,opt,name=spec" json:"spec,omitempty"`
}

func (m *CreateResponse) Reset()                    { *m = CreateResponse{} }
func (*CreateResponse) ProtoMessage()               {}
func (*CreateResponse) Descriptor() ([]byte, []int) { return fileDescriptorPublicCrudapi, []int{1} }

func (m *CreateResponse) GetMetadata() *ves_io_schema4.ObjectGetMetaType {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *CreateResponse) GetSystemMetadata() *ves_io_schema4.SystemObjectGetMetaType {
	if m != nil {
		return m.SystemMetadata
	}
	return nil
}

func (m *CreateResponse) GetSpec() *GetSpecType {
	if m != nil {
		return m.Spec
	}
	return nil
}

// ReplaceRequest is used to replace contents of a user
//
// x-displayName: "Replace Request"
// This is the input message of the 'Replace' RPC
type ReplaceRequest struct {
	// metadata
	//
	// x-displayName: "Metadata"
	// Common attributes that can be set during replace for all configuration objects like labels etc.
	Metadata *ves_io_schema4.ObjectReplaceMetaType `protobuf:"bytes,1,opt,name=metadata" json:"metadata,omitempty"`
	// spec
	//
	// x-displayName: "Spec"
	// A specification of the configuration object to be replaced
	Spec *ReplaceSpecType `protobuf:"bytes,2,opt,name=spec" json:"spec,omitempty"`
	// resource_version
	//
	// x-displayName: "Resource Version"
	// x-example: "42"
	// If provided, do the replace operation if the configuration object is still at 'resource_version'
	ResourceVersion string `protobuf:"bytes,3,opt,name=resource_version,json=resourceVersion,proto3" json:"resource_version,omitempty"`
}

func (m *ReplaceRequest) Reset()                    { *m = ReplaceRequest{} }
func (*ReplaceRequest) ProtoMessage()               {}
func (*ReplaceRequest) Descriptor() ([]byte, []int) { return fileDescriptorPublicCrudapi, []int{2} }

func (m *ReplaceRequest) GetMetadata() *ves_io_schema4.ObjectReplaceMetaType {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *ReplaceRequest) GetSpec() *ReplaceSpecType {
	if m != nil {
		return m.Spec
	}
	return nil
}

func (m *ReplaceRequest) GetResourceVersion() string {
	if m != nil {
		return m.ResourceVersion
	}
	return ""
}

type ReplaceResponse struct {
}

func (m *ReplaceResponse) Reset()                    { *m = ReplaceResponse{} }
func (*ReplaceResponse) ProtoMessage()               {}
func (*ReplaceResponse) Descriptor() ([]byte, []int) { return fileDescriptorPublicCrudapi, []int{3} }

// GetRequest is used to get different forms of a user
//
// x-displayName: "Get Request"
// This is the input message of the 'Get' RPC. Different forms of a resource
// for e.g. a ReplaceRequest form (for editing), a CreateRequest form (for
// creating new instance of user) etc. can be fetched
type GetRequest struct {
	// namespace
	//
	// x-displayName: "Namespace"
	// x-example: "ns1"
	// The namespace in which the configuration object is present
	Namespace string `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// name
	//
	// x-displayName: "Name"
	// x-example: "name"
	// The name of the configuration object to be fetched
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// response_format
	//
	// x-displayName: "Response Format"
	// The format in which the configuration object is to be fetched. This could be for example
	//     - in GetSpec form for the contents of object
	//     - in CreateRequest form to create a new similar object
	//     - to ReplaceRequest form to replace changeable values
	ResponseFormat GetResponseFormatCode `protobuf:"varint,3,opt,name=response_format,json=responseFormat,proto3,enum=ves.io.schema.user.GetResponseFormatCode" json:"response_format,omitempty"`
}

func (m *GetRequest) Reset()                    { *m = GetRequest{} }
func (*GetRequest) ProtoMessage()               {}
func (*GetRequest) Descriptor() ([]byte, []int) { return fileDescriptorPublicCrudapi, []int{4} }

func (m *GetRequest) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *GetRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *GetRequest) GetResponseFormat() GetResponseFormatCode {
	if m != nil {
		return m.ResponseFormat
	}
	return GET_RSP_FORMAT_DEFAULT
}

// GetResponse is the shape of a read user
//
// x-displayName: "Get Response"
// This is the output message of the 'Get' RPC
type GetResponse struct {
	// object
	//
	// x-displayName: "Object"
	Object *Object `protobuf:"bytes,1,opt,name=object" json:"object,omitempty"`
	// create_form
	//
	// x-displayName: "CreateRequest Format"
	// Format used to create a new similar object
	CreateForm *CreateRequest `protobuf:"bytes,2,opt,name=create_form,json=createForm" json:"create_form,omitempty"`
	// replace_form
	//
	// x-displayName: "ReplaceRequest Format"
	// Format to replace changeable values in object
	ReplaceForm *ReplaceRequest `protobuf:"bytes,3,opt,name=replace_form,json=replaceForm" json:"replace_form,omitempty"`
	// resource_version
	//
	// x-displayName: "Resource Version"
	// x-example: "42"
	// Version of the object
	ResourceVersion string `protobuf:"bytes,4,opt,name=resource_version,json=resourceVersion,proto3" json:"resource_version,omitempty"`
	// metadata
	//
	// x-displayName: "Metadata"
	// Common attributes of the object like name, labels etc.
	Metadata *ves_io_schema4.ObjectGetMetaType `protobuf:"bytes,5,opt,name=metadata" json:"metadata,omitempty"`
	// system metadata
	//
	// x-displayName: "System Metadata"
	// System generated attributes of this object.
	SystemMetadata *ves_io_schema4.SystemObjectGetMetaType `protobuf:"bytes,7,opt,name=system_metadata,json=systemMetadata" json:"system_metadata,omitempty"`
	// spec
	//
	// x-displayName: "Spec"
	// A specification of the configuration object read
	Spec *GetSpecType `protobuf:"bytes,6,opt,name=spec" json:"spec,omitempty"`
	// status
	//
	// x-displayName: "Status"
	// The status reported by different services for this configuration object
	Status []*StatusObject `protobuf:"bytes,20000,rep,name=status" json:"status,omitempty"`
	// referring_objects
	//
	// x-displayName: "Referring Objects"
	// The set of objects that are referring to this object in their spec
	ReferringObjects []*ves_io_schema4.ObjectRefType `protobuf:"bytes,8,rep,name=referring_objects,json=referringObjects" json:"referring_objects,omitempty"`
}

func (m *GetResponse) Reset()                    { *m = GetResponse{} }
func (*GetResponse) ProtoMessage()               {}
func (*GetResponse) Descriptor() ([]byte, []int) { return fileDescriptorPublicCrudapi, []int{5} }

func (m *GetResponse) GetObject() *Object {
	if m != nil {
		return m.Object
	}
	return nil
}

func (m *GetResponse) GetCreateForm() *CreateRequest {
	if m != nil {
		return m.CreateForm
	}
	return nil
}

func (m *GetResponse) GetReplaceForm() *ReplaceRequest {
	if m != nil {
		return m.ReplaceForm
	}
	return nil
}

func (m *GetResponse) GetResourceVersion() string {
	if m != nil {
		return m.ResourceVersion
	}
	return ""
}

func (m *GetResponse) GetMetadata() *ves_io_schema4.ObjectGetMetaType {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *GetResponse) GetSystemMetadata() *ves_io_schema4.SystemObjectGetMetaType {
	if m != nil {
		return m.SystemMetadata
	}
	return nil
}

func (m *GetResponse) GetSpec() *GetSpecType {
	if m != nil {
		return m.Spec
	}
	return nil
}

func (m *GetResponse) GetStatus() []*StatusObject {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *GetResponse) GetReferringObjects() []*ves_io_schema4.ObjectRefType {
	if m != nil {
		return m.ReferringObjects
	}
	return nil
}

// ListRequest is used to get a collection of user
//
// x-displayName: "List Request"
// This is the input message of the 'List' RPC. Fields can be used to control
// scope and filtering of collection.
type ListRequest struct {
	// namespace
	//
	// x-displayName: "Namespace"
	// x-example: "ns1"
	// Namespace to scope the listing of user
	Namespace string `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// label_filter
	//
	// x-displayName: "Label Filter"
	// x-example: "env in (staging, testing), tier in (web, db)"
	// A LabelSelectorType expression that every item in list response will satisfy
	LabelFilter string `protobuf:"bytes,2,opt,name=label_filter,json=labelFilter,proto3" json:"label_filter,omitempty"`
	// report_fields
	//
	// x-displayName: "Report Fields"
	// x-example: ""
	// Extra fields to return along with summary fields
	ReportFields []string `protobuf:"bytes,3,rep,name=report_fields,json=reportFields" json:"report_fields,omitempty"`
	// report_status_fields
	//
	// x-displayName: "Report Status Fields"
	// x-example: ""
	// Extra status fields to return along with summary fields
	ReportStatusFields []string `protobuf:"bytes,4,rep,name=report_status_fields,json=reportStatusFields" json:"report_status_fields,omitempty"`
}

func (m *ListRequest) Reset()                    { *m = ListRequest{} }
func (*ListRequest) ProtoMessage()               {}
func (*ListRequest) Descriptor() ([]byte, []int) { return fileDescriptorPublicCrudapi, []int{6} }

func (m *ListRequest) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *ListRequest) GetLabelFilter() string {
	if m != nil {
		return m.LabelFilter
	}
	return ""
}

func (m *ListRequest) GetReportFields() []string {
	if m != nil {
		return m.ReportFields
	}
	return nil
}

func (m *ListRequest) GetReportStatusFields() []string {
	if m != nil {
		return m.ReportStatusFields
	}
	return nil
}

// ListResponseItem is an individual item in a collection of user
//
// x-displayName: "List Item"
// By default a summary of user is returned in 'List'. By setting
// 'report_fields' in the ListRequest more details of each item can be got.
type ListResponseItem struct {
	// tenant
	//
	// x-displayName: "Tenant"
	// x-example: "acmecorp"
	// The tenant this item belongs to
	Tenant string `protobuf:"bytes,6,opt,name=tenant,proto3" json:"tenant,omitempty"`
	// namespace
	//
	// x-displayName: "Namespace"
	// x-example: "ns1"
	// The namespace this item belongs to
	Namespace string `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// name
	//
	// x-displayName: "Name"
	// x-example: "name"
	// The name of this user
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// uid
	//
	// x-displayName: "UID"
	// x-example: "d27938ba-967e-40a7-9709-57b8627f9f75"
	// The unique uid of this user
	Uid string `protobuf:"bytes,3,opt,name=uid,proto3" json:"uid,omitempty"`
	// description
	//
	// x-displayName: "Description"
	// The description set for this user
	Description string `protobuf:"bytes,11,opt,name=description,proto3" json:"description,omitempty"`
	// disabled
	//
	// x-displayName: "Disabled"
	// A value of true indicates user is administratively disabled
	Disabled bool `protobuf:"varint,12,opt,name=disabled,proto3" json:"disabled,omitempty"`
	// labels
	//
	// x-displayName: "Labels"
	// The set of labels present on this user
	Labels map[string]string `protobuf:"bytes,4,rep,name=labels" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// annotations
	//
	// x-displayName: "Annotations"
	// The set of annotations present on this user
	Annotations map[string]string `protobuf:"bytes,10,rep,name=annotations" json:"annotations,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// owner_view
	//
	// x-displayName: "Owner View"
	// Reference to the view object that owns this object.
	// If there is no view owner, this field will be nil.
	// If not nil, this object can only be edited/deleted through the view
	OwnerView *ves_io_schema4.ViewRefType `protobuf:"bytes,9,opt,name=owner_view,json=ownerView" json:"owner_view,omitempty"`
	// metadata
	//
	// x-displayName: "Metadata"
	// If list request has report_fields set then metadata will
	// contain all the metadata associated with the object.
	Metadata *ves_io_schema4.ObjectGetMetaType `protobuf:"bytes,13,opt,name=metadata" json:"metadata,omitempty"`
	// system_metadata
	//
	// x-displayName: "System Metadata"
	// If list request has report_fields set then system_metadata will
	// contain all the system generated details of this object.
	SystemMetadata *ves_io_schema4.SystemObjectGetMetaType `protobuf:"bytes,14,opt,name=system_metadata,json=systemMetadata" json:"system_metadata,omitempty"`
	// object
	//
	// x-displayName: "Object"
	// If ListRequest has any specified report_fields, it will appear in object
	// DEPRECATED by get_spec, metadata and system_metadata
	Object *Object `protobuf:"bytes,5,opt,name=object" json:"object,omitempty"`
	// get_spec
	//
	// x-displayName: "Get Specification"
	// If ListRequest has any specified report_fields, it will appear in object
	GetSpec *GetSpecType `protobuf:"bytes,7,opt,name=get_spec,json=getSpec" json:"get_spec,omitempty"`
	// status
	//
	// x-displayName: "Status"
	// The status reported by different services for this configuration object
	StatusSet []*StatusObject `protobuf:"bytes,8,rep,name=status_set,json=statusSet" json:"status_set,omitempty"`
}

func (m *ListResponseItem) Reset()                    { *m = ListResponseItem{} }
func (*ListResponseItem) ProtoMessage()               {}
func (*ListResponseItem) Descriptor() ([]byte, []int) { return fileDescriptorPublicCrudapi, []int{7} }

func (m *ListResponseItem) GetTenant() string {
	if m != nil {
		return m.Tenant
	}
	return ""
}

func (m *ListResponseItem) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *ListResponseItem) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ListResponseItem) GetUid() string {
	if m != nil {
		return m.Uid
	}
	return ""
}

func (m *ListResponseItem) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *ListResponseItem) GetDisabled() bool {
	if m != nil {
		return m.Disabled
	}
	return false
}

func (m *ListResponseItem) GetLabels() map[string]string {
	if m != nil {
		return m.Labels
	}
	return nil
}

func (m *ListResponseItem) GetAnnotations() map[string]string {
	if m != nil {
		return m.Annotations
	}
	return nil
}

func (m *ListResponseItem) GetOwnerView() *ves_io_schema4.ViewRefType {
	if m != nil {
		return m.OwnerView
	}
	return nil
}

func (m *ListResponseItem) GetMetadata() *ves_io_schema4.ObjectGetMetaType {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *ListResponseItem) GetSystemMetadata() *ves_io_schema4.SystemObjectGetMetaType {
	if m != nil {
		return m.SystemMetadata
	}
	return nil
}

func (m *ListResponseItem) GetObject() *Object {
	if m != nil {
		return m.Object
	}
	return nil
}

func (m *ListResponseItem) GetGetSpec() *GetSpecType {
	if m != nil {
		return m.GetSpec
	}
	return nil
}

func (m *ListResponseItem) GetStatusSet() []*StatusObject {
	if m != nil {
		return m.StatusSet
	}
	return nil
}

// ListResponse is the collection of user
//
// x-displayName: "List Response"
// This is the output message of 'List' RPC.
type ListResponse struct {
	// items
	//
	// x-displayName: "Items"
	// items represents the collection in response
	Items []*ListResponseItem `protobuf:"bytes,1,rep,name=items" json:"items,omitempty"`
	// errors
	//
	// x-displayName: "Errors"
	// Errors(if any) while listing items from collection
	Errors []*ves_io_schema5.ErrorType `protobuf:"bytes,2,rep,name=errors" json:"errors,omitempty"`
}

func (m *ListResponse) Reset()                    { *m = ListResponse{} }
func (*ListResponse) ProtoMessage()               {}
func (*ListResponse) Descriptor() ([]byte, []int) { return fileDescriptorPublicCrudapi, []int{8} }

func (m *ListResponse) GetItems() []*ListResponseItem {
	if m != nil {
		return m.Items
	}
	return nil
}

func (m *ListResponse) GetErrors() []*ves_io_schema5.ErrorType {
	if m != nil {
		return m.Errors
	}
	return nil
}

func init() {
	proto.RegisterType((*CreateRequest)(nil), "ves.io.schema.user.CreateRequest")
	golang_proto.RegisterType((*CreateRequest)(nil), "ves.io.schema.user.CreateRequest")
	proto.RegisterType((*CreateResponse)(nil), "ves.io.schema.user.CreateResponse")
	golang_proto.RegisterType((*CreateResponse)(nil), "ves.io.schema.user.CreateResponse")
	proto.RegisterType((*ReplaceRequest)(nil), "ves.io.schema.user.ReplaceRequest")
	golang_proto.RegisterType((*ReplaceRequest)(nil), "ves.io.schema.user.ReplaceRequest")
	proto.RegisterType((*ReplaceResponse)(nil), "ves.io.schema.user.ReplaceResponse")
	golang_proto.RegisterType((*ReplaceResponse)(nil), "ves.io.schema.user.ReplaceResponse")
	proto.RegisterType((*GetRequest)(nil), "ves.io.schema.user.GetRequest")
	golang_proto.RegisterType((*GetRequest)(nil), "ves.io.schema.user.GetRequest")
	proto.RegisterType((*GetResponse)(nil), "ves.io.schema.user.GetResponse")
	golang_proto.RegisterType((*GetResponse)(nil), "ves.io.schema.user.GetResponse")
	proto.RegisterType((*ListRequest)(nil), "ves.io.schema.user.ListRequest")
	golang_proto.RegisterType((*ListRequest)(nil), "ves.io.schema.user.ListRequest")
	proto.RegisterType((*ListResponseItem)(nil), "ves.io.schema.user.ListResponseItem")
	golang_proto.RegisterType((*ListResponseItem)(nil), "ves.io.schema.user.ListResponseItem")
	proto.RegisterType((*ListResponse)(nil), "ves.io.schema.user.ListResponse")
	golang_proto.RegisterType((*ListResponse)(nil), "ves.io.schema.user.ListResponse")
	proto.RegisterEnum("ves.io.schema.user.GetResponseFormatCode", GetResponseFormatCode_name, GetResponseFormatCode_value)
	golang_proto.RegisterEnum("ves.io.schema.user.GetResponseFormatCode", GetResponseFormatCode_name, GetResponseFormatCode_value)
}
func (x GetResponseFormatCode) String() string {
	s, ok := GetResponseFormatCode_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *CreateRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateRequest)
	if !ok {
		that2, ok := that.(CreateRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Metadata.Equal(that1.Metadata) {
		return false
	}
	if !this.Spec.Equal(that1.Spec) {
		return false
	}
	return true
}
func (this *CreateResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateResponse)
	if !ok {
		that2, ok := that.(CreateResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Metadata.Equal(that1.Metadata) {
		return false
	}
	if !this.SystemMetadata.Equal(that1.SystemMetadata) {
		return false
	}
	if !this.Spec.Equal(that1.Spec) {
		return false
	}
	return true
}
func (this *ReplaceRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceRequest)
	if !ok {
		that2, ok := that.(ReplaceRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Metadata.Equal(that1.Metadata) {
		return false
	}
	if !this.Spec.Equal(that1.Spec) {
		return false
	}
	if this.ResourceVersion != that1.ResourceVersion {
		return false
	}
	return true
}
func (this *ReplaceResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceResponse)
	if !ok {
		that2, ok := that.(ReplaceResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *GetRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetRequest)
	if !ok {
		that2, ok := that.(GetRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Namespace != that1.Namespace {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.ResponseFormat != that1.ResponseFormat {
		return false
	}
	return true
}
func (this *GetResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetResponse)
	if !ok {
		that2, ok := that.(GetResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Object.Equal(that1.Object) {
		return false
	}
	if !this.CreateForm.Equal(that1.CreateForm) {
		return false
	}
	if !this.ReplaceForm.Equal(that1.ReplaceForm) {
		return false
	}
	if this.ResourceVersion != that1.ResourceVersion {
		return false
	}
	if !this.Metadata.Equal(that1.Metadata) {
		return false
	}
	if !this.SystemMetadata.Equal(that1.SystemMetadata) {
		return false
	}
	if !this.Spec.Equal(that1.Spec) {
		return false
	}
	if len(this.Status) != len(that1.Status) {
		return false
	}
	for i := range this.Status {
		if !this.Status[i].Equal(that1.Status[i]) {
			return false
		}
	}
	if len(this.ReferringObjects) != len(that1.ReferringObjects) {
		return false
	}
	for i := range this.ReferringObjects {
		if !this.ReferringObjects[i].Equal(that1.ReferringObjects[i]) {
			return false
		}
	}
	return true
}
func (this *ListRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ListRequest)
	if !ok {
		that2, ok := that.(ListRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Namespace != that1.Namespace {
		return false
	}
	if this.LabelFilter != that1.LabelFilter {
		return false
	}
	if len(this.ReportFields) != len(that1.ReportFields) {
		return false
	}
	for i := range this.ReportFields {
		if this.ReportFields[i] != that1.ReportFields[i] {
			return false
		}
	}
	if len(this.ReportStatusFields) != len(that1.ReportStatusFields) {
		return false
	}
	for i := range this.ReportStatusFields {
		if this.ReportStatusFields[i] != that1.ReportStatusFields[i] {
			return false
		}
	}
	return true
}
func (this *ListResponseItem) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ListResponseItem)
	if !ok {
		that2, ok := that.(ListResponseItem)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Tenant != that1.Tenant {
		return false
	}
	if this.Namespace != that1.Namespace {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Uid != that1.Uid {
		return false
	}
	if this.Description != that1.Description {
		return false
	}
	if this.Disabled != that1.Disabled {
		return false
	}
	if len(this.Labels) != len(that1.Labels) {
		return false
	}
	for i := range this.Labels {
		if this.Labels[i] != that1.Labels[i] {
			return false
		}
	}
	if len(this.Annotations) != len(that1.Annotations) {
		return false
	}
	for i := range this.Annotations {
		if this.Annotations[i] != that1.Annotations[i] {
			return false
		}
	}
	if !this.OwnerView.Equal(that1.OwnerView) {
		return false
	}
	if !this.Metadata.Equal(that1.Metadata) {
		return false
	}
	if !this.SystemMetadata.Equal(that1.SystemMetadata) {
		return false
	}
	if !this.Object.Equal(that1.Object) {
		return false
	}
	if !this.GetSpec.Equal(that1.GetSpec) {
		return false
	}
	if len(this.StatusSet) != len(that1.StatusSet) {
		return false
	}
	for i := range this.StatusSet {
		if !this.StatusSet[i].Equal(that1.StatusSet[i]) {
			return false
		}
	}
	return true
}
func (this *ListResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ListResponse)
	if !ok {
		that2, ok := that.(ListResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Items) != len(that1.Items) {
		return false
	}
	for i := range this.Items {
		if !this.Items[i].Equal(that1.Items[i]) {
			return false
		}
	}
	if len(this.Errors) != len(that1.Errors) {
		return false
	}
	for i := range this.Errors {
		if !this.Errors[i].Equal(that1.Errors[i]) {
			return false
		}
	}
	return true
}
func (this *CreateRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&user.CreateRequest{")
	if this.Metadata != nil {
		s = append(s, "Metadata: "+fmt.Sprintf("%#v", this.Metadata)+",\n")
	}
	if this.Spec != nil {
		s = append(s, "Spec: "+fmt.Sprintf("%#v", this.Spec)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CreateResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&user.CreateResponse{")
	if this.Metadata != nil {
		s = append(s, "Metadata: "+fmt.Sprintf("%#v", this.Metadata)+",\n")
	}
	if this.SystemMetadata != nil {
		s = append(s, "SystemMetadata: "+fmt.Sprintf("%#v", this.SystemMetadata)+",\n")
	}
	if this.Spec != nil {
		s = append(s, "Spec: "+fmt.Sprintf("%#v", this.Spec)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ReplaceRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&user.ReplaceRequest{")
	if this.Metadata != nil {
		s = append(s, "Metadata: "+fmt.Sprintf("%#v", this.Metadata)+",\n")
	}
	if this.Spec != nil {
		s = append(s, "Spec: "+fmt.Sprintf("%#v", this.Spec)+",\n")
	}
	s = append(s, "ResourceVersion: "+fmt.Sprintf("%#v", this.ResourceVersion)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ReplaceResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&user.ReplaceResponse{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&user.GetRequest{")
	s = append(s, "Namespace: "+fmt.Sprintf("%#v", this.Namespace)+",\n")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "ResponseFormat: "+fmt.Sprintf("%#v", this.ResponseFormat)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 13)
	s = append(s, "&user.GetResponse{")
	if this.Object != nil {
		s = append(s, "Object: "+fmt.Sprintf("%#v", this.Object)+",\n")
	}
	if this.CreateForm != nil {
		s = append(s, "CreateForm: "+fmt.Sprintf("%#v", this.CreateForm)+",\n")
	}
	if this.ReplaceForm != nil {
		s = append(s, "ReplaceForm: "+fmt.Sprintf("%#v", this.ReplaceForm)+",\n")
	}
	s = append(s, "ResourceVersion: "+fmt.Sprintf("%#v", this.ResourceVersion)+",\n")
	if this.Metadata != nil {
		s = append(s, "Metadata: "+fmt.Sprintf("%#v", this.Metadata)+",\n")
	}
	if this.SystemMetadata != nil {
		s = append(s, "SystemMetadata: "+fmt.Sprintf("%#v", this.SystemMetadata)+",\n")
	}
	if this.Spec != nil {
		s = append(s, "Spec: "+fmt.Sprintf("%#v", this.Spec)+",\n")
	}
	if this.Status != nil {
		s = append(s, "Status: "+fmt.Sprintf("%#v", this.Status)+",\n")
	}
	if this.ReferringObjects != nil {
		s = append(s, "ReferringObjects: "+fmt.Sprintf("%#v", this.ReferringObjects)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ListRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&user.ListRequest{")
	s = append(s, "Namespace: "+fmt.Sprintf("%#v", this.Namespace)+",\n")
	s = append(s, "LabelFilter: "+fmt.Sprintf("%#v", this.LabelFilter)+",\n")
	s = append(s, "ReportFields: "+fmt.Sprintf("%#v", this.ReportFields)+",\n")
	s = append(s, "ReportStatusFields: "+fmt.Sprintf("%#v", this.ReportStatusFields)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ListResponseItem) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 18)
	s = append(s, "&user.ListResponseItem{")
	s = append(s, "Tenant: "+fmt.Sprintf("%#v", this.Tenant)+",\n")
	s = append(s, "Namespace: "+fmt.Sprintf("%#v", this.Namespace)+",\n")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "Uid: "+fmt.Sprintf("%#v", this.Uid)+",\n")
	s = append(s, "Description: "+fmt.Sprintf("%#v", this.Description)+",\n")
	s = append(s, "Disabled: "+fmt.Sprintf("%#v", this.Disabled)+",\n")
	keysForLabels := make([]string, 0, len(this.Labels))
	for k, _ := range this.Labels {
		keysForLabels = append(keysForLabels, k)
	}
	sortkeys.Strings(keysForLabels)
	mapStringForLabels := "map[string]string{"
	for _, k := range keysForLabels {
		mapStringForLabels += fmt.Sprintf("%#v: %#v,", k, this.Labels[k])
	}
	mapStringForLabels += "}"
	if this.Labels != nil {
		s = append(s, "Labels: "+mapStringForLabels+",\n")
	}
	keysForAnnotations := make([]string, 0, len(this.Annotations))
	for k, _ := range this.Annotations {
		keysForAnnotations = append(keysForAnnotations, k)
	}
	sortkeys.Strings(keysForAnnotations)
	mapStringForAnnotations := "map[string]string{"
	for _, k := range keysForAnnotations {
		mapStringForAnnotations += fmt.Sprintf("%#v: %#v,", k, this.Annotations[k])
	}
	mapStringForAnnotations += "}"
	if this.Annotations != nil {
		s = append(s, "Annotations: "+mapStringForAnnotations+",\n")
	}
	if this.OwnerView != nil {
		s = append(s, "OwnerView: "+fmt.Sprintf("%#v", this.OwnerView)+",\n")
	}
	if this.Metadata != nil {
		s = append(s, "Metadata: "+fmt.Sprintf("%#v", this.Metadata)+",\n")
	}
	if this.SystemMetadata != nil {
		s = append(s, "SystemMetadata: "+fmt.Sprintf("%#v", this.SystemMetadata)+",\n")
	}
	if this.Object != nil {
		s = append(s, "Object: "+fmt.Sprintf("%#v", this.Object)+",\n")
	}
	if this.GetSpec != nil {
		s = append(s, "GetSpec: "+fmt.Sprintf("%#v", this.GetSpec)+",\n")
	}
	if this.StatusSet != nil {
		s = append(s, "StatusSet: "+fmt.Sprintf("%#v", this.StatusSet)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ListResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&user.ListResponse{")
	if this.Items != nil {
		s = append(s, "Items: "+fmt.Sprintf("%#v", this.Items)+",\n")
	}
	if this.Errors != nil {
		s = append(s, "Errors: "+fmt.Sprintf("%#v", this.Errors)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringPublicCrudapi(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for API service

type APIClient interface {
	// CreateSpecType
	//
	// x-displayName: "Create User"
	Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateResponse, error)
	// GetSpecType
	//
	// x-displayName: "Get User"
	Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error)
	// List
	//
	// x-displayName: "List User"
	// List the set of user in a namespace
	List(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListResponse, error)
	// ReplaceSpecType
	//
	// x-displayName: "Replace User"
	Replace(ctx context.Context, in *ReplaceRequest, opts ...grpc.CallOption) (*ReplaceResponse, error)
}

type aPIClient struct {
	cc *grpc.ClientConn
}

func NewAPIClient(cc *grpc.ClientConn) APIClient {
	return &aPIClient{cc}
}

func (c *aPIClient) Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateResponse, error) {
	out := new(CreateResponse)
	err := grpc.Invoke(ctx, "/ves.io.schema.user.API/Create", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error) {
	out := new(GetResponse)
	err := grpc.Invoke(ctx, "/ves.io.schema.user.API/Get", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) List(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListResponse, error) {
	out := new(ListResponse)
	err := grpc.Invoke(ctx, "/ves.io.schema.user.API/List", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) Replace(ctx context.Context, in *ReplaceRequest, opts ...grpc.CallOption) (*ReplaceResponse, error) {
	out := new(ReplaceResponse)
	err := grpc.Invoke(ctx, "/ves.io.schema.user.API/Replace", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for API service

type APIServer interface {
	// CreateSpecType
	//
	// x-displayName: "Create User"
	Create(context.Context, *CreateRequest) (*CreateResponse, error)
	// GetSpecType
	//
	// x-displayName: "Get User"
	Get(context.Context, *GetRequest) (*GetResponse, error)
	// List
	//
	// x-displayName: "List User"
	// List the set of user in a namespace
	List(context.Context, *ListRequest) (*ListResponse, error)
	// ReplaceSpecType
	//
	// x-displayName: "Replace User"
	Replace(context.Context, *ReplaceRequest) (*ReplaceResponse, error)
}

func RegisterAPIServer(s *grpc.Server, srv APIServer) {
	s.RegisterService(&_API_serviceDesc, srv)
}

func _API_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ves.io.schema.user.API/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).Create(ctx, req.(*CreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ves.io.schema.user.API/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).Get(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ves.io.schema.user.API/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).List(ctx, req.(*ListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_Replace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReplaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).Replace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ves.io.schema.user.API/Replace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).Replace(ctx, req.(*ReplaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _API_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ves.io.schema.user.API",
	HandlerType: (*APIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _API_Create_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _API_Get_Handler,
		},
		{
			MethodName: "List",
			Handler:    _API_List_Handler,
		},
		{
			MethodName: "Replace",
			Handler:    _API_Replace_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ves.io/schema/user/public_crudapi.proto",
}

func (m *CreateRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Metadata != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPublicCrudapi(dAtA, i, uint64(m.Metadata.Size()))
		n1, err := m.Metadata.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.Spec != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintPublicCrudapi(dAtA, i, uint64(m.Spec.Size()))
		n2, err := m.Spec.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	return i, nil
}

func (m *CreateResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Metadata != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPublicCrudapi(dAtA, i, uint64(m.Metadata.Size()))
		n3, err := m.Metadata.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	if m.Spec != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintPublicCrudapi(dAtA, i, uint64(m.Spec.Size()))
		n4, err := m.Spec.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	if m.SystemMetadata != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintPublicCrudapi(dAtA, i, uint64(m.SystemMetadata.Size()))
		n5, err := m.SystemMetadata.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	return i, nil
}

func (m *ReplaceRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplaceRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Metadata != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPublicCrudapi(dAtA, i, uint64(m.Metadata.Size()))
		n6, err := m.Metadata.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	if m.Spec != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintPublicCrudapi(dAtA, i, uint64(m.Spec.Size()))
		n7, err := m.Spec.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	if len(m.ResourceVersion) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintPublicCrudapi(dAtA, i, uint64(len(m.ResourceVersion)))
		i += copy(dAtA[i:], m.ResourceVersion)
	}
	return i, nil
}

func (m *ReplaceResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplaceResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *GetRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Namespace) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPublicCrudapi(dAtA, i, uint64(len(m.Namespace)))
		i += copy(dAtA[i:], m.Namespace)
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintPublicCrudapi(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if m.ResponseFormat != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintPublicCrudapi(dAtA, i, uint64(m.ResponseFormat))
	}
	return i, nil
}

func (m *GetResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Object != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPublicCrudapi(dAtA, i, uint64(m.Object.Size()))
		n8, err := m.Object.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n8
	}
	if m.CreateForm != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintPublicCrudapi(dAtA, i, uint64(m.CreateForm.Size()))
		n9, err := m.CreateForm.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n9
	}
	if m.ReplaceForm != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintPublicCrudapi(dAtA, i, uint64(m.ReplaceForm.Size()))
		n10, err := m.ReplaceForm.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n10
	}
	if len(m.ResourceVersion) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintPublicCrudapi(dAtA, i, uint64(len(m.ResourceVersion)))
		i += copy(dAtA[i:], m.ResourceVersion)
	}
	if m.Metadata != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintPublicCrudapi(dAtA, i, uint64(m.Metadata.Size()))
		n11, err := m.Metadata.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n11
	}
	if m.Spec != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintPublicCrudapi(dAtA, i, uint64(m.Spec.Size()))
		n12, err := m.Spec.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n12
	}
	if m.SystemMetadata != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintPublicCrudapi(dAtA, i, uint64(m.SystemMetadata.Size()))
		n13, err := m.SystemMetadata.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n13
	}
	if len(m.ReferringObjects) > 0 {
		for _, msg := range m.ReferringObjects {
			dAtA[i] = 0x42
			i++
			i = encodeVarintPublicCrudapi(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Status) > 0 {
		for _, msg := range m.Status {
			dAtA[i] = 0x82
			i++
			dAtA[i] = 0xe2
			i++
			dAtA[i] = 0x9
			i++
			i = encodeVarintPublicCrudapi(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *ListRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Namespace) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPublicCrudapi(dAtA, i, uint64(len(m.Namespace)))
		i += copy(dAtA[i:], m.Namespace)
	}
	if len(m.LabelFilter) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintPublicCrudapi(dAtA, i, uint64(len(m.LabelFilter)))
		i += copy(dAtA[i:], m.LabelFilter)
	}
	if len(m.ReportFields) > 0 {
		for _, s := range m.ReportFields {
			dAtA[i] = 0x1a
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.ReportStatusFields) > 0 {
		for _, s := range m.ReportStatusFields {
			dAtA[i] = 0x22
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	return i, nil
}

func (m *ListResponseItem) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListResponseItem) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Namespace) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPublicCrudapi(dAtA, i, uint64(len(m.Namespace)))
		i += copy(dAtA[i:], m.Namespace)
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintPublicCrudapi(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.Uid) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintPublicCrudapi(dAtA, i, uint64(len(m.Uid)))
		i += copy(dAtA[i:], m.Uid)
	}
	if len(m.Labels) > 0 {
		for k, _ := range m.Labels {
			dAtA[i] = 0x22
			i++
			v := m.Labels[k]
			mapSize := 1 + len(k) + sovPublicCrudapi(uint64(len(k))) + 1 + len(v) + sovPublicCrudapi(uint64(len(v)))
			i = encodeVarintPublicCrudapi(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintPublicCrudapi(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			dAtA[i] = 0x12
			i++
			i = encodeVarintPublicCrudapi(dAtA, i, uint64(len(v)))
			i += copy(dAtA[i:], v)
		}
	}
	if m.Object != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintPublicCrudapi(dAtA, i, uint64(m.Object.Size()))
		n14, err := m.Object.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n14
	}
	if len(m.Tenant) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintPublicCrudapi(dAtA, i, uint64(len(m.Tenant)))
		i += copy(dAtA[i:], m.Tenant)
	}
	if m.GetSpec != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintPublicCrudapi(dAtA, i, uint64(m.GetSpec.Size()))
		n15, err := m.GetSpec.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n15
	}
	if len(m.StatusSet) > 0 {
		for _, msg := range m.StatusSet {
			dAtA[i] = 0x42
			i++
			i = encodeVarintPublicCrudapi(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.OwnerView != nil {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintPublicCrudapi(dAtA, i, uint64(m.OwnerView.Size()))
		n16, err := m.OwnerView.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n16
	}
	if len(m.Annotations) > 0 {
		for k, _ := range m.Annotations {
			dAtA[i] = 0x52
			i++
			v := m.Annotations[k]
			mapSize := 1 + len(k) + sovPublicCrudapi(uint64(len(k))) + 1 + len(v) + sovPublicCrudapi(uint64(len(v)))
			i = encodeVarintPublicCrudapi(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintPublicCrudapi(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			dAtA[i] = 0x12
			i++
			i = encodeVarintPublicCrudapi(dAtA, i, uint64(len(v)))
			i += copy(dAtA[i:], v)
		}
	}
	if len(m.Description) > 0 {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintPublicCrudapi(dAtA, i, uint64(len(m.Description)))
		i += copy(dAtA[i:], m.Description)
	}
	if m.Disabled {
		dAtA[i] = 0x60
		i++
		if m.Disabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Metadata != nil {
		dAtA[i] = 0x6a
		i++
		i = encodeVarintPublicCrudapi(dAtA, i, uint64(m.Metadata.Size()))
		n17, err := m.Metadata.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n17
	}
	if m.SystemMetadata != nil {
		dAtA[i] = 0x72
		i++
		i = encodeVarintPublicCrudapi(dAtA, i, uint64(m.SystemMetadata.Size()))
		n18, err := m.SystemMetadata.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n18
	}
	return i, nil
}

func (m *ListResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Items) > 0 {
		for _, msg := range m.Items {
			dAtA[i] = 0xa
			i++
			i = encodeVarintPublicCrudapi(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Errors) > 0 {
		for _, msg := range m.Errors {
			dAtA[i] = 0x12
			i++
			i = encodeVarintPublicCrudapi(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func encodeVarintPublicCrudapi(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *CreateRequest) Size() (n int) {
	var l int
	_ = l
	if m.Metadata != nil {
		l = m.Metadata.Size()
		n += 1 + l + sovPublicCrudapi(uint64(l))
	}
	if m.Spec != nil {
		l = m.Spec.Size()
		n += 1 + l + sovPublicCrudapi(uint64(l))
	}
	return n
}

func (m *CreateResponse) Size() (n int) {
	var l int
	_ = l
	if m.Metadata != nil {
		l = m.Metadata.Size()
		n += 1 + l + sovPublicCrudapi(uint64(l))
	}
	if m.Spec != nil {
		l = m.Spec.Size()
		n += 1 + l + sovPublicCrudapi(uint64(l))
	}
	if m.SystemMetadata != nil {
		l = m.SystemMetadata.Size()
		n += 1 + l + sovPublicCrudapi(uint64(l))
	}
	return n
}

func (m *ReplaceRequest) Size() (n int) {
	var l int
	_ = l
	if m.Metadata != nil {
		l = m.Metadata.Size()
		n += 1 + l + sovPublicCrudapi(uint64(l))
	}
	if m.Spec != nil {
		l = m.Spec.Size()
		n += 1 + l + sovPublicCrudapi(uint64(l))
	}
	l = len(m.ResourceVersion)
	if l > 0 {
		n += 1 + l + sovPublicCrudapi(uint64(l))
	}
	return n
}

func (m *ReplaceResponse) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *GetRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovPublicCrudapi(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovPublicCrudapi(uint64(l))
	}
	if m.ResponseFormat != 0 {
		n += 1 + sovPublicCrudapi(uint64(m.ResponseFormat))
	}
	return n
}

func (m *GetResponse) Size() (n int) {
	var l int
	_ = l
	if m.Object != nil {
		l = m.Object.Size()
		n += 1 + l + sovPublicCrudapi(uint64(l))
	}
	if m.CreateForm != nil {
		l = m.CreateForm.Size()
		n += 1 + l + sovPublicCrudapi(uint64(l))
	}
	if m.ReplaceForm != nil {
		l = m.ReplaceForm.Size()
		n += 1 + l + sovPublicCrudapi(uint64(l))
	}
	l = len(m.ResourceVersion)
	if l > 0 {
		n += 1 + l + sovPublicCrudapi(uint64(l))
	}
	if m.Metadata != nil {
		l = m.Metadata.Size()
		n += 1 + l + sovPublicCrudapi(uint64(l))
	}
	if m.Spec != nil {
		l = m.Spec.Size()
		n += 1 + l + sovPublicCrudapi(uint64(l))
	}
	if m.SystemMetadata != nil {
		l = m.SystemMetadata.Size()
		n += 1 + l + sovPublicCrudapi(uint64(l))
	}
	if len(m.ReferringObjects) > 0 {
		for _, e := range m.ReferringObjects {
			l = e.Size()
			n += 1 + l + sovPublicCrudapi(uint64(l))
		}
	}
	if len(m.Status) > 0 {
		for _, e := range m.Status {
			l = e.Size()
			n += 3 + l + sovPublicCrudapi(uint64(l))
		}
	}
	return n
}

func (m *ListRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovPublicCrudapi(uint64(l))
	}
	l = len(m.LabelFilter)
	if l > 0 {
		n += 1 + l + sovPublicCrudapi(uint64(l))
	}
	if len(m.ReportFields) > 0 {
		for _, s := range m.ReportFields {
			l = len(s)
			n += 1 + l + sovPublicCrudapi(uint64(l))
		}
	}
	if len(m.ReportStatusFields) > 0 {
		for _, s := range m.ReportStatusFields {
			l = len(s)
			n += 1 + l + sovPublicCrudapi(uint64(l))
		}
	}
	return n
}

func (m *ListResponseItem) Size() (n int) {
	var l int
	_ = l
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovPublicCrudapi(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovPublicCrudapi(uint64(l))
	}
	l = len(m.Uid)
	if l > 0 {
		n += 1 + l + sovPublicCrudapi(uint64(l))
	}
	if len(m.Labels) > 0 {
		for k, v := range m.Labels {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovPublicCrudapi(uint64(len(k))) + 1 + len(v) + sovPublicCrudapi(uint64(len(v)))
			n += mapEntrySize + 1 + sovPublicCrudapi(uint64(mapEntrySize))
		}
	}
	if m.Object != nil {
		l = m.Object.Size()
		n += 1 + l + sovPublicCrudapi(uint64(l))
	}
	l = len(m.Tenant)
	if l > 0 {
		n += 1 + l + sovPublicCrudapi(uint64(l))
	}
	if m.GetSpec != nil {
		l = m.GetSpec.Size()
		n += 1 + l + sovPublicCrudapi(uint64(l))
	}
	if len(m.StatusSet) > 0 {
		for _, e := range m.StatusSet {
			l = e.Size()
			n += 1 + l + sovPublicCrudapi(uint64(l))
		}
	}
	if m.OwnerView != nil {
		l = m.OwnerView.Size()
		n += 1 + l + sovPublicCrudapi(uint64(l))
	}
	if len(m.Annotations) > 0 {
		for k, v := range m.Annotations {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovPublicCrudapi(uint64(len(k))) + 1 + len(v) + sovPublicCrudapi(uint64(len(v)))
			n += mapEntrySize + 1 + sovPublicCrudapi(uint64(mapEntrySize))
		}
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovPublicCrudapi(uint64(l))
	}
	if m.Disabled {
		n += 2
	}
	if m.Metadata != nil {
		l = m.Metadata.Size()
		n += 1 + l + sovPublicCrudapi(uint64(l))
	}
	if m.SystemMetadata != nil {
		l = m.SystemMetadata.Size()
		n += 1 + l + sovPublicCrudapi(uint64(l))
	}
	return n
}

func (m *ListResponse) Size() (n int) {
	var l int
	_ = l
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovPublicCrudapi(uint64(l))
		}
	}
	if len(m.Errors) > 0 {
		for _, e := range m.Errors {
			l = e.Size()
			n += 1 + l + sovPublicCrudapi(uint64(l))
		}
	}
	return n
}

func sovPublicCrudapi(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozPublicCrudapi(x uint64) (n int) {
	return sovPublicCrudapi(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *CreateRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateRequest{`,
		`Metadata:` + strings.Replace(fmt.Sprintf("%v", this.Metadata), "ObjectCreateMetaType", "ves_io_schema4.ObjectCreateMetaType", 1) + `,`,
		`Spec:` + strings.Replace(fmt.Sprintf("%v", this.Spec), "CreateSpecType", "CreateSpecType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateResponse{`,
		`Metadata:` + strings.Replace(fmt.Sprintf("%v", this.Metadata), "ObjectGetMetaType", "ves_io_schema4.ObjectGetMetaType", 1) + `,`,
		`Spec:` + strings.Replace(fmt.Sprintf("%v", this.Spec), "GetSpecType", "GetSpecType", 1) + `,`,
		`SystemMetadata:` + strings.Replace(fmt.Sprintf("%v", this.SystemMetadata), "SystemObjectGetMetaType", "ves_io_schema4.SystemObjectGetMetaType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceRequest{`,
		`Metadata:` + strings.Replace(fmt.Sprintf("%v", this.Metadata), "ObjectReplaceMetaType", "ves_io_schema4.ObjectReplaceMetaType", 1) + `,`,
		`Spec:` + strings.Replace(fmt.Sprintf("%v", this.Spec), "ReplaceSpecType", "ReplaceSpecType", 1) + `,`,
		`ResourceVersion:` + fmt.Sprintf("%v", this.ResourceVersion) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceResponse{`,
		`}`,
	}, "")
	return s
}
func (this *GetRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetRequest{`,
		`Namespace:` + fmt.Sprintf("%v", this.Namespace) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`ResponseFormat:` + fmt.Sprintf("%v", this.ResponseFormat) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetResponse{`,
		`Object:` + strings.Replace(fmt.Sprintf("%v", this.Object), "Object", "Object", 1) + `,`,
		`CreateForm:` + strings.Replace(fmt.Sprintf("%v", this.CreateForm), "CreateRequest", "CreateRequest", 1) + `,`,
		`ReplaceForm:` + strings.Replace(fmt.Sprintf("%v", this.ReplaceForm), "ReplaceRequest", "ReplaceRequest", 1) + `,`,
		`ResourceVersion:` + fmt.Sprintf("%v", this.ResourceVersion) + `,`,
		`Metadata:` + strings.Replace(fmt.Sprintf("%v", this.Metadata), "ObjectGetMetaType", "ves_io_schema4.ObjectGetMetaType", 1) + `,`,
		`Spec:` + strings.Replace(fmt.Sprintf("%v", this.Spec), "GetSpecType", "GetSpecType", 1) + `,`,
		`SystemMetadata:` + strings.Replace(fmt.Sprintf("%v", this.SystemMetadata), "SystemObjectGetMetaType", "ves_io_schema4.SystemObjectGetMetaType", 1) + `,`,
		`ReferringObjects:` + strings.Replace(fmt.Sprintf("%v", this.ReferringObjects), "ObjectRefType", "ves_io_schema4.ObjectRefType", 1) + `,`,
		`Status:` + strings.Replace(fmt.Sprintf("%v", this.Status), "StatusObject", "StatusObject", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ListRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ListRequest{`,
		`Namespace:` + fmt.Sprintf("%v", this.Namespace) + `,`,
		`LabelFilter:` + fmt.Sprintf("%v", this.LabelFilter) + `,`,
		`ReportFields:` + fmt.Sprintf("%v", this.ReportFields) + `,`,
		`ReportStatusFields:` + fmt.Sprintf("%v", this.ReportStatusFields) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ListResponseItem) String() string {
	if this == nil {
		return "nil"
	}
	keysForLabels := make([]string, 0, len(this.Labels))
	for k, _ := range this.Labels {
		keysForLabels = append(keysForLabels, k)
	}
	sortkeys.Strings(keysForLabels)
	mapStringForLabels := "map[string]string{"
	for _, k := range keysForLabels {
		mapStringForLabels += fmt.Sprintf("%v: %v,", k, this.Labels[k])
	}
	mapStringForLabels += "}"
	keysForAnnotations := make([]string, 0, len(this.Annotations))
	for k, _ := range this.Annotations {
		keysForAnnotations = append(keysForAnnotations, k)
	}
	sortkeys.Strings(keysForAnnotations)
	mapStringForAnnotations := "map[string]string{"
	for _, k := range keysForAnnotations {
		mapStringForAnnotations += fmt.Sprintf("%v: %v,", k, this.Annotations[k])
	}
	mapStringForAnnotations += "}"
	s := strings.Join([]string{`&ListResponseItem{`,
		`Namespace:` + fmt.Sprintf("%v", this.Namespace) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Uid:` + fmt.Sprintf("%v", this.Uid) + `,`,
		`Labels:` + mapStringForLabels + `,`,
		`Object:` + strings.Replace(fmt.Sprintf("%v", this.Object), "Object", "Object", 1) + `,`,
		`Tenant:` + fmt.Sprintf("%v", this.Tenant) + `,`,
		`GetSpec:` + strings.Replace(fmt.Sprintf("%v", this.GetSpec), "GetSpecType", "GetSpecType", 1) + `,`,
		`StatusSet:` + strings.Replace(fmt.Sprintf("%v", this.StatusSet), "StatusObject", "StatusObject", 1) + `,`,
		`OwnerView:` + strings.Replace(fmt.Sprintf("%v", this.OwnerView), "ViewRefType", "ves_io_schema4.ViewRefType", 1) + `,`,
		`Annotations:` + mapStringForAnnotations + `,`,
		`Description:` + fmt.Sprintf("%v", this.Description) + `,`,
		`Disabled:` + fmt.Sprintf("%v", this.Disabled) + `,`,
		`Metadata:` + strings.Replace(fmt.Sprintf("%v", this.Metadata), "ObjectGetMetaType", "ves_io_schema4.ObjectGetMetaType", 1) + `,`,
		`SystemMetadata:` + strings.Replace(fmt.Sprintf("%v", this.SystemMetadata), "SystemObjectGetMetaType", "ves_io_schema4.SystemObjectGetMetaType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ListResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ListResponse{`,
		`Items:` + strings.Replace(fmt.Sprintf("%v", this.Items), "ListResponseItem", "ListResponseItem", 1) + `,`,
		`Errors:` + strings.Replace(fmt.Sprintf("%v", this.Errors), "ErrorType", "ves_io_schema5.ErrorType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringPublicCrudapi(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *CreateRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCrudapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCrudapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCrudapi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Metadata == nil {
				m.Metadata = &ves_io_schema4.ObjectCreateMetaType{}
			}
			if err := m.Metadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCrudapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCrudapi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Spec == nil {
				m.Spec = &CreateSpecType{}
			}
			if err := m.Spec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCrudapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCrudapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCrudapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCrudapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCrudapi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Metadata == nil {
				m.Metadata = &ves_io_schema4.ObjectGetMetaType{}
			}
			if err := m.Metadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCrudapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCrudapi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Spec == nil {
				m.Spec = &GetSpecType{}
			}
			if err := m.Spec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SystemMetadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCrudapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCrudapi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SystemMetadata == nil {
				m.SystemMetadata = &ves_io_schema4.SystemObjectGetMetaType{}
			}
			if err := m.SystemMetadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCrudapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCrudapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplaceRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCrudapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplaceRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplaceRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCrudapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCrudapi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Metadata == nil {
				m.Metadata = &ves_io_schema4.ObjectReplaceMetaType{}
			}
			if err := m.Metadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCrudapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCrudapi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Spec == nil {
				m.Spec = &ReplaceSpecType{}
			}
			if err := m.Spec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResourceVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCrudapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCrudapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ResourceVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCrudapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCrudapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplaceResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCrudapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplaceResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplaceResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCrudapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCrudapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCrudapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCrudapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCrudapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCrudapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCrudapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResponseFormat", wireType)
			}
			m.ResponseFormat = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCrudapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ResponseFormat |= (GetResponseFormatCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCrudapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCrudapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCrudapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Object", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCrudapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCrudapi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Object == nil {
				m.Object = &Object{}
			}
			if err := m.Object.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateForm", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCrudapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCrudapi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CreateForm == nil {
				m.CreateForm = &CreateRequest{}
			}
			if err := m.CreateForm.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReplaceForm", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCrudapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCrudapi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ReplaceForm == nil {
				m.ReplaceForm = &ReplaceRequest{}
			}
			if err := m.ReplaceForm.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResourceVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCrudapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCrudapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ResourceVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCrudapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCrudapi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Metadata == nil {
				m.Metadata = &ves_io_schema4.ObjectGetMetaType{}
			}
			if err := m.Metadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCrudapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCrudapi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Spec == nil {
				m.Spec = &GetSpecType{}
			}
			if err := m.Spec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SystemMetadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCrudapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCrudapi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SystemMetadata == nil {
				m.SystemMetadata = &ves_io_schema4.SystemObjectGetMetaType{}
			}
			if err := m.SystemMetadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReferringObjects", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCrudapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCrudapi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReferringObjects = append(m.ReferringObjects, &ves_io_schema4.ObjectRefType{})
			if err := m.ReferringObjects[len(m.ReferringObjects)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 20000:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCrudapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCrudapi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = append(m.Status, &StatusObject{})
			if err := m.Status[len(m.Status)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCrudapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCrudapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCrudapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCrudapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCrudapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LabelFilter", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCrudapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCrudapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LabelFilter = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReportFields", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCrudapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCrudapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReportFields = append(m.ReportFields, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReportStatusFields", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCrudapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCrudapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReportStatusFields = append(m.ReportStatusFields, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCrudapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCrudapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListResponseItem) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCrudapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListResponseItem: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListResponseItem: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCrudapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCrudapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCrudapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCrudapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCrudapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCrudapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Uid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Labels", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCrudapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCrudapi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Labels == nil {
				m.Labels = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPublicCrudapi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPublicCrudapi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthPublicCrudapi
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPublicCrudapi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthPublicCrudapi
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipPublicCrudapi(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthPublicCrudapi
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Labels[mapkey] = mapvalue
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Object", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCrudapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCrudapi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Object == nil {
				m.Object = &Object{}
			}
			if err := m.Object.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tenant", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCrudapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCrudapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tenant = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GetSpec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCrudapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCrudapi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.GetSpec == nil {
				m.GetSpec = &GetSpecType{}
			}
			if err := m.GetSpec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StatusSet", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCrudapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCrudapi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StatusSet = append(m.StatusSet, &StatusObject{})
			if err := m.StatusSet[len(m.StatusSet)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OwnerView", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCrudapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCrudapi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.OwnerView == nil {
				m.OwnerView = &ves_io_schema4.ViewRefType{}
			}
			if err := m.OwnerView.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Annotations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCrudapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCrudapi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Annotations == nil {
				m.Annotations = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPublicCrudapi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPublicCrudapi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthPublicCrudapi
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPublicCrudapi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthPublicCrudapi
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipPublicCrudapi(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthPublicCrudapi
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Annotations[mapkey] = mapvalue
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCrudapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCrudapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Disabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCrudapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Disabled = bool(v != 0)
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCrudapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCrudapi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Metadata == nil {
				m.Metadata = &ves_io_schema4.ObjectGetMetaType{}
			}
			if err := m.Metadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SystemMetadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCrudapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCrudapi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SystemMetadata == nil {
				m.SystemMetadata = &ves_io_schema4.SystemObjectGetMetaType{}
			}
			if err := m.SystemMetadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCrudapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCrudapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCrudapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCrudapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCrudapi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &ListResponseItem{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Errors", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCrudapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCrudapi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Errors = append(m.Errors, &ves_io_schema5.ErrorType{})
			if err := m.Errors[len(m.Errors)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCrudapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCrudapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPublicCrudapi(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPublicCrudapi
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPublicCrudapi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPublicCrudapi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthPublicCrudapi
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowPublicCrudapi
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipPublicCrudapi(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthPublicCrudapi = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPublicCrudapi   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("ves.io/schema/user/public_crudapi.proto", fileDescriptorPublicCrudapi)
}
func init() {
	golang_proto.RegisterFile("ves.io/schema/user/public_crudapi.proto", fileDescriptorPublicCrudapi)
}

var fileDescriptorPublicCrudapi = []byte{
	// 1440 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x57, 0x51, 0x6f, 0x1b, 0xc5,
	0x13, 0xcf, 0xda, 0x8e, 0x1b, 0x8f, 0xd3, 0xc4, 0xdd, 0x7f, 0xdb, 0xff, 0xc5, 0x94, 0x8b, 0xeb,
	0x44, 0x25, 0x14, 0xd9, 0xae, 0x82, 0x10, 0x34, 0x82, 0x16, 0x27, 0x71, 0xd2, 0xa0, 0xb4, 0x89,
	0xd6, 0x6e, 0x91, 0x78, 0x39, 0x9d, 0xed, 0x89, 0x7b, 0xd4, 0xf6, 0x1d, 0x77, 0x6b, 0x87, 0x08,
	0x22, 0x41, 0x3f, 0x01, 0x02, 0x1e, 0x10, 0xe2, 0x01, 0x09, 0x90, 0xf8, 0x04, 0x08, 0x29, 0x2f,
	0x7d, 0x6b, 0x55, 0x21, 0xa8, 0xe0, 0xa5, 0x8f, 0xd4, 0x45, 0xa8, 0x4f, 0xa8, 0x1f, 0x01, 0xdd,
	0xee, 0xd9, 0xb5, 0x9d, 0x73, 0x9d, 0xb4, 0x3c, 0xf9, 0x76, 0x66, 0x7e, 0xb3, 0xbf, 0x99, 0x9d,
	0xd9, 0x1d, 0xc3, 0x4b, 0x4d, 0x74, 0xd2, 0x86, 0x99, 0x71, 0x4a, 0xd7, 0xb1, 0xa6, 0x67, 0x1a,
	0x0e, 0xda, 0x19, 0xab, 0x51, 0xac, 0x1a, 0x25, 0xad, 0x64, 0x37, 0xca, 0xba, 0x65, 0xa4, 0x2d,
	0xdb, 0xe4, 0x26, 0xa5, 0xd2, 0x30, 0x2d, 0x0d, 0xd3, 0xae, 0x61, 0x3c, 0x55, 0x31, 0xf8, 0xf5,
	0x46, 0x31, 0x5d, 0x32, 0x6b, 0x99, 0x8a, 0x59, 0x31, 0x33, 0xc2, 0xb4, 0xd8, 0xd8, 0x12, 0x2b,
	0xb1, 0x10, 0x5f, 0xd2, 0x45, 0xfc, 0x54, 0xc5, 0x34, 0x2b, 0x55, 0xcc, 0xe8, 0x96, 0x91, 0xd1,
	0xeb, 0x75, 0x93, 0xeb, 0xdc, 0x30, 0xeb, 0x8e, 0xa7, 0x7d, 0xc1, 0xd3, 0x76, 0x7c, 0x60, 0xcd,
	0xe2, 0x3b, 0x9e, 0x32, 0xde, 0x4b, 0x13, 0x6d, 0xdb, 0xb4, 0x3b, 0xc0, 0x5e, 0x9d, 0x69, 0x75,
	0x7b, 0x9d, 0xea, 0x55, 0xf2, 0x1d, 0x0b, 0xdb, 0xaa, 0x69, 0x9f, 0xd0, 0xcd, 0xe2, 0xfb, 0x58,
	0xe2, 0x9e, 0x81, 0xea, 0x63, 0xd0, 0xed, 0x20, 0xd9, 0xab, 0x6f, 0xa2, 0x83, 0xf5, 0x66, 0xdf,
	0xfe, 0x89, 0x3e, 0x1b, 0x03, 0xb7, 0xb5, 0x1e, 0x8b, 0xe4, 0xf7, 0x04, 0x8e, 0x2e, 0xd9, 0xa8,
	0x73, 0x64, 0xf8, 0x41, 0x03, 0x1d, 0x4e, 0x2f, 0xc2, 0x58, 0x0d, 0xb9, 0x5e, 0xd6, 0xb9, 0xae,
	0x90, 0x04, 0x99, 0x8b, 0xce, 0xcf, 0xa4, 0x7b, 0xb3, 0xbf, 0x21, 0x68, 0x4a, 0xd4, 0x65, 0xe4,
	0x7a, 0x61, 0xc7, 0x42, 0xd6, 0x01, 0xd1, 0x55, 0x08, 0x39, 0x16, 0x96, 0x94, 0x80, 0x00, 0x27,
	0xd3, 0xfb, 0x8f, 0x2e, 0x2d, 0xb1, 0x79, 0x0b, 0x4b, 0x2e, 0x76, 0x71, 0xf2, 0xeb, 0xdd, 0x71,
	0x17, 0x92, 0xae, 0x94, 0x34, 0xf7, 0x97, 0x09, 0x07, 0x0b, 0x91, 0xbb, 0x17, 0xc2, 0x72, 0xaf,
	0xe4, 0x63, 0x02, 0x13, 0x6d, 0x9a, 0x8e, 0x65, 0xd6, 0x1d, 0xa4, 0x6f, 0xee, 0xe3, 0x99, 0xf0,
	0xe5, 0xb9, 0x8a, 0xdc, 0x87, 0xe4, 0x72, 0x0f, 0xc9, 0x69, 0x3f, 0x92, 0xab, 0xc8, 0x87, 0x30,
	0xa4, 0x1b, 0x30, 0xe9, 0xec, 0x38, 0x1c, 0x6b, 0x5a, 0x87, 0x4a, 0x50, 0x38, 0x3c, 0xd3, 0xe7,
	0x30, 0x2f, 0xac, 0xf6, 0x13, 0x9a, 0x90, 0xf0, 0xcb, 0x1e, 0xba, 0x3b, 0xe4, 0xfb, 0x04, 0x26,
	0x18, 0x5a, 0x55, 0xbd, 0xd4, 0x39, 0x9a, 0xb7, 0xf7, 0x85, 0x3c, 0xeb, 0x1b, 0xb2, 0x07, 0xf3,
	0x09, 0xfb, 0x52, 0x4f, 0xd8, 0x33, 0x7e, 0x61, 0x7b, 0xe0, 0x61, 0xa1, 0x67, 0x20, 0x66, 0xa3,
	0x63, 0x36, 0xec, 0x12, 0x6a, 0x4d, 0xb4, 0x1d, 0xc3, 0xac, 0x8b, 0xd8, 0x23, 0x8b, 0xa1, 0x47,
	0x7b, 0x84, 0xb0, 0xc9, 0xb6, 0xf6, 0x9a, 0x54, 0x76, 0x87, 0x76, 0x0c, 0x26, 0x3b, 0x91, 0xc9,
	0xd3, 0x4c, 0x7e, 0x4e, 0x00, 0x56, 0x91, 0xb7, 0x23, 0x3d, 0x05, 0x91, 0xba, 0x5e, 0x43, 0xc7,
	0xd2, 0x4b, 0x28, 0x42, 0x8d, 0xb0, 0x27, 0x02, 0x4a, 0x21, 0xe4, 0x2e, 0x44, 0x14, 0x11, 0x26,
	0xbe, 0x29, 0x03, 0x77, 0x47, 0xe1, 0x4c, 0xdb, 0x32, 0xed, 0x9a, 0xce, 0x05, 0x9d, 0x89, 0xf9,
	0x97, 0x07, 0x9c, 0x6d, 0x7b, 0xeb, 0x15, 0x61, 0xbc, 0x64, 0x96, 0x91, 0x4d, 0xd8, 0x3d, 0xb2,
	0xe4, 0x3f, 0x21, 0x88, 0x76, 0x59, 0xd2, 0xd7, 0x21, 0x2c, 0x5b, 0xd4, 0xcb, 0x7e, 0xdc, 0xcf,
	0xb5, 0x8c, 0x71, 0x31, 0x78, 0x6b, 0x97, 0x30, 0xcf, 0x9c, 0x2e, 0x42, 0xb4, 0x24, 0xaa, 0x57,
	0x50, 0xf3, 0xb2, 0x7f, 0x7a, 0x70, 0x67, 0x78, 0x69, 0x60, 0x20, 0x51, 0x2e, 0x1d, 0x9a, 0x83,
	0x71, 0x5b, 0x26, 0x4d, 0x3a, 0x09, 0x0e, 0x6e, 0xaf, 0xde, 0xb2, 0x61, 0x51, 0x0f, 0x27, 0xdc,
	0xf8, 0x9d, 0x5b, 0xe8, 0x29, 0xe7, 0xd6, 0xd3, 0x67, 0xa3, 0xcf, 0xdc, 0x67, 0xe1, 0xff, 0xba,
	0xcf, 0x8e, 0x3c, 0x4f, 0x9f, 0xd1, 0x35, 0x38, 0x66, 0xe3, 0x16, 0xda, 0xb6, 0x51, 0xaf, 0x68,
	0xf2, 0x90, 0x1c, 0x65, 0x2c, 0x11, 0x9c, 0x8b, 0xce, 0x9f, 0x1a, 0xd0, 0x52, 0x5b, 0xc2, 0x51,
	0xac, 0x03, 0x93, 0x72, 0x87, 0x5e, 0x84, 0xb0, 0xc3, 0x75, 0xde, 0x70, 0x94, 0x6f, 0xbf, 0x21,
	0xc2, 0x43, 0xc2, 0x2f, 0xca, 0xbc, 0xb0, 0xe9, 0x29, 0x0e, 0x09, 0xeb, 0x6e, 0x8c, 0x1f, 0x08,
	0x44, 0xd7, 0x0d, 0xe7, 0x80, 0x6d, 0x70, 0x1a, 0xc6, 0xab, 0x7a, 0x11, 0xab, 0xda, 0x96, 0x51,
	0xe5, 0x68, 0x7b, 0xed, 0x10, 0x15, 0xb2, 0x15, 0x21, 0xa2, 0x33, 0x70, 0xd4, 0x46, 0xcb, 0xb4,
	0xb9, 0xb6, 0x65, 0x60, 0xb5, 0xec, 0x28, 0xc1, 0x44, 0x70, 0x2e, 0xc2, 0xc6, 0xa5, 0x70, 0x45,
	0xc8, 0xe8, 0x39, 0x38, 0xee, 0x19, 0x49, 0x46, 0x6d, 0xdb, 0x90, 0xb0, 0xa5, 0x52, 0x27, 0xf9,
	0x4b, 0x44, 0xf2, 0xb7, 0x30, 0xc4, 0x24, 0x4f, 0xd9, 0x19, 0x6b, 0x1c, 0x6b, 0xcf, 0xd0, 0xb3,
	0x31, 0x08, 0x36, 0x8c, 0xb2, 0xbc, 0x36, 0x98, 0xfb, 0x49, 0x2f, 0x41, 0x58, 0xd0, 0x97, 0x9b,
	0x47, 0xe7, 0xcf, 0xf9, 0xa5, 0xb2, 0x7f, 0xe7, 0xf4, 0xba, 0x80, 0xe4, 0xea, 0xdc, 0xde, 0x61,
	0x1e, 0xbe, 0xab, 0x57, 0x47, 0x0f, 0xd7, 0xab, 0x27, 0x21, 0xcc, 0xb1, 0xae, 0xd7, 0xb9, 0xa8,
	0xd9, 0x08, 0xf3, 0x56, 0x74, 0x01, 0xc6, 0x2a, 0xc8, 0x45, 0x55, 0x7a, 0xc5, 0x37, 0xac, 0x9a,
	0xd9, 0x91, 0x8a, 0x5c, 0xd0, 0x65, 0x00, 0x2f, 0xb5, 0x0e, 0x72, 0xaf, 0xce, 0x0e, 0x58, 0x25,
	0x11, 0x09, 0xcc, 0x23, 0xa7, 0xe7, 0x01, 0xcc, 0xed, 0x3a, 0xda, 0x9a, 0xfb, 0x8e, 0x2b, 0x11,
	0xdf, 0xb0, 0xae, 0x19, 0xb8, 0xdd, 0xae, 0xd5, 0x88, 0xb0, 0x76, 0x25, 0xf4, 0x5d, 0x88, 0x76,
	0xcd, 0x3c, 0x0a, 0x08, 0x06, 0xaf, 0x1d, 0x28, 0xb9, 0xd9, 0x27, 0x38, 0x99, 0xe1, 0x6e, 0x4f,
	0x34, 0x01, 0xd1, 0x32, 0x3a, 0x25, 0xdb, 0x10, 0x53, 0x85, 0x12, 0x95, 0x25, 0xd8, 0x25, 0xa2,
	0x71, 0x18, 0x2b, 0x1b, 0x8e, 0x5e, 0xac, 0x62, 0x59, 0x19, 0x4f, 0x90, 0xb9, 0x31, 0xd6, 0x59,
	0xf7, 0xdc, 0x2d, 0x47, 0x0f, 0x7d, 0xb7, 0xf8, 0xdc, 0x0a, 0x13, 0xcf, 0x73, 0x2b, 0xc4, 0xcf,
	0x43, 0xb4, 0xab, 0x94, 0xdc, 0xf2, 0xbc, 0x81, 0x3b, 0x5e, 0x29, 0xbb, 0x9f, 0xf4, 0x38, 0x8c,
	0x36, 0xf5, 0x6a, 0xa3, 0x5d, 0xc5, 0x72, 0xb1, 0x10, 0x78, 0x83, 0xc4, 0x2f, 0x40, 0xac, 0x3f,
	0x51, 0x87, 0xc1, 0x27, 0x3f, 0x86, 0xf1, 0xee, 0xcc, 0xd3, 0x05, 0x18, 0x35, 0x38, 0xd6, 0x1c,
	0x45, 0x5e, 0x29, 0xb3, 0x07, 0x39, 0x2a, 0x26, 0x21, 0xf4, 0x1c, 0x84, 0xe5, 0x88, 0xaa, 0x04,
	0x04, 0x58, 0xe9, 0x03, 0xe7, 0x5c, 0xa5, 0x48, 0x80, 0x67, 0x77, 0xf6, 0x17, 0x02, 0x27, 0x7c,
	0x9f, 0x44, 0x1a, 0x87, 0x93, 0xab, 0xb9, 0x82, 0xc6, 0xf2, 0x9b, 0xda, 0xca, 0x06, 0xbb, 0x9c,
	0x2d, 0x68, 0xcb, 0xb9, 0x95, 0xec, 0xd5, 0xf5, 0x42, 0x6c, 0x84, 0xbe, 0x08, 0x53, 0x7d, 0xba,
	0x95, 0x0d, 0xa6, 0x2d, 0xb1, 0x5c, 0xb6, 0x90, 0x8b, 0x11, 0xaa, 0x42, 0xdc, 0x47, 0xcd, 0x72,
	0x9b, 0xeb, 0xd9, 0xa5, 0x5c, 0x2c, 0x40, 0xa7, 0xe0, 0x44, 0x9f, 0x3e, 0x5f, 0xc8, 0x16, 0xae,
	0xe6, 0x63, 0x41, 0xfa, 0x7f, 0xf8, 0x5f, 0x9f, 0x8a, 0xe5, 0xb2, 0xcb, 0xb1, 0x10, 0x9d, 0x85,
	0xc4, 0x3e, 0xc5, 0x4a, 0x8e, 0xb1, 0xb5, 0x2b, 0xab, 0xda, 0xc6, 0xe2, 0x3b, 0xb9, 0xa5, 0x42,
	0x3e, 0x36, 0x3a, 0xff, 0xf7, 0x28, 0x04, 0xb3, 0x9b, 0x6b, 0xf4, 0x3b, 0x02, 0x61, 0xf9, 0xa0,
	0xd2, 0xe1, 0x8f, 0x6d, 0x3c, 0xf9, 0x34, 0x13, 0x6f, 0x4c, 0x61, 0xad, 0xdb, 0xca, 0xc9, 0x26,
	0x3a, 0x29, 0xc3, 0x4c, 0x35, 0xf4, 0x5a, 0x4a, 0x2f, 0xd7, 0x8c, 0x7a, 0x6a, 0xdb, 0x36, 0x38,
	0xde, 0xfc, 0xe3, 0xaf, 0x2f, 0x02, 0xf3, 0xc9, 0x94, 0xf7, 0x07, 0x26, 0xd3, 0xb9, 0xfa, 0x9c,
	0xcc, 0x47, 0xed, 0xfa, 0x4c, 0x77, 0x84, 0xbb, 0x62, 0xa0, 0x77, 0x16, 0xc8, 0x59, 0xfa, 0x15,
	0x81, 0xe0, 0x2a, 0x72, 0xaa, 0x0e, 0x1c, 0x54, 0x24, 0xbf, 0xe9, 0x21, 0x83, 0x4c, 0x72, 0xf3,
	0xce, 0xcf, 0x01, 0xd2, 0xba, 0xad, 0x9c, 0xd8, 0x47, 0xd0, 0x46, 0xbd, 0x2c, 0xf8, 0xa5, 0xe8,
	0x2b, 0x7e, 0xfc, 0xfa, 0x69, 0x49, 0xc9, 0x2e, 0xfd, 0x92, 0x40, 0xc8, 0xad, 0x32, 0x3a, 0x3d,
	0xb8, 0xfe, 0x24, 0xb9, 0xc4, 0xb0, 0x02, 0x4d, 0xae, 0x0d, 0x67, 0x77, 0x86, 0xce, 0x1e, 0x84,
	0x1d, 0xfd, 0x89, 0xc0, 0x11, 0x6f, 0xc6, 0xa1, 0x07, 0x18, 0x80, 0xe2, 0x33, 0x4f, 0xb5, 0xf1,
	0xf8, 0x15, 0x87, 0x1c, 0xed, 0x62, 0xfc, 0xad, 0x43, 0x1d, 0x6d, 0x9f, 0x6a, 0x77, 0x81, 0x9c,
	0x8d, 0x5f, 0xb9, 0xb5, 0x47, 0x02, 0xbf, 0xef, 0x91, 0xa9, 0x81, 0x6f, 0xd1, 0xfd, 0x3d, 0x42,
	0x5a, 0x7b, 0x64, 0x7a, 0xc8, 0xdb, 0x70, 0xf3, 0x57, 0x25, 0x70, 0x9d, 0x2c, 0x7e, 0x4a, 0xee,
	0x5e, 0x08, 0x2d, 0xb1, 0xab, 0xeb, 0xf7, 0x1e, 0xa8, 0x23, 0xf7, 0x1f, 0xa8, 0x23, 0x8f, 0x1f,
	0xa8, 0xe4, 0x93, 0x96, 0x4a, 0x7e, 0x6c, 0xa9, 0xe4, 0x4e, 0x4b, 0x25, 0xf7, 0x5a, 0x2a, 0xf9,
	0xb3, 0xa5, 0x92, 0x47, 0x2d, 0x75, 0xe4, 0x71, 0x4b, 0x25, 0x9f, 0x3d, 0x54, 0x47, 0x6e, 0x3d,
	0x54, 0xc9, 0x7b, 0x97, 0x2a, 0xa6, 0x75, 0xa3, 0x92, 0x6e, 0x9a, 0xee, 0x98, 0x60, 0xbb, 0x3b,
	0x64, 0xc4, 0x87, 0x3b, 0x5a, 0xa6, 0x2c, 0xdb, 0x6c, 0x1a, 0x65, 0xb4, 0x53, 0x6d, 0x75, 0xc6,
	0x2a, 0x56, 0xcc, 0x0c, 0x7e, 0xc8, 0xbd, 0x3f, 0x92, 0x5d, 0xff, 0x49, 0x8b, 0x61, 0xf1, 0x47,
	0xf2, 0xd5, 0x7f, 0x03, 0x00, 0x00, 0xff, 0xff, 0xfd, 0xe2, 0xb8, 0x67, 0xcc, 0x0f, 0x00, 0x00,
}
