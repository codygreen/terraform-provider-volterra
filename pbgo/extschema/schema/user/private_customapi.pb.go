// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ves.io/schema/user/private_customapi.proto

package user

import proto "github.com/gogo/protobuf/proto"
import golang_proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"
import _ "github.com/gogo/googleapis/google/api"
import google_protobuf1 "github.com/gogo/protobuf/types"
import _ "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
import _ "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"

import strings "strings"
import reflect "reflect"

import context "golang.org/x/net/context"
import grpc "google.golang.org/grpc"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// LastLoginUpdateRequest
//
// x-displayName: "Last Login Update Request"
// Request to update user login timestamp.
type LastLoginUpdateRequest struct {
	// user
	//
	// x-displayName: "User"
	// x-example: "user@company1.com"
	// User ID of the user. typically email id
	User string `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
	// tenant
	//
	// x-displayName: "Tenant"
	// x-example: "company1-as432s"
	// Tenant ID of the tenant user belongs to.
	Tenant string `protobuf:"bytes,2,opt,name=tenant,proto3" json:"tenant,omitempty"`
	// last_login_timestamp
	//
	// x-displayName: "Last Login Timestamp"
	// Last successful login timestamp of the user .
	LastLoginTimestamp *google_protobuf1.Timestamp `protobuf:"bytes,3,opt,name=last_login_timestamp,json=lastLoginTimestamp" json:"last_login_timestamp,omitempty"`
}

func (m *LastLoginUpdateRequest) Reset()      { *m = LastLoginUpdateRequest{} }
func (*LastLoginUpdateRequest) ProtoMessage() {}
func (*LastLoginUpdateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorPrivateCustomapi, []int{0}
}

func (m *LastLoginUpdateRequest) GetUser() string {
	if m != nil {
		return m.User
	}
	return ""
}

func (m *LastLoginUpdateRequest) GetTenant() string {
	if m != nil {
		return m.Tenant
	}
	return ""
}

func (m *LastLoginUpdateRequest) GetLastLoginTimestamp() *google_protobuf1.Timestamp {
	if m != nil {
		return m.LastLoginTimestamp
	}
	return nil
}

// LastLoginUpdateResponse
//
// x-displayName: "Last Login Update Response"
type LastLoginUpdateResponse struct {
}

func (m *LastLoginUpdateResponse) Reset()      { *m = LastLoginUpdateResponse{} }
func (*LastLoginUpdateResponse) ProtoMessage() {}
func (*LastLoginUpdateResponse) Descriptor() ([]byte, []int) {
	return fileDescriptorPrivateCustomapi, []int{1}
}

func init() {
	proto.RegisterType((*LastLoginUpdateRequest)(nil), "ves.io.schema.user.LastLoginUpdateRequest")
	golang_proto.RegisterType((*LastLoginUpdateRequest)(nil), "ves.io.schema.user.LastLoginUpdateRequest")
	proto.RegisterType((*LastLoginUpdateResponse)(nil), "ves.io.schema.user.LastLoginUpdateResponse")
	golang_proto.RegisterType((*LastLoginUpdateResponse)(nil), "ves.io.schema.user.LastLoginUpdateResponse")
}
func (this *LastLoginUpdateRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*LastLoginUpdateRequest)
	if !ok {
		that2, ok := that.(LastLoginUpdateRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.User != that1.User {
		return false
	}
	if this.Tenant != that1.Tenant {
		return false
	}
	if !this.LastLoginTimestamp.Equal(that1.LastLoginTimestamp) {
		return false
	}
	return true
}
func (this *LastLoginUpdateResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*LastLoginUpdateResponse)
	if !ok {
		that2, ok := that.(LastLoginUpdateResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *LastLoginUpdateRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&user.LastLoginUpdateRequest{")
	s = append(s, "User: "+fmt.Sprintf("%#v", this.User)+",\n")
	s = append(s, "Tenant: "+fmt.Sprintf("%#v", this.Tenant)+",\n")
	if this.LastLoginTimestamp != nil {
		s = append(s, "LastLoginTimestamp: "+fmt.Sprintf("%#v", this.LastLoginTimestamp)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *LastLoginUpdateResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&user.LastLoginUpdateResponse{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringPrivateCustomapi(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for CustomPrivateAPI service

type CustomPrivateAPIClient interface {
	// Update Last Login
	//
	// x-displayName: "Update Last Login"
	// API to update last login timestamp of user
	UpdateLastLogin(ctx context.Context, in *LastLoginUpdateRequest, opts ...grpc.CallOption) (*LastLoginUpdateResponse, error)
}

type customPrivateAPIClient struct {
	cc *grpc.ClientConn
}

func NewCustomPrivateAPIClient(cc *grpc.ClientConn) CustomPrivateAPIClient {
	return &customPrivateAPIClient{cc}
}

func (c *customPrivateAPIClient) UpdateLastLogin(ctx context.Context, in *LastLoginUpdateRequest, opts ...grpc.CallOption) (*LastLoginUpdateResponse, error) {
	out := new(LastLoginUpdateResponse)
	err := grpc.Invoke(ctx, "/ves.io.schema.user.CustomPrivateAPI/UpdateLastLogin", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for CustomPrivateAPI service

type CustomPrivateAPIServer interface {
	// Update Last Login
	//
	// x-displayName: "Update Last Login"
	// API to update last login timestamp of user
	UpdateLastLogin(context.Context, *LastLoginUpdateRequest) (*LastLoginUpdateResponse, error)
}

func RegisterCustomPrivateAPIServer(s *grpc.Server, srv CustomPrivateAPIServer) {
	s.RegisterService(&_CustomPrivateAPI_serviceDesc, srv)
}

func _CustomPrivateAPI_UpdateLastLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LastLoginUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomPrivateAPIServer).UpdateLastLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ves.io.schema.user.CustomPrivateAPI/UpdateLastLogin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomPrivateAPIServer).UpdateLastLogin(ctx, req.(*LastLoginUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _CustomPrivateAPI_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ves.io.schema.user.CustomPrivateAPI",
	HandlerType: (*CustomPrivateAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateLastLogin",
			Handler:    _CustomPrivateAPI_UpdateLastLogin_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ves.io/schema/user/private_customapi.proto",
}

func (m *LastLoginUpdateRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LastLoginUpdateRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.User) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPrivateCustomapi(dAtA, i, uint64(len(m.User)))
		i += copy(dAtA[i:], m.User)
	}
	if len(m.Tenant) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintPrivateCustomapi(dAtA, i, uint64(len(m.Tenant)))
		i += copy(dAtA[i:], m.Tenant)
	}
	if m.LastLoginTimestamp != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintPrivateCustomapi(dAtA, i, uint64(m.LastLoginTimestamp.Size()))
		n1, err := m.LastLoginTimestamp.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	return i, nil
}

func (m *LastLoginUpdateResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LastLoginUpdateResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func encodeVarintPrivateCustomapi(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *LastLoginUpdateRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.User)
	if l > 0 {
		n += 1 + l + sovPrivateCustomapi(uint64(l))
	}
	l = len(m.Tenant)
	if l > 0 {
		n += 1 + l + sovPrivateCustomapi(uint64(l))
	}
	if m.LastLoginTimestamp != nil {
		l = m.LastLoginTimestamp.Size()
		n += 1 + l + sovPrivateCustomapi(uint64(l))
	}
	return n
}

func (m *LastLoginUpdateResponse) Size() (n int) {
	var l int
	_ = l
	return n
}

func sovPrivateCustomapi(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozPrivateCustomapi(x uint64) (n int) {
	return sovPrivateCustomapi(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *LastLoginUpdateRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&LastLoginUpdateRequest{`,
		`User:` + fmt.Sprintf("%v", this.User) + `,`,
		`Tenant:` + fmt.Sprintf("%v", this.Tenant) + `,`,
		`LastLoginTimestamp:` + strings.Replace(fmt.Sprintf("%v", this.LastLoginTimestamp), "Timestamp", "google_protobuf1.Timestamp", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *LastLoginUpdateResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&LastLoginUpdateResponse{`,
		`}`,
	}, "")
	return s
}
func valueToStringPrivateCustomapi(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *LastLoginUpdateRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPrivateCustomapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LastLoginUpdateRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LastLoginUpdateRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field User", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrivateCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPrivateCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.User = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tenant", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrivateCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPrivateCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tenant = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastLoginTimestamp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrivateCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPrivateCustomapi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LastLoginTimestamp == nil {
				m.LastLoginTimestamp = &google_protobuf1.Timestamp{}
			}
			if err := m.LastLoginTimestamp.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPrivateCustomapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPrivateCustomapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LastLoginUpdateResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPrivateCustomapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LastLoginUpdateResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LastLoginUpdateResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipPrivateCustomapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPrivateCustomapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPrivateCustomapi(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPrivateCustomapi
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPrivateCustomapi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPrivateCustomapi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthPrivateCustomapi
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowPrivateCustomapi
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipPrivateCustomapi(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthPrivateCustomapi = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPrivateCustomapi   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("ves.io/schema/user/private_customapi.proto", fileDescriptorPrivateCustomapi)
}
func init() {
	golang_proto.RegisterFile("ves.io/schema/user/private_customapi.proto", fileDescriptorPrivateCustomapi)
}

var fileDescriptorPrivateCustomapi = []byte{
	// 481 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x92, 0xbd, 0x6e, 0x13, 0x41,
	0x10, 0xc7, 0xbd, 0x21, 0x8a, 0xc4, 0x51, 0x80, 0x4e, 0x28, 0xd8, 0x07, 0x5a, 0x82, 0xab, 0xc8,
	0xc8, 0xbb, 0x52, 0xa8, 0xa0, 0x40, 0xe2, 0xa3, 0x00, 0xc9, 0x12, 0x91, 0x05, 0x0d, 0x8d, 0xb5,
	0x77, 0x99, 0x5c, 0x16, 0xee, 0x6e, 0x96, 0xdb, 0x39, 0x8b, 0x50, 0x21, 0x9e, 0x00, 0xc1, 0x4b,
	0x50, 0xd2, 0xa7, 0x49, 0x49, 0x19, 0x41, 0x43, 0x89, 0x2f, 0x14, 0x29, 0xf3, 0x08, 0xc8, 0x7b,
	0x1f, 0x38, 0x8a, 0x8b, 0x74, 0x3b, 0x3b, 0xbf, 0xf9, 0xef, 0xcc, 0xfe, 0xc7, 0x1b, 0x4c, 0xc1,
	0x0a, 0x8d, 0xd2, 0x46, 0x7b, 0x90, 0x2a, 0x59, 0x58, 0xc8, 0xa5, 0xc9, 0xf5, 0x54, 0x11, 0x4c,
	0xa2, 0xc2, 0x12, 0xa6, 0xca, 0x68, 0x61, 0x72, 0x24, 0xf4, 0xfd, 0x8a, 0x15, 0x15, 0x2b, 0xe6,
	0x6c, 0x30, 0x8c, 0x35, 0xed, 0x15, 0xa1, 0x88, 0x30, 0x95, 0x31, 0xc6, 0x28, 0x1d, 0x1a, 0x16,
	0xbb, 0x2e, 0x72, 0x81, 0x3b, 0x55, 0x12, 0xc1, 0xad, 0x18, 0x31, 0x4e, 0x40, 0x2a, 0xa3, 0xa5,
	0xca, 0x32, 0x24, 0x45, 0x1a, 0x33, 0x5b, 0x67, 0x6f, 0xd7, 0xd9, 0x56, 0x83, 0x74, 0x0a, 0x96,
	0x54, 0x6a, 0x6a, 0xe0, 0xe6, 0xd9, 0x6e, 0xd1, 0x2c, 0x56, 0xf7, 0xce, 0x26, 0x69, 0xdf, 0x40,
	0x2b, 0xbc, 0x64, 0x4a, 0x0c, 0xdf, 0x40, 0x44, 0x35, 0xc0, 0x97, 0x00, 0x0b, 0x02, 0xfd, 0x2f,
	0xcc, 0x5b, 0x1f, 0x29, 0x4b, 0x23, 0x8c, 0x75, 0xf6, 0xca, 0xec, 0x28, 0x82, 0x31, 0xbc, 0x2b,
	0xc0, 0x92, 0xef, 0x7b, 0xab, 0x73, 0xbc, 0xcb, 0x36, 0xd8, 0xe6, 0xe5, 0xb1, 0x3b, 0xfb, 0xeb,
	0xde, 0x1a, 0x41, 0xa6, 0x32, 0xea, 0xae, 0xb8, 0xdb, 0x3a, 0xf2, 0x47, 0xde, 0xf5, 0x44, 0x59,
	0x9a, 0x24, 0x73, 0x99, 0x49, 0x3b, 0x5d, 0xf7, 0xd2, 0x06, 0xdb, 0xbc, 0xb2, 0x15, 0x88, 0x6a,
	0x7e, 0xd1, 0xcc, 0x2f, 0x5e, 0x36, 0xc4, 0xd8, 0x4f, 0x9a, 0xd7, 0xdb, 0xbb, 0x7e, 0xcf, 0xbb,
	0x71, 0xae, 0x27, 0x6b, 0x30, 0xb3, 0xb0, 0x75, 0xc2, 0xbc, 0x6b, 0x4f, 0x9c, 0x7d, 0xdb, 0x95,
	0x99, 0x8f, 0xb6, 0x9f, 0xfb, 0xdf, 0x99, 0x77, 0xb5, 0xe2, 0xda, 0x32, 0x7f, 0x20, 0xce, 0x9b,
	0x2a, 0x96, 0x4f, 0x1a, 0xdc, 0xbd, 0x10, 0x5b, 0x75, 0xd0, 0x7f, 0xfa, 0xe9, 0xd7, 0xdf, 0xaf,
	0x2b, 0x0f, 0xfb, 0xf7, 0x9b, 0x75, 0x92, 0xd5, 0x3a, 0xc9, 0x4c, 0xa5, 0x60, 0x8d, 0x8a, 0xc0,
	0x4a, 0xbb, 0x6f, 0x09, 0x52, 0xf7, 0xdb, 0x56, 0x16, 0xae, 0x7e, 0xf2, 0xff, 0x7f, 0x1e, 0xb0,
	0x41, 0x70, 0xe7, 0xf0, 0x80, 0xad, 0xfe, 0x3c, 0x60, 0xbd, 0x25, 0x2f, 0xbf, 0x70, 0x06, 0x3e,
	0xfe, 0x70, 0x34, 0xe3, 0x9d, 0xdf, 0x33, 0xde, 0x39, 0x9d, 0x71, 0xf6, 0xb1, 0xe4, 0xec, 0x5b,
	0xc9, 0xd9, 0x8f, 0x92, 0xb3, 0xa3, 0x92, 0xb3, 0x3f, 0x25, 0x67, 0x27, 0x25, 0xef, 0x9c, 0x96,
	0x9c, 0x7d, 0x3e, 0xe6, 0x9d, 0xc3, 0x63, 0xce, 0x5e, 0x3f, 0x8b, 0xd1, 0xbc, 0x8d, 0xc5, 0x14,
	0x13, 0x82, 0x3c, 0x9f, 0xab, 0x49, 0x77, 0xd8, 0xc5, 0x3c, 0x1d, 0x9a, 0x1c, 0xa7, 0x7a, 0x07,
	0xf2, 0x61, 0x93, 0x96, 0x26, 0x8c, 0x51, 0xc2, 0x7b, 0xaa, 0x77, 0x63, 0x61, 0x45, 0xc2, 0x35,
	0xe7, 0xd4, 0xbd, 0x7f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x11, 0xb7, 0xa9, 0x94, 0x46, 0x03, 0x00,
	0x00,
}
