// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ves.io/schema/malicious_user_mitigation/types.proto

package malicious_user_mitigation

import proto "github.com/gogo/protobuf/proto"
import golang_proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"
import _ "github.com/gogo/protobuf/types"
import _ "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
import ves_io_schema4 "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
import _ "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
import _ "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"

import strings "strings"
import reflect "reflect"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// MaliciousUserThreatLevel
//
// x-displayName: "Malicious User Threat Level"
// Threat level estimated for each user based on the user's activity and reputation
type MaliciousUserThreatLevel struct {
	// threat level
	//
	// x-displayName: "Threat Level"
	// x-required
	// Threat level estimated for each user based on the user's activity and reputation
	//
	// Types that are valid to be assigned to ThreatLevel:
	//	*MaliciousUserThreatLevel_Low
	//	*MaliciousUserThreatLevel_Medium
	//	*MaliciousUserThreatLevel_High
	ThreatLevel isMaliciousUserThreatLevel_ThreatLevel `protobuf_oneof:"threat_level"`
}

func (m *MaliciousUserThreatLevel) Reset()                    { *m = MaliciousUserThreatLevel{} }
func (*MaliciousUserThreatLevel) ProtoMessage()               {}
func (*MaliciousUserThreatLevel) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{0} }

type isMaliciousUserThreatLevel_ThreatLevel interface {
	isMaliciousUserThreatLevel_ThreatLevel()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type MaliciousUserThreatLevel_Low struct {
	Low *ves_io_schema4.Empty `protobuf:"bytes,1,opt,name=low,oneof"`
}
type MaliciousUserThreatLevel_Medium struct {
	Medium *ves_io_schema4.Empty `protobuf:"bytes,2,opt,name=medium,oneof"`
}
type MaliciousUserThreatLevel_High struct {
	High *ves_io_schema4.Empty `protobuf:"bytes,3,opt,name=high,oneof"`
}

func (*MaliciousUserThreatLevel_Low) isMaliciousUserThreatLevel_ThreatLevel()    {}
func (*MaliciousUserThreatLevel_Medium) isMaliciousUserThreatLevel_ThreatLevel() {}
func (*MaliciousUserThreatLevel_High) isMaliciousUserThreatLevel_ThreatLevel()   {}

func (m *MaliciousUserThreatLevel) GetThreatLevel() isMaliciousUserThreatLevel_ThreatLevel {
	if m != nil {
		return m.ThreatLevel
	}
	return nil
}

func (m *MaliciousUserThreatLevel) GetLow() *ves_io_schema4.Empty {
	if x, ok := m.GetThreatLevel().(*MaliciousUserThreatLevel_Low); ok {
		return x.Low
	}
	return nil
}

func (m *MaliciousUserThreatLevel) GetMedium() *ves_io_schema4.Empty {
	if x, ok := m.GetThreatLevel().(*MaliciousUserThreatLevel_Medium); ok {
		return x.Medium
	}
	return nil
}

func (m *MaliciousUserThreatLevel) GetHigh() *ves_io_schema4.Empty {
	if x, ok := m.GetThreatLevel().(*MaliciousUserThreatLevel_High); ok {
		return x.High
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*MaliciousUserThreatLevel) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _MaliciousUserThreatLevel_OneofMarshaler, _MaliciousUserThreatLevel_OneofUnmarshaler, _MaliciousUserThreatLevel_OneofSizer, []interface{}{
		(*MaliciousUserThreatLevel_Low)(nil),
		(*MaliciousUserThreatLevel_Medium)(nil),
		(*MaliciousUserThreatLevel_High)(nil),
	}
}

func _MaliciousUserThreatLevel_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*MaliciousUserThreatLevel)
	// threat_level
	switch x := m.ThreatLevel.(type) {
	case *MaliciousUserThreatLevel_Low:
		_ = b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Low); err != nil {
			return err
		}
	case *MaliciousUserThreatLevel_Medium:
		_ = b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Medium); err != nil {
			return err
		}
	case *MaliciousUserThreatLevel_High:
		_ = b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.High); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("MaliciousUserThreatLevel.ThreatLevel has unexpected type %T", x)
	}
	return nil
}

func _MaliciousUserThreatLevel_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*MaliciousUserThreatLevel)
	switch tag {
	case 1: // threat_level.low
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.ThreatLevel = &MaliciousUserThreatLevel_Low{msg}
		return true, err
	case 2: // threat_level.medium
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.ThreatLevel = &MaliciousUserThreatLevel_Medium{msg}
		return true, err
	case 3: // threat_level.high
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.ThreatLevel = &MaliciousUserThreatLevel_High{msg}
		return true, err
	default:
		return false, nil
	}
}

func _MaliciousUserThreatLevel_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*MaliciousUserThreatLevel)
	// threat_level
	switch x := m.ThreatLevel.(type) {
	case *MaliciousUserThreatLevel_Low:
		s := proto.Size(x.Low)
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *MaliciousUserThreatLevel_Medium:
		s := proto.Size(x.Medium)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *MaliciousUserThreatLevel_High:
		s := proto.Size(x.High)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// MaliciousUserMitigationAction
//
// x-displayName: "Malicious User Mitigation Action"
// Supported actions that can be taken to mitigate malicious activity from a user
type MaliciousUserMitigationAction struct {
	// mitigation action
	//
	// x-displayName: "Action"
	// x-required
	// Supported actions that can be taken to mitigate malicious activity from a user
	//
	// Types that are valid to be assigned to MitigationAction:
	//	*MaliciousUserMitigationAction_None
	//	*MaliciousUserMitigationAction_AlertOnly
	//	*MaliciousUserMitigationAction_JavascriptChallenge
	//	*MaliciousUserMitigationAction_CaptchaChallenge
	//	*MaliciousUserMitigationAction_BlockTemporarily
	MitigationAction isMaliciousUserMitigationAction_MitigationAction `protobuf_oneof:"mitigation_action"`
}

func (m *MaliciousUserMitigationAction) Reset()      { *m = MaliciousUserMitigationAction{} }
func (*MaliciousUserMitigationAction) ProtoMessage() {}
func (*MaliciousUserMitigationAction) Descriptor() ([]byte, []int) {
	return fileDescriptorTypes, []int{1}
}

type isMaliciousUserMitigationAction_MitigationAction interface {
	isMaliciousUserMitigationAction_MitigationAction()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type MaliciousUserMitigationAction_None struct {
	None *ves_io_schema4.Empty `protobuf:"bytes,1,opt,name=none,oneof"`
}
type MaliciousUserMitigationAction_AlertOnly struct {
	AlertOnly *ves_io_schema4.Empty `protobuf:"bytes,2,opt,name=alert_only,json=alertOnly,oneof"`
}
type MaliciousUserMitigationAction_JavascriptChallenge struct {
	JavascriptChallenge *ves_io_schema4.Empty `protobuf:"bytes,3,opt,name=javascript_challenge,json=javascriptChallenge,oneof"`
}
type MaliciousUserMitigationAction_CaptchaChallenge struct {
	CaptchaChallenge *ves_io_schema4.Empty `protobuf:"bytes,4,opt,name=captcha_challenge,json=captchaChallenge,oneof"`
}
type MaliciousUserMitigationAction_BlockTemporarily struct {
	BlockTemporarily *ves_io_schema4.Empty `protobuf:"bytes,5,opt,name=block_temporarily,json=blockTemporarily,oneof"`
}

func (*MaliciousUserMitigationAction_None) isMaliciousUserMitigationAction_MitigationAction()      {}
func (*MaliciousUserMitigationAction_AlertOnly) isMaliciousUserMitigationAction_MitigationAction() {}
func (*MaliciousUserMitigationAction_JavascriptChallenge) isMaliciousUserMitigationAction_MitigationAction() {
}
func (*MaliciousUserMitigationAction_CaptchaChallenge) isMaliciousUserMitigationAction_MitigationAction() {
}
func (*MaliciousUserMitigationAction_BlockTemporarily) isMaliciousUserMitigationAction_MitigationAction() {
}

func (m *MaliciousUserMitigationAction) GetMitigationAction() isMaliciousUserMitigationAction_MitigationAction {
	if m != nil {
		return m.MitigationAction
	}
	return nil
}

func (m *MaliciousUserMitigationAction) GetNone() *ves_io_schema4.Empty {
	if x, ok := m.GetMitigationAction().(*MaliciousUserMitigationAction_None); ok {
		return x.None
	}
	return nil
}

func (m *MaliciousUserMitigationAction) GetAlertOnly() *ves_io_schema4.Empty {
	if x, ok := m.GetMitigationAction().(*MaliciousUserMitigationAction_AlertOnly); ok {
		return x.AlertOnly
	}
	return nil
}

func (m *MaliciousUserMitigationAction) GetJavascriptChallenge() *ves_io_schema4.Empty {
	if x, ok := m.GetMitigationAction().(*MaliciousUserMitigationAction_JavascriptChallenge); ok {
		return x.JavascriptChallenge
	}
	return nil
}

func (m *MaliciousUserMitigationAction) GetCaptchaChallenge() *ves_io_schema4.Empty {
	if x, ok := m.GetMitigationAction().(*MaliciousUserMitigationAction_CaptchaChallenge); ok {
		return x.CaptchaChallenge
	}
	return nil
}

func (m *MaliciousUserMitigationAction) GetBlockTemporarily() *ves_io_schema4.Empty {
	if x, ok := m.GetMitigationAction().(*MaliciousUserMitigationAction_BlockTemporarily); ok {
		return x.BlockTemporarily
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*MaliciousUserMitigationAction) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _MaliciousUserMitigationAction_OneofMarshaler, _MaliciousUserMitigationAction_OneofUnmarshaler, _MaliciousUserMitigationAction_OneofSizer, []interface{}{
		(*MaliciousUserMitigationAction_None)(nil),
		(*MaliciousUserMitigationAction_AlertOnly)(nil),
		(*MaliciousUserMitigationAction_JavascriptChallenge)(nil),
		(*MaliciousUserMitigationAction_CaptchaChallenge)(nil),
		(*MaliciousUserMitigationAction_BlockTemporarily)(nil),
	}
}

func _MaliciousUserMitigationAction_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*MaliciousUserMitigationAction)
	// mitigation_action
	switch x := m.MitigationAction.(type) {
	case *MaliciousUserMitigationAction_None:
		_ = b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.None); err != nil {
			return err
		}
	case *MaliciousUserMitigationAction_AlertOnly:
		_ = b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.AlertOnly); err != nil {
			return err
		}
	case *MaliciousUserMitigationAction_JavascriptChallenge:
		_ = b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.JavascriptChallenge); err != nil {
			return err
		}
	case *MaliciousUserMitigationAction_CaptchaChallenge:
		_ = b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.CaptchaChallenge); err != nil {
			return err
		}
	case *MaliciousUserMitigationAction_BlockTemporarily:
		_ = b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.BlockTemporarily); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("MaliciousUserMitigationAction.MitigationAction has unexpected type %T", x)
	}
	return nil
}

func _MaliciousUserMitigationAction_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*MaliciousUserMitigationAction)
	switch tag {
	case 1: // mitigation_action.none
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.MitigationAction = &MaliciousUserMitigationAction_None{msg}
		return true, err
	case 2: // mitigation_action.alert_only
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.MitigationAction = &MaliciousUserMitigationAction_AlertOnly{msg}
		return true, err
	case 3: // mitigation_action.javascript_challenge
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.MitigationAction = &MaliciousUserMitigationAction_JavascriptChallenge{msg}
		return true, err
	case 4: // mitigation_action.captcha_challenge
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.MitigationAction = &MaliciousUserMitigationAction_CaptchaChallenge{msg}
		return true, err
	case 5: // mitigation_action.block_temporarily
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.MitigationAction = &MaliciousUserMitigationAction_BlockTemporarily{msg}
		return true, err
	default:
		return false, nil
	}
}

func _MaliciousUserMitigationAction_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*MaliciousUserMitigationAction)
	// mitigation_action
	switch x := m.MitigationAction.(type) {
	case *MaliciousUserMitigationAction_None:
		s := proto.Size(x.None)
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *MaliciousUserMitigationAction_AlertOnly:
		s := proto.Size(x.AlertOnly)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *MaliciousUserMitigationAction_JavascriptChallenge:
		s := proto.Size(x.JavascriptChallenge)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *MaliciousUserMitigationAction_CaptchaChallenge:
		s := proto.Size(x.CaptchaChallenge)
		n += proto.SizeVarint(4<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *MaliciousUserMitigationAction_BlockTemporarily:
		s := proto.Size(x.BlockTemporarily)
		n += proto.SizeVarint(5<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// MaliciousUserMitigationRule
//
// x-displayName: "Malicious User Mitigation Rule"
// Specifies the mitigation action that will be taken for users detected to be at the specified threat level
type MaliciousUserMitigationRule struct {
	// threat level
	//
	// x-displayName: "Threat Level"
	// x-required
	// The threat level at which mitigation actions will be taken
	ThreatLevel *MaliciousUserThreatLevel `protobuf:"bytes,1,opt,name=threat_level,json=threatLevel" json:"threat_level,omitempty"`
	// mitigation action
	//
	// x-displayName: "Mitigation Action"
	// x-required
	// The action to be taken at the specified threat level
	MitigationAction *MaliciousUserMitigationAction `protobuf:"bytes,2,opt,name=mitigation_action,json=mitigationAction" json:"mitigation_action,omitempty"`
}

func (m *MaliciousUserMitigationRule) Reset()                    { *m = MaliciousUserMitigationRule{} }
func (*MaliciousUserMitigationRule) ProtoMessage()               {}
func (*MaliciousUserMitigationRule) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{2} }

func (m *MaliciousUserMitigationRule) GetThreatLevel() *MaliciousUserThreatLevel {
	if m != nil {
		return m.ThreatLevel
	}
	return nil
}

func (m *MaliciousUserMitigationRule) GetMitigationAction() *MaliciousUserMitigationAction {
	if m != nil {
		return m.MitigationAction
	}
	return nil
}

// JavascriptChallengeSettings
//
// x-displayName: Javascript Challenge Settings
// Configuration to be used when a Javascript challenge is launched as mitigation action
type JavascriptChallengeSettings struct {
	// js_script_delay
	//
	// x-displayName: "Javascript Delay"
	// x-example: 1000
	// x-required
	// Specifies, in milliseconds, the delay that Javascript introduces.
	// Default delay is 5 seconds
	JsScriptDelay uint32 `protobuf:"varint,2,opt,name=js_script_delay,json=jsScriptDelay,proto3" json:"js_script_delay,omitempty"`
	// cookie_expiry
	//
	// x-displayName: "Cookie Expiry period"
	// x-example: 1000
	// x-required
	// Specifies, in seconds, cookie expiry duration.
	// Expired cookie will cause loadbalancer to perform Javascript challenge
	// Default cookie expiry is set as 1 hour
	CookieExpiry uint32 `protobuf:"varint,3,opt,name=cookie_expiry,json=cookieExpiry,proto3" json:"cookie_expiry,omitempty"`
	// custom_page
	//
	// x-displayName: "Custom Message for Javascript Challenge"
	// x-example: "string:///PHA+IFBsZWFzZSBXYWl0IDwvcD4="
	// Custom message is of type uri_ref. Currently supported URL schemes is string:///.
	// For string:/// scheme, message needs to be encoded in Base64 format.
	// You can specify this message as base64 encoded plain text message e.g. "Please Wait.."
	// or it can be HTML paragraph or a body string encoded as base64 string
	// E.g. "<p> Please Wait </p>". Base64 encoded string for this html is "PHA+IFBsZWFzZSBXYWl0IDwvcD4="
	CustomPage string `protobuf:"bytes,4,opt,name=custom_page,json=customPage,proto3" json:"custom_page,omitempty"`
}

func (m *JavascriptChallengeSettings) Reset()                    { *m = JavascriptChallengeSettings{} }
func (*JavascriptChallengeSettings) ProtoMessage()               {}
func (*JavascriptChallengeSettings) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{3} }

func (m *JavascriptChallengeSettings) GetJsScriptDelay() uint32 {
	if m != nil {
		return m.JsScriptDelay
	}
	return 0
}

func (m *JavascriptChallengeSettings) GetCookieExpiry() uint32 {
	if m != nil {
		return m.CookieExpiry
	}
	return 0
}

func (m *JavascriptChallengeSettings) GetCustomPage() string {
	if m != nil {
		return m.CustomPage
	}
	return ""
}

// CaptchaChallengeSettings
//
// x-displayName: "Captcha Challenge Settings"
// Configuration to be used when a Captcha challenge is launched as mitigation action
type CaptchaChallengeSettings struct {
	// cookie_expiry
	//
	// x-displayName: "Cookie Expiry period"
	// x-example: 1000
	// x-required
	// Specifies, in seconds, cookie expiry duration.
	// Expired cookie will cause loadbalancer to perform Captcha challenge
	// Default cookie expiry is set as 1 hour
	CookieExpiry uint32 `protobuf:"varint,2,opt,name=cookie_expiry,json=cookieExpiry,proto3" json:"cookie_expiry,omitempty"`
	// custom_page
	//
	// x-displayName: "Custom message for Captcha Challenge"
	// x-example: "string:///PHA+IFBsZWFzZSBXYWl0IDwvcD4="
	// Custom message is of type uri_ref. Currently supported URL schemes is string:///.
	// For string:/// scheme, message needs to be encoded in Base64 format.
	// You can specify this message as base64 encoded plain text message e.g. "Please Wait.."
	// or it can be HTML paragraph or a body string encoded as base64 string
	// E.g. "<p> Please Wait </p>". Base64 encoded string for this html is "PHA+IFBsZWFzZSBXYWl0IDwvcD4="
	CustomPage string `protobuf:"bytes,3,opt,name=custom_page,json=customPage,proto3" json:"custom_page,omitempty"`
}

func (m *CaptchaChallengeSettings) Reset()                    { *m = CaptchaChallengeSettings{} }
func (*CaptchaChallengeSettings) ProtoMessage()               {}
func (*CaptchaChallengeSettings) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{4} }

func (m *CaptchaChallengeSettings) GetCookieExpiry() uint32 {
	if m != nil {
		return m.CookieExpiry
	}
	return 0
}

func (m *CaptchaChallengeSettings) GetCustomPage() string {
	if m != nil {
		return m.CustomPage
	}
	return ""
}

// Temporary Blocking Settings
//
// x-displayName: "Temporary Blocking Settings"
//
// Specifies configuration for temporary user blocking resulting from user behavior analysis.
type TemporaryBlockingSettings struct {
	// custom_page
	//
	// x-displayName: "Custom Message for Temporary Blocking"
	// x-example: "string:///PHA+IFBsZWFzZSBXYWl0IDwvcD4="
	// Custom message is of type `uri_ref`. Currently supported URL schemes is `string:///`.
	// For `string:///` scheme, message needs to be encoded in Base64 format.
	// You can specify this message as base64 encoded plain text message e.g. "Blocked.."
	// or it can be HTML paragraph or a body string encoded as base64 string
	// E.g. "<p> Blocked </p>". Base64 encoded string for this html is "PHA+IFBsZWFzZSBXYWl0IDwvcD4="
	CustomPage string `protobuf:"bytes,1,opt,name=custom_page,json=customPage,proto3" json:"custom_page,omitempty"`
}

func (m *TemporaryBlockingSettings) Reset()                    { *m = TemporaryBlockingSettings{} }
func (*TemporaryBlockingSettings) ProtoMessage()               {}
func (*TemporaryBlockingSettings) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{5} }

func (m *TemporaryBlockingSettings) GetCustomPage() string {
	if m != nil {
		return m.CustomPage
	}
	return ""
}

// MaliciousUserMitigationType
//
// x-displayName: "Malicious User Mitigation Type"
// Malicious user mitigation type specifies the malicious user mitigation rules that define the actions to be taken for users mapped to different threat levels.
// A threat level is calculated for every user identified using config specified in user_identification by analyzing their activity and reputation.
type MaliciousUserMitigationType struct {
	// malicious user mitigation rules
	//
	// x-displayName: "Malicious User Mitigation Rules"
	// x-required
	// Malicious user mitigation rules specify the actions to be taken for users mapped to different threat levels.
	// A threat level is calculated for every user identified using config specified in user_identification by analyzing their activity and reputation.
	Rules []*MaliciousUserMitigationRule `protobuf:"bytes,1,rep,name=rules" json:"rules,omitempty"`
}

func (m *MaliciousUserMitigationType) Reset()                    { *m = MaliciousUserMitigationType{} }
func (*MaliciousUserMitigationType) ProtoMessage()               {}
func (*MaliciousUserMitigationType) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{6} }

func (m *MaliciousUserMitigationType) GetRules() []*MaliciousUserMitigationRule {
	if m != nil {
		return m.Rules
	}
	return nil
}

// GlobalSpecType
//
// x-displayName: "Specification"
// Shape of malicious_user_mitigation in the storage backend.
type GlobalSpecType struct {
	// MaliciousUserMitigationType
	//
	// x-displayName: "Malicious User Mitigation Type"
	// Malicious user mitigation type specifies the malicious user mitigation rules that define the actions to be taken for users mapped to different threat levels.
	// A threat level is calculated for every user identified using config specified in user_identification by analyzing their activity and reputation.
	MitigationType *MaliciousUserMitigationType `protobuf:"bytes,1,opt,name=mitigation_type,json=mitigationType" json:"mitigation_type,omitempty"`
	// Javascript Challenge Settings
	//
	// x-displayName: "Javascript challenge settings"
	// Configuration to be used when a Javascript challenge is launched as mitigation action
	JavascriptChallengeSettings *JavascriptChallengeSettings `protobuf:"bytes,2,opt,name=javascript_challenge_settings,json=javascriptChallengeSettings" json:"javascript_challenge_settings,omitempty"`
	// Captcha Challenge Settings
	//
	// x-displayName: "Captcha challenge settings"
	// Configuration to be used when a captcha challenge is launched as mitigation action
	CaptchaChallengeSettings *CaptchaChallengeSettings `protobuf:"bytes,3,opt,name=captcha_challenge_settings,json=captchaChallengeSettings" json:"captcha_challenge_settings,omitempty"`
	// Temporary Blocking Settings
	//
	// x-displayName: "Temporary Blocking Settings"
	// Configuration to be used when a user is temporarily blocked
	TemporaryBlockingSettings *TemporaryBlockingSettings `protobuf:"bytes,4,opt,name=temporary_blocking_settings,json=temporaryBlockingSettings" json:"temporary_blocking_settings,omitempty"`
}

func (m *GlobalSpecType) Reset()                    { *m = GlobalSpecType{} }
func (*GlobalSpecType) ProtoMessage()               {}
func (*GlobalSpecType) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{7} }

func (m *GlobalSpecType) GetMitigationType() *MaliciousUserMitigationType {
	if m != nil {
		return m.MitigationType
	}
	return nil
}

func (m *GlobalSpecType) GetJavascriptChallengeSettings() *JavascriptChallengeSettings {
	if m != nil {
		return m.JavascriptChallengeSettings
	}
	return nil
}

func (m *GlobalSpecType) GetCaptchaChallengeSettings() *CaptchaChallengeSettings {
	if m != nil {
		return m.CaptchaChallengeSettings
	}
	return nil
}

func (m *GlobalSpecType) GetTemporaryBlockingSettings() *TemporaryBlockingSettings {
	if m != nil {
		return m.TemporaryBlockingSettings
	}
	return nil
}

// Create malicious user mitigation
//
// x-displayName: "Create Malicious User Mitigation"
// Create malicious_user_mitigation creates a new object in the storage backend for metadata.namespace.
type CreateSpecType struct {
	MitigationType              *MaliciousUserMitigationType `protobuf:"bytes,1,opt,name=mitigation_type,json=mitigationType" json:"mitigation_type,omitempty"`
	JavascriptChallengeSettings *JavascriptChallengeSettings `protobuf:"bytes,2,opt,name=javascript_challenge_settings,json=javascriptChallengeSettings" json:"javascript_challenge_settings,omitempty"`
	CaptchaChallengeSettings    *CaptchaChallengeSettings    `protobuf:"bytes,3,opt,name=captcha_challenge_settings,json=captchaChallengeSettings" json:"captcha_challenge_settings,omitempty"`
	TemporaryBlockingSettings   *TemporaryBlockingSettings   `protobuf:"bytes,4,opt,name=temporary_blocking_settings,json=temporaryBlockingSettings" json:"temporary_blocking_settings,omitempty"`
}

func (m *CreateSpecType) Reset()                    { *m = CreateSpecType{} }
func (*CreateSpecType) ProtoMessage()               {}
func (*CreateSpecType) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{8} }

func (m *CreateSpecType) GetMitigationType() *MaliciousUserMitigationType {
	if m != nil {
		return m.MitigationType
	}
	return nil
}

func (m *CreateSpecType) GetJavascriptChallengeSettings() *JavascriptChallengeSettings {
	if m != nil {
		return m.JavascriptChallengeSettings
	}
	return nil
}

func (m *CreateSpecType) GetCaptchaChallengeSettings() *CaptchaChallengeSettings {
	if m != nil {
		return m.CaptchaChallengeSettings
	}
	return nil
}

func (m *CreateSpecType) GetTemporaryBlockingSettings() *TemporaryBlockingSettings {
	if m != nil {
		return m.TemporaryBlockingSettings
	}
	return nil
}

// Replace malicious user mitigation
//
// x-displayName: "Replace Malicious User Mitigation"
// Replace malicious_user_mitigation replaces an existing object in the storage backend for metadata.namespace.
type ReplaceSpecType struct {
	MitigationType              *MaliciousUserMitigationType `protobuf:"bytes,1,opt,name=mitigation_type,json=mitigationType" json:"mitigation_type,omitempty"`
	JavascriptChallengeSettings *JavascriptChallengeSettings `protobuf:"bytes,2,opt,name=javascript_challenge_settings,json=javascriptChallengeSettings" json:"javascript_challenge_settings,omitempty"`
	CaptchaChallengeSettings    *CaptchaChallengeSettings    `protobuf:"bytes,3,opt,name=captcha_challenge_settings,json=captchaChallengeSettings" json:"captcha_challenge_settings,omitempty"`
	TemporaryBlockingSettings   *TemporaryBlockingSettings   `protobuf:"bytes,4,opt,name=temporary_blocking_settings,json=temporaryBlockingSettings" json:"temporary_blocking_settings,omitempty"`
}

func (m *ReplaceSpecType) Reset()                    { *m = ReplaceSpecType{} }
func (*ReplaceSpecType) ProtoMessage()               {}
func (*ReplaceSpecType) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{9} }

func (m *ReplaceSpecType) GetMitigationType() *MaliciousUserMitigationType {
	if m != nil {
		return m.MitigationType
	}
	return nil
}

func (m *ReplaceSpecType) GetJavascriptChallengeSettings() *JavascriptChallengeSettings {
	if m != nil {
		return m.JavascriptChallengeSettings
	}
	return nil
}

func (m *ReplaceSpecType) GetCaptchaChallengeSettings() *CaptchaChallengeSettings {
	if m != nil {
		return m.CaptchaChallengeSettings
	}
	return nil
}

func (m *ReplaceSpecType) GetTemporaryBlockingSettings() *TemporaryBlockingSettings {
	if m != nil {
		return m.TemporaryBlockingSettings
	}
	return nil
}

// Get malicious user mitigation
//
// x-displayName: "Get Malicious User Mitigation"
// Get malicious_user_mitigation reads a given object from storage backend for metadata.namespace.
type GetSpecType struct {
	MitigationType              *MaliciousUserMitigationType `protobuf:"bytes,1,opt,name=mitigation_type,json=mitigationType" json:"mitigation_type,omitempty"`
	JavascriptChallengeSettings *JavascriptChallengeSettings `protobuf:"bytes,2,opt,name=javascript_challenge_settings,json=javascriptChallengeSettings" json:"javascript_challenge_settings,omitempty"`
	CaptchaChallengeSettings    *CaptchaChallengeSettings    `protobuf:"bytes,3,opt,name=captcha_challenge_settings,json=captchaChallengeSettings" json:"captcha_challenge_settings,omitempty"`
	TemporaryBlockingSettings   *TemporaryBlockingSettings   `protobuf:"bytes,4,opt,name=temporary_blocking_settings,json=temporaryBlockingSettings" json:"temporary_blocking_settings,omitempty"`
}

func (m *GetSpecType) Reset()                    { *m = GetSpecType{} }
func (*GetSpecType) ProtoMessage()               {}
func (*GetSpecType) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{10} }

func (m *GetSpecType) GetMitigationType() *MaliciousUserMitigationType {
	if m != nil {
		return m.MitigationType
	}
	return nil
}

func (m *GetSpecType) GetJavascriptChallengeSettings() *JavascriptChallengeSettings {
	if m != nil {
		return m.JavascriptChallengeSettings
	}
	return nil
}

func (m *GetSpecType) GetCaptchaChallengeSettings() *CaptchaChallengeSettings {
	if m != nil {
		return m.CaptchaChallengeSettings
	}
	return nil
}

func (m *GetSpecType) GetTemporaryBlockingSettings() *TemporaryBlockingSettings {
	if m != nil {
		return m.TemporaryBlockingSettings
	}
	return nil
}

func init() {
	proto.RegisterType((*MaliciousUserThreatLevel)(nil), "ves.io.schema.malicious_user_mitigation.MaliciousUserThreatLevel")
	golang_proto.RegisterType((*MaliciousUserThreatLevel)(nil), "ves.io.schema.malicious_user_mitigation.MaliciousUserThreatLevel")
	proto.RegisterType((*MaliciousUserMitigationAction)(nil), "ves.io.schema.malicious_user_mitigation.MaliciousUserMitigationAction")
	golang_proto.RegisterType((*MaliciousUserMitigationAction)(nil), "ves.io.schema.malicious_user_mitigation.MaliciousUserMitigationAction")
	proto.RegisterType((*MaliciousUserMitigationRule)(nil), "ves.io.schema.malicious_user_mitigation.MaliciousUserMitigationRule")
	golang_proto.RegisterType((*MaliciousUserMitigationRule)(nil), "ves.io.schema.malicious_user_mitigation.MaliciousUserMitigationRule")
	proto.RegisterType((*JavascriptChallengeSettings)(nil), "ves.io.schema.malicious_user_mitigation.JavascriptChallengeSettings")
	golang_proto.RegisterType((*JavascriptChallengeSettings)(nil), "ves.io.schema.malicious_user_mitigation.JavascriptChallengeSettings")
	proto.RegisterType((*CaptchaChallengeSettings)(nil), "ves.io.schema.malicious_user_mitigation.CaptchaChallengeSettings")
	golang_proto.RegisterType((*CaptchaChallengeSettings)(nil), "ves.io.schema.malicious_user_mitigation.CaptchaChallengeSettings")
	proto.RegisterType((*TemporaryBlockingSettings)(nil), "ves.io.schema.malicious_user_mitigation.TemporaryBlockingSettings")
	golang_proto.RegisterType((*TemporaryBlockingSettings)(nil), "ves.io.schema.malicious_user_mitigation.TemporaryBlockingSettings")
	proto.RegisterType((*MaliciousUserMitigationType)(nil), "ves.io.schema.malicious_user_mitigation.MaliciousUserMitigationType")
	golang_proto.RegisterType((*MaliciousUserMitigationType)(nil), "ves.io.schema.malicious_user_mitigation.MaliciousUserMitigationType")
	proto.RegisterType((*GlobalSpecType)(nil), "ves.io.schema.malicious_user_mitigation.GlobalSpecType")
	golang_proto.RegisterType((*GlobalSpecType)(nil), "ves.io.schema.malicious_user_mitigation.GlobalSpecType")
	proto.RegisterType((*CreateSpecType)(nil), "ves.io.schema.malicious_user_mitigation.CreateSpecType")
	golang_proto.RegisterType((*CreateSpecType)(nil), "ves.io.schema.malicious_user_mitigation.CreateSpecType")
	proto.RegisterType((*ReplaceSpecType)(nil), "ves.io.schema.malicious_user_mitigation.ReplaceSpecType")
	golang_proto.RegisterType((*ReplaceSpecType)(nil), "ves.io.schema.malicious_user_mitigation.ReplaceSpecType")
	proto.RegisterType((*GetSpecType)(nil), "ves.io.schema.malicious_user_mitigation.GetSpecType")
	golang_proto.RegisterType((*GetSpecType)(nil), "ves.io.schema.malicious_user_mitigation.GetSpecType")
}
func (this *MaliciousUserThreatLevel) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MaliciousUserThreatLevel)
	if !ok {
		that2, ok := that.(MaliciousUserThreatLevel)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.ThreatLevel == nil {
		if this.ThreatLevel != nil {
			return false
		}
	} else if this.ThreatLevel == nil {
		return false
	} else if !this.ThreatLevel.Equal(that1.ThreatLevel) {
		return false
	}
	return true
}
func (this *MaliciousUserThreatLevel_Low) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MaliciousUserThreatLevel_Low)
	if !ok {
		that2, ok := that.(MaliciousUserThreatLevel_Low)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Low.Equal(that1.Low) {
		return false
	}
	return true
}
func (this *MaliciousUserThreatLevel_Medium) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MaliciousUserThreatLevel_Medium)
	if !ok {
		that2, ok := that.(MaliciousUserThreatLevel_Medium)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Medium.Equal(that1.Medium) {
		return false
	}
	return true
}
func (this *MaliciousUserThreatLevel_High) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MaliciousUserThreatLevel_High)
	if !ok {
		that2, ok := that.(MaliciousUserThreatLevel_High)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.High.Equal(that1.High) {
		return false
	}
	return true
}
func (this *MaliciousUserMitigationAction) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MaliciousUserMitigationAction)
	if !ok {
		that2, ok := that.(MaliciousUserMitigationAction)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.MitigationAction == nil {
		if this.MitigationAction != nil {
			return false
		}
	} else if this.MitigationAction == nil {
		return false
	} else if !this.MitigationAction.Equal(that1.MitigationAction) {
		return false
	}
	return true
}
func (this *MaliciousUserMitigationAction_None) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MaliciousUserMitigationAction_None)
	if !ok {
		that2, ok := that.(MaliciousUserMitigationAction_None)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.None.Equal(that1.None) {
		return false
	}
	return true
}
func (this *MaliciousUserMitigationAction_AlertOnly) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MaliciousUserMitigationAction_AlertOnly)
	if !ok {
		that2, ok := that.(MaliciousUserMitigationAction_AlertOnly)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AlertOnly.Equal(that1.AlertOnly) {
		return false
	}
	return true
}
func (this *MaliciousUserMitigationAction_JavascriptChallenge) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MaliciousUserMitigationAction_JavascriptChallenge)
	if !ok {
		that2, ok := that.(MaliciousUserMitigationAction_JavascriptChallenge)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.JavascriptChallenge.Equal(that1.JavascriptChallenge) {
		return false
	}
	return true
}
func (this *MaliciousUserMitigationAction_CaptchaChallenge) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MaliciousUserMitigationAction_CaptchaChallenge)
	if !ok {
		that2, ok := that.(MaliciousUserMitigationAction_CaptchaChallenge)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.CaptchaChallenge.Equal(that1.CaptchaChallenge) {
		return false
	}
	return true
}
func (this *MaliciousUserMitigationAction_BlockTemporarily) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MaliciousUserMitigationAction_BlockTemporarily)
	if !ok {
		that2, ok := that.(MaliciousUserMitigationAction_BlockTemporarily)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.BlockTemporarily.Equal(that1.BlockTemporarily) {
		return false
	}
	return true
}
func (this *MaliciousUserMitigationRule) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MaliciousUserMitigationRule)
	if !ok {
		that2, ok := that.(MaliciousUserMitigationRule)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ThreatLevel.Equal(that1.ThreatLevel) {
		return false
	}
	if !this.MitigationAction.Equal(that1.MitigationAction) {
		return false
	}
	return true
}
func (this *JavascriptChallengeSettings) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*JavascriptChallengeSettings)
	if !ok {
		that2, ok := that.(JavascriptChallengeSettings)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.JsScriptDelay != that1.JsScriptDelay {
		return false
	}
	if this.CookieExpiry != that1.CookieExpiry {
		return false
	}
	if this.CustomPage != that1.CustomPage {
		return false
	}
	return true
}
func (this *CaptchaChallengeSettings) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CaptchaChallengeSettings)
	if !ok {
		that2, ok := that.(CaptchaChallengeSettings)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.CookieExpiry != that1.CookieExpiry {
		return false
	}
	if this.CustomPage != that1.CustomPage {
		return false
	}
	return true
}
func (this *TemporaryBlockingSettings) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TemporaryBlockingSettings)
	if !ok {
		that2, ok := that.(TemporaryBlockingSettings)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.CustomPage != that1.CustomPage {
		return false
	}
	return true
}
func (this *MaliciousUserMitigationType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MaliciousUserMitigationType)
	if !ok {
		that2, ok := that.(MaliciousUserMitigationType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Rules) != len(that1.Rules) {
		return false
	}
	for i := range this.Rules {
		if !this.Rules[i].Equal(that1.Rules[i]) {
			return false
		}
	}
	return true
}
func (this *GlobalSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType)
	if !ok {
		that2, ok := that.(GlobalSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.MitigationType.Equal(that1.MitigationType) {
		return false
	}
	if !this.JavascriptChallengeSettings.Equal(that1.JavascriptChallengeSettings) {
		return false
	}
	if !this.CaptchaChallengeSettings.Equal(that1.CaptchaChallengeSettings) {
		return false
	}
	if !this.TemporaryBlockingSettings.Equal(that1.TemporaryBlockingSettings) {
		return false
	}
	return true
}
func (this *CreateSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType)
	if !ok {
		that2, ok := that.(CreateSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.MitigationType.Equal(that1.MitigationType) {
		return false
	}
	if !this.JavascriptChallengeSettings.Equal(that1.JavascriptChallengeSettings) {
		return false
	}
	if !this.CaptchaChallengeSettings.Equal(that1.CaptchaChallengeSettings) {
		return false
	}
	if !this.TemporaryBlockingSettings.Equal(that1.TemporaryBlockingSettings) {
		return false
	}
	return true
}
func (this *ReplaceSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType)
	if !ok {
		that2, ok := that.(ReplaceSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.MitigationType.Equal(that1.MitigationType) {
		return false
	}
	if !this.JavascriptChallengeSettings.Equal(that1.JavascriptChallengeSettings) {
		return false
	}
	if !this.CaptchaChallengeSettings.Equal(that1.CaptchaChallengeSettings) {
		return false
	}
	if !this.TemporaryBlockingSettings.Equal(that1.TemporaryBlockingSettings) {
		return false
	}
	return true
}
func (this *GetSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType)
	if !ok {
		that2, ok := that.(GetSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.MitigationType.Equal(that1.MitigationType) {
		return false
	}
	if !this.JavascriptChallengeSettings.Equal(that1.JavascriptChallengeSettings) {
		return false
	}
	if !this.CaptchaChallengeSettings.Equal(that1.CaptchaChallengeSettings) {
		return false
	}
	if !this.TemporaryBlockingSettings.Equal(that1.TemporaryBlockingSettings) {
		return false
	}
	return true
}
func (this *MaliciousUserThreatLevel) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&malicious_user_mitigation.MaliciousUserThreatLevel{")
	if this.ThreatLevel != nil {
		s = append(s, "ThreatLevel: "+fmt.Sprintf("%#v", this.ThreatLevel)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *MaliciousUserThreatLevel_Low) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&malicious_user_mitigation.MaliciousUserThreatLevel_Low{` +
		`Low:` + fmt.Sprintf("%#v", this.Low) + `}`}, ", ")
	return s
}
func (this *MaliciousUserThreatLevel_Medium) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&malicious_user_mitigation.MaliciousUserThreatLevel_Medium{` +
		`Medium:` + fmt.Sprintf("%#v", this.Medium) + `}`}, ", ")
	return s
}
func (this *MaliciousUserThreatLevel_High) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&malicious_user_mitigation.MaliciousUserThreatLevel_High{` +
		`High:` + fmt.Sprintf("%#v", this.High) + `}`}, ", ")
	return s
}
func (this *MaliciousUserMitigationAction) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&malicious_user_mitigation.MaliciousUserMitigationAction{")
	if this.MitigationAction != nil {
		s = append(s, "MitigationAction: "+fmt.Sprintf("%#v", this.MitigationAction)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *MaliciousUserMitigationAction_None) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&malicious_user_mitigation.MaliciousUserMitigationAction_None{` +
		`None:` + fmt.Sprintf("%#v", this.None) + `}`}, ", ")
	return s
}
func (this *MaliciousUserMitigationAction_AlertOnly) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&malicious_user_mitigation.MaliciousUserMitigationAction_AlertOnly{` +
		`AlertOnly:` + fmt.Sprintf("%#v", this.AlertOnly) + `}`}, ", ")
	return s
}
func (this *MaliciousUserMitigationAction_JavascriptChallenge) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&malicious_user_mitigation.MaliciousUserMitigationAction_JavascriptChallenge{` +
		`JavascriptChallenge:` + fmt.Sprintf("%#v", this.JavascriptChallenge) + `}`}, ", ")
	return s
}
func (this *MaliciousUserMitigationAction_CaptchaChallenge) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&malicious_user_mitigation.MaliciousUserMitigationAction_CaptchaChallenge{` +
		`CaptchaChallenge:` + fmt.Sprintf("%#v", this.CaptchaChallenge) + `}`}, ", ")
	return s
}
func (this *MaliciousUserMitigationAction_BlockTemporarily) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&malicious_user_mitigation.MaliciousUserMitigationAction_BlockTemporarily{` +
		`BlockTemporarily:` + fmt.Sprintf("%#v", this.BlockTemporarily) + `}`}, ", ")
	return s
}
func (this *MaliciousUserMitigationRule) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&malicious_user_mitigation.MaliciousUserMitigationRule{")
	if this.ThreatLevel != nil {
		s = append(s, "ThreatLevel: "+fmt.Sprintf("%#v", this.ThreatLevel)+",\n")
	}
	if this.MitigationAction != nil {
		s = append(s, "MitigationAction: "+fmt.Sprintf("%#v", this.MitigationAction)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *JavascriptChallengeSettings) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&malicious_user_mitigation.JavascriptChallengeSettings{")
	s = append(s, "JsScriptDelay: "+fmt.Sprintf("%#v", this.JsScriptDelay)+",\n")
	s = append(s, "CookieExpiry: "+fmt.Sprintf("%#v", this.CookieExpiry)+",\n")
	s = append(s, "CustomPage: "+fmt.Sprintf("%#v", this.CustomPage)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CaptchaChallengeSettings) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&malicious_user_mitigation.CaptchaChallengeSettings{")
	s = append(s, "CookieExpiry: "+fmt.Sprintf("%#v", this.CookieExpiry)+",\n")
	s = append(s, "CustomPage: "+fmt.Sprintf("%#v", this.CustomPage)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TemporaryBlockingSettings) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&malicious_user_mitigation.TemporaryBlockingSettings{")
	s = append(s, "CustomPage: "+fmt.Sprintf("%#v", this.CustomPage)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *MaliciousUserMitigationType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&malicious_user_mitigation.MaliciousUserMitigationType{")
	if this.Rules != nil {
		s = append(s, "Rules: "+fmt.Sprintf("%#v", this.Rules)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GlobalSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&malicious_user_mitigation.GlobalSpecType{")
	if this.MitigationType != nil {
		s = append(s, "MitigationType: "+fmt.Sprintf("%#v", this.MitigationType)+",\n")
	}
	if this.JavascriptChallengeSettings != nil {
		s = append(s, "JavascriptChallengeSettings: "+fmt.Sprintf("%#v", this.JavascriptChallengeSettings)+",\n")
	}
	if this.CaptchaChallengeSettings != nil {
		s = append(s, "CaptchaChallengeSettings: "+fmt.Sprintf("%#v", this.CaptchaChallengeSettings)+",\n")
	}
	if this.TemporaryBlockingSettings != nil {
		s = append(s, "TemporaryBlockingSettings: "+fmt.Sprintf("%#v", this.TemporaryBlockingSettings)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CreateSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&malicious_user_mitigation.CreateSpecType{")
	if this.MitigationType != nil {
		s = append(s, "MitigationType: "+fmt.Sprintf("%#v", this.MitigationType)+",\n")
	}
	if this.JavascriptChallengeSettings != nil {
		s = append(s, "JavascriptChallengeSettings: "+fmt.Sprintf("%#v", this.JavascriptChallengeSettings)+",\n")
	}
	if this.CaptchaChallengeSettings != nil {
		s = append(s, "CaptchaChallengeSettings: "+fmt.Sprintf("%#v", this.CaptchaChallengeSettings)+",\n")
	}
	if this.TemporaryBlockingSettings != nil {
		s = append(s, "TemporaryBlockingSettings: "+fmt.Sprintf("%#v", this.TemporaryBlockingSettings)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ReplaceSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&malicious_user_mitigation.ReplaceSpecType{")
	if this.MitigationType != nil {
		s = append(s, "MitigationType: "+fmt.Sprintf("%#v", this.MitigationType)+",\n")
	}
	if this.JavascriptChallengeSettings != nil {
		s = append(s, "JavascriptChallengeSettings: "+fmt.Sprintf("%#v", this.JavascriptChallengeSettings)+",\n")
	}
	if this.CaptchaChallengeSettings != nil {
		s = append(s, "CaptchaChallengeSettings: "+fmt.Sprintf("%#v", this.CaptchaChallengeSettings)+",\n")
	}
	if this.TemporaryBlockingSettings != nil {
		s = append(s, "TemporaryBlockingSettings: "+fmt.Sprintf("%#v", this.TemporaryBlockingSettings)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&malicious_user_mitigation.GetSpecType{")
	if this.MitigationType != nil {
		s = append(s, "MitigationType: "+fmt.Sprintf("%#v", this.MitigationType)+",\n")
	}
	if this.JavascriptChallengeSettings != nil {
		s = append(s, "JavascriptChallengeSettings: "+fmt.Sprintf("%#v", this.JavascriptChallengeSettings)+",\n")
	}
	if this.CaptchaChallengeSettings != nil {
		s = append(s, "CaptchaChallengeSettings: "+fmt.Sprintf("%#v", this.CaptchaChallengeSettings)+",\n")
	}
	if this.TemporaryBlockingSettings != nil {
		s = append(s, "TemporaryBlockingSettings: "+fmt.Sprintf("%#v", this.TemporaryBlockingSettings)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringTypes(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *MaliciousUserThreatLevel) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MaliciousUserThreatLevel) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ThreatLevel != nil {
		nn1, err := m.ThreatLevel.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn1
	}
	return i, nil
}

func (m *MaliciousUserThreatLevel_Low) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Low != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.Low.Size()))
		n2, err := m.Low.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	return i, nil
}
func (m *MaliciousUserThreatLevel_Medium) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Medium != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.Medium.Size()))
		n3, err := m.Medium.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	return i, nil
}
func (m *MaliciousUserThreatLevel_High) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.High != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.High.Size()))
		n4, err := m.High.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	return i, nil
}
func (m *MaliciousUserMitigationAction) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MaliciousUserMitigationAction) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.MitigationAction != nil {
		nn5, err := m.MitigationAction.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn5
	}
	return i, nil
}

func (m *MaliciousUserMitigationAction_None) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.None != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.None.Size()))
		n6, err := m.None.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	return i, nil
}
func (m *MaliciousUserMitigationAction_AlertOnly) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.AlertOnly != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.AlertOnly.Size()))
		n7, err := m.AlertOnly.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	return i, nil
}
func (m *MaliciousUserMitigationAction_JavascriptChallenge) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.JavascriptChallenge != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.JavascriptChallenge.Size()))
		n8, err := m.JavascriptChallenge.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n8
	}
	return i, nil
}
func (m *MaliciousUserMitigationAction_CaptchaChallenge) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.CaptchaChallenge != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.CaptchaChallenge.Size()))
		n9, err := m.CaptchaChallenge.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n9
	}
	return i, nil
}
func (m *MaliciousUserMitigationAction_BlockTemporarily) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.BlockTemporarily != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.BlockTemporarily.Size()))
		n10, err := m.BlockTemporarily.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n10
	}
	return i, nil
}
func (m *MaliciousUserMitigationRule) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MaliciousUserMitigationRule) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ThreatLevel != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.ThreatLevel.Size()))
		n11, err := m.ThreatLevel.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n11
	}
	if m.MitigationAction != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.MitigationAction.Size()))
		n12, err := m.MitigationAction.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n12
	}
	return i, nil
}

func (m *JavascriptChallengeSettings) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *JavascriptChallengeSettings) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.JsScriptDelay != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.JsScriptDelay))
	}
	if m.CookieExpiry != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.CookieExpiry))
	}
	if len(m.CustomPage) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintTypes(dAtA, i, uint64(len(m.CustomPage)))
		i += copy(dAtA[i:], m.CustomPage)
	}
	return i, nil
}

func (m *CaptchaChallengeSettings) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CaptchaChallengeSettings) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.CookieExpiry != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.CookieExpiry))
	}
	if len(m.CustomPage) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(len(m.CustomPage)))
		i += copy(dAtA[i:], m.CustomPage)
	}
	return i, nil
}

func (m *TemporaryBlockingSettings) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TemporaryBlockingSettings) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.CustomPage) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTypes(dAtA, i, uint64(len(m.CustomPage)))
		i += copy(dAtA[i:], m.CustomPage)
	}
	return i, nil
}

func (m *MaliciousUserMitigationType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MaliciousUserMitigationType) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Rules) > 0 {
		for _, msg := range m.Rules {
			dAtA[i] = 0xa
			i++
			i = encodeVarintTypes(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *GlobalSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GlobalSpecType) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.MitigationType != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.MitigationType.Size()))
		n13, err := m.MitigationType.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n13
	}
	if m.JavascriptChallengeSettings != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.JavascriptChallengeSettings.Size()))
		n14, err := m.JavascriptChallengeSettings.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n14
	}
	if m.CaptchaChallengeSettings != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.CaptchaChallengeSettings.Size()))
		n15, err := m.CaptchaChallengeSettings.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n15
	}
	if m.TemporaryBlockingSettings != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.TemporaryBlockingSettings.Size()))
		n16, err := m.TemporaryBlockingSettings.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n16
	}
	return i, nil
}

func (m *CreateSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateSpecType) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.MitigationType != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.MitigationType.Size()))
		n17, err := m.MitigationType.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n17
	}
	if m.JavascriptChallengeSettings != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.JavascriptChallengeSettings.Size()))
		n18, err := m.JavascriptChallengeSettings.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n18
	}
	if m.CaptchaChallengeSettings != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.CaptchaChallengeSettings.Size()))
		n19, err := m.CaptchaChallengeSettings.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n19
	}
	if m.TemporaryBlockingSettings != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.TemporaryBlockingSettings.Size()))
		n20, err := m.TemporaryBlockingSettings.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n20
	}
	return i, nil
}

func (m *ReplaceSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplaceSpecType) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.MitigationType != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.MitigationType.Size()))
		n21, err := m.MitigationType.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n21
	}
	if m.JavascriptChallengeSettings != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.JavascriptChallengeSettings.Size()))
		n22, err := m.JavascriptChallengeSettings.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n22
	}
	if m.CaptchaChallengeSettings != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.CaptchaChallengeSettings.Size()))
		n23, err := m.CaptchaChallengeSettings.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n23
	}
	if m.TemporaryBlockingSettings != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.TemporaryBlockingSettings.Size()))
		n24, err := m.TemporaryBlockingSettings.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n24
	}
	return i, nil
}

func (m *GetSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetSpecType) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.MitigationType != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.MitigationType.Size()))
		n25, err := m.MitigationType.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n25
	}
	if m.JavascriptChallengeSettings != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.JavascriptChallengeSettings.Size()))
		n26, err := m.JavascriptChallengeSettings.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n26
	}
	if m.CaptchaChallengeSettings != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.CaptchaChallengeSettings.Size()))
		n27, err := m.CaptchaChallengeSettings.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n27
	}
	if m.TemporaryBlockingSettings != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.TemporaryBlockingSettings.Size()))
		n28, err := m.TemporaryBlockingSettings.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n28
	}
	return i, nil
}

func encodeVarintTypes(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func NewPopulatedMaliciousUserThreatLevel(r randyTypes, easy bool) *MaliciousUserThreatLevel {
	this := &MaliciousUserThreatLevel{}
	oneofNumber_ThreatLevel := []int32{1, 2, 3}[r.Intn(3)]
	switch oneofNumber_ThreatLevel {
	case 1:
		this.ThreatLevel = NewPopulatedMaliciousUserThreatLevel_Low(r, easy)
	case 2:
		this.ThreatLevel = NewPopulatedMaliciousUserThreatLevel_Medium(r, easy)
	case 3:
		this.ThreatLevel = NewPopulatedMaliciousUserThreatLevel_High(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedMaliciousUserThreatLevel_Low(r randyTypes, easy bool) *MaliciousUserThreatLevel_Low {
	this := &MaliciousUserThreatLevel_Low{}
	this.Low = ves_io_schema4.NewPopulatedEmpty(r, easy)
	return this
}
func NewPopulatedMaliciousUserThreatLevel_Medium(r randyTypes, easy bool) *MaliciousUserThreatLevel_Medium {
	this := &MaliciousUserThreatLevel_Medium{}
	this.Medium = ves_io_schema4.NewPopulatedEmpty(r, easy)
	return this
}
func NewPopulatedMaliciousUserThreatLevel_High(r randyTypes, easy bool) *MaliciousUserThreatLevel_High {
	this := &MaliciousUserThreatLevel_High{}
	this.High = ves_io_schema4.NewPopulatedEmpty(r, easy)
	return this
}
func NewPopulatedMaliciousUserMitigationAction(r randyTypes, easy bool) *MaliciousUserMitigationAction {
	this := &MaliciousUserMitigationAction{}
	oneofNumber_MitigationAction := []int32{1, 2, 3, 4, 5}[r.Intn(5)]
	switch oneofNumber_MitigationAction {
	case 1:
		this.MitigationAction = NewPopulatedMaliciousUserMitigationAction_None(r, easy)
	case 2:
		this.MitigationAction = NewPopulatedMaliciousUserMitigationAction_AlertOnly(r, easy)
	case 3:
		this.MitigationAction = NewPopulatedMaliciousUserMitigationAction_JavascriptChallenge(r, easy)
	case 4:
		this.MitigationAction = NewPopulatedMaliciousUserMitigationAction_CaptchaChallenge(r, easy)
	case 5:
		this.MitigationAction = NewPopulatedMaliciousUserMitigationAction_BlockTemporarily(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedMaliciousUserMitigationAction_None(r randyTypes, easy bool) *MaliciousUserMitigationAction_None {
	this := &MaliciousUserMitigationAction_None{}
	this.None = ves_io_schema4.NewPopulatedEmpty(r, easy)
	return this
}
func NewPopulatedMaliciousUserMitigationAction_AlertOnly(r randyTypes, easy bool) *MaliciousUserMitigationAction_AlertOnly {
	this := &MaliciousUserMitigationAction_AlertOnly{}
	this.AlertOnly = ves_io_schema4.NewPopulatedEmpty(r, easy)
	return this
}
func NewPopulatedMaliciousUserMitigationAction_JavascriptChallenge(r randyTypes, easy bool) *MaliciousUserMitigationAction_JavascriptChallenge {
	this := &MaliciousUserMitigationAction_JavascriptChallenge{}
	this.JavascriptChallenge = ves_io_schema4.NewPopulatedEmpty(r, easy)
	return this
}
func NewPopulatedMaliciousUserMitigationAction_CaptchaChallenge(r randyTypes, easy bool) *MaliciousUserMitigationAction_CaptchaChallenge {
	this := &MaliciousUserMitigationAction_CaptchaChallenge{}
	this.CaptchaChallenge = ves_io_schema4.NewPopulatedEmpty(r, easy)
	return this
}
func NewPopulatedMaliciousUserMitigationAction_BlockTemporarily(r randyTypes, easy bool) *MaliciousUserMitigationAction_BlockTemporarily {
	this := &MaliciousUserMitigationAction_BlockTemporarily{}
	this.BlockTemporarily = ves_io_schema4.NewPopulatedEmpty(r, easy)
	return this
}
func NewPopulatedMaliciousUserMitigationRule(r randyTypes, easy bool) *MaliciousUserMitigationRule {
	this := &MaliciousUserMitigationRule{}
	if r.Intn(10) != 0 {
		this.ThreatLevel = NewPopulatedMaliciousUserThreatLevel(r, easy)
	}
	if r.Intn(10) != 0 {
		this.MitigationAction = NewPopulatedMaliciousUserMitigationAction(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedJavascriptChallengeSettings(r randyTypes, easy bool) *JavascriptChallengeSettings {
	this := &JavascriptChallengeSettings{}
	this.JsScriptDelay = uint32(r.Uint32())
	this.CookieExpiry = uint32(r.Uint32())
	this.CustomPage = string(randStringTypes(r))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedCaptchaChallengeSettings(r randyTypes, easy bool) *CaptchaChallengeSettings {
	this := &CaptchaChallengeSettings{}
	this.CookieExpiry = uint32(r.Uint32())
	this.CustomPage = string(randStringTypes(r))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedTemporaryBlockingSettings(r randyTypes, easy bool) *TemporaryBlockingSettings {
	this := &TemporaryBlockingSettings{}
	this.CustomPage = string(randStringTypes(r))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedMaliciousUserMitigationType(r randyTypes, easy bool) *MaliciousUserMitigationType {
	this := &MaliciousUserMitigationType{}
	if r.Intn(10) != 0 {
		v1 := r.Intn(5)
		this.Rules = make([]*MaliciousUserMitigationRule, v1)
		for i := 0; i < v1; i++ {
			this.Rules[i] = NewPopulatedMaliciousUserMitigationRule(r, easy)
		}
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedGlobalSpecType(r randyTypes, easy bool) *GlobalSpecType {
	this := &GlobalSpecType{}
	if r.Intn(10) != 0 {
		this.MitigationType = NewPopulatedMaliciousUserMitigationType(r, easy)
	}
	if r.Intn(10) != 0 {
		this.JavascriptChallengeSettings = NewPopulatedJavascriptChallengeSettings(r, easy)
	}
	if r.Intn(10) != 0 {
		this.CaptchaChallengeSettings = NewPopulatedCaptchaChallengeSettings(r, easy)
	}
	if r.Intn(10) != 0 {
		this.TemporaryBlockingSettings = NewPopulatedTemporaryBlockingSettings(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedCreateSpecType(r randyTypes, easy bool) *CreateSpecType {
	this := &CreateSpecType{}
	if r.Intn(10) != 0 {
		this.MitigationType = NewPopulatedMaliciousUserMitigationType(r, easy)
	}
	if r.Intn(10) != 0 {
		this.JavascriptChallengeSettings = NewPopulatedJavascriptChallengeSettings(r, easy)
	}
	if r.Intn(10) != 0 {
		this.CaptchaChallengeSettings = NewPopulatedCaptchaChallengeSettings(r, easy)
	}
	if r.Intn(10) != 0 {
		this.TemporaryBlockingSettings = NewPopulatedTemporaryBlockingSettings(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedReplaceSpecType(r randyTypes, easy bool) *ReplaceSpecType {
	this := &ReplaceSpecType{}
	if r.Intn(10) != 0 {
		this.MitigationType = NewPopulatedMaliciousUserMitigationType(r, easy)
	}
	if r.Intn(10) != 0 {
		this.JavascriptChallengeSettings = NewPopulatedJavascriptChallengeSettings(r, easy)
	}
	if r.Intn(10) != 0 {
		this.CaptchaChallengeSettings = NewPopulatedCaptchaChallengeSettings(r, easy)
	}
	if r.Intn(10) != 0 {
		this.TemporaryBlockingSettings = NewPopulatedTemporaryBlockingSettings(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedGetSpecType(r randyTypes, easy bool) *GetSpecType {
	this := &GetSpecType{}
	if r.Intn(10) != 0 {
		this.MitigationType = NewPopulatedMaliciousUserMitigationType(r, easy)
	}
	if r.Intn(10) != 0 {
		this.JavascriptChallengeSettings = NewPopulatedJavascriptChallengeSettings(r, easy)
	}
	if r.Intn(10) != 0 {
		this.CaptchaChallengeSettings = NewPopulatedCaptchaChallengeSettings(r, easy)
	}
	if r.Intn(10) != 0 {
		this.TemporaryBlockingSettings = NewPopulatedTemporaryBlockingSettings(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

type randyTypes interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneTypes(r randyTypes) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringTypes(r randyTypes) string {
	v2 := r.Intn(100)
	tmps := make([]rune, v2)
	for i := 0; i < v2; i++ {
		tmps[i] = randUTF8RuneTypes(r)
	}
	return string(tmps)
}
func randUnrecognizedTypes(r randyTypes, maxFieldNumber int) (dAtA []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		dAtA = randFieldTypes(dAtA, r, fieldNumber, wire)
	}
	return dAtA
}
func randFieldTypes(dAtA []byte, r randyTypes, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		dAtA = encodeVarintPopulateTypes(dAtA, uint64(key))
		v3 := r.Int63()
		if r.Intn(2) == 0 {
			v3 *= -1
		}
		dAtA = encodeVarintPopulateTypes(dAtA, uint64(v3))
	case 1:
		dAtA = encodeVarintPopulateTypes(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		dAtA = encodeVarintPopulateTypes(dAtA, uint64(key))
		ll := r.Intn(100)
		dAtA = encodeVarintPopulateTypes(dAtA, uint64(ll))
		for j := 0; j < ll; j++ {
			dAtA = append(dAtA, byte(r.Intn(256)))
		}
	default:
		dAtA = encodeVarintPopulateTypes(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return dAtA
}
func encodeVarintPopulateTypes(dAtA []byte, v uint64) []byte {
	for v >= 1<<7 {
		dAtA = append(dAtA, uint8(uint64(v)&0x7f|0x80))
		v >>= 7
	}
	dAtA = append(dAtA, uint8(v))
	return dAtA
}
func (m *MaliciousUserThreatLevel) Size() (n int) {
	var l int
	_ = l
	if m.ThreatLevel != nil {
		n += m.ThreatLevel.Size()
	}
	return n
}

func (m *MaliciousUserThreatLevel_Low) Size() (n int) {
	var l int
	_ = l
	if m.Low != nil {
		l = m.Low.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *MaliciousUserThreatLevel_Medium) Size() (n int) {
	var l int
	_ = l
	if m.Medium != nil {
		l = m.Medium.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *MaliciousUserThreatLevel_High) Size() (n int) {
	var l int
	_ = l
	if m.High != nil {
		l = m.High.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *MaliciousUserMitigationAction) Size() (n int) {
	var l int
	_ = l
	if m.MitigationAction != nil {
		n += m.MitigationAction.Size()
	}
	return n
}

func (m *MaliciousUserMitigationAction_None) Size() (n int) {
	var l int
	_ = l
	if m.None != nil {
		l = m.None.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *MaliciousUserMitigationAction_AlertOnly) Size() (n int) {
	var l int
	_ = l
	if m.AlertOnly != nil {
		l = m.AlertOnly.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *MaliciousUserMitigationAction_JavascriptChallenge) Size() (n int) {
	var l int
	_ = l
	if m.JavascriptChallenge != nil {
		l = m.JavascriptChallenge.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *MaliciousUserMitigationAction_CaptchaChallenge) Size() (n int) {
	var l int
	_ = l
	if m.CaptchaChallenge != nil {
		l = m.CaptchaChallenge.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *MaliciousUserMitigationAction_BlockTemporarily) Size() (n int) {
	var l int
	_ = l
	if m.BlockTemporarily != nil {
		l = m.BlockTemporarily.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *MaliciousUserMitigationRule) Size() (n int) {
	var l int
	_ = l
	if m.ThreatLevel != nil {
		l = m.ThreatLevel.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.MitigationAction != nil {
		l = m.MitigationAction.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *JavascriptChallengeSettings) Size() (n int) {
	var l int
	_ = l
	if m.JsScriptDelay != 0 {
		n += 1 + sovTypes(uint64(m.JsScriptDelay))
	}
	if m.CookieExpiry != 0 {
		n += 1 + sovTypes(uint64(m.CookieExpiry))
	}
	l = len(m.CustomPage)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *CaptchaChallengeSettings) Size() (n int) {
	var l int
	_ = l
	if m.CookieExpiry != 0 {
		n += 1 + sovTypes(uint64(m.CookieExpiry))
	}
	l = len(m.CustomPage)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *TemporaryBlockingSettings) Size() (n int) {
	var l int
	_ = l
	l = len(m.CustomPage)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *MaliciousUserMitigationType) Size() (n int) {
	var l int
	_ = l
	if len(m.Rules) > 0 {
		for _, e := range m.Rules {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *GlobalSpecType) Size() (n int) {
	var l int
	_ = l
	if m.MitigationType != nil {
		l = m.MitigationType.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.JavascriptChallengeSettings != nil {
		l = m.JavascriptChallengeSettings.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.CaptchaChallengeSettings != nil {
		l = m.CaptchaChallengeSettings.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.TemporaryBlockingSettings != nil {
		l = m.TemporaryBlockingSettings.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *CreateSpecType) Size() (n int) {
	var l int
	_ = l
	if m.MitigationType != nil {
		l = m.MitigationType.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.JavascriptChallengeSettings != nil {
		l = m.JavascriptChallengeSettings.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.CaptchaChallengeSettings != nil {
		l = m.CaptchaChallengeSettings.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.TemporaryBlockingSettings != nil {
		l = m.TemporaryBlockingSettings.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *ReplaceSpecType) Size() (n int) {
	var l int
	_ = l
	if m.MitigationType != nil {
		l = m.MitigationType.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.JavascriptChallengeSettings != nil {
		l = m.JavascriptChallengeSettings.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.CaptchaChallengeSettings != nil {
		l = m.CaptchaChallengeSettings.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.TemporaryBlockingSettings != nil {
		l = m.TemporaryBlockingSettings.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *GetSpecType) Size() (n int) {
	var l int
	_ = l
	if m.MitigationType != nil {
		l = m.MitigationType.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.JavascriptChallengeSettings != nil {
		l = m.JavascriptChallengeSettings.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.CaptchaChallengeSettings != nil {
		l = m.CaptchaChallengeSettings.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.TemporaryBlockingSettings != nil {
		l = m.TemporaryBlockingSettings.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func sovTypes(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozTypes(x uint64) (n int) {
	return sovTypes(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *MaliciousUserThreatLevel) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MaliciousUserThreatLevel{`,
		`ThreatLevel:` + fmt.Sprintf("%v", this.ThreatLevel) + `,`,
		`}`,
	}, "")
	return s
}
func (this *MaliciousUserThreatLevel_Low) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MaliciousUserThreatLevel_Low{`,
		`Low:` + strings.Replace(fmt.Sprintf("%v", this.Low), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *MaliciousUserThreatLevel_Medium) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MaliciousUserThreatLevel_Medium{`,
		`Medium:` + strings.Replace(fmt.Sprintf("%v", this.Medium), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *MaliciousUserThreatLevel_High) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MaliciousUserThreatLevel_High{`,
		`High:` + strings.Replace(fmt.Sprintf("%v", this.High), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *MaliciousUserMitigationAction) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MaliciousUserMitigationAction{`,
		`MitigationAction:` + fmt.Sprintf("%v", this.MitigationAction) + `,`,
		`}`,
	}, "")
	return s
}
func (this *MaliciousUserMitigationAction_None) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MaliciousUserMitigationAction_None{`,
		`None:` + strings.Replace(fmt.Sprintf("%v", this.None), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *MaliciousUserMitigationAction_AlertOnly) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MaliciousUserMitigationAction_AlertOnly{`,
		`AlertOnly:` + strings.Replace(fmt.Sprintf("%v", this.AlertOnly), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *MaliciousUserMitigationAction_JavascriptChallenge) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MaliciousUserMitigationAction_JavascriptChallenge{`,
		`JavascriptChallenge:` + strings.Replace(fmt.Sprintf("%v", this.JavascriptChallenge), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *MaliciousUserMitigationAction_CaptchaChallenge) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MaliciousUserMitigationAction_CaptchaChallenge{`,
		`CaptchaChallenge:` + strings.Replace(fmt.Sprintf("%v", this.CaptchaChallenge), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *MaliciousUserMitigationAction_BlockTemporarily) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MaliciousUserMitigationAction_BlockTemporarily{`,
		`BlockTemporarily:` + strings.Replace(fmt.Sprintf("%v", this.BlockTemporarily), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *MaliciousUserMitigationRule) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MaliciousUserMitigationRule{`,
		`ThreatLevel:` + strings.Replace(fmt.Sprintf("%v", this.ThreatLevel), "MaliciousUserThreatLevel", "MaliciousUserThreatLevel", 1) + `,`,
		`MitigationAction:` + strings.Replace(fmt.Sprintf("%v", this.MitigationAction), "MaliciousUserMitigationAction", "MaliciousUserMitigationAction", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *JavascriptChallengeSettings) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&JavascriptChallengeSettings{`,
		`JsScriptDelay:` + fmt.Sprintf("%v", this.JsScriptDelay) + `,`,
		`CookieExpiry:` + fmt.Sprintf("%v", this.CookieExpiry) + `,`,
		`CustomPage:` + fmt.Sprintf("%v", this.CustomPage) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CaptchaChallengeSettings) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CaptchaChallengeSettings{`,
		`CookieExpiry:` + fmt.Sprintf("%v", this.CookieExpiry) + `,`,
		`CustomPage:` + fmt.Sprintf("%v", this.CustomPage) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TemporaryBlockingSettings) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TemporaryBlockingSettings{`,
		`CustomPage:` + fmt.Sprintf("%v", this.CustomPage) + `,`,
		`}`,
	}, "")
	return s
}
func (this *MaliciousUserMitigationType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MaliciousUserMitigationType{`,
		`Rules:` + strings.Replace(fmt.Sprintf("%v", this.Rules), "MaliciousUserMitigationRule", "MaliciousUserMitigationRule", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType{`,
		`MitigationType:` + strings.Replace(fmt.Sprintf("%v", this.MitigationType), "MaliciousUserMitigationType", "MaliciousUserMitigationType", 1) + `,`,
		`JavascriptChallengeSettings:` + strings.Replace(fmt.Sprintf("%v", this.JavascriptChallengeSettings), "JavascriptChallengeSettings", "JavascriptChallengeSettings", 1) + `,`,
		`CaptchaChallengeSettings:` + strings.Replace(fmt.Sprintf("%v", this.CaptchaChallengeSettings), "CaptchaChallengeSettings", "CaptchaChallengeSettings", 1) + `,`,
		`TemporaryBlockingSettings:` + strings.Replace(fmt.Sprintf("%v", this.TemporaryBlockingSettings), "TemporaryBlockingSettings", "TemporaryBlockingSettings", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType{`,
		`MitigationType:` + strings.Replace(fmt.Sprintf("%v", this.MitigationType), "MaliciousUserMitigationType", "MaliciousUserMitigationType", 1) + `,`,
		`JavascriptChallengeSettings:` + strings.Replace(fmt.Sprintf("%v", this.JavascriptChallengeSettings), "JavascriptChallengeSettings", "JavascriptChallengeSettings", 1) + `,`,
		`CaptchaChallengeSettings:` + strings.Replace(fmt.Sprintf("%v", this.CaptchaChallengeSettings), "CaptchaChallengeSettings", "CaptchaChallengeSettings", 1) + `,`,
		`TemporaryBlockingSettings:` + strings.Replace(fmt.Sprintf("%v", this.TemporaryBlockingSettings), "TemporaryBlockingSettings", "TemporaryBlockingSettings", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType{`,
		`MitigationType:` + strings.Replace(fmt.Sprintf("%v", this.MitigationType), "MaliciousUserMitigationType", "MaliciousUserMitigationType", 1) + `,`,
		`JavascriptChallengeSettings:` + strings.Replace(fmt.Sprintf("%v", this.JavascriptChallengeSettings), "JavascriptChallengeSettings", "JavascriptChallengeSettings", 1) + `,`,
		`CaptchaChallengeSettings:` + strings.Replace(fmt.Sprintf("%v", this.CaptchaChallengeSettings), "CaptchaChallengeSettings", "CaptchaChallengeSettings", 1) + `,`,
		`TemporaryBlockingSettings:` + strings.Replace(fmt.Sprintf("%v", this.TemporaryBlockingSettings), "TemporaryBlockingSettings", "TemporaryBlockingSettings", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType{`,
		`MitigationType:` + strings.Replace(fmt.Sprintf("%v", this.MitigationType), "MaliciousUserMitigationType", "MaliciousUserMitigationType", 1) + `,`,
		`JavascriptChallengeSettings:` + strings.Replace(fmt.Sprintf("%v", this.JavascriptChallengeSettings), "JavascriptChallengeSettings", "JavascriptChallengeSettings", 1) + `,`,
		`CaptchaChallengeSettings:` + strings.Replace(fmt.Sprintf("%v", this.CaptchaChallengeSettings), "CaptchaChallengeSettings", "CaptchaChallengeSettings", 1) + `,`,
		`TemporaryBlockingSettings:` + strings.Replace(fmt.Sprintf("%v", this.TemporaryBlockingSettings), "TemporaryBlockingSettings", "TemporaryBlockingSettings", 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringTypes(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *MaliciousUserThreatLevel) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MaliciousUserThreatLevel: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MaliciousUserThreatLevel: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Low", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ThreatLevel = &MaliciousUserThreatLevel_Low{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Medium", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ThreatLevel = &MaliciousUserThreatLevel_Medium{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field High", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ThreatLevel = &MaliciousUserThreatLevel_High{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MaliciousUserMitigationAction) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MaliciousUserMitigationAction: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MaliciousUserMitigationAction: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field None", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.MitigationAction = &MaliciousUserMitigationAction_None{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AlertOnly", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.MitigationAction = &MaliciousUserMitigationAction_AlertOnly{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JavascriptChallenge", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.MitigationAction = &MaliciousUserMitigationAction_JavascriptChallenge{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CaptchaChallenge", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.MitigationAction = &MaliciousUserMitigationAction_CaptchaChallenge{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockTemporarily", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.MitigationAction = &MaliciousUserMitigationAction_BlockTemporarily{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MaliciousUserMitigationRule) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MaliciousUserMitigationRule: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MaliciousUserMitigationRule: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ThreatLevel", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ThreatLevel == nil {
				m.ThreatLevel = &MaliciousUserThreatLevel{}
			}
			if err := m.ThreatLevel.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MitigationAction", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MitigationAction == nil {
				m.MitigationAction = &MaliciousUserMitigationAction{}
			}
			if err := m.MitigationAction.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *JavascriptChallengeSettings) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: JavascriptChallengeSettings: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: JavascriptChallengeSettings: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field JsScriptDelay", wireType)
			}
			m.JsScriptDelay = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.JsScriptDelay |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CookieExpiry", wireType)
			}
			m.CookieExpiry = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CookieExpiry |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CustomPage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CustomPage = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CaptchaChallengeSettings) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CaptchaChallengeSettings: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CaptchaChallengeSettings: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CookieExpiry", wireType)
			}
			m.CookieExpiry = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CookieExpiry |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CustomPage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CustomPage = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TemporaryBlockingSettings) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TemporaryBlockingSettings: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TemporaryBlockingSettings: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CustomPage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CustomPage = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MaliciousUserMitigationType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MaliciousUserMitigationType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MaliciousUserMitigationType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rules", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Rules = append(m.Rules, &MaliciousUserMitigationRule{})
			if err := m.Rules[len(m.Rules)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GlobalSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GlobalSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GlobalSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MitigationType", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MitigationType == nil {
				m.MitigationType = &MaliciousUserMitigationType{}
			}
			if err := m.MitigationType.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JavascriptChallengeSettings", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.JavascriptChallengeSettings == nil {
				m.JavascriptChallengeSettings = &JavascriptChallengeSettings{}
			}
			if err := m.JavascriptChallengeSettings.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CaptchaChallengeSettings", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CaptchaChallengeSettings == nil {
				m.CaptchaChallengeSettings = &CaptchaChallengeSettings{}
			}
			if err := m.CaptchaChallengeSettings.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TemporaryBlockingSettings", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TemporaryBlockingSettings == nil {
				m.TemporaryBlockingSettings = &TemporaryBlockingSettings{}
			}
			if err := m.TemporaryBlockingSettings.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MitigationType", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MitigationType == nil {
				m.MitigationType = &MaliciousUserMitigationType{}
			}
			if err := m.MitigationType.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JavascriptChallengeSettings", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.JavascriptChallengeSettings == nil {
				m.JavascriptChallengeSettings = &JavascriptChallengeSettings{}
			}
			if err := m.JavascriptChallengeSettings.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CaptchaChallengeSettings", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CaptchaChallengeSettings == nil {
				m.CaptchaChallengeSettings = &CaptchaChallengeSettings{}
			}
			if err := m.CaptchaChallengeSettings.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TemporaryBlockingSettings", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TemporaryBlockingSettings == nil {
				m.TemporaryBlockingSettings = &TemporaryBlockingSettings{}
			}
			if err := m.TemporaryBlockingSettings.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplaceSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplaceSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplaceSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MitigationType", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MitigationType == nil {
				m.MitigationType = &MaliciousUserMitigationType{}
			}
			if err := m.MitigationType.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JavascriptChallengeSettings", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.JavascriptChallengeSettings == nil {
				m.JavascriptChallengeSettings = &JavascriptChallengeSettings{}
			}
			if err := m.JavascriptChallengeSettings.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CaptchaChallengeSettings", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CaptchaChallengeSettings == nil {
				m.CaptchaChallengeSettings = &CaptchaChallengeSettings{}
			}
			if err := m.CaptchaChallengeSettings.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TemporaryBlockingSettings", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TemporaryBlockingSettings == nil {
				m.TemporaryBlockingSettings = &TemporaryBlockingSettings{}
			}
			if err := m.TemporaryBlockingSettings.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MitigationType", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MitigationType == nil {
				m.MitigationType = &MaliciousUserMitigationType{}
			}
			if err := m.MitigationType.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JavascriptChallengeSettings", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.JavascriptChallengeSettings == nil {
				m.JavascriptChallengeSettings = &JavascriptChallengeSettings{}
			}
			if err := m.JavascriptChallengeSettings.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CaptchaChallengeSettings", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CaptchaChallengeSettings == nil {
				m.CaptchaChallengeSettings = &CaptchaChallengeSettings{}
			}
			if err := m.CaptchaChallengeSettings.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TemporaryBlockingSettings", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TemporaryBlockingSettings == nil {
				m.TemporaryBlockingSettings = &TemporaryBlockingSettings{}
			}
			if err := m.TemporaryBlockingSettings.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTypes(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthTypes
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipTypes(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthTypes = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTypes   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("ves.io/schema/malicious_user_mitigation/types.proto", fileDescriptorTypes)
}
func init() {
	golang_proto.RegisterFile("ves.io/schema/malicious_user_mitigation/types.proto", fileDescriptorTypes)
}

var fileDescriptorTypes = []byte{
	// 999 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x97, 0x41, 0x6c, 0x1b, 0x45,
	0x17, 0xc7, 0x3d, 0xf1, 0xda, 0x4d, 0xc6, 0x4d, 0xe2, 0xec, 0x97, 0x4f, 0xda, 0xd8, 0x74, 0x09,
	0xbe, 0x10, 0x45, 0xc9, 0x5a, 0x24, 0xad, 0x90, 0x38, 0x54, 0xd4, 0x69, 0x29, 0x44, 0x54, 0x45,
	0x9b, 0x70, 0x41, 0x42, 0xab, 0xf1, 0x7a, 0xba, 0x9e, 0x64, 0xd6, 0xb3, 0xda, 0x1d, 0xbb, 0xdd,
	0x13, 0x11, 0x20, 0x04, 0x12, 0x12, 0x15, 0x77, 0xc4, 0x81, 0x0b, 0x42, 0x82, 0x33, 0xc2, 0x17,
	0x1f, 0x81, 0x53, 0x0e, 0x1c, 0x7a, 0x6c, 0xb6, 0x17, 0xb8, 0x55, 0x9c, 0x72, 0x44, 0x3b, 0xbb,
	0x8e, 0xb3, 0x4e, 0xbd, 0x36, 0xad, 0x14, 0x2e, 0xb9, 0x44, 0xbb, 0x99, 0xff, 0x7b, 0xf3, 0x7f,
	0xfb, 0x7e, 0xf3, 0xac, 0x81, 0x9b, 0x1d, 0xec, 0x69, 0x84, 0x55, 0x3d, 0xb3, 0x89, 0x6d, 0x54,
	0xb5, 0x11, 0x25, 0x26, 0x61, 0x6d, 0xcf, 0x68, 0x7b, 0xd8, 0x35, 0x6c, 0xc2, 0x89, 0x85, 0x38,
	0x61, 0xad, 0x2a, 0xf7, 0x1d, 0xec, 0x69, 0x8e, 0xcb, 0x38, 0x93, 0x5f, 0x8d, 0x82, 0xb4, 0x28,
	0x48, 0x1b, 0x19, 0x54, 0x5a, 0xb7, 0x08, 0x6f, 0xb6, 0xeb, 0x9a, 0xc9, 0xec, 0xaa, 0xc5, 0x2c,
	0x56, 0x15, 0xf1, 0xf5, 0xf6, 0x3d, 0xf1, 0x26, 0x5e, 0xc4, 0x53, 0x94, 0xb7, 0xf4, 0xb2, 0xc5,
	0x98, 0x45, 0xf1, 0x40, 0xc5, 0x89, 0x8d, 0x3d, 0x8e, 0x6c, 0x27, 0x16, 0x94, 0x93, 0x6e, 0x99,
	0x13, 0xee, 0x12, 0xbb, 0x2a, 0x2d, 0x25, 0x17, 0x4f, 0x19, 0x2e, 0xbd, 0x94, 0x5c, 0xea, 0x20,
	0x4a, 0x1a, 0x88, 0xe3, 0x78, 0x75, 0x79, 0x68, 0x95, 0xe0, 0xfb, 0x46, 0x22, 0x75, 0xe5, 0x37,
	0x00, 0x95, 0x3b, 0xfd, 0x2a, 0xdf, 0xf7, 0xb0, 0xbb, 0xdb, 0x74, 0x31, 0xe2, 0xef, 0xe2, 0x0e,
	0xa6, 0xf2, 0x0a, 0xcc, 0x52, 0x76, 0x5f, 0x01, 0xcb, 0x60, 0xa5, 0xb0, 0xb1, 0xa8, 0x25, 0xbf,
	0xcd, 0x2d, 0xdb, 0xe1, 0xfe, 0xdb, 0x19, 0x3d, 0x94, 0xc8, 0x1a, 0xcc, 0xdb, 0xb8, 0x41, 0xda,
	0xb6, 0x32, 0x95, 0x2a, 0x8e, 0x55, 0xf2, 0x2a, 0x94, 0x9a, 0xc4, 0x6a, 0x2a, 0xd9, 0x54, 0xb5,
	0xd0, 0xd4, 0x5e, 0x81, 0x97, 0xb9, 0x30, 0x65, 0x50, 0xe1, 0x6a, 0xa1, 0xd7, 0x05, 0xe0, 0xb0,
	0x0b, 0xa4, 0xa0, 0x0b, 0x72, 0xaf, 0xad, 0x6d, 0xac, 0x6d, 0x6e, 0x4b, 0xd3, 0x52, 0x31, 0x57,
	0xf9, 0x22, 0x0b, 0xaf, 0x24, 0x6a, 0xb9, 0x73, 0xd2, 0xaf, 0x1b, 0x66, 0xf8, 0x37, 0xdc, 0xb6,
	0xc5, 0x5a, 0x78, 0x4c, 0x45, 0x42, 0x23, 0x5f, 0x83, 0x10, 0x51, 0xec, 0x72, 0x83, 0xb5, 0xa8,
	0x3f, 0xa6, 0xac, 0x19, 0xa1, 0xbc, 0xdb, 0xa2, 0xbe, 0xfc, 0x0e, 0x5c, 0xdc, 0x43, 0x1d, 0xe4,
	0x99, 0x2e, 0x71, 0xb8, 0x61, 0x36, 0x11, 0xa5, 0xb8, 0x65, 0xe1, 0x31, 0x95, 0xfe, 0x6f, 0x10,
	0xb3, 0xd5, 0x0f, 0x91, 0xb7, 0xe0, 0x82, 0x89, 0x1c, 0x6e, 0x36, 0xd1, 0xa9, 0x3c, 0x52, 0x6a,
	0x9e, 0x62, 0x1c, 0x90, 0x48, 0x52, 0xa7, 0xcc, 0xdc, 0x37, 0x38, 0xb6, 0x1d, 0xe6, 0x22, 0x97,
	0x50, 0x5f, 0xc9, 0xa5, 0x27, 0x11, 0x01, 0xbb, 0x03, 0x7d, 0x6d, 0x15, 0x2e, 0x0c, 0xd8, 0x37,
	0x50, 0xf4, 0x31, 0xff, 0x1f, 0xf7, 0x21, 0x1f, 0x74, 0xc1, 0x8c, 0xe8, 0xc3, 0xda, 0xd5, 0xb5,
	0x6b, 0xdb, 0xd2, 0x74, 0xbe, 0x78, 0xa9, 0x72, 0x0c, 0x60, 0x79, 0x44, 0x2f, 0xf4, 0x36, 0xc5,
	0x72, 0x23, 0xd9, 0xd4, 0xb8, 0x23, 0x37, 0xb4, 0x09, 0xcf, 0x9f, 0x36, 0x8a, 0x59, 0xbd, 0xc0,
	0x4f, 0x01, 0xec, 0x3d, 0xc3, 0x77, 0xdc, 0xca, 0xb7, 0x9e, 0x6f, 0xab, 0x61, 0xa4, 0xf4, 0xa2,
	0x3d, 0xf4, 0x9f, 0x4a, 0x0f, 0xc0, 0xf2, 0xf6, 0xd9, 0x76, 0xee, 0x60, 0xce, 0x49, 0xcb, 0xf2,
	0xe4, 0xd7, 0xe1, 0xfc, 0x9e, 0x67, 0xc4, 0x80, 0x34, 0x30, 0x45, 0x11, 0x5d, 0xb3, 0xb5, 0xf9,
	0xe3, 0x2e, 0xc8, 0xfc, 0xf2, 0x57, 0x2f, 0x9b, 0x5f, 0x95, 0x94, 0xc7, 0x7f, 0x64, 0xf5, 0xd9,
	0x3d, 0x6f, 0x47, 0xc8, 0x6e, 0x86, 0x2a, 0xf9, 0x2a, 0x9c, 0x35, 0x19, 0xdb, 0x27, 0xd8, 0xc0,
	0x0f, 0x1c, 0xe2, 0xfa, 0x82, 0xa9, 0xa1, 0xb0, 0x83, 0xef, 0x72, 0xfa, 0xe5, 0x48, 0x75, 0x4b,
	0x88, 0xe4, 0x0d, 0x58, 0x30, 0xdb, 0x1e, 0x67, 0xb6, 0xe1, 0xa0, 0x98, 0x9f, 0x99, 0xda, 0xc2,
	0x71, 0x17, 0x64, 0xc3, 0x98, 0x69, 0x37, 0xaf, 0x1c, 0xbc, 0xf9, 0x10, 0x00, 0x1d, 0x46, 0xaa,
	0xf7, 0x90, 0x85, 0x2b, 0x9f, 0x02, 0xa8, 0x6c, 0x0d, 0x91, 0x74, 0xe2, 0xff, 0x8c, 0x8d, 0xa9,
	0xe7, 0xb0, 0x91, 0x9d, 0xc4, 0xc6, 0x5d, 0xb8, 0xd4, 0xa7, 0xd0, 0xaf, 0x85, 0x4c, 0x92, 0x96,
	0x75, 0x62, 0x63, 0x28, 0x21, 0x98, 0x24, 0xe1, 0x57, 0xa3, 0xa9, 0xdc, 0xf5, 0x1d, 0x2c, 0x3b,
	0x30, 0xe7, 0xb6, 0x29, 0xf6, 0x14, 0xb0, 0x9c, 0x5d, 0x29, 0x6c, 0xdc, 0x7c, 0x51, 0x46, 0x42,
	0xd4, 0x6b, 0x8b, 0xa1, 0x9f, 0xdc, 0xd7, 0x60, 0xaa, 0x28, 0xf5, 0x9f, 0x14, 0xa0, 0x47, 0x1b,
	0x55, 0xbe, 0x91, 0xe0, 0xdc, 0x6d, 0xca, 0xea, 0x88, 0xee, 0x38, 0xd8, 0x14, 0x26, 0x6c, 0x38,
	0x7f, 0x0a, 0xda, 0x70, 0xd8, 0xc7, 0xa7, 0xe3, 0x85, 0xed, 0x84, 0xe9, 0xf5, 0x39, 0x3b, 0x59,
	0xf3, 0x97, 0x00, 0x5e, 0x79, 0xd6, 0xc4, 0x32, 0xbc, 0xf8, 0x4b, 0xc7, 0x07, 0x66, 0xf2, 0xdd,
	0x53, 0xe0, 0xaf, 0x85, 0xa5, 0x97, 0xf7, 0x52, 0x4e, 0xc7, 0x27, 0x00, 0x96, 0xce, 0x4c, 0xbd,
	0x81, 0x97, 0xec, 0xbf, 0x9c, 0x13, 0xa3, 0x28, 0x16, 0x46, 0x14, 0x73, 0x14, 0xe3, 0x9f, 0x01,
	0x58, 0xee, 0x0f, 0x4c, 0xdf, 0xa8, 0xc7, 0xec, 0x0d, 0x6c, 0x44, 0x53, 0xb8, 0x36, 0xb1, 0x8d,
	0x91, 0x18, 0x0b, 0x1f, 0x4b, 0x7c, 0xd4, 0x72, 0xe5, 0x47, 0x09, 0xce, 0x6d, 0x85, 0x03, 0x0d,
	0xff, 0x57, 0x7c, 0x7c, 0x7e, 0x9e, 0x7c, 0xa4, 0xb3, 0xf1, 0xd1, 0xb9, 0xa0, 0x91, 0x82, 0xc5,
	0xc7, 0xe7, 0x85, 0x45, 0x0a, 0x12, 0x6f, 0x94, 0x7f, 0xbf, 0x3e, 0x34, 0x32, 0xfe, 0xbe, 0x7e,
	0x29, 0xfe, 0xfd, 0xad, 0xfc, 0x24, 0xc1, 0x79, 0x1d, 0x3b, 0x14, 0x99, 0x17, 0xc0, 0x5c, 0x00,
	0x33, 0x01, 0x30, 0x3f, 0x48, 0xb0, 0x70, 0x1b, 0xf3, 0x0b, 0x58, 0x2e, 0x60, 0x19, 0x0b, 0x4b,
	0xed, 0x5b, 0x70, 0x78, 0xa4, 0x66, 0x1e, 0x1d, 0xa9, 0x99, 0xa7, 0x47, 0x2a, 0x38, 0x3e, 0x52,
	0xc1, 0x41, 0xa0, 0x82, 0xef, 0x03, 0x15, 0xfc, 0x1c, 0xa8, 0xa0, 0x17, 0xa8, 0xe0, 0xd7, 0x40,
	0x05, 0x87, 0x81, 0x0a, 0x1e, 0x05, 0x2a, 0x78, 0x1c, 0xa8, 0xe0, 0xcf, 0x40, 0xcd, 0x3c, 0x0d,
	0x54, 0xf0, 0xf0, 0x89, 0x9a, 0xe9, 0x3d, 0x51, 0xc1, 0x07, 0x1f, 0x5a, 0xcc, 0xd9, 0xb7, 0xb4,
	0x0e, 0xa3, 0x1c, 0xbb, 0x2e, 0xd2, 0xda, 0x5e, 0x55, 0x3c, 0xdc, 0x63, 0xae, 0xbd, 0xee, 0xb8,
	0xac, 0x43, 0x1a, 0xd8, 0x5d, 0xef, 0x2f, 0x57, 0x9d, 0xba, 0xc5, 0xaa, 0xf8, 0x01, 0x8f, 0x6f,
	0xb0, 0xe3, 0x2e, 0xf3, 0xf5, 0xbc, 0xb8, 0xd6, 0x6e, 0xfe, 0x13, 0x00, 0x00, 0xff, 0xff, 0x88,
	0x11, 0xe5, 0x1c, 0xfe, 0x0f, 0x00, 0x00,
}
