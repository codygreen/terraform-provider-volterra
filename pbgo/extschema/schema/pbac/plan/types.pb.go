// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ves.io/schema/pbac/plan/types.proto

package plan

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	golang_proto "github.com/golang/protobuf/proto"
	schema "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
	_ "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/pbac"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// GlobalSpecType
//
// x-displayName: "Specification"
// Shape of plan in the storage backend.
type GlobalSpecType struct {
	// display_name
	//
	// x-displayName: "Display Name"
	// x-required
	// User friendly name for display purpose.
	DisplayName string `protobuf:"bytes,1,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	// included_services
	//
	// x-displayName: "Included Addon Services"
	// List of pre-defined addon services that are by default included part this plan.
	// tenant will be auto subscribed to all the addon services in this list.
	IncludedServices []*schema.ObjectRefType `protobuf:"bytes,2,rep,name=included_services,json=includedServices,proto3" json:"included_services,omitempty"`
	// allowed_services
	//
	// x-displayName: "Allowed Addon Services"
	// List of pre-defined addon services that can be subscribed part this plan.
	AllowedServices []*schema.ObjectRefType `protobuf:"bytes,3,rep,name=allowed_services,json=allowedServices,proto3" json:"allowed_services,omitempty"`
	// subscription_policy
	//
	// x-displayName: "Subscription Policy"
	// Reference of subscription policy for this plan. This policy will include rules for allowed addon service subscription
	// There will be one subscription policy per plan
	SubscriptionPolicy []*schema.ObjectRefType `protobuf:"bytes,4,rep,name=subscription_policy,json=subscriptionPolicy,proto3" json:"subscription_policy,omitempty"`
}

func (m *GlobalSpecType) Reset()      { *m = GlobalSpecType{} }
func (*GlobalSpecType) ProtoMessage() {}
func (*GlobalSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_32e01c39761d7301, []int{0}
}
func (m *GlobalSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GlobalSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *GlobalSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GlobalSpecType.Merge(m, src)
}
func (m *GlobalSpecType) XXX_Size() int {
	return m.Size()
}
func (m *GlobalSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_GlobalSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_GlobalSpecType proto.InternalMessageInfo

func (m *GlobalSpecType) GetDisplayName() string {
	if m != nil {
		return m.DisplayName
	}
	return ""
}

func (m *GlobalSpecType) GetIncludedServices() []*schema.ObjectRefType {
	if m != nil {
		return m.IncludedServices
	}
	return nil
}

func (m *GlobalSpecType) GetAllowedServices() []*schema.ObjectRefType {
	if m != nil {
		return m.AllowedServices
	}
	return nil
}

func (m *GlobalSpecType) GetSubscriptionPolicy() []*schema.ObjectRefType {
	if m != nil {
		return m.SubscriptionPolicy
	}
	return nil
}

// Get plan
//
// x-displayName: "Get Plan"
// Get plan reads a given object from storage backend for metadata.namespace.
type GetSpecType struct {
	DisplayName      string                  `protobuf:"bytes,1,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	IncludedServices []*schema.ObjectRefType `protobuf:"bytes,2,rep,name=included_services,json=includedServices,proto3" json:"included_services,omitempty"`
	AllowedServices  []*schema.ObjectRefType `protobuf:"bytes,3,rep,name=allowed_services,json=allowedServices,proto3" json:"allowed_services,omitempty"`
}

func (m *GetSpecType) Reset()      { *m = GetSpecType{} }
func (*GetSpecType) ProtoMessage() {}
func (*GetSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_32e01c39761d7301, []int{1}
}
func (m *GetSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *GetSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetSpecType.Merge(m, src)
}
func (m *GetSpecType) XXX_Size() int {
	return m.Size()
}
func (m *GetSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_GetSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_GetSpecType proto.InternalMessageInfo

func (m *GetSpecType) GetDisplayName() string {
	if m != nil {
		return m.DisplayName
	}
	return ""
}

func (m *GetSpecType) GetIncludedServices() []*schema.ObjectRefType {
	if m != nil {
		return m.IncludedServices
	}
	return nil
}

func (m *GetSpecType) GetAllowedServices() []*schema.ObjectRefType {
	if m != nil {
		return m.AllowedServices
	}
	return nil
}

func init() {
	proto.RegisterType((*GlobalSpecType)(nil), "ves.io.schema.pbac.plan.GlobalSpecType")
	golang_proto.RegisterType((*GlobalSpecType)(nil), "ves.io.schema.pbac.plan.GlobalSpecType")
	proto.RegisterType((*GetSpecType)(nil), "ves.io.schema.pbac.plan.GetSpecType")
	golang_proto.RegisterType((*GetSpecType)(nil), "ves.io.schema.pbac.plan.GetSpecType")
}

func init() {
	proto.RegisterFile("ves.io/schema/pbac/plan/types.proto", fileDescriptor_32e01c39761d7301)
}
func init() {
	golang_proto.RegisterFile("ves.io/schema/pbac/plan/types.proto", fileDescriptor_32e01c39761d7301)
}

var fileDescriptor_32e01c39761d7301 = []byte{
	// 509 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x94, 0x3f, 0x6f, 0xd3, 0x40,
	0x18, 0xc6, 0x7d, 0x49, 0x8b, 0x54, 0x07, 0x4a, 0x08, 0x03, 0x6e, 0x5a, 0x9d, 0x4c, 0x61, 0xe8,
	0x90, 0xd8, 0xa2, 0xdd, 0x18, 0x3a, 0x64, 0xe9, 0xc4, 0x1f, 0xa5, 0x2c, 0xc0, 0x10, 0x9d, 0xed,
	0x37, 0xee, 0x95, 0xb3, 0xdf, 0x93, 0xff, 0x95, 0x0c, 0x95, 0x90, 0xd8, 0x60, 0x41, 0x7c, 0x0a,
	0xd4, 0x8f, 0xc0, 0xd4, 0x11, 0x31, 0x65, 0xcc, 0x48, 0x9c, 0x05, 0xb6, 0x8a, 0x4f, 0x80, 0xe2,
	0x38, 0x51, 0x6c, 0x32, 0xa0, 0x8a, 0xed, 0x3d, 0x3d, 0xcf, 0x3d, 0xbf, 0xd3, 0x73, 0x3e, 0xab,
	0x0f, 0x12, 0x08, 0x0d, 0x8e, 0x66, 0x68, 0x9f, 0x80, 0xc7, 0x4c, 0x69, 0x31, 0xdb, 0x94, 0x82,
	0xf9, 0x66, 0x34, 0x90, 0x10, 0x1a, 0x32, 0xc0, 0x08, 0x1b, 0xf7, 0x66, 0x26, 0x63, 0x66, 0x32,
	0xa6, 0x26, 0x63, 0x6a, 0x6a, 0xb6, 0x5d, 0x1e, 0x9d, 0xc4, 0x96, 0x61, 0xa3, 0x67, 0xba, 0xe8,
	0xa2, 0x99, 0xf9, 0xad, 0xb8, 0x9f, 0xad, 0xb2, 0x45, 0x36, 0xcd, 0x72, 0x9a, 0xdb, 0x45, 0x18,
	0xca, 0x88, 0xa3, 0x9f, 0x43, 0x9a, 0x74, 0xc5, 0x49, 0x96, 0x0e, 0xd1, 0xdc, 0x2a, 0xea, 0xcb,
	0xd2, 0x4e, 0x51, 0x4a, 0x98, 0xe0, 0x0e, 0x8b, 0x20, 0x57, 0xf5, 0x92, 0xca, 0xe1, 0xac, 0x57,
	0x40, 0xef, 0x7e, 0xa8, 0xaa, 0x9b, 0x47, 0x02, 0x2d, 0x26, 0x8e, 0x25, 0xd8, 0x2f, 0x06, 0x12,
	0x1a, 0x2d, 0xf5, 0xa6, 0xc3, 0x43, 0x29, 0xd8, 0xa0, 0xe7, 0x33, 0x0f, 0x34, 0xa2, 0x93, 0xbd,
	0x8d, 0xce, 0xc6, 0xd7, 0x5f, 0x97, 0xd5, 0xb5, 0xa0, 0xa2, 0xe9, 0xdd, 0x5a, 0x2e, 0x3f, 0x65,
	0x1e, 0x34, 0x50, 0xbd, 0xc3, 0x7d, 0x5b, 0xc4, 0x0e, 0x38, 0xbd, 0x10, 0x82, 0x84, 0xdb, 0x10,
	0x6a, 0x15, 0xbd, 0xba, 0x57, 0xdb, 0xdf, 0x31, 0x8a, 0xe5, 0x3d, 0xb3, 0x4e, 0xc1, 0x8e, 0xba,
	0xd0, 0x9f, 0x62, 0x3a, 0x0f, 0x2f, 0xce, 0x6f, 0x31, 0xc7, 0x41, 0x7f, 0xbe, 0x6d, 0x0a, 0x58,
	0xff, 0x4c, 0x2a, 0x75, 0x7d, 0x3e, 0x69, 0xa4, 0x5b, 0x9f, 0x87, 0x1f, 0xe7, 0xd9, 0x0d, 0x4f,
	0xad, 0x33, 0x21, 0xf0, 0x6c, 0x99, 0x57, 0xfd, 0x6f, 0xbc, 0xdb, 0x79, 0xf6, 0x02, 0x77, 0xaa,
	0xde, 0x0d, 0x63, 0x2b, 0xb4, 0x03, 0x9e, 0xf5, 0xd6, 0x93, 0x28, 0xb8, 0x3d, 0xd0, 0xd6, 0xfe,
	0x81, 0xb8, 0x7d, 0x71, 0xbe, 0x99, 0xb3, 0xf2, 0x6d, 0x0b, 0x24, 0xe9, 0x36, 0x96, 0x53, 0x9f,
	0x67, 0xea, 0xee, 0xfb, 0x8a, 0x5a, 0x3b, 0x82, 0x68, 0x71, 0x13, 0xf7, 0x57, 0xdd, 0x44, 0xb1,
	0xfe, 0xd7, 0xd7, 0xad, 0xbf, 0x5e, 0xae, 0x63, 0x45, 0xd5, 0x2f, 0xaf, 0x59, 0xf5, 0xdf, 0xd9,
	0xe5, 0x5a, 0x1f, 0x6f, 0x7d, 0x3f, 0x2c, 0x7d, 0x77, 0xbf, 0x0f, 0xd7, 0x1f, 0xb5, 0xf6, 0x5b,
	0x07, 0x9d, 0x8f, 0x64, 0x38, 0xa6, 0xca, 0x68, 0x4c, 0x95, 0xab, 0x31, 0x25, 0xef, 0x52, 0x4a,
	0xbe, 0xa4, 0x94, 0x7c, 0x4b, 0x29, 0x19, 0xa6, 0x94, 0x8c, 0x52, 0x4a, 0x7e, 0xa4, 0x94, 0xfc,
	0x4c, 0xa9, 0x72, 0x95, 0x52, 0xf2, 0x69, 0x42, 0x95, 0xcb, 0x09, 0x25, 0xc3, 0x09, 0x55, 0x46,
	0x13, 0xaa, 0xbc, 0x7a, 0xe2, 0xa2, 0x7c, 0xe3, 0x1a, 0x09, 0x8a, 0x08, 0x82, 0x80, 0x19, 0x71,
	0x68, 0x66, 0x43, 0x1f, 0x03, 0xaf, 0x2d, 0x03, 0x4c, 0xb8, 0x03, 0x41, 0x7b, 0x2e, 0x9b, 0xd2,
	0x72, 0xd1, 0x84, 0xb7, 0x51, 0xfe, 0x44, 0xca, 0x3f, 0x03, 0xeb, 0x46, 0xf6, 0x4e, 0x0e, 0xfe,
	0x04, 0x00, 0x00, 0xff, 0xff, 0xfc, 0x08, 0xe5, 0x9e, 0x2e, 0x04, 0x00, 0x00,
}

func (this *GlobalSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType)
	if !ok {
		that2, ok := that.(GlobalSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.DisplayName != that1.DisplayName {
		return false
	}
	if len(this.IncludedServices) != len(that1.IncludedServices) {
		return false
	}
	for i := range this.IncludedServices {
		if !this.IncludedServices[i].Equal(that1.IncludedServices[i]) {
			return false
		}
	}
	if len(this.AllowedServices) != len(that1.AllowedServices) {
		return false
	}
	for i := range this.AllowedServices {
		if !this.AllowedServices[i].Equal(that1.AllowedServices[i]) {
			return false
		}
	}
	if len(this.SubscriptionPolicy) != len(that1.SubscriptionPolicy) {
		return false
	}
	for i := range this.SubscriptionPolicy {
		if !this.SubscriptionPolicy[i].Equal(that1.SubscriptionPolicy[i]) {
			return false
		}
	}
	return true
}
func (this *GetSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType)
	if !ok {
		that2, ok := that.(GetSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.DisplayName != that1.DisplayName {
		return false
	}
	if len(this.IncludedServices) != len(that1.IncludedServices) {
		return false
	}
	for i := range this.IncludedServices {
		if !this.IncludedServices[i].Equal(that1.IncludedServices[i]) {
			return false
		}
	}
	if len(this.AllowedServices) != len(that1.AllowedServices) {
		return false
	}
	for i := range this.AllowedServices {
		if !this.AllowedServices[i].Equal(that1.AllowedServices[i]) {
			return false
		}
	}
	return true
}
func (this *GlobalSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&plan.GlobalSpecType{")
	s = append(s, "DisplayName: "+fmt.Sprintf("%#v", this.DisplayName)+",\n")
	if this.IncludedServices != nil {
		s = append(s, "IncludedServices: "+fmt.Sprintf("%#v", this.IncludedServices)+",\n")
	}
	if this.AllowedServices != nil {
		s = append(s, "AllowedServices: "+fmt.Sprintf("%#v", this.AllowedServices)+",\n")
	}
	if this.SubscriptionPolicy != nil {
		s = append(s, "SubscriptionPolicy: "+fmt.Sprintf("%#v", this.SubscriptionPolicy)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&plan.GetSpecType{")
	s = append(s, "DisplayName: "+fmt.Sprintf("%#v", this.DisplayName)+",\n")
	if this.IncludedServices != nil {
		s = append(s, "IncludedServices: "+fmt.Sprintf("%#v", this.IncludedServices)+",\n")
	}
	if this.AllowedServices != nil {
		s = append(s, "AllowedServices: "+fmt.Sprintf("%#v", this.AllowedServices)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringTypes(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *GlobalSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GlobalSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SubscriptionPolicy) > 0 {
		for iNdEx := len(m.SubscriptionPolicy) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.SubscriptionPolicy[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.AllowedServices) > 0 {
		for iNdEx := len(m.AllowedServices) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.AllowedServices[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.IncludedServices) > 0 {
		for iNdEx := len(m.IncludedServices) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.IncludedServices[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.DisplayName) > 0 {
		i -= len(m.DisplayName)
		copy(dAtA[i:], m.DisplayName)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.DisplayName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AllowedServices) > 0 {
		for iNdEx := len(m.AllowedServices) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.AllowedServices[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.IncludedServices) > 0 {
		for iNdEx := len(m.IncludedServices) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.IncludedServices[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.DisplayName) > 0 {
		i -= len(m.DisplayName)
		copy(dAtA[i:], m.DisplayName)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.DisplayName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintTypes(dAtA []byte, offset int, v uint64) int {
	offset -= sovTypes(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *GlobalSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DisplayName)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if len(m.IncludedServices) > 0 {
		for _, e := range m.IncludedServices {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if len(m.AllowedServices) > 0 {
		for _, e := range m.AllowedServices {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if len(m.SubscriptionPolicy) > 0 {
		for _, e := range m.SubscriptionPolicy {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *GetSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DisplayName)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if len(m.IncludedServices) > 0 {
		for _, e := range m.IncludedServices {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if len(m.AllowedServices) > 0 {
		for _, e := range m.AllowedServices {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func sovTypes(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTypes(x uint64) (n int) {
	return sovTypes(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *GlobalSpecType) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForIncludedServices := "[]*ObjectRefType{"
	for _, f := range this.IncludedServices {
		repeatedStringForIncludedServices += strings.Replace(fmt.Sprintf("%v", f), "ObjectRefType", "schema.ObjectRefType", 1) + ","
	}
	repeatedStringForIncludedServices += "}"
	repeatedStringForAllowedServices := "[]*ObjectRefType{"
	for _, f := range this.AllowedServices {
		repeatedStringForAllowedServices += strings.Replace(fmt.Sprintf("%v", f), "ObjectRefType", "schema.ObjectRefType", 1) + ","
	}
	repeatedStringForAllowedServices += "}"
	repeatedStringForSubscriptionPolicy := "[]*ObjectRefType{"
	for _, f := range this.SubscriptionPolicy {
		repeatedStringForSubscriptionPolicy += strings.Replace(fmt.Sprintf("%v", f), "ObjectRefType", "schema.ObjectRefType", 1) + ","
	}
	repeatedStringForSubscriptionPolicy += "}"
	s := strings.Join([]string{`&GlobalSpecType{`,
		`DisplayName:` + fmt.Sprintf("%v", this.DisplayName) + `,`,
		`IncludedServices:` + repeatedStringForIncludedServices + `,`,
		`AllowedServices:` + repeatedStringForAllowedServices + `,`,
		`SubscriptionPolicy:` + repeatedStringForSubscriptionPolicy + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForIncludedServices := "[]*ObjectRefType{"
	for _, f := range this.IncludedServices {
		repeatedStringForIncludedServices += strings.Replace(fmt.Sprintf("%v", f), "ObjectRefType", "schema.ObjectRefType", 1) + ","
	}
	repeatedStringForIncludedServices += "}"
	repeatedStringForAllowedServices := "[]*ObjectRefType{"
	for _, f := range this.AllowedServices {
		repeatedStringForAllowedServices += strings.Replace(fmt.Sprintf("%v", f), "ObjectRefType", "schema.ObjectRefType", 1) + ","
	}
	repeatedStringForAllowedServices += "}"
	s := strings.Join([]string{`&GetSpecType{`,
		`DisplayName:` + fmt.Sprintf("%v", this.DisplayName) + `,`,
		`IncludedServices:` + repeatedStringForIncludedServices + `,`,
		`AllowedServices:` + repeatedStringForAllowedServices + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringTypes(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *GlobalSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GlobalSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GlobalSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisplayName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DisplayName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IncludedServices", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IncludedServices = append(m.IncludedServices, &schema.ObjectRefType{})
			if err := m.IncludedServices[len(m.IncludedServices)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllowedServices", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AllowedServices = append(m.AllowedServices, &schema.ObjectRefType{})
			if err := m.AllowedServices[len(m.AllowedServices)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubscriptionPolicy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SubscriptionPolicy = append(m.SubscriptionPolicy, &schema.ObjectRefType{})
			if err := m.SubscriptionPolicy[len(m.SubscriptionPolicy)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisplayName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DisplayName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IncludedServices", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IncludedServices = append(m.IncludedServices, &schema.ObjectRefType{})
			if err := m.IncludedServices[len(m.IncludedServices)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllowedServices", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AllowedServices = append(m.AllowedServices, &schema.ObjectRefType{})
			if err := m.AllowedServices[len(m.AllowedServices)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTypes(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTypes
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTypes
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTypes
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTypes        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTypes          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTypes = fmt.Errorf("proto: unexpected end of group")
)
