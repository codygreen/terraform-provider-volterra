// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ves.io/schema/pbac/addon_service/types.proto

package addon_service

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	golang_proto "github.com/golang/protobuf/proto"
	schema "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
	_ "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/pbac"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// SelfActivationType
//
// x-displayName: "Self Activation"
// Addon service can be subscribed and activated by user directly without any manual intervention.
type SelfActivationType struct {
	// default_tile_name
	//
	// x-displayName: "Default Navigation Tile"
	// x-required
	// Default landing page for the addon service after successful subscription.
	// value should match name of the navigation tile config object.
	DefaultTileName string `protobuf:"bytes,1,opt,name=default_tile_name,json=defaultTileName,proto3" json:"default_tile_name,omitempty"`
}

func (m *SelfActivationType) Reset()      { *m = SelfActivationType{} }
func (*SelfActivationType) ProtoMessage() {}
func (*SelfActivationType) Descriptor() ([]byte, []int) {
	return fileDescriptor_000eebb1e98e78db, []int{0}
}
func (m *SelfActivationType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SelfActivationType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *SelfActivationType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SelfActivationType.Merge(m, src)
}
func (m *SelfActivationType) XXX_Size() int {
	return m.Size()
}
func (m *SelfActivationType) XXX_DiscardUnknown() {
	xxx_messageInfo_SelfActivationType.DiscardUnknown(m)
}

var xxx_messageInfo_SelfActivationType proto.InternalMessageInfo

func (m *SelfActivationType) GetDefaultTileName() string {
	if m != nil {
		return m.DefaultTileName
	}
	return ""
}

// GlobalSpecType
//
// x-displayName: "Specification"
// Shape of addon_service in the storage backend.
type GlobalSpecType struct {
	// display_name
	//
	// x-displayName: "Display Name"
	// x-required
	// User friendly name for display purpose.
	DisplayName string `protobuf:"bytes,1,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	// activation_choice
	//
	// x-displayName: "Service Activation Configuration"
	// Addon Service Activation Type Configuration
	// Choose if service is self serviced, partially managed or fully managed.
	//
	// Types that are valid to be assigned to ActivationTypeChoice:
	//	*GlobalSpecType_SelfActivation
	//	*GlobalSpecType_PartiallyManagedActivation
	//	*GlobalSpecType_ManagedActivation
	ActivationTypeChoice isGlobalSpecType_ActivationTypeChoice `protobuf_oneof:"activation_type_choice"`
	// api_groups
	//
	// x-displayName: "API Groups"
	// List of references to all api_group objects that belong to this addon service.
	ApiGroups []*schema.ObjectRefType `protobuf:"bytes,6,rep,name=api_groups,json=apiGroups,proto3" json:"api_groups,omitempty"`
	// policy
	//
	// x-displayName: "Policy"
	// Reference to policy for this addon service which will define allow rules for associated API groups.
	// After successfull subscription, this policy will be added as reference to a subscribed tenant's plan policy set.
	// For every addon service, there will be exactly one service policy associated.
	Policy []*schema.ObjectRefType `protobuf:"bytes,7,rep,name=policy,proto3" json:"policy,omitempty"`
	// dependent_services
	//
	// x-displayName: "Dependent Services"
	// List of addon services this service dependent on.
	// To subscribe/enable this service, all of dependent service should be enabled.
	DependentServices []*schema.ObjectRefType `protobuf:"bytes,8,rep,name=dependent_services,json=dependentServices,proto3" json:"dependent_services,omitempty"`
	// included_services
	//
	// x-displayName: "Included Services"
	// List of additional addon services automatically subscribed part of this subscription.
	IncludedServices []*schema.ObjectRefType `protobuf:"bytes,9,rep,name=included_services,json=includedServices,proto3" json:"included_services,omitempty"`
}

func (m *GlobalSpecType) Reset()      { *m = GlobalSpecType{} }
func (*GlobalSpecType) ProtoMessage() {}
func (*GlobalSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_000eebb1e98e78db, []int{1}
}
func (m *GlobalSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GlobalSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *GlobalSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GlobalSpecType.Merge(m, src)
}
func (m *GlobalSpecType) XXX_Size() int {
	return m.Size()
}
func (m *GlobalSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_GlobalSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_GlobalSpecType proto.InternalMessageInfo

type isGlobalSpecType_ActivationTypeChoice interface {
	isGlobalSpecType_ActivationTypeChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type GlobalSpecType_SelfActivation struct {
	SelfActivation *SelfActivationType `protobuf:"bytes,3,opt,name=self_activation,json=selfActivation,proto3,oneof" json:"self_activation,omitempty"`
}
type GlobalSpecType_PartiallyManagedActivation struct {
	PartiallyManagedActivation *schema.Empty `protobuf:"bytes,4,opt,name=partially_managed_activation,json=partiallyManagedActivation,proto3,oneof" json:"partially_managed_activation,omitempty"`
}
type GlobalSpecType_ManagedActivation struct {
	ManagedActivation *schema.Empty `protobuf:"bytes,5,opt,name=managed_activation,json=managedActivation,proto3,oneof" json:"managed_activation,omitempty"`
}

func (*GlobalSpecType_SelfActivation) isGlobalSpecType_ActivationTypeChoice()             {}
func (*GlobalSpecType_PartiallyManagedActivation) isGlobalSpecType_ActivationTypeChoice() {}
func (*GlobalSpecType_ManagedActivation) isGlobalSpecType_ActivationTypeChoice()          {}

func (m *GlobalSpecType) GetActivationTypeChoice() isGlobalSpecType_ActivationTypeChoice {
	if m != nil {
		return m.ActivationTypeChoice
	}
	return nil
}

func (m *GlobalSpecType) GetDisplayName() string {
	if m != nil {
		return m.DisplayName
	}
	return ""
}

func (m *GlobalSpecType) GetSelfActivation() *SelfActivationType {
	if x, ok := m.GetActivationTypeChoice().(*GlobalSpecType_SelfActivation); ok {
		return x.SelfActivation
	}
	return nil
}

func (m *GlobalSpecType) GetPartiallyManagedActivation() *schema.Empty {
	if x, ok := m.GetActivationTypeChoice().(*GlobalSpecType_PartiallyManagedActivation); ok {
		return x.PartiallyManagedActivation
	}
	return nil
}

func (m *GlobalSpecType) GetManagedActivation() *schema.Empty {
	if x, ok := m.GetActivationTypeChoice().(*GlobalSpecType_ManagedActivation); ok {
		return x.ManagedActivation
	}
	return nil
}

func (m *GlobalSpecType) GetApiGroups() []*schema.ObjectRefType {
	if m != nil {
		return m.ApiGroups
	}
	return nil
}

func (m *GlobalSpecType) GetPolicy() []*schema.ObjectRefType {
	if m != nil {
		return m.Policy
	}
	return nil
}

func (m *GlobalSpecType) GetDependentServices() []*schema.ObjectRefType {
	if m != nil {
		return m.DependentServices
	}
	return nil
}

func (m *GlobalSpecType) GetIncludedServices() []*schema.ObjectRefType {
	if m != nil {
		return m.IncludedServices
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*GlobalSpecType) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*GlobalSpecType_SelfActivation)(nil),
		(*GlobalSpecType_PartiallyManagedActivation)(nil),
		(*GlobalSpecType_ManagedActivation)(nil),
	}
}

// Get addon service
//
// x-displayName: "Get Addon Service"
// Get addon_service reads a given object from storage backend for metadata.namespace.
type GetSpecType struct {
	DisplayName string `protobuf:"bytes,1,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	// Types that are valid to be assigned to ActivationTypeChoice:
	//	*GetSpecType_SelfActivation
	//	*GetSpecType_PartiallyManagedActivation
	//	*GetSpecType_ManagedActivation
	ActivationTypeChoice isGetSpecType_ActivationTypeChoice `protobuf_oneof:"activation_type_choice"`
	ApiGroups            []*schema.ObjectRefType            `protobuf:"bytes,6,rep,name=api_groups,json=apiGroups,proto3" json:"api_groups,omitempty"`
	// repeated ves.io.schema.ObjectRefType policy = 7 [(ves.io.schema.ref_to) = "service_policy"];
	DependentServices []*schema.ObjectRefType `protobuf:"bytes,8,rep,name=dependent_services,json=dependentServices,proto3" json:"dependent_services,omitempty"`
	IncludedServices  []*schema.ObjectRefType `protobuf:"bytes,9,rep,name=included_services,json=includedServices,proto3" json:"included_services,omitempty"`
}

func (m *GetSpecType) Reset()      { *m = GetSpecType{} }
func (*GetSpecType) ProtoMessage() {}
func (*GetSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_000eebb1e98e78db, []int{2}
}
func (m *GetSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *GetSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetSpecType.Merge(m, src)
}
func (m *GetSpecType) XXX_Size() int {
	return m.Size()
}
func (m *GetSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_GetSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_GetSpecType proto.InternalMessageInfo

type isGetSpecType_ActivationTypeChoice interface {
	isGetSpecType_ActivationTypeChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type GetSpecType_SelfActivation struct {
	SelfActivation *SelfActivationType `protobuf:"bytes,3,opt,name=self_activation,json=selfActivation,proto3,oneof" json:"self_activation,omitempty"`
}
type GetSpecType_PartiallyManagedActivation struct {
	PartiallyManagedActivation *schema.Empty `protobuf:"bytes,4,opt,name=partially_managed_activation,json=partiallyManagedActivation,proto3,oneof" json:"partially_managed_activation,omitempty"`
}
type GetSpecType_ManagedActivation struct {
	ManagedActivation *schema.Empty `protobuf:"bytes,5,opt,name=managed_activation,json=managedActivation,proto3,oneof" json:"managed_activation,omitempty"`
}

func (*GetSpecType_SelfActivation) isGetSpecType_ActivationTypeChoice()             {}
func (*GetSpecType_PartiallyManagedActivation) isGetSpecType_ActivationTypeChoice() {}
func (*GetSpecType_ManagedActivation) isGetSpecType_ActivationTypeChoice()          {}

func (m *GetSpecType) GetActivationTypeChoice() isGetSpecType_ActivationTypeChoice {
	if m != nil {
		return m.ActivationTypeChoice
	}
	return nil
}

func (m *GetSpecType) GetDisplayName() string {
	if m != nil {
		return m.DisplayName
	}
	return ""
}

func (m *GetSpecType) GetSelfActivation() *SelfActivationType {
	if x, ok := m.GetActivationTypeChoice().(*GetSpecType_SelfActivation); ok {
		return x.SelfActivation
	}
	return nil
}

func (m *GetSpecType) GetPartiallyManagedActivation() *schema.Empty {
	if x, ok := m.GetActivationTypeChoice().(*GetSpecType_PartiallyManagedActivation); ok {
		return x.PartiallyManagedActivation
	}
	return nil
}

func (m *GetSpecType) GetManagedActivation() *schema.Empty {
	if x, ok := m.GetActivationTypeChoice().(*GetSpecType_ManagedActivation); ok {
		return x.ManagedActivation
	}
	return nil
}

func (m *GetSpecType) GetApiGroups() []*schema.ObjectRefType {
	if m != nil {
		return m.ApiGroups
	}
	return nil
}

func (m *GetSpecType) GetDependentServices() []*schema.ObjectRefType {
	if m != nil {
		return m.DependentServices
	}
	return nil
}

func (m *GetSpecType) GetIncludedServices() []*schema.ObjectRefType {
	if m != nil {
		return m.IncludedServices
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*GetSpecType) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*GetSpecType_SelfActivation)(nil),
		(*GetSpecType_PartiallyManagedActivation)(nil),
		(*GetSpecType_ManagedActivation)(nil),
	}
}

func init() {
	proto.RegisterType((*SelfActivationType)(nil), "ves.io.schema.pbac.addon_service.SelfActivationType")
	golang_proto.RegisterType((*SelfActivationType)(nil), "ves.io.schema.pbac.addon_service.SelfActivationType")
	proto.RegisterType((*GlobalSpecType)(nil), "ves.io.schema.pbac.addon_service.GlobalSpecType")
	golang_proto.RegisterType((*GlobalSpecType)(nil), "ves.io.schema.pbac.addon_service.GlobalSpecType")
	proto.RegisterType((*GetSpecType)(nil), "ves.io.schema.pbac.addon_service.GetSpecType")
	golang_proto.RegisterType((*GetSpecType)(nil), "ves.io.schema.pbac.addon_service.GetSpecType")
}

func init() {
	proto.RegisterFile("ves.io/schema/pbac/addon_service/types.proto", fileDescriptor_000eebb1e98e78db)
}
func init() {
	golang_proto.RegisterFile("ves.io/schema/pbac/addon_service/types.proto", fileDescriptor_000eebb1e98e78db)
}

var fileDescriptor_000eebb1e98e78db = []byte{
	// 728 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x95, 0x4d, 0x6f, 0xd3, 0x48,
	0x18, 0xc7, 0x3d, 0x49, 0xd3, 0x6d, 0x26, 0x7d, 0x49, 0xac, 0x55, 0x95, 0x4d, 0xab, 0x51, 0x5a,
	0xed, 0xa1, 0xd2, 0xba, 0xb6, 0xb6, 0x2f, 0xab, 0xdd, 0x3d, 0x54, 0xda, 0x48, 0x55, 0xbb, 0x20,
	0x40, 0x24, 0x15, 0x42, 0x20, 0x64, 0x4d, 0xec, 0x89, 0x3b, 0x60, 0x67, 0x06, 0x7b, 0x12, 0xc8,
	0xa1, 0x12, 0xe2, 0x13, 0xa0, 0x8a, 0x0f, 0x81, 0xfa, 0x11, 0xe8, 0xa5, 0x47, 0xc4, 0x29, 0xc7,
	0x1e, 0xa9, 0x73, 0x81, 0x5b, 0xc5, 0x91, 0x0b, 0x28, 0x8e, 0x93, 0xc6, 0x79, 0x81, 0x52, 0x71,
	0xe4, 0x36, 0xf6, 0xff, 0x79, 0x7e, 0xff, 0xf1, 0x3c, 0xff, 0x64, 0xa0, 0x52, 0x27, 0x9e, 0x4a,
	0x99, 0xe6, 0x19, 0xfb, 0xc4, 0xc1, 0x1a, 0x2f, 0x63, 0x43, 0xc3, 0xa6, 0xc9, 0xaa, 0xba, 0x47,
	0xdc, 0x3a, 0x35, 0x88, 0x26, 0x1a, 0x9c, 0x78, 0x2a, 0x77, 0x99, 0x60, 0x72, 0xbe, 0x53, 0xad,
	0x76, 0xaa, 0xd5, 0x76, 0xb5, 0x1a, 0xa9, 0xce, 0xad, 0x5a, 0x54, 0xec, 0xd7, 0xca, 0xaa, 0xc1,
	0x1c, 0xcd, 0x62, 0x16, 0xd3, 0x82, 0xc6, 0x72, 0xad, 0x12, 0x3c, 0x05, 0x0f, 0xc1, 0xaa, 0x03,
	0xcc, 0x2d, 0x44, 0xed, 0x19, 0x17, 0x94, 0x55, 0x43, 0xb7, 0x1c, 0x1a, 0xb1, 0xb7, 0xbe, 0xdd,
	0xe4, 0x7e, 0x8b, 0xea, 0xfd, 0xd2, 0x62, 0x54, 0xaa, 0x63, 0x9b, 0x9a, 0x58, 0x90, 0x50, 0xcd,
	0x0f, 0xa8, 0x94, 0x3c, 0xd1, 0x23, 0xd6, 0xcb, 0xd7, 0xa1, 0x5c, 0x22, 0x76, 0xe5, 0x3f, 0x43,
	0xd0, 0x3a, 0x6e, 0x0b, 0x7b, 0x0d, 0x4e, 0xe4, 0x4d, 0x98, 0x31, 0x49, 0x05, 0xd7, 0x6c, 0xa1,
	0x0b, 0x6a, 0x13, 0xbd, 0x8a, 0x1d, 0x92, 0x05, 0x79, 0xb0, 0x92, 0x2c, 0x24, 0x5f, 0x7f, 0x38,
	0x89, 0x4f, 0xb8, 0xb1, 0x6c, 0xbe, 0x38, 0x17, 0xd6, 0xec, 0x51, 0x9b, 0xdc, 0xc4, 0x0e, 0x59,
	0xfe, 0x9c, 0x80, 0xb3, 0x3b, 0x36, 0x2b, 0x63, 0xbb, 0xc4, 0x89, 0x11, 0x90, 0x14, 0x38, 0x6d,
	0x52, 0x8f, 0xdb, 0xb8, 0x31, 0x06, 0x92, 0x0a, 0xe5, 0x36, 0x40, 0xd6, 0xe1, 0x9c, 0x47, 0xec,
	0x8a, 0x8e, 0x7b, 0xdb, 0xc9, 0xc6, 0xf3, 0x60, 0x25, 0xb5, 0xb6, 0xa1, 0x7e, 0x6b, 0x20, 0xea,
	0xf0, 0x67, 0xec, 0x4a, 0xc5, 0x59, 0x2f, 0xf2, 0x56, 0xbe, 0x0b, 0x17, 0x39, 0x76, 0x05, 0xc5,
	0xb6, 0xdd, 0xd0, 0x1d, 0x5c, 0xc5, 0x16, 0x31, 0xfb, 0xdd, 0x26, 0x02, 0xb7, 0x5f, 0x07, 0xdc,
	0xb6, 0x1d, 0x2e, 0x1a, 0xbb, 0x52, 0x31, 0xd7, 0xeb, 0xbd, 0xd1, 0x69, 0xed, 0x23, 0x6f, 0x43,
	0x79, 0x04, 0x2f, 0xf1, 0x55, 0x5e, 0xc6, 0x19, 0xc2, 0x94, 0x20, 0xc4, 0x9c, 0xea, 0x96, 0xcb,
	0x6a, 0xdc, 0xcb, 0x4e, 0xe6, 0xe3, 0x2b, 0xa9, 0xb5, 0xc5, 0x81, 0xf6, 0x5b, 0xe5, 0x87, 0xc4,
	0x10, 0x45, 0x52, 0x69, 0x7f, 0x64, 0x61, 0xfe, 0xe8, 0x20, 0xd9, 0x6b, 0x69, 0x9f, 0x6b, 0xe2,
	0x10, 0xc4, 0xd2, 0xf9, 0x62, 0xfb, 0xe5, 0x4e, 0x80, 0x91, 0x6f, 0xc3, 0x49, 0xce, 0x6c, 0x6a,
	0x34, 0xb2, 0xbf, 0x5c, 0x02, 0xb8, 0x70, 0x74, 0x30, 0x1b, 0x1e, 0xaa, 0xde, 0x69, 0xeb, 0x51,
	0x41, 0x31, 0x04, 0xc9, 0x8f, 0xa1, 0x6c, 0x12, 0x4e, 0xaa, 0x26, 0xa9, 0x8a, 0xee, 0x08, 0xbc,
	0xec, 0xd4, 0x25, 0xf0, 0xbf, 0x1f, 0x1d, 0xcc, 0x44, 0x26, 0x77, 0xb1, 0xe7, 0xee, 0x2a, 0x0b,
	0x8a, 0x99, 0x1e, 0xbd, 0x14, 0xc2, 0x65, 0x06, 0x33, 0xb4, 0x6a, 0xd8, 0x35, 0x93, 0x98, 0x17,
	0x8e, 0xc9, 0x1f, 0xe6, 0x98, 0xee, 0xc2, 0xbb, 0x86, 0x85, 0x3f, 0xe0, 0xfc, 0xc5, 0x28, 0xf5,
	0xf6, 0xaf, 0x4e, 0x37, 0xf6, 0x19, 0x35, 0x88, 0x9c, 0x39, 0x39, 0x06, 0xf1, 0xe6, 0x31, 0x88,
	0xf9, 0xc7, 0x20, 0xb1, 0xae, 0x6c, 0x28, 0x9b, 0xd7, 0x26, 0xa6, 0x62, 0xe9, 0xf8, 0xf2, 0x61,
	0x02, 0xa6, 0x76, 0x88, 0xe8, 0xc5, 0x7f, 0x69, 0x54, 0xfc, 0x7f, 0x66, 0x3e, 0x8a, 0xf9, 0xff,
	0xbb, 0x33, 0x3f, 0xdd, 0x9f, 0xf9, 0xfe, 0xa4, 0x3f, 0xb8, 0x72, 0x2c, 0xd3, 0x83, 0x21, 0x19,
	0x15, 0xc1, 0xfb, 0x57, 0x8d, 0xe0, 0x30, 0x7d, 0x28, 0x6e, 0xff, 0x2e, 0xbd, 0xdd, 0x1a, 0xf8,
	0xf7, 0xfc, 0xb8, 0x35, 0xf3, 0xa7, 0x12, 0xc4, 0x4b, 0xf9, 0x4b, 0xf9, 0x5b, 0xf9, 0xa7, 0xb0,
	0x31, 0x36, 0x91, 0xb9, 0xe7, 0x9f, 0xc0, 0x18, 0xad, 0xf0, 0x12, 0x34, 0xcf, 0x90, 0x74, 0x7a,
	0x86, 0xa4, 0xf3, 0x33, 0x04, 0x9e, 0xf9, 0x08, 0xbc, 0xf2, 0x11, 0x78, 0xe3, 0x23, 0xd0, 0xf4,
	0x11, 0x38, 0xf5, 0x11, 0x78, 0xe7, 0x23, 0xf0, 0xde, 0x47, 0xd2, 0xb9, 0x8f, 0xc0, 0x8b, 0x16,
	0x92, 0x4e, 0x5a, 0x08, 0x34, 0x5b, 0x48, 0x3a, 0x6d, 0x21, 0xe9, 0xde, 0x1d, 0x8b, 0xf1, 0x47,
	0x96, 0x5a, 0x67, 0xb6, 0x20, 0xae, 0x8b, 0xd5, 0x9a, 0xa7, 0x05, 0x8b, 0x0a, 0x73, 0x9d, 0x55,
	0xee, 0xb2, 0x3a, 0x35, 0x89, 0xbb, 0xda, 0x95, 0x35, 0x5e, 0xb6, 0x98, 0x46, 0x9e, 0x8a, 0xf0,
	0xce, 0x19, 0x7b, 0xdf, 0x96, 0x27, 0x83, 0x1b, 0x68, 0xfd, 0x4b, 0x00, 0x00, 0x00, 0xff, 0xff,
	0x3a, 0xc5, 0x60, 0x20, 0x9a, 0x07, 0x00, 0x00,
}

func (this *SelfActivationType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SelfActivationType)
	if !ok {
		that2, ok := that.(SelfActivationType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.DefaultTileName != that1.DefaultTileName {
		return false
	}
	return true
}
func (this *GlobalSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType)
	if !ok {
		that2, ok := that.(GlobalSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.DisplayName != that1.DisplayName {
		return false
	}
	if that1.ActivationTypeChoice == nil {
		if this.ActivationTypeChoice != nil {
			return false
		}
	} else if this.ActivationTypeChoice == nil {
		return false
	} else if !this.ActivationTypeChoice.Equal(that1.ActivationTypeChoice) {
		return false
	}
	if len(this.ApiGroups) != len(that1.ApiGroups) {
		return false
	}
	for i := range this.ApiGroups {
		if !this.ApiGroups[i].Equal(that1.ApiGroups[i]) {
			return false
		}
	}
	if len(this.Policy) != len(that1.Policy) {
		return false
	}
	for i := range this.Policy {
		if !this.Policy[i].Equal(that1.Policy[i]) {
			return false
		}
	}
	if len(this.DependentServices) != len(that1.DependentServices) {
		return false
	}
	for i := range this.DependentServices {
		if !this.DependentServices[i].Equal(that1.DependentServices[i]) {
			return false
		}
	}
	if len(this.IncludedServices) != len(that1.IncludedServices) {
		return false
	}
	for i := range this.IncludedServices {
		if !this.IncludedServices[i].Equal(that1.IncludedServices[i]) {
			return false
		}
	}
	return true
}
func (this *GlobalSpecType_SelfActivation) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_SelfActivation)
	if !ok {
		that2, ok := that.(GlobalSpecType_SelfActivation)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.SelfActivation.Equal(that1.SelfActivation) {
		return false
	}
	return true
}
func (this *GlobalSpecType_PartiallyManagedActivation) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_PartiallyManagedActivation)
	if !ok {
		that2, ok := that.(GlobalSpecType_PartiallyManagedActivation)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.PartiallyManagedActivation.Equal(that1.PartiallyManagedActivation) {
		return false
	}
	return true
}
func (this *GlobalSpecType_ManagedActivation) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_ManagedActivation)
	if !ok {
		that2, ok := that.(GlobalSpecType_ManagedActivation)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ManagedActivation.Equal(that1.ManagedActivation) {
		return false
	}
	return true
}
func (this *GetSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType)
	if !ok {
		that2, ok := that.(GetSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.DisplayName != that1.DisplayName {
		return false
	}
	if that1.ActivationTypeChoice == nil {
		if this.ActivationTypeChoice != nil {
			return false
		}
	} else if this.ActivationTypeChoice == nil {
		return false
	} else if !this.ActivationTypeChoice.Equal(that1.ActivationTypeChoice) {
		return false
	}
	if len(this.ApiGroups) != len(that1.ApiGroups) {
		return false
	}
	for i := range this.ApiGroups {
		if !this.ApiGroups[i].Equal(that1.ApiGroups[i]) {
			return false
		}
	}
	if len(this.DependentServices) != len(that1.DependentServices) {
		return false
	}
	for i := range this.DependentServices {
		if !this.DependentServices[i].Equal(that1.DependentServices[i]) {
			return false
		}
	}
	if len(this.IncludedServices) != len(that1.IncludedServices) {
		return false
	}
	for i := range this.IncludedServices {
		if !this.IncludedServices[i].Equal(that1.IncludedServices[i]) {
			return false
		}
	}
	return true
}
func (this *GetSpecType_SelfActivation) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_SelfActivation)
	if !ok {
		that2, ok := that.(GetSpecType_SelfActivation)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.SelfActivation.Equal(that1.SelfActivation) {
		return false
	}
	return true
}
func (this *GetSpecType_PartiallyManagedActivation) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_PartiallyManagedActivation)
	if !ok {
		that2, ok := that.(GetSpecType_PartiallyManagedActivation)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.PartiallyManagedActivation.Equal(that1.PartiallyManagedActivation) {
		return false
	}
	return true
}
func (this *GetSpecType_ManagedActivation) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_ManagedActivation)
	if !ok {
		that2, ok := that.(GetSpecType_ManagedActivation)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ManagedActivation.Equal(that1.ManagedActivation) {
		return false
	}
	return true
}
func (this *SelfActivationType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&addon_service.SelfActivationType{")
	s = append(s, "DefaultTileName: "+fmt.Sprintf("%#v", this.DefaultTileName)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GlobalSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 12)
	s = append(s, "&addon_service.GlobalSpecType{")
	s = append(s, "DisplayName: "+fmt.Sprintf("%#v", this.DisplayName)+",\n")
	if this.ActivationTypeChoice != nil {
		s = append(s, "ActivationTypeChoice: "+fmt.Sprintf("%#v", this.ActivationTypeChoice)+",\n")
	}
	if this.ApiGroups != nil {
		s = append(s, "ApiGroups: "+fmt.Sprintf("%#v", this.ApiGroups)+",\n")
	}
	if this.Policy != nil {
		s = append(s, "Policy: "+fmt.Sprintf("%#v", this.Policy)+",\n")
	}
	if this.DependentServices != nil {
		s = append(s, "DependentServices: "+fmt.Sprintf("%#v", this.DependentServices)+",\n")
	}
	if this.IncludedServices != nil {
		s = append(s, "IncludedServices: "+fmt.Sprintf("%#v", this.IncludedServices)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GlobalSpecType_SelfActivation) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&addon_service.GlobalSpecType_SelfActivation{` +
		`SelfActivation:` + fmt.Sprintf("%#v", this.SelfActivation) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_PartiallyManagedActivation) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&addon_service.GlobalSpecType_PartiallyManagedActivation{` +
		`PartiallyManagedActivation:` + fmt.Sprintf("%#v", this.PartiallyManagedActivation) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_ManagedActivation) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&addon_service.GlobalSpecType_ManagedActivation{` +
		`ManagedActivation:` + fmt.Sprintf("%#v", this.ManagedActivation) + `}`}, ", ")
	return s
}
func (this *GetSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 11)
	s = append(s, "&addon_service.GetSpecType{")
	s = append(s, "DisplayName: "+fmt.Sprintf("%#v", this.DisplayName)+",\n")
	if this.ActivationTypeChoice != nil {
		s = append(s, "ActivationTypeChoice: "+fmt.Sprintf("%#v", this.ActivationTypeChoice)+",\n")
	}
	if this.ApiGroups != nil {
		s = append(s, "ApiGroups: "+fmt.Sprintf("%#v", this.ApiGroups)+",\n")
	}
	if this.DependentServices != nil {
		s = append(s, "DependentServices: "+fmt.Sprintf("%#v", this.DependentServices)+",\n")
	}
	if this.IncludedServices != nil {
		s = append(s, "IncludedServices: "+fmt.Sprintf("%#v", this.IncludedServices)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetSpecType_SelfActivation) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&addon_service.GetSpecType_SelfActivation{` +
		`SelfActivation:` + fmt.Sprintf("%#v", this.SelfActivation) + `}`}, ", ")
	return s
}
func (this *GetSpecType_PartiallyManagedActivation) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&addon_service.GetSpecType_PartiallyManagedActivation{` +
		`PartiallyManagedActivation:` + fmt.Sprintf("%#v", this.PartiallyManagedActivation) + `}`}, ", ")
	return s
}
func (this *GetSpecType_ManagedActivation) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&addon_service.GetSpecType_ManagedActivation{` +
		`ManagedActivation:` + fmt.Sprintf("%#v", this.ManagedActivation) + `}`}, ", ")
	return s
}
func valueToGoStringTypes(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *SelfActivationType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SelfActivationType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SelfActivationType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.DefaultTileName) > 0 {
		i -= len(m.DefaultTileName)
		copy(dAtA[i:], m.DefaultTileName)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.DefaultTileName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GlobalSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GlobalSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.IncludedServices) > 0 {
		for iNdEx := len(m.IncludedServices) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.IncludedServices[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x4a
		}
	}
	if len(m.DependentServices) > 0 {
		for iNdEx := len(m.DependentServices) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.DependentServices[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x42
		}
	}
	if len(m.Policy) > 0 {
		for iNdEx := len(m.Policy) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Policy[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3a
		}
	}
	if len(m.ApiGroups) > 0 {
		for iNdEx := len(m.ApiGroups) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ApiGroups[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if m.ActivationTypeChoice != nil {
		{
			size := m.ActivationTypeChoice.Size()
			i -= size
			if _, err := m.ActivationTypeChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if len(m.DisplayName) > 0 {
		i -= len(m.DisplayName)
		copy(dAtA[i:], m.DisplayName)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.DisplayName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GlobalSpecType_SelfActivation) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_SelfActivation) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.SelfActivation != nil {
		{
			size, err := m.SelfActivation.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_PartiallyManagedActivation) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_PartiallyManagedActivation) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.PartiallyManagedActivation != nil {
		{
			size, err := m.PartiallyManagedActivation.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_ManagedActivation) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_ManagedActivation) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ManagedActivation != nil {
		{
			size, err := m.ManagedActivation.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.IncludedServices) > 0 {
		for iNdEx := len(m.IncludedServices) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.IncludedServices[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x4a
		}
	}
	if len(m.DependentServices) > 0 {
		for iNdEx := len(m.DependentServices) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.DependentServices[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x42
		}
	}
	if len(m.ApiGroups) > 0 {
		for iNdEx := len(m.ApiGroups) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ApiGroups[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if m.ActivationTypeChoice != nil {
		{
			size := m.ActivationTypeChoice.Size()
			i -= size
			if _, err := m.ActivationTypeChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if len(m.DisplayName) > 0 {
		i -= len(m.DisplayName)
		copy(dAtA[i:], m.DisplayName)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.DisplayName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetSpecType_SelfActivation) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_SelfActivation) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.SelfActivation != nil {
		{
			size, err := m.SelfActivation.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_PartiallyManagedActivation) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_PartiallyManagedActivation) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.PartiallyManagedActivation != nil {
		{
			size, err := m.PartiallyManagedActivation.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_ManagedActivation) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_ManagedActivation) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ManagedActivation != nil {
		{
			size, err := m.ManagedActivation.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func encodeVarintTypes(dAtA []byte, offset int, v uint64) int {
	offset -= sovTypes(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *SelfActivationType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DefaultTileName)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *GlobalSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DisplayName)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.ActivationTypeChoice != nil {
		n += m.ActivationTypeChoice.Size()
	}
	if len(m.ApiGroups) > 0 {
		for _, e := range m.ApiGroups {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if len(m.Policy) > 0 {
		for _, e := range m.Policy {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if len(m.DependentServices) > 0 {
		for _, e := range m.DependentServices {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if len(m.IncludedServices) > 0 {
		for _, e := range m.IncludedServices {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *GlobalSpecType_SelfActivation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SelfActivation != nil {
		l = m.SelfActivation.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_PartiallyManagedActivation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PartiallyManagedActivation != nil {
		l = m.PartiallyManagedActivation.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_ManagedActivation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ManagedActivation != nil {
		l = m.ManagedActivation.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DisplayName)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.ActivationTypeChoice != nil {
		n += m.ActivationTypeChoice.Size()
	}
	if len(m.ApiGroups) > 0 {
		for _, e := range m.ApiGroups {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if len(m.DependentServices) > 0 {
		for _, e := range m.DependentServices {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if len(m.IncludedServices) > 0 {
		for _, e := range m.IncludedServices {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *GetSpecType_SelfActivation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SelfActivation != nil {
		l = m.SelfActivation.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_PartiallyManagedActivation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PartiallyManagedActivation != nil {
		l = m.PartiallyManagedActivation.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_ManagedActivation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ManagedActivation != nil {
		l = m.ManagedActivation.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func sovTypes(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTypes(x uint64) (n int) {
	return sovTypes(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *SelfActivationType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SelfActivationType{`,
		`DefaultTileName:` + fmt.Sprintf("%v", this.DefaultTileName) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForApiGroups := "[]*ObjectRefType{"
	for _, f := range this.ApiGroups {
		repeatedStringForApiGroups += strings.Replace(fmt.Sprintf("%v", f), "ObjectRefType", "schema.ObjectRefType", 1) + ","
	}
	repeatedStringForApiGroups += "}"
	repeatedStringForPolicy := "[]*ObjectRefType{"
	for _, f := range this.Policy {
		repeatedStringForPolicy += strings.Replace(fmt.Sprintf("%v", f), "ObjectRefType", "schema.ObjectRefType", 1) + ","
	}
	repeatedStringForPolicy += "}"
	repeatedStringForDependentServices := "[]*ObjectRefType{"
	for _, f := range this.DependentServices {
		repeatedStringForDependentServices += strings.Replace(fmt.Sprintf("%v", f), "ObjectRefType", "schema.ObjectRefType", 1) + ","
	}
	repeatedStringForDependentServices += "}"
	repeatedStringForIncludedServices := "[]*ObjectRefType{"
	for _, f := range this.IncludedServices {
		repeatedStringForIncludedServices += strings.Replace(fmt.Sprintf("%v", f), "ObjectRefType", "schema.ObjectRefType", 1) + ","
	}
	repeatedStringForIncludedServices += "}"
	s := strings.Join([]string{`&GlobalSpecType{`,
		`DisplayName:` + fmt.Sprintf("%v", this.DisplayName) + `,`,
		`ActivationTypeChoice:` + fmt.Sprintf("%v", this.ActivationTypeChoice) + `,`,
		`ApiGroups:` + repeatedStringForApiGroups + `,`,
		`Policy:` + repeatedStringForPolicy + `,`,
		`DependentServices:` + repeatedStringForDependentServices + `,`,
		`IncludedServices:` + repeatedStringForIncludedServices + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_SelfActivation) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_SelfActivation{`,
		`SelfActivation:` + strings.Replace(fmt.Sprintf("%v", this.SelfActivation), "SelfActivationType", "SelfActivationType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_PartiallyManagedActivation) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_PartiallyManagedActivation{`,
		`PartiallyManagedActivation:` + strings.Replace(fmt.Sprintf("%v", this.PartiallyManagedActivation), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_ManagedActivation) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_ManagedActivation{`,
		`ManagedActivation:` + strings.Replace(fmt.Sprintf("%v", this.ManagedActivation), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForApiGroups := "[]*ObjectRefType{"
	for _, f := range this.ApiGroups {
		repeatedStringForApiGroups += strings.Replace(fmt.Sprintf("%v", f), "ObjectRefType", "schema.ObjectRefType", 1) + ","
	}
	repeatedStringForApiGroups += "}"
	repeatedStringForDependentServices := "[]*ObjectRefType{"
	for _, f := range this.DependentServices {
		repeatedStringForDependentServices += strings.Replace(fmt.Sprintf("%v", f), "ObjectRefType", "schema.ObjectRefType", 1) + ","
	}
	repeatedStringForDependentServices += "}"
	repeatedStringForIncludedServices := "[]*ObjectRefType{"
	for _, f := range this.IncludedServices {
		repeatedStringForIncludedServices += strings.Replace(fmt.Sprintf("%v", f), "ObjectRefType", "schema.ObjectRefType", 1) + ","
	}
	repeatedStringForIncludedServices += "}"
	s := strings.Join([]string{`&GetSpecType{`,
		`DisplayName:` + fmt.Sprintf("%v", this.DisplayName) + `,`,
		`ActivationTypeChoice:` + fmt.Sprintf("%v", this.ActivationTypeChoice) + `,`,
		`ApiGroups:` + repeatedStringForApiGroups + `,`,
		`DependentServices:` + repeatedStringForDependentServices + `,`,
		`IncludedServices:` + repeatedStringForIncludedServices + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_SelfActivation) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_SelfActivation{`,
		`SelfActivation:` + strings.Replace(fmt.Sprintf("%v", this.SelfActivation), "SelfActivationType", "SelfActivationType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_PartiallyManagedActivation) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_PartiallyManagedActivation{`,
		`PartiallyManagedActivation:` + strings.Replace(fmt.Sprintf("%v", this.PartiallyManagedActivation), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_ManagedActivation) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_ManagedActivation{`,
		`ManagedActivation:` + strings.Replace(fmt.Sprintf("%v", this.ManagedActivation), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringTypes(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *SelfActivationType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SelfActivationType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SelfActivationType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultTileName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DefaultTileName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GlobalSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GlobalSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GlobalSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisplayName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DisplayName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SelfActivation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &SelfActivationType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ActivationTypeChoice = &GlobalSpecType_SelfActivation{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PartiallyManagedActivation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ActivationTypeChoice = &GlobalSpecType_PartiallyManagedActivation{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ManagedActivation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ActivationTypeChoice = &GlobalSpecType_ManagedActivation{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiGroups", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ApiGroups = append(m.ApiGroups, &schema.ObjectRefType{})
			if err := m.ApiGroups[len(m.ApiGroups)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Policy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Policy = append(m.Policy, &schema.ObjectRefType{})
			if err := m.Policy[len(m.Policy)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DependentServices", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DependentServices = append(m.DependentServices, &schema.ObjectRefType{})
			if err := m.DependentServices[len(m.DependentServices)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IncludedServices", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IncludedServices = append(m.IncludedServices, &schema.ObjectRefType{})
			if err := m.IncludedServices[len(m.IncludedServices)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisplayName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DisplayName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SelfActivation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &SelfActivationType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ActivationTypeChoice = &GetSpecType_SelfActivation{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PartiallyManagedActivation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ActivationTypeChoice = &GetSpecType_PartiallyManagedActivation{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ManagedActivation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ActivationTypeChoice = &GetSpecType_ManagedActivation{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiGroups", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ApiGroups = append(m.ApiGroups, &schema.ObjectRefType{})
			if err := m.ApiGroups[len(m.ApiGroups)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DependentServices", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DependentServices = append(m.DependentServices, &schema.ObjectRefType{})
			if err := m.DependentServices[len(m.DependentServices)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IncludedServices", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IncludedServices = append(m.IncludedServices, &schema.ObjectRefType{})
			if err := m.IncludedServices[len(m.IncludedServices)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTypes(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTypes
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTypes
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTypes
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTypes        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTypes          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTypes = fmt.Errorf("proto: unexpected end of group")
)
