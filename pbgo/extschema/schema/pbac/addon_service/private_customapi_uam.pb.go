// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ves.io/schema/pbac/addon_service/private_customapi_uam.proto

// Addon service custom private APIs
//
// x-displayName: "Addon Service Private APIs"
// Additional private management APIs for addon_service config object.

package addon_service

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/googleapis/google/api"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	golang_proto "github.com/golang/protobuf/proto"
	schema "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
	_ "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/vesenv"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// CanSubscribeReq
//
// x-displayName: "Request for CanSubscribe"
// Request to check if an addon service can be subscribed.
type CanSubscribeReq struct {
	// addon_service
	//
	// x-displayName: "Addon Service"
	// x-example: "addon-service-1"
	// Name of the addon_service
	AddonService string `protobuf:"bytes,1,opt,name=addon_service,json=addonService,proto3" json:"addon_service,omitempty"`
}

func (m *CanSubscribeReq) Reset()      { *m = CanSubscribeReq{} }
func (*CanSubscribeReq) ProtoMessage() {}
func (*CanSubscribeReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_118ce8901bedad9e, []int{0}
}
func (m *CanSubscribeReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CanSubscribeReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CanSubscribeReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CanSubscribeReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CanSubscribeReq.Merge(m, src)
}
func (m *CanSubscribeReq) XXX_Size() int {
	return m.Size()
}
func (m *CanSubscribeReq) XXX_DiscardUnknown() {
	xxx_messageInfo_CanSubscribeReq.DiscardUnknown(m)
}

var xxx_messageInfo_CanSubscribeReq proto.InternalMessageInfo

func (m *CanSubscribeReq) GetAddonService() string {
	if m != nil {
		return m.AddonService
	}
	return ""
}

// CanSubscribeResp
//
// x-displayName: "Response for CanSubscribe"
// Response of addon service subscription check.
type CanSubscribeResp struct {
	// access
	//
	// x-displayName: "Result"
	// x-example: "AS_SUB_ALLOWED"
	// result of addon service subscription check
	Result schema.AddonServiceCheckSubscribe `protobuf:"varint,1,opt,name=result,proto3,enum=ves.io.schema.AddonServiceCheckSubscribe" json:"result,omitempty"`
}

func (m *CanSubscribeResp) Reset()      { *m = CanSubscribeResp{} }
func (*CanSubscribeResp) ProtoMessage() {}
func (*CanSubscribeResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_118ce8901bedad9e, []int{1}
}
func (m *CanSubscribeResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CanSubscribeResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CanSubscribeResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CanSubscribeResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CanSubscribeResp.Merge(m, src)
}
func (m *CanSubscribeResp) XXX_Size() int {
	return m.Size()
}
func (m *CanSubscribeResp) XXX_DiscardUnknown() {
	xxx_messageInfo_CanSubscribeResp.DiscardUnknown(m)
}

var xxx_messageInfo_CanSubscribeResp proto.InternalMessageInfo

func (m *CanSubscribeResp) GetResult() schema.AddonServiceCheckSubscribe {
	if m != nil {
		return m.Result
	}
	return schema.AS_SUB_NONE
}

// SetSubscriptionReq
//
// x-displayName: "Request for SetSubscription"
// Request to check if an addon service can be subscribed.
type SetSubscriptionReq struct {
	// addon_service
	//
	// x-displayName: "Addon Service"
	// x-example: "addon-service-1"
	// Name of the addon_service
	AddonService string `protobuf:"bytes,1,opt,name=addon_service,json=addonService,proto3" json:"addon_service,omitempty"`
	// action
	//
	// x-displayName: "Action"
	// x-example: "AS_SUBSCRIBE"
	// addon service management actions - subscribe or unsubscribe.
	Action schema.AddonServiceSubscribeAction `protobuf:"varint,2,opt,name=action,proto3,enum=ves.io.schema.AddonServiceSubscribeAction" json:"action,omitempty"`
}

func (m *SetSubscriptionReq) Reset()      { *m = SetSubscriptionReq{} }
func (*SetSubscriptionReq) ProtoMessage() {}
func (*SetSubscriptionReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_118ce8901bedad9e, []int{2}
}
func (m *SetSubscriptionReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SetSubscriptionReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SetSubscriptionReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SetSubscriptionReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetSubscriptionReq.Merge(m, src)
}
func (m *SetSubscriptionReq) XXX_Size() int {
	return m.Size()
}
func (m *SetSubscriptionReq) XXX_DiscardUnknown() {
	xxx_messageInfo_SetSubscriptionReq.DiscardUnknown(m)
}

var xxx_messageInfo_SetSubscriptionReq proto.InternalMessageInfo

func (m *SetSubscriptionReq) GetAddonService() string {
	if m != nil {
		return m.AddonService
	}
	return ""
}

func (m *SetSubscriptionReq) GetAction() schema.AddonServiceSubscribeAction {
	if m != nil {
		return m.Action
	}
	return schema.AS_SUBSCRIBE
}

// SetSubscriptionResp
//
// x-displayName: "Response for SetSubscription"
// Response of addon service subscription management action.
type SetSubscriptionResp struct {
	// state
	//
	// x-displayName: "State"
	// x-example: "AS_PENDING"
	// current state of addon service subscription.
	State schema.AddonServiceState `protobuf:"varint,1,opt,name=state,proto3,enum=ves.io.schema.AddonServiceState" json:"state,omitempty"`
}

func (m *SetSubscriptionResp) Reset()      { *m = SetSubscriptionResp{} }
func (*SetSubscriptionResp) ProtoMessage() {}
func (*SetSubscriptionResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_118ce8901bedad9e, []int{3}
}
func (m *SetSubscriptionResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SetSubscriptionResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SetSubscriptionResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SetSubscriptionResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetSubscriptionResp.Merge(m, src)
}
func (m *SetSubscriptionResp) XXX_Size() int {
	return m.Size()
}
func (m *SetSubscriptionResp) XXX_DiscardUnknown() {
	xxx_messageInfo_SetSubscriptionResp.DiscardUnknown(m)
}

var xxx_messageInfo_SetSubscriptionResp proto.InternalMessageInfo

func (m *SetSubscriptionResp) GetState() schema.AddonServiceState {
	if m != nil {
		return m.State
	}
	return schema.AS_NONE
}

func init() {
	proto.RegisterType((*CanSubscribeReq)(nil), "ves.io.schema.pbac.addon_service.CanSubscribeReq")
	golang_proto.RegisterType((*CanSubscribeReq)(nil), "ves.io.schema.pbac.addon_service.CanSubscribeReq")
	proto.RegisterType((*CanSubscribeResp)(nil), "ves.io.schema.pbac.addon_service.CanSubscribeResp")
	golang_proto.RegisterType((*CanSubscribeResp)(nil), "ves.io.schema.pbac.addon_service.CanSubscribeResp")
	proto.RegisterType((*SetSubscriptionReq)(nil), "ves.io.schema.pbac.addon_service.SetSubscriptionReq")
	golang_proto.RegisterType((*SetSubscriptionReq)(nil), "ves.io.schema.pbac.addon_service.SetSubscriptionReq")
	proto.RegisterType((*SetSubscriptionResp)(nil), "ves.io.schema.pbac.addon_service.SetSubscriptionResp")
	golang_proto.RegisterType((*SetSubscriptionResp)(nil), "ves.io.schema.pbac.addon_service.SetSubscriptionResp")
}

func init() {
	proto.RegisterFile("ves.io/schema/pbac/addon_service/private_customapi_uam.proto", fileDescriptor_118ce8901bedad9e)
}
func init() {
	golang_proto.RegisterFile("ves.io/schema/pbac/addon_service/private_customapi_uam.proto", fileDescriptor_118ce8901bedad9e)
}

var fileDescriptor_118ce8901bedad9e = []byte{
	// 598 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x94, 0x41, 0x6b, 0x14, 0x31,
	0x14, 0xc7, 0x37, 0xa5, 0x16, 0x1c, 0xaa, 0x2d, 0xe3, 0xa5, 0xae, 0x25, 0x2c, 0xe3, 0x45, 0x17,
	0x77, 0x82, 0x55, 0x7b, 0x28, 0x5e, 0xb6, 0x3d, 0x79, 0x10, 0xcb, 0x16, 0x3d, 0x08, 0xb2, 0x66,
	0xb2, 0xaf, 0xb3, 0xb1, 0x3b, 0x93, 0x98, 0x64, 0x46, 0x8b, 0x14, 0xc4, 0x0f, 0x20, 0x05, 0xbf,
	0x84, 0xdf, 0xa1, 0x97, 0x1e, 0x3d, 0x16, 0xbd, 0xf4, 0xa6, 0x9d, 0xf5, 0x20, 0x78, 0xe9, 0x47,
	0x90, 0x66, 0x67, 0x75, 0xb3, 0xc5, 0xae, 0x8a, 0xb7, 0x24, 0xff, 0xf7, 0xcb, 0xfb, 0xbf, 0xbc,
	0x47, 0xbc, 0xbb, 0x39, 0xe8, 0x90, 0x0b, 0xa2, 0x59, 0x17, 0x12, 0x4a, 0x64, 0x44, 0x19, 0xa1,
	0x9d, 0x8e, 0x48, 0xdb, 0x1a, 0x54, 0xce, 0x19, 0x10, 0xa9, 0x78, 0x4e, 0x0d, 0xb4, 0x59, 0xa6,
	0x8d, 0x48, 0xa8, 0xe4, 0xed, 0x8c, 0x26, 0xa1, 0x54, 0xc2, 0x08, 0xbf, 0x36, 0xa0, 0xc3, 0x01,
	0x1d, 0x9e, 0xd0, 0xa1, 0x43, 0x57, 0x1b, 0x31, 0x37, 0xdd, 0x2c, 0x0a, 0x99, 0x48, 0x48, 0x2c,
	0x62, 0x41, 0x2c, 0x18, 0x65, 0x9b, 0x76, 0x67, 0x37, 0x76, 0x35, 0xb8, 0xb0, 0xba, 0x18, 0x0b,
	0x11, 0xf7, 0x80, 0x50, 0xc9, 0x09, 0x4d, 0x53, 0x61, 0xa8, 0xe1, 0x22, 0xd5, 0xa5, 0x7a, 0xc5,
	0x35, 0x2b, 0xe4, 0xa8, 0x78, 0x63, 0x62, 0x25, 0x66, 0x5b, 0xc2, 0x30, 0xfa, 0xb2, 0x1b, 0x3d,
	0x2a, 0x2d, 0xba, 0x52, 0x4e, 0x7b, 0xbc, 0x43, 0x0d, 0x94, 0x6a, 0x30, 0xa6, 0x82, 0x86, 0x34,
	0x1f, 0xb3, 0x52, 0x1b, 0x8b, 0xe1, 0xf0, 0xa2, 0xed, 0x44, 0x04, 0xcb, 0xde, 0xdc, 0x1a, 0x4d,
	0x37, 0xb2, 0x48, 0x33, 0xc5, 0x23, 0x68, 0xc1, 0x73, 0xff, 0xaa, 0x77, 0xc1, 0xb1, 0xbb, 0x80,
	0x6a, 0xe8, 0xda, 0xf9, 0xd6, 0xac, 0x3d, 0xdc, 0x18, 0x9c, 0x05, 0x0f, 0xbd, 0x79, 0x97, 0xd3,
	0xd2, 0x6f, 0x7a, 0x33, 0x0a, 0x74, 0xd6, 0x33, 0x96, 0xb8, 0xb8, 0x74, 0x3d, 0x74, 0xbb, 0xd2,
	0x1c, 0xb9, 0x60, 0xad, 0x0b, 0x6c, 0xeb, 0x17, 0x5e, 0x82, 0xc1, 0x8e, 0xe7, 0x6f, 0x80, 0x29,
	0xcf, 0xad, 0xd1, 0x3f, 0x75, 0xe4, 0xaf, 0x7a, 0x33, 0x94, 0x9d, 0x10, 0x0b, 0x53, 0x36, 0x7b,
	0xfd, 0x8c, 0xec, 0x3f, 0x13, 0x37, 0x2d, 0xd1, 0x2a, 0xc9, 0xe0, 0xbe, 0x77, 0xe9, 0x54, 0x7a,
	0x2d, 0xfd, 0x65, 0xef, 0x9c, 0x36, 0xd4, 0x40, 0x59, 0x57, 0xed, 0xac, 0x9b, 0x4f, 0xe2, 0x5a,
	0x83, 0xf0, 0xa5, 0xb7, 0xd3, 0xde, 0xfc, 0x9a, 0x9d, 0xd6, 0xf5, 0xc1, 0xec, 0x36, 0xd7, 0xef,
	0xf9, 0x9f, 0x91, 0x37, 0x3b, 0xfa, 0x74, 0xfe, 0xcd, 0x70, 0xd2, 0xf0, 0x86, 0x63, 0x2d, 0xaa,
	0x2e, 0xfd, 0x2d, 0xa2, 0x65, 0xd0, 0x7d, 0xf3, 0xe9, 0xeb, 0xbb, 0xa9, 0x28, 0x78, 0x42, 0x1c,
	0x96, 0xf0, 0xd4, 0x28, 0xa1, 0x25, 0x30, 0x43, 0x14, 0xd0, 0x0e, 0x49, 0x69, 0x02, 0x5a, 0x52,
	0x06, 0x9a, 0xe8, 0x6d, 0x6d, 0x20, 0x71, 0x87, 0x57, 0x93, 0x57, 0xce, 0x7e, 0x87, 0x30, 0x9a,
	0x36, 0xf4, 0x30, 0xd5, 0x0a, 0xaa, 0xfb, 0xdf, 0x91, 0x37, 0x37, 0xf6, 0x8c, 0xfe, 0xed, 0xc9,
	0x8e, 0x4f, 0x37, 0xbe, 0x7a, 0xe7, 0x1f, 0x28, 0x2d, 0x83, 0x2d, 0x5b, 0x2a, 0x04, 0x4f, 0xff,
	0x77, 0xa9, 0x1a, 0xcc, 0xb0, 0x54, 0x9b, 0x6d, 0x05, 0xd5, 0xab, 0xf5, 0xfd, 0x3d, 0x34, 0xfd,
	0x71, 0x0f, 0x05, 0xae, 0x55, 0xd7, 0xe5, 0x83, 0xe8, 0x19, 0x30, 0xb3, 0xba, 0x8b, 0x0e, 0x8e,
	0x70, 0xe5, 0xf0, 0x08, 0x57, 0x8e, 0x8f, 0x30, 0x7a, 0x5d, 0x60, 0xf4, 0xbe, 0xc0, 0xe8, 0x43,
	0x81, 0xd1, 0x41, 0x81, 0xd1, 0x97, 0x02, 0xa3, 0x6f, 0x05, 0xae, 0x1c, 0x17, 0x18, 0xed, 0xf6,
	0x71, 0x65, 0xbf, 0x8f, 0xd1, 0x41, 0x1f, 0x57, 0x0e, 0xfb, 0xb8, 0xf2, 0xf8, 0x51, 0x2c, 0xe4,
	0x56, 0x1c, 0xe6, 0xa2, 0x67, 0x40, 0x29, 0x1a, 0x66, 0x9a, 0xd8, 0xc5, 0xa6, 0x50, 0x49, 0x43,
	0x2a, 0x91, 0xf3, 0x0e, 0xa8, 0xc6, 0x50, 0x26, 0x32, 0x8a, 0x05, 0x81, 0x97, 0xa6, 0xac, 0xfc,
	0xb7, 0x7f, 0x51, 0x34, 0x63, 0xff, 0x81, 0x5b, 0x3f, 0x02, 0x00, 0x00, 0xff, 0xff, 0xd6, 0x6f,
	0x99, 0x5b, 0x80, 0x05, 0x00, 0x00,
}

func (this *CanSubscribeReq) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CanSubscribeReq)
	if !ok {
		that2, ok := that.(CanSubscribeReq)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.AddonService != that1.AddonService {
		return false
	}
	return true
}
func (this *CanSubscribeResp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CanSubscribeResp)
	if !ok {
		that2, ok := that.(CanSubscribeResp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Result != that1.Result {
		return false
	}
	return true
}
func (this *SetSubscriptionReq) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SetSubscriptionReq)
	if !ok {
		that2, ok := that.(SetSubscriptionReq)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.AddonService != that1.AddonService {
		return false
	}
	if this.Action != that1.Action {
		return false
	}
	return true
}
func (this *SetSubscriptionResp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SetSubscriptionResp)
	if !ok {
		that2, ok := that.(SetSubscriptionResp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.State != that1.State {
		return false
	}
	return true
}
func (this *CanSubscribeReq) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&addon_service.CanSubscribeReq{")
	s = append(s, "AddonService: "+fmt.Sprintf("%#v", this.AddonService)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CanSubscribeResp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&addon_service.CanSubscribeResp{")
	s = append(s, "Result: "+fmt.Sprintf("%#v", this.Result)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SetSubscriptionReq) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&addon_service.SetSubscriptionReq{")
	s = append(s, "AddonService: "+fmt.Sprintf("%#v", this.AddonService)+",\n")
	s = append(s, "Action: "+fmt.Sprintf("%#v", this.Action)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SetSubscriptionResp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&addon_service.SetSubscriptionResp{")
	s = append(s, "State: "+fmt.Sprintf("%#v", this.State)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringPrivateCustomapiUam(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// CustomPrivateAPIClient is the client API for CustomPrivateAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CustomPrivateAPIClient interface {
	// CanSubscribe
	//
	// x-displayName: "Check Subscribe Access"
	// Evaluate whether addon service is allowed to subscribe or not based on current plan.
	CanSubscribe(ctx context.Context, in *CanSubscribeReq, opts ...grpc.CallOption) (*CanSubscribeResp, error)
	// SetSubscription
	//
	// x-displayName: "Check Subscribe Access"
	// Evaluate whether addon service is allowed to subscribe or not based on current plan.
	SetSubscription(ctx context.Context, in *SetSubscriptionReq, opts ...grpc.CallOption) (*SetSubscriptionResp, error)
}

type customPrivateAPIClient struct {
	cc *grpc.ClientConn
}

func NewCustomPrivateAPIClient(cc *grpc.ClientConn) CustomPrivateAPIClient {
	return &customPrivateAPIClient{cc}
}

func (c *customPrivateAPIClient) CanSubscribe(ctx context.Context, in *CanSubscribeReq, opts ...grpc.CallOption) (*CanSubscribeResp, error) {
	out := new(CanSubscribeResp)
	err := c.cc.Invoke(ctx, "/ves.io.schema.pbac.addon_service.CustomPrivateAPI/CanSubscribe", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customPrivateAPIClient) SetSubscription(ctx context.Context, in *SetSubscriptionReq, opts ...grpc.CallOption) (*SetSubscriptionResp, error) {
	out := new(SetSubscriptionResp)
	err := c.cc.Invoke(ctx, "/ves.io.schema.pbac.addon_service.CustomPrivateAPI/SetSubscription", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CustomPrivateAPIServer is the server API for CustomPrivateAPI service.
type CustomPrivateAPIServer interface {
	// CanSubscribe
	//
	// x-displayName: "Check Subscribe Access"
	// Evaluate whether addon service is allowed to subscribe or not based on current plan.
	CanSubscribe(context.Context, *CanSubscribeReq) (*CanSubscribeResp, error)
	// SetSubscription
	//
	// x-displayName: "Check Subscribe Access"
	// Evaluate whether addon service is allowed to subscribe or not based on current plan.
	SetSubscription(context.Context, *SetSubscriptionReq) (*SetSubscriptionResp, error)
}

// UnimplementedCustomPrivateAPIServer can be embedded to have forward compatible implementations.
type UnimplementedCustomPrivateAPIServer struct {
}

func (*UnimplementedCustomPrivateAPIServer) CanSubscribe(ctx context.Context, req *CanSubscribeReq) (*CanSubscribeResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CanSubscribe not implemented")
}
func (*UnimplementedCustomPrivateAPIServer) SetSubscription(ctx context.Context, req *SetSubscriptionReq) (*SetSubscriptionResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetSubscription not implemented")
}

func RegisterCustomPrivateAPIServer(s *grpc.Server, srv CustomPrivateAPIServer) {
	s.RegisterService(&_CustomPrivateAPI_serviceDesc, srv)
}

func _CustomPrivateAPI_CanSubscribe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CanSubscribeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomPrivateAPIServer).CanSubscribe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ves.io.schema.pbac.addon_service.CustomPrivateAPI/CanSubscribe",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomPrivateAPIServer).CanSubscribe(ctx, req.(*CanSubscribeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomPrivateAPI_SetSubscription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetSubscriptionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomPrivateAPIServer).SetSubscription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ves.io.schema.pbac.addon_service.CustomPrivateAPI/SetSubscription",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomPrivateAPIServer).SetSubscription(ctx, req.(*SetSubscriptionReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _CustomPrivateAPI_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ves.io.schema.pbac.addon_service.CustomPrivateAPI",
	HandlerType: (*CustomPrivateAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CanSubscribe",
			Handler:    _CustomPrivateAPI_CanSubscribe_Handler,
		},
		{
			MethodName: "SetSubscription",
			Handler:    _CustomPrivateAPI_SetSubscription_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ves.io/schema/pbac/addon_service/private_customapi_uam.proto",
}

func (m *CanSubscribeReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CanSubscribeReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CanSubscribeReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AddonService) > 0 {
		i -= len(m.AddonService)
		copy(dAtA[i:], m.AddonService)
		i = encodeVarintPrivateCustomapiUam(dAtA, i, uint64(len(m.AddonService)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CanSubscribeResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CanSubscribeResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CanSubscribeResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Result != 0 {
		i = encodeVarintPrivateCustomapiUam(dAtA, i, uint64(m.Result))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SetSubscriptionReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SetSubscriptionReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SetSubscriptionReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Action != 0 {
		i = encodeVarintPrivateCustomapiUam(dAtA, i, uint64(m.Action))
		i--
		dAtA[i] = 0x10
	}
	if len(m.AddonService) > 0 {
		i -= len(m.AddonService)
		copy(dAtA[i:], m.AddonService)
		i = encodeVarintPrivateCustomapiUam(dAtA, i, uint64(len(m.AddonService)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SetSubscriptionResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SetSubscriptionResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SetSubscriptionResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.State != 0 {
		i = encodeVarintPrivateCustomapiUam(dAtA, i, uint64(m.State))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintPrivateCustomapiUam(dAtA []byte, offset int, v uint64) int {
	offset -= sovPrivateCustomapiUam(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *CanSubscribeReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AddonService)
	if l > 0 {
		n += 1 + l + sovPrivateCustomapiUam(uint64(l))
	}
	return n
}

func (m *CanSubscribeResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Result != 0 {
		n += 1 + sovPrivateCustomapiUam(uint64(m.Result))
	}
	return n
}

func (m *SetSubscriptionReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AddonService)
	if l > 0 {
		n += 1 + l + sovPrivateCustomapiUam(uint64(l))
	}
	if m.Action != 0 {
		n += 1 + sovPrivateCustomapiUam(uint64(m.Action))
	}
	return n
}

func (m *SetSubscriptionResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.State != 0 {
		n += 1 + sovPrivateCustomapiUam(uint64(m.State))
	}
	return n
}

func sovPrivateCustomapiUam(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozPrivateCustomapiUam(x uint64) (n int) {
	return sovPrivateCustomapiUam(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *CanSubscribeReq) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CanSubscribeReq{`,
		`AddonService:` + fmt.Sprintf("%v", this.AddonService) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CanSubscribeResp) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CanSubscribeResp{`,
		`Result:` + fmt.Sprintf("%v", this.Result) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SetSubscriptionReq) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SetSubscriptionReq{`,
		`AddonService:` + fmt.Sprintf("%v", this.AddonService) + `,`,
		`Action:` + fmt.Sprintf("%v", this.Action) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SetSubscriptionResp) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SetSubscriptionResp{`,
		`State:` + fmt.Sprintf("%v", this.State) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringPrivateCustomapiUam(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *CanSubscribeReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPrivateCustomapiUam
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CanSubscribeReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CanSubscribeReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddonService", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrivateCustomapiUam
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPrivateCustomapiUam
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPrivateCustomapiUam
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AddonService = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPrivateCustomapiUam(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPrivateCustomapiUam
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPrivateCustomapiUam
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CanSubscribeResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPrivateCustomapiUam
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CanSubscribeResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CanSubscribeResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			m.Result = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrivateCustomapiUam
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Result |= schema.AddonServiceCheckSubscribe(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPrivateCustomapiUam(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPrivateCustomapiUam
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPrivateCustomapiUam
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SetSubscriptionReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPrivateCustomapiUam
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SetSubscriptionReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SetSubscriptionReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddonService", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrivateCustomapiUam
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPrivateCustomapiUam
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPrivateCustomapiUam
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AddonService = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Action", wireType)
			}
			m.Action = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrivateCustomapiUam
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Action |= schema.AddonServiceSubscribeAction(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPrivateCustomapiUam(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPrivateCustomapiUam
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPrivateCustomapiUam
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SetSubscriptionResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPrivateCustomapiUam
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SetSubscriptionResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SetSubscriptionResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrivateCustomapiUam
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= schema.AddonServiceState(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPrivateCustomapiUam(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPrivateCustomapiUam
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPrivateCustomapiUam
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPrivateCustomapiUam(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPrivateCustomapiUam
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPrivateCustomapiUam
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPrivateCustomapiUam
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPrivateCustomapiUam
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupPrivateCustomapiUam
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthPrivateCustomapiUam
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthPrivateCustomapiUam        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPrivateCustomapiUam          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupPrivateCustomapiUam = fmt.Errorf("proto: unexpected end of group")
)
