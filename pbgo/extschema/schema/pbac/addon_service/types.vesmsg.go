//
// Copyright (c) 2018 Volterra, Inc. All rights reserved.
// Code generated by ves-gen-schema-go. DO NOT EDIT.
//
package addon_service

import (
	"context"
	"fmt"
	"strings"

	"github.com/gogo/protobuf/proto"

	"gopkg.volterra.us/stdlib/codec"
	"gopkg.volterra.us/stdlib/db"
	"gopkg.volterra.us/stdlib/errors"

	ves_io_schema "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
)

var (
	// dummy imports in case file has no message with Refs
	_ db.Interface
	_ = errors.Wrap
	_ = strings.Split
)

// augmented methods on protoc/std generated struct

func (m *GetSpecType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *GetSpecType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *GetSpecType) DeepCopy() *GetSpecType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &GetSpecType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *GetSpecType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *GetSpecType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return GetSpecTypeValidator().Validate(ctx, m, opts...)
}

func (m *GetSpecType) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	var drInfos []db.DRefInfo
	if fdrInfos, err := m.GetApiGroupsDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetApiGroupsDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetDependentServicesDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetDependentServicesDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetIncludedServicesDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetIncludedServicesDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	return drInfos, nil

}

func (m *GetSpecType) GetApiGroupsDRefInfo() ([]db.DRefInfo, error) {
	refs := m.GetApiGroups()
	if len(refs) == 0 {
		return nil, nil
	}
	drInfos := make([]db.DRefInfo, 0, len(refs))
	for i, ref := range refs {
		if ref == nil {
			return nil, fmt.Errorf("GetSpecType.api_groups[%d] has a nil value", i)
		}
		// resolve kind to type if needed at DBObject.GetDRefInfo()
		drInfos = append(drInfos, db.DRefInfo{
			RefdType:   "api_group.Object",
			RefdUID:    ref.Uid,
			RefdTenant: ref.Tenant,
			RefdNS:     ref.Namespace,
			RefdName:   ref.Name,
			DRField:    "api_groups",
			Ref:        ref,
		})
	}
	return drInfos, nil

}

// GetApiGroupsDBEntries returns the db.Entry corresponding to the ObjRefType from the default Table
func (m *GetSpecType) GetApiGroupsDBEntries(ctx context.Context, d db.Interface) ([]db.Entry, error) {
	var entries []db.Entry
	refdType, err := d.TypeForEntryKind("", "", "api_group.Object")
	if err != nil {
		return nil, errors.Wrap(err, "Cannot find type for kind: api_group")
	}
	for _, ref := range m.GetApiGroups() {
		refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
		if err != nil {
			return nil, errors.Wrap(err, "Getting referred entry")
		}
		if refdEnt != nil {
			entries = append(entries, refdEnt)
		}
	}

	return entries, nil
}

func (m *GetSpecType) GetDependentServicesDRefInfo() ([]db.DRefInfo, error) {
	refs := m.GetDependentServices()
	if len(refs) == 0 {
		return nil, nil
	}
	drInfos := make([]db.DRefInfo, 0, len(refs))
	for i, ref := range refs {
		if ref == nil {
			return nil, fmt.Errorf("GetSpecType.dependent_services[%d] has a nil value", i)
		}
		// resolve kind to type if needed at DBObject.GetDRefInfo()
		drInfos = append(drInfos, db.DRefInfo{
			RefdType:   "addon_service.Object",
			RefdUID:    ref.Uid,
			RefdTenant: ref.Tenant,
			RefdNS:     ref.Namespace,
			RefdName:   ref.Name,
			DRField:    "dependent_services",
			Ref:        ref,
		})
	}
	return drInfos, nil

}

// GetDependentServicesDBEntries returns the db.Entry corresponding to the ObjRefType from the default Table
func (m *GetSpecType) GetDependentServicesDBEntries(ctx context.Context, d db.Interface) ([]db.Entry, error) {
	var entries []db.Entry
	refdType, err := d.TypeForEntryKind("", "", "addon_service.Object")
	if err != nil {
		return nil, errors.Wrap(err, "Cannot find type for kind: addon_service")
	}
	for _, ref := range m.GetDependentServices() {
		refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
		if err != nil {
			return nil, errors.Wrap(err, "Getting referred entry")
		}
		if refdEnt != nil {
			entries = append(entries, refdEnt)
		}
	}

	return entries, nil
}

func (m *GetSpecType) GetIncludedServicesDRefInfo() ([]db.DRefInfo, error) {
	refs := m.GetIncludedServices()
	if len(refs) == 0 {
		return nil, nil
	}
	drInfos := make([]db.DRefInfo, 0, len(refs))
	for i, ref := range refs {
		if ref == nil {
			return nil, fmt.Errorf("GetSpecType.included_services[%d] has a nil value", i)
		}
		// resolve kind to type if needed at DBObject.GetDRefInfo()
		drInfos = append(drInfos, db.DRefInfo{
			RefdType:   "addon_service.Object",
			RefdUID:    ref.Uid,
			RefdTenant: ref.Tenant,
			RefdNS:     ref.Namespace,
			RefdName:   ref.Name,
			DRField:    "included_services",
			Ref:        ref,
		})
	}
	return drInfos, nil

}

// GetIncludedServicesDBEntries returns the db.Entry corresponding to the ObjRefType from the default Table
func (m *GetSpecType) GetIncludedServicesDBEntries(ctx context.Context, d db.Interface) ([]db.Entry, error) {
	var entries []db.Entry
	refdType, err := d.TypeForEntryKind("", "", "addon_service.Object")
	if err != nil {
		return nil, errors.Wrap(err, "Cannot find type for kind: addon_service")
	}
	for _, ref := range m.GetIncludedServices() {
		refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
		if err != nil {
			return nil, errors.Wrap(err, "Getting referred entry")
		}
		if refdEnt != nil {
			entries = append(entries, refdEnt)
		}
	}

	return entries, nil
}

type ValidateGetSpecType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateGetSpecType) DisplayNameValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for display_name")
	}

	return validatorFn, nil
}

func (v *ValidateGetSpecType) ApiGroupsValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemsValidatorFn := func(ctx context.Context, elems []*ves_io_schema.ObjectRefType, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := ves_io_schema.ObjectRefTypeValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for api_groups")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*ves_io_schema.ObjectRefType)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*ves_io_schema.ObjectRefType, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated api_groups")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items api_groups")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateGetSpecType) DependentServicesValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemsValidatorFn := func(ctx context.Context, elems []*ves_io_schema.ObjectRefType, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := ves_io_schema.ObjectRefTypeValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for dependent_services")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*ves_io_schema.ObjectRefType)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*ves_io_schema.ObjectRefType, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated dependent_services")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items dependent_services")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateGetSpecType) IncludedServicesValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemsValidatorFn := func(ctx context.Context, elems []*ves_io_schema.ObjectRefType, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := ves_io_schema.ObjectRefTypeValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for included_services")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*ves_io_schema.ObjectRefType)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*ves_io_schema.ObjectRefType, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated included_services")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items included_services")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateGetSpecType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*GetSpecType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *GetSpecType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	switch m.GetActivationTypeChoice().(type) {
	case *GetSpecType_SelfActivation:
		if fv, exists := v.FldValidators["activation_type_choice.self_activation"]; exists {
			val := m.GetActivationTypeChoice().(*GetSpecType_SelfActivation).SelfActivation
			vOpts := append(opts,
				db.WithValidateField("activation_type_choice"),
				db.WithValidateField("self_activation"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GetSpecType_PartiallyManagedActivation:
		if fv, exists := v.FldValidators["activation_type_choice.partially_managed_activation"]; exists {
			val := m.GetActivationTypeChoice().(*GetSpecType_PartiallyManagedActivation).PartiallyManagedActivation
			vOpts := append(opts,
				db.WithValidateField("activation_type_choice"),
				db.WithValidateField("partially_managed_activation"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GetSpecType_ManagedActivation:
		if fv, exists := v.FldValidators["activation_type_choice.managed_activation"]; exists {
			val := m.GetActivationTypeChoice().(*GetSpecType_ManagedActivation).ManagedActivation
			vOpts := append(opts,
				db.WithValidateField("activation_type_choice"),
				db.WithValidateField("managed_activation"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["api_groups"]; exists {
		vOpts := append(opts, db.WithValidateField("api_groups"))
		if err := fv(ctx, m.GetApiGroups(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["dependent_services"]; exists {
		vOpts := append(opts, db.WithValidateField("dependent_services"))
		if err := fv(ctx, m.GetDependentServices(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["display_name"]; exists {

		vOpts := append(opts, db.WithValidateField("display_name"))
		if err := fv(ctx, m.GetDisplayName(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["included_services"]; exists {
		vOpts := append(opts, db.WithValidateField("included_services"))
		if err := fv(ctx, m.GetIncludedServices(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultGetSpecTypeValidator = func() *ValidateGetSpecType {
	v := &ValidateGetSpecType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhDisplayName := v.DisplayNameValidationRuleHandler
	rulesDisplayName := map[string]string{
		"ves.io.schema.rules.message.required": "true",
		"ves.io.schema.rules.string.max_len":   "32",
	}
	vFn, err = vrhDisplayName(rulesDisplayName)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GetSpecType.display_name: %s", err)
		panic(errMsg)
	}
	v.FldValidators["display_name"] = vFn

	vrhApiGroups := v.ApiGroupsValidationRuleHandler
	rulesApiGroups := map[string]string{
		"ves.io.schema.rules.repeated.max_items": "32",
	}
	vFn, err = vrhApiGroups(rulesApiGroups)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GetSpecType.api_groups: %s", err)
		panic(errMsg)
	}
	v.FldValidators["api_groups"] = vFn

	vrhDependentServices := v.DependentServicesValidationRuleHandler
	rulesDependentServices := map[string]string{
		"ves.io.schema.rules.repeated.max_items": "32",
		"ves.io.schema.rules.repeated.unique":    "true",
	}
	vFn, err = vrhDependentServices(rulesDependentServices)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GetSpecType.dependent_services: %s", err)
		panic(errMsg)
	}
	v.FldValidators["dependent_services"] = vFn

	vrhIncludedServices := v.IncludedServicesValidationRuleHandler
	rulesIncludedServices := map[string]string{
		"ves.io.schema.rules.repeated.max_items": "32",
		"ves.io.schema.rules.repeated.unique":    "true",
	}
	vFn, err = vrhIncludedServices(rulesIncludedServices)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GetSpecType.included_services: %s", err)
		panic(errMsg)
	}
	v.FldValidators["included_services"] = vFn

	v.FldValidators["activation_type_choice.self_activation"] = SelfActivationTypeValidator().Validate

	return v
}()

func GetSpecTypeValidator() db.Validator {
	return DefaultGetSpecTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *GlobalSpecType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *GlobalSpecType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *GlobalSpecType) DeepCopy() *GlobalSpecType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &GlobalSpecType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *GlobalSpecType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *GlobalSpecType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return GlobalSpecTypeValidator().Validate(ctx, m, opts...)
}

func (m *GlobalSpecType) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	var drInfos []db.DRefInfo
	if fdrInfos, err := m.GetApiGroupsDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetApiGroupsDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetDependentServicesDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetDependentServicesDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetIncludedServicesDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetIncludedServicesDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetPolicyDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetPolicyDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	return drInfos, nil

}

func (m *GlobalSpecType) GetApiGroupsDRefInfo() ([]db.DRefInfo, error) {
	refs := m.GetApiGroups()
	if len(refs) == 0 {
		return nil, nil
	}
	drInfos := make([]db.DRefInfo, 0, len(refs))
	for i, ref := range refs {
		if ref == nil {
			return nil, fmt.Errorf("GlobalSpecType.api_groups[%d] has a nil value", i)
		}
		// resolve kind to type if needed at DBObject.GetDRefInfo()
		drInfos = append(drInfos, db.DRefInfo{
			RefdType:   "api_group.Object",
			RefdUID:    ref.Uid,
			RefdTenant: ref.Tenant,
			RefdNS:     ref.Namespace,
			RefdName:   ref.Name,
			DRField:    "api_groups",
			Ref:        ref,
		})
	}
	return drInfos, nil

}

// GetApiGroupsDBEntries returns the db.Entry corresponding to the ObjRefType from the default Table
func (m *GlobalSpecType) GetApiGroupsDBEntries(ctx context.Context, d db.Interface) ([]db.Entry, error) {
	var entries []db.Entry
	refdType, err := d.TypeForEntryKind("", "", "api_group.Object")
	if err != nil {
		return nil, errors.Wrap(err, "Cannot find type for kind: api_group")
	}
	for _, ref := range m.GetApiGroups() {
		refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
		if err != nil {
			return nil, errors.Wrap(err, "Getting referred entry")
		}
		if refdEnt != nil {
			entries = append(entries, refdEnt)
		}
	}

	return entries, nil
}

func (m *GlobalSpecType) GetDependentServicesDRefInfo() ([]db.DRefInfo, error) {
	refs := m.GetDependentServices()
	if len(refs) == 0 {
		return nil, nil
	}
	drInfos := make([]db.DRefInfo, 0, len(refs))
	for i, ref := range refs {
		if ref == nil {
			return nil, fmt.Errorf("GlobalSpecType.dependent_services[%d] has a nil value", i)
		}
		// resolve kind to type if needed at DBObject.GetDRefInfo()
		drInfos = append(drInfos, db.DRefInfo{
			RefdType:   "addon_service.Object",
			RefdUID:    ref.Uid,
			RefdTenant: ref.Tenant,
			RefdNS:     ref.Namespace,
			RefdName:   ref.Name,
			DRField:    "dependent_services",
			Ref:        ref,
		})
	}
	return drInfos, nil

}

// GetDependentServicesDBEntries returns the db.Entry corresponding to the ObjRefType from the default Table
func (m *GlobalSpecType) GetDependentServicesDBEntries(ctx context.Context, d db.Interface) ([]db.Entry, error) {
	var entries []db.Entry
	refdType, err := d.TypeForEntryKind("", "", "addon_service.Object")
	if err != nil {
		return nil, errors.Wrap(err, "Cannot find type for kind: addon_service")
	}
	for _, ref := range m.GetDependentServices() {
		refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
		if err != nil {
			return nil, errors.Wrap(err, "Getting referred entry")
		}
		if refdEnt != nil {
			entries = append(entries, refdEnt)
		}
	}

	return entries, nil
}

func (m *GlobalSpecType) GetIncludedServicesDRefInfo() ([]db.DRefInfo, error) {
	refs := m.GetIncludedServices()
	if len(refs) == 0 {
		return nil, nil
	}
	drInfos := make([]db.DRefInfo, 0, len(refs))
	for i, ref := range refs {
		if ref == nil {
			return nil, fmt.Errorf("GlobalSpecType.included_services[%d] has a nil value", i)
		}
		// resolve kind to type if needed at DBObject.GetDRefInfo()
		drInfos = append(drInfos, db.DRefInfo{
			RefdType:   "addon_service.Object",
			RefdUID:    ref.Uid,
			RefdTenant: ref.Tenant,
			RefdNS:     ref.Namespace,
			RefdName:   ref.Name,
			DRField:    "included_services",
			Ref:        ref,
		})
	}
	return drInfos, nil

}

// GetIncludedServicesDBEntries returns the db.Entry corresponding to the ObjRefType from the default Table
func (m *GlobalSpecType) GetIncludedServicesDBEntries(ctx context.Context, d db.Interface) ([]db.Entry, error) {
	var entries []db.Entry
	refdType, err := d.TypeForEntryKind("", "", "addon_service.Object")
	if err != nil {
		return nil, errors.Wrap(err, "Cannot find type for kind: addon_service")
	}
	for _, ref := range m.GetIncludedServices() {
		refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
		if err != nil {
			return nil, errors.Wrap(err, "Getting referred entry")
		}
		if refdEnt != nil {
			entries = append(entries, refdEnt)
		}
	}

	return entries, nil
}

func (m *GlobalSpecType) GetPolicyDRefInfo() ([]db.DRefInfo, error) {
	refs := m.GetPolicy()
	if len(refs) == 0 {
		return nil, nil
	}
	drInfos := make([]db.DRefInfo, 0, len(refs))
	for i, ref := range refs {
		if ref == nil {
			return nil, fmt.Errorf("GlobalSpecType.policy[%d] has a nil value", i)
		}
		// resolve kind to type if needed at DBObject.GetDRefInfo()
		drInfos = append(drInfos, db.DRefInfo{
			RefdType:   "service_policy.Object",
			RefdUID:    ref.Uid,
			RefdTenant: ref.Tenant,
			RefdNS:     ref.Namespace,
			RefdName:   ref.Name,
			DRField:    "policy",
			Ref:        ref,
		})
	}
	return drInfos, nil

}

// GetPolicyDBEntries returns the db.Entry corresponding to the ObjRefType from the default Table
func (m *GlobalSpecType) GetPolicyDBEntries(ctx context.Context, d db.Interface) ([]db.Entry, error) {
	var entries []db.Entry
	refdType, err := d.TypeForEntryKind("", "", "service_policy.Object")
	if err != nil {
		return nil, errors.Wrap(err, "Cannot find type for kind: service_policy")
	}
	for _, ref := range m.GetPolicy() {
		refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
		if err != nil {
			return nil, errors.Wrap(err, "Getting referred entry")
		}
		if refdEnt != nil {
			entries = append(entries, refdEnt)
		}
	}

	return entries, nil
}

type ValidateGlobalSpecType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateGlobalSpecType) DisplayNameValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for display_name")
	}

	return validatorFn, nil
}

func (v *ValidateGlobalSpecType) ApiGroupsValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemsValidatorFn := func(ctx context.Context, elems []*ves_io_schema.ObjectRefType, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := ves_io_schema.ObjectRefTypeValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for api_groups")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*ves_io_schema.ObjectRefType)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*ves_io_schema.ObjectRefType, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated api_groups")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items api_groups")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateGlobalSpecType) PolicyValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemsValidatorFn := func(ctx context.Context, elems []*ves_io_schema.ObjectRefType, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := ves_io_schema.ObjectRefTypeValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for policy")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*ves_io_schema.ObjectRefType)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*ves_io_schema.ObjectRefType, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated policy")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items policy")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateGlobalSpecType) DependentServicesValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemsValidatorFn := func(ctx context.Context, elems []*ves_io_schema.ObjectRefType, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := ves_io_schema.ObjectRefTypeValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for dependent_services")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*ves_io_schema.ObjectRefType)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*ves_io_schema.ObjectRefType, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated dependent_services")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items dependent_services")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateGlobalSpecType) IncludedServicesValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemsValidatorFn := func(ctx context.Context, elems []*ves_io_schema.ObjectRefType, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := ves_io_schema.ObjectRefTypeValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for included_services")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*ves_io_schema.ObjectRefType)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*ves_io_schema.ObjectRefType, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated included_services")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items included_services")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateGlobalSpecType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*GlobalSpecType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *GlobalSpecType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	switch m.GetActivationTypeChoice().(type) {
	case *GlobalSpecType_SelfActivation:
		if fv, exists := v.FldValidators["activation_type_choice.self_activation"]; exists {
			val := m.GetActivationTypeChoice().(*GlobalSpecType_SelfActivation).SelfActivation
			vOpts := append(opts,
				db.WithValidateField("activation_type_choice"),
				db.WithValidateField("self_activation"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GlobalSpecType_PartiallyManagedActivation:
		if fv, exists := v.FldValidators["activation_type_choice.partially_managed_activation"]; exists {
			val := m.GetActivationTypeChoice().(*GlobalSpecType_PartiallyManagedActivation).PartiallyManagedActivation
			vOpts := append(opts,
				db.WithValidateField("activation_type_choice"),
				db.WithValidateField("partially_managed_activation"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GlobalSpecType_ManagedActivation:
		if fv, exists := v.FldValidators["activation_type_choice.managed_activation"]; exists {
			val := m.GetActivationTypeChoice().(*GlobalSpecType_ManagedActivation).ManagedActivation
			vOpts := append(opts,
				db.WithValidateField("activation_type_choice"),
				db.WithValidateField("managed_activation"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["api_groups"]; exists {
		vOpts := append(opts, db.WithValidateField("api_groups"))
		if err := fv(ctx, m.GetApiGroups(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["dependent_services"]; exists {
		vOpts := append(opts, db.WithValidateField("dependent_services"))
		if err := fv(ctx, m.GetDependentServices(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["display_name"]; exists {

		vOpts := append(opts, db.WithValidateField("display_name"))
		if err := fv(ctx, m.GetDisplayName(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["included_services"]; exists {
		vOpts := append(opts, db.WithValidateField("included_services"))
		if err := fv(ctx, m.GetIncludedServices(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["policy"]; exists {
		vOpts := append(opts, db.WithValidateField("policy"))
		if err := fv(ctx, m.GetPolicy(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultGlobalSpecTypeValidator = func() *ValidateGlobalSpecType {
	v := &ValidateGlobalSpecType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhDisplayName := v.DisplayNameValidationRuleHandler
	rulesDisplayName := map[string]string{
		"ves.io.schema.rules.message.required": "true",
		"ves.io.schema.rules.string.max_len":   "32",
	}
	vFn, err = vrhDisplayName(rulesDisplayName)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GlobalSpecType.display_name: %s", err)
		panic(errMsg)
	}
	v.FldValidators["display_name"] = vFn

	vrhApiGroups := v.ApiGroupsValidationRuleHandler
	rulesApiGroups := map[string]string{
		"ves.io.schema.rules.repeated.max_items": "32",
	}
	vFn, err = vrhApiGroups(rulesApiGroups)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GlobalSpecType.api_groups: %s", err)
		panic(errMsg)
	}
	v.FldValidators["api_groups"] = vFn

	vrhPolicy := v.PolicyValidationRuleHandler
	rulesPolicy := map[string]string{
		"ves.io.schema.rules.repeated.max_items": "1",
	}
	vFn, err = vrhPolicy(rulesPolicy)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GlobalSpecType.policy: %s", err)
		panic(errMsg)
	}
	v.FldValidators["policy"] = vFn

	vrhDependentServices := v.DependentServicesValidationRuleHandler
	rulesDependentServices := map[string]string{
		"ves.io.schema.rules.repeated.max_items": "32",
		"ves.io.schema.rules.repeated.unique":    "true",
	}
	vFn, err = vrhDependentServices(rulesDependentServices)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GlobalSpecType.dependent_services: %s", err)
		panic(errMsg)
	}
	v.FldValidators["dependent_services"] = vFn

	vrhIncludedServices := v.IncludedServicesValidationRuleHandler
	rulesIncludedServices := map[string]string{
		"ves.io.schema.rules.repeated.max_items": "32",
		"ves.io.schema.rules.repeated.unique":    "true",
	}
	vFn, err = vrhIncludedServices(rulesIncludedServices)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GlobalSpecType.included_services: %s", err)
		panic(errMsg)
	}
	v.FldValidators["included_services"] = vFn

	v.FldValidators["activation_type_choice.self_activation"] = SelfActivationTypeValidator().Validate

	return v
}()

func GlobalSpecTypeValidator() db.Validator {
	return DefaultGlobalSpecTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *SelfActivationType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *SelfActivationType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *SelfActivationType) DeepCopy() *SelfActivationType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &SelfActivationType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *SelfActivationType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *SelfActivationType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return SelfActivationTypeValidator().Validate(ctx, m, opts...)
}

type ValidateSelfActivationType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateSelfActivationType) DefaultTileNameValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for default_tile_name")
	}

	return validatorFn, nil
}

func (v *ValidateSelfActivationType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*SelfActivationType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *SelfActivationType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["default_tile_name"]; exists {

		vOpts := append(opts, db.WithValidateField("default_tile_name"))
		if err := fv(ctx, m.GetDefaultTileName(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultSelfActivationTypeValidator = func() *ValidateSelfActivationType {
	v := &ValidateSelfActivationType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhDefaultTileName := v.DefaultTileNameValidationRuleHandler
	rulesDefaultTileName := map[string]string{
		"ves.io.schema.rules.message.required": "true",
		"ves.io.schema.rules.string.max_len":   "32",
	}
	vFn, err = vrhDefaultTileName(rulesDefaultTileName)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for SelfActivationType.default_tile_name: %s", err)
		panic(errMsg)
	}
	v.FldValidators["default_tile_name"] = vFn

	return v
}()

func SelfActivationTypeValidator() db.Validator {
	return DefaultSelfActivationTypeValidator
}

// create setters in GetSpecType from GlobalSpecType for oneof fields
func (r *GetSpecType) SetActivationTypeChoiceToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.ActivationTypeChoice.(type) {
	case nil:
		o.ActivationTypeChoice = nil

	case *GetSpecType_ManagedActivation:
		o.ActivationTypeChoice = &GlobalSpecType_ManagedActivation{ManagedActivation: of.ManagedActivation}

	case *GetSpecType_PartiallyManagedActivation:
		o.ActivationTypeChoice = &GlobalSpecType_PartiallyManagedActivation{PartiallyManagedActivation: of.PartiallyManagedActivation}

	case *GetSpecType_SelfActivation:
		o.ActivationTypeChoice = &GlobalSpecType_SelfActivation{SelfActivation: of.SelfActivation}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *GetSpecType) GetActivationTypeChoiceFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.ActivationTypeChoice.(type) {
	case nil:
		r.ActivationTypeChoice = nil

	case *GlobalSpecType_ManagedActivation:
		r.ActivationTypeChoice = &GetSpecType_ManagedActivation{ManagedActivation: of.ManagedActivation}

	case *GlobalSpecType_PartiallyManagedActivation:
		r.ActivationTypeChoice = &GetSpecType_PartiallyManagedActivation{PartiallyManagedActivation: of.PartiallyManagedActivation}

	case *GlobalSpecType_SelfActivation:
		r.ActivationTypeChoice = &GetSpecType_SelfActivation{SelfActivation: of.SelfActivation}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (m *GetSpecType) FromGlobalSpecType(f *GlobalSpecType) {
	if f == nil {
		return
	}
	m.GetActivationTypeChoiceFromGlobalSpecType(f)
	m.ApiGroups = f.GetApiGroups()
	m.DependentServices = f.GetDependentServices()
	m.DisplayName = f.GetDisplayName()
	m.IncludedServices = f.GetIncludedServices()
}

func (m *GetSpecType) ToGlobalSpecType(f *GlobalSpecType) {
	m1 := m.DeepCopy()
	_ = m1
	if f == nil {
		return
	}
	m1.SetActivationTypeChoiceToGlobalSpecType(f)
	f.ApiGroups = m1.ApiGroups
	f.DependentServices = m1.DependentServices
	f.DisplayName = m1.DisplayName
	f.IncludedServices = m1.IncludedServices
}
