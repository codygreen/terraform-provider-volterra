//
// Copyright (c) 2018 Volterra, Inc. All rights reserved.
// Code generated by ves-gen-schema-go. DO NOT EDIT.
//

package addon_service

import (
	"bytes"
	"context"
	"fmt"
	"io/ioutil"
	"net/http"
	"strings"

	"github.com/gogo/protobuf/proto"
	"github.com/grpc-ecosystem/grpc-gateway/runtime"
	"google.golang.org/grpc"

	"gopkg.volterra.us/stdlib/client"
	"gopkg.volterra.us/stdlib/codec"
	"gopkg.volterra.us/stdlib/errors"
	"gopkg.volterra.us/stdlib/server"
	"gopkg.volterra.us/stdlib/svcfw"
)

var (
	_ = fmt.Sprintf("dummy for fmt import use")
)

// Create CustomPrivateAPI GRPC Client satisfying server.CustomClient
type CustomPrivateAPIGrpcClient struct {
	conn       *grpc.ClientConn
	grpcClient CustomPrivateAPIClient
	// map of rpc name to its invocation
	rpcFns map[string]func(context.Context, string, ...grpc.CallOption) (proto.Message, error)
}

func (c *CustomPrivateAPIGrpcClient) doRPCCanSubscribe(ctx context.Context, yamlReq string, opts ...grpc.CallOption) (proto.Message, error) {
	req := &CanSubscribeReq{}
	if err := codec.FromYAML(yamlReq, req); err != nil {
		return nil, fmt.Errorf("YAML Request %s is not of type *ves.io.schema.pbac.addon_service.CanSubscribeReq", yamlReq)
	}
	rsp, err := c.grpcClient.CanSubscribe(ctx, req, opts...)
	return rsp, err
}

func (c *CustomPrivateAPIGrpcClient) doRPCSetSubscription(ctx context.Context, yamlReq string, opts ...grpc.CallOption) (proto.Message, error) {
	req := &SetSubscriptionReq{}
	if err := codec.FromYAML(yamlReq, req); err != nil {
		return nil, fmt.Errorf("YAML Request %s is not of type *ves.io.schema.pbac.addon_service.SetSubscriptionReq", yamlReq)
	}
	rsp, err := c.grpcClient.SetSubscription(ctx, req, opts...)
	return rsp, err
}

func (c *CustomPrivateAPIGrpcClient) DoRPC(ctx context.Context, rpc string, opts ...server.CustomCallOpt) (proto.Message, error) {
	rpcFn, exists := c.rpcFns[rpc]
	if !exists {
		return nil, fmt.Errorf("Error, no such rpc %s", rpc)
	}
	cco := server.NewCustomCallOpts()
	for _, opt := range opts {
		opt(cco)
	}
	if cco.YAMLReq == "" {
		return nil, fmt.Errorf("Error, empty request body")
	}
	ctx = client.AddHdrsToCtx(cco.Headers, ctx)

	rsp, err := rpcFn(ctx, cco.YAMLReq, cco.GrpcCallOpts...)
	if err != nil {
		return nil, errors.Wrap(err, "Doing custom RPC using GRPC")
	}
	if cco.OutCallResponse != nil {
		cco.OutCallResponse.ProtoMsg = rsp
	}
	return rsp, nil
}

func NewCustomPrivateAPIGrpcClient(cc *grpc.ClientConn) server.CustomClient {
	ccl := &CustomPrivateAPIGrpcClient{
		conn:       cc,
		grpcClient: NewCustomPrivateAPIClient(cc),
	}
	rpcFns := make(map[string]func(context.Context, string, ...grpc.CallOption) (proto.Message, error))
	rpcFns["CanSubscribe"] = ccl.doRPCCanSubscribe

	rpcFns["SetSubscription"] = ccl.doRPCSetSubscription

	ccl.rpcFns = rpcFns

	return ccl
}

// Create CustomPrivateAPI REST Client satisfying server.CustomClient
type CustomPrivateAPIRestClient struct {
	baseURL string
	client  http.Client
	// map of rpc name to its invocation
	rpcFns map[string]func(context.Context, *server.CustomCallOpts) (proto.Message, error)
}

func (c *CustomPrivateAPIRestClient) doRPCCanSubscribe(ctx context.Context, callOpts *server.CustomCallOpts) (proto.Message, error) {
	if callOpts.URI == "" {
		return nil, fmt.Errorf("Error, URI should be specified, got empty")
	}
	url := fmt.Sprintf("%s%s", c.baseURL, callOpts.URI)

	yamlReq := callOpts.YAMLReq
	req := &CanSubscribeReq{}
	if err := codec.FromYAML(yamlReq, req); err != nil {
		return nil, fmt.Errorf("YAML Request %s is not of type *ves.io.schema.pbac.addon_service.CanSubscribeReq: %s", yamlReq, err)
	}

	var hReq *http.Request
	hm := strings.ToLower(callOpts.HTTPMethod)
	switch hm {
	case "post", "put":
		jsn, err := req.ToJSON()
		if err != nil {
			return nil, errors.Wrap(err, "Custom RestClient converting YAML to JSON")
		}
		var op string
		if hm == "post" {
			op = http.MethodPost
		} else {
			op = http.MethodPut
		}
		newReq, err := http.NewRequest(op, url, bytes.NewBuffer([]byte(jsn)))
		if err != nil {
			return nil, errors.Wrapf(err, "Creating new HTTP %s request for custom API", op)
		}
		hReq = newReq
	case "get":
		newReq, err := http.NewRequest(http.MethodGet, url, nil)
		if err != nil {
			return nil, errors.Wrap(err, "Creating new HTTP GET request for custom API")
		}
		hReq = newReq
		q := hReq.URL.Query()
		_ = q
		q.Add("addon_service", fmt.Sprintf("%v", req.AddonService))

		hReq.URL.RawQuery += q.Encode()
	case "delete":
		newReq, err := http.NewRequest(http.MethodDelete, url, nil)
		if err != nil {
			return nil, errors.Wrap(err, "Creating new HTTP DELETE request for custom API")
		}
		hReq = newReq
	default:
		return nil, fmt.Errorf("Error, invalid/empty HTTPMethod(%s) specified, should be POST|DELETE|GET", callOpts.HTTPMethod)
	}
	hReq = hReq.WithContext(ctx)
	hReq.Header.Set("Content-Type", "application/json")
	client.AddHdrsToReq(callOpts.Headers, hReq)

	rsp, err := c.client.Do(hReq)
	if err != nil {
		return nil, errors.Wrap(err, "Custom API RestClient")
	}
	defer rsp.Body.Close()

	if rsp.StatusCode != http.StatusOK {
		body, err := ioutil.ReadAll(rsp.Body)
		return nil, fmt.Errorf("Unsuccessful custom API %s on %s, status code %d, body %s, err %s", callOpts.HTTPMethod, callOpts.URI, rsp.StatusCode, body, err)
	}

	body, err := ioutil.ReadAll(rsp.Body)
	if err != nil {
		return nil, errors.Wrap(err, "Custom API RestClient read body")
	}
	pbRsp := &CanSubscribeResp{}
	if err := codec.FromJSON(string(body), pbRsp); err != nil {
		return nil, fmt.Errorf("JSON Response %s is not of type *ves.io.schema.pbac.addon_service.CanSubscribeResp", body)

	}
	if callOpts.OutCallResponse != nil {
		callOpts.OutCallResponse.ProtoMsg = pbRsp
		callOpts.OutCallResponse.JSON = string(body)
	}
	return pbRsp, nil
}

func (c *CustomPrivateAPIRestClient) doRPCSetSubscription(ctx context.Context, callOpts *server.CustomCallOpts) (proto.Message, error) {
	if callOpts.URI == "" {
		return nil, fmt.Errorf("Error, URI should be specified, got empty")
	}
	url := fmt.Sprintf("%s%s", c.baseURL, callOpts.URI)

	yamlReq := callOpts.YAMLReq
	req := &SetSubscriptionReq{}
	if err := codec.FromYAML(yamlReq, req); err != nil {
		return nil, fmt.Errorf("YAML Request %s is not of type *ves.io.schema.pbac.addon_service.SetSubscriptionReq: %s", yamlReq, err)
	}

	var hReq *http.Request
	hm := strings.ToLower(callOpts.HTTPMethod)
	switch hm {
	case "post", "put":
		jsn, err := req.ToJSON()
		if err != nil {
			return nil, errors.Wrap(err, "Custom RestClient converting YAML to JSON")
		}
		var op string
		if hm == "post" {
			op = http.MethodPost
		} else {
			op = http.MethodPut
		}
		newReq, err := http.NewRequest(op, url, bytes.NewBuffer([]byte(jsn)))
		if err != nil {
			return nil, errors.Wrapf(err, "Creating new HTTP %s request for custom API", op)
		}
		hReq = newReq
	case "get":
		newReq, err := http.NewRequest(http.MethodGet, url, nil)
		if err != nil {
			return nil, errors.Wrap(err, "Creating new HTTP GET request for custom API")
		}
		hReq = newReq
		q := hReq.URL.Query()
		_ = q
		q.Add("action", fmt.Sprintf("%v", req.Action))
		q.Add("addon_service", fmt.Sprintf("%v", req.AddonService))

		hReq.URL.RawQuery += q.Encode()
	case "delete":
		newReq, err := http.NewRequest(http.MethodDelete, url, nil)
		if err != nil {
			return nil, errors.Wrap(err, "Creating new HTTP DELETE request for custom API")
		}
		hReq = newReq
	default:
		return nil, fmt.Errorf("Error, invalid/empty HTTPMethod(%s) specified, should be POST|DELETE|GET", callOpts.HTTPMethod)
	}
	hReq = hReq.WithContext(ctx)
	hReq.Header.Set("Content-Type", "application/json")
	client.AddHdrsToReq(callOpts.Headers, hReq)

	rsp, err := c.client.Do(hReq)
	if err != nil {
		return nil, errors.Wrap(err, "Custom API RestClient")
	}
	defer rsp.Body.Close()

	if rsp.StatusCode != http.StatusOK {
		body, err := ioutil.ReadAll(rsp.Body)
		return nil, fmt.Errorf("Unsuccessful custom API %s on %s, status code %d, body %s, err %s", callOpts.HTTPMethod, callOpts.URI, rsp.StatusCode, body, err)
	}

	body, err := ioutil.ReadAll(rsp.Body)
	if err != nil {
		return nil, errors.Wrap(err, "Custom API RestClient read body")
	}
	pbRsp := &SetSubscriptionResp{}
	if err := codec.FromJSON(string(body), pbRsp); err != nil {
		return nil, fmt.Errorf("JSON Response %s is not of type *ves.io.schema.pbac.addon_service.SetSubscriptionResp", body)

	}
	if callOpts.OutCallResponse != nil {
		callOpts.OutCallResponse.ProtoMsg = pbRsp
		callOpts.OutCallResponse.JSON = string(body)
	}
	return pbRsp, nil
}

func (c *CustomPrivateAPIRestClient) DoRPC(ctx context.Context, rpc string, opts ...server.CustomCallOpt) (proto.Message, error) {
	rpcFn, exists := c.rpcFns[rpc]
	if !exists {
		return nil, fmt.Errorf("Error, no such rpc %s", rpc)
	}
	cco := server.NewCustomCallOpts()
	for _, opt := range opts {
		opt(cco)
	}

	rsp, err := rpcFn(ctx, cco)
	if err != nil {
		return nil, errors.Wrap(err, "Doing custom RPC using Rest")
	}
	return rsp, nil
}

func NewCustomPrivateAPIRestClient(baseURL string, hc http.Client) server.CustomClient {
	ccl := &CustomPrivateAPIRestClient{
		baseURL: baseURL,
		client:  hc,
	}

	rpcFns := make(map[string]func(context.Context, *server.CustomCallOpts) (proto.Message, error))
	rpcFns["CanSubscribe"] = ccl.doRPCCanSubscribe

	rpcFns["SetSubscription"] = ccl.doRPCSetSubscription

	ccl.rpcFns = rpcFns

	return ccl
}

// Create CustomPrivateAPIInprocClient

// INPROC Client (satisfying CustomPrivateAPIClient interface)
type CustomPrivateAPIInprocClient struct {
	svc svcfw.Service
}

func (c *CustomPrivateAPIInprocClient) CanSubscribe(ctx context.Context, in *CanSubscribeReq, opts ...grpc.CallOption) (*CanSubscribeResp, error) {
	ah := c.svc.GetAPIHandler("ves.io.schema.pbac.addon_service.CustomPrivateAPI")
	cah, ok := ah.(CustomPrivateAPIServer)
	if !ok {
		return nil, fmt.Errorf("ah %v is not of type *CustomPrivateAPISrv", ah)
	}

	var (
		rsp *CanSubscribeResp
		err error
	)

	if c.svc.Config().EnableAPIValidation {
		if rvFn := c.svc.GetRPCValidator("ves.io.schema.pbac.addon_service.CustomPrivateAPI.CanSubscribe"); rvFn != nil {
			if verr := rvFn(ctx, in); verr != nil {
				err = server.MaybePublicRestError(ctx, errors.Wrapf(verr, "Validating Request"))
				return nil, server.GRPCStatusFromError(err).Err()
			}
		}
	}

	rsp, err = cah.CanSubscribe(ctx, in)
	if err != nil {
		return rsp, server.GRPCStatusFromError(server.MaybePublicRestError(ctx, err)).Err()
	}

	return rsp, nil
}
func (c *CustomPrivateAPIInprocClient) SetSubscription(ctx context.Context, in *SetSubscriptionReq, opts ...grpc.CallOption) (*SetSubscriptionResp, error) {
	ah := c.svc.GetAPIHandler("ves.io.schema.pbac.addon_service.CustomPrivateAPI")
	cah, ok := ah.(CustomPrivateAPIServer)
	if !ok {
		return nil, fmt.Errorf("ah %v is not of type *CustomPrivateAPISrv", ah)
	}

	var (
		rsp *SetSubscriptionResp
		err error
	)

	if c.svc.Config().EnableAPIValidation {
		if rvFn := c.svc.GetRPCValidator("ves.io.schema.pbac.addon_service.CustomPrivateAPI.SetSubscription"); rvFn != nil {
			if verr := rvFn(ctx, in); verr != nil {
				err = server.MaybePublicRestError(ctx, errors.Wrapf(verr, "Validating Request"))
				return nil, server.GRPCStatusFromError(err).Err()
			}
		}
	}

	rsp, err = cah.SetSubscription(ctx, in)
	if err != nil {
		return rsp, server.GRPCStatusFromError(server.MaybePublicRestError(ctx, err)).Err()
	}

	return rsp, nil
}

func NewCustomPrivateAPIInprocClient(svc svcfw.Service) CustomPrivateAPIClient {
	return &CustomPrivateAPIInprocClient{svc: svc}
}

// RegisterGwCustomPrivateAPIHandler registers with grpc-gw with an inproc-client backing so that
// rest to grpc happens without a grpc.Dial (thus avoiding additional certs for mTLS)
func RegisterGwCustomPrivateAPIHandler(ctx context.Context, mux *runtime.ServeMux, svc interface{}) error {
	s, ok := svc.(svcfw.Service)
	if !ok {
		return fmt.Errorf("svc is not svcfw.Service")
	}
	return RegisterCustomPrivateAPIHandlerClient(ctx, mux, NewCustomPrivateAPIInprocClient(s))
}

var CustomPrivateAPISwaggerJSON string = `{
    "swagger": "2.0",
    "info": {
        "title": "Addon service custom private APIs",
        "description": "Additional private management APIs for addon_service config object.",
        "version": "version not set"
    },
    "schemes": [
        "http",
        "https"
    ],
    "consumes": [
        "application/json"
    ],
    "produces": [
        "application/json"
    ],
    "tags": null,
    "paths": {
        "/ves.io.schema/introspect/read/namespaces/system/addon_services/{addon_service}/can-subscribe": {
            "post": {
                "summary": "CanSubscribe",
                "description": "Evaluate whether addon service is allowed to subscribe or not based on current plan.",
                "operationId": "ves.io.schema.pbac.addon_service.CustomPrivateAPI.CanSubscribe",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/addon_serviceCanSubscribeResp"
                        }
                    },
                    "401": {
                        "description": "Returned when operation is not authorized",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "403": {
                        "description": "Returned when there is no permission to access resource",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "404": {
                        "description": "Returned when resource is not found",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "409": {
                        "description": "Returned when operation on resource is conflicting with current value",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "429": {
                        "description": "Returned when operation has been rejected as it is happening too frequently",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "500": {
                        "description": "Returned when server encountered an error in processing API",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "503": {
                        "description": "Returned when service is unavailable temporarily",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "504": {
                        "description": "Returned when server timed out processing request",
                        "schema": {
                            "format": "string"
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "addon_service",
                        "description": "addon_service\n\nx-example: \"addon-service-1\"\nName of the addon_service",
                        "in": "path",
                        "required": true,
                        "type": "string",
                        "x-displayname": "Addon Service"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/addon_serviceCanSubscribeReq"
                        }
                    }
                ],
                "tags": [
                    "CustomPrivateAPI"
                ],
                "externalDocs": {
                    "description": "Examples of this operation",
                    "url": "https://www.volterra.io/docs/reference/api-ref/ves-io-schema-pbac-addon_service-CustomPrivateAPI-CanSubscribe"
                },
                "x-ves-proto-rpc": "ves.io.schema.pbac.addon_service.CustomPrivateAPI.CanSubscribe"
            },
            "x-displayname": "Addon Service - UAM Manager Custom Private APIs",
            "x-ves-proto-service": "ves.io.schema.pbac.addon_service.CustomPrivateAPI",
            "x-ves-proto-service-type": "CUSTOM_PRIVATE"
        },
        "/ves.io.schema/introspect/read/namespaces/system/addon_services/{addon_service}/set-subscription": {
            "post": {
                "summary": "SetSubscription",
                "description": "Evaluate whether addon service is allowed to subscribe or not based on current plan.",
                "operationId": "ves.io.schema.pbac.addon_service.CustomPrivateAPI.SetSubscription",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/addon_serviceSetSubscriptionResp"
                        }
                    },
                    "401": {
                        "description": "Returned when operation is not authorized",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "403": {
                        "description": "Returned when there is no permission to access resource",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "404": {
                        "description": "Returned when resource is not found",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "409": {
                        "description": "Returned when operation on resource is conflicting with current value",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "429": {
                        "description": "Returned when operation has been rejected as it is happening too frequently",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "500": {
                        "description": "Returned when server encountered an error in processing API",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "503": {
                        "description": "Returned when service is unavailable temporarily",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "504": {
                        "description": "Returned when server timed out processing request",
                        "schema": {
                            "format": "string"
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "addon_service",
                        "description": "addon_service\n\nx-example: \"addon-service-1\"\nName of the addon_service",
                        "in": "path",
                        "required": true,
                        "type": "string",
                        "x-displayname": "Addon Service"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/addon_serviceSetSubscriptionReq"
                        }
                    }
                ],
                "tags": [
                    "CustomPrivateAPI"
                ],
                "externalDocs": {
                    "description": "Examples of this operation",
                    "url": "https://www.volterra.io/docs/reference/api-ref/ves-io-schema-pbac-addon_service-CustomPrivateAPI-SetSubscription"
                },
                "x-ves-proto-rpc": "ves.io.schema.pbac.addon_service.CustomPrivateAPI.SetSubscription"
            },
            "x-displayname": "Addon Service - UAM Manager Custom Private APIs",
            "x-ves-proto-service": "ves.io.schema.pbac.addon_service.CustomPrivateAPI",
            "x-ves-proto-service-type": "CUSTOM_PRIVATE"
        }
    },
    "definitions": {
        "addon_serviceCanSubscribeReq": {
            "type": "object",
            "description": "Request to check if an addon service can be subscribed.",
            "title": "CanSubscribeReq",
            "x-displayname": "Request for CanSubscribe",
            "x-ves-proto-message": "ves.io.schema.pbac.addon_service.CanSubscribeReq",
            "properties": {
                "addon_service": {
                    "type": "string",
                    "description": " Name of the addon_service \n\nExample: - \"addon-service-1\"-",
                    "title": "addon_service",
                    "x-displayname": "Addon Service",
                    "x-ves-example": "addon-service-1"
                }
            }
        },
        "addon_serviceCanSubscribeResp": {
            "type": "object",
            "description": "Response of addon service subscription check.",
            "title": "CanSubscribeResp",
            "x-displayname": "Response for CanSubscribe",
            "x-ves-proto-message": "ves.io.schema.pbac.addon_service.CanSubscribeResp",
            "properties": {
                "result": {
                    "description": " result of addon service subscription check\n\nExample: - \"AS_SUB_ALLOWED\"-",
                    "title": "access",
                    "$ref": "#/definitions/schemaAddonServiceCheckSubscribe",
                    "x-displayname": "Result",
                    "x-ves-example": "AS_SUB_ALLOWED"
                }
            }
        },
        "addon_serviceSetSubscriptionReq": {
            "type": "object",
            "description": "Request to check if an addon service can be subscribed.",
            "title": "SetSubscriptionReq",
            "x-displayname": "Request for SetSubscription",
            "x-ves-proto-message": "ves.io.schema.pbac.addon_service.SetSubscriptionReq",
            "properties": {
                "action": {
                    "description": " addon service management actions - subscribe or unsubscribe.\n\nExample: - \"AS_SUBSCRIBE\"-",
                    "title": "action",
                    "$ref": "#/definitions/schemaAddonServiceSubscribeAction",
                    "x-displayname": "Action",
                    "x-ves-example": "AS_SUBSCRIBE"
                },
                "addon_service": {
                    "type": "string",
                    "description": " Name of the addon_service \n\nExample: - \"addon-service-1\"-",
                    "title": "addon_service",
                    "x-displayname": "Addon Service",
                    "x-ves-example": "addon-service-1"
                }
            }
        },
        "addon_serviceSetSubscriptionResp": {
            "type": "object",
            "description": "Response of addon service subscription management action.",
            "title": "SetSubscriptionResp",
            "x-displayname": "Response for SetSubscription",
            "x-ves-proto-message": "ves.io.schema.pbac.addon_service.SetSubscriptionResp",
            "properties": {
                "state": {
                    "description": " current state of addon service subscription.\n\nExample: - \"AS_PENDING\"-",
                    "title": "state",
                    "$ref": "#/definitions/schemaAddonServiceState",
                    "x-displayname": "State",
                    "x-ves-example": "AS_PENDING"
                }
            }
        },
        "schemaAddonServiceCheckSubscribe": {
            "type": "string",
            "description": "subscription is allowed or not\n\nDefault check value. Check response details for more info.\nSubscription Allowed\nSubscription denied\nRequired dependent addon service missing",
            "title": "AddonServiceCheckSubscribe",
            "enum": [
                "AS_SUB_NONE",
                "AS_SUB_ALLOWED",
                "AS_SUB_DENIED",
                "AS_SUB_DEP_DENIED"
            ],
            "default": "AS_SUB_NONE",
            "x-displayname": "Addon Service Subscription Check",
            "x-ves-proto-enum": "ves.io.schema.AddonServiceCheckSubscribe"
        },
        "schemaAddonServiceState": {
            "type": "string",
            "description": "State of a service\n\ndefault state\ninitiated subscription request and is pending to activate.\nsuccessfully subscribed\nservice subscription request ended up in error state.",
            "title": "AddonServiceState",
            "enum": [
                "AS_NONE",
                "AS_PENDING",
                "AS_SUBSCRIBED",
                "AS_ERROR"
            ],
            "default": "AS_NONE",
            "x-displayname": "Addon Service State",
            "x-ves-proto-enum": "ves.io.schema.AddonServiceState"
        },
        "schemaAddonServiceSubscribeAction": {
            "type": "string",
            "description": "subscription is allowed or not\n\nSubscribe to addon service. \nThis will set service state as AS_SUBSCRIBED\nRemove addon service subscription.",
            "title": "AddonServiceCheckSubscribe",
            "enum": [
                "AS_SUBSCRIBE",
                "AS_UNSCUBSCRIBE"
            ],
            "default": "AS_SUBSCRIBE",
            "x-displayname": "Addon Service Subscription Check",
            "x-ves-proto-enum": "ves.io.schema.AddonServiceSubscribeAction"
        }
    },
    "x-displayname": "Addon Service Private APIs",
    "x-ves-proto-file": "ves.io/schema/pbac/addon_service/private_customapi_uam.proto"
}`
