// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ves.io/schema/fast_acl_rule/types.proto

package fast_acl_rule

import proto "github.com/gogo/protobuf/proto"
import golang_proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"
import ves_io_schema3 "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
import _ "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
import ves_io_schema4 "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
import _ "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
import _ "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"

import strconv "strconv"

import strings "strings"
import reflect "reflect"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// FastAclRuleSimpleAction
//
// x-displayName: "Simple Action"
// FastAclRuleSimpleAction specifies simple action like PASS or DENY
type FastAclRuleSimpleAction int32

const (
	// x-displayName: "Deny"
	// Drop the traffic
	DENY FastAclRuleSimpleAction = 0
	// x-displayName: "Allow"
	// Forward the traffic
	ALLOW FastAclRuleSimpleAction = 1
)

var FastAclRuleSimpleAction_name = map[int32]string{
	0: "DENY",
	1: "ALLOW",
}
var FastAclRuleSimpleAction_value = map[string]int32{
	"DENY":  0,
	"ALLOW": 1,
}

func (FastAclRuleSimpleAction) EnumDescriptor() ([]byte, []int) { return fileDescriptorTypes, []int{0} }

//  FastAclRuleAction
//
//  x-displayName: "Action"
//  FastAclRuleAction specifies possible action to be applied on traffic,
//  possible action include dropping, forwarding or ratelimiting the traffic
type FastAclRuleAction struct {
	// action
	//
	// x-displayName: "action"
	// The type of action to perform
	//
	// Types that are valid to be assigned to Action:
	//	*FastAclRuleAction_SimpleAction
	//	*FastAclRuleAction_PolicerAction
	//	*FastAclRuleAction_ProtocolPolicerAction
	Action isFastAclRuleAction_Action `protobuf_oneof:"action"`
}

func (m *FastAclRuleAction) Reset()                    { *m = FastAclRuleAction{} }
func (*FastAclRuleAction) ProtoMessage()               {}
func (*FastAclRuleAction) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{0} }

type isFastAclRuleAction_Action interface {
	isFastAclRuleAction_Action()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type FastAclRuleAction_SimpleAction struct {
	SimpleAction FastAclRuleSimpleAction `protobuf:"varint,1,opt,name=simple_action,json=simpleAction,proto3,enum=ves.io.schema.fast_acl_rule.FastAclRuleSimpleAction,oneof"`
}
type FastAclRuleAction_PolicerAction struct {
	PolicerAction *ves_io_schema4.PolicerRefType `protobuf:"bytes,2,opt,name=policer_action,json=policerAction,oneof"`
}
type FastAclRuleAction_ProtocolPolicerAction struct {
	ProtocolPolicerAction *ves_io_schema4.ProtocolPolicerRefType `protobuf:"bytes,3,opt,name=protocol_policer_action,json=protocolPolicerAction,oneof"`
}

func (*FastAclRuleAction_SimpleAction) isFastAclRuleAction_Action()          {}
func (*FastAclRuleAction_PolicerAction) isFastAclRuleAction_Action()         {}
func (*FastAclRuleAction_ProtocolPolicerAction) isFastAclRuleAction_Action() {}

func (m *FastAclRuleAction) GetAction() isFastAclRuleAction_Action {
	if m != nil {
		return m.Action
	}
	return nil
}

func (m *FastAclRuleAction) GetSimpleAction() FastAclRuleSimpleAction {
	if x, ok := m.GetAction().(*FastAclRuleAction_SimpleAction); ok {
		return x.SimpleAction
	}
	return DENY
}

func (m *FastAclRuleAction) GetPolicerAction() *ves_io_schema4.PolicerRefType {
	if x, ok := m.GetAction().(*FastAclRuleAction_PolicerAction); ok {
		return x.PolicerAction
	}
	return nil
}

func (m *FastAclRuleAction) GetProtocolPolicerAction() *ves_io_schema4.ProtocolPolicerRefType {
	if x, ok := m.GetAction().(*FastAclRuleAction_ProtocolPolicerAction); ok {
		return x.ProtocolPolicerAction
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*FastAclRuleAction) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _FastAclRuleAction_OneofMarshaler, _FastAclRuleAction_OneofUnmarshaler, _FastAclRuleAction_OneofSizer, []interface{}{
		(*FastAclRuleAction_SimpleAction)(nil),
		(*FastAclRuleAction_PolicerAction)(nil),
		(*FastAclRuleAction_ProtocolPolicerAction)(nil),
	}
}

func _FastAclRuleAction_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*FastAclRuleAction)
	// action
	switch x := m.Action.(type) {
	case *FastAclRuleAction_SimpleAction:
		_ = b.EncodeVarint(1<<3 | proto.WireVarint)
		_ = b.EncodeVarint(uint64(x.SimpleAction))
	case *FastAclRuleAction_PolicerAction:
		_ = b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.PolicerAction); err != nil {
			return err
		}
	case *FastAclRuleAction_ProtocolPolicerAction:
		_ = b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ProtocolPolicerAction); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("FastAclRuleAction.Action has unexpected type %T", x)
	}
	return nil
}

func _FastAclRuleAction_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*FastAclRuleAction)
	switch tag {
	case 1: // action.simple_action
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.Action = &FastAclRuleAction_SimpleAction{FastAclRuleSimpleAction(x)}
		return true, err
	case 2: // action.policer_action
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.PolicerRefType)
		err := b.DecodeMessage(msg)
		m.Action = &FastAclRuleAction_PolicerAction{msg}
		return true, err
	case 3: // action.protocol_policer_action
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.ProtocolPolicerRefType)
		err := b.DecodeMessage(msg)
		m.Action = &FastAclRuleAction_ProtocolPolicerAction{msg}
		return true, err
	default:
		return false, nil
	}
}

func _FastAclRuleAction_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*FastAclRuleAction)
	// action
	switch x := m.Action.(type) {
	case *FastAclRuleAction_SimpleAction:
		n += proto.SizeVarint(1<<3 | proto.WireVarint)
		n += proto.SizeVarint(uint64(x.SimpleAction))
	case *FastAclRuleAction_PolicerAction:
		s := proto.Size(x.PolicerAction)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *FastAclRuleAction_ProtocolPolicerAction:
		s := proto.Size(x.ProtocolPolicerAction)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// GlobalSpecType
//
// x-displayName: "Specification"
// Shape of `fast_acl_rule`
type GlobalSpecType struct {
	// action
	//
	// x-displayName: "Action"
	// x-required
	// Action to be applied if traffic matched rule (allow, deny or police)
	Action *FastAclRuleAction `protobuf:"bytes,1,opt,name=action" json:"action,omitempty"`
	// ports
	//
	// x-displayName: "Source Ports"
	// x-example: ALL / DNS / 1234
	// L4 port numbers to match
	Port []*ves_io_schema4.PortValueType `protobuf:"bytes,3,rep,name=port" json:"port,omitempty"`
	// source
	//
	// x-displayName: "Source"
	// x-required
	// IP match criteria, source can be either a prefix list or
	// reference to IP prefix set
	//
	// Types that are valid to be assigned to Source:
	//	*GlobalSpecType_Prefix
	//	*GlobalSpecType_IpPrefixSet
	Source isGlobalSpecType_Source `protobuf_oneof:"source"`
}

func (m *GlobalSpecType) Reset()                    { *m = GlobalSpecType{} }
func (*GlobalSpecType) ProtoMessage()               {}
func (*GlobalSpecType) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{1} }

type isGlobalSpecType_Source interface {
	isGlobalSpecType_Source()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type GlobalSpecType_Prefix struct {
	Prefix *ves_io_schema3.PrefixListType `protobuf:"bytes,4,opt,name=prefix,oneof"`
}
type GlobalSpecType_IpPrefixSet struct {
	IpPrefixSet *ves_io_schema4.IpPrefixSetRefType `protobuf:"bytes,5,opt,name=ip_prefix_set,json=ipPrefixSet,oneof"`
}

func (*GlobalSpecType_Prefix) isGlobalSpecType_Source()      {}
func (*GlobalSpecType_IpPrefixSet) isGlobalSpecType_Source() {}

func (m *GlobalSpecType) GetSource() isGlobalSpecType_Source {
	if m != nil {
		return m.Source
	}
	return nil
}

func (m *GlobalSpecType) GetAction() *FastAclRuleAction {
	if m != nil {
		return m.Action
	}
	return nil
}

func (m *GlobalSpecType) GetPort() []*ves_io_schema4.PortValueType {
	if m != nil {
		return m.Port
	}
	return nil
}

func (m *GlobalSpecType) GetPrefix() *ves_io_schema3.PrefixListType {
	if x, ok := m.GetSource().(*GlobalSpecType_Prefix); ok {
		return x.Prefix
	}
	return nil
}

func (m *GlobalSpecType) GetIpPrefixSet() *ves_io_schema4.IpPrefixSetRefType {
	if x, ok := m.GetSource().(*GlobalSpecType_IpPrefixSet); ok {
		return x.IpPrefixSet
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*GlobalSpecType) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _GlobalSpecType_OneofMarshaler, _GlobalSpecType_OneofUnmarshaler, _GlobalSpecType_OneofSizer, []interface{}{
		(*GlobalSpecType_Prefix)(nil),
		(*GlobalSpecType_IpPrefixSet)(nil),
	}
}

func _GlobalSpecType_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*GlobalSpecType)
	// source
	switch x := m.Source.(type) {
	case *GlobalSpecType_Prefix:
		_ = b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Prefix); err != nil {
			return err
		}
	case *GlobalSpecType_IpPrefixSet:
		_ = b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.IpPrefixSet); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("GlobalSpecType.Source has unexpected type %T", x)
	}
	return nil
}

func _GlobalSpecType_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*GlobalSpecType)
	switch tag {
	case 4: // source.prefix
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema3.PrefixListType)
		err := b.DecodeMessage(msg)
		m.Source = &GlobalSpecType_Prefix{msg}
		return true, err
	case 5: // source.ip_prefix_set
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.IpPrefixSetRefType)
		err := b.DecodeMessage(msg)
		m.Source = &GlobalSpecType_IpPrefixSet{msg}
		return true, err
	default:
		return false, nil
	}
}

func _GlobalSpecType_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*GlobalSpecType)
	// source
	switch x := m.Source.(type) {
	case *GlobalSpecType_Prefix:
		s := proto.Size(x.Prefix)
		n += proto.SizeVarint(4<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *GlobalSpecType_IpPrefixSet:
		s := proto.Size(x.IpPrefixSet)
		n += proto.SizeVarint(5<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// Create Fast ACL rule
//
// x-displayName: "Create Fast ACL Rule"
// Create a new Fast ACL rule, `fast_acl_rule` has specification to match source IP, source port and action to apply
type CreateSpecType struct {
	Action *FastAclRuleAction              `protobuf:"bytes,1,opt,name=action" json:"action,omitempty"`
	Port   []*ves_io_schema4.PortValueType `protobuf:"bytes,3,rep,name=port" json:"port,omitempty"`
	// Types that are valid to be assigned to Source:
	//	*CreateSpecType_Prefix
	//	*CreateSpecType_IpPrefixSet
	Source isCreateSpecType_Source `protobuf_oneof:"source"`
}

func (m *CreateSpecType) Reset()                    { *m = CreateSpecType{} }
func (*CreateSpecType) ProtoMessage()               {}
func (*CreateSpecType) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{2} }

type isCreateSpecType_Source interface {
	isCreateSpecType_Source()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type CreateSpecType_Prefix struct {
	Prefix *ves_io_schema3.PrefixListType `protobuf:"bytes,4,opt,name=prefix,oneof"`
}
type CreateSpecType_IpPrefixSet struct {
	IpPrefixSet *ves_io_schema4.IpPrefixSetRefType `protobuf:"bytes,5,opt,name=ip_prefix_set,json=ipPrefixSet,oneof"`
}

func (*CreateSpecType_Prefix) isCreateSpecType_Source()      {}
func (*CreateSpecType_IpPrefixSet) isCreateSpecType_Source() {}

func (m *CreateSpecType) GetSource() isCreateSpecType_Source {
	if m != nil {
		return m.Source
	}
	return nil
}

func (m *CreateSpecType) GetAction() *FastAclRuleAction {
	if m != nil {
		return m.Action
	}
	return nil
}

func (m *CreateSpecType) GetPort() []*ves_io_schema4.PortValueType {
	if m != nil {
		return m.Port
	}
	return nil
}

func (m *CreateSpecType) GetPrefix() *ves_io_schema3.PrefixListType {
	if x, ok := m.GetSource().(*CreateSpecType_Prefix); ok {
		return x.Prefix
	}
	return nil
}

func (m *CreateSpecType) GetIpPrefixSet() *ves_io_schema4.IpPrefixSetRefType {
	if x, ok := m.GetSource().(*CreateSpecType_IpPrefixSet); ok {
		return x.IpPrefixSet
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*CreateSpecType) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _CreateSpecType_OneofMarshaler, _CreateSpecType_OneofUnmarshaler, _CreateSpecType_OneofSizer, []interface{}{
		(*CreateSpecType_Prefix)(nil),
		(*CreateSpecType_IpPrefixSet)(nil),
	}
}

func _CreateSpecType_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*CreateSpecType)
	// source
	switch x := m.Source.(type) {
	case *CreateSpecType_Prefix:
		_ = b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Prefix); err != nil {
			return err
		}
	case *CreateSpecType_IpPrefixSet:
		_ = b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.IpPrefixSet); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("CreateSpecType.Source has unexpected type %T", x)
	}
	return nil
}

func _CreateSpecType_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*CreateSpecType)
	switch tag {
	case 4: // source.prefix
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema3.PrefixListType)
		err := b.DecodeMessage(msg)
		m.Source = &CreateSpecType_Prefix{msg}
		return true, err
	case 5: // source.ip_prefix_set
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.IpPrefixSetRefType)
		err := b.DecodeMessage(msg)
		m.Source = &CreateSpecType_IpPrefixSet{msg}
		return true, err
	default:
		return false, nil
	}
}

func _CreateSpecType_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*CreateSpecType)
	// source
	switch x := m.Source.(type) {
	case *CreateSpecType_Prefix:
		s := proto.Size(x.Prefix)
		n += proto.SizeVarint(4<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *CreateSpecType_IpPrefixSet:
		s := proto.Size(x.IpPrefixSet)
		n += proto.SizeVarint(5<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// Replace Fast ACL rule
//
// x-displayName: "Replace Fast ACL Rule"
// Replace a given Fast ACL rule, `fast_acl_rule` has specification to match source IP, source port, protocol and action to apply
type ReplaceSpecType struct {
	Action *FastAclRuleAction              `protobuf:"bytes,1,opt,name=action" json:"action,omitempty"`
	Port   []*ves_io_schema4.PortValueType `protobuf:"bytes,3,rep,name=port" json:"port,omitempty"`
	// Types that are valid to be assigned to Source:
	//	*ReplaceSpecType_Prefix
	//	*ReplaceSpecType_IpPrefixSet
	Source isReplaceSpecType_Source `protobuf_oneof:"source"`
}

func (m *ReplaceSpecType) Reset()                    { *m = ReplaceSpecType{} }
func (*ReplaceSpecType) ProtoMessage()               {}
func (*ReplaceSpecType) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{3} }

type isReplaceSpecType_Source interface {
	isReplaceSpecType_Source()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type ReplaceSpecType_Prefix struct {
	Prefix *ves_io_schema3.PrefixListType `protobuf:"bytes,4,opt,name=prefix,oneof"`
}
type ReplaceSpecType_IpPrefixSet struct {
	IpPrefixSet *ves_io_schema4.IpPrefixSetRefType `protobuf:"bytes,5,opt,name=ip_prefix_set,json=ipPrefixSet,oneof"`
}

func (*ReplaceSpecType_Prefix) isReplaceSpecType_Source()      {}
func (*ReplaceSpecType_IpPrefixSet) isReplaceSpecType_Source() {}

func (m *ReplaceSpecType) GetSource() isReplaceSpecType_Source {
	if m != nil {
		return m.Source
	}
	return nil
}

func (m *ReplaceSpecType) GetAction() *FastAclRuleAction {
	if m != nil {
		return m.Action
	}
	return nil
}

func (m *ReplaceSpecType) GetPort() []*ves_io_schema4.PortValueType {
	if m != nil {
		return m.Port
	}
	return nil
}

func (m *ReplaceSpecType) GetPrefix() *ves_io_schema3.PrefixListType {
	if x, ok := m.GetSource().(*ReplaceSpecType_Prefix); ok {
		return x.Prefix
	}
	return nil
}

func (m *ReplaceSpecType) GetIpPrefixSet() *ves_io_schema4.IpPrefixSetRefType {
	if x, ok := m.GetSource().(*ReplaceSpecType_IpPrefixSet); ok {
		return x.IpPrefixSet
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*ReplaceSpecType) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _ReplaceSpecType_OneofMarshaler, _ReplaceSpecType_OneofUnmarshaler, _ReplaceSpecType_OneofSizer, []interface{}{
		(*ReplaceSpecType_Prefix)(nil),
		(*ReplaceSpecType_IpPrefixSet)(nil),
	}
}

func _ReplaceSpecType_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*ReplaceSpecType)
	// source
	switch x := m.Source.(type) {
	case *ReplaceSpecType_Prefix:
		_ = b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Prefix); err != nil {
			return err
		}
	case *ReplaceSpecType_IpPrefixSet:
		_ = b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.IpPrefixSet); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("ReplaceSpecType.Source has unexpected type %T", x)
	}
	return nil
}

func _ReplaceSpecType_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*ReplaceSpecType)
	switch tag {
	case 4: // source.prefix
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema3.PrefixListType)
		err := b.DecodeMessage(msg)
		m.Source = &ReplaceSpecType_Prefix{msg}
		return true, err
	case 5: // source.ip_prefix_set
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.IpPrefixSetRefType)
		err := b.DecodeMessage(msg)
		m.Source = &ReplaceSpecType_IpPrefixSet{msg}
		return true, err
	default:
		return false, nil
	}
}

func _ReplaceSpecType_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*ReplaceSpecType)
	// source
	switch x := m.Source.(type) {
	case *ReplaceSpecType_Prefix:
		s := proto.Size(x.Prefix)
		n += proto.SizeVarint(4<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ReplaceSpecType_IpPrefixSet:
		s := proto.Size(x.IpPrefixSet)
		n += proto.SizeVarint(5<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// Get Fast ACL rule
//
// x-displayName: "Get Fast ACL Rule"
// Get a Fast ACL rule
type GetSpecType struct {
	Action *FastAclRuleAction              `protobuf:"bytes,1,opt,name=action" json:"action,omitempty"`
	Port   []*ves_io_schema4.PortValueType `protobuf:"bytes,3,rep,name=port" json:"port,omitempty"`
	// Types that are valid to be assigned to Source:
	//	*GetSpecType_Prefix
	//	*GetSpecType_IpPrefixSet
	Source isGetSpecType_Source `protobuf_oneof:"source"`
}

func (m *GetSpecType) Reset()                    { *m = GetSpecType{} }
func (*GetSpecType) ProtoMessage()               {}
func (*GetSpecType) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{4} }

type isGetSpecType_Source interface {
	isGetSpecType_Source()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type GetSpecType_Prefix struct {
	Prefix *ves_io_schema3.PrefixListType `protobuf:"bytes,4,opt,name=prefix,oneof"`
}
type GetSpecType_IpPrefixSet struct {
	IpPrefixSet *ves_io_schema4.IpPrefixSetRefType `protobuf:"bytes,5,opt,name=ip_prefix_set,json=ipPrefixSet,oneof"`
}

func (*GetSpecType_Prefix) isGetSpecType_Source()      {}
func (*GetSpecType_IpPrefixSet) isGetSpecType_Source() {}

func (m *GetSpecType) GetSource() isGetSpecType_Source {
	if m != nil {
		return m.Source
	}
	return nil
}

func (m *GetSpecType) GetAction() *FastAclRuleAction {
	if m != nil {
		return m.Action
	}
	return nil
}

func (m *GetSpecType) GetPort() []*ves_io_schema4.PortValueType {
	if m != nil {
		return m.Port
	}
	return nil
}

func (m *GetSpecType) GetPrefix() *ves_io_schema3.PrefixListType {
	if x, ok := m.GetSource().(*GetSpecType_Prefix); ok {
		return x.Prefix
	}
	return nil
}

func (m *GetSpecType) GetIpPrefixSet() *ves_io_schema4.IpPrefixSetRefType {
	if x, ok := m.GetSource().(*GetSpecType_IpPrefixSet); ok {
		return x.IpPrefixSet
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*GetSpecType) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _GetSpecType_OneofMarshaler, _GetSpecType_OneofUnmarshaler, _GetSpecType_OneofSizer, []interface{}{
		(*GetSpecType_Prefix)(nil),
		(*GetSpecType_IpPrefixSet)(nil),
	}
}

func _GetSpecType_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*GetSpecType)
	// source
	switch x := m.Source.(type) {
	case *GetSpecType_Prefix:
		_ = b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Prefix); err != nil {
			return err
		}
	case *GetSpecType_IpPrefixSet:
		_ = b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.IpPrefixSet); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("GetSpecType.Source has unexpected type %T", x)
	}
	return nil
}

func _GetSpecType_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*GetSpecType)
	switch tag {
	case 4: // source.prefix
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema3.PrefixListType)
		err := b.DecodeMessage(msg)
		m.Source = &GetSpecType_Prefix{msg}
		return true, err
	case 5: // source.ip_prefix_set
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.IpPrefixSetRefType)
		err := b.DecodeMessage(msg)
		m.Source = &GetSpecType_IpPrefixSet{msg}
		return true, err
	default:
		return false, nil
	}
}

func _GetSpecType_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*GetSpecType)
	// source
	switch x := m.Source.(type) {
	case *GetSpecType_Prefix:
		s := proto.Size(x.Prefix)
		n += proto.SizeVarint(4<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *GetSpecType_IpPrefixSet:
		s := proto.Size(x.IpPrefixSet)
		n += proto.SizeVarint(5<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

func init() {
	proto.RegisterType((*FastAclRuleAction)(nil), "ves.io.schema.fast_acl_rule.FastAclRuleAction")
	golang_proto.RegisterType((*FastAclRuleAction)(nil), "ves.io.schema.fast_acl_rule.FastAclRuleAction")
	proto.RegisterType((*GlobalSpecType)(nil), "ves.io.schema.fast_acl_rule.GlobalSpecType")
	golang_proto.RegisterType((*GlobalSpecType)(nil), "ves.io.schema.fast_acl_rule.GlobalSpecType")
	proto.RegisterType((*CreateSpecType)(nil), "ves.io.schema.fast_acl_rule.CreateSpecType")
	golang_proto.RegisterType((*CreateSpecType)(nil), "ves.io.schema.fast_acl_rule.CreateSpecType")
	proto.RegisterType((*ReplaceSpecType)(nil), "ves.io.schema.fast_acl_rule.ReplaceSpecType")
	golang_proto.RegisterType((*ReplaceSpecType)(nil), "ves.io.schema.fast_acl_rule.ReplaceSpecType")
	proto.RegisterType((*GetSpecType)(nil), "ves.io.schema.fast_acl_rule.GetSpecType")
	golang_proto.RegisterType((*GetSpecType)(nil), "ves.io.schema.fast_acl_rule.GetSpecType")
	proto.RegisterEnum("ves.io.schema.fast_acl_rule.FastAclRuleSimpleAction", FastAclRuleSimpleAction_name, FastAclRuleSimpleAction_value)
	golang_proto.RegisterEnum("ves.io.schema.fast_acl_rule.FastAclRuleSimpleAction", FastAclRuleSimpleAction_name, FastAclRuleSimpleAction_value)
}
func (x FastAclRuleSimpleAction) String() string {
	s, ok := FastAclRuleSimpleAction_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *FastAclRuleAction) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*FastAclRuleAction)
	if !ok {
		that2, ok := that.(FastAclRuleAction)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.Action == nil {
		if this.Action != nil {
			return false
		}
	} else if this.Action == nil {
		return false
	} else if !this.Action.Equal(that1.Action) {
		return false
	}
	return true
}
func (this *FastAclRuleAction_SimpleAction) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*FastAclRuleAction_SimpleAction)
	if !ok {
		that2, ok := that.(FastAclRuleAction_SimpleAction)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.SimpleAction != that1.SimpleAction {
		return false
	}
	return true
}
func (this *FastAclRuleAction_PolicerAction) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*FastAclRuleAction_PolicerAction)
	if !ok {
		that2, ok := that.(FastAclRuleAction_PolicerAction)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.PolicerAction.Equal(that1.PolicerAction) {
		return false
	}
	return true
}
func (this *FastAclRuleAction_ProtocolPolicerAction) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*FastAclRuleAction_ProtocolPolicerAction)
	if !ok {
		that2, ok := that.(FastAclRuleAction_ProtocolPolicerAction)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ProtocolPolicerAction.Equal(that1.ProtocolPolicerAction) {
		return false
	}
	return true
}
func (this *GlobalSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType)
	if !ok {
		that2, ok := that.(GlobalSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Action.Equal(that1.Action) {
		return false
	}
	if len(this.Port) != len(that1.Port) {
		return false
	}
	for i := range this.Port {
		if !this.Port[i].Equal(that1.Port[i]) {
			return false
		}
	}
	if that1.Source == nil {
		if this.Source != nil {
			return false
		}
	} else if this.Source == nil {
		return false
	} else if !this.Source.Equal(that1.Source) {
		return false
	}
	return true
}
func (this *GlobalSpecType_Prefix) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_Prefix)
	if !ok {
		that2, ok := that.(GlobalSpecType_Prefix)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Prefix.Equal(that1.Prefix) {
		return false
	}
	return true
}
func (this *GlobalSpecType_IpPrefixSet) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_IpPrefixSet)
	if !ok {
		that2, ok := that.(GlobalSpecType_IpPrefixSet)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.IpPrefixSet.Equal(that1.IpPrefixSet) {
		return false
	}
	return true
}
func (this *CreateSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType)
	if !ok {
		that2, ok := that.(CreateSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Action.Equal(that1.Action) {
		return false
	}
	if len(this.Port) != len(that1.Port) {
		return false
	}
	for i := range this.Port {
		if !this.Port[i].Equal(that1.Port[i]) {
			return false
		}
	}
	if that1.Source == nil {
		if this.Source != nil {
			return false
		}
	} else if this.Source == nil {
		return false
	} else if !this.Source.Equal(that1.Source) {
		return false
	}
	return true
}
func (this *CreateSpecType_Prefix) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_Prefix)
	if !ok {
		that2, ok := that.(CreateSpecType_Prefix)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Prefix.Equal(that1.Prefix) {
		return false
	}
	return true
}
func (this *CreateSpecType_IpPrefixSet) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_IpPrefixSet)
	if !ok {
		that2, ok := that.(CreateSpecType_IpPrefixSet)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.IpPrefixSet.Equal(that1.IpPrefixSet) {
		return false
	}
	return true
}
func (this *ReplaceSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType)
	if !ok {
		that2, ok := that.(ReplaceSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Action.Equal(that1.Action) {
		return false
	}
	if len(this.Port) != len(that1.Port) {
		return false
	}
	for i := range this.Port {
		if !this.Port[i].Equal(that1.Port[i]) {
			return false
		}
	}
	if that1.Source == nil {
		if this.Source != nil {
			return false
		}
	} else if this.Source == nil {
		return false
	} else if !this.Source.Equal(that1.Source) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_Prefix) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_Prefix)
	if !ok {
		that2, ok := that.(ReplaceSpecType_Prefix)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Prefix.Equal(that1.Prefix) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_IpPrefixSet) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_IpPrefixSet)
	if !ok {
		that2, ok := that.(ReplaceSpecType_IpPrefixSet)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.IpPrefixSet.Equal(that1.IpPrefixSet) {
		return false
	}
	return true
}
func (this *GetSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType)
	if !ok {
		that2, ok := that.(GetSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Action.Equal(that1.Action) {
		return false
	}
	if len(this.Port) != len(that1.Port) {
		return false
	}
	for i := range this.Port {
		if !this.Port[i].Equal(that1.Port[i]) {
			return false
		}
	}
	if that1.Source == nil {
		if this.Source != nil {
			return false
		}
	} else if this.Source == nil {
		return false
	} else if !this.Source.Equal(that1.Source) {
		return false
	}
	return true
}
func (this *GetSpecType_Prefix) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_Prefix)
	if !ok {
		that2, ok := that.(GetSpecType_Prefix)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Prefix.Equal(that1.Prefix) {
		return false
	}
	return true
}
func (this *GetSpecType_IpPrefixSet) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_IpPrefixSet)
	if !ok {
		that2, ok := that.(GetSpecType_IpPrefixSet)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.IpPrefixSet.Equal(that1.IpPrefixSet) {
		return false
	}
	return true
}
func (this *FastAclRuleAction) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&fast_acl_rule.FastAclRuleAction{")
	if this.Action != nil {
		s = append(s, "Action: "+fmt.Sprintf("%#v", this.Action)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *FastAclRuleAction_SimpleAction) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&fast_acl_rule.FastAclRuleAction_SimpleAction{` +
		`SimpleAction:` + fmt.Sprintf("%#v", this.SimpleAction) + `}`}, ", ")
	return s
}
func (this *FastAclRuleAction_PolicerAction) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&fast_acl_rule.FastAclRuleAction_PolicerAction{` +
		`PolicerAction:` + fmt.Sprintf("%#v", this.PolicerAction) + `}`}, ", ")
	return s
}
func (this *FastAclRuleAction_ProtocolPolicerAction) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&fast_acl_rule.FastAclRuleAction_ProtocolPolicerAction{` +
		`ProtocolPolicerAction:` + fmt.Sprintf("%#v", this.ProtocolPolicerAction) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&fast_acl_rule.GlobalSpecType{")
	if this.Action != nil {
		s = append(s, "Action: "+fmt.Sprintf("%#v", this.Action)+",\n")
	}
	if this.Port != nil {
		s = append(s, "Port: "+fmt.Sprintf("%#v", this.Port)+",\n")
	}
	if this.Source != nil {
		s = append(s, "Source: "+fmt.Sprintf("%#v", this.Source)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GlobalSpecType_Prefix) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&fast_acl_rule.GlobalSpecType_Prefix{` +
		`Prefix:` + fmt.Sprintf("%#v", this.Prefix) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_IpPrefixSet) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&fast_acl_rule.GlobalSpecType_IpPrefixSet{` +
		`IpPrefixSet:` + fmt.Sprintf("%#v", this.IpPrefixSet) + `}`}, ", ")
	return s
}
func (this *CreateSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&fast_acl_rule.CreateSpecType{")
	if this.Action != nil {
		s = append(s, "Action: "+fmt.Sprintf("%#v", this.Action)+",\n")
	}
	if this.Port != nil {
		s = append(s, "Port: "+fmt.Sprintf("%#v", this.Port)+",\n")
	}
	if this.Source != nil {
		s = append(s, "Source: "+fmt.Sprintf("%#v", this.Source)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CreateSpecType_Prefix) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&fast_acl_rule.CreateSpecType_Prefix{` +
		`Prefix:` + fmt.Sprintf("%#v", this.Prefix) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_IpPrefixSet) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&fast_acl_rule.CreateSpecType_IpPrefixSet{` +
		`IpPrefixSet:` + fmt.Sprintf("%#v", this.IpPrefixSet) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&fast_acl_rule.ReplaceSpecType{")
	if this.Action != nil {
		s = append(s, "Action: "+fmt.Sprintf("%#v", this.Action)+",\n")
	}
	if this.Port != nil {
		s = append(s, "Port: "+fmt.Sprintf("%#v", this.Port)+",\n")
	}
	if this.Source != nil {
		s = append(s, "Source: "+fmt.Sprintf("%#v", this.Source)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ReplaceSpecType_Prefix) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&fast_acl_rule.ReplaceSpecType_Prefix{` +
		`Prefix:` + fmt.Sprintf("%#v", this.Prefix) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_IpPrefixSet) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&fast_acl_rule.ReplaceSpecType_IpPrefixSet{` +
		`IpPrefixSet:` + fmt.Sprintf("%#v", this.IpPrefixSet) + `}`}, ", ")
	return s
}
func (this *GetSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&fast_acl_rule.GetSpecType{")
	if this.Action != nil {
		s = append(s, "Action: "+fmt.Sprintf("%#v", this.Action)+",\n")
	}
	if this.Port != nil {
		s = append(s, "Port: "+fmt.Sprintf("%#v", this.Port)+",\n")
	}
	if this.Source != nil {
		s = append(s, "Source: "+fmt.Sprintf("%#v", this.Source)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetSpecType_Prefix) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&fast_acl_rule.GetSpecType_Prefix{` +
		`Prefix:` + fmt.Sprintf("%#v", this.Prefix) + `}`}, ", ")
	return s
}
func (this *GetSpecType_IpPrefixSet) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&fast_acl_rule.GetSpecType_IpPrefixSet{` +
		`IpPrefixSet:` + fmt.Sprintf("%#v", this.IpPrefixSet) + `}`}, ", ")
	return s
}
func valueToGoStringTypes(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *FastAclRuleAction) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FastAclRuleAction) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Action != nil {
		nn1, err := m.Action.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn1
	}
	return i, nil
}

func (m *FastAclRuleAction_SimpleAction) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x8
	i++
	i = encodeVarintTypes(dAtA, i, uint64(m.SimpleAction))
	return i, nil
}
func (m *FastAclRuleAction_PolicerAction) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.PolicerAction != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.PolicerAction.Size()))
		n2, err := m.PolicerAction.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	return i, nil
}
func (m *FastAclRuleAction_ProtocolPolicerAction) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.ProtocolPolicerAction != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.ProtocolPolicerAction.Size()))
		n3, err := m.ProtocolPolicerAction.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	return i, nil
}
func (m *GlobalSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GlobalSpecType) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Action != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.Action.Size()))
		n4, err := m.Action.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	if len(m.Port) > 0 {
		for _, msg := range m.Port {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintTypes(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Source != nil {
		nn5, err := m.Source.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn5
	}
	return i, nil
}

func (m *GlobalSpecType_Prefix) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Prefix != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.Prefix.Size()))
		n6, err := m.Prefix.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	return i, nil
}
func (m *GlobalSpecType_IpPrefixSet) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.IpPrefixSet != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.IpPrefixSet.Size()))
		n7, err := m.IpPrefixSet.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	return i, nil
}
func (m *CreateSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateSpecType) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Action != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.Action.Size()))
		n8, err := m.Action.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n8
	}
	if len(m.Port) > 0 {
		for _, msg := range m.Port {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintTypes(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Source != nil {
		nn9, err := m.Source.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn9
	}
	return i, nil
}

func (m *CreateSpecType_Prefix) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Prefix != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.Prefix.Size()))
		n10, err := m.Prefix.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n10
	}
	return i, nil
}
func (m *CreateSpecType_IpPrefixSet) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.IpPrefixSet != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.IpPrefixSet.Size()))
		n11, err := m.IpPrefixSet.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n11
	}
	return i, nil
}
func (m *ReplaceSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplaceSpecType) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Action != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.Action.Size()))
		n12, err := m.Action.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n12
	}
	if len(m.Port) > 0 {
		for _, msg := range m.Port {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintTypes(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Source != nil {
		nn13, err := m.Source.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn13
	}
	return i, nil
}

func (m *ReplaceSpecType_Prefix) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Prefix != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.Prefix.Size()))
		n14, err := m.Prefix.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n14
	}
	return i, nil
}
func (m *ReplaceSpecType_IpPrefixSet) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.IpPrefixSet != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.IpPrefixSet.Size()))
		n15, err := m.IpPrefixSet.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n15
	}
	return i, nil
}
func (m *GetSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetSpecType) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Action != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.Action.Size()))
		n16, err := m.Action.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n16
	}
	if len(m.Port) > 0 {
		for _, msg := range m.Port {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintTypes(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Source != nil {
		nn17, err := m.Source.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn17
	}
	return i, nil
}

func (m *GetSpecType_Prefix) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Prefix != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.Prefix.Size()))
		n18, err := m.Prefix.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n18
	}
	return i, nil
}
func (m *GetSpecType_IpPrefixSet) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.IpPrefixSet != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.IpPrefixSet.Size()))
		n19, err := m.IpPrefixSet.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n19
	}
	return i, nil
}
func encodeVarintTypes(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *FastAclRuleAction) Size() (n int) {
	var l int
	_ = l
	if m.Action != nil {
		n += m.Action.Size()
	}
	return n
}

func (m *FastAclRuleAction_SimpleAction) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovTypes(uint64(m.SimpleAction))
	return n
}
func (m *FastAclRuleAction_PolicerAction) Size() (n int) {
	var l int
	_ = l
	if m.PolicerAction != nil {
		l = m.PolicerAction.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *FastAclRuleAction_ProtocolPolicerAction) Size() (n int) {
	var l int
	_ = l
	if m.ProtocolPolicerAction != nil {
		l = m.ProtocolPolicerAction.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType) Size() (n int) {
	var l int
	_ = l
	if m.Action != nil {
		l = m.Action.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if len(m.Port) > 0 {
		for _, e := range m.Port {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if m.Source != nil {
		n += m.Source.Size()
	}
	return n
}

func (m *GlobalSpecType_Prefix) Size() (n int) {
	var l int
	_ = l
	if m.Prefix != nil {
		l = m.Prefix.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_IpPrefixSet) Size() (n int) {
	var l int
	_ = l
	if m.IpPrefixSet != nil {
		l = m.IpPrefixSet.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType) Size() (n int) {
	var l int
	_ = l
	if m.Action != nil {
		l = m.Action.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if len(m.Port) > 0 {
		for _, e := range m.Port {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if m.Source != nil {
		n += m.Source.Size()
	}
	return n
}

func (m *CreateSpecType_Prefix) Size() (n int) {
	var l int
	_ = l
	if m.Prefix != nil {
		l = m.Prefix.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_IpPrefixSet) Size() (n int) {
	var l int
	_ = l
	if m.IpPrefixSet != nil {
		l = m.IpPrefixSet.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType) Size() (n int) {
	var l int
	_ = l
	if m.Action != nil {
		l = m.Action.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if len(m.Port) > 0 {
		for _, e := range m.Port {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if m.Source != nil {
		n += m.Source.Size()
	}
	return n
}

func (m *ReplaceSpecType_Prefix) Size() (n int) {
	var l int
	_ = l
	if m.Prefix != nil {
		l = m.Prefix.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_IpPrefixSet) Size() (n int) {
	var l int
	_ = l
	if m.IpPrefixSet != nil {
		l = m.IpPrefixSet.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType) Size() (n int) {
	var l int
	_ = l
	if m.Action != nil {
		l = m.Action.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if len(m.Port) > 0 {
		for _, e := range m.Port {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if m.Source != nil {
		n += m.Source.Size()
	}
	return n
}

func (m *GetSpecType_Prefix) Size() (n int) {
	var l int
	_ = l
	if m.Prefix != nil {
		l = m.Prefix.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_IpPrefixSet) Size() (n int) {
	var l int
	_ = l
	if m.IpPrefixSet != nil {
		l = m.IpPrefixSet.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func sovTypes(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozTypes(x uint64) (n int) {
	return sovTypes(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *FastAclRuleAction) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&FastAclRuleAction{`,
		`Action:` + fmt.Sprintf("%v", this.Action) + `,`,
		`}`,
	}, "")
	return s
}
func (this *FastAclRuleAction_SimpleAction) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&FastAclRuleAction_SimpleAction{`,
		`SimpleAction:` + fmt.Sprintf("%v", this.SimpleAction) + `,`,
		`}`,
	}, "")
	return s
}
func (this *FastAclRuleAction_PolicerAction) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&FastAclRuleAction_PolicerAction{`,
		`PolicerAction:` + strings.Replace(fmt.Sprintf("%v", this.PolicerAction), "PolicerRefType", "ves_io_schema4.PolicerRefType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *FastAclRuleAction_ProtocolPolicerAction) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&FastAclRuleAction_ProtocolPolicerAction{`,
		`ProtocolPolicerAction:` + strings.Replace(fmt.Sprintf("%v", this.ProtocolPolicerAction), "ProtocolPolicerRefType", "ves_io_schema4.ProtocolPolicerRefType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType{`,
		`Action:` + strings.Replace(fmt.Sprintf("%v", this.Action), "FastAclRuleAction", "FastAclRuleAction", 1) + `,`,
		`Port:` + strings.Replace(fmt.Sprintf("%v", this.Port), "PortValueType", "ves_io_schema4.PortValueType", 1) + `,`,
		`Source:` + fmt.Sprintf("%v", this.Source) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_Prefix) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_Prefix{`,
		`Prefix:` + strings.Replace(fmt.Sprintf("%v", this.Prefix), "PrefixListType", "ves_io_schema3.PrefixListType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_IpPrefixSet) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_IpPrefixSet{`,
		`IpPrefixSet:` + strings.Replace(fmt.Sprintf("%v", this.IpPrefixSet), "IpPrefixSetRefType", "ves_io_schema4.IpPrefixSetRefType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType{`,
		`Action:` + strings.Replace(fmt.Sprintf("%v", this.Action), "FastAclRuleAction", "FastAclRuleAction", 1) + `,`,
		`Port:` + strings.Replace(fmt.Sprintf("%v", this.Port), "PortValueType", "ves_io_schema4.PortValueType", 1) + `,`,
		`Source:` + fmt.Sprintf("%v", this.Source) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_Prefix) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_Prefix{`,
		`Prefix:` + strings.Replace(fmt.Sprintf("%v", this.Prefix), "PrefixListType", "ves_io_schema3.PrefixListType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_IpPrefixSet) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_IpPrefixSet{`,
		`IpPrefixSet:` + strings.Replace(fmt.Sprintf("%v", this.IpPrefixSet), "IpPrefixSetRefType", "ves_io_schema4.IpPrefixSetRefType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType{`,
		`Action:` + strings.Replace(fmt.Sprintf("%v", this.Action), "FastAclRuleAction", "FastAclRuleAction", 1) + `,`,
		`Port:` + strings.Replace(fmt.Sprintf("%v", this.Port), "PortValueType", "ves_io_schema4.PortValueType", 1) + `,`,
		`Source:` + fmt.Sprintf("%v", this.Source) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_Prefix) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_Prefix{`,
		`Prefix:` + strings.Replace(fmt.Sprintf("%v", this.Prefix), "PrefixListType", "ves_io_schema3.PrefixListType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_IpPrefixSet) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_IpPrefixSet{`,
		`IpPrefixSet:` + strings.Replace(fmt.Sprintf("%v", this.IpPrefixSet), "IpPrefixSetRefType", "ves_io_schema4.IpPrefixSetRefType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType{`,
		`Action:` + strings.Replace(fmt.Sprintf("%v", this.Action), "FastAclRuleAction", "FastAclRuleAction", 1) + `,`,
		`Port:` + strings.Replace(fmt.Sprintf("%v", this.Port), "PortValueType", "ves_io_schema4.PortValueType", 1) + `,`,
		`Source:` + fmt.Sprintf("%v", this.Source) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_Prefix) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_Prefix{`,
		`Prefix:` + strings.Replace(fmt.Sprintf("%v", this.Prefix), "PrefixListType", "ves_io_schema3.PrefixListType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_IpPrefixSet) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_IpPrefixSet{`,
		`IpPrefixSet:` + strings.Replace(fmt.Sprintf("%v", this.IpPrefixSet), "IpPrefixSetRefType", "ves_io_schema4.IpPrefixSetRefType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringTypes(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *FastAclRuleAction) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FastAclRuleAction: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FastAclRuleAction: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SimpleAction", wireType)
			}
			var v FastAclRuleSimpleAction
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (FastAclRuleSimpleAction(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Action = &FastAclRuleAction_SimpleAction{v}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PolicerAction", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.PolicerRefType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Action = &FastAclRuleAction_PolicerAction{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProtocolPolicerAction", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.ProtocolPolicerRefType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Action = &FastAclRuleAction_ProtocolPolicerAction{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GlobalSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GlobalSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GlobalSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Action", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Action == nil {
				m.Action = &FastAclRuleAction{}
			}
			if err := m.Action.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Port", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Port = append(m.Port, &ves_io_schema4.PortValueType{})
			if err := m.Port[len(m.Port)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Prefix", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema3.PrefixListType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Source = &GlobalSpecType_Prefix{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IpPrefixSet", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.IpPrefixSetRefType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Source = &GlobalSpecType_IpPrefixSet{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Action", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Action == nil {
				m.Action = &FastAclRuleAction{}
			}
			if err := m.Action.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Port", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Port = append(m.Port, &ves_io_schema4.PortValueType{})
			if err := m.Port[len(m.Port)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Prefix", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema3.PrefixListType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Source = &CreateSpecType_Prefix{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IpPrefixSet", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.IpPrefixSetRefType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Source = &CreateSpecType_IpPrefixSet{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplaceSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplaceSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplaceSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Action", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Action == nil {
				m.Action = &FastAclRuleAction{}
			}
			if err := m.Action.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Port", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Port = append(m.Port, &ves_io_schema4.PortValueType{})
			if err := m.Port[len(m.Port)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Prefix", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema3.PrefixListType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Source = &ReplaceSpecType_Prefix{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IpPrefixSet", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.IpPrefixSetRefType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Source = &ReplaceSpecType_IpPrefixSet{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Action", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Action == nil {
				m.Action = &FastAclRuleAction{}
			}
			if err := m.Action.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Port", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Port = append(m.Port, &ves_io_schema4.PortValueType{})
			if err := m.Port[len(m.Port)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Prefix", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema3.PrefixListType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Source = &GetSpecType_Prefix{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IpPrefixSet", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.IpPrefixSetRefType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Source = &GetSpecType_IpPrefixSet{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTypes(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthTypes
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipTypes(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthTypes = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTypes   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("ves.io/schema/fast_acl_rule/types.proto", fileDescriptorTypes) }
func init() {
	golang_proto.RegisterFile("ves.io/schema/fast_acl_rule/types.proto", fileDescriptorTypes)
}

var fileDescriptorTypes = []byte{
	// 669 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x95, 0xbf, 0x6f, 0xd3, 0x4c,
	0x18, 0xc7, 0x7d, 0x8e, 0x93, 0x37, 0xef, 0xe5, 0x6d, 0xde, 0xd4, 0x7a, 0x5f, 0x35, 0xa4, 0xe5,
	0x14, 0x22, 0x21, 0x2a, 0xd4, 0xda, 0x90, 0x22, 0x90, 0x90, 0xa8, 0xd4, 0x00, 0x6d, 0xa9, 0x2a,
	0x7e, 0xb8, 0x08, 0x04, 0x0c, 0x96, 0xe3, 0x5e, 0x52, 0x8b, 0x4b, 0xef, 0x74, 0x3e, 0x87, 0x76,
	0xab, 0x58, 0x58, 0x11, 0x7f, 0x05, 0x33, 0x08, 0x06, 0xba, 0x54, 0x62, 0x41, 0x4c, 0x19, 0x3b,
	0x52, 0x77, 0x81, 0xad, 0x62, 0x64, 0x42, 0x39, 0x3b, 0xb4, 0x4e, 0x0b, 0x6a, 0x25, 0x06, 0x86,
	0x6e, 0xf7, 0xf8, 0xfb, 0x7d, 0xbe, 0xcf, 0xdd, 0x47, 0xd6, 0x1d, 0x3c, 0xd3, 0xc6, 0xbe, 0xe1,
	0x51, 0xd3, 0x77, 0x97, 0x70, 0xcb, 0x31, 0x1b, 0x8e, 0x2f, 0x6c, 0xc7, 0x25, 0x36, 0x0f, 0x08,
	0x36, 0xc5, 0x2a, 0xc3, 0xbe, 0xc1, 0x38, 0x15, 0x54, 0x1f, 0x8e, 0x8c, 0x46, 0x64, 0x34, 0x12,
	0xc6, 0xd2, 0x78, 0xd3, 0x13, 0x4b, 0x41, 0xdd, 0x70, 0x69, 0xcb, 0x6c, 0xd2, 0x26, 0x35, 0x65,
	0x4f, 0x3d, 0x68, 0xc8, 0x4a, 0x16, 0x72, 0x15, 0x65, 0x95, 0x86, 0x92, 0x43, 0x97, 0xb1, 0x88,
	0x85, 0xe1, 0xa4, 0x40, 0x99, 0xf0, 0xe8, 0x72, 0xbc, 0x83, 0xd2, 0x89, 0xa4, 0xb8, 0x67, 0x73,
	0xa5, 0x91, 0xa4, 0xd4, 0x76, 0x88, 0xb7, 0xe8, 0x08, 0x1c, 0xab, 0xe5, 0x3e, 0xd5, 0xc3, 0x4f,
	0xec, 0x44, 0x74, 0xe5, 0xb5, 0x0a, 0x07, 0xa7, 0x1d, 0x5f, 0x4c, 0xb9, 0xc4, 0x0a, 0x08, 0x9e,
	0x72, 0xbb, 0xa2, 0xfe, 0x08, 0x0e, 0xf8, 0x5e, 0x8b, 0x11, 0x6c, 0x3b, 0xf2, 0x43, 0x11, 0x94,
	0xc1, 0x68, 0xbe, 0x7a, 0xc1, 0xf8, 0x05, 0x0a, 0x63, 0x4f, 0xcc, 0x82, 0x6c, 0x8e, 0xc2, 0x66,
	0x15, 0xeb, 0x1f, 0x7f, 0x4f, 0xad, 0x4f, 0xc3, 0x3c, 0xa3, 0xc4, 0x73, 0x31, 0xef, 0xa5, 0xab,
	0x65, 0x30, 0x9a, 0xab, 0x9e, 0xec, 0x4b, 0xbf, 0x1d, 0x99, 0x2c, 0xdc, 0xb8, 0xbb, 0xca, 0xf0,
	0xac, 0x62, 0x0d, 0xc4, 0x6d, 0x71, 0x8e, 0x0d, 0x87, 0xe4, 0x19, 0x5c, 0x4a, 0xec, 0xbe, 0xc0,
	0x94, 0x0c, 0x3c, 0xdd, 0x1f, 0x18, 0xbb, 0xf7, 0x05, 0xff, 0xcf, 0x92, 0x4a, 0x34, 0xa0, 0xa6,
	0xc3, 0x4c, 0x94, 0xa7, 0x67, 0x37, 0xd6, 0x01, 0xe8, 0xac, 0x03, 0x6d, 0x4e, 0xcb, 0x6a, 0x85,
	0x74, 0xe5, 0xbd, 0x0a, 0xf3, 0x33, 0x84, 0xd6, 0x1d, 0xb2, 0xc0, 0xb0, 0xdb, 0x4d, 0xd1, 0xa7,
	0x7b, 0x66, 0xc9, 0x2a, 0x57, 0x35, 0x0e, 0xcb, 0x2a, 0x1a, 0x66, 0xf5, 0x46, 0x5d, 0x81, 0x1a,
	0xa3, 0x5c, 0x14, 0x53, 0xe5, 0xd4, 0x68, 0xae, 0x3a, 0xb2, 0x8f, 0x09, 0x17, 0xf7, 0x1c, 0x12,
	0xe0, 0xee, 0xcc, 0x5a, 0xee, 0xdd, 0x97, 0x8d, 0x54, 0xe6, 0x05, 0x48, 0x15, 0xd6, 0x80, 0x25,
	0xdb, 0xf4, 0x4b, 0x30, 0xc3, 0x38, 0x6e, 0x78, 0x2b, 0x45, 0xed, 0x60, 0xa8, 0x52, 0x9c, 0xf7,
	0x7c, 0x11, 0x9f, 0x3d, 0xb6, 0xeb, 0x33, 0x70, 0xc0, 0x63, 0x76, 0x54, 0xd8, 0x3e, 0x16, 0xc5,
	0xb4, 0xec, 0x3f, 0xd5, 0xd7, 0x7f, 0x83, 0x45, 0x09, 0x0b, 0x58, 0xec, 0xf2, 0xcb, 0x79, 0xbb,
	0x5f, 0x2f, 0x67, 0xbf, 0x4e, 0xa6, 0x2f, 0x8e, 0x4d, 0x8c, 0x9d, 0xef, 0xf2, 0xf3, 0x69, 0xc0,
	0x5d, 0x2c, 0xf9, 0x69, 0x9d, 0x75, 0x90, 0x99, 0xd3, 0xb2, 0x6a, 0x21, 0x35, 0xa7, 0x65, 0x33,
	0x85, 0xbf, 0x2a, 0x6f, 0x54, 0x98, 0xbf, 0xca, 0xb1, 0x23, 0xf0, 0x6f, 0xa7, 0x78, 0xee, 0xf0,
	0x14, 0xff, 0x18, 0x70, 0x83, 0x1f, 0x27, 0xfb, 0x7e, 0xaa, 0xda, 0x7f, 0x3f, 0x08, 0xc2, 0xa7,
	0xdf, 0x40, 0xbc, 0xae, 0xbc, 0x55, 0xe1, 0xbf, 0x16, 0x66, 0xc4, 0x71, 0x8f, 0xc1, 0x1d, 0x09,
	0xdc, 0x2b, 0x15, 0xe6, 0x66, 0xb0, 0x38, 0x86, 0x76, 0x04, 0x68, 0x67, 0x0d, 0x38, 0xf4, 0x93,
	0x9b, 0x5d, 0xcf, 0x42, 0xed, 0xda, 0xf5, 0x9b, 0x0f, 0x0a, 0x8a, 0xfe, 0x37, 0x4c, 0x4f, 0xcd,
	0xcf, 0xdf, 0xba, 0x5f, 0x00, 0xb5, 0x67, 0xa0, 0xb3, 0x85, 0x94, 0xcd, 0x2d, 0xa4, 0xec, 0x6c,
	0x21, 0xb0, 0x16, 0x22, 0xf0, 0x32, 0x44, 0xe0, 0x43, 0x88, 0x40, 0x27, 0x44, 0x60, 0x33, 0x44,
	0xe0, 0x53, 0x88, 0xc0, 0xe7, 0x10, 0x29, 0x3b, 0x21, 0x02, 0xcf, 0xb7, 0x91, 0xb2, 0xb1, 0x8d,
	0xc0, 0xc3, 0x3b, 0x4d, 0xca, 0x1e, 0x37, 0x8d, 0x36, 0x25, 0x02, 0x73, 0xee, 0x18, 0x81, 0x6f,
	0xca, 0x45, 0x83, 0xf2, 0xd6, 0x38, 0xe3, 0xb4, 0xed, 0x2d, 0x62, 0x3e, 0xde, 0x93, 0x4d, 0x56,
	0x6f, 0x52, 0x13, 0xaf, 0x88, 0xf8, 0x65, 0x3b, 0xe8, 0x11, 0xaf, 0x67, 0xe4, 0xb5, 0x3e, 0xf1,
	0x3d, 0x00, 0x00, 0xff, 0xff, 0x56, 0x40, 0x19, 0x98, 0xea, 0x07, 0x00, 0x00,
}
