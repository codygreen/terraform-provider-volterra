// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ves.io/schema/fast_acl/types.proto

package fast_acl

import (
	proto "github.com/gogo/protobuf/proto"
	golang_proto "github.com/golang/protobuf/proto"

	fmt "fmt"

	math "math"

	_ "github.com/gogo/protobuf/gogoproto"

	ves_io_schema_fast_acl_rule "gopkg.volterra.us/terraform-provider-volterra/pbgo/extschema/schema/fast_acl_rule"

	ves_io_schema3 "gopkg.volterra.us/terraform-provider-volterra/pbgo/extschema/schema"

	_ "gopkg.volterra.us/terraform-provider-volterra/pbgo/extschema/schema"

	ves_io_schema4 "gopkg.volterra.us/terraform-provider-volterra/pbgo/extschema/schema"

	_ "gopkg.volterra.us/terraform-provider-volterra/pbgo/extschema/schema"

	_ "gopkg.volterra.us/terraform-provider-volterra/pbgo/extschema/schema"

	ves_io_schema_views "gopkg.volterra.us/terraform-provider-volterra/pbgo/extschema/schema/views"

	strings "strings"

	reflect "reflect"

	io "io"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Destination type
//
// x-displayName: "Destination Type"
// Type of destination configuration. It will provide destination IP, port and protocol
// "ves-io" tenant has the option of choosing all type of destination type
// Any other tenant can choose destination as interface_services, vip_services or all_services
// Further details on each destination type on RE and CE is provided in destination options
//
// Destination protocol and port for VIP or interface services is picked from configured listener
type DestinationType struct {
	// Types that are valid to be assigned to DestinationTypeChoice:
	//	*DestinationType_InterfaceServices
	//	*DestinationType_VipServices
	//	*DestinationType_AllServices
	//	*DestinationType_DestinationIpAddress
	//	*DestinationType_SelectedVipAddress
	//	*DestinationType_SharedVipServices
	DestinationTypeChoice isDestinationType_DestinationTypeChoice `protobuf_oneof:"destination_type_choice"`
}

func (m *DestinationType) Reset()                    { *m = DestinationType{} }
func (*DestinationType) ProtoMessage()               {}
func (*DestinationType) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{0} }

type isDestinationType_DestinationTypeChoice interface {
	isDestinationType_DestinationTypeChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type DestinationType_InterfaceServices struct {
	InterfaceServices *ves_io_schema4.Empty `protobuf:"bytes,4,opt,name=interface_services,json=interfaceServices,oneof"`
}
type DestinationType_VipServices struct {
	VipServices *ves_io_schema4.Empty `protobuf:"bytes,5,opt,name=vip_services,json=vipServices,oneof"`
}
type DestinationType_AllServices struct {
	AllServices *ves_io_schema4.Empty `protobuf:"bytes,6,opt,name=all_services,json=allServices,oneof"`
}
type DestinationType_DestinationIpAddress struct {
	DestinationIpAddress *DestinationIPAddressType `protobuf:"bytes,8,opt,name=destination_ip_address,json=destinationIpAddress,oneof"`
}
type DestinationType_SelectedVipAddress struct {
	SelectedVipAddress *SelectedVIPAddressType `protobuf:"bytes,9,opt,name=selected_vip_address,json=selectedVipAddress,oneof"`
}
type DestinationType_SharedVipServices struct {
	SharedVipServices *ves_io_schema4.Empty `protobuf:"bytes,10,opt,name=shared_vip_services,json=sharedVipServices,oneof"`
}

func (*DestinationType_InterfaceServices) isDestinationType_DestinationTypeChoice()    {}
func (*DestinationType_VipServices) isDestinationType_DestinationTypeChoice()          {}
func (*DestinationType_AllServices) isDestinationType_DestinationTypeChoice()          {}
func (*DestinationType_DestinationIpAddress) isDestinationType_DestinationTypeChoice() {}
func (*DestinationType_SelectedVipAddress) isDestinationType_DestinationTypeChoice()   {}
func (*DestinationType_SharedVipServices) isDestinationType_DestinationTypeChoice()    {}

func (m *DestinationType) GetDestinationTypeChoice() isDestinationType_DestinationTypeChoice {
	if m != nil {
		return m.DestinationTypeChoice
	}
	return nil
}

func (m *DestinationType) GetInterfaceServices() *ves_io_schema4.Empty {
	if x, ok := m.GetDestinationTypeChoice().(*DestinationType_InterfaceServices); ok {
		return x.InterfaceServices
	}
	return nil
}

func (m *DestinationType) GetVipServices() *ves_io_schema4.Empty {
	if x, ok := m.GetDestinationTypeChoice().(*DestinationType_VipServices); ok {
		return x.VipServices
	}
	return nil
}

func (m *DestinationType) GetAllServices() *ves_io_schema4.Empty {
	if x, ok := m.GetDestinationTypeChoice().(*DestinationType_AllServices); ok {
		return x.AllServices
	}
	return nil
}

func (m *DestinationType) GetDestinationIpAddress() *DestinationIPAddressType {
	if x, ok := m.GetDestinationTypeChoice().(*DestinationType_DestinationIpAddress); ok {
		return x.DestinationIpAddress
	}
	return nil
}

func (m *DestinationType) GetSelectedVipAddress() *SelectedVIPAddressType {
	if x, ok := m.GetDestinationTypeChoice().(*DestinationType_SelectedVipAddress); ok {
		return x.SelectedVipAddress
	}
	return nil
}

func (m *DestinationType) GetSharedVipServices() *ves_io_schema4.Empty {
	if x, ok := m.GetDestinationTypeChoice().(*DestinationType_SharedVipServices); ok {
		return x.SharedVipServices
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*DestinationType) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _DestinationType_OneofMarshaler, _DestinationType_OneofUnmarshaler, _DestinationType_OneofSizer, []interface{}{
		(*DestinationType_InterfaceServices)(nil),
		(*DestinationType_VipServices)(nil),
		(*DestinationType_AllServices)(nil),
		(*DestinationType_DestinationIpAddress)(nil),
		(*DestinationType_SelectedVipAddress)(nil),
		(*DestinationType_SharedVipServices)(nil),
	}
}

func _DestinationType_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*DestinationType)
	// destination_type_choice
	switch x := m.DestinationTypeChoice.(type) {
	case *DestinationType_InterfaceServices:
		_ = b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.InterfaceServices); err != nil {
			return err
		}
	case *DestinationType_VipServices:
		_ = b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.VipServices); err != nil {
			return err
		}
	case *DestinationType_AllServices:
		_ = b.EncodeVarint(6<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.AllServices); err != nil {
			return err
		}
	case *DestinationType_DestinationIpAddress:
		_ = b.EncodeVarint(8<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.DestinationIpAddress); err != nil {
			return err
		}
	case *DestinationType_SelectedVipAddress:
		_ = b.EncodeVarint(9<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.SelectedVipAddress); err != nil {
			return err
		}
	case *DestinationType_SharedVipServices:
		_ = b.EncodeVarint(10<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.SharedVipServices); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("DestinationType.DestinationTypeChoice has unexpected type %T", x)
	}
	return nil
}

func _DestinationType_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*DestinationType)
	switch tag {
	case 4: // destination_type_choice.interface_services
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.DestinationTypeChoice = &DestinationType_InterfaceServices{msg}
		return true, err
	case 5: // destination_type_choice.vip_services
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.DestinationTypeChoice = &DestinationType_VipServices{msg}
		return true, err
	case 6: // destination_type_choice.all_services
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.DestinationTypeChoice = &DestinationType_AllServices{msg}
		return true, err
	case 8: // destination_type_choice.destination_ip_address
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(DestinationIPAddressType)
		err := b.DecodeMessage(msg)
		m.DestinationTypeChoice = &DestinationType_DestinationIpAddress{msg}
		return true, err
	case 9: // destination_type_choice.selected_vip_address
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(SelectedVIPAddressType)
		err := b.DecodeMessage(msg)
		m.DestinationTypeChoice = &DestinationType_SelectedVipAddress{msg}
		return true, err
	case 10: // destination_type_choice.shared_vip_services
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.DestinationTypeChoice = &DestinationType_SharedVipServices{msg}
		return true, err
	default:
		return false, nil
	}
}

func _DestinationType_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*DestinationType)
	// destination_type_choice
	switch x := m.DestinationTypeChoice.(type) {
	case *DestinationType_InterfaceServices:
		s := proto.Size(x.InterfaceServices)
		n += proto.SizeVarint(4<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *DestinationType_VipServices:
		s := proto.Size(x.VipServices)
		n += proto.SizeVarint(5<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *DestinationType_AllServices:
		s := proto.Size(x.AllServices)
		n += proto.SizeVarint(6<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *DestinationType_DestinationIpAddress:
		s := proto.Size(x.DestinationIpAddress)
		n += proto.SizeVarint(8<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *DestinationType_SelectedVipAddress:
		s := proto.Size(x.SelectedVipAddress)
		n += proto.SizeVarint(9<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *DestinationType_SharedVipServices:
		s := proto.Size(x.SharedVipServices)
		n += proto.SizeVarint(10<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// RE Destination Public IP List
//
// x-displayName: "RE Destination Public IP list"
// Specifies destination as list of tenant ip addresses on RE
// Port and protocol is picked automatically based on advertise acl.
type SelectedVIPAddressType struct {
	// IP Address
	//
	// x-displayName: "IP Address"
	// List of IP addresses to match with destination
	Address []*ves_io_schema3.IpAddressType `protobuf:"bytes,1,rep,name=address" json:"address,omitempty"`
}

func (m *SelectedVIPAddressType) Reset()                    { *m = SelectedVIPAddressType{} }
func (*SelectedVIPAddressType) ProtoMessage()               {}
func (*SelectedVIPAddressType) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{1} }

func (m *SelectedVIPAddressType) GetAddress() []*ves_io_schema3.IpAddressType {
	if m != nil {
		return m.Address
	}
	return nil
}

// Destination IP Address Specification Type
//
// x-displayName: "Destination IP Address Type"
// Specifies destination as list of ip addresses and ports
// DestinationIPAddressType is applied only for DestinationType - IP Address option
type DestinationIPAddressType struct {
	// IP Address
	//
	// x-displayName: "IP Address"
	// List of IP addresses to match with destination
	Address []*ves_io_schema3.IpAddressType `protobuf:"bytes,5,rep,name=address" json:"address,omitempty"`
	// Ports
	//
	// x-displayName: "Ports"
	// x-example: 100
	// List of ports to match with destination ports
	// Special value "0" means all valid ports on the VIPs
	Ports []*ves_io_schema4.PortValueType `protobuf:"bytes,4,rep,name=ports" json:"ports,omitempty"`
	// protocol
	//
	// x-displayName: "Protocol"
	// x-example: "TCP"
	// Protocol to match in the traffic
	Protocol string `protobuf:"bytes,3,opt,name=protocol,proto3" json:"protocol,omitempty"`
}

func (m *DestinationIPAddressType) Reset()                    { *m = DestinationIPAddressType{} }
func (*DestinationIPAddressType) ProtoMessage()               {}
func (*DestinationIPAddressType) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{2} }

func (m *DestinationIPAddressType) GetAddress() []*ves_io_schema3.IpAddressType {
	if m != nil {
		return m.Address
	}
	return nil
}

func (m *DestinationIPAddressType) GetPorts() []*ves_io_schema4.PortValueType {
	if m != nil {
		return m.Ports
	}
	return nil
}

func (m *DestinationIPAddressType) GetProtocol() string {
	if m != nil {
		return m.Protocol
	}
	return ""
}

// Specific Tenant VIP
//
// x-displayName: "Specific Tenant VIP
// Select various tenant public VIP(s)
type SelectedTenantVIPsType struct {
	// Include Default Tenant VIP
	//
	// x-displayName: "Include Tenant VIP"
	// Include tenant vip in list of specific VIP(s)
	DefaultTenantVip bool `protobuf:"varint,1,opt,name=default_tenant_vip,json=defaultTenantVip,proto3" json:"default_tenant_vip,omitempty"`
	// Apply to Dedicated Public VIP
	//
	// x-displayName: "Select Public VIP(s)"
	// x-required
	// Select additional public VIP(s)
	PublicIpRefs []*ves_io_schema_views.ObjectRefType `protobuf:"bytes,4,rep,name=public_ip_refs,json=publicIpRefs" json:"public_ip_refs,omitempty"`
}

func (m *SelectedTenantVIPsType) Reset()                    { *m = SelectedTenantVIPsType{} }
func (*SelectedTenantVIPsType) ProtoMessage()               {}
func (*SelectedTenantVIPsType) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{3} }

func (m *SelectedTenantVIPsType) GetDefaultTenantVip() bool {
	if m != nil {
		return m.DefaultTenantVip
	}
	return false
}

func (m *SelectedTenantVIPsType) GetPublicIpRefs() []*ves_io_schema_views.ObjectRefType {
	if m != nil {
		return m.PublicIpRefs
	}
	return nil
}

// Fast ACL Rule
//
// x-displayName: "Fast ACL Rule"
// Shape of `fast_acl_rule`
type FastACLRuleType struct {
	// Rule Name
	//
	// x-displayName: "Rule Name"
	// x-required
	// Name for this rule, will be used to generate metrics
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// action
	//
	// x-displayName: "Action"
	// x-required
	// Action to be applied if traffic matched rule (pass, deny or rate limit)
	Action *ves_io_schema_fast_acl_rule.FastAclRuleAction `protobuf:"bytes,2,opt,name=action" json:"action,omitempty"`
	// ports
	//
	// x-displayName: "Source Ports"
	// x-example: ALL / DNS / 1234
	// L4 port numbers to match
	Port []*ves_io_schema4.PortValueType `protobuf:"bytes,3,rep,name=port" json:"port,omitempty"`
	// source
	//
	// x-displayName: "Source"
	// x-required
	// IP match criteria, source can be either a prefix list or
	// reference to IP prefix set
	//
	// Types that are valid to be assigned to Source:
	//	*FastACLRuleType_Prefix
	//	*FastACLRuleType_IpPrefixSet
	Source isFastACLRuleType_Source `protobuf_oneof:"source"`
}

func (m *FastACLRuleType) Reset()                    { *m = FastACLRuleType{} }
func (*FastACLRuleType) ProtoMessage()               {}
func (*FastACLRuleType) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{4} }

type isFastACLRuleType_Source interface {
	isFastACLRuleType_Source()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type FastACLRuleType_Prefix struct {
	Prefix *ves_io_schema3.PrefixListType `protobuf:"bytes,5,opt,name=prefix,oneof"`
}
type FastACLRuleType_IpPrefixSet struct {
	IpPrefixSet *ves_io_schema4.IpPrefixSetRefType `protobuf:"bytes,6,opt,name=ip_prefix_set,json=ipPrefixSet,oneof"`
}

func (*FastACLRuleType_Prefix) isFastACLRuleType_Source()      {}
func (*FastACLRuleType_IpPrefixSet) isFastACLRuleType_Source() {}

func (m *FastACLRuleType) GetSource() isFastACLRuleType_Source {
	if m != nil {
		return m.Source
	}
	return nil
}

func (m *FastACLRuleType) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *FastACLRuleType) GetAction() *ves_io_schema_fast_acl_rule.FastAclRuleAction {
	if m != nil {
		return m.Action
	}
	return nil
}

func (m *FastACLRuleType) GetPort() []*ves_io_schema4.PortValueType {
	if m != nil {
		return m.Port
	}
	return nil
}

func (m *FastACLRuleType) GetPrefix() *ves_io_schema3.PrefixListType {
	if x, ok := m.GetSource().(*FastACLRuleType_Prefix); ok {
		return x.Prefix
	}
	return nil
}

func (m *FastACLRuleType) GetIpPrefixSet() *ves_io_schema4.IpPrefixSetRefType {
	if x, ok := m.GetSource().(*FastACLRuleType_IpPrefixSet); ok {
		return x.IpPrefixSet
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*FastACLRuleType) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _FastACLRuleType_OneofMarshaler, _FastACLRuleType_OneofUnmarshaler, _FastACLRuleType_OneofSizer, []interface{}{
		(*FastACLRuleType_Prefix)(nil),
		(*FastACLRuleType_IpPrefixSet)(nil),
	}
}

func _FastACLRuleType_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*FastACLRuleType)
	// source
	switch x := m.Source.(type) {
	case *FastACLRuleType_Prefix:
		_ = b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Prefix); err != nil {
			return err
		}
	case *FastACLRuleType_IpPrefixSet:
		_ = b.EncodeVarint(6<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.IpPrefixSet); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("FastACLRuleType.Source has unexpected type %T", x)
	}
	return nil
}

func _FastACLRuleType_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*FastACLRuleType)
	switch tag {
	case 5: // source.prefix
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema3.PrefixListType)
		err := b.DecodeMessage(msg)
		m.Source = &FastACLRuleType_Prefix{msg}
		return true, err
	case 6: // source.ip_prefix_set
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.IpPrefixSetRefType)
		err := b.DecodeMessage(msg)
		m.Source = &FastACLRuleType_IpPrefixSet{msg}
		return true, err
	default:
		return false, nil
	}
}

func _FastACLRuleType_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*FastACLRuleType)
	// source
	switch x := m.Source.(type) {
	case *FastACLRuleType_Prefix:
		s := proto.Size(x.Prefix)
		n += proto.SizeVarint(5<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *FastACLRuleType_IpPrefixSet:
		s := proto.Size(x.IpPrefixSet)
		n += proto.SizeVarint(6<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// Fast ACL for RE
//
// x-displayName: "Fast ACL for RE"
// Fast ACL definition for RE
type ReACLType struct {
	// VIP Choice
	//
	// x-displayName: "Select VIP(s)"
	// x-required
	// Select VIP(s) where  fast ACL will be applied. Will give error if shared VIP is selected
	//
	// Types that are valid to be assigned to VipChoice:
	//	*ReACLType_AllPublicVips
	//	*ReACLType_DefaultTenantVip
	//	*ReACLType_SelectedTenantVip
	VipChoice isReACLType_VipChoice `protobuf_oneof:"vip_choice"`
	// Rules
	//
	// x-displayName: "Rules"
	// Fast ACL rules to match
	FastAclRules []*FastACLRuleType `protobuf:"bytes,5,rep,name=fast_acl_rules,json=fastAclRules" json:"fast_acl_rules,omitempty"`
}

func (m *ReACLType) Reset()                    { *m = ReACLType{} }
func (*ReACLType) ProtoMessage()               {}
func (*ReACLType) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{5} }

type isReACLType_VipChoice interface {
	isReACLType_VipChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type ReACLType_AllPublicVips struct {
	AllPublicVips *ves_io_schema4.Empty `protobuf:"bytes,2,opt,name=all_public_vips,json=allPublicVips,oneof"`
}
type ReACLType_DefaultTenantVip struct {
	DefaultTenantVip *ves_io_schema4.Empty `protobuf:"bytes,3,opt,name=default_tenant_vip,json=defaultTenantVip,oneof"`
}
type ReACLType_SelectedTenantVip struct {
	SelectedTenantVip *SelectedTenantVIPsType `protobuf:"bytes,4,opt,name=selected_tenant_vip,json=selectedTenantVip,oneof"`
}

func (*ReACLType_AllPublicVips) isReACLType_VipChoice()     {}
func (*ReACLType_DefaultTenantVip) isReACLType_VipChoice()  {}
func (*ReACLType_SelectedTenantVip) isReACLType_VipChoice() {}

func (m *ReACLType) GetVipChoice() isReACLType_VipChoice {
	if m != nil {
		return m.VipChoice
	}
	return nil
}

func (m *ReACLType) GetAllPublicVips() *ves_io_schema4.Empty {
	if x, ok := m.GetVipChoice().(*ReACLType_AllPublicVips); ok {
		return x.AllPublicVips
	}
	return nil
}

func (m *ReACLType) GetDefaultTenantVip() *ves_io_schema4.Empty {
	if x, ok := m.GetVipChoice().(*ReACLType_DefaultTenantVip); ok {
		return x.DefaultTenantVip
	}
	return nil
}

func (m *ReACLType) GetSelectedTenantVip() *SelectedTenantVIPsType {
	if x, ok := m.GetVipChoice().(*ReACLType_SelectedTenantVip); ok {
		return x.SelectedTenantVip
	}
	return nil
}

func (m *ReACLType) GetFastAclRules() []*FastACLRuleType {
	if m != nil {
		return m.FastAclRules
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*ReACLType) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _ReACLType_OneofMarshaler, _ReACLType_OneofUnmarshaler, _ReACLType_OneofSizer, []interface{}{
		(*ReACLType_AllPublicVips)(nil),
		(*ReACLType_DefaultTenantVip)(nil),
		(*ReACLType_SelectedTenantVip)(nil),
	}
}

func _ReACLType_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*ReACLType)
	// vip_choice
	switch x := m.VipChoice.(type) {
	case *ReACLType_AllPublicVips:
		_ = b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.AllPublicVips); err != nil {
			return err
		}
	case *ReACLType_DefaultTenantVip:
		_ = b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.DefaultTenantVip); err != nil {
			return err
		}
	case *ReACLType_SelectedTenantVip:
		_ = b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.SelectedTenantVip); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("ReACLType.VipChoice has unexpected type %T", x)
	}
	return nil
}

func _ReACLType_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*ReACLType)
	switch tag {
	case 2: // vip_choice.all_public_vips
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.VipChoice = &ReACLType_AllPublicVips{msg}
		return true, err
	case 3: // vip_choice.default_tenant_vip
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.VipChoice = &ReACLType_DefaultTenantVip{msg}
		return true, err
	case 4: // vip_choice.selected_tenant_vip
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(SelectedTenantVIPsType)
		err := b.DecodeMessage(msg)
		m.VipChoice = &ReACLType_SelectedTenantVip{msg}
		return true, err
	default:
		return false, nil
	}
}

func _ReACLType_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*ReACLType)
	// vip_choice
	switch x := m.VipChoice.(type) {
	case *ReACLType_AllPublicVips:
		s := proto.Size(x.AllPublicVips)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ReACLType_DefaultTenantVip:
		s := proto.Size(x.DefaultTenantVip)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ReACLType_SelectedTenantVip:
		s := proto.Size(x.SelectedTenantVip)
		n += proto.SizeVarint(4<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// Fast ACL for Site
//
// x-displayName: "Fast ACL for Site"
// Fast ACL definition for Site
type SiteACLType struct {
	// Network
	//
	// x-displayName: "Select Network"
	// x-required
	// Select Network where this ACL will be applied
	//
	// Types that are valid to be assigned to NetworkChoice:
	//	*SiteACLType_OutsideNetwork
	//	*SiteACLType_InsideNetwork
	NetworkChoice isSiteACLType_NetworkChoice `protobuf_oneof:"network_choice"`
	// Destination IP Choice
	//
	// x-displayName: "Select Destination IP"
	// x-required
	// Can be applied to ip addresses seen by the site.
	//
	// Types that are valid to be assigned to VipChoice:
	//	*SiteACLType_InterfaceServices
	//	*SiteACLType_VipServices
	//	*SiteACLType_AllServices
	//	*SiteACLType_DestinationIpAddress
	//	*SiteACLType_SharedVipServices
	VipChoice isSiteACLType_VipChoice `protobuf_oneof:"vip_choice"`
	// Rules
	//
	// x-displayName: "Rules"
	// Fast ACL rules to match
	FastAclRules []*FastACLRuleType `protobuf:"bytes,9,rep,name=fast_acl_rules,json=fastAclRules" json:"fast_acl_rules,omitempty"`
}

func (m *SiteACLType) Reset()                    { *m = SiteACLType{} }
func (*SiteACLType) ProtoMessage()               {}
func (*SiteACLType) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{6} }

type isSiteACLType_NetworkChoice interface {
	isSiteACLType_NetworkChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isSiteACLType_VipChoice interface {
	isSiteACLType_VipChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type SiteACLType_OutsideNetwork struct {
	OutsideNetwork *ves_io_schema4.Empty `protobuf:"bytes,2,opt,name=outside_network,json=outsideNetwork,oneof"`
}
type SiteACLType_InsideNetwork struct {
	InsideNetwork *ves_io_schema4.Empty `protobuf:"bytes,3,opt,name=inside_network,json=insideNetwork,oneof"`
}
type SiteACLType_InterfaceServices struct {
	InterfaceServices *ves_io_schema4.Empty `protobuf:"bytes,5,opt,name=interface_services,json=interfaceServices,oneof"`
}
type SiteACLType_VipServices struct {
	VipServices *ves_io_schema4.Empty `protobuf:"bytes,6,opt,name=vip_services,json=vipServices,oneof"`
}
type SiteACLType_AllServices struct {
	AllServices *ves_io_schema4.Empty `protobuf:"bytes,7,opt,name=all_services,json=allServices,oneof"`
}
type SiteACLType_DestinationIpAddress struct {
	DestinationIpAddress *DestinationIPAddressType `protobuf:"bytes,8,opt,name=destination_ip_address,json=destinationIpAddress,oneof"`
}
type SiteACLType_SharedVipServices struct {
	SharedVipServices *ves_io_schema4.Empty `protobuf:"bytes,10,opt,name=shared_vip_services,json=sharedVipServices,oneof"`
}

func (*SiteACLType_OutsideNetwork) isSiteACLType_NetworkChoice()   {}
func (*SiteACLType_InsideNetwork) isSiteACLType_NetworkChoice()    {}
func (*SiteACLType_InterfaceServices) isSiteACLType_VipChoice()    {}
func (*SiteACLType_VipServices) isSiteACLType_VipChoice()          {}
func (*SiteACLType_AllServices) isSiteACLType_VipChoice()          {}
func (*SiteACLType_DestinationIpAddress) isSiteACLType_VipChoice() {}
func (*SiteACLType_SharedVipServices) isSiteACLType_VipChoice()    {}

func (m *SiteACLType) GetNetworkChoice() isSiteACLType_NetworkChoice {
	if m != nil {
		return m.NetworkChoice
	}
	return nil
}
func (m *SiteACLType) GetVipChoice() isSiteACLType_VipChoice {
	if m != nil {
		return m.VipChoice
	}
	return nil
}

func (m *SiteACLType) GetOutsideNetwork() *ves_io_schema4.Empty {
	if x, ok := m.GetNetworkChoice().(*SiteACLType_OutsideNetwork); ok {
		return x.OutsideNetwork
	}
	return nil
}

func (m *SiteACLType) GetInsideNetwork() *ves_io_schema4.Empty {
	if x, ok := m.GetNetworkChoice().(*SiteACLType_InsideNetwork); ok {
		return x.InsideNetwork
	}
	return nil
}

func (m *SiteACLType) GetInterfaceServices() *ves_io_schema4.Empty {
	if x, ok := m.GetVipChoice().(*SiteACLType_InterfaceServices); ok {
		return x.InterfaceServices
	}
	return nil
}

func (m *SiteACLType) GetVipServices() *ves_io_schema4.Empty {
	if x, ok := m.GetVipChoice().(*SiteACLType_VipServices); ok {
		return x.VipServices
	}
	return nil
}

func (m *SiteACLType) GetAllServices() *ves_io_schema4.Empty {
	if x, ok := m.GetVipChoice().(*SiteACLType_AllServices); ok {
		return x.AllServices
	}
	return nil
}

func (m *SiteACLType) GetDestinationIpAddress() *DestinationIPAddressType {
	if x, ok := m.GetVipChoice().(*SiteACLType_DestinationIpAddress); ok {
		return x.DestinationIpAddress
	}
	return nil
}

func (m *SiteACLType) GetSharedVipServices() *ves_io_schema4.Empty {
	if x, ok := m.GetVipChoice().(*SiteACLType_SharedVipServices); ok {
		return x.SharedVipServices
	}
	return nil
}

func (m *SiteACLType) GetFastAclRules() []*FastACLRuleType {
	if m != nil {
		return m.FastAclRules
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*SiteACLType) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _SiteACLType_OneofMarshaler, _SiteACLType_OneofUnmarshaler, _SiteACLType_OneofSizer, []interface{}{
		(*SiteACLType_OutsideNetwork)(nil),
		(*SiteACLType_InsideNetwork)(nil),
		(*SiteACLType_InterfaceServices)(nil),
		(*SiteACLType_VipServices)(nil),
		(*SiteACLType_AllServices)(nil),
		(*SiteACLType_DestinationIpAddress)(nil),
		(*SiteACLType_SharedVipServices)(nil),
	}
}

func _SiteACLType_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*SiteACLType)
	// network_choice
	switch x := m.NetworkChoice.(type) {
	case *SiteACLType_OutsideNetwork:
		_ = b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.OutsideNetwork); err != nil {
			return err
		}
	case *SiteACLType_InsideNetwork:
		_ = b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.InsideNetwork); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("SiteACLType.NetworkChoice has unexpected type %T", x)
	}
	// vip_choice
	switch x := m.VipChoice.(type) {
	case *SiteACLType_InterfaceServices:
		_ = b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.InterfaceServices); err != nil {
			return err
		}
	case *SiteACLType_VipServices:
		_ = b.EncodeVarint(6<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.VipServices); err != nil {
			return err
		}
	case *SiteACLType_AllServices:
		_ = b.EncodeVarint(7<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.AllServices); err != nil {
			return err
		}
	case *SiteACLType_DestinationIpAddress:
		_ = b.EncodeVarint(8<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.DestinationIpAddress); err != nil {
			return err
		}
	case *SiteACLType_SharedVipServices:
		_ = b.EncodeVarint(10<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.SharedVipServices); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("SiteACLType.VipChoice has unexpected type %T", x)
	}
	return nil
}

func _SiteACLType_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*SiteACLType)
	switch tag {
	case 2: // network_choice.outside_network
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.NetworkChoice = &SiteACLType_OutsideNetwork{msg}
		return true, err
	case 3: // network_choice.inside_network
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.NetworkChoice = &SiteACLType_InsideNetwork{msg}
		return true, err
	case 5: // vip_choice.interface_services
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.VipChoice = &SiteACLType_InterfaceServices{msg}
		return true, err
	case 6: // vip_choice.vip_services
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.VipChoice = &SiteACLType_VipServices{msg}
		return true, err
	case 7: // vip_choice.all_services
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.VipChoice = &SiteACLType_AllServices{msg}
		return true, err
	case 8: // vip_choice.destination_ip_address
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(DestinationIPAddressType)
		err := b.DecodeMessage(msg)
		m.VipChoice = &SiteACLType_DestinationIpAddress{msg}
		return true, err
	case 10: // vip_choice.shared_vip_services
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.VipChoice = &SiteACLType_SharedVipServices{msg}
		return true, err
	default:
		return false, nil
	}
}

func _SiteACLType_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*SiteACLType)
	// network_choice
	switch x := m.NetworkChoice.(type) {
	case *SiteACLType_OutsideNetwork:
		s := proto.Size(x.OutsideNetwork)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *SiteACLType_InsideNetwork:
		s := proto.Size(x.InsideNetwork)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	// vip_choice
	switch x := m.VipChoice.(type) {
	case *SiteACLType_InterfaceServices:
		s := proto.Size(x.InterfaceServices)
		n += proto.SizeVarint(5<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *SiteACLType_VipServices:
		s := proto.Size(x.VipServices)
		n += proto.SizeVarint(6<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *SiteACLType_AllServices:
		s := proto.Size(x.AllServices)
		n += proto.SizeVarint(7<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *SiteACLType_DestinationIpAddress:
		s := proto.Size(x.DestinationIpAddress)
		n += proto.SizeVarint(8<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *SiteACLType_SharedVipServices:
		s := proto.Size(x.SharedVipServices)
		n += proto.SizeVarint(10<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// Fast ACL Legacy mode
//
// x-displayName: "Fast ACL Legacy Mode"
// Fast ACL definition for Site
type LegacyACLType struct {
	// Virtual Network Type
	//
	// x-displayName: "Virtual Network Type"
	// x-required
	// Specifies Virtual Network types on which Fast ACL must be applied
	// RE applies Fast ACLs with network_type selector as "public" only
	// CE applies Fast ACLs with network type selector as "site_local" and "site_local_inside" only
	NetworkType *ves_io_schema4.VirtualNetworkSelectorType `protobuf:"bytes,1,opt,name=network_type,json=networkType" json:"network_type,omitempty"`
	// Destination IP type
	//
	// x-displayName: "IP Type"
	// x-required
	// IP type specifies how to pick destination IP, possible options
	//  1. Pick IP from physical interface
	//  2. Pick VIP from interface or site
	//  3. All VIP in site
	//  4. Explicit IP and port
	DestinationType *DestinationType `protobuf:"bytes,2,opt,name=destination_type,json=destinationType" json:"destination_type,omitempty"`
	// Source Rules
	//
	// x-displayName: "Source Rules"
	// List of fast ACL rules to be applied to received packets on this site
	SourceRules []*ves_io_schema_views.ObjectRefType `protobuf:"bytes,3,rep,name=source_rules,json=sourceRules" json:"source_rules,omitempty"`
}

func (m *LegacyACLType) Reset()                    { *m = LegacyACLType{} }
func (*LegacyACLType) ProtoMessage()               {}
func (*LegacyACLType) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{7} }

func (m *LegacyACLType) GetNetworkType() *ves_io_schema4.VirtualNetworkSelectorType {
	if m != nil {
		return m.NetworkType
	}
	return nil
}

func (m *LegacyACLType) GetDestinationType() *DestinationType {
	if m != nil {
		return m.DestinationType
	}
	return nil
}

func (m *LegacyACLType) GetSourceRules() []*ves_io_schema_views.ObjectRefType {
	if m != nil {
		return m.SourceRules
	}
	return nil
}

// GlobalSpecType
//
// x-displayName: "Global Spec"
// Shape of `fast_acl` object
type GlobalSpecType struct {
	// Virtual Network Type
	//
	// x-displayName: "Virtual Network Type"
	// x-required
	// Specifies Virtual Network types on which Fast ACL must be applied
	// RE applies Fast ACLs with network_type selector as "public" only
	// CE applies Fast ACLs with network type selector as "site_local" and "site_local_inside" only
	NetworkType *ves_io_schema4.VirtualNetworkSelectorType `protobuf:"bytes,12,opt,name=network_type,json=networkType" json:"network_type,omitempty"`
	// Destination IP type
	//
	// x-displayName: "IP Type"
	// x-required
	// IP type specifies how to pick destination IP, possible options
	//  1. Pick IP from physical interface
	//  2. Pick VIP from interface or site
	//  3. All VIP in site
	//  4. Explicit IP and port
	DestinationType *DestinationType `protobuf:"bytes,13,opt,name=destination_type,json=destinationType" json:"destination_type,omitempty"`
	// Source Rules
	//
	// x-displayName: "Source Rules"
	// List of fast ACL rules to be applied to received packets on this site
	SourceRules []*ves_io_schema4.ObjectRefType `protobuf:"bytes,10,rep,name=source_rules,json=sourceRules" json:"source_rules,omitempty"`
	// Default protocol policer
	//
	// x-displayName: "Default Protocol Policer"
	// Protocol rate limits to be applied if none of the source rules match.
	// Traffic from source is classified into hash buckets based on first
	// 24 bits of source IP address and rate limiting is applied on each hash
	// bucket. This helps in grouping source IP address and ratelimiting traffic
	// on that group, giving a semantics of hash limit for source IP
	DefaultProtocolPolicer []*ves_io_schema4.ObjectRefType `protobuf:"bytes,11,rep,name=default_protocol_policer,json=defaultProtocolPolicer" json:"default_protocol_policer,omitempty"`
	//  Internal
	//
	// x-displayName: "Internal"
	// x-required
	// Used by view handling to store user input
	//
	// Types that are valid to be assigned to ConfigChoice:
	//	*GlobalSpecType_SiteAcl
	//	*GlobalSpecType_ReAcl
	//	*GlobalSpecType_LegacyAcl
	ConfigChoice isGlobalSpecType_ConfigChoice `protobuf_oneof:"config_choice"`
	// Default protocol policer
	//
	// x-displayName: "Default Protocol Policer"
	// Protocol rate limits to be applied if none of the source rules match.
	// Traffic from source is classified into hash buckets based on first
	// 24 bits of source IP address and rate limiting is applied on each hash
	// bucket. This helps in grouping source IP address and ratelimiting traffic
	// on that group, giving a semantics of hash limit for source IP
	ProtocolPolicer *ves_io_schema_views.ObjectRefType `protobuf:"bytes,23,opt,name=protocol_policer,json=protocolPolicer" json:"protocol_policer,omitempty"`
	// view_internal
	//
	// x-displayName: "View Internal"
	// Reference to view internal object
	ViewInternal *ves_io_schema_views.ObjectRefType `protobuf:"bytes,1000,opt,name=view_internal,json=viewInternal" json:"view_internal,omitempty"`
}

func (m *GlobalSpecType) Reset()                    { *m = GlobalSpecType{} }
func (*GlobalSpecType) ProtoMessage()               {}
func (*GlobalSpecType) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{8} }

type isGlobalSpecType_ConfigChoice interface {
	isGlobalSpecType_ConfigChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type GlobalSpecType_SiteAcl struct {
	SiteAcl *SiteACLType `protobuf:"bytes,20,opt,name=site_acl,json=siteAcl,oneof"`
}
type GlobalSpecType_ReAcl struct {
	ReAcl *ReACLType `protobuf:"bytes,21,opt,name=re_acl,json=reAcl,oneof"`
}
type GlobalSpecType_LegacyAcl struct {
	LegacyAcl *ves_io_schema4.Empty `protobuf:"bytes,22,opt,name=legacy_acl,json=legacyAcl,oneof"`
}

func (*GlobalSpecType_SiteAcl) isGlobalSpecType_ConfigChoice()   {}
func (*GlobalSpecType_ReAcl) isGlobalSpecType_ConfigChoice()     {}
func (*GlobalSpecType_LegacyAcl) isGlobalSpecType_ConfigChoice() {}

func (m *GlobalSpecType) GetConfigChoice() isGlobalSpecType_ConfigChoice {
	if m != nil {
		return m.ConfigChoice
	}
	return nil
}

func (m *GlobalSpecType) GetNetworkType() *ves_io_schema4.VirtualNetworkSelectorType {
	if m != nil {
		return m.NetworkType
	}
	return nil
}

func (m *GlobalSpecType) GetDestinationType() *DestinationType {
	if m != nil {
		return m.DestinationType
	}
	return nil
}

func (m *GlobalSpecType) GetSourceRules() []*ves_io_schema4.ObjectRefType {
	if m != nil {
		return m.SourceRules
	}
	return nil
}

func (m *GlobalSpecType) GetDefaultProtocolPolicer() []*ves_io_schema4.ObjectRefType {
	if m != nil {
		return m.DefaultProtocolPolicer
	}
	return nil
}

func (m *GlobalSpecType) GetSiteAcl() *SiteACLType {
	if x, ok := m.GetConfigChoice().(*GlobalSpecType_SiteAcl); ok {
		return x.SiteAcl
	}
	return nil
}

func (m *GlobalSpecType) GetReAcl() *ReACLType {
	if x, ok := m.GetConfigChoice().(*GlobalSpecType_ReAcl); ok {
		return x.ReAcl
	}
	return nil
}

func (m *GlobalSpecType) GetLegacyAcl() *ves_io_schema4.Empty {
	if x, ok := m.GetConfigChoice().(*GlobalSpecType_LegacyAcl); ok {
		return x.LegacyAcl
	}
	return nil
}

func (m *GlobalSpecType) GetProtocolPolicer() *ves_io_schema_views.ObjectRefType {
	if m != nil {
		return m.ProtocolPolicer
	}
	return nil
}

func (m *GlobalSpecType) GetViewInternal() *ves_io_schema_views.ObjectRefType {
	if m != nil {
		return m.ViewInternal
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*GlobalSpecType) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _GlobalSpecType_OneofMarshaler, _GlobalSpecType_OneofUnmarshaler, _GlobalSpecType_OneofSizer, []interface{}{
		(*GlobalSpecType_SiteAcl)(nil),
		(*GlobalSpecType_ReAcl)(nil),
		(*GlobalSpecType_LegacyAcl)(nil),
	}
}

func _GlobalSpecType_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*GlobalSpecType)
	// config_choice
	switch x := m.ConfigChoice.(type) {
	case *GlobalSpecType_SiteAcl:
		_ = b.EncodeVarint(20<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.SiteAcl); err != nil {
			return err
		}
	case *GlobalSpecType_ReAcl:
		_ = b.EncodeVarint(21<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ReAcl); err != nil {
			return err
		}
	case *GlobalSpecType_LegacyAcl:
		_ = b.EncodeVarint(22<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.LegacyAcl); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("GlobalSpecType.ConfigChoice has unexpected type %T", x)
	}
	return nil
}

func _GlobalSpecType_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*GlobalSpecType)
	switch tag {
	case 20: // config_choice.site_acl
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(SiteACLType)
		err := b.DecodeMessage(msg)
		m.ConfigChoice = &GlobalSpecType_SiteAcl{msg}
		return true, err
	case 21: // config_choice.re_acl
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ReACLType)
		err := b.DecodeMessage(msg)
		m.ConfigChoice = &GlobalSpecType_ReAcl{msg}
		return true, err
	case 22: // config_choice.legacy_acl
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.ConfigChoice = &GlobalSpecType_LegacyAcl{msg}
		return true, err
	default:
		return false, nil
	}
}

func _GlobalSpecType_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*GlobalSpecType)
	// config_choice
	switch x := m.ConfigChoice.(type) {
	case *GlobalSpecType_SiteAcl:
		s := proto.Size(x.SiteAcl)
		n += proto.SizeVarint(20<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *GlobalSpecType_ReAcl:
		s := proto.Size(x.ReAcl)
		n += proto.SizeVarint(21<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *GlobalSpecType_LegacyAcl:
		s := proto.Size(x.LegacyAcl)
		n += proto.SizeVarint(22<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// Create Fast ACL
//
// x-displayName: "Create Fast ACL"
// Create a `fast_acl` object, `fast_acl` object contains rules to protect site from denial of service
// It has destination{destination IP, destination port) and references to `fast_acl_rule`
type CreateSpecType struct {
	// Site Choice
	//
	// x-displayName: "Select Site Type For acl"
	// x-required
	// Select type of sites where this acl will be applied
	//
	// Types that are valid to be assigned to SiteChoice:
	//	*CreateSpecType_SiteAcl
	//	*CreateSpecType_ReAcl
	//	*CreateSpecType_LegacyAcl
	SiteChoice      isCreateSpecType_SiteChoice        `protobuf_oneof:"site_choice"`
	ProtocolPolicer *ves_io_schema_views.ObjectRefType `protobuf:"bytes,23,opt,name=protocol_policer,json=protocolPolicer" json:"protocol_policer,omitempty"`
}

func (m *CreateSpecType) Reset()                    { *m = CreateSpecType{} }
func (*CreateSpecType) ProtoMessage()               {}
func (*CreateSpecType) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{9} }

type isCreateSpecType_SiteChoice interface {
	isCreateSpecType_SiteChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type CreateSpecType_SiteAcl struct {
	SiteAcl *SiteACLType `protobuf:"bytes,16,opt,name=site_acl,json=siteAcl,oneof"`
}
type CreateSpecType_ReAcl struct {
	ReAcl *ReACLType `protobuf:"bytes,17,opt,name=re_acl,json=reAcl,oneof"`
}
type CreateSpecType_LegacyAcl struct {
	LegacyAcl *LegacyACLType `protobuf:"bytes,18,opt,name=legacy_acl,json=legacyAcl,oneof"`
}

func (*CreateSpecType_SiteAcl) isCreateSpecType_SiteChoice()   {}
func (*CreateSpecType_ReAcl) isCreateSpecType_SiteChoice()     {}
func (*CreateSpecType_LegacyAcl) isCreateSpecType_SiteChoice() {}

func (m *CreateSpecType) GetSiteChoice() isCreateSpecType_SiteChoice {
	if m != nil {
		return m.SiteChoice
	}
	return nil
}

func (m *CreateSpecType) GetSiteAcl() *SiteACLType {
	if x, ok := m.GetSiteChoice().(*CreateSpecType_SiteAcl); ok {
		return x.SiteAcl
	}
	return nil
}

func (m *CreateSpecType) GetReAcl() *ReACLType {
	if x, ok := m.GetSiteChoice().(*CreateSpecType_ReAcl); ok {
		return x.ReAcl
	}
	return nil
}

func (m *CreateSpecType) GetLegacyAcl() *LegacyACLType {
	if x, ok := m.GetSiteChoice().(*CreateSpecType_LegacyAcl); ok {
		return x.LegacyAcl
	}
	return nil
}

func (m *CreateSpecType) GetProtocolPolicer() *ves_io_schema_views.ObjectRefType {
	if m != nil {
		return m.ProtocolPolicer
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*CreateSpecType) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _CreateSpecType_OneofMarshaler, _CreateSpecType_OneofUnmarshaler, _CreateSpecType_OneofSizer, []interface{}{
		(*CreateSpecType_SiteAcl)(nil),
		(*CreateSpecType_ReAcl)(nil),
		(*CreateSpecType_LegacyAcl)(nil),
	}
}

func _CreateSpecType_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*CreateSpecType)
	// site_choice
	switch x := m.SiteChoice.(type) {
	case *CreateSpecType_SiteAcl:
		_ = b.EncodeVarint(16<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.SiteAcl); err != nil {
			return err
		}
	case *CreateSpecType_ReAcl:
		_ = b.EncodeVarint(17<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ReAcl); err != nil {
			return err
		}
	case *CreateSpecType_LegacyAcl:
		_ = b.EncodeVarint(18<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.LegacyAcl); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("CreateSpecType.SiteChoice has unexpected type %T", x)
	}
	return nil
}

func _CreateSpecType_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*CreateSpecType)
	switch tag {
	case 16: // site_choice.site_acl
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(SiteACLType)
		err := b.DecodeMessage(msg)
		m.SiteChoice = &CreateSpecType_SiteAcl{msg}
		return true, err
	case 17: // site_choice.re_acl
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ReACLType)
		err := b.DecodeMessage(msg)
		m.SiteChoice = &CreateSpecType_ReAcl{msg}
		return true, err
	case 18: // site_choice.legacy_acl
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(LegacyACLType)
		err := b.DecodeMessage(msg)
		m.SiteChoice = &CreateSpecType_LegacyAcl{msg}
		return true, err
	default:
		return false, nil
	}
}

func _CreateSpecType_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*CreateSpecType)
	// site_choice
	switch x := m.SiteChoice.(type) {
	case *CreateSpecType_SiteAcl:
		s := proto.Size(x.SiteAcl)
		n += proto.SizeVarint(16<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *CreateSpecType_ReAcl:
		s := proto.Size(x.ReAcl)
		n += proto.SizeVarint(17<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *CreateSpecType_LegacyAcl:
		s := proto.Size(x.LegacyAcl)
		n += proto.SizeVarint(18<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// Replace Fast ACL
//
// x-displayName: "Replace Fast ACL"
// Replace a `fast_acl` object, `fast_acl` object contains rules to protect site from denial of service
// It has destination{destination IP, destination port) and references to `fast_acl_rule`
type ReplaceSpecType struct {
	// Site Choice
	//
	// x-displayName: "Select Site Type For acl"
	// x-required
	// Select type of sites where this acl will be applied
	//
	// Types that are valid to be assigned to SiteChoice:
	//	*ReplaceSpecType_SiteAcl
	//	*ReplaceSpecType_ReAcl
	//	*ReplaceSpecType_LegacyAcl
	SiteChoice      isReplaceSpecType_SiteChoice       `protobuf_oneof:"site_choice"`
	ProtocolPolicer *ves_io_schema_views.ObjectRefType `protobuf:"bytes,23,opt,name=protocol_policer,json=protocolPolicer" json:"protocol_policer,omitempty"`
}

func (m *ReplaceSpecType) Reset()                    { *m = ReplaceSpecType{} }
func (*ReplaceSpecType) ProtoMessage()               {}
func (*ReplaceSpecType) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{10} }

type isReplaceSpecType_SiteChoice interface {
	isReplaceSpecType_SiteChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type ReplaceSpecType_SiteAcl struct {
	SiteAcl *SiteACLType `protobuf:"bytes,16,opt,name=site_acl,json=siteAcl,oneof"`
}
type ReplaceSpecType_ReAcl struct {
	ReAcl *ReACLType `protobuf:"bytes,17,opt,name=re_acl,json=reAcl,oneof"`
}
type ReplaceSpecType_LegacyAcl struct {
	LegacyAcl *LegacyACLType `protobuf:"bytes,18,opt,name=legacy_acl,json=legacyAcl,oneof"`
}

func (*ReplaceSpecType_SiteAcl) isReplaceSpecType_SiteChoice()   {}
func (*ReplaceSpecType_ReAcl) isReplaceSpecType_SiteChoice()     {}
func (*ReplaceSpecType_LegacyAcl) isReplaceSpecType_SiteChoice() {}

func (m *ReplaceSpecType) GetSiteChoice() isReplaceSpecType_SiteChoice {
	if m != nil {
		return m.SiteChoice
	}
	return nil
}

func (m *ReplaceSpecType) GetSiteAcl() *SiteACLType {
	if x, ok := m.GetSiteChoice().(*ReplaceSpecType_SiteAcl); ok {
		return x.SiteAcl
	}
	return nil
}

func (m *ReplaceSpecType) GetReAcl() *ReACLType {
	if x, ok := m.GetSiteChoice().(*ReplaceSpecType_ReAcl); ok {
		return x.ReAcl
	}
	return nil
}

func (m *ReplaceSpecType) GetLegacyAcl() *LegacyACLType {
	if x, ok := m.GetSiteChoice().(*ReplaceSpecType_LegacyAcl); ok {
		return x.LegacyAcl
	}
	return nil
}

func (m *ReplaceSpecType) GetProtocolPolicer() *ves_io_schema_views.ObjectRefType {
	if m != nil {
		return m.ProtocolPolicer
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*ReplaceSpecType) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _ReplaceSpecType_OneofMarshaler, _ReplaceSpecType_OneofUnmarshaler, _ReplaceSpecType_OneofSizer, []interface{}{
		(*ReplaceSpecType_SiteAcl)(nil),
		(*ReplaceSpecType_ReAcl)(nil),
		(*ReplaceSpecType_LegacyAcl)(nil),
	}
}

func _ReplaceSpecType_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*ReplaceSpecType)
	// site_choice
	switch x := m.SiteChoice.(type) {
	case *ReplaceSpecType_SiteAcl:
		_ = b.EncodeVarint(16<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.SiteAcl); err != nil {
			return err
		}
	case *ReplaceSpecType_ReAcl:
		_ = b.EncodeVarint(17<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ReAcl); err != nil {
			return err
		}
	case *ReplaceSpecType_LegacyAcl:
		_ = b.EncodeVarint(18<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.LegacyAcl); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("ReplaceSpecType.SiteChoice has unexpected type %T", x)
	}
	return nil
}

func _ReplaceSpecType_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*ReplaceSpecType)
	switch tag {
	case 16: // site_choice.site_acl
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(SiteACLType)
		err := b.DecodeMessage(msg)
		m.SiteChoice = &ReplaceSpecType_SiteAcl{msg}
		return true, err
	case 17: // site_choice.re_acl
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ReACLType)
		err := b.DecodeMessage(msg)
		m.SiteChoice = &ReplaceSpecType_ReAcl{msg}
		return true, err
	case 18: // site_choice.legacy_acl
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(LegacyACLType)
		err := b.DecodeMessage(msg)
		m.SiteChoice = &ReplaceSpecType_LegacyAcl{msg}
		return true, err
	default:
		return false, nil
	}
}

func _ReplaceSpecType_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*ReplaceSpecType)
	// site_choice
	switch x := m.SiteChoice.(type) {
	case *ReplaceSpecType_SiteAcl:
		s := proto.Size(x.SiteAcl)
		n += proto.SizeVarint(16<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ReplaceSpecType_ReAcl:
		s := proto.Size(x.ReAcl)
		n += proto.SizeVarint(17<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ReplaceSpecType_LegacyAcl:
		s := proto.Size(x.LegacyAcl)
		n += proto.SizeVarint(18<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// Get Fast ACL
//
// x-displayName: "Get Fast ACL"
// Get value of `fast_acl` for object
type GetSpecType struct {
	// Site Choice
	//
	// x-displayName: "Select Site Type For acl"
	// x-required
	// Select type of sites where this acl will be applied
	//
	// Types that are valid to be assigned to SiteChoice:
	//	*GetSpecType_SiteAcl
	//	*GetSpecType_ReAcl
	//	*GetSpecType_LegacyAcl
	SiteChoice      isGetSpecType_SiteChoice           `protobuf_oneof:"site_choice"`
	ProtocolPolicer *ves_io_schema_views.ObjectRefType `protobuf:"bytes,23,opt,name=protocol_policer,json=protocolPolicer" json:"protocol_policer,omitempty"`
}

func (m *GetSpecType) Reset()                    { *m = GetSpecType{} }
func (*GetSpecType) ProtoMessage()               {}
func (*GetSpecType) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{11} }

type isGetSpecType_SiteChoice interface {
	isGetSpecType_SiteChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type GetSpecType_SiteAcl struct {
	SiteAcl *SiteACLType `protobuf:"bytes,16,opt,name=site_acl,json=siteAcl,oneof"`
}
type GetSpecType_ReAcl struct {
	ReAcl *ReACLType `protobuf:"bytes,17,opt,name=re_acl,json=reAcl,oneof"`
}
type GetSpecType_LegacyAcl struct {
	LegacyAcl *LegacyACLType `protobuf:"bytes,18,opt,name=legacy_acl,json=legacyAcl,oneof"`
}

func (*GetSpecType_SiteAcl) isGetSpecType_SiteChoice()   {}
func (*GetSpecType_ReAcl) isGetSpecType_SiteChoice()     {}
func (*GetSpecType_LegacyAcl) isGetSpecType_SiteChoice() {}

func (m *GetSpecType) GetSiteChoice() isGetSpecType_SiteChoice {
	if m != nil {
		return m.SiteChoice
	}
	return nil
}

func (m *GetSpecType) GetSiteAcl() *SiteACLType {
	if x, ok := m.GetSiteChoice().(*GetSpecType_SiteAcl); ok {
		return x.SiteAcl
	}
	return nil
}

func (m *GetSpecType) GetReAcl() *ReACLType {
	if x, ok := m.GetSiteChoice().(*GetSpecType_ReAcl); ok {
		return x.ReAcl
	}
	return nil
}

func (m *GetSpecType) GetLegacyAcl() *LegacyACLType {
	if x, ok := m.GetSiteChoice().(*GetSpecType_LegacyAcl); ok {
		return x.LegacyAcl
	}
	return nil
}

func (m *GetSpecType) GetProtocolPolicer() *ves_io_schema_views.ObjectRefType {
	if m != nil {
		return m.ProtocolPolicer
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*GetSpecType) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _GetSpecType_OneofMarshaler, _GetSpecType_OneofUnmarshaler, _GetSpecType_OneofSizer, []interface{}{
		(*GetSpecType_SiteAcl)(nil),
		(*GetSpecType_ReAcl)(nil),
		(*GetSpecType_LegacyAcl)(nil),
	}
}

func _GetSpecType_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*GetSpecType)
	// site_choice
	switch x := m.SiteChoice.(type) {
	case *GetSpecType_SiteAcl:
		_ = b.EncodeVarint(16<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.SiteAcl); err != nil {
			return err
		}
	case *GetSpecType_ReAcl:
		_ = b.EncodeVarint(17<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ReAcl); err != nil {
			return err
		}
	case *GetSpecType_LegacyAcl:
		_ = b.EncodeVarint(18<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.LegacyAcl); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("GetSpecType.SiteChoice has unexpected type %T", x)
	}
	return nil
}

func _GetSpecType_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*GetSpecType)
	switch tag {
	case 16: // site_choice.site_acl
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(SiteACLType)
		err := b.DecodeMessage(msg)
		m.SiteChoice = &GetSpecType_SiteAcl{msg}
		return true, err
	case 17: // site_choice.re_acl
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ReACLType)
		err := b.DecodeMessage(msg)
		m.SiteChoice = &GetSpecType_ReAcl{msg}
		return true, err
	case 18: // site_choice.legacy_acl
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(LegacyACLType)
		err := b.DecodeMessage(msg)
		m.SiteChoice = &GetSpecType_LegacyAcl{msg}
		return true, err
	default:
		return false, nil
	}
}

func _GetSpecType_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*GetSpecType)
	// site_choice
	switch x := m.SiteChoice.(type) {
	case *GetSpecType_SiteAcl:
		s := proto.Size(x.SiteAcl)
		n += proto.SizeVarint(16<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *GetSpecType_ReAcl:
		s := proto.Size(x.ReAcl)
		n += proto.SizeVarint(17<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *GetSpecType_LegacyAcl:
		s := proto.Size(x.LegacyAcl)
		n += proto.SizeVarint(18<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

func init() {
	proto.RegisterType((*DestinationType)(nil), "ves.io.schema.fast_acl.DestinationType")
	golang_proto.RegisterType((*DestinationType)(nil), "ves.io.schema.fast_acl.DestinationType")
	proto.RegisterType((*SelectedVIPAddressType)(nil), "ves.io.schema.fast_acl.SelectedVIPAddressType")
	golang_proto.RegisterType((*SelectedVIPAddressType)(nil), "ves.io.schema.fast_acl.SelectedVIPAddressType")
	proto.RegisterType((*DestinationIPAddressType)(nil), "ves.io.schema.fast_acl.DestinationIPAddressType")
	golang_proto.RegisterType((*DestinationIPAddressType)(nil), "ves.io.schema.fast_acl.DestinationIPAddressType")
	proto.RegisterType((*SelectedTenantVIPsType)(nil), "ves.io.schema.fast_acl.SelectedTenantVIPsType")
	golang_proto.RegisterType((*SelectedTenantVIPsType)(nil), "ves.io.schema.fast_acl.SelectedTenantVIPsType")
	proto.RegisterType((*FastACLRuleType)(nil), "ves.io.schema.fast_acl.FastACLRuleType")
	golang_proto.RegisterType((*FastACLRuleType)(nil), "ves.io.schema.fast_acl.FastACLRuleType")
	proto.RegisterType((*ReACLType)(nil), "ves.io.schema.fast_acl.ReACLType")
	golang_proto.RegisterType((*ReACLType)(nil), "ves.io.schema.fast_acl.ReACLType")
	proto.RegisterType((*SiteACLType)(nil), "ves.io.schema.fast_acl.SiteACLType")
	golang_proto.RegisterType((*SiteACLType)(nil), "ves.io.schema.fast_acl.SiteACLType")
	proto.RegisterType((*LegacyACLType)(nil), "ves.io.schema.fast_acl.LegacyACLType")
	golang_proto.RegisterType((*LegacyACLType)(nil), "ves.io.schema.fast_acl.LegacyACLType")
	proto.RegisterType((*GlobalSpecType)(nil), "ves.io.schema.fast_acl.GlobalSpecType")
	golang_proto.RegisterType((*GlobalSpecType)(nil), "ves.io.schema.fast_acl.GlobalSpecType")
	proto.RegisterType((*CreateSpecType)(nil), "ves.io.schema.fast_acl.CreateSpecType")
	golang_proto.RegisterType((*CreateSpecType)(nil), "ves.io.schema.fast_acl.CreateSpecType")
	proto.RegisterType((*ReplaceSpecType)(nil), "ves.io.schema.fast_acl.ReplaceSpecType")
	golang_proto.RegisterType((*ReplaceSpecType)(nil), "ves.io.schema.fast_acl.ReplaceSpecType")
	proto.RegisterType((*GetSpecType)(nil), "ves.io.schema.fast_acl.GetSpecType")
	golang_proto.RegisterType((*GetSpecType)(nil), "ves.io.schema.fast_acl.GetSpecType")
}
func (this *DestinationType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DestinationType)
	if !ok {
		that2, ok := that.(DestinationType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.DestinationTypeChoice == nil {
		if this.DestinationTypeChoice != nil {
			return false
		}
	} else if this.DestinationTypeChoice == nil {
		return false
	} else if !this.DestinationTypeChoice.Equal(that1.DestinationTypeChoice) {
		return false
	}
	return true
}
func (this *DestinationType_InterfaceServices) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DestinationType_InterfaceServices)
	if !ok {
		that2, ok := that.(DestinationType_InterfaceServices)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.InterfaceServices.Equal(that1.InterfaceServices) {
		return false
	}
	return true
}
func (this *DestinationType_VipServices) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DestinationType_VipServices)
	if !ok {
		that2, ok := that.(DestinationType_VipServices)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.VipServices.Equal(that1.VipServices) {
		return false
	}
	return true
}
func (this *DestinationType_AllServices) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DestinationType_AllServices)
	if !ok {
		that2, ok := that.(DestinationType_AllServices)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AllServices.Equal(that1.AllServices) {
		return false
	}
	return true
}
func (this *DestinationType_DestinationIpAddress) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DestinationType_DestinationIpAddress)
	if !ok {
		that2, ok := that.(DestinationType_DestinationIpAddress)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DestinationIpAddress.Equal(that1.DestinationIpAddress) {
		return false
	}
	return true
}
func (this *DestinationType_SelectedVipAddress) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DestinationType_SelectedVipAddress)
	if !ok {
		that2, ok := that.(DestinationType_SelectedVipAddress)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.SelectedVipAddress.Equal(that1.SelectedVipAddress) {
		return false
	}
	return true
}
func (this *DestinationType_SharedVipServices) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DestinationType_SharedVipServices)
	if !ok {
		that2, ok := that.(DestinationType_SharedVipServices)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.SharedVipServices.Equal(that1.SharedVipServices) {
		return false
	}
	return true
}
func (this *SelectedVIPAddressType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SelectedVIPAddressType)
	if !ok {
		that2, ok := that.(SelectedVIPAddressType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Address) != len(that1.Address) {
		return false
	}
	for i := range this.Address {
		if !this.Address[i].Equal(that1.Address[i]) {
			return false
		}
	}
	return true
}
func (this *DestinationIPAddressType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DestinationIPAddressType)
	if !ok {
		that2, ok := that.(DestinationIPAddressType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Address) != len(that1.Address) {
		return false
	}
	for i := range this.Address {
		if !this.Address[i].Equal(that1.Address[i]) {
			return false
		}
	}
	if len(this.Ports) != len(that1.Ports) {
		return false
	}
	for i := range this.Ports {
		if !this.Ports[i].Equal(that1.Ports[i]) {
			return false
		}
	}
	if this.Protocol != that1.Protocol {
		return false
	}
	return true
}
func (this *SelectedTenantVIPsType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SelectedTenantVIPsType)
	if !ok {
		that2, ok := that.(SelectedTenantVIPsType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.DefaultTenantVip != that1.DefaultTenantVip {
		return false
	}
	if len(this.PublicIpRefs) != len(that1.PublicIpRefs) {
		return false
	}
	for i := range this.PublicIpRefs {
		if !this.PublicIpRefs[i].Equal(that1.PublicIpRefs[i]) {
			return false
		}
	}
	return true
}
func (this *FastACLRuleType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*FastACLRuleType)
	if !ok {
		that2, ok := that.(FastACLRuleType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if !this.Action.Equal(that1.Action) {
		return false
	}
	if len(this.Port) != len(that1.Port) {
		return false
	}
	for i := range this.Port {
		if !this.Port[i].Equal(that1.Port[i]) {
			return false
		}
	}
	if that1.Source == nil {
		if this.Source != nil {
			return false
		}
	} else if this.Source == nil {
		return false
	} else if !this.Source.Equal(that1.Source) {
		return false
	}
	return true
}
func (this *FastACLRuleType_Prefix) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*FastACLRuleType_Prefix)
	if !ok {
		that2, ok := that.(FastACLRuleType_Prefix)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Prefix.Equal(that1.Prefix) {
		return false
	}
	return true
}
func (this *FastACLRuleType_IpPrefixSet) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*FastACLRuleType_IpPrefixSet)
	if !ok {
		that2, ok := that.(FastACLRuleType_IpPrefixSet)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.IpPrefixSet.Equal(that1.IpPrefixSet) {
		return false
	}
	return true
}
func (this *ReACLType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReACLType)
	if !ok {
		that2, ok := that.(ReACLType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.VipChoice == nil {
		if this.VipChoice != nil {
			return false
		}
	} else if this.VipChoice == nil {
		return false
	} else if !this.VipChoice.Equal(that1.VipChoice) {
		return false
	}
	if len(this.FastAclRules) != len(that1.FastAclRules) {
		return false
	}
	for i := range this.FastAclRules {
		if !this.FastAclRules[i].Equal(that1.FastAclRules[i]) {
			return false
		}
	}
	return true
}
func (this *ReACLType_AllPublicVips) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReACLType_AllPublicVips)
	if !ok {
		that2, ok := that.(ReACLType_AllPublicVips)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AllPublicVips.Equal(that1.AllPublicVips) {
		return false
	}
	return true
}
func (this *ReACLType_DefaultTenantVip) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReACLType_DefaultTenantVip)
	if !ok {
		that2, ok := that.(ReACLType_DefaultTenantVip)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DefaultTenantVip.Equal(that1.DefaultTenantVip) {
		return false
	}
	return true
}
func (this *ReACLType_SelectedTenantVip) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReACLType_SelectedTenantVip)
	if !ok {
		that2, ok := that.(ReACLType_SelectedTenantVip)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.SelectedTenantVip.Equal(that1.SelectedTenantVip) {
		return false
	}
	return true
}
func (this *SiteACLType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SiteACLType)
	if !ok {
		that2, ok := that.(SiteACLType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.NetworkChoice == nil {
		if this.NetworkChoice != nil {
			return false
		}
	} else if this.NetworkChoice == nil {
		return false
	} else if !this.NetworkChoice.Equal(that1.NetworkChoice) {
		return false
	}
	if that1.VipChoice == nil {
		if this.VipChoice != nil {
			return false
		}
	} else if this.VipChoice == nil {
		return false
	} else if !this.VipChoice.Equal(that1.VipChoice) {
		return false
	}
	if len(this.FastAclRules) != len(that1.FastAclRules) {
		return false
	}
	for i := range this.FastAclRules {
		if !this.FastAclRules[i].Equal(that1.FastAclRules[i]) {
			return false
		}
	}
	return true
}
func (this *SiteACLType_OutsideNetwork) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SiteACLType_OutsideNetwork)
	if !ok {
		that2, ok := that.(SiteACLType_OutsideNetwork)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.OutsideNetwork.Equal(that1.OutsideNetwork) {
		return false
	}
	return true
}
func (this *SiteACLType_InsideNetwork) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SiteACLType_InsideNetwork)
	if !ok {
		that2, ok := that.(SiteACLType_InsideNetwork)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.InsideNetwork.Equal(that1.InsideNetwork) {
		return false
	}
	return true
}
func (this *SiteACLType_InterfaceServices) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SiteACLType_InterfaceServices)
	if !ok {
		that2, ok := that.(SiteACLType_InterfaceServices)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.InterfaceServices.Equal(that1.InterfaceServices) {
		return false
	}
	return true
}
func (this *SiteACLType_VipServices) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SiteACLType_VipServices)
	if !ok {
		that2, ok := that.(SiteACLType_VipServices)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.VipServices.Equal(that1.VipServices) {
		return false
	}
	return true
}
func (this *SiteACLType_AllServices) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SiteACLType_AllServices)
	if !ok {
		that2, ok := that.(SiteACLType_AllServices)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AllServices.Equal(that1.AllServices) {
		return false
	}
	return true
}
func (this *SiteACLType_DestinationIpAddress) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SiteACLType_DestinationIpAddress)
	if !ok {
		that2, ok := that.(SiteACLType_DestinationIpAddress)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DestinationIpAddress.Equal(that1.DestinationIpAddress) {
		return false
	}
	return true
}
func (this *SiteACLType_SharedVipServices) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SiteACLType_SharedVipServices)
	if !ok {
		that2, ok := that.(SiteACLType_SharedVipServices)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.SharedVipServices.Equal(that1.SharedVipServices) {
		return false
	}
	return true
}
func (this *LegacyACLType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*LegacyACLType)
	if !ok {
		that2, ok := that.(LegacyACLType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NetworkType.Equal(that1.NetworkType) {
		return false
	}
	if !this.DestinationType.Equal(that1.DestinationType) {
		return false
	}
	if len(this.SourceRules) != len(that1.SourceRules) {
		return false
	}
	for i := range this.SourceRules {
		if !this.SourceRules[i].Equal(that1.SourceRules[i]) {
			return false
		}
	}
	return true
}
func (this *GlobalSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType)
	if !ok {
		that2, ok := that.(GlobalSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NetworkType.Equal(that1.NetworkType) {
		return false
	}
	if !this.DestinationType.Equal(that1.DestinationType) {
		return false
	}
	if len(this.SourceRules) != len(that1.SourceRules) {
		return false
	}
	for i := range this.SourceRules {
		if !this.SourceRules[i].Equal(that1.SourceRules[i]) {
			return false
		}
	}
	if len(this.DefaultProtocolPolicer) != len(that1.DefaultProtocolPolicer) {
		return false
	}
	for i := range this.DefaultProtocolPolicer {
		if !this.DefaultProtocolPolicer[i].Equal(that1.DefaultProtocolPolicer[i]) {
			return false
		}
	}
	if that1.ConfigChoice == nil {
		if this.ConfigChoice != nil {
			return false
		}
	} else if this.ConfigChoice == nil {
		return false
	} else if !this.ConfigChoice.Equal(that1.ConfigChoice) {
		return false
	}
	if !this.ProtocolPolicer.Equal(that1.ProtocolPolicer) {
		return false
	}
	if !this.ViewInternal.Equal(that1.ViewInternal) {
		return false
	}
	return true
}
func (this *GlobalSpecType_SiteAcl) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_SiteAcl)
	if !ok {
		that2, ok := that.(GlobalSpecType_SiteAcl)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.SiteAcl.Equal(that1.SiteAcl) {
		return false
	}
	return true
}
func (this *GlobalSpecType_ReAcl) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_ReAcl)
	if !ok {
		that2, ok := that.(GlobalSpecType_ReAcl)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ReAcl.Equal(that1.ReAcl) {
		return false
	}
	return true
}
func (this *GlobalSpecType_LegacyAcl) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_LegacyAcl)
	if !ok {
		that2, ok := that.(GlobalSpecType_LegacyAcl)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.LegacyAcl.Equal(that1.LegacyAcl) {
		return false
	}
	return true
}
func (this *CreateSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType)
	if !ok {
		that2, ok := that.(CreateSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.SiteChoice == nil {
		if this.SiteChoice != nil {
			return false
		}
	} else if this.SiteChoice == nil {
		return false
	} else if !this.SiteChoice.Equal(that1.SiteChoice) {
		return false
	}
	if !this.ProtocolPolicer.Equal(that1.ProtocolPolicer) {
		return false
	}
	return true
}
func (this *CreateSpecType_SiteAcl) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_SiteAcl)
	if !ok {
		that2, ok := that.(CreateSpecType_SiteAcl)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.SiteAcl.Equal(that1.SiteAcl) {
		return false
	}
	return true
}
func (this *CreateSpecType_ReAcl) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_ReAcl)
	if !ok {
		that2, ok := that.(CreateSpecType_ReAcl)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ReAcl.Equal(that1.ReAcl) {
		return false
	}
	return true
}
func (this *CreateSpecType_LegacyAcl) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_LegacyAcl)
	if !ok {
		that2, ok := that.(CreateSpecType_LegacyAcl)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.LegacyAcl.Equal(that1.LegacyAcl) {
		return false
	}
	return true
}
func (this *ReplaceSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType)
	if !ok {
		that2, ok := that.(ReplaceSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.SiteChoice == nil {
		if this.SiteChoice != nil {
			return false
		}
	} else if this.SiteChoice == nil {
		return false
	} else if !this.SiteChoice.Equal(that1.SiteChoice) {
		return false
	}
	if !this.ProtocolPolicer.Equal(that1.ProtocolPolicer) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_SiteAcl) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_SiteAcl)
	if !ok {
		that2, ok := that.(ReplaceSpecType_SiteAcl)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.SiteAcl.Equal(that1.SiteAcl) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_ReAcl) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_ReAcl)
	if !ok {
		that2, ok := that.(ReplaceSpecType_ReAcl)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ReAcl.Equal(that1.ReAcl) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_LegacyAcl) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_LegacyAcl)
	if !ok {
		that2, ok := that.(ReplaceSpecType_LegacyAcl)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.LegacyAcl.Equal(that1.LegacyAcl) {
		return false
	}
	return true
}
func (this *GetSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType)
	if !ok {
		that2, ok := that.(GetSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.SiteChoice == nil {
		if this.SiteChoice != nil {
			return false
		}
	} else if this.SiteChoice == nil {
		return false
	} else if !this.SiteChoice.Equal(that1.SiteChoice) {
		return false
	}
	if !this.ProtocolPolicer.Equal(that1.ProtocolPolicer) {
		return false
	}
	return true
}
func (this *GetSpecType_SiteAcl) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_SiteAcl)
	if !ok {
		that2, ok := that.(GetSpecType_SiteAcl)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.SiteAcl.Equal(that1.SiteAcl) {
		return false
	}
	return true
}
func (this *GetSpecType_ReAcl) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_ReAcl)
	if !ok {
		that2, ok := that.(GetSpecType_ReAcl)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ReAcl.Equal(that1.ReAcl) {
		return false
	}
	return true
}
func (this *GetSpecType_LegacyAcl) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_LegacyAcl)
	if !ok {
		that2, ok := that.(GetSpecType_LegacyAcl)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.LegacyAcl.Equal(that1.LegacyAcl) {
		return false
	}
	return true
}
func (this *DestinationType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&fast_acl.DestinationType{")
	if this.DestinationTypeChoice != nil {
		s = append(s, "DestinationTypeChoice: "+fmt.Sprintf("%#v", this.DestinationTypeChoice)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DestinationType_InterfaceServices) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&fast_acl.DestinationType_InterfaceServices{` +
		`InterfaceServices:` + fmt.Sprintf("%#v", this.InterfaceServices) + `}`}, ", ")
	return s
}
func (this *DestinationType_VipServices) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&fast_acl.DestinationType_VipServices{` +
		`VipServices:` + fmt.Sprintf("%#v", this.VipServices) + `}`}, ", ")
	return s
}
func (this *DestinationType_AllServices) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&fast_acl.DestinationType_AllServices{` +
		`AllServices:` + fmt.Sprintf("%#v", this.AllServices) + `}`}, ", ")
	return s
}
func (this *DestinationType_DestinationIpAddress) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&fast_acl.DestinationType_DestinationIpAddress{` +
		`DestinationIpAddress:` + fmt.Sprintf("%#v", this.DestinationIpAddress) + `}`}, ", ")
	return s
}
func (this *DestinationType_SelectedVipAddress) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&fast_acl.DestinationType_SelectedVipAddress{` +
		`SelectedVipAddress:` + fmt.Sprintf("%#v", this.SelectedVipAddress) + `}`}, ", ")
	return s
}
func (this *DestinationType_SharedVipServices) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&fast_acl.DestinationType_SharedVipServices{` +
		`SharedVipServices:` + fmt.Sprintf("%#v", this.SharedVipServices) + `}`}, ", ")
	return s
}
func (this *SelectedVIPAddressType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&fast_acl.SelectedVIPAddressType{")
	if this.Address != nil {
		s = append(s, "Address: "+fmt.Sprintf("%#v", this.Address)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DestinationIPAddressType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&fast_acl.DestinationIPAddressType{")
	if this.Address != nil {
		s = append(s, "Address: "+fmt.Sprintf("%#v", this.Address)+",\n")
	}
	if this.Ports != nil {
		s = append(s, "Ports: "+fmt.Sprintf("%#v", this.Ports)+",\n")
	}
	s = append(s, "Protocol: "+fmt.Sprintf("%#v", this.Protocol)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SelectedTenantVIPsType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&fast_acl.SelectedTenantVIPsType{")
	s = append(s, "DefaultTenantVip: "+fmt.Sprintf("%#v", this.DefaultTenantVip)+",\n")
	if this.PublicIpRefs != nil {
		s = append(s, "PublicIpRefs: "+fmt.Sprintf("%#v", this.PublicIpRefs)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *FastACLRuleType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&fast_acl.FastACLRuleType{")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	if this.Action != nil {
		s = append(s, "Action: "+fmt.Sprintf("%#v", this.Action)+",\n")
	}
	if this.Port != nil {
		s = append(s, "Port: "+fmt.Sprintf("%#v", this.Port)+",\n")
	}
	if this.Source != nil {
		s = append(s, "Source: "+fmt.Sprintf("%#v", this.Source)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *FastACLRuleType_Prefix) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&fast_acl.FastACLRuleType_Prefix{` +
		`Prefix:` + fmt.Sprintf("%#v", this.Prefix) + `}`}, ", ")
	return s
}
func (this *FastACLRuleType_IpPrefixSet) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&fast_acl.FastACLRuleType_IpPrefixSet{` +
		`IpPrefixSet:` + fmt.Sprintf("%#v", this.IpPrefixSet) + `}`}, ", ")
	return s
}
func (this *ReACLType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&fast_acl.ReACLType{")
	if this.VipChoice != nil {
		s = append(s, "VipChoice: "+fmt.Sprintf("%#v", this.VipChoice)+",\n")
	}
	if this.FastAclRules != nil {
		s = append(s, "FastAclRules: "+fmt.Sprintf("%#v", this.FastAclRules)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ReACLType_AllPublicVips) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&fast_acl.ReACLType_AllPublicVips{` +
		`AllPublicVips:` + fmt.Sprintf("%#v", this.AllPublicVips) + `}`}, ", ")
	return s
}
func (this *ReACLType_DefaultTenantVip) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&fast_acl.ReACLType_DefaultTenantVip{` +
		`DefaultTenantVip:` + fmt.Sprintf("%#v", this.DefaultTenantVip) + `}`}, ", ")
	return s
}
func (this *ReACLType_SelectedTenantVip) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&fast_acl.ReACLType_SelectedTenantVip{` +
		`SelectedTenantVip:` + fmt.Sprintf("%#v", this.SelectedTenantVip) + `}`}, ", ")
	return s
}
func (this *SiteACLType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 12)
	s = append(s, "&fast_acl.SiteACLType{")
	if this.NetworkChoice != nil {
		s = append(s, "NetworkChoice: "+fmt.Sprintf("%#v", this.NetworkChoice)+",\n")
	}
	if this.VipChoice != nil {
		s = append(s, "VipChoice: "+fmt.Sprintf("%#v", this.VipChoice)+",\n")
	}
	if this.FastAclRules != nil {
		s = append(s, "FastAclRules: "+fmt.Sprintf("%#v", this.FastAclRules)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SiteACLType_OutsideNetwork) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&fast_acl.SiteACLType_OutsideNetwork{` +
		`OutsideNetwork:` + fmt.Sprintf("%#v", this.OutsideNetwork) + `}`}, ", ")
	return s
}
func (this *SiteACLType_InsideNetwork) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&fast_acl.SiteACLType_InsideNetwork{` +
		`InsideNetwork:` + fmt.Sprintf("%#v", this.InsideNetwork) + `}`}, ", ")
	return s
}
func (this *SiteACLType_InterfaceServices) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&fast_acl.SiteACLType_InterfaceServices{` +
		`InterfaceServices:` + fmt.Sprintf("%#v", this.InterfaceServices) + `}`}, ", ")
	return s
}
func (this *SiteACLType_VipServices) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&fast_acl.SiteACLType_VipServices{` +
		`VipServices:` + fmt.Sprintf("%#v", this.VipServices) + `}`}, ", ")
	return s
}
func (this *SiteACLType_AllServices) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&fast_acl.SiteACLType_AllServices{` +
		`AllServices:` + fmt.Sprintf("%#v", this.AllServices) + `}`}, ", ")
	return s
}
func (this *SiteACLType_DestinationIpAddress) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&fast_acl.SiteACLType_DestinationIpAddress{` +
		`DestinationIpAddress:` + fmt.Sprintf("%#v", this.DestinationIpAddress) + `}`}, ", ")
	return s
}
func (this *SiteACLType_SharedVipServices) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&fast_acl.SiteACLType_SharedVipServices{` +
		`SharedVipServices:` + fmt.Sprintf("%#v", this.SharedVipServices) + `}`}, ", ")
	return s
}
func (this *LegacyACLType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&fast_acl.LegacyACLType{")
	if this.NetworkType != nil {
		s = append(s, "NetworkType: "+fmt.Sprintf("%#v", this.NetworkType)+",\n")
	}
	if this.DestinationType != nil {
		s = append(s, "DestinationType: "+fmt.Sprintf("%#v", this.DestinationType)+",\n")
	}
	if this.SourceRules != nil {
		s = append(s, "SourceRules: "+fmt.Sprintf("%#v", this.SourceRules)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GlobalSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 13)
	s = append(s, "&fast_acl.GlobalSpecType{")
	if this.NetworkType != nil {
		s = append(s, "NetworkType: "+fmt.Sprintf("%#v", this.NetworkType)+",\n")
	}
	if this.DestinationType != nil {
		s = append(s, "DestinationType: "+fmt.Sprintf("%#v", this.DestinationType)+",\n")
	}
	if this.SourceRules != nil {
		s = append(s, "SourceRules: "+fmt.Sprintf("%#v", this.SourceRules)+",\n")
	}
	if this.DefaultProtocolPolicer != nil {
		s = append(s, "DefaultProtocolPolicer: "+fmt.Sprintf("%#v", this.DefaultProtocolPolicer)+",\n")
	}
	if this.ConfigChoice != nil {
		s = append(s, "ConfigChoice: "+fmt.Sprintf("%#v", this.ConfigChoice)+",\n")
	}
	if this.ProtocolPolicer != nil {
		s = append(s, "ProtocolPolicer: "+fmt.Sprintf("%#v", this.ProtocolPolicer)+",\n")
	}
	if this.ViewInternal != nil {
		s = append(s, "ViewInternal: "+fmt.Sprintf("%#v", this.ViewInternal)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GlobalSpecType_SiteAcl) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&fast_acl.GlobalSpecType_SiteAcl{` +
		`SiteAcl:` + fmt.Sprintf("%#v", this.SiteAcl) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_ReAcl) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&fast_acl.GlobalSpecType_ReAcl{` +
		`ReAcl:` + fmt.Sprintf("%#v", this.ReAcl) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_LegacyAcl) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&fast_acl.GlobalSpecType_LegacyAcl{` +
		`LegacyAcl:` + fmt.Sprintf("%#v", this.LegacyAcl) + `}`}, ", ")
	return s
}
func (this *CreateSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&fast_acl.CreateSpecType{")
	if this.SiteChoice != nil {
		s = append(s, "SiteChoice: "+fmt.Sprintf("%#v", this.SiteChoice)+",\n")
	}
	if this.ProtocolPolicer != nil {
		s = append(s, "ProtocolPolicer: "+fmt.Sprintf("%#v", this.ProtocolPolicer)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CreateSpecType_SiteAcl) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&fast_acl.CreateSpecType_SiteAcl{` +
		`SiteAcl:` + fmt.Sprintf("%#v", this.SiteAcl) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_ReAcl) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&fast_acl.CreateSpecType_ReAcl{` +
		`ReAcl:` + fmt.Sprintf("%#v", this.ReAcl) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_LegacyAcl) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&fast_acl.CreateSpecType_LegacyAcl{` +
		`LegacyAcl:` + fmt.Sprintf("%#v", this.LegacyAcl) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&fast_acl.ReplaceSpecType{")
	if this.SiteChoice != nil {
		s = append(s, "SiteChoice: "+fmt.Sprintf("%#v", this.SiteChoice)+",\n")
	}
	if this.ProtocolPolicer != nil {
		s = append(s, "ProtocolPolicer: "+fmt.Sprintf("%#v", this.ProtocolPolicer)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ReplaceSpecType_SiteAcl) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&fast_acl.ReplaceSpecType_SiteAcl{` +
		`SiteAcl:` + fmt.Sprintf("%#v", this.SiteAcl) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_ReAcl) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&fast_acl.ReplaceSpecType_ReAcl{` +
		`ReAcl:` + fmt.Sprintf("%#v", this.ReAcl) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_LegacyAcl) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&fast_acl.ReplaceSpecType_LegacyAcl{` +
		`LegacyAcl:` + fmt.Sprintf("%#v", this.LegacyAcl) + `}`}, ", ")
	return s
}
func (this *GetSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&fast_acl.GetSpecType{")
	if this.SiteChoice != nil {
		s = append(s, "SiteChoice: "+fmt.Sprintf("%#v", this.SiteChoice)+",\n")
	}
	if this.ProtocolPolicer != nil {
		s = append(s, "ProtocolPolicer: "+fmt.Sprintf("%#v", this.ProtocolPolicer)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetSpecType_SiteAcl) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&fast_acl.GetSpecType_SiteAcl{` +
		`SiteAcl:` + fmt.Sprintf("%#v", this.SiteAcl) + `}`}, ", ")
	return s
}
func (this *GetSpecType_ReAcl) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&fast_acl.GetSpecType_ReAcl{` +
		`ReAcl:` + fmt.Sprintf("%#v", this.ReAcl) + `}`}, ", ")
	return s
}
func (this *GetSpecType_LegacyAcl) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&fast_acl.GetSpecType_LegacyAcl{` +
		`LegacyAcl:` + fmt.Sprintf("%#v", this.LegacyAcl) + `}`}, ", ")
	return s
}
func valueToGoStringTypes(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *DestinationType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DestinationType) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.DestinationTypeChoice != nil {
		nn1, err := m.DestinationTypeChoice.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn1
	}
	return i, nil
}

func (m *DestinationType_InterfaceServices) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.InterfaceServices != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.InterfaceServices.Size()))
		n2, err := m.InterfaceServices.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	return i, nil
}
func (m *DestinationType_VipServices) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.VipServices != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.VipServices.Size()))
		n3, err := m.VipServices.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	return i, nil
}
func (m *DestinationType_AllServices) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.AllServices != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.AllServices.Size()))
		n4, err := m.AllServices.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	return i, nil
}
func (m *DestinationType_DestinationIpAddress) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.DestinationIpAddress != nil {
		dAtA[i] = 0x42
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.DestinationIpAddress.Size()))
		n5, err := m.DestinationIpAddress.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	return i, nil
}
func (m *DestinationType_SelectedVipAddress) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.SelectedVipAddress != nil {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.SelectedVipAddress.Size()))
		n6, err := m.SelectedVipAddress.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	return i, nil
}
func (m *DestinationType_SharedVipServices) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.SharedVipServices != nil {
		dAtA[i] = 0x52
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.SharedVipServices.Size()))
		n7, err := m.SharedVipServices.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	return i, nil
}
func (m *SelectedVIPAddressType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SelectedVIPAddressType) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Address) > 0 {
		for _, msg := range m.Address {
			dAtA[i] = 0xa
			i++
			i = encodeVarintTypes(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *DestinationIPAddressType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DestinationIPAddressType) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Protocol) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Protocol)))
		i += copy(dAtA[i:], m.Protocol)
	}
	if len(m.Ports) > 0 {
		for _, msg := range m.Ports {
			dAtA[i] = 0x22
			i++
			i = encodeVarintTypes(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Address) > 0 {
		for _, msg := range m.Address {
			dAtA[i] = 0x2a
			i++
			i = encodeVarintTypes(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *SelectedTenantVIPsType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SelectedTenantVIPsType) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.DefaultTenantVip {
		dAtA[i] = 0x8
		i++
		if m.DefaultTenantVip {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.PublicIpRefs) > 0 {
		for _, msg := range m.PublicIpRefs {
			dAtA[i] = 0x22
			i++
			i = encodeVarintTypes(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *FastACLRuleType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FastACLRuleType) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if m.Action != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.Action.Size()))
		n8, err := m.Action.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n8
	}
	if len(m.Port) > 0 {
		for _, msg := range m.Port {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintTypes(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Source != nil {
		nn9, err := m.Source.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn9
	}
	return i, nil
}

func (m *FastACLRuleType_Prefix) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Prefix != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.Prefix.Size()))
		n10, err := m.Prefix.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n10
	}
	return i, nil
}
func (m *FastACLRuleType_IpPrefixSet) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.IpPrefixSet != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.IpPrefixSet.Size()))
		n11, err := m.IpPrefixSet.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n11
	}
	return i, nil
}
func (m *ReACLType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReACLType) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.VipChoice != nil {
		nn12, err := m.VipChoice.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn12
	}
	if len(m.FastAclRules) > 0 {
		for _, msg := range m.FastAclRules {
			dAtA[i] = 0x2a
			i++
			i = encodeVarintTypes(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *ReACLType_AllPublicVips) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.AllPublicVips != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.AllPublicVips.Size()))
		n13, err := m.AllPublicVips.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n13
	}
	return i, nil
}
func (m *ReACLType_DefaultTenantVip) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.DefaultTenantVip != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.DefaultTenantVip.Size()))
		n14, err := m.DefaultTenantVip.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n14
	}
	return i, nil
}
func (m *ReACLType_SelectedTenantVip) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.SelectedTenantVip != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.SelectedTenantVip.Size()))
		n15, err := m.SelectedTenantVip.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n15
	}
	return i, nil
}
func (m *SiteACLType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SiteACLType) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.NetworkChoice != nil {
		nn16, err := m.NetworkChoice.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn16
	}
	if m.VipChoice != nil {
		nn17, err := m.VipChoice.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn17
	}
	if len(m.FastAclRules) > 0 {
		for _, msg := range m.FastAclRules {
			dAtA[i] = 0x4a
			i++
			i = encodeVarintTypes(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *SiteACLType_OutsideNetwork) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.OutsideNetwork != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.OutsideNetwork.Size()))
		n18, err := m.OutsideNetwork.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n18
	}
	return i, nil
}
func (m *SiteACLType_InsideNetwork) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.InsideNetwork != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.InsideNetwork.Size()))
		n19, err := m.InsideNetwork.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n19
	}
	return i, nil
}
func (m *SiteACLType_InterfaceServices) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.InterfaceServices != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.InterfaceServices.Size()))
		n20, err := m.InterfaceServices.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n20
	}
	return i, nil
}
func (m *SiteACLType_VipServices) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.VipServices != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.VipServices.Size()))
		n21, err := m.VipServices.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n21
	}
	return i, nil
}
func (m *SiteACLType_AllServices) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.AllServices != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.AllServices.Size()))
		n22, err := m.AllServices.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n22
	}
	return i, nil
}
func (m *SiteACLType_DestinationIpAddress) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.DestinationIpAddress != nil {
		dAtA[i] = 0x42
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.DestinationIpAddress.Size()))
		n23, err := m.DestinationIpAddress.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n23
	}
	return i, nil
}
func (m *SiteACLType_SharedVipServices) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.SharedVipServices != nil {
		dAtA[i] = 0x52
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.SharedVipServices.Size()))
		n24, err := m.SharedVipServices.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n24
	}
	return i, nil
}
func (m *LegacyACLType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LegacyACLType) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.NetworkType != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.NetworkType.Size()))
		n25, err := m.NetworkType.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n25
	}
	if m.DestinationType != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.DestinationType.Size()))
		n26, err := m.DestinationType.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n26
	}
	if len(m.SourceRules) > 0 {
		for _, msg := range m.SourceRules {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintTypes(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *GlobalSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GlobalSpecType) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.SourceRules) > 0 {
		for _, msg := range m.SourceRules {
			dAtA[i] = 0x52
			i++
			i = encodeVarintTypes(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.DefaultProtocolPolicer) > 0 {
		for _, msg := range m.DefaultProtocolPolicer {
			dAtA[i] = 0x5a
			i++
			i = encodeVarintTypes(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.NetworkType != nil {
		dAtA[i] = 0x62
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.NetworkType.Size()))
		n27, err := m.NetworkType.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n27
	}
	if m.DestinationType != nil {
		dAtA[i] = 0x6a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.DestinationType.Size()))
		n28, err := m.DestinationType.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n28
	}
	if m.ConfigChoice != nil {
		nn29, err := m.ConfigChoice.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn29
	}
	if m.ProtocolPolicer != nil {
		dAtA[i] = 0xba
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.ProtocolPolicer.Size()))
		n30, err := m.ProtocolPolicer.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n30
	}
	if m.ViewInternal != nil {
		dAtA[i] = 0xc2
		i++
		dAtA[i] = 0x3e
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.ViewInternal.Size()))
		n31, err := m.ViewInternal.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n31
	}
	return i, nil
}

func (m *GlobalSpecType_SiteAcl) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.SiteAcl != nil {
		dAtA[i] = 0xa2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.SiteAcl.Size()))
		n32, err := m.SiteAcl.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n32
	}
	return i, nil
}
func (m *GlobalSpecType_ReAcl) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.ReAcl != nil {
		dAtA[i] = 0xaa
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.ReAcl.Size()))
		n33, err := m.ReAcl.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n33
	}
	return i, nil
}
func (m *GlobalSpecType_LegacyAcl) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.LegacyAcl != nil {
		dAtA[i] = 0xb2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.LegacyAcl.Size()))
		n34, err := m.LegacyAcl.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n34
	}
	return i, nil
}
func (m *CreateSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateSpecType) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.SiteChoice != nil {
		nn35, err := m.SiteChoice.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn35
	}
	if m.ProtocolPolicer != nil {
		dAtA[i] = 0xba
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.ProtocolPolicer.Size()))
		n36, err := m.ProtocolPolicer.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n36
	}
	return i, nil
}

func (m *CreateSpecType_SiteAcl) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.SiteAcl != nil {
		dAtA[i] = 0x82
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.SiteAcl.Size()))
		n37, err := m.SiteAcl.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n37
	}
	return i, nil
}
func (m *CreateSpecType_ReAcl) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.ReAcl != nil {
		dAtA[i] = 0x8a
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.ReAcl.Size()))
		n38, err := m.ReAcl.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n38
	}
	return i, nil
}
func (m *CreateSpecType_LegacyAcl) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.LegacyAcl != nil {
		dAtA[i] = 0x92
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.LegacyAcl.Size()))
		n39, err := m.LegacyAcl.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n39
	}
	return i, nil
}
func (m *ReplaceSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplaceSpecType) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.SiteChoice != nil {
		nn40, err := m.SiteChoice.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn40
	}
	if m.ProtocolPolicer != nil {
		dAtA[i] = 0xba
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.ProtocolPolicer.Size()))
		n41, err := m.ProtocolPolicer.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n41
	}
	return i, nil
}

func (m *ReplaceSpecType_SiteAcl) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.SiteAcl != nil {
		dAtA[i] = 0x82
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.SiteAcl.Size()))
		n42, err := m.SiteAcl.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n42
	}
	return i, nil
}
func (m *ReplaceSpecType_ReAcl) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.ReAcl != nil {
		dAtA[i] = 0x8a
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.ReAcl.Size()))
		n43, err := m.ReAcl.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n43
	}
	return i, nil
}
func (m *ReplaceSpecType_LegacyAcl) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.LegacyAcl != nil {
		dAtA[i] = 0x92
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.LegacyAcl.Size()))
		n44, err := m.LegacyAcl.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n44
	}
	return i, nil
}
func (m *GetSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetSpecType) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.SiteChoice != nil {
		nn45, err := m.SiteChoice.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn45
	}
	if m.ProtocolPolicer != nil {
		dAtA[i] = 0xba
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.ProtocolPolicer.Size()))
		n46, err := m.ProtocolPolicer.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n46
	}
	return i, nil
}

func (m *GetSpecType_SiteAcl) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.SiteAcl != nil {
		dAtA[i] = 0x82
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.SiteAcl.Size()))
		n47, err := m.SiteAcl.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n47
	}
	return i, nil
}
func (m *GetSpecType_ReAcl) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.ReAcl != nil {
		dAtA[i] = 0x8a
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.ReAcl.Size()))
		n48, err := m.ReAcl.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n48
	}
	return i, nil
}
func (m *GetSpecType_LegacyAcl) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.LegacyAcl != nil {
		dAtA[i] = 0x92
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.LegacyAcl.Size()))
		n49, err := m.LegacyAcl.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n49
	}
	return i, nil
}
func encodeVarintTypes(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func NewPopulatedDestinationType(r randyTypes, easy bool) *DestinationType {
	this := &DestinationType{}
	oneofNumber_DestinationTypeChoice := []int32{4, 5, 6, 8, 9, 10}[r.Intn(6)]
	switch oneofNumber_DestinationTypeChoice {
	case 4:
		this.DestinationTypeChoice = NewPopulatedDestinationType_InterfaceServices(r, easy)
	case 5:
		this.DestinationTypeChoice = NewPopulatedDestinationType_VipServices(r, easy)
	case 6:
		this.DestinationTypeChoice = NewPopulatedDestinationType_AllServices(r, easy)
	case 8:
		this.DestinationTypeChoice = NewPopulatedDestinationType_DestinationIpAddress(r, easy)
	case 9:
		this.DestinationTypeChoice = NewPopulatedDestinationType_SelectedVipAddress(r, easy)
	case 10:
		this.DestinationTypeChoice = NewPopulatedDestinationType_SharedVipServices(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedDestinationType_InterfaceServices(r randyTypes, easy bool) *DestinationType_InterfaceServices {
	this := &DestinationType_InterfaceServices{}
	this.InterfaceServices = ves_io_schema4.NewPopulatedEmpty(r, easy)
	return this
}
func NewPopulatedDestinationType_VipServices(r randyTypes, easy bool) *DestinationType_VipServices {
	this := &DestinationType_VipServices{}
	this.VipServices = ves_io_schema4.NewPopulatedEmpty(r, easy)
	return this
}
func NewPopulatedDestinationType_AllServices(r randyTypes, easy bool) *DestinationType_AllServices {
	this := &DestinationType_AllServices{}
	this.AllServices = ves_io_schema4.NewPopulatedEmpty(r, easy)
	return this
}
func NewPopulatedDestinationType_DestinationIpAddress(r randyTypes, easy bool) *DestinationType_DestinationIpAddress {
	this := &DestinationType_DestinationIpAddress{}
	this.DestinationIpAddress = NewPopulatedDestinationIPAddressType(r, easy)
	return this
}
func NewPopulatedDestinationType_SelectedVipAddress(r randyTypes, easy bool) *DestinationType_SelectedVipAddress {
	this := &DestinationType_SelectedVipAddress{}
	this.SelectedVipAddress = NewPopulatedSelectedVIPAddressType(r, easy)
	return this
}
func NewPopulatedDestinationType_SharedVipServices(r randyTypes, easy bool) *DestinationType_SharedVipServices {
	this := &DestinationType_SharedVipServices{}
	this.SharedVipServices = ves_io_schema4.NewPopulatedEmpty(r, easy)
	return this
}
func NewPopulatedSelectedVIPAddressType(r randyTypes, easy bool) *SelectedVIPAddressType {
	this := &SelectedVIPAddressType{}
	if r.Intn(10) != 0 {
		v1 := r.Intn(5)
		this.Address = make([]*ves_io_schema3.IpAddressType, v1)
		for i := 0; i < v1; i++ {
			this.Address[i] = ves_io_schema3.NewPopulatedIpAddressType(r, easy)
		}
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedDestinationIPAddressType(r randyTypes, easy bool) *DestinationIPAddressType {
	this := &DestinationIPAddressType{}
	this.Protocol = string(randStringTypes(r))
	if r.Intn(10) != 0 {
		v2 := r.Intn(5)
		this.Ports = make([]*ves_io_schema4.PortValueType, v2)
		for i := 0; i < v2; i++ {
			this.Ports[i] = ves_io_schema4.NewPopulatedPortValueType(r, easy)
		}
	}
	if r.Intn(10) != 0 {
		v3 := r.Intn(5)
		this.Address = make([]*ves_io_schema3.IpAddressType, v3)
		for i := 0; i < v3; i++ {
			this.Address[i] = ves_io_schema3.NewPopulatedIpAddressType(r, easy)
		}
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedSelectedTenantVIPsType(r randyTypes, easy bool) *SelectedTenantVIPsType {
	this := &SelectedTenantVIPsType{}
	this.DefaultTenantVip = bool(bool(r.Intn(2) == 0))
	if r.Intn(10) != 0 {
		v4 := r.Intn(5)
		this.PublicIpRefs = make([]*ves_io_schema_views.ObjectRefType, v4)
		for i := 0; i < v4; i++ {
			this.PublicIpRefs[i] = ves_io_schema_views.NewPopulatedObjectRefType(r, easy)
		}
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedFastACLRuleType(r randyTypes, easy bool) *FastACLRuleType {
	this := &FastACLRuleType{}
	this.Name = string(randStringTypes(r))
	if r.Intn(10) != 0 {
		this.Action = ves_io_schema_fast_acl_rule.NewPopulatedFastAclRuleAction(r, easy)
	}
	if r.Intn(10) != 0 {
		v5 := r.Intn(5)
		this.Port = make([]*ves_io_schema4.PortValueType, v5)
		for i := 0; i < v5; i++ {
			this.Port[i] = ves_io_schema4.NewPopulatedPortValueType(r, easy)
		}
	}
	oneofNumber_Source := []int32{5, 6}[r.Intn(2)]
	switch oneofNumber_Source {
	case 5:
		this.Source = NewPopulatedFastACLRuleType_Prefix(r, easy)
	case 6:
		this.Source = NewPopulatedFastACLRuleType_IpPrefixSet(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedFastACLRuleType_Prefix(r randyTypes, easy bool) *FastACLRuleType_Prefix {
	this := &FastACLRuleType_Prefix{}
	this.Prefix = ves_io_schema3.NewPopulatedPrefixListType(r, easy)
	return this
}
func NewPopulatedFastACLRuleType_IpPrefixSet(r randyTypes, easy bool) *FastACLRuleType_IpPrefixSet {
	this := &FastACLRuleType_IpPrefixSet{}
	this.IpPrefixSet = ves_io_schema4.NewPopulatedIpPrefixSetRefType(r, easy)
	return this
}
func NewPopulatedReACLType(r randyTypes, easy bool) *ReACLType {
	this := &ReACLType{}
	oneofNumber_VipChoice := []int32{2, 3, 4}[r.Intn(3)]
	switch oneofNumber_VipChoice {
	case 2:
		this.VipChoice = NewPopulatedReACLType_AllPublicVips(r, easy)
	case 3:
		this.VipChoice = NewPopulatedReACLType_DefaultTenantVip(r, easy)
	case 4:
		this.VipChoice = NewPopulatedReACLType_SelectedTenantVip(r, easy)
	}
	if r.Intn(10) != 0 {
		v6 := r.Intn(5)
		this.FastAclRules = make([]*FastACLRuleType, v6)
		for i := 0; i < v6; i++ {
			this.FastAclRules[i] = NewPopulatedFastACLRuleType(r, easy)
		}
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedReACLType_AllPublicVips(r randyTypes, easy bool) *ReACLType_AllPublicVips {
	this := &ReACLType_AllPublicVips{}
	this.AllPublicVips = ves_io_schema4.NewPopulatedEmpty(r, easy)
	return this
}
func NewPopulatedReACLType_DefaultTenantVip(r randyTypes, easy bool) *ReACLType_DefaultTenantVip {
	this := &ReACLType_DefaultTenantVip{}
	this.DefaultTenantVip = ves_io_schema4.NewPopulatedEmpty(r, easy)
	return this
}
func NewPopulatedReACLType_SelectedTenantVip(r randyTypes, easy bool) *ReACLType_SelectedTenantVip {
	this := &ReACLType_SelectedTenantVip{}
	this.SelectedTenantVip = NewPopulatedSelectedTenantVIPsType(r, easy)
	return this
}
func NewPopulatedSiteACLType(r randyTypes, easy bool) *SiteACLType {
	this := &SiteACLType{}
	oneofNumber_NetworkChoice := []int32{2, 3}[r.Intn(2)]
	switch oneofNumber_NetworkChoice {
	case 2:
		this.NetworkChoice = NewPopulatedSiteACLType_OutsideNetwork(r, easy)
	case 3:
		this.NetworkChoice = NewPopulatedSiteACLType_InsideNetwork(r, easy)
	}
	oneofNumber_VipChoice := []int32{5, 6, 7, 8, 10}[r.Intn(5)]
	switch oneofNumber_VipChoice {
	case 5:
		this.VipChoice = NewPopulatedSiteACLType_InterfaceServices(r, easy)
	case 6:
		this.VipChoice = NewPopulatedSiteACLType_VipServices(r, easy)
	case 7:
		this.VipChoice = NewPopulatedSiteACLType_AllServices(r, easy)
	case 8:
		this.VipChoice = NewPopulatedSiteACLType_DestinationIpAddress(r, easy)
	case 10:
		this.VipChoice = NewPopulatedSiteACLType_SharedVipServices(r, easy)
	}
	if r.Intn(10) != 0 {
		v7 := r.Intn(5)
		this.FastAclRules = make([]*FastACLRuleType, v7)
		for i := 0; i < v7; i++ {
			this.FastAclRules[i] = NewPopulatedFastACLRuleType(r, easy)
		}
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedSiteACLType_OutsideNetwork(r randyTypes, easy bool) *SiteACLType_OutsideNetwork {
	this := &SiteACLType_OutsideNetwork{}
	this.OutsideNetwork = ves_io_schema4.NewPopulatedEmpty(r, easy)
	return this
}
func NewPopulatedSiteACLType_InsideNetwork(r randyTypes, easy bool) *SiteACLType_InsideNetwork {
	this := &SiteACLType_InsideNetwork{}
	this.InsideNetwork = ves_io_schema4.NewPopulatedEmpty(r, easy)
	return this
}
func NewPopulatedSiteACLType_InterfaceServices(r randyTypes, easy bool) *SiteACLType_InterfaceServices {
	this := &SiteACLType_InterfaceServices{}
	this.InterfaceServices = ves_io_schema4.NewPopulatedEmpty(r, easy)
	return this
}
func NewPopulatedSiteACLType_VipServices(r randyTypes, easy bool) *SiteACLType_VipServices {
	this := &SiteACLType_VipServices{}
	this.VipServices = ves_io_schema4.NewPopulatedEmpty(r, easy)
	return this
}
func NewPopulatedSiteACLType_AllServices(r randyTypes, easy bool) *SiteACLType_AllServices {
	this := &SiteACLType_AllServices{}
	this.AllServices = ves_io_schema4.NewPopulatedEmpty(r, easy)
	return this
}
func NewPopulatedSiteACLType_DestinationIpAddress(r randyTypes, easy bool) *SiteACLType_DestinationIpAddress {
	this := &SiteACLType_DestinationIpAddress{}
	this.DestinationIpAddress = NewPopulatedDestinationIPAddressType(r, easy)
	return this
}
func NewPopulatedSiteACLType_SharedVipServices(r randyTypes, easy bool) *SiteACLType_SharedVipServices {
	this := &SiteACLType_SharedVipServices{}
	this.SharedVipServices = ves_io_schema4.NewPopulatedEmpty(r, easy)
	return this
}
func NewPopulatedLegacyACLType(r randyTypes, easy bool) *LegacyACLType {
	this := &LegacyACLType{}
	if r.Intn(10) != 0 {
		this.NetworkType = ves_io_schema4.NewPopulatedVirtualNetworkSelectorType(r, easy)
	}
	if r.Intn(10) != 0 {
		this.DestinationType = NewPopulatedDestinationType(r, easy)
	}
	if r.Intn(10) != 0 {
		v8 := r.Intn(5)
		this.SourceRules = make([]*ves_io_schema_views.ObjectRefType, v8)
		for i := 0; i < v8; i++ {
			this.SourceRules[i] = ves_io_schema_views.NewPopulatedObjectRefType(r, easy)
		}
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedGlobalSpecType(r randyTypes, easy bool) *GlobalSpecType {
	this := &GlobalSpecType{}
	if r.Intn(10) != 0 {
		v9 := r.Intn(5)
		this.SourceRules = make([]*ves_io_schema4.ObjectRefType, v9)
		for i := 0; i < v9; i++ {
			this.SourceRules[i] = ves_io_schema4.NewPopulatedObjectRefType(r, easy)
		}
	}
	if r.Intn(10) != 0 {
		v10 := r.Intn(5)
		this.DefaultProtocolPolicer = make([]*ves_io_schema4.ObjectRefType, v10)
		for i := 0; i < v10; i++ {
			this.DefaultProtocolPolicer[i] = ves_io_schema4.NewPopulatedObjectRefType(r, easy)
		}
	}
	if r.Intn(10) != 0 {
		this.NetworkType = ves_io_schema4.NewPopulatedVirtualNetworkSelectorType(r, easy)
	}
	if r.Intn(10) != 0 {
		this.DestinationType = NewPopulatedDestinationType(r, easy)
	}
	oneofNumber_ConfigChoice := []int32{20, 21, 22}[r.Intn(3)]
	switch oneofNumber_ConfigChoice {
	case 20:
		this.ConfigChoice = NewPopulatedGlobalSpecType_SiteAcl(r, easy)
	case 21:
		this.ConfigChoice = NewPopulatedGlobalSpecType_ReAcl(r, easy)
	case 22:
		this.ConfigChoice = NewPopulatedGlobalSpecType_LegacyAcl(r, easy)
	}
	if r.Intn(10) != 0 {
		this.ProtocolPolicer = ves_io_schema_views.NewPopulatedObjectRefType(r, easy)
	}
	if r.Intn(10) != 0 {
		this.ViewInternal = ves_io_schema_views.NewPopulatedObjectRefType(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedGlobalSpecType_SiteAcl(r randyTypes, easy bool) *GlobalSpecType_SiteAcl {
	this := &GlobalSpecType_SiteAcl{}
	this.SiteAcl = NewPopulatedSiteACLType(r, easy)
	return this
}
func NewPopulatedGlobalSpecType_ReAcl(r randyTypes, easy bool) *GlobalSpecType_ReAcl {
	this := &GlobalSpecType_ReAcl{}
	this.ReAcl = NewPopulatedReACLType(r, easy)
	return this
}
func NewPopulatedGlobalSpecType_LegacyAcl(r randyTypes, easy bool) *GlobalSpecType_LegacyAcl {
	this := &GlobalSpecType_LegacyAcl{}
	this.LegacyAcl = ves_io_schema4.NewPopulatedEmpty(r, easy)
	return this
}
func NewPopulatedCreateSpecType(r randyTypes, easy bool) *CreateSpecType {
	this := &CreateSpecType{}
	oneofNumber_SiteChoice := []int32{16, 17, 18}[r.Intn(3)]
	switch oneofNumber_SiteChoice {
	case 16:
		this.SiteChoice = NewPopulatedCreateSpecType_SiteAcl(r, easy)
	case 17:
		this.SiteChoice = NewPopulatedCreateSpecType_ReAcl(r, easy)
	case 18:
		this.SiteChoice = NewPopulatedCreateSpecType_LegacyAcl(r, easy)
	}
	if r.Intn(10) != 0 {
		this.ProtocolPolicer = ves_io_schema_views.NewPopulatedObjectRefType(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedCreateSpecType_SiteAcl(r randyTypes, easy bool) *CreateSpecType_SiteAcl {
	this := &CreateSpecType_SiteAcl{}
	this.SiteAcl = NewPopulatedSiteACLType(r, easy)
	return this
}
func NewPopulatedCreateSpecType_ReAcl(r randyTypes, easy bool) *CreateSpecType_ReAcl {
	this := &CreateSpecType_ReAcl{}
	this.ReAcl = NewPopulatedReACLType(r, easy)
	return this
}
func NewPopulatedCreateSpecType_LegacyAcl(r randyTypes, easy bool) *CreateSpecType_LegacyAcl {
	this := &CreateSpecType_LegacyAcl{}
	this.LegacyAcl = NewPopulatedLegacyACLType(r, easy)
	return this
}
func NewPopulatedReplaceSpecType(r randyTypes, easy bool) *ReplaceSpecType {
	this := &ReplaceSpecType{}
	oneofNumber_SiteChoice := []int32{16, 17, 18}[r.Intn(3)]
	switch oneofNumber_SiteChoice {
	case 16:
		this.SiteChoice = NewPopulatedReplaceSpecType_SiteAcl(r, easy)
	case 17:
		this.SiteChoice = NewPopulatedReplaceSpecType_ReAcl(r, easy)
	case 18:
		this.SiteChoice = NewPopulatedReplaceSpecType_LegacyAcl(r, easy)
	}
	if r.Intn(10) != 0 {
		this.ProtocolPolicer = ves_io_schema_views.NewPopulatedObjectRefType(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedReplaceSpecType_SiteAcl(r randyTypes, easy bool) *ReplaceSpecType_SiteAcl {
	this := &ReplaceSpecType_SiteAcl{}
	this.SiteAcl = NewPopulatedSiteACLType(r, easy)
	return this
}
func NewPopulatedReplaceSpecType_ReAcl(r randyTypes, easy bool) *ReplaceSpecType_ReAcl {
	this := &ReplaceSpecType_ReAcl{}
	this.ReAcl = NewPopulatedReACLType(r, easy)
	return this
}
func NewPopulatedReplaceSpecType_LegacyAcl(r randyTypes, easy bool) *ReplaceSpecType_LegacyAcl {
	this := &ReplaceSpecType_LegacyAcl{}
	this.LegacyAcl = NewPopulatedLegacyACLType(r, easy)
	return this
}
func NewPopulatedGetSpecType(r randyTypes, easy bool) *GetSpecType {
	this := &GetSpecType{}
	oneofNumber_SiteChoice := []int32{16, 17, 18}[r.Intn(3)]
	switch oneofNumber_SiteChoice {
	case 16:
		this.SiteChoice = NewPopulatedGetSpecType_SiteAcl(r, easy)
	case 17:
		this.SiteChoice = NewPopulatedGetSpecType_ReAcl(r, easy)
	case 18:
		this.SiteChoice = NewPopulatedGetSpecType_LegacyAcl(r, easy)
	}
	if r.Intn(10) != 0 {
		this.ProtocolPolicer = ves_io_schema_views.NewPopulatedObjectRefType(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedGetSpecType_SiteAcl(r randyTypes, easy bool) *GetSpecType_SiteAcl {
	this := &GetSpecType_SiteAcl{}
	this.SiteAcl = NewPopulatedSiteACLType(r, easy)
	return this
}
func NewPopulatedGetSpecType_ReAcl(r randyTypes, easy bool) *GetSpecType_ReAcl {
	this := &GetSpecType_ReAcl{}
	this.ReAcl = NewPopulatedReACLType(r, easy)
	return this
}
func NewPopulatedGetSpecType_LegacyAcl(r randyTypes, easy bool) *GetSpecType_LegacyAcl {
	this := &GetSpecType_LegacyAcl{}
	this.LegacyAcl = NewPopulatedLegacyACLType(r, easy)
	return this
}

type randyTypes interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneTypes(r randyTypes) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringTypes(r randyTypes) string {
	v11 := r.Intn(100)
	tmps := make([]rune, v11)
	for i := 0; i < v11; i++ {
		tmps[i] = randUTF8RuneTypes(r)
	}
	return string(tmps)
}
func randUnrecognizedTypes(r randyTypes, maxFieldNumber int) (dAtA []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		dAtA = randFieldTypes(dAtA, r, fieldNumber, wire)
	}
	return dAtA
}
func randFieldTypes(dAtA []byte, r randyTypes, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		dAtA = encodeVarintPopulateTypes(dAtA, uint64(key))
		v12 := r.Int63()
		if r.Intn(2) == 0 {
			v12 *= -1
		}
		dAtA = encodeVarintPopulateTypes(dAtA, uint64(v12))
	case 1:
		dAtA = encodeVarintPopulateTypes(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		dAtA = encodeVarintPopulateTypes(dAtA, uint64(key))
		ll := r.Intn(100)
		dAtA = encodeVarintPopulateTypes(dAtA, uint64(ll))
		for j := 0; j < ll; j++ {
			dAtA = append(dAtA, byte(r.Intn(256)))
		}
	default:
		dAtA = encodeVarintPopulateTypes(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return dAtA
}
func encodeVarintPopulateTypes(dAtA []byte, v uint64) []byte {
	for v >= 1<<7 {
		dAtA = append(dAtA, uint8(uint64(v)&0x7f|0x80))
		v >>= 7
	}
	dAtA = append(dAtA, uint8(v))
	return dAtA
}
func (m *DestinationType) Size() (n int) {
	var l int
	_ = l
	if m.DestinationTypeChoice != nil {
		n += m.DestinationTypeChoice.Size()
	}
	return n
}

func (m *DestinationType_InterfaceServices) Size() (n int) {
	var l int
	_ = l
	if m.InterfaceServices != nil {
		l = m.InterfaceServices.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *DestinationType_VipServices) Size() (n int) {
	var l int
	_ = l
	if m.VipServices != nil {
		l = m.VipServices.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *DestinationType_AllServices) Size() (n int) {
	var l int
	_ = l
	if m.AllServices != nil {
		l = m.AllServices.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *DestinationType_DestinationIpAddress) Size() (n int) {
	var l int
	_ = l
	if m.DestinationIpAddress != nil {
		l = m.DestinationIpAddress.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *DestinationType_SelectedVipAddress) Size() (n int) {
	var l int
	_ = l
	if m.SelectedVipAddress != nil {
		l = m.SelectedVipAddress.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *DestinationType_SharedVipServices) Size() (n int) {
	var l int
	_ = l
	if m.SharedVipServices != nil {
		l = m.SharedVipServices.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *SelectedVIPAddressType) Size() (n int) {
	var l int
	_ = l
	if len(m.Address) > 0 {
		for _, e := range m.Address {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *DestinationIPAddressType) Size() (n int) {
	var l int
	_ = l
	l = len(m.Protocol)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if len(m.Ports) > 0 {
		for _, e := range m.Ports {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if len(m.Address) > 0 {
		for _, e := range m.Address {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *SelectedTenantVIPsType) Size() (n int) {
	var l int
	_ = l
	if m.DefaultTenantVip {
		n += 2
	}
	if len(m.PublicIpRefs) > 0 {
		for _, e := range m.PublicIpRefs {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *FastACLRuleType) Size() (n int) {
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.Action != nil {
		l = m.Action.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if len(m.Port) > 0 {
		for _, e := range m.Port {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if m.Source != nil {
		n += m.Source.Size()
	}
	return n
}

func (m *FastACLRuleType_Prefix) Size() (n int) {
	var l int
	_ = l
	if m.Prefix != nil {
		l = m.Prefix.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *FastACLRuleType_IpPrefixSet) Size() (n int) {
	var l int
	_ = l
	if m.IpPrefixSet != nil {
		l = m.IpPrefixSet.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReACLType) Size() (n int) {
	var l int
	_ = l
	if m.VipChoice != nil {
		n += m.VipChoice.Size()
	}
	if len(m.FastAclRules) > 0 {
		for _, e := range m.FastAclRules {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *ReACLType_AllPublicVips) Size() (n int) {
	var l int
	_ = l
	if m.AllPublicVips != nil {
		l = m.AllPublicVips.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReACLType_DefaultTenantVip) Size() (n int) {
	var l int
	_ = l
	if m.DefaultTenantVip != nil {
		l = m.DefaultTenantVip.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReACLType_SelectedTenantVip) Size() (n int) {
	var l int
	_ = l
	if m.SelectedTenantVip != nil {
		l = m.SelectedTenantVip.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *SiteACLType) Size() (n int) {
	var l int
	_ = l
	if m.NetworkChoice != nil {
		n += m.NetworkChoice.Size()
	}
	if m.VipChoice != nil {
		n += m.VipChoice.Size()
	}
	if len(m.FastAclRules) > 0 {
		for _, e := range m.FastAclRules {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *SiteACLType_OutsideNetwork) Size() (n int) {
	var l int
	_ = l
	if m.OutsideNetwork != nil {
		l = m.OutsideNetwork.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *SiteACLType_InsideNetwork) Size() (n int) {
	var l int
	_ = l
	if m.InsideNetwork != nil {
		l = m.InsideNetwork.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *SiteACLType_InterfaceServices) Size() (n int) {
	var l int
	_ = l
	if m.InterfaceServices != nil {
		l = m.InterfaceServices.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *SiteACLType_VipServices) Size() (n int) {
	var l int
	_ = l
	if m.VipServices != nil {
		l = m.VipServices.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *SiteACLType_AllServices) Size() (n int) {
	var l int
	_ = l
	if m.AllServices != nil {
		l = m.AllServices.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *SiteACLType_DestinationIpAddress) Size() (n int) {
	var l int
	_ = l
	if m.DestinationIpAddress != nil {
		l = m.DestinationIpAddress.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *SiteACLType_SharedVipServices) Size() (n int) {
	var l int
	_ = l
	if m.SharedVipServices != nil {
		l = m.SharedVipServices.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *LegacyACLType) Size() (n int) {
	var l int
	_ = l
	if m.NetworkType != nil {
		l = m.NetworkType.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.DestinationType != nil {
		l = m.DestinationType.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if len(m.SourceRules) > 0 {
		for _, e := range m.SourceRules {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *GlobalSpecType) Size() (n int) {
	var l int
	_ = l
	if len(m.SourceRules) > 0 {
		for _, e := range m.SourceRules {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if len(m.DefaultProtocolPolicer) > 0 {
		for _, e := range m.DefaultProtocolPolicer {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if m.NetworkType != nil {
		l = m.NetworkType.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.DestinationType != nil {
		l = m.DestinationType.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.ConfigChoice != nil {
		n += m.ConfigChoice.Size()
	}
	if m.ProtocolPolicer != nil {
		l = m.ProtocolPolicer.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	if m.ViewInternal != nil {
		l = m.ViewInternal.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *GlobalSpecType_SiteAcl) Size() (n int) {
	var l int
	_ = l
	if m.SiteAcl != nil {
		l = m.SiteAcl.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_ReAcl) Size() (n int) {
	var l int
	_ = l
	if m.ReAcl != nil {
		l = m.ReAcl.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_LegacyAcl) Size() (n int) {
	var l int
	_ = l
	if m.LegacyAcl != nil {
		l = m.LegacyAcl.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType) Size() (n int) {
	var l int
	_ = l
	if m.SiteChoice != nil {
		n += m.SiteChoice.Size()
	}
	if m.ProtocolPolicer != nil {
		l = m.ProtocolPolicer.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *CreateSpecType_SiteAcl) Size() (n int) {
	var l int
	_ = l
	if m.SiteAcl != nil {
		l = m.SiteAcl.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_ReAcl) Size() (n int) {
	var l int
	_ = l
	if m.ReAcl != nil {
		l = m.ReAcl.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_LegacyAcl) Size() (n int) {
	var l int
	_ = l
	if m.LegacyAcl != nil {
		l = m.LegacyAcl.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType) Size() (n int) {
	var l int
	_ = l
	if m.SiteChoice != nil {
		n += m.SiteChoice.Size()
	}
	if m.ProtocolPolicer != nil {
		l = m.ProtocolPolicer.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *ReplaceSpecType_SiteAcl) Size() (n int) {
	var l int
	_ = l
	if m.SiteAcl != nil {
		l = m.SiteAcl.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_ReAcl) Size() (n int) {
	var l int
	_ = l
	if m.ReAcl != nil {
		l = m.ReAcl.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_LegacyAcl) Size() (n int) {
	var l int
	_ = l
	if m.LegacyAcl != nil {
		l = m.LegacyAcl.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType) Size() (n int) {
	var l int
	_ = l
	if m.SiteChoice != nil {
		n += m.SiteChoice.Size()
	}
	if m.ProtocolPolicer != nil {
		l = m.ProtocolPolicer.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *GetSpecType_SiteAcl) Size() (n int) {
	var l int
	_ = l
	if m.SiteAcl != nil {
		l = m.SiteAcl.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_ReAcl) Size() (n int) {
	var l int
	_ = l
	if m.ReAcl != nil {
		l = m.ReAcl.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_LegacyAcl) Size() (n int) {
	var l int
	_ = l
	if m.LegacyAcl != nil {
		l = m.LegacyAcl.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}

func sovTypes(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozTypes(x uint64) (n int) {
	return sovTypes(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *DestinationType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DestinationType{`,
		`DestinationTypeChoice:` + fmt.Sprintf("%v", this.DestinationTypeChoice) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DestinationType_InterfaceServices) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DestinationType_InterfaceServices{`,
		`InterfaceServices:` + strings.Replace(fmt.Sprintf("%v", this.InterfaceServices), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DestinationType_VipServices) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DestinationType_VipServices{`,
		`VipServices:` + strings.Replace(fmt.Sprintf("%v", this.VipServices), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DestinationType_AllServices) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DestinationType_AllServices{`,
		`AllServices:` + strings.Replace(fmt.Sprintf("%v", this.AllServices), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DestinationType_DestinationIpAddress) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DestinationType_DestinationIpAddress{`,
		`DestinationIpAddress:` + strings.Replace(fmt.Sprintf("%v", this.DestinationIpAddress), "DestinationIPAddressType", "DestinationIPAddressType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DestinationType_SelectedVipAddress) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DestinationType_SelectedVipAddress{`,
		`SelectedVipAddress:` + strings.Replace(fmt.Sprintf("%v", this.SelectedVipAddress), "SelectedVIPAddressType", "SelectedVIPAddressType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DestinationType_SharedVipServices) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DestinationType_SharedVipServices{`,
		`SharedVipServices:` + strings.Replace(fmt.Sprintf("%v", this.SharedVipServices), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SelectedVIPAddressType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SelectedVIPAddressType{`,
		`Address:` + strings.Replace(fmt.Sprintf("%v", this.Address), "IpAddressType", "ves_io_schema3.IpAddressType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DestinationIPAddressType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DestinationIPAddressType{`,
		`Protocol:` + fmt.Sprintf("%v", this.Protocol) + `,`,
		`Ports:` + strings.Replace(fmt.Sprintf("%v", this.Ports), "PortValueType", "ves_io_schema4.PortValueType", 1) + `,`,
		`Address:` + strings.Replace(fmt.Sprintf("%v", this.Address), "IpAddressType", "ves_io_schema3.IpAddressType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SelectedTenantVIPsType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SelectedTenantVIPsType{`,
		`DefaultTenantVip:` + fmt.Sprintf("%v", this.DefaultTenantVip) + `,`,
		`PublicIpRefs:` + strings.Replace(fmt.Sprintf("%v", this.PublicIpRefs), "ObjectRefType", "ves_io_schema_views.ObjectRefType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *FastACLRuleType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&FastACLRuleType{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Action:` + strings.Replace(fmt.Sprintf("%v", this.Action), "FastAclRuleAction", "ves_io_schema_fast_acl_rule.FastAclRuleAction", 1) + `,`,
		`Port:` + strings.Replace(fmt.Sprintf("%v", this.Port), "PortValueType", "ves_io_schema4.PortValueType", 1) + `,`,
		`Source:` + fmt.Sprintf("%v", this.Source) + `,`,
		`}`,
	}, "")
	return s
}
func (this *FastACLRuleType_Prefix) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&FastACLRuleType_Prefix{`,
		`Prefix:` + strings.Replace(fmt.Sprintf("%v", this.Prefix), "PrefixListType", "ves_io_schema3.PrefixListType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *FastACLRuleType_IpPrefixSet) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&FastACLRuleType_IpPrefixSet{`,
		`IpPrefixSet:` + strings.Replace(fmt.Sprintf("%v", this.IpPrefixSet), "IpPrefixSetRefType", "ves_io_schema4.IpPrefixSetRefType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReACLType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReACLType{`,
		`VipChoice:` + fmt.Sprintf("%v", this.VipChoice) + `,`,
		`FastAclRules:` + strings.Replace(fmt.Sprintf("%v", this.FastAclRules), "FastACLRuleType", "FastACLRuleType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReACLType_AllPublicVips) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReACLType_AllPublicVips{`,
		`AllPublicVips:` + strings.Replace(fmt.Sprintf("%v", this.AllPublicVips), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReACLType_DefaultTenantVip) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReACLType_DefaultTenantVip{`,
		`DefaultTenantVip:` + strings.Replace(fmt.Sprintf("%v", this.DefaultTenantVip), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReACLType_SelectedTenantVip) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReACLType_SelectedTenantVip{`,
		`SelectedTenantVip:` + strings.Replace(fmt.Sprintf("%v", this.SelectedTenantVip), "SelectedTenantVIPsType", "SelectedTenantVIPsType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SiteACLType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SiteACLType{`,
		`NetworkChoice:` + fmt.Sprintf("%v", this.NetworkChoice) + `,`,
		`VipChoice:` + fmt.Sprintf("%v", this.VipChoice) + `,`,
		`FastAclRules:` + strings.Replace(fmt.Sprintf("%v", this.FastAclRules), "FastACLRuleType", "FastACLRuleType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SiteACLType_OutsideNetwork) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SiteACLType_OutsideNetwork{`,
		`OutsideNetwork:` + strings.Replace(fmt.Sprintf("%v", this.OutsideNetwork), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SiteACLType_InsideNetwork) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SiteACLType_InsideNetwork{`,
		`InsideNetwork:` + strings.Replace(fmt.Sprintf("%v", this.InsideNetwork), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SiteACLType_InterfaceServices) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SiteACLType_InterfaceServices{`,
		`InterfaceServices:` + strings.Replace(fmt.Sprintf("%v", this.InterfaceServices), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SiteACLType_VipServices) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SiteACLType_VipServices{`,
		`VipServices:` + strings.Replace(fmt.Sprintf("%v", this.VipServices), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SiteACLType_AllServices) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SiteACLType_AllServices{`,
		`AllServices:` + strings.Replace(fmt.Sprintf("%v", this.AllServices), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SiteACLType_DestinationIpAddress) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SiteACLType_DestinationIpAddress{`,
		`DestinationIpAddress:` + strings.Replace(fmt.Sprintf("%v", this.DestinationIpAddress), "DestinationIPAddressType", "DestinationIPAddressType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SiteACLType_SharedVipServices) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SiteACLType_SharedVipServices{`,
		`SharedVipServices:` + strings.Replace(fmt.Sprintf("%v", this.SharedVipServices), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *LegacyACLType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&LegacyACLType{`,
		`NetworkType:` + strings.Replace(fmt.Sprintf("%v", this.NetworkType), "VirtualNetworkSelectorType", "ves_io_schema4.VirtualNetworkSelectorType", 1) + `,`,
		`DestinationType:` + strings.Replace(fmt.Sprintf("%v", this.DestinationType), "DestinationType", "DestinationType", 1) + `,`,
		`SourceRules:` + strings.Replace(fmt.Sprintf("%v", this.SourceRules), "ObjectRefType", "ves_io_schema_views.ObjectRefType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType{`,
		`SourceRules:` + strings.Replace(fmt.Sprintf("%v", this.SourceRules), "ObjectRefType", "ves_io_schema4.ObjectRefType", 1) + `,`,
		`DefaultProtocolPolicer:` + strings.Replace(fmt.Sprintf("%v", this.DefaultProtocolPolicer), "ObjectRefType", "ves_io_schema4.ObjectRefType", 1) + `,`,
		`NetworkType:` + strings.Replace(fmt.Sprintf("%v", this.NetworkType), "VirtualNetworkSelectorType", "ves_io_schema4.VirtualNetworkSelectorType", 1) + `,`,
		`DestinationType:` + strings.Replace(fmt.Sprintf("%v", this.DestinationType), "DestinationType", "DestinationType", 1) + `,`,
		`ConfigChoice:` + fmt.Sprintf("%v", this.ConfigChoice) + `,`,
		`ProtocolPolicer:` + strings.Replace(fmt.Sprintf("%v", this.ProtocolPolicer), "ObjectRefType", "ves_io_schema_views.ObjectRefType", 1) + `,`,
		`ViewInternal:` + strings.Replace(fmt.Sprintf("%v", this.ViewInternal), "ObjectRefType", "ves_io_schema_views.ObjectRefType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_SiteAcl) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_SiteAcl{`,
		`SiteAcl:` + strings.Replace(fmt.Sprintf("%v", this.SiteAcl), "SiteACLType", "SiteACLType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_ReAcl) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_ReAcl{`,
		`ReAcl:` + strings.Replace(fmt.Sprintf("%v", this.ReAcl), "ReACLType", "ReACLType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_LegacyAcl) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_LegacyAcl{`,
		`LegacyAcl:` + strings.Replace(fmt.Sprintf("%v", this.LegacyAcl), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType{`,
		`SiteChoice:` + fmt.Sprintf("%v", this.SiteChoice) + `,`,
		`ProtocolPolicer:` + strings.Replace(fmt.Sprintf("%v", this.ProtocolPolicer), "ObjectRefType", "ves_io_schema_views.ObjectRefType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_SiteAcl) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_SiteAcl{`,
		`SiteAcl:` + strings.Replace(fmt.Sprintf("%v", this.SiteAcl), "SiteACLType", "SiteACLType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_ReAcl) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_ReAcl{`,
		`ReAcl:` + strings.Replace(fmt.Sprintf("%v", this.ReAcl), "ReACLType", "ReACLType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_LegacyAcl) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_LegacyAcl{`,
		`LegacyAcl:` + strings.Replace(fmt.Sprintf("%v", this.LegacyAcl), "LegacyACLType", "LegacyACLType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType{`,
		`SiteChoice:` + fmt.Sprintf("%v", this.SiteChoice) + `,`,
		`ProtocolPolicer:` + strings.Replace(fmt.Sprintf("%v", this.ProtocolPolicer), "ObjectRefType", "ves_io_schema_views.ObjectRefType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_SiteAcl) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_SiteAcl{`,
		`SiteAcl:` + strings.Replace(fmt.Sprintf("%v", this.SiteAcl), "SiteACLType", "SiteACLType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_ReAcl) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_ReAcl{`,
		`ReAcl:` + strings.Replace(fmt.Sprintf("%v", this.ReAcl), "ReACLType", "ReACLType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_LegacyAcl) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_LegacyAcl{`,
		`LegacyAcl:` + strings.Replace(fmt.Sprintf("%v", this.LegacyAcl), "LegacyACLType", "LegacyACLType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType{`,
		`SiteChoice:` + fmt.Sprintf("%v", this.SiteChoice) + `,`,
		`ProtocolPolicer:` + strings.Replace(fmt.Sprintf("%v", this.ProtocolPolicer), "ObjectRefType", "ves_io_schema_views.ObjectRefType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_SiteAcl) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_SiteAcl{`,
		`SiteAcl:` + strings.Replace(fmt.Sprintf("%v", this.SiteAcl), "SiteACLType", "SiteACLType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_ReAcl) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_ReAcl{`,
		`ReAcl:` + strings.Replace(fmt.Sprintf("%v", this.ReAcl), "ReACLType", "ReACLType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_LegacyAcl) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_LegacyAcl{`,
		`LegacyAcl:` + strings.Replace(fmt.Sprintf("%v", this.LegacyAcl), "LegacyACLType", "LegacyACLType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringTypes(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *DestinationType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DestinationType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DestinationType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InterfaceServices", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.DestinationTypeChoice = &DestinationType_InterfaceServices{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VipServices", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.DestinationTypeChoice = &DestinationType_VipServices{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllServices", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.DestinationTypeChoice = &DestinationType_AllServices{v}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DestinationIpAddress", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &DestinationIPAddressType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.DestinationTypeChoice = &DestinationType_DestinationIpAddress{v}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SelectedVipAddress", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &SelectedVIPAddressType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.DestinationTypeChoice = &DestinationType_SelectedVipAddress{v}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SharedVipServices", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.DestinationTypeChoice = &DestinationType_SharedVipServices{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SelectedVIPAddressType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SelectedVIPAddressType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SelectedVIPAddressType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = append(m.Address, &ves_io_schema3.IpAddressType{})
			if err := m.Address[len(m.Address)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DestinationIPAddressType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DestinationIPAddressType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DestinationIPAddressType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Protocol", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Protocol = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ports", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ports = append(m.Ports, &ves_io_schema4.PortValueType{})
			if err := m.Ports[len(m.Ports)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = append(m.Address, &ves_io_schema3.IpAddressType{})
			if err := m.Address[len(m.Address)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SelectedTenantVIPsType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SelectedTenantVIPsType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SelectedTenantVIPsType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultTenantVip", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DefaultTenantVip = bool(v != 0)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PublicIpRefs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PublicIpRefs = append(m.PublicIpRefs, &ves_io_schema_views.ObjectRefType{})
			if err := m.PublicIpRefs[len(m.PublicIpRefs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FastACLRuleType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FastACLRuleType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FastACLRuleType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Action", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Action == nil {
				m.Action = &ves_io_schema_fast_acl_rule.FastAclRuleAction{}
			}
			if err := m.Action.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Port", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Port = append(m.Port, &ves_io_schema4.PortValueType{})
			if err := m.Port[len(m.Port)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Prefix", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema3.PrefixListType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Source = &FastACLRuleType_Prefix{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IpPrefixSet", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.IpPrefixSetRefType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Source = &FastACLRuleType_IpPrefixSet{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReACLType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReACLType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReACLType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllPublicVips", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.VipChoice = &ReACLType_AllPublicVips{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultTenantVip", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.VipChoice = &ReACLType_DefaultTenantVip{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SelectedTenantVip", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &SelectedTenantVIPsType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.VipChoice = &ReACLType_SelectedTenantVip{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FastAclRules", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FastAclRules = append(m.FastAclRules, &FastACLRuleType{})
			if err := m.FastAclRules[len(m.FastAclRules)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SiteACLType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SiteACLType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SiteACLType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutsideNetwork", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.NetworkChoice = &SiteACLType_OutsideNetwork{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InsideNetwork", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.NetworkChoice = &SiteACLType_InsideNetwork{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InterfaceServices", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.VipChoice = &SiteACLType_InterfaceServices{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VipServices", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.VipChoice = &SiteACLType_VipServices{v}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllServices", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.VipChoice = &SiteACLType_AllServices{v}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DestinationIpAddress", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &DestinationIPAddressType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.VipChoice = &SiteACLType_DestinationIpAddress{v}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FastAclRules", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FastAclRules = append(m.FastAclRules, &FastACLRuleType{})
			if err := m.FastAclRules[len(m.FastAclRules)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SharedVipServices", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.VipChoice = &SiteACLType_SharedVipServices{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LegacyACLType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LegacyACLType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LegacyACLType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NetworkType", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.NetworkType == nil {
				m.NetworkType = &ves_io_schema4.VirtualNetworkSelectorType{}
			}
			if err := m.NetworkType.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DestinationType", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DestinationType == nil {
				m.DestinationType = &DestinationType{}
			}
			if err := m.DestinationType.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceRules", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SourceRules = append(m.SourceRules, &ves_io_schema_views.ObjectRefType{})
			if err := m.SourceRules[len(m.SourceRules)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GlobalSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GlobalSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GlobalSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceRules", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SourceRules = append(m.SourceRules, &ves_io_schema4.ObjectRefType{})
			if err := m.SourceRules[len(m.SourceRules)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultProtocolPolicer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DefaultProtocolPolicer = append(m.DefaultProtocolPolicer, &ves_io_schema4.ObjectRefType{})
			if err := m.DefaultProtocolPolicer[len(m.DefaultProtocolPolicer)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NetworkType", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.NetworkType == nil {
				m.NetworkType = &ves_io_schema4.VirtualNetworkSelectorType{}
			}
			if err := m.NetworkType.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DestinationType", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DestinationType == nil {
				m.DestinationType = &DestinationType{}
			}
			if err := m.DestinationType.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SiteAcl", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &SiteACLType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ConfigChoice = &GlobalSpecType_SiteAcl{v}
			iNdEx = postIndex
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReAcl", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ReACLType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ConfigChoice = &GlobalSpecType_ReAcl{v}
			iNdEx = postIndex
		case 22:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LegacyAcl", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ConfigChoice = &GlobalSpecType_LegacyAcl{v}
			iNdEx = postIndex
		case 23:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProtocolPolicer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ProtocolPolicer == nil {
				m.ProtocolPolicer = &ves_io_schema_views.ObjectRefType{}
			}
			if err := m.ProtocolPolicer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 1000:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ViewInternal", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ViewInternal == nil {
				m.ViewInternal = &ves_io_schema_views.ObjectRefType{}
			}
			if err := m.ViewInternal.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SiteAcl", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &SiteACLType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.SiteChoice = &CreateSpecType_SiteAcl{v}
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReAcl", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ReACLType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.SiteChoice = &CreateSpecType_ReAcl{v}
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LegacyAcl", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &LegacyACLType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.SiteChoice = &CreateSpecType_LegacyAcl{v}
			iNdEx = postIndex
		case 23:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProtocolPolicer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ProtocolPolicer == nil {
				m.ProtocolPolicer = &ves_io_schema_views.ObjectRefType{}
			}
			if err := m.ProtocolPolicer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplaceSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplaceSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplaceSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SiteAcl", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &SiteACLType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.SiteChoice = &ReplaceSpecType_SiteAcl{v}
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReAcl", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ReACLType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.SiteChoice = &ReplaceSpecType_ReAcl{v}
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LegacyAcl", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &LegacyACLType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.SiteChoice = &ReplaceSpecType_LegacyAcl{v}
			iNdEx = postIndex
		case 23:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProtocolPolicer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ProtocolPolicer == nil {
				m.ProtocolPolicer = &ves_io_schema_views.ObjectRefType{}
			}
			if err := m.ProtocolPolicer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SiteAcl", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &SiteACLType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.SiteChoice = &GetSpecType_SiteAcl{v}
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReAcl", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ReACLType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.SiteChoice = &GetSpecType_ReAcl{v}
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LegacyAcl", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &LegacyACLType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.SiteChoice = &GetSpecType_LegacyAcl{v}
			iNdEx = postIndex
		case 23:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProtocolPolicer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ProtocolPolicer == nil {
				m.ProtocolPolicer = &ves_io_schema_views.ObjectRefType{}
			}
			if err := m.ProtocolPolicer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTypes(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthTypes
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipTypes(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthTypes = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTypes   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("ves.io/schema/fast_acl/types.proto", fileDescriptorTypes) }
func init() { golang_proto.RegisterFile("ves.io/schema/fast_acl/types.proto", fileDescriptorTypes) }

var fileDescriptorTypes = []byte{
	// 1731 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x58, 0xcf, 0x6f, 0xe3, 0xc6,
	0x15, 0xd6, 0x88, 0x94, 0x44, 0x8d, 0x7e, 0xd1, 0xb4, 0xea, 0xd5, 0x6e, 0xb2, 0xb4, 0x2c, 0xc3,
	0x58, 0x17, 0xd0, 0x4a, 0x91, 0x9c, 0xdd, 0x34, 0x06, 0xb2, 0x89, 0xa4, 0xcd, 0x6e, 0xac, 0xaa,
	0x8d, 0x40, 0x6f, 0x7d, 0x28, 0xda, 0xa8, 0x14, 0x35, 0x92, 0xd9, 0xa5, 0x45, 0x82, 0xa4, 0x94,
	0xf8, 0x60, 0x20, 0x7f, 0x41, 0x51, 0xe4, 0x1f, 0x68, 0xd1, 0x53, 0x61, 0xa0, 0xa7, 0x5e, 0x8a,
	0xf2, 0x22, 0x18, 0x05, 0x1a, 0xf4, 0xe4, 0x5b, 0x17, 0x3d, 0xd5, 0xca, 0xc5, 0x3d, 0x35, 0x97,
	0x02, 0x39, 0x16, 0x33, 0x24, 0x25, 0x52, 0x96, 0x54, 0x75, 0xdb, 0x20, 0x08, 0xb0, 0x37, 0x91,
	0xf3, 0xbe, 0x6f, 0x66, 0xde, 0xfb, 0xe6, 0x7b, 0x43, 0xc1, 0xdc, 0x10, 0x19, 0x05, 0x59, 0x2d,
	0x1a, 0xd2, 0x31, 0x3a, 0x11, 0x8b, 0x5d, 0xd1, 0x30, 0x5b, 0xa2, 0xa4, 0x14, 0xcd, 0x53, 0x0d,
	0x19, 0x05, 0x4d, 0x57, 0x4d, 0x95, 0xdb, 0xb0, 0x63, 0x0a, 0x76, 0x4c, 0xc1, 0x8d, 0xb9, 0x73,
	0xbf, 0x27, 0x9b, 0xc7, 0x83, 0x76, 0x41, 0x52, 0x4f, 0x8a, 0x3d, 0xb5, 0xa7, 0x16, 0x49, 0x78,
	0x7b, 0xd0, 0x25, 0x4f, 0xe4, 0x81, 0xfc, 0xb2, 0x69, 0xee, 0xdc, 0x9b, 0x3f, 0x55, 0x4b, 0x1f,
	0x28, 0xc8, 0x3b, 0xdf, 0x9d, 0x5b, 0xfe, 0xc0, 0x3e, 0x32, 0x9d, 0x81, 0xd7, 0xfc, 0x03, 0xaa,
	0x66, 0xca, 0x6a, 0xdf, 0x45, 0xdd, 0xf6, 0x0f, 0x7a, 0x09, 0x5f, 0xf7, 0x0f, 0x0d, 0x45, 0x45,
	0xee, 0x88, 0x26, 0x72, 0x46, 0xb3, 0x33, 0xa3, 0x32, 0xfa, 0xb8, 0xe5, 0xa7, 0xde, 0xbc, 0x19,
	0x61, 0x78, 0x27, 0xc8, 0xfd, 0x8e, 0x86, 0xa9, 0xc7, 0xc8, 0x30, 0xe5, 0xbe, 0x88, 0x71, 0xcf,
	0x4e, 0x35, 0xc4, 0xbd, 0x0f, 0x39, 0xb9, 0x6f, 0x22, 0xbd, 0x2b, 0x4a, 0xa8, 0x65, 0x20, 0x7d,
	0x28, 0x4b, 0xc8, 0xc8, 0xd0, 0x59, 0xb0, 0x1b, 0x2b, 0xa7, 0x0b, 0xfe, 0x94, 0xbe, 0x7f, 0xa2,
	0x99, 0xa7, 0x1f, 0x04, 0x84, 0xb5, 0x09, 0xe2, 0xd0, 0x01, 0x70, 0x6f, 0xc3, 0xf8, 0x50, 0xd6,
	0xa6, 0x04, 0xa1, 0xa5, 0x04, 0xb1, 0xa1, 0xac, 0x79, 0xa1, 0xa2, 0xa2, 0x4c, 0xa1, 0xe1, 0xe5,
	0x50, 0x51, 0x51, 0x26, 0xd0, 0x63, 0xb8, 0xd1, 0x99, 0xee, 0xa7, 0x25, 0x6b, 0x2d, 0xb1, 0xd3,
	0xd1, 0x91, 0x61, 0x64, 0x18, 0x42, 0xf2, 0x46, 0x61, 0xbe, 0x26, 0x0a, 0x9e, 0x2c, 0x1c, 0x34,
	0x2b, 0x36, 0x06, 0xa7, 0xe3, 0x83, 0x80, 0x90, 0xf6, 0x30, 0x1e, 0x68, 0xce, 0x18, 0xd7, 0x86,
	0x69, 0x03, 0x29, 0x48, 0x32, 0x51, 0xa7, 0x35, 0xf4, 0xcc, 0x13, 0x25, 0xf3, 0x14, 0x16, 0xcd,
	0x73, 0xe8, 0x60, 0x8e, 0x66, 0x67, 0xe1, 0x5c, 0xb6, 0x23, 0x79, 0x32, 0x47, 0x03, 0xae, 0x1b,
	0xc7, 0xa2, 0xee, 0xcc, 0x30, 0xc9, 0x07, 0x5c, 0x9c, 0x8f, 0x2a, 0x3d, 0xb2, 0x00, 0xc0, 0x15,
	0xb1, 0x81, 0x47, 0xd3, 0xb4, 0x56, 0xb7, 0xe1, 0x2d, 0x6f, 0x6e, 0xb0, 0x0e, 0x5a, 0xd2, 0xb1,
	0x2a, 0x4b, 0x88, 0x63, 0x46, 0x16, 0xa0, 0x2f, 0x2d, 0x10, 0xab, 0xd3, 0x0c, 0x60, 0x83, 0x75,
	0x9a, 0x09, 0xb2, 0x54, 0x9d, 0x66, 0x28, 0x96, 0xae, 0xd3, 0x4c, 0x84, 0x65, 0xea, 0x34, 0x13,
	0x63, 0xe3, 0xb9, 0x9f, 0xc2, 0x8d, 0xf9, 0x1b, 0xe0, 0x6a, 0x30, 0xe2, 0x66, 0x00, 0x64, 0xa9,
	0xdd, 0x58, 0xf9, 0xf5, 0x99, 0xe5, 0x4d, 0x32, 0x87, 0xc3, 0xab, 0xb1, 0x3f, 0xfe, 0x63, 0x44,
	0x85, 0x3f, 0x03, 0x14, 0xfb, 0x29, 0x10, 0x5c, 0x64, 0xee, 0x9f, 0x00, 0x66, 0x16, 0x15, 0x82,
	0xab, 0x40, 0x86, 0x88, 0x56, 0x52, 0x95, 0x0c, 0x95, 0x05, 0xbb, 0xd1, 0xea, 0xce, 0xdf, 0x2c,
	0x40, 0x55, 0x1a, 0x0d, 0xcc, 0x75, 0x5b, 0xbf, 0x25, 0x04, 0x04, 0xfc, 0x24, 0x50, 0xcf, 0x6a,
	0x4d, 0x81, 0xfa, 0xd1, 0xe3, 0xa6, 0x40, 0x1f, 0xd4, 0x7e, 0xd0, 0x14, 0x26, 0x30, 0xee, 0x5d,
	0x18, 0xd2, 0x54, 0xdd, 0xc4, 0x6a, 0x9e, 0xb7, 0xc4, 0xa6, 0xaa, 0x9b, 0x47, 0xa2, 0x32, 0x40,
	0x37, 0x97, 0x68, 0xe3, 0xbc, 0xbb, 0x0c, 0xbd, 0xec, 0x2e, 0xbd, 0x29, 0xce, 0xfd, 0x1e, 0x4c,
	0x33, 0xfa, 0x0c, 0xf5, 0xc5, 0xbe, 0x79, 0x74, 0xd0, 0xb4, 0xf7, 0x9b, 0x87, 0x5c, 0x07, 0x75,
	0xc5, 0x81, 0x62, 0xb6, 0x4c, 0x32, 0x82, 0x45, 0x90, 0x01, 0x59, 0xb0, 0xcb, 0x08, 0xac, 0x33,
	0xe2, 0x40, 0x64, 0x8d, 0x7b, 0x0e, 0x93, 0xda, 0xa0, 0xad, 0xc8, 0x12, 0xd6, 0xbc, 0x8e, 0xba,
	0xee, 0x1e, 0x73, 0x33, 0x0b, 0x24, 0x1e, 0x50, 0xf8, 0xb0, 0xfd, 0x73, 0x24, 0x99, 0x02, 0xea,
	0x92, 0x65, 0x6e, 0x9d, 0x9f, 0x45, 0x27, 0x60, 0xcf, 0x92, 0xf1, 0xcf, 0xd0, 0x67, 0x20, 0xc8,
	0x00, 0x21, 0x6e, 0x8f, 0x1f, 0x68, 0x02, 0xea, 0x1a, 0xb9, 0x7f, 0x05, 0x61, 0xea, 0x89, 0x68,
	0x98, 0x95, 0x5a, 0x43, 0x18, 0x28, 0x24, 0x5d, 0x5c, 0x16, 0xd2, 0x7d, 0xf1, 0x04, 0x91, 0x05,
	0x46, 0xab, 0x71, 0x8c, 0x8d, 0xe8, 0xa1, 0xcc, 0x7b, 0xbf, 0x0e, 0x02, 0x81, 0x8c, 0x70, 0x4f,
	0x60, 0x58, 0x94, 0x70, 0x5d, 0x33, 0xc1, 0xa5, 0x67, 0x84, 0x18, 0x6b, 0x81, 0xf0, 0x4b, 0x0a,
	0xe6, 0xaf, 0x10, 0x94, 0xe0, 0xa0, 0xb9, 0x77, 0x20, 0x8d, 0xab, 0x91, 0xa1, 0xfe, 0xdb, 0x22,
	0x12, 0x18, 0xf7, 0x16, 0x0c, 0x6b, 0x3a, 0xea, 0xca, 0x9f, 0x38, 0x96, 0x74, 0x77, 0x96, 0x80,
	0x0c, 0x36, 0x64, 0xc3, 0x74, 0x4e, 0xa6, 0x13, 0xce, 0x3d, 0x85, 0x09, 0x59, 0x6b, 0xd9, 0x0f,
	0x2d, 0x03, 0x99, 0x8e, 0x2f, 0x6d, 0xdd, 0x90, 0x80, 0xcd, 0x70, 0x88, 0xdc, 0x04, 0x63, 0x93,
	0x92, 0xa7, 0x6f, 0xf7, 0x37, 0x2e, 0x2c, 0xc0, 0x41, 0x16, 0x86, 0xf0, 0xe6, 0x0c, 0x2e, 0x52,
	0xca, 0x97, 0xf3, 0x7b, 0xf9, 0x37, 0xab, 0xb7, 0x61, 0xd8, 0x50, 0x07, 0xba, 0x84, 0xb8, 0xd4,
	0xc8, 0x02, 0xa1, 0x4b, 0x0b, 0xd0, 0x63, 0x0b, 0x50, 0x0f, 0xf2, 0x0f, 0xeb, 0x34, 0x43, 0xb3,
	0xa1, 0xdc, 0xaf, 0x28, 0x18, 0x15, 0x50, 0xa5, 0xd6, 0x20, 0x19, 0x7f, 0x04, 0x53, 0xd8, 0x26,
	0x9d, 0xca, 0x0d, 0x65, 0xcd, 0x70, 0x12, 0xbb, 0xc8, 0x29, 0x13, 0xa2, 0xa2, 0x34, 0x49, 0xf4,
	0x91, 0xac, 0x19, 0xdc, 0xe3, 0xb9, 0x02, 0xa3, 0x96, 0x52, 0xdc, 0x14, 0xde, 0xcf, 0xe0, 0xfa,
	0xc4, 0x07, 0x3d, 0x34, 0xf4, 0x6a, 0x36, 0xe8, 0xd7, 0x3c, 0xf1, 0x2d, 0xff, 0x88, 0xac, 0x71,
	0x1f, 0xc1, 0xa4, 0x4f, 0x1a, 0xee, 0xd9, 0xbb, 0xb7, 0x88, 0x7c, 0x46, 0x9a, 0xd5, 0xd4, 0xa5,
	0x05, 0x80, 0x57, 0x08, 0xf1, 0xee, 0x54, 0x5c, 0xc6, 0xfe, 0xf6, 0x85, 0x05, 0x36, 0x21, 0x0b,
	0x63, 0x1e, 0xeb, 0xe1, 0x40, 0x09, 0xc6, 0x60, 0xf8, 0xd0, 0x2e, 0x07, 0x78, 0x50, 0xdd, 0x84,
	0x10, 0x7b, 0xb0, 0xe3, 0x97, 0x6b, 0x23, 0x0b, 0x04, 0x31, 0xeb, 0xd8, 0x02, 0x21, 0x52, 0x3c,
	0xfb, 0x54, 0xe7, 0xfe, 0x1a, 0x82, 0xb1, 0x43, 0xd9, 0x9c, 0xd4, 0xe8, 0x5d, 0x98, 0x52, 0x07,
	0xa6, 0x21, 0x77, 0x50, 0xab, 0x8f, 0xcc, 0x8f, 0x55, 0xfd, 0xf9, 0x7f, 0xa8, 0x51, 0xd2, 0x09,
	0xff, 0xa1, 0x1d, 0xcd, 0xbd, 0x03, 0x93, 0x72, 0xdf, 0x87, 0x5f, 0x5e, 0xa0, 0x84, 0x1d, 0xed,
	0xc2, 0xe7, 0x37, 0xf3, 0x65, 0xbd, 0x18, 0xac, 0xd2, 0xcc, 0xc3, 0x4b, 0x09, 0x96, 0x36, 0xf3,
	0xc8, 0x72, 0xe8, 0xd7, 0xdb, 0xcc, 0xc1, 0x82, 0x66, 0x7e, 0x53, 0x62, 0xd1, 0xff, 0xa7, 0xc4,
	0x5e, 0xaa, 0x91, 0x5f, 0xe3, 0x46, 0x0e, 0xe6, 0x34, 0xf2, 0xfd, 0x9d, 0x0b, 0x0b, 0x6c, 0x41,
	0xce, 0x2f, 0x58, 0xaa, 0x94, 0x7f, 0xd3, 0x2b, 0xd9, 0xb7, 0xab, 0x5b, 0x30, 0xe9, 0x68, 0xc6,
	0x95, 0x6d, 0xca, 0x23, 0x5b, 0xaa, 0x9c, 0xdf, 0xab, 0xde, 0xf5, 0xa9, 0x7a, 0x8e, 0xeb, 0xd8,
	0x9d, 0x0a, 0x7b, 0xcf, 0x45, 0x10, 0x26, 0x1a, 0xa8, 0x27, 0x4a, 0xa7, 0xae, 0xb6, 0x05, 0x18,
	0x77, 0xf9, 0xf1, 0x5d, 0x82, 0x38, 0x7f, 0xac, 0xfc, 0xdd, 0x99, 0xdd, 0x1c, 0xc9, 0xba, 0x39,
	0x10, 0x15, 0x47, 0x90, 0xf6, 0xb9, 0x57, 0x75, 0x92, 0x34, 0xfa, 0x2b, 0x0b, 0x04, 0x84, 0x98,
	0x43, 0xe2, 0x70, 0xb2, 0xb3, 0x77, 0x14, 0xe7, 0xc0, 0xdc, 0x5b, 0xa1, 0xd8, 0x98, 0x42, 0x48,
	0x75, 0x66, 0x2e, 0xb4, 0x6d, 0x18, 0xb7, 0x6d, 0xd5, 0x29, 0x2d, 0xb5, 0x72, 0x63, 0x7c, 0xed,
	0xfc, 0x2c, 0xe1, 0xd3, 0x85, 0xb7, 0xc2, 0x31, 0x9b, 0xd4, 0xf6, 0x90, 0x45, 0x25, 0x29, 0x7b,
	0x4b, 0xb2, 0x97, 0xfb, 0x4d, 0x04, 0x26, 0x9f, 0x2a, 0x6a, 0x5b, 0x54, 0x0e, 0x35, 0x24, 0x91,
	0xd5, 0xfd, 0x64, 0x66, 0x75, 0x70, 0x6e, 0x57, 0x7b, 0xc9, 0x75, 0x71, 0x03, 0x98, 0x71, 0x3d,
	0xde, 0xbd, 0x05, 0xb5, 0x34, 0x55, 0x91, 0x25, 0xa4, 0x67, 0x62, 0x2b, 0xcc, 0x74, 0xf7, 0xfc,
	0x8c, 0x9d, 0x05, 0xba, 0xd7, 0x02, 0x16, 0x08, 0x1b, 0x0e, 0x79, 0xd3, 0x09, 0x69, 0xda, 0x11,
	0x37, 0xa4, 0x11, 0xff, 0x9a, 0xa4, 0x91, 0xf8, 0x1f, 0xa5, 0x71, 0x00, 0x19, 0x43, 0x36, 0x11,
	0x0e, 0xce, 0xa4, 0x09, 0xd7, 0xf6, 0xc2, 0x8e, 0x35, 0x75, 0xf5, 0x6a, 0xe4, 0xc5, 0x19, 0xb8,
	0xb6, 0xef, 0xd9, 0x11, 0x8c, 0xaf, 0x48, 0x0a, 0x57, 0x83, 0x61, 0xdd, 0x26, 0xfa, 0xce, 0xdc,
	0x6b, 0xc1, 0x84, 0x48, 0x98, 0x47, 0x13, 0xd2, 0x09, 0xc9, 0x23, 0x08, 0x15, 0x72, 0xc6, 0x08,
	0xd1, 0xc6, 0x12, 0x7b, 0xf0, 0x60, 0xa3, 0x36, 0x04, 0xe3, 0xdb, 0xf0, 0x46, 0xb5, 0x32, 0xb7,
	0x08, 0xcb, 0x2a, 0x72, 0x5f, 0x9f, 0x53, 0x6c, 0x21, 0xa5, 0xcd, 0xd4, 0xf6, 0x23, 0x98, 0x20,
	0x9f, 0x9a, 0xa4, 0x4b, 0xf4, 0x45, 0x25, 0x73, 0x1d, 0x59, 0x79, 0x86, 0xf4, 0xf9, 0x99, 0x1f,
	0x8c, 0xb7, 0x20, 0xc4, 0xf1, 0xab, 0x03, 0xe7, 0x4d, 0x75, 0x07, 0x26, 0x24, 0xb5, 0xdf, 0x95,
	0x7b, 0xae, 0x2d, 0xa5, 0x47, 0x16, 0x48, 0x5f, 0x5a, 0x60, 0x7d, 0x6c, 0x01, 0xa6, 0xfc, 0x46,
	0xbe, 0x5c, 0xca, 0x97, 0xcb, 0x73, 0x3f, 0x54, 0x68, 0x36, 0x54, 0xa7, 0x99, 0x10, 0x1b, 0xae,
	0xd3, 0x4c, 0x98, 0x8d, 0x4c, 0x3e, 0x5d, 0x18, 0x36, 0x5a, 0xa7, 0x99, 0x28, 0x0b, 0xeb, 0x34,
	0x93, 0x64, 0x53, 0x75, 0x9a, 0x49, 0xb1, 0x6c, 0x9d, 0x66, 0x58, 0x76, 0xad, 0x4e, 0x33, 0x6b,
	0x2c, 0x57, 0xa7, 0x19, 0x8e, 0x5d, 0xaf, 0xd3, 0xcc, 0x3a, 0x9b, 0xce, 0xfd, 0x99, 0x82, 0xc9,
	0x9a, 0x8e, 0x44, 0x13, 0x4d, 0x0e, 0xe9, 0x13, 0x8f, 0x4e, 0xd8, 0xd5, 0x75, 0x82, 0x3f, 0xa9,
	0x7c, 0x22, 0x79, 0x6f, 0x22, 0x92, 0xb5, 0x55, 0x45, 0xe2, 0x72, 0x38, 0x0a, 0xf9, 0xd0, 0xa7,
	0x10, 0x8e, 0xb0, 0xec, 0x2c, 0x62, 0xf1, 0xf9, 0xf5, 0x37, 0x27, 0x99, 0xfd, 0xef, 0xff, 0xe5,
	0xd1, 0x8c, 0xed, 0x5d, 0x58, 0xe0, 0x21, 0x5c, 0x87, 0x09, 0xdc, 0x47, 0xb3, 0x95, 0x5a, 0x23,
	0x4b, 0xd2, 0x1c, 0x2c, 0x3d, 0x80, 0x9b, 0xf0, 0xf6, 0xe4, 0xa5, 0x6b, 0x2b, 0x59, 0x57, 0x7b,
	0xc1, 0xf2, 0x5e, 0x75, 0x1b, 0xc6, 0x48, 0x2d, 0x3c, 0xea, 0x60, 0x2f, 0x2d, 0x90, 0xc2, 0xea,
	0x28, 0x3d, 0xcc, 0x97, 0xde, 0xca, 0x97, 0xbe, 0x67, 0x57, 0x38, 0xf7, 0x39, 0x05, 0x53, 0x02,
	0xd2, 0x14, 0x7c, 0x95, 0x79, 0x55, 0xca, 0x6f, 0x75, 0x29, 0xff, 0x44, 0xc1, 0xd8, 0x53, 0x64,
	0xbe, 0x2a, 0xe3, 0xb7, 0xba, 0x8c, 0xd5, 0x5f, 0x80, 0xcb, 0x2b, 0x3e, 0xf0, 0xe2, 0x8a, 0x0f,
	0x7c, 0x79, 0xc5, 0x83, 0xaf, 0xae, 0x78, 0xf0, 0xe9, 0x98, 0x07, 0xbf, 0x1d, 0xf3, 0xe0, 0x0f,
	0x63, 0x1e, 0x8c, 0xc6, 0x3c, 0xf8, 0x7c, 0xcc, 0x83, 0xcb, 0x31, 0x0f, 0x5e, 0x8c, 0x79, 0xf0,
	0xf7, 0x31, 0x0f, 0xae, 0xc7, 0x7c, 0xe0, 0xcb, 0x31, 0x0f, 0x7e, 0xf9, 0x05, 0x1f, 0x18, 0x7d,
	0xc1, 0x83, 0x1f, 0x37, 0x7a, 0xaa, 0xf6, 0xbc, 0x57, 0x18, 0xaa, 0x8a, 0x89, 0x74, 0x5d, 0x2c,
	0x0c, 0x8c, 0x22, 0xf9, 0xd1, 0x55, 0xf5, 0x93, 0xfb, 0x9a, 0xae, 0x0e, 0xe5, 0x0e, 0xd2, 0xef,
	0xbb, 0xc3, 0x45, 0xad, 0xdd, 0x53, 0x8b, 0xe8, 0x13, 0xd3, 0xf9, 0x0f, 0x74, 0xe6, 0x4f, 0xdc,
	0x76, 0x98, 0x64, 0x66, 0xef, 0xdf, 0x01, 0x00, 0x00, 0xff, 0xff, 0xd5, 0x7e, 0x1d, 0x95, 0x50,
	0x16, 0x00, 0x00,
}
