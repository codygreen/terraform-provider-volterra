// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ves.io/schema/virtual_site/types.proto

package virtual_site

import proto "github.com/gogo/protobuf/proto"
import golang_proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"
import _ "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
import ves_io_schema_site "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/site"
import ves_io_schema4 "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
import _ "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
import _ "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"

import strings "strings"
import reflect "reflect"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// GlobalSpecType
//
// x-displayName: "Global Specification"
// Global Specifications
type GlobalSpecType struct {
	// site_selector
	//
	// x-displayName: "Site Selector Expression"
	// x-required
	// Label selector for virtual-site
	SiteSelector *ves_io_schema4.LabelSelectorType `protobuf:"bytes,1,opt,name=site_selector,json=siteSelector" json:"site_selector,omitempty"`
	// site_type
	//
	// x-displayName: "Site Type"
	// x-required
	// Site type for sites to be selected. A virtual site can only select sites of given type (CE or RE). Sites of different types cannot be selected by one virtual site.
	SiteType ves_io_schema_site.SiteType `protobuf:"varint,2,opt,name=site_type,json=siteType,proto3,enum=ves.io.schema.site.SiteType" json:"site_type,omitempty"`
}

func (m *GlobalSpecType) Reset()                    { *m = GlobalSpecType{} }
func (*GlobalSpecType) ProtoMessage()               {}
func (*GlobalSpecType) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{0} }

func (m *GlobalSpecType) GetSiteSelector() *ves_io_schema4.LabelSelectorType {
	if m != nil {
		return m.SiteSelector
	}
	return nil
}

func (m *GlobalSpecType) GetSiteType() ves_io_schema_site.SiteType {
	if m != nil {
		return m.SiteType
	}
	return ves_io_schema_site.INVALID
}

// CreateSpecType
//
// x-displayName: "Create Virtual Site"
// Create a virtual site object in given namespace
type CreateSpecType struct {
	SiteSelector *ves_io_schema4.LabelSelectorType `protobuf:"bytes,1,opt,name=site_selector,json=siteSelector" json:"site_selector,omitempty"`
	SiteType     ves_io_schema_site.SiteType       `protobuf:"varint,2,opt,name=site_type,json=siteType,proto3,enum=ves.io.schema.site.SiteType" json:"site_type,omitempty"`
}

func (m *CreateSpecType) Reset()                    { *m = CreateSpecType{} }
func (*CreateSpecType) ProtoMessage()               {}
func (*CreateSpecType) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{1} }

func (m *CreateSpecType) GetSiteSelector() *ves_io_schema4.LabelSelectorType {
	if m != nil {
		return m.SiteSelector
	}
	return nil
}

func (m *CreateSpecType) GetSiteType() ves_io_schema_site.SiteType {
	if m != nil {
		return m.SiteType
	}
	return ves_io_schema_site.INVALID
}

// Replace virtual site
//
// x-displayName: "Replace Virtual Site"
// Replace a given virtual site object in a given namespace
type ReplaceSpecType struct {
}

func (m *ReplaceSpecType) Reset()                    { *m = ReplaceSpecType{} }
func (*ReplaceSpecType) ProtoMessage()               {}
func (*ReplaceSpecType) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{2} }

// Get virtual site
//
// x-displayName: "Get Virtual Site"
// Get a virtual site object in given namespace
type GetSpecType struct {
	SiteSelector *ves_io_schema4.LabelSelectorType `protobuf:"bytes,1,opt,name=site_selector,json=siteSelector" json:"site_selector,omitempty"`
	SiteType     ves_io_schema_site.SiteType       `protobuf:"varint,2,opt,name=site_type,json=siteType,proto3,enum=ves.io.schema.site.SiteType" json:"site_type,omitempty"`
}

func (m *GetSpecType) Reset()                    { *m = GetSpecType{} }
func (*GetSpecType) ProtoMessage()               {}
func (*GetSpecType) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{3} }

func (m *GetSpecType) GetSiteSelector() *ves_io_schema4.LabelSelectorType {
	if m != nil {
		return m.SiteSelector
	}
	return nil
}

func (m *GetSpecType) GetSiteType() ves_io_schema_site.SiteType {
	if m != nil {
		return m.SiteType
	}
	return ves_io_schema_site.INVALID
}

func init() {
	proto.RegisterType((*GlobalSpecType)(nil), "ves.io.schema.virtual_site.GlobalSpecType")
	golang_proto.RegisterType((*GlobalSpecType)(nil), "ves.io.schema.virtual_site.GlobalSpecType")
	proto.RegisterType((*CreateSpecType)(nil), "ves.io.schema.virtual_site.CreateSpecType")
	golang_proto.RegisterType((*CreateSpecType)(nil), "ves.io.schema.virtual_site.CreateSpecType")
	proto.RegisterType((*ReplaceSpecType)(nil), "ves.io.schema.virtual_site.ReplaceSpecType")
	golang_proto.RegisterType((*ReplaceSpecType)(nil), "ves.io.schema.virtual_site.ReplaceSpecType")
	proto.RegisterType((*GetSpecType)(nil), "ves.io.schema.virtual_site.GetSpecType")
	golang_proto.RegisterType((*GetSpecType)(nil), "ves.io.schema.virtual_site.GetSpecType")
}
func (this *GlobalSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType)
	if !ok {
		that2, ok := that.(GlobalSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.SiteSelector.Equal(that1.SiteSelector) {
		return false
	}
	if this.SiteType != that1.SiteType {
		return false
	}
	return true
}
func (this *CreateSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType)
	if !ok {
		that2, ok := that.(CreateSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.SiteSelector.Equal(that1.SiteSelector) {
		return false
	}
	if this.SiteType != that1.SiteType {
		return false
	}
	return true
}
func (this *ReplaceSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType)
	if !ok {
		that2, ok := that.(ReplaceSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *GetSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType)
	if !ok {
		that2, ok := that.(GetSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.SiteSelector.Equal(that1.SiteSelector) {
		return false
	}
	if this.SiteType != that1.SiteType {
		return false
	}
	return true
}
func (this *GlobalSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&virtual_site.GlobalSpecType{")
	if this.SiteSelector != nil {
		s = append(s, "SiteSelector: "+fmt.Sprintf("%#v", this.SiteSelector)+",\n")
	}
	s = append(s, "SiteType: "+fmt.Sprintf("%#v", this.SiteType)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CreateSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&virtual_site.CreateSpecType{")
	if this.SiteSelector != nil {
		s = append(s, "SiteSelector: "+fmt.Sprintf("%#v", this.SiteSelector)+",\n")
	}
	s = append(s, "SiteType: "+fmt.Sprintf("%#v", this.SiteType)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ReplaceSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&virtual_site.ReplaceSpecType{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&virtual_site.GetSpecType{")
	if this.SiteSelector != nil {
		s = append(s, "SiteSelector: "+fmt.Sprintf("%#v", this.SiteSelector)+",\n")
	}
	s = append(s, "SiteType: "+fmt.Sprintf("%#v", this.SiteType)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringTypes(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *GlobalSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GlobalSpecType) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.SiteSelector != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.SiteSelector.Size()))
		n1, err := m.SiteSelector.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.SiteType != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.SiteType))
	}
	return i, nil
}

func (m *CreateSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateSpecType) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.SiteSelector != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.SiteSelector.Size()))
		n2, err := m.SiteSelector.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if m.SiteType != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.SiteType))
	}
	return i, nil
}

func (m *ReplaceSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplaceSpecType) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *GetSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetSpecType) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.SiteSelector != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.SiteSelector.Size()))
		n3, err := m.SiteSelector.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	if m.SiteType != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.SiteType))
	}
	return i, nil
}

func encodeVarintTypes(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *GlobalSpecType) Size() (n int) {
	var l int
	_ = l
	if m.SiteSelector != nil {
		l = m.SiteSelector.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.SiteType != 0 {
		n += 1 + sovTypes(uint64(m.SiteType))
	}
	return n
}

func (m *CreateSpecType) Size() (n int) {
	var l int
	_ = l
	if m.SiteSelector != nil {
		l = m.SiteSelector.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.SiteType != 0 {
		n += 1 + sovTypes(uint64(m.SiteType))
	}
	return n
}

func (m *ReplaceSpecType) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *GetSpecType) Size() (n int) {
	var l int
	_ = l
	if m.SiteSelector != nil {
		l = m.SiteSelector.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.SiteType != 0 {
		n += 1 + sovTypes(uint64(m.SiteType))
	}
	return n
}

func sovTypes(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozTypes(x uint64) (n int) {
	return sovTypes(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *GlobalSpecType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType{`,
		`SiteSelector:` + strings.Replace(fmt.Sprintf("%v", this.SiteSelector), "LabelSelectorType", "ves_io_schema4.LabelSelectorType", 1) + `,`,
		`SiteType:` + fmt.Sprintf("%v", this.SiteType) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType{`,
		`SiteSelector:` + strings.Replace(fmt.Sprintf("%v", this.SiteSelector), "LabelSelectorType", "ves_io_schema4.LabelSelectorType", 1) + `,`,
		`SiteType:` + fmt.Sprintf("%v", this.SiteType) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType{`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType{`,
		`SiteSelector:` + strings.Replace(fmt.Sprintf("%v", this.SiteSelector), "LabelSelectorType", "ves_io_schema4.LabelSelectorType", 1) + `,`,
		`SiteType:` + fmt.Sprintf("%v", this.SiteType) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringTypes(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *GlobalSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GlobalSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GlobalSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SiteSelector", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SiteSelector == nil {
				m.SiteSelector = &ves_io_schema4.LabelSelectorType{}
			}
			if err := m.SiteSelector.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SiteType", wireType)
			}
			m.SiteType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SiteType |= (ves_io_schema_site.SiteType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SiteSelector", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SiteSelector == nil {
				m.SiteSelector = &ves_io_schema4.LabelSelectorType{}
			}
			if err := m.SiteSelector.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SiteType", wireType)
			}
			m.SiteType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SiteType |= (ves_io_schema_site.SiteType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplaceSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplaceSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplaceSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SiteSelector", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SiteSelector == nil {
				m.SiteSelector = &ves_io_schema4.LabelSelectorType{}
			}
			if err := m.SiteSelector.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SiteType", wireType)
			}
			m.SiteType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SiteType |= (ves_io_schema_site.SiteType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTypes(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthTypes
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipTypes(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthTypes = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTypes   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("ves.io/schema/virtual_site/types.proto", fileDescriptorTypes) }
func init() { golang_proto.RegisterFile("ves.io/schema/virtual_site/types.proto", fileDescriptorTypes) }

var fileDescriptorTypes = []byte{
	// 454 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xd4, 0x93, 0xbf, 0x6f, 0x13, 0x31,
	0x14, 0xc7, 0xef, 0xa5, 0xe5, 0x97, 0x0b, 0xa9, 0xc8, 0x42, 0x39, 0x2a, 0xeb, 0x14, 0x21, 0xd4,
	0x81, 0xf8, 0x44, 0x98, 0xe8, 0xd0, 0xa1, 0x08, 0x75, 0x41, 0x08, 0x25, 0x88, 0x81, 0x25, 0xf2,
	0x5d, 0x5f, 0xaf, 0x16, 0x0e, 0xb6, 0x7c, 0x4e, 0xa0, 0x03, 0x12, 0x62, 0x60, 0x66, 0xe6, 0x2f,
	0x60, 0x43, 0x48, 0x4c, 0x15, 0x43, 0x47, 0xc4, 0xd4, 0xb1, 0x23, 0x71, 0x17, 0xd8, 0x2a, 0xfe,
	0x02, 0x74, 0xce, 0xa5, 0xf4, 0xae, 0x13, 0x6c, 0xdd, 0xfc, 0xee, 0xfb, 0x7d, 0xdf, 0xf7, 0x79,
	0xd6, 0x99, 0xdc, 0x1a, 0x63, 0xce, 0x84, 0x8a, 0xf3, 0x74, 0x1b, 0x87, 0x3c, 0x1e, 0x0b, 0x63,
	0x47, 0x5c, 0x0e, 0x72, 0x61, 0x31, 0xb6, 0x3b, 0x1a, 0x73, 0xa6, 0x8d, 0xb2, 0xaa, 0x15, 0x4e,
	0x7d, 0x6c, 0xea, 0x63, 0x27, 0x7d, 0x61, 0x27, 0x13, 0x76, 0x7b, 0x94, 0xb0, 0x54, 0x0d, 0xe3,
	0x4c, 0x65, 0x2a, 0xf6, 0x2d, 0xc9, 0x68, 0xcb, 0x57, 0xbe, 0xf0, 0xa7, 0x69, 0x54, 0x78, 0xa3,
	0x3a, 0x52, 0x69, 0x2b, 0xd4, 0x8b, 0x72, 0x4e, 0x48, 0xab, 0x62, 0x9d, 0x23, 0xbc, 0x5e, 0xd5,
	0x4f, 0x4a, 0xcb, 0xb5, 0x55, 0xb8, 0x14, 0x9b, 0xdc, 0x62, 0xa9, 0x46, 0xf5, 0x45, 0xf1, 0xe5,
	0xa0, 0x32, 0xba, 0xfd, 0x09, 0x48, 0x73, 0x43, 0xaa, 0x84, 0xcb, 0xbe, 0xc6, 0xf4, 0xc9, 0x8e,
	0xc6, 0xd6, 0x53, 0x72, 0xa5, 0x20, 0x18, 0xe4, 0x28, 0x31, 0xb5, 0xca, 0x2c, 0x41, 0x04, 0x2b,
	0x0b, 0xdd, 0x88, 0x55, 0x6f, 0xe3, 0x21, 0x4f, 0x50, 0xf6, 0x4b, 0x4f, 0xd1, 0xb8, 0xbe, 0xb8,
	0xfb, 0x7a, 0xbe, 0xe8, 0xfc, 0xf0, 0x15, 0xe6, 0x49, 0x23, 0x80, 0xde, 0xe5, 0xa2, 0x9a, 0x59,
	0x5a, 0x0f, 0xc8, 0x25, 0x9f, 0x5b, 0xe0, 0x2f, 0x35, 0x22, 0x58, 0x69, 0x76, 0x97, 0x6b, 0x99,
	0x85, 0xce, 0xfa, 0xc2, 0xa2, 0xcf, 0x23, 0xbb, 0xbf, 0xf6, 0xe6, 0xce, 0xbd, 0x85, 0x46, 0x14,
	0xf4, 0x2e, 0xe6, 0xe5, 0xd7, 0xf6, 0x17, 0x20, 0xcd, 0xfb, 0x06, 0xb9, 0xc5, 0x63, 0xe2, 0x47,
	0xff, 0x4b, 0x7c, 0xa1, 0x24, 0xae, 0x91, 0xde, 0xfb, 0x47, 0xd2, 0xbf, 0x74, 0xab, 0xd7, 0xbe,
	0xaf, 0xd5, 0xee, 0xf3, 0xf7, 0xda, 0x5c, 0xf7, 0xf6, 0x9d, 0xf6, 0x4d, 0xb2, 0xd8, 0x43, 0x2d,
	0x79, 0x7a, 0x8c, 0xbd, 0x7a, 0xf5, 0x94, 0xb7, 0xfd, 0x19, 0xc8, 0xc2, 0x06, 0xda, 0xb3, 0xb4,
	0xd9, 0xfa, 0x3b, 0xd8, 0x9f, 0xd0, 0xe0, 0x60, 0x42, 0x83, 0xa3, 0x09, 0x85, 0x37, 0x8e, 0xc2,
	0x47, 0x47, 0xe1, 0x9b, 0xa3, 0xb0, 0xef, 0x28, 0x1c, 0x38, 0x0a, 0x3f, 0x1c, 0x85, 0x9f, 0x8e,
	0x06, 0x47, 0x8e, 0xc2, 0xfb, 0x43, 0x1a, 0xec, 0x1d, 0x52, 0x78, 0xf6, 0x38, 0x53, 0xfa, 0x79,
	0xc6, 0xc6, 0x4a, 0x5a, 0x34, 0x86, 0xb3, 0x51, 0x1e, 0xfb, 0xc3, 0x96, 0x32, 0xc3, 0x8e, 0x36,
	0x6a, 0x2c, 0x36, 0xd1, 0x74, 0x66, 0x72, 0xac, 0x93, 0x4c, 0xc5, 0xf8, 0xca, 0xce, 0xde, 0xc8,
	0xe9, 0xa7, 0x9b, 0x9c, 0xf7, 0xbf, 0xf4, 0xdd, 0x3f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x5d, 0x64,
	0x8a, 0x9b, 0xdf, 0x03, 0x00, 0x00,
}
