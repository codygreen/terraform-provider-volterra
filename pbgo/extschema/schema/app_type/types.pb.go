// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ves.io/schema/app_type/types.proto

package app_type

import (
	fmt "fmt"

	proto "github.com/gogo/protobuf/proto"

	math "math"

	_ "github.com/gogo/protobuf/gogoproto"

	google_protobuf1 "github.com/gogo/protobuf/types"

	_ "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"

	ves_io_schema4 "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"

	_ "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"

	_ "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"

	strconv "strconv"

	strings "strings"

	reflect "reflect"

	binary "encoding/binary"

	io "io"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// FeatureType
//
// x-displayName: "AI/ML Features"
// Enumeration for AI/ML features supported
type FeatureType int32

const (
	// x-displayName: "API Discovery"
	// API Discovery enables generation of model for various API interactions between services of App type.
	BUSINESS_LOGIC_MARKUP FeatureType = 0
	// x-displayName: "Timeseries Analysis"
	// Enable analysis of timeseries for various metric collected like requests, errors, latency etc.
	TIMESERIES_ANOMALY_DETECTION FeatureType = 1
	// x-displayName: "Per API Request Analysis "
	// Enable anomaly detection per API request.
	PER_REQ_ANOMALY_DETECTION FeatureType = 2
	// x-displayName: "User Behavior Analysis"
	// Enable user behavior analysis
	USER_BEHAVIOR_ANALYSIS FeatureType = 3
)

var FeatureType_name = map[int32]string{
	0: "BUSINESS_LOGIC_MARKUP",
	1: "TIMESERIES_ANOMALY_DETECTION",
	2: "PER_REQ_ANOMALY_DETECTION",
	3: "USER_BEHAVIOR_ANALYSIS",
}
var FeatureType_value = map[string]int32{
	"BUSINESS_LOGIC_MARKUP":        0,
	"TIMESERIES_ANOMALY_DETECTION": 1,
	"PER_REQ_ANOMALY_DETECTION":    2,
	"USER_BEHAVIOR_ANALYSIS":       3,
}

func (FeatureType) EnumDescriptor() ([]byte, []int) { return fileDescriptorTypes, []int{0} }

// ApiEndpointInfoRequest
//
// x-displayName: "API Endpoint Info Request"
// This is the various forms that can be requested to be sent in the ApiEndpointInfoRequest
type ApiEndpointInfoRequest int32

const (
	// x-displayName: "API Endpoint Info None"
	// API ENDPOINT INFO NONE option is used to disable any additional info request per api endpoint response
	API_ENDPOINT_INFO_NONE ApiEndpointInfoRequest = 0
	// x-displayName: "API Endpoint Info PDF Sparklines"
	// API ENDPOINT INFO PDF SPARKLINES option is used to enable pdf sparkline info along with the api endpoint response
	API_ENDPOINT_INFO_PDF_SPARKLINES ApiEndpointInfoRequest = 1
)

var ApiEndpointInfoRequest_name = map[int32]string{
	0: "API_ENDPOINT_INFO_NONE",
	1: "API_ENDPOINT_INFO_PDF_SPARKLINES",
}
var ApiEndpointInfoRequest_value = map[string]int32{
	"API_ENDPOINT_INFO_NONE":           0,
	"API_ENDPOINT_INFO_PDF_SPARKLINES": 1,
}

func (ApiEndpointInfoRequest) EnumDescriptor() ([]byte, []int) { return fileDescriptorTypes, []int{1} }

// Feature type container
//
// x-displayName: "Features"
// List of features that are to be enabled for this apptype. FeatureType enum lists
// the features available.
type Feature struct {
	// Enable type of Feature
	//
	// x-displayName: "AI/ML Feature Type"
	// Feature type to be enabled
	Type FeatureType `protobuf:"varint,1,opt,name=type,proto3,enum=ves.io.schema.app_type.FeatureType" json:"type,omitempty"`
}

func (m *Feature) Reset()                    { *m = Feature{} }
func (*Feature) ProtoMessage()               {}
func (*Feature) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{0} }

func (m *Feature) GetType() FeatureType {
	if m != nil {
		return m.Type
	}
	return BUSINESS_LOGIC_MARKUP
}

// Business Logic Markup Setting
//
// x-displayName: "Business Logic Markup Setting"
// Setting specifying how Business Logic Markup will be performed.
type BusinessLogicMarkupSetting struct {
	// Include or Exclude data in machine learning from traffic with redirect response in Business Logic Markup
	//
	// x-displayName: "Learn from Traffic with Redirect Response"
	// By default, business logic markup only learns API Endpoints and patterns from traffic with response code 200
	// On enabling this, the AI engine will learn API Endpoints from traffic with response code 3xx in addition to 200
	//
	// Types that are valid to be assigned to LearnFromRedirectTraffic:
	//	*BusinessLogicMarkupSetting_Disable
	//	*BusinessLogicMarkupSetting_Enable
	LearnFromRedirectTraffic isBusinessLogicMarkupSetting_LearnFromRedirectTraffic `protobuf_oneof:"learn_from_redirect_traffic"`
}

func (m *BusinessLogicMarkupSetting) Reset()                    { *m = BusinessLogicMarkupSetting{} }
func (*BusinessLogicMarkupSetting) ProtoMessage()               {}
func (*BusinessLogicMarkupSetting) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{1} }

type isBusinessLogicMarkupSetting_LearnFromRedirectTraffic interface {
	isBusinessLogicMarkupSetting_LearnFromRedirectTraffic()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type BusinessLogicMarkupSetting_Disable struct {
	Disable *ves_io_schema4.Empty `protobuf:"bytes,1,opt,name=disable,oneof"`
}
type BusinessLogicMarkupSetting_Enable struct {
	Enable *ves_io_schema4.Empty `protobuf:"bytes,2,opt,name=enable,oneof"`
}

func (*BusinessLogicMarkupSetting_Disable) isBusinessLogicMarkupSetting_LearnFromRedirectTraffic() {}
func (*BusinessLogicMarkupSetting_Enable) isBusinessLogicMarkupSetting_LearnFromRedirectTraffic()  {}

func (m *BusinessLogicMarkupSetting) GetLearnFromRedirectTraffic() isBusinessLogicMarkupSetting_LearnFromRedirectTraffic {
	if m != nil {
		return m.LearnFromRedirectTraffic
	}
	return nil
}

func (m *BusinessLogicMarkupSetting) GetDisable() *ves_io_schema4.Empty {
	if x, ok := m.GetLearnFromRedirectTraffic().(*BusinessLogicMarkupSetting_Disable); ok {
		return x.Disable
	}
	return nil
}

func (m *BusinessLogicMarkupSetting) GetEnable() *ves_io_schema4.Empty {
	if x, ok := m.GetLearnFromRedirectTraffic().(*BusinessLogicMarkupSetting_Enable); ok {
		return x.Enable
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*BusinessLogicMarkupSetting) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _BusinessLogicMarkupSetting_OneofMarshaler, _BusinessLogicMarkupSetting_OneofUnmarshaler, _BusinessLogicMarkupSetting_OneofSizer, []interface{}{
		(*BusinessLogicMarkupSetting_Disable)(nil),
		(*BusinessLogicMarkupSetting_Enable)(nil),
	}
}

func _BusinessLogicMarkupSetting_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*BusinessLogicMarkupSetting)
	// learn_from_redirect_traffic
	switch x := m.LearnFromRedirectTraffic.(type) {
	case *BusinessLogicMarkupSetting_Disable:
		_ = b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Disable); err != nil {
			return err
		}
	case *BusinessLogicMarkupSetting_Enable:
		_ = b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Enable); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("BusinessLogicMarkupSetting.LearnFromRedirectTraffic has unexpected type %T", x)
	}
	return nil
}

func _BusinessLogicMarkupSetting_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*BusinessLogicMarkupSetting)
	switch tag {
	case 1: // learn_from_redirect_traffic.disable
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.LearnFromRedirectTraffic = &BusinessLogicMarkupSetting_Disable{msg}
		return true, err
	case 2: // learn_from_redirect_traffic.enable
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.LearnFromRedirectTraffic = &BusinessLogicMarkupSetting_Enable{msg}
		return true, err
	default:
		return false, nil
	}
}

func _BusinessLogicMarkupSetting_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*BusinessLogicMarkupSetting)
	// learn_from_redirect_traffic
	switch x := m.LearnFromRedirectTraffic.(type) {
	case *BusinessLogicMarkupSetting_Disable:
		s := proto.Size(x.Disable)
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *BusinessLogicMarkupSetting_Enable:
		s := proto.Size(x.Enable)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// App type Configuration specification
//
// x-displayName: "App Type Spec"
type GlobalSpecType struct {
	// Features
	//
	// x-displayName: "Features"
	// List of various AI/ML features enabled
	Features []*Feature `protobuf:"bytes,1,rep,name=features" json:"features,omitempty"`
	// Business Logic Markup Setting
	//
	// x-displayName: "Business Logic Markup Setting"
	// Setting specifying how Business Logic Markup will be performed
	BusinessLogicMarkupSetting *BusinessLogicMarkupSetting `protobuf:"bytes,2,opt,name=business_logic_markup_setting,json=businessLogicMarkupSetting" json:"business_logic_markup_setting,omitempty"`
}

func (m *GlobalSpecType) Reset()                    { *m = GlobalSpecType{} }
func (*GlobalSpecType) ProtoMessage()               {}
func (*GlobalSpecType) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{2} }

func (m *GlobalSpecType) GetFeatures() []*Feature {
	if m != nil {
		return m.Features
	}
	return nil
}

func (m *GlobalSpecType) GetBusinessLogicMarkupSetting() *BusinessLogicMarkupSetting {
	if m != nil {
		return m.BusinessLogicMarkupSetting
	}
	return nil
}

// Create App type
//
// x-displayName: "Create App Type"
// Create App type will create the configuration in namespace metadata.namespace
type CreateSpecType struct {
	Features                   []*Feature                  `protobuf:"bytes,1,rep,name=features" json:"features,omitempty"`
	BusinessLogicMarkupSetting *BusinessLogicMarkupSetting `protobuf:"bytes,2,opt,name=business_logic_markup_setting,json=businessLogicMarkupSetting" json:"business_logic_markup_setting,omitempty"`
}

func (m *CreateSpecType) Reset()                    { *m = CreateSpecType{} }
func (*CreateSpecType) ProtoMessage()               {}
func (*CreateSpecType) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{3} }

func (m *CreateSpecType) GetFeatures() []*Feature {
	if m != nil {
		return m.Features
	}
	return nil
}

func (m *CreateSpecType) GetBusinessLogicMarkupSetting() *BusinessLogicMarkupSetting {
	if m != nil {
		return m.BusinessLogicMarkupSetting
	}
	return nil
}

// Replace App type
//
// x-displayName: "Replace App Type"
// Update the configuration by replacing the existing spec with the provided one.
// For read-then-write operations a resourceVersion mismatch will occur if the object was modified between the read and write.
type ReplaceSpecType struct {
	Features                   []*Feature                  `protobuf:"bytes,1,rep,name=features" json:"features,omitempty"`
	BusinessLogicMarkupSetting *BusinessLogicMarkupSetting `protobuf:"bytes,2,opt,name=business_logic_markup_setting,json=businessLogicMarkupSetting" json:"business_logic_markup_setting,omitempty"`
}

func (m *ReplaceSpecType) Reset()                    { *m = ReplaceSpecType{} }
func (*ReplaceSpecType) ProtoMessage()               {}
func (*ReplaceSpecType) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{4} }

func (m *ReplaceSpecType) GetFeatures() []*Feature {
	if m != nil {
		return m.Features
	}
	return nil
}

func (m *ReplaceSpecType) GetBusinessLogicMarkupSetting() *BusinessLogicMarkupSetting {
	if m != nil {
		return m.BusinessLogicMarkupSetting
	}
	return nil
}

// Get App type
//
// x-displayName: "Get App Type"
// Get App type will read the configuration from namespace metadata.namespace
type GetSpecType struct {
	Features                   []*Feature                  `protobuf:"bytes,1,rep,name=features" json:"features,omitempty"`
	BusinessLogicMarkupSetting *BusinessLogicMarkupSetting `protobuf:"bytes,2,opt,name=business_logic_markup_setting,json=businessLogicMarkupSetting" json:"business_logic_markup_setting,omitempty"`
}

func (m *GetSpecType) Reset()                    { *m = GetSpecType{} }
func (*GetSpecType) ProtoMessage()               {}
func (*GetSpecType) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{5} }

func (m *GetSpecType) GetFeatures() []*Feature {
	if m != nil {
		return m.Features
	}
	return nil
}

func (m *GetSpecType) GetBusinessLogicMarkupSetting() *BusinessLogicMarkupSetting {
	if m != nil {
		return m.BusinessLogicMarkupSetting
	}
	return nil
}

// API endpoint dynamic example
//
// x-displayName: "Expanded API Endpoints"
// List of Examples of expanded URL components for API endpoints that are collapsed with a dynamic component that is identified automatically
type APIEPDynExample struct {
	// Dynamic component
	//
	// x-displayName: "Dynamic Component"
	// x-example: "/api/v1/user_id/DYN"
	// Dynamic component used to collapse sample URLs given in Expanded URLs
	ComponentIdentifier string `protobuf:"bytes,1,opt,name=component_identifier,json=componentIdentifier,proto3" json:"component_identifier,omitempty"`
	// List of expanded URLs
	//
	// x-displayName: "Expanded URL(s)"
	// x-example: "[d0161a1e-044e-427b-a806-3bad9eac97fc, a74eb844-6d91-474c-9874-f19fa3983f4d]"
	// List of sample URL(s) that are collapsed
	ComponentExamples []string `protobuf:"bytes,2,rep,name=component_examples,json=componentExamples" json:"component_examples,omitempty"`
}

func (m *APIEPDynExample) Reset()                    { *m = APIEPDynExample{} }
func (*APIEPDynExample) ProtoMessage()               {}
func (*APIEPDynExample) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{6} }

func (m *APIEPDynExample) GetComponentIdentifier() string {
	if m != nil {
		return m.ComponentIdentifier
	}
	return ""
}

func (m *APIEPDynExample) GetComponentExamples() []string {
	if m != nil {
		return m.ComponentExamples
	}
	return nil
}

// Identified API
//
// x-displayName: "API Endpoint Info"
// Information about automatically identified API endpoint
// Each identified API endpoint has a CollapsedURL and Method.
// CollapsedURL is created by replacing dynamic components in the URL, if any, with the keyword DYN.
// These dynamic components are automatically identified.
// Additionally, any API endpoint that has a collapsedURL with automatically identified DYN components,
// will also have DYN-Examples which show a few examples of the original values of the components that were determined to be DYN.
type APIEPInfo struct {
	// Identified API
	//
	// x-displayName: "API endpoint URL"
	// x-example: "/api/v1/user_id/DYN/vehicle_id/DYN"
	// URL for automatically identified API
	CollapsedUrl string `protobuf:"bytes,2,opt,name=collapsed_url,json=collapsedUrl,proto3" json:"collapsed_url,omitempty"`
	// HTTP method
	//
	// x-displayName: "HTTP Method"
	// x-example: "GET"
	// HTTP method for the API.
	Method string `protobuf:"bytes,3,opt,name=method,proto3" json:"method,omitempty"`
	// Expanded URL(s)
	//
	// x-displayName: "Expanded URL(s)"
	// x-example: "{component_identifier: api/v1/user_id/DYN,component_examples: [cmenomo007]}"
	// For example -
	// {"dyn_examples": [
	//  {
	//    "component_identifier": "api/v1/user_id/DYN",
	//    "component_examples": [
	//      "cmenomo007",
	//      "marcusaurelius"
	//      "artattacksince1947",
	//      "johndoe83",
	//    ]
	//  },
	//  {
	//    "component_identifier": "api/v1/user_id/DYN/vehicle_id/DYN",
	//    "component_examples": [
	//      "JN1CV6AR3AM458367",
	//      "1GBCS10AXP2917522",
	//      "JM1DE1KY9D0155647",
	//      "JN1CA31D5YT533780"
	//    ]
	//  }
	// ]}
	// List  of sample URL(s) that are collapsed and dynamic components to collapse them
	DynExamples []*APIEPDynExample `protobuf:"bytes,4,rep,name=dyn_examples,json=dynExamples" json:"dyn_examples,omitempty"`
	// Probability Density Function
	//
	// x-displayName: "PDF(Value)"
	// Metrics supported currently are request_size response_size latency_with_data, latency_no_data, request_rate, error_rate, response_throughput.
	// PDF is calculated for each combination of (Tenant, App type, API endpoint).
	// API endpoint is determined from automatically identified API (collapsed_url) and method.
	PdfInfo *APIEPPDFInfo `protobuf:"bytes,5,opt,name=pdf_info,json=pdfInfo" json:"pdf_info,omitempty"`
	// Request percentage
	//
	// x-displayName: "Request Percentage"
	// x-example: "78.5789"
	// Percentage of requests that were directed to this API Endpoint
	RequestPercentage float32 `protobuf:"fixed32,6,opt,name=request_percentage,json=requestPercentage,proto3" json:"request_percentage,omitempty"`
	// Has Learnt Schema
	//
	// x-displayName: "Has Learnt Schema"
	// x-example: true
	// Has Learnt Schema flag for request API endpoint.
	HasLearntSchema bool `protobuf:"varint,7,opt,name=has_learnt_schema,json=hasLearntSchema,proto3" json:"has_learnt_schema,omitempty"`
}

func (m *APIEPInfo) Reset()                    { *m = APIEPInfo{} }
func (*APIEPInfo) ProtoMessage()               {}
func (*APIEPInfo) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{7} }

func (m *APIEPInfo) GetCollapsedUrl() string {
	if m != nil {
		return m.CollapsedUrl
	}
	return ""
}

func (m *APIEPInfo) GetMethod() string {
	if m != nil {
		return m.Method
	}
	return ""
}

func (m *APIEPInfo) GetDynExamples() []*APIEPDynExample {
	if m != nil {
		return m.DynExamples
	}
	return nil
}

func (m *APIEPInfo) GetPdfInfo() *APIEPPDFInfo {
	if m != nil {
		return m.PdfInfo
	}
	return nil
}

func (m *APIEPInfo) GetRequestPercentage() float32 {
	if m != nil {
		return m.RequestPercentage
	}
	return 0
}

func (m *APIEPInfo) GetHasLearntSchema() bool {
	if m != nil {
		return m.HasLearntSchema
	}
	return false
}

// Probability Density Point(x,y)
//
// x-displayName: "Point(Value, Probability)"
// Probability Density point in (PDF(x)) of the metric.
// x is the value of the metric, probability is the corresponding PDF(x).
// In the univariate case (current configuration), the value x of the metrics is a scaler.
// As PDFSpec is repeated (see below), the x values are linearly spaced monotonically from minimum to maximum.
type PDFSpec struct {
	// Metric Value
	//
	// x-displayName: "Value"
	// x-example: "121.316"
	// Value of the metric that can be plotted on x-axis
	X float32 `protobuf:"fixed32,1,opt,name=x,proto3" json:"x,omitempty"`
	// Probability
	//
	// x-displayName: "Probability"
	// x-example: "0.078"
	// Probability of given Value of the metric that can be plotted on y-axis
	Probability float32 `protobuf:"fixed32,2,opt,name=probability,proto3" json:"probability,omitempty"`
}

func (m *PDFSpec) Reset()                    { *m = PDFSpec{} }
func (*PDFSpec) ProtoMessage()               {}
func (*PDFSpec) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{8} }

func (m *PDFSpec) GetX() float32 {
	if m != nil {
		return m.X
	}
	return 0
}

func (m *PDFSpec) GetProbability() float32 {
	if m != nil {
		return m.Probability
	}
	return 0
}

// Probability Density Function
//
// x-displayName: "PDF(Value)"
// Metrics supported currently are request_size response_size latency_with_data, latency_no_data.
// PDF is calculated for each combination of (Tenant, App type, API endpoint).
// API endpoint is determined from automatically identified API (collapsed_url) and method.
// In the univariate case PDFSpec for each metric is repeated num_pdf_samples times.
// num_pdf_samples is a parameter is system wide parameter currently set to 200.
type APIEPPDFInfo struct {
	// PDF(request_size)
	//
	// x-displayName: "PDF(Request)"
	// List of Probability density points for PDF for request size
	RequestSize []*PDFSpec `protobuf:"bytes,1,rep,name=request_size,json=requestSize" json:"request_size,omitempty"`
	// PDF(response_size)
	//
	// x-displayName: "PDF(Response)"
	// List of Probability density points for PDF for response size
	ResponseSize []*PDFSpec `protobuf:"bytes,2,rep,name=response_size,json=responseSize" json:"response_size,omitempty"`
	// PDF(response latency)
	//
	// x-displayName: "PDF(Latency End)"
	// List of Probability density points for PDF for latency of response end
	LatencyWithData []*PDFSpec `protobuf:"bytes,3,rep,name=latency_with_data,json=latencyWithData" json:"latency_with_data,omitempty"`
	// PDF(response latency to first byte)
	//
	// x-displayName: "PDF(Latency Begin)"
	// List of Probability density points for PDF for latency of response begin
	LatencyNoData []*PDFSpec `protobuf:"bytes,4,rep,name=latency_no_data,json=latencyNoData" json:"latency_no_data,omitempty"`
	// PDF(request rate)
	//
	// x-displayName: "PDF(Request Rate)"
	// List of Probability density points for PDF for request rate
	RequestRate []*PDFSpec `protobuf:"bytes,5,rep,name=request_rate,json=requestRate" json:"request_rate,omitempty"`
	// PDF(error rate)
	//
	// x-displayName: "PDF(Error Rate)"
	// List of Probability density points for PDF for error rate
	ErrorRate []*PDFSpec `protobuf:"bytes,6,rep,name=error_rate,json=errorRate" json:"error_rate,omitempty"`
	// PDF(response throughput)
	//
	// x-displayName: "PDF(Response Throughput)"
	// List of Probability density points for PDF for response throughput
	ResponseThroughput []*PDFSpec `protobuf:"bytes,7,rep,name=response_throughput,json=responseThroughput" json:"response_throughput,omitempty"`
	// creation_timestamp
	//
	// x-displayName: "Creation Timestamp"
	// creation_timestamp represents the time when this PDF was created
	// It is represented in RFC3339 form and is in UTC.
	CreationTimestamp *google_protobuf1.Timestamp `protobuf:"bytes,8,opt,name=creation_timestamp,json=creationTimestamp" json:"creation_timestamp,omitempty"`
}

func (m *APIEPPDFInfo) Reset()                    { *m = APIEPPDFInfo{} }
func (*APIEPPDFInfo) ProtoMessage()               {}
func (*APIEPPDFInfo) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{9} }

func (m *APIEPPDFInfo) GetRequestSize() []*PDFSpec {
	if m != nil {
		return m.RequestSize
	}
	return nil
}

func (m *APIEPPDFInfo) GetResponseSize() []*PDFSpec {
	if m != nil {
		return m.ResponseSize
	}
	return nil
}

func (m *APIEPPDFInfo) GetLatencyWithData() []*PDFSpec {
	if m != nil {
		return m.LatencyWithData
	}
	return nil
}

func (m *APIEPPDFInfo) GetLatencyNoData() []*PDFSpec {
	if m != nil {
		return m.LatencyNoData
	}
	return nil
}

func (m *APIEPPDFInfo) GetRequestRate() []*PDFSpec {
	if m != nil {
		return m.RequestRate
	}
	return nil
}

func (m *APIEPPDFInfo) GetErrorRate() []*PDFSpec {
	if m != nil {
		return m.ErrorRate
	}
	return nil
}

func (m *APIEPPDFInfo) GetResponseThroughput() []*PDFSpec {
	if m != nil {
		return m.ResponseThroughput
	}
	return nil
}

func (m *APIEPPDFInfo) GetCreationTimestamp() *google_protobuf1.Timestamp {
	if m != nil {
		return m.CreationTimestamp
	}
	return nil
}

// Override automatic collapse
//
// x-displayName: "Override Rule"
// Rule to override a given automatic dynamic identifier used to expand or collapse API URL
type OverrideInfo struct {
	// Override component identifier
	//
	// x-displayName: "Identifier"
	// x-example: "/api/v1/user_id/DYN"
	ComponentIdentifier string `protobuf:"bytes,2,opt,name=component_identifier,json=componentIdentifier,proto3" json:"component_identifier,omitempty"`
	// Override Value
	//
	// x-displayName: "Enable/Disable"
	// x-example: "False"
	// Enable or Disable component to be considered as dynamic to collapse or expand API URL
	SetDynamic bool `protobuf:"varint,3,opt,name=set_dynamic,json=setDynamic,proto3" json:"set_dynamic,omitempty"`
}

func (m *OverrideInfo) Reset()                    { *m = OverrideInfo{} }
func (*OverrideInfo) ProtoMessage()               {}
func (*OverrideInfo) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{10} }

func (m *OverrideInfo) GetComponentIdentifier() string {
	if m != nil {
		return m.ComponentIdentifier
	}
	return ""
}

func (m *OverrideInfo) GetSetDynamic() bool {
	if m != nil {
		return m.SetDynamic
	}
	return false
}

func init() {
	proto.RegisterType((*Feature)(nil), "ves.io.schema.app_type.Feature")
	proto.RegisterType((*BusinessLogicMarkupSetting)(nil), "ves.io.schema.app_type.BusinessLogicMarkupSetting")
	proto.RegisterType((*GlobalSpecType)(nil), "ves.io.schema.app_type.GlobalSpecType")
	proto.RegisterType((*CreateSpecType)(nil), "ves.io.schema.app_type.CreateSpecType")
	proto.RegisterType((*ReplaceSpecType)(nil), "ves.io.schema.app_type.ReplaceSpecType")
	proto.RegisterType((*GetSpecType)(nil), "ves.io.schema.app_type.GetSpecType")
	proto.RegisterType((*APIEPDynExample)(nil), "ves.io.schema.app_type.APIEPDynExample")
	proto.RegisterType((*APIEPInfo)(nil), "ves.io.schema.app_type.APIEPInfo")
	proto.RegisterType((*PDFSpec)(nil), "ves.io.schema.app_type.PDFSpec")
	proto.RegisterType((*APIEPPDFInfo)(nil), "ves.io.schema.app_type.APIEPPDFInfo")
	proto.RegisterType((*OverrideInfo)(nil), "ves.io.schema.app_type.OverrideInfo")
	proto.RegisterEnum("ves.io.schema.app_type.FeatureType", FeatureType_name, FeatureType_value)
	proto.RegisterEnum("ves.io.schema.app_type.ApiEndpointInfoRequest", ApiEndpointInfoRequest_name, ApiEndpointInfoRequest_value)
}
func (x FeatureType) String() string {
	s, ok := FeatureType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x ApiEndpointInfoRequest) String() string {
	s, ok := ApiEndpointInfoRequest_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *Feature) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Feature)
	if !ok {
		that2, ok := that.(Feature)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	return true
}
func (this *BusinessLogicMarkupSetting) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*BusinessLogicMarkupSetting)
	if !ok {
		that2, ok := that.(BusinessLogicMarkupSetting)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.LearnFromRedirectTraffic == nil {
		if this.LearnFromRedirectTraffic != nil {
			return false
		}
	} else if this.LearnFromRedirectTraffic == nil {
		return false
	} else if !this.LearnFromRedirectTraffic.Equal(that1.LearnFromRedirectTraffic) {
		return false
	}
	return true
}
func (this *BusinessLogicMarkupSetting_Disable) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*BusinessLogicMarkupSetting_Disable)
	if !ok {
		that2, ok := that.(BusinessLogicMarkupSetting_Disable)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Disable.Equal(that1.Disable) {
		return false
	}
	return true
}
func (this *BusinessLogicMarkupSetting_Enable) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*BusinessLogicMarkupSetting_Enable)
	if !ok {
		that2, ok := that.(BusinessLogicMarkupSetting_Enable)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Enable.Equal(that1.Enable) {
		return false
	}
	return true
}
func (this *GlobalSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType)
	if !ok {
		that2, ok := that.(GlobalSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Features) != len(that1.Features) {
		return false
	}
	for i := range this.Features {
		if !this.Features[i].Equal(that1.Features[i]) {
			return false
		}
	}
	if !this.BusinessLogicMarkupSetting.Equal(that1.BusinessLogicMarkupSetting) {
		return false
	}
	return true
}
func (this *CreateSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType)
	if !ok {
		that2, ok := that.(CreateSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Features) != len(that1.Features) {
		return false
	}
	for i := range this.Features {
		if !this.Features[i].Equal(that1.Features[i]) {
			return false
		}
	}
	if !this.BusinessLogicMarkupSetting.Equal(that1.BusinessLogicMarkupSetting) {
		return false
	}
	return true
}
func (this *ReplaceSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType)
	if !ok {
		that2, ok := that.(ReplaceSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Features) != len(that1.Features) {
		return false
	}
	for i := range this.Features {
		if !this.Features[i].Equal(that1.Features[i]) {
			return false
		}
	}
	if !this.BusinessLogicMarkupSetting.Equal(that1.BusinessLogicMarkupSetting) {
		return false
	}
	return true
}
func (this *GetSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType)
	if !ok {
		that2, ok := that.(GetSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Features) != len(that1.Features) {
		return false
	}
	for i := range this.Features {
		if !this.Features[i].Equal(that1.Features[i]) {
			return false
		}
	}
	if !this.BusinessLogicMarkupSetting.Equal(that1.BusinessLogicMarkupSetting) {
		return false
	}
	return true
}
func (this *APIEPDynExample) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*APIEPDynExample)
	if !ok {
		that2, ok := that.(APIEPDynExample)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ComponentIdentifier != that1.ComponentIdentifier {
		return false
	}
	if len(this.ComponentExamples) != len(that1.ComponentExamples) {
		return false
	}
	for i := range this.ComponentExamples {
		if this.ComponentExamples[i] != that1.ComponentExamples[i] {
			return false
		}
	}
	return true
}
func (this *APIEPInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*APIEPInfo)
	if !ok {
		that2, ok := that.(APIEPInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.CollapsedUrl != that1.CollapsedUrl {
		return false
	}
	if this.Method != that1.Method {
		return false
	}
	if len(this.DynExamples) != len(that1.DynExamples) {
		return false
	}
	for i := range this.DynExamples {
		if !this.DynExamples[i].Equal(that1.DynExamples[i]) {
			return false
		}
	}
	if !this.PdfInfo.Equal(that1.PdfInfo) {
		return false
	}
	if this.RequestPercentage != that1.RequestPercentage {
		return false
	}
	if this.HasLearntSchema != that1.HasLearntSchema {
		return false
	}
	return true
}
func (this *PDFSpec) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PDFSpec)
	if !ok {
		that2, ok := that.(PDFSpec)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.X != that1.X {
		return false
	}
	if this.Probability != that1.Probability {
		return false
	}
	return true
}
func (this *APIEPPDFInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*APIEPPDFInfo)
	if !ok {
		that2, ok := that.(APIEPPDFInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.RequestSize) != len(that1.RequestSize) {
		return false
	}
	for i := range this.RequestSize {
		if !this.RequestSize[i].Equal(that1.RequestSize[i]) {
			return false
		}
	}
	if len(this.ResponseSize) != len(that1.ResponseSize) {
		return false
	}
	for i := range this.ResponseSize {
		if !this.ResponseSize[i].Equal(that1.ResponseSize[i]) {
			return false
		}
	}
	if len(this.LatencyWithData) != len(that1.LatencyWithData) {
		return false
	}
	for i := range this.LatencyWithData {
		if !this.LatencyWithData[i].Equal(that1.LatencyWithData[i]) {
			return false
		}
	}
	if len(this.LatencyNoData) != len(that1.LatencyNoData) {
		return false
	}
	for i := range this.LatencyNoData {
		if !this.LatencyNoData[i].Equal(that1.LatencyNoData[i]) {
			return false
		}
	}
	if len(this.RequestRate) != len(that1.RequestRate) {
		return false
	}
	for i := range this.RequestRate {
		if !this.RequestRate[i].Equal(that1.RequestRate[i]) {
			return false
		}
	}
	if len(this.ErrorRate) != len(that1.ErrorRate) {
		return false
	}
	for i := range this.ErrorRate {
		if !this.ErrorRate[i].Equal(that1.ErrorRate[i]) {
			return false
		}
	}
	if len(this.ResponseThroughput) != len(that1.ResponseThroughput) {
		return false
	}
	for i := range this.ResponseThroughput {
		if !this.ResponseThroughput[i].Equal(that1.ResponseThroughput[i]) {
			return false
		}
	}
	if !this.CreationTimestamp.Equal(that1.CreationTimestamp) {
		return false
	}
	return true
}
func (this *OverrideInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*OverrideInfo)
	if !ok {
		that2, ok := that.(OverrideInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ComponentIdentifier != that1.ComponentIdentifier {
		return false
	}
	if this.SetDynamic != that1.SetDynamic {
		return false
	}
	return true
}
func (this *Feature) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&app_type.Feature{")
	s = append(s, "Type: "+fmt.Sprintf("%#v", this.Type)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *BusinessLogicMarkupSetting) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&app_type.BusinessLogicMarkupSetting{")
	if this.LearnFromRedirectTraffic != nil {
		s = append(s, "LearnFromRedirectTraffic: "+fmt.Sprintf("%#v", this.LearnFromRedirectTraffic)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *BusinessLogicMarkupSetting_Disable) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&app_type.BusinessLogicMarkupSetting_Disable{` +
		`Disable:` + fmt.Sprintf("%#v", this.Disable) + `}`}, ", ")
	return s
}
func (this *BusinessLogicMarkupSetting_Enable) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&app_type.BusinessLogicMarkupSetting_Enable{` +
		`Enable:` + fmt.Sprintf("%#v", this.Enable) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&app_type.GlobalSpecType{")
	if this.Features != nil {
		s = append(s, "Features: "+fmt.Sprintf("%#v", this.Features)+",\n")
	}
	if this.BusinessLogicMarkupSetting != nil {
		s = append(s, "BusinessLogicMarkupSetting: "+fmt.Sprintf("%#v", this.BusinessLogicMarkupSetting)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CreateSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&app_type.CreateSpecType{")
	if this.Features != nil {
		s = append(s, "Features: "+fmt.Sprintf("%#v", this.Features)+",\n")
	}
	if this.BusinessLogicMarkupSetting != nil {
		s = append(s, "BusinessLogicMarkupSetting: "+fmt.Sprintf("%#v", this.BusinessLogicMarkupSetting)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ReplaceSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&app_type.ReplaceSpecType{")
	if this.Features != nil {
		s = append(s, "Features: "+fmt.Sprintf("%#v", this.Features)+",\n")
	}
	if this.BusinessLogicMarkupSetting != nil {
		s = append(s, "BusinessLogicMarkupSetting: "+fmt.Sprintf("%#v", this.BusinessLogicMarkupSetting)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&app_type.GetSpecType{")
	if this.Features != nil {
		s = append(s, "Features: "+fmt.Sprintf("%#v", this.Features)+",\n")
	}
	if this.BusinessLogicMarkupSetting != nil {
		s = append(s, "BusinessLogicMarkupSetting: "+fmt.Sprintf("%#v", this.BusinessLogicMarkupSetting)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *APIEPDynExample) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&app_type.APIEPDynExample{")
	s = append(s, "ComponentIdentifier: "+fmt.Sprintf("%#v", this.ComponentIdentifier)+",\n")
	s = append(s, "ComponentExamples: "+fmt.Sprintf("%#v", this.ComponentExamples)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *APIEPInfo) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&app_type.APIEPInfo{")
	s = append(s, "CollapsedUrl: "+fmt.Sprintf("%#v", this.CollapsedUrl)+",\n")
	s = append(s, "Method: "+fmt.Sprintf("%#v", this.Method)+",\n")
	if this.DynExamples != nil {
		s = append(s, "DynExamples: "+fmt.Sprintf("%#v", this.DynExamples)+",\n")
	}
	if this.PdfInfo != nil {
		s = append(s, "PdfInfo: "+fmt.Sprintf("%#v", this.PdfInfo)+",\n")
	}
	s = append(s, "RequestPercentage: "+fmt.Sprintf("%#v", this.RequestPercentage)+",\n")
	s = append(s, "HasLearntSchema: "+fmt.Sprintf("%#v", this.HasLearntSchema)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *PDFSpec) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&app_type.PDFSpec{")
	s = append(s, "X: "+fmt.Sprintf("%#v", this.X)+",\n")
	s = append(s, "Probability: "+fmt.Sprintf("%#v", this.Probability)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *APIEPPDFInfo) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 12)
	s = append(s, "&app_type.APIEPPDFInfo{")
	if this.RequestSize != nil {
		s = append(s, "RequestSize: "+fmt.Sprintf("%#v", this.RequestSize)+",\n")
	}
	if this.ResponseSize != nil {
		s = append(s, "ResponseSize: "+fmt.Sprintf("%#v", this.ResponseSize)+",\n")
	}
	if this.LatencyWithData != nil {
		s = append(s, "LatencyWithData: "+fmt.Sprintf("%#v", this.LatencyWithData)+",\n")
	}
	if this.LatencyNoData != nil {
		s = append(s, "LatencyNoData: "+fmt.Sprintf("%#v", this.LatencyNoData)+",\n")
	}
	if this.RequestRate != nil {
		s = append(s, "RequestRate: "+fmt.Sprintf("%#v", this.RequestRate)+",\n")
	}
	if this.ErrorRate != nil {
		s = append(s, "ErrorRate: "+fmt.Sprintf("%#v", this.ErrorRate)+",\n")
	}
	if this.ResponseThroughput != nil {
		s = append(s, "ResponseThroughput: "+fmt.Sprintf("%#v", this.ResponseThroughput)+",\n")
	}
	if this.CreationTimestamp != nil {
		s = append(s, "CreationTimestamp: "+fmt.Sprintf("%#v", this.CreationTimestamp)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *OverrideInfo) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&app_type.OverrideInfo{")
	s = append(s, "ComponentIdentifier: "+fmt.Sprintf("%#v", this.ComponentIdentifier)+",\n")
	s = append(s, "SetDynamic: "+fmt.Sprintf("%#v", this.SetDynamic)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringTypes(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *Feature) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Feature) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Type != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.Type))
	}
	return i, nil
}

func (m *BusinessLogicMarkupSetting) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BusinessLogicMarkupSetting) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.LearnFromRedirectTraffic != nil {
		nn1, err := m.LearnFromRedirectTraffic.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn1
	}
	return i, nil
}

func (m *BusinessLogicMarkupSetting_Disable) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Disable != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.Disable.Size()))
		n2, err := m.Disable.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	return i, nil
}
func (m *BusinessLogicMarkupSetting_Enable) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Enable != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.Enable.Size()))
		n3, err := m.Enable.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	return i, nil
}
func (m *GlobalSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GlobalSpecType) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Features) > 0 {
		for _, msg := range m.Features {
			dAtA[i] = 0xa
			i++
			i = encodeVarintTypes(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.BusinessLogicMarkupSetting != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.BusinessLogicMarkupSetting.Size()))
		n4, err := m.BusinessLogicMarkupSetting.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	return i, nil
}

func (m *CreateSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateSpecType) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Features) > 0 {
		for _, msg := range m.Features {
			dAtA[i] = 0xa
			i++
			i = encodeVarintTypes(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.BusinessLogicMarkupSetting != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.BusinessLogicMarkupSetting.Size()))
		n5, err := m.BusinessLogicMarkupSetting.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	return i, nil
}

func (m *ReplaceSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplaceSpecType) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Features) > 0 {
		for _, msg := range m.Features {
			dAtA[i] = 0xa
			i++
			i = encodeVarintTypes(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.BusinessLogicMarkupSetting != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.BusinessLogicMarkupSetting.Size()))
		n6, err := m.BusinessLogicMarkupSetting.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	return i, nil
}

func (m *GetSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetSpecType) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Features) > 0 {
		for _, msg := range m.Features {
			dAtA[i] = 0xa
			i++
			i = encodeVarintTypes(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.BusinessLogicMarkupSetting != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.BusinessLogicMarkupSetting.Size()))
		n7, err := m.BusinessLogicMarkupSetting.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	return i, nil
}

func (m *APIEPDynExample) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *APIEPDynExample) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ComponentIdentifier) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTypes(dAtA, i, uint64(len(m.ComponentIdentifier)))
		i += copy(dAtA[i:], m.ComponentIdentifier)
	}
	if len(m.ComponentExamples) > 0 {
		for _, s := range m.ComponentExamples {
			dAtA[i] = 0x12
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	return i, nil
}

func (m *APIEPInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *APIEPInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.CollapsedUrl) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTypes(dAtA, i, uint64(len(m.CollapsedUrl)))
		i += copy(dAtA[i:], m.CollapsedUrl)
	}
	if len(m.Method) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Method)))
		i += copy(dAtA[i:], m.Method)
	}
	if len(m.DynExamples) > 0 {
		for _, msg := range m.DynExamples {
			dAtA[i] = 0x22
			i++
			i = encodeVarintTypes(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.PdfInfo != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.PdfInfo.Size()))
		n8, err := m.PdfInfo.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n8
	}
	if m.RequestPercentage != 0 {
		dAtA[i] = 0x35
		i++
		binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.RequestPercentage))))
		i += 4
	}
	if m.HasLearntSchema {
		dAtA[i] = 0x38
		i++
		if m.HasLearntSchema {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *PDFSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PDFSpec) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.X != 0 {
		dAtA[i] = 0xd
		i++
		binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.X))))
		i += 4
	}
	if m.Probability != 0 {
		dAtA[i] = 0x15
		i++
		binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Probability))))
		i += 4
	}
	return i, nil
}

func (m *APIEPPDFInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *APIEPPDFInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.RequestSize) > 0 {
		for _, msg := range m.RequestSize {
			dAtA[i] = 0xa
			i++
			i = encodeVarintTypes(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.ResponseSize) > 0 {
		for _, msg := range m.ResponseSize {
			dAtA[i] = 0x12
			i++
			i = encodeVarintTypes(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.LatencyWithData) > 0 {
		for _, msg := range m.LatencyWithData {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintTypes(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.LatencyNoData) > 0 {
		for _, msg := range m.LatencyNoData {
			dAtA[i] = 0x22
			i++
			i = encodeVarintTypes(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.RequestRate) > 0 {
		for _, msg := range m.RequestRate {
			dAtA[i] = 0x2a
			i++
			i = encodeVarintTypes(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.ErrorRate) > 0 {
		for _, msg := range m.ErrorRate {
			dAtA[i] = 0x32
			i++
			i = encodeVarintTypes(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.ResponseThroughput) > 0 {
		for _, msg := range m.ResponseThroughput {
			dAtA[i] = 0x3a
			i++
			i = encodeVarintTypes(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.CreationTimestamp != nil {
		dAtA[i] = 0x42
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.CreationTimestamp.Size()))
		n9, err := m.CreationTimestamp.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n9
	}
	return i, nil
}

func (m *OverrideInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OverrideInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ComponentIdentifier) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTypes(dAtA, i, uint64(len(m.ComponentIdentifier)))
		i += copy(dAtA[i:], m.ComponentIdentifier)
	}
	if m.SetDynamic {
		dAtA[i] = 0x18
		i++
		if m.SetDynamic {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func encodeVarintTypes(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func NewPopulatedFeature(r randyTypes, easy bool) *Feature {
	this := &Feature{}
	this.Type = FeatureType([]int32{0, 1, 2, 3}[r.Intn(4)])
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedBusinessLogicMarkupSetting(r randyTypes, easy bool) *BusinessLogicMarkupSetting {
	this := &BusinessLogicMarkupSetting{}
	oneofNumber_LearnFromRedirectTraffic := []int32{1, 2}[r.Intn(2)]
	switch oneofNumber_LearnFromRedirectTraffic {
	case 1:
		this.LearnFromRedirectTraffic = NewPopulatedBusinessLogicMarkupSetting_Disable(r, easy)
	case 2:
		this.LearnFromRedirectTraffic = NewPopulatedBusinessLogicMarkupSetting_Enable(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedBusinessLogicMarkupSetting_Disable(r randyTypes, easy bool) *BusinessLogicMarkupSetting_Disable {
	this := &BusinessLogicMarkupSetting_Disable{}
	this.Disable = ves_io_schema4.NewPopulatedEmpty(r, easy)
	return this
}
func NewPopulatedBusinessLogicMarkupSetting_Enable(r randyTypes, easy bool) *BusinessLogicMarkupSetting_Enable {
	this := &BusinessLogicMarkupSetting_Enable{}
	this.Enable = ves_io_schema4.NewPopulatedEmpty(r, easy)
	return this
}
func NewPopulatedGlobalSpecType(r randyTypes, easy bool) *GlobalSpecType {
	this := &GlobalSpecType{}
	if r.Intn(10) != 0 {
		v1 := r.Intn(5)
		this.Features = make([]*Feature, v1)
		for i := 0; i < v1; i++ {
			this.Features[i] = NewPopulatedFeature(r, easy)
		}
	}
	if r.Intn(10) != 0 {
		this.BusinessLogicMarkupSetting = NewPopulatedBusinessLogicMarkupSetting(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedCreateSpecType(r randyTypes, easy bool) *CreateSpecType {
	this := &CreateSpecType{}
	if r.Intn(10) != 0 {
		v2 := r.Intn(5)
		this.Features = make([]*Feature, v2)
		for i := 0; i < v2; i++ {
			this.Features[i] = NewPopulatedFeature(r, easy)
		}
	}
	if r.Intn(10) != 0 {
		this.BusinessLogicMarkupSetting = NewPopulatedBusinessLogicMarkupSetting(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedReplaceSpecType(r randyTypes, easy bool) *ReplaceSpecType {
	this := &ReplaceSpecType{}
	if r.Intn(10) != 0 {
		v3 := r.Intn(5)
		this.Features = make([]*Feature, v3)
		for i := 0; i < v3; i++ {
			this.Features[i] = NewPopulatedFeature(r, easy)
		}
	}
	if r.Intn(10) != 0 {
		this.BusinessLogicMarkupSetting = NewPopulatedBusinessLogicMarkupSetting(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedGetSpecType(r randyTypes, easy bool) *GetSpecType {
	this := &GetSpecType{}
	if r.Intn(10) != 0 {
		v4 := r.Intn(5)
		this.Features = make([]*Feature, v4)
		for i := 0; i < v4; i++ {
			this.Features[i] = NewPopulatedFeature(r, easy)
		}
	}
	if r.Intn(10) != 0 {
		this.BusinessLogicMarkupSetting = NewPopulatedBusinessLogicMarkupSetting(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedAPIEPDynExample(r randyTypes, easy bool) *APIEPDynExample {
	this := &APIEPDynExample{}
	this.ComponentIdentifier = string(randStringTypes(r))
	v5 := r.Intn(10)
	this.ComponentExamples = make([]string, v5)
	for i := 0; i < v5; i++ {
		this.ComponentExamples[i] = string(randStringTypes(r))
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedAPIEPInfo(r randyTypes, easy bool) *APIEPInfo {
	this := &APIEPInfo{}
	this.CollapsedUrl = string(randStringTypes(r))
	this.Method = string(randStringTypes(r))
	if r.Intn(10) != 0 {
		v6 := r.Intn(5)
		this.DynExamples = make([]*APIEPDynExample, v6)
		for i := 0; i < v6; i++ {
			this.DynExamples[i] = NewPopulatedAPIEPDynExample(r, easy)
		}
	}
	if r.Intn(10) != 0 {
		this.PdfInfo = NewPopulatedAPIEPPDFInfo(r, easy)
	}
	this.RequestPercentage = float32(r.Float32())
	if r.Intn(2) == 0 {
		this.RequestPercentage *= -1
	}
	this.HasLearntSchema = bool(bool(r.Intn(2) == 0))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedPDFSpec(r randyTypes, easy bool) *PDFSpec {
	this := &PDFSpec{}
	this.X = float32(r.Float32())
	if r.Intn(2) == 0 {
		this.X *= -1
	}
	this.Probability = float32(r.Float32())
	if r.Intn(2) == 0 {
		this.Probability *= -1
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedAPIEPPDFInfo(r randyTypes, easy bool) *APIEPPDFInfo {
	this := &APIEPPDFInfo{}
	if r.Intn(10) != 0 {
		v7 := r.Intn(5)
		this.RequestSize = make([]*PDFSpec, v7)
		for i := 0; i < v7; i++ {
			this.RequestSize[i] = NewPopulatedPDFSpec(r, easy)
		}
	}
	if r.Intn(10) != 0 {
		v8 := r.Intn(5)
		this.ResponseSize = make([]*PDFSpec, v8)
		for i := 0; i < v8; i++ {
			this.ResponseSize[i] = NewPopulatedPDFSpec(r, easy)
		}
	}
	if r.Intn(10) != 0 {
		v9 := r.Intn(5)
		this.LatencyWithData = make([]*PDFSpec, v9)
		for i := 0; i < v9; i++ {
			this.LatencyWithData[i] = NewPopulatedPDFSpec(r, easy)
		}
	}
	if r.Intn(10) != 0 {
		v10 := r.Intn(5)
		this.LatencyNoData = make([]*PDFSpec, v10)
		for i := 0; i < v10; i++ {
			this.LatencyNoData[i] = NewPopulatedPDFSpec(r, easy)
		}
	}
	if r.Intn(10) != 0 {
		v11 := r.Intn(5)
		this.RequestRate = make([]*PDFSpec, v11)
		for i := 0; i < v11; i++ {
			this.RequestRate[i] = NewPopulatedPDFSpec(r, easy)
		}
	}
	if r.Intn(10) != 0 {
		v12 := r.Intn(5)
		this.ErrorRate = make([]*PDFSpec, v12)
		for i := 0; i < v12; i++ {
			this.ErrorRate[i] = NewPopulatedPDFSpec(r, easy)
		}
	}
	if r.Intn(10) != 0 {
		v13 := r.Intn(5)
		this.ResponseThroughput = make([]*PDFSpec, v13)
		for i := 0; i < v13; i++ {
			this.ResponseThroughput[i] = NewPopulatedPDFSpec(r, easy)
		}
	}
	if r.Intn(10) != 0 {
		this.CreationTimestamp = google_protobuf1.NewPopulatedTimestamp(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedOverrideInfo(r randyTypes, easy bool) *OverrideInfo {
	this := &OverrideInfo{}
	this.ComponentIdentifier = string(randStringTypes(r))
	this.SetDynamic = bool(bool(r.Intn(2) == 0))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

type randyTypes interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneTypes(r randyTypes) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringTypes(r randyTypes) string {
	v14 := r.Intn(100)
	tmps := make([]rune, v14)
	for i := 0; i < v14; i++ {
		tmps[i] = randUTF8RuneTypes(r)
	}
	return string(tmps)
}
func randUnrecognizedTypes(r randyTypes, maxFieldNumber int) (dAtA []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		dAtA = randFieldTypes(dAtA, r, fieldNumber, wire)
	}
	return dAtA
}
func randFieldTypes(dAtA []byte, r randyTypes, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		dAtA = encodeVarintPopulateTypes(dAtA, uint64(key))
		v15 := r.Int63()
		if r.Intn(2) == 0 {
			v15 *= -1
		}
		dAtA = encodeVarintPopulateTypes(dAtA, uint64(v15))
	case 1:
		dAtA = encodeVarintPopulateTypes(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		dAtA = encodeVarintPopulateTypes(dAtA, uint64(key))
		ll := r.Intn(100)
		dAtA = encodeVarintPopulateTypes(dAtA, uint64(ll))
		for j := 0; j < ll; j++ {
			dAtA = append(dAtA, byte(r.Intn(256)))
		}
	default:
		dAtA = encodeVarintPopulateTypes(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return dAtA
}
func encodeVarintPopulateTypes(dAtA []byte, v uint64) []byte {
	for v >= 1<<7 {
		dAtA = append(dAtA, uint8(uint64(v)&0x7f|0x80))
		v >>= 7
	}
	dAtA = append(dAtA, uint8(v))
	return dAtA
}
func (m *Feature) Size() (n int) {
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovTypes(uint64(m.Type))
	}
	return n
}

func (m *BusinessLogicMarkupSetting) Size() (n int) {
	var l int
	_ = l
	if m.LearnFromRedirectTraffic != nil {
		n += m.LearnFromRedirectTraffic.Size()
	}
	return n
}

func (m *BusinessLogicMarkupSetting_Disable) Size() (n int) {
	var l int
	_ = l
	if m.Disable != nil {
		l = m.Disable.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *BusinessLogicMarkupSetting_Enable) Size() (n int) {
	var l int
	_ = l
	if m.Enable != nil {
		l = m.Enable.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType) Size() (n int) {
	var l int
	_ = l
	if len(m.Features) > 0 {
		for _, e := range m.Features {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if m.BusinessLogicMarkupSetting != nil {
		l = m.BusinessLogicMarkupSetting.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *CreateSpecType) Size() (n int) {
	var l int
	_ = l
	if len(m.Features) > 0 {
		for _, e := range m.Features {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if m.BusinessLogicMarkupSetting != nil {
		l = m.BusinessLogicMarkupSetting.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *ReplaceSpecType) Size() (n int) {
	var l int
	_ = l
	if len(m.Features) > 0 {
		for _, e := range m.Features {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if m.BusinessLogicMarkupSetting != nil {
		l = m.BusinessLogicMarkupSetting.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *GetSpecType) Size() (n int) {
	var l int
	_ = l
	if len(m.Features) > 0 {
		for _, e := range m.Features {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if m.BusinessLogicMarkupSetting != nil {
		l = m.BusinessLogicMarkupSetting.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *APIEPDynExample) Size() (n int) {
	var l int
	_ = l
	l = len(m.ComponentIdentifier)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if len(m.ComponentExamples) > 0 {
		for _, s := range m.ComponentExamples {
			l = len(s)
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *APIEPInfo) Size() (n int) {
	var l int
	_ = l
	l = len(m.CollapsedUrl)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.Method)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if len(m.DynExamples) > 0 {
		for _, e := range m.DynExamples {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if m.PdfInfo != nil {
		l = m.PdfInfo.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.RequestPercentage != 0 {
		n += 5
	}
	if m.HasLearntSchema {
		n += 2
	}
	return n
}

func (m *PDFSpec) Size() (n int) {
	var l int
	_ = l
	if m.X != 0 {
		n += 5
	}
	if m.Probability != 0 {
		n += 5
	}
	return n
}

func (m *APIEPPDFInfo) Size() (n int) {
	var l int
	_ = l
	if len(m.RequestSize) > 0 {
		for _, e := range m.RequestSize {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if len(m.ResponseSize) > 0 {
		for _, e := range m.ResponseSize {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if len(m.LatencyWithData) > 0 {
		for _, e := range m.LatencyWithData {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if len(m.LatencyNoData) > 0 {
		for _, e := range m.LatencyNoData {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if len(m.RequestRate) > 0 {
		for _, e := range m.RequestRate {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if len(m.ErrorRate) > 0 {
		for _, e := range m.ErrorRate {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if len(m.ResponseThroughput) > 0 {
		for _, e := range m.ResponseThroughput {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if m.CreationTimestamp != nil {
		l = m.CreationTimestamp.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *OverrideInfo) Size() (n int) {
	var l int
	_ = l
	l = len(m.ComponentIdentifier)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.SetDynamic {
		n += 2
	}
	return n
}

func sovTypes(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozTypes(x uint64) (n int) {
	return sovTypes(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *Feature) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Feature{`,
		`Type:` + fmt.Sprintf("%v", this.Type) + `,`,
		`}`,
	}, "")
	return s
}
func (this *BusinessLogicMarkupSetting) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&BusinessLogicMarkupSetting{`,
		`LearnFromRedirectTraffic:` + fmt.Sprintf("%v", this.LearnFromRedirectTraffic) + `,`,
		`}`,
	}, "")
	return s
}
func (this *BusinessLogicMarkupSetting_Disable) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&BusinessLogicMarkupSetting_Disable{`,
		`Disable:` + strings.Replace(fmt.Sprintf("%v", this.Disable), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *BusinessLogicMarkupSetting_Enable) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&BusinessLogicMarkupSetting_Enable{`,
		`Enable:` + strings.Replace(fmt.Sprintf("%v", this.Enable), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType{`,
		`Features:` + strings.Replace(fmt.Sprintf("%v", this.Features), "Feature", "Feature", 1) + `,`,
		`BusinessLogicMarkupSetting:` + strings.Replace(fmt.Sprintf("%v", this.BusinessLogicMarkupSetting), "BusinessLogicMarkupSetting", "BusinessLogicMarkupSetting", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType{`,
		`Features:` + strings.Replace(fmt.Sprintf("%v", this.Features), "Feature", "Feature", 1) + `,`,
		`BusinessLogicMarkupSetting:` + strings.Replace(fmt.Sprintf("%v", this.BusinessLogicMarkupSetting), "BusinessLogicMarkupSetting", "BusinessLogicMarkupSetting", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType{`,
		`Features:` + strings.Replace(fmt.Sprintf("%v", this.Features), "Feature", "Feature", 1) + `,`,
		`BusinessLogicMarkupSetting:` + strings.Replace(fmt.Sprintf("%v", this.BusinessLogicMarkupSetting), "BusinessLogicMarkupSetting", "BusinessLogicMarkupSetting", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType{`,
		`Features:` + strings.Replace(fmt.Sprintf("%v", this.Features), "Feature", "Feature", 1) + `,`,
		`BusinessLogicMarkupSetting:` + strings.Replace(fmt.Sprintf("%v", this.BusinessLogicMarkupSetting), "BusinessLogicMarkupSetting", "BusinessLogicMarkupSetting", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *APIEPDynExample) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&APIEPDynExample{`,
		`ComponentIdentifier:` + fmt.Sprintf("%v", this.ComponentIdentifier) + `,`,
		`ComponentExamples:` + fmt.Sprintf("%v", this.ComponentExamples) + `,`,
		`}`,
	}, "")
	return s
}
func (this *APIEPInfo) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&APIEPInfo{`,
		`CollapsedUrl:` + fmt.Sprintf("%v", this.CollapsedUrl) + `,`,
		`Method:` + fmt.Sprintf("%v", this.Method) + `,`,
		`DynExamples:` + strings.Replace(fmt.Sprintf("%v", this.DynExamples), "APIEPDynExample", "APIEPDynExample", 1) + `,`,
		`PdfInfo:` + strings.Replace(fmt.Sprintf("%v", this.PdfInfo), "APIEPPDFInfo", "APIEPPDFInfo", 1) + `,`,
		`RequestPercentage:` + fmt.Sprintf("%v", this.RequestPercentage) + `,`,
		`HasLearntSchema:` + fmt.Sprintf("%v", this.HasLearntSchema) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PDFSpec) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PDFSpec{`,
		`X:` + fmt.Sprintf("%v", this.X) + `,`,
		`Probability:` + fmt.Sprintf("%v", this.Probability) + `,`,
		`}`,
	}, "")
	return s
}
func (this *APIEPPDFInfo) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&APIEPPDFInfo{`,
		`RequestSize:` + strings.Replace(fmt.Sprintf("%v", this.RequestSize), "PDFSpec", "PDFSpec", 1) + `,`,
		`ResponseSize:` + strings.Replace(fmt.Sprintf("%v", this.ResponseSize), "PDFSpec", "PDFSpec", 1) + `,`,
		`LatencyWithData:` + strings.Replace(fmt.Sprintf("%v", this.LatencyWithData), "PDFSpec", "PDFSpec", 1) + `,`,
		`LatencyNoData:` + strings.Replace(fmt.Sprintf("%v", this.LatencyNoData), "PDFSpec", "PDFSpec", 1) + `,`,
		`RequestRate:` + strings.Replace(fmt.Sprintf("%v", this.RequestRate), "PDFSpec", "PDFSpec", 1) + `,`,
		`ErrorRate:` + strings.Replace(fmt.Sprintf("%v", this.ErrorRate), "PDFSpec", "PDFSpec", 1) + `,`,
		`ResponseThroughput:` + strings.Replace(fmt.Sprintf("%v", this.ResponseThroughput), "PDFSpec", "PDFSpec", 1) + `,`,
		`CreationTimestamp:` + strings.Replace(fmt.Sprintf("%v", this.CreationTimestamp), "Timestamp", "google_protobuf1.Timestamp", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *OverrideInfo) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&OverrideInfo{`,
		`ComponentIdentifier:` + fmt.Sprintf("%v", this.ComponentIdentifier) + `,`,
		`SetDynamic:` + fmt.Sprintf("%v", this.SetDynamic) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringTypes(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *Feature) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Feature: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Feature: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (FeatureType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BusinessLogicMarkupSetting) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BusinessLogicMarkupSetting: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BusinessLogicMarkupSetting: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Disable", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.LearnFromRedirectTraffic = &BusinessLogicMarkupSetting_Disable{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Enable", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.LearnFromRedirectTraffic = &BusinessLogicMarkupSetting_Enable{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GlobalSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GlobalSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GlobalSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Features", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Features = append(m.Features, &Feature{})
			if err := m.Features[len(m.Features)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BusinessLogicMarkupSetting", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BusinessLogicMarkupSetting == nil {
				m.BusinessLogicMarkupSetting = &BusinessLogicMarkupSetting{}
			}
			if err := m.BusinessLogicMarkupSetting.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Features", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Features = append(m.Features, &Feature{})
			if err := m.Features[len(m.Features)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BusinessLogicMarkupSetting", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BusinessLogicMarkupSetting == nil {
				m.BusinessLogicMarkupSetting = &BusinessLogicMarkupSetting{}
			}
			if err := m.BusinessLogicMarkupSetting.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplaceSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplaceSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplaceSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Features", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Features = append(m.Features, &Feature{})
			if err := m.Features[len(m.Features)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BusinessLogicMarkupSetting", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BusinessLogicMarkupSetting == nil {
				m.BusinessLogicMarkupSetting = &BusinessLogicMarkupSetting{}
			}
			if err := m.BusinessLogicMarkupSetting.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Features", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Features = append(m.Features, &Feature{})
			if err := m.Features[len(m.Features)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BusinessLogicMarkupSetting", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BusinessLogicMarkupSetting == nil {
				m.BusinessLogicMarkupSetting = &BusinessLogicMarkupSetting{}
			}
			if err := m.BusinessLogicMarkupSetting.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *APIEPDynExample) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: APIEPDynExample: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: APIEPDynExample: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ComponentIdentifier", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ComponentIdentifier = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ComponentExamples", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ComponentExamples = append(m.ComponentExamples, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *APIEPInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: APIEPInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: APIEPInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CollapsedUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CollapsedUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Method", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Method = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DynExamples", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DynExamples = append(m.DynExamples, &APIEPDynExample{})
			if err := m.DynExamples[len(m.DynExamples)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PdfInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PdfInfo == nil {
				m.PdfInfo = &APIEPPDFInfo{}
			}
			if err := m.PdfInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestPercentage", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.RequestPercentage = float32(math.Float32frombits(v))
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HasLearntSchema", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.HasLearntSchema = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PDFSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PDFSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PDFSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field X", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.X = float32(math.Float32frombits(v))
		case 2:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Probability", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Probability = float32(math.Float32frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *APIEPPDFInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: APIEPPDFInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: APIEPPDFInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestSize", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RequestSize = append(m.RequestSize, &PDFSpec{})
			if err := m.RequestSize[len(m.RequestSize)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResponseSize", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ResponseSize = append(m.ResponseSize, &PDFSpec{})
			if err := m.ResponseSize[len(m.ResponseSize)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LatencyWithData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LatencyWithData = append(m.LatencyWithData, &PDFSpec{})
			if err := m.LatencyWithData[len(m.LatencyWithData)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LatencyNoData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LatencyNoData = append(m.LatencyNoData, &PDFSpec{})
			if err := m.LatencyNoData[len(m.LatencyNoData)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestRate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RequestRate = append(m.RequestRate, &PDFSpec{})
			if err := m.RequestRate[len(m.RequestRate)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorRate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ErrorRate = append(m.ErrorRate, &PDFSpec{})
			if err := m.ErrorRate[len(m.ErrorRate)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResponseThroughput", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ResponseThroughput = append(m.ResponseThroughput, &PDFSpec{})
			if err := m.ResponseThroughput[len(m.ResponseThroughput)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreationTimestamp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CreationTimestamp == nil {
				m.CreationTimestamp = &google_protobuf1.Timestamp{}
			}
			if err := m.CreationTimestamp.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OverrideInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OverrideInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OverrideInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ComponentIdentifier", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ComponentIdentifier = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SetDynamic", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SetDynamic = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTypes(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthTypes
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipTypes(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthTypes = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTypes   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("ves.io/schema/app_type/types.proto", fileDescriptorTypes) }

var fileDescriptorTypes = []byte{
	// 1237 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xdc, 0x56, 0xc1, 0x6f, 0x13, 0xc7,
	0x1a, 0xcf, 0xd8, 0x21, 0x71, 0xc6, 0x0e, 0x71, 0x06, 0x5e, 0xe4, 0x18, 0x58, 0x2c, 0x83, 0x44,
	0x84, 0x12, 0xfb, 0x11, 0xde, 0x7b, 0xe8, 0x51, 0x89, 0xca, 0xc6, 0x9b, 0x60, 0x70, 0x6c, 0x77,
	0xed, 0xb4, 0x82, 0xcb, 0x68, 0xbc, 0x3b, 0xb6, 0x47, 0xac, 0x77, 0xa6, 0xb3, 0xe3, 0x10, 0x23,
	0x55, 0xea, 0xa5, 0x97, 0x9e, 0xaa, 0xfe, 0x15, 0xbd, 0x54, 0xea, 0xb1, 0x2a, 0x17, 0xd4, 0x53,
	0xd5, 0x53, 0x0e, 0x95, 0xca, 0xb1, 0x71, 0xa5, 0xaa, 0xbd, 0xa1, 0x1e, 0xaa, 0x1e, 0x2b, 0xcf,
	0xae, 0x4d, 0x92, 0x12, 0x08, 0xa7, 0x4a, 0x5c, 0xa2, 0x9d, 0xef, 0xf7, 0xfd, 0x7e, 0x33, 0xbf,
	0xef, 0x9b, 0x8c, 0x3f, 0x98, 0xdd, 0xa1, 0x7e, 0x8e, 0xf1, 0xbc, 0x6f, 0x77, 0x69, 0x8f, 0xe4,
	0x89, 0x10, 0x58, 0x0d, 0x04, 0xcd, 0x8f, 0xfe, 0xf8, 0x39, 0x21, 0xb9, 0xe2, 0x68, 0x29, 0xc8,
	0xc9, 0x05, 0x39, 0xb9, 0x71, 0x4e, 0x7a, 0xad, 0xc3, 0x54, 0xb7, 0xdf, 0xca, 0xd9, 0xbc, 0x97,
	0xef, 0xf0, 0x0e, 0xcf, 0xeb, 0xf4, 0x56, 0xbf, 0xad, 0x57, 0x7a, 0xa1, 0xbf, 0x02, 0x99, 0xf4,
	0xc5, 0x0e, 0xe7, 0x1d, 0x97, 0xbe, 0xc8, 0x52, 0xac, 0x47, 0x7d, 0x45, 0x7a, 0x22, 0x4c, 0x38,
	0x77, 0xf8, 0x2c, 0x5c, 0x28, 0xc6, 0xbd, 0xf0, 0x10, 0xe9, 0xe5, 0xc3, 0xe0, 0x81, 0xf3, 0xa5,
	0xcf, 0x1f, 0x86, 0x76, 0x88, 0xcb, 0x1c, 0xa2, 0x68, 0x88, 0x66, 0x8e, 0xa0, 0x8c, 0x3e, 0xc2,
	0x87, 0xa4, 0xb3, 0x45, 0x38, 0xbb, 0x41, 0x89, 0xea, 0x4b, 0x8a, 0x6e, 0xc0, 0xe9, 0x91, 0x72,
	0x0a, 0x64, 0xc0, 0xca, 0xe9, 0xf5, 0x4b, 0xb9, 0x97, 0x3b, 0xcf, 0x85, 0xe9, 0xcd, 0x81, 0xa0,
	0x96, 0x26, 0x64, 0xbf, 0x04, 0x30, 0x5d, 0xec, 0xfb, 0xcc, 0xa3, 0xbe, 0x5f, 0xe1, 0x1d, 0x66,
	0x6f, 0x11, 0xf9, 0xb0, 0x2f, 0x1a, 0x54, 0x29, 0xe6, 0x75, 0xd0, 0xbf, 0xe1, 0xac, 0xc3, 0x7c,
	0xd2, 0x72, 0x03, 0xe9, 0xf8, 0xfa, 0xd9, 0x23, 0xd2, 0x66, 0x4f, 0xa8, 0xc1, 0x9d, 0x29, 0x6b,
	0x9c, 0x86, 0x72, 0x70, 0x86, 0x7a, 0x9a, 0x10, 0x79, 0x25, 0x21, 0xcc, 0x2a, 0x5e, 0x81, 0xe7,
	0x5c, 0x4a, 0xa4, 0x87, 0xdb, 0x92, 0xf7, 0xb0, 0xa4, 0x0e, 0x93, 0xd4, 0x56, 0x58, 0x49, 0xd2,
	0x6e, 0x33, 0x1b, 0xc5, 0x9e, 0x3e, 0x01, 0x60, 0xef, 0x09, 0x88, 0xde, 0x9d, 0x8e, 0x45, 0x93,
	0xd3, 0xd9, 0x3f, 0x00, 0x3c, 0xbd, 0xe9, 0xf2, 0x16, 0x71, 0x1b, 0x82, 0xda, 0x23, 0x23, 0x68,
	0x13, 0xc6, 0xda, 0x81, 0x2f, 0x3f, 0x05, 0x32, 0xd1, 0x95, 0xf8, 0xfa, 0xc5, 0xd7, 0xf8, 0x2f,
	0xc2, 0x6f, 0x7e, 0x7b, 0x1a, 0x3d, 0xf5, 0x39, 0x88, 0xa4, 0x80, 0x35, 0x21, 0xa3, 0x3e, 0xbc,
	0xd0, 0x0a, 0x4b, 0x81, 0xdd, 0x51, 0x2d, 0x70, 0x4f, 0x17, 0x03, 0xfb, 0x41, 0x35, 0x42, 0x47,
	0xeb, 0xc7, 0xa9, 0x1f, 0x5f, 0x47, 0x2b, 0xdd, 0x3a, 0x16, 0xbb, 0x79, 0xf9, 0xdb, 0x27, 0x20,
	0x03, 0x0d, 0xb8, 0x5c, 0x10, 0xc2, 0x65, 0x36, 0x19, 0xb5, 0x38, 0x33, 0x72, 0x96, 0xd9, 0x18,
	0x9f, 0x0c, 0x5c, 0xcb, 0xfe, 0x08, 0xe0, 0xe9, 0xdb, 0x92, 0x12, 0x45, 0x27, 0xc6, 0xdf, 0x79,
	0x63, 0xe3, 0xff, 0xbc, 0xd9, 0xc5, 0xef, 0x6f, 0x1d, 0xe9, 0x5f, 0xf6, 0x19, 0x80, 0x0b, 0x16,
	0x15, 0x2e, 0xb1, 0xdf, 0x3a, 0x6b, 0x3f, 0x00, 0x18, 0xdf, 0xa4, 0xea, 0x6d, 0xb3, 0xe5, 0xc3,
	0x85, 0x42, 0xbd, 0x6c, 0xd6, 0x4b, 0x03, 0xcf, 0xdc, 0x25, 0x3d, 0xe1, 0x52, 0x74, 0x0d, 0x9e,
	0xb5, 0x79, 0x4f, 0x70, 0x8f, 0x7a, 0x0a, 0x33, 0x87, 0x7a, 0x8a, 0xb5, 0x19, 0x95, 0xfa, 0xd5,
	0x98, 0xb3, 0xce, 0x4c, 0xb0, 0xf2, 0x04, 0x42, 0x6b, 0x10, 0xbd, 0xa0, 0xd0, 0x40, 0xc7, 0x4f,
	0x45, 0x32, 0xd1, 0x95, 0x39, 0x6b, 0x71, 0x82, 0x84, 0x1b, 0xf8, 0xd9, 0xaf, 0x22, 0x70, 0x4e,
	0xef, 0x5a, 0xf6, 0xda, 0x1c, 0x5d, 0x82, 0xf3, 0x36, 0x77, 0x5d, 0x22, 0x7c, 0xea, 0xe0, 0xbe,
	0x74, 0xb5, 0xf9, 0x39, 0x2b, 0x31, 0x09, 0x6e, 0x4b, 0x17, 0x2d, 0xc1, 0x99, 0x1e, 0x55, 0x5d,
	0xee, 0xa4, 0xa2, 0x1a, 0x0d, 0x57, 0xe8, 0x2e, 0x4c, 0x38, 0x03, 0xef, 0xc5, 0x9e, 0xd3, 0xba,
	0x15, 0x57, 0x8e, 0x2b, 0xdc, 0x11, 0xaf, 0x56, 0xdc, 0x99, 0x7c, 0xfb, 0xe8, 0x5d, 0x18, 0x13,
	0x4e, 0x1b, 0x33, 0xaf, 0xcd, 0x53, 0xa7, 0x74, 0x03, 0x2e, 0xbf, 0x52, 0xa7, 0x5e, 0xda, 0x18,
	0x19, 0xb0, 0x66, 0x85, 0xd3, 0xd6, 0x4e, 0xd6, 0x20, 0x92, 0xf4, 0xc3, 0x3e, 0xf5, 0x15, 0x16,
	0x54, 0xda, 0xd4, 0x53, 0xa4, 0x43, 0x53, 0x33, 0x19, 0xb0, 0x12, 0xb1, 0x16, 0x43, 0xa4, 0x3e,
	0x01, 0xd0, 0x55, 0xb8, 0xd8, 0x25, 0x3e, 0xd6, 0x6f, 0xa6, 0xc2, 0xc1, 0x16, 0xa9, 0xd9, 0x0c,
	0x58, 0x89, 0x59, 0x0b, 0x5d, 0xe2, 0x57, 0x74, 0xbc, 0xa1, 0xc3, 0xd9, 0xff, 0xc3, 0xd9, 0x7a,
	0x69, 0x63, 0xd4, 0x36, 0x94, 0x80, 0x60, 0x57, 0x37, 0x23, 0x62, 0x81, 0x5d, 0x94, 0x81, 0x71,
	0x21, 0x79, 0x8b, 0xb4, 0x98, 0xcb, 0xd4, 0x40, 0xd7, 0x2e, 0x62, 0x1d, 0x0c, 0x65, 0x7f, 0x99,
	0x86, 0x89, 0x83, 0xe7, 0x45, 0x45, 0x98, 0x18, 0x1f, 0xd3, 0x67, 0x8f, 0xe9, 0xeb, 0xae, 0x6f,
	0xb8, 0xaf, 0x15, 0x0f, 0x49, 0x0d, 0xf6, 0x98, 0xa2, 0x12, 0x9c, 0x97, 0xd4, 0x17, 0xdc, 0xf3,
	0x69, 0x20, 0x12, 0x39, 0x99, 0x48, 0x62, 0xcc, 0xd2, 0x2a, 0xf7, 0xe0, 0xa2, 0x4b, 0x14, 0xf5,
	0xec, 0x01, 0x7e, 0xc4, 0x54, 0x17, 0x3b, 0x44, 0x91, 0x54, 0xf4, 0x64, 0x4a, 0x0b, 0x21, 0xf3,
	0x03, 0xa6, 0xba, 0x25, 0xa2, 0x08, 0xda, 0x84, 0xe3, 0x10, 0xf6, 0x78, 0x20, 0x35, 0x7d, 0x32,
	0xa9, 0xf9, 0x90, 0x57, 0xe5, 0x5a, 0xe8, 0x40, 0x7d, 0x24, 0x51, 0x34, 0x75, 0xea, 0xcd, 0xea,
	0x63, 0x11, 0x45, 0xd1, 0x2d, 0x08, 0xa9, 0x94, 0x5c, 0x06, 0x0a, 0x33, 0x27, 0x53, 0x98, 0xd3,
	0x14, 0xcd, 0xaf, 0xc3, 0x33, 0x93, 0xfa, 0xaa, 0xae, 0xe4, 0xfd, 0x4e, 0x57, 0xf4, 0x55, 0x6a,
	0xf6, 0x64, 0x42, 0x68, 0xcc, 0x6d, 0x4e, 0xa8, 0xa8, 0x0a, 0x91, 0x3d, 0xfa, 0xd1, 0x61, 0xdc,
	0xc3, 0x93, 0xb1, 0x27, 0x15, 0xd3, 0xf7, 0x3c, 0x9d, 0x0b, 0x06, 0xa3, 0xdc, 0x78, 0x30, 0xca,
	0x35, 0xc7, 0x19, 0xc5, 0xe8, 0xde, 0x47, 0xc0, 0x5a, 0x1c, 0x53, 0x27, 0xf1, 0x9b, 0xc9, 0xdf,
	0x6f, 0xcd, 0x5f, 0x5b, 0x5d, 0x5f, 0xfd, 0xcf, 0xea, 0xf5, 0xd5, 0xff, 0xae, 0xfe, 0x6f, 0xf5,
	0x46, 0xb6, 0x05, 0x13, 0xb5, 0x1d, 0x2a, 0x25, 0x73, 0xa8, 0xbe, 0x67, 0xc7, 0x3d, 0x24, 0x91,
	0xe3, 0x1f, 0x92, 0x8b, 0x30, 0xee, 0x53, 0x85, 0x9d, 0x81, 0x47, 0x7a, 0xcc, 0xd6, 0xff, 0xeb,
	0x31, 0x0b, 0xfa, 0x54, 0x95, 0x82, 0xc8, 0xd5, 0x4f, 0x00, 0x8c, 0x1f, 0x18, 0x7d, 0xd0, 0x32,
	0xfc, 0x57, 0x71, 0xbb, 0x51, 0xae, 0x9a, 0x8d, 0x06, 0xae, 0xd4, 0x36, 0xcb, 0xb7, 0xf1, 0x56,
	0xc1, 0xba, 0xb7, 0x5d, 0x4f, 0x4e, 0xa1, 0x0c, 0x3c, 0xdf, 0x2c, 0x6f, 0x99, 0x0d, 0xd3, 0x2a,
	0x9b, 0x0d, 0x5c, 0xa8, 0xd6, 0xb6, 0x0a, 0x95, 0xfb, 0xb8, 0x64, 0x36, 0xcd, 0xdb, 0xcd, 0x72,
	0xad, 0x9a, 0x04, 0xe8, 0x02, 0x5c, 0xae, 0x9b, 0x16, 0xb6, 0xcc, 0xf7, 0x5e, 0x02, 0x47, 0x50,
	0x1a, 0x2e, 0x6d, 0x37, 0x4c, 0x0b, 0x17, 0xcd, 0x3b, 0x85, 0xf7, 0xcb, 0x35, 0x0b, 0x17, 0xaa,
	0x85, 0xca, 0xfd, 0x46, 0xb9, 0x91, 0x8c, 0x5e, 0x7d, 0x00, 0x97, 0x0a, 0x82, 0x99, 0x9e, 0x23,
	0x38, 0xf3, 0x94, 0x7e, 0x06, 0x82, 0xee, 0x8f, 0x58, 0x85, 0x7a, 0x19, 0x9b, 0xd5, 0x52, 0xbd,
	0x56, 0xae, 0x36, 0x71, 0xb9, 0xba, 0x51, 0xc3, 0xd5, 0x5a, 0xd5, 0x4c, 0x4e, 0xa1, 0xcb, 0x30,
	0xf3, 0x77, 0xac, 0x5e, 0xda, 0xc0, 0x8d, 0x7a, 0xc1, 0xba, 0x57, 0x19, 0xd9, 0x48, 0x82, 0xe2,
	0xa7, 0x60, 0x6f, 0xdf, 0x98, 0x7a, 0xb6, 0x6f, 0x4c, 0x3d, 0xdf, 0x37, 0xc0, 0x9f, 0xfb, 0x06,
	0xf8, 0x78, 0x68, 0x80, 0x2f, 0x86, 0x06, 0xf8, 0x7a, 0x68, 0x80, 0xa7, 0x43, 0x03, 0x7c, 0x37,
	0x34, 0xc0, 0xde, 0xd0, 0x00, 0xcf, 0x86, 0x06, 0xf8, 0x69, 0x68, 0x80, 0x5f, 0x87, 0xc6, 0xd4,
	0xf3, 0xa1, 0x01, 0x3e, 0xfb, 0xd9, 0x98, 0x7a, 0x50, 0xe9, 0x70, 0xf1, 0xb0, 0x93, 0xdb, 0xe1,
	0xae, 0xa2, 0x52, 0x92, 0x5c, 0xdf, 0xcf, 0xeb, 0x8f, 0x36, 0x97, 0xbd, 0x35, 0x21, 0xf9, 0x0e,
	0x73, 0xa8, 0x5c, 0x1b, 0xc3, 0x79, 0xd1, 0xea, 0xf0, 0x3c, 0xdd, 0x55, 0xe1, 0x70, 0x7a, 0x64,
	0x0a, 0x6f, 0xcd, 0xe8, 0x2b, 0x71, 0xfd, 0xaf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x6a, 0x6b, 0x66,
	0x87, 0xa6, 0x0b, 0x00, 0x00,
}
