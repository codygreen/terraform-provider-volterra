// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ves.io/schema/api_credential/private_customapi.proto

package api_credential

import proto "github.com/gogo/protobuf/proto"
import golang_proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"
import _ "github.com/gogo/googleapis/google/api"
import _ "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"

import strings "strings"
import reflect "reflect"

import context "golang.org/x/net/context"
import grpc "google.golang.org/grpc"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// API Credential validation request
//
// x-displayName: "Validate API Credential"
// API Credential validate request
type ValidateTokenRequest struct {
	// Namespace
	//
	// x-displayName: "Namespace"
	// Value of namespace is always "system"
	Namespace string `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// Token
	//
	// x-displayName: "Token"
	// unique identifier of for the type of credential.
	// in case of API token, its the token itself and in case of
	// API certificate its the serial number.
	Token string `protobuf:"bytes,3,opt,name=token,proto3" json:"token,omitempty"`
}

func (m *ValidateTokenRequest) Reset()      { *m = ValidateTokenRequest{} }
func (*ValidateTokenRequest) ProtoMessage() {}
func (*ValidateTokenRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorPrivateCustomapi, []int{0}
}

func (m *ValidateTokenRequest) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *ValidateTokenRequest) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

// API Credential validation response
//
// x-displayName: "API credential validate response"
// API Credential validate response
type ValidateTokenResponse struct {
	// Valid
	//
	// x-displayName: "valid"
	// Result of validation.
	Valid bool `protobuf:"varint,1,opt,name=valid,proto3" json:"valid,omitempty"`
	// User
	//
	// x-displayName: "user"
	// User name is the creator ID of this credential.
	User string `protobuf:"bytes,2,opt,name=user,proto3" json:"user,omitempty"`
	// Tenant
	//
	// x-displayName: "tenant"
	// Tenant name in which this credential is issued.
	Tenant string `protobuf:"bytes,3,opt,name=tenant,proto3" json:"tenant,omitempty"`
}

func (m *ValidateTokenResponse) Reset()      { *m = ValidateTokenResponse{} }
func (*ValidateTokenResponse) ProtoMessage() {}
func (*ValidateTokenResponse) Descriptor() ([]byte, []int) {
	return fileDescriptorPrivateCustomapi, []int{1}
}

func (m *ValidateTokenResponse) GetValid() bool {
	if m != nil {
		return m.Valid
	}
	return false
}

func (m *ValidateTokenResponse) GetUser() string {
	if m != nil {
		return m.User
	}
	return ""
}

func (m *ValidateTokenResponse) GetTenant() string {
	if m != nil {
		return m.Tenant
	}
	return ""
}

func init() {
	proto.RegisterType((*ValidateTokenRequest)(nil), "ves.io.schema.api_credential.ValidateTokenRequest")
	golang_proto.RegisterType((*ValidateTokenRequest)(nil), "ves.io.schema.api_credential.ValidateTokenRequest")
	proto.RegisterType((*ValidateTokenResponse)(nil), "ves.io.schema.api_credential.ValidateTokenResponse")
	golang_proto.RegisterType((*ValidateTokenResponse)(nil), "ves.io.schema.api_credential.ValidateTokenResponse")
}
func (this *ValidateTokenRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ValidateTokenRequest)
	if !ok {
		that2, ok := that.(ValidateTokenRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Namespace != that1.Namespace {
		return false
	}
	if this.Token != that1.Token {
		return false
	}
	return true
}
func (this *ValidateTokenResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ValidateTokenResponse)
	if !ok {
		that2, ok := that.(ValidateTokenResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Valid != that1.Valid {
		return false
	}
	if this.User != that1.User {
		return false
	}
	if this.Tenant != that1.Tenant {
		return false
	}
	return true
}
func (this *ValidateTokenRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&api_credential.ValidateTokenRequest{")
	s = append(s, "Namespace: "+fmt.Sprintf("%#v", this.Namespace)+",\n")
	s = append(s, "Token: "+fmt.Sprintf("%#v", this.Token)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ValidateTokenResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&api_credential.ValidateTokenResponse{")
	s = append(s, "Valid: "+fmt.Sprintf("%#v", this.Valid)+",\n")
	s = append(s, "User: "+fmt.Sprintf("%#v", this.User)+",\n")
	s = append(s, "Tenant: "+fmt.Sprintf("%#v", this.Tenant)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringPrivateCustomapi(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for CustomPrivateAPI service

type CustomPrivateAPIClient interface {
	// Validate API credential
	//
	// x-displayName: "Validate API credential"
	// For API credential validation from APIGW.
	// To determine the validity of the credential, token in the request is the unique identifier to
	// lookup corresponding API credential object in eywa.
	ValidateToken(ctx context.Context, in *ValidateTokenRequest, opts ...grpc.CallOption) (*ValidateTokenResponse, error)
}

type customPrivateAPIClient struct {
	cc *grpc.ClientConn
}

func NewCustomPrivateAPIClient(cc *grpc.ClientConn) CustomPrivateAPIClient {
	return &customPrivateAPIClient{cc}
}

func (c *customPrivateAPIClient) ValidateToken(ctx context.Context, in *ValidateTokenRequest, opts ...grpc.CallOption) (*ValidateTokenResponse, error) {
	out := new(ValidateTokenResponse)
	err := grpc.Invoke(ctx, "/ves.io.schema.api_credential.CustomPrivateAPI/ValidateToken", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for CustomPrivateAPI service

type CustomPrivateAPIServer interface {
	// Validate API credential
	//
	// x-displayName: "Validate API credential"
	// For API credential validation from APIGW.
	// To determine the validity of the credential, token in the request is the unique identifier to
	// lookup corresponding API credential object in eywa.
	ValidateToken(context.Context, *ValidateTokenRequest) (*ValidateTokenResponse, error)
}

func RegisterCustomPrivateAPIServer(s *grpc.Server, srv CustomPrivateAPIServer) {
	s.RegisterService(&_CustomPrivateAPI_serviceDesc, srv)
}

func _CustomPrivateAPI_ValidateToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidateTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomPrivateAPIServer).ValidateToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ves.io.schema.api_credential.CustomPrivateAPI/ValidateToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomPrivateAPIServer).ValidateToken(ctx, req.(*ValidateTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _CustomPrivateAPI_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ves.io.schema.api_credential.CustomPrivateAPI",
	HandlerType: (*CustomPrivateAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ValidateToken",
			Handler:    _CustomPrivateAPI_ValidateToken_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ves.io/schema/api_credential/private_customapi.proto",
}

func (m *ValidateTokenRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ValidateTokenRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Namespace) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintPrivateCustomapi(dAtA, i, uint64(len(m.Namespace)))
		i += copy(dAtA[i:], m.Namespace)
	}
	if len(m.Token) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintPrivateCustomapi(dAtA, i, uint64(len(m.Token)))
		i += copy(dAtA[i:], m.Token)
	}
	return i, nil
}

func (m *ValidateTokenResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ValidateTokenResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Valid {
		dAtA[i] = 0x8
		i++
		if m.Valid {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.User) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintPrivateCustomapi(dAtA, i, uint64(len(m.User)))
		i += copy(dAtA[i:], m.User)
	}
	if len(m.Tenant) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintPrivateCustomapi(dAtA, i, uint64(len(m.Tenant)))
		i += copy(dAtA[i:], m.Tenant)
	}
	return i, nil
}

func encodeVarintPrivateCustomapi(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *ValidateTokenRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovPrivateCustomapi(uint64(l))
	}
	l = len(m.Token)
	if l > 0 {
		n += 1 + l + sovPrivateCustomapi(uint64(l))
	}
	return n
}

func (m *ValidateTokenResponse) Size() (n int) {
	var l int
	_ = l
	if m.Valid {
		n += 2
	}
	l = len(m.User)
	if l > 0 {
		n += 1 + l + sovPrivateCustomapi(uint64(l))
	}
	l = len(m.Tenant)
	if l > 0 {
		n += 1 + l + sovPrivateCustomapi(uint64(l))
	}
	return n
}

func sovPrivateCustomapi(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozPrivateCustomapi(x uint64) (n int) {
	return sovPrivateCustomapi(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *ValidateTokenRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ValidateTokenRequest{`,
		`Namespace:` + fmt.Sprintf("%v", this.Namespace) + `,`,
		`Token:` + fmt.Sprintf("%v", this.Token) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ValidateTokenResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ValidateTokenResponse{`,
		`Valid:` + fmt.Sprintf("%v", this.Valid) + `,`,
		`User:` + fmt.Sprintf("%v", this.User) + `,`,
		`Tenant:` + fmt.Sprintf("%v", this.Tenant) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringPrivateCustomapi(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *ValidateTokenRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPrivateCustomapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ValidateTokenRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ValidateTokenRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrivateCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPrivateCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrivateCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPrivateCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPrivateCustomapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPrivateCustomapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ValidateTokenResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPrivateCustomapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ValidateTokenResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ValidateTokenResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Valid", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrivateCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Valid = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field User", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrivateCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPrivateCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.User = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tenant", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrivateCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPrivateCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tenant = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPrivateCustomapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPrivateCustomapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPrivateCustomapi(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPrivateCustomapi
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPrivateCustomapi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPrivateCustomapi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthPrivateCustomapi
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowPrivateCustomapi
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipPrivateCustomapi(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthPrivateCustomapi = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPrivateCustomapi   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("ves.io/schema/api_credential/private_customapi.proto", fileDescriptorPrivateCustomapi)
}
func init() {
	golang_proto.RegisterFile("ves.io/schema/api_credential/private_customapi.proto", fileDescriptorPrivateCustomapi)
}

var fileDescriptorPrivateCustomapi = []byte{
	// 473 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x53, 0x41, 0x6b, 0x14, 0x31,
	0x14, 0xde, 0xac, 0xb5, 0xd8, 0x80, 0x20, 0x43, 0x95, 0x65, 0x5d, 0x42, 0x19, 0x2f, 0x45, 0xd9,
	0x04, 0x5a, 0x4f, 0x5e, 0x44, 0x3d, 0xe9, 0xc5, 0xb2, 0x88, 0x60, 0x41, 0x4a, 0x66, 0xf6, 0x75,
	0x1a, 0xbb, 0x93, 0x17, 0x93, 0xcc, 0x20, 0x88, 0x20, 0xe2, 0x0f, 0x10, 0xfc, 0x13, 0xc5, 0x8b,
	0x3f, 0xa0, 0x97, 0x1e, 0x3d, 0x16, 0xbd, 0x78, 0x74, 0xa7, 0x1e, 0x3c, 0x78, 0xe8, 0x4f, 0x90,
	0xcd, 0x4c, 0xab, 0x53, 0x4a, 0x41, 0x7a, 0x7b, 0xdf, 0x7c, 0xf9, 0xbe, 0x97, 0xf7, 0xe5, 0x0d,
	0xbd, 0x5d, 0x82, 0xe3, 0x0a, 0x85, 0x4b, 0xb7, 0x20, 0x97, 0x42, 0x1a, 0xb5, 0x91, 0x5a, 0x18,
	0x83, 0xf6, 0x4a, 0x4e, 0x84, 0xb1, 0xaa, 0x94, 0x1e, 0x36, 0xd2, 0xc2, 0x79, 0xcc, 0xa5, 0x51,
	0xdc, 0x58, 0xf4, 0x18, 0x0d, 0x6a, 0x15, 0xaf, 0x55, 0xbc, 0xad, 0xea, 0x0f, 0x33, 0xe5, 0xb7,
	0x8a, 0x84, 0xa7, 0x98, 0x8b, 0x0c, 0x33, 0x14, 0x41, 0x94, 0x14, 0x9b, 0x01, 0x05, 0x10, 0xaa,
	0xda, 0xac, 0x3f, 0xc8, 0x10, 0xb3, 0x09, 0xcc, 0x7a, 0x0b, 0xa9, 0x35, 0x7a, 0xe9, 0x15, 0x6a,
	0xd7, 0xb0, 0xd7, 0xdb, 0x17, 0x44, 0xf3, 0x0f, 0x19, 0x3f, 0xa2, 0x8b, 0x4f, 0xe5, 0x44, 0x8d,
	0xa5, 0x87, 0x27, 0xb8, 0x0d, 0x7a, 0x04, 0x2f, 0x0b, 0x70, 0x3e, 0x1a, 0xd0, 0x05, 0x2d, 0x73,
	0x70, 0x46, 0xa6, 0xd0, 0xeb, 0x2e, 0x91, 0xe5, 0x85, 0xd1, 0xdf, 0x0f, 0xd1, 0x22, 0xbd, 0xe8,
	0x67, 0xa7, 0x7b, 0x17, 0x02, 0x53, 0x83, 0xf8, 0x19, 0xbd, 0x7a, 0xc2, 0xcb, 0x19, 0xd4, 0x2e,
	0x1c, 0x2f, 0x67, 0x44, 0x8f, 0x2c, 0x91, 0xe5, 0x4b, 0xa3, 0x1a, 0x44, 0x11, 0x9d, 0x2b, 0x1c,
	0xd8, 0xc6, 0x3d, 0xd4, 0xd1, 0x35, 0x3a, 0xef, 0x41, 0x4b, 0xed, 0x1b, 0xe7, 0x06, 0xad, 0xfc,
	0xee, 0xd2, 0x2b, 0x0f, 0x42, 0x84, 0x6b, 0x75, 0xa0, 0xf7, 0xd6, 0x1e, 0x46, 0x9f, 0xba, 0xf4,
	0x72, 0xab, 0x61, 0xb4, 0xc2, 0xcf, 0x8a, 0x95, 0x9f, 0x36, 0x69, 0x7f, 0xf5, 0xbf, 0x34, 0xf5,
	0x44, 0xf1, 0x67, 0xf2, 0xee, 0xdb, 0xcf, 0x8f, 0xdd, 0x1d, 0x12, 0xdf, 0x3d, 0x7a, 0x62, 0x51,
	0x3f, 0xb1, 0x38, 0x4e, 0xc9, 0x89, 0xd7, 0xc7, 0xf5, 0x1b, 0x51, 0x36, 0x3e, 0x27, 0x16, 0xc4,
	0xdd, 0x21, 0x37, 0xd7, 0x93, 0xf8, 0xb9, 0x68, 0x5d, 0x42, 0x28, 0xed, 0x2d, 0x3a, 0x03, 0xa9,
	0x17, 0x16, 0xe4, 0xf8, 0xfc, 0x3d, 0xfa, 0xb7, 0xf6, 0x76, 0xc9, 0xdc, 0xd7, 0x5d, 0x72, 0xe3,
	0xcc, 0x69, 0x1f, 0x27, 0x2f, 0x20, 0xf5, 0xf7, 0xdf, 0x93, 0xfd, 0x29, 0xeb, 0x7c, 0x9f, 0xb2,
	0xce, 0xe1, 0x94, 0x91, 0xb7, 0x15, 0x23, 0x3b, 0x15, 0x23, 0x5f, 0x2a, 0x46, 0xf6, 0x2b, 0x46,
	0x7e, 0x54, 0x8c, 0xfc, 0xaa, 0x58, 0xe7, 0xb0, 0x62, 0xe4, 0xc3, 0x01, 0xeb, 0xec, 0x1d, 0x30,
	0xb2, 0x3e, 0xca, 0xd0, 0x6c, 0x67, 0xbc, 0xc4, 0x89, 0x07, 0x6b, 0x25, 0x2f, 0x9c, 0x08, 0xc5,
	0x26, 0xda, 0x7c, 0x68, 0x2c, 0x96, 0x6a, 0x0c, 0x76, 0x78, 0x44, 0x0b, 0x93, 0x64, 0x28, 0xe0,
	0x95, 0x6f, 0xe6, 0x3d, 0xf5, 0xe7, 0x49, 0xe6, 0xc3, 0x8e, 0xae, 0xfe, 0x09, 0x00, 0x00, 0xff,
	0xff, 0x93, 0xac, 0xa1, 0x48, 0x63, 0x03, 0x00, 0x00,
}
