// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ves.io/schema/policer/types.proto

package policer

import proto "github.com/gogo/protobuf/proto"
import golang_proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"
import _ "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
import _ "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
import _ "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
import _ "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
import _ "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"

import strconv "strconv"

import strings "strings"
import reflect "reflect"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// PolicerType
//
// x-displayName: "Policer Type"
// Specifies the type of Policer
type PolicerType int32

const (
	// x-displayName: "Single-Rate Two-Color Policer"
	// Basic Single-Rate Two-Color Policer
	POLICER_SINGLE_RATE_TWO_COLOR PolicerType = 0
)

var PolicerType_name = map[int32]string{
	0: "POLICER_SINGLE_RATE_TWO_COLOR",
}
var PolicerType_value = map[string]int32{
	"POLICER_SINGLE_RATE_TWO_COLOR": 0,
}

func (PolicerType) EnumDescriptor() ([]byte, []int) { return fileDescriptorTypes, []int{0} }

// PolicerMode
//
// x-displayName: "Policer Mode"
type PolicerMode int32

const (
	// Not Shared
	//
	// x-displayName: "Not Shared"
	// A separate policer instance is created for each reference to the policer
	POLICER_MODE_NOT_SHARED PolicerMode = 0
	// Shared
	//
	// x-displayName: "Shared"
	// A common policer instance is used for for all references to the policer
	POLICER_MODE_SHARED PolicerMode = 1
)

var PolicerMode_name = map[int32]string{
	0: "POLICER_MODE_NOT_SHARED",
	1: "POLICER_MODE_SHARED",
}
var PolicerMode_value = map[string]int32{
	"POLICER_MODE_NOT_SHARED": 0,
	"POLICER_MODE_SHARED":     1,
}

func (PolicerMode) EnumDescriptor() ([]byte, []int) { return fileDescriptorTypes, []int{1} }

// SingleRateTwoColorType
//
// x-displayName: "Single-Rate Two-Color Type"
// Two color rate limiter
type SingleRateTwoColorType struct {
	// committed_information_rate
	//
	// x-displayName: "Committed Information Rate"
	// committed information rate in bytes per second
	CommittedInformationRate uint32 `protobuf:"varint,1,opt,name=committed_information_rate,json=committedInformationRate,proto3" json:"committed_information_rate,omitempty"`
	// burst_size
	//
	// x-displayName: "Burst Size"
	// Allowed burst size in bytes per second
	BurstSize uint32 `protobuf:"varint,2,opt,name=burst_size,json=burstSize,proto3" json:"burst_size,omitempty"`
}

func (m *SingleRateTwoColorType) Reset()                    { *m = SingleRateTwoColorType{} }
func (*SingleRateTwoColorType) ProtoMessage()               {}
func (*SingleRateTwoColorType) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{0} }

func (m *SingleRateTwoColorType) GetCommittedInformationRate() uint32 {
	if m != nil {
		return m.CommittedInformationRate
	}
	return 0
}

func (m *SingleRateTwoColorType) GetBurstSize() uint32 {
	if m != nil {
		return m.BurstSize
	}
	return 0
}

// GlobalSpecType
//
// x-displayName: "Specification"
// Shape of policer with traffic rate limits
type GlobalSpecType struct {
	// policer_type
	//
	// x-displayName: "Policer Type"
	// Type of a policer, for now only supported type is SingleRateTwoColor
	// policer
	PolicerType PolicerType `protobuf:"varint,1,opt,name=policer_type,json=policerType,proto3,enum=ves.io.schema.policer.PolicerType" json:"policer_type,omitempty"`
	// committed_information_rate
	//
	// x-displayName: "Committed Information Rate(pps)"
	// x-example: "10000"
	// x-required
	// The committed information rate is the guaranteed packets rate for
	// traffic arriving or departing under normal conditions.
	// e.g. 10000 pps
	CommittedInformationRate uint32 `protobuf:"varint,2,opt,name=committed_information_rate,json=committedInformationRate,proto3" json:"committed_information_rate,omitempty"`
	// burst_size
	//
	// x-displayName: "Burst Size(pps)"
	// x-example: "10000"
	// x-required
	// The maximum size permitted for bursts of data.
	// e.g. 10000 pps burst
	BurstSize uint32 `protobuf:"varint,3,opt,name=burst_size,json=burstSize,proto3" json:"burst_size,omitempty"`
	// policer_mode
	//
	// x-displayName: "Policer Mode"
	// Policer mode specifies if policer needs to share the traffic limits across
	// term references or a seperate instance has to be created for each reference
	// For example if Rule 1 and Rule 2 refer to policer and each rule should
	// get bandwidth of 10Kb, then policer mode to be used is "Not Shared"
	// If both Rule 1 and Rule 2 cumulatively need 10kbs then a policer should
	// be created with mode as "Shared"
	PolicerMode PolicerMode `protobuf:"varint,4,opt,name=policer_mode,json=policerMode,proto3,enum=ves.io.schema.policer.PolicerMode" json:"policer_mode,omitempty"`
}

func (m *GlobalSpecType) Reset()                    { *m = GlobalSpecType{} }
func (*GlobalSpecType) ProtoMessage()               {}
func (*GlobalSpecType) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{1} }

func (m *GlobalSpecType) GetPolicerType() PolicerType {
	if m != nil {
		return m.PolicerType
	}
	return POLICER_SINGLE_RATE_TWO_COLOR
}

func (m *GlobalSpecType) GetCommittedInformationRate() uint32 {
	if m != nil {
		return m.CommittedInformationRate
	}
	return 0
}

func (m *GlobalSpecType) GetBurstSize() uint32 {
	if m != nil {
		return m.BurstSize
	}
	return 0
}

func (m *GlobalSpecType) GetPolicerMode() PolicerMode {
	if m != nil {
		return m.PolicerMode
	}
	return POLICER_MODE_NOT_SHARED
}

// Create a policer
//
// x-displayName: "Create Policer"
// Create a new policer with traffic rate limits
type CreateSpecType struct {
	PolicerType              PolicerType `protobuf:"varint,1,opt,name=policer_type,json=policerType,proto3,enum=ves.io.schema.policer.PolicerType" json:"policer_type,omitempty"`
	CommittedInformationRate uint32      `protobuf:"varint,2,opt,name=committed_information_rate,json=committedInformationRate,proto3" json:"committed_information_rate,omitempty"`
	BurstSize                uint32      `protobuf:"varint,3,opt,name=burst_size,json=burstSize,proto3" json:"burst_size,omitempty"`
	PolicerMode              PolicerMode `protobuf:"varint,4,opt,name=policer_mode,json=policerMode,proto3,enum=ves.io.schema.policer.PolicerMode" json:"policer_mode,omitempty"`
}

func (m *CreateSpecType) Reset()                    { *m = CreateSpecType{} }
func (*CreateSpecType) ProtoMessage()               {}
func (*CreateSpecType) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{2} }

func (m *CreateSpecType) GetPolicerType() PolicerType {
	if m != nil {
		return m.PolicerType
	}
	return POLICER_SINGLE_RATE_TWO_COLOR
}

func (m *CreateSpecType) GetCommittedInformationRate() uint32 {
	if m != nil {
		return m.CommittedInformationRate
	}
	return 0
}

func (m *CreateSpecType) GetBurstSize() uint32 {
	if m != nil {
		return m.BurstSize
	}
	return 0
}

func (m *CreateSpecType) GetPolicerMode() PolicerMode {
	if m != nil {
		return m.PolicerMode
	}
	return POLICER_MODE_NOT_SHARED
}

// Replace a policer
//
// x-displayName: "Replace Policer"
// Replace a given policer with changed traffic rate limits
type ReplaceSpecType struct {
	PolicerType              PolicerType `protobuf:"varint,1,opt,name=policer_type,json=policerType,proto3,enum=ves.io.schema.policer.PolicerType" json:"policer_type,omitempty"`
	CommittedInformationRate uint32      `protobuf:"varint,2,opt,name=committed_information_rate,json=committedInformationRate,proto3" json:"committed_information_rate,omitempty"`
	BurstSize                uint32      `protobuf:"varint,3,opt,name=burst_size,json=burstSize,proto3" json:"burst_size,omitempty"`
	PolicerMode              PolicerMode `protobuf:"varint,4,opt,name=policer_mode,json=policerMode,proto3,enum=ves.io.schema.policer.PolicerMode" json:"policer_mode,omitempty"`
}

func (m *ReplaceSpecType) Reset()                    { *m = ReplaceSpecType{} }
func (*ReplaceSpecType) ProtoMessage()               {}
func (*ReplaceSpecType) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{3} }

func (m *ReplaceSpecType) GetPolicerType() PolicerType {
	if m != nil {
		return m.PolicerType
	}
	return POLICER_SINGLE_RATE_TWO_COLOR
}

func (m *ReplaceSpecType) GetCommittedInformationRate() uint32 {
	if m != nil {
		return m.CommittedInformationRate
	}
	return 0
}

func (m *ReplaceSpecType) GetBurstSize() uint32 {
	if m != nil {
		return m.BurstSize
	}
	return 0
}

func (m *ReplaceSpecType) GetPolicerMode() PolicerMode {
	if m != nil {
		return m.PolicerMode
	}
	return POLICER_MODE_NOT_SHARED
}

// Get a policer
//
// x-displayName: "Get Policer"
// Get specification of policer object
type GetSpecType struct {
	PolicerType              PolicerType `protobuf:"varint,1,opt,name=policer_type,json=policerType,proto3,enum=ves.io.schema.policer.PolicerType" json:"policer_type,omitempty"`
	CommittedInformationRate uint32      `protobuf:"varint,2,opt,name=committed_information_rate,json=committedInformationRate,proto3" json:"committed_information_rate,omitempty"`
	BurstSize                uint32      `protobuf:"varint,3,opt,name=burst_size,json=burstSize,proto3" json:"burst_size,omitempty"`
	PolicerMode              PolicerMode `protobuf:"varint,4,opt,name=policer_mode,json=policerMode,proto3,enum=ves.io.schema.policer.PolicerMode" json:"policer_mode,omitempty"`
}

func (m *GetSpecType) Reset()                    { *m = GetSpecType{} }
func (*GetSpecType) ProtoMessage()               {}
func (*GetSpecType) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{4} }

func (m *GetSpecType) GetPolicerType() PolicerType {
	if m != nil {
		return m.PolicerType
	}
	return POLICER_SINGLE_RATE_TWO_COLOR
}

func (m *GetSpecType) GetCommittedInformationRate() uint32 {
	if m != nil {
		return m.CommittedInformationRate
	}
	return 0
}

func (m *GetSpecType) GetBurstSize() uint32 {
	if m != nil {
		return m.BurstSize
	}
	return 0
}

func (m *GetSpecType) GetPolicerMode() PolicerMode {
	if m != nil {
		return m.PolicerMode
	}
	return POLICER_MODE_NOT_SHARED
}

func init() {
	proto.RegisterType((*SingleRateTwoColorType)(nil), "ves.io.schema.policer.SingleRateTwoColorType")
	golang_proto.RegisterType((*SingleRateTwoColorType)(nil), "ves.io.schema.policer.SingleRateTwoColorType")
	proto.RegisterType((*GlobalSpecType)(nil), "ves.io.schema.policer.GlobalSpecType")
	golang_proto.RegisterType((*GlobalSpecType)(nil), "ves.io.schema.policer.GlobalSpecType")
	proto.RegisterType((*CreateSpecType)(nil), "ves.io.schema.policer.CreateSpecType")
	golang_proto.RegisterType((*CreateSpecType)(nil), "ves.io.schema.policer.CreateSpecType")
	proto.RegisterType((*ReplaceSpecType)(nil), "ves.io.schema.policer.ReplaceSpecType")
	golang_proto.RegisterType((*ReplaceSpecType)(nil), "ves.io.schema.policer.ReplaceSpecType")
	proto.RegisterType((*GetSpecType)(nil), "ves.io.schema.policer.GetSpecType")
	golang_proto.RegisterType((*GetSpecType)(nil), "ves.io.schema.policer.GetSpecType")
	proto.RegisterEnum("ves.io.schema.policer.PolicerType", PolicerType_name, PolicerType_value)
	golang_proto.RegisterEnum("ves.io.schema.policer.PolicerType", PolicerType_name, PolicerType_value)
	proto.RegisterEnum("ves.io.schema.policer.PolicerMode", PolicerMode_name, PolicerMode_value)
	golang_proto.RegisterEnum("ves.io.schema.policer.PolicerMode", PolicerMode_name, PolicerMode_value)
}
func (x PolicerType) String() string {
	s, ok := PolicerType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x PolicerMode) String() string {
	s, ok := PolicerMode_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *SingleRateTwoColorType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SingleRateTwoColorType)
	if !ok {
		that2, ok := that.(SingleRateTwoColorType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.CommittedInformationRate != that1.CommittedInformationRate {
		return false
	}
	if this.BurstSize != that1.BurstSize {
		return false
	}
	return true
}
func (this *GlobalSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType)
	if !ok {
		that2, ok := that.(GlobalSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.PolicerType != that1.PolicerType {
		return false
	}
	if this.CommittedInformationRate != that1.CommittedInformationRate {
		return false
	}
	if this.BurstSize != that1.BurstSize {
		return false
	}
	if this.PolicerMode != that1.PolicerMode {
		return false
	}
	return true
}
func (this *CreateSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType)
	if !ok {
		that2, ok := that.(CreateSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.PolicerType != that1.PolicerType {
		return false
	}
	if this.CommittedInformationRate != that1.CommittedInformationRate {
		return false
	}
	if this.BurstSize != that1.BurstSize {
		return false
	}
	if this.PolicerMode != that1.PolicerMode {
		return false
	}
	return true
}
func (this *ReplaceSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType)
	if !ok {
		that2, ok := that.(ReplaceSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.PolicerType != that1.PolicerType {
		return false
	}
	if this.CommittedInformationRate != that1.CommittedInformationRate {
		return false
	}
	if this.BurstSize != that1.BurstSize {
		return false
	}
	if this.PolicerMode != that1.PolicerMode {
		return false
	}
	return true
}
func (this *GetSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType)
	if !ok {
		that2, ok := that.(GetSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.PolicerType != that1.PolicerType {
		return false
	}
	if this.CommittedInformationRate != that1.CommittedInformationRate {
		return false
	}
	if this.BurstSize != that1.BurstSize {
		return false
	}
	if this.PolicerMode != that1.PolicerMode {
		return false
	}
	return true
}
func (this *SingleRateTwoColorType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&policer.SingleRateTwoColorType{")
	s = append(s, "CommittedInformationRate: "+fmt.Sprintf("%#v", this.CommittedInformationRate)+",\n")
	s = append(s, "BurstSize: "+fmt.Sprintf("%#v", this.BurstSize)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GlobalSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&policer.GlobalSpecType{")
	s = append(s, "PolicerType: "+fmt.Sprintf("%#v", this.PolicerType)+",\n")
	s = append(s, "CommittedInformationRate: "+fmt.Sprintf("%#v", this.CommittedInformationRate)+",\n")
	s = append(s, "BurstSize: "+fmt.Sprintf("%#v", this.BurstSize)+",\n")
	s = append(s, "PolicerMode: "+fmt.Sprintf("%#v", this.PolicerMode)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CreateSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&policer.CreateSpecType{")
	s = append(s, "PolicerType: "+fmt.Sprintf("%#v", this.PolicerType)+",\n")
	s = append(s, "CommittedInformationRate: "+fmt.Sprintf("%#v", this.CommittedInformationRate)+",\n")
	s = append(s, "BurstSize: "+fmt.Sprintf("%#v", this.BurstSize)+",\n")
	s = append(s, "PolicerMode: "+fmt.Sprintf("%#v", this.PolicerMode)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ReplaceSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&policer.ReplaceSpecType{")
	s = append(s, "PolicerType: "+fmt.Sprintf("%#v", this.PolicerType)+",\n")
	s = append(s, "CommittedInformationRate: "+fmt.Sprintf("%#v", this.CommittedInformationRate)+",\n")
	s = append(s, "BurstSize: "+fmt.Sprintf("%#v", this.BurstSize)+",\n")
	s = append(s, "PolicerMode: "+fmt.Sprintf("%#v", this.PolicerMode)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&policer.GetSpecType{")
	s = append(s, "PolicerType: "+fmt.Sprintf("%#v", this.PolicerType)+",\n")
	s = append(s, "CommittedInformationRate: "+fmt.Sprintf("%#v", this.CommittedInformationRate)+",\n")
	s = append(s, "BurstSize: "+fmt.Sprintf("%#v", this.BurstSize)+",\n")
	s = append(s, "PolicerMode: "+fmt.Sprintf("%#v", this.PolicerMode)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringTypes(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *SingleRateTwoColorType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SingleRateTwoColorType) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.CommittedInformationRate != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.CommittedInformationRate))
	}
	if m.BurstSize != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.BurstSize))
	}
	return i, nil
}

func (m *GlobalSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GlobalSpecType) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.PolicerType != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.PolicerType))
	}
	if m.CommittedInformationRate != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.CommittedInformationRate))
	}
	if m.BurstSize != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.BurstSize))
	}
	if m.PolicerMode != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.PolicerMode))
	}
	return i, nil
}

func (m *CreateSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateSpecType) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.PolicerType != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.PolicerType))
	}
	if m.CommittedInformationRate != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.CommittedInformationRate))
	}
	if m.BurstSize != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.BurstSize))
	}
	if m.PolicerMode != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.PolicerMode))
	}
	return i, nil
}

func (m *ReplaceSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplaceSpecType) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.PolicerType != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.PolicerType))
	}
	if m.CommittedInformationRate != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.CommittedInformationRate))
	}
	if m.BurstSize != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.BurstSize))
	}
	if m.PolicerMode != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.PolicerMode))
	}
	return i, nil
}

func (m *GetSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetSpecType) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.PolicerType != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.PolicerType))
	}
	if m.CommittedInformationRate != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.CommittedInformationRate))
	}
	if m.BurstSize != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.BurstSize))
	}
	if m.PolicerMode != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.PolicerMode))
	}
	return i, nil
}

func encodeVarintTypes(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *SingleRateTwoColorType) Size() (n int) {
	var l int
	_ = l
	if m.CommittedInformationRate != 0 {
		n += 1 + sovTypes(uint64(m.CommittedInformationRate))
	}
	if m.BurstSize != 0 {
		n += 1 + sovTypes(uint64(m.BurstSize))
	}
	return n
}

func (m *GlobalSpecType) Size() (n int) {
	var l int
	_ = l
	if m.PolicerType != 0 {
		n += 1 + sovTypes(uint64(m.PolicerType))
	}
	if m.CommittedInformationRate != 0 {
		n += 1 + sovTypes(uint64(m.CommittedInformationRate))
	}
	if m.BurstSize != 0 {
		n += 1 + sovTypes(uint64(m.BurstSize))
	}
	if m.PolicerMode != 0 {
		n += 1 + sovTypes(uint64(m.PolicerMode))
	}
	return n
}

func (m *CreateSpecType) Size() (n int) {
	var l int
	_ = l
	if m.PolicerType != 0 {
		n += 1 + sovTypes(uint64(m.PolicerType))
	}
	if m.CommittedInformationRate != 0 {
		n += 1 + sovTypes(uint64(m.CommittedInformationRate))
	}
	if m.BurstSize != 0 {
		n += 1 + sovTypes(uint64(m.BurstSize))
	}
	if m.PolicerMode != 0 {
		n += 1 + sovTypes(uint64(m.PolicerMode))
	}
	return n
}

func (m *ReplaceSpecType) Size() (n int) {
	var l int
	_ = l
	if m.PolicerType != 0 {
		n += 1 + sovTypes(uint64(m.PolicerType))
	}
	if m.CommittedInformationRate != 0 {
		n += 1 + sovTypes(uint64(m.CommittedInformationRate))
	}
	if m.BurstSize != 0 {
		n += 1 + sovTypes(uint64(m.BurstSize))
	}
	if m.PolicerMode != 0 {
		n += 1 + sovTypes(uint64(m.PolicerMode))
	}
	return n
}

func (m *GetSpecType) Size() (n int) {
	var l int
	_ = l
	if m.PolicerType != 0 {
		n += 1 + sovTypes(uint64(m.PolicerType))
	}
	if m.CommittedInformationRate != 0 {
		n += 1 + sovTypes(uint64(m.CommittedInformationRate))
	}
	if m.BurstSize != 0 {
		n += 1 + sovTypes(uint64(m.BurstSize))
	}
	if m.PolicerMode != 0 {
		n += 1 + sovTypes(uint64(m.PolicerMode))
	}
	return n
}

func sovTypes(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozTypes(x uint64) (n int) {
	return sovTypes(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *SingleRateTwoColorType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SingleRateTwoColorType{`,
		`CommittedInformationRate:` + fmt.Sprintf("%v", this.CommittedInformationRate) + `,`,
		`BurstSize:` + fmt.Sprintf("%v", this.BurstSize) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType{`,
		`PolicerType:` + fmt.Sprintf("%v", this.PolicerType) + `,`,
		`CommittedInformationRate:` + fmt.Sprintf("%v", this.CommittedInformationRate) + `,`,
		`BurstSize:` + fmt.Sprintf("%v", this.BurstSize) + `,`,
		`PolicerMode:` + fmt.Sprintf("%v", this.PolicerMode) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType{`,
		`PolicerType:` + fmt.Sprintf("%v", this.PolicerType) + `,`,
		`CommittedInformationRate:` + fmt.Sprintf("%v", this.CommittedInformationRate) + `,`,
		`BurstSize:` + fmt.Sprintf("%v", this.BurstSize) + `,`,
		`PolicerMode:` + fmt.Sprintf("%v", this.PolicerMode) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType{`,
		`PolicerType:` + fmt.Sprintf("%v", this.PolicerType) + `,`,
		`CommittedInformationRate:` + fmt.Sprintf("%v", this.CommittedInformationRate) + `,`,
		`BurstSize:` + fmt.Sprintf("%v", this.BurstSize) + `,`,
		`PolicerMode:` + fmt.Sprintf("%v", this.PolicerMode) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType{`,
		`PolicerType:` + fmt.Sprintf("%v", this.PolicerType) + `,`,
		`CommittedInformationRate:` + fmt.Sprintf("%v", this.CommittedInformationRate) + `,`,
		`BurstSize:` + fmt.Sprintf("%v", this.BurstSize) + `,`,
		`PolicerMode:` + fmt.Sprintf("%v", this.PolicerMode) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringTypes(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *SingleRateTwoColorType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SingleRateTwoColorType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SingleRateTwoColorType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommittedInformationRate", wireType)
			}
			m.CommittedInformationRate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CommittedInformationRate |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BurstSize", wireType)
			}
			m.BurstSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BurstSize |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GlobalSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GlobalSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GlobalSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PolicerType", wireType)
			}
			m.PolicerType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PolicerType |= (PolicerType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommittedInformationRate", wireType)
			}
			m.CommittedInformationRate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CommittedInformationRate |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BurstSize", wireType)
			}
			m.BurstSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BurstSize |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PolicerMode", wireType)
			}
			m.PolicerMode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PolicerMode |= (PolicerMode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PolicerType", wireType)
			}
			m.PolicerType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PolicerType |= (PolicerType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommittedInformationRate", wireType)
			}
			m.CommittedInformationRate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CommittedInformationRate |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BurstSize", wireType)
			}
			m.BurstSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BurstSize |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PolicerMode", wireType)
			}
			m.PolicerMode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PolicerMode |= (PolicerMode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplaceSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplaceSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplaceSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PolicerType", wireType)
			}
			m.PolicerType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PolicerType |= (PolicerType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommittedInformationRate", wireType)
			}
			m.CommittedInformationRate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CommittedInformationRate |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BurstSize", wireType)
			}
			m.BurstSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BurstSize |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PolicerMode", wireType)
			}
			m.PolicerMode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PolicerMode |= (PolicerMode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PolicerType", wireType)
			}
			m.PolicerType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PolicerType |= (PolicerType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommittedInformationRate", wireType)
			}
			m.CommittedInformationRate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CommittedInformationRate |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BurstSize", wireType)
			}
			m.BurstSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BurstSize |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PolicerMode", wireType)
			}
			m.PolicerMode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PolicerMode |= (PolicerMode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTypes(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthTypes
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipTypes(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthTypes = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTypes   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("ves.io/schema/policer/types.proto", fileDescriptorTypes) }
func init() { golang_proto.RegisterFile("ves.io/schema/policer/types.proto", fileDescriptorTypes) }

var fileDescriptorTypes = []byte{
	// 641 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x95, 0x4f, 0x4f, 0x13, 0x4f,
	0x1c, 0xc6, 0x77, 0x4a, 0xf9, 0xf1, 0x63, 0xd0, 0x4a, 0xd6, 0x28, 0xa5, 0x95, 0x09, 0xf4, 0x54,
	0x1b, 0xd8, 0x8d, 0x60, 0x3c, 0x18, 0x43, 0x02, 0x65, 0x03, 0x8d, 0x85, 0x92, 0x6d, 0x13, 0x13,
	0x2f, 0x9b, 0xdd, 0xf6, 0xcb, 0x32, 0x71, 0xb7, 0xb3, 0xd9, 0x9d, 0x16, 0xe1, 0x84, 0x2f, 0xc0,
	0xc4, 0x8b, 0xfa, 0x16, 0xbc, 0x78, 0xf2, 0x26, 0x17, 0x8e, 0xc6, 0x13, 0x47, 0xe2, 0x49, 0x96,
	0x8b, 0xde, 0x88, 0xaf, 0xc0, 0xec, 0x1f, 0xa0, 0x0b, 0x88, 0xc6, 0x78, 0xd3, 0x53, 0x77, 0xf2,
	0x3c, 0xdf, 0x3f, 0xcf, 0xa7, 0xbb, 0x19, 0x3c, 0xd1, 0x05, 0x4f, 0xa2, 0x4c, 0xf6, 0x9a, 0xeb,
	0x60, 0xeb, 0xb2, 0xc3, 0x2c, 0xda, 0x04, 0x57, 0xe6, 0x9b, 0x0e, 0x78, 0x92, 0xe3, 0x32, 0xce,
	0xc4, 0x1b, 0x91, 0x45, 0x8a, 0x2c, 0x52, 0x6c, 0xc9, 0x4d, 0x99, 0x94, 0xaf, 0x77, 0x0c, 0xa9,
	0xc9, 0x6c, 0xd9, 0x64, 0x26, 0x93, 0x43, 0xb7, 0xd1, 0x59, 0x0b, 0x4f, 0xe1, 0x21, 0x7c, 0x8a,
	0xba, 0xe4, 0x46, 0x92, 0x83, 0xda, 0xc0, 0x63, 0x21, 0x9f, 0x14, 0x98, 0xc3, 0x29, 0x6b, 0xc7,
	0xb3, 0x73, 0xa3, 0x49, 0xb1, 0x67, 0xad, 0xdc, 0xad, 0xa4, 0xd4, 0xd5, 0x2d, 0xda, 0xd2, 0x39,
	0xc4, 0xea, 0xf8, 0x19, 0x95, 0xc2, 0x86, 0x96, 0x68, 0x5d, 0x78, 0x8e, 0xf0, 0xcd, 0x3a, 0x6d,
	0x9b, 0x16, 0xa8, 0x3a, 0x87, 0xc6, 0x06, 0x2b, 0x33, 0x8b, 0xb9, 0x8d, 0x4d, 0x07, 0xc4, 0x25,
	0x9c, 0x6b, 0x32, 0xdb, 0xa6, 0x9c, 0x43, 0x4b, 0xa3, 0xed, 0x35, 0xe6, 0xda, 0x7a, 0x50, 0xaa,
	0xb9, 0x3a, 0x87, 0x2c, 0x1a, 0x47, 0xc5, 0xab, 0xf3, 0xf8, 0xfd, 0xd7, 0xdd, 0xbe, 0xfe, 0x52,
	0x5f, 0x71, 0xfb, 0x7f, 0x35, 0x7b, 0xe2, 0xae, 0x9c, 0x9a, 0x83, 0xae, 0xe2, 0x6d, 0x8c, 0x8d,
	0x8e, 0xeb, 0x71, 0xcd, 0xa3, 0x5b, 0x90, 0x4d, 0x9d, 0xab, 0x1c, 0x0c, 0xd5, 0x3a, 0xdd, 0x82,
	0xc2, 0xbb, 0x14, 0xce, 0x2c, 0x5a, 0xcc, 0xd0, 0xad, 0xba, 0x03, 0xcd, 0x70, 0x0f, 0x05, 0x5f,
	0x89, 0x69, 0x6b, 0x41, 0xf2, 0x70, 0x72, 0x66, 0xba, 0x20, 0x5d, 0xf8, 0x87, 0x48, 0xab, 0xd1,
	0x6f, 0x50, 0xa9, 0x0e, 0x39, 0xa7, 0x07, 0xb1, 0x7a, 0x69, 0x9c, 0x68, 0xa9, 0x4c, 0xb0, 0xd4,
	0x60, 0x69, 0x20, 0xbb, 0xfd, 0xd6, 0x4f, 0x17, 0xd1, 0x25, 0x91, 0x8a, 0x89, 0x48, 0x7d, 0x61,
	0xf5, 0x60, 0x50, 0x9d, 0x2e, 0xa5, 0x8a, 0xa8, 0x27, 0x91, 0x68, 0x9c, 0xae, 0x6f, 0xb3, 0x16,
	0x64, 0xd3, 0xbf, 0xb2, 0xfe, 0x32, 0x6b, 0xc1, 0x7c, 0xfe, 0xd3, 0x0e, 0x1a, 0x59, 0xad, 0x55,
	0x2b, 0x65, 0x45, 0xd5, 0x96, 0x6b, 0x0b, 0x8a, 0xb6, 0x52, 0x6b, 0x68, 0xf5, 0xa5, 0x39, 0x55,
	0x59, 0x38, 0xc9, 0x16, 0x38, 0x0b, 0xaf, 0x52, 0x38, 0x53, 0x76, 0x41, 0xe7, 0xf0, 0xa7, 0xa9,
	0x3d, 0xf8, 0x39, 0xb5, 0x4b, 0x28, 0x8d, 0x9d, 0xa7, 0xd4, 0x8b, 0x46, 0xf9, 0x5d, 0x34, 0x89,
	0xf4, 0xf7, 0x47, 0x3f, 0xce, 0x9e, 0x79, 0x67, 0xbe, 0xcd, 0xf6, 0xdf, 0x9d, 0x9c, 0x9e, 0x9c,
	0x29, 0xbc, 0x4e, 0xe1, 0x6b, 0x2a, 0x38, 0x96, 0xde, 0xfc, 0x47, 0x26, 0x49, 0xe6, 0x65, 0x0a,
	0x0f, 0x2d, 0x02, 0xff, 0x1b, 0xa9, 0xe4, 0x2f, 0xa0, 0x32, 0x70, 0x67, 0x32, 0xe4, 0x52, 0xba,
	0x87, 0x87, 0x7a, 0xc2, 0x89, 0x13, 0x78, 0xec, 0xf8, 0x0b, 0xac, 0x57, 0x56, 0x16, 0xab, 0x8a,
	0xa6, 0xce, 0x35, 0x14, 0xad, 0xf1, 0xa8, 0xa6, 0x95, 0x6b, 0xd5, 0x9a, 0x3a, 0x2c, 0xe4, 0xd2,
	0xbb, 0x3b, 0x48, 0x28, 0x55, 0x4e, 0xea, 0x82, 0x19, 0x62, 0x1e, 0xff, 0xe8, 0xcb, 0x1d, 0x16,
	0xc4, 0x11, 0x7c, 0x3d, 0x21, 0xc6, 0x02, 0x8a, 0x5a, 0xcd, 0x3f, 0x43, 0x7b, 0x07, 0x44, 0xd8,
	0x3f, 0x20, 0xc2, 0xd1, 0x01, 0x41, 0xdb, 0x3e, 0x41, 0x6f, 0x7c, 0x82, 0x3e, 0xf8, 0x04, 0xed,
	0xf9, 0x04, 0xed, 0xfb, 0x04, 0x7d, 0xf6, 0x09, 0xfa, 0xe2, 0x13, 0xe1, 0xc8, 0x27, 0xe8, 0xc5,
	0x21, 0x11, 0x76, 0x0f, 0x09, 0x7a, 0xfc, 0xd0, 0x64, 0xce, 0x13, 0x53, 0xea, 0x32, 0x8b, 0x83,
	0xeb, 0xea, 0x52, 0xc7, 0x93, 0xc3, 0x87, 0x00, 0xf1, 0x94, 0xe3, 0xb2, 0x2e, 0x6d, 0x81, 0x3b,
	0x75, 0x2c, 0xcb, 0x8e, 0x61, 0x32, 0x19, 0x9e, 0xf2, 0xf8, 0x6e, 0x48, 0x5e, 0x7d, 0xc6, 0x7f,
	0xe1, 0xf5, 0x30, 0xf3, 0x3d, 0x00, 0x00, 0xff, 0xff, 0xa0, 0x69, 0x50, 0xfc, 0x1a, 0x07, 0x00,
	0x00,
}
