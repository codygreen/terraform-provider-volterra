//
// Copyright (c) 2018 Volterra, Inc. All rights reserved.
// Code generated by ves-gen-schema-go. DO NOT EDIT.
//
package bgp

import (
	"context"
	"fmt"
	"strings"

	"github.com/gogo/protobuf/proto"

	"gopkg.volterra.us/stdlib/codec"
	"gopkg.volterra.us/stdlib/db"
	"gopkg.volterra.us/stdlib/errors"

	ves_io_schema "gopkg.volterra.us/terraform-provider-volterra/pbgo/extschema/schema"
)

var (
	// dummy imports in case file has no message with Refs
	_ db.Interface
	_ = errors.Wrap
	_ = strings.Split
)

// augmented methods on protoc/std generated struct

func (m *BgpParameters) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *BgpParameters) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *BgpParameters) DeepCopy() *BgpParameters {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &BgpParameters{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *BgpParameters) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *BgpParameters) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return BgpParametersValidator().Validate(ctx, m, opts...)
}

type ValidateBgpParameters struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateBgpParameters) AsnValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewUint32ValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for asn")
	}

	return validatorFn, nil
}

func (v *ValidateBgpParameters) BgpRouterIdTypeValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	var conv db.EnumConvFn
	conv = func(v interface{}) int32 {
		i := v.(BgpRouterIdType)
		return int32(i)
	}
	// BgpRouterIdType_name is generated in .pb.go
	validatorFn, err := db.NewEnumValidationRuleHandler(rules, BgpRouterIdType_name, conv)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for bgp_router_id_type")
	}

	return validatorFn, nil
}

func (v *ValidateBgpParameters) BgpRouterIdKeyValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for bgp_router_id_key")
	}

	return validatorFn, nil
}

func (v *ValidateBgpParameters) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*BgpParameters)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *BgpParameters got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["asn"]; exists {

		vOpts := append(opts, db.WithValidateField("asn"))
		if err := fv(ctx, m.GetAsn(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["bgp_router_id"]; exists {

		vOpts := append(opts, db.WithValidateField("bgp_router_id"))
		if err := fv(ctx, m.GetBgpRouterId(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["bgp_router_id_key"]; exists {

		vOpts := append(opts, db.WithValidateField("bgp_router_id_key"))
		if err := fv(ctx, m.GetBgpRouterIdKey(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["bgp_router_id_type"]; exists {

		vOpts := append(opts, db.WithValidateField("bgp_router_id_type"))
		if err := fv(ctx, m.GetBgpRouterIdType(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultBgpParametersValidator = func() *ValidateBgpParameters {
	v := &ValidateBgpParameters{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhAsn := v.AsnValidationRuleHandler
	rulesAsn := map[string]string{
		"ves.io.schema.rules.message.required": "true",
		"ves.io.schema.rules.uint32.gte":       "1",
	}
	vFn, err = vrhAsn(rulesAsn)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for BgpParameters.asn: %s", err)
		panic(errMsg)
	}
	v.FldValidators["asn"] = vFn

	vrhBgpRouterIdType := v.BgpRouterIdTypeValidationRuleHandler
	rulesBgpRouterIdType := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhBgpRouterIdType(rulesBgpRouterIdType)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for BgpParameters.bgp_router_id_type: %s", err)
		panic(errMsg)
	}
	v.FldValidators["bgp_router_id_type"] = vFn

	vrhBgpRouterIdKey := v.BgpRouterIdKeyValidationRuleHandler
	rulesBgpRouterIdKey := map[string]string{
		"ves.io.schema.rules.string.max_len": "64",
	}
	vFn, err = vrhBgpRouterIdKey(rulesBgpRouterIdKey)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for BgpParameters.bgp_router_id_key: %s", err)
		panic(errMsg)
	}
	v.FldValidators["bgp_router_id_key"] = vFn

	v.FldValidators["bgp_router_id"] = ves_io_schema.IpAddressTypeValidator().Validate

	return v
}()

func BgpParametersValidator() db.Validator {
	return DefaultBgpParametersValidator
}

// augmented methods on protoc/std generated struct

func (m *BgpPeer) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *BgpPeer) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *BgpPeer) DeepCopy() *BgpPeer {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &BgpPeer{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *BgpPeer) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *BgpPeer) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return BgpPeerValidator().Validate(ctx, m, opts...)
}

type ValidateBgpPeer struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateBgpPeer) AsnValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewUint32ValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for asn")
	}

	return validatorFn, nil
}

func (v *ValidateBgpPeer) BgpPeerAddressTypeValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	var conv db.EnumConvFn
	conv = func(v interface{}) int32 {
		i := v.(BgpPeerAddressType)
		return int32(i)
	}
	// BgpPeerAddressType_name is generated in .pb.go
	validatorFn, err := db.NewEnumValidationRuleHandler(rules, BgpPeerAddressType_name, conv)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for bgp_peer_address_type")
	}

	return validatorFn, nil
}

func (v *ValidateBgpPeer) BgpPeerAddressKeyValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for bgp_peer_address_key")
	}

	return validatorFn, nil
}

func (v *ValidateBgpPeer) PortValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewUint32ValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for port")
	}

	return validatorFn, nil
}

func (v *ValidateBgpPeer) BgpPeerSubnetOffsetValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewUint32ValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for bgp_peer_subnet_offset")
	}

	return validatorFn, nil
}

func (v *ValidateBgpPeer) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*BgpPeer)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *BgpPeer got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["asn"]; exists {

		vOpts := append(opts, db.WithValidateField("asn"))
		if err := fv(ctx, m.GetAsn(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["bgp_peer_address"]; exists {

		vOpts := append(opts, db.WithValidateField("bgp_peer_address"))
		if err := fv(ctx, m.GetBgpPeerAddress(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["bgp_peer_address_key"]; exists {

		vOpts := append(opts, db.WithValidateField("bgp_peer_address_key"))
		if err := fv(ctx, m.GetBgpPeerAddressKey(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["bgp_peer_address_type"]; exists {

		vOpts := append(opts, db.WithValidateField("bgp_peer_address_type"))
		if err := fv(ctx, m.GetBgpPeerAddressType(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["bgp_peer_subnet_offset"]; exists {

		vOpts := append(opts, db.WithValidateField("bgp_peer_subnet_offset"))
		if err := fv(ctx, m.GetBgpPeerSubnetOffset(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["port"]; exists {

		vOpts := append(opts, db.WithValidateField("port"))
		if err := fv(ctx, m.GetPort(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultBgpPeerValidator = func() *ValidateBgpPeer {
	v := &ValidateBgpPeer{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhAsn := v.AsnValidationRuleHandler
	rulesAsn := map[string]string{
		"ves.io.schema.rules.message.required": "true",
		"ves.io.schema.rules.uint32.gte":       "1",
	}
	vFn, err = vrhAsn(rulesAsn)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for BgpPeer.asn: %s", err)
		panic(errMsg)
	}
	v.FldValidators["asn"] = vFn

	vrhBgpPeerAddressType := v.BgpPeerAddressTypeValidationRuleHandler
	rulesBgpPeerAddressType := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhBgpPeerAddressType(rulesBgpPeerAddressType)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for BgpPeer.bgp_peer_address_type: %s", err)
		panic(errMsg)
	}
	v.FldValidators["bgp_peer_address_type"] = vFn

	vrhBgpPeerAddressKey := v.BgpPeerAddressKeyValidationRuleHandler
	rulesBgpPeerAddressKey := map[string]string{
		"ves.io.schema.rules.string.max_len": "64",
	}
	vFn, err = vrhBgpPeerAddressKey(rulesBgpPeerAddressKey)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for BgpPeer.bgp_peer_address_key: %s", err)
		panic(errMsg)
	}
	v.FldValidators["bgp_peer_address_key"] = vFn

	vrhPort := v.PortValidationRuleHandler
	rulesPort := map[string]string{
		"ves.io.schema.rules.uint32.gte": "0",
		"ves.io.schema.rules.uint32.lte": "65535",
	}
	vFn, err = vrhPort(rulesPort)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for BgpPeer.port: %s", err)
		panic(errMsg)
	}
	v.FldValidators["port"] = vFn

	vrhBgpPeerSubnetOffset := v.BgpPeerSubnetOffsetValidationRuleHandler
	rulesBgpPeerSubnetOffset := map[string]string{
		"ves.io.schema.rules.uint32.gte": "0",
		"ves.io.schema.rules.uint32.lte": "32",
	}
	vFn, err = vrhBgpPeerSubnetOffset(rulesBgpPeerSubnetOffset)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for BgpPeer.bgp_peer_subnet_offset: %s", err)
		panic(errMsg)
	}
	v.FldValidators["bgp_peer_subnet_offset"] = vFn

	v.FldValidators["bgp_peer_address"] = ves_io_schema.IpAddressTypeValidator().Validate

	return v
}()

func BgpPeerValidator() db.Validator {
	return DefaultBgpPeerValidator
}

// augmented methods on protoc/std generated struct

func (m *BgpPeerStatusType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *BgpPeerStatusType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *BgpPeerStatusType) DeepCopy() *BgpPeerStatusType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &BgpPeerStatusType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *BgpPeerStatusType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *BgpPeerStatusType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return BgpPeerStatusTypeValidator().Validate(ctx, m, opts...)
}

type ValidateBgpPeerStatusType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateBgpPeerStatusType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*BgpPeerStatusType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *BgpPeerStatusType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["advertised_prefix_count"]; exists {

		vOpts := append(opts, db.WithValidateField("advertised_prefix_count"))
		if err := fv(ctx, m.GetAdvertisedPrefixCount(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["connection_flap_count"]; exists {

		vOpts := append(opts, db.WithValidateField("connection_flap_count"))
		if err := fv(ctx, m.GetConnectionFlapCount(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["interface_name"]; exists {

		vOpts := append(opts, db.WithValidateField("interface_name"))
		if err := fv(ctx, m.GetInterfaceName(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["local_address"]; exists {

		vOpts := append(opts, db.WithValidateField("local_address"))
		if err := fv(ctx, m.GetLocalAddress(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["peer_address"]; exists {

		vOpts := append(opts, db.WithValidateField("peer_address"))
		if err := fv(ctx, m.GetPeerAddress(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["peer_asn"]; exists {

		vOpts := append(opts, db.WithValidateField("peer_asn"))
		if err := fv(ctx, m.GetPeerAsn(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["peer_port"]; exists {

		vOpts := append(opts, db.WithValidateField("peer_port"))
		if err := fv(ctx, m.GetPeerPort(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["peer_router_id"]; exists {

		vOpts := append(opts, db.WithValidateField("peer_router_id"))
		if err := fv(ctx, m.GetPeerRouterId(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["received_prefix_count"]; exists {

		vOpts := append(opts, db.WithValidateField("received_prefix_count"))
		if err := fv(ctx, m.GetReceivedPrefixCount(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["up_down"]; exists {

		vOpts := append(opts, db.WithValidateField("up_down"))
		if err := fv(ctx, m.GetUpDown(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["up_down_timestamp"]; exists {

		vOpts := append(opts, db.WithValidateField("up_down_timestamp"))
		if err := fv(ctx, m.GetUpDownTimestamp(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultBgpPeerStatusTypeValidator = func() *ValidateBgpPeerStatusType {
	v := &ValidateBgpPeerStatusType{FldValidators: map[string]db.ValidatorFunc{}}

	v.FldValidators["peer_address"] = ves_io_schema.IpAddressTypeValidator().Validate

	return v
}()

func BgpPeerStatusTypeValidator() db.Validator {
	return DefaultBgpPeerStatusTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *BgpStatusType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *BgpStatusType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *BgpStatusType) DeepCopy() *BgpStatusType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &BgpStatusType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *BgpStatusType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *BgpStatusType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return BgpStatusTypeValidator().Validate(ctx, m, opts...)
}

type ValidateBgpStatusType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateBgpStatusType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*BgpStatusType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *BgpStatusType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["local_asn"]; exists {

		vOpts := append(opts, db.WithValidateField("local_asn"))
		if err := fv(ctx, m.GetLocalAsn(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["local_router_id"]; exists {

		vOpts := append(opts, db.WithValidateField("local_router_id"))
		if err := fv(ctx, m.GetLocalRouterId(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["peer_status_list"]; exists {

		vOpts := append(opts, db.WithValidateField("peer_status_list"))
		for idx, item := range m.GetPeerStatusList() {
			vOpts := append(vOpts, db.WithValidateRepItem(idx))
			if err := fv(ctx, item, vOpts...); err != nil {
				return err
			}
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultBgpStatusTypeValidator = func() *ValidateBgpStatusType {
	v := &ValidateBgpStatusType{FldValidators: map[string]db.ValidatorFunc{}}

	v.FldValidators["peer_status_list"] = BgpPeerStatusTypeValidator().Validate

	return v
}()

func BgpStatusTypeValidator() db.Validator {
	return DefaultBgpStatusTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *CreateSpecType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *CreateSpecType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *CreateSpecType) DeepCopy() *CreateSpecType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &CreateSpecType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *CreateSpecType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *CreateSpecType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return CreateSpecTypeValidator().Validate(ctx, m, opts...)
}

func (m *CreateSpecType) GetDRefInfo() ([]db.DRefInfo, error) {
	var drInfos []db.DRefInfo
	if fdrInfos, err := m.GetNetworkInterfaceDRefInfo(); err != nil {
		return nil, err
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetWhereDRefInfo(); err != nil {
		return nil, err
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	return drInfos, nil
}

func (m *CreateSpecType) GetNetworkInterfaceDRefInfo() ([]db.DRefInfo, error) {
	drInfos := []db.DRefInfo{}
	for i, ref := range m.GetNetworkInterface() {
		if ref == nil {
			return nil, fmt.Errorf("CreateSpecType.network_interface[%d] has a nil value", i)
		}
		// resolve kind to type if needed at DBObject.GetDRefInfo()
		drInfos = append(drInfos, db.DRefInfo{
			RefdType:   "network_interface.Object",
			RefdUID:    ref.Uid,
			RefdTenant: ref.Tenant,
			RefdNS:     ref.Namespace,
			RefdName:   ref.Name,
			DRField:    "network_interface",
			Ref:        ref,
		})
	}

	return drInfos, nil
}

// GetNetworkInterfaceDBEntries returns the db.Entry corresponding to the ObjRefType from the default Table
func (m *CreateSpecType) GetNetworkInterfaceDBEntries(ctx context.Context, d db.Interface) ([]db.Entry, error) {
	var entries []db.Entry
	refdType, err := d.TypeForEntryKind("", "", "network_interface.Object")
	if err != nil {
		return nil, errors.Wrap(err, "Cannot find type for kind: network_interface")
	}
	for _, ref := range m.GetNetworkInterface() {
		refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
		if err != nil {
			return nil, errors.Wrap(err, "Getting referred entry")
		}
		if refdEnt != nil {
			entries = append(entries, refdEnt)
		}
	}

	return entries, nil
}

// GetDRefInfo for the field's type
func (m *CreateSpecType) GetWhereDRefInfo() ([]db.DRefInfo, error) {
	var (
		drInfos, driSet []db.DRefInfo
		err             error
	)
	_ = driSet
	if m.Where == nil {
		return []db.DRefInfo{}, nil
	}

	driSet, err = m.Where.GetDRefInfo()
	if err != nil {
		return nil, err
	}
	for _, dri := range driSet {
		dri.DRField = "where." + dri.DRField
		drInfos = append(drInfos, dri)
	}

	return drInfos, err
}

type ValidateCreateSpecType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateCreateSpecType) WhereValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	reqdValidatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "MessageValidationRuleHandler for where")
	}
	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		if err := reqdValidatorFn(ctx, val, opts...); err != nil {
			return err
		}

		return nil
	}

	return validatorFn, nil
}

func (v *ValidateCreateSpecType) BgpParametersValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	reqdValidatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "MessageValidationRuleHandler for bgp_parameters")
	}
	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		if err := reqdValidatorFn(ctx, val, opts...); err != nil {
			return err
		}

		if err := BgpParametersValidator().Validate(ctx, val, opts...); err != nil {
			return err
		}

		return nil
	}

	return validatorFn, nil
}

func (v *ValidateCreateSpecType) BgpPeersValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemsValidatorFn := func(ctx context.Context, elems []*BgpPeer, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := BgpPeerValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for bgp_peers")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*BgpPeer)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*BgpPeer, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated bgp_peers")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items bgp_peers")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateCreateSpecType) NetworkInterfaceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemsValidatorFn := func(ctx context.Context, elems []*ves_io_schema.ObjectRefType, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := ves_io_schema.ObjectRefTypeValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for network_interface")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*ves_io_schema.ObjectRefType)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*ves_io_schema.ObjectRefType, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated network_interface")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items network_interface")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateCreateSpecType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*CreateSpecType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *CreateSpecType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["bgp_parameters"]; exists {

		vOpts := append(opts, db.WithValidateField("bgp_parameters"))
		if err := fv(ctx, m.GetBgpParameters(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["bgp_peers"]; exists {
		vOpts := append(opts, db.WithValidateField("bgp_peers"))
		if err := fv(ctx, m.GetBgpPeers(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["network_interface"]; exists {
		vOpts := append(opts, db.WithValidateField("network_interface"))
		if err := fv(ctx, m.GetNetworkInterface(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["where"]; exists {

		vOpts := append(opts, db.WithValidateField("where"))
		if err := fv(ctx, m.GetWhere(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultCreateSpecTypeValidator = func() *ValidateCreateSpecType {
	v := &ValidateCreateSpecType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhWhere := v.WhereValidationRuleHandler
	rulesWhere := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhWhere(rulesWhere)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for CreateSpecType.where: %s", err)
		panic(errMsg)
	}
	v.FldValidators["where"] = vFn

	vrhBgpParameters := v.BgpParametersValidationRuleHandler
	rulesBgpParameters := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhBgpParameters(rulesBgpParameters)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for CreateSpecType.bgp_parameters: %s", err)
		panic(errMsg)
	}
	v.FldValidators["bgp_parameters"] = vFn

	vrhBgpPeers := v.BgpPeersValidationRuleHandler
	rulesBgpPeers := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhBgpPeers(rulesBgpPeers)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for CreateSpecType.bgp_peers: %s", err)
		panic(errMsg)
	}
	v.FldValidators["bgp_peers"] = vFn

	vrhNetworkInterface := v.NetworkInterfaceValidationRuleHandler
	rulesNetworkInterface := map[string]string{
		"ves.io.schema.rules.message.required":   "true",
		"ves.io.schema.rules.repeated.max_items": "8",
		"ves.io.schema.rules.repeated.min_items": "1",
	}
	vFn, err = vrhNetworkInterface(rulesNetworkInterface)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for CreateSpecType.network_interface: %s", err)
		panic(errMsg)
	}
	v.FldValidators["network_interface"] = vFn

	return v
}()

func CreateSpecTypeValidator() db.Validator {
	return DefaultCreateSpecTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *GetSpecType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *GetSpecType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *GetSpecType) DeepCopy() *GetSpecType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &GetSpecType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *GetSpecType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *GetSpecType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return GetSpecTypeValidator().Validate(ctx, m, opts...)
}

func (m *GetSpecType) GetDRefInfo() ([]db.DRefInfo, error) {
	var drInfos []db.DRefInfo
	if fdrInfos, err := m.GetNetworkInterfaceDRefInfo(); err != nil {
		return nil, err
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetWhereDRefInfo(); err != nil {
		return nil, err
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	return drInfos, nil
}

func (m *GetSpecType) GetNetworkInterfaceDRefInfo() ([]db.DRefInfo, error) {
	drInfos := []db.DRefInfo{}
	for i, ref := range m.GetNetworkInterface() {
		if ref == nil {
			return nil, fmt.Errorf("GetSpecType.network_interface[%d] has a nil value", i)
		}
		// resolve kind to type if needed at DBObject.GetDRefInfo()
		drInfos = append(drInfos, db.DRefInfo{
			RefdType:   "network_interface.Object",
			RefdUID:    ref.Uid,
			RefdTenant: ref.Tenant,
			RefdNS:     ref.Namespace,
			RefdName:   ref.Name,
			DRField:    "network_interface",
			Ref:        ref,
		})
	}

	return drInfos, nil
}

// GetNetworkInterfaceDBEntries returns the db.Entry corresponding to the ObjRefType from the default Table
func (m *GetSpecType) GetNetworkInterfaceDBEntries(ctx context.Context, d db.Interface) ([]db.Entry, error) {
	var entries []db.Entry
	refdType, err := d.TypeForEntryKind("", "", "network_interface.Object")
	if err != nil {
		return nil, errors.Wrap(err, "Cannot find type for kind: network_interface")
	}
	for _, ref := range m.GetNetworkInterface() {
		refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
		if err != nil {
			return nil, errors.Wrap(err, "Getting referred entry")
		}
		if refdEnt != nil {
			entries = append(entries, refdEnt)
		}
	}

	return entries, nil
}

// GetDRefInfo for the field's type
func (m *GetSpecType) GetWhereDRefInfo() ([]db.DRefInfo, error) {
	var (
		drInfos, driSet []db.DRefInfo
		err             error
	)
	_ = driSet
	if m.Where == nil {
		return []db.DRefInfo{}, nil
	}

	driSet, err = m.Where.GetDRefInfo()
	if err != nil {
		return nil, err
	}
	for _, dri := range driSet {
		dri.DRField = "where." + dri.DRField
		drInfos = append(drInfos, dri)
	}

	return drInfos, err
}

type ValidateGetSpecType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateGetSpecType) WhereValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	reqdValidatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "MessageValidationRuleHandler for where")
	}
	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		if err := reqdValidatorFn(ctx, val, opts...); err != nil {
			return err
		}

		return nil
	}

	return validatorFn, nil
}

func (v *ValidateGetSpecType) BgpParametersValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	reqdValidatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "MessageValidationRuleHandler for bgp_parameters")
	}
	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		if err := reqdValidatorFn(ctx, val, opts...); err != nil {
			return err
		}

		if err := BgpParametersValidator().Validate(ctx, val, opts...); err != nil {
			return err
		}

		return nil
	}

	return validatorFn, nil
}

func (v *ValidateGetSpecType) BgpPeersValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemsValidatorFn := func(ctx context.Context, elems []*BgpPeer, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := BgpPeerValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for bgp_peers")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*BgpPeer)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*BgpPeer, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated bgp_peers")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items bgp_peers")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateGetSpecType) NetworkInterfaceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemsValidatorFn := func(ctx context.Context, elems []*ves_io_schema.ObjectRefType, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := ves_io_schema.ObjectRefTypeValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for network_interface")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*ves_io_schema.ObjectRefType)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*ves_io_schema.ObjectRefType, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated network_interface")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items network_interface")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateGetSpecType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*GetSpecType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *GetSpecType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["bgp_parameters"]; exists {

		vOpts := append(opts, db.WithValidateField("bgp_parameters"))
		if err := fv(ctx, m.GetBgpParameters(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["bgp_peers"]; exists {
		vOpts := append(opts, db.WithValidateField("bgp_peers"))
		if err := fv(ctx, m.GetBgpPeers(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["network_interface"]; exists {
		vOpts := append(opts, db.WithValidateField("network_interface"))
		if err := fv(ctx, m.GetNetworkInterface(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["where"]; exists {

		vOpts := append(opts, db.WithValidateField("where"))
		if err := fv(ctx, m.GetWhere(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultGetSpecTypeValidator = func() *ValidateGetSpecType {
	v := &ValidateGetSpecType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhWhere := v.WhereValidationRuleHandler
	rulesWhere := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhWhere(rulesWhere)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GetSpecType.where: %s", err)
		panic(errMsg)
	}
	v.FldValidators["where"] = vFn

	vrhBgpParameters := v.BgpParametersValidationRuleHandler
	rulesBgpParameters := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhBgpParameters(rulesBgpParameters)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GetSpecType.bgp_parameters: %s", err)
		panic(errMsg)
	}
	v.FldValidators["bgp_parameters"] = vFn

	vrhBgpPeers := v.BgpPeersValidationRuleHandler
	rulesBgpPeers := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhBgpPeers(rulesBgpPeers)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GetSpecType.bgp_peers: %s", err)
		panic(errMsg)
	}
	v.FldValidators["bgp_peers"] = vFn

	vrhNetworkInterface := v.NetworkInterfaceValidationRuleHandler
	rulesNetworkInterface := map[string]string{
		"ves.io.schema.rules.message.required":   "true",
		"ves.io.schema.rules.repeated.max_items": "8",
		"ves.io.schema.rules.repeated.min_items": "1",
	}
	vFn, err = vrhNetworkInterface(rulesNetworkInterface)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GetSpecType.network_interface: %s", err)
		panic(errMsg)
	}
	v.FldValidators["network_interface"] = vFn

	return v
}()

func GetSpecTypeValidator() db.Validator {
	return DefaultGetSpecTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *GlobalSpecType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *GlobalSpecType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *GlobalSpecType) DeepCopy() *GlobalSpecType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &GlobalSpecType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *GlobalSpecType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *GlobalSpecType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return GlobalSpecTypeValidator().Validate(ctx, m, opts...)
}

func (m *GlobalSpecType) GetDRefInfo() ([]db.DRefInfo, error) {
	var drInfos []db.DRefInfo
	if fdrInfos, err := m.GetNetworkInterfaceDRefInfo(); err != nil {
		return nil, err
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetWhereDRefInfo(); err != nil {
		return nil, err
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	return drInfos, nil
}

func (m *GlobalSpecType) GetNetworkInterfaceDRefInfo() ([]db.DRefInfo, error) {
	drInfos := []db.DRefInfo{}
	for i, ref := range m.GetNetworkInterface() {
		if ref == nil {
			return nil, fmt.Errorf("GlobalSpecType.network_interface[%d] has a nil value", i)
		}
		// resolve kind to type if needed at DBObject.GetDRefInfo()
		drInfos = append(drInfos, db.DRefInfo{
			RefdType:   "network_interface.Object",
			RefdUID:    ref.Uid,
			RefdTenant: ref.Tenant,
			RefdNS:     ref.Namespace,
			RefdName:   ref.Name,
			DRField:    "network_interface",
			Ref:        ref,
		})
	}

	return drInfos, nil
}

// GetNetworkInterfaceDBEntries returns the db.Entry corresponding to the ObjRefType from the default Table
func (m *GlobalSpecType) GetNetworkInterfaceDBEntries(ctx context.Context, d db.Interface) ([]db.Entry, error) {
	var entries []db.Entry
	refdType, err := d.TypeForEntryKind("", "", "network_interface.Object")
	if err != nil {
		return nil, errors.Wrap(err, "Cannot find type for kind: network_interface")
	}
	for _, ref := range m.GetNetworkInterface() {
		refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
		if err != nil {
			return nil, errors.Wrap(err, "Getting referred entry")
		}
		if refdEnt != nil {
			entries = append(entries, refdEnt)
		}
	}

	return entries, nil
}

// GetDRefInfo for the field's type
func (m *GlobalSpecType) GetWhereDRefInfo() ([]db.DRefInfo, error) {
	var (
		drInfos, driSet []db.DRefInfo
		err             error
	)
	_ = driSet
	if m.Where == nil {
		return []db.DRefInfo{}, nil
	}

	driSet, err = m.Where.GetDRefInfo()
	if err != nil {
		return nil, err
	}
	for _, dri := range driSet {
		dri.DRField = "where." + dri.DRField
		drInfos = append(drInfos, dri)
	}

	return drInfos, err
}

type ValidateGlobalSpecType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateGlobalSpecType) WhereValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	reqdValidatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "MessageValidationRuleHandler for where")
	}
	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		if err := reqdValidatorFn(ctx, val, opts...); err != nil {
			return err
		}

		return nil
	}

	return validatorFn, nil
}

func (v *ValidateGlobalSpecType) BgpParametersValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	reqdValidatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "MessageValidationRuleHandler for bgp_parameters")
	}
	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		if err := reqdValidatorFn(ctx, val, opts...); err != nil {
			return err
		}

		if err := BgpParametersValidator().Validate(ctx, val, opts...); err != nil {
			return err
		}

		return nil
	}

	return validatorFn, nil
}

func (v *ValidateGlobalSpecType) BgpPeersValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemsValidatorFn := func(ctx context.Context, elems []*BgpPeer, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := BgpPeerValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for bgp_peers")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*BgpPeer)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*BgpPeer, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated bgp_peers")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items bgp_peers")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateGlobalSpecType) NetworkInterfaceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemsValidatorFn := func(ctx context.Context, elems []*ves_io_schema.ObjectRefType, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := ves_io_schema.ObjectRefTypeValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for network_interface")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*ves_io_schema.ObjectRefType)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*ves_io_schema.ObjectRefType, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated network_interface")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items network_interface")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateGlobalSpecType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*GlobalSpecType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *GlobalSpecType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["bgp_parameters"]; exists {

		vOpts := append(opts, db.WithValidateField("bgp_parameters"))
		if err := fv(ctx, m.GetBgpParameters(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["bgp_peers"]; exists {
		vOpts := append(opts, db.WithValidateField("bgp_peers"))
		if err := fv(ctx, m.GetBgpPeers(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["network_interface"]; exists {
		vOpts := append(opts, db.WithValidateField("network_interface"))
		if err := fv(ctx, m.GetNetworkInterface(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["where"]; exists {

		vOpts := append(opts, db.WithValidateField("where"))
		if err := fv(ctx, m.GetWhere(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultGlobalSpecTypeValidator = func() *ValidateGlobalSpecType {
	v := &ValidateGlobalSpecType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhWhere := v.WhereValidationRuleHandler
	rulesWhere := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhWhere(rulesWhere)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GlobalSpecType.where: %s", err)
		panic(errMsg)
	}
	v.FldValidators["where"] = vFn

	vrhBgpParameters := v.BgpParametersValidationRuleHandler
	rulesBgpParameters := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhBgpParameters(rulesBgpParameters)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GlobalSpecType.bgp_parameters: %s", err)
		panic(errMsg)
	}
	v.FldValidators["bgp_parameters"] = vFn

	vrhBgpPeers := v.BgpPeersValidationRuleHandler
	rulesBgpPeers := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhBgpPeers(rulesBgpPeers)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GlobalSpecType.bgp_peers: %s", err)
		panic(errMsg)
	}
	v.FldValidators["bgp_peers"] = vFn

	vrhNetworkInterface := v.NetworkInterfaceValidationRuleHandler
	rulesNetworkInterface := map[string]string{
		"ves.io.schema.rules.message.required":   "true",
		"ves.io.schema.rules.repeated.max_items": "8",
		"ves.io.schema.rules.repeated.min_items": "1",
	}
	vFn, err = vrhNetworkInterface(rulesNetworkInterface)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GlobalSpecType.network_interface: %s", err)
		panic(errMsg)
	}
	v.FldValidators["network_interface"] = vFn

	return v
}()

func GlobalSpecTypeValidator() db.Validator {
	return DefaultGlobalSpecTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *ReplaceSpecType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *ReplaceSpecType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *ReplaceSpecType) DeepCopy() *ReplaceSpecType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &ReplaceSpecType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *ReplaceSpecType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *ReplaceSpecType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return ReplaceSpecTypeValidator().Validate(ctx, m, opts...)
}

func (m *ReplaceSpecType) GetDRefInfo() ([]db.DRefInfo, error) {
	var drInfos []db.DRefInfo
	if fdrInfos, err := m.GetNetworkInterfaceDRefInfo(); err != nil {
		return nil, err
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetWhereDRefInfo(); err != nil {
		return nil, err
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	return drInfos, nil
}

func (m *ReplaceSpecType) GetNetworkInterfaceDRefInfo() ([]db.DRefInfo, error) {
	drInfos := []db.DRefInfo{}
	for i, ref := range m.GetNetworkInterface() {
		if ref == nil {
			return nil, fmt.Errorf("ReplaceSpecType.network_interface[%d] has a nil value", i)
		}
		// resolve kind to type if needed at DBObject.GetDRefInfo()
		drInfos = append(drInfos, db.DRefInfo{
			RefdType:   "network_interface.Object",
			RefdUID:    ref.Uid,
			RefdTenant: ref.Tenant,
			RefdNS:     ref.Namespace,
			RefdName:   ref.Name,
			DRField:    "network_interface",
			Ref:        ref,
		})
	}

	return drInfos, nil
}

// GetNetworkInterfaceDBEntries returns the db.Entry corresponding to the ObjRefType from the default Table
func (m *ReplaceSpecType) GetNetworkInterfaceDBEntries(ctx context.Context, d db.Interface) ([]db.Entry, error) {
	var entries []db.Entry
	refdType, err := d.TypeForEntryKind("", "", "network_interface.Object")
	if err != nil {
		return nil, errors.Wrap(err, "Cannot find type for kind: network_interface")
	}
	for _, ref := range m.GetNetworkInterface() {
		refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
		if err != nil {
			return nil, errors.Wrap(err, "Getting referred entry")
		}
		if refdEnt != nil {
			entries = append(entries, refdEnt)
		}
	}

	return entries, nil
}

// GetDRefInfo for the field's type
func (m *ReplaceSpecType) GetWhereDRefInfo() ([]db.DRefInfo, error) {
	var (
		drInfos, driSet []db.DRefInfo
		err             error
	)
	_ = driSet
	if m.Where == nil {
		return []db.DRefInfo{}, nil
	}

	driSet, err = m.Where.GetDRefInfo()
	if err != nil {
		return nil, err
	}
	for _, dri := range driSet {
		dri.DRField = "where." + dri.DRField
		drInfos = append(drInfos, dri)
	}

	return drInfos, err
}

type ValidateReplaceSpecType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateReplaceSpecType) WhereValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	reqdValidatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "MessageValidationRuleHandler for where")
	}
	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		if err := reqdValidatorFn(ctx, val, opts...); err != nil {
			return err
		}

		return nil
	}

	return validatorFn, nil
}

func (v *ValidateReplaceSpecType) BgpParametersValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	reqdValidatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "MessageValidationRuleHandler for bgp_parameters")
	}
	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		if err := reqdValidatorFn(ctx, val, opts...); err != nil {
			return err
		}

		if err := BgpParametersValidator().Validate(ctx, val, opts...); err != nil {
			return err
		}

		return nil
	}

	return validatorFn, nil
}

func (v *ValidateReplaceSpecType) BgpPeersValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemsValidatorFn := func(ctx context.Context, elems []*BgpPeer, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := BgpPeerValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for bgp_peers")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*BgpPeer)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*BgpPeer, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated bgp_peers")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items bgp_peers")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateReplaceSpecType) NetworkInterfaceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemsValidatorFn := func(ctx context.Context, elems []*ves_io_schema.ObjectRefType, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := ves_io_schema.ObjectRefTypeValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for network_interface")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*ves_io_schema.ObjectRefType)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*ves_io_schema.ObjectRefType, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated network_interface")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items network_interface")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateReplaceSpecType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*ReplaceSpecType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *ReplaceSpecType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["bgp_parameters"]; exists {

		vOpts := append(opts, db.WithValidateField("bgp_parameters"))
		if err := fv(ctx, m.GetBgpParameters(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["bgp_peers"]; exists {
		vOpts := append(opts, db.WithValidateField("bgp_peers"))
		if err := fv(ctx, m.GetBgpPeers(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["network_interface"]; exists {
		vOpts := append(opts, db.WithValidateField("network_interface"))
		if err := fv(ctx, m.GetNetworkInterface(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["where"]; exists {

		vOpts := append(opts, db.WithValidateField("where"))
		if err := fv(ctx, m.GetWhere(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultReplaceSpecTypeValidator = func() *ValidateReplaceSpecType {
	v := &ValidateReplaceSpecType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhWhere := v.WhereValidationRuleHandler
	rulesWhere := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhWhere(rulesWhere)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ReplaceSpecType.where: %s", err)
		panic(errMsg)
	}
	v.FldValidators["where"] = vFn

	vrhBgpParameters := v.BgpParametersValidationRuleHandler
	rulesBgpParameters := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhBgpParameters(rulesBgpParameters)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ReplaceSpecType.bgp_parameters: %s", err)
		panic(errMsg)
	}
	v.FldValidators["bgp_parameters"] = vFn

	vrhBgpPeers := v.BgpPeersValidationRuleHandler
	rulesBgpPeers := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhBgpPeers(rulesBgpPeers)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ReplaceSpecType.bgp_peers: %s", err)
		panic(errMsg)
	}
	v.FldValidators["bgp_peers"] = vFn

	vrhNetworkInterface := v.NetworkInterfaceValidationRuleHandler
	rulesNetworkInterface := map[string]string{
		"ves.io.schema.rules.message.required":   "true",
		"ves.io.schema.rules.repeated.max_items": "8",
		"ves.io.schema.rules.repeated.min_items": "1",
	}
	vFn, err = vrhNetworkInterface(rulesNetworkInterface)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ReplaceSpecType.network_interface: %s", err)
		panic(errMsg)
	}
	v.FldValidators["network_interface"] = vFn

	return v
}()

func ReplaceSpecTypeValidator() db.Validator {
	return DefaultReplaceSpecTypeValidator
}

func (m *CreateSpecType) FromGlobalSpecType(f *GlobalSpecType) {
	if f == nil {
		return
	}
	m.BgpParameters = f.GetBgpParameters()
	m.BgpPeers = f.GetBgpPeers()
	m.NetworkInterface = f.GetNetworkInterface()
	m.Where = f.GetWhere()
}

func (m *CreateSpecType) ToGlobalSpecType(f *GlobalSpecType) {
	m1 := m.DeepCopy()
	_ = m1
	if f == nil {
		return
	}
	f.BgpParameters = m1.BgpParameters
	f.BgpPeers = m1.BgpPeers
	f.NetworkInterface = m1.NetworkInterface
	f.Where = m1.Where
}

func (m *GetSpecType) FromGlobalSpecType(f *GlobalSpecType) {
	if f == nil {
		return
	}
	m.BgpParameters = f.GetBgpParameters()
	m.BgpPeers = f.GetBgpPeers()
	m.NetworkInterface = f.GetNetworkInterface()
	m.Where = f.GetWhere()
}

func (m *GetSpecType) ToGlobalSpecType(f *GlobalSpecType) {
	m1 := m.DeepCopy()
	_ = m1
	if f == nil {
		return
	}
	f.BgpParameters = m1.BgpParameters
	f.BgpPeers = m1.BgpPeers
	f.NetworkInterface = m1.NetworkInterface
	f.Where = m1.Where
}

func (m *ReplaceSpecType) FromGlobalSpecType(f *GlobalSpecType) {
	if f == nil {
		return
	}
	m.BgpParameters = f.GetBgpParameters()
	m.BgpPeers = f.GetBgpPeers()
	m.NetworkInterface = f.GetNetworkInterface()
	m.Where = f.GetWhere()
}

func (m *ReplaceSpecType) ToGlobalSpecType(f *GlobalSpecType) {
	m1 := m.DeepCopy()
	_ = m1
	if f == nil {
		return
	}
	f.BgpParameters = m1.BgpParameters
	f.BgpPeers = m1.BgpPeers
	f.NetworkInterface = m1.NetworkInterface
	f.Where = m1.Where
}
