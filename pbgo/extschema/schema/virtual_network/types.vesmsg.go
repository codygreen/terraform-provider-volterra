//
// Copyright (c) 2018 Volterra, Inc. All rights reserved.
// Code generated by ves-gen-schema-go. DO NOT EDIT.
//
package virtual_network

import (
	"context"
	"fmt"
	"strings"

	"github.com/gogo/protobuf/proto"

	"gopkg.volterra.us/stdlib/codec"
	"gopkg.volterra.us/stdlib/db"
	"gopkg.volterra.us/stdlib/errors"

	ves_io_schema "gopkg.volterra.us/terraform-provider-volterra/pbgo/extschema/schema"
	ves_io_schema_views "gopkg.volterra.us/terraform-provider-volterra/pbgo/extschema/schema/views"
)

var (
	// dummy imports in case file has no message with Refs
	_ db.Interface
	_ = errors.Wrap
	_ = strings.Split
)

// augmented methods on protoc/std generated struct

func (m *ActivePBRPoliciesType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *ActivePBRPoliciesType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *ActivePBRPoliciesType) DeepCopy() *ActivePBRPoliciesType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &ActivePBRPoliciesType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *ActivePBRPoliciesType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *ActivePBRPoliciesType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return ActivePBRPoliciesTypeValidator().Validate(ctx, m, opts...)
}

func (m *ActivePBRPoliciesType) GetDRefInfo() ([]db.DRefInfo, error) {
	var drInfos []db.DRefInfo
	if fdrInfos, err := m.GetForwardProxyPbrPoliciesDRefInfo(); err != nil {
		return nil, err
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetNetworkPbrPoliciesDRefInfo(); err != nil {
		return nil, err
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	return drInfos, nil
}

func (m *ActivePBRPoliciesType) GetForwardProxyPbrPoliciesDRefInfo() ([]db.DRefInfo, error) {
	drInfos := []db.DRefInfo{}
	for i, vref := range m.GetForwardProxyPbrPolicies() {
		if vref == nil {
			return nil, fmt.Errorf("ActivePBRPoliciesType.forward_proxy_pbr_policies[%d] has a nil value", i)
		}
		vdRef := db.NewDirectRefForView(vref)
		vdRef.SetKind("policy_based_routing.Object")
		// resolve kind to type if needed at DBObject.GetDRefInfo()
		drInfos = append(drInfos, db.DRefInfo{
			RefdType:   "policy_based_routing.Object",
			RefdTenant: vref.Tenant,
			RefdNS:     vref.Namespace,
			RefdName:   vref.Name,
			DRField:    "forward_proxy_pbr_policies",
			Ref:        vdRef,
		})
	}

	return drInfos, nil
}

// GetForwardProxyPbrPoliciesDBEntries returns the db.Entry corresponding to the ObjRefType from the default Table
func (m *ActivePBRPoliciesType) GetForwardProxyPbrPoliciesDBEntries(ctx context.Context, d db.Interface) ([]db.Entry, error) {
	var entries []db.Entry
	refdType, err := d.TypeForEntryKind("", "", "policy_based_routing.Object")
	if err != nil {
		return nil, errors.Wrap(err, "Cannot find type for kind: policy_based_routing")
	}
	for i, vref := range m.GetForwardProxyPbrPolicies() {
		if vref == nil {
			return nil, fmt.Errorf("ActivePBRPoliciesType.forward_proxy_pbr_policies[%d] has a nil value", i)
		}
		ref := &ves_io_schema.ObjectRefType{
			Kind:      "policy_based_routing.Object",
			Tenant:    vref.Tenant,
			Namespace: vref.Namespace,
			Name:      vref.Name,
		}
		refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
		if err != nil {
			return nil, errors.Wrap(err, "Getting referred entry")
		}
		if refdEnt != nil {
			entries = append(entries, refdEnt)
		}
	}

	return entries, nil
}

func (m *ActivePBRPoliciesType) GetNetworkPbrPoliciesDRefInfo() ([]db.DRefInfo, error) {
	drInfos := []db.DRefInfo{}
	for i, vref := range m.GetNetworkPbrPolicies() {
		if vref == nil {
			return nil, fmt.Errorf("ActivePBRPoliciesType.network_pbr_policies[%d] has a nil value", i)
		}
		vdRef := db.NewDirectRefForView(vref)
		vdRef.SetKind("policy_based_routing.Object")
		// resolve kind to type if needed at DBObject.GetDRefInfo()
		drInfos = append(drInfos, db.DRefInfo{
			RefdType:   "policy_based_routing.Object",
			RefdTenant: vref.Tenant,
			RefdNS:     vref.Namespace,
			RefdName:   vref.Name,
			DRField:    "network_pbr_policies",
			Ref:        vdRef,
		})
	}

	return drInfos, nil
}

// GetNetworkPbrPoliciesDBEntries returns the db.Entry corresponding to the ObjRefType from the default Table
func (m *ActivePBRPoliciesType) GetNetworkPbrPoliciesDBEntries(ctx context.Context, d db.Interface) ([]db.Entry, error) {
	var entries []db.Entry
	refdType, err := d.TypeForEntryKind("", "", "policy_based_routing.Object")
	if err != nil {
		return nil, errors.Wrap(err, "Cannot find type for kind: policy_based_routing")
	}
	for i, vref := range m.GetNetworkPbrPolicies() {
		if vref == nil {
			return nil, fmt.Errorf("ActivePBRPoliciesType.network_pbr_policies[%d] has a nil value", i)
		}
		ref := &ves_io_schema.ObjectRefType{
			Kind:      "policy_based_routing.Object",
			Tenant:    vref.Tenant,
			Namespace: vref.Namespace,
			Name:      vref.Name,
		}
		refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
		if err != nil {
			return nil, errors.Wrap(err, "Getting referred entry")
		}
		if refdEnt != nil {
			entries = append(entries, refdEnt)
		}
	}

	return entries, nil
}

type ValidateActivePBRPoliciesType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateActivePBRPoliciesType) ForwardProxyPbrPoliciesValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemsValidatorFn := func(ctx context.Context, elems []*ves_io_schema_views.ObjectRefType, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := ves_io_schema_views.ObjectRefTypeValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for forward_proxy_pbr_policies")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*ves_io_schema_views.ObjectRefType)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*ves_io_schema_views.ObjectRefType, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated forward_proxy_pbr_policies")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items forward_proxy_pbr_policies")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateActivePBRPoliciesType) NetworkPbrPoliciesValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemsValidatorFn := func(ctx context.Context, elems []*ves_io_schema_views.ObjectRefType, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := ves_io_schema_views.ObjectRefTypeValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for network_pbr_policies")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*ves_io_schema_views.ObjectRefType)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*ves_io_schema_views.ObjectRefType, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated network_pbr_policies")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items network_pbr_policies")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateActivePBRPoliciesType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*ActivePBRPoliciesType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *ActivePBRPoliciesType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["forward_proxy_pbr_policies"]; exists {
		vOpts := append(opts, db.WithValidateField("forward_proxy_pbr_policies"))
		if err := fv(ctx, m.GetForwardProxyPbrPolicies(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["network_pbr_policies"]; exists {
		vOpts := append(opts, db.WithValidateField("network_pbr_policies"))
		if err := fv(ctx, m.GetNetworkPbrPolicies(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultActivePBRPoliciesTypeValidator = func() *ValidateActivePBRPoliciesType {
	v := &ValidateActivePBRPoliciesType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhForwardProxyPbrPolicies := v.ForwardProxyPbrPoliciesValidationRuleHandler
	rulesForwardProxyPbrPolicies := map[string]string{
		"ves.io.schema.rules.repeated.max_items": "32",
	}
	vFn, err = vrhForwardProxyPbrPolicies(rulesForwardProxyPbrPolicies)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ActivePBRPoliciesType.forward_proxy_pbr_policies: %s", err)
		panic(errMsg)
	}
	v.FldValidators["forward_proxy_pbr_policies"] = vFn

	vrhNetworkPbrPolicies := v.NetworkPbrPoliciesValidationRuleHandler
	rulesNetworkPbrPolicies := map[string]string{
		"ves.io.schema.rules.repeated.max_items": "32",
	}
	vFn, err = vrhNetworkPbrPolicies(rulesNetworkPbrPolicies)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ActivePBRPoliciesType.network_pbr_policies: %s", err)
		panic(errMsg)
	}
	v.FldValidators["network_pbr_policies"] = vFn

	return v
}()

func ActivePBRPoliciesTypeValidator() db.Validator {
	return DefaultActivePBRPoliciesTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *CreateSpecType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *CreateSpecType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *CreateSpecType) DeepCopy() *CreateSpecType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &CreateSpecType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *CreateSpecType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *CreateSpecType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return CreateSpecTypeValidator().Validate(ctx, m, opts...)
}

func (m *CreateSpecType) GetDRefInfo() ([]db.DRefInfo, error) {
	var drInfos []db.DRefInfo
	if fdrInfos, err := m.GetStaticRoutesDRefInfo(); err != nil {
		return nil, err
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	return drInfos, nil
}

// GetDRefInfo for the field's type
func (m *CreateSpecType) GetStaticRoutesDRefInfo() ([]db.DRefInfo, error) {
	var (
		drInfos, driSet []db.DRefInfo
		err             error
	)
	_ = driSet
	if m.StaticRoutes == nil {
		return []db.DRefInfo{}, nil
	}

	for idx, e := range m.StaticRoutes {
		driSet, err := e.GetDRefInfo()
		if err != nil {
			return nil, err
		}
		for _, dri := range driSet {
			dri.DRField = fmt.Sprintf("static_routes[%v].%s", idx, dri.DRField)
			drInfos = append(drInfos, dri)
		}
	}

	return drInfos, err
}

type ValidateCreateSpecType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateCreateSpecType) NetworkChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for network_choice")
	}
	return validatorFn, nil
}

func (v *ValidateCreateSpecType) NetworkChoiceLegacyTypeValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	conv_LegacyType := func(v interface{}) int32 {
		i := v.(ves_io_schema.VirtualNetworkType)
		return int32(i)
	}
	// ves_io_schema.VirtualNetworkType_name is generated in .pb.go
	oValidatorFn_LegacyType, err := db.NewEnumValidationRuleHandler(rules, ves_io_schema.VirtualNetworkType_name, conv_LegacyType)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for oneof sub-field legacy_type")
	}
	return oValidatorFn_LegacyType, nil
}

func (v *ValidateCreateSpecType) StaticRoutesValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemsValidatorFn := func(ctx context.Context, elems []*StaticRouteViewType, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := StaticRouteViewTypeValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for static_routes")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*StaticRouteViewType)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*StaticRouteViewType, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated static_routes")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items static_routes")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateCreateSpecType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*CreateSpecType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *CreateSpecType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["network_choice"]; exists {
		val := m.GetNetworkChoice()
		vOpts := append(opts,
			db.WithValidateField("network_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetNetworkChoice().(type) {
	case *CreateSpecType_GlobalNetwork:
		if fv, exists := v.FldValidators["network_choice.global_network"]; exists {
			val := m.GetNetworkChoice().(*CreateSpecType_GlobalNetwork).GlobalNetwork
			vOpts := append(opts,
				db.WithValidateField("network_choice"),
				db.WithValidateField("global_network"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *CreateSpecType_SiteLocalNetwork:
		if fv, exists := v.FldValidators["network_choice.site_local_network"]; exists {
			val := m.GetNetworkChoice().(*CreateSpecType_SiteLocalNetwork).SiteLocalNetwork
			vOpts := append(opts,
				db.WithValidateField("network_choice"),
				db.WithValidateField("site_local_network"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *CreateSpecType_SiteLocalInsideNetwork:
		if fv, exists := v.FldValidators["network_choice.site_local_inside_network"]; exists {
			val := m.GetNetworkChoice().(*CreateSpecType_SiteLocalInsideNetwork).SiteLocalInsideNetwork
			vOpts := append(opts,
				db.WithValidateField("network_choice"),
				db.WithValidateField("site_local_inside_network"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *CreateSpecType_LegacyType:
		if fv, exists := v.FldValidators["network_choice.legacy_type"]; exists {
			val := m.GetNetworkChoice().(*CreateSpecType_LegacyType).LegacyType
			vOpts := append(opts,
				db.WithValidateField("network_choice"),
				db.WithValidateField("legacy_type"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["static_routes"]; exists {
		vOpts := append(opts, db.WithValidateField("static_routes"))
		if err := fv(ctx, m.GetStaticRoutes(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultCreateSpecTypeValidator = func() *ValidateCreateSpecType {
	v := &ValidateCreateSpecType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhNetworkChoice := v.NetworkChoiceValidationRuleHandler
	rulesNetworkChoice := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhNetworkChoice(rulesNetworkChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for CreateSpecType.network_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["network_choice"] = vFn

	vrhNetworkChoiceLegacyType := v.NetworkChoiceLegacyTypeValidationRuleHandler
	rulesNetworkChoiceLegacyType := map[string]string{
		"ves.io.schema.rules.enum.in": "[0,1,2,3,4,7]",
	}
	vFnMap["network_choice.legacy_type"], err = vrhNetworkChoiceLegacyType(rulesNetworkChoiceLegacyType)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for oneof field CreateSpecType.network_choice_legacy_type: %s", err)
		panic(errMsg)
	}

	v.FldValidators["network_choice.legacy_type"] = vFnMap["network_choice.legacy_type"]

	vrhStaticRoutes := v.StaticRoutesValidationRuleHandler
	rulesStaticRoutes := map[string]string{
		"ves.io.schema.rules.repeated.max_items": "16",
		"ves.io.schema.rules.repeated.unique":    "true",
	}
	vFn, err = vrhStaticRoutes(rulesStaticRoutes)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for CreateSpecType.static_routes: %s", err)
		panic(errMsg)
	}
	v.FldValidators["static_routes"] = vFn

	return v
}()

func CreateSpecTypeValidator() db.Validator {
	return DefaultCreateSpecTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *GetSpecType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *GetSpecType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *GetSpecType) DeepCopy() *GetSpecType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &GetSpecType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *GetSpecType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *GetSpecType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return GetSpecTypeValidator().Validate(ctx, m, opts...)
}

func (m *GetSpecType) GetDRefInfo() ([]db.DRefInfo, error) {
	var drInfos []db.DRefInfo
	if fdrInfos, err := m.GetStaticRoutesDRefInfo(); err != nil {
		return nil, err
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	return drInfos, nil
}

// GetDRefInfo for the field's type
func (m *GetSpecType) GetStaticRoutesDRefInfo() ([]db.DRefInfo, error) {
	var (
		drInfos, driSet []db.DRefInfo
		err             error
	)
	_ = driSet
	if m.StaticRoutes == nil {
		return []db.DRefInfo{}, nil
	}

	for idx, e := range m.StaticRoutes {
		driSet, err := e.GetDRefInfo()
		if err != nil {
			return nil, err
		}
		for _, dri := range driSet {
			dri.DRField = fmt.Sprintf("static_routes[%v].%s", idx, dri.DRField)
			drInfos = append(drInfos, dri)
		}
	}

	return drInfos, err
}

type ValidateGetSpecType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateGetSpecType) NetworkChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for network_choice")
	}
	return validatorFn, nil
}

func (v *ValidateGetSpecType) NetworkChoiceLegacyTypeValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	conv_LegacyType := func(v interface{}) int32 {
		i := v.(ves_io_schema.VirtualNetworkType)
		return int32(i)
	}
	// ves_io_schema.VirtualNetworkType_name is generated in .pb.go
	oValidatorFn_LegacyType, err := db.NewEnumValidationRuleHandler(rules, ves_io_schema.VirtualNetworkType_name, conv_LegacyType)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for oneof sub-field legacy_type")
	}
	return oValidatorFn_LegacyType, nil
}

func (v *ValidateGetSpecType) StaticRoutesValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemsValidatorFn := func(ctx context.Context, elems []*StaticRouteViewType, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := StaticRouteViewTypeValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for static_routes")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*StaticRouteViewType)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*StaticRouteViewType, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated static_routes")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items static_routes")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateGetSpecType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*GetSpecType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *GetSpecType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["network_choice"]; exists {
		val := m.GetNetworkChoice()
		vOpts := append(opts,
			db.WithValidateField("network_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetNetworkChoice().(type) {
	case *GetSpecType_GlobalNetwork:
		if fv, exists := v.FldValidators["network_choice.global_network"]; exists {
			val := m.GetNetworkChoice().(*GetSpecType_GlobalNetwork).GlobalNetwork
			vOpts := append(opts,
				db.WithValidateField("network_choice"),
				db.WithValidateField("global_network"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GetSpecType_SiteLocalNetwork:
		if fv, exists := v.FldValidators["network_choice.site_local_network"]; exists {
			val := m.GetNetworkChoice().(*GetSpecType_SiteLocalNetwork).SiteLocalNetwork
			vOpts := append(opts,
				db.WithValidateField("network_choice"),
				db.WithValidateField("site_local_network"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GetSpecType_SiteLocalInsideNetwork:
		if fv, exists := v.FldValidators["network_choice.site_local_inside_network"]; exists {
			val := m.GetNetworkChoice().(*GetSpecType_SiteLocalInsideNetwork).SiteLocalInsideNetwork
			vOpts := append(opts,
				db.WithValidateField("network_choice"),
				db.WithValidateField("site_local_inside_network"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GetSpecType_LegacyType:
		if fv, exists := v.FldValidators["network_choice.legacy_type"]; exists {
			val := m.GetNetworkChoice().(*GetSpecType_LegacyType).LegacyType
			vOpts := append(opts,
				db.WithValidateField("network_choice"),
				db.WithValidateField("legacy_type"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["static_routes"]; exists {
		vOpts := append(opts, db.WithValidateField("static_routes"))
		if err := fv(ctx, m.GetStaticRoutes(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultGetSpecTypeValidator = func() *ValidateGetSpecType {
	v := &ValidateGetSpecType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhNetworkChoice := v.NetworkChoiceValidationRuleHandler
	rulesNetworkChoice := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhNetworkChoice(rulesNetworkChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GetSpecType.network_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["network_choice"] = vFn

	vrhNetworkChoiceLegacyType := v.NetworkChoiceLegacyTypeValidationRuleHandler
	rulesNetworkChoiceLegacyType := map[string]string{
		"ves.io.schema.rules.enum.in": "[0,1,2,3,4,7]",
	}
	vFnMap["network_choice.legacy_type"], err = vrhNetworkChoiceLegacyType(rulesNetworkChoiceLegacyType)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for oneof field GetSpecType.network_choice_legacy_type: %s", err)
		panic(errMsg)
	}

	v.FldValidators["network_choice.legacy_type"] = vFnMap["network_choice.legacy_type"]

	vrhStaticRoutes := v.StaticRoutesValidationRuleHandler
	rulesStaticRoutes := map[string]string{
		"ves.io.schema.rules.repeated.max_items": "16",
		"ves.io.schema.rules.repeated.unique":    "true",
	}
	vFn, err = vrhStaticRoutes(rulesStaticRoutes)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GetSpecType.static_routes: %s", err)
		panic(errMsg)
	}
	v.FldValidators["static_routes"] = vFn

	return v
}()

func GetSpecTypeValidator() db.Validator {
	return DefaultGetSpecTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *GlobalSpecType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *GlobalSpecType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *GlobalSpecType) DeepCopy() *GlobalSpecType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &GlobalSpecType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *GlobalSpecType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *GlobalSpecType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return GlobalSpecTypeValidator().Validate(ctx, m, opts...)
}

func (m *GlobalSpecType) GetDRefInfo() ([]db.DRefInfo, error) {
	var drInfos []db.DRefInfo
	if fdrInfos, err := m.GetStaticRoutesDRefInfo(); err != nil {
		return nil, err
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	return drInfos, nil
}

// GetDRefInfo for the field's type
func (m *GlobalSpecType) GetStaticRoutesDRefInfo() ([]db.DRefInfo, error) {
	var (
		drInfos, driSet []db.DRefInfo
		err             error
	)
	_ = driSet
	if m.StaticRoutes == nil {
		return []db.DRefInfo{}, nil
	}

	for idx, e := range m.StaticRoutes {
		driSet, err := e.GetDRefInfo()
		if err != nil {
			return nil, err
		}
		for _, dri := range driSet {
			dri.DRField = fmt.Sprintf("static_routes[%v].%s", idx, dri.DRField)
			drInfos = append(drInfos, dri)
		}
	}

	return drInfos, err
}

type ValidateGlobalSpecType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateGlobalSpecType) NetworkChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for network_choice")
	}
	return validatorFn, nil
}

func (v *ValidateGlobalSpecType) NetworkChoiceLegacyTypeValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	conv_LegacyType := func(v interface{}) int32 {
		i := v.(ves_io_schema.VirtualNetworkType)
		return int32(i)
	}
	// ves_io_schema.VirtualNetworkType_name is generated in .pb.go
	oValidatorFn_LegacyType, err := db.NewEnumValidationRuleHandler(rules, ves_io_schema.VirtualNetworkType_name, conv_LegacyType)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for oneof sub-field legacy_type")
	}
	return oValidatorFn_LegacyType, nil
}

func (v *ValidateGlobalSpecType) SubnetsValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemsValidatorFn := func(ctx context.Context, elems []*ves_io_schema.IpSubnetType, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := ves_io_schema.IpSubnetTypeValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for subnets")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*ves_io_schema.IpSubnetType)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*ves_io_schema.IpSubnetType, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated subnets")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items subnets")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateGlobalSpecType) TypeValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	var conv db.EnumConvFn
	conv = func(v interface{}) int32 {
		i := v.(ves_io_schema.VirtualNetworkType)
		return int32(i)
	}
	// ves_io_schema.VirtualNetworkType_name is generated in .pb.go
	validatorFn, err := db.NewEnumValidationRuleHandler(rules, ves_io_schema.VirtualNetworkType_name, conv)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for type")
	}

	return validatorFn, nil
}

func (v *ValidateGlobalSpecType) StaticRoutesValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemsValidatorFn := func(ctx context.Context, elems []*ves_io_schema.StaticRouteType, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := ves_io_schema.StaticRouteTypeValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for static_routes")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*ves_io_schema.StaticRouteType)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*ves_io_schema.StaticRouteType, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated static_routes")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items static_routes")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateGlobalSpecType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*GlobalSpecType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *GlobalSpecType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["network_choice"]; exists {
		val := m.GetNetworkChoice()
		vOpts := append(opts,
			db.WithValidateField("network_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetNetworkChoice().(type) {
	case *GlobalSpecType_GlobalNetwork:
		if fv, exists := v.FldValidators["network_choice.global_network"]; exists {
			val := m.GetNetworkChoice().(*GlobalSpecType_GlobalNetwork).GlobalNetwork
			vOpts := append(opts,
				db.WithValidateField("network_choice"),
				db.WithValidateField("global_network"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GlobalSpecType_SiteLocalNetwork:
		if fv, exists := v.FldValidators["network_choice.site_local_network"]; exists {
			val := m.GetNetworkChoice().(*GlobalSpecType_SiteLocalNetwork).SiteLocalNetwork
			vOpts := append(opts,
				db.WithValidateField("network_choice"),
				db.WithValidateField("site_local_network"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GlobalSpecType_SiteLocalInsideNetwork:
		if fv, exists := v.FldValidators["network_choice.site_local_inside_network"]; exists {
			val := m.GetNetworkChoice().(*GlobalSpecType_SiteLocalInsideNetwork).SiteLocalInsideNetwork
			vOpts := append(opts,
				db.WithValidateField("network_choice"),
				db.WithValidateField("site_local_inside_network"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GlobalSpecType_InsideNetwork:
		if fv, exists := v.FldValidators["network_choice.inside_network"]; exists {
			val := m.GetNetworkChoice().(*GlobalSpecType_InsideNetwork).InsideNetwork
			vOpts := append(opts,
				db.WithValidateField("network_choice"),
				db.WithValidateField("inside_network"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GlobalSpecType_LegacyType:
		if fv, exists := v.FldValidators["network_choice.legacy_type"]; exists {
			val := m.GetNetworkChoice().(*GlobalSpecType_LegacyType).LegacyType
			vOpts := append(opts,
				db.WithValidateField("network_choice"),
				db.WithValidateField("legacy_type"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["static_routes"]; exists {
		vOpts := append(opts, db.WithValidateField("static_routes"))
		if err := fv(ctx, m.GetStaticRoutes(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["subnets"]; exists {
		vOpts := append(opts, db.WithValidateField("subnets"))
		if err := fv(ctx, m.GetSubnets(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["type"]; exists {

		vOpts := append(opts, db.WithValidateField("type"))
		if err := fv(ctx, m.GetType(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultGlobalSpecTypeValidator = func() *ValidateGlobalSpecType {
	v := &ValidateGlobalSpecType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhNetworkChoice := v.NetworkChoiceValidationRuleHandler
	rulesNetworkChoice := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhNetworkChoice(rulesNetworkChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GlobalSpecType.network_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["network_choice"] = vFn

	vrhNetworkChoiceLegacyType := v.NetworkChoiceLegacyTypeValidationRuleHandler
	rulesNetworkChoiceLegacyType := map[string]string{
		"ves.io.schema.rules.enum.in": "[0,1,2,3,4,7]",
	}
	vFnMap["network_choice.legacy_type"], err = vrhNetworkChoiceLegacyType(rulesNetworkChoiceLegacyType)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for oneof field GlobalSpecType.network_choice_legacy_type: %s", err)
		panic(errMsg)
	}

	v.FldValidators["network_choice.legacy_type"] = vFnMap["network_choice.legacy_type"]

	vrhSubnets := v.SubnetsValidationRuleHandler
	rulesSubnets := map[string]string{
		"ves.io.schema.rules.repeated.max_items": "128",
	}
	vFn, err = vrhSubnets(rulesSubnets)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GlobalSpecType.subnets: %s", err)
		panic(errMsg)
	}
	v.FldValidators["subnets"] = vFn

	vrhType := v.TypeValidationRuleHandler
	rulesType := map[string]string{
		"ves.io.schema.rules.enum.in":          "[0,1,2,3,4,7]",
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhType(rulesType)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GlobalSpecType.type: %s", err)
		panic(errMsg)
	}
	v.FldValidators["type"] = vFn

	vrhStaticRoutes := v.StaticRoutesValidationRuleHandler
	rulesStaticRoutes := map[string]string{
		"ves.io.schema.rules.repeated.max_items": "16",
		"ves.io.schema.rules.repeated.unique":    "true",
	}
	vFn, err = vrhStaticRoutes(rulesStaticRoutes)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GlobalSpecType.static_routes: %s", err)
		panic(errMsg)
	}
	v.FldValidators["static_routes"] = vFn

	return v
}()

func GlobalSpecTypeValidator() db.Validator {
	return DefaultGlobalSpecTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *NextHopInterfaceList) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *NextHopInterfaceList) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *NextHopInterfaceList) DeepCopy() *NextHopInterfaceList {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &NextHopInterfaceList{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *NextHopInterfaceList) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *NextHopInterfaceList) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return NextHopInterfaceListValidator().Validate(ctx, m, opts...)
}

func (m *NextHopInterfaceList) GetDRefInfo() ([]db.DRefInfo, error) {
	var drInfos []db.DRefInfo
	if fdrInfos, err := m.GetInterfacesDRefInfo(); err != nil {
		return nil, err
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	return drInfos, nil
}

func (m *NextHopInterfaceList) GetInterfacesDRefInfo() ([]db.DRefInfo, error) {
	drInfos := []db.DRefInfo{}
	for i, vref := range m.GetInterfaces() {
		if vref == nil {
			return nil, fmt.Errorf("NextHopInterfaceList.interfaces[%d] has a nil value", i)
		}
		vdRef := db.NewDirectRefForView(vref)
		vdRef.SetKind("network_interface.Object")
		// resolve kind to type if needed at DBObject.GetDRefInfo()
		drInfos = append(drInfos, db.DRefInfo{
			RefdType:   "network_interface.Object",
			RefdTenant: vref.Tenant,
			RefdNS:     vref.Namespace,
			RefdName:   vref.Name,
			DRField:    "interfaces",
			Ref:        vdRef,
		})
	}

	return drInfos, nil
}

// GetInterfacesDBEntries returns the db.Entry corresponding to the ObjRefType from the default Table
func (m *NextHopInterfaceList) GetInterfacesDBEntries(ctx context.Context, d db.Interface) ([]db.Entry, error) {
	var entries []db.Entry
	refdType, err := d.TypeForEntryKind("", "", "network_interface.Object")
	if err != nil {
		return nil, errors.Wrap(err, "Cannot find type for kind: network_interface")
	}
	for i, vref := range m.GetInterfaces() {
		if vref == nil {
			return nil, fmt.Errorf("NextHopInterfaceList.interfaces[%d] has a nil value", i)
		}
		ref := &ves_io_schema.ObjectRefType{
			Kind:      "network_interface.Object",
			Tenant:    vref.Tenant,
			Namespace: vref.Namespace,
			Name:      vref.Name,
		}
		refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
		if err != nil {
			return nil, errors.Wrap(err, "Getting referred entry")
		}
		if refdEnt != nil {
			entries = append(entries, refdEnt)
		}
	}

	return entries, nil
}

type ValidateNextHopInterfaceList struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateNextHopInterfaceList) InterfacesValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemsValidatorFn := func(ctx context.Context, elems []*ves_io_schema_views.ObjectRefType, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := ves_io_schema_views.ObjectRefTypeValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for interfaces")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*ves_io_schema_views.ObjectRefType)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*ves_io_schema_views.ObjectRefType, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated interfaces")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items interfaces")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateNextHopInterfaceList) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*NextHopInterfaceList)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *NextHopInterfaceList got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["interfaces"]; exists {
		vOpts := append(opts, db.WithValidateField("interfaces"))
		if err := fv(ctx, m.GetInterfaces(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultNextHopInterfaceListValidator = func() *ValidateNextHopInterfaceList {
	v := &ValidateNextHopInterfaceList{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhInterfaces := v.InterfacesValidationRuleHandler
	rulesInterfaces := map[string]string{
		"ves.io.schema.rules.repeated.max_items": "1",
		"ves.io.schema.rules.repeated.min_items": "1",
		"ves.io.schema.rules.repeated.unique":    "true",
	}
	vFn, err = vrhInterfaces(rulesInterfaces)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for NextHopInterfaceList.interfaces: %s", err)
		panic(errMsg)
	}
	v.FldValidators["interfaces"] = vFn

	return v
}()

func NextHopInterfaceListValidator() db.Validator {
	return DefaultNextHopInterfaceListValidator
}

// augmented methods on protoc/std generated struct

func (m *ReplaceSpecType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *ReplaceSpecType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *ReplaceSpecType) DeepCopy() *ReplaceSpecType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &ReplaceSpecType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *ReplaceSpecType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *ReplaceSpecType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return ReplaceSpecTypeValidator().Validate(ctx, m, opts...)
}

func (m *ReplaceSpecType) GetDRefInfo() ([]db.DRefInfo, error) {
	var drInfos []db.DRefInfo
	if fdrInfos, err := m.GetStaticRoutesDRefInfo(); err != nil {
		return nil, err
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	return drInfos, nil
}

// GetDRefInfo for the field's type
func (m *ReplaceSpecType) GetStaticRoutesDRefInfo() ([]db.DRefInfo, error) {
	var (
		drInfos, driSet []db.DRefInfo
		err             error
	)
	_ = driSet
	if m.StaticRoutes == nil {
		return []db.DRefInfo{}, nil
	}

	for idx, e := range m.StaticRoutes {
		driSet, err := e.GetDRefInfo()
		if err != nil {
			return nil, err
		}
		for _, dri := range driSet {
			dri.DRField = fmt.Sprintf("static_routes[%v].%s", idx, dri.DRField)
			drInfos = append(drInfos, dri)
		}
	}

	return drInfos, err
}

type ValidateReplaceSpecType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateReplaceSpecType) NetworkChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for network_choice")
	}
	return validatorFn, nil
}

func (v *ValidateReplaceSpecType) NetworkChoiceLegacyTypeValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	conv_LegacyType := func(v interface{}) int32 {
		i := v.(ves_io_schema.VirtualNetworkType)
		return int32(i)
	}
	// ves_io_schema.VirtualNetworkType_name is generated in .pb.go
	oValidatorFn_LegacyType, err := db.NewEnumValidationRuleHandler(rules, ves_io_schema.VirtualNetworkType_name, conv_LegacyType)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for oneof sub-field legacy_type")
	}
	return oValidatorFn_LegacyType, nil
}

func (v *ValidateReplaceSpecType) StaticRoutesValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemsValidatorFn := func(ctx context.Context, elems []*StaticRouteViewType, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := StaticRouteViewTypeValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for static_routes")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*StaticRouteViewType)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*StaticRouteViewType, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated static_routes")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items static_routes")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateReplaceSpecType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*ReplaceSpecType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *ReplaceSpecType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["network_choice"]; exists {
		val := m.GetNetworkChoice()
		vOpts := append(opts,
			db.WithValidateField("network_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetNetworkChoice().(type) {
	case *ReplaceSpecType_GlobalNetwork:
		if fv, exists := v.FldValidators["network_choice.global_network"]; exists {
			val := m.GetNetworkChoice().(*ReplaceSpecType_GlobalNetwork).GlobalNetwork
			vOpts := append(opts,
				db.WithValidateField("network_choice"),
				db.WithValidateField("global_network"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ReplaceSpecType_SiteLocalNetwork:
		if fv, exists := v.FldValidators["network_choice.site_local_network"]; exists {
			val := m.GetNetworkChoice().(*ReplaceSpecType_SiteLocalNetwork).SiteLocalNetwork
			vOpts := append(opts,
				db.WithValidateField("network_choice"),
				db.WithValidateField("site_local_network"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ReplaceSpecType_SiteLocalInsideNetwork:
		if fv, exists := v.FldValidators["network_choice.site_local_inside_network"]; exists {
			val := m.GetNetworkChoice().(*ReplaceSpecType_SiteLocalInsideNetwork).SiteLocalInsideNetwork
			vOpts := append(opts,
				db.WithValidateField("network_choice"),
				db.WithValidateField("site_local_inside_network"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ReplaceSpecType_LegacyType:
		if fv, exists := v.FldValidators["network_choice.legacy_type"]; exists {
			val := m.GetNetworkChoice().(*ReplaceSpecType_LegacyType).LegacyType
			vOpts := append(opts,
				db.WithValidateField("network_choice"),
				db.WithValidateField("legacy_type"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["static_routes"]; exists {
		vOpts := append(opts, db.WithValidateField("static_routes"))
		if err := fv(ctx, m.GetStaticRoutes(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultReplaceSpecTypeValidator = func() *ValidateReplaceSpecType {
	v := &ValidateReplaceSpecType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhNetworkChoice := v.NetworkChoiceValidationRuleHandler
	rulesNetworkChoice := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhNetworkChoice(rulesNetworkChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ReplaceSpecType.network_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["network_choice"] = vFn

	vrhNetworkChoiceLegacyType := v.NetworkChoiceLegacyTypeValidationRuleHandler
	rulesNetworkChoiceLegacyType := map[string]string{
		"ves.io.schema.rules.enum.in": "[0,1,2,3,4,7]",
	}
	vFnMap["network_choice.legacy_type"], err = vrhNetworkChoiceLegacyType(rulesNetworkChoiceLegacyType)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for oneof field ReplaceSpecType.network_choice_legacy_type: %s", err)
		panic(errMsg)
	}

	v.FldValidators["network_choice.legacy_type"] = vFnMap["network_choice.legacy_type"]

	vrhStaticRoutes := v.StaticRoutesValidationRuleHandler
	rulesStaticRoutes := map[string]string{
		"ves.io.schema.rules.repeated.max_items": "16",
		"ves.io.schema.rules.repeated.unique":    "true",
	}
	vFn, err = vrhStaticRoutes(rulesStaticRoutes)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ReplaceSpecType.static_routes: %s", err)
		panic(errMsg)
	}
	v.FldValidators["static_routes"] = vFn

	return v
}()

func ReplaceSpecTypeValidator() db.Validator {
	return DefaultReplaceSpecTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *StaticRouteViewType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *StaticRouteViewType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *StaticRouteViewType) DeepCopy() *StaticRouteViewType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &StaticRouteViewType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *StaticRouteViewType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *StaticRouteViewType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return StaticRouteViewTypeValidator().Validate(ctx, m, opts...)
}

func (m *StaticRouteViewType) GetDRefInfo() ([]db.DRefInfo, error) {
	var drInfos []db.DRefInfo
	if fdrInfos, err := m.GetNextHopChoiceDRefInfo(); err != nil {
		return nil, err
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	return drInfos, nil
}

func (m *StaticRouteViewType) GetNextHopChoiceDRefInfo() ([]db.DRefInfo, error) {
	var odrInfos []db.DRefInfo

	switch m.GetNextHopChoice().(type) {
	case *StaticRouteViewType_Interface:

		vref := m.GetInterface()
		if vref == nil {
			return nil, nil
		}
		vdRef := db.NewDirectRefForView(vref)
		vdRef.SetKind("network_interface.Object")
		odri := db.DRefInfo{
			RefdType:   "network_interface.Object",
			RefdTenant: vref.Tenant,
			RefdNS:     vref.Namespace,
			RefdName:   vref.Name,
			DRField:    "interface",
			Ref:        vdRef,
		}
		odrInfos = append(odrInfos, odri)

	case *StaticRouteViewType_DefaultGateway:

	}

	return odrInfos, nil
}

// GetNextHopChoiceDBEntries returns the db.Entry corresponding to the ObjRefType from the default Table
func (m *StaticRouteViewType) GetNextHopChoiceDBEntries(ctx context.Context, d db.Interface) ([]db.Entry, error) {
	var entries []db.Entry

	switch m.GetNextHopChoice().(type) {
	case *StaticRouteViewType_Interface:
		refdType, err := d.TypeForEntryKind("", "", "network_interface.Object")
		if err != nil {
			return nil, errors.Wrap(err, "Cannot find type for kind: network_interface")
		}

		vref := m.GetInterface()
		if vref == nil {
			return nil, nil
		}
		ref := &ves_io_schema.ObjectRefType{
			Kind:      "network_interface.Object",
			Tenant:    vref.Tenant,
			Namespace: vref.Namespace,
			Name:      vref.Name,
		}
		refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
		if err != nil {
			return nil, errors.Wrap(err, "Getting referred entry")
		}
		if refdEnt != nil {
			entries = append(entries, refdEnt)
		}

	case *StaticRouteViewType_DefaultGateway:

	}

	return entries, nil
}

type ValidateStaticRouteViewType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateStaticRouteViewType) NextHopChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for next_hop_choice")
	}
	return validatorFn, nil
}

func (v *ValidateStaticRouteViewType) NextHopChoiceIpAddressValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	oValidatorFn_IpAddress, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for ip_address")
	}
	return oValidatorFn_IpAddress, nil
}

func (v *ValidateStaticRouteViewType) IpPrefixesValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepStringItemRules(rules)
	itemValFn, err := db.NewStringValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Item ValidationRuleHandler for ip_prefixes")
	}
	itemsValidatorFn := func(ctx context.Context, elems []string, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for ip_prefixes")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]string)
		if !ok {
			return fmt.Errorf("Repeated validation expected []string, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal := fmt.Sprintf("%v", elem)
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated ip_prefixes")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items ip_prefixes")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateStaticRouteViewType) AttrsValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepEnumItemRules(rules)
	var conv db.EnumConvFn
	conv = func(v interface{}) int32 {
		i := v.(ves_io_schema.RouteAttrType)
		return int32(i)
	}
	// ves_io_schema.RouteAttrType_name is generated in .pb.go
	itemValFn, err := db.NewEnumValidationRuleHandler(itemRules, ves_io_schema.RouteAttrType_name, conv)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for attrs")
	}
	itemsValidatorFn := func(ctx context.Context, elems []ves_io_schema.RouteAttrType, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for attrs")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]ves_io_schema.RouteAttrType)
		if !ok {
			return fmt.Errorf("Repeated validation expected []ves_io_schema.RouteAttrType, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal := fmt.Sprintf("%v", elem)
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated attrs")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items attrs")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateStaticRouteViewType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*StaticRouteViewType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *StaticRouteViewType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["attrs"]; exists {
		vOpts := append(opts, db.WithValidateField("attrs"))
		if err := fv(ctx, m.GetAttrs(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["ip_prefixes"]; exists {
		vOpts := append(opts, db.WithValidateField("ip_prefixes"))
		if err := fv(ctx, m.GetIpPrefixes(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["next_hop_choice"]; exists {
		val := m.GetNextHopChoice()
		vOpts := append(opts,
			db.WithValidateField("next_hop_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetNextHopChoice().(type) {
	case *StaticRouteViewType_IpAddress:
		if fv, exists := v.FldValidators["next_hop_choice.ip_address"]; exists {
			val := m.GetNextHopChoice().(*StaticRouteViewType_IpAddress).IpAddress
			vOpts := append(opts,
				db.WithValidateField("next_hop_choice"),
				db.WithValidateField("ip_address"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *StaticRouteViewType_Interface:
		if fv, exists := v.FldValidators["next_hop_choice.interface"]; exists {
			val := m.GetNextHopChoice().(*StaticRouteViewType_Interface).Interface
			vOpts := append(opts,
				db.WithValidateField("next_hop_choice"),
				db.WithValidateField("interface"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *StaticRouteViewType_DefaultGateway:
		if fv, exists := v.FldValidators["next_hop_choice.default_gateway"]; exists {
			val := m.GetNextHopChoice().(*StaticRouteViewType_DefaultGateway).DefaultGateway
			vOpts := append(opts,
				db.WithValidateField("next_hop_choice"),
				db.WithValidateField("default_gateway"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultStaticRouteViewTypeValidator = func() *ValidateStaticRouteViewType {
	v := &ValidateStaticRouteViewType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhNextHopChoice := v.NextHopChoiceValidationRuleHandler
	rulesNextHopChoice := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhNextHopChoice(rulesNextHopChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for StaticRouteViewType.next_hop_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["next_hop_choice"] = vFn

	vrhNextHopChoiceIpAddress := v.NextHopChoiceIpAddressValidationRuleHandler
	rulesNextHopChoiceIpAddress := map[string]string{
		"ves.io.schema.rules.string.ipv4": "true",
	}
	vFnMap["next_hop_choice.ip_address"], err = vrhNextHopChoiceIpAddress(rulesNextHopChoiceIpAddress)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for oneof field StaticRouteViewType.next_hop_choice_ip_address: %s", err)
		panic(errMsg)
	}

	v.FldValidators["next_hop_choice.ip_address"] = vFnMap["next_hop_choice.ip_address"]

	vrhIpPrefixes := v.IpPrefixesValidationRuleHandler
	rulesIpPrefixes := map[string]string{
		"ves.io.schema.rules.repeated.items.string.ipv4_prefix": "true",
		"ves.io.schema.rules.repeated.max_items":                "256",
		"ves.io.schema.rules.repeated.min_items":                "1",
		"ves.io.schema.rules.repeated.unique":                   "true",
	}
	vFn, err = vrhIpPrefixes(rulesIpPrefixes)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for StaticRouteViewType.ip_prefixes: %s", err)
		panic(errMsg)
	}
	v.FldValidators["ip_prefixes"] = vFn

	vrhAttrs := v.AttrsValidationRuleHandler
	rulesAttrs := map[string]string{
		"ves.io.schema.rules.repeated.max_items": "4",
		"ves.io.schema.rules.repeated.unique":    "true",
	}
	vFn, err = vrhAttrs(rulesAttrs)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for StaticRouteViewType.attrs: %s", err)
		panic(errMsg)
	}
	v.FldValidators["attrs"] = vFn

	v.FldValidators["next_hop_choice.interface"] = ves_io_schema_views.ObjectRefTypeValidator().Validate

	return v
}()

func StaticRouteViewTypeValidator() db.Validator {
	return DefaultStaticRouteViewTypeValidator
}

// create setters in CreateSpecType from GlobalSpecType for oneof fields
func (r *CreateSpecType) SetNetworkChoiceToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.NetworkChoice.(type) {
	case nil:
		o.NetworkChoice = nil

	case *CreateSpecType_GlobalNetwork:
		o.NetworkChoice = &GlobalSpecType_GlobalNetwork{GlobalNetwork: of.GlobalNetwork}

	case *CreateSpecType_LegacyType:
		o.NetworkChoice = &GlobalSpecType_LegacyType{LegacyType: of.LegacyType}

	case *CreateSpecType_SiteLocalInsideNetwork:
		o.NetworkChoice = &GlobalSpecType_SiteLocalInsideNetwork{SiteLocalInsideNetwork: of.SiteLocalInsideNetwork}

	case *CreateSpecType_SiteLocalNetwork:
		o.NetworkChoice = &GlobalSpecType_SiteLocalNetwork{SiteLocalNetwork: of.SiteLocalNetwork}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *CreateSpecType) GetNetworkChoiceFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.NetworkChoice.(type) {
	case nil:
		r.NetworkChoice = nil

	case *GlobalSpecType_GlobalNetwork:
		r.NetworkChoice = &CreateSpecType_GlobalNetwork{GlobalNetwork: of.GlobalNetwork}

	case *GlobalSpecType_LegacyType:
		r.NetworkChoice = &CreateSpecType_LegacyType{LegacyType: of.LegacyType}

	case *GlobalSpecType_SiteLocalInsideNetwork:
		r.NetworkChoice = &CreateSpecType_SiteLocalInsideNetwork{SiteLocalInsideNetwork: of.SiteLocalInsideNetwork}

	case *GlobalSpecType_SiteLocalNetwork:
		r.NetworkChoice = &CreateSpecType_SiteLocalNetwork{SiteLocalNetwork: of.SiteLocalNetwork}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (m *CreateSpecType) FromGlobalSpecType(f *GlobalSpecType) {
	if f == nil {
		return
	}
	m.GetNetworkChoiceFromGlobalSpecType(f)

}

func (m *CreateSpecType) ToGlobalSpecType(f *GlobalSpecType) {
	m1 := m.DeepCopy()
	_ = m1
	if f == nil {
		return
	}
	m1.SetNetworkChoiceToGlobalSpecType(f)

}

// create setters in GetSpecType from GlobalSpecType for oneof fields
func (r *GetSpecType) SetNetworkChoiceToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.NetworkChoice.(type) {
	case nil:
		o.NetworkChoice = nil

	case *GetSpecType_GlobalNetwork:
		o.NetworkChoice = &GlobalSpecType_GlobalNetwork{GlobalNetwork: of.GlobalNetwork}

	case *GetSpecType_LegacyType:
		o.NetworkChoice = &GlobalSpecType_LegacyType{LegacyType: of.LegacyType}

	case *GetSpecType_SiteLocalInsideNetwork:
		o.NetworkChoice = &GlobalSpecType_SiteLocalInsideNetwork{SiteLocalInsideNetwork: of.SiteLocalInsideNetwork}

	case *GetSpecType_SiteLocalNetwork:
		o.NetworkChoice = &GlobalSpecType_SiteLocalNetwork{SiteLocalNetwork: of.SiteLocalNetwork}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *GetSpecType) GetNetworkChoiceFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.NetworkChoice.(type) {
	case nil:
		r.NetworkChoice = nil

	case *GlobalSpecType_GlobalNetwork:
		r.NetworkChoice = &GetSpecType_GlobalNetwork{GlobalNetwork: of.GlobalNetwork}

	case *GlobalSpecType_LegacyType:
		r.NetworkChoice = &GetSpecType_LegacyType{LegacyType: of.LegacyType}

	case *GlobalSpecType_SiteLocalInsideNetwork:
		r.NetworkChoice = &GetSpecType_SiteLocalInsideNetwork{SiteLocalInsideNetwork: of.SiteLocalInsideNetwork}

	case *GlobalSpecType_SiteLocalNetwork:
		r.NetworkChoice = &GetSpecType_SiteLocalNetwork{SiteLocalNetwork: of.SiteLocalNetwork}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (m *GetSpecType) FromGlobalSpecType(f *GlobalSpecType) {
	if f == nil {
		return
	}
	m.GetNetworkChoiceFromGlobalSpecType(f)

}

func (m *GetSpecType) ToGlobalSpecType(f *GlobalSpecType) {
	m1 := m.DeepCopy()
	_ = m1
	if f == nil {
		return
	}
	m1.SetNetworkChoiceToGlobalSpecType(f)

}

// create setters in ReplaceSpecType from GlobalSpecType for oneof fields
func (r *ReplaceSpecType) SetNetworkChoiceToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.NetworkChoice.(type) {
	case nil:
		o.NetworkChoice = nil

	case *ReplaceSpecType_GlobalNetwork:
		o.NetworkChoice = &GlobalSpecType_GlobalNetwork{GlobalNetwork: of.GlobalNetwork}

	case *ReplaceSpecType_LegacyType:
		o.NetworkChoice = &GlobalSpecType_LegacyType{LegacyType: of.LegacyType}

	case *ReplaceSpecType_SiteLocalInsideNetwork:
		o.NetworkChoice = &GlobalSpecType_SiteLocalInsideNetwork{SiteLocalInsideNetwork: of.SiteLocalInsideNetwork}

	case *ReplaceSpecType_SiteLocalNetwork:
		o.NetworkChoice = &GlobalSpecType_SiteLocalNetwork{SiteLocalNetwork: of.SiteLocalNetwork}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *ReplaceSpecType) GetNetworkChoiceFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.NetworkChoice.(type) {
	case nil:
		r.NetworkChoice = nil

	case *GlobalSpecType_GlobalNetwork:
		r.NetworkChoice = &ReplaceSpecType_GlobalNetwork{GlobalNetwork: of.GlobalNetwork}

	case *GlobalSpecType_LegacyType:
		r.NetworkChoice = &ReplaceSpecType_LegacyType{LegacyType: of.LegacyType}

	case *GlobalSpecType_SiteLocalInsideNetwork:
		r.NetworkChoice = &ReplaceSpecType_SiteLocalInsideNetwork{SiteLocalInsideNetwork: of.SiteLocalInsideNetwork}

	case *GlobalSpecType_SiteLocalNetwork:
		r.NetworkChoice = &ReplaceSpecType_SiteLocalNetwork{SiteLocalNetwork: of.SiteLocalNetwork}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (m *ReplaceSpecType) FromGlobalSpecType(f *GlobalSpecType) {
	if f == nil {
		return
	}
	m.GetNetworkChoiceFromGlobalSpecType(f)

}

func (m *ReplaceSpecType) ToGlobalSpecType(f *GlobalSpecType) {
	m1 := m.DeepCopy()
	_ = m1
	if f == nil {
		return
	}
	m1.SetNetworkChoiceToGlobalSpecType(f)

}
