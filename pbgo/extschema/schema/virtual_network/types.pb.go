// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ves.io/schema/virtual_network/types.proto

package virtual_network

import proto "github.com/gogo/protobuf/proto"
import golang_proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"
import ves_io_schema3 "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
import _ "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
import ves_io_schema4 "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
import _ "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
import _ "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
import ves_io_schema_views "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/views"

import strings "strings"
import reflect "reflect"
import sortkeys "github.com/gogo/protobuf/sortkeys"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// VoltADN Private Network RE Info
//
// x-displayName: "VoltADN Private Network RE Info"
// Per RE information VoltADN private network
type VoltADNPrivateNetworkReInfoType struct {
	// VLAN ID
	//
	// x-displayName: "VLAN ID"
	// x-example: "700"
	// VLAN id of for vlan interface for handoff from infrastructure
	Vlan uint32 `protobuf:"varint,1,opt,name=vlan,proto3" json:"vlan,omitempty"`
	// Label expression to select Node
	//
	// x-displayName: "Node Label Expression"
	// this expression is used if ver node should own this network or not.
	// If RE specific expression is nil, then common expression is used.
	NodeSelector *ves_io_schema4.LabelSelectorType `protobuf:"bytes,2,opt,name=node_selector,json=nodeSelector" json:"node_selector,omitempty"`
}

func (m *VoltADNPrivateNetworkReInfoType) Reset()      { *m = VoltADNPrivateNetworkReInfoType{} }
func (*VoltADNPrivateNetworkReInfoType) ProtoMessage() {}
func (*VoltADNPrivateNetworkReInfoType) Descriptor() ([]byte, []int) {
	return fileDescriptorTypes, []int{0}
}

func (m *VoltADNPrivateNetworkReInfoType) GetVlan() uint32 {
	if m != nil {
		return m.Vlan
	}
	return 0
}

func (m *VoltADNPrivateNetworkReInfoType) GetNodeSelector() *ves_io_schema4.LabelSelectorType {
	if m != nil {
		return m.NodeSelector
	}
	return nil
}

// VoltADN Private Network Tenant Info
//
// x-displayName: "VoltADN Private Network Tenant Info"
// Per Tenant information for VoltADN private network
type VoltADNPrivateNetworkTenantInfoType struct {
	// Default Tenant Private VIP
	//
	// x-displayName: "Default Tenant Private VIP"
	// x-example: "10.200.2.1"
	// Default tenant private VIP to be used when not specified in advertise policy
	DefaultPrivateVip string `protobuf:"bytes,1,opt,name=default_private_vip,json=defaultPrivateVip,proto3" json:"default_private_vip,omitempty"`
	// Final Default Tenant Private VIP
	//
	// x-displayName: "Final Default Tenant Private VIP"
	// x-example: "10.200.2.1"
	// Final Default tenant private VIP to be used when not specified in advertise policy
	// Vega will use this to create Listener
	FinalDefaultPrivateVip string `protobuf:"bytes,2,opt,name=final_default_private_vip,json=finalDefaultPrivateVip,proto3" json:"final_default_private_vip,omitempty"`
}

func (m *VoltADNPrivateNetworkTenantInfoType) Reset()      { *m = VoltADNPrivateNetworkTenantInfoType{} }
func (*VoltADNPrivateNetworkTenantInfoType) ProtoMessage() {}
func (*VoltADNPrivateNetworkTenantInfoType) Descriptor() ([]byte, []int) {
	return fileDescriptorTypes, []int{1}
}

func (m *VoltADNPrivateNetworkTenantInfoType) GetDefaultPrivateVip() string {
	if m != nil {
		return m.DefaultPrivateVip
	}
	return ""
}

func (m *VoltADNPrivateNetworkTenantInfoType) GetFinalDefaultPrivateVip() string {
	if m != nil {
		return m.FinalDefaultPrivateVip
	}
	return ""
}

// List of DNS server IP(s)
//
// x-displayName: "List of DNS Server IP(s)"
// List DNS server ip addresses
type DNSServersList struct {
	// List of DNS server IP(s)
	//
	// x-displayName: "List of DNS Server IP(s)"
	// x-required
	// List DNS server ip addresses
	DnsIp []string `protobuf:"bytes,6,rep,name=dns_ip,json=dnsIp" json:"dns_ip,omitempty"`
}

func (m *DNSServersList) Reset()                    { *m = DNSServersList{} }
func (*DNSServersList) ProtoMessage()               {}
func (*DNSServersList) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{2} }

func (m *DNSServersList) GetDnsIp() []string {
	if m != nil {
		return m.DnsIp
	}
	return nil
}

// VoltADN Private Network
//
// x-displayName: "VoltADN Private Network"
// Specification VoltADN private network
type VoltADNPrivateNetworkType struct {
	// Select Private Access
	//
	// x-displayName: "Select Private Access"
	// x-required
	// Choose if CE sites will use this network for private access
	//
	// Types that are valid to be assigned to PrivateAccessChoice:
	//	*VoltADNPrivateNetworkType_NoPrivateAccess
	//	*VoltADNPrivateNetworkType_PrivateAccessEnabled
	PrivateAccessChoice isVoltADNPrivateNetworkType_PrivateAccessChoice `protobuf_oneof:"private_access_choice"`
	// Select DNS Server
	//
	// x-displayName: "Select DNS Server"
	// x-required
	// Choose DNS server for endpoint discovery in this network
	//
	// Types that are valid to be assigned to DnsChoice:
	//	*VoltADNPrivateNetworkType_NoPrivateDns
	//	*VoltADNPrivateNetworkType_PrivateDns
	DnsChoice isVoltADNPrivateNetworkType_DnsChoice `protobuf_oneof:"dns_choice"`
	// Common Label expression to select Node
	//
	// x-displayName: "Common Node Label Expression"
	// If RE specific expression is nil, then common expression is used.
	CommonNodeSelector *ves_io_schema4.LabelSelectorType `protobuf:"bytes,7,opt,name=common_node_selector,json=commonNodeSelector" json:"common_node_selector,omitempty"`
	// RE name  to RE info map
	//
	// x-displayName: "RE name to Re info mapping"
	// Map of re name to re info map, Key:RE name, Value: RE info
	ReInfoMap map[string]*VoltADNPrivateNetworkReInfoType `protobuf:"bytes,8,rep,name=re_info_map,json=reInfoMap" json:"re_info_map,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value"`
	// Owner Tenant
	//
	// x-displayName: "Owner Tenant"
	// x-required
	// Tenant ID of tenant that first requested creation of this network
	OwnerTenantId string `protobuf:"bytes,9,opt,name=owner_tenant_id,json=ownerTenantId,proto3" json:"owner_tenant_id,omitempty"`
	// Per Tenant Information
	//
	// x-displayName: "Per Tenant Information"
	// Per tenant information for the private network
	TenantInfoMap map[string]*VoltADNPrivateNetworkTenantInfoType `protobuf:"bytes,10,rep,name=tenant_info_map,json=tenantInfoMap" json:"tenant_info_map,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value"`
	// Advertise Dedicated VIP(s)
	//
	// x-displayName: "Advertise Dedicated VIP(s)"
	// x-required
	// Choose if dedicated public VIP(s) are also available via private network
	//
	// Types that are valid to be assigned to DedicatedVipChoice:
	//	*VoltADNPrivateNetworkType_NoAdvertiseDedicatedVips
	//	*VoltADNPrivateNetworkType_AdvertiseDedicatedVips
	DedicatedVipChoice isVoltADNPrivateNetworkType_DedicatedVipChoice `protobuf_oneof:"dedicated_vip_choice"`
}

func (m *VoltADNPrivateNetworkType) Reset()                    { *m = VoltADNPrivateNetworkType{} }
func (*VoltADNPrivateNetworkType) ProtoMessage()               {}
func (*VoltADNPrivateNetworkType) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{3} }

type isVoltADNPrivateNetworkType_PrivateAccessChoice interface {
	isVoltADNPrivateNetworkType_PrivateAccessChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isVoltADNPrivateNetworkType_DnsChoice interface {
	isVoltADNPrivateNetworkType_DnsChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isVoltADNPrivateNetworkType_DedicatedVipChoice interface {
	isVoltADNPrivateNetworkType_DedicatedVipChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type VoltADNPrivateNetworkType_NoPrivateAccess struct {
	NoPrivateAccess *ves_io_schema4.Empty `protobuf:"bytes,2,opt,name=no_private_access,json=noPrivateAccess,oneof"`
}
type VoltADNPrivateNetworkType_PrivateAccessEnabled struct {
	PrivateAccessEnabled *ves_io_schema4.Empty `protobuf:"bytes,3,opt,name=private_access_enabled,json=privateAccessEnabled,oneof"`
}
type VoltADNPrivateNetworkType_NoPrivateDns struct {
	NoPrivateDns *ves_io_schema4.Empty `protobuf:"bytes,5,opt,name=no_private_dns,json=noPrivateDns,oneof"`
}
type VoltADNPrivateNetworkType_PrivateDns struct {
	PrivateDns *DNSServersList `protobuf:"bytes,6,opt,name=private_dns,json=privateDns,oneof"`
}
type VoltADNPrivateNetworkType_NoAdvertiseDedicatedVips struct {
	NoAdvertiseDedicatedVips *ves_io_schema4.Empty `protobuf:"bytes,12,opt,name=no_advertise_dedicated_vips,json=noAdvertiseDedicatedVips,oneof"`
}
type VoltADNPrivateNetworkType_AdvertiseDedicatedVips struct {
	AdvertiseDedicatedVips *ves_io_schema4.Empty `protobuf:"bytes,13,opt,name=advertise_dedicated_vips,json=advertiseDedicatedVips,oneof"`
}

func (*VoltADNPrivateNetworkType_NoPrivateAccess) isVoltADNPrivateNetworkType_PrivateAccessChoice() {}
func (*VoltADNPrivateNetworkType_PrivateAccessEnabled) isVoltADNPrivateNetworkType_PrivateAccessChoice() {
}
func (*VoltADNPrivateNetworkType_NoPrivateDns) isVoltADNPrivateNetworkType_DnsChoice() {}
func (*VoltADNPrivateNetworkType_PrivateDns) isVoltADNPrivateNetworkType_DnsChoice()   {}
func (*VoltADNPrivateNetworkType_NoAdvertiseDedicatedVips) isVoltADNPrivateNetworkType_DedicatedVipChoice() {
}
func (*VoltADNPrivateNetworkType_AdvertiseDedicatedVips) isVoltADNPrivateNetworkType_DedicatedVipChoice() {
}

func (m *VoltADNPrivateNetworkType) GetPrivateAccessChoice() isVoltADNPrivateNetworkType_PrivateAccessChoice {
	if m != nil {
		return m.PrivateAccessChoice
	}
	return nil
}
func (m *VoltADNPrivateNetworkType) GetDnsChoice() isVoltADNPrivateNetworkType_DnsChoice {
	if m != nil {
		return m.DnsChoice
	}
	return nil
}
func (m *VoltADNPrivateNetworkType) GetDedicatedVipChoice() isVoltADNPrivateNetworkType_DedicatedVipChoice {
	if m != nil {
		return m.DedicatedVipChoice
	}
	return nil
}

func (m *VoltADNPrivateNetworkType) GetNoPrivateAccess() *ves_io_schema4.Empty {
	if x, ok := m.GetPrivateAccessChoice().(*VoltADNPrivateNetworkType_NoPrivateAccess); ok {
		return x.NoPrivateAccess
	}
	return nil
}

func (m *VoltADNPrivateNetworkType) GetPrivateAccessEnabled() *ves_io_schema4.Empty {
	if x, ok := m.GetPrivateAccessChoice().(*VoltADNPrivateNetworkType_PrivateAccessEnabled); ok {
		return x.PrivateAccessEnabled
	}
	return nil
}

func (m *VoltADNPrivateNetworkType) GetNoPrivateDns() *ves_io_schema4.Empty {
	if x, ok := m.GetDnsChoice().(*VoltADNPrivateNetworkType_NoPrivateDns); ok {
		return x.NoPrivateDns
	}
	return nil
}

func (m *VoltADNPrivateNetworkType) GetPrivateDns() *DNSServersList {
	if x, ok := m.GetDnsChoice().(*VoltADNPrivateNetworkType_PrivateDns); ok {
		return x.PrivateDns
	}
	return nil
}

func (m *VoltADNPrivateNetworkType) GetCommonNodeSelector() *ves_io_schema4.LabelSelectorType {
	if m != nil {
		return m.CommonNodeSelector
	}
	return nil
}

func (m *VoltADNPrivateNetworkType) GetReInfoMap() map[string]*VoltADNPrivateNetworkReInfoType {
	if m != nil {
		return m.ReInfoMap
	}
	return nil
}

func (m *VoltADNPrivateNetworkType) GetOwnerTenantId() string {
	if m != nil {
		return m.OwnerTenantId
	}
	return ""
}

func (m *VoltADNPrivateNetworkType) GetTenantInfoMap() map[string]*VoltADNPrivateNetworkTenantInfoType {
	if m != nil {
		return m.TenantInfoMap
	}
	return nil
}

func (m *VoltADNPrivateNetworkType) GetNoAdvertiseDedicatedVips() *ves_io_schema4.Empty {
	if x, ok := m.GetDedicatedVipChoice().(*VoltADNPrivateNetworkType_NoAdvertiseDedicatedVips); ok {
		return x.NoAdvertiseDedicatedVips
	}
	return nil
}

func (m *VoltADNPrivateNetworkType) GetAdvertiseDedicatedVips() *ves_io_schema4.Empty {
	if x, ok := m.GetDedicatedVipChoice().(*VoltADNPrivateNetworkType_AdvertiseDedicatedVips); ok {
		return x.AdvertiseDedicatedVips
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*VoltADNPrivateNetworkType) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _VoltADNPrivateNetworkType_OneofMarshaler, _VoltADNPrivateNetworkType_OneofUnmarshaler, _VoltADNPrivateNetworkType_OneofSizer, []interface{}{
		(*VoltADNPrivateNetworkType_NoPrivateAccess)(nil),
		(*VoltADNPrivateNetworkType_PrivateAccessEnabled)(nil),
		(*VoltADNPrivateNetworkType_NoPrivateDns)(nil),
		(*VoltADNPrivateNetworkType_PrivateDns)(nil),
		(*VoltADNPrivateNetworkType_NoAdvertiseDedicatedVips)(nil),
		(*VoltADNPrivateNetworkType_AdvertiseDedicatedVips)(nil),
	}
}

func _VoltADNPrivateNetworkType_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*VoltADNPrivateNetworkType)
	// private_access_choice
	switch x := m.PrivateAccessChoice.(type) {
	case *VoltADNPrivateNetworkType_NoPrivateAccess:
		_ = b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.NoPrivateAccess); err != nil {
			return err
		}
	case *VoltADNPrivateNetworkType_PrivateAccessEnabled:
		_ = b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.PrivateAccessEnabled); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("VoltADNPrivateNetworkType.PrivateAccessChoice has unexpected type %T", x)
	}
	// dns_choice
	switch x := m.DnsChoice.(type) {
	case *VoltADNPrivateNetworkType_NoPrivateDns:
		_ = b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.NoPrivateDns); err != nil {
			return err
		}
	case *VoltADNPrivateNetworkType_PrivateDns:
		_ = b.EncodeVarint(6<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.PrivateDns); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("VoltADNPrivateNetworkType.DnsChoice has unexpected type %T", x)
	}
	// dedicated_vip_choice
	switch x := m.DedicatedVipChoice.(type) {
	case *VoltADNPrivateNetworkType_NoAdvertiseDedicatedVips:
		_ = b.EncodeVarint(12<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.NoAdvertiseDedicatedVips); err != nil {
			return err
		}
	case *VoltADNPrivateNetworkType_AdvertiseDedicatedVips:
		_ = b.EncodeVarint(13<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.AdvertiseDedicatedVips); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("VoltADNPrivateNetworkType.DedicatedVipChoice has unexpected type %T", x)
	}
	return nil
}

func _VoltADNPrivateNetworkType_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*VoltADNPrivateNetworkType)
	switch tag {
	case 2: // private_access_choice.no_private_access
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.PrivateAccessChoice = &VoltADNPrivateNetworkType_NoPrivateAccess{msg}
		return true, err
	case 3: // private_access_choice.private_access_enabled
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.PrivateAccessChoice = &VoltADNPrivateNetworkType_PrivateAccessEnabled{msg}
		return true, err
	case 5: // dns_choice.no_private_dns
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.DnsChoice = &VoltADNPrivateNetworkType_NoPrivateDns{msg}
		return true, err
	case 6: // dns_choice.private_dns
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(DNSServersList)
		err := b.DecodeMessage(msg)
		m.DnsChoice = &VoltADNPrivateNetworkType_PrivateDns{msg}
		return true, err
	case 12: // dedicated_vip_choice.no_advertise_dedicated_vips
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.DedicatedVipChoice = &VoltADNPrivateNetworkType_NoAdvertiseDedicatedVips{msg}
		return true, err
	case 13: // dedicated_vip_choice.advertise_dedicated_vips
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.DedicatedVipChoice = &VoltADNPrivateNetworkType_AdvertiseDedicatedVips{msg}
		return true, err
	default:
		return false, nil
	}
}

func _VoltADNPrivateNetworkType_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*VoltADNPrivateNetworkType)
	// private_access_choice
	switch x := m.PrivateAccessChoice.(type) {
	case *VoltADNPrivateNetworkType_NoPrivateAccess:
		s := proto.Size(x.NoPrivateAccess)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *VoltADNPrivateNetworkType_PrivateAccessEnabled:
		s := proto.Size(x.PrivateAccessEnabled)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	// dns_choice
	switch x := m.DnsChoice.(type) {
	case *VoltADNPrivateNetworkType_NoPrivateDns:
		s := proto.Size(x.NoPrivateDns)
		n += proto.SizeVarint(5<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *VoltADNPrivateNetworkType_PrivateDns:
		s := proto.Size(x.PrivateDns)
		n += proto.SizeVarint(6<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	// dedicated_vip_choice
	switch x := m.DedicatedVipChoice.(type) {
	case *VoltADNPrivateNetworkType_NoAdvertiseDedicatedVips:
		s := proto.Size(x.NoAdvertiseDedicatedVips)
		n += proto.SizeVarint(12<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *VoltADNPrivateNetworkType_AdvertiseDedicatedVips:
		s := proto.Size(x.AdvertiseDedicatedVips)
		n += proto.SizeVarint(13<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// Anycast VIP for Fleet
//
// x-displayName: "Anycast VIP for Fleet"
// Configure anycast VIP address allocator
type AnyCastVIPFleetType struct {
	// Fleet VIP address allocator
	//
	// x-displayName: "Fleet VIP address allocator"
	// x-required
	// Anycast VIP address allocator reference
	VipAllocator *ves_io_schema_views.ObjectRefType `protobuf:"bytes,1,opt,name=vip_allocator,json=vipAllocator" json:"vip_allocator,omitempty"`
}

func (m *AnyCastVIPFleetType) Reset()                    { *m = AnyCastVIPFleetType{} }
func (*AnyCastVIPFleetType) ProtoMessage()               {}
func (*AnyCastVIPFleetType) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{4} }

func (m *AnyCastVIPFleetType) GetVipAllocator() *ves_io_schema_views.ObjectRefType {
	if m != nil {
		return m.VipAllocator
	}
	return nil
}

// SNAT Pool
//
// x-displayName: "SNAT Pool"
// SNAT pool ip prefix  parameters
type SNATPoolType struct {
	// List of IPv4 Prefixes
	//
	// x-displayName: "List of IPv4 Prefixes"
	// x-required
	// List of IPv4 prefixes used as SNAT pool
	Ipv4Prefixes []string `protobuf:"bytes,1,rep,name=ipv4_prefixes,json=ipv4Prefixes" json:"ipv4_prefixes,omitempty"`
}

func (m *SNATPoolType) Reset()                    { *m = SNATPoolType{} }
func (*SNATPoolType) ProtoMessage()               {}
func (*SNATPoolType) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{5} }

func (m *SNATPoolType) GetIpv4Prefixes() []string {
	if m != nil {
		return m.Ipv4Prefixes
	}
	return nil
}

// Per Node SNAT pool for a Site
//
// x-displayName: "Per Node SNAT pool for a Site"
// Per node snat pool for a site
type SNATPoolSiteType struct {
	// Per Node IPv4 Prefix
	//
	// x-displayName: "Per Node IPv4 Prefix"
	// x-required
	// Per node ip v4 prefix for snat pool
	NodeSnatPool map[string]*SNATPoolType `protobuf:"bytes,1,rep,name=node_snat_pool,json=nodeSnatPool" json:"node_snat_pool,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *SNATPoolSiteType) Reset()                    { *m = SNATPoolSiteType{} }
func (*SNATPoolSiteType) ProtoMessage()               {}
func (*SNATPoolSiteType) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{6} }

func (m *SNATPoolSiteType) GetNodeSnatPool() map[string]*SNATPoolType {
	if m != nil {
		return m.NodeSnatPool
	}
	return nil
}

// SNAT pool for Fleet
//
// x-displayName: "SNAT pool for Fleet"
// Configure SNAT pool address allocator
type SNATPoolFleetType struct {
	// Fleet SNAT pool address allocator
	//
	// x-displayName: "Fleet SNAT pool address allocator"
	// x-required
	// SNAT pool address allocator reference
	SnatPoolAllocator *ves_io_schema_views.ObjectRefType `protobuf:"bytes,1,opt,name=snat_pool_allocator,json=snatPoolAllocator" json:"snat_pool_allocator,omitempty"`
}

func (m *SNATPoolFleetType) Reset()                    { *m = SNATPoolFleetType{} }
func (*SNATPoolFleetType) ProtoMessage()               {}
func (*SNATPoolFleetType) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{7} }

func (m *SNATPoolFleetType) GetSnatPoolAllocator() *ves_io_schema_views.ObjectRefType {
	if m != nil {
		return m.SnatPoolAllocator
	}
	return nil
}

// Srv6 Network Namespace Parameters
//
// x-displayName: "Srv6 Network Namespace Parameters"
// Configure the how namespace network is connected to srv6 network
type Srv6NetworkNsParametersType struct {
	// Namespace
	//
	// x-displayName: "Namespace"
	// x-example: "production"
	// x-required
	// Name of namespace that is connected to srv6 Network
	Namespace string `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
}

func (m *Srv6NetworkNsParametersType) Reset()      { *m = Srv6NetworkNsParametersType{} }
func (*Srv6NetworkNsParametersType) ProtoMessage() {}
func (*Srv6NetworkNsParametersType) Descriptor() ([]byte, []int) {
	return fileDescriptorTypes, []int{8}
}

func (m *Srv6NetworkNsParametersType) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

// Per Site Srv6 Network
//
// x-displayName: "Per Site Srv6 Network"
// Per site network parameters
type PerSiteSrv6NetworkType struct {
	// Select Namespace Network to Connect
	//
	// x-displayName: "Select Namespace Network to Connect"
	// x-required
	// Choose if a given namespace network is connected to this network
	//
	// Types that are valid to be assigned to NamespaceChoice:
	//	*PerSiteSrv6NetworkType_NoNamespaceNetwork
	//	*PerSiteSrv6NetworkType_Srv6NetworkNsParams
	NamespaceChoice isPerSiteSrv6NetworkType_NamespaceChoice `protobuf_oneof:"namespace_choice"`
	// Default VIP Choice
	//
	// x-displayName: "Default VIP Choice"
	// x-required
	// Default VIP configuration for this network
	//
	// Types that are valid to be assigned to DefaultVipChoice:
	//	*PerSiteSrv6NetworkType_InterfaceIpVip
	//	*PerSiteSrv6NetworkType_AnycastVip
	//	*PerSiteSrv6NetworkType_FleetVip
	DefaultVipChoice isPerSiteSrv6NetworkType_DefaultVipChoice `protobuf_oneof:"default_vip_choice"`
	// SNAT Pool
	//
	// x-displayName: "SNAT Pool"
	// x-required
	// SNAT pool configuration for this network
	//
	// Types that are valid to be assigned to SnatPoolChoice:
	//	*PerSiteSrv6NetworkType_InterfaceIpSnatPool
	//	*PerSiteSrv6NetworkType_SiteSnatPool
	//	*PerSiteSrv6NetworkType_FleetSnatPool
	SnatPoolChoice isPerSiteSrv6NetworkType_SnatPoolChoice `protobuf_oneof:"snat_pool_choice"`
	// slice
	//
	// x-displayName: "SRv6 Network Slice"
	// x-required
	// The srv6_network_slice to which this network belongs.
	Slice *ves_io_schema_views.ObjectRefType `protobuf:"bytes,12,opt,name=slice" json:"slice,omitempty"`
	// fleets
	//
	// x-displayName: "Fleets"
	// The set of sites where this virtual network is to be instantiated.
	Fleets []*ves_io_schema_views.ObjectRefType `protobuf:"bytes,13,rep,name=fleets" json:"fleets,omitempty"`
	// access_network_rtargets
	//
	// x-displayName: "Access Network Route Targets"
	// Import Route Targets for connectivity to Access Networks.
	AccessNetworkRtargets []*ves_io_schema4.RouteTarget `protobuf:"bytes,14,rep,name=access_network_rtargets,json=accessNetworkRtargets" json:"access_network_rtargets,omitempty"`
	// internet_rtargets
	//
	// x-displayName: "Internet Route Targets"
	// Import Route Targets for connectivity to the Internet.
	InternetRtargets []*ves_io_schema4.RouteTarget `protobuf:"bytes,15,rep,name=internet_rtargets,json=internetRtargets" json:"internet_rtargets,omitempty"`
	// enterprise_network_rtargets
	//
	// x-displayName: "Enterprise Network Route Targets"
	// Import Route Targets for connectivity to Enterprise Networks.
	EnterpriseNetworkRtargets []*ves_io_schema4.RouteTarget `protobuf:"bytes,16,rep,name=enterprise_network_rtargets,json=enterpriseNetworkRtargets" json:"enterprise_network_rtargets,omitempty"`
	// export_rtargets
	//
	// x-displayName: "Export Route Targets"
	// Export Route Targets for advertised routes.
	ExportRtargets []*ves_io_schema4.RouteTarget `protobuf:"bytes,17,rep,name=export_rtargets,json=exportRtargets" json:"export_rtargets,omitempty"`
	// remote_sid_stats_plen
	//
	// x-displayName: "Prefix Length for Remote SID Counters"
	// x-example: "72"
	// Number of most significant bits of remote SIDs to use for maintaining per-SID counters.
	RemoteSidStatsPlen uint32 `protobuf:"varint,18,opt,name=remote_sid_stats_plen,json=remoteSidStatsPlen,proto3" json:"remote_sid_stats_plen,omitempty"`
}

func (m *PerSiteSrv6NetworkType) Reset()                    { *m = PerSiteSrv6NetworkType{} }
func (*PerSiteSrv6NetworkType) ProtoMessage()               {}
func (*PerSiteSrv6NetworkType) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{9} }

type isPerSiteSrv6NetworkType_NamespaceChoice interface {
	isPerSiteSrv6NetworkType_NamespaceChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isPerSiteSrv6NetworkType_DefaultVipChoice interface {
	isPerSiteSrv6NetworkType_DefaultVipChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isPerSiteSrv6NetworkType_SnatPoolChoice interface {
	isPerSiteSrv6NetworkType_SnatPoolChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type PerSiteSrv6NetworkType_NoNamespaceNetwork struct {
	NoNamespaceNetwork *ves_io_schema4.Empty `protobuf:"bytes,2,opt,name=no_namespace_network,json=noNamespaceNetwork,oneof"`
}
type PerSiteSrv6NetworkType_Srv6NetworkNsParams struct {
	Srv6NetworkNsParams *Srv6NetworkNsParametersType `protobuf:"bytes,3,opt,name=srv6_network_ns_params,json=srv6NetworkNsParams,oneof"`
}
type PerSiteSrv6NetworkType_InterfaceIpVip struct {
	InterfaceIpVip *ves_io_schema4.Empty `protobuf:"bytes,5,opt,name=interface_ip_vip,json=interfaceIpVip,oneof"`
}
type PerSiteSrv6NetworkType_AnycastVip struct {
	AnycastVip string `protobuf:"bytes,6,opt,name=anycast_vip,json=anycastVip,proto3,oneof"`
}
type PerSiteSrv6NetworkType_FleetVip struct {
	FleetVip *AnyCastVIPFleetType `protobuf:"bytes,7,opt,name=fleet_vip,json=fleetVip,oneof"`
}
type PerSiteSrv6NetworkType_InterfaceIpSnatPool struct {
	InterfaceIpSnatPool *ves_io_schema4.Empty `protobuf:"bytes,9,opt,name=interface_ip_snat_pool,json=interfaceIpSnatPool,oneof"`
}
type PerSiteSrv6NetworkType_SiteSnatPool struct {
	SiteSnatPool *SNATPoolSiteType `protobuf:"bytes,10,opt,name=site_snat_pool,json=siteSnatPool,oneof"`
}
type PerSiteSrv6NetworkType_FleetSnatPool struct {
	FleetSnatPool *SNATPoolFleetType `protobuf:"bytes,11,opt,name=fleet_snat_pool,json=fleetSnatPool,oneof"`
}

func (*PerSiteSrv6NetworkType_NoNamespaceNetwork) isPerSiteSrv6NetworkType_NamespaceChoice()  {}
func (*PerSiteSrv6NetworkType_Srv6NetworkNsParams) isPerSiteSrv6NetworkType_NamespaceChoice() {}
func (*PerSiteSrv6NetworkType_InterfaceIpVip) isPerSiteSrv6NetworkType_DefaultVipChoice()     {}
func (*PerSiteSrv6NetworkType_AnycastVip) isPerSiteSrv6NetworkType_DefaultVipChoice()         {}
func (*PerSiteSrv6NetworkType_FleetVip) isPerSiteSrv6NetworkType_DefaultVipChoice()           {}
func (*PerSiteSrv6NetworkType_InterfaceIpSnatPool) isPerSiteSrv6NetworkType_SnatPoolChoice()  {}
func (*PerSiteSrv6NetworkType_SiteSnatPool) isPerSiteSrv6NetworkType_SnatPoolChoice()         {}
func (*PerSiteSrv6NetworkType_FleetSnatPool) isPerSiteSrv6NetworkType_SnatPoolChoice()        {}

func (m *PerSiteSrv6NetworkType) GetNamespaceChoice() isPerSiteSrv6NetworkType_NamespaceChoice {
	if m != nil {
		return m.NamespaceChoice
	}
	return nil
}
func (m *PerSiteSrv6NetworkType) GetDefaultVipChoice() isPerSiteSrv6NetworkType_DefaultVipChoice {
	if m != nil {
		return m.DefaultVipChoice
	}
	return nil
}
func (m *PerSiteSrv6NetworkType) GetSnatPoolChoice() isPerSiteSrv6NetworkType_SnatPoolChoice {
	if m != nil {
		return m.SnatPoolChoice
	}
	return nil
}

func (m *PerSiteSrv6NetworkType) GetNoNamespaceNetwork() *ves_io_schema4.Empty {
	if x, ok := m.GetNamespaceChoice().(*PerSiteSrv6NetworkType_NoNamespaceNetwork); ok {
		return x.NoNamespaceNetwork
	}
	return nil
}

func (m *PerSiteSrv6NetworkType) GetSrv6NetworkNsParams() *Srv6NetworkNsParametersType {
	if x, ok := m.GetNamespaceChoice().(*PerSiteSrv6NetworkType_Srv6NetworkNsParams); ok {
		return x.Srv6NetworkNsParams
	}
	return nil
}

func (m *PerSiteSrv6NetworkType) GetInterfaceIpVip() *ves_io_schema4.Empty {
	if x, ok := m.GetDefaultVipChoice().(*PerSiteSrv6NetworkType_InterfaceIpVip); ok {
		return x.InterfaceIpVip
	}
	return nil
}

func (m *PerSiteSrv6NetworkType) GetAnycastVip() string {
	if x, ok := m.GetDefaultVipChoice().(*PerSiteSrv6NetworkType_AnycastVip); ok {
		return x.AnycastVip
	}
	return ""
}

func (m *PerSiteSrv6NetworkType) GetFleetVip() *AnyCastVIPFleetType {
	if x, ok := m.GetDefaultVipChoice().(*PerSiteSrv6NetworkType_FleetVip); ok {
		return x.FleetVip
	}
	return nil
}

func (m *PerSiteSrv6NetworkType) GetInterfaceIpSnatPool() *ves_io_schema4.Empty {
	if x, ok := m.GetSnatPoolChoice().(*PerSiteSrv6NetworkType_InterfaceIpSnatPool); ok {
		return x.InterfaceIpSnatPool
	}
	return nil
}

func (m *PerSiteSrv6NetworkType) GetSiteSnatPool() *SNATPoolSiteType {
	if x, ok := m.GetSnatPoolChoice().(*PerSiteSrv6NetworkType_SiteSnatPool); ok {
		return x.SiteSnatPool
	}
	return nil
}

func (m *PerSiteSrv6NetworkType) GetFleetSnatPool() *SNATPoolFleetType {
	if x, ok := m.GetSnatPoolChoice().(*PerSiteSrv6NetworkType_FleetSnatPool); ok {
		return x.FleetSnatPool
	}
	return nil
}

func (m *PerSiteSrv6NetworkType) GetSlice() *ves_io_schema_views.ObjectRefType {
	if m != nil {
		return m.Slice
	}
	return nil
}

func (m *PerSiteSrv6NetworkType) GetFleets() []*ves_io_schema_views.ObjectRefType {
	if m != nil {
		return m.Fleets
	}
	return nil
}

func (m *PerSiteSrv6NetworkType) GetAccessNetworkRtargets() []*ves_io_schema4.RouteTarget {
	if m != nil {
		return m.AccessNetworkRtargets
	}
	return nil
}

func (m *PerSiteSrv6NetworkType) GetInternetRtargets() []*ves_io_schema4.RouteTarget {
	if m != nil {
		return m.InternetRtargets
	}
	return nil
}

func (m *PerSiteSrv6NetworkType) GetEnterpriseNetworkRtargets() []*ves_io_schema4.RouteTarget {
	if m != nil {
		return m.EnterpriseNetworkRtargets
	}
	return nil
}

func (m *PerSiteSrv6NetworkType) GetExportRtargets() []*ves_io_schema4.RouteTarget {
	if m != nil {
		return m.ExportRtargets
	}
	return nil
}

func (m *PerSiteSrv6NetworkType) GetRemoteSidStatsPlen() uint32 {
	if m != nil {
		return m.RemoteSidStatsPlen
	}
	return 0
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*PerSiteSrv6NetworkType) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _PerSiteSrv6NetworkType_OneofMarshaler, _PerSiteSrv6NetworkType_OneofUnmarshaler, _PerSiteSrv6NetworkType_OneofSizer, []interface{}{
		(*PerSiteSrv6NetworkType_NoNamespaceNetwork)(nil),
		(*PerSiteSrv6NetworkType_Srv6NetworkNsParams)(nil),
		(*PerSiteSrv6NetworkType_InterfaceIpVip)(nil),
		(*PerSiteSrv6NetworkType_AnycastVip)(nil),
		(*PerSiteSrv6NetworkType_FleetVip)(nil),
		(*PerSiteSrv6NetworkType_InterfaceIpSnatPool)(nil),
		(*PerSiteSrv6NetworkType_SiteSnatPool)(nil),
		(*PerSiteSrv6NetworkType_FleetSnatPool)(nil),
	}
}

func _PerSiteSrv6NetworkType_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*PerSiteSrv6NetworkType)
	// namespace_choice
	switch x := m.NamespaceChoice.(type) {
	case *PerSiteSrv6NetworkType_NoNamespaceNetwork:
		_ = b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.NoNamespaceNetwork); err != nil {
			return err
		}
	case *PerSiteSrv6NetworkType_Srv6NetworkNsParams:
		_ = b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Srv6NetworkNsParams); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("PerSiteSrv6NetworkType.NamespaceChoice has unexpected type %T", x)
	}
	// default_vip_choice
	switch x := m.DefaultVipChoice.(type) {
	case *PerSiteSrv6NetworkType_InterfaceIpVip:
		_ = b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.InterfaceIpVip); err != nil {
			return err
		}
	case *PerSiteSrv6NetworkType_AnycastVip:
		_ = b.EncodeVarint(6<<3 | proto.WireBytes)
		_ = b.EncodeStringBytes(x.AnycastVip)
	case *PerSiteSrv6NetworkType_FleetVip:
		_ = b.EncodeVarint(7<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.FleetVip); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("PerSiteSrv6NetworkType.DefaultVipChoice has unexpected type %T", x)
	}
	// snat_pool_choice
	switch x := m.SnatPoolChoice.(type) {
	case *PerSiteSrv6NetworkType_InterfaceIpSnatPool:
		_ = b.EncodeVarint(9<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.InterfaceIpSnatPool); err != nil {
			return err
		}
	case *PerSiteSrv6NetworkType_SiteSnatPool:
		_ = b.EncodeVarint(10<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.SiteSnatPool); err != nil {
			return err
		}
	case *PerSiteSrv6NetworkType_FleetSnatPool:
		_ = b.EncodeVarint(11<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.FleetSnatPool); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("PerSiteSrv6NetworkType.SnatPoolChoice has unexpected type %T", x)
	}
	return nil
}

func _PerSiteSrv6NetworkType_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*PerSiteSrv6NetworkType)
	switch tag {
	case 2: // namespace_choice.no_namespace_network
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.NamespaceChoice = &PerSiteSrv6NetworkType_NoNamespaceNetwork{msg}
		return true, err
	case 3: // namespace_choice.srv6_network_ns_params
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Srv6NetworkNsParametersType)
		err := b.DecodeMessage(msg)
		m.NamespaceChoice = &PerSiteSrv6NetworkType_Srv6NetworkNsParams{msg}
		return true, err
	case 5: // default_vip_choice.interface_ip_vip
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.DefaultVipChoice = &PerSiteSrv6NetworkType_InterfaceIpVip{msg}
		return true, err
	case 6: // default_vip_choice.anycast_vip
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.DefaultVipChoice = &PerSiteSrv6NetworkType_AnycastVip{x}
		return true, err
	case 7: // default_vip_choice.fleet_vip
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(AnyCastVIPFleetType)
		err := b.DecodeMessage(msg)
		m.DefaultVipChoice = &PerSiteSrv6NetworkType_FleetVip{msg}
		return true, err
	case 9: // snat_pool_choice.interface_ip_snat_pool
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.SnatPoolChoice = &PerSiteSrv6NetworkType_InterfaceIpSnatPool{msg}
		return true, err
	case 10: // snat_pool_choice.site_snat_pool
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(SNATPoolSiteType)
		err := b.DecodeMessage(msg)
		m.SnatPoolChoice = &PerSiteSrv6NetworkType_SiteSnatPool{msg}
		return true, err
	case 11: // snat_pool_choice.fleet_snat_pool
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(SNATPoolFleetType)
		err := b.DecodeMessage(msg)
		m.SnatPoolChoice = &PerSiteSrv6NetworkType_FleetSnatPool{msg}
		return true, err
	default:
		return false, nil
	}
}

func _PerSiteSrv6NetworkType_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*PerSiteSrv6NetworkType)
	// namespace_choice
	switch x := m.NamespaceChoice.(type) {
	case *PerSiteSrv6NetworkType_NoNamespaceNetwork:
		s := proto.Size(x.NoNamespaceNetwork)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *PerSiteSrv6NetworkType_Srv6NetworkNsParams:
		s := proto.Size(x.Srv6NetworkNsParams)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	// default_vip_choice
	switch x := m.DefaultVipChoice.(type) {
	case *PerSiteSrv6NetworkType_InterfaceIpVip:
		s := proto.Size(x.InterfaceIpVip)
		n += proto.SizeVarint(5<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *PerSiteSrv6NetworkType_AnycastVip:
		n += proto.SizeVarint(6<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.AnycastVip)))
		n += len(x.AnycastVip)
	case *PerSiteSrv6NetworkType_FleetVip:
		s := proto.Size(x.FleetVip)
		n += proto.SizeVarint(7<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	// snat_pool_choice
	switch x := m.SnatPoolChoice.(type) {
	case *PerSiteSrv6NetworkType_InterfaceIpSnatPool:
		s := proto.Size(x.InterfaceIpSnatPool)
		n += proto.SizeVarint(9<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *PerSiteSrv6NetworkType_SiteSnatPool:
		s := proto.Size(x.SiteSnatPool)
		n += proto.SizeVarint(10<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *PerSiteSrv6NetworkType_FleetSnatPool:
		s := proto.Size(x.FleetSnatPool)
		n += proto.SizeVarint(11<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// Next Hop Interface List
//
// x-displayName: "Next Hop Interface List"
// List of interfaces for next hop
type NextHopInterfaceList struct {
	// Interface List
	//
	// x-displayName: "Interface List"
	// x-required
	// List of interfaces for next hop
	Interfaces []*ves_io_schema_views.ObjectRefType `protobuf:"bytes,1,rep,name=interfaces" json:"interfaces,omitempty"`
}

func (m *NextHopInterfaceList) Reset()                    { *m = NextHopInterfaceList{} }
func (*NextHopInterfaceList) ProtoMessage()               {}
func (*NextHopInterfaceList) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{10} }

func (m *NextHopInterfaceList) GetInterfaces() []*ves_io_schema_views.ObjectRefType {
	if m != nil {
		return m.Interfaces
	}
	return nil
}

// Static Route
//
// x-displayName: "Static Route"
// Defines a static route, configuring a list of prefixes and a next-hop to be used for them
type StaticRouteViewType struct {
	// IP Prefixes
	//
	// x-displayName: "IP Prefixes"
	// x-required
	// List of route prefixes that have common next hop and attributes
	IpPrefixes []string `protobuf:"bytes,1,rep,name=ip_prefixes,json=ipPrefixes" json:"ip_prefixes,omitempty"`
	// Next Hop Choice
	//
	// x-displayName: "Select Type of Next Hop"
	// x-required
	// Select type of next hop default gateway, ip address or interface
	//
	// Types that are valid to be assigned to NextHopChoice:
	//	*StaticRouteViewType_IpAddress
	//	*StaticRouteViewType_Interface
	//	*StaticRouteViewType_DefaultGateway
	NextHopChoice isStaticRouteViewType_NextHopChoice `protobuf_oneof:"next_hop_choice"`
	// Attributes
	//
	// x-displayName: "Attributes"
	// List of attributes that control forwarding, dynamic routing and control plane(host) reachability
	Attrs []ves_io_schema4.RouteAttrType `protobuf:"varint,6,rep,packed,name=attrs,enum=ves.io.schema.RouteAttrType" json:"attrs,omitempty"`
}

func (m *StaticRouteViewType) Reset()                    { *m = StaticRouteViewType{} }
func (*StaticRouteViewType) ProtoMessage()               {}
func (*StaticRouteViewType) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{11} }

type isStaticRouteViewType_NextHopChoice interface {
	isStaticRouteViewType_NextHopChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type StaticRouteViewType_IpAddress struct {
	IpAddress string `protobuf:"bytes,3,opt,name=ip_address,json=ipAddress,proto3,oneof"`
}
type StaticRouteViewType_Interface struct {
	Interface *ves_io_schema_views.ObjectRefType `protobuf:"bytes,4,opt,name=interface,oneof"`
}
type StaticRouteViewType_DefaultGateway struct {
	DefaultGateway *ves_io_schema4.Empty `protobuf:"bytes,5,opt,name=default_gateway,json=defaultGateway,oneof"`
}

func (*StaticRouteViewType_IpAddress) isStaticRouteViewType_NextHopChoice()      {}
func (*StaticRouteViewType_Interface) isStaticRouteViewType_NextHopChoice()      {}
func (*StaticRouteViewType_DefaultGateway) isStaticRouteViewType_NextHopChoice() {}

func (m *StaticRouteViewType) GetNextHopChoice() isStaticRouteViewType_NextHopChoice {
	if m != nil {
		return m.NextHopChoice
	}
	return nil
}

func (m *StaticRouteViewType) GetIpPrefixes() []string {
	if m != nil {
		return m.IpPrefixes
	}
	return nil
}

func (m *StaticRouteViewType) GetIpAddress() string {
	if x, ok := m.GetNextHopChoice().(*StaticRouteViewType_IpAddress); ok {
		return x.IpAddress
	}
	return ""
}

func (m *StaticRouteViewType) GetInterface() *ves_io_schema_views.ObjectRefType {
	if x, ok := m.GetNextHopChoice().(*StaticRouteViewType_Interface); ok {
		return x.Interface
	}
	return nil
}

func (m *StaticRouteViewType) GetDefaultGateway() *ves_io_schema4.Empty {
	if x, ok := m.GetNextHopChoice().(*StaticRouteViewType_DefaultGateway); ok {
		return x.DefaultGateway
	}
	return nil
}

func (m *StaticRouteViewType) GetAttrs() []ves_io_schema4.RouteAttrType {
	if m != nil {
		return m.Attrs
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*StaticRouteViewType) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _StaticRouteViewType_OneofMarshaler, _StaticRouteViewType_OneofUnmarshaler, _StaticRouteViewType_OneofSizer, []interface{}{
		(*StaticRouteViewType_IpAddress)(nil),
		(*StaticRouteViewType_Interface)(nil),
		(*StaticRouteViewType_DefaultGateway)(nil),
	}
}

func _StaticRouteViewType_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*StaticRouteViewType)
	// next_hop_choice
	switch x := m.NextHopChoice.(type) {
	case *StaticRouteViewType_IpAddress:
		_ = b.EncodeVarint(3<<3 | proto.WireBytes)
		_ = b.EncodeStringBytes(x.IpAddress)
	case *StaticRouteViewType_Interface:
		_ = b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Interface); err != nil {
			return err
		}
	case *StaticRouteViewType_DefaultGateway:
		_ = b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.DefaultGateway); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("StaticRouteViewType.NextHopChoice has unexpected type %T", x)
	}
	return nil
}

func _StaticRouteViewType_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*StaticRouteViewType)
	switch tag {
	case 3: // next_hop_choice.ip_address
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.NextHopChoice = &StaticRouteViewType_IpAddress{x}
		return true, err
	case 4: // next_hop_choice.interface
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema_views.ObjectRefType)
		err := b.DecodeMessage(msg)
		m.NextHopChoice = &StaticRouteViewType_Interface{msg}
		return true, err
	case 5: // next_hop_choice.default_gateway
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.NextHopChoice = &StaticRouteViewType_DefaultGateway{msg}
		return true, err
	default:
		return false, nil
	}
}

func _StaticRouteViewType_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*StaticRouteViewType)
	// next_hop_choice
	switch x := m.NextHopChoice.(type) {
	case *StaticRouteViewType_IpAddress:
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.IpAddress)))
		n += len(x.IpAddress)
	case *StaticRouteViewType_Interface:
		s := proto.Size(x.Interface)
		n += proto.SizeVarint(4<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *StaticRouteViewType_DefaultGateway:
		s := proto.Size(x.DefaultGateway)
		n += proto.SizeVarint(5<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// Active PBR policies
//
// x-displayName: "Active PBR Policies"
// Currently active PBR policies on the network connector
type ActivePBRPoliciesType struct {
	// Forward Proxy Policy Based Routing
	//
	// x-displayName: "Forward Proxy Policy Based Routing"
	// Ordered List of Forward Proxy(L7) policies to control how traffic is forwarded over outside interfaces.
	// These policies are applied before network PBR policies
	ForwardProxyPbrPolicies []*ves_io_schema_views.ObjectRefType `protobuf:"bytes,1,rep,name=forward_proxy_pbr_policies,json=forwardProxyPbrPolicies" json:"forward_proxy_pbr_policies,omitempty"`
	// Network Policy Based Routing
	//
	// x-displayName: "Network Policy Based Routing"
	// Ordered List of Network(L3/L4) policies to control how traffic is forwarded over outside interfaces.
	// These policies are applied after forward proxy PBR policies
	NetworkPbrPolicies []*ves_io_schema_views.ObjectRefType `protobuf:"bytes,2,rep,name=network_pbr_policies,json=networkPbrPolicies" json:"network_pbr_policies,omitempty"`
}

func (m *ActivePBRPoliciesType) Reset()                    { *m = ActivePBRPoliciesType{} }
func (*ActivePBRPoliciesType) ProtoMessage()               {}
func (*ActivePBRPoliciesType) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{12} }

func (m *ActivePBRPoliciesType) GetForwardProxyPbrPolicies() []*ves_io_schema_views.ObjectRefType {
	if m != nil {
		return m.ForwardProxyPbrPolicies
	}
	return nil
}

func (m *ActivePBRPoliciesType) GetNetworkPbrPolicies() []*ves_io_schema_views.ObjectRefType {
	if m != nil {
		return m.NetworkPbrPolicies
	}
	return nil
}

// Per Tenant Anycast VIP
//
// x-displayName: "Per Tenant Anycast VIP"
// Per tenant anycast vip
type PerTenantVIPType struct {
	// Per Tenant VIP
	//
	// x-displayName: "Per Tenant VIP"
	// Per tenant anycast VIP for the Virtual network
	TenantVipMap map[string]string `protobuf:"bytes,1,rep,name=tenant_vip_map,json=tenantVipMap" json:"tenant_vip_map,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *PerTenantVIPType) Reset()                    { *m = PerTenantVIPType{} }
func (*PerTenantVIPType) ProtoMessage()               {}
func (*PerTenantVIPType) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{13} }

func (m *PerTenantVIPType) GetTenantVipMap() map[string]string {
	if m != nil {
		return m.TenantVipMap
	}
	return nil
}

// Global Specification
//
// x-displayName: "Global Specification"
// Virtual Network specification
type GlobalSpecType struct {
	// subnets
	//
	// x-displayName: "Subnets"
	// Subnets valid in the virtual network
	// Subnets are only used to give ip address to interfaces of pods or VMs in this virtual network
	Subnets []*ves_io_schema3.IpSubnetType `protobuf:"bytes,2,rep,name=subnets" json:"subnets,omitempty"`
	// type
	//
	// x-displayName: "Network Type"
	// x-required
	// Type of virtual network
	Type ves_io_schema3.VirtualNetworkType `protobuf:"varint,3,opt,name=type,proto3,enum=ves.io.schema.VirtualNetworkType" json:"type,omitempty"`
	// static_routes
	//
	// x-displayName: "Static Routes"
	// List of static routes on the virtual network
	StaticRoutes []*ves_io_schema4.StaticRouteType `protobuf:"bytes,5,rep,name=static_routes,json=staticRoutes" json:"static_routes,omitempty"`
	// Network Type Choice
	//
	// x-displayName: "Select Type of Network"
	// x-required
	// Select network type, Global, inside or outside
	//
	// Types that are valid to be assigned to NetworkChoice:
	//	*GlobalSpecType_GlobalNetwork
	//	*GlobalSpecType_SiteLocalNetwork
	//	*GlobalSpecType_SiteLocalInsideNetwork
	//	*GlobalSpecType_InsideNetwork
	//	*GlobalSpecType_LegacyType
	//	*GlobalSpecType_PrivateNetwork
	//	*GlobalSpecType_Srv6Network
	NetworkChoice isGlobalSpecType_NetworkChoice `protobuf_oneof:"network_choice"`
	// VoltADN Private Network Parameters
	//
	// x-displayName: "VoltADN Private Network Parameters"
	// Network parameters configured buy SRE,  after opening a support ticket
	PrivateNetworkParameters *VoltADNPrivateNetworkType `protobuf:"bytes,15,opt,name=private_network_parameters,json=privateNetworkParameters" json:"private_network_parameters,omitempty"`
	// Default VIP
	//
	// x-displayName: "Default VIP"
	// Calculated default VIP
	//
	// Types that are valid to be assigned to DefaultVipChoice:
	//	*GlobalSpecType_TenantVip
	//	*GlobalSpecType_FleetVip
	DefaultVipChoice isGlobalSpecType_DefaultVipChoice `protobuf_oneof:"default_vip_choice"`
	// SNAT Pool
	//
	// x-displayName: "SNAT Pool"
	// SNAT pool configuration for this network
	//
	// Types that are valid to be assigned to SnatPoolChoice:
	//	*GlobalSpecType_InterfaceIp
	//	*GlobalSpecType_SiteSnatPool
	//	*GlobalSpecType_FleetSnatPool
	SnatPoolChoice isGlobalSpecType_SnatPoolChoice `protobuf_oneof:"snat_pool_choice"`
	// import_rtarget_strs
	//
	// x-displayName: "Import Route Target Strings"
	// Import Route Targets in string format.
	ImportRtargetStrs []string `protobuf:"bytes,1000,rep,name=import_rtarget_strs,json=importRtargetStrs" json:"import_rtarget_strs,omitempty"`
	// export_rtarget_strs
	//
	// x-displayName: "Export Route Target Strings"
	// Export Route Targets in string format.
	ExportRtargetStrs []string `protobuf:"bytes,1001,rep,name=export_rtarget_strs,json=exportRtargetStrs" json:"export_rtarget_strs,omitempty"`
	// fleet_refs
	//
	// x-displayName: "Fleet Refs"
	// The set of sites where this virtual network is to be instantiated.
	FleetRefs []*ves_io_schema4.ObjectRefType `protobuf:"bytes,1002,rep,name=fleet_refs,json=fleetRefs" json:"fleet_refs,omitempty"`
	// slice_ref
	//
	// x-displayName: "SRv6 Network Slice"
	// Reference to srv6_network_slice for SRv6 VN.
	SliceRef []*ves_io_schema4.ObjectRefType `protobuf:"bytes,1003,rep,name=slice_ref,json=sliceRef" json:"slice_ref,omitempty"`
}

func (m *GlobalSpecType) Reset()                    { *m = GlobalSpecType{} }
func (*GlobalSpecType) ProtoMessage()               {}
func (*GlobalSpecType) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{14} }

type isGlobalSpecType_NetworkChoice interface {
	isGlobalSpecType_NetworkChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isGlobalSpecType_DefaultVipChoice interface {
	isGlobalSpecType_DefaultVipChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isGlobalSpecType_SnatPoolChoice interface {
	isGlobalSpecType_SnatPoolChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type GlobalSpecType_GlobalNetwork struct {
	GlobalNetwork *ves_io_schema4.Empty `protobuf:"bytes,7,opt,name=global_network,json=globalNetwork,oneof"`
}
type GlobalSpecType_SiteLocalNetwork struct {
	SiteLocalNetwork *ves_io_schema4.Empty `protobuf:"bytes,8,opt,name=site_local_network,json=siteLocalNetwork,oneof"`
}
type GlobalSpecType_SiteLocalInsideNetwork struct {
	SiteLocalInsideNetwork *ves_io_schema4.Empty `protobuf:"bytes,9,opt,name=site_local_inside_network,json=siteLocalInsideNetwork,oneof"`
}
type GlobalSpecType_InsideNetwork struct {
	InsideNetwork *ves_io_schema4.Empty `protobuf:"bytes,10,opt,name=inside_network,json=insideNetwork,oneof"`
}
type GlobalSpecType_LegacyType struct {
	LegacyType ves_io_schema3.VirtualNetworkType `protobuf:"varint,11,opt,name=legacy_type,json=legacyType,proto3,enum=ves.io.schema.VirtualNetworkType,oneof"`
}
type GlobalSpecType_PrivateNetwork struct {
	PrivateNetwork *ves_io_schema4.Empty `protobuf:"bytes,13,opt,name=private_network,json=privateNetwork,oneof"`
}
type GlobalSpecType_Srv6Network struct {
	Srv6Network *PerSiteSrv6NetworkType `protobuf:"bytes,14,opt,name=srv6_network,json=srv6Network,oneof"`
}
type GlobalSpecType_TenantVip struct {
	TenantVip *PerTenantVIPType `protobuf:"bytes,17,opt,name=tenant_vip,json=tenantVip,oneof"`
}
type GlobalSpecType_FleetVip struct {
	FleetVip *AnyCastVIPFleetType `protobuf:"bytes,18,opt,name=fleet_vip,json=fleetVip,oneof"`
}
type GlobalSpecType_InterfaceIp struct {
	InterfaceIp *ves_io_schema4.Empty `protobuf:"bytes,20,opt,name=interface_ip,json=interfaceIp,oneof"`
}
type GlobalSpecType_SiteSnatPool struct {
	SiteSnatPool *SNATPoolSiteType `protobuf:"bytes,21,opt,name=site_snat_pool,json=siteSnatPool,oneof"`
}
type GlobalSpecType_FleetSnatPool struct {
	FleetSnatPool *SNATPoolFleetType `protobuf:"bytes,22,opt,name=fleet_snat_pool,json=fleetSnatPool,oneof"`
}

func (*GlobalSpecType_GlobalNetwork) isGlobalSpecType_NetworkChoice()          {}
func (*GlobalSpecType_SiteLocalNetwork) isGlobalSpecType_NetworkChoice()       {}
func (*GlobalSpecType_SiteLocalInsideNetwork) isGlobalSpecType_NetworkChoice() {}
func (*GlobalSpecType_InsideNetwork) isGlobalSpecType_NetworkChoice()          {}
func (*GlobalSpecType_LegacyType) isGlobalSpecType_NetworkChoice()             {}
func (*GlobalSpecType_PrivateNetwork) isGlobalSpecType_NetworkChoice()         {}
func (*GlobalSpecType_Srv6Network) isGlobalSpecType_NetworkChoice()            {}
func (*GlobalSpecType_TenantVip) isGlobalSpecType_DefaultVipChoice()           {}
func (*GlobalSpecType_FleetVip) isGlobalSpecType_DefaultVipChoice()            {}
func (*GlobalSpecType_InterfaceIp) isGlobalSpecType_SnatPoolChoice()           {}
func (*GlobalSpecType_SiteSnatPool) isGlobalSpecType_SnatPoolChoice()          {}
func (*GlobalSpecType_FleetSnatPool) isGlobalSpecType_SnatPoolChoice()         {}

func (m *GlobalSpecType) GetNetworkChoice() isGlobalSpecType_NetworkChoice {
	if m != nil {
		return m.NetworkChoice
	}
	return nil
}
func (m *GlobalSpecType) GetDefaultVipChoice() isGlobalSpecType_DefaultVipChoice {
	if m != nil {
		return m.DefaultVipChoice
	}
	return nil
}
func (m *GlobalSpecType) GetSnatPoolChoice() isGlobalSpecType_SnatPoolChoice {
	if m != nil {
		return m.SnatPoolChoice
	}
	return nil
}

func (m *GlobalSpecType) GetSubnets() []*ves_io_schema3.IpSubnetType {
	if m != nil {
		return m.Subnets
	}
	return nil
}

func (m *GlobalSpecType) GetType() ves_io_schema3.VirtualNetworkType {
	if m != nil {
		return m.Type
	}
	return ves_io_schema3.VIRTUAL_NETWORK_SITE_LOCAL
}

func (m *GlobalSpecType) GetStaticRoutes() []*ves_io_schema4.StaticRouteType {
	if m != nil {
		return m.StaticRoutes
	}
	return nil
}

func (m *GlobalSpecType) GetGlobalNetwork() *ves_io_schema4.Empty {
	if x, ok := m.GetNetworkChoice().(*GlobalSpecType_GlobalNetwork); ok {
		return x.GlobalNetwork
	}
	return nil
}

func (m *GlobalSpecType) GetSiteLocalNetwork() *ves_io_schema4.Empty {
	if x, ok := m.GetNetworkChoice().(*GlobalSpecType_SiteLocalNetwork); ok {
		return x.SiteLocalNetwork
	}
	return nil
}

func (m *GlobalSpecType) GetSiteLocalInsideNetwork() *ves_io_schema4.Empty {
	if x, ok := m.GetNetworkChoice().(*GlobalSpecType_SiteLocalInsideNetwork); ok {
		return x.SiteLocalInsideNetwork
	}
	return nil
}

func (m *GlobalSpecType) GetInsideNetwork() *ves_io_schema4.Empty {
	if x, ok := m.GetNetworkChoice().(*GlobalSpecType_InsideNetwork); ok {
		return x.InsideNetwork
	}
	return nil
}

func (m *GlobalSpecType) GetLegacyType() ves_io_schema3.VirtualNetworkType {
	if x, ok := m.GetNetworkChoice().(*GlobalSpecType_LegacyType); ok {
		return x.LegacyType
	}
	return ves_io_schema3.VIRTUAL_NETWORK_SITE_LOCAL
}

func (m *GlobalSpecType) GetPrivateNetwork() *ves_io_schema4.Empty {
	if x, ok := m.GetNetworkChoice().(*GlobalSpecType_PrivateNetwork); ok {
		return x.PrivateNetwork
	}
	return nil
}

func (m *GlobalSpecType) GetSrv6Network() *PerSiteSrv6NetworkType {
	if x, ok := m.GetNetworkChoice().(*GlobalSpecType_Srv6Network); ok {
		return x.Srv6Network
	}
	return nil
}

func (m *GlobalSpecType) GetPrivateNetworkParameters() *VoltADNPrivateNetworkType {
	if m != nil {
		return m.PrivateNetworkParameters
	}
	return nil
}

func (m *GlobalSpecType) GetTenantVip() *PerTenantVIPType {
	if x, ok := m.GetDefaultVipChoice().(*GlobalSpecType_TenantVip); ok {
		return x.TenantVip
	}
	return nil
}

func (m *GlobalSpecType) GetFleetVip() *AnyCastVIPFleetType {
	if x, ok := m.GetDefaultVipChoice().(*GlobalSpecType_FleetVip); ok {
		return x.FleetVip
	}
	return nil
}

func (m *GlobalSpecType) GetInterfaceIp() *ves_io_schema4.Empty {
	if x, ok := m.GetSnatPoolChoice().(*GlobalSpecType_InterfaceIp); ok {
		return x.InterfaceIp
	}
	return nil
}

func (m *GlobalSpecType) GetSiteSnatPool() *SNATPoolSiteType {
	if x, ok := m.GetSnatPoolChoice().(*GlobalSpecType_SiteSnatPool); ok {
		return x.SiteSnatPool
	}
	return nil
}

func (m *GlobalSpecType) GetFleetSnatPool() *SNATPoolFleetType {
	if x, ok := m.GetSnatPoolChoice().(*GlobalSpecType_FleetSnatPool); ok {
		return x.FleetSnatPool
	}
	return nil
}

func (m *GlobalSpecType) GetImportRtargetStrs() []string {
	if m != nil {
		return m.ImportRtargetStrs
	}
	return nil
}

func (m *GlobalSpecType) GetExportRtargetStrs() []string {
	if m != nil {
		return m.ExportRtargetStrs
	}
	return nil
}

func (m *GlobalSpecType) GetFleetRefs() []*ves_io_schema4.ObjectRefType {
	if m != nil {
		return m.FleetRefs
	}
	return nil
}

func (m *GlobalSpecType) GetSliceRef() []*ves_io_schema4.ObjectRefType {
	if m != nil {
		return m.SliceRef
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*GlobalSpecType) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _GlobalSpecType_OneofMarshaler, _GlobalSpecType_OneofUnmarshaler, _GlobalSpecType_OneofSizer, []interface{}{
		(*GlobalSpecType_GlobalNetwork)(nil),
		(*GlobalSpecType_SiteLocalNetwork)(nil),
		(*GlobalSpecType_SiteLocalInsideNetwork)(nil),
		(*GlobalSpecType_InsideNetwork)(nil),
		(*GlobalSpecType_LegacyType)(nil),
		(*GlobalSpecType_PrivateNetwork)(nil),
		(*GlobalSpecType_Srv6Network)(nil),
		(*GlobalSpecType_TenantVip)(nil),
		(*GlobalSpecType_FleetVip)(nil),
		(*GlobalSpecType_InterfaceIp)(nil),
		(*GlobalSpecType_SiteSnatPool)(nil),
		(*GlobalSpecType_FleetSnatPool)(nil),
	}
}

func _GlobalSpecType_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*GlobalSpecType)
	// network_choice
	switch x := m.NetworkChoice.(type) {
	case *GlobalSpecType_GlobalNetwork:
		_ = b.EncodeVarint(7<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.GlobalNetwork); err != nil {
			return err
		}
	case *GlobalSpecType_SiteLocalNetwork:
		_ = b.EncodeVarint(8<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.SiteLocalNetwork); err != nil {
			return err
		}
	case *GlobalSpecType_SiteLocalInsideNetwork:
		_ = b.EncodeVarint(9<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.SiteLocalInsideNetwork); err != nil {
			return err
		}
	case *GlobalSpecType_InsideNetwork:
		_ = b.EncodeVarint(10<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.InsideNetwork); err != nil {
			return err
		}
	case *GlobalSpecType_LegacyType:
		_ = b.EncodeVarint(11<<3 | proto.WireVarint)
		_ = b.EncodeVarint(uint64(x.LegacyType))
	case *GlobalSpecType_PrivateNetwork:
		_ = b.EncodeVarint(13<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.PrivateNetwork); err != nil {
			return err
		}
	case *GlobalSpecType_Srv6Network:
		_ = b.EncodeVarint(14<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Srv6Network); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("GlobalSpecType.NetworkChoice has unexpected type %T", x)
	}
	// default_vip_choice
	switch x := m.DefaultVipChoice.(type) {
	case *GlobalSpecType_TenantVip:
		_ = b.EncodeVarint(17<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.TenantVip); err != nil {
			return err
		}
	case *GlobalSpecType_FleetVip:
		_ = b.EncodeVarint(18<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.FleetVip); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("GlobalSpecType.DefaultVipChoice has unexpected type %T", x)
	}
	// snat_pool_choice
	switch x := m.SnatPoolChoice.(type) {
	case *GlobalSpecType_InterfaceIp:
		_ = b.EncodeVarint(20<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.InterfaceIp); err != nil {
			return err
		}
	case *GlobalSpecType_SiteSnatPool:
		_ = b.EncodeVarint(21<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.SiteSnatPool); err != nil {
			return err
		}
	case *GlobalSpecType_FleetSnatPool:
		_ = b.EncodeVarint(22<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.FleetSnatPool); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("GlobalSpecType.SnatPoolChoice has unexpected type %T", x)
	}
	return nil
}

func _GlobalSpecType_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*GlobalSpecType)
	switch tag {
	case 7: // network_choice.global_network
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.NetworkChoice = &GlobalSpecType_GlobalNetwork{msg}
		return true, err
	case 8: // network_choice.site_local_network
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.NetworkChoice = &GlobalSpecType_SiteLocalNetwork{msg}
		return true, err
	case 9: // network_choice.site_local_inside_network
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.NetworkChoice = &GlobalSpecType_SiteLocalInsideNetwork{msg}
		return true, err
	case 10: // network_choice.inside_network
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.NetworkChoice = &GlobalSpecType_InsideNetwork{msg}
		return true, err
	case 11: // network_choice.legacy_type
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.NetworkChoice = &GlobalSpecType_LegacyType{ves_io_schema3.VirtualNetworkType(x)}
		return true, err
	case 13: // network_choice.private_network
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.NetworkChoice = &GlobalSpecType_PrivateNetwork{msg}
		return true, err
	case 14: // network_choice.srv6_network
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(PerSiteSrv6NetworkType)
		err := b.DecodeMessage(msg)
		m.NetworkChoice = &GlobalSpecType_Srv6Network{msg}
		return true, err
	case 17: // default_vip_choice.tenant_vip
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(PerTenantVIPType)
		err := b.DecodeMessage(msg)
		m.DefaultVipChoice = &GlobalSpecType_TenantVip{msg}
		return true, err
	case 18: // default_vip_choice.fleet_vip
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(AnyCastVIPFleetType)
		err := b.DecodeMessage(msg)
		m.DefaultVipChoice = &GlobalSpecType_FleetVip{msg}
		return true, err
	case 20: // snat_pool_choice.interface_ip
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.SnatPoolChoice = &GlobalSpecType_InterfaceIp{msg}
		return true, err
	case 21: // snat_pool_choice.site_snat_pool
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(SNATPoolSiteType)
		err := b.DecodeMessage(msg)
		m.SnatPoolChoice = &GlobalSpecType_SiteSnatPool{msg}
		return true, err
	case 22: // snat_pool_choice.fleet_snat_pool
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(SNATPoolFleetType)
		err := b.DecodeMessage(msg)
		m.SnatPoolChoice = &GlobalSpecType_FleetSnatPool{msg}
		return true, err
	default:
		return false, nil
	}
}

func _GlobalSpecType_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*GlobalSpecType)
	// network_choice
	switch x := m.NetworkChoice.(type) {
	case *GlobalSpecType_GlobalNetwork:
		s := proto.Size(x.GlobalNetwork)
		n += proto.SizeVarint(7<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *GlobalSpecType_SiteLocalNetwork:
		s := proto.Size(x.SiteLocalNetwork)
		n += proto.SizeVarint(8<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *GlobalSpecType_SiteLocalInsideNetwork:
		s := proto.Size(x.SiteLocalInsideNetwork)
		n += proto.SizeVarint(9<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *GlobalSpecType_InsideNetwork:
		s := proto.Size(x.InsideNetwork)
		n += proto.SizeVarint(10<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *GlobalSpecType_LegacyType:
		n += proto.SizeVarint(11<<3 | proto.WireVarint)
		n += proto.SizeVarint(uint64(x.LegacyType))
	case *GlobalSpecType_PrivateNetwork:
		s := proto.Size(x.PrivateNetwork)
		n += proto.SizeVarint(13<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *GlobalSpecType_Srv6Network:
		s := proto.Size(x.Srv6Network)
		n += proto.SizeVarint(14<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	// default_vip_choice
	switch x := m.DefaultVipChoice.(type) {
	case *GlobalSpecType_TenantVip:
		s := proto.Size(x.TenantVip)
		n += proto.SizeVarint(17<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *GlobalSpecType_FleetVip:
		s := proto.Size(x.FleetVip)
		n += proto.SizeVarint(18<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	// snat_pool_choice
	switch x := m.SnatPoolChoice.(type) {
	case *GlobalSpecType_InterfaceIp:
		s := proto.Size(x.InterfaceIp)
		n += proto.SizeVarint(20<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *GlobalSpecType_SiteSnatPool:
		s := proto.Size(x.SiteSnatPool)
		n += proto.SizeVarint(21<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *GlobalSpecType_FleetSnatPool:
		s := proto.Size(x.FleetSnatPool)
		n += proto.SizeVarint(22<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// Create virtual network
//
// x-displayName: "Create Virtual Network"
// Create virtual network in given namespace
type CreateSpecType struct {
	// Types that are valid to be assigned to NetworkChoice:
	//	*CreateSpecType_GlobalNetwork
	//	*CreateSpecType_SiteLocalNetwork
	//	*CreateSpecType_SiteLocalInsideNetwork
	//	*CreateSpecType_LegacyType
	//	*CreateSpecType_Srv6Network
	NetworkChoice isCreateSpecType_NetworkChoice `protobuf_oneof:"network_choice"`
	// static_routes
	//
	// x-displayName: "Static Routes"
	// List of static routes on the virtual network
	StaticRoutes []*StaticRouteViewType `protobuf:"bytes,12,rep,name=static_routes,json=staticRoutes" json:"static_routes,omitempty"`
}

func (m *CreateSpecType) Reset()                    { *m = CreateSpecType{} }
func (*CreateSpecType) ProtoMessage()               {}
func (*CreateSpecType) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{15} }

type isCreateSpecType_NetworkChoice interface {
	isCreateSpecType_NetworkChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type CreateSpecType_GlobalNetwork struct {
	GlobalNetwork *ves_io_schema4.Empty `protobuf:"bytes,7,opt,name=global_network,json=globalNetwork,oneof"`
}
type CreateSpecType_SiteLocalNetwork struct {
	SiteLocalNetwork *ves_io_schema4.Empty `protobuf:"bytes,8,opt,name=site_local_network,json=siteLocalNetwork,oneof"`
}
type CreateSpecType_SiteLocalInsideNetwork struct {
	SiteLocalInsideNetwork *ves_io_schema4.Empty `protobuf:"bytes,9,opt,name=site_local_inside_network,json=siteLocalInsideNetwork,oneof"`
}
type CreateSpecType_LegacyType struct {
	LegacyType ves_io_schema3.VirtualNetworkType `protobuf:"varint,11,opt,name=legacy_type,json=legacyType,proto3,enum=ves.io.schema.VirtualNetworkType,oneof"`
}
type CreateSpecType_Srv6Network struct {
	Srv6Network *PerSiteSrv6NetworkType `protobuf:"bytes,14,opt,name=srv6_network,json=srv6Network,oneof"`
}

func (*CreateSpecType_GlobalNetwork) isCreateSpecType_NetworkChoice()          {}
func (*CreateSpecType_SiteLocalNetwork) isCreateSpecType_NetworkChoice()       {}
func (*CreateSpecType_SiteLocalInsideNetwork) isCreateSpecType_NetworkChoice() {}
func (*CreateSpecType_LegacyType) isCreateSpecType_NetworkChoice()             {}
func (*CreateSpecType_Srv6Network) isCreateSpecType_NetworkChoice()            {}

func (m *CreateSpecType) GetNetworkChoice() isCreateSpecType_NetworkChoice {
	if m != nil {
		return m.NetworkChoice
	}
	return nil
}

func (m *CreateSpecType) GetGlobalNetwork() *ves_io_schema4.Empty {
	if x, ok := m.GetNetworkChoice().(*CreateSpecType_GlobalNetwork); ok {
		return x.GlobalNetwork
	}
	return nil
}

func (m *CreateSpecType) GetSiteLocalNetwork() *ves_io_schema4.Empty {
	if x, ok := m.GetNetworkChoice().(*CreateSpecType_SiteLocalNetwork); ok {
		return x.SiteLocalNetwork
	}
	return nil
}

func (m *CreateSpecType) GetSiteLocalInsideNetwork() *ves_io_schema4.Empty {
	if x, ok := m.GetNetworkChoice().(*CreateSpecType_SiteLocalInsideNetwork); ok {
		return x.SiteLocalInsideNetwork
	}
	return nil
}

func (m *CreateSpecType) GetLegacyType() ves_io_schema3.VirtualNetworkType {
	if x, ok := m.GetNetworkChoice().(*CreateSpecType_LegacyType); ok {
		return x.LegacyType
	}
	return ves_io_schema3.VIRTUAL_NETWORK_SITE_LOCAL
}

func (m *CreateSpecType) GetSrv6Network() *PerSiteSrv6NetworkType {
	if x, ok := m.GetNetworkChoice().(*CreateSpecType_Srv6Network); ok {
		return x.Srv6Network
	}
	return nil
}

func (m *CreateSpecType) GetStaticRoutes() []*StaticRouteViewType {
	if m != nil {
		return m.StaticRoutes
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*CreateSpecType) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _CreateSpecType_OneofMarshaler, _CreateSpecType_OneofUnmarshaler, _CreateSpecType_OneofSizer, []interface{}{
		(*CreateSpecType_GlobalNetwork)(nil),
		(*CreateSpecType_SiteLocalNetwork)(nil),
		(*CreateSpecType_SiteLocalInsideNetwork)(nil),
		(*CreateSpecType_LegacyType)(nil),
		(*CreateSpecType_Srv6Network)(nil),
	}
}

func _CreateSpecType_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*CreateSpecType)
	// network_choice
	switch x := m.NetworkChoice.(type) {
	case *CreateSpecType_GlobalNetwork:
		_ = b.EncodeVarint(7<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.GlobalNetwork); err != nil {
			return err
		}
	case *CreateSpecType_SiteLocalNetwork:
		_ = b.EncodeVarint(8<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.SiteLocalNetwork); err != nil {
			return err
		}
	case *CreateSpecType_SiteLocalInsideNetwork:
		_ = b.EncodeVarint(9<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.SiteLocalInsideNetwork); err != nil {
			return err
		}
	case *CreateSpecType_LegacyType:
		_ = b.EncodeVarint(11<<3 | proto.WireVarint)
		_ = b.EncodeVarint(uint64(x.LegacyType))
	case *CreateSpecType_Srv6Network:
		_ = b.EncodeVarint(14<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Srv6Network); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("CreateSpecType.NetworkChoice has unexpected type %T", x)
	}
	return nil
}

func _CreateSpecType_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*CreateSpecType)
	switch tag {
	case 7: // network_choice.global_network
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.NetworkChoice = &CreateSpecType_GlobalNetwork{msg}
		return true, err
	case 8: // network_choice.site_local_network
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.NetworkChoice = &CreateSpecType_SiteLocalNetwork{msg}
		return true, err
	case 9: // network_choice.site_local_inside_network
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.NetworkChoice = &CreateSpecType_SiteLocalInsideNetwork{msg}
		return true, err
	case 11: // network_choice.legacy_type
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.NetworkChoice = &CreateSpecType_LegacyType{ves_io_schema3.VirtualNetworkType(x)}
		return true, err
	case 14: // network_choice.srv6_network
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(PerSiteSrv6NetworkType)
		err := b.DecodeMessage(msg)
		m.NetworkChoice = &CreateSpecType_Srv6Network{msg}
		return true, err
	default:
		return false, nil
	}
}

func _CreateSpecType_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*CreateSpecType)
	// network_choice
	switch x := m.NetworkChoice.(type) {
	case *CreateSpecType_GlobalNetwork:
		s := proto.Size(x.GlobalNetwork)
		n += proto.SizeVarint(7<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *CreateSpecType_SiteLocalNetwork:
		s := proto.Size(x.SiteLocalNetwork)
		n += proto.SizeVarint(8<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *CreateSpecType_SiteLocalInsideNetwork:
		s := proto.Size(x.SiteLocalInsideNetwork)
		n += proto.SizeVarint(9<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *CreateSpecType_LegacyType:
		n += proto.SizeVarint(11<<3 | proto.WireVarint)
		n += proto.SizeVarint(uint64(x.LegacyType))
	case *CreateSpecType_Srv6Network:
		s := proto.Size(x.Srv6Network)
		n += proto.SizeVarint(14<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// Replace virtual network
//
// x-displayName: "Replace Virtual Network"
// Replace given virtual network in given namespace
type ReplaceSpecType struct {
	// Types that are valid to be assigned to NetworkChoice:
	//	*ReplaceSpecType_GlobalNetwork
	//	*ReplaceSpecType_SiteLocalNetwork
	//	*ReplaceSpecType_SiteLocalInsideNetwork
	//	*ReplaceSpecType_LegacyType
	//	*ReplaceSpecType_PrivateNetwork
	//	*ReplaceSpecType_Srv6Network
	NetworkChoice isReplaceSpecType_NetworkChoice `protobuf_oneof:"network_choice"`
	// static_routes
	//
	// x-displayName: "Static Routes"
	// List of static routes on the virtual network
	StaticRoutes []*StaticRouteViewType `protobuf:"bytes,12,rep,name=static_routes,json=staticRoutes" json:"static_routes,omitempty"`
}

func (m *ReplaceSpecType) Reset()                    { *m = ReplaceSpecType{} }
func (*ReplaceSpecType) ProtoMessage()               {}
func (*ReplaceSpecType) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{16} }

type isReplaceSpecType_NetworkChoice interface {
	isReplaceSpecType_NetworkChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type ReplaceSpecType_GlobalNetwork struct {
	GlobalNetwork *ves_io_schema4.Empty `protobuf:"bytes,7,opt,name=global_network,json=globalNetwork,oneof"`
}
type ReplaceSpecType_SiteLocalNetwork struct {
	SiteLocalNetwork *ves_io_schema4.Empty `protobuf:"bytes,8,opt,name=site_local_network,json=siteLocalNetwork,oneof"`
}
type ReplaceSpecType_SiteLocalInsideNetwork struct {
	SiteLocalInsideNetwork *ves_io_schema4.Empty `protobuf:"bytes,9,opt,name=site_local_inside_network,json=siteLocalInsideNetwork,oneof"`
}
type ReplaceSpecType_LegacyType struct {
	LegacyType ves_io_schema3.VirtualNetworkType `protobuf:"varint,11,opt,name=legacy_type,json=legacyType,proto3,enum=ves.io.schema.VirtualNetworkType,oneof"`
}
type ReplaceSpecType_PrivateNetwork struct {
	PrivateNetwork *ves_io_schema4.Empty `protobuf:"bytes,13,opt,name=private_network,json=privateNetwork,oneof"`
}
type ReplaceSpecType_Srv6Network struct {
	Srv6Network *PerSiteSrv6NetworkType `protobuf:"bytes,14,opt,name=srv6_network,json=srv6Network,oneof"`
}

func (*ReplaceSpecType_GlobalNetwork) isReplaceSpecType_NetworkChoice()          {}
func (*ReplaceSpecType_SiteLocalNetwork) isReplaceSpecType_NetworkChoice()       {}
func (*ReplaceSpecType_SiteLocalInsideNetwork) isReplaceSpecType_NetworkChoice() {}
func (*ReplaceSpecType_LegacyType) isReplaceSpecType_NetworkChoice()             {}
func (*ReplaceSpecType_PrivateNetwork) isReplaceSpecType_NetworkChoice()         {}
func (*ReplaceSpecType_Srv6Network) isReplaceSpecType_NetworkChoice()            {}

func (m *ReplaceSpecType) GetNetworkChoice() isReplaceSpecType_NetworkChoice {
	if m != nil {
		return m.NetworkChoice
	}
	return nil
}

func (m *ReplaceSpecType) GetGlobalNetwork() *ves_io_schema4.Empty {
	if x, ok := m.GetNetworkChoice().(*ReplaceSpecType_GlobalNetwork); ok {
		return x.GlobalNetwork
	}
	return nil
}

func (m *ReplaceSpecType) GetSiteLocalNetwork() *ves_io_schema4.Empty {
	if x, ok := m.GetNetworkChoice().(*ReplaceSpecType_SiteLocalNetwork); ok {
		return x.SiteLocalNetwork
	}
	return nil
}

func (m *ReplaceSpecType) GetSiteLocalInsideNetwork() *ves_io_schema4.Empty {
	if x, ok := m.GetNetworkChoice().(*ReplaceSpecType_SiteLocalInsideNetwork); ok {
		return x.SiteLocalInsideNetwork
	}
	return nil
}

func (m *ReplaceSpecType) GetLegacyType() ves_io_schema3.VirtualNetworkType {
	if x, ok := m.GetNetworkChoice().(*ReplaceSpecType_LegacyType); ok {
		return x.LegacyType
	}
	return ves_io_schema3.VIRTUAL_NETWORK_SITE_LOCAL
}

func (m *ReplaceSpecType) GetPrivateNetwork() *ves_io_schema4.Empty {
	if x, ok := m.GetNetworkChoice().(*ReplaceSpecType_PrivateNetwork); ok {
		return x.PrivateNetwork
	}
	return nil
}

func (m *ReplaceSpecType) GetSrv6Network() *PerSiteSrv6NetworkType {
	if x, ok := m.GetNetworkChoice().(*ReplaceSpecType_Srv6Network); ok {
		return x.Srv6Network
	}
	return nil
}

func (m *ReplaceSpecType) GetStaticRoutes() []*StaticRouteViewType {
	if m != nil {
		return m.StaticRoutes
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*ReplaceSpecType) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _ReplaceSpecType_OneofMarshaler, _ReplaceSpecType_OneofUnmarshaler, _ReplaceSpecType_OneofSizer, []interface{}{
		(*ReplaceSpecType_GlobalNetwork)(nil),
		(*ReplaceSpecType_SiteLocalNetwork)(nil),
		(*ReplaceSpecType_SiteLocalInsideNetwork)(nil),
		(*ReplaceSpecType_LegacyType)(nil),
		(*ReplaceSpecType_PrivateNetwork)(nil),
		(*ReplaceSpecType_Srv6Network)(nil),
	}
}

func _ReplaceSpecType_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*ReplaceSpecType)
	// network_choice
	switch x := m.NetworkChoice.(type) {
	case *ReplaceSpecType_GlobalNetwork:
		_ = b.EncodeVarint(7<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.GlobalNetwork); err != nil {
			return err
		}
	case *ReplaceSpecType_SiteLocalNetwork:
		_ = b.EncodeVarint(8<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.SiteLocalNetwork); err != nil {
			return err
		}
	case *ReplaceSpecType_SiteLocalInsideNetwork:
		_ = b.EncodeVarint(9<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.SiteLocalInsideNetwork); err != nil {
			return err
		}
	case *ReplaceSpecType_LegacyType:
		_ = b.EncodeVarint(11<<3 | proto.WireVarint)
		_ = b.EncodeVarint(uint64(x.LegacyType))
	case *ReplaceSpecType_PrivateNetwork:
		_ = b.EncodeVarint(13<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.PrivateNetwork); err != nil {
			return err
		}
	case *ReplaceSpecType_Srv6Network:
		_ = b.EncodeVarint(14<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Srv6Network); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("ReplaceSpecType.NetworkChoice has unexpected type %T", x)
	}
	return nil
}

func _ReplaceSpecType_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*ReplaceSpecType)
	switch tag {
	case 7: // network_choice.global_network
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.NetworkChoice = &ReplaceSpecType_GlobalNetwork{msg}
		return true, err
	case 8: // network_choice.site_local_network
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.NetworkChoice = &ReplaceSpecType_SiteLocalNetwork{msg}
		return true, err
	case 9: // network_choice.site_local_inside_network
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.NetworkChoice = &ReplaceSpecType_SiteLocalInsideNetwork{msg}
		return true, err
	case 11: // network_choice.legacy_type
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.NetworkChoice = &ReplaceSpecType_LegacyType{ves_io_schema3.VirtualNetworkType(x)}
		return true, err
	case 13: // network_choice.private_network
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.NetworkChoice = &ReplaceSpecType_PrivateNetwork{msg}
		return true, err
	case 14: // network_choice.srv6_network
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(PerSiteSrv6NetworkType)
		err := b.DecodeMessage(msg)
		m.NetworkChoice = &ReplaceSpecType_Srv6Network{msg}
		return true, err
	default:
		return false, nil
	}
}

func _ReplaceSpecType_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*ReplaceSpecType)
	// network_choice
	switch x := m.NetworkChoice.(type) {
	case *ReplaceSpecType_GlobalNetwork:
		s := proto.Size(x.GlobalNetwork)
		n += proto.SizeVarint(7<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ReplaceSpecType_SiteLocalNetwork:
		s := proto.Size(x.SiteLocalNetwork)
		n += proto.SizeVarint(8<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ReplaceSpecType_SiteLocalInsideNetwork:
		s := proto.Size(x.SiteLocalInsideNetwork)
		n += proto.SizeVarint(9<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ReplaceSpecType_LegacyType:
		n += proto.SizeVarint(11<<3 | proto.WireVarint)
		n += proto.SizeVarint(uint64(x.LegacyType))
	case *ReplaceSpecType_PrivateNetwork:
		s := proto.Size(x.PrivateNetwork)
		n += proto.SizeVarint(13<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ReplaceSpecType_Srv6Network:
		s := proto.Size(x.Srv6Network)
		n += proto.SizeVarint(14<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// Get virtual network
//
// x-displayName: "Get Virtual Network"
// Gets virtual network in given namespace
type GetSpecType struct {
	// Types that are valid to be assigned to NetworkChoice:
	//	*GetSpecType_GlobalNetwork
	//	*GetSpecType_SiteLocalNetwork
	//	*GetSpecType_SiteLocalInsideNetwork
	//	*GetSpecType_LegacyType
	//	*GetSpecType_PrivateNetwork
	//	*GetSpecType_Srv6Network
	NetworkChoice isGetSpecType_NetworkChoice `protobuf_oneof:"network_choice"`
	// static_routes
	//
	// x-displayName: "Static Routes"
	// List of static routes on the virtual network
	StaticRoutes []*StaticRouteViewType `protobuf:"bytes,12,rep,name=static_routes,json=staticRoutes" json:"static_routes,omitempty"`
}

func (m *GetSpecType) Reset()                    { *m = GetSpecType{} }
func (*GetSpecType) ProtoMessage()               {}
func (*GetSpecType) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{17} }

type isGetSpecType_NetworkChoice interface {
	isGetSpecType_NetworkChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type GetSpecType_GlobalNetwork struct {
	GlobalNetwork *ves_io_schema4.Empty `protobuf:"bytes,7,opt,name=global_network,json=globalNetwork,oneof"`
}
type GetSpecType_SiteLocalNetwork struct {
	SiteLocalNetwork *ves_io_schema4.Empty `protobuf:"bytes,8,opt,name=site_local_network,json=siteLocalNetwork,oneof"`
}
type GetSpecType_SiteLocalInsideNetwork struct {
	SiteLocalInsideNetwork *ves_io_schema4.Empty `protobuf:"bytes,9,opt,name=site_local_inside_network,json=siteLocalInsideNetwork,oneof"`
}
type GetSpecType_LegacyType struct {
	LegacyType ves_io_schema3.VirtualNetworkType `protobuf:"varint,11,opt,name=legacy_type,json=legacyType,proto3,enum=ves.io.schema.VirtualNetworkType,oneof"`
}
type GetSpecType_PrivateNetwork struct {
	PrivateNetwork *ves_io_schema4.Empty `protobuf:"bytes,13,opt,name=private_network,json=privateNetwork,oneof"`
}
type GetSpecType_Srv6Network struct {
	Srv6Network *PerSiteSrv6NetworkType `protobuf:"bytes,14,opt,name=srv6_network,json=srv6Network,oneof"`
}

func (*GetSpecType_GlobalNetwork) isGetSpecType_NetworkChoice()          {}
func (*GetSpecType_SiteLocalNetwork) isGetSpecType_NetworkChoice()       {}
func (*GetSpecType_SiteLocalInsideNetwork) isGetSpecType_NetworkChoice() {}
func (*GetSpecType_LegacyType) isGetSpecType_NetworkChoice()             {}
func (*GetSpecType_PrivateNetwork) isGetSpecType_NetworkChoice()         {}
func (*GetSpecType_Srv6Network) isGetSpecType_NetworkChoice()            {}

func (m *GetSpecType) GetNetworkChoice() isGetSpecType_NetworkChoice {
	if m != nil {
		return m.NetworkChoice
	}
	return nil
}

func (m *GetSpecType) GetGlobalNetwork() *ves_io_schema4.Empty {
	if x, ok := m.GetNetworkChoice().(*GetSpecType_GlobalNetwork); ok {
		return x.GlobalNetwork
	}
	return nil
}

func (m *GetSpecType) GetSiteLocalNetwork() *ves_io_schema4.Empty {
	if x, ok := m.GetNetworkChoice().(*GetSpecType_SiteLocalNetwork); ok {
		return x.SiteLocalNetwork
	}
	return nil
}

func (m *GetSpecType) GetSiteLocalInsideNetwork() *ves_io_schema4.Empty {
	if x, ok := m.GetNetworkChoice().(*GetSpecType_SiteLocalInsideNetwork); ok {
		return x.SiteLocalInsideNetwork
	}
	return nil
}

func (m *GetSpecType) GetLegacyType() ves_io_schema3.VirtualNetworkType {
	if x, ok := m.GetNetworkChoice().(*GetSpecType_LegacyType); ok {
		return x.LegacyType
	}
	return ves_io_schema3.VIRTUAL_NETWORK_SITE_LOCAL
}

func (m *GetSpecType) GetPrivateNetwork() *ves_io_schema4.Empty {
	if x, ok := m.GetNetworkChoice().(*GetSpecType_PrivateNetwork); ok {
		return x.PrivateNetwork
	}
	return nil
}

func (m *GetSpecType) GetSrv6Network() *PerSiteSrv6NetworkType {
	if x, ok := m.GetNetworkChoice().(*GetSpecType_Srv6Network); ok {
		return x.Srv6Network
	}
	return nil
}

func (m *GetSpecType) GetStaticRoutes() []*StaticRouteViewType {
	if m != nil {
		return m.StaticRoutes
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*GetSpecType) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _GetSpecType_OneofMarshaler, _GetSpecType_OneofUnmarshaler, _GetSpecType_OneofSizer, []interface{}{
		(*GetSpecType_GlobalNetwork)(nil),
		(*GetSpecType_SiteLocalNetwork)(nil),
		(*GetSpecType_SiteLocalInsideNetwork)(nil),
		(*GetSpecType_LegacyType)(nil),
		(*GetSpecType_PrivateNetwork)(nil),
		(*GetSpecType_Srv6Network)(nil),
	}
}

func _GetSpecType_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*GetSpecType)
	// network_choice
	switch x := m.NetworkChoice.(type) {
	case *GetSpecType_GlobalNetwork:
		_ = b.EncodeVarint(7<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.GlobalNetwork); err != nil {
			return err
		}
	case *GetSpecType_SiteLocalNetwork:
		_ = b.EncodeVarint(8<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.SiteLocalNetwork); err != nil {
			return err
		}
	case *GetSpecType_SiteLocalInsideNetwork:
		_ = b.EncodeVarint(9<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.SiteLocalInsideNetwork); err != nil {
			return err
		}
	case *GetSpecType_LegacyType:
		_ = b.EncodeVarint(11<<3 | proto.WireVarint)
		_ = b.EncodeVarint(uint64(x.LegacyType))
	case *GetSpecType_PrivateNetwork:
		_ = b.EncodeVarint(13<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.PrivateNetwork); err != nil {
			return err
		}
	case *GetSpecType_Srv6Network:
		_ = b.EncodeVarint(14<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Srv6Network); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("GetSpecType.NetworkChoice has unexpected type %T", x)
	}
	return nil
}

func _GetSpecType_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*GetSpecType)
	switch tag {
	case 7: // network_choice.global_network
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.NetworkChoice = &GetSpecType_GlobalNetwork{msg}
		return true, err
	case 8: // network_choice.site_local_network
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.NetworkChoice = &GetSpecType_SiteLocalNetwork{msg}
		return true, err
	case 9: // network_choice.site_local_inside_network
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.NetworkChoice = &GetSpecType_SiteLocalInsideNetwork{msg}
		return true, err
	case 11: // network_choice.legacy_type
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.NetworkChoice = &GetSpecType_LegacyType{ves_io_schema3.VirtualNetworkType(x)}
		return true, err
	case 13: // network_choice.private_network
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.NetworkChoice = &GetSpecType_PrivateNetwork{msg}
		return true, err
	case 14: // network_choice.srv6_network
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(PerSiteSrv6NetworkType)
		err := b.DecodeMessage(msg)
		m.NetworkChoice = &GetSpecType_Srv6Network{msg}
		return true, err
	default:
		return false, nil
	}
}

func _GetSpecType_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*GetSpecType)
	// network_choice
	switch x := m.NetworkChoice.(type) {
	case *GetSpecType_GlobalNetwork:
		s := proto.Size(x.GlobalNetwork)
		n += proto.SizeVarint(7<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *GetSpecType_SiteLocalNetwork:
		s := proto.Size(x.SiteLocalNetwork)
		n += proto.SizeVarint(8<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *GetSpecType_SiteLocalInsideNetwork:
		s := proto.Size(x.SiteLocalInsideNetwork)
		n += proto.SizeVarint(9<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *GetSpecType_LegacyType:
		n += proto.SizeVarint(11<<3 | proto.WireVarint)
		n += proto.SizeVarint(uint64(x.LegacyType))
	case *GetSpecType_PrivateNetwork:
		s := proto.Size(x.PrivateNetwork)
		n += proto.SizeVarint(13<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *GetSpecType_Srv6Network:
		s := proto.Size(x.Srv6Network)
		n += proto.SizeVarint(14<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

func init() {
	proto.RegisterType((*VoltADNPrivateNetworkReInfoType)(nil), "ves.io.schema.virtual_network.VoltADNPrivateNetworkReInfoType")
	golang_proto.RegisterType((*VoltADNPrivateNetworkReInfoType)(nil), "ves.io.schema.virtual_network.VoltADNPrivateNetworkReInfoType")
	proto.RegisterType((*VoltADNPrivateNetworkTenantInfoType)(nil), "ves.io.schema.virtual_network.VoltADNPrivateNetworkTenantInfoType")
	golang_proto.RegisterType((*VoltADNPrivateNetworkTenantInfoType)(nil), "ves.io.schema.virtual_network.VoltADNPrivateNetworkTenantInfoType")
	proto.RegisterType((*DNSServersList)(nil), "ves.io.schema.virtual_network.DNSServersList")
	golang_proto.RegisterType((*DNSServersList)(nil), "ves.io.schema.virtual_network.DNSServersList")
	proto.RegisterType((*VoltADNPrivateNetworkType)(nil), "ves.io.schema.virtual_network.VoltADNPrivateNetworkType")
	golang_proto.RegisterType((*VoltADNPrivateNetworkType)(nil), "ves.io.schema.virtual_network.VoltADNPrivateNetworkType")
	proto.RegisterType((*AnyCastVIPFleetType)(nil), "ves.io.schema.virtual_network.AnyCastVIPFleetType")
	golang_proto.RegisterType((*AnyCastVIPFleetType)(nil), "ves.io.schema.virtual_network.AnyCastVIPFleetType")
	proto.RegisterType((*SNATPoolType)(nil), "ves.io.schema.virtual_network.SNATPoolType")
	golang_proto.RegisterType((*SNATPoolType)(nil), "ves.io.schema.virtual_network.SNATPoolType")
	proto.RegisterType((*SNATPoolSiteType)(nil), "ves.io.schema.virtual_network.SNATPoolSiteType")
	golang_proto.RegisterType((*SNATPoolSiteType)(nil), "ves.io.schema.virtual_network.SNATPoolSiteType")
	proto.RegisterType((*SNATPoolFleetType)(nil), "ves.io.schema.virtual_network.SNATPoolFleetType")
	golang_proto.RegisterType((*SNATPoolFleetType)(nil), "ves.io.schema.virtual_network.SNATPoolFleetType")
	proto.RegisterType((*Srv6NetworkNsParametersType)(nil), "ves.io.schema.virtual_network.Srv6NetworkNsParametersType")
	golang_proto.RegisterType((*Srv6NetworkNsParametersType)(nil), "ves.io.schema.virtual_network.Srv6NetworkNsParametersType")
	proto.RegisterType((*PerSiteSrv6NetworkType)(nil), "ves.io.schema.virtual_network.PerSiteSrv6NetworkType")
	golang_proto.RegisterType((*PerSiteSrv6NetworkType)(nil), "ves.io.schema.virtual_network.PerSiteSrv6NetworkType")
	proto.RegisterType((*NextHopInterfaceList)(nil), "ves.io.schema.virtual_network.NextHopInterfaceList")
	golang_proto.RegisterType((*NextHopInterfaceList)(nil), "ves.io.schema.virtual_network.NextHopInterfaceList")
	proto.RegisterType((*StaticRouteViewType)(nil), "ves.io.schema.virtual_network.StaticRouteViewType")
	golang_proto.RegisterType((*StaticRouteViewType)(nil), "ves.io.schema.virtual_network.StaticRouteViewType")
	proto.RegisterType((*ActivePBRPoliciesType)(nil), "ves.io.schema.virtual_network.ActivePBRPoliciesType")
	golang_proto.RegisterType((*ActivePBRPoliciesType)(nil), "ves.io.schema.virtual_network.ActivePBRPoliciesType")
	proto.RegisterType((*PerTenantVIPType)(nil), "ves.io.schema.virtual_network.PerTenantVIPType")
	golang_proto.RegisterType((*PerTenantVIPType)(nil), "ves.io.schema.virtual_network.PerTenantVIPType")
	proto.RegisterType((*GlobalSpecType)(nil), "ves.io.schema.virtual_network.GlobalSpecType")
	golang_proto.RegisterType((*GlobalSpecType)(nil), "ves.io.schema.virtual_network.GlobalSpecType")
	proto.RegisterType((*CreateSpecType)(nil), "ves.io.schema.virtual_network.CreateSpecType")
	golang_proto.RegisterType((*CreateSpecType)(nil), "ves.io.schema.virtual_network.CreateSpecType")
	proto.RegisterType((*ReplaceSpecType)(nil), "ves.io.schema.virtual_network.ReplaceSpecType")
	golang_proto.RegisterType((*ReplaceSpecType)(nil), "ves.io.schema.virtual_network.ReplaceSpecType")
	proto.RegisterType((*GetSpecType)(nil), "ves.io.schema.virtual_network.GetSpecType")
	golang_proto.RegisterType((*GetSpecType)(nil), "ves.io.schema.virtual_network.GetSpecType")
}
func (this *VoltADNPrivateNetworkReInfoType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*VoltADNPrivateNetworkReInfoType)
	if !ok {
		that2, ok := that.(VoltADNPrivateNetworkReInfoType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Vlan != that1.Vlan {
		return false
	}
	if !this.NodeSelector.Equal(that1.NodeSelector) {
		return false
	}
	return true
}
func (this *VoltADNPrivateNetworkTenantInfoType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*VoltADNPrivateNetworkTenantInfoType)
	if !ok {
		that2, ok := that.(VoltADNPrivateNetworkTenantInfoType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.DefaultPrivateVip != that1.DefaultPrivateVip {
		return false
	}
	if this.FinalDefaultPrivateVip != that1.FinalDefaultPrivateVip {
		return false
	}
	return true
}
func (this *DNSServersList) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DNSServersList)
	if !ok {
		that2, ok := that.(DNSServersList)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.DnsIp) != len(that1.DnsIp) {
		return false
	}
	for i := range this.DnsIp {
		if this.DnsIp[i] != that1.DnsIp[i] {
			return false
		}
	}
	return true
}
func (this *VoltADNPrivateNetworkType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*VoltADNPrivateNetworkType)
	if !ok {
		that2, ok := that.(VoltADNPrivateNetworkType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.PrivateAccessChoice == nil {
		if this.PrivateAccessChoice != nil {
			return false
		}
	} else if this.PrivateAccessChoice == nil {
		return false
	} else if !this.PrivateAccessChoice.Equal(that1.PrivateAccessChoice) {
		return false
	}
	if that1.DnsChoice == nil {
		if this.DnsChoice != nil {
			return false
		}
	} else if this.DnsChoice == nil {
		return false
	} else if !this.DnsChoice.Equal(that1.DnsChoice) {
		return false
	}
	if !this.CommonNodeSelector.Equal(that1.CommonNodeSelector) {
		return false
	}
	if len(this.ReInfoMap) != len(that1.ReInfoMap) {
		return false
	}
	for i := range this.ReInfoMap {
		if !this.ReInfoMap[i].Equal(that1.ReInfoMap[i]) {
			return false
		}
	}
	if this.OwnerTenantId != that1.OwnerTenantId {
		return false
	}
	if len(this.TenantInfoMap) != len(that1.TenantInfoMap) {
		return false
	}
	for i := range this.TenantInfoMap {
		if !this.TenantInfoMap[i].Equal(that1.TenantInfoMap[i]) {
			return false
		}
	}
	if that1.DedicatedVipChoice == nil {
		if this.DedicatedVipChoice != nil {
			return false
		}
	} else if this.DedicatedVipChoice == nil {
		return false
	} else if !this.DedicatedVipChoice.Equal(that1.DedicatedVipChoice) {
		return false
	}
	return true
}
func (this *VoltADNPrivateNetworkType_NoPrivateAccess) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*VoltADNPrivateNetworkType_NoPrivateAccess)
	if !ok {
		that2, ok := that.(VoltADNPrivateNetworkType_NoPrivateAccess)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NoPrivateAccess.Equal(that1.NoPrivateAccess) {
		return false
	}
	return true
}
func (this *VoltADNPrivateNetworkType_PrivateAccessEnabled) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*VoltADNPrivateNetworkType_PrivateAccessEnabled)
	if !ok {
		that2, ok := that.(VoltADNPrivateNetworkType_PrivateAccessEnabled)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.PrivateAccessEnabled.Equal(that1.PrivateAccessEnabled) {
		return false
	}
	return true
}
func (this *VoltADNPrivateNetworkType_NoPrivateDns) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*VoltADNPrivateNetworkType_NoPrivateDns)
	if !ok {
		that2, ok := that.(VoltADNPrivateNetworkType_NoPrivateDns)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NoPrivateDns.Equal(that1.NoPrivateDns) {
		return false
	}
	return true
}
func (this *VoltADNPrivateNetworkType_PrivateDns) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*VoltADNPrivateNetworkType_PrivateDns)
	if !ok {
		that2, ok := that.(VoltADNPrivateNetworkType_PrivateDns)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.PrivateDns.Equal(that1.PrivateDns) {
		return false
	}
	return true
}
func (this *VoltADNPrivateNetworkType_NoAdvertiseDedicatedVips) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*VoltADNPrivateNetworkType_NoAdvertiseDedicatedVips)
	if !ok {
		that2, ok := that.(VoltADNPrivateNetworkType_NoAdvertiseDedicatedVips)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NoAdvertiseDedicatedVips.Equal(that1.NoAdvertiseDedicatedVips) {
		return false
	}
	return true
}
func (this *VoltADNPrivateNetworkType_AdvertiseDedicatedVips) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*VoltADNPrivateNetworkType_AdvertiseDedicatedVips)
	if !ok {
		that2, ok := that.(VoltADNPrivateNetworkType_AdvertiseDedicatedVips)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AdvertiseDedicatedVips.Equal(that1.AdvertiseDedicatedVips) {
		return false
	}
	return true
}
func (this *AnyCastVIPFleetType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AnyCastVIPFleetType)
	if !ok {
		that2, ok := that.(AnyCastVIPFleetType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.VipAllocator.Equal(that1.VipAllocator) {
		return false
	}
	return true
}
func (this *SNATPoolType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SNATPoolType)
	if !ok {
		that2, ok := that.(SNATPoolType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Ipv4Prefixes) != len(that1.Ipv4Prefixes) {
		return false
	}
	for i := range this.Ipv4Prefixes {
		if this.Ipv4Prefixes[i] != that1.Ipv4Prefixes[i] {
			return false
		}
	}
	return true
}
func (this *SNATPoolSiteType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SNATPoolSiteType)
	if !ok {
		that2, ok := that.(SNATPoolSiteType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.NodeSnatPool) != len(that1.NodeSnatPool) {
		return false
	}
	for i := range this.NodeSnatPool {
		if !this.NodeSnatPool[i].Equal(that1.NodeSnatPool[i]) {
			return false
		}
	}
	return true
}
func (this *SNATPoolFleetType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SNATPoolFleetType)
	if !ok {
		that2, ok := that.(SNATPoolFleetType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.SnatPoolAllocator.Equal(that1.SnatPoolAllocator) {
		return false
	}
	return true
}
func (this *Srv6NetworkNsParametersType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Srv6NetworkNsParametersType)
	if !ok {
		that2, ok := that.(Srv6NetworkNsParametersType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Namespace != that1.Namespace {
		return false
	}
	return true
}
func (this *PerSiteSrv6NetworkType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PerSiteSrv6NetworkType)
	if !ok {
		that2, ok := that.(PerSiteSrv6NetworkType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.NamespaceChoice == nil {
		if this.NamespaceChoice != nil {
			return false
		}
	} else if this.NamespaceChoice == nil {
		return false
	} else if !this.NamespaceChoice.Equal(that1.NamespaceChoice) {
		return false
	}
	if that1.DefaultVipChoice == nil {
		if this.DefaultVipChoice != nil {
			return false
		}
	} else if this.DefaultVipChoice == nil {
		return false
	} else if !this.DefaultVipChoice.Equal(that1.DefaultVipChoice) {
		return false
	}
	if that1.SnatPoolChoice == nil {
		if this.SnatPoolChoice != nil {
			return false
		}
	} else if this.SnatPoolChoice == nil {
		return false
	} else if !this.SnatPoolChoice.Equal(that1.SnatPoolChoice) {
		return false
	}
	if !this.Slice.Equal(that1.Slice) {
		return false
	}
	if len(this.Fleets) != len(that1.Fleets) {
		return false
	}
	for i := range this.Fleets {
		if !this.Fleets[i].Equal(that1.Fleets[i]) {
			return false
		}
	}
	if len(this.AccessNetworkRtargets) != len(that1.AccessNetworkRtargets) {
		return false
	}
	for i := range this.AccessNetworkRtargets {
		if !this.AccessNetworkRtargets[i].Equal(that1.AccessNetworkRtargets[i]) {
			return false
		}
	}
	if len(this.InternetRtargets) != len(that1.InternetRtargets) {
		return false
	}
	for i := range this.InternetRtargets {
		if !this.InternetRtargets[i].Equal(that1.InternetRtargets[i]) {
			return false
		}
	}
	if len(this.EnterpriseNetworkRtargets) != len(that1.EnterpriseNetworkRtargets) {
		return false
	}
	for i := range this.EnterpriseNetworkRtargets {
		if !this.EnterpriseNetworkRtargets[i].Equal(that1.EnterpriseNetworkRtargets[i]) {
			return false
		}
	}
	if len(this.ExportRtargets) != len(that1.ExportRtargets) {
		return false
	}
	for i := range this.ExportRtargets {
		if !this.ExportRtargets[i].Equal(that1.ExportRtargets[i]) {
			return false
		}
	}
	if this.RemoteSidStatsPlen != that1.RemoteSidStatsPlen {
		return false
	}
	return true
}
func (this *PerSiteSrv6NetworkType_NoNamespaceNetwork) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PerSiteSrv6NetworkType_NoNamespaceNetwork)
	if !ok {
		that2, ok := that.(PerSiteSrv6NetworkType_NoNamespaceNetwork)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NoNamespaceNetwork.Equal(that1.NoNamespaceNetwork) {
		return false
	}
	return true
}
func (this *PerSiteSrv6NetworkType_Srv6NetworkNsParams) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PerSiteSrv6NetworkType_Srv6NetworkNsParams)
	if !ok {
		that2, ok := that.(PerSiteSrv6NetworkType_Srv6NetworkNsParams)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Srv6NetworkNsParams.Equal(that1.Srv6NetworkNsParams) {
		return false
	}
	return true
}
func (this *PerSiteSrv6NetworkType_InterfaceIpVip) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PerSiteSrv6NetworkType_InterfaceIpVip)
	if !ok {
		that2, ok := that.(PerSiteSrv6NetworkType_InterfaceIpVip)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.InterfaceIpVip.Equal(that1.InterfaceIpVip) {
		return false
	}
	return true
}
func (this *PerSiteSrv6NetworkType_AnycastVip) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PerSiteSrv6NetworkType_AnycastVip)
	if !ok {
		that2, ok := that.(PerSiteSrv6NetworkType_AnycastVip)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.AnycastVip != that1.AnycastVip {
		return false
	}
	return true
}
func (this *PerSiteSrv6NetworkType_FleetVip) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PerSiteSrv6NetworkType_FleetVip)
	if !ok {
		that2, ok := that.(PerSiteSrv6NetworkType_FleetVip)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.FleetVip.Equal(that1.FleetVip) {
		return false
	}
	return true
}
func (this *PerSiteSrv6NetworkType_InterfaceIpSnatPool) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PerSiteSrv6NetworkType_InterfaceIpSnatPool)
	if !ok {
		that2, ok := that.(PerSiteSrv6NetworkType_InterfaceIpSnatPool)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.InterfaceIpSnatPool.Equal(that1.InterfaceIpSnatPool) {
		return false
	}
	return true
}
func (this *PerSiteSrv6NetworkType_SiteSnatPool) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PerSiteSrv6NetworkType_SiteSnatPool)
	if !ok {
		that2, ok := that.(PerSiteSrv6NetworkType_SiteSnatPool)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.SiteSnatPool.Equal(that1.SiteSnatPool) {
		return false
	}
	return true
}
func (this *PerSiteSrv6NetworkType_FleetSnatPool) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PerSiteSrv6NetworkType_FleetSnatPool)
	if !ok {
		that2, ok := that.(PerSiteSrv6NetworkType_FleetSnatPool)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.FleetSnatPool.Equal(that1.FleetSnatPool) {
		return false
	}
	return true
}
func (this *NextHopInterfaceList) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NextHopInterfaceList)
	if !ok {
		that2, ok := that.(NextHopInterfaceList)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Interfaces) != len(that1.Interfaces) {
		return false
	}
	for i := range this.Interfaces {
		if !this.Interfaces[i].Equal(that1.Interfaces[i]) {
			return false
		}
	}
	return true
}
func (this *StaticRouteViewType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*StaticRouteViewType)
	if !ok {
		that2, ok := that.(StaticRouteViewType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.IpPrefixes) != len(that1.IpPrefixes) {
		return false
	}
	for i := range this.IpPrefixes {
		if this.IpPrefixes[i] != that1.IpPrefixes[i] {
			return false
		}
	}
	if that1.NextHopChoice == nil {
		if this.NextHopChoice != nil {
			return false
		}
	} else if this.NextHopChoice == nil {
		return false
	} else if !this.NextHopChoice.Equal(that1.NextHopChoice) {
		return false
	}
	if len(this.Attrs) != len(that1.Attrs) {
		return false
	}
	for i := range this.Attrs {
		if this.Attrs[i] != that1.Attrs[i] {
			return false
		}
	}
	return true
}
func (this *StaticRouteViewType_IpAddress) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*StaticRouteViewType_IpAddress)
	if !ok {
		that2, ok := that.(StaticRouteViewType_IpAddress)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.IpAddress != that1.IpAddress {
		return false
	}
	return true
}
func (this *StaticRouteViewType_Interface) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*StaticRouteViewType_Interface)
	if !ok {
		that2, ok := that.(StaticRouteViewType_Interface)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Interface.Equal(that1.Interface) {
		return false
	}
	return true
}
func (this *StaticRouteViewType_DefaultGateway) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*StaticRouteViewType_DefaultGateway)
	if !ok {
		that2, ok := that.(StaticRouteViewType_DefaultGateway)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DefaultGateway.Equal(that1.DefaultGateway) {
		return false
	}
	return true
}
func (this *ActivePBRPoliciesType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ActivePBRPoliciesType)
	if !ok {
		that2, ok := that.(ActivePBRPoliciesType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.ForwardProxyPbrPolicies) != len(that1.ForwardProxyPbrPolicies) {
		return false
	}
	for i := range this.ForwardProxyPbrPolicies {
		if !this.ForwardProxyPbrPolicies[i].Equal(that1.ForwardProxyPbrPolicies[i]) {
			return false
		}
	}
	if len(this.NetworkPbrPolicies) != len(that1.NetworkPbrPolicies) {
		return false
	}
	for i := range this.NetworkPbrPolicies {
		if !this.NetworkPbrPolicies[i].Equal(that1.NetworkPbrPolicies[i]) {
			return false
		}
	}
	return true
}
func (this *PerTenantVIPType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PerTenantVIPType)
	if !ok {
		that2, ok := that.(PerTenantVIPType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.TenantVipMap) != len(that1.TenantVipMap) {
		return false
	}
	for i := range this.TenantVipMap {
		if this.TenantVipMap[i] != that1.TenantVipMap[i] {
			return false
		}
	}
	return true
}
func (this *GlobalSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType)
	if !ok {
		that2, ok := that.(GlobalSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Subnets) != len(that1.Subnets) {
		return false
	}
	for i := range this.Subnets {
		if !this.Subnets[i].Equal(that1.Subnets[i]) {
			return false
		}
	}
	if this.Type != that1.Type {
		return false
	}
	if len(this.StaticRoutes) != len(that1.StaticRoutes) {
		return false
	}
	for i := range this.StaticRoutes {
		if !this.StaticRoutes[i].Equal(that1.StaticRoutes[i]) {
			return false
		}
	}
	if that1.NetworkChoice == nil {
		if this.NetworkChoice != nil {
			return false
		}
	} else if this.NetworkChoice == nil {
		return false
	} else if !this.NetworkChoice.Equal(that1.NetworkChoice) {
		return false
	}
	if !this.PrivateNetworkParameters.Equal(that1.PrivateNetworkParameters) {
		return false
	}
	if that1.DefaultVipChoice == nil {
		if this.DefaultVipChoice != nil {
			return false
		}
	} else if this.DefaultVipChoice == nil {
		return false
	} else if !this.DefaultVipChoice.Equal(that1.DefaultVipChoice) {
		return false
	}
	if that1.SnatPoolChoice == nil {
		if this.SnatPoolChoice != nil {
			return false
		}
	} else if this.SnatPoolChoice == nil {
		return false
	} else if !this.SnatPoolChoice.Equal(that1.SnatPoolChoice) {
		return false
	}
	if len(this.ImportRtargetStrs) != len(that1.ImportRtargetStrs) {
		return false
	}
	for i := range this.ImportRtargetStrs {
		if this.ImportRtargetStrs[i] != that1.ImportRtargetStrs[i] {
			return false
		}
	}
	if len(this.ExportRtargetStrs) != len(that1.ExportRtargetStrs) {
		return false
	}
	for i := range this.ExportRtargetStrs {
		if this.ExportRtargetStrs[i] != that1.ExportRtargetStrs[i] {
			return false
		}
	}
	if len(this.FleetRefs) != len(that1.FleetRefs) {
		return false
	}
	for i := range this.FleetRefs {
		if !this.FleetRefs[i].Equal(that1.FleetRefs[i]) {
			return false
		}
	}
	if len(this.SliceRef) != len(that1.SliceRef) {
		return false
	}
	for i := range this.SliceRef {
		if !this.SliceRef[i].Equal(that1.SliceRef[i]) {
			return false
		}
	}
	return true
}
func (this *GlobalSpecType_GlobalNetwork) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_GlobalNetwork)
	if !ok {
		that2, ok := that.(GlobalSpecType_GlobalNetwork)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.GlobalNetwork.Equal(that1.GlobalNetwork) {
		return false
	}
	return true
}
func (this *GlobalSpecType_SiteLocalNetwork) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_SiteLocalNetwork)
	if !ok {
		that2, ok := that.(GlobalSpecType_SiteLocalNetwork)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.SiteLocalNetwork.Equal(that1.SiteLocalNetwork) {
		return false
	}
	return true
}
func (this *GlobalSpecType_SiteLocalInsideNetwork) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_SiteLocalInsideNetwork)
	if !ok {
		that2, ok := that.(GlobalSpecType_SiteLocalInsideNetwork)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.SiteLocalInsideNetwork.Equal(that1.SiteLocalInsideNetwork) {
		return false
	}
	return true
}
func (this *GlobalSpecType_InsideNetwork) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_InsideNetwork)
	if !ok {
		that2, ok := that.(GlobalSpecType_InsideNetwork)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.InsideNetwork.Equal(that1.InsideNetwork) {
		return false
	}
	return true
}
func (this *GlobalSpecType_LegacyType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_LegacyType)
	if !ok {
		that2, ok := that.(GlobalSpecType_LegacyType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.LegacyType != that1.LegacyType {
		return false
	}
	return true
}
func (this *GlobalSpecType_PrivateNetwork) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_PrivateNetwork)
	if !ok {
		that2, ok := that.(GlobalSpecType_PrivateNetwork)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.PrivateNetwork.Equal(that1.PrivateNetwork) {
		return false
	}
	return true
}
func (this *GlobalSpecType_Srv6Network) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_Srv6Network)
	if !ok {
		that2, ok := that.(GlobalSpecType_Srv6Network)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Srv6Network.Equal(that1.Srv6Network) {
		return false
	}
	return true
}
func (this *GlobalSpecType_TenantVip) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_TenantVip)
	if !ok {
		that2, ok := that.(GlobalSpecType_TenantVip)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.TenantVip.Equal(that1.TenantVip) {
		return false
	}
	return true
}
func (this *GlobalSpecType_FleetVip) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_FleetVip)
	if !ok {
		that2, ok := that.(GlobalSpecType_FleetVip)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.FleetVip.Equal(that1.FleetVip) {
		return false
	}
	return true
}
func (this *GlobalSpecType_InterfaceIp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_InterfaceIp)
	if !ok {
		that2, ok := that.(GlobalSpecType_InterfaceIp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.InterfaceIp.Equal(that1.InterfaceIp) {
		return false
	}
	return true
}
func (this *GlobalSpecType_SiteSnatPool) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_SiteSnatPool)
	if !ok {
		that2, ok := that.(GlobalSpecType_SiteSnatPool)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.SiteSnatPool.Equal(that1.SiteSnatPool) {
		return false
	}
	return true
}
func (this *GlobalSpecType_FleetSnatPool) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_FleetSnatPool)
	if !ok {
		that2, ok := that.(GlobalSpecType_FleetSnatPool)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.FleetSnatPool.Equal(that1.FleetSnatPool) {
		return false
	}
	return true
}
func (this *CreateSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType)
	if !ok {
		that2, ok := that.(CreateSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.NetworkChoice == nil {
		if this.NetworkChoice != nil {
			return false
		}
	} else if this.NetworkChoice == nil {
		return false
	} else if !this.NetworkChoice.Equal(that1.NetworkChoice) {
		return false
	}
	if len(this.StaticRoutes) != len(that1.StaticRoutes) {
		return false
	}
	for i := range this.StaticRoutes {
		if !this.StaticRoutes[i].Equal(that1.StaticRoutes[i]) {
			return false
		}
	}
	return true
}
func (this *CreateSpecType_GlobalNetwork) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_GlobalNetwork)
	if !ok {
		that2, ok := that.(CreateSpecType_GlobalNetwork)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.GlobalNetwork.Equal(that1.GlobalNetwork) {
		return false
	}
	return true
}
func (this *CreateSpecType_SiteLocalNetwork) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_SiteLocalNetwork)
	if !ok {
		that2, ok := that.(CreateSpecType_SiteLocalNetwork)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.SiteLocalNetwork.Equal(that1.SiteLocalNetwork) {
		return false
	}
	return true
}
func (this *CreateSpecType_SiteLocalInsideNetwork) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_SiteLocalInsideNetwork)
	if !ok {
		that2, ok := that.(CreateSpecType_SiteLocalInsideNetwork)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.SiteLocalInsideNetwork.Equal(that1.SiteLocalInsideNetwork) {
		return false
	}
	return true
}
func (this *CreateSpecType_LegacyType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_LegacyType)
	if !ok {
		that2, ok := that.(CreateSpecType_LegacyType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.LegacyType != that1.LegacyType {
		return false
	}
	return true
}
func (this *CreateSpecType_Srv6Network) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_Srv6Network)
	if !ok {
		that2, ok := that.(CreateSpecType_Srv6Network)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Srv6Network.Equal(that1.Srv6Network) {
		return false
	}
	return true
}
func (this *ReplaceSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType)
	if !ok {
		that2, ok := that.(ReplaceSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.NetworkChoice == nil {
		if this.NetworkChoice != nil {
			return false
		}
	} else if this.NetworkChoice == nil {
		return false
	} else if !this.NetworkChoice.Equal(that1.NetworkChoice) {
		return false
	}
	if len(this.StaticRoutes) != len(that1.StaticRoutes) {
		return false
	}
	for i := range this.StaticRoutes {
		if !this.StaticRoutes[i].Equal(that1.StaticRoutes[i]) {
			return false
		}
	}
	return true
}
func (this *ReplaceSpecType_GlobalNetwork) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_GlobalNetwork)
	if !ok {
		that2, ok := that.(ReplaceSpecType_GlobalNetwork)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.GlobalNetwork.Equal(that1.GlobalNetwork) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_SiteLocalNetwork) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_SiteLocalNetwork)
	if !ok {
		that2, ok := that.(ReplaceSpecType_SiteLocalNetwork)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.SiteLocalNetwork.Equal(that1.SiteLocalNetwork) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_SiteLocalInsideNetwork) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_SiteLocalInsideNetwork)
	if !ok {
		that2, ok := that.(ReplaceSpecType_SiteLocalInsideNetwork)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.SiteLocalInsideNetwork.Equal(that1.SiteLocalInsideNetwork) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_LegacyType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_LegacyType)
	if !ok {
		that2, ok := that.(ReplaceSpecType_LegacyType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.LegacyType != that1.LegacyType {
		return false
	}
	return true
}
func (this *ReplaceSpecType_PrivateNetwork) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_PrivateNetwork)
	if !ok {
		that2, ok := that.(ReplaceSpecType_PrivateNetwork)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.PrivateNetwork.Equal(that1.PrivateNetwork) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_Srv6Network) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_Srv6Network)
	if !ok {
		that2, ok := that.(ReplaceSpecType_Srv6Network)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Srv6Network.Equal(that1.Srv6Network) {
		return false
	}
	return true
}
func (this *GetSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType)
	if !ok {
		that2, ok := that.(GetSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.NetworkChoice == nil {
		if this.NetworkChoice != nil {
			return false
		}
	} else if this.NetworkChoice == nil {
		return false
	} else if !this.NetworkChoice.Equal(that1.NetworkChoice) {
		return false
	}
	if len(this.StaticRoutes) != len(that1.StaticRoutes) {
		return false
	}
	for i := range this.StaticRoutes {
		if !this.StaticRoutes[i].Equal(that1.StaticRoutes[i]) {
			return false
		}
	}
	return true
}
func (this *GetSpecType_GlobalNetwork) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_GlobalNetwork)
	if !ok {
		that2, ok := that.(GetSpecType_GlobalNetwork)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.GlobalNetwork.Equal(that1.GlobalNetwork) {
		return false
	}
	return true
}
func (this *GetSpecType_SiteLocalNetwork) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_SiteLocalNetwork)
	if !ok {
		that2, ok := that.(GetSpecType_SiteLocalNetwork)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.SiteLocalNetwork.Equal(that1.SiteLocalNetwork) {
		return false
	}
	return true
}
func (this *GetSpecType_SiteLocalInsideNetwork) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_SiteLocalInsideNetwork)
	if !ok {
		that2, ok := that.(GetSpecType_SiteLocalInsideNetwork)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.SiteLocalInsideNetwork.Equal(that1.SiteLocalInsideNetwork) {
		return false
	}
	return true
}
func (this *GetSpecType_LegacyType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_LegacyType)
	if !ok {
		that2, ok := that.(GetSpecType_LegacyType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.LegacyType != that1.LegacyType {
		return false
	}
	return true
}
func (this *GetSpecType_PrivateNetwork) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_PrivateNetwork)
	if !ok {
		that2, ok := that.(GetSpecType_PrivateNetwork)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.PrivateNetwork.Equal(that1.PrivateNetwork) {
		return false
	}
	return true
}
func (this *GetSpecType_Srv6Network) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_Srv6Network)
	if !ok {
		that2, ok := that.(GetSpecType_Srv6Network)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Srv6Network.Equal(that1.Srv6Network) {
		return false
	}
	return true
}
func (this *VoltADNPrivateNetworkReInfoType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&virtual_network.VoltADNPrivateNetworkReInfoType{")
	s = append(s, "Vlan: "+fmt.Sprintf("%#v", this.Vlan)+",\n")
	if this.NodeSelector != nil {
		s = append(s, "NodeSelector: "+fmt.Sprintf("%#v", this.NodeSelector)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *VoltADNPrivateNetworkTenantInfoType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&virtual_network.VoltADNPrivateNetworkTenantInfoType{")
	s = append(s, "DefaultPrivateVip: "+fmt.Sprintf("%#v", this.DefaultPrivateVip)+",\n")
	s = append(s, "FinalDefaultPrivateVip: "+fmt.Sprintf("%#v", this.FinalDefaultPrivateVip)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DNSServersList) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&virtual_network.DNSServersList{")
	s = append(s, "DnsIp: "+fmt.Sprintf("%#v", this.DnsIp)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *VoltADNPrivateNetworkType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 14)
	s = append(s, "&virtual_network.VoltADNPrivateNetworkType{")
	if this.PrivateAccessChoice != nil {
		s = append(s, "PrivateAccessChoice: "+fmt.Sprintf("%#v", this.PrivateAccessChoice)+",\n")
	}
	if this.DnsChoice != nil {
		s = append(s, "DnsChoice: "+fmt.Sprintf("%#v", this.DnsChoice)+",\n")
	}
	if this.CommonNodeSelector != nil {
		s = append(s, "CommonNodeSelector: "+fmt.Sprintf("%#v", this.CommonNodeSelector)+",\n")
	}
	keysForReInfoMap := make([]string, 0, len(this.ReInfoMap))
	for k, _ := range this.ReInfoMap {
		keysForReInfoMap = append(keysForReInfoMap, k)
	}
	sortkeys.Strings(keysForReInfoMap)
	mapStringForReInfoMap := "map[string]*VoltADNPrivateNetworkReInfoType{"
	for _, k := range keysForReInfoMap {
		mapStringForReInfoMap += fmt.Sprintf("%#v: %#v,", k, this.ReInfoMap[k])
	}
	mapStringForReInfoMap += "}"
	if this.ReInfoMap != nil {
		s = append(s, "ReInfoMap: "+mapStringForReInfoMap+",\n")
	}
	s = append(s, "OwnerTenantId: "+fmt.Sprintf("%#v", this.OwnerTenantId)+",\n")
	keysForTenantInfoMap := make([]string, 0, len(this.TenantInfoMap))
	for k, _ := range this.TenantInfoMap {
		keysForTenantInfoMap = append(keysForTenantInfoMap, k)
	}
	sortkeys.Strings(keysForTenantInfoMap)
	mapStringForTenantInfoMap := "map[string]*VoltADNPrivateNetworkTenantInfoType{"
	for _, k := range keysForTenantInfoMap {
		mapStringForTenantInfoMap += fmt.Sprintf("%#v: %#v,", k, this.TenantInfoMap[k])
	}
	mapStringForTenantInfoMap += "}"
	if this.TenantInfoMap != nil {
		s = append(s, "TenantInfoMap: "+mapStringForTenantInfoMap+",\n")
	}
	if this.DedicatedVipChoice != nil {
		s = append(s, "DedicatedVipChoice: "+fmt.Sprintf("%#v", this.DedicatedVipChoice)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *VoltADNPrivateNetworkType_NoPrivateAccess) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&virtual_network.VoltADNPrivateNetworkType_NoPrivateAccess{` +
		`NoPrivateAccess:` + fmt.Sprintf("%#v", this.NoPrivateAccess) + `}`}, ", ")
	return s
}
func (this *VoltADNPrivateNetworkType_PrivateAccessEnabled) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&virtual_network.VoltADNPrivateNetworkType_PrivateAccessEnabled{` +
		`PrivateAccessEnabled:` + fmt.Sprintf("%#v", this.PrivateAccessEnabled) + `}`}, ", ")
	return s
}
func (this *VoltADNPrivateNetworkType_NoPrivateDns) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&virtual_network.VoltADNPrivateNetworkType_NoPrivateDns{` +
		`NoPrivateDns:` + fmt.Sprintf("%#v", this.NoPrivateDns) + `}`}, ", ")
	return s
}
func (this *VoltADNPrivateNetworkType_PrivateDns) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&virtual_network.VoltADNPrivateNetworkType_PrivateDns{` +
		`PrivateDns:` + fmt.Sprintf("%#v", this.PrivateDns) + `}`}, ", ")
	return s
}
func (this *VoltADNPrivateNetworkType_NoAdvertiseDedicatedVips) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&virtual_network.VoltADNPrivateNetworkType_NoAdvertiseDedicatedVips{` +
		`NoAdvertiseDedicatedVips:` + fmt.Sprintf("%#v", this.NoAdvertiseDedicatedVips) + `}`}, ", ")
	return s
}
func (this *VoltADNPrivateNetworkType_AdvertiseDedicatedVips) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&virtual_network.VoltADNPrivateNetworkType_AdvertiseDedicatedVips{` +
		`AdvertiseDedicatedVips:` + fmt.Sprintf("%#v", this.AdvertiseDedicatedVips) + `}`}, ", ")
	return s
}
func (this *AnyCastVIPFleetType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&virtual_network.AnyCastVIPFleetType{")
	if this.VipAllocator != nil {
		s = append(s, "VipAllocator: "+fmt.Sprintf("%#v", this.VipAllocator)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SNATPoolType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&virtual_network.SNATPoolType{")
	s = append(s, "Ipv4Prefixes: "+fmt.Sprintf("%#v", this.Ipv4Prefixes)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SNATPoolSiteType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&virtual_network.SNATPoolSiteType{")
	keysForNodeSnatPool := make([]string, 0, len(this.NodeSnatPool))
	for k, _ := range this.NodeSnatPool {
		keysForNodeSnatPool = append(keysForNodeSnatPool, k)
	}
	sortkeys.Strings(keysForNodeSnatPool)
	mapStringForNodeSnatPool := "map[string]*SNATPoolType{"
	for _, k := range keysForNodeSnatPool {
		mapStringForNodeSnatPool += fmt.Sprintf("%#v: %#v,", k, this.NodeSnatPool[k])
	}
	mapStringForNodeSnatPool += "}"
	if this.NodeSnatPool != nil {
		s = append(s, "NodeSnatPool: "+mapStringForNodeSnatPool+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SNATPoolFleetType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&virtual_network.SNATPoolFleetType{")
	if this.SnatPoolAllocator != nil {
		s = append(s, "SnatPoolAllocator: "+fmt.Sprintf("%#v", this.SnatPoolAllocator)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Srv6NetworkNsParametersType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&virtual_network.Srv6NetworkNsParametersType{")
	s = append(s, "Namespace: "+fmt.Sprintf("%#v", this.Namespace)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *PerSiteSrv6NetworkType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 19)
	s = append(s, "&virtual_network.PerSiteSrv6NetworkType{")
	if this.NamespaceChoice != nil {
		s = append(s, "NamespaceChoice: "+fmt.Sprintf("%#v", this.NamespaceChoice)+",\n")
	}
	if this.DefaultVipChoice != nil {
		s = append(s, "DefaultVipChoice: "+fmt.Sprintf("%#v", this.DefaultVipChoice)+",\n")
	}
	if this.SnatPoolChoice != nil {
		s = append(s, "SnatPoolChoice: "+fmt.Sprintf("%#v", this.SnatPoolChoice)+",\n")
	}
	if this.Slice != nil {
		s = append(s, "Slice: "+fmt.Sprintf("%#v", this.Slice)+",\n")
	}
	if this.Fleets != nil {
		s = append(s, "Fleets: "+fmt.Sprintf("%#v", this.Fleets)+",\n")
	}
	if this.AccessNetworkRtargets != nil {
		s = append(s, "AccessNetworkRtargets: "+fmt.Sprintf("%#v", this.AccessNetworkRtargets)+",\n")
	}
	if this.InternetRtargets != nil {
		s = append(s, "InternetRtargets: "+fmt.Sprintf("%#v", this.InternetRtargets)+",\n")
	}
	if this.EnterpriseNetworkRtargets != nil {
		s = append(s, "EnterpriseNetworkRtargets: "+fmt.Sprintf("%#v", this.EnterpriseNetworkRtargets)+",\n")
	}
	if this.ExportRtargets != nil {
		s = append(s, "ExportRtargets: "+fmt.Sprintf("%#v", this.ExportRtargets)+",\n")
	}
	s = append(s, "RemoteSidStatsPlen: "+fmt.Sprintf("%#v", this.RemoteSidStatsPlen)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *PerSiteSrv6NetworkType_NoNamespaceNetwork) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&virtual_network.PerSiteSrv6NetworkType_NoNamespaceNetwork{` +
		`NoNamespaceNetwork:` + fmt.Sprintf("%#v", this.NoNamespaceNetwork) + `}`}, ", ")
	return s
}
func (this *PerSiteSrv6NetworkType_Srv6NetworkNsParams) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&virtual_network.PerSiteSrv6NetworkType_Srv6NetworkNsParams{` +
		`Srv6NetworkNsParams:` + fmt.Sprintf("%#v", this.Srv6NetworkNsParams) + `}`}, ", ")
	return s
}
func (this *PerSiteSrv6NetworkType_InterfaceIpVip) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&virtual_network.PerSiteSrv6NetworkType_InterfaceIpVip{` +
		`InterfaceIpVip:` + fmt.Sprintf("%#v", this.InterfaceIpVip) + `}`}, ", ")
	return s
}
func (this *PerSiteSrv6NetworkType_AnycastVip) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&virtual_network.PerSiteSrv6NetworkType_AnycastVip{` +
		`AnycastVip:` + fmt.Sprintf("%#v", this.AnycastVip) + `}`}, ", ")
	return s
}
func (this *PerSiteSrv6NetworkType_FleetVip) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&virtual_network.PerSiteSrv6NetworkType_FleetVip{` +
		`FleetVip:` + fmt.Sprintf("%#v", this.FleetVip) + `}`}, ", ")
	return s
}
func (this *PerSiteSrv6NetworkType_InterfaceIpSnatPool) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&virtual_network.PerSiteSrv6NetworkType_InterfaceIpSnatPool{` +
		`InterfaceIpSnatPool:` + fmt.Sprintf("%#v", this.InterfaceIpSnatPool) + `}`}, ", ")
	return s
}
func (this *PerSiteSrv6NetworkType_SiteSnatPool) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&virtual_network.PerSiteSrv6NetworkType_SiteSnatPool{` +
		`SiteSnatPool:` + fmt.Sprintf("%#v", this.SiteSnatPool) + `}`}, ", ")
	return s
}
func (this *PerSiteSrv6NetworkType_FleetSnatPool) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&virtual_network.PerSiteSrv6NetworkType_FleetSnatPool{` +
		`FleetSnatPool:` + fmt.Sprintf("%#v", this.FleetSnatPool) + `}`}, ", ")
	return s
}
func (this *NextHopInterfaceList) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&virtual_network.NextHopInterfaceList{")
	if this.Interfaces != nil {
		s = append(s, "Interfaces: "+fmt.Sprintf("%#v", this.Interfaces)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *StaticRouteViewType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&virtual_network.StaticRouteViewType{")
	s = append(s, "IpPrefixes: "+fmt.Sprintf("%#v", this.IpPrefixes)+",\n")
	if this.NextHopChoice != nil {
		s = append(s, "NextHopChoice: "+fmt.Sprintf("%#v", this.NextHopChoice)+",\n")
	}
	s = append(s, "Attrs: "+fmt.Sprintf("%#v", this.Attrs)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *StaticRouteViewType_IpAddress) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&virtual_network.StaticRouteViewType_IpAddress{` +
		`IpAddress:` + fmt.Sprintf("%#v", this.IpAddress) + `}`}, ", ")
	return s
}
func (this *StaticRouteViewType_Interface) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&virtual_network.StaticRouteViewType_Interface{` +
		`Interface:` + fmt.Sprintf("%#v", this.Interface) + `}`}, ", ")
	return s
}
func (this *StaticRouteViewType_DefaultGateway) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&virtual_network.StaticRouteViewType_DefaultGateway{` +
		`DefaultGateway:` + fmt.Sprintf("%#v", this.DefaultGateway) + `}`}, ", ")
	return s
}
func (this *ActivePBRPoliciesType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&virtual_network.ActivePBRPoliciesType{")
	if this.ForwardProxyPbrPolicies != nil {
		s = append(s, "ForwardProxyPbrPolicies: "+fmt.Sprintf("%#v", this.ForwardProxyPbrPolicies)+",\n")
	}
	if this.NetworkPbrPolicies != nil {
		s = append(s, "NetworkPbrPolicies: "+fmt.Sprintf("%#v", this.NetworkPbrPolicies)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *PerTenantVIPType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&virtual_network.PerTenantVIPType{")
	keysForTenantVipMap := make([]string, 0, len(this.TenantVipMap))
	for k, _ := range this.TenantVipMap {
		keysForTenantVipMap = append(keysForTenantVipMap, k)
	}
	sortkeys.Strings(keysForTenantVipMap)
	mapStringForTenantVipMap := "map[string]string{"
	for _, k := range keysForTenantVipMap {
		mapStringForTenantVipMap += fmt.Sprintf("%#v: %#v,", k, this.TenantVipMap[k])
	}
	mapStringForTenantVipMap += "}"
	if this.TenantVipMap != nil {
		s = append(s, "TenantVipMap: "+mapStringForTenantVipMap+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GlobalSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 24)
	s = append(s, "&virtual_network.GlobalSpecType{")
	if this.Subnets != nil {
		s = append(s, "Subnets: "+fmt.Sprintf("%#v", this.Subnets)+",\n")
	}
	s = append(s, "Type: "+fmt.Sprintf("%#v", this.Type)+",\n")
	if this.StaticRoutes != nil {
		s = append(s, "StaticRoutes: "+fmt.Sprintf("%#v", this.StaticRoutes)+",\n")
	}
	if this.NetworkChoice != nil {
		s = append(s, "NetworkChoice: "+fmt.Sprintf("%#v", this.NetworkChoice)+",\n")
	}
	if this.PrivateNetworkParameters != nil {
		s = append(s, "PrivateNetworkParameters: "+fmt.Sprintf("%#v", this.PrivateNetworkParameters)+",\n")
	}
	if this.DefaultVipChoice != nil {
		s = append(s, "DefaultVipChoice: "+fmt.Sprintf("%#v", this.DefaultVipChoice)+",\n")
	}
	if this.SnatPoolChoice != nil {
		s = append(s, "SnatPoolChoice: "+fmt.Sprintf("%#v", this.SnatPoolChoice)+",\n")
	}
	s = append(s, "ImportRtargetStrs: "+fmt.Sprintf("%#v", this.ImportRtargetStrs)+",\n")
	s = append(s, "ExportRtargetStrs: "+fmt.Sprintf("%#v", this.ExportRtargetStrs)+",\n")
	if this.FleetRefs != nil {
		s = append(s, "FleetRefs: "+fmt.Sprintf("%#v", this.FleetRefs)+",\n")
	}
	if this.SliceRef != nil {
		s = append(s, "SliceRef: "+fmt.Sprintf("%#v", this.SliceRef)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GlobalSpecType_GlobalNetwork) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&virtual_network.GlobalSpecType_GlobalNetwork{` +
		`GlobalNetwork:` + fmt.Sprintf("%#v", this.GlobalNetwork) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_SiteLocalNetwork) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&virtual_network.GlobalSpecType_SiteLocalNetwork{` +
		`SiteLocalNetwork:` + fmt.Sprintf("%#v", this.SiteLocalNetwork) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_SiteLocalInsideNetwork) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&virtual_network.GlobalSpecType_SiteLocalInsideNetwork{` +
		`SiteLocalInsideNetwork:` + fmt.Sprintf("%#v", this.SiteLocalInsideNetwork) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_InsideNetwork) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&virtual_network.GlobalSpecType_InsideNetwork{` +
		`InsideNetwork:` + fmt.Sprintf("%#v", this.InsideNetwork) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_LegacyType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&virtual_network.GlobalSpecType_LegacyType{` +
		`LegacyType:` + fmt.Sprintf("%#v", this.LegacyType) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_PrivateNetwork) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&virtual_network.GlobalSpecType_PrivateNetwork{` +
		`PrivateNetwork:` + fmt.Sprintf("%#v", this.PrivateNetwork) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_Srv6Network) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&virtual_network.GlobalSpecType_Srv6Network{` +
		`Srv6Network:` + fmt.Sprintf("%#v", this.Srv6Network) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_TenantVip) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&virtual_network.GlobalSpecType_TenantVip{` +
		`TenantVip:` + fmt.Sprintf("%#v", this.TenantVip) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_FleetVip) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&virtual_network.GlobalSpecType_FleetVip{` +
		`FleetVip:` + fmt.Sprintf("%#v", this.FleetVip) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_InterfaceIp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&virtual_network.GlobalSpecType_InterfaceIp{` +
		`InterfaceIp:` + fmt.Sprintf("%#v", this.InterfaceIp) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_SiteSnatPool) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&virtual_network.GlobalSpecType_SiteSnatPool{` +
		`SiteSnatPool:` + fmt.Sprintf("%#v", this.SiteSnatPool) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_FleetSnatPool) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&virtual_network.GlobalSpecType_FleetSnatPool{` +
		`FleetSnatPool:` + fmt.Sprintf("%#v", this.FleetSnatPool) + `}`}, ", ")
	return s
}
func (this *CreateSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&virtual_network.CreateSpecType{")
	if this.NetworkChoice != nil {
		s = append(s, "NetworkChoice: "+fmt.Sprintf("%#v", this.NetworkChoice)+",\n")
	}
	if this.StaticRoutes != nil {
		s = append(s, "StaticRoutes: "+fmt.Sprintf("%#v", this.StaticRoutes)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CreateSpecType_GlobalNetwork) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&virtual_network.CreateSpecType_GlobalNetwork{` +
		`GlobalNetwork:` + fmt.Sprintf("%#v", this.GlobalNetwork) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_SiteLocalNetwork) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&virtual_network.CreateSpecType_SiteLocalNetwork{` +
		`SiteLocalNetwork:` + fmt.Sprintf("%#v", this.SiteLocalNetwork) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_SiteLocalInsideNetwork) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&virtual_network.CreateSpecType_SiteLocalInsideNetwork{` +
		`SiteLocalInsideNetwork:` + fmt.Sprintf("%#v", this.SiteLocalInsideNetwork) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_LegacyType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&virtual_network.CreateSpecType_LegacyType{` +
		`LegacyType:` + fmt.Sprintf("%#v", this.LegacyType) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_Srv6Network) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&virtual_network.CreateSpecType_Srv6Network{` +
		`Srv6Network:` + fmt.Sprintf("%#v", this.Srv6Network) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 11)
	s = append(s, "&virtual_network.ReplaceSpecType{")
	if this.NetworkChoice != nil {
		s = append(s, "NetworkChoice: "+fmt.Sprintf("%#v", this.NetworkChoice)+",\n")
	}
	if this.StaticRoutes != nil {
		s = append(s, "StaticRoutes: "+fmt.Sprintf("%#v", this.StaticRoutes)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ReplaceSpecType_GlobalNetwork) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&virtual_network.ReplaceSpecType_GlobalNetwork{` +
		`GlobalNetwork:` + fmt.Sprintf("%#v", this.GlobalNetwork) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_SiteLocalNetwork) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&virtual_network.ReplaceSpecType_SiteLocalNetwork{` +
		`SiteLocalNetwork:` + fmt.Sprintf("%#v", this.SiteLocalNetwork) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_SiteLocalInsideNetwork) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&virtual_network.ReplaceSpecType_SiteLocalInsideNetwork{` +
		`SiteLocalInsideNetwork:` + fmt.Sprintf("%#v", this.SiteLocalInsideNetwork) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_LegacyType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&virtual_network.ReplaceSpecType_LegacyType{` +
		`LegacyType:` + fmt.Sprintf("%#v", this.LegacyType) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_PrivateNetwork) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&virtual_network.ReplaceSpecType_PrivateNetwork{` +
		`PrivateNetwork:` + fmt.Sprintf("%#v", this.PrivateNetwork) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_Srv6Network) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&virtual_network.ReplaceSpecType_Srv6Network{` +
		`Srv6Network:` + fmt.Sprintf("%#v", this.Srv6Network) + `}`}, ", ")
	return s
}
func (this *GetSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 11)
	s = append(s, "&virtual_network.GetSpecType{")
	if this.NetworkChoice != nil {
		s = append(s, "NetworkChoice: "+fmt.Sprintf("%#v", this.NetworkChoice)+",\n")
	}
	if this.StaticRoutes != nil {
		s = append(s, "StaticRoutes: "+fmt.Sprintf("%#v", this.StaticRoutes)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetSpecType_GlobalNetwork) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&virtual_network.GetSpecType_GlobalNetwork{` +
		`GlobalNetwork:` + fmt.Sprintf("%#v", this.GlobalNetwork) + `}`}, ", ")
	return s
}
func (this *GetSpecType_SiteLocalNetwork) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&virtual_network.GetSpecType_SiteLocalNetwork{` +
		`SiteLocalNetwork:` + fmt.Sprintf("%#v", this.SiteLocalNetwork) + `}`}, ", ")
	return s
}
func (this *GetSpecType_SiteLocalInsideNetwork) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&virtual_network.GetSpecType_SiteLocalInsideNetwork{` +
		`SiteLocalInsideNetwork:` + fmt.Sprintf("%#v", this.SiteLocalInsideNetwork) + `}`}, ", ")
	return s
}
func (this *GetSpecType_LegacyType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&virtual_network.GetSpecType_LegacyType{` +
		`LegacyType:` + fmt.Sprintf("%#v", this.LegacyType) + `}`}, ", ")
	return s
}
func (this *GetSpecType_PrivateNetwork) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&virtual_network.GetSpecType_PrivateNetwork{` +
		`PrivateNetwork:` + fmt.Sprintf("%#v", this.PrivateNetwork) + `}`}, ", ")
	return s
}
func (this *GetSpecType_Srv6Network) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&virtual_network.GetSpecType_Srv6Network{` +
		`Srv6Network:` + fmt.Sprintf("%#v", this.Srv6Network) + `}`}, ", ")
	return s
}
func valueToGoStringTypes(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *VoltADNPrivateNetworkReInfoType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VoltADNPrivateNetworkReInfoType) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Vlan != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.Vlan))
	}
	if m.NodeSelector != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.NodeSelector.Size()))
		n1, err := m.NodeSelector.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	return i, nil
}

func (m *VoltADNPrivateNetworkTenantInfoType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VoltADNPrivateNetworkTenantInfoType) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.DefaultPrivateVip) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTypes(dAtA, i, uint64(len(m.DefaultPrivateVip)))
		i += copy(dAtA[i:], m.DefaultPrivateVip)
	}
	if len(m.FinalDefaultPrivateVip) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTypes(dAtA, i, uint64(len(m.FinalDefaultPrivateVip)))
		i += copy(dAtA[i:], m.FinalDefaultPrivateVip)
	}
	return i, nil
}

func (m *DNSServersList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DNSServersList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.DnsIp) > 0 {
		for _, s := range m.DnsIp {
			dAtA[i] = 0x32
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	return i, nil
}

func (m *VoltADNPrivateNetworkType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VoltADNPrivateNetworkType) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.PrivateAccessChoice != nil {
		nn2, err := m.PrivateAccessChoice.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn2
	}
	if m.DnsChoice != nil {
		nn3, err := m.DnsChoice.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn3
	}
	if m.CommonNodeSelector != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.CommonNodeSelector.Size()))
		n4, err := m.CommonNodeSelector.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	if len(m.ReInfoMap) > 0 {
		keysForReInfoMap := make([]string, 0, len(m.ReInfoMap))
		for k, _ := range m.ReInfoMap {
			keysForReInfoMap = append(keysForReInfoMap, string(k))
		}
		sortkeys.Strings(keysForReInfoMap)
		for _, k := range keysForReInfoMap {
			dAtA[i] = 0x42
			i++
			v := m.ReInfoMap[string(k)]
			msgSize := 0
			if v != nil {
				msgSize = v.Size()
				msgSize += 1 + sovTypes(uint64(msgSize))
			}
			mapSize := 1 + len(k) + sovTypes(uint64(len(k))) + msgSize
			i = encodeVarintTypes(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintTypes(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			if v != nil {
				dAtA[i] = 0x12
				i++
				i = encodeVarintTypes(dAtA, i, uint64(v.Size()))
				n5, err := v.MarshalTo(dAtA[i:])
				if err != nil {
					return 0, err
				}
				i += n5
			}
		}
	}
	if len(m.OwnerTenantId) > 0 {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(len(m.OwnerTenantId)))
		i += copy(dAtA[i:], m.OwnerTenantId)
	}
	if len(m.TenantInfoMap) > 0 {
		keysForTenantInfoMap := make([]string, 0, len(m.TenantInfoMap))
		for k, _ := range m.TenantInfoMap {
			keysForTenantInfoMap = append(keysForTenantInfoMap, string(k))
		}
		sortkeys.Strings(keysForTenantInfoMap)
		for _, k := range keysForTenantInfoMap {
			dAtA[i] = 0x52
			i++
			v := m.TenantInfoMap[string(k)]
			msgSize := 0
			if v != nil {
				msgSize = v.Size()
				msgSize += 1 + sovTypes(uint64(msgSize))
			}
			mapSize := 1 + len(k) + sovTypes(uint64(len(k))) + msgSize
			i = encodeVarintTypes(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintTypes(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			if v != nil {
				dAtA[i] = 0x12
				i++
				i = encodeVarintTypes(dAtA, i, uint64(v.Size()))
				n6, err := v.MarshalTo(dAtA[i:])
				if err != nil {
					return 0, err
				}
				i += n6
			}
		}
	}
	if m.DedicatedVipChoice != nil {
		nn7, err := m.DedicatedVipChoice.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn7
	}
	return i, nil
}

func (m *VoltADNPrivateNetworkType_NoPrivateAccess) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.NoPrivateAccess != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.NoPrivateAccess.Size()))
		n8, err := m.NoPrivateAccess.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n8
	}
	return i, nil
}
func (m *VoltADNPrivateNetworkType_PrivateAccessEnabled) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.PrivateAccessEnabled != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.PrivateAccessEnabled.Size()))
		n9, err := m.PrivateAccessEnabled.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n9
	}
	return i, nil
}
func (m *VoltADNPrivateNetworkType_NoPrivateDns) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.NoPrivateDns != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.NoPrivateDns.Size()))
		n10, err := m.NoPrivateDns.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n10
	}
	return i, nil
}
func (m *VoltADNPrivateNetworkType_PrivateDns) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.PrivateDns != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.PrivateDns.Size()))
		n11, err := m.PrivateDns.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n11
	}
	return i, nil
}
func (m *VoltADNPrivateNetworkType_NoAdvertiseDedicatedVips) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.NoAdvertiseDedicatedVips != nil {
		dAtA[i] = 0x62
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.NoAdvertiseDedicatedVips.Size()))
		n12, err := m.NoAdvertiseDedicatedVips.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n12
	}
	return i, nil
}
func (m *VoltADNPrivateNetworkType_AdvertiseDedicatedVips) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.AdvertiseDedicatedVips != nil {
		dAtA[i] = 0x6a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.AdvertiseDedicatedVips.Size()))
		n13, err := m.AdvertiseDedicatedVips.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n13
	}
	return i, nil
}
func (m *AnyCastVIPFleetType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AnyCastVIPFleetType) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.VipAllocator != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.VipAllocator.Size()))
		n14, err := m.VipAllocator.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n14
	}
	return i, nil
}

func (m *SNATPoolType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SNATPoolType) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Ipv4Prefixes) > 0 {
		for _, s := range m.Ipv4Prefixes {
			dAtA[i] = 0xa
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	return i, nil
}

func (m *SNATPoolSiteType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SNATPoolSiteType) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.NodeSnatPool) > 0 {
		keysForNodeSnatPool := make([]string, 0, len(m.NodeSnatPool))
		for k, _ := range m.NodeSnatPool {
			keysForNodeSnatPool = append(keysForNodeSnatPool, string(k))
		}
		sortkeys.Strings(keysForNodeSnatPool)
		for _, k := range keysForNodeSnatPool {
			dAtA[i] = 0xa
			i++
			v := m.NodeSnatPool[string(k)]
			msgSize := 0
			if v != nil {
				msgSize = v.Size()
				msgSize += 1 + sovTypes(uint64(msgSize))
			}
			mapSize := 1 + len(k) + sovTypes(uint64(len(k))) + msgSize
			i = encodeVarintTypes(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintTypes(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			if v != nil {
				dAtA[i] = 0x12
				i++
				i = encodeVarintTypes(dAtA, i, uint64(v.Size()))
				n15, err := v.MarshalTo(dAtA[i:])
				if err != nil {
					return 0, err
				}
				i += n15
			}
		}
	}
	return i, nil
}

func (m *SNATPoolFleetType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SNATPoolFleetType) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.SnatPoolAllocator != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.SnatPoolAllocator.Size()))
		n16, err := m.SnatPoolAllocator.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n16
	}
	return i, nil
}

func (m *Srv6NetworkNsParametersType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Srv6NetworkNsParametersType) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Namespace) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Namespace)))
		i += copy(dAtA[i:], m.Namespace)
	}
	return i, nil
}

func (m *PerSiteSrv6NetworkType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PerSiteSrv6NetworkType) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.NamespaceChoice != nil {
		nn17, err := m.NamespaceChoice.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn17
	}
	if m.DefaultVipChoice != nil {
		nn18, err := m.DefaultVipChoice.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn18
	}
	if m.SnatPoolChoice != nil {
		nn19, err := m.SnatPoolChoice.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn19
	}
	if m.Slice != nil {
		dAtA[i] = 0x62
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.Slice.Size()))
		n20, err := m.Slice.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n20
	}
	if len(m.Fleets) > 0 {
		for _, msg := range m.Fleets {
			dAtA[i] = 0x6a
			i++
			i = encodeVarintTypes(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.AccessNetworkRtargets) > 0 {
		for _, msg := range m.AccessNetworkRtargets {
			dAtA[i] = 0x72
			i++
			i = encodeVarintTypes(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.InternetRtargets) > 0 {
		for _, msg := range m.InternetRtargets {
			dAtA[i] = 0x7a
			i++
			i = encodeVarintTypes(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.EnterpriseNetworkRtargets) > 0 {
		for _, msg := range m.EnterpriseNetworkRtargets {
			dAtA[i] = 0x82
			i++
			dAtA[i] = 0x1
			i++
			i = encodeVarintTypes(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.ExportRtargets) > 0 {
		for _, msg := range m.ExportRtargets {
			dAtA[i] = 0x8a
			i++
			dAtA[i] = 0x1
			i++
			i = encodeVarintTypes(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.RemoteSidStatsPlen != 0 {
		dAtA[i] = 0x90
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.RemoteSidStatsPlen))
	}
	return i, nil
}

func (m *PerSiteSrv6NetworkType_NoNamespaceNetwork) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.NoNamespaceNetwork != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.NoNamespaceNetwork.Size()))
		n21, err := m.NoNamespaceNetwork.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n21
	}
	return i, nil
}
func (m *PerSiteSrv6NetworkType_Srv6NetworkNsParams) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Srv6NetworkNsParams != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.Srv6NetworkNsParams.Size()))
		n22, err := m.Srv6NetworkNsParams.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n22
	}
	return i, nil
}
func (m *PerSiteSrv6NetworkType_InterfaceIpVip) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.InterfaceIpVip != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.InterfaceIpVip.Size()))
		n23, err := m.InterfaceIpVip.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n23
	}
	return i, nil
}
func (m *PerSiteSrv6NetworkType_AnycastVip) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x32
	i++
	i = encodeVarintTypes(dAtA, i, uint64(len(m.AnycastVip)))
	i += copy(dAtA[i:], m.AnycastVip)
	return i, nil
}
func (m *PerSiteSrv6NetworkType_FleetVip) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.FleetVip != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.FleetVip.Size()))
		n24, err := m.FleetVip.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n24
	}
	return i, nil
}
func (m *PerSiteSrv6NetworkType_InterfaceIpSnatPool) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.InterfaceIpSnatPool != nil {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.InterfaceIpSnatPool.Size()))
		n25, err := m.InterfaceIpSnatPool.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n25
	}
	return i, nil
}
func (m *PerSiteSrv6NetworkType_SiteSnatPool) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.SiteSnatPool != nil {
		dAtA[i] = 0x52
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.SiteSnatPool.Size()))
		n26, err := m.SiteSnatPool.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n26
	}
	return i, nil
}
func (m *PerSiteSrv6NetworkType_FleetSnatPool) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.FleetSnatPool != nil {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.FleetSnatPool.Size()))
		n27, err := m.FleetSnatPool.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n27
	}
	return i, nil
}
func (m *NextHopInterfaceList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NextHopInterfaceList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Interfaces) > 0 {
		for _, msg := range m.Interfaces {
			dAtA[i] = 0xa
			i++
			i = encodeVarintTypes(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *StaticRouteViewType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StaticRouteViewType) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.IpPrefixes) > 0 {
		for _, s := range m.IpPrefixes {
			dAtA[i] = 0xa
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if m.NextHopChoice != nil {
		nn28, err := m.NextHopChoice.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn28
	}
	if len(m.Attrs) > 0 {
		dAtA30 := make([]byte, len(m.Attrs)*10)
		var j29 int
		for _, num := range m.Attrs {
			for num >= 1<<7 {
				dAtA30[j29] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j29++
			}
			dAtA30[j29] = uint8(num)
			j29++
		}
		dAtA[i] = 0x32
		i++
		i = encodeVarintTypes(dAtA, i, uint64(j29))
		i += copy(dAtA[i:], dAtA30[:j29])
	}
	return i, nil
}

func (m *StaticRouteViewType_IpAddress) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x1a
	i++
	i = encodeVarintTypes(dAtA, i, uint64(len(m.IpAddress)))
	i += copy(dAtA[i:], m.IpAddress)
	return i, nil
}
func (m *StaticRouteViewType_Interface) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Interface != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.Interface.Size()))
		n31, err := m.Interface.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n31
	}
	return i, nil
}
func (m *StaticRouteViewType_DefaultGateway) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.DefaultGateway != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.DefaultGateway.Size()))
		n32, err := m.DefaultGateway.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n32
	}
	return i, nil
}
func (m *ActivePBRPoliciesType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ActivePBRPoliciesType) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ForwardProxyPbrPolicies) > 0 {
		for _, msg := range m.ForwardProxyPbrPolicies {
			dAtA[i] = 0xa
			i++
			i = encodeVarintTypes(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.NetworkPbrPolicies) > 0 {
		for _, msg := range m.NetworkPbrPolicies {
			dAtA[i] = 0x12
			i++
			i = encodeVarintTypes(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *PerTenantVIPType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PerTenantVIPType) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.TenantVipMap) > 0 {
		keysForTenantVipMap := make([]string, 0, len(m.TenantVipMap))
		for k, _ := range m.TenantVipMap {
			keysForTenantVipMap = append(keysForTenantVipMap, string(k))
		}
		sortkeys.Strings(keysForTenantVipMap)
		for _, k := range keysForTenantVipMap {
			dAtA[i] = 0xa
			i++
			v := m.TenantVipMap[string(k)]
			mapSize := 1 + len(k) + sovTypes(uint64(len(k))) + 1 + len(v) + sovTypes(uint64(len(v)))
			i = encodeVarintTypes(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintTypes(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			dAtA[i] = 0x12
			i++
			i = encodeVarintTypes(dAtA, i, uint64(len(v)))
			i += copy(dAtA[i:], v)
		}
	}
	return i, nil
}

func (m *GlobalSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GlobalSpecType) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Subnets) > 0 {
		for _, msg := range m.Subnets {
			dAtA[i] = 0x12
			i++
			i = encodeVarintTypes(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Type != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.Type))
	}
	if len(m.StaticRoutes) > 0 {
		for _, msg := range m.StaticRoutes {
			dAtA[i] = 0x2a
			i++
			i = encodeVarintTypes(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.NetworkChoice != nil {
		nn33, err := m.NetworkChoice.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn33
	}
	if m.PrivateNetworkParameters != nil {
		dAtA[i] = 0x7a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.PrivateNetworkParameters.Size()))
		n34, err := m.PrivateNetworkParameters.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n34
	}
	if m.DefaultVipChoice != nil {
		nn35, err := m.DefaultVipChoice.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn35
	}
	if m.SnatPoolChoice != nil {
		nn36, err := m.SnatPoolChoice.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn36
	}
	if len(m.ImportRtargetStrs) > 0 {
		for _, s := range m.ImportRtargetStrs {
			dAtA[i] = 0xc2
			i++
			dAtA[i] = 0x3e
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.ExportRtargetStrs) > 0 {
		for _, s := range m.ExportRtargetStrs {
			dAtA[i] = 0xca
			i++
			dAtA[i] = 0x3e
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.FleetRefs) > 0 {
		for _, msg := range m.FleetRefs {
			dAtA[i] = 0xd2
			i++
			dAtA[i] = 0x3e
			i++
			i = encodeVarintTypes(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.SliceRef) > 0 {
		for _, msg := range m.SliceRef {
			dAtA[i] = 0xda
			i++
			dAtA[i] = 0x3e
			i++
			i = encodeVarintTypes(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *GlobalSpecType_GlobalNetwork) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.GlobalNetwork != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.GlobalNetwork.Size()))
		n37, err := m.GlobalNetwork.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n37
	}
	return i, nil
}
func (m *GlobalSpecType_SiteLocalNetwork) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.SiteLocalNetwork != nil {
		dAtA[i] = 0x42
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.SiteLocalNetwork.Size()))
		n38, err := m.SiteLocalNetwork.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n38
	}
	return i, nil
}
func (m *GlobalSpecType_SiteLocalInsideNetwork) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.SiteLocalInsideNetwork != nil {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.SiteLocalInsideNetwork.Size()))
		n39, err := m.SiteLocalInsideNetwork.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n39
	}
	return i, nil
}
func (m *GlobalSpecType_InsideNetwork) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.InsideNetwork != nil {
		dAtA[i] = 0x52
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.InsideNetwork.Size()))
		n40, err := m.InsideNetwork.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n40
	}
	return i, nil
}
func (m *GlobalSpecType_LegacyType) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x58
	i++
	i = encodeVarintTypes(dAtA, i, uint64(m.LegacyType))
	return i, nil
}
func (m *GlobalSpecType_PrivateNetwork) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.PrivateNetwork != nil {
		dAtA[i] = 0x6a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.PrivateNetwork.Size()))
		n41, err := m.PrivateNetwork.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n41
	}
	return i, nil
}
func (m *GlobalSpecType_Srv6Network) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Srv6Network != nil {
		dAtA[i] = 0x72
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.Srv6Network.Size()))
		n42, err := m.Srv6Network.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n42
	}
	return i, nil
}
func (m *GlobalSpecType_TenantVip) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.TenantVip != nil {
		dAtA[i] = 0x8a
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.TenantVip.Size()))
		n43, err := m.TenantVip.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n43
	}
	return i, nil
}
func (m *GlobalSpecType_FleetVip) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.FleetVip != nil {
		dAtA[i] = 0x92
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.FleetVip.Size()))
		n44, err := m.FleetVip.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n44
	}
	return i, nil
}
func (m *GlobalSpecType_InterfaceIp) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.InterfaceIp != nil {
		dAtA[i] = 0xa2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.InterfaceIp.Size()))
		n45, err := m.InterfaceIp.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n45
	}
	return i, nil
}
func (m *GlobalSpecType_SiteSnatPool) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.SiteSnatPool != nil {
		dAtA[i] = 0xaa
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.SiteSnatPool.Size()))
		n46, err := m.SiteSnatPool.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n46
	}
	return i, nil
}
func (m *GlobalSpecType_FleetSnatPool) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.FleetSnatPool != nil {
		dAtA[i] = 0xb2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.FleetSnatPool.Size()))
		n47, err := m.FleetSnatPool.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n47
	}
	return i, nil
}
func (m *CreateSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateSpecType) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.NetworkChoice != nil {
		nn48, err := m.NetworkChoice.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn48
	}
	if len(m.StaticRoutes) > 0 {
		for _, msg := range m.StaticRoutes {
			dAtA[i] = 0x62
			i++
			i = encodeVarintTypes(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *CreateSpecType_GlobalNetwork) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.GlobalNetwork != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.GlobalNetwork.Size()))
		n49, err := m.GlobalNetwork.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n49
	}
	return i, nil
}
func (m *CreateSpecType_SiteLocalNetwork) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.SiteLocalNetwork != nil {
		dAtA[i] = 0x42
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.SiteLocalNetwork.Size()))
		n50, err := m.SiteLocalNetwork.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n50
	}
	return i, nil
}
func (m *CreateSpecType_SiteLocalInsideNetwork) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.SiteLocalInsideNetwork != nil {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.SiteLocalInsideNetwork.Size()))
		n51, err := m.SiteLocalInsideNetwork.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n51
	}
	return i, nil
}
func (m *CreateSpecType_LegacyType) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x58
	i++
	i = encodeVarintTypes(dAtA, i, uint64(m.LegacyType))
	return i, nil
}
func (m *CreateSpecType_Srv6Network) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Srv6Network != nil {
		dAtA[i] = 0x72
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.Srv6Network.Size()))
		n52, err := m.Srv6Network.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n52
	}
	return i, nil
}
func (m *ReplaceSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplaceSpecType) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.NetworkChoice != nil {
		nn53, err := m.NetworkChoice.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn53
	}
	if len(m.StaticRoutes) > 0 {
		for _, msg := range m.StaticRoutes {
			dAtA[i] = 0x62
			i++
			i = encodeVarintTypes(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *ReplaceSpecType_GlobalNetwork) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.GlobalNetwork != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.GlobalNetwork.Size()))
		n54, err := m.GlobalNetwork.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n54
	}
	return i, nil
}
func (m *ReplaceSpecType_SiteLocalNetwork) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.SiteLocalNetwork != nil {
		dAtA[i] = 0x42
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.SiteLocalNetwork.Size()))
		n55, err := m.SiteLocalNetwork.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n55
	}
	return i, nil
}
func (m *ReplaceSpecType_SiteLocalInsideNetwork) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.SiteLocalInsideNetwork != nil {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.SiteLocalInsideNetwork.Size()))
		n56, err := m.SiteLocalInsideNetwork.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n56
	}
	return i, nil
}
func (m *ReplaceSpecType_LegacyType) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x58
	i++
	i = encodeVarintTypes(dAtA, i, uint64(m.LegacyType))
	return i, nil
}
func (m *ReplaceSpecType_PrivateNetwork) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.PrivateNetwork != nil {
		dAtA[i] = 0x6a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.PrivateNetwork.Size()))
		n57, err := m.PrivateNetwork.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n57
	}
	return i, nil
}
func (m *ReplaceSpecType_Srv6Network) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Srv6Network != nil {
		dAtA[i] = 0x72
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.Srv6Network.Size()))
		n58, err := m.Srv6Network.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n58
	}
	return i, nil
}
func (m *GetSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetSpecType) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.NetworkChoice != nil {
		nn59, err := m.NetworkChoice.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn59
	}
	if len(m.StaticRoutes) > 0 {
		for _, msg := range m.StaticRoutes {
			dAtA[i] = 0x62
			i++
			i = encodeVarintTypes(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *GetSpecType_GlobalNetwork) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.GlobalNetwork != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.GlobalNetwork.Size()))
		n60, err := m.GlobalNetwork.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n60
	}
	return i, nil
}
func (m *GetSpecType_SiteLocalNetwork) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.SiteLocalNetwork != nil {
		dAtA[i] = 0x42
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.SiteLocalNetwork.Size()))
		n61, err := m.SiteLocalNetwork.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n61
	}
	return i, nil
}
func (m *GetSpecType_SiteLocalInsideNetwork) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.SiteLocalInsideNetwork != nil {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.SiteLocalInsideNetwork.Size()))
		n62, err := m.SiteLocalInsideNetwork.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n62
	}
	return i, nil
}
func (m *GetSpecType_LegacyType) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x58
	i++
	i = encodeVarintTypes(dAtA, i, uint64(m.LegacyType))
	return i, nil
}
func (m *GetSpecType_PrivateNetwork) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.PrivateNetwork != nil {
		dAtA[i] = 0x6a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.PrivateNetwork.Size()))
		n63, err := m.PrivateNetwork.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n63
	}
	return i, nil
}
func (m *GetSpecType_Srv6Network) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Srv6Network != nil {
		dAtA[i] = 0x72
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.Srv6Network.Size()))
		n64, err := m.Srv6Network.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n64
	}
	return i, nil
}
func encodeVarintTypes(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *VoltADNPrivateNetworkReInfoType) Size() (n int) {
	var l int
	_ = l
	if m.Vlan != 0 {
		n += 1 + sovTypes(uint64(m.Vlan))
	}
	if m.NodeSelector != nil {
		l = m.NodeSelector.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *VoltADNPrivateNetworkTenantInfoType) Size() (n int) {
	var l int
	_ = l
	l = len(m.DefaultPrivateVip)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.FinalDefaultPrivateVip)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *DNSServersList) Size() (n int) {
	var l int
	_ = l
	if len(m.DnsIp) > 0 {
		for _, s := range m.DnsIp {
			l = len(s)
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *VoltADNPrivateNetworkType) Size() (n int) {
	var l int
	_ = l
	if m.PrivateAccessChoice != nil {
		n += m.PrivateAccessChoice.Size()
	}
	if m.DnsChoice != nil {
		n += m.DnsChoice.Size()
	}
	if m.CommonNodeSelector != nil {
		l = m.CommonNodeSelector.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if len(m.ReInfoMap) > 0 {
		for k, v := range m.ReInfoMap {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovTypes(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovTypes(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovTypes(uint64(mapEntrySize))
		}
	}
	l = len(m.OwnerTenantId)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if len(m.TenantInfoMap) > 0 {
		for k, v := range m.TenantInfoMap {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovTypes(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovTypes(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovTypes(uint64(mapEntrySize))
		}
	}
	if m.DedicatedVipChoice != nil {
		n += m.DedicatedVipChoice.Size()
	}
	return n
}

func (m *VoltADNPrivateNetworkType_NoPrivateAccess) Size() (n int) {
	var l int
	_ = l
	if m.NoPrivateAccess != nil {
		l = m.NoPrivateAccess.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *VoltADNPrivateNetworkType_PrivateAccessEnabled) Size() (n int) {
	var l int
	_ = l
	if m.PrivateAccessEnabled != nil {
		l = m.PrivateAccessEnabled.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *VoltADNPrivateNetworkType_NoPrivateDns) Size() (n int) {
	var l int
	_ = l
	if m.NoPrivateDns != nil {
		l = m.NoPrivateDns.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *VoltADNPrivateNetworkType_PrivateDns) Size() (n int) {
	var l int
	_ = l
	if m.PrivateDns != nil {
		l = m.PrivateDns.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *VoltADNPrivateNetworkType_NoAdvertiseDedicatedVips) Size() (n int) {
	var l int
	_ = l
	if m.NoAdvertiseDedicatedVips != nil {
		l = m.NoAdvertiseDedicatedVips.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *VoltADNPrivateNetworkType_AdvertiseDedicatedVips) Size() (n int) {
	var l int
	_ = l
	if m.AdvertiseDedicatedVips != nil {
		l = m.AdvertiseDedicatedVips.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *AnyCastVIPFleetType) Size() (n int) {
	var l int
	_ = l
	if m.VipAllocator != nil {
		l = m.VipAllocator.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *SNATPoolType) Size() (n int) {
	var l int
	_ = l
	if len(m.Ipv4Prefixes) > 0 {
		for _, s := range m.Ipv4Prefixes {
			l = len(s)
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *SNATPoolSiteType) Size() (n int) {
	var l int
	_ = l
	if len(m.NodeSnatPool) > 0 {
		for k, v := range m.NodeSnatPool {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovTypes(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovTypes(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovTypes(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *SNATPoolFleetType) Size() (n int) {
	var l int
	_ = l
	if m.SnatPoolAllocator != nil {
		l = m.SnatPoolAllocator.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *Srv6NetworkNsParametersType) Size() (n int) {
	var l int
	_ = l
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *PerSiteSrv6NetworkType) Size() (n int) {
	var l int
	_ = l
	if m.NamespaceChoice != nil {
		n += m.NamespaceChoice.Size()
	}
	if m.DefaultVipChoice != nil {
		n += m.DefaultVipChoice.Size()
	}
	if m.SnatPoolChoice != nil {
		n += m.SnatPoolChoice.Size()
	}
	if m.Slice != nil {
		l = m.Slice.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if len(m.Fleets) > 0 {
		for _, e := range m.Fleets {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if len(m.AccessNetworkRtargets) > 0 {
		for _, e := range m.AccessNetworkRtargets {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if len(m.InternetRtargets) > 0 {
		for _, e := range m.InternetRtargets {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if len(m.EnterpriseNetworkRtargets) > 0 {
		for _, e := range m.EnterpriseNetworkRtargets {
			l = e.Size()
			n += 2 + l + sovTypes(uint64(l))
		}
	}
	if len(m.ExportRtargets) > 0 {
		for _, e := range m.ExportRtargets {
			l = e.Size()
			n += 2 + l + sovTypes(uint64(l))
		}
	}
	if m.RemoteSidStatsPlen != 0 {
		n += 2 + sovTypes(uint64(m.RemoteSidStatsPlen))
	}
	return n
}

func (m *PerSiteSrv6NetworkType_NoNamespaceNetwork) Size() (n int) {
	var l int
	_ = l
	if m.NoNamespaceNetwork != nil {
		l = m.NoNamespaceNetwork.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *PerSiteSrv6NetworkType_Srv6NetworkNsParams) Size() (n int) {
	var l int
	_ = l
	if m.Srv6NetworkNsParams != nil {
		l = m.Srv6NetworkNsParams.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *PerSiteSrv6NetworkType_InterfaceIpVip) Size() (n int) {
	var l int
	_ = l
	if m.InterfaceIpVip != nil {
		l = m.InterfaceIpVip.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *PerSiteSrv6NetworkType_AnycastVip) Size() (n int) {
	var l int
	_ = l
	l = len(m.AnycastVip)
	n += 1 + l + sovTypes(uint64(l))
	return n
}
func (m *PerSiteSrv6NetworkType_FleetVip) Size() (n int) {
	var l int
	_ = l
	if m.FleetVip != nil {
		l = m.FleetVip.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *PerSiteSrv6NetworkType_InterfaceIpSnatPool) Size() (n int) {
	var l int
	_ = l
	if m.InterfaceIpSnatPool != nil {
		l = m.InterfaceIpSnatPool.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *PerSiteSrv6NetworkType_SiteSnatPool) Size() (n int) {
	var l int
	_ = l
	if m.SiteSnatPool != nil {
		l = m.SiteSnatPool.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *PerSiteSrv6NetworkType_FleetSnatPool) Size() (n int) {
	var l int
	_ = l
	if m.FleetSnatPool != nil {
		l = m.FleetSnatPool.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *NextHopInterfaceList) Size() (n int) {
	var l int
	_ = l
	if len(m.Interfaces) > 0 {
		for _, e := range m.Interfaces {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *StaticRouteViewType) Size() (n int) {
	var l int
	_ = l
	if len(m.IpPrefixes) > 0 {
		for _, s := range m.IpPrefixes {
			l = len(s)
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if m.NextHopChoice != nil {
		n += m.NextHopChoice.Size()
	}
	if len(m.Attrs) > 0 {
		l = 0
		for _, e := range m.Attrs {
			l += sovTypes(uint64(e))
		}
		n += 1 + sovTypes(uint64(l)) + l
	}
	return n
}

func (m *StaticRouteViewType_IpAddress) Size() (n int) {
	var l int
	_ = l
	l = len(m.IpAddress)
	n += 1 + l + sovTypes(uint64(l))
	return n
}
func (m *StaticRouteViewType_Interface) Size() (n int) {
	var l int
	_ = l
	if m.Interface != nil {
		l = m.Interface.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *StaticRouteViewType_DefaultGateway) Size() (n int) {
	var l int
	_ = l
	if m.DefaultGateway != nil {
		l = m.DefaultGateway.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ActivePBRPoliciesType) Size() (n int) {
	var l int
	_ = l
	if len(m.ForwardProxyPbrPolicies) > 0 {
		for _, e := range m.ForwardProxyPbrPolicies {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if len(m.NetworkPbrPolicies) > 0 {
		for _, e := range m.NetworkPbrPolicies {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *PerTenantVIPType) Size() (n int) {
	var l int
	_ = l
	if len(m.TenantVipMap) > 0 {
		for k, v := range m.TenantVipMap {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovTypes(uint64(len(k))) + 1 + len(v) + sovTypes(uint64(len(v)))
			n += mapEntrySize + 1 + sovTypes(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *GlobalSpecType) Size() (n int) {
	var l int
	_ = l
	if len(m.Subnets) > 0 {
		for _, e := range m.Subnets {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if m.Type != 0 {
		n += 1 + sovTypes(uint64(m.Type))
	}
	if len(m.StaticRoutes) > 0 {
		for _, e := range m.StaticRoutes {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if m.NetworkChoice != nil {
		n += m.NetworkChoice.Size()
	}
	if m.PrivateNetworkParameters != nil {
		l = m.PrivateNetworkParameters.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.DefaultVipChoice != nil {
		n += m.DefaultVipChoice.Size()
	}
	if m.SnatPoolChoice != nil {
		n += m.SnatPoolChoice.Size()
	}
	if len(m.ImportRtargetStrs) > 0 {
		for _, s := range m.ImportRtargetStrs {
			l = len(s)
			n += 2 + l + sovTypes(uint64(l))
		}
	}
	if len(m.ExportRtargetStrs) > 0 {
		for _, s := range m.ExportRtargetStrs {
			l = len(s)
			n += 2 + l + sovTypes(uint64(l))
		}
	}
	if len(m.FleetRefs) > 0 {
		for _, e := range m.FleetRefs {
			l = e.Size()
			n += 2 + l + sovTypes(uint64(l))
		}
	}
	if len(m.SliceRef) > 0 {
		for _, e := range m.SliceRef {
			l = e.Size()
			n += 2 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *GlobalSpecType_GlobalNetwork) Size() (n int) {
	var l int
	_ = l
	if m.GlobalNetwork != nil {
		l = m.GlobalNetwork.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_SiteLocalNetwork) Size() (n int) {
	var l int
	_ = l
	if m.SiteLocalNetwork != nil {
		l = m.SiteLocalNetwork.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_SiteLocalInsideNetwork) Size() (n int) {
	var l int
	_ = l
	if m.SiteLocalInsideNetwork != nil {
		l = m.SiteLocalInsideNetwork.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_InsideNetwork) Size() (n int) {
	var l int
	_ = l
	if m.InsideNetwork != nil {
		l = m.InsideNetwork.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_LegacyType) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovTypes(uint64(m.LegacyType))
	return n
}
func (m *GlobalSpecType_PrivateNetwork) Size() (n int) {
	var l int
	_ = l
	if m.PrivateNetwork != nil {
		l = m.PrivateNetwork.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_Srv6Network) Size() (n int) {
	var l int
	_ = l
	if m.Srv6Network != nil {
		l = m.Srv6Network.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_TenantVip) Size() (n int) {
	var l int
	_ = l
	if m.TenantVip != nil {
		l = m.TenantVip.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_FleetVip) Size() (n int) {
	var l int
	_ = l
	if m.FleetVip != nil {
		l = m.FleetVip.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_InterfaceIp) Size() (n int) {
	var l int
	_ = l
	if m.InterfaceIp != nil {
		l = m.InterfaceIp.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_SiteSnatPool) Size() (n int) {
	var l int
	_ = l
	if m.SiteSnatPool != nil {
		l = m.SiteSnatPool.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_FleetSnatPool) Size() (n int) {
	var l int
	_ = l
	if m.FleetSnatPool != nil {
		l = m.FleetSnatPool.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType) Size() (n int) {
	var l int
	_ = l
	if m.NetworkChoice != nil {
		n += m.NetworkChoice.Size()
	}
	if len(m.StaticRoutes) > 0 {
		for _, e := range m.StaticRoutes {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *CreateSpecType_GlobalNetwork) Size() (n int) {
	var l int
	_ = l
	if m.GlobalNetwork != nil {
		l = m.GlobalNetwork.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_SiteLocalNetwork) Size() (n int) {
	var l int
	_ = l
	if m.SiteLocalNetwork != nil {
		l = m.SiteLocalNetwork.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_SiteLocalInsideNetwork) Size() (n int) {
	var l int
	_ = l
	if m.SiteLocalInsideNetwork != nil {
		l = m.SiteLocalInsideNetwork.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_LegacyType) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovTypes(uint64(m.LegacyType))
	return n
}
func (m *CreateSpecType_Srv6Network) Size() (n int) {
	var l int
	_ = l
	if m.Srv6Network != nil {
		l = m.Srv6Network.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType) Size() (n int) {
	var l int
	_ = l
	if m.NetworkChoice != nil {
		n += m.NetworkChoice.Size()
	}
	if len(m.StaticRoutes) > 0 {
		for _, e := range m.StaticRoutes {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *ReplaceSpecType_GlobalNetwork) Size() (n int) {
	var l int
	_ = l
	if m.GlobalNetwork != nil {
		l = m.GlobalNetwork.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_SiteLocalNetwork) Size() (n int) {
	var l int
	_ = l
	if m.SiteLocalNetwork != nil {
		l = m.SiteLocalNetwork.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_SiteLocalInsideNetwork) Size() (n int) {
	var l int
	_ = l
	if m.SiteLocalInsideNetwork != nil {
		l = m.SiteLocalInsideNetwork.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_LegacyType) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovTypes(uint64(m.LegacyType))
	return n
}
func (m *ReplaceSpecType_PrivateNetwork) Size() (n int) {
	var l int
	_ = l
	if m.PrivateNetwork != nil {
		l = m.PrivateNetwork.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_Srv6Network) Size() (n int) {
	var l int
	_ = l
	if m.Srv6Network != nil {
		l = m.Srv6Network.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType) Size() (n int) {
	var l int
	_ = l
	if m.NetworkChoice != nil {
		n += m.NetworkChoice.Size()
	}
	if len(m.StaticRoutes) > 0 {
		for _, e := range m.StaticRoutes {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *GetSpecType_GlobalNetwork) Size() (n int) {
	var l int
	_ = l
	if m.GlobalNetwork != nil {
		l = m.GlobalNetwork.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_SiteLocalNetwork) Size() (n int) {
	var l int
	_ = l
	if m.SiteLocalNetwork != nil {
		l = m.SiteLocalNetwork.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_SiteLocalInsideNetwork) Size() (n int) {
	var l int
	_ = l
	if m.SiteLocalInsideNetwork != nil {
		l = m.SiteLocalInsideNetwork.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_LegacyType) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovTypes(uint64(m.LegacyType))
	return n
}
func (m *GetSpecType_PrivateNetwork) Size() (n int) {
	var l int
	_ = l
	if m.PrivateNetwork != nil {
		l = m.PrivateNetwork.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_Srv6Network) Size() (n int) {
	var l int
	_ = l
	if m.Srv6Network != nil {
		l = m.Srv6Network.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func sovTypes(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozTypes(x uint64) (n int) {
	return sovTypes(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *VoltADNPrivateNetworkReInfoType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&VoltADNPrivateNetworkReInfoType{`,
		`Vlan:` + fmt.Sprintf("%v", this.Vlan) + `,`,
		`NodeSelector:` + strings.Replace(fmt.Sprintf("%v", this.NodeSelector), "LabelSelectorType", "ves_io_schema4.LabelSelectorType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *VoltADNPrivateNetworkTenantInfoType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&VoltADNPrivateNetworkTenantInfoType{`,
		`DefaultPrivateVip:` + fmt.Sprintf("%v", this.DefaultPrivateVip) + `,`,
		`FinalDefaultPrivateVip:` + fmt.Sprintf("%v", this.FinalDefaultPrivateVip) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DNSServersList) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DNSServersList{`,
		`DnsIp:` + fmt.Sprintf("%v", this.DnsIp) + `,`,
		`}`,
	}, "")
	return s
}
func (this *VoltADNPrivateNetworkType) String() string {
	if this == nil {
		return "nil"
	}
	keysForReInfoMap := make([]string, 0, len(this.ReInfoMap))
	for k, _ := range this.ReInfoMap {
		keysForReInfoMap = append(keysForReInfoMap, k)
	}
	sortkeys.Strings(keysForReInfoMap)
	mapStringForReInfoMap := "map[string]*VoltADNPrivateNetworkReInfoType{"
	for _, k := range keysForReInfoMap {
		mapStringForReInfoMap += fmt.Sprintf("%v: %v,", k, this.ReInfoMap[k])
	}
	mapStringForReInfoMap += "}"
	keysForTenantInfoMap := make([]string, 0, len(this.TenantInfoMap))
	for k, _ := range this.TenantInfoMap {
		keysForTenantInfoMap = append(keysForTenantInfoMap, k)
	}
	sortkeys.Strings(keysForTenantInfoMap)
	mapStringForTenantInfoMap := "map[string]*VoltADNPrivateNetworkTenantInfoType{"
	for _, k := range keysForTenantInfoMap {
		mapStringForTenantInfoMap += fmt.Sprintf("%v: %v,", k, this.TenantInfoMap[k])
	}
	mapStringForTenantInfoMap += "}"
	s := strings.Join([]string{`&VoltADNPrivateNetworkType{`,
		`PrivateAccessChoice:` + fmt.Sprintf("%v", this.PrivateAccessChoice) + `,`,
		`DnsChoice:` + fmt.Sprintf("%v", this.DnsChoice) + `,`,
		`CommonNodeSelector:` + strings.Replace(fmt.Sprintf("%v", this.CommonNodeSelector), "LabelSelectorType", "ves_io_schema4.LabelSelectorType", 1) + `,`,
		`ReInfoMap:` + mapStringForReInfoMap + `,`,
		`OwnerTenantId:` + fmt.Sprintf("%v", this.OwnerTenantId) + `,`,
		`TenantInfoMap:` + mapStringForTenantInfoMap + `,`,
		`DedicatedVipChoice:` + fmt.Sprintf("%v", this.DedicatedVipChoice) + `,`,
		`}`,
	}, "")
	return s
}
func (this *VoltADNPrivateNetworkType_NoPrivateAccess) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&VoltADNPrivateNetworkType_NoPrivateAccess{`,
		`NoPrivateAccess:` + strings.Replace(fmt.Sprintf("%v", this.NoPrivateAccess), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *VoltADNPrivateNetworkType_PrivateAccessEnabled) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&VoltADNPrivateNetworkType_PrivateAccessEnabled{`,
		`PrivateAccessEnabled:` + strings.Replace(fmt.Sprintf("%v", this.PrivateAccessEnabled), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *VoltADNPrivateNetworkType_NoPrivateDns) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&VoltADNPrivateNetworkType_NoPrivateDns{`,
		`NoPrivateDns:` + strings.Replace(fmt.Sprintf("%v", this.NoPrivateDns), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *VoltADNPrivateNetworkType_PrivateDns) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&VoltADNPrivateNetworkType_PrivateDns{`,
		`PrivateDns:` + strings.Replace(fmt.Sprintf("%v", this.PrivateDns), "DNSServersList", "DNSServersList", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *VoltADNPrivateNetworkType_NoAdvertiseDedicatedVips) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&VoltADNPrivateNetworkType_NoAdvertiseDedicatedVips{`,
		`NoAdvertiseDedicatedVips:` + strings.Replace(fmt.Sprintf("%v", this.NoAdvertiseDedicatedVips), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *VoltADNPrivateNetworkType_AdvertiseDedicatedVips) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&VoltADNPrivateNetworkType_AdvertiseDedicatedVips{`,
		`AdvertiseDedicatedVips:` + strings.Replace(fmt.Sprintf("%v", this.AdvertiseDedicatedVips), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AnyCastVIPFleetType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AnyCastVIPFleetType{`,
		`VipAllocator:` + strings.Replace(fmt.Sprintf("%v", this.VipAllocator), "ObjectRefType", "ves_io_schema_views.ObjectRefType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SNATPoolType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SNATPoolType{`,
		`Ipv4Prefixes:` + fmt.Sprintf("%v", this.Ipv4Prefixes) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SNATPoolSiteType) String() string {
	if this == nil {
		return "nil"
	}
	keysForNodeSnatPool := make([]string, 0, len(this.NodeSnatPool))
	for k, _ := range this.NodeSnatPool {
		keysForNodeSnatPool = append(keysForNodeSnatPool, k)
	}
	sortkeys.Strings(keysForNodeSnatPool)
	mapStringForNodeSnatPool := "map[string]*SNATPoolType{"
	for _, k := range keysForNodeSnatPool {
		mapStringForNodeSnatPool += fmt.Sprintf("%v: %v,", k, this.NodeSnatPool[k])
	}
	mapStringForNodeSnatPool += "}"
	s := strings.Join([]string{`&SNATPoolSiteType{`,
		`NodeSnatPool:` + mapStringForNodeSnatPool + `,`,
		`}`,
	}, "")
	return s
}
func (this *SNATPoolFleetType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SNATPoolFleetType{`,
		`SnatPoolAllocator:` + strings.Replace(fmt.Sprintf("%v", this.SnatPoolAllocator), "ObjectRefType", "ves_io_schema_views.ObjectRefType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Srv6NetworkNsParametersType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Srv6NetworkNsParametersType{`,
		`Namespace:` + fmt.Sprintf("%v", this.Namespace) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PerSiteSrv6NetworkType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PerSiteSrv6NetworkType{`,
		`NamespaceChoice:` + fmt.Sprintf("%v", this.NamespaceChoice) + `,`,
		`DefaultVipChoice:` + fmt.Sprintf("%v", this.DefaultVipChoice) + `,`,
		`SnatPoolChoice:` + fmt.Sprintf("%v", this.SnatPoolChoice) + `,`,
		`Slice:` + strings.Replace(fmt.Sprintf("%v", this.Slice), "ObjectRefType", "ves_io_schema_views.ObjectRefType", 1) + `,`,
		`Fleets:` + strings.Replace(fmt.Sprintf("%v", this.Fleets), "ObjectRefType", "ves_io_schema_views.ObjectRefType", 1) + `,`,
		`AccessNetworkRtargets:` + strings.Replace(fmt.Sprintf("%v", this.AccessNetworkRtargets), "RouteTarget", "ves_io_schema4.RouteTarget", 1) + `,`,
		`InternetRtargets:` + strings.Replace(fmt.Sprintf("%v", this.InternetRtargets), "RouteTarget", "ves_io_schema4.RouteTarget", 1) + `,`,
		`EnterpriseNetworkRtargets:` + strings.Replace(fmt.Sprintf("%v", this.EnterpriseNetworkRtargets), "RouteTarget", "ves_io_schema4.RouteTarget", 1) + `,`,
		`ExportRtargets:` + strings.Replace(fmt.Sprintf("%v", this.ExportRtargets), "RouteTarget", "ves_io_schema4.RouteTarget", 1) + `,`,
		`RemoteSidStatsPlen:` + fmt.Sprintf("%v", this.RemoteSidStatsPlen) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PerSiteSrv6NetworkType_NoNamespaceNetwork) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PerSiteSrv6NetworkType_NoNamespaceNetwork{`,
		`NoNamespaceNetwork:` + strings.Replace(fmt.Sprintf("%v", this.NoNamespaceNetwork), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PerSiteSrv6NetworkType_Srv6NetworkNsParams) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PerSiteSrv6NetworkType_Srv6NetworkNsParams{`,
		`Srv6NetworkNsParams:` + strings.Replace(fmt.Sprintf("%v", this.Srv6NetworkNsParams), "Srv6NetworkNsParametersType", "Srv6NetworkNsParametersType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PerSiteSrv6NetworkType_InterfaceIpVip) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PerSiteSrv6NetworkType_InterfaceIpVip{`,
		`InterfaceIpVip:` + strings.Replace(fmt.Sprintf("%v", this.InterfaceIpVip), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PerSiteSrv6NetworkType_AnycastVip) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PerSiteSrv6NetworkType_AnycastVip{`,
		`AnycastVip:` + fmt.Sprintf("%v", this.AnycastVip) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PerSiteSrv6NetworkType_FleetVip) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PerSiteSrv6NetworkType_FleetVip{`,
		`FleetVip:` + strings.Replace(fmt.Sprintf("%v", this.FleetVip), "AnyCastVIPFleetType", "AnyCastVIPFleetType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PerSiteSrv6NetworkType_InterfaceIpSnatPool) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PerSiteSrv6NetworkType_InterfaceIpSnatPool{`,
		`InterfaceIpSnatPool:` + strings.Replace(fmt.Sprintf("%v", this.InterfaceIpSnatPool), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PerSiteSrv6NetworkType_SiteSnatPool) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PerSiteSrv6NetworkType_SiteSnatPool{`,
		`SiteSnatPool:` + strings.Replace(fmt.Sprintf("%v", this.SiteSnatPool), "SNATPoolSiteType", "SNATPoolSiteType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PerSiteSrv6NetworkType_FleetSnatPool) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PerSiteSrv6NetworkType_FleetSnatPool{`,
		`FleetSnatPool:` + strings.Replace(fmt.Sprintf("%v", this.FleetSnatPool), "SNATPoolFleetType", "SNATPoolFleetType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *NextHopInterfaceList) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&NextHopInterfaceList{`,
		`Interfaces:` + strings.Replace(fmt.Sprintf("%v", this.Interfaces), "ObjectRefType", "ves_io_schema_views.ObjectRefType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *StaticRouteViewType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&StaticRouteViewType{`,
		`IpPrefixes:` + fmt.Sprintf("%v", this.IpPrefixes) + `,`,
		`NextHopChoice:` + fmt.Sprintf("%v", this.NextHopChoice) + `,`,
		`Attrs:` + fmt.Sprintf("%v", this.Attrs) + `,`,
		`}`,
	}, "")
	return s
}
func (this *StaticRouteViewType_IpAddress) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&StaticRouteViewType_IpAddress{`,
		`IpAddress:` + fmt.Sprintf("%v", this.IpAddress) + `,`,
		`}`,
	}, "")
	return s
}
func (this *StaticRouteViewType_Interface) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&StaticRouteViewType_Interface{`,
		`Interface:` + strings.Replace(fmt.Sprintf("%v", this.Interface), "ObjectRefType", "ves_io_schema_views.ObjectRefType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *StaticRouteViewType_DefaultGateway) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&StaticRouteViewType_DefaultGateway{`,
		`DefaultGateway:` + strings.Replace(fmt.Sprintf("%v", this.DefaultGateway), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ActivePBRPoliciesType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ActivePBRPoliciesType{`,
		`ForwardProxyPbrPolicies:` + strings.Replace(fmt.Sprintf("%v", this.ForwardProxyPbrPolicies), "ObjectRefType", "ves_io_schema_views.ObjectRefType", 1) + `,`,
		`NetworkPbrPolicies:` + strings.Replace(fmt.Sprintf("%v", this.NetworkPbrPolicies), "ObjectRefType", "ves_io_schema_views.ObjectRefType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PerTenantVIPType) String() string {
	if this == nil {
		return "nil"
	}
	keysForTenantVipMap := make([]string, 0, len(this.TenantVipMap))
	for k, _ := range this.TenantVipMap {
		keysForTenantVipMap = append(keysForTenantVipMap, k)
	}
	sortkeys.Strings(keysForTenantVipMap)
	mapStringForTenantVipMap := "map[string]string{"
	for _, k := range keysForTenantVipMap {
		mapStringForTenantVipMap += fmt.Sprintf("%v: %v,", k, this.TenantVipMap[k])
	}
	mapStringForTenantVipMap += "}"
	s := strings.Join([]string{`&PerTenantVIPType{`,
		`TenantVipMap:` + mapStringForTenantVipMap + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType{`,
		`Subnets:` + strings.Replace(fmt.Sprintf("%v", this.Subnets), "IpSubnetType", "ves_io_schema3.IpSubnetType", 1) + `,`,
		`Type:` + fmt.Sprintf("%v", this.Type) + `,`,
		`StaticRoutes:` + strings.Replace(fmt.Sprintf("%v", this.StaticRoutes), "StaticRouteType", "ves_io_schema4.StaticRouteType", 1) + `,`,
		`NetworkChoice:` + fmt.Sprintf("%v", this.NetworkChoice) + `,`,
		`PrivateNetworkParameters:` + strings.Replace(fmt.Sprintf("%v", this.PrivateNetworkParameters), "VoltADNPrivateNetworkType", "VoltADNPrivateNetworkType", 1) + `,`,
		`DefaultVipChoice:` + fmt.Sprintf("%v", this.DefaultVipChoice) + `,`,
		`SnatPoolChoice:` + fmt.Sprintf("%v", this.SnatPoolChoice) + `,`,
		`ImportRtargetStrs:` + fmt.Sprintf("%v", this.ImportRtargetStrs) + `,`,
		`ExportRtargetStrs:` + fmt.Sprintf("%v", this.ExportRtargetStrs) + `,`,
		`FleetRefs:` + strings.Replace(fmt.Sprintf("%v", this.FleetRefs), "ObjectRefType", "ves_io_schema4.ObjectRefType", 1) + `,`,
		`SliceRef:` + strings.Replace(fmt.Sprintf("%v", this.SliceRef), "ObjectRefType", "ves_io_schema4.ObjectRefType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_GlobalNetwork) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_GlobalNetwork{`,
		`GlobalNetwork:` + strings.Replace(fmt.Sprintf("%v", this.GlobalNetwork), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_SiteLocalNetwork) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_SiteLocalNetwork{`,
		`SiteLocalNetwork:` + strings.Replace(fmt.Sprintf("%v", this.SiteLocalNetwork), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_SiteLocalInsideNetwork) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_SiteLocalInsideNetwork{`,
		`SiteLocalInsideNetwork:` + strings.Replace(fmt.Sprintf("%v", this.SiteLocalInsideNetwork), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_InsideNetwork) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_InsideNetwork{`,
		`InsideNetwork:` + strings.Replace(fmt.Sprintf("%v", this.InsideNetwork), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_LegacyType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_LegacyType{`,
		`LegacyType:` + fmt.Sprintf("%v", this.LegacyType) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_PrivateNetwork) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_PrivateNetwork{`,
		`PrivateNetwork:` + strings.Replace(fmt.Sprintf("%v", this.PrivateNetwork), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_Srv6Network) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_Srv6Network{`,
		`Srv6Network:` + strings.Replace(fmt.Sprintf("%v", this.Srv6Network), "PerSiteSrv6NetworkType", "PerSiteSrv6NetworkType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_TenantVip) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_TenantVip{`,
		`TenantVip:` + strings.Replace(fmt.Sprintf("%v", this.TenantVip), "PerTenantVIPType", "PerTenantVIPType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_FleetVip) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_FleetVip{`,
		`FleetVip:` + strings.Replace(fmt.Sprintf("%v", this.FleetVip), "AnyCastVIPFleetType", "AnyCastVIPFleetType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_InterfaceIp) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_InterfaceIp{`,
		`InterfaceIp:` + strings.Replace(fmt.Sprintf("%v", this.InterfaceIp), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_SiteSnatPool) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_SiteSnatPool{`,
		`SiteSnatPool:` + strings.Replace(fmt.Sprintf("%v", this.SiteSnatPool), "SNATPoolSiteType", "SNATPoolSiteType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_FleetSnatPool) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_FleetSnatPool{`,
		`FleetSnatPool:` + strings.Replace(fmt.Sprintf("%v", this.FleetSnatPool), "SNATPoolFleetType", "SNATPoolFleetType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType{`,
		`NetworkChoice:` + fmt.Sprintf("%v", this.NetworkChoice) + `,`,
		`StaticRoutes:` + strings.Replace(fmt.Sprintf("%v", this.StaticRoutes), "StaticRouteViewType", "StaticRouteViewType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_GlobalNetwork) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_GlobalNetwork{`,
		`GlobalNetwork:` + strings.Replace(fmt.Sprintf("%v", this.GlobalNetwork), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_SiteLocalNetwork) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_SiteLocalNetwork{`,
		`SiteLocalNetwork:` + strings.Replace(fmt.Sprintf("%v", this.SiteLocalNetwork), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_SiteLocalInsideNetwork) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_SiteLocalInsideNetwork{`,
		`SiteLocalInsideNetwork:` + strings.Replace(fmt.Sprintf("%v", this.SiteLocalInsideNetwork), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_LegacyType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_LegacyType{`,
		`LegacyType:` + fmt.Sprintf("%v", this.LegacyType) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_Srv6Network) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_Srv6Network{`,
		`Srv6Network:` + strings.Replace(fmt.Sprintf("%v", this.Srv6Network), "PerSiteSrv6NetworkType", "PerSiteSrv6NetworkType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType{`,
		`NetworkChoice:` + fmt.Sprintf("%v", this.NetworkChoice) + `,`,
		`StaticRoutes:` + strings.Replace(fmt.Sprintf("%v", this.StaticRoutes), "StaticRouteViewType", "StaticRouteViewType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_GlobalNetwork) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_GlobalNetwork{`,
		`GlobalNetwork:` + strings.Replace(fmt.Sprintf("%v", this.GlobalNetwork), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_SiteLocalNetwork) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_SiteLocalNetwork{`,
		`SiteLocalNetwork:` + strings.Replace(fmt.Sprintf("%v", this.SiteLocalNetwork), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_SiteLocalInsideNetwork) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_SiteLocalInsideNetwork{`,
		`SiteLocalInsideNetwork:` + strings.Replace(fmt.Sprintf("%v", this.SiteLocalInsideNetwork), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_LegacyType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_LegacyType{`,
		`LegacyType:` + fmt.Sprintf("%v", this.LegacyType) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_PrivateNetwork) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_PrivateNetwork{`,
		`PrivateNetwork:` + strings.Replace(fmt.Sprintf("%v", this.PrivateNetwork), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_Srv6Network) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_Srv6Network{`,
		`Srv6Network:` + strings.Replace(fmt.Sprintf("%v", this.Srv6Network), "PerSiteSrv6NetworkType", "PerSiteSrv6NetworkType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType{`,
		`NetworkChoice:` + fmt.Sprintf("%v", this.NetworkChoice) + `,`,
		`StaticRoutes:` + strings.Replace(fmt.Sprintf("%v", this.StaticRoutes), "StaticRouteViewType", "StaticRouteViewType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_GlobalNetwork) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_GlobalNetwork{`,
		`GlobalNetwork:` + strings.Replace(fmt.Sprintf("%v", this.GlobalNetwork), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_SiteLocalNetwork) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_SiteLocalNetwork{`,
		`SiteLocalNetwork:` + strings.Replace(fmt.Sprintf("%v", this.SiteLocalNetwork), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_SiteLocalInsideNetwork) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_SiteLocalInsideNetwork{`,
		`SiteLocalInsideNetwork:` + strings.Replace(fmt.Sprintf("%v", this.SiteLocalInsideNetwork), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_LegacyType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_LegacyType{`,
		`LegacyType:` + fmt.Sprintf("%v", this.LegacyType) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_PrivateNetwork) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_PrivateNetwork{`,
		`PrivateNetwork:` + strings.Replace(fmt.Sprintf("%v", this.PrivateNetwork), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_Srv6Network) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_Srv6Network{`,
		`Srv6Network:` + strings.Replace(fmt.Sprintf("%v", this.Srv6Network), "PerSiteSrv6NetworkType", "PerSiteSrv6NetworkType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringTypes(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *VoltADNPrivateNetworkReInfoType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VoltADNPrivateNetworkReInfoType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VoltADNPrivateNetworkReInfoType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vlan", wireType)
			}
			m.Vlan = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Vlan |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeSelector", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.NodeSelector == nil {
				m.NodeSelector = &ves_io_schema4.LabelSelectorType{}
			}
			if err := m.NodeSelector.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VoltADNPrivateNetworkTenantInfoType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VoltADNPrivateNetworkTenantInfoType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VoltADNPrivateNetworkTenantInfoType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultPrivateVip", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DefaultPrivateVip = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FinalDefaultPrivateVip", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FinalDefaultPrivateVip = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DNSServersList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DNSServersList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DNSServersList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DnsIp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DnsIp = append(m.DnsIp, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VoltADNPrivateNetworkType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VoltADNPrivateNetworkType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VoltADNPrivateNetworkType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoPrivateAccess", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.PrivateAccessChoice = &VoltADNPrivateNetworkType_NoPrivateAccess{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrivateAccessEnabled", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.PrivateAccessChoice = &VoltADNPrivateNetworkType_PrivateAccessEnabled{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoPrivateDns", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.DnsChoice = &VoltADNPrivateNetworkType_NoPrivateDns{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrivateDns", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &DNSServersList{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.DnsChoice = &VoltADNPrivateNetworkType_PrivateDns{v}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommonNodeSelector", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CommonNodeSelector == nil {
				m.CommonNodeSelector = &ves_io_schema4.LabelSelectorType{}
			}
			if err := m.CommonNodeSelector.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReInfoMap", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ReInfoMap == nil {
				m.ReInfoMap = make(map[string]*VoltADNPrivateNetworkReInfoType)
			}
			var mapkey string
			var mapvalue *VoltADNPrivateNetworkReInfoType
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTypes
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthTypes
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTypes
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= (int(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthTypes
					}
					postmsgIndex := iNdEx + mapmsglen
					if mapmsglen < 0 {
						return ErrInvalidLengthTypes
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &VoltADNPrivateNetworkReInfoType{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipTypes(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthTypes
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.ReInfoMap[mapkey] = mapvalue
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OwnerTenantId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OwnerTenantId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TenantInfoMap", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TenantInfoMap == nil {
				m.TenantInfoMap = make(map[string]*VoltADNPrivateNetworkTenantInfoType)
			}
			var mapkey string
			var mapvalue *VoltADNPrivateNetworkTenantInfoType
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTypes
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthTypes
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTypes
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= (int(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthTypes
					}
					postmsgIndex := iNdEx + mapmsglen
					if mapmsglen < 0 {
						return ErrInvalidLengthTypes
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &VoltADNPrivateNetworkTenantInfoType{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipTypes(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthTypes
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.TenantInfoMap[mapkey] = mapvalue
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoAdvertiseDedicatedVips", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.DedicatedVipChoice = &VoltADNPrivateNetworkType_NoAdvertiseDedicatedVips{v}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdvertiseDedicatedVips", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.DedicatedVipChoice = &VoltADNPrivateNetworkType_AdvertiseDedicatedVips{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AnyCastVIPFleetType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AnyCastVIPFleetType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AnyCastVIPFleetType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VipAllocator", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.VipAllocator == nil {
				m.VipAllocator = &ves_io_schema_views.ObjectRefType{}
			}
			if err := m.VipAllocator.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SNATPoolType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SNATPoolType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SNATPoolType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ipv4Prefixes", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ipv4Prefixes = append(m.Ipv4Prefixes, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SNATPoolSiteType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SNATPoolSiteType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SNATPoolSiteType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeSnatPool", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.NodeSnatPool == nil {
				m.NodeSnatPool = make(map[string]*SNATPoolType)
			}
			var mapkey string
			var mapvalue *SNATPoolType
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTypes
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthTypes
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTypes
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= (int(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthTypes
					}
					postmsgIndex := iNdEx + mapmsglen
					if mapmsglen < 0 {
						return ErrInvalidLengthTypes
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &SNATPoolType{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipTypes(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthTypes
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.NodeSnatPool[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SNATPoolFleetType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SNATPoolFleetType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SNATPoolFleetType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SnatPoolAllocator", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SnatPoolAllocator == nil {
				m.SnatPoolAllocator = &ves_io_schema_views.ObjectRefType{}
			}
			if err := m.SnatPoolAllocator.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Srv6NetworkNsParametersType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Srv6NetworkNsParametersType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Srv6NetworkNsParametersType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PerSiteSrv6NetworkType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PerSiteSrv6NetworkType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PerSiteSrv6NetworkType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoNamespaceNetwork", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.NamespaceChoice = &PerSiteSrv6NetworkType_NoNamespaceNetwork{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Srv6NetworkNsParams", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Srv6NetworkNsParametersType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.NamespaceChoice = &PerSiteSrv6NetworkType_Srv6NetworkNsParams{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InterfaceIpVip", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.DefaultVipChoice = &PerSiteSrv6NetworkType_InterfaceIpVip{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AnycastVip", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DefaultVipChoice = &PerSiteSrv6NetworkType_AnycastVip{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FleetVip", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &AnyCastVIPFleetType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.DefaultVipChoice = &PerSiteSrv6NetworkType_FleetVip{v}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InterfaceIpSnatPool", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.SnatPoolChoice = &PerSiteSrv6NetworkType_InterfaceIpSnatPool{v}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SiteSnatPool", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &SNATPoolSiteType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.SnatPoolChoice = &PerSiteSrv6NetworkType_SiteSnatPool{v}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FleetSnatPool", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &SNATPoolFleetType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.SnatPoolChoice = &PerSiteSrv6NetworkType_FleetSnatPool{v}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Slice", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Slice == nil {
				m.Slice = &ves_io_schema_views.ObjectRefType{}
			}
			if err := m.Slice.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fleets", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Fleets = append(m.Fleets, &ves_io_schema_views.ObjectRefType{})
			if err := m.Fleets[len(m.Fleets)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessNetworkRtargets", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AccessNetworkRtargets = append(m.AccessNetworkRtargets, &ves_io_schema4.RouteTarget{})
			if err := m.AccessNetworkRtargets[len(m.AccessNetworkRtargets)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InternetRtargets", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InternetRtargets = append(m.InternetRtargets, &ves_io_schema4.RouteTarget{})
			if err := m.InternetRtargets[len(m.InternetRtargets)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnterpriseNetworkRtargets", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EnterpriseNetworkRtargets = append(m.EnterpriseNetworkRtargets, &ves_io_schema4.RouteTarget{})
			if err := m.EnterpriseNetworkRtargets[len(m.EnterpriseNetworkRtargets)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExportRtargets", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExportRtargets = append(m.ExportRtargets, &ves_io_schema4.RouteTarget{})
			if err := m.ExportRtargets[len(m.ExportRtargets)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RemoteSidStatsPlen", wireType)
			}
			m.RemoteSidStatsPlen = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RemoteSidStatsPlen |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NextHopInterfaceList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NextHopInterfaceList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NextHopInterfaceList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Interfaces", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Interfaces = append(m.Interfaces, &ves_io_schema_views.ObjectRefType{})
			if err := m.Interfaces[len(m.Interfaces)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StaticRouteViewType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StaticRouteViewType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StaticRouteViewType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IpPrefixes", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IpPrefixes = append(m.IpPrefixes, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IpAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NextHopChoice = &StaticRouteViewType_IpAddress{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Interface", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema_views.ObjectRefType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.NextHopChoice = &StaticRouteViewType_Interface{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultGateway", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.NextHopChoice = &StaticRouteViewType_DefaultGateway{v}
			iNdEx = postIndex
		case 6:
			if wireType == 0 {
				var v ves_io_schema4.RouteAttrType
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (ves_io_schema4.RouteAttrType(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Attrs = append(m.Attrs, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTypes
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v ves_io_schema4.RouteAttrType
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTypes
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (ves_io_schema4.RouteAttrType(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Attrs = append(m.Attrs, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Attrs", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ActivePBRPoliciesType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ActivePBRPoliciesType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ActivePBRPoliciesType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ForwardProxyPbrPolicies", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ForwardProxyPbrPolicies = append(m.ForwardProxyPbrPolicies, &ves_io_schema_views.ObjectRefType{})
			if err := m.ForwardProxyPbrPolicies[len(m.ForwardProxyPbrPolicies)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NetworkPbrPolicies", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NetworkPbrPolicies = append(m.NetworkPbrPolicies, &ves_io_schema_views.ObjectRefType{})
			if err := m.NetworkPbrPolicies[len(m.NetworkPbrPolicies)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PerTenantVIPType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PerTenantVIPType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PerTenantVIPType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TenantVipMap", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TenantVipMap == nil {
				m.TenantVipMap = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTypes
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthTypes
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTypes
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthTypes
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipTypes(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthTypes
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.TenantVipMap[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GlobalSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GlobalSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GlobalSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Subnets", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Subnets = append(m.Subnets, &ves_io_schema3.IpSubnetType{})
			if err := m.Subnets[len(m.Subnets)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (ves_io_schema3.VirtualNetworkType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StaticRoutes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StaticRoutes = append(m.StaticRoutes, &ves_io_schema4.StaticRouteType{})
			if err := m.StaticRoutes[len(m.StaticRoutes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GlobalNetwork", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.NetworkChoice = &GlobalSpecType_GlobalNetwork{v}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SiteLocalNetwork", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.NetworkChoice = &GlobalSpecType_SiteLocalNetwork{v}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SiteLocalInsideNetwork", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.NetworkChoice = &GlobalSpecType_SiteLocalInsideNetwork{v}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InsideNetwork", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.NetworkChoice = &GlobalSpecType_InsideNetwork{v}
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LegacyType", wireType)
			}
			var v ves_io_schema3.VirtualNetworkType
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (ves_io_schema3.VirtualNetworkType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.NetworkChoice = &GlobalSpecType_LegacyType{v}
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrivateNetwork", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.NetworkChoice = &GlobalSpecType_PrivateNetwork{v}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Srv6Network", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &PerSiteSrv6NetworkType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.NetworkChoice = &GlobalSpecType_Srv6Network{v}
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrivateNetworkParameters", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PrivateNetworkParameters == nil {
				m.PrivateNetworkParameters = &VoltADNPrivateNetworkType{}
			}
			if err := m.PrivateNetworkParameters.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TenantVip", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &PerTenantVIPType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.DefaultVipChoice = &GlobalSpecType_TenantVip{v}
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FleetVip", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &AnyCastVIPFleetType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.DefaultVipChoice = &GlobalSpecType_FleetVip{v}
			iNdEx = postIndex
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InterfaceIp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.SnatPoolChoice = &GlobalSpecType_InterfaceIp{v}
			iNdEx = postIndex
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SiteSnatPool", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &SNATPoolSiteType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.SnatPoolChoice = &GlobalSpecType_SiteSnatPool{v}
			iNdEx = postIndex
		case 22:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FleetSnatPool", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &SNATPoolFleetType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.SnatPoolChoice = &GlobalSpecType_FleetSnatPool{v}
			iNdEx = postIndex
		case 1000:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ImportRtargetStrs", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ImportRtargetStrs = append(m.ImportRtargetStrs, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 1001:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExportRtargetStrs", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExportRtargetStrs = append(m.ExportRtargetStrs, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 1002:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FleetRefs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FleetRefs = append(m.FleetRefs, &ves_io_schema4.ObjectRefType{})
			if err := m.FleetRefs[len(m.FleetRefs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 1003:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SliceRef", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SliceRef = append(m.SliceRef, &ves_io_schema4.ObjectRefType{})
			if err := m.SliceRef[len(m.SliceRef)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GlobalNetwork", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.NetworkChoice = &CreateSpecType_GlobalNetwork{v}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SiteLocalNetwork", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.NetworkChoice = &CreateSpecType_SiteLocalNetwork{v}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SiteLocalInsideNetwork", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.NetworkChoice = &CreateSpecType_SiteLocalInsideNetwork{v}
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LegacyType", wireType)
			}
			var v ves_io_schema3.VirtualNetworkType
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (ves_io_schema3.VirtualNetworkType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.NetworkChoice = &CreateSpecType_LegacyType{v}
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StaticRoutes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StaticRoutes = append(m.StaticRoutes, &StaticRouteViewType{})
			if err := m.StaticRoutes[len(m.StaticRoutes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Srv6Network", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &PerSiteSrv6NetworkType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.NetworkChoice = &CreateSpecType_Srv6Network{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplaceSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplaceSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplaceSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GlobalNetwork", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.NetworkChoice = &ReplaceSpecType_GlobalNetwork{v}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SiteLocalNetwork", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.NetworkChoice = &ReplaceSpecType_SiteLocalNetwork{v}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SiteLocalInsideNetwork", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.NetworkChoice = &ReplaceSpecType_SiteLocalInsideNetwork{v}
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LegacyType", wireType)
			}
			var v ves_io_schema3.VirtualNetworkType
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (ves_io_schema3.VirtualNetworkType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.NetworkChoice = &ReplaceSpecType_LegacyType{v}
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StaticRoutes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StaticRoutes = append(m.StaticRoutes, &StaticRouteViewType{})
			if err := m.StaticRoutes[len(m.StaticRoutes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrivateNetwork", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.NetworkChoice = &ReplaceSpecType_PrivateNetwork{v}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Srv6Network", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &PerSiteSrv6NetworkType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.NetworkChoice = &ReplaceSpecType_Srv6Network{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GlobalNetwork", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.NetworkChoice = &GetSpecType_GlobalNetwork{v}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SiteLocalNetwork", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.NetworkChoice = &GetSpecType_SiteLocalNetwork{v}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SiteLocalInsideNetwork", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.NetworkChoice = &GetSpecType_SiteLocalInsideNetwork{v}
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LegacyType", wireType)
			}
			var v ves_io_schema3.VirtualNetworkType
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (ves_io_schema3.VirtualNetworkType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.NetworkChoice = &GetSpecType_LegacyType{v}
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StaticRoutes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StaticRoutes = append(m.StaticRoutes, &StaticRouteViewType{})
			if err := m.StaticRoutes[len(m.StaticRoutes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrivateNetwork", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.NetworkChoice = &GetSpecType_PrivateNetwork{v}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Srv6Network", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &PerSiteSrv6NetworkType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.NetworkChoice = &GetSpecType_Srv6Network{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTypes(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthTypes
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipTypes(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthTypes = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTypes   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("ves.io/schema/virtual_network/types.proto", fileDescriptorTypes) }
func init() {
	golang_proto.RegisterFile("ves.io/schema/virtual_network/types.proto", fileDescriptorTypes)
}

var fileDescriptorTypes = []byte{
	// 3154 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x5a, 0x4f, 0x6c, 0xdb, 0xd6,
	0x19, 0xf7, 0xd3, 0x7f, 0x7d, 0xb2, 0xfe, 0xd1, 0xb2, 0xa3, 0x28, 0xa9, 0xca, 0x2a, 0x5d, 0xeb,
	0xb4, 0xb2, 0x1d, 0xcb, 0xf9, 0xbf, 0xb5, 0x8d, 0x55, 0xbb, 0xb1, 0xd3, 0xcc, 0xd5, 0xe8, 0xcc,
	0x4b, 0x03, 0x74, 0x1c, 0x2d, 0x3d, 0xd9, 0x6c, 0x24, 0x92, 0x23, 0x69, 0x39, 0x02, 0x66, 0xac,
	0x28, 0xb6, 0xc3, 0x74, 0x18, 0x86, 0x00, 0xbb, 0x64, 0xc7, 0x01, 0xc5, 0x90, 0xc3, 0x30, 0x0c,
	0xd8, 0x61, 0xa3, 0x0e, 0x46, 0x81, 0x01, 0xc5, 0x0e, 0x83, 0x0f, 0x3b, 0x04, 0x3b, 0xb5, 0xea,
	0xa5, 0xf5, 0x76, 0xe8, 0xb1, 0xdb, 0x61, 0x18, 0xde, 0x23, 0x29, 0x51, 0xb4, 0xac, 0x38, 0x46,
	0x0b, 0x14, 0x45, 0x6f, 0xa4, 0xf8, 0xbd, 0xdf, 0xf7, 0xe7, 0x7d, 0xef, 0xfb, 0x7e, 0xdf, 0xb3,
	0xe1, 0x6c, 0x03, 0x6b, 0xd3, 0xa2, 0x3c, 0xa3, 0x95, 0x37, 0x71, 0x5d, 0x98, 0x69, 0x88, 0xaa,
	0xbe, 0x25, 0xd4, 0x78, 0x09, 0xeb, 0xdb, 0xb2, 0x7a, 0x77, 0x46, 0x6f, 0x2a, 0x58, 0x9b, 0x56,
	0x54, 0x59, 0x97, 0x99, 0xa7, 0x4c, 0xd1, 0x69, 0x53, 0x74, 0xda, 0x25, 0x9a, 0x99, 0xda, 0x10,
	0xf5, 0xcd, 0xad, 0xf5, 0xe9, 0xb2, 0x5c, 0x9f, 0xd9, 0x90, 0x37, 0xe4, 0x19, 0xba, 0x6a, 0x7d,
	0xab, 0x4a, 0xdf, 0xe8, 0x0b, 0x7d, 0x32, 0xd1, 0x32, 0x27, 0xfa, 0x15, 0x4b, 0x58, 0xb7, 0x3e,
	0x9c, 0xea, 0xff, 0x20, 0x2b, 0xba, 0x28, 0x4b, 0x96, 0x0d, 0x99, 0x93, 0xfd, 0x1f, 0x1d, 0xe6,
	0x65, 0x4e, 0xbb, 0x3c, 0x11, 0x6a, 0x62, 0x45, 0xd0, 0xb1, 0xf5, 0x95, 0x75, 0xfb, 0x89, 0xb7,
	0xf9, 0x7e, 0xe8, 0xa7, 0x0f, 0x4a, 0x68, 0x4e, 0x05, 0xb9, 0xdf, 0x20, 0x78, 0x7a, 0x4d, 0xae,
	0xe9, 0xf3, 0x0b, 0x2b, 0x25, 0x55, 0x6c, 0x08, 0x3a, 0x5e, 0x31, 0x5d, 0xe7, 0xf0, 0xb2, 0x54,
	0x95, 0x6f, 0x35, 0x15, 0xcc, 0xb0, 0xe0, 0x6b, 0xd4, 0x04, 0x29, 0x8d, 0x58, 0x34, 0x19, 0x2d,
	0x8e, 0xfe, 0xe5, 0xd3, 0x5d, 0x6f, 0xf0, 0x05, 0x7f, 0xfa, 0x7f, 0x4f, 0x4f, 0x22, 0x8e, 0x7e,
	0x61, 0xd6, 0x20, 0x2a, 0xc9, 0x15, 0xcc, 0x6b, 0xb8, 0x86, 0xcb, 0xba, 0xac, 0xa6, 0x3d, 0x2c,
	0x9a, 0x8c, 0x14, 0xd8, 0xe9, 0xfe, 0xe8, 0xde, 0x14, 0xd6, 0x71, 0x6d, 0xd5, 0x92, 0x21, 0xd0,
	0xc5, 0xf8, 0xa3, 0x1d, 0xf4, 0x89, 0x81, 0xd0, 0x83, 0x36, 0xf2, 0x81, 0x67, 0x04, 0x71, 0xa3,
	0x04, 0xc7, 0x16, 0xc9, 0xbd, 0x87, 0xe0, 0xcc, 0x40, 0xeb, 0x6e, 0x61, 0x49, 0x90, 0xf4, 0xae,
	0x85, 0x57, 0x60, 0xac, 0x82, 0xab, 0xc2, 0x56, 0x4d, 0xe7, 0x15, 0x53, 0x8e, 0x6f, 0x88, 0x0a,
	0x35, 0x38, 0x5c, 0x0c, 0x13, 0x83, 0x7d, 0xaa, 0x47, 0x41, 0x5c, 0xd2, 0x92, 0xb2, 0xc0, 0xd6,
	0x44, 0x85, 0x59, 0x80, 0x93, 0x55, 0x51, 0x12, 0x6a, 0xfc, 0x20, 0x00, 0x8f, 0x1b, 0x60, 0x82,
	0xca, 0x2e, 0xb8, 0x51, 0x72, 0xaf, 0x43, 0x6c, 0x61, 0x65, 0x75, 0x15, 0xab, 0x0d, 0xac, 0x6a,
	0x37, 0x45, 0x4d, 0x67, 0xae, 0x40, 0xa0, 0x22, 0x69, 0xbc, 0xa8, 0xa4, 0x03, 0xac, 0x77, 0x32,
	0x5c, 0xcc, 0x11, 0x90, 0xf0, 0x7d, 0x14, 0xc8, 0x51, 0x24, 0xf2, 0xe6, 0xbf, 0x8f, 0x3c, 0x09,
	0x9f, 0xfd, 0x14, 0x42, 0x9c, 0xbf, 0x22, 0x69, 0xcb, 0x4a, 0xee, 0xe7, 0x31, 0x38, 0x39, 0xd8,
	0x6b, 0xe2, 0x6b, 0x11, 0x92, 0x92, 0xdc, 0xb5, 0x52, 0x28, 0x97, 0xb1, 0xa6, 0x59, 0xf1, 0x4e,
	0xb9, 0xe2, 0xbd, 0x58, 0x57, 0xf4, 0xe6, 0xd2, 0x08, 0x17, 0x97, 0x64, 0x0b, 0x68, 0x9e, 0x8a,
	0x33, 0x37, 0x61, 0xa2, 0x1f, 0x80, 0xc7, 0x92, 0xb0, 0x5e, 0xc3, 0x95, 0xb4, 0x77, 0x28, 0x50,
	0x4a, 0x71, 0xc2, 0x2c, 0x9a, 0x6b, 0x98, 0xef, 0x40, 0xcc, 0x61, 0x51, 0x45, 0xd2, 0xd2, 0xfe,
	0x21, 0x28, 0x74, 0x8f, 0x2d, 0x73, 0x16, 0x24, 0x8d, 0x29, 0x41, 0xc4, 0xb9, 0x34, 0x40, 0x97,
	0x4e, 0x4d, 0x0f, 0x3d, 0x97, 0xd3, 0xfd, 0xc1, 0x5e, 0x42, 0x1c, 0x28, 0x3d, 0xc4, 0x32, 0xa4,
	0xca, 0x72, 0xbd, 0x2e, 0x4b, 0x7c, 0x7f, 0x52, 0x06, 0x8f, 0x9b, 0x94, 0x8c, 0x09, 0xb7, 0xe2,
	0x48, 0x4d, 0xe6, 0x3d, 0x2f, 0x44, 0x54, 0xcc, 0x8b, 0x52, 0x55, 0xe6, 0xeb, 0x82, 0x92, 0x0e,
	0xb1, 0xde, 0xc9, 0x48, 0xe1, 0xfa, 0x63, 0xec, 0x3e, 0x74, 0x5b, 0xa7, 0xcd, 0xf3, 0xf6, 0x5d,
	0x41, 0x59, 0x94, 0x74, 0xb5, 0x59, 0x6c, 0x7b, 0x48, 0x5e, 0x44, 0x1e, 0xa0, 0x50, 0x2e, 0xa0,
	0xfa, 0x12, 0x28, 0x7d, 0x8d, 0xe6, 0xc9, 0x03, 0xe4, 0x49, 0x5c, 0xeb, 0x7c, 0xf8, 0x57, 0xef,
	0x46, 0xab, 0x8d, 0xca, 0x8c, 0xf0, 0x4f, 0x03, 0xbd, 0x05, 0x21, 0xa1, 0xae, 0x5d, 0x99, 0x12,
	0xea, 0x1a, 0x84, 0x2a, 0xe5, 0xd9, 0xc2, 0x94, 0xa0, 0x6d, 0x42, 0x50, 0x6a, 0x5e, 0x9e, 0x92,
	0x9a, 0x65, 0x08, 0x2a, 0x42, 0x61, 0x4a, 0x11, 0x54, 0xf2, 0x70, 0xde, 0x7c, 0xd0, 0x36, 0xe6,
	0xa6, 0x34, 0x51, 0x82, 0x90, 0xd6, 0x98, 0x3d, 0x37, 0xa5, 0xbd, 0x5d, 0x86, 0xa0, 0x2e, 0x15,
	0xa6, 0x6a, 0xb2, 0x04, 0x41, 0xbd, 0x79, 0x79, 0x4a, 0xbf, 0xdb, 0x84, 0xe0, 0x36, 0xd6, 0xa6,
	0x34, 0x2c, 0x10, 0x5d, 0xc9, 0x56, 0x1b, 0x45, 0x99, 0xc8, 0xbe, 0x81, 0x82, 0xdc, 0x22, 0x2b,
	0x09, 0x75, 0x4c, 0x7e, 0x1d, 0x6d, 0xb5, 0x51, 0x88, 0x09, 0x74, 0x0c, 0xe4, 0xe1, 0x16, 0xc9,
	0x0f, 0xd0, 0x6a, 0xa3, 0x00, 0xe3, 0xfb, 0xc0, 0x40, 0x23, 0xe4, 0x35, 0xd0, 0x6a, 0x93, 0xa4,
	0x26, 0x8f, 0x73, 0xad, 0x36, 0x9a, 0xc9, 0x4c, 0xed, 0x1b, 0xe8, 0x6c, 0x09, 0xab, 0x2c, 0xb7,
	0xc8, 0x5a, 0x71, 0x60, 0xad, 0x5d, 0x63, 0xad, 0xf8, 0xb0, 0x8a, 0xa0, 0x0a, 0x75, 0xac, 0x63,
	0x55, 0x23, 0xeb, 0xce, 0xb6, 0xda, 0xe8, 0x5b, 0x99, 0x33, 0x1d, 0x03, 0xd9, 0x35, 0x8a, 0xb5,
	0x22, 0xc7, 0x5a, 0xa1, 0x23, 0x58, 0x24, 0x6e, 0x5d, 0xfd, 0x19, 0xdf, 0xae, 0x81, 0x10, 0x17,
	0x56, 0xed, 0x70, 0x32, 0x73, 0x10, 0x97, 0xb7, 0x25, 0xac, 0xf2, 0x3a, 0xad, 0x19, 0xbc, 0x58,
	0x49, 0x87, 0xe9, 0xb1, 0x8e, 0x90, 0x88, 0x06, 0x54, 0x1f, 0x8b, 0x26, 0xaf, 0x71, 0x51, 0x2a,
	0x63, 0x95, 0x95, 0x0a, 0xf3, 0x77, 0x0f, 0xc4, 0x6d, 0x79, 0x7b, 0x87, 0x81, 0xee, 0xf0, 0xeb,
	0xc7, 0xde, 0xe1, 0x5e, 0xcd, 0xea, 0xee, 0xf2, 0x23, 0x34, 0x7c, 0x97, 0x5f, 0x6a, 0xb5, 0xd1,
	0x15, 0xe6, 0xd2, 0xbe, 0x81, 0xe6, 0x56, 0x84, 0x3a, 0x66, 0xe5, 0x2a, 0xab, 0x6f, 0x62, 0xd6,
	0xb4, 0x8c, 0xdd, 0x16, 0xf5, 0x4d, 0x76, 0x7b, 0x53, 0xae, 0xb3, 0xfa, 0xa6, 0xa8, 0x75, 0x63,
	0x28, 0x6a, 0xac, 0xb6, 0x29, 0xa8, 0xb8, 0x42, 0x10, 0xc6, 0x5a, 0x6d, 0x14, 0x67, 0xa2, 0x1d,
	0x03, 0x85, 0x4d, 0xfd, 0xec, 0x72, 0x65, 0xf8, 0x66, 0x9d, 0x6e, 0xb5, 0x51, 0x3a, 0x33, 0xb1,
	0x6f, 0x20, 0xc6, 0x5a, 0x41, 0x22, 0xa0, 0xd6, 0x05, 0xd2, 0x57, 0x88, 0xc0, 0x78, 0xab, 0x8d,
	0x92, 0x99, 0x78, 0xc7, 0x40, 0x91, 0xe5, 0xfe, 0x2f, 0xce, 0x1d, 0x88, 0xea, 0x4e, 0x77, 0x99,
	0xef, 0xc3, 0x29, 0x49, 0xe6, 0x85, 0x4a, 0x03, 0xab, 0xba, 0xa8, 0x61, 0xbe, 0x82, 0x2b, 0x62,
	0x59, 0xd0, 0x71, 0x85, 0xd4, 0x59, 0x2d, 0x3d, 0x3a, 0xa4, 0x60, 0x78, 0xb8, 0xb4, 0x24, 0xcf,
	0xdb, 0x2b, 0x17, 0xec, 0x85, 0x6b, 0xa2, 0x42, 0x8a, 0x47, 0xfa, 0x50, 0xcc, 0xe8, 0x50, 0xcc,
	0x09, 0x61, 0x20, 0x62, 0xe6, 0x27, 0x10, 0xeb, 0x3f, 0x8a, 0x4c, 0x02, 0xbc, 0x77, 0x71, 0xd3,
	0x6c, 0x26, 0x1c, 0x79, 0x64, 0x6e, 0x81, 0xbf, 0x21, 0xd4, 0xb6, 0xb0, 0x55, 0x76, 0x5f, 0x3e,
	0x4e, 0x4a, 0xf4, 0xfa, 0x2b, 0x67, 0x82, 0x5d, 0xf5, 0x5c, 0x46, 0x99, 0x9f, 0x21, 0x60, 0x0e,
	0xe6, 0xc9, 0x00, 0x13, 0x6e, 0xf7, 0x9b, 0x50, 0x3c, 0x56, 0x56, 0xf6, 0x35, 0x51, 0x87, 0x19,
	0xc5, 0x49, 0x18, 0x77, 0xf5, 0x87, 0xf2, 0xa6, 0x2c, 0x96, 0x31, 0x13, 0xdf, 0x35, 0x90, 0x67,
	0xcf, 0x40, 0xa8, 0x63, 0x20, 0x6f, 0x21, 0x3f, 0x57, 0x7c, 0x0a, 0x80, 0xb4, 0x39, 0xc7, 0x67,
	0xff, 0x9e, 0x81, 0x7c, 0xe4, 0xf3, 0x85, 0xfc, 0xc5, 0xe2, 0x59, 0x48, 0xf5, 0xed, 0x8a, 0x2d,
	0x98, 0xdc, 0x35, 0xd0, 0xe8, 0x9e, 0x81, 0x22, 0x1d, 0x03, 0xf9, 0x67, 0x0b, 0xf9, 0xd9, 0xb9,
	0x1b, 0xbe, 0x10, 0x4a, 0x78, 0x6e, 0xf8, 0x42, 0xbe, 0x84, 0xff, 0x86, 0x2f, 0x14, 0x49, 0x8c,
	0xe6, 0x74, 0x18, 0x9b, 0x97, 0x9a, 0xaf, 0x0a, 0x9a, 0xbe, 0xb6, 0x5c, 0x7a, 0xad, 0x86, 0xb1,
	0x4e, 0x1b, 0xe0, 0x5b, 0x10, 0x25, 0x48, 0x42, 0xad, 0x26, 0x97, 0x05, 0x52, 0xd7, 0x11, 0x0d,
	0x41, 0xee, 0x40, 0x08, 0xf0, 0xb6, 0x36, 0xfd, 0xc6, 0xfa, 0xdb, 0xb8, 0xac, 0x73, 0xb8, 0x4a,
	0x2b, 0x7b, 0xea, 0xe1, 0x4e, 0x52, 0xa8, 0x54, 0x54, 0xe2, 0x51, 0x77, 0x3d, 0x37, 0xda, 0x10,
	0x95, 0x79, 0xfb, 0x2d, 0x77, 0x1b, 0x46, 0x57, 0x57, 0xe6, 0x6f, 0x95, 0x64, 0xb9, 0x46, 0xd5,
	0x2d, 0x41, 0x54, 0x54, 0x1a, 0xe7, 0x79, 0x45, 0xc5, 0x55, 0xf1, 0x1e, 0xd6, 0xd2, 0x88, 0xf6,
	0xf3, 0x33, 0xe4, 0xa4, 0xc2, 0x7d, 0x14, 0xcc, 0xf9, 0x55, 0xef, 0xe7, 0xa8, 0xd7, 0xd0, 0x91,
	0xa3, 0xa1, 0x8f, 0x92, 0x95, 0x25, 0x6b, 0x61, 0xee, 0x4f, 0x5e, 0x48, 0xd8, 0xd0, 0xab, 0xa2,
	0x8e, 0x29, 0xfc, 0x1f, 0x3d, 0xa4, 0x7b, 0x92, 0x36, 0x25, 0x09, 0x3a, 0xaf, 0xc8, 0x72, 0x8d,
	0x2a, 0x88, 0x14, 0xe6, 0x1f, 0xb3, 0xa5, 0x6e, 0xa4, 0x69, 0xda, 0x9e, 0x24, 0x41, 0x27, 0x3f,
	0x9a, 0xe5, 0xe5, 0x83, 0x81, 0xe5, 0x25, 0xf0, 0x00, 0x79, 0x13, 0xef, 0xd0, 0xb3, 0x9e, 0x6f,
	0xb5, 0xd1, 0x24, 0xf3, 0xdc, 0xbe, 0x81, 0x72, 0xce, 0xfa, 0x42, 0xec, 0x61, 0xab, 0xb2, 0x4a,
	0x5f, 0x88, 0x5d, 0x2c, 0xb1, 0xcb, 0x55, 0x4e, 0x88, 0x3a, 0x76, 0xc5, 0x6a, 0x06, 0x87, 0x97,
	0x93, 0x6c, 0xab, 0x8d, 0x32, 0x99, 0xf4, 0xbe, 0x81, 0x52, 0xc4, 0x62, 0x8a, 0xe4, 0x2a, 0xf3,
	0x14, 0x34, 0x43, 0x41, 0xa9, 0x48, 0xc9, 0x52, 0xe6, 0x2c, 0x27, 0x26, 0x2f, 0xb4, 0xbc, 0xcb,
	0xd4, 0x20, 0x79, 0xc0, 0xdb, 0x01, 0x87, 0x64, 0xbe, 0xff, 0x90, 0xbc, 0x78, 0xc4, 0x88, 0xba,
	0x4e, 0x43, 0x6e, 0x07, 0x92, 0xf6, 0xa7, 0x5e, 0x16, 0x6e, 0xc2, 0x58, 0x77, 0xc7, 0xbe, 0xc0,
	0x5c, 0x4c, 0x6a, 0x96, 0x4f, 0xbd, 0x84, 0xfc, 0x36, 0x9c, 0x5a, 0x55, 0x1b, 0x17, 0xad, 0x43,
	0xbb, 0xa2, 0x95, 0xba, 0xc1, 0xa3, 0x86, 0x9c, 0x86, 0x30, 0x69, 0xc9, 0x9a, 0x22, 0x94, 0xb1,
	0xe5, 0x7c, 0xef, 0x87, 0xdc, 0x6e, 0x04, 0x26, 0x4a, 0x58, 0x25, 0x49, 0xe2, 0x00, 0xb1, 0x12,
	0x3b, 0x25, 0xc9, 0x7c, 0x57, 0xd4, 0x0e, 0xc3, 0x63, 0xb8, 0x24, 0x23, 0xc9, 0x2b, 0xf6, 0x12,
	0x0b, 0x8d, 0xf9, 0x31, 0x4c, 0x68, 0x6a, 0xe3, 0xa2, 0x8d, 0xc0, 0x4b, 0x1a, 0x4f, 0x77, 0x58,
	0xb3, 0xe8, 0xe4, 0xd5, 0xc7, 0x05, 0xfe, 0x70, 0xf7, 0x96, 0x46, 0xb8, 0x31, 0xed, 0xc0, 0x67,
	0x8d, 0xb9, 0x06, 0x09, 0x51, 0xd2, 0xb1, 0x5a, 0x25, 0x96, 0x8b, 0x0a, 0x65, 0xeb, 0xc3, 0x59,
	0x67, 0xac, 0x2b, 0xbf, 0xac, 0x10, 0xe2, 0x9f, 0x87, 0x88, 0x20, 0x35, 0xcb, 0x82, 0xa6, 0xd3,
	0xc5, 0x01, 0x17, 0xd5, 0x27, 0x9c, 0xd2, 0xfa, 0x4e, 0xa4, 0x7f, 0x08, 0xe1, 0x2a, 0xd9, 0x7b,
	0x2a, 0x6b, 0x12, 0xc9, 0xc2, 0x63, 0xbc, 0x1a, 0x50, 0xbb, 0x8a, 0x91, 0x47, 0x3b, 0x88, 0xe4,
	0x33, 0xa1, 0x97, 0x4b, 0x88, 0x0b, 0x51, 0x4c, 0x82, 0xff, 0x3a, 0x4c, 0xf4, 0xf9, 0xd3, 0xab,
	0x06, 0xe1, 0xa1, 0x6d, 0x6c, 0xcc, 0xe1, 0x95, 0x7d, 0x1c, 0x98, 0x1f, 0x40, 0x4c, 0x13, 0x75,
	0x67, 0x49, 0x01, 0x0a, 0x32, 0xf3, 0x84, 0x25, 0x65, 0xc9, 0xc3, 0x8d, 0x12, 0xa0, 0x2e, 0xf0,
	0x06, 0xc4, 0xcd, 0x28, 0xf4, 0x90, 0x23, 0x14, 0xf9, 0xdc, 0x11, 0x91, 0x0f, 0x89, 0x84, 0x87,
	0x8b, 0x52, 0xdc, 0xae, 0xa2, 0x37, 0xc0, 0xaf, 0xd5, 0xc4, 0x32, 0xb6, 0x88, 0xc1, 0x51, 0xce,
	0xd3, 0xf8, 0xc3, 0x1d, 0xa6, 0x2f, 0x0b, 0x29, 0x00, 0x67, 0xe2, 0x30, 0xb7, 0x21, 0x40, 0x35,
	0x10, 0x5a, 0xe0, 0x3d, 0x22, 0xe2, 0xe9, 0x87, 0x3b, 0x7e, 0xba, 0xa8, 0x5b, 0xdb, 0xaf, 0xd9,
	0x4f, 0x69, 0xc4, 0x59, 0x78, 0xcc, 0x26, 0x9c, 0xb0, 0x7a, 0xa4, 0xad, 0x58, 0xd5, 0x05, 0x75,
	0x83, 0xa8, 0x8a, 0x51, 0x55, 0x19, 0x97, 0x2a, 0x4e, 0xde, 0xd2, 0xf1, 0x2d, 0x2a, 0x52, 0x4c,
	0x1d, 0x9c, 0x03, 0xd3, 0x88, 0x1b, 0x37, 0x01, 0x6d, 0xa6, 0x60, 0xc1, 0x31, 0x6f, 0x41, 0x92,
	0xee, 0xb6, 0x84, 0xf5, 0x9e, 0x8e, 0xf8, 0x31, 0x75, 0x24, 0x6c, 0xa8, 0x2e, 0xbc, 0x02, 0xa7,
	0x30, 0xf9, 0x4d, 0x51, 0x09, 0x99, 0x3a, 0xe0, 0x4c, 0xe2, 0x98, 0x8a, 0x4e, 0xf6, 0x40, 0xdd,
	0x0e, 0xbd, 0x09, 0x71, 0x7c, 0x4f, 0x91, 0x55, 0x87, 0x3b, 0xc9, 0x63, 0x6a, 0x89, 0x99, 0x40,
	0x5d, 0xe8, 0x6b, 0x30, 0xae, 0xe2, 0xba, 0x4c, 0x0e, 0x81, 0x58, 0xe1, 0x35, 0x5d, 0xd0, 0x35,
	0x5e, 0xa9, 0x61, 0x29, 0xcd, 0xd0, 0x4b, 0x8c, 0x28, 0x49, 0x3d, 0x7a, 0xd6, 0x5f, 0xf0, 0xa4,
	0x7f, 0xc4, 0x31, 0xa6, 0xec, 0xaa, 0x58, 0x59, 0x25, 0x92, 0xa5, 0x1a, 0x96, 0x8a, 0x67, 0x20,
	0xd1, 0xab, 0x8d, 0x87, 0xd1, 0x9f, 0xe7, 0x81, 0xb1, 0xef, 0x0d, 0x5c, 0xec, 0xc6, 0xa6, 0x41,
	0xfe, 0x0b, 0xf9, 0x8b, 0xf9, 0x4b, 0xc5, 0xe7, 0x21, 0xd1, 0x6b, 0x17, 0x96, 0xd8, 0xd8, 0xae,
	0x81, 0xc2, 0x7b, 0x06, 0x0a, 0x75, 0x0c, 0x14, 0xbc, 0x92, 0x9f, 0x3d, 0x97, 0x9f, 0x9d, 0x75,
	0xd1, 0xa0, 0x50, 0x22, 0x9c, 0xfb, 0x25, 0x82, 0xd4, 0x0a, 0xbe, 0xa7, 0x2f, 0xc9, 0xca, 0xb2,
	0x7d, 0xd8, 0xe9, 0x15, 0x43, 0x03, 0xa0, 0x7b, 0xfa, 0x35, 0x8b, 0x35, 0x1c, 0x25, 0xaf, 0x0b,
	0x0f, 0x77, 0x92, 0xf6, 0xf6, 0x76, 0x01, 0x06, 0xf1, 0x17, 0x47, 0x7c, 0x1d, 0x9a, 0x72, 0xff,
	0xf0, 0xc2, 0x18, 0x89, 0x93, 0x58, 0xa6, 0xfb, 0xb2, 0x26, 0xe2, 0x6d, 0xda, 0x50, 0x56, 0x21,
	0x22, 0x2a, 0x6e, 0x9e, 0x54, 0xf8, 0xdc, 0x40, 0x23, 0x03, 0xb8, 0x52, 0xe0, 0x3e, 0x61, 0x21,
	0x9e, 0x43, 0x94, 0x29, 0x36, 0x69, 0x62, 0xa6, 0x01, 0x08, 0xd9, 0x33, 0x1b, 0x25, 0xed, 0x27,
	0xe1, 0x62, 0xd4, 0xc6, 0xf4, 0xa9, 0x9e, 0x7b, 0x68, 0x69, 0x84, 0x0b, 0x8b, 0xca, 0xbc, 0x29,
	0xc1, 0xdc, 0x86, 0x70, 0xd7, 0xd4, 0xb4, 0xef, 0x89, 0xba, 0xf1, 0x81, 0x98, 0x50, 0x64, 0xfb,
	0x85, 0x79, 0x05, 0xe2, 0xf6, 0x5e, 0x6f, 0x08, 0x3a, 0xde, 0x16, 0x9a, 0x43, 0x3b, 0xce, 0x08,
	0x17, 0xb3, 0xc4, 0xaf, 0x9b, 0xd2, 0xcc, 0x12, 0xf8, 0x05, 0x5d, 0x57, 0x35, 0x7a, 0x23, 0x14,
	0x2b, 0x9c, 0x1e, 0x94, 0xe4, 0xf3, 0xba, 0x6e, 0x5e, 0x42, 0x0c, 0x4e, 0x73, 0x13, 0xe0, 0xea,
	0xf3, 0xef, 0x1b, 0xe8, 0x0c, 0x24, 0x20, 0xb2, 0x5c, 0x62, 0xbb, 0x91, 0x42, 0xb3, 0x10, 0x87,
	0x10, 0xc9, 0x14, 0x76, 0x49, 0x56, 0x18, 0x6f, 0x21, 0x7f, 0xb1, 0xf8, 0x2c, 0xc4, 0x25, 0x7c,
	0x4f, 0xe7, 0x37, 0xe5, 0xbe, 0xe4, 0xf4, 0xee, 0x19, 0xc8, 0x43, 0x92, 0x73, 0x2e, 0x7f, 0x3e,
	0x7f, 0xe1, 0x86, 0x2f, 0xe4, 0x49, 0x78, 0x73, 0xbf, 0xf6, 0xc0, 0xf8, 0x7c, 0x59, 0x17, 0x1b,
	0xb8, 0x54, 0xe4, 0x4a, 0x72, 0x4d, 0x2c, 0x8b, 0xd8, 0xa4, 0x18, 0xef, 0x22, 0xc8, 0x54, 0x65,
	0x75, 0x5b, 0x50, 0x2b, 0xbc, 0xa2, 0xca, 0xf7, 0x9a, 0xbc, 0xb2, 0xae, 0xf2, 0x8a, 0x25, 0xf2,
	0x04, 0x99, 0xf7, 0xcc, 0xc3, 0x9d, 0x14, 0x5d, 0xd6, 0xe4, 0xd7, 0x05, 0x0d, 0x57, 0x78, 0x55,
	0xde, 0xd2, 0x45, 0x69, 0xa3, 0xeb, 0x2b, 0xcb, 0x9d, 0xb0, 0x14, 0x95, 0x88, 0x9e, 0xd2, 0xba,
	0x6a, 0x1b, 0xc2, 0x6c, 0x43, 0xca, 0xde, 0xa0, 0x3e, 0xed, 0x9e, 0x2f, 0x52, 0x3b, 0x63, 0xa9,
	0x70, 0x28, 0xce, 0xfd, 0xc7, 0x03, 0x89, 0x92, 0x7d, 0x37, 0xb0, 0xb6, 0x5c, 0xa2, 0x21, 0xf9,
	0xad, 0x07, 0x62, 0xd6, 0x05, 0x01, 0x39, 0xf8, 0x75, 0x41, 0x39, 0x22, 0x6d, 0x77, 0x23, 0x59,
	0xd7, 0x02, 0x6b, 0xa2, 0xd2, 0xbd, 0x15, 0xf8, 0xf3, 0x90, 0x5b, 0x01, 0x7a, 0x8b, 0xf8, 0x00,
	0x05, 0x5e, 0xa0, 0x24, 0x85, 0xb0, 0xe4, 0xc9, 0x56, 0x1b, 0x3d, 0xcb, 0xe4, 0xf6, 0x0d, 0x94,
	0x1d, 0x70, 0x47, 0x60, 0xb3, 0xf8, 0xb5, 0xe5, 0xd2, 0xf1, 0xae, 0x03, 0x52, 0xad, 0x36, 0x4a,
	0x64, 0x62, 0xfb, 0x06, 0x02, 0x6b, 0x85, 0x05, 0x65, 0x7d, 0xe8, 0x18, 0x08, 0x96, 0x15, 0xd6,
	0x3a, 0xa0, 0xdc, 0xa8, 0xee, 0x70, 0x27, 0xf3, 0x0a, 0x24, 0x0f, 0xb8, 0x37, 0x80, 0xa7, 0xa7,
	0x9c, 0x3c, 0x3d, 0xec, 0xa4, 0xde, 0x1f, 0xc6, 0x20, 0x76, 0xbd, 0x26, 0xaf, 0x0b, 0xb5, 0x55,
	0x05, 0x97, 0x69, 0xe4, 0x17, 0x21, 0xa8, 0x6d, 0xad, 0x4b, 0xa4, 0x59, 0x98, 0x5b, 0x7f, 0xca,
	0x15, 0xf1, 0x65, 0x65, 0x95, 0x7e, 0xa7, 0x7b, 0x1e, 0x7b, 0xb4, 0xe3, 0x28, 0x37, 0x88, 0xb3,
	0xd7, 0x32, 0xcb, 0xe0, 0xd3, 0x9b, 0x0a, 0xa6, 0x15, 0x25, 0x56, 0x78, 0xc6, 0x85, 0xb1, 0x66,
	0xee, 0x9a, 0x83, 0x2e, 0x17, 0x19, 0x02, 0x13, 0x25, 0x47, 0x21, 0x34, 0x82, 0x3c, 0x5e, 0x5f,
	0x30, 0x0c, 0x1c, 0x85, 0x60, 0xde, 0x84, 0xa8, 0x46, 0xcb, 0x21, 0x4d, 0x28, 0xac, 0xa5, 0xfd,
	0xd4, 0xae, 0xac, 0x0b, 0xd3, 0x51, 0x32, 0x5d, 0x27, 0x3c, 0xe1, 0x38, 0xe1, 0xa3, 0x5a, 0x4f,
	0x4c, 0x63, 0x5e, 0x82, 0xd8, 0x06, 0x75, 0xbf, 0xcb, 0xce, 0x83, 0x43, 0x4b, 0x4e, 0xd4, 0x94,
	0xb6, 0x89, 0xf9, 0x02, 0x30, 0x94, 0x08, 0x92, 0x51, 0xa2, 0x07, 0x11, 0x1a, 0x0a, 0x91, 0x20,
	0x2b, 0x6e, 0x92, 0x05, 0x36, 0xca, 0xf7, 0xe0, 0xa4, 0x03, 0x45, 0x94, 0x34, 0xb1, 0xd2, 0x9b,
	0x16, 0xc2, 0x43, 0xc1, 0x26, 0xba, 0x60, 0xcb, 0x74, 0x99, 0x0d, 0xf9, 0x1a, 0xc4, 0x5c, 0x38,
	0x70, 0x38, 0x4e, 0x31, 0x68, 0x5d, 0xc8, 0x12, 0x07, 0xc5, 0x3e, 0x9c, 0x3b, 0x10, 0xa9, 0xe1,
	0x0d, 0xa1, 0xdc, 0xe4, 0xe9, 0x66, 0x46, 0x8e, 0xba, 0x99, 0x29, 0xbb, 0xff, 0x47, 0xde, 0x45,
	0xa1, 0x4c, 0xc0, 0xdc, 0xd0, 0xa5, 0x11, 0x0e, 0x4c, 0x34, 0x6b, 0x3e, 0x8a, 0xdb, 0x97, 0x20,
	0xb6, 0x91, 0xd1, 0xa3, 0x19, 0x19, 0x53, 0xfa, 0xee, 0x59, 0x98, 0x32, 0x8c, 0x3a, 0x99, 0x69,
	0x3a, 0x46, 0x61, 0x2e, 0x3c, 0xbe, 0x52, 0x0c, 0x18, 0xdb, 0x9c, 0x7a, 0x22, 0x8e, 0xc9, 0x88,
	0xf9, 0x29, 0x64, 0x5c, 0xe6, 0xf2, 0xbd, 0x31, 0x3b, 0x1d, 0xa7, 0x2a, 0x2f, 0x1f, 0xf7, 0xf2,
	0xb2, 0xab, 0x95, 0x4b, 0xf7, 0xfb, 0xd6, 0x9b, 0xd6, 0x98, 0x37, 0x01, 0x7a, 0x15, 0x31, 0x9d,
	0x3c, 0xd2, 0xc4, 0xe1, 0xae, 0x86, 0x3d, 0xef, 0x10, 0x17, 0xee, 0x96, 0x12, 0xe6, 0x8e, 0x73,
	0xfa, 0x62, 0x8e, 0x3d, 0x7d, 0x39, 0xc0, 0x7b, 0x93, 0xd7, 0x15, 0x18, 0x75, 0x4e, 0x5e, 0xe9,
	0xd4, 0xd0, 0x79, 0x2b, 0xe2, 0x98, 0xb7, 0x06, 0xcc, 0x59, 0xe3, 0x5f, 0xda, 0x9c, 0x35, 0xf1,
	0xa5, 0xcc, 0x59, 0x37, 0x61, 0x4c, 0xac, 0x3b, 0x19, 0x38, 0xaf, 0x11, 0x82, 0xf2, 0x49, 0x90,
	0x72, 0xb7, 0x53, 0x56, 0xbc, 0x06, 0x52, 0x91, 0xa4, 0xb9, 0xd0, 0x62, 0xdc, 0xab, 0xba, 0xaa,
	0x11, 0xb4, 0x7e, 0x3e, 0x6f, 0xa2, 0x7d, 0x7a, 0x14, 0xb4, 0x3e, 0xfe, 0x4e, 0xd1, 0x04, 0x00,
	0x33, 0x08, 0x2a, 0xae, 0x6a, 0xe9, 0xfd, 0x20, 0x2d, 0xaa, 0x6e, 0xd2, 0xd4, 0xdf, 0xe1, 0xcf,
	0xd8, 0x13, 0x9b, 0x5b, 0x95, 0x73, 0x70, 0x33, 0x53, 0x89, 0xc3, 0x55, 0x8d, 0x59, 0x87, 0x30,
	0x1d, 0x0f, 0x89, 0x8a, 0xf4, 0xbf, 0x8e, 0xa2, 0xe1, 0xb9, 0x81, 0x53, 0xa6, 0x5b, 0x1d, 0xe2,
	0x42, 0xe6, 0xf4, 0x89, 0xab, 0xc5, 0xb3, 0x10, 0xb3, 0x65, 0x2d, 0x06, 0x76, 0x62, 0xd7, 0x40,
	0xc1, 0x3d, 0x03, 0x05, 0x3a, 0x06, 0x8a, 0x5c, 0xca, 0x5f, 0xce, 0x5f, 0xc9, 0xcf, 0x9e, 0xcf,
	0xcf, 0xce, 0x16, 0x5f, 0x1c, 0x38, 0x4d, 0x8c, 0xef, 0x1a, 0x28, 0xb9, 0x67, 0xa0, 0x04, 0xbd,
	0x2b, 0xbd, 0x94, 0x9f, 0xbd, 0xfc, 0x99, 0x81, 0x50, 0x71, 0x72, 0xc0, 0x44, 0x41, 0xca, 0x5a,
	0x6a, 0xcf, 0x40, 0x63, 0x1d, 0x03, 0x85, 0x0a, 0xe7, 0xf2, 0x85, 0xd9, 0x7c, 0xa1, 0xe0, 0x1a,
	0x29, 0x02, 0x89, 0xe0, 0x0d, 0x5f, 0x28, 0x91, 0x48, 0xde, 0xf0, 0x85, 0xc6, 0x12, 0xa9, 0xdc,
	0xbf, 0x7d, 0x10, 0x7b, 0x55, 0xc5, 0x82, 0x8e, 0xbb, 0x2d, 0xf6, 0xeb, 0xda, 0x75, 0x16, 0x8e,
	0xd7, 0x2d, 0x5c, 0x7d, 0xa1, 0xee, 0x6e, 0xf7, 0xa3, 0x34, 0x6f, 0x1e, 0x57, 0x90, 0x06, 0x4c,
	0x4c, 0x47, 0xa2, 0x00, 0x77, 0xbe, 0xc0, 0xe6, 0xe1, 0xea, 0x19, 0x57, 0x17, 0xff, 0xf6, 0xb2,
	0x8b, 0x5e, 0xbd, 0x6f, 0xa0, 0x73, 0x70, 0x12, 0x52, 0x56, 0x14, 0xba, 0x7f, 0x67, 0xa3, 0x9e,
	0xa3, 0x8b, 0x30, 0x06, 0x51, 0xd3, 0x11, 0xd6, 0x32, 0xcf, 0x33, 0x5b, 0x28, 0x3e, 0x7b, 0x20,
	0xc5, 0x99, 0x77, 0xff, 0x8b, 0x5c, 0xbf, 0x99, 0xa9, 0x97, 0xfb, 0xbd, 0x1f, 0xe2, 0x1c, 0x56,
	0x6a, 0x42, 0xf9, 0x9b, 0x7c, 0xfb, 0x4a, 0xe6, 0xdb, 0x2b, 0x4f, 0x44, 0x7b, 0x06, 0xb0, 0x9d,
	0xaf, 0x59, 0xc2, 0xfe, 0xc1, 0x0f, 0x91, 0xeb, 0x58, 0xff, 0xda, 0x27, 0xeb, 0x8d, 0x63, 0x52,
	0x69, 0xfa, 0xf7, 0x99, 0x6f, 0x52, 0xf6, 0x2b, 0x94, 0xb2, 0xc5, 0x5f, 0xa0, 0xbd, 0x8f, 0xb2,
	0x23, 0x8f, 0x3e, 0xca, 0x8e, 0x7c, 0xf6, 0x51, 0x16, 0xbd, 0xd3, 0xc9, 0xa2, 0xdf, 0x75, 0xb2,
	0xe8, 0x83, 0x4e, 0x16, 0xed, 0x75, 0xb2, 0xe8, 0x51, 0x27, 0x8b, 0x3e, 0xec, 0x64, 0xd1, 0x27,
	0x9d, 0xec, 0xc8, 0x67, 0x9d, 0x2c, 0xfa, 0xd5, 0xc7, 0xd9, 0x91, 0xdd, 0x8f, 0xb3, 0xe8, 0xce,
	0xea, 0x86, 0xac, 0xdc, 0xdd, 0x98, 0x6e, 0xc8, 0x35, 0x1d, 0xab, 0xaa, 0x30, 0xbd, 0xa5, 0xcd,
	0xd0, 0x87, 0xaa, 0xac, 0xd6, 0xa7, 0x14, 0x55, 0x6e, 0x88, 0x15, 0xac, 0x4e, 0xd9, 0x9f, 0x67,
	0x94, 0xf5, 0x0d, 0x79, 0x06, 0xdf, 0xd3, 0xad, 0xff, 0x2d, 0x1b, 0xfc, 0xcf, 0x76, 0xeb, 0x01,
	0xfa, 0x7f, 0x66, 0x73, 0xff, 0x0f, 0x00, 0x00, 0xff, 0xff, 0xcd, 0x3f, 0x92, 0x8a, 0x94, 0x27,
	0x00, 0x00,
}
