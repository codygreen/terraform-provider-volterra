//
// Copyright (c) 2018 Volterra, Inc. All rights reserved.
// Code generated by ves-gen-schema-go. DO NOT EDIT.
//
package service_policy

import (
	"context"
	"fmt"
	"strings"

	"github.com/gogo/protobuf/proto"

	"gopkg.volterra.us/stdlib/codec"
	"gopkg.volterra.us/stdlib/db"
	"gopkg.volterra.us/stdlib/errors"

	ves_io_schema "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
	ves_io_schema_policy "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/policy"
)

var (
	// dummy imports in case file has no message with Refs
	_ db.Interface
	_ = errors.Wrap
	_ = strings.Split
)

// augmented methods on protoc/std generated struct

func (m *CreateSpecType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *CreateSpecType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *CreateSpecType) DeepCopy() *CreateSpecType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &CreateSpecType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *CreateSpecType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *CreateSpecType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return CreateSpecTypeValidator().Validate(ctx, m, opts...)
}

func (m *CreateSpecType) GetDRefInfo() ([]db.DRefInfo, error) {
	var drInfos []db.DRefInfo
	if fdrInfos, err := m.GetRulesDRefInfo(); err != nil {
		return nil, err
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	return drInfos, nil
}

func (m *CreateSpecType) GetRulesDRefInfo() ([]db.DRefInfo, error) {
	drInfos := []db.DRefInfo{}
	for i, ref := range m.GetRules() {
		if ref == nil {
			return nil, fmt.Errorf("CreateSpecType.rules[%d] has a nil value", i)
		}
		// resolve kind to type if needed at DBObject.GetDRefInfo()
		drInfos = append(drInfos, db.DRefInfo{
			RefdType:   "service_policy_rule.Object",
			RefdUID:    ref.Uid,
			RefdTenant: ref.Tenant,
			RefdNS:     ref.Namespace,
			RefdName:   ref.Name,
			DRField:    "rules",
			Ref:        ref,
		})
	}

	return drInfos, nil
}

// GetRulesDBEntries returns the db.Entry corresponding to the ObjRefType from the default Table
func (m *CreateSpecType) GetRulesDBEntries(ctx context.Context, d db.Interface) ([]db.Entry, error) {
	var entries []db.Entry
	refdType, err := d.TypeForEntryKind("", "", "service_policy_rule.Object")
	if err != nil {
		return nil, errors.Wrap(err, "Cannot find type for kind: service_policy_rule")
	}
	for _, ref := range m.GetRules() {
		refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
		if err != nil {
			return nil, errors.Wrap(err, "Getting referred entry")
		}
		if refdEnt != nil {
			entries = append(entries, refdEnt)
		}
	}

	return entries, nil
}

type ValidateCreateSpecType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateCreateSpecType) ServerChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for server_choice")
	}
	return validatorFn, nil
}

func (v *ValidateCreateSpecType) ServerChoiceServerNameValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	oValidatorFn_ServerName, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for server_name")
	}
	return oValidatorFn_ServerName, nil
}

func (v *ValidateCreateSpecType) AlgoValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	var conv db.EnumConvFn
	conv = func(v interface{}) int32 {
		i := v.(ves_io_schema_policy.RuleCombiningAlgorithm)
		return int32(i)
	}
	// ves_io_schema_policy.RuleCombiningAlgorithm_name is generated in .pb.go
	validatorFn, err := db.NewEnumValidationRuleHandler(rules, ves_io_schema_policy.RuleCombiningAlgorithm_name, conv)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for algo")
	}

	return validatorFn, nil
}

func (v *ValidateCreateSpecType) RulesValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemsValidatorFn := func(ctx context.Context, elems []*ves_io_schema.ObjectRefType, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := ves_io_schema.ObjectRefTypeValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for rules")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*ves_io_schema.ObjectRefType)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*ves_io_schema.ObjectRefType, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated rules")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items rules")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateCreateSpecType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*CreateSpecType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *CreateSpecType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["algo"]; exists {

		vOpts := append(opts, db.WithValidateField("algo"))
		if err := fv(ctx, m.GetAlgo(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["port_matcher"]; exists {

		vOpts := append(opts, db.WithValidateField("port_matcher"))
		if err := fv(ctx, m.GetPortMatcher(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["rules"]; exists {
		vOpts := append(opts, db.WithValidateField("rules"))
		if err := fv(ctx, m.GetRules(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["server_choice"]; exists {
		val := m.GetServerChoice()
		vOpts := append(opts,
			db.WithValidateField("server_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetServerChoice().(type) {
	case *CreateSpecType_ServerName:
		if fv, exists := v.FldValidators["server_choice.server_name"]; exists {
			val := m.GetServerChoice().(*CreateSpecType_ServerName).ServerName
			vOpts := append(opts,
				db.WithValidateField("server_choice"),
				db.WithValidateField("server_name"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *CreateSpecType_ServerSelector:
		if fv, exists := v.FldValidators["server_choice.server_selector"]; exists {
			val := m.GetServerChoice().(*CreateSpecType_ServerSelector).ServerSelector
			vOpts := append(opts,
				db.WithValidateField("server_choice"),
				db.WithValidateField("server_selector"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *CreateSpecType_ServerNameMatcher:
		if fv, exists := v.FldValidators["server_choice.server_name_matcher"]; exists {
			val := m.GetServerChoice().(*CreateSpecType_ServerNameMatcher).ServerNameMatcher
			vOpts := append(opts,
				db.WithValidateField("server_choice"),
				db.WithValidateField("server_name_matcher"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *CreateSpecType_AnyServer:
		if fv, exists := v.FldValidators["server_choice.any_server"]; exists {
			val := m.GetServerChoice().(*CreateSpecType_AnyServer).AnyServer
			vOpts := append(opts,
				db.WithValidateField("server_choice"),
				db.WithValidateField("any_server"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultCreateSpecTypeValidator = func() *ValidateCreateSpecType {
	v := &ValidateCreateSpecType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhServerChoice := v.ServerChoiceValidationRuleHandler
	rulesServerChoice := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhServerChoice(rulesServerChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for CreateSpecType.server_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["server_choice"] = vFn

	vrhServerChoiceServerName := v.ServerChoiceServerNameValidationRuleHandler
	rulesServerChoiceServerName := map[string]string{
		"ves.io.schema.rules.string.max_bytes": "256",
	}
	vFnMap["server_choice.server_name"], err = vrhServerChoiceServerName(rulesServerChoiceServerName)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for oneof field CreateSpecType.server_choice_server_name: %s", err)
		panic(errMsg)
	}

	v.FldValidators["server_choice.server_name"] = vFnMap["server_choice.server_name"]

	vrhAlgo := v.AlgoValidationRuleHandler
	rulesAlgo := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhAlgo(rulesAlgo)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for CreateSpecType.algo: %s", err)
		panic(errMsg)
	}
	v.FldValidators["algo"] = vFn

	vrhRules := v.RulesValidationRuleHandler
	rulesRules := map[string]string{
		"ves.io.schema.rules.repeated.max_items": "256",
	}
	vFn, err = vrhRules(rulesRules)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for CreateSpecType.rules: %s", err)
		panic(errMsg)
	}
	v.FldValidators["rules"] = vFn

	v.FldValidators["server_choice.server_selector"] = ves_io_schema.LabelSelectorTypeValidator().Validate
	v.FldValidators["server_choice.server_name_matcher"] = ves_io_schema_policy.MatcherTypeBasicValidator().Validate

	v.FldValidators["port_matcher"] = ves_io_schema_policy.PortMatcherTypeValidator().Validate

	return v
}()

func CreateSpecTypeValidator() db.Validator {
	return DefaultCreateSpecTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *GetSpecType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *GetSpecType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *GetSpecType) DeepCopy() *GetSpecType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &GetSpecType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *GetSpecType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *GetSpecType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return GetSpecTypeValidator().Validate(ctx, m, opts...)
}

func (m *GetSpecType) GetDRefInfo() ([]db.DRefInfo, error) {
	var drInfos []db.DRefInfo
	if fdrInfos, err := m.GetRulesDRefInfo(); err != nil {
		return nil, err
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetSimpleRulesDRefInfo(); err != nil {
		return nil, err
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	return drInfos, nil
}

func (m *GetSpecType) GetRulesDRefInfo() ([]db.DRefInfo, error) {
	drInfos := []db.DRefInfo{}
	for i, ref := range m.GetRules() {
		if ref == nil {
			return nil, fmt.Errorf("GetSpecType.rules[%d] has a nil value", i)
		}
		// resolve kind to type if needed at DBObject.GetDRefInfo()
		drInfos = append(drInfos, db.DRefInfo{
			RefdType:   "service_policy_rule.Object",
			RefdUID:    ref.Uid,
			RefdTenant: ref.Tenant,
			RefdNS:     ref.Namespace,
			RefdName:   ref.Name,
			DRField:    "rules",
			Ref:        ref,
		})
	}

	return drInfos, nil
}

// GetRulesDBEntries returns the db.Entry corresponding to the ObjRefType from the default Table
func (m *GetSpecType) GetRulesDBEntries(ctx context.Context, d db.Interface) ([]db.Entry, error) {
	var entries []db.Entry
	refdType, err := d.TypeForEntryKind("", "", "service_policy_rule.Object")
	if err != nil {
		return nil, errors.Wrap(err, "Cannot find type for kind: service_policy_rule")
	}
	for _, ref := range m.GetRules() {
		refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
		if err != nil {
			return nil, errors.Wrap(err, "Getting referred entry")
		}
		if refdEnt != nil {
			entries = append(entries, refdEnt)
		}
	}

	return entries, nil
}

// GetDRefInfo for the field's type
func (m *GetSpecType) GetSimpleRulesDRefInfo() ([]db.DRefInfo, error) {
	var (
		drInfos, driSet []db.DRefInfo
		err             error
	)
	_ = driSet
	if m.SimpleRules == nil {
		return []db.DRefInfo{}, nil
	}

	for idx, e := range m.SimpleRules {
		driSet, err := e.GetDRefInfo()
		if err != nil {
			return nil, err
		}
		for _, dri := range driSet {
			dri.DRField = fmt.Sprintf("simple_rules[%v].%s", idx, dri.DRField)
			drInfos = append(drInfos, dri)
		}
	}

	return drInfos, err
}

type ValidateGetSpecType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateGetSpecType) ServerChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for server_choice")
	}
	return validatorFn, nil
}

func (v *ValidateGetSpecType) ServerChoiceServerNameValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	oValidatorFn_ServerName, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for server_name")
	}
	return oValidatorFn_ServerName, nil
}

func (v *ValidateGetSpecType) AlgoValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	var conv db.EnumConvFn
	conv = func(v interface{}) int32 {
		i := v.(ves_io_schema_policy.RuleCombiningAlgorithm)
		return int32(i)
	}
	// ves_io_schema_policy.RuleCombiningAlgorithm_name is generated in .pb.go
	validatorFn, err := db.NewEnumValidationRuleHandler(rules, ves_io_schema_policy.RuleCombiningAlgorithm_name, conv)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for algo")
	}

	return validatorFn, nil
}

func (v *ValidateGetSpecType) RulesValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemsValidatorFn := func(ctx context.Context, elems []*ves_io_schema.ObjectRefType, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := ves_io_schema.ObjectRefTypeValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for rules")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*ves_io_schema.ObjectRefType)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*ves_io_schema.ObjectRefType, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated rules")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items rules")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateGetSpecType) SimpleRulesValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemsValidatorFn := func(ctx context.Context, elems []*SimpleRule, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := SimpleRuleValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for simple_rules")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*SimpleRule)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*SimpleRule, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated simple_rules")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items simple_rules")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateGetSpecType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*GetSpecType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *GetSpecType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["algo"]; exists {

		vOpts := append(opts, db.WithValidateField("algo"))
		if err := fv(ctx, m.GetAlgo(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["port_matcher"]; exists {

		vOpts := append(opts, db.WithValidateField("port_matcher"))
		if err := fv(ctx, m.GetPortMatcher(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["rules"]; exists {
		vOpts := append(opts, db.WithValidateField("rules"))
		if err := fv(ctx, m.GetRules(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["server_choice"]; exists {
		val := m.GetServerChoice()
		vOpts := append(opts,
			db.WithValidateField("server_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetServerChoice().(type) {
	case *GetSpecType_ServerName:
		if fv, exists := v.FldValidators["server_choice.server_name"]; exists {
			val := m.GetServerChoice().(*GetSpecType_ServerName).ServerName
			vOpts := append(opts,
				db.WithValidateField("server_choice"),
				db.WithValidateField("server_name"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GetSpecType_ServerSelector:
		if fv, exists := v.FldValidators["server_choice.server_selector"]; exists {
			val := m.GetServerChoice().(*GetSpecType_ServerSelector).ServerSelector
			vOpts := append(opts,
				db.WithValidateField("server_choice"),
				db.WithValidateField("server_selector"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GetSpecType_ServerNameMatcher:
		if fv, exists := v.FldValidators["server_choice.server_name_matcher"]; exists {
			val := m.GetServerChoice().(*GetSpecType_ServerNameMatcher).ServerNameMatcher
			vOpts := append(opts,
				db.WithValidateField("server_choice"),
				db.WithValidateField("server_name_matcher"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GetSpecType_AnyServer:
		if fv, exists := v.FldValidators["server_choice.any_server"]; exists {
			val := m.GetServerChoice().(*GetSpecType_AnyServer).AnyServer
			vOpts := append(opts,
				db.WithValidateField("server_choice"),
				db.WithValidateField("any_server"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["simple_rules"]; exists {
		vOpts := append(opts, db.WithValidateField("simple_rules"))
		if err := fv(ctx, m.GetSimpleRules(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultGetSpecTypeValidator = func() *ValidateGetSpecType {
	v := &ValidateGetSpecType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhServerChoice := v.ServerChoiceValidationRuleHandler
	rulesServerChoice := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhServerChoice(rulesServerChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GetSpecType.server_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["server_choice"] = vFn

	vrhServerChoiceServerName := v.ServerChoiceServerNameValidationRuleHandler
	rulesServerChoiceServerName := map[string]string{
		"ves.io.schema.rules.string.max_bytes": "256",
	}
	vFnMap["server_choice.server_name"], err = vrhServerChoiceServerName(rulesServerChoiceServerName)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for oneof field GetSpecType.server_choice_server_name: %s", err)
		panic(errMsg)
	}

	v.FldValidators["server_choice.server_name"] = vFnMap["server_choice.server_name"]

	vrhAlgo := v.AlgoValidationRuleHandler
	rulesAlgo := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhAlgo(rulesAlgo)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GetSpecType.algo: %s", err)
		panic(errMsg)
	}
	v.FldValidators["algo"] = vFn

	vrhRules := v.RulesValidationRuleHandler
	rulesRules := map[string]string{
		"ves.io.schema.rules.repeated.max_items": "256",
	}
	vFn, err = vrhRules(rulesRules)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GetSpecType.rules: %s", err)
		panic(errMsg)
	}
	v.FldValidators["rules"] = vFn

	vrhSimpleRules := v.SimpleRulesValidationRuleHandler
	rulesSimpleRules := map[string]string{
		"ves.io.schema.rules.repeated.max_items": "1024",
	}
	vFn, err = vrhSimpleRules(rulesSimpleRules)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GetSpecType.simple_rules: %s", err)
		panic(errMsg)
	}
	v.FldValidators["simple_rules"] = vFn

	v.FldValidators["server_choice.server_selector"] = ves_io_schema.LabelSelectorTypeValidator().Validate
	v.FldValidators["server_choice.server_name_matcher"] = ves_io_schema_policy.MatcherTypeBasicValidator().Validate

	v.FldValidators["port_matcher"] = ves_io_schema_policy.PortMatcherTypeValidator().Validate

	return v
}()

func GetSpecTypeValidator() db.Validator {
	return DefaultGetSpecTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *GlobalSpecType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *GlobalSpecType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *GlobalSpecType) DeepCopy() *GlobalSpecType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &GlobalSpecType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *GlobalSpecType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *GlobalSpecType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return GlobalSpecTypeValidator().Validate(ctx, m, opts...)
}

func (m *GlobalSpecType) GetDRefInfo() ([]db.DRefInfo, error) {
	var drInfos []db.DRefInfo
	if fdrInfos, err := m.GetDefaultForwardingClassesDRefInfo(); err != nil {
		return nil, err
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetRulesDRefInfo(); err != nil {
		return nil, err
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetSimpleRulesDRefInfo(); err != nil {
		return nil, err
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	return drInfos, nil
}

func (m *GlobalSpecType) GetDefaultForwardingClassesDRefInfo() ([]db.DRefInfo, error) {
	drInfos := []db.DRefInfo{}
	for i, ref := range m.GetDefaultForwardingClasses() {
		if ref == nil {
			return nil, fmt.Errorf("GlobalSpecType.default_forwarding_classes[%d] has a nil value", i)
		}
		// resolve kind to type if needed at DBObject.GetDRefInfo()
		drInfos = append(drInfos, db.DRefInfo{
			RefdType:   "forwarding_class.Object",
			RefdUID:    ref.Uid,
			RefdTenant: ref.Tenant,
			RefdNS:     ref.Namespace,
			RefdName:   ref.Name,
			DRField:    "default_forwarding_classes",
			Ref:        ref,
		})
	}

	return drInfos, nil
}

// GetDefaultForwardingClassesDBEntries returns the db.Entry corresponding to the ObjRefType from the default Table
func (m *GlobalSpecType) GetDefaultForwardingClassesDBEntries(ctx context.Context, d db.Interface) ([]db.Entry, error) {
	var entries []db.Entry
	refdType, err := d.TypeForEntryKind("", "", "forwarding_class.Object")
	if err != nil {
		return nil, errors.Wrap(err, "Cannot find type for kind: forwarding_class")
	}
	for _, ref := range m.GetDefaultForwardingClasses() {
		refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
		if err != nil {
			return nil, errors.Wrap(err, "Getting referred entry")
		}
		if refdEnt != nil {
			entries = append(entries, refdEnt)
		}
	}

	return entries, nil
}

func (m *GlobalSpecType) GetRulesDRefInfo() ([]db.DRefInfo, error) {
	drInfos := []db.DRefInfo{}
	for i, ref := range m.GetRules() {
		if ref == nil {
			return nil, fmt.Errorf("GlobalSpecType.rules[%d] has a nil value", i)
		}
		// resolve kind to type if needed at DBObject.GetDRefInfo()
		drInfos = append(drInfos, db.DRefInfo{
			RefdType:   "service_policy_rule.Object",
			RefdUID:    ref.Uid,
			RefdTenant: ref.Tenant,
			RefdNS:     ref.Namespace,
			RefdName:   ref.Name,
			DRField:    "rules",
			Ref:        ref,
		})
	}

	return drInfos, nil
}

// GetRulesDBEntries returns the db.Entry corresponding to the ObjRefType from the default Table
func (m *GlobalSpecType) GetRulesDBEntries(ctx context.Context, d db.Interface) ([]db.Entry, error) {
	var entries []db.Entry
	refdType, err := d.TypeForEntryKind("", "", "service_policy_rule.Object")
	if err != nil {
		return nil, errors.Wrap(err, "Cannot find type for kind: service_policy_rule")
	}
	for _, ref := range m.GetRules() {
		refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
		if err != nil {
			return nil, errors.Wrap(err, "Getting referred entry")
		}
		if refdEnt != nil {
			entries = append(entries, refdEnt)
		}
	}

	return entries, nil
}

// GetDRefInfo for the field's type
func (m *GlobalSpecType) GetSimpleRulesDRefInfo() ([]db.DRefInfo, error) {
	var (
		drInfos, driSet []db.DRefInfo
		err             error
	)
	_ = driSet
	if m.SimpleRules == nil {
		return []db.DRefInfo{}, nil
	}

	for idx, e := range m.SimpleRules {
		driSet, err := e.GetDRefInfo()
		if err != nil {
			return nil, err
		}
		for _, dri := range driSet {
			dri.DRField = fmt.Sprintf("simple_rules[%v].%s", idx, dri.DRField)
			drInfos = append(drInfos, dri)
		}
	}

	return drInfos, err
}

type ValidateGlobalSpecType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateGlobalSpecType) ServerChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for server_choice")
	}
	return validatorFn, nil
}

func (v *ValidateGlobalSpecType) ServerChoiceServerNameValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	oValidatorFn_ServerName, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for server_name")
	}
	return oValidatorFn_ServerName, nil
}

func (v *ValidateGlobalSpecType) AlgoValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	var conv db.EnumConvFn
	conv = func(v interface{}) int32 {
		i := v.(ves_io_schema_policy.RuleCombiningAlgorithm)
		return int32(i)
	}
	// ves_io_schema_policy.RuleCombiningAlgorithm_name is generated in .pb.go
	validatorFn, err := db.NewEnumValidationRuleHandler(rules, ves_io_schema_policy.RuleCombiningAlgorithm_name, conv)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for algo")
	}

	return validatorFn, nil
}

func (v *ValidateGlobalSpecType) RulesValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemsValidatorFn := func(ctx context.Context, elems []*ves_io_schema.ObjectRefType, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := ves_io_schema.ObjectRefTypeValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for rules")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*ves_io_schema.ObjectRefType)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*ves_io_schema.ObjectRefType, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated rules")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items rules")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateGlobalSpecType) DefaultForwardingClassesValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemsValidatorFn := func(ctx context.Context, elems []*ves_io_schema.ObjectRefType, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := ves_io_schema.ObjectRefTypeValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for default_forwarding_classes")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*ves_io_schema.ObjectRefType)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*ves_io_schema.ObjectRefType, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated default_forwarding_classes")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items default_forwarding_classes")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateGlobalSpecType) SimpleRulesValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemsValidatorFn := func(ctx context.Context, elems []*SimpleRule, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := SimpleRuleValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for simple_rules")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*SimpleRule)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*SimpleRule, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated simple_rules")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items simple_rules")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateGlobalSpecType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*GlobalSpecType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *GlobalSpecType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["algo"]; exists {

		vOpts := append(opts, db.WithValidateField("algo"))
		if err := fv(ctx, m.GetAlgo(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["default_forwarding_classes"]; exists {
		vOpts := append(opts, db.WithValidateField("default_forwarding_classes"))
		if err := fv(ctx, m.GetDefaultForwardingClasses(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["deny_info"]; exists {

		vOpts := append(opts, db.WithValidateField("deny_info"))
		if err := fv(ctx, m.GetDenyInfo(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["port_matcher"]; exists {

		vOpts := append(opts, db.WithValidateField("port_matcher"))
		if err := fv(ctx, m.GetPortMatcher(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["role"]; exists {

		vOpts := append(opts, db.WithValidateField("role"))
		if err := fv(ctx, m.GetRole(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["rules"]; exists {
		vOpts := append(opts, db.WithValidateField("rules"))
		if err := fv(ctx, m.GetRules(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["server_choice"]; exists {
		val := m.GetServerChoice()
		vOpts := append(opts,
			db.WithValidateField("server_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetServerChoice().(type) {
	case *GlobalSpecType_ServerName:
		if fv, exists := v.FldValidators["server_choice.server_name"]; exists {
			val := m.GetServerChoice().(*GlobalSpecType_ServerName).ServerName
			vOpts := append(opts,
				db.WithValidateField("server_choice"),
				db.WithValidateField("server_name"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GlobalSpecType_ServerSelector:
		if fv, exists := v.FldValidators["server_choice.server_selector"]; exists {
			val := m.GetServerChoice().(*GlobalSpecType_ServerSelector).ServerSelector
			vOpts := append(opts,
				db.WithValidateField("server_choice"),
				db.WithValidateField("server_selector"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GlobalSpecType_ServerNameMatcher:
		if fv, exists := v.FldValidators["server_choice.server_name_matcher"]; exists {
			val := m.GetServerChoice().(*GlobalSpecType_ServerNameMatcher).ServerNameMatcher
			vOpts := append(opts,
				db.WithValidateField("server_choice"),
				db.WithValidateField("server_name_matcher"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GlobalSpecType_AnyServer:
		if fv, exists := v.FldValidators["server_choice.any_server"]; exists {
			val := m.GetServerChoice().(*GlobalSpecType_AnyServer).AnyServer
			vOpts := append(opts,
				db.WithValidateField("server_choice"),
				db.WithValidateField("any_server"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["simple_rules"]; exists {
		vOpts := append(opts, db.WithValidateField("simple_rules"))
		if err := fv(ctx, m.GetSimpleRules(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultGlobalSpecTypeValidator = func() *ValidateGlobalSpecType {
	v := &ValidateGlobalSpecType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhServerChoice := v.ServerChoiceValidationRuleHandler
	rulesServerChoice := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhServerChoice(rulesServerChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GlobalSpecType.server_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["server_choice"] = vFn

	vrhServerChoiceServerName := v.ServerChoiceServerNameValidationRuleHandler
	rulesServerChoiceServerName := map[string]string{
		"ves.io.schema.rules.string.max_bytes": "256",
	}
	vFnMap["server_choice.server_name"], err = vrhServerChoiceServerName(rulesServerChoiceServerName)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for oneof field GlobalSpecType.server_choice_server_name: %s", err)
		panic(errMsg)
	}

	v.FldValidators["server_choice.server_name"] = vFnMap["server_choice.server_name"]

	vrhAlgo := v.AlgoValidationRuleHandler
	rulesAlgo := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhAlgo(rulesAlgo)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GlobalSpecType.algo: %s", err)
		panic(errMsg)
	}
	v.FldValidators["algo"] = vFn

	vrhRules := v.RulesValidationRuleHandler
	rulesRules := map[string]string{
		"ves.io.schema.rules.repeated.max_items": "256",
	}
	vFn, err = vrhRules(rulesRules)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GlobalSpecType.rules: %s", err)
		panic(errMsg)
	}
	v.FldValidators["rules"] = vFn

	vrhDefaultForwardingClasses := v.DefaultForwardingClassesValidationRuleHandler
	rulesDefaultForwardingClasses := map[string]string{
		"ves.io.schema.rules.repeated.max_items": "3",
	}
	vFn, err = vrhDefaultForwardingClasses(rulesDefaultForwardingClasses)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GlobalSpecType.default_forwarding_classes: %s", err)
		panic(errMsg)
	}
	v.FldValidators["default_forwarding_classes"] = vFn

	vrhSimpleRules := v.SimpleRulesValidationRuleHandler
	rulesSimpleRules := map[string]string{
		"ves.io.schema.rules.repeated.max_items": "1024",
	}
	vFn, err = vrhSimpleRules(rulesSimpleRules)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GlobalSpecType.simple_rules: %s", err)
		panic(errMsg)
	}
	v.FldValidators["simple_rules"] = vFn

	v.FldValidators["server_choice.server_selector"] = ves_io_schema.LabelSelectorTypeValidator().Validate
	v.FldValidators["server_choice.server_name_matcher"] = ves_io_schema_policy.MatcherTypeBasicValidator().Validate

	v.FldValidators["port_matcher"] = ves_io_schema_policy.PortMatcherTypeValidator().Validate

	v.FldValidators["role"] = ves_io_schema_policy.RoleMatcherTypeValidator().Validate

	v.FldValidators["deny_info"] = ves_io_schema_policy.DenyInformationValidator().Validate

	return v
}()

func GlobalSpecTypeValidator() db.Validator {
	return DefaultGlobalSpecTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *ReplaceSpecType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *ReplaceSpecType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *ReplaceSpecType) DeepCopy() *ReplaceSpecType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &ReplaceSpecType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *ReplaceSpecType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *ReplaceSpecType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return ReplaceSpecTypeValidator().Validate(ctx, m, opts...)
}

func (m *ReplaceSpecType) GetDRefInfo() ([]db.DRefInfo, error) {
	var drInfos []db.DRefInfo
	if fdrInfos, err := m.GetRulesDRefInfo(); err != nil {
		return nil, err
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	return drInfos, nil
}

func (m *ReplaceSpecType) GetRulesDRefInfo() ([]db.DRefInfo, error) {
	drInfos := []db.DRefInfo{}
	for i, ref := range m.GetRules() {
		if ref == nil {
			return nil, fmt.Errorf("ReplaceSpecType.rules[%d] has a nil value", i)
		}
		// resolve kind to type if needed at DBObject.GetDRefInfo()
		drInfos = append(drInfos, db.DRefInfo{
			RefdType:   "service_policy_rule.Object",
			RefdUID:    ref.Uid,
			RefdTenant: ref.Tenant,
			RefdNS:     ref.Namespace,
			RefdName:   ref.Name,
			DRField:    "rules",
			Ref:        ref,
		})
	}

	return drInfos, nil
}

// GetRulesDBEntries returns the db.Entry corresponding to the ObjRefType from the default Table
func (m *ReplaceSpecType) GetRulesDBEntries(ctx context.Context, d db.Interface) ([]db.Entry, error) {
	var entries []db.Entry
	refdType, err := d.TypeForEntryKind("", "", "service_policy_rule.Object")
	if err != nil {
		return nil, errors.Wrap(err, "Cannot find type for kind: service_policy_rule")
	}
	for _, ref := range m.GetRules() {
		refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
		if err != nil {
			return nil, errors.Wrap(err, "Getting referred entry")
		}
		if refdEnt != nil {
			entries = append(entries, refdEnt)
		}
	}

	return entries, nil
}

type ValidateReplaceSpecType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateReplaceSpecType) ServerChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for server_choice")
	}
	return validatorFn, nil
}

func (v *ValidateReplaceSpecType) ServerChoiceServerNameValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	oValidatorFn_ServerName, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for server_name")
	}
	return oValidatorFn_ServerName, nil
}

func (v *ValidateReplaceSpecType) AlgoValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	var conv db.EnumConvFn
	conv = func(v interface{}) int32 {
		i := v.(ves_io_schema_policy.RuleCombiningAlgorithm)
		return int32(i)
	}
	// ves_io_schema_policy.RuleCombiningAlgorithm_name is generated in .pb.go
	validatorFn, err := db.NewEnumValidationRuleHandler(rules, ves_io_schema_policy.RuleCombiningAlgorithm_name, conv)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for algo")
	}

	return validatorFn, nil
}

func (v *ValidateReplaceSpecType) RulesValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemsValidatorFn := func(ctx context.Context, elems []*ves_io_schema.ObjectRefType, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := ves_io_schema.ObjectRefTypeValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for rules")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*ves_io_schema.ObjectRefType)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*ves_io_schema.ObjectRefType, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated rules")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items rules")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateReplaceSpecType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*ReplaceSpecType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *ReplaceSpecType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["algo"]; exists {

		vOpts := append(opts, db.WithValidateField("algo"))
		if err := fv(ctx, m.GetAlgo(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["port_matcher"]; exists {

		vOpts := append(opts, db.WithValidateField("port_matcher"))
		if err := fv(ctx, m.GetPortMatcher(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["rules"]; exists {
		vOpts := append(opts, db.WithValidateField("rules"))
		if err := fv(ctx, m.GetRules(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["server_choice"]; exists {
		val := m.GetServerChoice()
		vOpts := append(opts,
			db.WithValidateField("server_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetServerChoice().(type) {
	case *ReplaceSpecType_ServerName:
		if fv, exists := v.FldValidators["server_choice.server_name"]; exists {
			val := m.GetServerChoice().(*ReplaceSpecType_ServerName).ServerName
			vOpts := append(opts,
				db.WithValidateField("server_choice"),
				db.WithValidateField("server_name"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ReplaceSpecType_ServerSelector:
		if fv, exists := v.FldValidators["server_choice.server_selector"]; exists {
			val := m.GetServerChoice().(*ReplaceSpecType_ServerSelector).ServerSelector
			vOpts := append(opts,
				db.WithValidateField("server_choice"),
				db.WithValidateField("server_selector"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ReplaceSpecType_ServerNameMatcher:
		if fv, exists := v.FldValidators["server_choice.server_name_matcher"]; exists {
			val := m.GetServerChoice().(*ReplaceSpecType_ServerNameMatcher).ServerNameMatcher
			vOpts := append(opts,
				db.WithValidateField("server_choice"),
				db.WithValidateField("server_name_matcher"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ReplaceSpecType_AnyServer:
		if fv, exists := v.FldValidators["server_choice.any_server"]; exists {
			val := m.GetServerChoice().(*ReplaceSpecType_AnyServer).AnyServer
			vOpts := append(opts,
				db.WithValidateField("server_choice"),
				db.WithValidateField("any_server"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultReplaceSpecTypeValidator = func() *ValidateReplaceSpecType {
	v := &ValidateReplaceSpecType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhServerChoice := v.ServerChoiceValidationRuleHandler
	rulesServerChoice := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhServerChoice(rulesServerChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ReplaceSpecType.server_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["server_choice"] = vFn

	vrhServerChoiceServerName := v.ServerChoiceServerNameValidationRuleHandler
	rulesServerChoiceServerName := map[string]string{
		"ves.io.schema.rules.string.max_bytes": "256",
	}
	vFnMap["server_choice.server_name"], err = vrhServerChoiceServerName(rulesServerChoiceServerName)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for oneof field ReplaceSpecType.server_choice_server_name: %s", err)
		panic(errMsg)
	}

	v.FldValidators["server_choice.server_name"] = vFnMap["server_choice.server_name"]

	vrhAlgo := v.AlgoValidationRuleHandler
	rulesAlgo := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhAlgo(rulesAlgo)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ReplaceSpecType.algo: %s", err)
		panic(errMsg)
	}
	v.FldValidators["algo"] = vFn

	vrhRules := v.RulesValidationRuleHandler
	rulesRules := map[string]string{
		"ves.io.schema.rules.repeated.max_items": "256",
	}
	vFn, err = vrhRules(rulesRules)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ReplaceSpecType.rules: %s", err)
		panic(errMsg)
	}
	v.FldValidators["rules"] = vFn

	v.FldValidators["server_choice.server_selector"] = ves_io_schema.LabelSelectorTypeValidator().Validate
	v.FldValidators["server_choice.server_name_matcher"] = ves_io_schema_policy.MatcherTypeBasicValidator().Validate

	v.FldValidators["port_matcher"] = ves_io_schema_policy.PortMatcherTypeValidator().Validate

	return v
}()

func ReplaceSpecTypeValidator() db.Validator {
	return DefaultReplaceSpecTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *SimpleRule) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *SimpleRule) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *SimpleRule) DeepCopy() *SimpleRule {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &SimpleRule{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *SimpleRule) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *SimpleRule) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return SimpleRuleValidator().Validate(ctx, m, opts...)
}

func (m *SimpleRule) GetDRefInfo() ([]db.DRefInfo, error) {
	var drInfos []db.DRefInfo
	if fdrInfos, err := m.GetWafActionDRefInfo(); err != nil {
		return nil, err
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	return drInfos, nil
}

// GetDRefInfo for the field's type
func (m *SimpleRule) GetWafActionDRefInfo() ([]db.DRefInfo, error) {
	var (
		drInfos, driSet []db.DRefInfo
		err             error
	)
	_ = driSet
	if m.WafAction == nil {
		return []db.DRefInfo{}, nil
	}

	driSet, err = m.WafAction.GetDRefInfo()
	if err != nil {
		return nil, err
	}
	for _, dri := range driSet {
		dri.DRField = "waf_action." + dri.DRField
		drInfos = append(drInfos, dri)
	}

	return drInfos, err
}

type ValidateSimpleRule struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateSimpleRule) NameValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for name")
	}

	return validatorFn, nil
}

func (v *ValidateSimpleRule) ActionValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	var conv db.EnumConvFn
	conv = func(v interface{}) int32 {
		i := v.(ves_io_schema_policy.RuleAction)
		return int32(i)
	}
	// ves_io_schema_policy.RuleAction_name is generated in .pb.go
	validatorFn, err := db.NewEnumValidationRuleHandler(rules, ves_io_schema_policy.RuleAction_name, conv)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for action")
	}

	return validatorFn, nil
}

func (v *ValidateSimpleRule) HeadersValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemsValidatorFn := func(ctx context.Context, elems []*ves_io_schema_policy.HeaderMatcherType, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := ves_io_schema_policy.HeaderMatcherTypeValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for headers")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*ves_io_schema_policy.HeaderMatcherType)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*ves_io_schema_policy.HeaderMatcherType, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated headers")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items headers")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateSimpleRule) WafActionValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	reqdValidatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "MessageValidationRuleHandler for waf_action")
	}
	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		if err := reqdValidatorFn(ctx, val, opts...); err != nil {
			return err
		}

		if err := ves_io_schema_policy.WafActionValidator().Validate(ctx, val, opts...); err != nil {
			return err
		}

		return nil
	}

	return validatorFn, nil
}

func (v *ValidateSimpleRule) DescriptionValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for description")
	}

	return validatorFn, nil
}

func (v *ValidateSimpleRule) SchemeValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepStringItemRules(rules)
	itemValFn, err := db.NewStringValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Item ValidationRuleHandler for scheme")
	}
	itemsValidatorFn := func(ctx context.Context, elems []string, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for scheme")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]string)
		if !ok {
			return fmt.Errorf("Repeated validation expected []string, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal := fmt.Sprintf("%v", elem)
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated scheme")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items scheme")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateSimpleRule) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*SimpleRule)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *SimpleRule got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["action"]; exists {

		vOpts := append(opts, db.WithValidateField("action"))
		if err := fv(ctx, m.GetAction(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["description"]; exists {

		vOpts := append(opts, db.WithValidateField("description"))
		if err := fv(ctx, m.GetDescription(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["domain_matcher"]; exists {

		vOpts := append(opts, db.WithValidateField("domain_matcher"))
		if err := fv(ctx, m.GetDomainMatcher(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["dst_ip_prefix_list"]; exists {

		vOpts := append(opts, db.WithValidateField("dst_ip_prefix_list"))
		if err := fv(ctx, m.GetDstIpPrefixList(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["expiration_timestamp"]; exists {

		vOpts := append(opts, db.WithValidateField("expiration_timestamp"))
		if err := fv(ctx, m.GetExpirationTimestamp(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["headers"]; exists {
		vOpts := append(opts, db.WithValidateField("headers"))
		if err := fv(ctx, m.GetHeaders(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["http_method"]; exists {

		vOpts := append(opts, db.WithValidateField("http_method"))
		if err := fv(ctx, m.GetHttpMethod(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["ip_prefix_list"]; exists {

		vOpts := append(opts, db.WithValidateField("ip_prefix_list"))
		if err := fv(ctx, m.GetIpPrefixList(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["l4_dest_matcher"]; exists {

		vOpts := append(opts, db.WithValidateField("l4_dest_matcher"))
		if err := fv(ctx, m.GetL4DestMatcher(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["name"]; exists {

		vOpts := append(opts, db.WithValidateField("name"))
		if err := fv(ctx, m.GetName(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["path"]; exists {

		vOpts := append(opts, db.WithValidateField("path"))
		if err := fv(ctx, m.GetPath(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["port_matcher"]; exists {

		vOpts := append(opts, db.WithValidateField("port_matcher"))
		if err := fv(ctx, m.GetPortMatcher(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["scheme"]; exists {
		vOpts := append(opts, db.WithValidateField("scheme"))
		if err := fv(ctx, m.GetScheme(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["url_matcher"]; exists {

		vOpts := append(opts, db.WithValidateField("url_matcher"))
		if err := fv(ctx, m.GetUrlMatcher(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["waf_action"]; exists {

		vOpts := append(opts, db.WithValidateField("waf_action"))
		if err := fv(ctx, m.GetWafAction(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultSimpleRuleValidator = func() *ValidateSimpleRule {
	v := &ValidateSimpleRule{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhName := v.NameValidationRuleHandler
	rulesName := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhName(rulesName)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for SimpleRule.name: %s", err)
		panic(errMsg)
	}
	v.FldValidators["name"] = vFn

	vrhAction := v.ActionValidationRuleHandler
	rulesAction := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhAction(rulesAction)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for SimpleRule.action: %s", err)
		panic(errMsg)
	}
	v.FldValidators["action"] = vFn

	vrhHeaders := v.HeadersValidationRuleHandler
	rulesHeaders := map[string]string{
		"ves.io.schema.rules.repeated.max_items": "16",
	}
	vFn, err = vrhHeaders(rulesHeaders)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for SimpleRule.headers: %s", err)
		panic(errMsg)
	}
	v.FldValidators["headers"] = vFn

	vrhWafAction := v.WafActionValidationRuleHandler
	rulesWafAction := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhWafAction(rulesWafAction)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for SimpleRule.waf_action: %s", err)
		panic(errMsg)
	}
	v.FldValidators["waf_action"] = vFn

	vrhDescription := v.DescriptionValidationRuleHandler
	rulesDescription := map[string]string{
		"ves.io.schema.rules.string.max_len": "256",
	}
	vFn, err = vrhDescription(rulesDescription)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for SimpleRule.description: %s", err)
		panic(errMsg)
	}
	v.FldValidators["description"] = vFn

	vrhScheme := v.SchemeValidationRuleHandler
	rulesScheme := map[string]string{
		"ves.io.schema.rules.repeated.items.string.in": "[\"ANY\", \"HTTP\", \"HTTPS\", \"TCP\", \"TLS\"]",
		"ves.io.schema.rules.repeated.max_items":       "4",
		"ves.io.schema.rules.repeated.unique":          "true",
	}
	vFn, err = vrhScheme(rulesScheme)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for SimpleRule.scheme: %s", err)
		panic(errMsg)
	}
	v.FldValidators["scheme"] = vFn

	v.FldValidators["domain_matcher"] = ves_io_schema_policy.MatcherTypeValidator().Validate

	v.FldValidators["path"] = ves_io_schema_policy.PathMatcherTypeValidator().Validate

	v.FldValidators["http_method"] = ves_io_schema_policy.HttpMethodMatcherTypeValidator().Validate

	v.FldValidators["port_matcher"] = ves_io_schema_policy.PortMatcherTypeValidator().Validate

	v.FldValidators["url_matcher"] = ves_io_schema_policy.URLMatcherTypeValidator().Validate

	v.FldValidators["l4_dest_matcher"] = ves_io_schema_policy.L4DestMatcherTypeValidator().Validate

	v.FldValidators["ip_prefix_list"] = ves_io_schema_policy.PrefixMatchListValidator().Validate

	v.FldValidators["dst_ip_prefix_list"] = ves_io_schema_policy.PrefixMatchListValidator().Validate

	return v
}()

func SimpleRuleValidator() db.Validator {
	return DefaultSimpleRuleValidator
}

// create setters in CreateSpecType from GlobalSpecType for oneof fields
func (r *CreateSpecType) SetServerChoiceToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.ServerChoice.(type) {
	case nil:
		o.ServerChoice = nil

	case *CreateSpecType_AnyServer:
		o.ServerChoice = &GlobalSpecType_AnyServer{AnyServer: of.AnyServer}

	case *CreateSpecType_ServerName:
		o.ServerChoice = &GlobalSpecType_ServerName{ServerName: of.ServerName}

	case *CreateSpecType_ServerNameMatcher:
		o.ServerChoice = &GlobalSpecType_ServerNameMatcher{ServerNameMatcher: of.ServerNameMatcher}

	case *CreateSpecType_ServerSelector:
		o.ServerChoice = &GlobalSpecType_ServerSelector{ServerSelector: of.ServerSelector}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *CreateSpecType) GetServerChoiceFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.ServerChoice.(type) {
	case nil:
		r.ServerChoice = nil

	case *GlobalSpecType_AnyServer:
		r.ServerChoice = &CreateSpecType_AnyServer{AnyServer: of.AnyServer}

	case *GlobalSpecType_ServerName:
		r.ServerChoice = &CreateSpecType_ServerName{ServerName: of.ServerName}

	case *GlobalSpecType_ServerNameMatcher:
		r.ServerChoice = &CreateSpecType_ServerNameMatcher{ServerNameMatcher: of.ServerNameMatcher}

	case *GlobalSpecType_ServerSelector:
		r.ServerChoice = &CreateSpecType_ServerSelector{ServerSelector: of.ServerSelector}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (m *CreateSpecType) FromGlobalSpecType(f *GlobalSpecType) {
	if f == nil {
		return
	}
	m.Algo = f.GetAlgo()
	m.PortMatcher = f.GetPortMatcher()
	m.Rules = f.GetRules()
	m.GetServerChoiceFromGlobalSpecType(f)
}

func (m *CreateSpecType) ToGlobalSpecType(f *GlobalSpecType) {
	m1 := m.DeepCopy()
	_ = m1
	if f == nil {
		return
	}
	f.Algo = m1.Algo
	f.PortMatcher = m1.PortMatcher
	f.Rules = m1.Rules
	m1.SetServerChoiceToGlobalSpecType(f)
}

// create setters in GetSpecType from GlobalSpecType for oneof fields
func (r *GetSpecType) SetServerChoiceToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.ServerChoice.(type) {
	case nil:
		o.ServerChoice = nil

	case *GetSpecType_AnyServer:
		o.ServerChoice = &GlobalSpecType_AnyServer{AnyServer: of.AnyServer}

	case *GetSpecType_ServerName:
		o.ServerChoice = &GlobalSpecType_ServerName{ServerName: of.ServerName}

	case *GetSpecType_ServerNameMatcher:
		o.ServerChoice = &GlobalSpecType_ServerNameMatcher{ServerNameMatcher: of.ServerNameMatcher}

	case *GetSpecType_ServerSelector:
		o.ServerChoice = &GlobalSpecType_ServerSelector{ServerSelector: of.ServerSelector}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *GetSpecType) GetServerChoiceFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.ServerChoice.(type) {
	case nil:
		r.ServerChoice = nil

	case *GlobalSpecType_AnyServer:
		r.ServerChoice = &GetSpecType_AnyServer{AnyServer: of.AnyServer}

	case *GlobalSpecType_ServerName:
		r.ServerChoice = &GetSpecType_ServerName{ServerName: of.ServerName}

	case *GlobalSpecType_ServerNameMatcher:
		r.ServerChoice = &GetSpecType_ServerNameMatcher{ServerNameMatcher: of.ServerNameMatcher}

	case *GlobalSpecType_ServerSelector:
		r.ServerChoice = &GetSpecType_ServerSelector{ServerSelector: of.ServerSelector}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (m *GetSpecType) FromGlobalSpecType(f *GlobalSpecType) {
	if f == nil {
		return
	}
	m.Algo = f.GetAlgo()
	m.PortMatcher = f.GetPortMatcher()
	m.Rules = f.GetRules()
	m.GetServerChoiceFromGlobalSpecType(f)
	m.SimpleRules = f.GetSimpleRules()
}

func (m *GetSpecType) ToGlobalSpecType(f *GlobalSpecType) {
	m1 := m.DeepCopy()
	_ = m1
	if f == nil {
		return
	}
	f.Algo = m1.Algo
	f.PortMatcher = m1.PortMatcher
	f.Rules = m1.Rules
	m1.SetServerChoiceToGlobalSpecType(f)
	f.SimpleRules = m1.SimpleRules
}

// create setters in ReplaceSpecType from GlobalSpecType for oneof fields
func (r *ReplaceSpecType) SetServerChoiceToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.ServerChoice.(type) {
	case nil:
		o.ServerChoice = nil

	case *ReplaceSpecType_AnyServer:
		o.ServerChoice = &GlobalSpecType_AnyServer{AnyServer: of.AnyServer}

	case *ReplaceSpecType_ServerName:
		o.ServerChoice = &GlobalSpecType_ServerName{ServerName: of.ServerName}

	case *ReplaceSpecType_ServerNameMatcher:
		o.ServerChoice = &GlobalSpecType_ServerNameMatcher{ServerNameMatcher: of.ServerNameMatcher}

	case *ReplaceSpecType_ServerSelector:
		o.ServerChoice = &GlobalSpecType_ServerSelector{ServerSelector: of.ServerSelector}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *ReplaceSpecType) GetServerChoiceFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.ServerChoice.(type) {
	case nil:
		r.ServerChoice = nil

	case *GlobalSpecType_AnyServer:
		r.ServerChoice = &ReplaceSpecType_AnyServer{AnyServer: of.AnyServer}

	case *GlobalSpecType_ServerName:
		r.ServerChoice = &ReplaceSpecType_ServerName{ServerName: of.ServerName}

	case *GlobalSpecType_ServerNameMatcher:
		r.ServerChoice = &ReplaceSpecType_ServerNameMatcher{ServerNameMatcher: of.ServerNameMatcher}

	case *GlobalSpecType_ServerSelector:
		r.ServerChoice = &ReplaceSpecType_ServerSelector{ServerSelector: of.ServerSelector}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (m *ReplaceSpecType) FromGlobalSpecType(f *GlobalSpecType) {
	if f == nil {
		return
	}
	m.Algo = f.GetAlgo()
	m.PortMatcher = f.GetPortMatcher()
	m.Rules = f.GetRules()
	m.GetServerChoiceFromGlobalSpecType(f)
}

func (m *ReplaceSpecType) ToGlobalSpecType(f *GlobalSpecType) {
	m1 := m.DeepCopy()
	_ = m1
	if f == nil {
		return
	}
	f.Algo = m1.Algo
	f.PortMatcher = m1.PortMatcher
	f.Rules = m1.Rules
	m1.SetServerChoiceToGlobalSpecType(f)
}
