// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ves.io/schema/public_ip/types.proto

package public_ip

import proto "github.com/gogo/protobuf/proto"
import golang_proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"
import _ "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
import ves_io_schema4 "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
import _ "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
import _ "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"

import strings "strings"
import reflect "reflect"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// GlobalSpecType
//
// x-displayName: "Global Configuration Specification"
// Configuration specification for Public IP
type GlobalSpecType struct {
	// ip_address
	//
	// x-displayName: "IP address"
	// x-example: "10.1.1.1"
	// IP address for this object
	Ip string `protobuf:"bytes,1,opt,name=ip,proto3" json:"ip,omitempty"`
	// virtual_sites
	//
	// x-displayName: "Virtual Sites"
	// List of references to virtual_site objects where this pubic IP will be available.
	VirtualSites []*ves_io_schema4.ObjectRefType `protobuf:"bytes,2,rep,name=virtual_sites,json=virtualSites" json:"virtual_sites,omitempty"`
	// is_shared
	//
	// x-displayName: "Is Shared"
	// x-example: "true"
	// Is this public ip a shared vip
	IsShared bool `protobuf:"varint,3,opt,name=is_shared,json=isShared,proto3" json:"is_shared,omitempty"`
	// Label expression to select Node
	//
	// x-displayName: "Node Label Expression"
	// x-example: "vipSelector in (subset2)"
	// this expression is used if ver node should own this vip or not
	NodeSelector *ves_io_schema4.LabelSelectorType `protobuf:"bytes,4,opt,name=node_selector,json=nodeSelector" json:"node_selector,omitempty"`
}

func (m *GlobalSpecType) Reset()                    { *m = GlobalSpecType{} }
func (*GlobalSpecType) ProtoMessage()               {}
func (*GlobalSpecType) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{0} }

func (m *GlobalSpecType) GetIp() string {
	if m != nil {
		return m.Ip
	}
	return ""
}

func (m *GlobalSpecType) GetVirtualSites() []*ves_io_schema4.ObjectRefType {
	if m != nil {
		return m.VirtualSites
	}
	return nil
}

func (m *GlobalSpecType) GetIsShared() bool {
	if m != nil {
		return m.IsShared
	}
	return false
}

func (m *GlobalSpecType) GetNodeSelector() *ves_io_schema4.LabelSelectorType {
	if m != nil {
		return m.NodeSelector
	}
	return nil
}

// Replace public_ip
//
// x-displayName: "Replace Public IP"
// Replacing an public_ip object will update the object by replacing the existing spec with the provided one.
// For read-then-write operations a resourceVersion mismatch will occur if the object was modified between the read and write
type ReplaceSpecType struct {
	VirtualSites []*ves_io_schema4.ObjectRefType `protobuf:"bytes,2,rep,name=virtual_sites,json=virtualSites" json:"virtual_sites,omitempty"`
}

func (m *ReplaceSpecType) Reset()                    { *m = ReplaceSpecType{} }
func (*ReplaceSpecType) ProtoMessage()               {}
func (*ReplaceSpecType) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{1} }

func (m *ReplaceSpecType) GetVirtualSites() []*ves_io_schema4.ObjectRefType {
	if m != nil {
		return m.VirtualSites
	}
	return nil
}

// Get public_ip
//
// x-displayName: "Get Public IP"
// Get public_ip will get the object from the storage backend for namespace metadata.namespace
type GetSpecType struct {
	Ip           string                          `protobuf:"bytes,1,opt,name=ip,proto3" json:"ip,omitempty"`
	VirtualSites []*ves_io_schema4.ObjectRefType `protobuf:"bytes,2,rep,name=virtual_sites,json=virtualSites" json:"virtual_sites,omitempty"`
}

func (m *GetSpecType) Reset()                    { *m = GetSpecType{} }
func (*GetSpecType) ProtoMessage()               {}
func (*GetSpecType) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{2} }

func (m *GetSpecType) GetIp() string {
	if m != nil {
		return m.Ip
	}
	return ""
}

func (m *GetSpecType) GetVirtualSites() []*ves_io_schema4.ObjectRefType {
	if m != nil {
		return m.VirtualSites
	}
	return nil
}

func init() {
	proto.RegisterType((*GlobalSpecType)(nil), "ves.io.schema.public_ip.GlobalSpecType")
	golang_proto.RegisterType((*GlobalSpecType)(nil), "ves.io.schema.public_ip.GlobalSpecType")
	proto.RegisterType((*ReplaceSpecType)(nil), "ves.io.schema.public_ip.ReplaceSpecType")
	golang_proto.RegisterType((*ReplaceSpecType)(nil), "ves.io.schema.public_ip.ReplaceSpecType")
	proto.RegisterType((*GetSpecType)(nil), "ves.io.schema.public_ip.GetSpecType")
	golang_proto.RegisterType((*GetSpecType)(nil), "ves.io.schema.public_ip.GetSpecType")
}
func (this *GlobalSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType)
	if !ok {
		that2, ok := that.(GlobalSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Ip != that1.Ip {
		return false
	}
	if len(this.VirtualSites) != len(that1.VirtualSites) {
		return false
	}
	for i := range this.VirtualSites {
		if !this.VirtualSites[i].Equal(that1.VirtualSites[i]) {
			return false
		}
	}
	if this.IsShared != that1.IsShared {
		return false
	}
	if !this.NodeSelector.Equal(that1.NodeSelector) {
		return false
	}
	return true
}
func (this *ReplaceSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType)
	if !ok {
		that2, ok := that.(ReplaceSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.VirtualSites) != len(that1.VirtualSites) {
		return false
	}
	for i := range this.VirtualSites {
		if !this.VirtualSites[i].Equal(that1.VirtualSites[i]) {
			return false
		}
	}
	return true
}
func (this *GetSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType)
	if !ok {
		that2, ok := that.(GetSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Ip != that1.Ip {
		return false
	}
	if len(this.VirtualSites) != len(that1.VirtualSites) {
		return false
	}
	for i := range this.VirtualSites {
		if !this.VirtualSites[i].Equal(that1.VirtualSites[i]) {
			return false
		}
	}
	return true
}
func (this *GlobalSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&public_ip.GlobalSpecType{")
	s = append(s, "Ip: "+fmt.Sprintf("%#v", this.Ip)+",\n")
	if this.VirtualSites != nil {
		s = append(s, "VirtualSites: "+fmt.Sprintf("%#v", this.VirtualSites)+",\n")
	}
	s = append(s, "IsShared: "+fmt.Sprintf("%#v", this.IsShared)+",\n")
	if this.NodeSelector != nil {
		s = append(s, "NodeSelector: "+fmt.Sprintf("%#v", this.NodeSelector)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ReplaceSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&public_ip.ReplaceSpecType{")
	if this.VirtualSites != nil {
		s = append(s, "VirtualSites: "+fmt.Sprintf("%#v", this.VirtualSites)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&public_ip.GetSpecType{")
	s = append(s, "Ip: "+fmt.Sprintf("%#v", this.Ip)+",\n")
	if this.VirtualSites != nil {
		s = append(s, "VirtualSites: "+fmt.Sprintf("%#v", this.VirtualSites)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringTypes(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *GlobalSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GlobalSpecType) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Ip) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Ip)))
		i += copy(dAtA[i:], m.Ip)
	}
	if len(m.VirtualSites) > 0 {
		for _, msg := range m.VirtualSites {
			dAtA[i] = 0x12
			i++
			i = encodeVarintTypes(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.IsShared {
		dAtA[i] = 0x18
		i++
		if m.IsShared {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.NodeSelector != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.NodeSelector.Size()))
		n1, err := m.NodeSelector.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	return i, nil
}

func (m *ReplaceSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplaceSpecType) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.VirtualSites) > 0 {
		for _, msg := range m.VirtualSites {
			dAtA[i] = 0x12
			i++
			i = encodeVarintTypes(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *GetSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetSpecType) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Ip) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Ip)))
		i += copy(dAtA[i:], m.Ip)
	}
	if len(m.VirtualSites) > 0 {
		for _, msg := range m.VirtualSites {
			dAtA[i] = 0x12
			i++
			i = encodeVarintTypes(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func encodeVarintTypes(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func NewPopulatedGlobalSpecType(r randyTypes, easy bool) *GlobalSpecType {
	this := &GlobalSpecType{}
	this.Ip = string(randStringTypes(r))
	if r.Intn(10) != 0 {
		v1 := r.Intn(5)
		this.VirtualSites = make([]*ves_io_schema4.ObjectRefType, v1)
		for i := 0; i < v1; i++ {
			this.VirtualSites[i] = ves_io_schema4.NewPopulatedObjectRefType(r, easy)
		}
	}
	this.IsShared = bool(bool(r.Intn(2) == 0))
	if r.Intn(10) != 0 {
		this.NodeSelector = ves_io_schema4.NewPopulatedLabelSelectorType(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedReplaceSpecType(r randyTypes, easy bool) *ReplaceSpecType {
	this := &ReplaceSpecType{}
	if r.Intn(10) != 0 {
		v2 := r.Intn(5)
		this.VirtualSites = make([]*ves_io_schema4.ObjectRefType, v2)
		for i := 0; i < v2; i++ {
			this.VirtualSites[i] = ves_io_schema4.NewPopulatedObjectRefType(r, easy)
		}
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedGetSpecType(r randyTypes, easy bool) *GetSpecType {
	this := &GetSpecType{}
	this.Ip = string(randStringTypes(r))
	if r.Intn(10) != 0 {
		v3 := r.Intn(5)
		this.VirtualSites = make([]*ves_io_schema4.ObjectRefType, v3)
		for i := 0; i < v3; i++ {
			this.VirtualSites[i] = ves_io_schema4.NewPopulatedObjectRefType(r, easy)
		}
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

type randyTypes interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneTypes(r randyTypes) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringTypes(r randyTypes) string {
	v4 := r.Intn(100)
	tmps := make([]rune, v4)
	for i := 0; i < v4; i++ {
		tmps[i] = randUTF8RuneTypes(r)
	}
	return string(tmps)
}
func randUnrecognizedTypes(r randyTypes, maxFieldNumber int) (dAtA []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		dAtA = randFieldTypes(dAtA, r, fieldNumber, wire)
	}
	return dAtA
}
func randFieldTypes(dAtA []byte, r randyTypes, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		dAtA = encodeVarintPopulateTypes(dAtA, uint64(key))
		v5 := r.Int63()
		if r.Intn(2) == 0 {
			v5 *= -1
		}
		dAtA = encodeVarintPopulateTypes(dAtA, uint64(v5))
	case 1:
		dAtA = encodeVarintPopulateTypes(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		dAtA = encodeVarintPopulateTypes(dAtA, uint64(key))
		ll := r.Intn(100)
		dAtA = encodeVarintPopulateTypes(dAtA, uint64(ll))
		for j := 0; j < ll; j++ {
			dAtA = append(dAtA, byte(r.Intn(256)))
		}
	default:
		dAtA = encodeVarintPopulateTypes(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return dAtA
}
func encodeVarintPopulateTypes(dAtA []byte, v uint64) []byte {
	for v >= 1<<7 {
		dAtA = append(dAtA, uint8(uint64(v)&0x7f|0x80))
		v >>= 7
	}
	dAtA = append(dAtA, uint8(v))
	return dAtA
}
func (m *GlobalSpecType) Size() (n int) {
	var l int
	_ = l
	l = len(m.Ip)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if len(m.VirtualSites) > 0 {
		for _, e := range m.VirtualSites {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if m.IsShared {
		n += 2
	}
	if m.NodeSelector != nil {
		l = m.NodeSelector.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *ReplaceSpecType) Size() (n int) {
	var l int
	_ = l
	if len(m.VirtualSites) > 0 {
		for _, e := range m.VirtualSites {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *GetSpecType) Size() (n int) {
	var l int
	_ = l
	l = len(m.Ip)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if len(m.VirtualSites) > 0 {
		for _, e := range m.VirtualSites {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func sovTypes(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozTypes(x uint64) (n int) {
	return sovTypes(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *GlobalSpecType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType{`,
		`Ip:` + fmt.Sprintf("%v", this.Ip) + `,`,
		`VirtualSites:` + strings.Replace(fmt.Sprintf("%v", this.VirtualSites), "ObjectRefType", "ves_io_schema4.ObjectRefType", 1) + `,`,
		`IsShared:` + fmt.Sprintf("%v", this.IsShared) + `,`,
		`NodeSelector:` + strings.Replace(fmt.Sprintf("%v", this.NodeSelector), "LabelSelectorType", "ves_io_schema4.LabelSelectorType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType{`,
		`VirtualSites:` + strings.Replace(fmt.Sprintf("%v", this.VirtualSites), "ObjectRefType", "ves_io_schema4.ObjectRefType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType{`,
		`Ip:` + fmt.Sprintf("%v", this.Ip) + `,`,
		`VirtualSites:` + strings.Replace(fmt.Sprintf("%v", this.VirtualSites), "ObjectRefType", "ves_io_schema4.ObjectRefType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringTypes(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *GlobalSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GlobalSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GlobalSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ip", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ip = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VirtualSites", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VirtualSites = append(m.VirtualSites, &ves_io_schema4.ObjectRefType{})
			if err := m.VirtualSites[len(m.VirtualSites)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsShared", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsShared = bool(v != 0)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeSelector", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.NodeSelector == nil {
				m.NodeSelector = &ves_io_schema4.LabelSelectorType{}
			}
			if err := m.NodeSelector.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplaceSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplaceSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplaceSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VirtualSites", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VirtualSites = append(m.VirtualSites, &ves_io_schema4.ObjectRefType{})
			if err := m.VirtualSites[len(m.VirtualSites)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ip", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ip = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VirtualSites", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VirtualSites = append(m.VirtualSites, &ves_io_schema4.ObjectRefType{})
			if err := m.VirtualSites[len(m.VirtualSites)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTypes(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthTypes
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipTypes(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthTypes = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTypes   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("ves.io/schema/public_ip/types.proto", fileDescriptorTypes) }
func init() { golang_proto.RegisterFile("ves.io/schema/public_ip/types.proto", fileDescriptorTypes) }

var fileDescriptorTypes = []byte{
	// 534 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x53, 0xbf, 0x6f, 0xd3, 0x40,
	0x18, 0xf5, 0xe7, 0x14, 0x68, 0x2e, 0x0d, 0xa5, 0x66, 0xc8, 0x0f, 0xca, 0xc9, 0x0a, 0x0c, 0x19,
	0x88, 0x2d, 0xc2, 0x96, 0x21, 0x43, 0x96, 0x0a, 0xa9, 0x88, 0xca, 0x81, 0x0e, 0x08, 0x29, 0xb2,
	0x9d, 0x2f, 0xce, 0x81, 0xd3, 0x3b, 0xd9, 0x97, 0x40, 0x87, 0x4a, 0x88, 0xbf, 0x00, 0x21, 0xb1,
	0xb0, 0xb0, 0x30, 0x20, 0xfe, 0x02, 0x44, 0x18, 0x22, 0x26, 0xd4, 0xa9, 0x63, 0x46, 0xe2, 0x2e,
	0x65, 0xab, 0x98, 0x3a, 0xa2, 0x38, 0x3f, 0x94, 0x84, 0x19, 0xb6, 0x3b, 0xbf, 0xe7, 0xf7, 0x3d,
	0xbd, 0xf7, 0x1d, 0xb9, 0xd5, 0xc3, 0xd0, 0x60, 0xdc, 0x0c, 0xdd, 0x36, 0x76, 0x6c, 0x53, 0x74,
	0x1d, 0x9f, 0xb9, 0x0d, 0x26, 0x4c, 0x79, 0x28, 0x30, 0x34, 0x44, 0xc0, 0x25, 0xd7, 0x32, 0x13,
	0x92, 0x31, 0x21, 0x19, 0x73, 0x52, 0xbe, 0xe4, 0x31, 0xd9, 0xee, 0x3a, 0x86, 0xcb, 0x3b, 0xa6,
	0xc7, 0x3d, 0x6e, 0xc6, 0x7c, 0xa7, 0xdb, 0x8a, 0x6f, 0xf1, 0x25, 0x3e, 0x4d, 0x74, 0xf2, 0x37,
	0x96, 0x87, 0x71, 0x21, 0x19, 0x3f, 0x98, 0x0e, 0xc9, 0xe7, 0x96, 0xc1, 0x85, 0xf9, 0xf9, 0xed,
	0x65, 0xa8, 0x67, 0xfb, 0xac, 0x69, 0x4b, 0x9c, 0xa2, 0xfa, 0x0a, 0xca, 0xf0, 0x45, 0x63, 0x49,
	0xba, 0xf0, 0x51, 0x25, 0x57, 0x77, 0x7c, 0xee, 0xd8, 0x7e, 0x5d, 0xa0, 0xfb, 0xe8, 0x50, 0xa0,
	0x76, 0x93, 0xa8, 0x4c, 0x64, 0x41, 0x87, 0x62, 0xb2, 0x96, 0xbe, 0xe8, 0x83, 0xf2, 0xf5, 0xd7,
	0x20, 0xb1, 0x16, 0xa8, 0x02, 0x2c, 0x95, 0x09, 0xed, 0x29, 0x49, 0xf7, 0x58, 0x20, 0xbb, 0xb6,
	0xdf, 0x08, 0x99, 0xc4, 0x30, 0xab, 0xea, 0x89, 0x62, 0xaa, 0xbc, 0x6d, 0x2c, 0x27, 0xf1, 0xd0,
	0x79, 0x86, 0xae, 0xb4, 0xb0, 0x35, 0xd6, 0xac, 0xe5, 0x3e, 0x1f, 0x6d, 0x2c, 0xfe, 0x35, 0x96,
	0xbc, 0xf4, 0x16, 0xd4, 0x6b, 0x60, 0xcd, 0xbe, 0xd7, 0xc7, 0x62, 0xda, 0x6d, 0x92, 0x64, 0x61,
	0x23, 0x6c, 0xdb, 0x01, 0x36, 0xb3, 0x09, 0x1d, 0x8a, 0xeb, 0xb5, 0x2b, 0xc3, 0x23, 0x38, 0xeb,
	0x03, 0x58, 0xeb, 0x2c, 0xac, 0xc7, 0x80, 0xb6, 0x4f, 0xd2, 0x07, 0xbc, 0x89, 0x8d, 0x10, 0x7d,
	0x74, 0x25, 0x0f, 0xb2, 0x6b, 0x3a, 0x14, 0x53, 0x65, 0x7d, 0xc5, 0xc3, 0xae, 0xed, 0xa0, 0x5f,
	0x9f, 0x72, 0x62, 0x1f, 0x9b, 0x53, 0xad, 0xf7, 0xdf, 0x60, 0x8d, 0xa8, 0x0a, 0x58, 0x1b, 0x63,
	0x9d, 0x19, 0xa5, 0x92, 0xf9, 0xde, 0x87, 0xeb, 0x64, 0x8b, 0x90, 0xbd, 0xb8, 0x47, 0x7d, 0xff,
	0xfe, 0x9e, 0x96, 0xb8, 0x7b, 0xa7, 0x5c, 0x78, 0x0d, 0x64, 0xd3, 0x42, 0xe1, 0xdb, 0x2e, 0xce,
	0x73, 0xfa, 0xa7, 0x41, 0x54, 0xb6, 0x8e, 0xab, 0x2b, 0xc5, 0x14, 0x3e, 0x00, 0x49, 0xed, 0xa0,
	0x9c, 0x1b, 0xc8, 0x2d, 0x14, 0x95, 0xfc, 0x8f, 0x25, 0x55, 0x32, 0x7f, 0x79, 0xfb, 0x5d, 0x1d,
	0xc7, 0x54, 0x7b, 0x07, 0xc7, 0xd5, 0x84, 0xb5, 0xfb, 0xf8, 0x64, 0x44, 0x95, 0xe1, 0x88, 0x2a,
	0xe7, 0x23, 0x0a, 0x17, 0x23, 0x0a, 0xaf, 0x22, 0x0a, 0x9f, 0x22, 0x0a, 0x5f, 0x22, 0x0a, 0x83,
	0x88, 0xc2, 0x8f, 0x88, 0xc2, 0x49, 0x44, 0x61, 0x18, 0x51, 0xf8, 0x19, 0x51, 0x38, 0x8b, 0xa8,
	0x72, 0x1e, 0x51, 0x78, 0x73, 0x4a, 0x95, 0xc1, 0x29, 0x85, 0x27, 0x0f, 0x3c, 0x2e, 0x9e, 0x7b,
	0x46, 0x8f, 0xfb, 0x12, 0x83, 0xc0, 0x36, 0xba, 0xa1, 0x19, 0x1f, 0x5a, 0x3c, 0xe8, 0x94, 0x44,
	0xc0, 0x7b, 0xac, 0x89, 0x41, 0x69, 0x06, 0x9b, 0xc2, 0xf1, 0xb8, 0x89, 0x2f, 0xe5, 0x74, 0xcf,
	0x57, 0x5f, 0xac, 0x73, 0x39, 0x5e, 0xf6, 0x7b, 0x7f, 0x02, 0x00, 0x00, 0xff, 0xff, 0xb8, 0xc7,
	0xf3, 0xcb, 0xd3, 0x03, 0x00, 0x00,
}
