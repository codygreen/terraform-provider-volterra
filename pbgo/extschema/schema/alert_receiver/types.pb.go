// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ves.io/schema/alert_receiver/types.proto

package alert_receiver

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"
import _ "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
import ves_io_schema4 "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
import _ "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
import _ "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"

import strings "strings"
import reflect "reflect"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Slack Config
//
// x-displayName: "Slack Config"
// Slack configuration to send alert notifications
type SlackConfig struct {
	// URL
	//
	// x-displayName: "Webhook URL"
	// x-required
	// Incoming webhook url to send alert notifications.
	// API Key is embedded in the webhook URL.
	Url *ves_io_schema4.SecretType `protobuf:"bytes,1,opt,name=url" json:"url,omitempty"`
	// Channel
	//
	// x-displayName: "Channel"
	// x-required
	// Channel or user to send notifications to
	Channel string `protobuf:"bytes,2,opt,name=channel,proto3" json:"channel,omitempty"`
}

func (m *SlackConfig) Reset()                    { *m = SlackConfig{} }
func (*SlackConfig) ProtoMessage()               {}
func (*SlackConfig) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{0} }

func (m *SlackConfig) GetUrl() *ves_io_schema4.SecretType {
	if m != nil {
		return m.Url
	}
	return nil
}

func (m *SlackConfig) GetChannel() string {
	if m != nil {
		return m.Channel
	}
	return ""
}

// PagerDuty Config
//
// x-displayName: "PagerDuty Config"
// PagerDuty configuration to send alert notifications
type PagerDutyConfig struct {
	// Routing Key
	//
	// x-displayName: "Integration Key"
	// x-required
	// PagerDuty integration key (choose Integration Type: Events API v2)
	RoutingKey *ves_io_schema4.SecretType `protobuf:"bytes,1,opt,name=routing_key,json=routingKey" json:"routing_key,omitempty"`
	// URL
	//
	// x-displayName: "Pager Duty URL"
	// x-required
	// URL to send API requests to
	Url string `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`
}

func (m *PagerDutyConfig) Reset()                    { *m = PagerDutyConfig{} }
func (*PagerDutyConfig) ProtoMessage()               {}
func (*PagerDutyConfig) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{1} }

func (m *PagerDutyConfig) GetRoutingKey() *ves_io_schema4.SecretType {
	if m != nil {
		return m.RoutingKey
	}
	return nil
}

func (m *PagerDutyConfig) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

// Opsgenie Config
//
// x-displayName: "OpsGenie Config"
// OpsGenie configuration to send alert notifications
type OpsGenieConfig struct {
	// API Key
	//
	// x-displayName: "API Key"
	// x-required
	// API integration key to send alert notifications using REST API to OpsGenie service.
	ApiKey *ves_io_schema4.SecretType `protobuf:"bytes,1,opt,name=api_key,json=apiKey" json:"api_key,omitempty"`
	// URL
	//
	// x-displayName: "API URL"
	// x-required
	// URL to send API requests to
	Url string `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`
}

func (m *OpsGenieConfig) Reset()                    { *m = OpsGenieConfig{} }
func (*OpsGenieConfig) ProtoMessage()               {}
func (*OpsGenieConfig) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{2} }

func (m *OpsGenieConfig) GetApiKey() *ves_io_schema4.SecretType {
	if m != nil {
		return m.ApiKey
	}
	return nil
}

func (m *OpsGenieConfig) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

type EmailConfig struct {
	// Email
	//
	// x-displayName: "Email"
	// x-example: "abc@email.com"
	// Email id of the user
	Email string `protobuf:"bytes,1,opt,name=email,proto3" json:"email,omitempty"`
}

func (m *EmailConfig) Reset()                    { *m = EmailConfig{} }
func (*EmailConfig) ProtoMessage()               {}
func (*EmailConfig) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{3} }

func (m *EmailConfig) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

type SMSConfig struct {
	// Contact Number
	//
	// x-displayName: "Contact Number"
	// x-example: "+14084004001"
	// Contact number of the user in ITU E.164 format [+][country code][subscriber number including area code]
	ContactNumber string `protobuf:"bytes,1,opt,name=contact_number,json=contactNumber,proto3" json:"contact_number,omitempty"`
}

func (m *SMSConfig) Reset()                    { *m = SMSConfig{} }
func (*SMSConfig) ProtoMessage()               {}
func (*SMSConfig) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{4} }

func (m *SMSConfig) GetContactNumber() string {
	if m != nil {
		return m.ContactNumber
	}
	return ""
}

// Specification for Alert Receiver
//
// x-displayName: "Specification"
// Shape of the Alert Receiver object
type GlobalSpecType struct {
	// Receiver
	//
	// x-displayName: "Receiver"
	// Receiver Config
	//
	// Types that are valid to be assigned to Receiver:
	//	*GlobalSpecType_Slack
	//	*GlobalSpecType_Pagerduty
	//	*GlobalSpecType_Opsgenie
	//	*GlobalSpecType_Email
	//	*GlobalSpecType_Sms
	Receiver isGlobalSpecType_Receiver `protobuf_oneof:"receiver"`
}

func (m *GlobalSpecType) Reset()                    { *m = GlobalSpecType{} }
func (*GlobalSpecType) ProtoMessage()               {}
func (*GlobalSpecType) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{5} }

type isGlobalSpecType_Receiver interface {
	isGlobalSpecType_Receiver()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type GlobalSpecType_Slack struct {
	Slack *SlackConfig `protobuf:"bytes,1,opt,name=slack,oneof"`
}
type GlobalSpecType_Pagerduty struct {
	Pagerduty *PagerDutyConfig `protobuf:"bytes,2,opt,name=pagerduty,oneof"`
}
type GlobalSpecType_Opsgenie struct {
	Opsgenie *OpsGenieConfig `protobuf:"bytes,3,opt,name=opsgenie,oneof"`
}
type GlobalSpecType_Email struct {
	Email *EmailConfig `protobuf:"bytes,4,opt,name=email,oneof"`
}
type GlobalSpecType_Sms struct {
	Sms *SMSConfig `protobuf:"bytes,5,opt,name=sms,oneof"`
}

func (*GlobalSpecType_Slack) isGlobalSpecType_Receiver()     {}
func (*GlobalSpecType_Pagerduty) isGlobalSpecType_Receiver() {}
func (*GlobalSpecType_Opsgenie) isGlobalSpecType_Receiver()  {}
func (*GlobalSpecType_Email) isGlobalSpecType_Receiver()     {}
func (*GlobalSpecType_Sms) isGlobalSpecType_Receiver()       {}

func (m *GlobalSpecType) GetReceiver() isGlobalSpecType_Receiver {
	if m != nil {
		return m.Receiver
	}
	return nil
}

func (m *GlobalSpecType) GetSlack() *SlackConfig {
	if x, ok := m.GetReceiver().(*GlobalSpecType_Slack); ok {
		return x.Slack
	}
	return nil
}

func (m *GlobalSpecType) GetPagerduty() *PagerDutyConfig {
	if x, ok := m.GetReceiver().(*GlobalSpecType_Pagerduty); ok {
		return x.Pagerduty
	}
	return nil
}

func (m *GlobalSpecType) GetOpsgenie() *OpsGenieConfig {
	if x, ok := m.GetReceiver().(*GlobalSpecType_Opsgenie); ok {
		return x.Opsgenie
	}
	return nil
}

func (m *GlobalSpecType) GetEmail() *EmailConfig {
	if x, ok := m.GetReceiver().(*GlobalSpecType_Email); ok {
		return x.Email
	}
	return nil
}

func (m *GlobalSpecType) GetSms() *SMSConfig {
	if x, ok := m.GetReceiver().(*GlobalSpecType_Sms); ok {
		return x.Sms
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*GlobalSpecType) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _GlobalSpecType_OneofMarshaler, _GlobalSpecType_OneofUnmarshaler, _GlobalSpecType_OneofSizer, []interface{}{
		(*GlobalSpecType_Slack)(nil),
		(*GlobalSpecType_Pagerduty)(nil),
		(*GlobalSpecType_Opsgenie)(nil),
		(*GlobalSpecType_Email)(nil),
		(*GlobalSpecType_Sms)(nil),
	}
}

func _GlobalSpecType_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*GlobalSpecType)
	// receiver
	switch x := m.Receiver.(type) {
	case *GlobalSpecType_Slack:
		_ = b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Slack); err != nil {
			return err
		}
	case *GlobalSpecType_Pagerduty:
		_ = b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Pagerduty); err != nil {
			return err
		}
	case *GlobalSpecType_Opsgenie:
		_ = b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Opsgenie); err != nil {
			return err
		}
	case *GlobalSpecType_Email:
		_ = b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Email); err != nil {
			return err
		}
	case *GlobalSpecType_Sms:
		_ = b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Sms); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("GlobalSpecType.Receiver has unexpected type %T", x)
	}
	return nil
}

func _GlobalSpecType_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*GlobalSpecType)
	switch tag {
	case 1: // receiver.slack
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(SlackConfig)
		err := b.DecodeMessage(msg)
		m.Receiver = &GlobalSpecType_Slack{msg}
		return true, err
	case 2: // receiver.pagerduty
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(PagerDutyConfig)
		err := b.DecodeMessage(msg)
		m.Receiver = &GlobalSpecType_Pagerduty{msg}
		return true, err
	case 3: // receiver.opsgenie
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(OpsGenieConfig)
		err := b.DecodeMessage(msg)
		m.Receiver = &GlobalSpecType_Opsgenie{msg}
		return true, err
	case 4: // receiver.email
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(EmailConfig)
		err := b.DecodeMessage(msg)
		m.Receiver = &GlobalSpecType_Email{msg}
		return true, err
	case 5: // receiver.sms
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(SMSConfig)
		err := b.DecodeMessage(msg)
		m.Receiver = &GlobalSpecType_Sms{msg}
		return true, err
	default:
		return false, nil
	}
}

func _GlobalSpecType_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*GlobalSpecType)
	// receiver
	switch x := m.Receiver.(type) {
	case *GlobalSpecType_Slack:
		s := proto.Size(x.Slack)
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *GlobalSpecType_Pagerduty:
		s := proto.Size(x.Pagerduty)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *GlobalSpecType_Opsgenie:
		s := proto.Size(x.Opsgenie)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *GlobalSpecType_Email:
		s := proto.Size(x.Email)
		n += proto.SizeVarint(4<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *GlobalSpecType_Sms:
		s := proto.Size(x.Sms)
		n += proto.SizeVarint(5<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// Create Alert Receiver
//
// x-displayName: "Create Alert Receiver"
// Creates a new Alert Receiver object
type CreateSpecType struct {
	// Types that are valid to be assigned to Receiver:
	//	*CreateSpecType_Slack
	//	*CreateSpecType_Pagerduty
	//	*CreateSpecType_Opsgenie
	//	*CreateSpecType_Email
	//	*CreateSpecType_Sms
	Receiver isCreateSpecType_Receiver `protobuf_oneof:"receiver"`
}

func (m *CreateSpecType) Reset()                    { *m = CreateSpecType{} }
func (*CreateSpecType) ProtoMessage()               {}
func (*CreateSpecType) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{6} }

type isCreateSpecType_Receiver interface {
	isCreateSpecType_Receiver()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type CreateSpecType_Slack struct {
	Slack *SlackConfig `protobuf:"bytes,1,opt,name=slack,oneof"`
}
type CreateSpecType_Pagerduty struct {
	Pagerduty *PagerDutyConfig `protobuf:"bytes,2,opt,name=pagerduty,oneof"`
}
type CreateSpecType_Opsgenie struct {
	Opsgenie *OpsGenieConfig `protobuf:"bytes,3,opt,name=opsgenie,oneof"`
}
type CreateSpecType_Email struct {
	Email *EmailConfig `protobuf:"bytes,4,opt,name=email,oneof"`
}
type CreateSpecType_Sms struct {
	Sms *SMSConfig `protobuf:"bytes,5,opt,name=sms,oneof"`
}

func (*CreateSpecType_Slack) isCreateSpecType_Receiver()     {}
func (*CreateSpecType_Pagerduty) isCreateSpecType_Receiver() {}
func (*CreateSpecType_Opsgenie) isCreateSpecType_Receiver()  {}
func (*CreateSpecType_Email) isCreateSpecType_Receiver()     {}
func (*CreateSpecType_Sms) isCreateSpecType_Receiver()       {}

func (m *CreateSpecType) GetReceiver() isCreateSpecType_Receiver {
	if m != nil {
		return m.Receiver
	}
	return nil
}

func (m *CreateSpecType) GetSlack() *SlackConfig {
	if x, ok := m.GetReceiver().(*CreateSpecType_Slack); ok {
		return x.Slack
	}
	return nil
}

func (m *CreateSpecType) GetPagerduty() *PagerDutyConfig {
	if x, ok := m.GetReceiver().(*CreateSpecType_Pagerduty); ok {
		return x.Pagerduty
	}
	return nil
}

func (m *CreateSpecType) GetOpsgenie() *OpsGenieConfig {
	if x, ok := m.GetReceiver().(*CreateSpecType_Opsgenie); ok {
		return x.Opsgenie
	}
	return nil
}

func (m *CreateSpecType) GetEmail() *EmailConfig {
	if x, ok := m.GetReceiver().(*CreateSpecType_Email); ok {
		return x.Email
	}
	return nil
}

func (m *CreateSpecType) GetSms() *SMSConfig {
	if x, ok := m.GetReceiver().(*CreateSpecType_Sms); ok {
		return x.Sms
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*CreateSpecType) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _CreateSpecType_OneofMarshaler, _CreateSpecType_OneofUnmarshaler, _CreateSpecType_OneofSizer, []interface{}{
		(*CreateSpecType_Slack)(nil),
		(*CreateSpecType_Pagerduty)(nil),
		(*CreateSpecType_Opsgenie)(nil),
		(*CreateSpecType_Email)(nil),
		(*CreateSpecType_Sms)(nil),
	}
}

func _CreateSpecType_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*CreateSpecType)
	// receiver
	switch x := m.Receiver.(type) {
	case *CreateSpecType_Slack:
		_ = b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Slack); err != nil {
			return err
		}
	case *CreateSpecType_Pagerduty:
		_ = b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Pagerduty); err != nil {
			return err
		}
	case *CreateSpecType_Opsgenie:
		_ = b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Opsgenie); err != nil {
			return err
		}
	case *CreateSpecType_Email:
		_ = b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Email); err != nil {
			return err
		}
	case *CreateSpecType_Sms:
		_ = b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Sms); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("CreateSpecType.Receiver has unexpected type %T", x)
	}
	return nil
}

func _CreateSpecType_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*CreateSpecType)
	switch tag {
	case 1: // receiver.slack
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(SlackConfig)
		err := b.DecodeMessage(msg)
		m.Receiver = &CreateSpecType_Slack{msg}
		return true, err
	case 2: // receiver.pagerduty
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(PagerDutyConfig)
		err := b.DecodeMessage(msg)
		m.Receiver = &CreateSpecType_Pagerduty{msg}
		return true, err
	case 3: // receiver.opsgenie
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(OpsGenieConfig)
		err := b.DecodeMessage(msg)
		m.Receiver = &CreateSpecType_Opsgenie{msg}
		return true, err
	case 4: // receiver.email
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(EmailConfig)
		err := b.DecodeMessage(msg)
		m.Receiver = &CreateSpecType_Email{msg}
		return true, err
	case 5: // receiver.sms
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(SMSConfig)
		err := b.DecodeMessage(msg)
		m.Receiver = &CreateSpecType_Sms{msg}
		return true, err
	default:
		return false, nil
	}
}

func _CreateSpecType_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*CreateSpecType)
	// receiver
	switch x := m.Receiver.(type) {
	case *CreateSpecType_Slack:
		s := proto.Size(x.Slack)
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *CreateSpecType_Pagerduty:
		s := proto.Size(x.Pagerduty)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *CreateSpecType_Opsgenie:
		s := proto.Size(x.Opsgenie)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *CreateSpecType_Email:
		s := proto.Size(x.Email)
		n += proto.SizeVarint(4<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *CreateSpecType_Sms:
		s := proto.Size(x.Sms)
		n += proto.SizeVarint(5<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// Replace Alert Receiver
//
// x-displayName: "Replace Alert Receiver"
// Replaces the content of an Alert Receiver object
type ReplaceSpecType struct {
	// Types that are valid to be assigned to Receiver:
	//	*ReplaceSpecType_Slack
	//	*ReplaceSpecType_Pagerduty
	//	*ReplaceSpecType_Opsgenie
	//	*ReplaceSpecType_Email
	//	*ReplaceSpecType_Sms
	Receiver isReplaceSpecType_Receiver `protobuf_oneof:"receiver"`
}

func (m *ReplaceSpecType) Reset()                    { *m = ReplaceSpecType{} }
func (*ReplaceSpecType) ProtoMessage()               {}
func (*ReplaceSpecType) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{7} }

type isReplaceSpecType_Receiver interface {
	isReplaceSpecType_Receiver()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type ReplaceSpecType_Slack struct {
	Slack *SlackConfig `protobuf:"bytes,1,opt,name=slack,oneof"`
}
type ReplaceSpecType_Pagerduty struct {
	Pagerduty *PagerDutyConfig `protobuf:"bytes,2,opt,name=pagerduty,oneof"`
}
type ReplaceSpecType_Opsgenie struct {
	Opsgenie *OpsGenieConfig `protobuf:"bytes,3,opt,name=opsgenie,oneof"`
}
type ReplaceSpecType_Email struct {
	Email *EmailConfig `protobuf:"bytes,4,opt,name=email,oneof"`
}
type ReplaceSpecType_Sms struct {
	Sms *SMSConfig `protobuf:"bytes,5,opt,name=sms,oneof"`
}

func (*ReplaceSpecType_Slack) isReplaceSpecType_Receiver()     {}
func (*ReplaceSpecType_Pagerduty) isReplaceSpecType_Receiver() {}
func (*ReplaceSpecType_Opsgenie) isReplaceSpecType_Receiver()  {}
func (*ReplaceSpecType_Email) isReplaceSpecType_Receiver()     {}
func (*ReplaceSpecType_Sms) isReplaceSpecType_Receiver()       {}

func (m *ReplaceSpecType) GetReceiver() isReplaceSpecType_Receiver {
	if m != nil {
		return m.Receiver
	}
	return nil
}

func (m *ReplaceSpecType) GetSlack() *SlackConfig {
	if x, ok := m.GetReceiver().(*ReplaceSpecType_Slack); ok {
		return x.Slack
	}
	return nil
}

func (m *ReplaceSpecType) GetPagerduty() *PagerDutyConfig {
	if x, ok := m.GetReceiver().(*ReplaceSpecType_Pagerduty); ok {
		return x.Pagerduty
	}
	return nil
}

func (m *ReplaceSpecType) GetOpsgenie() *OpsGenieConfig {
	if x, ok := m.GetReceiver().(*ReplaceSpecType_Opsgenie); ok {
		return x.Opsgenie
	}
	return nil
}

func (m *ReplaceSpecType) GetEmail() *EmailConfig {
	if x, ok := m.GetReceiver().(*ReplaceSpecType_Email); ok {
		return x.Email
	}
	return nil
}

func (m *ReplaceSpecType) GetSms() *SMSConfig {
	if x, ok := m.GetReceiver().(*ReplaceSpecType_Sms); ok {
		return x.Sms
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*ReplaceSpecType) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _ReplaceSpecType_OneofMarshaler, _ReplaceSpecType_OneofUnmarshaler, _ReplaceSpecType_OneofSizer, []interface{}{
		(*ReplaceSpecType_Slack)(nil),
		(*ReplaceSpecType_Pagerduty)(nil),
		(*ReplaceSpecType_Opsgenie)(nil),
		(*ReplaceSpecType_Email)(nil),
		(*ReplaceSpecType_Sms)(nil),
	}
}

func _ReplaceSpecType_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*ReplaceSpecType)
	// receiver
	switch x := m.Receiver.(type) {
	case *ReplaceSpecType_Slack:
		_ = b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Slack); err != nil {
			return err
		}
	case *ReplaceSpecType_Pagerduty:
		_ = b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Pagerduty); err != nil {
			return err
		}
	case *ReplaceSpecType_Opsgenie:
		_ = b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Opsgenie); err != nil {
			return err
		}
	case *ReplaceSpecType_Email:
		_ = b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Email); err != nil {
			return err
		}
	case *ReplaceSpecType_Sms:
		_ = b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Sms); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("ReplaceSpecType.Receiver has unexpected type %T", x)
	}
	return nil
}

func _ReplaceSpecType_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*ReplaceSpecType)
	switch tag {
	case 1: // receiver.slack
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(SlackConfig)
		err := b.DecodeMessage(msg)
		m.Receiver = &ReplaceSpecType_Slack{msg}
		return true, err
	case 2: // receiver.pagerduty
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(PagerDutyConfig)
		err := b.DecodeMessage(msg)
		m.Receiver = &ReplaceSpecType_Pagerduty{msg}
		return true, err
	case 3: // receiver.opsgenie
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(OpsGenieConfig)
		err := b.DecodeMessage(msg)
		m.Receiver = &ReplaceSpecType_Opsgenie{msg}
		return true, err
	case 4: // receiver.email
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(EmailConfig)
		err := b.DecodeMessage(msg)
		m.Receiver = &ReplaceSpecType_Email{msg}
		return true, err
	case 5: // receiver.sms
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(SMSConfig)
		err := b.DecodeMessage(msg)
		m.Receiver = &ReplaceSpecType_Sms{msg}
		return true, err
	default:
		return false, nil
	}
}

func _ReplaceSpecType_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*ReplaceSpecType)
	// receiver
	switch x := m.Receiver.(type) {
	case *ReplaceSpecType_Slack:
		s := proto.Size(x.Slack)
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ReplaceSpecType_Pagerduty:
		s := proto.Size(x.Pagerduty)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ReplaceSpecType_Opsgenie:
		s := proto.Size(x.Opsgenie)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ReplaceSpecType_Email:
		s := proto.Size(x.Email)
		n += proto.SizeVarint(4<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ReplaceSpecType_Sms:
		s := proto.Size(x.Sms)
		n += proto.SizeVarint(5<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// Get Alert Receiver
//
// x-displayName: "Get Alert Receiver"
// Get the Alert Receiver object
type GetSpecType struct {
	// Types that are valid to be assigned to Receiver:
	//	*GetSpecType_Slack
	//	*GetSpecType_Pagerduty
	//	*GetSpecType_Opsgenie
	//	*GetSpecType_Email
	//	*GetSpecType_Sms
	Receiver isGetSpecType_Receiver `protobuf_oneof:"receiver"`
}

func (m *GetSpecType) Reset()                    { *m = GetSpecType{} }
func (*GetSpecType) ProtoMessage()               {}
func (*GetSpecType) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{8} }

type isGetSpecType_Receiver interface {
	isGetSpecType_Receiver()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type GetSpecType_Slack struct {
	Slack *SlackConfig `protobuf:"bytes,1,opt,name=slack,oneof"`
}
type GetSpecType_Pagerduty struct {
	Pagerduty *PagerDutyConfig `protobuf:"bytes,2,opt,name=pagerduty,oneof"`
}
type GetSpecType_Opsgenie struct {
	Opsgenie *OpsGenieConfig `protobuf:"bytes,3,opt,name=opsgenie,oneof"`
}
type GetSpecType_Email struct {
	Email *EmailConfig `protobuf:"bytes,4,opt,name=email,oneof"`
}
type GetSpecType_Sms struct {
	Sms *SMSConfig `protobuf:"bytes,5,opt,name=sms,oneof"`
}

func (*GetSpecType_Slack) isGetSpecType_Receiver()     {}
func (*GetSpecType_Pagerduty) isGetSpecType_Receiver() {}
func (*GetSpecType_Opsgenie) isGetSpecType_Receiver()  {}
func (*GetSpecType_Email) isGetSpecType_Receiver()     {}
func (*GetSpecType_Sms) isGetSpecType_Receiver()       {}

func (m *GetSpecType) GetReceiver() isGetSpecType_Receiver {
	if m != nil {
		return m.Receiver
	}
	return nil
}

func (m *GetSpecType) GetSlack() *SlackConfig {
	if x, ok := m.GetReceiver().(*GetSpecType_Slack); ok {
		return x.Slack
	}
	return nil
}

func (m *GetSpecType) GetPagerduty() *PagerDutyConfig {
	if x, ok := m.GetReceiver().(*GetSpecType_Pagerduty); ok {
		return x.Pagerduty
	}
	return nil
}

func (m *GetSpecType) GetOpsgenie() *OpsGenieConfig {
	if x, ok := m.GetReceiver().(*GetSpecType_Opsgenie); ok {
		return x.Opsgenie
	}
	return nil
}

func (m *GetSpecType) GetEmail() *EmailConfig {
	if x, ok := m.GetReceiver().(*GetSpecType_Email); ok {
		return x.Email
	}
	return nil
}

func (m *GetSpecType) GetSms() *SMSConfig {
	if x, ok := m.GetReceiver().(*GetSpecType_Sms); ok {
		return x.Sms
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*GetSpecType) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _GetSpecType_OneofMarshaler, _GetSpecType_OneofUnmarshaler, _GetSpecType_OneofSizer, []interface{}{
		(*GetSpecType_Slack)(nil),
		(*GetSpecType_Pagerduty)(nil),
		(*GetSpecType_Opsgenie)(nil),
		(*GetSpecType_Email)(nil),
		(*GetSpecType_Sms)(nil),
	}
}

func _GetSpecType_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*GetSpecType)
	// receiver
	switch x := m.Receiver.(type) {
	case *GetSpecType_Slack:
		_ = b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Slack); err != nil {
			return err
		}
	case *GetSpecType_Pagerduty:
		_ = b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Pagerduty); err != nil {
			return err
		}
	case *GetSpecType_Opsgenie:
		_ = b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Opsgenie); err != nil {
			return err
		}
	case *GetSpecType_Email:
		_ = b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Email); err != nil {
			return err
		}
	case *GetSpecType_Sms:
		_ = b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Sms); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("GetSpecType.Receiver has unexpected type %T", x)
	}
	return nil
}

func _GetSpecType_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*GetSpecType)
	switch tag {
	case 1: // receiver.slack
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(SlackConfig)
		err := b.DecodeMessage(msg)
		m.Receiver = &GetSpecType_Slack{msg}
		return true, err
	case 2: // receiver.pagerduty
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(PagerDutyConfig)
		err := b.DecodeMessage(msg)
		m.Receiver = &GetSpecType_Pagerduty{msg}
		return true, err
	case 3: // receiver.opsgenie
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(OpsGenieConfig)
		err := b.DecodeMessage(msg)
		m.Receiver = &GetSpecType_Opsgenie{msg}
		return true, err
	case 4: // receiver.email
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(EmailConfig)
		err := b.DecodeMessage(msg)
		m.Receiver = &GetSpecType_Email{msg}
		return true, err
	case 5: // receiver.sms
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(SMSConfig)
		err := b.DecodeMessage(msg)
		m.Receiver = &GetSpecType_Sms{msg}
		return true, err
	default:
		return false, nil
	}
}

func _GetSpecType_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*GetSpecType)
	// receiver
	switch x := m.Receiver.(type) {
	case *GetSpecType_Slack:
		s := proto.Size(x.Slack)
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *GetSpecType_Pagerduty:
		s := proto.Size(x.Pagerduty)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *GetSpecType_Opsgenie:
		s := proto.Size(x.Opsgenie)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *GetSpecType_Email:
		s := proto.Size(x.Email)
		n += proto.SizeVarint(4<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *GetSpecType_Sms:
		s := proto.Size(x.Sms)
		n += proto.SizeVarint(5<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

func init() {
	proto.RegisterType((*SlackConfig)(nil), "ves.io.schema.alert_receiver.SlackConfig")
	proto.RegisterType((*PagerDutyConfig)(nil), "ves.io.schema.alert_receiver.PagerDutyConfig")
	proto.RegisterType((*OpsGenieConfig)(nil), "ves.io.schema.alert_receiver.OpsGenieConfig")
	proto.RegisterType((*EmailConfig)(nil), "ves.io.schema.alert_receiver.EmailConfig")
	proto.RegisterType((*SMSConfig)(nil), "ves.io.schema.alert_receiver.SMSConfig")
	proto.RegisterType((*GlobalSpecType)(nil), "ves.io.schema.alert_receiver.GlobalSpecType")
	proto.RegisterType((*CreateSpecType)(nil), "ves.io.schema.alert_receiver.CreateSpecType")
	proto.RegisterType((*ReplaceSpecType)(nil), "ves.io.schema.alert_receiver.ReplaceSpecType")
	proto.RegisterType((*GetSpecType)(nil), "ves.io.schema.alert_receiver.GetSpecType")
}
func (this *SlackConfig) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SlackConfig)
	if !ok {
		that2, ok := that.(SlackConfig)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Url.Equal(that1.Url) {
		return false
	}
	if this.Channel != that1.Channel {
		return false
	}
	return true
}
func (this *PagerDutyConfig) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PagerDutyConfig)
	if !ok {
		that2, ok := that.(PagerDutyConfig)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.RoutingKey.Equal(that1.RoutingKey) {
		return false
	}
	if this.Url != that1.Url {
		return false
	}
	return true
}
func (this *OpsGenieConfig) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*OpsGenieConfig)
	if !ok {
		that2, ok := that.(OpsGenieConfig)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ApiKey.Equal(that1.ApiKey) {
		return false
	}
	if this.Url != that1.Url {
		return false
	}
	return true
}
func (this *EmailConfig) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*EmailConfig)
	if !ok {
		that2, ok := that.(EmailConfig)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Email != that1.Email {
		return false
	}
	return true
}
func (this *SMSConfig) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SMSConfig)
	if !ok {
		that2, ok := that.(SMSConfig)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ContactNumber != that1.ContactNumber {
		return false
	}
	return true
}
func (this *GlobalSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType)
	if !ok {
		that2, ok := that.(GlobalSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.Receiver == nil {
		if this.Receiver != nil {
			return false
		}
	} else if this.Receiver == nil {
		return false
	} else if !this.Receiver.Equal(that1.Receiver) {
		return false
	}
	return true
}
func (this *GlobalSpecType_Slack) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_Slack)
	if !ok {
		that2, ok := that.(GlobalSpecType_Slack)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Slack.Equal(that1.Slack) {
		return false
	}
	return true
}
func (this *GlobalSpecType_Pagerduty) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_Pagerduty)
	if !ok {
		that2, ok := that.(GlobalSpecType_Pagerduty)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Pagerduty.Equal(that1.Pagerduty) {
		return false
	}
	return true
}
func (this *GlobalSpecType_Opsgenie) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_Opsgenie)
	if !ok {
		that2, ok := that.(GlobalSpecType_Opsgenie)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Opsgenie.Equal(that1.Opsgenie) {
		return false
	}
	return true
}
func (this *GlobalSpecType_Email) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_Email)
	if !ok {
		that2, ok := that.(GlobalSpecType_Email)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Email.Equal(that1.Email) {
		return false
	}
	return true
}
func (this *GlobalSpecType_Sms) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_Sms)
	if !ok {
		that2, ok := that.(GlobalSpecType_Sms)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Sms.Equal(that1.Sms) {
		return false
	}
	return true
}
func (this *CreateSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType)
	if !ok {
		that2, ok := that.(CreateSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.Receiver == nil {
		if this.Receiver != nil {
			return false
		}
	} else if this.Receiver == nil {
		return false
	} else if !this.Receiver.Equal(that1.Receiver) {
		return false
	}
	return true
}
func (this *CreateSpecType_Slack) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_Slack)
	if !ok {
		that2, ok := that.(CreateSpecType_Slack)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Slack.Equal(that1.Slack) {
		return false
	}
	return true
}
func (this *CreateSpecType_Pagerduty) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_Pagerduty)
	if !ok {
		that2, ok := that.(CreateSpecType_Pagerduty)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Pagerduty.Equal(that1.Pagerduty) {
		return false
	}
	return true
}
func (this *CreateSpecType_Opsgenie) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_Opsgenie)
	if !ok {
		that2, ok := that.(CreateSpecType_Opsgenie)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Opsgenie.Equal(that1.Opsgenie) {
		return false
	}
	return true
}
func (this *CreateSpecType_Email) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_Email)
	if !ok {
		that2, ok := that.(CreateSpecType_Email)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Email.Equal(that1.Email) {
		return false
	}
	return true
}
func (this *CreateSpecType_Sms) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_Sms)
	if !ok {
		that2, ok := that.(CreateSpecType_Sms)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Sms.Equal(that1.Sms) {
		return false
	}
	return true
}
func (this *ReplaceSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType)
	if !ok {
		that2, ok := that.(ReplaceSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.Receiver == nil {
		if this.Receiver != nil {
			return false
		}
	} else if this.Receiver == nil {
		return false
	} else if !this.Receiver.Equal(that1.Receiver) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_Slack) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_Slack)
	if !ok {
		that2, ok := that.(ReplaceSpecType_Slack)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Slack.Equal(that1.Slack) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_Pagerduty) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_Pagerduty)
	if !ok {
		that2, ok := that.(ReplaceSpecType_Pagerduty)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Pagerduty.Equal(that1.Pagerduty) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_Opsgenie) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_Opsgenie)
	if !ok {
		that2, ok := that.(ReplaceSpecType_Opsgenie)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Opsgenie.Equal(that1.Opsgenie) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_Email) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_Email)
	if !ok {
		that2, ok := that.(ReplaceSpecType_Email)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Email.Equal(that1.Email) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_Sms) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_Sms)
	if !ok {
		that2, ok := that.(ReplaceSpecType_Sms)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Sms.Equal(that1.Sms) {
		return false
	}
	return true
}
func (this *GetSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType)
	if !ok {
		that2, ok := that.(GetSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.Receiver == nil {
		if this.Receiver != nil {
			return false
		}
	} else if this.Receiver == nil {
		return false
	} else if !this.Receiver.Equal(that1.Receiver) {
		return false
	}
	return true
}
func (this *GetSpecType_Slack) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_Slack)
	if !ok {
		that2, ok := that.(GetSpecType_Slack)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Slack.Equal(that1.Slack) {
		return false
	}
	return true
}
func (this *GetSpecType_Pagerduty) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_Pagerduty)
	if !ok {
		that2, ok := that.(GetSpecType_Pagerduty)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Pagerduty.Equal(that1.Pagerduty) {
		return false
	}
	return true
}
func (this *GetSpecType_Opsgenie) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_Opsgenie)
	if !ok {
		that2, ok := that.(GetSpecType_Opsgenie)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Opsgenie.Equal(that1.Opsgenie) {
		return false
	}
	return true
}
func (this *GetSpecType_Email) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_Email)
	if !ok {
		that2, ok := that.(GetSpecType_Email)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Email.Equal(that1.Email) {
		return false
	}
	return true
}
func (this *GetSpecType_Sms) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_Sms)
	if !ok {
		that2, ok := that.(GetSpecType_Sms)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Sms.Equal(that1.Sms) {
		return false
	}
	return true
}
func (this *SlackConfig) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&alert_receiver.SlackConfig{")
	if this.Url != nil {
		s = append(s, "Url: "+fmt.Sprintf("%#v", this.Url)+",\n")
	}
	s = append(s, "Channel: "+fmt.Sprintf("%#v", this.Channel)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *PagerDutyConfig) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&alert_receiver.PagerDutyConfig{")
	if this.RoutingKey != nil {
		s = append(s, "RoutingKey: "+fmt.Sprintf("%#v", this.RoutingKey)+",\n")
	}
	s = append(s, "Url: "+fmt.Sprintf("%#v", this.Url)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *OpsGenieConfig) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&alert_receiver.OpsGenieConfig{")
	if this.ApiKey != nil {
		s = append(s, "ApiKey: "+fmt.Sprintf("%#v", this.ApiKey)+",\n")
	}
	s = append(s, "Url: "+fmt.Sprintf("%#v", this.Url)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *EmailConfig) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&alert_receiver.EmailConfig{")
	s = append(s, "Email: "+fmt.Sprintf("%#v", this.Email)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SMSConfig) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&alert_receiver.SMSConfig{")
	s = append(s, "ContactNumber: "+fmt.Sprintf("%#v", this.ContactNumber)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GlobalSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&alert_receiver.GlobalSpecType{")
	if this.Receiver != nil {
		s = append(s, "Receiver: "+fmt.Sprintf("%#v", this.Receiver)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GlobalSpecType_Slack) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&alert_receiver.GlobalSpecType_Slack{` +
		`Slack:` + fmt.Sprintf("%#v", this.Slack) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_Pagerduty) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&alert_receiver.GlobalSpecType_Pagerduty{` +
		`Pagerduty:` + fmt.Sprintf("%#v", this.Pagerduty) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_Opsgenie) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&alert_receiver.GlobalSpecType_Opsgenie{` +
		`Opsgenie:` + fmt.Sprintf("%#v", this.Opsgenie) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_Email) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&alert_receiver.GlobalSpecType_Email{` +
		`Email:` + fmt.Sprintf("%#v", this.Email) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_Sms) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&alert_receiver.GlobalSpecType_Sms{` +
		`Sms:` + fmt.Sprintf("%#v", this.Sms) + `}`}, ", ")
	return s
}
func (this *CreateSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&alert_receiver.CreateSpecType{")
	if this.Receiver != nil {
		s = append(s, "Receiver: "+fmt.Sprintf("%#v", this.Receiver)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CreateSpecType_Slack) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&alert_receiver.CreateSpecType_Slack{` +
		`Slack:` + fmt.Sprintf("%#v", this.Slack) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_Pagerduty) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&alert_receiver.CreateSpecType_Pagerduty{` +
		`Pagerduty:` + fmt.Sprintf("%#v", this.Pagerduty) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_Opsgenie) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&alert_receiver.CreateSpecType_Opsgenie{` +
		`Opsgenie:` + fmt.Sprintf("%#v", this.Opsgenie) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_Email) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&alert_receiver.CreateSpecType_Email{` +
		`Email:` + fmt.Sprintf("%#v", this.Email) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_Sms) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&alert_receiver.CreateSpecType_Sms{` +
		`Sms:` + fmt.Sprintf("%#v", this.Sms) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&alert_receiver.ReplaceSpecType{")
	if this.Receiver != nil {
		s = append(s, "Receiver: "+fmt.Sprintf("%#v", this.Receiver)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ReplaceSpecType_Slack) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&alert_receiver.ReplaceSpecType_Slack{` +
		`Slack:` + fmt.Sprintf("%#v", this.Slack) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_Pagerduty) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&alert_receiver.ReplaceSpecType_Pagerduty{` +
		`Pagerduty:` + fmt.Sprintf("%#v", this.Pagerduty) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_Opsgenie) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&alert_receiver.ReplaceSpecType_Opsgenie{` +
		`Opsgenie:` + fmt.Sprintf("%#v", this.Opsgenie) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_Email) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&alert_receiver.ReplaceSpecType_Email{` +
		`Email:` + fmt.Sprintf("%#v", this.Email) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_Sms) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&alert_receiver.ReplaceSpecType_Sms{` +
		`Sms:` + fmt.Sprintf("%#v", this.Sms) + `}`}, ", ")
	return s
}
func (this *GetSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&alert_receiver.GetSpecType{")
	if this.Receiver != nil {
		s = append(s, "Receiver: "+fmt.Sprintf("%#v", this.Receiver)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetSpecType_Slack) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&alert_receiver.GetSpecType_Slack{` +
		`Slack:` + fmt.Sprintf("%#v", this.Slack) + `}`}, ", ")
	return s
}
func (this *GetSpecType_Pagerduty) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&alert_receiver.GetSpecType_Pagerduty{` +
		`Pagerduty:` + fmt.Sprintf("%#v", this.Pagerduty) + `}`}, ", ")
	return s
}
func (this *GetSpecType_Opsgenie) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&alert_receiver.GetSpecType_Opsgenie{` +
		`Opsgenie:` + fmt.Sprintf("%#v", this.Opsgenie) + `}`}, ", ")
	return s
}
func (this *GetSpecType_Email) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&alert_receiver.GetSpecType_Email{` +
		`Email:` + fmt.Sprintf("%#v", this.Email) + `}`}, ", ")
	return s
}
func (this *GetSpecType_Sms) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&alert_receiver.GetSpecType_Sms{` +
		`Sms:` + fmt.Sprintf("%#v", this.Sms) + `}`}, ", ")
	return s
}
func valueToGoStringTypes(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *SlackConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SlackConfig) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Url != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.Url.Size()))
		n1, err := m.Url.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if len(m.Channel) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Channel)))
		i += copy(dAtA[i:], m.Channel)
	}
	return i, nil
}

func (m *PagerDutyConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PagerDutyConfig) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.RoutingKey != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.RoutingKey.Size()))
		n2, err := m.RoutingKey.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if len(m.Url) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Url)))
		i += copy(dAtA[i:], m.Url)
	}
	return i, nil
}

func (m *OpsGenieConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OpsGenieConfig) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ApiKey != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.ApiKey.Size()))
		n3, err := m.ApiKey.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	if len(m.Url) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Url)))
		i += copy(dAtA[i:], m.Url)
	}
	return i, nil
}

func (m *EmailConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EmailConfig) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Email) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Email)))
		i += copy(dAtA[i:], m.Email)
	}
	return i, nil
}

func (m *SMSConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SMSConfig) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ContactNumber) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTypes(dAtA, i, uint64(len(m.ContactNumber)))
		i += copy(dAtA[i:], m.ContactNumber)
	}
	return i, nil
}

func (m *GlobalSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GlobalSpecType) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Receiver != nil {
		nn4, err := m.Receiver.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn4
	}
	return i, nil
}

func (m *GlobalSpecType_Slack) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Slack != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.Slack.Size()))
		n5, err := m.Slack.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	return i, nil
}
func (m *GlobalSpecType_Pagerduty) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Pagerduty != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.Pagerduty.Size()))
		n6, err := m.Pagerduty.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	return i, nil
}
func (m *GlobalSpecType_Opsgenie) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Opsgenie != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.Opsgenie.Size()))
		n7, err := m.Opsgenie.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	return i, nil
}
func (m *GlobalSpecType_Email) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Email != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.Email.Size()))
		n8, err := m.Email.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n8
	}
	return i, nil
}
func (m *GlobalSpecType_Sms) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Sms != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.Sms.Size()))
		n9, err := m.Sms.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n9
	}
	return i, nil
}
func (m *CreateSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateSpecType) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Receiver != nil {
		nn10, err := m.Receiver.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn10
	}
	return i, nil
}

func (m *CreateSpecType_Slack) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Slack != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.Slack.Size()))
		n11, err := m.Slack.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n11
	}
	return i, nil
}
func (m *CreateSpecType_Pagerduty) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Pagerduty != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.Pagerduty.Size()))
		n12, err := m.Pagerduty.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n12
	}
	return i, nil
}
func (m *CreateSpecType_Opsgenie) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Opsgenie != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.Opsgenie.Size()))
		n13, err := m.Opsgenie.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n13
	}
	return i, nil
}
func (m *CreateSpecType_Email) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Email != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.Email.Size()))
		n14, err := m.Email.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n14
	}
	return i, nil
}
func (m *CreateSpecType_Sms) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Sms != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.Sms.Size()))
		n15, err := m.Sms.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n15
	}
	return i, nil
}
func (m *ReplaceSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplaceSpecType) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Receiver != nil {
		nn16, err := m.Receiver.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn16
	}
	return i, nil
}

func (m *ReplaceSpecType_Slack) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Slack != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.Slack.Size()))
		n17, err := m.Slack.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n17
	}
	return i, nil
}
func (m *ReplaceSpecType_Pagerduty) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Pagerduty != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.Pagerduty.Size()))
		n18, err := m.Pagerduty.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n18
	}
	return i, nil
}
func (m *ReplaceSpecType_Opsgenie) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Opsgenie != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.Opsgenie.Size()))
		n19, err := m.Opsgenie.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n19
	}
	return i, nil
}
func (m *ReplaceSpecType_Email) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Email != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.Email.Size()))
		n20, err := m.Email.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n20
	}
	return i, nil
}
func (m *ReplaceSpecType_Sms) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Sms != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.Sms.Size()))
		n21, err := m.Sms.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n21
	}
	return i, nil
}
func (m *GetSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetSpecType) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Receiver != nil {
		nn22, err := m.Receiver.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn22
	}
	return i, nil
}

func (m *GetSpecType_Slack) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Slack != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.Slack.Size()))
		n23, err := m.Slack.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n23
	}
	return i, nil
}
func (m *GetSpecType_Pagerduty) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Pagerduty != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.Pagerduty.Size()))
		n24, err := m.Pagerduty.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n24
	}
	return i, nil
}
func (m *GetSpecType_Opsgenie) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Opsgenie != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.Opsgenie.Size()))
		n25, err := m.Opsgenie.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n25
	}
	return i, nil
}
func (m *GetSpecType_Email) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Email != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.Email.Size()))
		n26, err := m.Email.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n26
	}
	return i, nil
}
func (m *GetSpecType_Sms) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Sms != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.Sms.Size()))
		n27, err := m.Sms.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n27
	}
	return i, nil
}
func encodeVarintTypes(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *SlackConfig) Size() (n int) {
	var l int
	_ = l
	if m.Url != nil {
		l = m.Url.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.Channel)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *PagerDutyConfig) Size() (n int) {
	var l int
	_ = l
	if m.RoutingKey != nil {
		l = m.RoutingKey.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.Url)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *OpsGenieConfig) Size() (n int) {
	var l int
	_ = l
	if m.ApiKey != nil {
		l = m.ApiKey.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.Url)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *EmailConfig) Size() (n int) {
	var l int
	_ = l
	l = len(m.Email)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *SMSConfig) Size() (n int) {
	var l int
	_ = l
	l = len(m.ContactNumber)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *GlobalSpecType) Size() (n int) {
	var l int
	_ = l
	if m.Receiver != nil {
		n += m.Receiver.Size()
	}
	return n
}

func (m *GlobalSpecType_Slack) Size() (n int) {
	var l int
	_ = l
	if m.Slack != nil {
		l = m.Slack.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_Pagerduty) Size() (n int) {
	var l int
	_ = l
	if m.Pagerduty != nil {
		l = m.Pagerduty.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_Opsgenie) Size() (n int) {
	var l int
	_ = l
	if m.Opsgenie != nil {
		l = m.Opsgenie.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_Email) Size() (n int) {
	var l int
	_ = l
	if m.Email != nil {
		l = m.Email.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_Sms) Size() (n int) {
	var l int
	_ = l
	if m.Sms != nil {
		l = m.Sms.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType) Size() (n int) {
	var l int
	_ = l
	if m.Receiver != nil {
		n += m.Receiver.Size()
	}
	return n
}

func (m *CreateSpecType_Slack) Size() (n int) {
	var l int
	_ = l
	if m.Slack != nil {
		l = m.Slack.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_Pagerduty) Size() (n int) {
	var l int
	_ = l
	if m.Pagerduty != nil {
		l = m.Pagerduty.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_Opsgenie) Size() (n int) {
	var l int
	_ = l
	if m.Opsgenie != nil {
		l = m.Opsgenie.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_Email) Size() (n int) {
	var l int
	_ = l
	if m.Email != nil {
		l = m.Email.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_Sms) Size() (n int) {
	var l int
	_ = l
	if m.Sms != nil {
		l = m.Sms.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType) Size() (n int) {
	var l int
	_ = l
	if m.Receiver != nil {
		n += m.Receiver.Size()
	}
	return n
}

func (m *ReplaceSpecType_Slack) Size() (n int) {
	var l int
	_ = l
	if m.Slack != nil {
		l = m.Slack.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_Pagerduty) Size() (n int) {
	var l int
	_ = l
	if m.Pagerduty != nil {
		l = m.Pagerduty.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_Opsgenie) Size() (n int) {
	var l int
	_ = l
	if m.Opsgenie != nil {
		l = m.Opsgenie.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_Email) Size() (n int) {
	var l int
	_ = l
	if m.Email != nil {
		l = m.Email.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_Sms) Size() (n int) {
	var l int
	_ = l
	if m.Sms != nil {
		l = m.Sms.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType) Size() (n int) {
	var l int
	_ = l
	if m.Receiver != nil {
		n += m.Receiver.Size()
	}
	return n
}

func (m *GetSpecType_Slack) Size() (n int) {
	var l int
	_ = l
	if m.Slack != nil {
		l = m.Slack.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_Pagerduty) Size() (n int) {
	var l int
	_ = l
	if m.Pagerduty != nil {
		l = m.Pagerduty.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_Opsgenie) Size() (n int) {
	var l int
	_ = l
	if m.Opsgenie != nil {
		l = m.Opsgenie.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_Email) Size() (n int) {
	var l int
	_ = l
	if m.Email != nil {
		l = m.Email.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_Sms) Size() (n int) {
	var l int
	_ = l
	if m.Sms != nil {
		l = m.Sms.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func sovTypes(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozTypes(x uint64) (n int) {
	return sovTypes(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *SlackConfig) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SlackConfig{`,
		`Url:` + strings.Replace(fmt.Sprintf("%v", this.Url), "SecretType", "ves_io_schema4.SecretType", 1) + `,`,
		`Channel:` + fmt.Sprintf("%v", this.Channel) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PagerDutyConfig) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PagerDutyConfig{`,
		`RoutingKey:` + strings.Replace(fmt.Sprintf("%v", this.RoutingKey), "SecretType", "ves_io_schema4.SecretType", 1) + `,`,
		`Url:` + fmt.Sprintf("%v", this.Url) + `,`,
		`}`,
	}, "")
	return s
}
func (this *OpsGenieConfig) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&OpsGenieConfig{`,
		`ApiKey:` + strings.Replace(fmt.Sprintf("%v", this.ApiKey), "SecretType", "ves_io_schema4.SecretType", 1) + `,`,
		`Url:` + fmt.Sprintf("%v", this.Url) + `,`,
		`}`,
	}, "")
	return s
}
func (this *EmailConfig) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&EmailConfig{`,
		`Email:` + fmt.Sprintf("%v", this.Email) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SMSConfig) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SMSConfig{`,
		`ContactNumber:` + fmt.Sprintf("%v", this.ContactNumber) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType{`,
		`Receiver:` + fmt.Sprintf("%v", this.Receiver) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_Slack) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_Slack{`,
		`Slack:` + strings.Replace(fmt.Sprintf("%v", this.Slack), "SlackConfig", "SlackConfig", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_Pagerduty) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_Pagerduty{`,
		`Pagerduty:` + strings.Replace(fmt.Sprintf("%v", this.Pagerduty), "PagerDutyConfig", "PagerDutyConfig", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_Opsgenie) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_Opsgenie{`,
		`Opsgenie:` + strings.Replace(fmt.Sprintf("%v", this.Opsgenie), "OpsGenieConfig", "OpsGenieConfig", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_Email) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_Email{`,
		`Email:` + strings.Replace(fmt.Sprintf("%v", this.Email), "EmailConfig", "EmailConfig", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_Sms) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_Sms{`,
		`Sms:` + strings.Replace(fmt.Sprintf("%v", this.Sms), "SMSConfig", "SMSConfig", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType{`,
		`Receiver:` + fmt.Sprintf("%v", this.Receiver) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_Slack) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_Slack{`,
		`Slack:` + strings.Replace(fmt.Sprintf("%v", this.Slack), "SlackConfig", "SlackConfig", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_Pagerduty) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_Pagerduty{`,
		`Pagerduty:` + strings.Replace(fmt.Sprintf("%v", this.Pagerduty), "PagerDutyConfig", "PagerDutyConfig", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_Opsgenie) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_Opsgenie{`,
		`Opsgenie:` + strings.Replace(fmt.Sprintf("%v", this.Opsgenie), "OpsGenieConfig", "OpsGenieConfig", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_Email) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_Email{`,
		`Email:` + strings.Replace(fmt.Sprintf("%v", this.Email), "EmailConfig", "EmailConfig", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_Sms) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_Sms{`,
		`Sms:` + strings.Replace(fmt.Sprintf("%v", this.Sms), "SMSConfig", "SMSConfig", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType{`,
		`Receiver:` + fmt.Sprintf("%v", this.Receiver) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_Slack) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_Slack{`,
		`Slack:` + strings.Replace(fmt.Sprintf("%v", this.Slack), "SlackConfig", "SlackConfig", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_Pagerduty) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_Pagerduty{`,
		`Pagerduty:` + strings.Replace(fmt.Sprintf("%v", this.Pagerduty), "PagerDutyConfig", "PagerDutyConfig", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_Opsgenie) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_Opsgenie{`,
		`Opsgenie:` + strings.Replace(fmt.Sprintf("%v", this.Opsgenie), "OpsGenieConfig", "OpsGenieConfig", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_Email) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_Email{`,
		`Email:` + strings.Replace(fmt.Sprintf("%v", this.Email), "EmailConfig", "EmailConfig", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_Sms) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_Sms{`,
		`Sms:` + strings.Replace(fmt.Sprintf("%v", this.Sms), "SMSConfig", "SMSConfig", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType{`,
		`Receiver:` + fmt.Sprintf("%v", this.Receiver) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_Slack) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_Slack{`,
		`Slack:` + strings.Replace(fmt.Sprintf("%v", this.Slack), "SlackConfig", "SlackConfig", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_Pagerduty) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_Pagerduty{`,
		`Pagerduty:` + strings.Replace(fmt.Sprintf("%v", this.Pagerduty), "PagerDutyConfig", "PagerDutyConfig", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_Opsgenie) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_Opsgenie{`,
		`Opsgenie:` + strings.Replace(fmt.Sprintf("%v", this.Opsgenie), "OpsGenieConfig", "OpsGenieConfig", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_Email) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_Email{`,
		`Email:` + strings.Replace(fmt.Sprintf("%v", this.Email), "EmailConfig", "EmailConfig", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_Sms) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_Sms{`,
		`Sms:` + strings.Replace(fmt.Sprintf("%v", this.Sms), "SMSConfig", "SMSConfig", 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringTypes(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *SlackConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SlackConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SlackConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Url", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Url == nil {
				m.Url = &ves_io_schema4.SecretType{}
			}
			if err := m.Url.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Channel", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Channel = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PagerDutyConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PagerDutyConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PagerDutyConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoutingKey", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RoutingKey == nil {
				m.RoutingKey = &ves_io_schema4.SecretType{}
			}
			if err := m.RoutingKey.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Url", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Url = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OpsGenieConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OpsGenieConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OpsGenieConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiKey", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ApiKey == nil {
				m.ApiKey = &ves_io_schema4.SecretType{}
			}
			if err := m.ApiKey.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Url", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Url = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EmailConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EmailConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EmailConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Email", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Email = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SMSConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SMSConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SMSConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContactNumber", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContactNumber = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GlobalSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GlobalSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GlobalSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Slack", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &SlackConfig{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Receiver = &GlobalSpecType_Slack{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagerduty", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &PagerDutyConfig{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Receiver = &GlobalSpecType_Pagerduty{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Opsgenie", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &OpsGenieConfig{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Receiver = &GlobalSpecType_Opsgenie{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Email", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &EmailConfig{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Receiver = &GlobalSpecType_Email{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sms", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &SMSConfig{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Receiver = &GlobalSpecType_Sms{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Slack", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &SlackConfig{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Receiver = &CreateSpecType_Slack{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagerduty", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &PagerDutyConfig{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Receiver = &CreateSpecType_Pagerduty{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Opsgenie", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &OpsGenieConfig{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Receiver = &CreateSpecType_Opsgenie{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Email", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &EmailConfig{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Receiver = &CreateSpecType_Email{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sms", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &SMSConfig{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Receiver = &CreateSpecType_Sms{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplaceSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplaceSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplaceSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Slack", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &SlackConfig{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Receiver = &ReplaceSpecType_Slack{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagerduty", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &PagerDutyConfig{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Receiver = &ReplaceSpecType_Pagerduty{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Opsgenie", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &OpsGenieConfig{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Receiver = &ReplaceSpecType_Opsgenie{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Email", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &EmailConfig{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Receiver = &ReplaceSpecType_Email{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sms", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &SMSConfig{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Receiver = &ReplaceSpecType_Sms{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Slack", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &SlackConfig{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Receiver = &GetSpecType_Slack{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagerduty", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &PagerDutyConfig{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Receiver = &GetSpecType_Pagerduty{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Opsgenie", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &OpsGenieConfig{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Receiver = &GetSpecType_Opsgenie{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Email", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &EmailConfig{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Receiver = &GetSpecType_Email{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sms", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &SMSConfig{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Receiver = &GetSpecType_Sms{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTypes(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthTypes
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipTypes(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthTypes = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTypes   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("ves.io/schema/alert_receiver/types.proto", fileDescriptorTypes) }

var fileDescriptorTypes = []byte{
	// 666 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x96, 0xbf, 0x6f, 0xd3, 0x5a,
	0x14, 0xc7, 0x7d, 0xeb, 0x24, 0x4d, 0x6e, 0xde, 0x4b, 0xfb, 0xac, 0x37, 0xa4, 0x79, 0x95, 0x5f,
	0xe5, 0x85, 0x22, 0x11, 0x5b, 0x94, 0x05, 0x81, 0x54, 0x41, 0x0a, 0x6a, 0x54, 0x54, 0x40, 0x0e,
	0x53, 0x85, 0x14, 0x6e, 0xdc, 0x53, 0xf7, 0xaa, 0x8e, 0xef, 0xd5, 0xf5, 0x75, 0x20, 0x1b, 0x42,
	0x4c, 0x4c, 0x8c, 0x48, 0xf0, 0x07, 0xf0, 0x37, 0xd0, 0xa5, 0x23, 0x62, 0xca, 0xd8, 0x91, 0x9a,
	0x05, 0xb6, 0xce, 0x4c, 0xc8, 0x3f, 0x52, 0xe2, 0xaa, 0x2a, 0x65, 0x41, 0x1d, 0xba, 0xdd, 0xe3,
	0x73, 0xbe, 0xdf, 0x73, 0xcf, 0xf9, 0x78, 0xb8, 0x78, 0x71, 0x00, 0x81, 0x49, 0x99, 0x15, 0x38,
	0xdb, 0xd0, 0x27, 0x16, 0xf1, 0x40, 0xc8, 0xae, 0x00, 0x07, 0xe8, 0x00, 0x84, 0x25, 0x87, 0x1c,
	0x02, 0x93, 0x0b, 0x26, 0x99, 0x36, 0x9f, 0x56, 0x9a, 0x69, 0xa5, 0x99, 0xaf, 0x6c, 0x34, 0x5d,
	0x2a, 0xb7, 0xc3, 0x9e, 0xe9, 0xb0, 0xbe, 0xe5, 0x32, 0x97, 0x59, 0x89, 0xa8, 0x17, 0x6e, 0x25,
	0x51, 0x12, 0x24, 0xa7, 0xd4, 0xac, 0xf1, 0x5f, 0xbe, 0x2d, 0xe3, 0x92, 0x32, 0x3f, 0xeb, 0xd4,
	0x98, 0xcb, 0x27, 0x27, 0x2e, 0xd1, 0x98, 0xcf, 0xa7, 0x06, 0xc4, 0xa3, 0x9b, 0x44, 0x42, 0x96,
	0x5d, 0x38, 0x96, 0xa5, 0xf0, 0xb4, 0x9b, 0xb3, 0x36, 0x36, 0x70, 0xb5, 0xe3, 0x11, 0x67, 0x67,
	0x85, 0xf9, 0x5b, 0xd4, 0xd5, 0xae, 0x62, 0x35, 0x14, 0x5e, 0x1d, 0x2d, 0xa0, 0xc5, 0xea, 0xd2,
	0x9c, 0x99, 0x9f, 0xb0, 0x03, 0x8e, 0x00, 0xf9, 0x68, 0xc8, 0xa1, 0x55, 0x18, 0xed, 0x22, 0x64,
	0xc7, 0xb5, 0x5a, 0x1d, 0x4f, 0x3b, 0xdb, 0xc4, 0xf7, 0xc1, 0xab, 0x4f, 0x2d, 0xa0, 0xc5, 0x8a,
	0x3d, 0x0e, 0x0d, 0xc0, 0x33, 0x0f, 0x89, 0x0b, 0xe2, 0x4e, 0x28, 0x87, 0x99, 0xff, 0x2d, 0x5c,
	0x15, 0x2c, 0x94, 0xd4, 0x77, 0xbb, 0x3b, 0x30, 0x3c, 0x6b, 0x1f, 0x9c, 0x69, 0xee, 0xc1, 0x50,
	0x9b, 0x4d, 0x6f, 0x98, 0xb6, 0x8a, 0x8f, 0xc6, 0x63, 0x5c, 0x7b, 0xc0, 0x83, 0x55, 0xf0, 0x29,
	0x64, 0x5d, 0xae, 0xe3, 0x69, 0xc2, 0xe9, 0xef, 0x74, 0x28, 0x11, 0x4e, 0x4f, 0x76, 0x37, 0x71,
	0xf5, 0x6e, 0x9f, 0x50, 0x2f, 0xb3, 0xfe, 0x1f, 0x17, 0x21, 0x0e, 0x13, 0xe3, 0x4a, 0xab, 0xf2,
	0xe1, 0xdb, 0x9e, 0x5a, 0x10, 0x53, 0x4f, 0x90, 0x9d, 0x7e, 0x37, 0x96, 0x71, 0xa5, 0xb3, 0xde,
	0x39, 0x5a, 0x67, 0xcd, 0x61, 0xbe, 0x24, 0x8e, 0xec, 0xfa, 0x61, 0xbf, 0x07, 0x22, 0x93, 0xe1,
	0x58, 0x56, 0x14, 0xea, 0xde, 0x14, 0xb2, 0xff, 0xce, 0x2a, 0xee, 0x27, 0x05, 0xc6, 0x2b, 0x15,
	0xd7, 0x56, 0x3d, 0xd6, 0x23, 0x5e, 0x87, 0x83, 0x13, 0x5f, 0x51, 0xbb, 0x8d, 0x8b, 0x41, 0xcc,
	0x28, 0x1b, 0xe6, 0xb2, 0x79, 0xda, 0x8f, 0x67, 0x4e, 0xe0, 0x6c, 0x2b, 0x76, 0xaa, 0xd4, 0xd6,
	0x71, 0x85, 0xc7, 0x28, 0x36, 0x43, 0x39, 0x4c, 0xa6, 0xab, 0x2e, 0x35, 0x4f, 0xb7, 0x39, 0x46,
	0xae, 0xad, 0xd8, 0x3f, 0x1d, 0xb4, 0x35, 0x5c, 0x66, 0x3c, 0x70, 0xe3, 0x95, 0xd7, 0xd5, 0xc4,
	0xed, 0xca, 0xe9, 0x6e, 0x79, 0x40, 0x6d, 0xc5, 0x3e, 0xd2, 0xc7, 0xd3, 0xa5, 0x1b, 0x2d, 0x9c,
	0x65, 0xba, 0x09, 0x16, 0xf1, 0x74, 0x89, 0x52, 0xbb, 0x89, 0xd5, 0xa0, 0x1f, 0xd4, 0x8b, 0x89,
	0xc1, 0xa5, 0x5f, 0xac, 0x67, 0x0c, 0xa7, 0xad, 0xd8, 0xb1, 0xaa, 0xf5, 0x2f, 0x2e, 0x8f, 0x93,
	0x5a, 0x79, 0x6f, 0x17, 0xa1, 0xd1, 0x2e, 0x2a, 0xad, 0x15, 0xca, 0xa5, 0xd9, 0x69, 0xe3, 0xad,
	0x8a, 0x6b, 0x2b, 0x02, 0x88, 0x84, 0x0b, 0x18, 0x7f, 0x02, 0xc6, 0x8d, 0x7f, 0x3e, 0x2d, 0x1f,
	0xfb, 0xfb, 0x5b, 0xf5, 0x09, 0x3e, 0x7f, 0xbd, 0xf8, 0x8e, 0x8e, 0x22, 0xe3, 0x9d, 0x8a, 0x67,
	0x6c, 0xe0, 0x1e, 0x71, 0x2e, 0xf0, 0x9c, 0x43, 0x3c, 0x6f, 0x54, 0x5c, 0x5d, 0x05, 0x79, 0x81,
	0xe6, 0xdc, 0xa1, 0x69, 0xbd, 0x44, 0xa3, 0x03, 0x5d, 0xd9, 0x3f, 0xd0, 0x95, 0xc3, 0x03, 0x1d,
	0x3d, 0x8f, 0x74, 0xf4, 0x3e, 0xd2, 0xd1, 0xc7, 0x48, 0x47, 0xa3, 0x48, 0x47, 0xfb, 0x91, 0x8e,
	0x3e, 0x47, 0x3a, 0xfa, 0x1a, 0xe9, 0xca, 0x61, 0xa4, 0xa3, 0xd7, 0x5f, 0x74, 0x65, 0xc3, 0x76,
	0x19, 0xdf, 0x71, 0xcd, 0x01, 0xf3, 0x24, 0x08, 0x41, 0xcc, 0x30, 0xb0, 0x92, 0xc3, 0x16, 0x13,
	0xfd, 0x26, 0x17, 0x6c, 0x40, 0x37, 0x41, 0x34, 0xc7, 0x69, 0x8b, 0xf7, 0x5c, 0x66, 0xc1, 0x33,
	0x99, 0xbd, 0x3c, 0x4e, 0x7c, 0x4d, 0xf5, 0x4a, 0xc9, 0x1b, 0xe4, 0xda, 0x8f, 0x00, 0x00, 0x00,
	0xff, 0xff, 0xc2, 0xdc, 0x4d, 0x96, 0x74, 0x09, 0x00, 0x00,
}
