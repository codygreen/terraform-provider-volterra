// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ves.io/schema/network_connector/types.proto

package network_connector

import proto "github.com/gogo/protobuf/proto"
import golang_proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"
import _ "github.com/gogo/protobuf/types"
import ves_io_schema3 "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
import _ "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
import _ "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
import ves_io_schema4 "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
import _ "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
import _ "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
import ves_io_schema_views "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/views"

import strconv "strconv"

import strings "strings"
import reflect "reflect"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Network Connector Types
//
// x-displayName: "Network Connector Types"
// There are three different types of network connectors
type NetworkConnectorType int32

const (
	// x-displayName: "Default Gateway Snat"
	// Default route in inside Network is towards outside network
	NETWORK_CONNECTOR_TYPE_DEFAULT_GATEWAY_SNAT NetworkConnectorType = 0
	// x-displayName: "Dynamic Gateway Snat"
	// Dynamic routing will be used and routes from outside network are progated in inside
	// network. If dynamic routing is configured on customer edge these routes will be advertised
	// to attarct traffic to this CE.
	NETWORK_CONNECTOR_TYPE_DYNAMIC_GATEWAY_SNAT NetworkConnectorType = 1
	// x-displayName: "Dynamic Gateway Without Snat"
	// Two networks conected bidirectionally with dynamic routing without SNAT.
	NETWORK_CONNECTOR_TYPE_DYNAMIC_GATEWAY NetworkConnectorType = 2
)

var NetworkConnectorType_name = map[int32]string{
	0: "NETWORK_CONNECTOR_TYPE_DEFAULT_GATEWAY_SNAT",
	1: "NETWORK_CONNECTOR_TYPE_DYNAMIC_GATEWAY_SNAT",
	2: "NETWORK_CONNECTOR_TYPE_DYNAMIC_GATEWAY",
}
var NetworkConnectorType_value = map[string]int32{
	"NETWORK_CONNECTOR_TYPE_DEFAULT_GATEWAY_SNAT": 0,
	"NETWORK_CONNECTOR_TYPE_DYNAMIC_GATEWAY_SNAT": 1,
	"NETWORK_CONNECTOR_TYPE_DYNAMIC_GATEWAY":      2,
}

func (NetworkConnectorType) EnumDescriptor() ([]byte, []int) { return fileDescriptorTypes, []int{0} }

// Network Connector Snat Pool Type
//
// x-displayName: "Network Connector Snat Pool Type"
// If the type of network connector is NETWORK_CONNECTOR_TYPE_DEFAULT_GATEWAY_SNAT or NETWORK_CONNECTOR_TYPE_DYNAMIC_GATEWAY_SNAT
// packets will be subjected to Snat when they traverse from one network to other. While doing the Source Nat, the Source IP that gets
// chosen for packet can be controlled using Network Connector Snat Pool Type
type NetworkConnectorSNATPoolType int32

const (
	// x-displayName: "Use Interface IP"
	// Use IP address of interface belonging to remote virtual network while doing the source nat of the packet
	NETWORK_CONNECTOR_SNAT_SIP_USE_INTERFACE NetworkConnectorSNATPoolType = 0
	// x-displayName: "Use Nat Pool"
	// Use explicit nat pool of IP's to nat source IP of the packet
	NETWORK_CONNECTOR_SNAT_SIP_USE_POOL NetworkConnectorSNATPoolType = 1
)

var NetworkConnectorSNATPoolType_name = map[int32]string{
	0: "NETWORK_CONNECTOR_SNAT_SIP_USE_INTERFACE",
	1: "NETWORK_CONNECTOR_SNAT_SIP_USE_POOL",
}
var NetworkConnectorSNATPoolType_value = map[string]int32{
	"NETWORK_CONNECTOR_SNAT_SIP_USE_INTERFACE": 0,
	"NETWORK_CONNECTOR_SNAT_SIP_USE_POOL":      1,
}

func (NetworkConnectorSNATPoolType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorTypes, []int{1}
}

// Network Connector Proxy Type
//
// x-displayName: "Network Connector Proxy Type"
// Type of Proxy to be used while connecting from one virtual network to another
type NetworkConnectorProxyType int32

const (
	// x-displayName: "No Proxy"
	// There is no proxy and only Snat is applied
	NETWORK_CONNECTOR_NO_PROXY NetworkConnectorProxyType = 0
	// x-displayName: "Dynamic Reverse Proxy"
	// VirtualHosts are configured in the inside network and traffic is attracted to these Vhosts. DNS query is performed in
	// the outside network to forward the packets to actual IPs
	NETWORK_CONNECTOR_DYNAMIC_REVERSE_PROXY NetworkConnectorProxyType = 1
	// x-displayName: "Forward Proxy"
	// Devices in the inside network perform DNS queries to know the actual IPs and all session are terminated to by Ver in
	// inside network and re-originated in outside network to original IPs
	NETWORK_CONNECTOR_FORWARD_PROXY NetworkConnectorProxyType = 2
)

var NetworkConnectorProxyType_name = map[int32]string{
	0: "NETWORK_CONNECTOR_NO_PROXY",
	1: "NETWORK_CONNECTOR_DYNAMIC_REVERSE_PROXY",
	2: "NETWORK_CONNECTOR_FORWARD_PROXY",
}
var NetworkConnectorProxyType_value = map[string]int32{
	"NETWORK_CONNECTOR_NO_PROXY":              0,
	"NETWORK_CONNECTOR_DYNAMIC_REVERSE_PROXY": 1,
	"NETWORK_CONNECTOR_FORWARD_PROXY":         2,
}

func (NetworkConnectorProxyType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorTypes, []int{2}
}

// SNAT configuration
//
// x-displayName: "SNAT Configuration"
// x-example: ""
// description
type SnatConnectorType struct {
	// Routing mode
	//
	// x-displayName: "Routing Mode"
	// x-required
	// Select how is the traffic sent to SNATed network
	//
	// Types that are valid to be assigned to RoutingChoice:
	//	*SnatConnectorType_DefaultGwSnat
	//	*SnatConnectorType_DynamicRouting
	RoutingChoice isSnatConnectorType_RoutingChoice `protobuf_oneof:"routing_choice"`
	// SNAT SIP Selection
	//
	// x-displayName: "SNAT Source IP Selection"
	// x-required
	// Select ip will be used for SNAT from SNATed Network
	//
	// Types that are valid to be assigned to PoolChoice:
	//	*SnatConnectorType_InterfaceIp
	//	*SnatConnectorType_SnatPool
	//	*SnatConnectorType_SnatPoolAllocator
	PoolChoice isSnatConnectorType_PoolChoice `protobuf_oneof:"pool_choice"`
}

func (m *SnatConnectorType) Reset()                    { *m = SnatConnectorType{} }
func (*SnatConnectorType) ProtoMessage()               {}
func (*SnatConnectorType) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{0} }

type isSnatConnectorType_RoutingChoice interface {
	isSnatConnectorType_RoutingChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isSnatConnectorType_PoolChoice interface {
	isSnatConnectorType_PoolChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type SnatConnectorType_DefaultGwSnat struct {
	DefaultGwSnat *ves_io_schema4.Empty `protobuf:"bytes,2,opt,name=default_gw_snat,json=defaultGwSnat,oneof"`
}
type SnatConnectorType_DynamicRouting struct {
	DynamicRouting *ves_io_schema4.Empty `protobuf:"bytes,3,opt,name=dynamic_routing,json=dynamicRouting,oneof"`
}
type SnatConnectorType_InterfaceIp struct {
	InterfaceIp *ves_io_schema4.Empty `protobuf:"bytes,5,opt,name=interface_ip,json=interfaceIp,oneof"`
}
type SnatConnectorType_SnatPool struct {
	SnatPool string `protobuf:"bytes,6,opt,name=snat_pool,json=snatPool,proto3,oneof"`
}
type SnatConnectorType_SnatPoolAllocator struct {
	SnatPoolAllocator *ves_io_schema_views.ObjectRefType `protobuf:"bytes,7,opt,name=snat_pool_allocator,json=snatPoolAllocator,oneof"`
}

func (*SnatConnectorType_DefaultGwSnat) isSnatConnectorType_RoutingChoice()  {}
func (*SnatConnectorType_DynamicRouting) isSnatConnectorType_RoutingChoice() {}
func (*SnatConnectorType_InterfaceIp) isSnatConnectorType_PoolChoice()       {}
func (*SnatConnectorType_SnatPool) isSnatConnectorType_PoolChoice()          {}
func (*SnatConnectorType_SnatPoolAllocator) isSnatConnectorType_PoolChoice() {}

func (m *SnatConnectorType) GetRoutingChoice() isSnatConnectorType_RoutingChoice {
	if m != nil {
		return m.RoutingChoice
	}
	return nil
}
func (m *SnatConnectorType) GetPoolChoice() isSnatConnectorType_PoolChoice {
	if m != nil {
		return m.PoolChoice
	}
	return nil
}

func (m *SnatConnectorType) GetDefaultGwSnat() *ves_io_schema4.Empty {
	if x, ok := m.GetRoutingChoice().(*SnatConnectorType_DefaultGwSnat); ok {
		return x.DefaultGwSnat
	}
	return nil
}

func (m *SnatConnectorType) GetDynamicRouting() *ves_io_schema4.Empty {
	if x, ok := m.GetRoutingChoice().(*SnatConnectorType_DynamicRouting); ok {
		return x.DynamicRouting
	}
	return nil
}

func (m *SnatConnectorType) GetInterfaceIp() *ves_io_schema4.Empty {
	if x, ok := m.GetPoolChoice().(*SnatConnectorType_InterfaceIp); ok {
		return x.InterfaceIp
	}
	return nil
}

func (m *SnatConnectorType) GetSnatPool() string {
	if x, ok := m.GetPoolChoice().(*SnatConnectorType_SnatPool); ok {
		return x.SnatPool
	}
	return ""
}

func (m *SnatConnectorType) GetSnatPoolAllocator() *ves_io_schema_views.ObjectRefType {
	if x, ok := m.GetPoolChoice().(*SnatConnectorType_SnatPoolAllocator); ok {
		return x.SnatPoolAllocator
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*SnatConnectorType) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _SnatConnectorType_OneofMarshaler, _SnatConnectorType_OneofUnmarshaler, _SnatConnectorType_OneofSizer, []interface{}{
		(*SnatConnectorType_DefaultGwSnat)(nil),
		(*SnatConnectorType_DynamicRouting)(nil),
		(*SnatConnectorType_InterfaceIp)(nil),
		(*SnatConnectorType_SnatPool)(nil),
		(*SnatConnectorType_SnatPoolAllocator)(nil),
	}
}

func _SnatConnectorType_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*SnatConnectorType)
	// routing_choice
	switch x := m.RoutingChoice.(type) {
	case *SnatConnectorType_DefaultGwSnat:
		_ = b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.DefaultGwSnat); err != nil {
			return err
		}
	case *SnatConnectorType_DynamicRouting:
		_ = b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.DynamicRouting); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("SnatConnectorType.RoutingChoice has unexpected type %T", x)
	}
	// pool_choice
	switch x := m.PoolChoice.(type) {
	case *SnatConnectorType_InterfaceIp:
		_ = b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.InterfaceIp); err != nil {
			return err
		}
	case *SnatConnectorType_SnatPool:
		_ = b.EncodeVarint(6<<3 | proto.WireBytes)
		_ = b.EncodeStringBytes(x.SnatPool)
	case *SnatConnectorType_SnatPoolAllocator:
		_ = b.EncodeVarint(7<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.SnatPoolAllocator); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("SnatConnectorType.PoolChoice has unexpected type %T", x)
	}
	return nil
}

func _SnatConnectorType_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*SnatConnectorType)
	switch tag {
	case 2: // routing_choice.default_gw_snat
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.RoutingChoice = &SnatConnectorType_DefaultGwSnat{msg}
		return true, err
	case 3: // routing_choice.dynamic_routing
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.RoutingChoice = &SnatConnectorType_DynamicRouting{msg}
		return true, err
	case 5: // pool_choice.interface_ip
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.PoolChoice = &SnatConnectorType_InterfaceIp{msg}
		return true, err
	case 6: // pool_choice.snat_pool
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.PoolChoice = &SnatConnectorType_SnatPool{x}
		return true, err
	case 7: // pool_choice.snat_pool_allocator
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema_views.ObjectRefType)
		err := b.DecodeMessage(msg)
		m.PoolChoice = &SnatConnectorType_SnatPoolAllocator{msg}
		return true, err
	default:
		return false, nil
	}
}

func _SnatConnectorType_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*SnatConnectorType)
	// routing_choice
	switch x := m.RoutingChoice.(type) {
	case *SnatConnectorType_DefaultGwSnat:
		s := proto.Size(x.DefaultGwSnat)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *SnatConnectorType_DynamicRouting:
		s := proto.Size(x.DynamicRouting)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	// pool_choice
	switch x := m.PoolChoice.(type) {
	case *SnatConnectorType_InterfaceIp:
		s := proto.Size(x.InterfaceIp)
		n += proto.SizeVarint(5<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *SnatConnectorType_SnatPool:
		n += proto.SizeVarint(6<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.SnatPool)))
		n += len(x.SnatPool)
	case *SnatConnectorType_SnatPoolAllocator:
		s := proto.Size(x.SnatPoolAllocator)
		n += proto.SizeVarint(7<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// Global SNAT Configuration
//
// x-displayName: "Global Network SNAT configuration"
// SNAT Configuration to connect to global network.
type GlobalSnatConnectorType struct {
	// Virtual Network
	//
	// x-displayName: "Global Virtual Network"
	// x-required
	// Select Virtual Network of Global Type
	GlobalVn *ves_io_schema_views.ObjectRefType `protobuf:"bytes,1,opt,name=global_vn,json=globalVn" json:"global_vn,omitempty"`
	// SNAT Configuration
	//
	// x-displayName: "SNAT Configuration"
	// SNAT configuration to connect to global network
	SnatConfig *SnatConnectorType `protobuf:"bytes,2,opt,name=snat_config,json=snatConfig" json:"snat_config,omitempty"`
}

func (m *GlobalSnatConnectorType) Reset()                    { *m = GlobalSnatConnectorType{} }
func (*GlobalSnatConnectorType) ProtoMessage()               {}
func (*GlobalSnatConnectorType) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{1} }

func (m *GlobalSnatConnectorType) GetGlobalVn() *ves_io_schema_views.ObjectRefType {
	if m != nil {
		return m.GlobalVn
	}
	return nil
}

func (m *GlobalSnatConnectorType) GetSnatConfig() *SnatConnectorType {
	if m != nil {
		return m.SnatConfig
	}
	return nil
}

// Dynamic Reverse Proxy
//
// x-displayName: "Dynamic Reverse Proxy"
// Global network reference for direct connection
type DynamicReverseProxyListType struct {
	// List of Dynamic reverse proxies
	//
	// x-displayName: "List of Dynamic Reverse Proxies"
	// Select dynamic reverse proxies
	Drps []*ves_io_schema_views.ObjectRefType `protobuf:"bytes,1,rep,name=drps" json:"drps,omitempty"`
}

func (m *DynamicReverseProxyListType) Reset()      { *m = DynamicReverseProxyListType{} }
func (*DynamicReverseProxyListType) ProtoMessage() {}
func (*DynamicReverseProxyListType) Descriptor() ([]byte, []int) {
	return fileDescriptorTypes, []int{2}
}

func (m *DynamicReverseProxyListType) GetDrps() []*ves_io_schema_views.ObjectRefType {
	if m != nil {
		return m.Drps
	}
	return nil
}

// Network Connector Specification
//
// x-displayName: "Specification"
// Specification of Network connector
type GlobalSpecType struct {
	// Network Connector Type
	//
	// x-displayName: "Network Connector Type"
	// x-required
	// Type of connector to use between inside virtual network and outside virtual network
	ConnectorType NetworkConnectorType `protobuf:"varint,1,opt,name=connector_type,json=connectorType,proto3,enum=ves.io.schema.network_connector.NetworkConnectorType" json:"connector_type,omitempty"`
	// Outside VN type
	//
	// x-displayName: "Outside Virtual Network Type"
	// x-required
	// Type of the outside network. The network can be well known virtual network like site local inside / site local/ public etc. If the  virtual network
	// is well known virtual network, the outside_network ref need not be present and will be auto derived. If virtual network
	// is not well known like per site virtual network outside_network reference need to be specified
	//
	// outside_network_type can be one of type VIRTUAL_NETWORK_SITE_LOCAL, VIRTUAL_NETWORK_SITE_LOCAL_INSIDE, VIRTUAL_NETWORK_PER_SITE, VIRTUAL_NETWORK_PUBLIC or VIRTUAL_NETWORK_GLOBAL
	OutsideNetworkType ves_io_schema3.VirtualNetworkType `protobuf:"varint,2,opt,name=outside_network_type,json=outsideNetworkType,proto3,enum=ves.io.schema.VirtualNetworkType" json:"outside_network_type,omitempty"`
	// Outside VN
	//
	// x-displayName: "Outside Virtual Network"
	// Reference to outside network. Reference is valid only when the network type is per site virtual network or
	// global virtual network. It is ignored for all other network types
	OutsideNetwork []*ves_io_schema4.ObjectRefType `protobuf:"bytes,3,rep,name=outside_network,json=outsideNetwork" json:"outside_network,omitempty"`
	// Inside VN Type
	//
	// x-displayName: "Inside Virtual Network Type"
	// x-required
	// Type of the inside network. The network can be well known virtual network like site local inside / site local. If the virtual network
	// is well known virtual network, the inside_network ref need not be present and will be auto derived. If virtual network
	// is not well known like per site virtual network inside_network reference need to be specified
	//
	// inside_network_type can be one of type VIRTUAL_NETWORK_SITE_LOCAL, VIRTUAL_NETWORK_SITE_LOCAL_INSIDE or VIRTUAL_NETWORK_PER_SITE
	// When inside_network_type is VIRTUAL_NETWORK_SITE_LOCAL outside_network_type can only be VIRTUAL_NETWORK_GLOBAL
	InsideNetworkType ves_io_schema3.VirtualNetworkType `protobuf:"varint,4,opt,name=inside_network_type,json=insideNetworkType,proto3,enum=ves.io.schema.VirtualNetworkType" json:"inside_network_type,omitempty"`
	// Inside VN
	//
	// x-displayName: "Inside Virtual Network"
	// Reference to inside network. Reference is valid only when the network type is per site virtual network or
	// global virtual network. It is ignored for all other network types. public virtual network is not allowed
	// as inside network
	InsideNetwork []*ves_io_schema4.ObjectRefType `protobuf:"bytes,5,rep,name=inside_network,json=insideNetwork" json:"inside_network,omitempty"`
	// Snat Pool Type
	//
	// x-displayName: "Snat Pool Type"
	// SNAT setting not valid when  network connector type is Dynamic Gateway without SNAT.
	// Type of Snat configuration to be used.
	SnatPoolType NetworkConnectorSNATPoolType `protobuf:"varint,6,opt,name=snat_pool_type,json=snatPoolType,proto3,enum=ves.io.schema.network_connector.NetworkConnectorSNATPoolType" json:"snat_pool_type,omitempty"`
	// Nat Pool
	//
	// x-displayName: "Nat Pool"
	// Nat pool is valid only if snat_pool_type is set to Use NAT Pool.
	// It is ignored if snat_pool_type is set to Use Interface IP.
	NatPool []*ves_io_schema3.Ipv4SubnetType `protobuf:"bytes,7,rep,name=nat_pool,json=natPool" json:"nat_pool,omitempty"`
	// Proxy Type
	//
	// x-displayName: "Proxy Type"
	// Forward proxy or dynamic reverse proxy for this connector
	// If network-connector type is NETWORK_CONNECTOR_TYPE_DEFAULT_GATEWAY_SNAT, then proxy-type can be
	//     - NETWORK_CONNECTOR_NO_PROXY
	//     - NETWORK_CONNECTOR_DYNAMIC_REVERSE_PROXY
	//     - NETWORK_CONNECTOR_FORWARD_PROXY
	// If network-connector type is NETWORK_CONNECTOR_TYPE_DYNAMIC_GATEWAY, then proxy-type must be NETWORK_CONNECTOR_NO_PROXY
	ProxyType NetworkConnectorProxyType `protobuf:"varint,8,opt,name=proxy_type,json=proxyType,proto3,enum=ves.io.schema.network_connector.NetworkConnectorProxyType" json:"proxy_type,omitempty"`
	// Dynamic Reverse Proxy
	//
	// x-displayName: "Dynamic Reverse Proxy"
	// Vhost to be used for dynamic reverse proxy configuration
	DynamicReverseProxy []*ves_io_schema4.ObjectRefType `protobuf:"bytes,9,rep,name=dynamic_reverse_proxy,json=dynamicReverseProxy" json:"dynamic_reverse_proxy,omitempty"`
	// Forward Proxy Configuration
	//
	// x-displayName: "Forward Proxy Configuration"
	// Configuration, applicable only for forward proxy, fine tunes the forward proxy behavior
	ForwardProxy *ves_io_schema4.ForwardProxyConfigType `protobuf:"bytes,10,opt,name=forward_proxy,json=forwardProxy" json:"forward_proxy,omitempty"`
}

func (m *GlobalSpecType) Reset()                    { *m = GlobalSpecType{} }
func (*GlobalSpecType) ProtoMessage()               {}
func (*GlobalSpecType) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{3} }

func (m *GlobalSpecType) GetConnectorType() NetworkConnectorType {
	if m != nil {
		return m.ConnectorType
	}
	return NETWORK_CONNECTOR_TYPE_DEFAULT_GATEWAY_SNAT
}

func (m *GlobalSpecType) GetOutsideNetworkType() ves_io_schema3.VirtualNetworkType {
	if m != nil {
		return m.OutsideNetworkType
	}
	return ves_io_schema3.VIRTUAL_NETWORK_SITE_LOCAL
}

func (m *GlobalSpecType) GetOutsideNetwork() []*ves_io_schema4.ObjectRefType {
	if m != nil {
		return m.OutsideNetwork
	}
	return nil
}

func (m *GlobalSpecType) GetInsideNetworkType() ves_io_schema3.VirtualNetworkType {
	if m != nil {
		return m.InsideNetworkType
	}
	return ves_io_schema3.VIRTUAL_NETWORK_SITE_LOCAL
}

func (m *GlobalSpecType) GetInsideNetwork() []*ves_io_schema4.ObjectRefType {
	if m != nil {
		return m.InsideNetwork
	}
	return nil
}

func (m *GlobalSpecType) GetSnatPoolType() NetworkConnectorSNATPoolType {
	if m != nil {
		return m.SnatPoolType
	}
	return NETWORK_CONNECTOR_SNAT_SIP_USE_INTERFACE
}

func (m *GlobalSpecType) GetNatPool() []*ves_io_schema3.Ipv4SubnetType {
	if m != nil {
		return m.NatPool
	}
	return nil
}

func (m *GlobalSpecType) GetProxyType() NetworkConnectorProxyType {
	if m != nil {
		return m.ProxyType
	}
	return NETWORK_CONNECTOR_NO_PROXY
}

func (m *GlobalSpecType) GetDynamicReverseProxy() []*ves_io_schema4.ObjectRefType {
	if m != nil {
		return m.DynamicReverseProxy
	}
	return nil
}

func (m *GlobalSpecType) GetForwardProxy() *ves_io_schema4.ForwardProxyConfigType {
	if m != nil {
		return m.ForwardProxy
	}
	return nil
}

// Create Network Connector
//
// x-displayName: "Create Network Connector"
// Network Connector is created by users in system namespace
type CreateSpecType struct {
	// Connector Choice
	//
	// x-displayName: "Select Network Connector Type"
	// x-required
	// Select the networks and method in which they are connected.
	//
	// Types that are valid to be assigned to ConnectorChoice:
	//	*CreateSpecType_SliToSloSnat
	//	*CreateSpecType_SliToSloDr
	//	*CreateSpecType_SliToGlobalDr
	//	*CreateSpecType_SliToGlobalSnat
	//	*CreateSpecType_SloToGlobalDr
	//	*CreateSpecType_SloToGlobalSnat
	ConnectorChoice isCreateSpecType_ConnectorChoice `protobuf_oneof:"connector_choice"`
	// Select Forward Proxy
	//
	// x-displayName: "Select Forward Proxy"
	// x-required
	// Select to enable forward proxy
	//
	// Types that are valid to be assigned to ForwardProxyChoice:
	//	*CreateSpecType_DisableForwardProxy
	//	*CreateSpecType_EnableForwardProxy
	ForwardProxyChoice isCreateSpecType_ForwardProxyChoice `protobuf_oneof:"forward_proxy_choice"`
}

func (m *CreateSpecType) Reset()                    { *m = CreateSpecType{} }
func (*CreateSpecType) ProtoMessage()               {}
func (*CreateSpecType) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{4} }

type isCreateSpecType_ConnectorChoice interface {
	isCreateSpecType_ConnectorChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isCreateSpecType_ForwardProxyChoice interface {
	isCreateSpecType_ForwardProxyChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type CreateSpecType_SliToSloSnat struct {
	SliToSloSnat *SnatConnectorType `protobuf:"bytes,17,opt,name=sli_to_slo_snat,json=sliToSloSnat,oneof"`
}
type CreateSpecType_SliToSloDr struct {
	SliToSloDr *ves_io_schema4.Empty `protobuf:"bytes,18,opt,name=sli_to_slo_dr,json=sliToSloDr,oneof"`
}
type CreateSpecType_SliToGlobalDr struct {
	SliToGlobalDr *ves_io_schema_views.GlobalConnectorType `protobuf:"bytes,19,opt,name=sli_to_global_dr,json=sliToGlobalDr,oneof"`
}
type CreateSpecType_SliToGlobalSnat struct {
	SliToGlobalSnat *GlobalSnatConnectorType `protobuf:"bytes,20,opt,name=sli_to_global_snat,json=sliToGlobalSnat,oneof"`
}
type CreateSpecType_SloToGlobalDr struct {
	SloToGlobalDr *ves_io_schema_views.GlobalConnectorType `protobuf:"bytes,21,opt,name=slo_to_global_dr,json=sloToGlobalDr,oneof"`
}
type CreateSpecType_SloToGlobalSnat struct {
	SloToGlobalSnat *GlobalSnatConnectorType `protobuf:"bytes,22,opt,name=slo_to_global_snat,json=sloToGlobalSnat,oneof"`
}
type CreateSpecType_DisableForwardProxy struct {
	DisableForwardProxy *ves_io_schema4.Empty `protobuf:"bytes,24,opt,name=disable_forward_proxy,json=disableForwardProxy,oneof"`
}
type CreateSpecType_EnableForwardProxy struct {
	EnableForwardProxy *ves_io_schema4.ForwardProxyConfigType `protobuf:"bytes,25,opt,name=enable_forward_proxy,json=enableForwardProxy,oneof"`
}

func (*CreateSpecType_SliToSloSnat) isCreateSpecType_ConnectorChoice()           {}
func (*CreateSpecType_SliToSloDr) isCreateSpecType_ConnectorChoice()             {}
func (*CreateSpecType_SliToGlobalDr) isCreateSpecType_ConnectorChoice()          {}
func (*CreateSpecType_SliToGlobalSnat) isCreateSpecType_ConnectorChoice()        {}
func (*CreateSpecType_SloToGlobalDr) isCreateSpecType_ConnectorChoice()          {}
func (*CreateSpecType_SloToGlobalSnat) isCreateSpecType_ConnectorChoice()        {}
func (*CreateSpecType_DisableForwardProxy) isCreateSpecType_ForwardProxyChoice() {}
func (*CreateSpecType_EnableForwardProxy) isCreateSpecType_ForwardProxyChoice()  {}

func (m *CreateSpecType) GetConnectorChoice() isCreateSpecType_ConnectorChoice {
	if m != nil {
		return m.ConnectorChoice
	}
	return nil
}
func (m *CreateSpecType) GetForwardProxyChoice() isCreateSpecType_ForwardProxyChoice {
	if m != nil {
		return m.ForwardProxyChoice
	}
	return nil
}

func (m *CreateSpecType) GetSliToSloSnat() *SnatConnectorType {
	if x, ok := m.GetConnectorChoice().(*CreateSpecType_SliToSloSnat); ok {
		return x.SliToSloSnat
	}
	return nil
}

func (m *CreateSpecType) GetSliToSloDr() *ves_io_schema4.Empty {
	if x, ok := m.GetConnectorChoice().(*CreateSpecType_SliToSloDr); ok {
		return x.SliToSloDr
	}
	return nil
}

func (m *CreateSpecType) GetSliToGlobalDr() *ves_io_schema_views.GlobalConnectorType {
	if x, ok := m.GetConnectorChoice().(*CreateSpecType_SliToGlobalDr); ok {
		return x.SliToGlobalDr
	}
	return nil
}

func (m *CreateSpecType) GetSliToGlobalSnat() *GlobalSnatConnectorType {
	if x, ok := m.GetConnectorChoice().(*CreateSpecType_SliToGlobalSnat); ok {
		return x.SliToGlobalSnat
	}
	return nil
}

func (m *CreateSpecType) GetSloToGlobalDr() *ves_io_schema_views.GlobalConnectorType {
	if x, ok := m.GetConnectorChoice().(*CreateSpecType_SloToGlobalDr); ok {
		return x.SloToGlobalDr
	}
	return nil
}

func (m *CreateSpecType) GetSloToGlobalSnat() *GlobalSnatConnectorType {
	if x, ok := m.GetConnectorChoice().(*CreateSpecType_SloToGlobalSnat); ok {
		return x.SloToGlobalSnat
	}
	return nil
}

func (m *CreateSpecType) GetDisableForwardProxy() *ves_io_schema4.Empty {
	if x, ok := m.GetForwardProxyChoice().(*CreateSpecType_DisableForwardProxy); ok {
		return x.DisableForwardProxy
	}
	return nil
}

func (m *CreateSpecType) GetEnableForwardProxy() *ves_io_schema4.ForwardProxyConfigType {
	if x, ok := m.GetForwardProxyChoice().(*CreateSpecType_EnableForwardProxy); ok {
		return x.EnableForwardProxy
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*CreateSpecType) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _CreateSpecType_OneofMarshaler, _CreateSpecType_OneofUnmarshaler, _CreateSpecType_OneofSizer, []interface{}{
		(*CreateSpecType_SliToSloSnat)(nil),
		(*CreateSpecType_SliToSloDr)(nil),
		(*CreateSpecType_SliToGlobalDr)(nil),
		(*CreateSpecType_SliToGlobalSnat)(nil),
		(*CreateSpecType_SloToGlobalDr)(nil),
		(*CreateSpecType_SloToGlobalSnat)(nil),
		(*CreateSpecType_DisableForwardProxy)(nil),
		(*CreateSpecType_EnableForwardProxy)(nil),
	}
}

func _CreateSpecType_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*CreateSpecType)
	// connector_choice
	switch x := m.ConnectorChoice.(type) {
	case *CreateSpecType_SliToSloSnat:
		_ = b.EncodeVarint(17<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.SliToSloSnat); err != nil {
			return err
		}
	case *CreateSpecType_SliToSloDr:
		_ = b.EncodeVarint(18<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.SliToSloDr); err != nil {
			return err
		}
	case *CreateSpecType_SliToGlobalDr:
		_ = b.EncodeVarint(19<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.SliToGlobalDr); err != nil {
			return err
		}
	case *CreateSpecType_SliToGlobalSnat:
		_ = b.EncodeVarint(20<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.SliToGlobalSnat); err != nil {
			return err
		}
	case *CreateSpecType_SloToGlobalDr:
		_ = b.EncodeVarint(21<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.SloToGlobalDr); err != nil {
			return err
		}
	case *CreateSpecType_SloToGlobalSnat:
		_ = b.EncodeVarint(22<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.SloToGlobalSnat); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("CreateSpecType.ConnectorChoice has unexpected type %T", x)
	}
	// forward_proxy_choice
	switch x := m.ForwardProxyChoice.(type) {
	case *CreateSpecType_DisableForwardProxy:
		_ = b.EncodeVarint(24<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.DisableForwardProxy); err != nil {
			return err
		}
	case *CreateSpecType_EnableForwardProxy:
		_ = b.EncodeVarint(25<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.EnableForwardProxy); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("CreateSpecType.ForwardProxyChoice has unexpected type %T", x)
	}
	return nil
}

func _CreateSpecType_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*CreateSpecType)
	switch tag {
	case 17: // connector_choice.sli_to_slo_snat
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(SnatConnectorType)
		err := b.DecodeMessage(msg)
		m.ConnectorChoice = &CreateSpecType_SliToSloSnat{msg}
		return true, err
	case 18: // connector_choice.sli_to_slo_dr
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.ConnectorChoice = &CreateSpecType_SliToSloDr{msg}
		return true, err
	case 19: // connector_choice.sli_to_global_dr
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema_views.GlobalConnectorType)
		err := b.DecodeMessage(msg)
		m.ConnectorChoice = &CreateSpecType_SliToGlobalDr{msg}
		return true, err
	case 20: // connector_choice.sli_to_global_snat
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(GlobalSnatConnectorType)
		err := b.DecodeMessage(msg)
		m.ConnectorChoice = &CreateSpecType_SliToGlobalSnat{msg}
		return true, err
	case 21: // connector_choice.slo_to_global_dr
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema_views.GlobalConnectorType)
		err := b.DecodeMessage(msg)
		m.ConnectorChoice = &CreateSpecType_SloToGlobalDr{msg}
		return true, err
	case 22: // connector_choice.slo_to_global_snat
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(GlobalSnatConnectorType)
		err := b.DecodeMessage(msg)
		m.ConnectorChoice = &CreateSpecType_SloToGlobalSnat{msg}
		return true, err
	case 24: // forward_proxy_choice.disable_forward_proxy
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.ForwardProxyChoice = &CreateSpecType_DisableForwardProxy{msg}
		return true, err
	case 25: // forward_proxy_choice.enable_forward_proxy
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.ForwardProxyConfigType)
		err := b.DecodeMessage(msg)
		m.ForwardProxyChoice = &CreateSpecType_EnableForwardProxy{msg}
		return true, err
	default:
		return false, nil
	}
}

func _CreateSpecType_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*CreateSpecType)
	// connector_choice
	switch x := m.ConnectorChoice.(type) {
	case *CreateSpecType_SliToSloSnat:
		s := proto.Size(x.SliToSloSnat)
		n += proto.SizeVarint(17<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *CreateSpecType_SliToSloDr:
		s := proto.Size(x.SliToSloDr)
		n += proto.SizeVarint(18<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *CreateSpecType_SliToGlobalDr:
		s := proto.Size(x.SliToGlobalDr)
		n += proto.SizeVarint(19<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *CreateSpecType_SliToGlobalSnat:
		s := proto.Size(x.SliToGlobalSnat)
		n += proto.SizeVarint(20<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *CreateSpecType_SloToGlobalDr:
		s := proto.Size(x.SloToGlobalDr)
		n += proto.SizeVarint(21<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *CreateSpecType_SloToGlobalSnat:
		s := proto.Size(x.SloToGlobalSnat)
		n += proto.SizeVarint(22<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	// forward_proxy_choice
	switch x := m.ForwardProxyChoice.(type) {
	case *CreateSpecType_DisableForwardProxy:
		s := proto.Size(x.DisableForwardProxy)
		n += proto.SizeVarint(24<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *CreateSpecType_EnableForwardProxy:
		s := proto.Size(x.EnableForwardProxy)
		n += proto.SizeVarint(25<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// Replace Network Connector
//
// x-displayName: "Replace Network Connector"
// Replace Network Connector will replace the contains of given object
type ReplaceSpecType struct {
	// Connector Choice
	//
	// x-displayName: "Select Network Connector Type"
	// x-required
	// Select the networks and method in which they are connected.
	//
	// Types that are valid to be assigned to ConnectorChoice:
	//	*ReplaceSpecType_SliToSloSnat
	//	*ReplaceSpecType_SliToSloDr
	//	*ReplaceSpecType_SliToGlobalDr
	//	*ReplaceSpecType_SliToGlobalSnat
	//	*ReplaceSpecType_SloToGlobalDr
	//	*ReplaceSpecType_SloToGlobalSnat
	ConnectorChoice isReplaceSpecType_ConnectorChoice `protobuf_oneof:"connector_choice"`
	// Select Forward Proxy
	//
	// x-displayName: "Select Forward Proxy"
	// x-required
	// Select to enable forward proxy
	//
	// Types that are valid to be assigned to ForwardProxyChoice:
	//	*ReplaceSpecType_DisableForwardProxy
	//	*ReplaceSpecType_EnableForwardProxy
	ForwardProxyChoice isReplaceSpecType_ForwardProxyChoice `protobuf_oneof:"forward_proxy_choice"`
}

func (m *ReplaceSpecType) Reset()                    { *m = ReplaceSpecType{} }
func (*ReplaceSpecType) ProtoMessage()               {}
func (*ReplaceSpecType) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{5} }

type isReplaceSpecType_ConnectorChoice interface {
	isReplaceSpecType_ConnectorChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isReplaceSpecType_ForwardProxyChoice interface {
	isReplaceSpecType_ForwardProxyChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type ReplaceSpecType_SliToSloSnat struct {
	SliToSloSnat *SnatConnectorType `protobuf:"bytes,17,opt,name=sli_to_slo_snat,json=sliToSloSnat,oneof"`
}
type ReplaceSpecType_SliToSloDr struct {
	SliToSloDr *ves_io_schema4.Empty `protobuf:"bytes,18,opt,name=sli_to_slo_dr,json=sliToSloDr,oneof"`
}
type ReplaceSpecType_SliToGlobalDr struct {
	SliToGlobalDr *ves_io_schema_views.GlobalConnectorType `protobuf:"bytes,19,opt,name=sli_to_global_dr,json=sliToGlobalDr,oneof"`
}
type ReplaceSpecType_SliToGlobalSnat struct {
	SliToGlobalSnat *GlobalSnatConnectorType `protobuf:"bytes,20,opt,name=sli_to_global_snat,json=sliToGlobalSnat,oneof"`
}
type ReplaceSpecType_SloToGlobalDr struct {
	SloToGlobalDr *ves_io_schema_views.GlobalConnectorType `protobuf:"bytes,21,opt,name=slo_to_global_dr,json=sloToGlobalDr,oneof"`
}
type ReplaceSpecType_SloToGlobalSnat struct {
	SloToGlobalSnat *GlobalSnatConnectorType `protobuf:"bytes,22,opt,name=slo_to_global_snat,json=sloToGlobalSnat,oneof"`
}
type ReplaceSpecType_DisableForwardProxy struct {
	DisableForwardProxy *ves_io_schema4.Empty `protobuf:"bytes,24,opt,name=disable_forward_proxy,json=disableForwardProxy,oneof"`
}
type ReplaceSpecType_EnableForwardProxy struct {
	EnableForwardProxy *ves_io_schema4.ForwardProxyConfigType `protobuf:"bytes,25,opt,name=enable_forward_proxy,json=enableForwardProxy,oneof"`
}

func (*ReplaceSpecType_SliToSloSnat) isReplaceSpecType_ConnectorChoice()           {}
func (*ReplaceSpecType_SliToSloDr) isReplaceSpecType_ConnectorChoice()             {}
func (*ReplaceSpecType_SliToGlobalDr) isReplaceSpecType_ConnectorChoice()          {}
func (*ReplaceSpecType_SliToGlobalSnat) isReplaceSpecType_ConnectorChoice()        {}
func (*ReplaceSpecType_SloToGlobalDr) isReplaceSpecType_ConnectorChoice()          {}
func (*ReplaceSpecType_SloToGlobalSnat) isReplaceSpecType_ConnectorChoice()        {}
func (*ReplaceSpecType_DisableForwardProxy) isReplaceSpecType_ForwardProxyChoice() {}
func (*ReplaceSpecType_EnableForwardProxy) isReplaceSpecType_ForwardProxyChoice()  {}

func (m *ReplaceSpecType) GetConnectorChoice() isReplaceSpecType_ConnectorChoice {
	if m != nil {
		return m.ConnectorChoice
	}
	return nil
}
func (m *ReplaceSpecType) GetForwardProxyChoice() isReplaceSpecType_ForwardProxyChoice {
	if m != nil {
		return m.ForwardProxyChoice
	}
	return nil
}

func (m *ReplaceSpecType) GetSliToSloSnat() *SnatConnectorType {
	if x, ok := m.GetConnectorChoice().(*ReplaceSpecType_SliToSloSnat); ok {
		return x.SliToSloSnat
	}
	return nil
}

func (m *ReplaceSpecType) GetSliToSloDr() *ves_io_schema4.Empty {
	if x, ok := m.GetConnectorChoice().(*ReplaceSpecType_SliToSloDr); ok {
		return x.SliToSloDr
	}
	return nil
}

func (m *ReplaceSpecType) GetSliToGlobalDr() *ves_io_schema_views.GlobalConnectorType {
	if x, ok := m.GetConnectorChoice().(*ReplaceSpecType_SliToGlobalDr); ok {
		return x.SliToGlobalDr
	}
	return nil
}

func (m *ReplaceSpecType) GetSliToGlobalSnat() *GlobalSnatConnectorType {
	if x, ok := m.GetConnectorChoice().(*ReplaceSpecType_SliToGlobalSnat); ok {
		return x.SliToGlobalSnat
	}
	return nil
}

func (m *ReplaceSpecType) GetSloToGlobalDr() *ves_io_schema_views.GlobalConnectorType {
	if x, ok := m.GetConnectorChoice().(*ReplaceSpecType_SloToGlobalDr); ok {
		return x.SloToGlobalDr
	}
	return nil
}

func (m *ReplaceSpecType) GetSloToGlobalSnat() *GlobalSnatConnectorType {
	if x, ok := m.GetConnectorChoice().(*ReplaceSpecType_SloToGlobalSnat); ok {
		return x.SloToGlobalSnat
	}
	return nil
}

func (m *ReplaceSpecType) GetDisableForwardProxy() *ves_io_schema4.Empty {
	if x, ok := m.GetForwardProxyChoice().(*ReplaceSpecType_DisableForwardProxy); ok {
		return x.DisableForwardProxy
	}
	return nil
}

func (m *ReplaceSpecType) GetEnableForwardProxy() *ves_io_schema4.ForwardProxyConfigType {
	if x, ok := m.GetForwardProxyChoice().(*ReplaceSpecType_EnableForwardProxy); ok {
		return x.EnableForwardProxy
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*ReplaceSpecType) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _ReplaceSpecType_OneofMarshaler, _ReplaceSpecType_OneofUnmarshaler, _ReplaceSpecType_OneofSizer, []interface{}{
		(*ReplaceSpecType_SliToSloSnat)(nil),
		(*ReplaceSpecType_SliToSloDr)(nil),
		(*ReplaceSpecType_SliToGlobalDr)(nil),
		(*ReplaceSpecType_SliToGlobalSnat)(nil),
		(*ReplaceSpecType_SloToGlobalDr)(nil),
		(*ReplaceSpecType_SloToGlobalSnat)(nil),
		(*ReplaceSpecType_DisableForwardProxy)(nil),
		(*ReplaceSpecType_EnableForwardProxy)(nil),
	}
}

func _ReplaceSpecType_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*ReplaceSpecType)
	// connector_choice
	switch x := m.ConnectorChoice.(type) {
	case *ReplaceSpecType_SliToSloSnat:
		_ = b.EncodeVarint(17<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.SliToSloSnat); err != nil {
			return err
		}
	case *ReplaceSpecType_SliToSloDr:
		_ = b.EncodeVarint(18<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.SliToSloDr); err != nil {
			return err
		}
	case *ReplaceSpecType_SliToGlobalDr:
		_ = b.EncodeVarint(19<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.SliToGlobalDr); err != nil {
			return err
		}
	case *ReplaceSpecType_SliToGlobalSnat:
		_ = b.EncodeVarint(20<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.SliToGlobalSnat); err != nil {
			return err
		}
	case *ReplaceSpecType_SloToGlobalDr:
		_ = b.EncodeVarint(21<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.SloToGlobalDr); err != nil {
			return err
		}
	case *ReplaceSpecType_SloToGlobalSnat:
		_ = b.EncodeVarint(22<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.SloToGlobalSnat); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("ReplaceSpecType.ConnectorChoice has unexpected type %T", x)
	}
	// forward_proxy_choice
	switch x := m.ForwardProxyChoice.(type) {
	case *ReplaceSpecType_DisableForwardProxy:
		_ = b.EncodeVarint(24<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.DisableForwardProxy); err != nil {
			return err
		}
	case *ReplaceSpecType_EnableForwardProxy:
		_ = b.EncodeVarint(25<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.EnableForwardProxy); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("ReplaceSpecType.ForwardProxyChoice has unexpected type %T", x)
	}
	return nil
}

func _ReplaceSpecType_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*ReplaceSpecType)
	switch tag {
	case 17: // connector_choice.sli_to_slo_snat
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(SnatConnectorType)
		err := b.DecodeMessage(msg)
		m.ConnectorChoice = &ReplaceSpecType_SliToSloSnat{msg}
		return true, err
	case 18: // connector_choice.sli_to_slo_dr
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.ConnectorChoice = &ReplaceSpecType_SliToSloDr{msg}
		return true, err
	case 19: // connector_choice.sli_to_global_dr
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema_views.GlobalConnectorType)
		err := b.DecodeMessage(msg)
		m.ConnectorChoice = &ReplaceSpecType_SliToGlobalDr{msg}
		return true, err
	case 20: // connector_choice.sli_to_global_snat
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(GlobalSnatConnectorType)
		err := b.DecodeMessage(msg)
		m.ConnectorChoice = &ReplaceSpecType_SliToGlobalSnat{msg}
		return true, err
	case 21: // connector_choice.slo_to_global_dr
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema_views.GlobalConnectorType)
		err := b.DecodeMessage(msg)
		m.ConnectorChoice = &ReplaceSpecType_SloToGlobalDr{msg}
		return true, err
	case 22: // connector_choice.slo_to_global_snat
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(GlobalSnatConnectorType)
		err := b.DecodeMessage(msg)
		m.ConnectorChoice = &ReplaceSpecType_SloToGlobalSnat{msg}
		return true, err
	case 24: // forward_proxy_choice.disable_forward_proxy
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.ForwardProxyChoice = &ReplaceSpecType_DisableForwardProxy{msg}
		return true, err
	case 25: // forward_proxy_choice.enable_forward_proxy
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.ForwardProxyConfigType)
		err := b.DecodeMessage(msg)
		m.ForwardProxyChoice = &ReplaceSpecType_EnableForwardProxy{msg}
		return true, err
	default:
		return false, nil
	}
}

func _ReplaceSpecType_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*ReplaceSpecType)
	// connector_choice
	switch x := m.ConnectorChoice.(type) {
	case *ReplaceSpecType_SliToSloSnat:
		s := proto.Size(x.SliToSloSnat)
		n += proto.SizeVarint(17<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ReplaceSpecType_SliToSloDr:
		s := proto.Size(x.SliToSloDr)
		n += proto.SizeVarint(18<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ReplaceSpecType_SliToGlobalDr:
		s := proto.Size(x.SliToGlobalDr)
		n += proto.SizeVarint(19<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ReplaceSpecType_SliToGlobalSnat:
		s := proto.Size(x.SliToGlobalSnat)
		n += proto.SizeVarint(20<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ReplaceSpecType_SloToGlobalDr:
		s := proto.Size(x.SloToGlobalDr)
		n += proto.SizeVarint(21<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ReplaceSpecType_SloToGlobalSnat:
		s := proto.Size(x.SloToGlobalSnat)
		n += proto.SizeVarint(22<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	// forward_proxy_choice
	switch x := m.ForwardProxyChoice.(type) {
	case *ReplaceSpecType_DisableForwardProxy:
		s := proto.Size(x.DisableForwardProxy)
		n += proto.SizeVarint(24<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ReplaceSpecType_EnableForwardProxy:
		s := proto.Size(x.EnableForwardProxy)
		n += proto.SizeVarint(25<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// Get Network Connector
//
// x-displayName: "Get Network Connector"
// Get Network Connector in system namespace
type GetSpecType struct {
	// Connector Choice
	//
	// x-displayName: "Select Network Connector Type"
	// x-required
	// Select the networks and method in which they are connected.
	//
	// Types that are valid to be assigned to ConnectorChoice:
	//	*GetSpecType_SliToSloSnat
	//	*GetSpecType_SliToSloDr
	//	*GetSpecType_SliToGlobalDr
	//	*GetSpecType_SliToGlobalSnat
	//	*GetSpecType_SloToGlobalDr
	//	*GetSpecType_SloToGlobalSnat
	ConnectorChoice isGetSpecType_ConnectorChoice `protobuf_oneof:"connector_choice"`
	// Select Forward Proxy
	//
	// x-displayName: "Select Forward Proxy"
	// x-required
	// Select to enable forward proxy
	//
	// Types that are valid to be assigned to ForwardProxyChoice:
	//	*GetSpecType_DisableForwardProxy
	//	*GetSpecType_EnableForwardProxy
	ForwardProxyChoice isGetSpecType_ForwardProxyChoice `protobuf_oneof:"forward_proxy_choice"`
}

func (m *GetSpecType) Reset()                    { *m = GetSpecType{} }
func (*GetSpecType) ProtoMessage()               {}
func (*GetSpecType) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{6} }

type isGetSpecType_ConnectorChoice interface {
	isGetSpecType_ConnectorChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isGetSpecType_ForwardProxyChoice interface {
	isGetSpecType_ForwardProxyChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type GetSpecType_SliToSloSnat struct {
	SliToSloSnat *SnatConnectorType `protobuf:"bytes,17,opt,name=sli_to_slo_snat,json=sliToSloSnat,oneof"`
}
type GetSpecType_SliToSloDr struct {
	SliToSloDr *ves_io_schema4.Empty `protobuf:"bytes,18,opt,name=sli_to_slo_dr,json=sliToSloDr,oneof"`
}
type GetSpecType_SliToGlobalDr struct {
	SliToGlobalDr *ves_io_schema_views.GlobalConnectorType `protobuf:"bytes,19,opt,name=sli_to_global_dr,json=sliToGlobalDr,oneof"`
}
type GetSpecType_SliToGlobalSnat struct {
	SliToGlobalSnat *GlobalSnatConnectorType `protobuf:"bytes,20,opt,name=sli_to_global_snat,json=sliToGlobalSnat,oneof"`
}
type GetSpecType_SloToGlobalDr struct {
	SloToGlobalDr *ves_io_schema_views.GlobalConnectorType `protobuf:"bytes,21,opt,name=slo_to_global_dr,json=sloToGlobalDr,oneof"`
}
type GetSpecType_SloToGlobalSnat struct {
	SloToGlobalSnat *GlobalSnatConnectorType `protobuf:"bytes,22,opt,name=slo_to_global_snat,json=sloToGlobalSnat,oneof"`
}
type GetSpecType_DisableForwardProxy struct {
	DisableForwardProxy *ves_io_schema4.Empty `protobuf:"bytes,24,opt,name=disable_forward_proxy,json=disableForwardProxy,oneof"`
}
type GetSpecType_EnableForwardProxy struct {
	EnableForwardProxy *ves_io_schema4.ForwardProxyConfigType `protobuf:"bytes,25,opt,name=enable_forward_proxy,json=enableForwardProxy,oneof"`
}

func (*GetSpecType_SliToSloSnat) isGetSpecType_ConnectorChoice()           {}
func (*GetSpecType_SliToSloDr) isGetSpecType_ConnectorChoice()             {}
func (*GetSpecType_SliToGlobalDr) isGetSpecType_ConnectorChoice()          {}
func (*GetSpecType_SliToGlobalSnat) isGetSpecType_ConnectorChoice()        {}
func (*GetSpecType_SloToGlobalDr) isGetSpecType_ConnectorChoice()          {}
func (*GetSpecType_SloToGlobalSnat) isGetSpecType_ConnectorChoice()        {}
func (*GetSpecType_DisableForwardProxy) isGetSpecType_ForwardProxyChoice() {}
func (*GetSpecType_EnableForwardProxy) isGetSpecType_ForwardProxyChoice()  {}

func (m *GetSpecType) GetConnectorChoice() isGetSpecType_ConnectorChoice {
	if m != nil {
		return m.ConnectorChoice
	}
	return nil
}
func (m *GetSpecType) GetForwardProxyChoice() isGetSpecType_ForwardProxyChoice {
	if m != nil {
		return m.ForwardProxyChoice
	}
	return nil
}

func (m *GetSpecType) GetSliToSloSnat() *SnatConnectorType {
	if x, ok := m.GetConnectorChoice().(*GetSpecType_SliToSloSnat); ok {
		return x.SliToSloSnat
	}
	return nil
}

func (m *GetSpecType) GetSliToSloDr() *ves_io_schema4.Empty {
	if x, ok := m.GetConnectorChoice().(*GetSpecType_SliToSloDr); ok {
		return x.SliToSloDr
	}
	return nil
}

func (m *GetSpecType) GetSliToGlobalDr() *ves_io_schema_views.GlobalConnectorType {
	if x, ok := m.GetConnectorChoice().(*GetSpecType_SliToGlobalDr); ok {
		return x.SliToGlobalDr
	}
	return nil
}

func (m *GetSpecType) GetSliToGlobalSnat() *GlobalSnatConnectorType {
	if x, ok := m.GetConnectorChoice().(*GetSpecType_SliToGlobalSnat); ok {
		return x.SliToGlobalSnat
	}
	return nil
}

func (m *GetSpecType) GetSloToGlobalDr() *ves_io_schema_views.GlobalConnectorType {
	if x, ok := m.GetConnectorChoice().(*GetSpecType_SloToGlobalDr); ok {
		return x.SloToGlobalDr
	}
	return nil
}

func (m *GetSpecType) GetSloToGlobalSnat() *GlobalSnatConnectorType {
	if x, ok := m.GetConnectorChoice().(*GetSpecType_SloToGlobalSnat); ok {
		return x.SloToGlobalSnat
	}
	return nil
}

func (m *GetSpecType) GetDisableForwardProxy() *ves_io_schema4.Empty {
	if x, ok := m.GetForwardProxyChoice().(*GetSpecType_DisableForwardProxy); ok {
		return x.DisableForwardProxy
	}
	return nil
}

func (m *GetSpecType) GetEnableForwardProxy() *ves_io_schema4.ForwardProxyConfigType {
	if x, ok := m.GetForwardProxyChoice().(*GetSpecType_EnableForwardProxy); ok {
		return x.EnableForwardProxy
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*GetSpecType) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _GetSpecType_OneofMarshaler, _GetSpecType_OneofUnmarshaler, _GetSpecType_OneofSizer, []interface{}{
		(*GetSpecType_SliToSloSnat)(nil),
		(*GetSpecType_SliToSloDr)(nil),
		(*GetSpecType_SliToGlobalDr)(nil),
		(*GetSpecType_SliToGlobalSnat)(nil),
		(*GetSpecType_SloToGlobalDr)(nil),
		(*GetSpecType_SloToGlobalSnat)(nil),
		(*GetSpecType_DisableForwardProxy)(nil),
		(*GetSpecType_EnableForwardProxy)(nil),
	}
}

func _GetSpecType_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*GetSpecType)
	// connector_choice
	switch x := m.ConnectorChoice.(type) {
	case *GetSpecType_SliToSloSnat:
		_ = b.EncodeVarint(17<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.SliToSloSnat); err != nil {
			return err
		}
	case *GetSpecType_SliToSloDr:
		_ = b.EncodeVarint(18<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.SliToSloDr); err != nil {
			return err
		}
	case *GetSpecType_SliToGlobalDr:
		_ = b.EncodeVarint(19<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.SliToGlobalDr); err != nil {
			return err
		}
	case *GetSpecType_SliToGlobalSnat:
		_ = b.EncodeVarint(20<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.SliToGlobalSnat); err != nil {
			return err
		}
	case *GetSpecType_SloToGlobalDr:
		_ = b.EncodeVarint(21<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.SloToGlobalDr); err != nil {
			return err
		}
	case *GetSpecType_SloToGlobalSnat:
		_ = b.EncodeVarint(22<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.SloToGlobalSnat); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("GetSpecType.ConnectorChoice has unexpected type %T", x)
	}
	// forward_proxy_choice
	switch x := m.ForwardProxyChoice.(type) {
	case *GetSpecType_DisableForwardProxy:
		_ = b.EncodeVarint(24<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.DisableForwardProxy); err != nil {
			return err
		}
	case *GetSpecType_EnableForwardProxy:
		_ = b.EncodeVarint(25<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.EnableForwardProxy); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("GetSpecType.ForwardProxyChoice has unexpected type %T", x)
	}
	return nil
}

func _GetSpecType_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*GetSpecType)
	switch tag {
	case 17: // connector_choice.sli_to_slo_snat
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(SnatConnectorType)
		err := b.DecodeMessage(msg)
		m.ConnectorChoice = &GetSpecType_SliToSloSnat{msg}
		return true, err
	case 18: // connector_choice.sli_to_slo_dr
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.ConnectorChoice = &GetSpecType_SliToSloDr{msg}
		return true, err
	case 19: // connector_choice.sli_to_global_dr
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema_views.GlobalConnectorType)
		err := b.DecodeMessage(msg)
		m.ConnectorChoice = &GetSpecType_SliToGlobalDr{msg}
		return true, err
	case 20: // connector_choice.sli_to_global_snat
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(GlobalSnatConnectorType)
		err := b.DecodeMessage(msg)
		m.ConnectorChoice = &GetSpecType_SliToGlobalSnat{msg}
		return true, err
	case 21: // connector_choice.slo_to_global_dr
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema_views.GlobalConnectorType)
		err := b.DecodeMessage(msg)
		m.ConnectorChoice = &GetSpecType_SloToGlobalDr{msg}
		return true, err
	case 22: // connector_choice.slo_to_global_snat
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(GlobalSnatConnectorType)
		err := b.DecodeMessage(msg)
		m.ConnectorChoice = &GetSpecType_SloToGlobalSnat{msg}
		return true, err
	case 24: // forward_proxy_choice.disable_forward_proxy
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.Empty)
		err := b.DecodeMessage(msg)
		m.ForwardProxyChoice = &GetSpecType_DisableForwardProxy{msg}
		return true, err
	case 25: // forward_proxy_choice.enable_forward_proxy
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ves_io_schema4.ForwardProxyConfigType)
		err := b.DecodeMessage(msg)
		m.ForwardProxyChoice = &GetSpecType_EnableForwardProxy{msg}
		return true, err
	default:
		return false, nil
	}
}

func _GetSpecType_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*GetSpecType)
	// connector_choice
	switch x := m.ConnectorChoice.(type) {
	case *GetSpecType_SliToSloSnat:
		s := proto.Size(x.SliToSloSnat)
		n += proto.SizeVarint(17<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *GetSpecType_SliToSloDr:
		s := proto.Size(x.SliToSloDr)
		n += proto.SizeVarint(18<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *GetSpecType_SliToGlobalDr:
		s := proto.Size(x.SliToGlobalDr)
		n += proto.SizeVarint(19<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *GetSpecType_SliToGlobalSnat:
		s := proto.Size(x.SliToGlobalSnat)
		n += proto.SizeVarint(20<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *GetSpecType_SloToGlobalDr:
		s := proto.Size(x.SloToGlobalDr)
		n += proto.SizeVarint(21<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *GetSpecType_SloToGlobalSnat:
		s := proto.Size(x.SloToGlobalSnat)
		n += proto.SizeVarint(22<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	// forward_proxy_choice
	switch x := m.ForwardProxyChoice.(type) {
	case *GetSpecType_DisableForwardProxy:
		s := proto.Size(x.DisableForwardProxy)
		n += proto.SizeVarint(24<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *GetSpecType_EnableForwardProxy:
		s := proto.Size(x.EnableForwardProxy)
		n += proto.SizeVarint(25<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// Network Connector Status
//
// x-displayName: "NetWork Connector Status"
// Status object corresponding to a network connector. It gives the latest status of Network connector
type NetworkConnectorStatus struct {
	// Network Connector Install Status
	//
	// x-displayName: "Network Connector Install status"
	// Installed will be set to 'true' if the connector is installed
	Installed string `protobuf:"bytes,1,opt,name=installed,proto3" json:"installed,omitempty"`
}

func (m *NetworkConnectorStatus) Reset()                    { *m = NetworkConnectorStatus{} }
func (*NetworkConnectorStatus) ProtoMessage()               {}
func (*NetworkConnectorStatus) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{7} }

func (m *NetworkConnectorStatus) GetInstalled() string {
	if m != nil {
		return m.Installed
	}
	return ""
}

func init() {
	proto.RegisterType((*SnatConnectorType)(nil), "ves.io.schema.network_connector.SnatConnectorType")
	golang_proto.RegisterType((*SnatConnectorType)(nil), "ves.io.schema.network_connector.SnatConnectorType")
	proto.RegisterType((*GlobalSnatConnectorType)(nil), "ves.io.schema.network_connector.GlobalSnatConnectorType")
	golang_proto.RegisterType((*GlobalSnatConnectorType)(nil), "ves.io.schema.network_connector.GlobalSnatConnectorType")
	proto.RegisterType((*DynamicReverseProxyListType)(nil), "ves.io.schema.network_connector.DynamicReverseProxyListType")
	golang_proto.RegisterType((*DynamicReverseProxyListType)(nil), "ves.io.schema.network_connector.DynamicReverseProxyListType")
	proto.RegisterType((*GlobalSpecType)(nil), "ves.io.schema.network_connector.GlobalSpecType")
	golang_proto.RegisterType((*GlobalSpecType)(nil), "ves.io.schema.network_connector.GlobalSpecType")
	proto.RegisterType((*CreateSpecType)(nil), "ves.io.schema.network_connector.CreateSpecType")
	golang_proto.RegisterType((*CreateSpecType)(nil), "ves.io.schema.network_connector.CreateSpecType")
	proto.RegisterType((*ReplaceSpecType)(nil), "ves.io.schema.network_connector.ReplaceSpecType")
	golang_proto.RegisterType((*ReplaceSpecType)(nil), "ves.io.schema.network_connector.ReplaceSpecType")
	proto.RegisterType((*GetSpecType)(nil), "ves.io.schema.network_connector.GetSpecType")
	golang_proto.RegisterType((*GetSpecType)(nil), "ves.io.schema.network_connector.GetSpecType")
	proto.RegisterType((*NetworkConnectorStatus)(nil), "ves.io.schema.network_connector.NetworkConnectorStatus")
	golang_proto.RegisterType((*NetworkConnectorStatus)(nil), "ves.io.schema.network_connector.NetworkConnectorStatus")
	proto.RegisterEnum("ves.io.schema.network_connector.NetworkConnectorType", NetworkConnectorType_name, NetworkConnectorType_value)
	golang_proto.RegisterEnum("ves.io.schema.network_connector.NetworkConnectorType", NetworkConnectorType_name, NetworkConnectorType_value)
	proto.RegisterEnum("ves.io.schema.network_connector.NetworkConnectorSNATPoolType", NetworkConnectorSNATPoolType_name, NetworkConnectorSNATPoolType_value)
	golang_proto.RegisterEnum("ves.io.schema.network_connector.NetworkConnectorSNATPoolType", NetworkConnectorSNATPoolType_name, NetworkConnectorSNATPoolType_value)
	proto.RegisterEnum("ves.io.schema.network_connector.NetworkConnectorProxyType", NetworkConnectorProxyType_name, NetworkConnectorProxyType_value)
	golang_proto.RegisterEnum("ves.io.schema.network_connector.NetworkConnectorProxyType", NetworkConnectorProxyType_name, NetworkConnectorProxyType_value)
}
func (x NetworkConnectorType) String() string {
	s, ok := NetworkConnectorType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x NetworkConnectorSNATPoolType) String() string {
	s, ok := NetworkConnectorSNATPoolType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x NetworkConnectorProxyType) String() string {
	s, ok := NetworkConnectorProxyType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *SnatConnectorType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SnatConnectorType)
	if !ok {
		that2, ok := that.(SnatConnectorType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.RoutingChoice == nil {
		if this.RoutingChoice != nil {
			return false
		}
	} else if this.RoutingChoice == nil {
		return false
	} else if !this.RoutingChoice.Equal(that1.RoutingChoice) {
		return false
	}
	if that1.PoolChoice == nil {
		if this.PoolChoice != nil {
			return false
		}
	} else if this.PoolChoice == nil {
		return false
	} else if !this.PoolChoice.Equal(that1.PoolChoice) {
		return false
	}
	return true
}
func (this *SnatConnectorType_DefaultGwSnat) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SnatConnectorType_DefaultGwSnat)
	if !ok {
		that2, ok := that.(SnatConnectorType_DefaultGwSnat)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DefaultGwSnat.Equal(that1.DefaultGwSnat) {
		return false
	}
	return true
}
func (this *SnatConnectorType_DynamicRouting) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SnatConnectorType_DynamicRouting)
	if !ok {
		that2, ok := that.(SnatConnectorType_DynamicRouting)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DynamicRouting.Equal(that1.DynamicRouting) {
		return false
	}
	return true
}
func (this *SnatConnectorType_InterfaceIp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SnatConnectorType_InterfaceIp)
	if !ok {
		that2, ok := that.(SnatConnectorType_InterfaceIp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.InterfaceIp.Equal(that1.InterfaceIp) {
		return false
	}
	return true
}
func (this *SnatConnectorType_SnatPool) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SnatConnectorType_SnatPool)
	if !ok {
		that2, ok := that.(SnatConnectorType_SnatPool)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.SnatPool != that1.SnatPool {
		return false
	}
	return true
}
func (this *SnatConnectorType_SnatPoolAllocator) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SnatConnectorType_SnatPoolAllocator)
	if !ok {
		that2, ok := that.(SnatConnectorType_SnatPoolAllocator)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.SnatPoolAllocator.Equal(that1.SnatPoolAllocator) {
		return false
	}
	return true
}
func (this *GlobalSnatConnectorType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSnatConnectorType)
	if !ok {
		that2, ok := that.(GlobalSnatConnectorType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.GlobalVn.Equal(that1.GlobalVn) {
		return false
	}
	if !this.SnatConfig.Equal(that1.SnatConfig) {
		return false
	}
	return true
}
func (this *DynamicReverseProxyListType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DynamicReverseProxyListType)
	if !ok {
		that2, ok := that.(DynamicReverseProxyListType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Drps) != len(that1.Drps) {
		return false
	}
	for i := range this.Drps {
		if !this.Drps[i].Equal(that1.Drps[i]) {
			return false
		}
	}
	return true
}
func (this *GlobalSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType)
	if !ok {
		that2, ok := that.(GlobalSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ConnectorType != that1.ConnectorType {
		return false
	}
	if this.OutsideNetworkType != that1.OutsideNetworkType {
		return false
	}
	if len(this.OutsideNetwork) != len(that1.OutsideNetwork) {
		return false
	}
	for i := range this.OutsideNetwork {
		if !this.OutsideNetwork[i].Equal(that1.OutsideNetwork[i]) {
			return false
		}
	}
	if this.InsideNetworkType != that1.InsideNetworkType {
		return false
	}
	if len(this.InsideNetwork) != len(that1.InsideNetwork) {
		return false
	}
	for i := range this.InsideNetwork {
		if !this.InsideNetwork[i].Equal(that1.InsideNetwork[i]) {
			return false
		}
	}
	if this.SnatPoolType != that1.SnatPoolType {
		return false
	}
	if len(this.NatPool) != len(that1.NatPool) {
		return false
	}
	for i := range this.NatPool {
		if !this.NatPool[i].Equal(that1.NatPool[i]) {
			return false
		}
	}
	if this.ProxyType != that1.ProxyType {
		return false
	}
	if len(this.DynamicReverseProxy) != len(that1.DynamicReverseProxy) {
		return false
	}
	for i := range this.DynamicReverseProxy {
		if !this.DynamicReverseProxy[i].Equal(that1.DynamicReverseProxy[i]) {
			return false
		}
	}
	if !this.ForwardProxy.Equal(that1.ForwardProxy) {
		return false
	}
	return true
}
func (this *CreateSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType)
	if !ok {
		that2, ok := that.(CreateSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.ConnectorChoice == nil {
		if this.ConnectorChoice != nil {
			return false
		}
	} else if this.ConnectorChoice == nil {
		return false
	} else if !this.ConnectorChoice.Equal(that1.ConnectorChoice) {
		return false
	}
	if that1.ForwardProxyChoice == nil {
		if this.ForwardProxyChoice != nil {
			return false
		}
	} else if this.ForwardProxyChoice == nil {
		return false
	} else if !this.ForwardProxyChoice.Equal(that1.ForwardProxyChoice) {
		return false
	}
	return true
}
func (this *CreateSpecType_SliToSloSnat) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_SliToSloSnat)
	if !ok {
		that2, ok := that.(CreateSpecType_SliToSloSnat)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.SliToSloSnat.Equal(that1.SliToSloSnat) {
		return false
	}
	return true
}
func (this *CreateSpecType_SliToSloDr) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_SliToSloDr)
	if !ok {
		that2, ok := that.(CreateSpecType_SliToSloDr)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.SliToSloDr.Equal(that1.SliToSloDr) {
		return false
	}
	return true
}
func (this *CreateSpecType_SliToGlobalDr) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_SliToGlobalDr)
	if !ok {
		that2, ok := that.(CreateSpecType_SliToGlobalDr)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.SliToGlobalDr.Equal(that1.SliToGlobalDr) {
		return false
	}
	return true
}
func (this *CreateSpecType_SliToGlobalSnat) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_SliToGlobalSnat)
	if !ok {
		that2, ok := that.(CreateSpecType_SliToGlobalSnat)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.SliToGlobalSnat.Equal(that1.SliToGlobalSnat) {
		return false
	}
	return true
}
func (this *CreateSpecType_SloToGlobalDr) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_SloToGlobalDr)
	if !ok {
		that2, ok := that.(CreateSpecType_SloToGlobalDr)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.SloToGlobalDr.Equal(that1.SloToGlobalDr) {
		return false
	}
	return true
}
func (this *CreateSpecType_SloToGlobalSnat) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_SloToGlobalSnat)
	if !ok {
		that2, ok := that.(CreateSpecType_SloToGlobalSnat)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.SloToGlobalSnat.Equal(that1.SloToGlobalSnat) {
		return false
	}
	return true
}
func (this *CreateSpecType_DisableForwardProxy) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_DisableForwardProxy)
	if !ok {
		that2, ok := that.(CreateSpecType_DisableForwardProxy)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DisableForwardProxy.Equal(that1.DisableForwardProxy) {
		return false
	}
	return true
}
func (this *CreateSpecType_EnableForwardProxy) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_EnableForwardProxy)
	if !ok {
		that2, ok := that.(CreateSpecType_EnableForwardProxy)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.EnableForwardProxy.Equal(that1.EnableForwardProxy) {
		return false
	}
	return true
}
func (this *ReplaceSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType)
	if !ok {
		that2, ok := that.(ReplaceSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.ConnectorChoice == nil {
		if this.ConnectorChoice != nil {
			return false
		}
	} else if this.ConnectorChoice == nil {
		return false
	} else if !this.ConnectorChoice.Equal(that1.ConnectorChoice) {
		return false
	}
	if that1.ForwardProxyChoice == nil {
		if this.ForwardProxyChoice != nil {
			return false
		}
	} else if this.ForwardProxyChoice == nil {
		return false
	} else if !this.ForwardProxyChoice.Equal(that1.ForwardProxyChoice) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_SliToSloSnat) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_SliToSloSnat)
	if !ok {
		that2, ok := that.(ReplaceSpecType_SliToSloSnat)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.SliToSloSnat.Equal(that1.SliToSloSnat) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_SliToSloDr) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_SliToSloDr)
	if !ok {
		that2, ok := that.(ReplaceSpecType_SliToSloDr)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.SliToSloDr.Equal(that1.SliToSloDr) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_SliToGlobalDr) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_SliToGlobalDr)
	if !ok {
		that2, ok := that.(ReplaceSpecType_SliToGlobalDr)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.SliToGlobalDr.Equal(that1.SliToGlobalDr) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_SliToGlobalSnat) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_SliToGlobalSnat)
	if !ok {
		that2, ok := that.(ReplaceSpecType_SliToGlobalSnat)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.SliToGlobalSnat.Equal(that1.SliToGlobalSnat) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_SloToGlobalDr) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_SloToGlobalDr)
	if !ok {
		that2, ok := that.(ReplaceSpecType_SloToGlobalDr)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.SloToGlobalDr.Equal(that1.SloToGlobalDr) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_SloToGlobalSnat) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_SloToGlobalSnat)
	if !ok {
		that2, ok := that.(ReplaceSpecType_SloToGlobalSnat)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.SloToGlobalSnat.Equal(that1.SloToGlobalSnat) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_DisableForwardProxy) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_DisableForwardProxy)
	if !ok {
		that2, ok := that.(ReplaceSpecType_DisableForwardProxy)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DisableForwardProxy.Equal(that1.DisableForwardProxy) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_EnableForwardProxy) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_EnableForwardProxy)
	if !ok {
		that2, ok := that.(ReplaceSpecType_EnableForwardProxy)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.EnableForwardProxy.Equal(that1.EnableForwardProxy) {
		return false
	}
	return true
}
func (this *GetSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType)
	if !ok {
		that2, ok := that.(GetSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.ConnectorChoice == nil {
		if this.ConnectorChoice != nil {
			return false
		}
	} else if this.ConnectorChoice == nil {
		return false
	} else if !this.ConnectorChoice.Equal(that1.ConnectorChoice) {
		return false
	}
	if that1.ForwardProxyChoice == nil {
		if this.ForwardProxyChoice != nil {
			return false
		}
	} else if this.ForwardProxyChoice == nil {
		return false
	} else if !this.ForwardProxyChoice.Equal(that1.ForwardProxyChoice) {
		return false
	}
	return true
}
func (this *GetSpecType_SliToSloSnat) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_SliToSloSnat)
	if !ok {
		that2, ok := that.(GetSpecType_SliToSloSnat)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.SliToSloSnat.Equal(that1.SliToSloSnat) {
		return false
	}
	return true
}
func (this *GetSpecType_SliToSloDr) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_SliToSloDr)
	if !ok {
		that2, ok := that.(GetSpecType_SliToSloDr)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.SliToSloDr.Equal(that1.SliToSloDr) {
		return false
	}
	return true
}
func (this *GetSpecType_SliToGlobalDr) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_SliToGlobalDr)
	if !ok {
		that2, ok := that.(GetSpecType_SliToGlobalDr)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.SliToGlobalDr.Equal(that1.SliToGlobalDr) {
		return false
	}
	return true
}
func (this *GetSpecType_SliToGlobalSnat) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_SliToGlobalSnat)
	if !ok {
		that2, ok := that.(GetSpecType_SliToGlobalSnat)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.SliToGlobalSnat.Equal(that1.SliToGlobalSnat) {
		return false
	}
	return true
}
func (this *GetSpecType_SloToGlobalDr) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_SloToGlobalDr)
	if !ok {
		that2, ok := that.(GetSpecType_SloToGlobalDr)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.SloToGlobalDr.Equal(that1.SloToGlobalDr) {
		return false
	}
	return true
}
func (this *GetSpecType_SloToGlobalSnat) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_SloToGlobalSnat)
	if !ok {
		that2, ok := that.(GetSpecType_SloToGlobalSnat)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.SloToGlobalSnat.Equal(that1.SloToGlobalSnat) {
		return false
	}
	return true
}
func (this *GetSpecType_DisableForwardProxy) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_DisableForwardProxy)
	if !ok {
		that2, ok := that.(GetSpecType_DisableForwardProxy)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DisableForwardProxy.Equal(that1.DisableForwardProxy) {
		return false
	}
	return true
}
func (this *GetSpecType_EnableForwardProxy) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_EnableForwardProxy)
	if !ok {
		that2, ok := that.(GetSpecType_EnableForwardProxy)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.EnableForwardProxy.Equal(that1.EnableForwardProxy) {
		return false
	}
	return true
}
func (this *NetworkConnectorStatus) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NetworkConnectorStatus)
	if !ok {
		that2, ok := that.(NetworkConnectorStatus)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Installed != that1.Installed {
		return false
	}
	return true
}
func (this *SnatConnectorType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&network_connector.SnatConnectorType{")
	if this.RoutingChoice != nil {
		s = append(s, "RoutingChoice: "+fmt.Sprintf("%#v", this.RoutingChoice)+",\n")
	}
	if this.PoolChoice != nil {
		s = append(s, "PoolChoice: "+fmt.Sprintf("%#v", this.PoolChoice)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SnatConnectorType_DefaultGwSnat) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&network_connector.SnatConnectorType_DefaultGwSnat{` +
		`DefaultGwSnat:` + fmt.Sprintf("%#v", this.DefaultGwSnat) + `}`}, ", ")
	return s
}
func (this *SnatConnectorType_DynamicRouting) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&network_connector.SnatConnectorType_DynamicRouting{` +
		`DynamicRouting:` + fmt.Sprintf("%#v", this.DynamicRouting) + `}`}, ", ")
	return s
}
func (this *SnatConnectorType_InterfaceIp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&network_connector.SnatConnectorType_InterfaceIp{` +
		`InterfaceIp:` + fmt.Sprintf("%#v", this.InterfaceIp) + `}`}, ", ")
	return s
}
func (this *SnatConnectorType_SnatPool) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&network_connector.SnatConnectorType_SnatPool{` +
		`SnatPool:` + fmt.Sprintf("%#v", this.SnatPool) + `}`}, ", ")
	return s
}
func (this *SnatConnectorType_SnatPoolAllocator) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&network_connector.SnatConnectorType_SnatPoolAllocator{` +
		`SnatPoolAllocator:` + fmt.Sprintf("%#v", this.SnatPoolAllocator) + `}`}, ", ")
	return s
}
func (this *GlobalSnatConnectorType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&network_connector.GlobalSnatConnectorType{")
	if this.GlobalVn != nil {
		s = append(s, "GlobalVn: "+fmt.Sprintf("%#v", this.GlobalVn)+",\n")
	}
	if this.SnatConfig != nil {
		s = append(s, "SnatConfig: "+fmt.Sprintf("%#v", this.SnatConfig)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DynamicReverseProxyListType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&network_connector.DynamicReverseProxyListType{")
	if this.Drps != nil {
		s = append(s, "Drps: "+fmt.Sprintf("%#v", this.Drps)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GlobalSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 14)
	s = append(s, "&network_connector.GlobalSpecType{")
	s = append(s, "ConnectorType: "+fmt.Sprintf("%#v", this.ConnectorType)+",\n")
	s = append(s, "OutsideNetworkType: "+fmt.Sprintf("%#v", this.OutsideNetworkType)+",\n")
	if this.OutsideNetwork != nil {
		s = append(s, "OutsideNetwork: "+fmt.Sprintf("%#v", this.OutsideNetwork)+",\n")
	}
	s = append(s, "InsideNetworkType: "+fmt.Sprintf("%#v", this.InsideNetworkType)+",\n")
	if this.InsideNetwork != nil {
		s = append(s, "InsideNetwork: "+fmt.Sprintf("%#v", this.InsideNetwork)+",\n")
	}
	s = append(s, "SnatPoolType: "+fmt.Sprintf("%#v", this.SnatPoolType)+",\n")
	if this.NatPool != nil {
		s = append(s, "NatPool: "+fmt.Sprintf("%#v", this.NatPool)+",\n")
	}
	s = append(s, "ProxyType: "+fmt.Sprintf("%#v", this.ProxyType)+",\n")
	if this.DynamicReverseProxy != nil {
		s = append(s, "DynamicReverseProxy: "+fmt.Sprintf("%#v", this.DynamicReverseProxy)+",\n")
	}
	if this.ForwardProxy != nil {
		s = append(s, "ForwardProxy: "+fmt.Sprintf("%#v", this.ForwardProxy)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CreateSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 12)
	s = append(s, "&network_connector.CreateSpecType{")
	if this.ConnectorChoice != nil {
		s = append(s, "ConnectorChoice: "+fmt.Sprintf("%#v", this.ConnectorChoice)+",\n")
	}
	if this.ForwardProxyChoice != nil {
		s = append(s, "ForwardProxyChoice: "+fmt.Sprintf("%#v", this.ForwardProxyChoice)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CreateSpecType_SliToSloSnat) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&network_connector.CreateSpecType_SliToSloSnat{` +
		`SliToSloSnat:` + fmt.Sprintf("%#v", this.SliToSloSnat) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_SliToSloDr) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&network_connector.CreateSpecType_SliToSloDr{` +
		`SliToSloDr:` + fmt.Sprintf("%#v", this.SliToSloDr) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_SliToGlobalDr) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&network_connector.CreateSpecType_SliToGlobalDr{` +
		`SliToGlobalDr:` + fmt.Sprintf("%#v", this.SliToGlobalDr) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_SliToGlobalSnat) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&network_connector.CreateSpecType_SliToGlobalSnat{` +
		`SliToGlobalSnat:` + fmt.Sprintf("%#v", this.SliToGlobalSnat) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_SloToGlobalDr) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&network_connector.CreateSpecType_SloToGlobalDr{` +
		`SloToGlobalDr:` + fmt.Sprintf("%#v", this.SloToGlobalDr) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_SloToGlobalSnat) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&network_connector.CreateSpecType_SloToGlobalSnat{` +
		`SloToGlobalSnat:` + fmt.Sprintf("%#v", this.SloToGlobalSnat) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_DisableForwardProxy) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&network_connector.CreateSpecType_DisableForwardProxy{` +
		`DisableForwardProxy:` + fmt.Sprintf("%#v", this.DisableForwardProxy) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_EnableForwardProxy) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&network_connector.CreateSpecType_EnableForwardProxy{` +
		`EnableForwardProxy:` + fmt.Sprintf("%#v", this.EnableForwardProxy) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 12)
	s = append(s, "&network_connector.ReplaceSpecType{")
	if this.ConnectorChoice != nil {
		s = append(s, "ConnectorChoice: "+fmt.Sprintf("%#v", this.ConnectorChoice)+",\n")
	}
	if this.ForwardProxyChoice != nil {
		s = append(s, "ForwardProxyChoice: "+fmt.Sprintf("%#v", this.ForwardProxyChoice)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ReplaceSpecType_SliToSloSnat) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&network_connector.ReplaceSpecType_SliToSloSnat{` +
		`SliToSloSnat:` + fmt.Sprintf("%#v", this.SliToSloSnat) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_SliToSloDr) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&network_connector.ReplaceSpecType_SliToSloDr{` +
		`SliToSloDr:` + fmt.Sprintf("%#v", this.SliToSloDr) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_SliToGlobalDr) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&network_connector.ReplaceSpecType_SliToGlobalDr{` +
		`SliToGlobalDr:` + fmt.Sprintf("%#v", this.SliToGlobalDr) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_SliToGlobalSnat) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&network_connector.ReplaceSpecType_SliToGlobalSnat{` +
		`SliToGlobalSnat:` + fmt.Sprintf("%#v", this.SliToGlobalSnat) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_SloToGlobalDr) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&network_connector.ReplaceSpecType_SloToGlobalDr{` +
		`SloToGlobalDr:` + fmt.Sprintf("%#v", this.SloToGlobalDr) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_SloToGlobalSnat) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&network_connector.ReplaceSpecType_SloToGlobalSnat{` +
		`SloToGlobalSnat:` + fmt.Sprintf("%#v", this.SloToGlobalSnat) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_DisableForwardProxy) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&network_connector.ReplaceSpecType_DisableForwardProxy{` +
		`DisableForwardProxy:` + fmt.Sprintf("%#v", this.DisableForwardProxy) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_EnableForwardProxy) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&network_connector.ReplaceSpecType_EnableForwardProxy{` +
		`EnableForwardProxy:` + fmt.Sprintf("%#v", this.EnableForwardProxy) + `}`}, ", ")
	return s
}
func (this *GetSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 12)
	s = append(s, "&network_connector.GetSpecType{")
	if this.ConnectorChoice != nil {
		s = append(s, "ConnectorChoice: "+fmt.Sprintf("%#v", this.ConnectorChoice)+",\n")
	}
	if this.ForwardProxyChoice != nil {
		s = append(s, "ForwardProxyChoice: "+fmt.Sprintf("%#v", this.ForwardProxyChoice)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetSpecType_SliToSloSnat) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&network_connector.GetSpecType_SliToSloSnat{` +
		`SliToSloSnat:` + fmt.Sprintf("%#v", this.SliToSloSnat) + `}`}, ", ")
	return s
}
func (this *GetSpecType_SliToSloDr) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&network_connector.GetSpecType_SliToSloDr{` +
		`SliToSloDr:` + fmt.Sprintf("%#v", this.SliToSloDr) + `}`}, ", ")
	return s
}
func (this *GetSpecType_SliToGlobalDr) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&network_connector.GetSpecType_SliToGlobalDr{` +
		`SliToGlobalDr:` + fmt.Sprintf("%#v", this.SliToGlobalDr) + `}`}, ", ")
	return s
}
func (this *GetSpecType_SliToGlobalSnat) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&network_connector.GetSpecType_SliToGlobalSnat{` +
		`SliToGlobalSnat:` + fmt.Sprintf("%#v", this.SliToGlobalSnat) + `}`}, ", ")
	return s
}
func (this *GetSpecType_SloToGlobalDr) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&network_connector.GetSpecType_SloToGlobalDr{` +
		`SloToGlobalDr:` + fmt.Sprintf("%#v", this.SloToGlobalDr) + `}`}, ", ")
	return s
}
func (this *GetSpecType_SloToGlobalSnat) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&network_connector.GetSpecType_SloToGlobalSnat{` +
		`SloToGlobalSnat:` + fmt.Sprintf("%#v", this.SloToGlobalSnat) + `}`}, ", ")
	return s
}
func (this *GetSpecType_DisableForwardProxy) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&network_connector.GetSpecType_DisableForwardProxy{` +
		`DisableForwardProxy:` + fmt.Sprintf("%#v", this.DisableForwardProxy) + `}`}, ", ")
	return s
}
func (this *GetSpecType_EnableForwardProxy) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&network_connector.GetSpecType_EnableForwardProxy{` +
		`EnableForwardProxy:` + fmt.Sprintf("%#v", this.EnableForwardProxy) + `}`}, ", ")
	return s
}
func (this *NetworkConnectorStatus) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&network_connector.NetworkConnectorStatus{")
	s = append(s, "Installed: "+fmt.Sprintf("%#v", this.Installed)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringTypes(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *SnatConnectorType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SnatConnectorType) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.RoutingChoice != nil {
		nn1, err := m.RoutingChoice.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn1
	}
	if m.PoolChoice != nil {
		nn2, err := m.PoolChoice.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn2
	}
	return i, nil
}

func (m *SnatConnectorType_DefaultGwSnat) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.DefaultGwSnat != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.DefaultGwSnat.Size()))
		n3, err := m.DefaultGwSnat.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	return i, nil
}
func (m *SnatConnectorType_DynamicRouting) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.DynamicRouting != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.DynamicRouting.Size()))
		n4, err := m.DynamicRouting.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	return i, nil
}
func (m *SnatConnectorType_InterfaceIp) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.InterfaceIp != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.InterfaceIp.Size()))
		n5, err := m.InterfaceIp.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	return i, nil
}
func (m *SnatConnectorType_SnatPool) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x32
	i++
	i = encodeVarintTypes(dAtA, i, uint64(len(m.SnatPool)))
	i += copy(dAtA[i:], m.SnatPool)
	return i, nil
}
func (m *SnatConnectorType_SnatPoolAllocator) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.SnatPoolAllocator != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.SnatPoolAllocator.Size()))
		n6, err := m.SnatPoolAllocator.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	return i, nil
}
func (m *GlobalSnatConnectorType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GlobalSnatConnectorType) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.GlobalVn != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.GlobalVn.Size()))
		n7, err := m.GlobalVn.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	if m.SnatConfig != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.SnatConfig.Size()))
		n8, err := m.SnatConfig.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n8
	}
	return i, nil
}

func (m *DynamicReverseProxyListType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DynamicReverseProxyListType) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Drps) > 0 {
		for _, msg := range m.Drps {
			dAtA[i] = 0xa
			i++
			i = encodeVarintTypes(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *GlobalSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GlobalSpecType) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ConnectorType != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.ConnectorType))
	}
	if m.OutsideNetworkType != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.OutsideNetworkType))
	}
	if len(m.OutsideNetwork) > 0 {
		for _, msg := range m.OutsideNetwork {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintTypes(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.InsideNetworkType != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.InsideNetworkType))
	}
	if len(m.InsideNetwork) > 0 {
		for _, msg := range m.InsideNetwork {
			dAtA[i] = 0x2a
			i++
			i = encodeVarintTypes(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.SnatPoolType != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.SnatPoolType))
	}
	if len(m.NatPool) > 0 {
		for _, msg := range m.NatPool {
			dAtA[i] = 0x3a
			i++
			i = encodeVarintTypes(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.ProxyType != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.ProxyType))
	}
	if len(m.DynamicReverseProxy) > 0 {
		for _, msg := range m.DynamicReverseProxy {
			dAtA[i] = 0x4a
			i++
			i = encodeVarintTypes(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.ForwardProxy != nil {
		dAtA[i] = 0x52
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.ForwardProxy.Size()))
		n9, err := m.ForwardProxy.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n9
	}
	return i, nil
}

func (m *CreateSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateSpecType) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ConnectorChoice != nil {
		nn10, err := m.ConnectorChoice.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn10
	}
	if m.ForwardProxyChoice != nil {
		nn11, err := m.ForwardProxyChoice.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn11
	}
	return i, nil
}

func (m *CreateSpecType_SliToSloSnat) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.SliToSloSnat != nil {
		dAtA[i] = 0x8a
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.SliToSloSnat.Size()))
		n12, err := m.SliToSloSnat.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n12
	}
	return i, nil
}
func (m *CreateSpecType_SliToSloDr) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.SliToSloDr != nil {
		dAtA[i] = 0x92
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.SliToSloDr.Size()))
		n13, err := m.SliToSloDr.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n13
	}
	return i, nil
}
func (m *CreateSpecType_SliToGlobalDr) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.SliToGlobalDr != nil {
		dAtA[i] = 0x9a
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.SliToGlobalDr.Size()))
		n14, err := m.SliToGlobalDr.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n14
	}
	return i, nil
}
func (m *CreateSpecType_SliToGlobalSnat) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.SliToGlobalSnat != nil {
		dAtA[i] = 0xa2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.SliToGlobalSnat.Size()))
		n15, err := m.SliToGlobalSnat.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n15
	}
	return i, nil
}
func (m *CreateSpecType_SloToGlobalDr) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.SloToGlobalDr != nil {
		dAtA[i] = 0xaa
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.SloToGlobalDr.Size()))
		n16, err := m.SloToGlobalDr.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n16
	}
	return i, nil
}
func (m *CreateSpecType_SloToGlobalSnat) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.SloToGlobalSnat != nil {
		dAtA[i] = 0xb2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.SloToGlobalSnat.Size()))
		n17, err := m.SloToGlobalSnat.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n17
	}
	return i, nil
}
func (m *CreateSpecType_DisableForwardProxy) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.DisableForwardProxy != nil {
		dAtA[i] = 0xc2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.DisableForwardProxy.Size()))
		n18, err := m.DisableForwardProxy.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n18
	}
	return i, nil
}
func (m *CreateSpecType_EnableForwardProxy) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.EnableForwardProxy != nil {
		dAtA[i] = 0xca
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.EnableForwardProxy.Size()))
		n19, err := m.EnableForwardProxy.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n19
	}
	return i, nil
}
func (m *ReplaceSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplaceSpecType) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ConnectorChoice != nil {
		nn20, err := m.ConnectorChoice.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn20
	}
	if m.ForwardProxyChoice != nil {
		nn21, err := m.ForwardProxyChoice.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn21
	}
	return i, nil
}

func (m *ReplaceSpecType_SliToSloSnat) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.SliToSloSnat != nil {
		dAtA[i] = 0x8a
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.SliToSloSnat.Size()))
		n22, err := m.SliToSloSnat.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n22
	}
	return i, nil
}
func (m *ReplaceSpecType_SliToSloDr) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.SliToSloDr != nil {
		dAtA[i] = 0x92
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.SliToSloDr.Size()))
		n23, err := m.SliToSloDr.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n23
	}
	return i, nil
}
func (m *ReplaceSpecType_SliToGlobalDr) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.SliToGlobalDr != nil {
		dAtA[i] = 0x9a
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.SliToGlobalDr.Size()))
		n24, err := m.SliToGlobalDr.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n24
	}
	return i, nil
}
func (m *ReplaceSpecType_SliToGlobalSnat) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.SliToGlobalSnat != nil {
		dAtA[i] = 0xa2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.SliToGlobalSnat.Size()))
		n25, err := m.SliToGlobalSnat.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n25
	}
	return i, nil
}
func (m *ReplaceSpecType_SloToGlobalDr) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.SloToGlobalDr != nil {
		dAtA[i] = 0xaa
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.SloToGlobalDr.Size()))
		n26, err := m.SloToGlobalDr.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n26
	}
	return i, nil
}
func (m *ReplaceSpecType_SloToGlobalSnat) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.SloToGlobalSnat != nil {
		dAtA[i] = 0xb2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.SloToGlobalSnat.Size()))
		n27, err := m.SloToGlobalSnat.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n27
	}
	return i, nil
}
func (m *ReplaceSpecType_DisableForwardProxy) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.DisableForwardProxy != nil {
		dAtA[i] = 0xc2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.DisableForwardProxy.Size()))
		n28, err := m.DisableForwardProxy.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n28
	}
	return i, nil
}
func (m *ReplaceSpecType_EnableForwardProxy) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.EnableForwardProxy != nil {
		dAtA[i] = 0xca
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.EnableForwardProxy.Size()))
		n29, err := m.EnableForwardProxy.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n29
	}
	return i, nil
}
func (m *GetSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetSpecType) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ConnectorChoice != nil {
		nn30, err := m.ConnectorChoice.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn30
	}
	if m.ForwardProxyChoice != nil {
		nn31, err := m.ForwardProxyChoice.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn31
	}
	return i, nil
}

func (m *GetSpecType_SliToSloSnat) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.SliToSloSnat != nil {
		dAtA[i] = 0x8a
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.SliToSloSnat.Size()))
		n32, err := m.SliToSloSnat.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n32
	}
	return i, nil
}
func (m *GetSpecType_SliToSloDr) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.SliToSloDr != nil {
		dAtA[i] = 0x92
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.SliToSloDr.Size()))
		n33, err := m.SliToSloDr.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n33
	}
	return i, nil
}
func (m *GetSpecType_SliToGlobalDr) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.SliToGlobalDr != nil {
		dAtA[i] = 0x9a
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.SliToGlobalDr.Size()))
		n34, err := m.SliToGlobalDr.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n34
	}
	return i, nil
}
func (m *GetSpecType_SliToGlobalSnat) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.SliToGlobalSnat != nil {
		dAtA[i] = 0xa2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.SliToGlobalSnat.Size()))
		n35, err := m.SliToGlobalSnat.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n35
	}
	return i, nil
}
func (m *GetSpecType_SloToGlobalDr) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.SloToGlobalDr != nil {
		dAtA[i] = 0xaa
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.SloToGlobalDr.Size()))
		n36, err := m.SloToGlobalDr.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n36
	}
	return i, nil
}
func (m *GetSpecType_SloToGlobalSnat) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.SloToGlobalSnat != nil {
		dAtA[i] = 0xb2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.SloToGlobalSnat.Size()))
		n37, err := m.SloToGlobalSnat.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n37
	}
	return i, nil
}
func (m *GetSpecType_DisableForwardProxy) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.DisableForwardProxy != nil {
		dAtA[i] = 0xc2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.DisableForwardProxy.Size()))
		n38, err := m.DisableForwardProxy.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n38
	}
	return i, nil
}
func (m *GetSpecType_EnableForwardProxy) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.EnableForwardProxy != nil {
		dAtA[i] = 0xca
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.EnableForwardProxy.Size()))
		n39, err := m.EnableForwardProxy.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n39
	}
	return i, nil
}
func (m *NetworkConnectorStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NetworkConnectorStatus) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Installed) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Installed)))
		i += copy(dAtA[i:], m.Installed)
	}
	return i, nil
}

func encodeVarintTypes(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *SnatConnectorType) Size() (n int) {
	var l int
	_ = l
	if m.RoutingChoice != nil {
		n += m.RoutingChoice.Size()
	}
	if m.PoolChoice != nil {
		n += m.PoolChoice.Size()
	}
	return n
}

func (m *SnatConnectorType_DefaultGwSnat) Size() (n int) {
	var l int
	_ = l
	if m.DefaultGwSnat != nil {
		l = m.DefaultGwSnat.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *SnatConnectorType_DynamicRouting) Size() (n int) {
	var l int
	_ = l
	if m.DynamicRouting != nil {
		l = m.DynamicRouting.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *SnatConnectorType_InterfaceIp) Size() (n int) {
	var l int
	_ = l
	if m.InterfaceIp != nil {
		l = m.InterfaceIp.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *SnatConnectorType_SnatPool) Size() (n int) {
	var l int
	_ = l
	l = len(m.SnatPool)
	n += 1 + l + sovTypes(uint64(l))
	return n
}
func (m *SnatConnectorType_SnatPoolAllocator) Size() (n int) {
	var l int
	_ = l
	if m.SnatPoolAllocator != nil {
		l = m.SnatPoolAllocator.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSnatConnectorType) Size() (n int) {
	var l int
	_ = l
	if m.GlobalVn != nil {
		l = m.GlobalVn.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.SnatConfig != nil {
		l = m.SnatConfig.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *DynamicReverseProxyListType) Size() (n int) {
	var l int
	_ = l
	if len(m.Drps) > 0 {
		for _, e := range m.Drps {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *GlobalSpecType) Size() (n int) {
	var l int
	_ = l
	if m.ConnectorType != 0 {
		n += 1 + sovTypes(uint64(m.ConnectorType))
	}
	if m.OutsideNetworkType != 0 {
		n += 1 + sovTypes(uint64(m.OutsideNetworkType))
	}
	if len(m.OutsideNetwork) > 0 {
		for _, e := range m.OutsideNetwork {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if m.InsideNetworkType != 0 {
		n += 1 + sovTypes(uint64(m.InsideNetworkType))
	}
	if len(m.InsideNetwork) > 0 {
		for _, e := range m.InsideNetwork {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if m.SnatPoolType != 0 {
		n += 1 + sovTypes(uint64(m.SnatPoolType))
	}
	if len(m.NatPool) > 0 {
		for _, e := range m.NatPool {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if m.ProxyType != 0 {
		n += 1 + sovTypes(uint64(m.ProxyType))
	}
	if len(m.DynamicReverseProxy) > 0 {
		for _, e := range m.DynamicReverseProxy {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if m.ForwardProxy != nil {
		l = m.ForwardProxy.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *CreateSpecType) Size() (n int) {
	var l int
	_ = l
	if m.ConnectorChoice != nil {
		n += m.ConnectorChoice.Size()
	}
	if m.ForwardProxyChoice != nil {
		n += m.ForwardProxyChoice.Size()
	}
	return n
}

func (m *CreateSpecType_SliToSloSnat) Size() (n int) {
	var l int
	_ = l
	if m.SliToSloSnat != nil {
		l = m.SliToSloSnat.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_SliToSloDr) Size() (n int) {
	var l int
	_ = l
	if m.SliToSloDr != nil {
		l = m.SliToSloDr.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_SliToGlobalDr) Size() (n int) {
	var l int
	_ = l
	if m.SliToGlobalDr != nil {
		l = m.SliToGlobalDr.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_SliToGlobalSnat) Size() (n int) {
	var l int
	_ = l
	if m.SliToGlobalSnat != nil {
		l = m.SliToGlobalSnat.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_SloToGlobalDr) Size() (n int) {
	var l int
	_ = l
	if m.SloToGlobalDr != nil {
		l = m.SloToGlobalDr.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_SloToGlobalSnat) Size() (n int) {
	var l int
	_ = l
	if m.SloToGlobalSnat != nil {
		l = m.SloToGlobalSnat.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_DisableForwardProxy) Size() (n int) {
	var l int
	_ = l
	if m.DisableForwardProxy != nil {
		l = m.DisableForwardProxy.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_EnableForwardProxy) Size() (n int) {
	var l int
	_ = l
	if m.EnableForwardProxy != nil {
		l = m.EnableForwardProxy.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType) Size() (n int) {
	var l int
	_ = l
	if m.ConnectorChoice != nil {
		n += m.ConnectorChoice.Size()
	}
	if m.ForwardProxyChoice != nil {
		n += m.ForwardProxyChoice.Size()
	}
	return n
}

func (m *ReplaceSpecType_SliToSloSnat) Size() (n int) {
	var l int
	_ = l
	if m.SliToSloSnat != nil {
		l = m.SliToSloSnat.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_SliToSloDr) Size() (n int) {
	var l int
	_ = l
	if m.SliToSloDr != nil {
		l = m.SliToSloDr.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_SliToGlobalDr) Size() (n int) {
	var l int
	_ = l
	if m.SliToGlobalDr != nil {
		l = m.SliToGlobalDr.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_SliToGlobalSnat) Size() (n int) {
	var l int
	_ = l
	if m.SliToGlobalSnat != nil {
		l = m.SliToGlobalSnat.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_SloToGlobalDr) Size() (n int) {
	var l int
	_ = l
	if m.SloToGlobalDr != nil {
		l = m.SloToGlobalDr.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_SloToGlobalSnat) Size() (n int) {
	var l int
	_ = l
	if m.SloToGlobalSnat != nil {
		l = m.SloToGlobalSnat.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_DisableForwardProxy) Size() (n int) {
	var l int
	_ = l
	if m.DisableForwardProxy != nil {
		l = m.DisableForwardProxy.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_EnableForwardProxy) Size() (n int) {
	var l int
	_ = l
	if m.EnableForwardProxy != nil {
		l = m.EnableForwardProxy.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType) Size() (n int) {
	var l int
	_ = l
	if m.ConnectorChoice != nil {
		n += m.ConnectorChoice.Size()
	}
	if m.ForwardProxyChoice != nil {
		n += m.ForwardProxyChoice.Size()
	}
	return n
}

func (m *GetSpecType_SliToSloSnat) Size() (n int) {
	var l int
	_ = l
	if m.SliToSloSnat != nil {
		l = m.SliToSloSnat.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_SliToSloDr) Size() (n int) {
	var l int
	_ = l
	if m.SliToSloDr != nil {
		l = m.SliToSloDr.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_SliToGlobalDr) Size() (n int) {
	var l int
	_ = l
	if m.SliToGlobalDr != nil {
		l = m.SliToGlobalDr.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_SliToGlobalSnat) Size() (n int) {
	var l int
	_ = l
	if m.SliToGlobalSnat != nil {
		l = m.SliToGlobalSnat.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_SloToGlobalDr) Size() (n int) {
	var l int
	_ = l
	if m.SloToGlobalDr != nil {
		l = m.SloToGlobalDr.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_SloToGlobalSnat) Size() (n int) {
	var l int
	_ = l
	if m.SloToGlobalSnat != nil {
		l = m.SloToGlobalSnat.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_DisableForwardProxy) Size() (n int) {
	var l int
	_ = l
	if m.DisableForwardProxy != nil {
		l = m.DisableForwardProxy.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_EnableForwardProxy) Size() (n int) {
	var l int
	_ = l
	if m.EnableForwardProxy != nil {
		l = m.EnableForwardProxy.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *NetworkConnectorStatus) Size() (n int) {
	var l int
	_ = l
	l = len(m.Installed)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func sovTypes(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozTypes(x uint64) (n int) {
	return sovTypes(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *SnatConnectorType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SnatConnectorType{`,
		`RoutingChoice:` + fmt.Sprintf("%v", this.RoutingChoice) + `,`,
		`PoolChoice:` + fmt.Sprintf("%v", this.PoolChoice) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SnatConnectorType_DefaultGwSnat) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SnatConnectorType_DefaultGwSnat{`,
		`DefaultGwSnat:` + strings.Replace(fmt.Sprintf("%v", this.DefaultGwSnat), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SnatConnectorType_DynamicRouting) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SnatConnectorType_DynamicRouting{`,
		`DynamicRouting:` + strings.Replace(fmt.Sprintf("%v", this.DynamicRouting), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SnatConnectorType_InterfaceIp) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SnatConnectorType_InterfaceIp{`,
		`InterfaceIp:` + strings.Replace(fmt.Sprintf("%v", this.InterfaceIp), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SnatConnectorType_SnatPool) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SnatConnectorType_SnatPool{`,
		`SnatPool:` + fmt.Sprintf("%v", this.SnatPool) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SnatConnectorType_SnatPoolAllocator) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SnatConnectorType_SnatPoolAllocator{`,
		`SnatPoolAllocator:` + strings.Replace(fmt.Sprintf("%v", this.SnatPoolAllocator), "ObjectRefType", "ves_io_schema_views.ObjectRefType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSnatConnectorType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSnatConnectorType{`,
		`GlobalVn:` + strings.Replace(fmt.Sprintf("%v", this.GlobalVn), "ObjectRefType", "ves_io_schema_views.ObjectRefType", 1) + `,`,
		`SnatConfig:` + strings.Replace(fmt.Sprintf("%v", this.SnatConfig), "SnatConnectorType", "SnatConnectorType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DynamicReverseProxyListType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DynamicReverseProxyListType{`,
		`Drps:` + strings.Replace(fmt.Sprintf("%v", this.Drps), "ObjectRefType", "ves_io_schema_views.ObjectRefType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType{`,
		`ConnectorType:` + fmt.Sprintf("%v", this.ConnectorType) + `,`,
		`OutsideNetworkType:` + fmt.Sprintf("%v", this.OutsideNetworkType) + `,`,
		`OutsideNetwork:` + strings.Replace(fmt.Sprintf("%v", this.OutsideNetwork), "ObjectRefType", "ves_io_schema4.ObjectRefType", 1) + `,`,
		`InsideNetworkType:` + fmt.Sprintf("%v", this.InsideNetworkType) + `,`,
		`InsideNetwork:` + strings.Replace(fmt.Sprintf("%v", this.InsideNetwork), "ObjectRefType", "ves_io_schema4.ObjectRefType", 1) + `,`,
		`SnatPoolType:` + fmt.Sprintf("%v", this.SnatPoolType) + `,`,
		`NatPool:` + strings.Replace(fmt.Sprintf("%v", this.NatPool), "Ipv4SubnetType", "ves_io_schema3.Ipv4SubnetType", 1) + `,`,
		`ProxyType:` + fmt.Sprintf("%v", this.ProxyType) + `,`,
		`DynamicReverseProxy:` + strings.Replace(fmt.Sprintf("%v", this.DynamicReverseProxy), "ObjectRefType", "ves_io_schema4.ObjectRefType", 1) + `,`,
		`ForwardProxy:` + strings.Replace(fmt.Sprintf("%v", this.ForwardProxy), "ForwardProxyConfigType", "ves_io_schema4.ForwardProxyConfigType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType{`,
		`ConnectorChoice:` + fmt.Sprintf("%v", this.ConnectorChoice) + `,`,
		`ForwardProxyChoice:` + fmt.Sprintf("%v", this.ForwardProxyChoice) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_SliToSloSnat) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_SliToSloSnat{`,
		`SliToSloSnat:` + strings.Replace(fmt.Sprintf("%v", this.SliToSloSnat), "SnatConnectorType", "SnatConnectorType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_SliToSloDr) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_SliToSloDr{`,
		`SliToSloDr:` + strings.Replace(fmt.Sprintf("%v", this.SliToSloDr), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_SliToGlobalDr) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_SliToGlobalDr{`,
		`SliToGlobalDr:` + strings.Replace(fmt.Sprintf("%v", this.SliToGlobalDr), "GlobalConnectorType", "ves_io_schema_views.GlobalConnectorType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_SliToGlobalSnat) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_SliToGlobalSnat{`,
		`SliToGlobalSnat:` + strings.Replace(fmt.Sprintf("%v", this.SliToGlobalSnat), "GlobalSnatConnectorType", "GlobalSnatConnectorType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_SloToGlobalDr) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_SloToGlobalDr{`,
		`SloToGlobalDr:` + strings.Replace(fmt.Sprintf("%v", this.SloToGlobalDr), "GlobalConnectorType", "ves_io_schema_views.GlobalConnectorType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_SloToGlobalSnat) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_SloToGlobalSnat{`,
		`SloToGlobalSnat:` + strings.Replace(fmt.Sprintf("%v", this.SloToGlobalSnat), "GlobalSnatConnectorType", "GlobalSnatConnectorType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_DisableForwardProxy) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_DisableForwardProxy{`,
		`DisableForwardProxy:` + strings.Replace(fmt.Sprintf("%v", this.DisableForwardProxy), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_EnableForwardProxy) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_EnableForwardProxy{`,
		`EnableForwardProxy:` + strings.Replace(fmt.Sprintf("%v", this.EnableForwardProxy), "ForwardProxyConfigType", "ves_io_schema4.ForwardProxyConfigType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType{`,
		`ConnectorChoice:` + fmt.Sprintf("%v", this.ConnectorChoice) + `,`,
		`ForwardProxyChoice:` + fmt.Sprintf("%v", this.ForwardProxyChoice) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_SliToSloSnat) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_SliToSloSnat{`,
		`SliToSloSnat:` + strings.Replace(fmt.Sprintf("%v", this.SliToSloSnat), "SnatConnectorType", "SnatConnectorType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_SliToSloDr) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_SliToSloDr{`,
		`SliToSloDr:` + strings.Replace(fmt.Sprintf("%v", this.SliToSloDr), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_SliToGlobalDr) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_SliToGlobalDr{`,
		`SliToGlobalDr:` + strings.Replace(fmt.Sprintf("%v", this.SliToGlobalDr), "GlobalConnectorType", "ves_io_schema_views.GlobalConnectorType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_SliToGlobalSnat) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_SliToGlobalSnat{`,
		`SliToGlobalSnat:` + strings.Replace(fmt.Sprintf("%v", this.SliToGlobalSnat), "GlobalSnatConnectorType", "GlobalSnatConnectorType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_SloToGlobalDr) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_SloToGlobalDr{`,
		`SloToGlobalDr:` + strings.Replace(fmt.Sprintf("%v", this.SloToGlobalDr), "GlobalConnectorType", "ves_io_schema_views.GlobalConnectorType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_SloToGlobalSnat) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_SloToGlobalSnat{`,
		`SloToGlobalSnat:` + strings.Replace(fmt.Sprintf("%v", this.SloToGlobalSnat), "GlobalSnatConnectorType", "GlobalSnatConnectorType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_DisableForwardProxy) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_DisableForwardProxy{`,
		`DisableForwardProxy:` + strings.Replace(fmt.Sprintf("%v", this.DisableForwardProxy), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_EnableForwardProxy) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_EnableForwardProxy{`,
		`EnableForwardProxy:` + strings.Replace(fmt.Sprintf("%v", this.EnableForwardProxy), "ForwardProxyConfigType", "ves_io_schema4.ForwardProxyConfigType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType{`,
		`ConnectorChoice:` + fmt.Sprintf("%v", this.ConnectorChoice) + `,`,
		`ForwardProxyChoice:` + fmt.Sprintf("%v", this.ForwardProxyChoice) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_SliToSloSnat) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_SliToSloSnat{`,
		`SliToSloSnat:` + strings.Replace(fmt.Sprintf("%v", this.SliToSloSnat), "SnatConnectorType", "SnatConnectorType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_SliToSloDr) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_SliToSloDr{`,
		`SliToSloDr:` + strings.Replace(fmt.Sprintf("%v", this.SliToSloDr), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_SliToGlobalDr) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_SliToGlobalDr{`,
		`SliToGlobalDr:` + strings.Replace(fmt.Sprintf("%v", this.SliToGlobalDr), "GlobalConnectorType", "ves_io_schema_views.GlobalConnectorType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_SliToGlobalSnat) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_SliToGlobalSnat{`,
		`SliToGlobalSnat:` + strings.Replace(fmt.Sprintf("%v", this.SliToGlobalSnat), "GlobalSnatConnectorType", "GlobalSnatConnectorType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_SloToGlobalDr) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_SloToGlobalDr{`,
		`SloToGlobalDr:` + strings.Replace(fmt.Sprintf("%v", this.SloToGlobalDr), "GlobalConnectorType", "ves_io_schema_views.GlobalConnectorType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_SloToGlobalSnat) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_SloToGlobalSnat{`,
		`SloToGlobalSnat:` + strings.Replace(fmt.Sprintf("%v", this.SloToGlobalSnat), "GlobalSnatConnectorType", "GlobalSnatConnectorType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_DisableForwardProxy) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_DisableForwardProxy{`,
		`DisableForwardProxy:` + strings.Replace(fmt.Sprintf("%v", this.DisableForwardProxy), "Empty", "ves_io_schema4.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_EnableForwardProxy) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_EnableForwardProxy{`,
		`EnableForwardProxy:` + strings.Replace(fmt.Sprintf("%v", this.EnableForwardProxy), "ForwardProxyConfigType", "ves_io_schema4.ForwardProxyConfigType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *NetworkConnectorStatus) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&NetworkConnectorStatus{`,
		`Installed:` + fmt.Sprintf("%v", this.Installed) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringTypes(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *SnatConnectorType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SnatConnectorType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SnatConnectorType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultGwSnat", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.RoutingChoice = &SnatConnectorType_DefaultGwSnat{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DynamicRouting", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.RoutingChoice = &SnatConnectorType_DynamicRouting{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InterfaceIp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.PoolChoice = &SnatConnectorType_InterfaceIp{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SnatPool", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PoolChoice = &SnatConnectorType_SnatPool{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SnatPoolAllocator", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema_views.ObjectRefType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.PoolChoice = &SnatConnectorType_SnatPoolAllocator{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GlobalSnatConnectorType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GlobalSnatConnectorType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GlobalSnatConnectorType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GlobalVn", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.GlobalVn == nil {
				m.GlobalVn = &ves_io_schema_views.ObjectRefType{}
			}
			if err := m.GlobalVn.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SnatConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SnatConfig == nil {
				m.SnatConfig = &SnatConnectorType{}
			}
			if err := m.SnatConfig.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DynamicReverseProxyListType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DynamicReverseProxyListType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DynamicReverseProxyListType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Drps", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Drps = append(m.Drps, &ves_io_schema_views.ObjectRefType{})
			if err := m.Drps[len(m.Drps)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GlobalSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GlobalSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GlobalSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConnectorType", wireType)
			}
			m.ConnectorType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ConnectorType |= (NetworkConnectorType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutsideNetworkType", wireType)
			}
			m.OutsideNetworkType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OutsideNetworkType |= (ves_io_schema3.VirtualNetworkType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutsideNetwork", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OutsideNetwork = append(m.OutsideNetwork, &ves_io_schema4.ObjectRefType{})
			if err := m.OutsideNetwork[len(m.OutsideNetwork)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InsideNetworkType", wireType)
			}
			m.InsideNetworkType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InsideNetworkType |= (ves_io_schema3.VirtualNetworkType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InsideNetwork", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InsideNetwork = append(m.InsideNetwork, &ves_io_schema4.ObjectRefType{})
			if err := m.InsideNetwork[len(m.InsideNetwork)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SnatPoolType", wireType)
			}
			m.SnatPoolType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SnatPoolType |= (NetworkConnectorSNATPoolType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NatPool", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NatPool = append(m.NatPool, &ves_io_schema3.Ipv4SubnetType{})
			if err := m.NatPool[len(m.NatPool)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProxyType", wireType)
			}
			m.ProxyType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ProxyType |= (NetworkConnectorProxyType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DynamicReverseProxy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DynamicReverseProxy = append(m.DynamicReverseProxy, &ves_io_schema4.ObjectRefType{})
			if err := m.DynamicReverseProxy[len(m.DynamicReverseProxy)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ForwardProxy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ForwardProxy == nil {
				m.ForwardProxy = &ves_io_schema4.ForwardProxyConfigType{}
			}
			if err := m.ForwardProxy.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SliToSloSnat", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &SnatConnectorType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ConnectorChoice = &CreateSpecType_SliToSloSnat{v}
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SliToSloDr", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ConnectorChoice = &CreateSpecType_SliToSloDr{v}
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SliToGlobalDr", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema_views.GlobalConnectorType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ConnectorChoice = &CreateSpecType_SliToGlobalDr{v}
			iNdEx = postIndex
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SliToGlobalSnat", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &GlobalSnatConnectorType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ConnectorChoice = &CreateSpecType_SliToGlobalSnat{v}
			iNdEx = postIndex
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SloToGlobalDr", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema_views.GlobalConnectorType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ConnectorChoice = &CreateSpecType_SloToGlobalDr{v}
			iNdEx = postIndex
		case 22:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SloToGlobalSnat", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &GlobalSnatConnectorType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ConnectorChoice = &CreateSpecType_SloToGlobalSnat{v}
			iNdEx = postIndex
		case 24:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisableForwardProxy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ForwardProxyChoice = &CreateSpecType_DisableForwardProxy{v}
			iNdEx = postIndex
		case 25:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnableForwardProxy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.ForwardProxyConfigType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ForwardProxyChoice = &CreateSpecType_EnableForwardProxy{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplaceSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplaceSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplaceSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SliToSloSnat", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &SnatConnectorType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ConnectorChoice = &ReplaceSpecType_SliToSloSnat{v}
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SliToSloDr", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ConnectorChoice = &ReplaceSpecType_SliToSloDr{v}
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SliToGlobalDr", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema_views.GlobalConnectorType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ConnectorChoice = &ReplaceSpecType_SliToGlobalDr{v}
			iNdEx = postIndex
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SliToGlobalSnat", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &GlobalSnatConnectorType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ConnectorChoice = &ReplaceSpecType_SliToGlobalSnat{v}
			iNdEx = postIndex
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SloToGlobalDr", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema_views.GlobalConnectorType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ConnectorChoice = &ReplaceSpecType_SloToGlobalDr{v}
			iNdEx = postIndex
		case 22:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SloToGlobalSnat", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &GlobalSnatConnectorType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ConnectorChoice = &ReplaceSpecType_SloToGlobalSnat{v}
			iNdEx = postIndex
		case 24:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisableForwardProxy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ForwardProxyChoice = &ReplaceSpecType_DisableForwardProxy{v}
			iNdEx = postIndex
		case 25:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnableForwardProxy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.ForwardProxyConfigType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ForwardProxyChoice = &ReplaceSpecType_EnableForwardProxy{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SliToSloSnat", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &SnatConnectorType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ConnectorChoice = &GetSpecType_SliToSloSnat{v}
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SliToSloDr", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ConnectorChoice = &GetSpecType_SliToSloDr{v}
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SliToGlobalDr", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema_views.GlobalConnectorType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ConnectorChoice = &GetSpecType_SliToGlobalDr{v}
			iNdEx = postIndex
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SliToGlobalSnat", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &GlobalSnatConnectorType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ConnectorChoice = &GetSpecType_SliToGlobalSnat{v}
			iNdEx = postIndex
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SloToGlobalDr", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema_views.GlobalConnectorType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ConnectorChoice = &GetSpecType_SloToGlobalDr{v}
			iNdEx = postIndex
		case 22:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SloToGlobalSnat", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &GlobalSnatConnectorType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ConnectorChoice = &GetSpecType_SloToGlobalSnat{v}
			iNdEx = postIndex
		case 24:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisableForwardProxy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ForwardProxyChoice = &GetSpecType_DisableForwardProxy{v}
			iNdEx = postIndex
		case 25:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnableForwardProxy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ves_io_schema4.ForwardProxyConfigType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ForwardProxyChoice = &GetSpecType_EnableForwardProxy{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NetworkConnectorStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NetworkConnectorStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NetworkConnectorStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Installed", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Installed = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTypes(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthTypes
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipTypes(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthTypes = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTypes   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("ves.io/schema/network_connector/types.proto", fileDescriptorTypes) }
func init() {
	golang_proto.RegisterFile("ves.io/schema/network_connector/types.proto", fileDescriptorTypes)
}

var fileDescriptorTypes = []byte{
	// 1535 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x58, 0xcd, 0x6f, 0x1a, 0xc7,
	0x1b, 0x66, 0xf8, 0x30, 0x78, 0x6c, 0xc3, 0x32, 0x76, 0x62, 0x8c, 0x6d, 0xec, 0x38, 0xca, 0x2f,
	0xfe, 0x39, 0x04, 0x6a, 0xf2, 0x1d, 0xa9, 0x91, 0xc0, 0xc6, 0x1f, 0x34, 0x05, 0x6b, 0x21, 0x71,
	0xdd, 0x1c, 0xb6, 0x0b, 0x0c, 0x78, 0x93, 0xf5, 0xce, 0x76, 0x77, 0xc0, 0x71, 0x25, 0x4b, 0x95,
	0xaf, 0x55, 0xa5, 0xaa, 0x7f, 0x43, 0x0f, 0x55, 0xfe, 0x82, 0xaa, 0xf4, 0x60, 0xb5, 0x97, 0xa8,
	0x27, 0x5f, 0x2a, 0xe5, 0xd8, 0x90, 0x4b, 0x7a, 0xcb, 0xb1, 0xc7, 0x6a, 0x67, 0x17, 0xcc, 0x42,
	0xfc, 0x91, 0xb4, 0x97, 0x48, 0xbe, 0x2d, 0xfb, 0xbe, 0xf3, 0x3c, 0xef, 0xf3, 0xee, 0x3e, 0xef,
	0xec, 0x00, 0xaf, 0xd4, 0xb1, 0x1e, 0x93, 0x48, 0x5c, 0x2f, 0x6d, 0xe2, 0x2d, 0x31, 0xae, 0x60,
	0xba, 0x4d, 0xb4, 0x27, 0x42, 0x89, 0x28, 0x0a, 0x2e, 0x51, 0xa2, 0xc5, 0xe9, 0x8e, 0x8a, 0xf5,
	0x98, 0xaa, 0x11, 0x4a, 0xd0, 0x94, 0x99, 0x1c, 0x33, 0x93, 0x63, 0x3d, 0xc9, 0xe1, 0xab, 0x55,
	0x89, 0x6e, 0xd6, 0x8a, 0xb1, 0x12, 0xd9, 0x8a, 0x57, 0x49, 0x95, 0xc4, 0xd9, 0xba, 0x62, 0xad,
	0xc2, 0x7e, 0xb1, 0x1f, 0xec, 0xca, 0xc4, 0x0b, 0x4f, 0x55, 0x09, 0xa9, 0xca, 0xf8, 0x30, 0x8b,
	0x4a, 0x5b, 0x58, 0xa7, 0xe2, 0x96, 0x6a, 0x25, 0x8c, 0xf6, 0x54, 0x67, 0x05, 0xc6, 0xed, 0x01,
	0xa2, 0x52, 0x89, 0x28, 0x56, 0x99, 0xe1, 0x49, 0x7b, 0x50, 0xad, 0x53, 0xa1, 0x43, 0x45, 0x78,
	0xcc, 0x1e, 0xee, 0x0c, 0x4d, 0xd8, 0x43, 0x75, 0x51, 0x96, 0xca, 0x22, 0xc5, 0x56, 0x74, 0xba,
	0x2b, 0x2a, 0xe1, 0x6d, 0xc1, 0xce, 0x3c, 0xd5, 0x9b, 0xa1, 0x77, 0x12, 0xcc, 0x3c, 0x77, 0xc1,
	0x60, 0x5e, 0x11, 0xe9, 0x42, 0xab, 0x65, 0x85, 0x1d, 0x15, 0xa3, 0x7b, 0x30, 0x50, 0xc6, 0x15,
	0xb1, 0x26, 0x53, 0xa1, 0xba, 0x2d, 0xe8, 0x8a, 0x48, 0x43, 0xce, 0x69, 0x30, 0x3b, 0x90, 0x18,
	0x89, 0xd9, 0x3b, 0x9e, 0xde, 0x52, 0xe9, 0xce, 0x8a, 0x83, 0x1f, 0xb2, 0xd2, 0x97, 0xb7, 0x0d,
	0x30, 0xb4, 0x02, 0x03, 0xe5, 0x1d, 0x45, 0xdc, 0x92, 0x4a, 0x82, 0x46, 0x6a, 0x54, 0x52, 0xaa,
	0x21, 0xd7, 0xd1, 0xeb, 0x53, 0xde, 0x17, 0xbb, 0xe0, 0x75, 0x03, 0x80, 0x15, 0x07, 0xef, 0xb7,
	0xd6, 0xf1, 0xe6, 0x32, 0x74, 0x07, 0x0e, 0x4a, 0x0a, 0xc5, 0x5a, 0x45, 0x2c, 0x61, 0x41, 0x52,
	0x43, 0x9e, 0x63, 0xca, 0x00, 0xfc, 0x40, 0x3b, 0x77, 0x55, 0x45, 0x73, 0xb0, 0xdf, 0xa8, 0x5c,
	0x50, 0x09, 0x91, 0x43, 0x7d, 0xd3, 0x60, 0xb6, 0x3f, 0x35, 0x60, 0x11, 0xfd, 0xdd, 0x00, 0x8e,
	0x15, 0xc0, 0xfb, 0x8c, 0xf8, 0x1a, 0x21, 0x32, 0xfa, 0x12, 0x0e, 0xb7, 0x73, 0x05, 0x51, 0x96,
	0x49, 0x49, 0xa4, 0x44, 0x0b, 0x79, 0x19, 0xdb, 0x4c, 0x17, 0x1b, 0xeb, 0x62, 0x2c, 0x57, 0x7c,
	0x8c, 0x4b, 0x94, 0xc7, 0x15, 0xa3, 0x63, 0xa9, 0xf1, 0x67, 0xbb, 0x41, 0xb1, 0x5c, 0xd6, 0xb0,
	0xae, 0x1f, 0xae, 0x6f, 0xc9, 0x02, 0x7c, 0xb0, 0xc5, 0x94, 0x6c, 0xc5, 0x52, 0x17, 0xa0, 0xdf,
	0xea, 0x8d, 0x50, 0xda, 0x24, 0x52, 0x09, 0xa3, 0xc0, 0x7e, 0x03, 0x38, 0x0f, 0x1a, 0x00, 0x34,
	0x1b, 0xc0, 0x95, 0x88, 0x5e, 0x4b, 0x4d, 0xc3, 0x01, 0x56, 0x90, 0x15, 0x0f, 0xee, 0x37, 0x80,
	0xe7, 0xa0, 0x01, 0xdc, 0xcd, 0x06, 0xf0, 0xdc, 0x88, 0xde, 0x8c, 0xde, 0xca, 0xb8, 0x7d, 0x80,
	0x73, 0x66, 0xdc, 0x3e, 0x37, 0xe7, 0x99, 0xf9, 0x0d, 0xc0, 0xd1, 0x65, 0x99, 0x14, 0x45, 0xb9,
	0xf7, 0x81, 0xe6, 0x61, 0x7f, 0x95, 0x85, 0x84, 0xba, 0x12, 0x02, 0xa7, 0x56, 0x85, 0x9e, 0xed,
	0x06, 0xea, 0x92, 0x46, 0x6b, 0xa2, 0x2c, 0x58, 0xe6, 0xe2, 0x7d, 0x26, 0xd0, 0x43, 0x05, 0xe5,
	0xe1, 0x00, 0x6b, 0x5a, 0x89, 0x28, 0x15, 0xa9, 0x6a, 0xbd, 0x21, 0x89, 0xd8, 0x09, 0x9e, 0x8c,
	0xf5, 0x54, 0xc7, 0x43, 0xdd, 0xbc, 0x55, 0x91, 0xaa, 0x33, 0x5f, 0xc1, 0xf1, 0x45, 0xeb, 0x15,
	0xc0, 0x75, 0xac, 0xe9, 0x78, 0x4d, 0x23, 0x4f, 0x77, 0xee, 0x4b, 0x3a, 0x65, 0x42, 0x1e, 0x41,
	0x77, 0x59, 0x53, 0xf5, 0x10, 0x98, 0x76, 0x9d, 0x52, 0xc3, 0xc5, 0x67, 0xbb, 0x83, 0x2d, 0x0d,
	0x9b, 0x44, 0xa7, 0x3f, 0xff, 0xb5, 0xef, 0xf2, 0x7c, 0x0f, 0x9c, 0x1c, 0x68, 0x5d, 0xf9, 0x00,
	0xcf, 0x40, 0x67, 0xfe, 0xf0, 0x42, 0xbf, 0xd5, 0x41, 0x15, 0x97, 0x18, 0xdf, 0x63, 0xe8, 0x6f,
	0x57, 0xce, 0x4c, 0xcb, 0xba, 0xe7, 0x4f, 0xdc, 0x38, 0x51, 0x66, 0xd6, 0xbc, 0x63, 0x53, 0x9a,
	0x1a, 0x34, 0x38, 0xbd, 0x7b, 0xc0, 0x1d, 0x76, 0x3a, 0x9c, 0xfc, 0x50, 0xc9, 0xf6, 0x90, 0xca,
	0x70, 0x84, 0xd4, 0xa8, 0x2e, 0x95, 0x71, 0xab, 0xd9, 0x26, 0xa3, 0x93, 0x31, 0x5e, 0xe8, 0x62,
	0x7c, 0x68, 0x6a, 0xb2, 0x68, 0x18, 0x7a, 0xc0, 0x40, 0x87, 0x7b, 0xc0, 0x1b, 0xf6, 0x38, 0x80,
	0xd3, 0xe5, 0xe6, 0x91, 0x85, 0xd7, 0x91, 0x84, 0x4a, 0x30, 0xd0, 0xc5, 0x12, 0x72, 0xb1, 0x66,
	0x4e, 0x74, 0x11, 0xd8, 0xdb, 0x38, 0xd1, 0xfb, 0x2a, 0x1c, 0x76, 0x92, 0xf7, 0xdb, 0x89, 0xd0,
	0x17, 0x70, 0x58, 0x52, 0x7a, 0x95, 0xb8, 0x4f, 0xab, 0x64, 0xc8, 0xc0, 0xf6, 0xed, 0x01, 0x4f,
	0xd8, 0xe5, 0x00, 0x4e, 0x3e, 0x68, 0x82, 0x75, 0xca, 0x10, 0xa1, 0xdf, 0xce, 0x10, 0xf2, 0xfc,
	0x6b, 0x15, 0x43, 0x36, 0x1a, 0xa4, 0x42, 0xff, 0xe1, 0x50, 0x60, 0xf5, 0xf7, 0xb1, 0xfa, 0x3f,
	0x7e, 0xe7, 0x67, 0x9f, 0xcf, 0x26, 0x0b, 0x86, 0xfb, 0x59, 0x0d, 0x03, 0x06, 0x63, 0xdf, 0x1e,
	0x70, 0x85, 0x81, 0x83, 0x1f, 0x6c, 0x0d, 0x06, 0x26, 0x2a, 0x09, 0x7d, 0xed, 0x89, 0xe5, 0x65,
	0x72, 0x26, 0xbb, 0xb8, 0x56, 0xd5, 0xfa, 0xf5, 0x7c, 0xad, 0xa8, 0x60, 0x66, 0x87, 0xf6, 0xe4,
	0xe4, 0xbd, 0xad, 0x49, 0xb6, 0x01, 0xa1, 0x6a, 0x38, 0xc6, 0x2c, 0xd8, 0xc7, 0x0a, 0xbe, 0xfb,
	0xce, 0x05, 0x33, 0xd3, 0x31, 0x6f, 0xf6, 0xab, 0xad, 0x4b, 0xf4, 0x04, 0x9e, 0x6b, 0x4f, 0x75,
	0xd3, 0x9b, 0x02, 0x0b, 0x86, 0xfa, 0x4f, 0xd1, 0xf9, 0xb1, 0x23, 0x6d, 0xc8, 0x0f, 0x97, 0x7b,
	0x0d, 0x8f, 0x32, 0x70, 0xa8, 0x42, 0xb4, 0x6d, 0x51, 0x2b, 0x5b, 0x24, 0x90, 0x8d, 0x97, 0x4b,
	0x5d, 0x24, 0x4b, 0x66, 0x0e, 0x5b, 0x63, 0x4e, 0x10, 0x56, 0xf5, 0x60, 0xa5, 0xe3, 0xfe, 0x4c,
	0xc3, 0x0b, 0xfd, 0x0b, 0x1a, 0x16, 0x29, 0x6e, 0xfb, 0xfa, 0x11, 0x0c, 0xe8, 0xb2, 0x24, 0x50,
	0x22, 0xe8, 0x32, 0x31, 0x77, 0xb8, 0xe0, 0xfb, 0xce, 0xaf, 0x15, 0xe3, 0x31, 0xca, 0x52, 0x81,
	0xe4, 0x65, 0xc2, 0xb6, 0xbf, 0x14, 0x1c, 0xea, 0x00, 0x2f, 0x6b, 0x21, 0x74, 0xba, 0xcd, 0x0f,
	0xb6, 0x50, 0x16, 0x35, 0x94, 0x87, 0x9c, 0x85, 0x61, 0x0d, 0xee, 0xb2, 0x16, 0x1a, 0x66, 0x30,
	0xb3, 0x6f, 0x1d, 0x7a, 0xe6, 0xdc, 0xea, 0xae, 0x6b, 0x88, 0x21, 0x9a, 0xb1, 0x45, 0x0d, 0xa9,
	0x10, 0xd9, 0x41, 0x99, 0xf0, 0x11, 0x06, 0x7b, 0xfb, 0x44, 0xe1, 0x47, 0x6c, 0x2e, 0x9d, 0x0a,
	0x02, 0x1d, 0x7c, 0xac, 0x15, 0x4c, 0x06, 0xb1, 0xcb, 0x38, 0xf7, 0x3e, 0x32, 0x48, 0xb7, 0x0c,
	0xd2, 0x2d, 0xe3, 0xfc, 0x7f, 0x2a, 0x83, 0xd8, 0x64, 0x64, 0xe0, 0xb9, 0xb2, 0xa4, 0x8b, 0x45,
	0x19, 0x0b, 0xf6, 0xb7, 0x32, 0x74, 0xec, 0xf7, 0xc8, 0xb0, 0xb5, 0xa8, 0xf3, 0x2d, 0x45, 0x1b,
	0x70, 0x04, 0x2b, 0x6f, 0x81, 0x1a, 0x7b, 0x87, 0x17, 0x7c, 0x05, 0xf0, 0xc8, 0x04, 0xe9, 0x8c,
	0xdf, 0x5d, 0xff, 0xfd, 0x5e, 0xd7, 0x06, 0xf6, 0x6b, 0x03, 0xa4, 0xe0, 0x25, 0x38, 0x65, 0x19,
	0x7c, 0xba, 0x2d, 0x79, 0xda, 0x04, 0xab, 0x69, 0xa2, 0xf1, 0xbd, 0x88, 0x9c, 0xf3, 0x37, 0xe1,
	0x18, 0x1c, 0x66, 0x30, 0xdd, 0xa1, 0xc4, 0xb5, 0xd4, 0x3c, 0xe4, 0x0e, 0xb7, 0x41, 0xeb, 0x73,
	0x64, 0x72, 0xbf, 0x01, 0x82, 0x07, 0x0d, 0xc0, 0x35, 0x1b, 0x20, 0x38, 0x7f, 0x2b, 0x3a, 0x7f,
	0x3b, 0x3a, 0x7f, 0x27, 0x9a, 0xf8, 0x28, 0x9a, 0x98, 0x8f, 0x26, 0x12, 0xa9, 0xff, 0xc3, 0x11,
	0x9b, 0xbe, 0xce, 0xaf, 0x98, 0xd0, 0x41, 0x03, 0x8c, 0x1a, 0x5f, 0x31, 0x89, 0xeb, 0xd1, 0xc4,
	0x8d, 0x8c, 0xdb, 0xc7, 0x71, 0xc1, 0x8c, 0xdb, 0x37, 0xca, 0x85, 0x32, 0x6e, 0x5f, 0x98, 0x1b,
	0xcf, 0xb8, 0x7d, 0xe3, 0xdc, 0x44, 0xc6, 0xed, 0x9b, 0xe0, 0x26, 0x67, 0x7e, 0xf1, 0xc2, 0x00,
	0x8f, 0x55, 0x59, 0x2c, 0x9d, 0xd9, 0xf7, 0xcc, 0xbe, 0x67, 0xf6, 0xfd, 0xc0, 0xec, 0xfb, 0x93,
	0x17, 0x0e, 0x2c, 0x63, 0x7a, 0x66, 0xdd, 0x33, 0xeb, 0x9e, 0x59, 0xf7, 0xc3, 0xb2, 0xee, 0x4d,
	0x78, 0xbe, 0xe7, 0x24, 0x43, 0x45, 0x5a, 0xd3, 0xd1, 0x04, 0xec, 0x97, 0x14, 0x9d, 0x8a, 0xb2,
	0x8c, 0xcb, 0xec, 0x44, 0xdc, 0xcf, 0x1f, 0xde, 0x98, 0xfb, 0x01, 0xc0, 0x91, 0xb7, 0x1d, 0x7f,
	0x51, 0x1c, 0x5e, 0xc9, 0xa6, 0x0b, 0xeb, 0x39, 0xfe, 0x13, 0x61, 0x21, 0x97, 0xcd, 0xa6, 0x17,
	0x0a, 0x39, 0x5e, 0x28, 0x6c, 0xac, 0xa5, 0x85, 0xc5, 0xf4, 0x52, 0xf2, 0xc1, 0xfd, 0x82, 0xb0,
	0x9c, 0x2c, 0xa4, 0xd7, 0x93, 0x1b, 0x82, 0x71, 0x62, 0xe2, 0x1c, 0xc7, 0x2d, 0xd8, 0xc8, 0x26,
	0x3f, 0x5d, 0x5d, 0xb0, 0x2f, 0x00, 0x68, 0x0e, 0xfe, 0xef, 0x74, 0x0b, 0x38, 0xe7, 0x5c, 0x0d,
	0x4e, 0x1c, 0x77, 0x50, 0x43, 0x51, 0x38, 0xdb, 0x8b, 0x65, 0x64, 0x08, 0xf9, 0xd5, 0x35, 0xe1,
	0x41, 0x3e, 0x2d, 0xac, 0x66, 0x0b, 0x69, 0x7e, 0x29, 0xb9, 0x90, 0xe6, 0x1c, 0xe8, 0x32, 0xbc,
	0x78, 0x42, 0xf6, 0x5a, 0x2e, 0x77, 0x9f, 0x03, 0x73, 0xdf, 0x02, 0x38, 0x76, 0xe4, 0x79, 0x0b,
	0x45, 0x60, 0xb8, 0x17, 0x26, 0x9b, 0x13, 0xd6, 0xf8, 0xdc, 0x67, 0x1b, 0x9c, 0x03, 0x5d, 0x81,
	0x97, 0x7b, 0xe3, 0x2d, 0x6d, 0x7c, 0xfa, 0x61, 0x9a, 0x37, 0x98, 0x58, 0x32, 0x40, 0x17, 0xe1,
	0x54, 0x6f, 0xf2, 0x52, 0x8e, 0x5f, 0x4f, 0xf2, 0x8b, 0x56, 0x92, 0x33, 0xf5, 0x0d, 0x38, 0x78,
	0x19, 0x71, 0xbc, 0x78, 0x19, 0x71, 0xbc, 0x79, 0x19, 0x01, 0x5f, 0x37, 0x23, 0xe0, 0xc7, 0x66,
	0x04, 0x3c, 0x6f, 0x46, 0xc0, 0x41, 0x33, 0x02, 0x5e, 0x34, 0x23, 0xe0, 0xcf, 0x66, 0x04, 0xbc,
	0x6e, 0x46, 0x1c, 0x6f, 0x9a, 0x11, 0xf0, 0xdd, 0xab, 0x88, 0x63, 0xff, 0x55, 0x04, 0x7c, 0xfe,
	0xa0, 0x4a, 0xd4, 0x27, 0xd5, 0x58, 0x9d, 0xc8, 0x14, 0x6b, 0x9a, 0x18, 0xab, 0xe9, 0x71, 0x76,
	0x51, 0x21, 0xda, 0xd6, 0x55, 0x55, 0x23, 0x75, 0xa9, 0x8c, 0xb5, 0xab, 0xad, 0x70, 0x5c, 0x2d,
	0x56, 0x49, 0x1c, 0x3f, 0xa5, 0xd6, 0x3f, 0x91, 0x47, 0xfd, 0xbd, 0x5b, 0xec, 0x63, 0xff, 0x4b,
	0x5e, 0xfb, 0x27, 0x00, 0x00, 0xff, 0xff, 0xf9, 0x84, 0xa6, 0xc9, 0x08, 0x16, 0x00, 0x00,
}
